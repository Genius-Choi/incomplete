[
    {
        "line": 6,
        "fullcodeline": "ptls_t *tls = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "assert(remote_addr != NULL && remote_addr->sa_family != AF_UNSPEC);"
    },
    {
        "line": 27,
        "fullcodeline": "memset(conn, 0, sizeof(*conn));"
    },
    {
        "line": 28,
        "fullcodeline": "conn->super.ctx = ctx;"
    },
    {
        "line": 29,
        "fullcodeline": "conn->super.data = appdata;"
    },
    {
        "line": 30,
        "fullcodeline": "lock_now(conn, 0);"
    },
    {
        "line": 32,
        "fullcodeline": "conn->super.stats.handshake_confirmed_msec = UINT64_MAX;"
    },
    {
        "line": 33,
        "fullcodeline": "set_address(&conn->super.local.address, local_addr);"
    },
    {
        "line": 34,
        "fullcodeline": "set_address(&conn->super.remote.address, remote_addr);"
    },
    {
        "line": 35,
        "fullcodeline": "quicly_local_cid_init_set(&conn->super.local.cid_set, ctx->cid_encryptor, local_cid);"
    },
    {
        "line": 37,
        "fullcodeline": "quicly_remote_cid_init_set(&conn->super.remote.cid_set, remote_cid, ctx->tls->random_bytes);"
    },
    {
        "line": 38,
        "fullcodeline": "conn->super.state = QUICLY_STATE_FIRSTFLIGHT;"
    },
    {
        "line": 50,
        "fullcodeline": "conn->super.remote.transport_params = default_transport_params;"
    },
    {
        "line": 51,
        "fullcodeline": "conn->super.version = protocol_version;"
    },
    {
        "line": 52,
        "fullcodeline": "conn->super.remote.largest_retire_prior_to = 0;"
    },
    {
        "line": 55,
        "fullcodeline": "conn->streams = kh_init(quicly_stream_t);"
    },
    {
        "line": 62,
        "fullcodeline": "conn->egress.next_pn_to_skip ="
    },
    {
        "line": 64,
        "fullcodeline": "conn->egress.max_udp_payload_size = conn->super.ctx->initial_egress_max_udp_payload_size;"
    },
    {
        "line": 67,
        "fullcodeline": "conn->egress.ack_frequency.update_at = INT64_MAX;"
    },
    {
        "line": 68,
        "fullcodeline": "conn->egress.send_ack_at = INT64_MAX;"
    },
    {
        "line": 69,
        "fullcodeline": "conn->super.ctx->init_cc->cb(conn->super.ctx->init_cc, &conn->egress.cc, initcwnd, conn->stash.now);"
    },
    {
        "line": 70,
        "fullcodeline": "conn->egress.ecn.state = conn->super.ctx->enable_ecn ? QUICLY_ECN_PROBING : QUICLY_ECN_OFF;"
    },
    {
        "line": 76,
        "fullcodeline": "conn->crypto.tls = tls;"
    },
    {
        "line": 85,
        "fullcodeline": "conn->crypto.handshake_properties.collect_extension = collect_transport_parameters;"
    },
    {
        "line": 86,
        "fullcodeline": "conn->retry_scid.len = UINT8_MAX;"
    },
    {
        "line": 87,
        "fullcodeline": "conn->idle_timeout.at = INT64_MAX;"
    },
    {
        "line": 88,
        "fullcodeline": "conn->idle_timeout.should_rearm_on_send = 1;"
    },
    {
        "line": 89,
        "fullcodeline": "conn->stash.on_ack_stream.active_acked_cache.stream_id = INT64_MIN;"
    },
    {
        "line": 91,
        "fullcodeline": "*ptls_get_data_ptr(tls) = conn;"
    },
    {
        "line": 93,
        "fullcodeline": "update_open_count(conn->super.ctx, 1);"
    },
    {
        "line": 11,
        "fullcodeline": "if (ctx->transport_params.max_datagram_frame_size != 0)"
    },
    {
        "line": 15,
        "fullcodeline": "if ((tls = ptls_new(ctx->tls, server_name == NULL)) == NULL)"
    },
    {
        "line": 17,
        "fullcodeline": "if (server_name != NULL && ptls_set_server_name(tls, server_name, strlen(server_name)) != 0) {"
    },
    {
        "line": 23,
        "fullcodeline": "if ((conn = malloc(sizeof(*conn))) == NULL) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (server_name != NULL) {"
    },
    {
        "line": 63,
        "fullcodeline": "calc_next_pn_to_skip(conn->super.ctx->tls, 0, initcwnd, conn->super.ctx->initial_egress_max_udp_payload_size);"
    },
    {
        "line": 77,
        "fullcodeline": "if (handshake_properties != NULL) {"
    },
    {
        "line": 12,
        "fullcodeline": "assert(ctx->receive_datagram_frame != NULL);"
    },
    {
        "line": 18,
        "fullcodeline": "ptls_free(tls);"
    },
    {
        "line": 24,
        "fullcodeline": "ptls_free(tls);"
    },
    {
        "line": 40,
        "fullcodeline": "conn->super.local.bidi.next_stream_id = 0;"
    },
    {
        "line": 41,
        "fullcodeline": "conn->super.local.uni.next_stream_id = 2;"
    },
    {
        "line": 42,
        "fullcodeline": "conn->super.remote.bidi.next_stream_id = 1;"
    },
    {
        "line": 43,
        "fullcodeline": "conn->super.remote.uni.next_stream_id = 3;"
    },
    {
        "line": 78,
        "fullcodeline": "assert(handshake_properties->additional_extensions == NULL);"
    },
    {
        "line": 79,
        "fullcodeline": "assert(handshake_properties->collect_extension == NULL);"
    },
    {
        "line": 80,
        "fullcodeline": "assert(handshake_properties->collected_extensions == NULL);"
    },
    {
        "line": 45,
        "fullcodeline": "conn->super.local.bidi.next_stream_id = 1;"
    },
    {
        "line": 46,
        "fullcodeline": "conn->super.local.uni.next_stream_id = 3;"
    },
    {
        "line": 47,
        "fullcodeline": "conn->super.remote.bidi.next_stream_id = 0;"
    },
    {
        "line": 48,
        "fullcodeline": "conn->super.remote.uni.next_stream_id = 2;"
    },
    {
        "line": 83,
        "fullcodeline": "conn->crypto.handshake_properties = (ptls_handshake_properties_t){{{{NULL}}}};"
    }
]