[
    {
        "line": 19,
        "fullcodeline": "if (should_send_max_data(conn)) {"
    },
    {
        "line": 42,
        "fullcodeline": "size_t i, size = quicly_local_cid_get_size(&conn->super.local.cid_set);"
    },
    {
        "line": 57,
        "fullcodeline": "size_t i, size = quicly_retire_cid_get_num_pending(&conn->egress.retire_cid);"
    },
    {
        "line": 13,
        "fullcodeline": "if ((ret = send_max_streams(conn, 1, s)) != 0)"
    },
    {
        "line": 15,
        "fullcodeline": "if ((ret = send_max_streams(conn, 0, s)) != 0)"
    },
    {
        "line": 23,
        "fullcodeline": "uint64_t new_value = conn->ingress.max_data.bytes_consumed + conn->super.ctx->transport_params.max_data;"
    },
    {
        "line": 24,
        "fullcodeline": "s->dst = quicly_encode_max_data_frame(s->dst, new_value);"
    },
    {
        "line": 25,
        "fullcodeline": "quicly_maxsender_record(&conn->ingress.max_data.sender, new_value, &sent->data.max_data.args);"
    },
    {
        "line": 27,
        "fullcodeline": "QUICLY_PROBE(MAX_DATA_SEND, conn, conn->stash.now, new_value);"
    },
    {
        "line": 32,
        "fullcodeline": "if (conn->egress.data_blocked == QUICLY_SENDER_STATE_SEND && (ret = send_data_blocked(conn, s)) != 0)"
    },
    {
        "line": 36,
        "fullcodeline": "if ((ret = send_streams_blocked(conn, 1, s)) != 0)"
    },
    {
        "line": 38,
        "fullcodeline": "if ((ret = send_streams_blocked(conn, 0, s)) != 0)"
    },
    {
        "line": 43,
        "fullcodeline": "for (i = 0; i < size; i++) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (ret != 0)"
    },
    {
        "line": 58,
        "fullcodeline": "for (i = 0; i < size; i++) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (ret != 0)"
    },
    {
        "line": 7,
        "fullcodeline": "if ((ret = send_path_challenge(conn, s, 1, conn->egress.path_response.data)) != 0)"
    },
    {
        "line": 45,
        "fullcodeline": "struct st_quicly_local_cid_t *c = &conn->super.local.cid_set.cids[i];"
    },
    {
        "line": 59,
        "fullcodeline": "uint64_t sequence = conn->egress.retire_cid.sequences[i];"
    },
    {
        "line": 21,
        "fullcodeline": "if ((ret = allocate_ack_eliciting_frame(conn, s, QUICLY_MAX_DATA_FRAME_CAPACITY, &sent, on_ack_max_data)) != 0)"
    },
    {
        "line": 46,
        "fullcodeline": "if (c->state != QUICLY_LOCAL_CID_STATE_PENDING)"
    },
    {
        "line": 48,
        "fullcodeline": "if ((ret = send_new_connection_id(conn, s, c)) != 0)"
    },
    {
        "line": 60,
        "fullcodeline": "if ((ret = send_retire_connection_id(conn, s, sequence)) != 0)"
    }
]