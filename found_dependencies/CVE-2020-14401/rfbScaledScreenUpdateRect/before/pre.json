[
    {
        "line": 11,
        "fullcodeline": "x1 = x0;"
    },
    {
        "line": 12,
        "fullcodeline": "y1 = y0;"
    },
    {
        "line": 13,
        "fullcodeline": "w1 = w0;"
    },
    {
        "line": 14,
        "fullcodeline": "h1 = h0;"
    },
    {
        "line": 16,
        "fullcodeline": "rfbScaledCorrection(screen, ptr, &x1, &y1, &w1, &h1, \"rfbScaledScreenUpdateRect\");"
    },
    {
        "line": 17,
        "fullcodeline": "x0 = ScaleX(ptr, screen, x1);"
    },
    {
        "line": 18,
        "fullcodeline": "y0 = ScaleY(ptr, screen, y1);"
    },
    {
        "line": 22,
        "fullcodeline": "bitsPerPixel = screen->bitsPerPixel;"
    },
    {
        "line": 23,
        "fullcodeline": "bytesPerPixel = bitsPerPixel / 8;"
    },
    {
        "line": 24,
        "fullcodeline": "bytesPerLine = w1 * bytesPerPixel;"
    },
    {
        "line": 25,
        "fullcodeline": "srcptr = (unsigned char *)(screen->frameBuffer +"
    },
    {
        "line": 27,
        "fullcodeline": "dstptr = (unsigned char *)(ptr->frameBuffer +"
    },
    {
        "line": 30,
        "fullcodeline": "areaX = ScaleX(ptr,screen,1);"
    },
    {
        "line": 31,
        "fullcodeline": "areaY = ScaleY(ptr,screen,1);"
    },
    {
        "line": 32,
        "fullcodeline": "area2 = areaX*areaY;"
    },
    {
        "line": 9,
        "fullcodeline": "if (screen==ptr) return;"
    },
    {
        "line": 19,
        "fullcodeline": "w0 = ScaleX(ptr, screen, w1);"
    },
    {
        "line": 20,
        "fullcodeline": "h0 = ScaleY(ptr, screen, h1);"
    },
    {
        "line": 36,
        "fullcodeline": "if ((x1+w1) > (ptr->width))"
    },
    {
        "line": 40,
        "fullcodeline": "if ((y1+h1) > (ptr->height))"
    },
    {
        "line": 53,
        "fullcodeline": "unsigned int redShift = screen->serverFormat.redShift;"
    },
    {
        "line": 54,
        "fullcodeline": "unsigned int greenShift = screen->serverFormat.greenShift;"
    },
    {
        "line": 55,
        "fullcodeline": "unsigned int blueShift = screen->serverFormat.blueShift;"
    },
    {
        "line": 56,
        "fullcodeline": "unsigned long redMax = screen->serverFormat.redMax;"
    },
    {
        "line": 57,
        "fullcodeline": "unsigned long greenMax = screen->serverFormat.greenMax;"
    },
    {
        "line": 58,
        "fullcodeline": "unsigned long blueMax = screen->serverFormat.blueMax;"
    },
    {
        "line": 38,
        "fullcodeline": "if (x1==0) w1=ptr->width; else x1 = ptr->width - w1;"
    },
    {
        "line": 42,
        "fullcodeline": "if (y1==0) h1=ptr->height; else y1 = ptr->height - h1;"
    },
    {
        "line": 61,
        "fullcodeline": "for (y = 0; y < h1; y++) {"
    },
    {
        "line": 26,
        "fullcodeline": "(y0 * screen->paddedWidthInBytes + x0 * bytesPerPixel));"
    },
    {
        "line": 28,
        "fullcodeline": "( y1 * ptr->paddedWidthInBytes + x1 * bytesPerPixel));"
    },
    {
        "line": 112,
        "fullcodeline": "dstptr += (ptr->paddedWidthInBytes - bytesPerLine);"
    },
    {
        "line": 116,
        "fullcodeline": "for (y = y1; y < (y1+h1); y++) {"
    },
    {
        "line": 62,
        "fullcodeline": "for (x = 0; x < w1; x++) {"
    },
    {
        "line": 111,
        "fullcodeline": "srcptr += (screen->paddedWidthInBytes * areaY);"
    },
    {
        "line": 63,
        "fullcodeline": "red = green = blue = 0;"
    },
    {
        "line": 93,
        "fullcodeline": "red /= area2;"
    },
    {
        "line": 94,
        "fullcodeline": "green /= area2;"
    },
    {
        "line": 95,
        "fullcodeline": "blue /= area2;"
    },
    {
        "line": 97,
        "fullcodeline": "pixel_value = ((red & redMax) << redShift) | ((green & greenMax) << greenShift) | ((blue & blueMax) << blueShift);"
    },
    {
        "line": 109,
        "fullcodeline": "dstptr += bytesPerPixel;"
    },
    {
        "line": 117,
        "fullcodeline": "for (x = x1; x < (x1+w1); x++)"
    },
    {
        "line": 118,
        "fullcodeline": "memcpy (&ptr->frameBuffer[(y *ptr->paddedWidthInBytes) + (x * bytesPerPixel)],"
    },
    {
        "line": 65,
        "fullcodeline": "for (w = 0; w < areaX; w++) {"
    },
    {
        "line": 66,
        "fullcodeline": "for (v = 0; v < areaY; v++) {"
    },
    {
        "line": 105,
        "fullcodeline": "for (z = 0; z < bytesPerPixel; z++)"
    },
    {
        "line": 106,
        "fullcodeline": "dstptr[z]=(pixel_value >> (8 * z)) & 0xff;"
    },
    {
        "line": 67,
        "fullcodeline": "srcptr2 = &srcptr[(((x * areaX) + w) * bytesPerPixel) +"
    },
    {
        "line": 69,
        "fullcodeline": "pixel_value = 0;"
    },
    {
        "line": 86,
        "fullcodeline": "red += ((pixel_value >> redShift) & redMax);"
    },
    {
        "line": 87,
        "fullcodeline": "green += ((pixel_value >> greenShift) & greenMax);"
    },
    {
        "line": 88,
        "fullcodeline": "blue += ((pixel_value >> blueShift) & blueMax);"
    },
    {
        "line": 119,
        "fullcodeline": "&screen->frameBuffer[(y * areaY * screen->paddedWidthInBytes) + (x *areaX * bytesPerPixel)], bytesPerPixel);"
    },
    {
        "line": 73,
        "fullcodeline": "case 4: pixel_value = *((unsigned int *)srcptr2);   break;"
    },
    {
        "line": 74,
        "fullcodeline": "case 2: pixel_value = *((unsigned short *)srcptr2); break;"
    },
    {
        "line": 75,
        "fullcodeline": "case 1: pixel_value = *((unsigned char *)srcptr2);  break;"
    },
    {
        "line": 78,
        "fullcodeline": "for (z = 0; z < bytesPerPixel; z++)"
    },
    {
        "line": 79,
        "fullcodeline": "pixel_value += (srcptr2[z] << (8 * z));"
    },
    {
        "line": 68,
        "fullcodeline": "(v * screen->paddedWidthInBytes)];"
    }
]