[
    {
        "line": 28,
        "fullcodeline": "noise_levels[] = { 0.8002f, 0.2735f, 0.1202f, 0.0585f, 0.0291f, 0.0152f,"
    },
    {
        "line": 34,
        "fullcodeline": "assert(image != (const Image *) NULL);"
    },
    {
        "line": 35,
        "fullcodeline": "assert(image->signature == MagickCoreSignature);"
    },
    {
        "line": 38,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 39,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 45,
        "fullcodeline": "noise_image=CloneImage(image,0,0,MagickTrue,exception);"
    },
    {
        "line": 55,
        "fullcodeline": "pixels_info=AcquireVirtualMemory(3*image->columns,image->rows*"
    },
    {
        "line": 57,
        "fullcodeline": "kernel=(float *) AcquireQuantumMemory(MagickMax(image->rows,image->columns),"
    },
    {
        "line": 67,
        "fullcodeline": "pixels=(float *) GetVirtualMemoryBlob(pixels_info);"
    },
    {
        "line": 68,
        "fullcodeline": "status=MagickTrue;"
    },
    {
        "line": 69,
        "fullcodeline": "number_pixels=(MagickSizeType) image->columns*image->rows;"
    },
    {
        "line": 70,
        "fullcodeline": "image_view=AcquireAuthenticCacheView(image,exception);"
    },
    {
        "line": 71,
        "fullcodeline": "noise_view=AcquireAuthenticCacheView(noise_image,exception);"
    },
    {
        "line": 260,
        "fullcodeline": "noise_view=DestroyCacheView(noise_view);"
    },
    {
        "line": 261,
        "fullcodeline": "image_view=DestroyCacheView(image_view);"
    },
    {
        "line": 262,
        "fullcodeline": "kernel=(float *) RelinquishMagickMemory(kernel);"
    },
    {
        "line": 263,
        "fullcodeline": "pixels_info=RelinquishVirtualMemory(pixels_info);"
    },
    {
        "line": 36,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 46,
        "fullcodeline": "if (noise_image == (Image *) NULL)"
    },
    {
        "line": 48,
        "fullcodeline": "if (SetImageStorageClass(noise_image,DirectClass,exception) == MagickFalse)"
    },
    {
        "line": 53,
        "fullcodeline": "if (AcquireMagickResource(WidthResource,4*image->columns) == MagickFalse)"
    },
    {
        "line": 59,
        "fullcodeline": "if ((pixels_info == (MemoryInfo *) NULL) || (kernel == (float *) NULL))"
    },
    {
        "line": 72,
        "fullcodeline": "for (channel=0; channel < (ssize_t) GetPixelChannels(image); channel++)"
    },
    {
        "line": 264,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 37,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 50,
        "fullcodeline": "noise_image=DestroyImage(noise_image);"
    },
    {
        "line": 54,
        "fullcodeline": "ThrowImageException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 65,
        "fullcodeline": "ThrowImageException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 93,
        "fullcodeline": "traits=GetPixelChannelTraits(image,(PixelChannel) channel);"
    },
    {
        "line": 96,
        "fullcodeline": "pixel_channel=GetPixelChannelChannel(image,channel);"
    },
    {
        "line": 104,
        "fullcodeline": "i=0;"
    },
    {
        "line": 130,
        "fullcodeline": "high_pass=0;"
    },
    {
        "line": 212,
        "fullcodeline": "i=0;"
    },
    {
        "line": 265,
        "fullcodeline": "noise_image=DestroyImage(noise_image);"
    },
    {
        "line": 47,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 51,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 58,
        "fullcodeline": "GetOpenMPMaximumThreads()*sizeof(*kernel));"
    },
    {
        "line": 61,
        "fullcodeline": "if (kernel != (float *) NULL)"
    },
    {
        "line": 63,
        "fullcodeline": "if (pixels_info != (MemoryInfo *) NULL)"
    },
    {
        "line": 91,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 94,
        "fullcodeline": "if (traits == UndefinedPixelTrait)"
    },
    {
        "line": 97,
        "fullcodeline": "if ((pixel_channel != RedPixelChannel) &&"
    },
    {
        "line": 105,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 131,
        "fullcodeline": "for (level=0; level < 5; level++)"
    },
    {
        "line": 213,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 249,
        "fullcodeline": "if (image->progress_monitor != (MagickProgressMonitor) NULL)"
    },
    {
        "line": 62,
        "fullcodeline": "kernel=(float *) RelinquishMagickMemory(kernel);"
    },
    {
        "line": 64,
        "fullcodeline": "pixels_info=RelinquishVirtualMemory(pixels_info);"
    },
    {
        "line": 99,
        "fullcodeline": "(pixel_channel != BluePixelChannel))"
    },
    {
        "line": 113,
        "fullcodeline": "p=GetCacheViewAuthenticPixels(image_view,0,y,image->columns,1,exception);"
    },
    {
        "line": 140,
        "fullcodeline": "low_pass=(size_t) (number_pixels*((level & 0x01)+1));"
    },
    {
        "line": 193,
        "fullcodeline": "magnitude=threshold*noise_levels[level];"
    },
    {
        "line": 207,
        "fullcodeline": "high_pass=low_pass;"
    },
    {
        "line": 227,
        "fullcodeline": "q=GetCacheViewAuthenticPixels(noise_view,0,y,noise_image->columns,1,"
    },
    {
        "line": 234,
        "fullcodeline": "offset=GetPixelChannelOffset(noise_image,pixel_channel);"
    },
    {
        "line": 245,
        "fullcodeline": "sync=SyncCacheViewAuthenticPixels(noise_view,exception);"
    },
    {
        "line": 254,
        "fullcodeline": "proceed=SetImageProgress(image,AddNoiseImageTag,(MagickOffsetType)"
    },
    {
        "line": 98,
        "fullcodeline": "(pixel_channel != GreenPixelChannel) &&"
    },
    {
        "line": 114,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 119,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 145,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 168,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 194,
        "fullcodeline": "for (i=0; i < (ssize_t) number_pixels; ++i)"
    },
    {
        "line": 229,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 235,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 246,
        "fullcodeline": "if (sync == MagickFalse)"
    },
    {
        "line": 256,
        "fullcodeline": "if (proceed == MagickFalse)"
    },
    {
        "line": 116,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 121,
        "fullcodeline": "pixels[i++]=(float) p[channel];"
    },
    {
        "line": 122,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 148,
        "fullcodeline": "id = GetOpenMPThreadId();"
    },
    {
        "line": 151,
        "fullcodeline": "*magick_restrict p,"
    },
    {
        "line": 157,
        "fullcodeline": "p=kernel+id*image->columns;"
    },
    {
        "line": 158,
        "fullcodeline": "q=pixels+y*image->columns;"
    },
    {
        "line": 159,
        "fullcodeline": "HatTransform(q+high_pass,1,image->columns,(size_t) (1 << level),p);"
    },
    {
        "line": 160,
        "fullcodeline": "q+=low_pass;"
    },
    {
        "line": 171,
        "fullcodeline": "id = GetOpenMPThreadId();"
    },
    {
        "line": 174,
        "fullcodeline": "*magick_restrict p,"
    },
    {
        "line": 180,
        "fullcodeline": "p=kernel+id*image->rows;"
    },
    {
        "line": 181,
        "fullcodeline": "q=pixels+x+low_pass;"
    },
    {
        "line": 182,
        "fullcodeline": "HatTransform(q,image->columns,image->rows,(size_t) (1 << level),p);"
    },
    {
        "line": 196,
        "fullcodeline": "pixels[high_pass+i]-=pixels[low_pass+i];"
    },
    {
        "line": 231,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 240,
        "fullcodeline": "pixel=(MagickRealType) pixels[i]+pixels[low_pass+i];"
    },
    {
        "line": 241,
        "fullcodeline": "q[offset]=ClampToQuantum(pixel);"
    },
    {
        "line": 242,
        "fullcodeline": "i++;"
    },
    {
        "line": 243,
        "fullcodeline": "q+=GetPixelChannels(noise_image);"
    },
    {
        "line": 247,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 255,
        "fullcodeline": "channel,GetPixelChannels(image));"
    },
    {
        "line": 257,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 161,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 183,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 197,
        "fullcodeline": "if (pixels[high_pass+i] < -magnitude)"
    },
    {
        "line": 204,
        "fullcodeline": "if (high_pass != 0)"
    },
    {
        "line": 186,
        "fullcodeline": "q+=image->columns;"
    },
    {
        "line": 198,
        "fullcodeline": "pixels[high_pass+i]+=magnitude-softness*magnitude;"
    },
    {
        "line": 205,
        "fullcodeline": "pixels[i]+=pixels[high_pass+i];"
    },
    {
        "line": 162,
        "fullcodeline": "*q++=(*p++);"
    },
    {
        "line": 185,
        "fullcodeline": "*q=(*p++);"
    },
    {
        "line": 200,
        "fullcodeline": "if (pixels[high_pass+i] > magnitude)"
    },
    {
        "line": 201,
        "fullcodeline": "pixels[high_pass+i]-=magnitude-softness*magnitude;"
    },
    {
        "line": 203,
        "fullcodeline": "pixels[high_pass+i]*=softness;"
    }
]