[
    {
        "line": 3,
        "fullcodeline": "long\t\tins_len, pre_textlen = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "colnr_T\t\tind_pre_col = 0, ind_post_col;"
    },
    {
        "line": 6,
        "fullcodeline": "int\t\t\tind_pre_vcol = 0, ind_post_vcol = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "int\t\t\toffset = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "bd.is_MAX = (curwin->w_curswant == MAXCOL);"
    },
    {
        "line": 19,
        "fullcodeline": "update_screen(INVERTED);"
    },
    {
        "line": 88,
        "fullcodeline": "t1 = oap->start;"
    },
    {
        "line": 89,
        "fullcodeline": "start_insert = curwin->w_cursor;"
    },
    {
        "line": 90,
        "fullcodeline": "(void)edit(NUL, FALSE, (linenr_T)count1);"
    },
    {
        "line": 56,
        "fullcodeline": "if (oap->op_type == OP_APPEND)"
    },
    {
        "line": 95,
        "fullcodeline": "if (t1.lnum == curbuf->b_op_start_orig.lnum"
    },
    {
        "line": 102,
        "fullcodeline": "if (curwin->w_cursor.lnum != oap->start.lnum || got_int)"
    },
    {
        "line": 45,
        "fullcodeline": "block_prep(oap, &bd, oap->start.lnum, TRUE);"
    },
    {
        "line": 47,
        "fullcodeline": "ind_pre_col = (colnr_T)getwhitecols_curline();"
    },
    {
        "line": 48,
        "fullcodeline": "ind_pre_vcol = get_indent();"
    },
    {
        "line": 49,
        "fullcodeline": "firstline = ml_get(oap->start.lnum) + bd.textcol;"
    },
    {
        "line": 53,
        "fullcodeline": "pre_textlen = (long)STRLEN(firstline);"
    },
    {
        "line": 96,
        "fullcodeline": "&& LT_POS(curbuf->b_op_start_orig, t1))"
    },
    {
        "line": 97,
        "fullcodeline": "oap->start = curbuf->b_op_start_orig;"
    },
    {
        "line": 108,
        "fullcodeline": "int\t\t\tdid_indent = FALSE;"
    },
    {
        "line": 114,
        "fullcodeline": "ind_post_col = (colnr_T)getwhitecols_curline();"
    },
    {
        "line": 177,
        "fullcodeline": "block_prep(oap, &bd2, oap->start.lnum, TRUE);"
    },
    {
        "line": 202,
        "fullcodeline": "firstline = ml_get(oap->start.lnum);"
    },
    {
        "line": 203,
        "fullcodeline": "len = STRLEN(firstline);"
    },
    {
        "line": 204,
        "fullcodeline": "add = bd.textcol;"
    },
    {
        "line": 30,
        "fullcodeline": "if (curwin->w_cursor.coladd > 0)"
    },
    {
        "line": 51,
        "fullcodeline": "if (oap->op_type == OP_APPEND)"
    },
    {
        "line": 58,
        "fullcodeline": "if (oap->block_mode && curwin->w_cursor.coladd == 0)"
    },
    {
        "line": 115,
        "fullcodeline": "if (curbuf->b_op_start.col > ind_pre_col && ind_post_col > ind_pre_col)"
    },
    {
        "line": 126,
        "fullcodeline": "if (oap->start.lnum == curbuf->b_op_start_orig.lnum"
    },
    {
        "line": 170,
        "fullcodeline": "if (did_indent && bd.textcol - ind_post_col > 0)"
    },
    {
        "line": 178,
        "fullcodeline": "if (did_indent && bd.textcol - ind_post_col > 0)"
    },
    {
        "line": 186,
        "fullcodeline": "if (!bd.is_MAX || bd2.textlen < bd.textlen)"
    },
    {
        "line": 205,
        "fullcodeline": "if (oap->op_type == OP_APPEND)"
    },
    {
        "line": 222,
        "fullcodeline": "if ((size_t)add > len)"
    },
    {
        "line": 226,
        "fullcodeline": "if (pre_textlen >= 0 && (ins_len ="
    },
    {
        "line": 37,
        "fullcodeline": "curwin->w_ve_flags = VE_ALL;"
    },
    {
        "line": 38,
        "fullcodeline": "coladvance_force(oap->op_type == OP_APPEND"
    },
    {
        "line": 42,
        "fullcodeline": "curwin->w_ve_flags = old_ve_flags;"
    },
    {
        "line": 52,
        "fullcodeline": "firstline += bd.textlen;"
    },
    {
        "line": 61,
        "fullcodeline": "curwin->w_set_curswant = TRUE;"
    },
    {
        "line": 117,
        "fullcodeline": "bd.textcol += ind_post_col - ind_pre_col;"
    },
    {
        "line": 118,
        "fullcodeline": "ind_post_vcol = get_indent();"
    },
    {
        "line": 119,
        "fullcodeline": "bd.start_vcol += ind_post_vcol - ind_pre_vcol;"
    },
    {
        "line": 120,
        "fullcodeline": "did_indent = TRUE;"
    },
    {
        "line": 127,
        "fullcodeline": "&& !bd.is_MAX && !did_indent)"
    },
    {
        "line": 129,
        "fullcodeline": "int t = getviscol2(curbuf->b_op_start_orig.col,"
    },
    {
        "line": 172,
        "fullcodeline": "oap->start.col += ind_post_col - ind_pre_col;"
    },
    {
        "line": 173,
        "fullcodeline": "oap->start_vcol += ind_post_vcol - ind_pre_vcol;"
    },
    {
        "line": 174,
        "fullcodeline": "oap->end.col += ind_post_col - ind_pre_col;"
    },
    {
        "line": 175,
        "fullcodeline": "oap->end_vcol += ind_post_vcol - ind_pre_vcol;"
    },
    {
        "line": 181,
        "fullcodeline": "oap->start.col -= ind_post_col - ind_pre_col;"
    },
    {
        "line": 182,
        "fullcodeline": "oap->start_vcol -= ind_post_vcol - ind_pre_vcol;"
    },
    {
        "line": 183,
        "fullcodeline": "oap->end.col -= ind_post_col - ind_pre_col;"
    },
    {
        "line": 184,
        "fullcodeline": "oap->end_vcol -= ind_post_vcol - ind_pre_vcol;"
    },
    {
        "line": 194,
        "fullcodeline": "bd.textcol = bd2.textcol;"
    },
    {
        "line": 195,
        "fullcodeline": "bd.textlen = bd2.textlen;"
    },
    {
        "line": 207,
        "fullcodeline": "add += bd.textlen;"
    },
    {
        "line": 223,
        "fullcodeline": "firstline += len;  // short line, point to the NUL"
    },
    {
        "line": 229,
        "fullcodeline": "ins_text = vim_strnsave(firstline, ins_len);"
    },
    {
        "line": 34,
        "fullcodeline": "if (u_save_cursor() == FAIL)"
    },
    {
        "line": 40,
        "fullcodeline": "if (oap->op_type == OP_APPEND)"
    },
    {
        "line": 62,
        "fullcodeline": "while (*ml_get_cursor() != NUL"
    },
    {
        "line": 64,
        "fullcodeline": "++curwin->w_cursor.col;"
    },
    {
        "line": 65,
        "fullcodeline": "if (bd.is_short && !bd.is_MAX)"
    },
    {
        "line": 78,
        "fullcodeline": "curwin->w_cursor = oap->end;"
    },
    {
        "line": 79,
        "fullcodeline": "check_cursor_col();"
    },
    {
        "line": 132,
        "fullcodeline": "if (!bd.is_MAX)"
    },
    {
        "line": 188,
        "fullcodeline": "if (oap->op_type == OP_APPEND)"
    },
    {
        "line": 209,
        "fullcodeline": "if (bd.is_MAX"
    },
    {
        "line": 225,
        "fullcodeline": "firstline += add;"
    },
    {
        "line": 230,
        "fullcodeline": "if (ins_text != NULL)"
    },
    {
        "line": 39,
        "fullcodeline": "? oap->end_vcol + 1 : getviscol());"
    },
    {
        "line": 63,
        "fullcodeline": "&& (curwin->w_cursor.col < bd.textcol + bd.textlen))"
    },
    {
        "line": 73,
        "fullcodeline": "bd.textlen += bd.endspaces;"
    },
    {
        "line": 82,
        "fullcodeline": "if (!LINEEMPTY(curwin->w_cursor.lnum)"
    },
    {
        "line": 190,
        "fullcodeline": "pre_textlen += bd2.textlen - bd.textlen;"
    },
    {
        "line": 210,
        "fullcodeline": "&& (start_insert.lnum == Insstart.lnum"
    },
    {
        "line": 213,
        "fullcodeline": "offset = (start_insert.col - Insstart.col);"
    },
    {
        "line": 214,
        "fullcodeline": "add -= offset;"
    },
    {
        "line": 227,
        "fullcodeline": "(long)STRLEN(firstline) - pre_textlen - offset) > 0)"
    },
    {
        "line": 238,
        "fullcodeline": "curwin->w_cursor.col = oap->start.col;"
    },
    {
        "line": 239,
        "fullcodeline": "check_cursor();"
    },
    {
        "line": 240,
        "fullcodeline": "vim_free(ins_text);"
    },
    {
        "line": 69,
        "fullcodeline": "if (u_save_cursor() == FAIL)"
    },
    {
        "line": 71,
        "fullcodeline": "for (i = 0; i < bd.endspaces; ++i)"
    },
    {
        "line": 72,
        "fullcodeline": "ins_char(' ');"
    },
    {
        "line": 83,
        "fullcodeline": "&& oap->start_vcol != oap->end_vcol)"
    },
    {
        "line": 84,
        "fullcodeline": "inc_cursor();"
    },
    {
        "line": 134,
        "fullcodeline": "if (oap->op_type == OP_INSERT"
    },
    {
        "line": 211,
        "fullcodeline": "&& start_insert.col > Insstart.col))"
    },
    {
        "line": 215,
        "fullcodeline": "if (oap->end_vcol > offset)"
    },
    {
        "line": 233,
        "fullcodeline": "if (u_save(oap->start.lnum,"
    },
    {
        "line": 135,
        "fullcodeline": "&& oap->start.col + oap->start.coladd"
    },
    {
        "line": 139,
        "fullcodeline": "oap->start.col = curbuf->b_op_start_orig.col;"
    },
    {
        "line": 140,
        "fullcodeline": "pre_textlen -= t - oap->start_vcol;"
    },
    {
        "line": 141,
        "fullcodeline": "oap->start_vcol = t;"
    },
    {
        "line": 156,
        "fullcodeline": "else if (bd.is_MAX && oap->op_type == OP_APPEND)"
    },
    {
        "line": 192,
        "fullcodeline": "--bd2.textlen;"
    },
    {
        "line": 216,
        "fullcodeline": "oap->end_vcol -= (offset + 1);"
    },
    {
        "line": 235,
        "fullcodeline": "block_insert(oap, ins_text, (oap->op_type == OP_INSERT),"
    },
    {
        "line": 136,
        "fullcodeline": "!= curbuf->b_op_start_orig.col"
    },
    {
        "line": 159,
        "fullcodeline": "pre_textlen += bd.textlen;"
    },
    {
        "line": 160,
        "fullcodeline": "pre_textlen -= t - oap->start_vcol;"
    },
    {
        "line": 234,
        "fullcodeline": "(linenr_T)(oap->end.lnum + 1)) == OK)"
    },
    {
        "line": 143,
        "fullcodeline": "else if (oap->op_type == OP_APPEND"
    },
    {
        "line": 144,
        "fullcodeline": "&& oap->start.col + oap->start.coladd"
    },
    {
        "line": 148,
        "fullcodeline": "oap->start.col = curbuf->b_op_start_orig.col;"
    },
    {
        "line": 150,
        "fullcodeline": "pre_textlen += bd.textlen;"
    },
    {
        "line": 151,
        "fullcodeline": "pre_textlen -= t - oap->start_vcol;"
    },
    {
        "line": 152,
        "fullcodeline": "oap->start_vcol = t;"
    },
    {
        "line": 153,
        "fullcodeline": "oap->op_type = OP_INSERT;"
    },
    {
        "line": 145,
        "fullcodeline": ">= curbuf->b_op_start_orig.col"
    }
]