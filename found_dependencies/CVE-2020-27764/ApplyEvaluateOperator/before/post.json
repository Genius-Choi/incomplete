[
    {
        "line": 8,
        "fullcodeline": "result=0.0;"
    },
    {
        "line": 15,
        "fullcodeline": "result=(MagickRealType) fabs((double) (pixel+value));"
    },
    {
        "line": 20,
        "fullcodeline": "result=(MagickRealType) (pixel+value);"
    },
    {
        "line": 31,
        "fullcodeline": "result=pixel+value;"
    },
    {
        "line": 32,
        "fullcodeline": "result-=(QuantumRange+1.0)*floor((double) result/(QuantumRange+1.0));"
    },
    {
        "line": 37,
        "fullcodeline": "result=(MagickRealType) ((size_t) pixel & (size_t) (value+0.5));"
    },
    {
        "line": 42,
        "fullcodeline": "result=(MagickRealType) (QuantumRange*(0.5*cos((double) (2.0*MagickPI*"
    },
    {
        "line": 48,
        "fullcodeline": "result=pixel/(value == 0.0 ? 1.0 : value);"
    },
    {
        "line": 53,
        "fullcodeline": "result=(MagickRealType) (QuantumRange*exp((double) (value*QuantumScale*"
    },
    {
        "line": 59,
        "fullcodeline": "result=(MagickRealType) GenerateDifferentialNoise(random_info,pixel,"
    },
    {
        "line": 65,
        "fullcodeline": "result=(MagickRealType) GenerateDifferentialNoise(random_info,pixel,"
    },
    {
        "line": 71,
        "fullcodeline": "result=(MagickRealType) GenerateDifferentialNoise(random_info,pixel,"
    },
    {
        "line": 77,
        "fullcodeline": "result=(MagickRealType) ((size_t) pixel << (size_t) (value+0.5));"
    },
    {
        "line": 89,
        "fullcodeline": "result=(MagickRealType) EvaluateMax((double) pixel,value);"
    },
    {
        "line": 94,
        "fullcodeline": "result=(MagickRealType) (pixel+value);"
    },
    {
        "line": 99,
        "fullcodeline": "result=(MagickRealType) (pixel+value);"
    },
    {
        "line": 104,
        "fullcodeline": "result=(MagickRealType) MagickMin((double) pixel,value);"
    },
    {
        "line": 109,
        "fullcodeline": "result=(MagickRealType) GenerateDifferentialNoise(random_info,pixel,"
    },
    {
        "line": 115,
        "fullcodeline": "result=(MagickRealType) (value*pixel);"
    },
    {
        "line": 120,
        "fullcodeline": "result=(MagickRealType) ((size_t) pixel | (size_t) (value+0.5));"
    },
    {
        "line": 125,
        "fullcodeline": "result=(MagickRealType) GenerateDifferentialNoise(random_info,pixel,"
    },
    {
        "line": 131,
        "fullcodeline": "result=(MagickRealType) (QuantumRange*pow((double) (QuantumScale*pixel),"
    },
    {
        "line": 137,
        "fullcodeline": "result=(MagickRealType) ((size_t) pixel >> (size_t) (value+0.5));"
    },
    {
        "line": 142,
        "fullcodeline": "result=(MagickRealType) (pixel*pixel+value);"
    },
    {
        "line": 147,
        "fullcodeline": "result=value;"
    },
    {
        "line": 152,
        "fullcodeline": "result=(MagickRealType) (QuantumRange*(0.5*sin((double) (2.0*MagickPI*"
    },
    {
        "line": 158,
        "fullcodeline": "result=(MagickRealType) (pixel-value);"
    },
    {
        "line": 163,
        "fullcodeline": "result=(MagickRealType) (pixel+value);"
    },
    {
        "line": 168,
        "fullcodeline": "result=(MagickRealType) (((MagickRealType) pixel <= value) ? 0 :"
    },
    {
        "line": 174,
        "fullcodeline": "result=(MagickRealType) (((MagickRealType) pixel <= value) ? 0 : pixel);"
    },
    {
        "line": 179,
        "fullcodeline": "result=(MagickRealType) (((MagickRealType) pixel > value) ? QuantumRange :"
    },
    {
        "line": 185,
        "fullcodeline": "result=(MagickRealType) GenerateDifferentialNoise(random_info,pixel,"
    },
    {
        "line": 191,
        "fullcodeline": "result=(MagickRealType) ((size_t) pixel ^ (size_t) (value+0.5));"
    },
    {
        "line": 82,
        "fullcodeline": "if ((QuantumScale*pixel) >= MagickEpsilon)"
    },
    {
        "line": 83,
        "fullcodeline": "result=(MagickRealType) (QuantumRange*log((double) (QuantumScale*value*"
    },
    {
        "line": 132,
        "fullcodeline": "(double) value));"
    },
    {
        "line": 84,
        "fullcodeline": "pixel+1.0))/log((double) (value+1.0)));"
    }
]