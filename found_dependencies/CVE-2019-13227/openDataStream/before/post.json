[
    {
        "line": 7,
        "fullcodeline": "process = new QProcess();"
    },
    {
        "line": 9,
        "fullcodeline": "QObject::connect(process, static_cast<void (QProcess::*)(int, QProcess::ExitStatus)>(&QProcess::finished),"
    },
    {
        "line": 101,
        "fullcodeline": "bool ok = process ? process->isOpen() : buffer.open(QIODevice::ReadOnly);"
    },
    {
        "line": 103,
        "fullcodeline": "if (!ok) {"
    },
    {
        "line": 4,
        "fullcodeline": "process->deleteLater();"
    },
    {
        "line": 98,
        "fullcodeline": "dCDebug(\"The \\\"%s %s\\\" command start finished\", qPrintable(process->program()), qPrintable(process->arguments().join(\" \")));"
    },
    {
        "line": 104,
        "fullcodeline": "setErrorString(QObject::tr(\"Failed to open process, error: %1\").arg(process ? process->errorString(): buffer.errorString()));"
    },
    {
        "line": 52,
        "fullcodeline": "const DPartInfo &part = (index == 0 && currentMode == DDiskInfo::Write) ? DDevicePartInfo(filePath()) : q->getPartByNumber(index);"
    },
    {
        "line": 60,
        "fullcodeline": "dCDebug(\"Try open device: %s, mode: %s\", qPrintable(part.filePath()), currentMode == DDiskInfo::Read ? \"Read\" : \"Write\");"
    },
    {
        "line": 82,
        "fullcodeline": "process->deleteLater();"
    },
    {
        "line": 83,
        "fullcodeline": "process = 0;"
    },
    {
        "line": 84,
        "fullcodeline": "buffer.setData(q->toJson());"
    },
    {
        "line": 92,
        "fullcodeline": "if (!process->waitForStarted()) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (type != DDiskInfo::Disk) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (currentMode == DDiskInfo::Read) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (type != DDiskInfo::Disk) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (currentMode == DDiskInfo::Read)"
    },
    {
        "line": 54,
        "fullcodeline": "if (!part) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (Helper::isMounted(part.filePath())) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (currentMode == DDiskInfo::Read) {"
    },
    {
        "line": 93,
        "fullcodeline": "setErrorString(QObject::tr(\"Failed to start \\\"%1 %2\\\", error: %3\").arg(process->program()).arg(process->arguments().join(\" \")).arg(process->errorString()));"
    },
    {
        "line": 24,
        "fullcodeline": "setErrorString(QObject::tr(\"\\\"%1\\\" is not a disk device\").arg(filePath()));"
    },
    {
        "line": 30,
        "fullcodeline": "process->start(QStringLiteral(\"dd if=%1 bs=512 count=2048 status=none\").arg(filePath()), QIODevice::ReadOnly);"
    },
    {
        "line": 39,
        "fullcodeline": "setErrorString(QObject::tr(\"\\\"%1\\\" is not a disk device\").arg(filePath()));"
    },
    {
        "line": 45,
        "fullcodeline": "process->start(QStringLiteral(\"sfdisk -d %1\").arg(filePath()), QIODevice::ReadOnly);"
    },
    {
        "line": 55,
        "fullcodeline": "dCDebug(\"Part is null(index: %d)\", index);"
    },
    {
        "line": 73,
        "fullcodeline": "const QString &executer = Helper::getPartcloneExecuter(part);"
    },
    {
        "line": 74,
        "fullcodeline": "process->start(QStringLiteral(\"%1 -s %2 -o - -c -z %3 -L /tmp/partclone.log\").arg(executer).arg(part.filePath()).arg(Global::bufferSize), QIODevice::ReadOnly);"
    },
    {
        "line": 32,
        "fullcodeline": "process->start(QStringLiteral(\"dd of=%1 bs=512 status=none conv=fsync\").arg(filePath()));"
    },
    {
        "line": 47,
        "fullcodeline": "process->start(QStringLiteral(\"sfdisk %1 --no-reread\").arg(filePath()));"
    },
    {
        "line": 63,
        "fullcodeline": "if (Helper::umountDevice(part.filePath())) {"
    },
    {
        "line": 76,
        "fullcodeline": "process->start(QStringLiteral(\"partclone.restore -s - -o %2 -z %3 -L /tmp/partclone.log\").arg(part.filePath()).arg(Global::bufferSize));"
    },
    {
        "line": 66,
        "fullcodeline": "setErrorString(QObject::tr(\"\\\"%1\\\" is busy\").arg(part.filePath()));"
    }
]