[
    {
        "line": 4,
        "fullcodeline": "int buf_size       = avpkt->size;"
    },
    {
        "line": 5,
        "fullcodeline": "FlashSVContext *s  = avctx->priv_data;"
    },
    {
        "line": 8,
        "fullcodeline": "int last_blockwidth = s->block_width;"
    },
    {
        "line": 9,
        "fullcodeline": "int last_blockheight= s->block_height;"
    },
    {
        "line": 17,
        "fullcodeline": "init_get_bits(&gb, avpkt->data, buf_size * 8);"
    },
    {
        "line": 20,
        "fullcodeline": "s->block_width  = 16 * (get_bits(&gb,  4) + 1);"
    },
    {
        "line": 21,
        "fullcodeline": "s->image_width  =       get_bits(&gb, 12);"
    },
    {
        "line": 22,
        "fullcodeline": "s->block_height = 16 * (get_bits(&gb,  4) + 1);"
    },
    {
        "line": 23,
        "fullcodeline": "s->image_height =       get_bits(&gb, 12);"
    },
    {
        "line": 42,
        "fullcodeline": "h_blocks = s->image_width  / s->block_width;"
    },
    {
        "line": 43,
        "fullcodeline": "h_part   = s->image_width  % s->block_width;"
    },
    {
        "line": 44,
        "fullcodeline": "v_blocks = s->image_height / s->block_height;"
    },
    {
        "line": 45,
        "fullcodeline": "v_part   = s->image_height % s->block_height;"
    },
    {
        "line": 70,
        "fullcodeline": "s->block_size = s->block_width * s->block_height;"
    },
    {
        "line": 87,
        "fullcodeline": "s->is_keyframe = (avpkt->flags & AV_PKT_FLAG_KEY) && (s->ver == 2);"
    },
    {
        "line": 96,
        "fullcodeline": "av_dlog(avctx, \"image: %dx%d block: %dx%d num: %dx%d part: %dx%d\\n\","
    },
    {
        "line": 210,
        "fullcodeline": "*got_frame = 1;"
    },
    {
        "line": 12,
        "fullcodeline": "if (buf_size == 0)"
    },
    {
        "line": 14,
        "fullcodeline": "if (buf_size < 4)"
    },
    {
        "line": 25,
        "fullcodeline": "if (   last_blockwidth != s->block_width"
    },
    {
        "line": 29,
        "fullcodeline": "if (s->ver == 2) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (s->block_size < s->block_width * s->block_height) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (avctx->width == 0 && avctx->height == 0) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (avctx->width != s->image_width || avctx->height != s->image_height) {"
    },
    {
        "line": 92,
        "fullcodeline": "if(s->ver == 2 && !s->blocks)"
    },
    {
        "line": 100,
        "fullcodeline": "if ((ret = ff_reget_buffer(avctx, &s->frame)) < 0)"
    },
    {
        "line": 104,
        "fullcodeline": "for (j = 0; j < v_blocks + (v_part ? 1 : 0); j++) {"
    },
    {
        "line": 196,
        "fullcodeline": "if (s->is_keyframe && s->ver == 2) {"
    },
    {
        "line": 207,
        "fullcodeline": "if ((ret = av_frame_ref(data, &s->frame)) < 0)"
    },
    {
        "line": 212,
        "fullcodeline": "if ((get_bits_count(&gb) / 8) != buf_size)"
    },
    {
        "line": 26,
        "fullcodeline": "|| last_blockheight!= s->block_height)"
    },
    {
        "line": 27,
        "fullcodeline": "av_freep(&s->blocks);"
    },
    {
        "line": 30,
        "fullcodeline": "skip_bits(&gb, 6);"
    },
    {
        "line": 50,
        "fullcodeline": "int tmpblock_size = 3 * s->block_width * s->block_height;"
    },
    {
        "line": 52,
        "fullcodeline": "s->tmpblock = av_realloc(s->tmpblock, tmpblock_size);"
    },
    {
        "line": 74,
        "fullcodeline": "avcodec_set_dimensions(avctx, s->image_width, s->image_height);"
    },
    {
        "line": 79,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR,"
    },
    {
        "line": 81,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"fh = %d, fv %d  vs  ch = %d, cv = %d\\n\","
    },
    {
        "line": 89,
        "fullcodeline": "s->keyframedata = av_realloc(s->keyframedata, avpkt->size);"
    },
    {
        "line": 90,
        "fullcodeline": "memcpy(s->keyframedata, avpkt->data, avpkt->size);"
    },
    {
        "line": 93,
        "fullcodeline": "s->blocks = av_mallocz((v_blocks + !!v_part) * (h_blocks + !!h_part)"
    },
    {
        "line": 106,
        "fullcodeline": "int y_pos  = j * s->block_height; // vertical position in frame"
    },
    {
        "line": 107,
        "fullcodeline": "int cur_blk_height = (j < v_blocks) ? s->block_height : v_part;"
    },
    {
        "line": 204,
        "fullcodeline": "memcpy(s->keyframe, s->frame.data[0], s->frame.linesize[0] * avctx->height);"
    },
    {
        "line": 213,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"buffer not fully consumed (%d != %d)\\n\","
    },
    {
        "line": 15,
        "fullcodeline": "return -1;"
    },
    {
        "line": 31,
        "fullcodeline": "if (get_bits1(&gb)) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (get_bits1(&gb)) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (!s->tmpblock) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (s->ver == 2) {"
    },
    {
        "line": 110,
        "fullcodeline": "for (i = 0; i < h_blocks + (h_part ? 1 : 0); i++) {"
    },
    {
        "line": 197,
        "fullcodeline": "if (!s->keyframe) {"
    },
    {
        "line": 214,
        "fullcodeline": "buf_size, (get_bits_count(&gb) / 8));"
    },
    {
        "line": 32,
        "fullcodeline": "avpriv_request_sample(avctx, \"iframe\");"
    },
    {
        "line": 36,
        "fullcodeline": "avpriv_request_sample(avctx, \"Custom palette\");"
    },
    {
        "line": 54,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"Can't allocate decompression buffer.\\n\");"
    },
    {
        "line": 58,
        "fullcodeline": "s->deflate_block_size = calc_deflate_block_size(tmpblock_size);"
    },
    {
        "line": 63,
        "fullcodeline": "s->deflate_block = av_realloc(s->deflate_block, s->deflate_block_size);"
    },
    {
        "line": 111,
        "fullcodeline": "int x_pos = i * s->block_width; // horizontal position in frame"
    },
    {
        "line": 112,
        "fullcodeline": "int cur_blk_width = (i < h_blocks) ? s->block_width : h_part;"
    },
    {
        "line": 113,
        "fullcodeline": "int has_diff = 0;"
    },
    {
        "line": 116,
        "fullcodeline": "int size = get_bits(&gb, 16);"
    },
    {
        "line": 118,
        "fullcodeline": "s->color_depth    = 0;"
    },
    {
        "line": 119,
        "fullcodeline": "s->zlibprime_curr = 0;"
    },
    {
        "line": 120,
        "fullcodeline": "s->zlibprime_prev = 0;"
    },
    {
        "line": 121,
        "fullcodeline": "s->diff_start     = 0;"
    },
    {
        "line": 122,
        "fullcodeline": "s->diff_height    = cur_blk_height;"
    },
    {
        "line": 198,
        "fullcodeline": "s->keyframe = av_malloc(s->frame.linesize[0] * avctx->height);"
    },
    {
        "line": 55,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 59,
        "fullcodeline": "if (s->deflate_block_size <= 0) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (!s->deflate_block) {"
    },
    {
        "line": 124,
        "fullcodeline": "if (8 * size > get_bits_left(&gb)) {"
    },
    {
        "line": 129,
        "fullcodeline": "if (s->ver == 2 && size) {"
    },
    {
        "line": 199,
        "fullcodeline": "if (!s->keyframe) {"
    },
    {
        "line": 60,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"Can't determine deflate buffer size.\\n\");"
    },
    {
        "line": 65,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"Can't allocate deflate buffer.\\n\");"
    },
    {
        "line": 125,
        "fullcodeline": "av_frame_unref(&s->frame);"
    },
    {
        "line": 130,
        "fullcodeline": "skip_bits(&gb, 3);"
    },
    {
        "line": 131,
        "fullcodeline": "s->color_depth    = get_bits(&gb, 2);"
    },
    {
        "line": 132,
        "fullcodeline": "has_diff          = get_bits1(&gb);"
    },
    {
        "line": 133,
        "fullcodeline": "s->zlibprime_curr = get_bits1(&gb);"
    },
    {
        "line": 134,
        "fullcodeline": "s->zlibprime_prev = get_bits1(&gb);"
    },
    {
        "line": 172,
        "fullcodeline": "size--; // account for flags byte"
    },
    {
        "line": 177,
        "fullcodeline": "int off = (s->image_height - y_pos - 1) * s->frame.linesize[0];"
    },
    {
        "line": 200,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"Cannot allocate image data\\n\");"
    },
    {
        "line": 61,
        "fullcodeline": "return -1;"
    },
    {
        "line": 66,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 136,
        "fullcodeline": "if (s->color_depth != 0 && s->color_depth != 2) {"
    },
    {
        "line": 167,
        "fullcodeline": "if (!s->blocks && (s->zlibprime_curr || s->zlibprime_prev)) {"
    },
    {
        "line": 179,
        "fullcodeline": "for (k = 0; k < cur_blk_height; k++)"
    },
    {
        "line": 180,
        "fullcodeline": "memcpy(s->frame.data[0] + off - k*s->frame.linesize[0] + x_pos*3,"
    },
    {
        "line": 187,
        "fullcodeline": "if (flashsv_decode_block(avctx, avpkt, &gb, size,"
    },
    {
        "line": 201,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 137,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR,"
    },
    {
        "line": 148,
        "fullcodeline": "s->diff_start  = get_bits(&gb, 8);"
    },
    {
        "line": 149,
        "fullcodeline": "s->diff_height = get_bits(&gb, 8);"
    },
    {
        "line": 150,
        "fullcodeline": "av_log(avctx, AV_LOG_DEBUG,"
    },
    {
        "line": 153,
        "fullcodeline": "size -= 2;"
    },
    {
        "line": 157,
        "fullcodeline": "av_log(avctx, AV_LOG_DEBUG, \"%dx%d zlibprime_prev\\n\", i, j);"
    },
    {
        "line": 160,
        "fullcodeline": "int col = get_bits(&gb, 8);"
    },
    {
        "line": 161,
        "fullcodeline": "int row = get_bits(&gb, 8);"
    },
    {
        "line": 162,
        "fullcodeline": "av_log(avctx, AV_LOG_DEBUG, \"%dx%d zlibprime_curr %dx%d\\n\", i, j, col, row);"
    },
    {
        "line": 163,
        "fullcodeline": "size -= 2;"
    },
    {
        "line": 164,
        "fullcodeline": "avpriv_request_sample(avctx, \"zlibprime_curr\");"
    },
    {
        "line": 168,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"no data available for zlib \""
    },
    {
        "line": 181,
        "fullcodeline": "s->keyframe + off - k*s->frame.linesize[0] + x_pos*3,"
    },
    {
        "line": 182,
        "fullcodeline": "cur_blk_width * 3);"
    },
    {
        "line": 190,
        "fullcodeline": "i + j * (h_blocks + !!h_part)))"
    },
    {
        "line": 191,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR,"
    },
    {
        "line": 143,
        "fullcodeline": "if (!s->keyframe) {"
    },
    {
        "line": 144,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR,"
    }
]