[
    {
        "line": 5,
        "fullcodeline": "dest.FreeSample();"
    },
    {
        "line": 6,
        "fullcodeline": "dest = src;"
    },
    {
        "line": 7,
        "fullcodeline": "dest.nLength = len;"
    },
    {
        "line": 8,
        "fullcodeline": "dest.pSample = nullptr;"
    },
    {
        "line": 19,
        "fullcodeline": "std::memcpy(dest.pSample8, src.pSample8 + start, len);"
    },
    {
        "line": 20,
        "fullcodeline": "dest.uFlags.set(CHN_LOOP, loop);"
    },
    {
        "line": 3,
        "fullcodeline": "if(!src.HasSampleData()) return;"
    },
    {
        "line": 10,
        "fullcodeline": "if(!dest.AllocateSample())"
    },
    {
        "line": 16,
        "fullcodeline": "if(len != src.nLength)"
    },
    {
        "line": 17,
        "fullcodeline": "MemsetZero(dest.cues);"
    },
    {
        "line": 23,
        "fullcodeline": "dest.nLoopStart = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "dest.nLoopEnd = len;"
    },
    {
        "line": 27,
        "fullcodeline": "dest.nLoopStart = 0;"
    },
    {
        "line": 28,
        "fullcodeline": "dest.nLoopEnd = 0;"
    }
]