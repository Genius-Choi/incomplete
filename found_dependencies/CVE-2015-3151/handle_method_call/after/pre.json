[
    {
        "line": 10,
        "fullcodeline": "reset_timeout();"
    },
    {
        "line": 15,
        "fullcodeline": "caller_uid = get_caller_uid(connection, invocation, caller);"
    },
    {
        "line": 17,
        "fullcodeline": "log_notice(\"caller_uid:%ld method:'%s'\", (long)caller_uid, method_name);"
    },
    {
        "line": 19,
        "fullcodeline": "if (caller_uid == (uid_t) -1)"
    },
    {
        "line": 22,
        "fullcodeline": "if (g_strcmp0(method_name, \"NewProblem\") == 0)"
    },
    {
        "line": 24,
        "fullcodeline": "char *error = NULL;"
    },
    {
        "line": 25,
        "fullcodeline": "char *problem_id = handle_new_problem(g_variant_get_child_value(parameters, 0), caller_uid, &error);"
    },
    {
        "line": 35,
        "fullcodeline": "response = g_variant_new(\"(s)\", problem_id);"
    },
    {
        "line": 42,
        "fullcodeline": "if (g_strcmp0(method_name, \"GetProblems\") == 0)"
    },
    {
        "line": 44,
        "fullcodeline": "GList *dirs = get_problem_dirs_for_uid(caller_uid, g_settings_dump_location);"
    },
    {
        "line": 45,
        "fullcodeline": "response = variant_from_string_list(dirs);"
    },
    {
        "line": 54,
        "fullcodeline": "if (g_strcmp0(method_name, \"GetAllProblems\") == 0)"
    },
    {
        "line": 67,
        "fullcodeline": "GList * dirs = get_problem_dirs_for_uid(caller_uid, g_settings_dump_location);"
    },
    {
        "line": 68,
        "fullcodeline": "response = variant_from_string_list(dirs);"
    },
    {
        "line": 76,
        "fullcodeline": "if (g_strcmp0(method_name, \"GetForeignProblems\") == 0)"
    },
    {
        "line": 78,
        "fullcodeline": "GList * dirs = get_problem_dirs_not_accessible_by_uid(caller_uid, g_settings_dump_location);"
    },
    {
        "line": 79,
        "fullcodeline": "response = variant_from_string_list(dirs);"
    },
    {
        "line": 86,
        "fullcodeline": "if (g_strcmp0(method_name, \"ChownProblemDir\") == 0)"
    },
    {
        "line": 89,
        "fullcodeline": "g_variant_get(parameters, \"(&s)\", &problem_dir);"
    },
    {
        "line": 90,
        "fullcodeline": "log_notice(\"problem_dir:'%s'\", problem_dir);"
    },
    {
        "line": 98,
        "fullcodeline": "int dir_fd = dd_openfd(problem_dir);"
    },
    {
        "line": 106,
        "fullcodeline": "int ddstat = fdump_dir_stat_for_uid(dir_fd, caller_uid);"
    },
    {
        "line": 143,
        "fullcodeline": "struct dump_dir *dd = dd_fdopendir(dir_fd, problem_dir, DD_OPEN_READONLY | DD_FAIL_QUIETLY_EACCES);"
    },
    {
        "line": 150,
        "fullcodeline": "int chown_res = dd_chown(dd, caller_uid);"
    },
    {
        "line": 162,
        "fullcodeline": "if (g_strcmp0(method_name, \"GetInfo\") == 0)"
    },
    {
        "line": 168,
        "fullcodeline": "g_variant_get_child(parameters, 0, \"&s\", &problem_dir);"
    },
    {
        "line": 169,
        "fullcodeline": "log_notice(\"problem_dir:'%s'\", problem_dir);"
    },
    {
        "line": 177,
        "fullcodeline": "int dir_fd = dd_openfd(problem_dir);"
    },
    {
        "line": 206,
        "fullcodeline": "struct dump_dir *dd = dd_fdopendir(dir_fd, problem_dir, DD_OPEN_READONLY | DD_FAIL_QUIETLY_EACCES);"
    },
    {
        "line": 214,
        "fullcodeline": "GVariant *array = g_variant_get_child_value(parameters, 1);"
    },
    {
        "line": 215,
        "fullcodeline": "GList *elements = string_list_from_variant(array);"
    },
    {
        "line": 218,
        "fullcodeline": "GVariantBuilder *builder = NULL;"
    },
    {
        "line": 241,
        "fullcodeline": "GVariant *response = g_variant_new(\"(a{ss})\", builder);"
    },
    {
        "line": 251,
        "fullcodeline": "if (g_strcmp0(method_name, \"SetElement\") == 0)"
    },
    {
        "line": 257,
        "fullcodeline": "g_variant_get(parameters, \"(&s&s&s)\", &problem_id, &element, &value);"
    },
    {
        "line": 277,
        "fullcodeline": "struct dump_dir *dd = open_directory_for_modification_of_element("
    },
    {
        "line": 284,
        "fullcodeline": "const double max_dir_size = g_settings_nMaxCrashReportsSize * (1024 * 1024);"
    },
    {
        "line": 285,
        "fullcodeline": "const long item_size = dd_get_item_size(dd, element);"
    },
    {
        "line": 296,
        "fullcodeline": "const double requested_size = (double)strlen(value) - item_size;"
    },
    {
        "line": 317,
        "fullcodeline": "if (g_strcmp0(method_name, \"DeleteElement\") == 0)"
    },
    {
        "line": 322,
        "fullcodeline": "g_variant_get(parameters, \"(&s&s)\", &problem_id, &element);"
    },
    {
        "line": 342,
        "fullcodeline": "struct dump_dir *dd = open_directory_for_modification_of_element("
    },
    {
        "line": 348,
        "fullcodeline": "const int res = dd_delete_item(dd, element);"
    },
    {
        "line": 367,
        "fullcodeline": "if (g_strcmp0(method_name, \"DeleteProblem\") == 0)"
    },
    {
        "line": 373,
        "fullcodeline": "GVariant *array = g_variant_get_child_value(parameters, 0);"
    },
    {
        "line": 374,
        "fullcodeline": "GList *problem_dirs = string_list_from_variant(array);"
    },
    {
        "line": 433,
        "fullcodeline": "if (g_strcmp0(method_name, \"FindProblemByElementInTimeRange\") == 0)"
    },
    {
        "line": 441,
        "fullcodeline": "g_variant_get_child(parameters, 0, \"&s\", &element);"
    },
    {
        "line": 442,
        "fullcodeline": "g_variant_get_child(parameters, 1, \"&s\", &value);"
    },
    {
        "line": 443,
        "fullcodeline": "g_variant_get_child(parameters, 2, \"x\", &timestamp_from);"
    },
    {
        "line": 444,
        "fullcodeline": "g_variant_get_child(parameters, 3, \"x\", &timestamp_to);"
    },
    {
        "line": 445,
        "fullcodeline": "g_variant_get_child(parameters, 4, \"b\", &all);"
    },
    {
        "line": 462,
        "fullcodeline": "GList *dirs = get_problem_dirs_for_element_in_time(caller_uid, element, value, timestamp_from,"
    },
    {
        "line": 464,
        "fullcodeline": "response = variant_from_string_list(dirs);"
    },
    {
        "line": 471,
        "fullcodeline": "if (g_strcmp0(method_name, \"Quit\") == 0)"
    },
    {
        "line": 474,
        "fullcodeline": "g_main_loop_quit(loop);"
    },
    {
        "line": 26,
        "fullcodeline": "if (!problem_id)"
    },
    {
        "line": 61,
        "fullcodeline": "if (caller_uid != 0)"
    },
    {
        "line": 99,
        "fullcodeline": "if (dir_fd < 0)"
    },
    {
        "line": 107,
        "fullcodeline": "if (ddstat < 0)"
    },
    {
        "line": 124,
        "fullcodeline": "if (ddstat & DD_STAT_OWNED_BY_UID)"
    },
    {
        "line": 144,
        "fullcodeline": "if (!dd)"
    },
    {
        "line": 178,
        "fullcodeline": "if (dir_fd < 0)"
    },
    {
        "line": 207,
        "fullcodeline": "if (!dd)"
    },
    {
        "line": 219,
        "fullcodeline": "for (GList *l = elements; l; l = l->next)"
    },
    {
        "line": 279,
        "fullcodeline": "if (!dd)"
    },
    {
        "line": 286,
        "fullcodeline": "if (item_size < 0)"
    },
    {
        "line": 344,
        "fullcodeline": "if (!dd)"
    },
    {
        "line": 377,
        "fullcodeline": "for (GList *l = problem_dirs; l; l = l->next)"
    },
    {
        "line": 388,
        "fullcodeline": "for (GList *l = problem_dirs; l; l = l->next)"
    },
    {
        "line": 28,
        "fullcodeline": "g_dbus_method_invocation_return_dbus_error(invocation,"
    },
    {
        "line": 92,
        "fullcodeline": "if (!allowed_problem_dir(problem_dir))"
    },
    {
        "line": 101,
        "fullcodeline": "perror_msg(\"can't open problem directory '%s'\", problem_dir);"
    },
    {
        "line": 132,
        "fullcodeline": "if ((ddstat & DD_STAT_ACCESSIBLE_BY_UID) == 0 &&"
    },
    {
        "line": 133,
        "fullcodeline": "polkit_check_authorization_dname(caller, \"org.freedesktop.problems.getall\") != PolkitYes)"
    },
    {
        "line": 171,
        "fullcodeline": "if (!allowed_problem_dir(problem_dir))"
    },
    {
        "line": 180,
        "fullcodeline": "perror_msg(\"can't open problem directory '%s'\", problem_dir);"
    },
    {
        "line": 185,
        "fullcodeline": "if (!fdump_dir_accessible_by_uid(dir_fd, caller_uid))"
    },
    {
        "line": 221,
        "fullcodeline": "const char *element_name = (const char*)l->data;"
    },
    {
        "line": 226,
        "fullcodeline": "log_notice(\"element '%s' %s\", element_name, value ? \"fetched\" : \"not found\");"
    },
    {
        "line": 259,
        "fullcodeline": "if (!allowed_problem_dir(problem_id))"
    },
    {
        "line": 265,
        "fullcodeline": "if (!str_is_correct_filename(element))"
    },
    {
        "line": 267,
        "fullcodeline": "log_notice(\"'%s' is not a valid element name of '%s'\", element, problem_id);"
    },
    {
        "line": 268,
        "fullcodeline": "char *error = xasprintf(_(\"'%s' is not a valid element name\"), element);"
    },
    {
        "line": 269,
        "fullcodeline": "g_dbus_method_invocation_return_dbus_error(invocation,"
    },
    {
        "line": 288,
        "fullcodeline": "log_notice(\"Can't get size of '%s/%s'\", problem_id, element);"
    },
    {
        "line": 289,
        "fullcodeline": "char *error = xasprintf(_(\"Can't get size of '%s'\"), element);"
    },
    {
        "line": 298,
        "fullcodeline": "if (requested_size > 0"
    },
    {
        "line": 299,
        "fullcodeline": "&& requested_size > (max_dir_size - get_dirsize(g_settings_dump_location)))"
    },
    {
        "line": 324,
        "fullcodeline": "if (!allowed_problem_dir(problem_id))"
    },
    {
        "line": 330,
        "fullcodeline": "if (!str_is_correct_filename(element))"
    },
    {
        "line": 332,
        "fullcodeline": "log_notice(\"'%s' is not a valid element name of '%s'\", element, problem_id);"
    },
    {
        "line": 333,
        "fullcodeline": "char *error = xasprintf(_(\"'%s' is not a valid element name\"), element);"
    },
    {
        "line": 334,
        "fullcodeline": "g_dbus_method_invocation_return_dbus_error(invocation,"
    },
    {
        "line": 353,
        "fullcodeline": "log_notice(\"Can't delete the element '%s' from the problem directory '%s'\", element, problem_id);"
    },
    {
        "line": 354,
        "fullcodeline": "char *error = xasprintf(_(\"Can't delete the element '%s' from the problem directory '%s'\"), element, problem_id);"
    },
    {
        "line": 355,
        "fullcodeline": "g_dbus_method_invocation_return_dbus_error(invocation,"
    },
    {
        "line": 379,
        "fullcodeline": "const char *dir_name = (const char*)l->data;"
    },
    {
        "line": 380,
        "fullcodeline": "log_notice(\"dir_name:'%s'\", dir_name);"
    },
    {
        "line": 390,
        "fullcodeline": "const char *dir_name = (const char*)l->data;"
    },
    {
        "line": 392,
        "fullcodeline": "int dir_fd = dd_openfd(dir_name);"
    },
    {
        "line": 416,
        "fullcodeline": "struct dump_dir *dd = dd_fdopendir(dir_fd, dir_name, /*flags:*/ 0);"
    },
    {
        "line": 447,
        "fullcodeline": "if (!str_is_correct_filename(element))"
    },
    {
        "line": 449,
        "fullcodeline": "log_notice(\"'%s' is not a valid element name\", element);"
    },
    {
        "line": 450,
        "fullcodeline": "char *error = xasprintf(_(\"'%s' is not a valid element name\"), element);"
    },
    {
        "line": 451,
        "fullcodeline": "g_dbus_method_invocation_return_dbus_error(invocation,"
    },
    {
        "line": 459,
        "fullcodeline": "if (all && polkit_check_authorization_dname(caller, \"org.freedesktop.problems.getall\") == PolkitYes)"
    },
    {
        "line": 460,
        "fullcodeline": "caller_uid = 0;"
    },
    {
        "line": 138,
        "fullcodeline": "_(\"Not Authorized\"));"
    },
    {
        "line": 154,
        "fullcodeline": "_(\"Chowning directory failed. Check system logs for more details.\"));"
    },
    {
        "line": 222,
        "fullcodeline": "char *value = dd_load_text_ext(dd, element_name, 0"
    },
    {
        "line": 304,
        "fullcodeline": "_(\"No problem space left\"));"
    },
    {
        "line": 308,
        "fullcodeline": "dd_save_text(dd, element, value);"
    },
    {
        "line": 393,
        "fullcodeline": "if (dir_fd < 0)"
    },
    {
        "line": 63,
        "fullcodeline": "if (polkit_check_authorization_dname(caller, \"org.freedesktop.problems.getall\") == PolkitYes)"
    },
    {
        "line": 64,
        "fullcodeline": "caller_uid = 0;"
    },
    {
        "line": 111,
        "fullcodeline": "log_notice(\"requested directory does not exist '%s'\", problem_dir);"
    },
    {
        "line": 189,
        "fullcodeline": "log_notice(\"Requested directory does not exist '%s'\", problem_dir);"
    },
    {
        "line": 195,
        "fullcodeline": "if (polkit_check_authorization_dname(caller, \"org.freedesktop.problems.getall\") != PolkitYes)"
    },
    {
        "line": 233,
        "fullcodeline": "g_variant_builder_add(builder, \"{ss}\", element_name, value);"
    },
    {
        "line": 381,
        "fullcodeline": "if (!allowed_problem_dir(dir_name))"
    },
    {
        "line": 395,
        "fullcodeline": "perror_msg(\"can't open problem directory '%s'\", dir_name);"
    },
    {
        "line": 400,
        "fullcodeline": "if (!fdump_dir_accessible_by_uid(dir_fd, caller_uid))"
    },
    {
        "line": 115,
        "fullcodeline": "perror_msg(\"can't get stat of '%s'\", problem_dir);"
    },
    {
        "line": 200,
        "fullcodeline": "_(\"Not Authorized\"));"
    },
    {
        "line": 229,
        "fullcodeline": "if (!builder)"
    },
    {
        "line": 230,
        "fullcodeline": "builder = g_variant_builder_new(G_VARIANT_TYPE_ARRAY);"
    },
    {
        "line": 409,
        "fullcodeline": "if (polkit_check_authorization_dname(caller, \"org.freedesktop.problems.getall\") != PolkitYes)"
    },
    {
        "line": 419,
        "fullcodeline": "if (dd_delete(dd) != 0)"
    }
]