[
    {
        "line": 4,
        "fullcodeline": "bool gotone = false;"
    },
    {
        "line": 6,
        "fullcodeline": "char *nicname = alloca(40);"
    },
    {
        "line": 7,
        "fullcodeline": "char *cnic = NULL; // created nic name in container is returned here."
    },
    {
        "line": 8,
        "fullcodeline": "char *vethname = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "struct alloted_s *alloted = NULL;"
    },
    {
        "line": 31,
        "fullcodeline": "lxcpath = argv[1];"
    },
    {
        "line": 32,
        "fullcodeline": "lxcname = argv[2];"
    },
    {
        "line": 34,
        "fullcodeline": "errno = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "pid = (int) strtol(argv[3], NULL, 10);"
    },
    {
        "line": 57,
        "fullcodeline": "n = get_alloted(me, argv[4], argv[5], &alloted);"
    },
    {
        "line": 61,
        "fullcodeline": "close(fd);"
    },
    {
        "line": 62,
        "fullcodeline": "free_alloted(&alloted);"
    },
    {
        "line": 75,
        "fullcodeline": "fprintf(stdout, \"%s:%s\\n\", vethname, nicname);"
    },
    {
        "line": 13,
        "fullcodeline": "if (clearenv() < 0) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (setenv(\"PATH\", \"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\", 1) < 0) {"
    },
    {
        "line": 21,
        "fullcodeline": "if ((me = get_username()) == NULL) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (argc < 6)"
    },
    {
        "line": 28,
        "fullcodeline": "if (argc >= 7)"
    },
    {
        "line": 41,
        "fullcodeline": "if (!create_db_dir(LXC_USERNIC_DB)) {"
    },
    {
        "line": 46,
        "fullcodeline": "if ((fd = open_and_lock(LXC_USERNIC_DB)) < 0) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (!may_access_netns(pid)) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (n > 0)"
    },
    {
        "line": 63,
        "fullcodeline": "if (!gotone) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (rename_in_ns(pid, cnic, &vethname) < 0) {"
    },
    {
        "line": 14,
        "fullcodeline": "fprintf(stderr, \"Failed to clear environment\");"
    },
    {
        "line": 18,
        "fullcodeline": "fprintf(stderr, \"Failed to set PATH, exiting\\n\");"
    },
    {
        "line": 22,
        "fullcodeline": "fprintf(stderr, \"Failed to get username\\n\");"
    },
    {
        "line": 27,
        "fullcodeline": "usage(argv[0], true);"
    },
    {
        "line": 29,
        "fullcodeline": "vethname = argv[6];"
    },
    {
        "line": 37,
        "fullcodeline": "fprintf(stderr, \"Could not read pid: %s\\n\", argv[1]);"
    },
    {
        "line": 42,
        "fullcodeline": "fprintf(stderr, \"Failed to create directory for db file\\n\");"
    },
    {
        "line": 47,
        "fullcodeline": "fprintf(stderr, \"Failed to lock %s\\n\", LXC_USERNIC_DB);"
    },
    {
        "line": 52,
        "fullcodeline": "fprintf(stderr, \"User %s may not modify netns for pid %d\\n\","
    },
    {
        "line": 59,
        "fullcodeline": "gotone = get_nic_if_avail(fd, alloted, pid, argv[4], argv[5], n, &nicname, &cnic);"
    },
    {
        "line": 64,
        "fullcodeline": "fprintf(stderr, \"Quota reached\\n\");"
    },
    {
        "line": 70,
        "fullcodeline": "fprintf(stderr, \"Failed to rename the link\\n\");"
    }
]