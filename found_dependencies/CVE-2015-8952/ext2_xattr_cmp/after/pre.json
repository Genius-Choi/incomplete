[
    {
        "line": 6,
        "fullcodeline": "entry1 = ENTRY(header1+1);"
    },
    {
        "line": 7,
        "fullcodeline": "entry2 = ENTRY(header2+1);"
    },
    {
        "line": 8,
        "fullcodeline": "while (!IS_LAST_ENTRY(entry1)) {"
    },
    {
        "line": 24,
        "fullcodeline": "entry1 = EXT2_XATTR_NEXT(entry1);"
    },
    {
        "line": 25,
        "fullcodeline": "entry2 = EXT2_XATTR_NEXT(entry2);"
    },
    {
        "line": 27,
        "fullcodeline": "if (!IS_LAST_ENTRY(entry2))"
    },
    {
        "line": 9,
        "fullcodeline": "if (IS_LAST_ENTRY(entry2))"
    },
    {
        "line": 11,
        "fullcodeline": "if (entry1->e_hash != entry2->e_hash ||"
    },
    {
        "line": 17,
        "fullcodeline": "if (entry1->e_value_block != 0 || entry2->e_value_block != 0)"
    },
    {
        "line": 19,
        "fullcodeline": "if (memcmp((char *)header1 + le16_to_cpu(entry1->e_value_offs),"
    },
    {
        "line": 15,
        "fullcodeline": "memcmp(entry1->e_name, entry2->e_name, entry1->e_name_len))"
    },
    {
        "line": 20,
        "fullcodeline": "(char *)header2 + le16_to_cpu(entry2->e_value_offs),"
    },
    {
        "line": 21,
        "fullcodeline": "le32_to_cpu(entry1->e_value_size)))"
    },
    {
        "line": 14,
        "fullcodeline": "entry1->e_value_size != entry2->e_value_size ||"
    },
    {
        "line": 18,
        "fullcodeline": "return -EIO;"
    },
    {
        "line": 13,
        "fullcodeline": "entry1->e_name_len != entry2->e_name_len ||"
    },
    {
        "line": 12,
        "fullcodeline": "entry1->e_name_index != entry2->e_name_index ||"
    }
]