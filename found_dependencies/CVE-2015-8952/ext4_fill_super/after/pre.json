[
    {
        "line": 3,
        "fullcodeline": "char *orig_data = kstrdup(data, GFP_KERNEL);"
    },
    {
        "line": 5,
        "fullcodeline": "struct ext4_super_block *es = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "ext4_fsblk_t sb_block = get_sb_block(&data);"
    },
    {
        "line": 10,
        "fullcodeline": "unsigned long offset = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "unsigned long journal_devnum = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "int ret = -ENOMEM;"
    },
    {
        "line": 21,
        "fullcodeline": "int err = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "unsigned int journal_ioprio = DEFAULT_JOURNAL_IOPRIO;"
    },
    {
        "line": 25,
        "fullcodeline": "sbi = kzalloc(sizeof(*sbi), GFP_KERNEL);"
    },
    {
        "line": 29,
        "fullcodeline": "sbi->s_blockgroup_lock ="
    },
    {
        "line": 35,
        "fullcodeline": "sb->s_fs_info = sbi;"
    },
    {
        "line": 36,
        "fullcodeline": "sbi->s_sb = sb;"
    },
    {
        "line": 37,
        "fullcodeline": "sbi->s_inode_readahead_blks = EXT4_DEF_INODE_READAHEAD_BLKS;"
    },
    {
        "line": 38,
        "fullcodeline": "sbi->s_sb_block = sb_block;"
    },
    {
        "line": 44,
        "fullcodeline": "strreplace(sb->s_id, '/', '!');"
    },
    {
        "line": 47,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 48,
        "fullcodeline": "blocksize = sb_min_blocksize(sb, EXT4_MIN_BLOCK_SIZE);"
    },
    {
        "line": 73,
        "fullcodeline": "es = (struct ext4_super_block *) (bh->b_data + offset);"
    },
    {
        "line": 74,
        "fullcodeline": "sbi->s_es = es;"
    },
    {
        "line": 75,
        "fullcodeline": "sb->s_magic = le16_to_cpu(es->s_magic);"
    },
    {
        "line": 78,
        "fullcodeline": "sbi->s_kbytes_written = le64_to_cpu(es->s_kbytes_written);"
    },
    {
        "line": 122,
        "fullcodeline": "def_mount_opts = le32_to_cpu(es->s_default_mount_opts);"
    },
    {
        "line": 123,
        "fullcodeline": "set_opt(sb, INIT_INODE_TABLE);"
    },
    {
        "line": 131,
        "fullcodeline": "set_opt(sb, XATTR_USER);"
    },
    {
        "line": 153,
        "fullcodeline": "set_opt(sb, BLOCK_VALIDITY);"
    },
    {
        "line": 157,
        "fullcodeline": "sbi->s_resuid = make_kuid(&init_user_ns, le16_to_cpu(es->s_def_resuid));"
    },
    {
        "line": 158,
        "fullcodeline": "sbi->s_resgid = make_kgid(&init_user_ns, le16_to_cpu(es->s_def_resgid));"
    },
    {
        "line": 159,
        "fullcodeline": "sbi->s_commit_interval = JBD2_DEFAULT_MAX_COMMIT_AGE * HZ;"
    },
    {
        "line": 160,
        "fullcodeline": "sbi->s_min_batch_time = EXT4_DEF_MIN_BATCH_TIME;"
    },
    {
        "line": 161,
        "fullcodeline": "sbi->s_max_batch_time = EXT4_DEF_MAX_BATCH_TIME;"
    },
    {
        "line": 178,
        "fullcodeline": "sbi->s_li_wait_mult = EXT4_DEF_LI_WAIT_MULT;"
    },
    {
        "line": 186,
        "fullcodeline": "sbi->s_def_mount_opt = sbi->s_mount_opt;"
    },
    {
        "line": 216,
        "fullcodeline": "sb->s_flags = (sb->s_flags & ~MS_POSIXACL) |"
    },
    {
        "line": 266,
        "fullcodeline": "blocksize = BLOCK_SIZE << le32_to_cpu(es->s_log_block_size);"
    },
    {
        "line": 319,
        "fullcodeline": "has_huge_files = ext4_has_feature_huge_file(sb);"
    },
    {
        "line": 320,
        "fullcodeline": "sbi->s_bitmap_maxbytes = ext4_max_bitmap_size(sb->s_blocksize_bits,"
    },
    {
        "line": 322,
        "fullcodeline": "sb->s_maxbytes = ext4_max_size(sb->s_blocksize_bits, has_huge_files);"
    },
    {
        "line": 342,
        "fullcodeline": "sbi->s_desc_size = le16_to_cpu(es->s_desc_size);"
    },
    {
        "line": 355,
        "fullcodeline": "sbi->s_blocks_per_group = le32_to_cpu(es->s_blocks_per_group);"
    },
    {
        "line": 356,
        "fullcodeline": "sbi->s_inodes_per_group = le32_to_cpu(es->s_inodes_per_group);"
    },
    {
        "line": 360,
        "fullcodeline": "sbi->s_inodes_per_block = blocksize / EXT4_INODE_SIZE(sb);"
    },
    {
        "line": 363,
        "fullcodeline": "sbi->s_itb_per_group = sbi->s_inodes_per_group /"
    },
    {
        "line": 365,
        "fullcodeline": "sbi->s_desc_per_block = blocksize / EXT4_DESC_SIZE(sb);"
    },
    {
        "line": 366,
        "fullcodeline": "sbi->s_sbh = bh;"
    },
    {
        "line": 367,
        "fullcodeline": "sbi->s_mount_state = le16_to_cpu(es->s_state);"
    },
    {
        "line": 368,
        "fullcodeline": "sbi->s_addr_per_block_bits = ilog2(EXT4_ADDR_PER_BLOCK(sb));"
    },
    {
        "line": 369,
        "fullcodeline": "sbi->s_desc_per_block_bits = ilog2(EXT4_DESC_PER_BLOCK(sb));"
    },
    {
        "line": 373,
        "fullcodeline": "sbi->s_def_hash_version = es->s_def_hash_version;"
    },
    {
        "line": 393,
        "fullcodeline": "clustersize = BLOCK_SIZE << le32_to_cpu(es->s_log_cluster_size);"
    },
    {
        "line": 394,
        "fullcodeline": "has_bigalloc = ext4_has_feature_bigalloc(sb);"
    },
    {
        "line": 436,
        "fullcodeline": "sbi->s_cluster_ratio = clustersize / blocksize;"
    },
    {
        "line": 453,
        "fullcodeline": "err = generic_check_addressable(sb->s_blocksize_bits,"
    },
    {
        "line": 467,
        "fullcodeline": "blocks_count = sb->s_bdev->bd_inode->i_size >> sb->s_blocksize_bits;"
    },
    {
        "line": 486,
        "fullcodeline": "blocks_count = (ext4_blocks_count(es) -"
    },
    {
        "line": 489,
        "fullcodeline": "do_div(blocks_count, EXT4_BLOCKS_PER_GROUP(sb));"
    },
    {
        "line": 499,
        "fullcodeline": "sbi->s_groups_count = blocks_count;"
    },
    {
        "line": 500,
        "fullcodeline": "sbi->s_blockfile_groups = min_t(ext4_group_t, sbi->s_groups_count,"
    },
    {
        "line": 502,
        "fullcodeline": "db_count = (sbi->s_groups_count + EXT4_DESC_PER_BLOCK(sb) - 1) /"
    },
    {
        "line": 504,
        "fullcodeline": "sbi->s_group_desc = ext4_kvmalloc(db_count *"
    },
    {
        "line": 513,
        "fullcodeline": "bgl_lock_init(sbi->s_blockgroup_lock);"
    },
    {
        "line": 531,
        "fullcodeline": "sbi->s_gdb_count = db_count;"
    },
    {
        "line": 532,
        "fullcodeline": "get_random_bytes(&sbi->s_next_generation, sizeof(u32));"
    },
    {
        "line": 533,
        "fullcodeline": "spin_lock_init(&sbi->s_next_gen_lock);"
    },
    {
        "line": 535,
        "fullcodeline": "setup_timer(&sbi->s_err_report, print_daily_error_info,"
    },
    {
        "line": 542,
        "fullcodeline": "sbi->s_stripe = ext4_get_stripe_size(sbi);"
    },
    {
        "line": 543,
        "fullcodeline": "sbi->s_extent_max_zeroout_kb = 32;"
    },
    {
        "line": 548,
        "fullcodeline": "sb->s_op = &ext4_sops;"
    },
    {
        "line": 549,
        "fullcodeline": "sb->s_export_op = &ext4_export_ops;"
    },
    {
        "line": 550,
        "fullcodeline": "sb->s_xattr = ext4_xattr_handlers;"
    },
    {
        "line": 559,
        "fullcodeline": "memcpy(sb->s_uuid, es->s_uuid, sizeof(es->s_uuid));"
    },
    {
        "line": 561,
        "fullcodeline": "INIT_LIST_HEAD(&sbi->s_orphan); /* unlinked but open files */"
    },
    {
        "line": 562,
        "fullcodeline": "mutex_init(&sbi->s_orphan_lock);"
    },
    {
        "line": 564,
        "fullcodeline": "sb->s_root = NULL;"
    },
    {
        "line": 566,
        "fullcodeline": "needs_recovery = (es->s_last_orphan != 0 ||"
    },
    {
        "line": 656,
        "fullcodeline": "set_task_ioprio(sbi->s_journal->j_task, journal_ioprio);"
    },
    {
        "line": 658,
        "fullcodeline": "sbi->s_journal->j_commit_callback = ext4_journal_commit_callback;"
    },
    {
        "line": 698,
        "fullcodeline": "EXT4_SB(sb)->rsv_conversion_wq ="
    },
    {
        "line": 711,
        "fullcodeline": "root = ext4_iget(sb, EXT4_ROOT_INO);"
    },
    {
        "line": 723,
        "fullcodeline": "sb->s_root = d_make_root(root);"
    },
    {
        "line": 757,
        "fullcodeline": "ext4_set_resv_clusters(sb);"
    },
    {
        "line": 759,
        "fullcodeline": "err = ext4_setup_system_zone(sb);"
    },
    {
        "line": 766,
        "fullcodeline": "ext4_ext_init(sb);"
    },
    {
        "line": 767,
        "fullcodeline": "err = ext4_mb_init(sb);"
    },
    {
        "line": 774,
        "fullcodeline": "block = ext4_count_free_clusters(sb);"
    },
    {
        "line": 775,
        "fullcodeline": "ext4_free_blocks_count_set(sbi->s_es,"
    },
    {
        "line": 777,
        "fullcodeline": "err = percpu_counter_init(&sbi->s_freeclusters_counter, block,"
    },
    {
        "line": 804,
        "fullcodeline": "err = ext4_register_li_request(sb, first_not_zeroed);"
    },
    {
        "line": 808,
        "fullcodeline": "err = ext4_register_sysfs(sb);"
    },
    {
        "line": 821,
        "fullcodeline": "EXT4_SB(sb)->s_mount_state |= EXT4_ORPHAN_FS;"
    },
    {
        "line": 822,
        "fullcodeline": "ext4_orphan_cleanup(sb, es);"
    },
    {
        "line": 823,
        "fullcodeline": "EXT4_SB(sb)->s_mount_state &= ~EXT4_ORPHAN_FS;"
    },
    {
        "line": 855,
        "fullcodeline": "ratelimit_state_init(&sbi->s_err_ratelimit_state, 5 * HZ, 10);"
    },
    {
        "line": 856,
        "fullcodeline": "ratelimit_state_init(&sbi->s_warning_ratelimit_state, 5 * HZ, 10);"
    },
    {
        "line": 857,
        "fullcodeline": "ratelimit_state_init(&sbi->s_msg_ratelimit_state, 5 * HZ, 10);"
    },
    {
        "line": 859,
        "fullcodeline": "kfree(orig_data);"
    },
    {
        "line": 872,
        "fullcodeline": "ext4_unregister_li_request(sb);"
    },
    {
        "line": 874,
        "fullcodeline": "ext4_mb_release(sb);"
    },
    {
        "line": 882,
        "fullcodeline": "ext4_ext_release(sb);"
    },
    {
        "line": 883,
        "fullcodeline": "ext4_release_system_zone(sb);"
    },
    {
        "line": 886,
        "fullcodeline": "sb->s_root = NULL;"
    },
    {
        "line": 888,
        "fullcodeline": "ext4_msg(sb, KERN_ERR, \"mount failed\");"
    },
    {
        "line": 901,
        "fullcodeline": "ext4_es_unregister_shrinker(sbi);"
    },
    {
        "line": 909,
        "fullcodeline": "kvfree(sbi->s_group_desc);"
    },
    {
        "line": 917,
        "fullcodeline": "ext4_blkdev_remove(sbi);"
    },
    {
        "line": 921,
        "fullcodeline": "kfree(sbi->s_blockgroup_lock);"
    },
    {
        "line": 26,
        "fullcodeline": "if (!sbi)"
    },
    {
        "line": 30,
        "fullcodeline": "kzalloc(sizeof(struct blockgroup_lock), GFP_KERNEL);"
    },
    {
        "line": 31,
        "fullcodeline": "if (!sbi->s_blockgroup_lock) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (!blocksize) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (blocksize != EXT4_MIN_BLOCK_SIZE) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (!(bh = sb_bread_unmovable(sb, logical_sb_block))) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (sb->s_magic != EXT4_SUPER_MAGIC)"
    },
    {
        "line": 81,
        "fullcodeline": "if (ext4_has_feature_metadata_csum(sb) &&"
    },
    {
        "line": 87,
        "fullcodeline": "if (!ext4_verify_csum_type(sb, es)) {"
    },
    {
        "line": 95,
        "fullcodeline": "if (ext4_has_feature_metadata_csum(sb)) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (!ext4_superblock_csum_verify(sb, es)) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (ext4_has_feature_csum_seed(sb))"
    },
    {
        "line": 124,
        "fullcodeline": "if (def_mount_opts & EXT4_DEFM_DEBUG)"
    },
    {
        "line": 126,
        "fullcodeline": "if (def_mount_opts & EXT4_DEFM_BSDGROUPS)"
    },
    {
        "line": 128,
        "fullcodeline": "if (def_mount_opts & EXT4_DEFM_UID16)"
    },
    {
        "line": 136,
        "fullcodeline": "if (ext4_has_metadata_csum(sb))"
    },
    {
        "line": 139,
        "fullcodeline": "if ((def_mount_opts & EXT4_DEFM_JMODE) == EXT4_DEFM_JMODE_DATA)"
    },
    {
        "line": 146,
        "fullcodeline": "if (le16_to_cpu(sbi->s_es->s_errors) == EXT4_ERRORS_PANIC)"
    },
    {
        "line": 154,
        "fullcodeline": "if (def_mount_opts & EXT4_DEFM_DISCARD)"
    },
    {
        "line": 163,
        "fullcodeline": "if ((def_mount_opts & EXT4_DEFM_NOBARRIER) == 0)"
    },
    {
        "line": 170,
        "fullcodeline": "if (!IS_EXT3_SB(sb) && !IS_EXT2_SB(sb) &&"
    },
    {
        "line": 180,
        "fullcodeline": "if (!parse_options((char *) sbi->s_es->s_mount_opts, sb,"
    },
    {
        "line": 187,
        "fullcodeline": "if (!parse_options((char *) data, sb, &journal_devnum,"
    },
    {
        "line": 191,
        "fullcodeline": "if (test_opt(sb, DATA_FLAGS) == EXT4_MOUNT_JOURNAL_DATA) {"
    },
    {
        "line": 219,
        "fullcodeline": "if (le32_to_cpu(es->s_rev_level) == EXT4_GOOD_OLD_REV &&"
    },
    {
        "line": 227,
        "fullcodeline": "if (es->s_creator_os == cpu_to_le32(EXT4_OS_HURD)) {"
    },
    {
        "line": 236,
        "fullcodeline": "if (IS_EXT2_SB(sb)) {"
    },
    {
        "line": 247,
        "fullcodeline": "if (IS_EXT3_SB(sb)) {"
    },
    {
        "line": 263,
        "fullcodeline": "if (!ext4_feature_set_ok(sb, (sb->s_flags & MS_RDONLY)))"
    },
    {
        "line": 267,
        "fullcodeline": "if (blocksize < EXT4_MIN_BLOCK_SIZE ||"
    },
    {
        "line": 274,
        "fullcodeline": "if (sbi->s_mount_opt & EXT4_MOUNT_DAX) {"
    },
    {
        "line": 287,
        "fullcodeline": "if (ext4_has_feature_encrypt(sb) && es->s_encryption_level) {"
    },
    {
        "line": 293,
        "fullcodeline": "if (sb->s_blocksize != blocksize) {"
    },
    {
        "line": 324,
        "fullcodeline": "if (le32_to_cpu(es->s_rev_level) == EXT4_GOOD_OLD_REV) {"
    },
    {
        "line": 343,
        "fullcodeline": "if (ext4_has_feature_64bit(sb)) {"
    },
    {
        "line": 357,
        "fullcodeline": "if (EXT4_INODE_SIZE(sb) == 0 || EXT4_INODES_PER_GROUP(sb) == 0)"
    },
    {
        "line": 361,
        "fullcodeline": "if (sbi->s_inodes_per_block == 0)"
    },
    {
        "line": 371,
        "fullcodeline": "for (i = 0; i < 4; i++)"
    },
    {
        "line": 372,
        "fullcodeline": "sbi->s_hash_seed[i] = le32_to_cpu(es->s_hash_seed[i]);"
    },
    {
        "line": 374,
        "fullcodeline": "if (ext4_has_feature_dir_index(sb)) {"
    },
    {
        "line": 438,
        "fullcodeline": "if (sbi->s_inodes_per_group > blocksize * 8) {"
    },
    {
        "line": 446,
        "fullcodeline": "if (sbi->s_blocks_per_group == clustersize << 3)"
    },
    {
        "line": 463,
        "fullcodeline": "if (EXT4_BLOCKS_PER_GROUP(sb) == 0)"
    },
    {
        "line": 468,
        "fullcodeline": "if (blocks_count && ext4_blocks_count(es) > blocks_count) {"
    },
    {
        "line": 479,
        "fullcodeline": "if (le32_to_cpu(es->s_first_data_block) >= ext4_blocks_count(es)) {"
    },
    {
        "line": 490,
        "fullcodeline": "if (blocks_count > ((uint64_t)1<<32) - EXT4_DESC_PER_BLOCK(sb)) {"
    },
    {
        "line": 507,
        "fullcodeline": "if (sbi->s_group_desc == NULL) {"
    },
    {
        "line": 515,
        "fullcodeline": "for (i = 0; i < db_count; i++) {"
    },
    {
        "line": 525,
        "fullcodeline": "if (!ext4_check_descriptors(sb, &first_not_zeroed)) {"
    },
    {
        "line": 539,
        "fullcodeline": "if (ext4_es_register_shrinker(sbi))"
    },
    {
        "line": 569,
        "fullcodeline": "if (ext4_has_feature_mmp(sb) && !(sb->s_flags & MS_RDONLY))"
    },
    {
        "line": 577,
        "fullcodeline": "if (!test_opt(sb, NOLOAD) && ext4_has_feature_journal(sb)) {"
    },
    {
        "line": 617,
        "fullcodeline": "if (ext4_has_feature_64bit(sb) &&"
    },
    {
        "line": 624,
        "fullcodeline": "if (!set_journal_csum_feature_set(sb)) {"
    },
    {
        "line": 632,
        "fullcodeline": "switch (test_opt(sb, DATA_FLAGS)) {"
    },
    {
        "line": 669,
        "fullcodeline": "if ((DUMMY_ENCRYPTION_ENABLED(sbi) || ext4_has_feature_encrypt(sb)) &&"
    },
    {
        "line": 676,
        "fullcodeline": "if (DUMMY_ENCRYPTION_ENABLED(sbi) && !(sb->s_flags & MS_RDONLY) &&"
    },
    {
        "line": 699,
        "fullcodeline": "alloc_workqueue(\"ext4-rsv-conversion\", WQ_MEM_RECLAIM | WQ_UNBOUND, 1);"
    },
    {
        "line": 700,
        "fullcodeline": "if (!EXT4_SB(sb)->rsv_conversion_wq) {"
    },
    {
        "line": 712,
        "fullcodeline": "if (IS_ERR(root)) {"
    },
    {
        "line": 718,
        "fullcodeline": "if (!S_ISDIR(root->i_mode) || !root->i_blocks || !root->i_size) {"
    },
    {
        "line": 724,
        "fullcodeline": "if (!sb->s_root) {"
    },
    {
        "line": 730,
        "fullcodeline": "if (ext4_setup_super(sb, es, sb->s_flags & MS_RDONLY))"
    },
    {
        "line": 734,
        "fullcodeline": "if (sbi->s_inode_size > EXT4_GOOD_OLD_INODE_SIZE) {"
    },
    {
        "line": 749,
        "fullcodeline": "if (EXT4_GOOD_OLD_INODE_SIZE + sbi->s_want_extra_isize >"
    },
    {
        "line": 776,
        "fullcodeline": "EXT4_C2B(sbi, block));"
    },
    {
        "line": 779,
        "fullcodeline": "if (!err) {"
    },
    {
        "line": 785,
        "fullcodeline": "if (!err)"
    },
    {
        "line": 788,
        "fullcodeline": "if (!err)"
    },
    {
        "line": 796,
        "fullcodeline": "if (ext4_has_feature_flex_bg(sb))"
    },
    {
        "line": 838,
        "fullcodeline": "if (test_opt(sb, DISCARD)) {"
    },
    {
        "line": 846,
        "fullcodeline": "if (___ratelimit(&ext4_mount_msg_ratelimit, \"EXT4-fs mount\"))"
    },
    {
        "line": 907,
        "fullcodeline": "for (i = 0; i < db_count; i++)"
    },
    {
        "line": 908,
        "fullcodeline": "brelse(sbi->s_group_desc[i]);"
    },
    {
        "line": 925,
        "fullcodeline": "return err ? err : ret;"
    },
    {
        "line": 40,
        "fullcodeline": "sbi->s_sectors_written_start ="
    },
    {
        "line": 59,
        "fullcodeline": "logical_sb_block = sb_block * EXT4_MIN_BLOCK_SIZE;"
    },
    {
        "line": 60,
        "fullcodeline": "offset = do_div(logical_sb_block, blocksize);"
    },
    {
        "line": 82,
        "fullcodeline": "ext4_has_feature_gdt_csum(sb))"
    },
    {
        "line": 83,
        "fullcodeline": "ext4_warning(sb, \"metadata_csum and uninit_bg are \""
    },
    {
        "line": 88,
        "fullcodeline": "ext4_msg(sb, KERN_ERR, \"VFS: Found ext4 filesystem with \""
    },
    {
        "line": 90,
        "fullcodeline": "silent = 1;"
    },
    {
        "line": 96,
        "fullcodeline": "sbi->s_chksum_driver = crypto_alloc_shash(\"crc32c\", 0, 0);"
    },
    {
        "line": 107,
        "fullcodeline": "ext4_msg(sb, KERN_ERR, \"VFS: Found ext4 filesystem with \""
    },
    {
        "line": 109,
        "fullcodeline": "silent = 1;"
    },
    {
        "line": 110,
        "fullcodeline": "ret = -EFSBADCRC;"
    },
    {
        "line": 116,
        "fullcodeline": "sbi->s_csum_seed = le32_to_cpu(es->s_checksum_seed);"
    },
    {
        "line": 125,
        "fullcodeline": "set_opt(sb, DEBUG);"
    },
    {
        "line": 127,
        "fullcodeline": "set_opt(sb, GRPID);"
    },
    {
        "line": 129,
        "fullcodeline": "set_opt(sb, NO_UID32);"
    },
    {
        "line": 137,
        "fullcodeline": "set_opt(sb, JOURNAL_CHECKSUM);"
    },
    {
        "line": 140,
        "fullcodeline": "set_opt(sb, JOURNAL_DATA);"
    },
    {
        "line": 147,
        "fullcodeline": "set_opt(sb, ERRORS_PANIC);"
    },
    {
        "line": 155,
        "fullcodeline": "set_opt(sb, DISCARD);"
    },
    {
        "line": 164,
        "fullcodeline": "set_opt(sb, BARRIER);"
    },
    {
        "line": 171,
        "fullcodeline": "((def_mount_opts & EXT4_DEFM_NODELALLOC) == 0))"
    },
    {
        "line": 172,
        "fullcodeline": "set_opt(sb, DELALLOC);"
    },
    {
        "line": 182,
        "fullcodeline": "ext4_msg(sb, KERN_WARNING,"
    },
    {
        "line": 217,
        "fullcodeline": "(test_opt(sb, POSIX_ACL) ? MS_POSIXACL : 0);"
    },
    {
        "line": 220,
        "fullcodeline": "(ext4_has_compat_features(sb) ||"
    },
    {
        "line": 223,
        "fullcodeline": "ext4_msg(sb, KERN_WARNING,"
    },
    {
        "line": 228,
        "fullcodeline": "set_opt2(sb, HURD_COMPAT);"
    },
    {
        "line": 268,
        "fullcodeline": "blocksize > EXT4_MAX_BLOCK_SIZE) {"
    },
    {
        "line": 301,
        "fullcodeline": "brelse(bh);"
    },
    {
        "line": 302,
        "fullcodeline": "logical_sb_block = sb_block * EXT4_MIN_BLOCK_SIZE;"
    },
    {
        "line": 303,
        "fullcodeline": "offset = do_div(logical_sb_block, blocksize);"
    },
    {
        "line": 304,
        "fullcodeline": "bh = sb_bread_unmovable(sb, logical_sb_block);"
    },
    {
        "line": 310,
        "fullcodeline": "es = (struct ext4_super_block *)(bh->b_data + offset);"
    },
    {
        "line": 311,
        "fullcodeline": "sbi->s_es = es;"
    },
    {
        "line": 325,
        "fullcodeline": "sbi->s_inode_size = EXT4_GOOD_OLD_INODE_SIZE;"
    },
    {
        "line": 326,
        "fullcodeline": "sbi->s_first_ino = EXT4_GOOD_OLD_FIRST_INO;"
    },
    {
        "line": 375,
        "fullcodeline": "i = le32_to_cpu(es->s_flags);"
    },
    {
        "line": 402,
        "fullcodeline": "sbi->s_cluster_bits = le32_to_cpu(es->s_log_cluster_size) -"
    },
    {
        "line": 404,
        "fullcodeline": "sbi->s_clusters_per_group ="
    },
    {
        "line": 439,
        "fullcodeline": "ext4_msg(sb, KERN_ERR,"
    },
    {
        "line": 447,
        "fullcodeline": "set_opt2(sb, STD_GROUP_SIZE);"
    },
    {
        "line": 454,
        "fullcodeline": "ext4_blocks_count(es));"
    },
    {
        "line": 456,
        "fullcodeline": "ext4_msg(sb, KERN_ERR, \"filesystem\""
    },
    {
        "line": 491,
        "fullcodeline": "ext4_msg(sb, KERN_WARNING, \"groups count too large: %u \""
    },
    {
        "line": 501,
        "fullcodeline": "(EXT4_MAX_BLOCK_FILE_PHYS / EXT4_BLOCKS_PER_GROUP(sb)));"
    },
    {
        "line": 503,
        "fullcodeline": "EXT4_DESC_PER_BLOCK(sb);"
    },
    {
        "line": 509,
        "fullcodeline": "ret = -ENOMEM;"
    },
    {
        "line": 516,
        "fullcodeline": "block = descriptor_loc(sb, logical_sb_block, i);"
    },
    {
        "line": 517,
        "fullcodeline": "sbi->s_group_desc[i] = sb_bread_unmovable(sb, block);"
    },
    {
        "line": 527,
        "fullcodeline": "ret = -EFSCORRUPTED;"
    },
    {
        "line": 567,
        "fullcodeline": "ext4_has_feature_journal_needs_recovery(sb));"
    },
    {
        "line": 618,
        "fullcodeline": "!jbd2_journal_set_features(EXT4_SB(sb)->s_journal, 0, 0,"
    },
    {
        "line": 662,
        "fullcodeline": "sbi->s_mb_cache = ext4_xattr_create_cache();"
    },
    {
        "line": 670,
        "fullcodeline": "(blocksize != PAGE_CACHE_SIZE)) {"
    },
    {
        "line": 677,
        "fullcodeline": "!ext4_has_feature_encrypt(sb)) {"
    },
    {
        "line": 678,
        "fullcodeline": "ext4_set_feature_encrypt(sb);"
    },
    {
        "line": 679,
        "fullcodeline": "ext4_commit_super(sb, 1);"
    },
    {
        "line": 687,
        "fullcodeline": "sbi->s_overhead = le32_to_cpu(es->s_overhead_clusters);"
    },
    {
        "line": 702,
        "fullcodeline": "ret = -ENOMEM;"
    },
    {
        "line": 713,
        "fullcodeline": "ext4_msg(sb, KERN_ERR, \"get root inode failed\");"
    },
    {
        "line": 714,
        "fullcodeline": "ret = PTR_ERR(root);"
    },
    {
        "line": 719,
        "fullcodeline": "ext4_msg(sb, KERN_ERR, \"corrupt root inode, run e2fsck\");"
    },
    {
        "line": 725,
        "fullcodeline": "ext4_msg(sb, KERN_ERR, \"get root dentry failed\");"
    },
    {
        "line": 726,
        "fullcodeline": "ret = -ENOMEM;"
    },
    {
        "line": 731,
        "fullcodeline": "sb->s_flags |= MS_RDONLY;"
    },
    {
        "line": 735,
        "fullcodeline": "sbi->s_want_extra_isize = sizeof(struct ext4_inode) -"
    },
    {
        "line": 751,
        "fullcodeline": "sbi->s_want_extra_isize = sizeof(struct ext4_inode) -"
    },
    {
        "line": 753,
        "fullcodeline": "ext4_msg(sb, KERN_INFO, \"required extra inode space not\""
    },
    {
        "line": 761,
        "fullcodeline": "ext4_msg(sb, KERN_ERR, \"failed to initialize system \""
    },
    {
        "line": 769,
        "fullcodeline": "ext4_msg(sb, KERN_ERR, \"failed to initialize mballoc (%d)\","
    },
    {
        "line": 780,
        "fullcodeline": "unsigned long freei = ext4_count_free_inodes(sb);"
    },
    {
        "line": 781,
        "fullcodeline": "sbi->s_es->s_free_inodes_count = cpu_to_le32(freei);"
    },
    {
        "line": 782,
        "fullcodeline": "err = percpu_counter_init(&sbi->s_freeinodes_counter, freei,"
    },
    {
        "line": 786,
        "fullcodeline": "err = percpu_counter_init(&sbi->s_dirs_counter,"
    },
    {
        "line": 789,
        "fullcodeline": "err = percpu_counter_init(&sbi->s_dirtyclusters_counter, 0,"
    },
    {
        "line": 792,
        "fullcodeline": "ext4_msg(sb, KERN_ERR, \"insufficient memory\");"
    },
    {
        "line": 825,
        "fullcodeline": "ext4_msg(sb, KERN_INFO, \"recovery complete\");"
    },
    {
        "line": 826,
        "fullcodeline": "ext4_mark_recovery_complete(sb, es);"
    },
    {
        "line": 828,
        "fullcodeline": "if (EXT4_SB(sb)->s_journal) {"
    },
    {
        "line": 839,
        "fullcodeline": "struct request_queue *q = bdev_get_queue(sb->s_bdev);"
    },
    {
        "line": 847,
        "fullcodeline": "ext4_msg(sb, KERN_INFO, \"mounted filesystem with%s. \""
    },
    {
        "line": 852,
        "fullcodeline": "mod_timer(&sbi->s_err_report, jiffies + 300*HZ); /* 5 minutes */"
    },
    {
        "line": 876,
        "fullcodeline": "kvfree(sbi->s_flex_groups);"
    },
    {
        "line": 889,
        "fullcodeline": "if (EXT4_SB(sb)->rsv_conversion_wq)"
    },
    {
        "line": 894,
        "fullcodeline": "sbi->s_mb_cache = NULL;"
    },
    {
        "line": 898,
        "fullcodeline": "sbi->s_journal = NULL;"
    },
    {
        "line": 905,
        "fullcodeline": "kthread_stop(sbi->s_mmp_tsk);"
    },
    {
        "line": 912,
        "fullcodeline": "crypto_free_shash(sbi->s_chksum_driver);"
    },
    {
        "line": 41,
        "fullcodeline": "part_stat_read(sb->s_bdev->bd_part, sectors[1]);"
    },
    {
        "line": 62,
        "fullcodeline": "logical_sb_block = sb_block;"
    },
    {
        "line": 97,
        "fullcodeline": "if (IS_ERR(sbi->s_chksum_driver)) {"
    },
    {
        "line": 195,
        "fullcodeline": "if (test_opt2(sb, EXPLICIT_DELALLOC)) {"
    },
    {
        "line": 200,
        "fullcodeline": "if (test_opt(sb, DIOREAD_NOLOCK)) {"
    },
    {
        "line": 205,
        "fullcodeline": "if (test_opt(sb, DAX)) {"
    },
    {
        "line": 210,
        "fullcodeline": "if (test_opt(sb, DELALLOC))"
    },
    {
        "line": 213,
        "fullcodeline": "sb->s_iflags |= SB_I_CGROUPWB;"
    },
    {
        "line": 222,
        "fullcodeline": "ext4_has_incompat_features(sb)))"
    },
    {
        "line": 229,
        "fullcodeline": "if (ext4_has_feature_64bit(sb)) {"
    },
    {
        "line": 237,
        "fullcodeline": "if (ext2_feature_set_ok(sb))"
    },
    {
        "line": 248,
        "fullcodeline": "if (ext3_feature_set_ok(sb))"
    },
    {
        "line": 275,
        "fullcodeline": "if (blocksize != PAGE_SIZE) {"
    },
    {
        "line": 280,
        "fullcodeline": "if (!sb->s_bdev->bd_disk->fops->direct_access) {"
    },
    {
        "line": 295,
        "fullcodeline": "if (!sb_set_blocksize(sb, blocksize)) {"
    },
    {
        "line": 305,
        "fullcodeline": "if (!bh) {"
    },
    {
        "line": 312,
        "fullcodeline": "if (es->s_magic != cpu_to_le16(EXT4_SUPER_MAGIC)) {"
    },
    {
        "line": 328,
        "fullcodeline": "sbi->s_inode_size = le16_to_cpu(es->s_inode_size);"
    },
    {
        "line": 329,
        "fullcodeline": "sbi->s_first_ino = le32_to_cpu(es->s_first_ino);"
    },
    {
        "line": 344,
        "fullcodeline": "if (sbi->s_desc_size < EXT4_MIN_DESC_SIZE_64BIT ||"
    },
    {
        "line": 353,
        "fullcodeline": "sbi->s_desc_size = EXT4_MIN_DESC_SIZE;"
    },
    {
        "line": 376,
        "fullcodeline": "if (i & EXT2_FLAGS_UNSIGNED_HASH)"
    },
    {
        "line": 396,
        "fullcodeline": "if (clustersize < blocksize) {"
    },
    {
        "line": 405,
        "fullcodeline": "le32_to_cpu(es->s_clusters_per_group);"
    },
    {
        "line": 406,
        "fullcodeline": "if (sbi->s_clusters_per_group > blocksize * 8) {"
    },
    {
        "line": 412,
        "fullcodeline": "if (sbi->s_blocks_per_group !="
    },
    {
        "line": 433,
        "fullcodeline": "sbi->s_clusters_per_group = sbi->s_blocks_per_group;"
    },
    {
        "line": 434,
        "fullcodeline": "sbi->s_cluster_bits = 0;"
    },
    {
        "line": 471,
        "fullcodeline": "ext4_blocks_count(es), blocks_count);"
    },
    {
        "line": 482,
        "fullcodeline": "le32_to_cpu(es->s_first_data_block),"
    },
    {
        "line": 483,
        "fullcodeline": "ext4_blocks_count(es));"
    },
    {
        "line": 488,
        "fullcodeline": "EXT4_BLOCKS_PER_GROUP(sb) - 1);"
    },
    {
        "line": 494,
        "fullcodeline": "ext4_blocks_count(es),"
    },
    {
        "line": 495,
        "fullcodeline": "le32_to_cpu(es->s_first_data_block),"
    },
    {
        "line": 496,
        "fullcodeline": "EXT4_BLOCKS_PER_GROUP(sb));"
    },
    {
        "line": 505,
        "fullcodeline": "sizeof(struct buffer_head *),"
    },
    {
        "line": 518,
        "fullcodeline": "if (!sbi->s_group_desc[i]) {"
    },
    {
        "line": 570,
        "fullcodeline": "if (ext4_multi_mount_protect(sb, le64_to_cpu(es->s_mmp_block)))"
    },
    {
        "line": 578,
        "fullcodeline": "if (ext4_load_journal(sb, es, journal_devnum))"
    },
    {
        "line": 638,
        "fullcodeline": "if (jbd2_journal_check_available_features"
    },
    {
        "line": 647,
        "fullcodeline": "if (!jbd2_journal_check_available_features"
    },
    {
        "line": 663,
        "fullcodeline": "if (!sbi->s_mb_cache) {"
    },
    {
        "line": 689,
        "fullcodeline": "err = ext4_calculate_overhead(sb);"
    },
    {
        "line": 737,
        "fullcodeline": "if (ext4_has_feature_extra_isize(sb)) {"
    },
    {
        "line": 797,
        "fullcodeline": "if (!ext4_fill_flex_info(sb)) {"
    },
    {
        "line": 829,
        "fullcodeline": "if (test_opt(sb, DATA_FLAGS) == EXT4_MOUNT_JOURNAL_DATA)"
    },
    {
        "line": 836,
        "fullcodeline": "descr = \"out journal\";"
    },
    {
        "line": 840,
        "fullcodeline": "if (!blk_queue_discard(q))"
    },
    {
        "line": 849,
        "fullcodeline": "*sbi->s_es->s_mount_opts ? \"; \" : \"\", orig_data);"
    },
    {
        "line": 99,
        "fullcodeline": "ret = PTR_ERR(sbi->s_chksum_driver);"
    },
    {
        "line": 100,
        "fullcodeline": "sbi->s_chksum_driver = NULL;"
    },
    {
        "line": 117,
        "fullcodeline": "else if (ext4_has_metadata_csum(sb))"
    },
    {
        "line": 141,
        "fullcodeline": "else if ((def_mount_opts & EXT4_DEFM_JMODE) == EXT4_DEFM_JMODE_ORDERED)"
    },
    {
        "line": 148,
        "fullcodeline": "else if (le16_to_cpu(sbi->s_es->s_errors) == EXT4_ERRORS_CONTINUE)"
    },
    {
        "line": 211,
        "fullcodeline": "clear_opt(sb, DELALLOC);"
    },
    {
        "line": 221,
        "fullcodeline": "ext4_has_ro_compat_features(sb) ||"
    },
    {
        "line": 238,
        "fullcodeline": "ext4_msg(sb, KERN_INFO, \"mounting ext2 file system \""
    },
    {
        "line": 249,
        "fullcodeline": "ext4_msg(sb, KERN_INFO, \"mounting ext3 file system \""
    },
    {
        "line": 330,
        "fullcodeline": "if ((sbi->s_inode_size < EXT4_GOOD_OLD_INODE_SIZE) ||"
    },
    {
        "line": 338,
        "fullcodeline": "if (sbi->s_inode_size > EXT4_GOOD_OLD_INODE_SIZE)"
    },
    {
        "line": 346,
        "fullcodeline": "!is_power_of_2(sbi->s_desc_size)) {"
    },
    {
        "line": 347,
        "fullcodeline": "ext4_msg(sb, KERN_ERR,"
    },
    {
        "line": 377,
        "fullcodeline": "sbi->s_hash_unsigned = 3;"
    },
    {
        "line": 403,
        "fullcodeline": "le32_to_cpu(es->s_log_block_size);"
    },
    {
        "line": 407,
        "fullcodeline": "ext4_msg(sb, KERN_ERR,"
    },
    {
        "line": 413,
        "fullcodeline": "(sbi->s_clusters_per_group * (clustersize / blocksize))) {"
    },
    {
        "line": 414,
        "fullcodeline": "ext4_msg(sb, KERN_ERR, \"blocks per group (%lu) and \""
    },
    {
        "line": 421,
        "fullcodeline": "if (clustersize != blocksize) {"
    },
    {
        "line": 427,
        "fullcodeline": "if (sbi->s_blocks_per_group > blocksize * 8) {"
    },
    {
        "line": 458,
        "fullcodeline": "if (sizeof(sector_t) < 8)"
    },
    {
        "line": 487,
        "fullcodeline": "le32_to_cpu(es->s_first_data_block) +"
    },
    {
        "line": 519,
        "fullcodeline": "ext4_msg(sb, KERN_ERR,"
    },
    {
        "line": 521,
        "fullcodeline": "db_count = i;"
    },
    {
        "line": 580,
        "fullcodeline": "} else if (test_opt(sb, NOLOAD) && !(sb->s_flags & MS_RDONLY) &&"
    },
    {
        "line": 640,
        "fullcodeline": "set_opt(sb, ORDERED_DATA);"
    },
    {
        "line": 787,
        "fullcodeline": "ext4_count_dirs(sb), GFP_KERNEL);"
    },
    {
        "line": 798,
        "fullcodeline": "ext4_msg(sb, KERN_ERR,"
    },
    {
        "line": 830,
        "fullcodeline": "descr = \" journalled data mode\";"
    },
    {
        "line": 841,
        "fullcodeline": "ext4_msg(sb, KERN_WARNING,"
    },
    {
        "line": 118,
        "fullcodeline": "sbi->s_csum_seed = ext4_chksum(sbi, ~0, es->s_uuid,"
    },
    {
        "line": 142,
        "fullcodeline": "set_opt(sb, ORDERED_DATA);"
    },
    {
        "line": 149,
        "fullcodeline": "set_opt(sb, ERRORS_CONT);"
    },
    {
        "line": 332,
        "fullcodeline": "(sbi->s_inode_size > blocksize)) {"
    },
    {
        "line": 333,
        "fullcodeline": "ext4_msg(sb, KERN_ERR,"
    },
    {
        "line": 339,
        "fullcodeline": "sb->s_time_gran = 1 << (EXT4_EPOCH_BITS - 2);"
    },
    {
        "line": 345,
        "fullcodeline": "sbi->s_desc_size > EXT4_MAX_DESC_SIZE ||"
    },
    {
        "line": 422,
        "fullcodeline": "ext4_warning(sb, \"fragment/cluster size (%d) != \""
    },
    {
        "line": 425,
        "fullcodeline": "clustersize = blocksize;"
    },
    {
        "line": 428,
        "fullcodeline": "ext4_msg(sb, KERN_ERR,"
    },
    {
        "line": 581,
        "fullcodeline": "ext4_has_feature_journal_needs_recovery(sb)) {"
    },
    {
        "line": 642,
        "fullcodeline": "set_opt(sb, JOURNAL_DATA);"
    },
    {
        "line": 738,
        "fullcodeline": "if (sbi->s_want_extra_isize <"
    },
    {
        "line": 742,
        "fullcodeline": "if (sbi->s_want_extra_isize <"
    },
    {
        "line": 151,
        "fullcodeline": "set_opt(sb, ERRORS_RO);"
    },
    {
        "line": 331,
        "fullcodeline": "(!is_power_of_2(sbi->s_inode_size)) ||"
    },
    {
        "line": 378,
        "fullcodeline": "else if ((i & EXT2_FLAGS_SIGNED_HASH) == 0) {"
    },
    {
        "line": 609,
        "fullcodeline": "sbi->s_def_mount_opt &= EXT4_MOUNT_JOURNAL_CHECKSUM;"
    },
    {
        "line": 610,
        "fullcodeline": "clear_opt(sb, JOURNAL_CHECKSUM);"
    },
    {
        "line": 611,
        "fullcodeline": "clear_opt(sb, DATA_FLAGS);"
    },
    {
        "line": 612,
        "fullcodeline": "sbi->s_journal = NULL;"
    },
    {
        "line": 613,
        "fullcodeline": "needs_recovery = 0;"
    },
    {
        "line": 739,
        "fullcodeline": "le16_to_cpu(es->s_want_extra_isize))"
    },
    {
        "line": 740,
        "fullcodeline": "sbi->s_want_extra_isize ="
    },
    {
        "line": 743,
        "fullcodeline": "le16_to_cpu(es->s_min_extra_isize))"
    },
    {
        "line": 744,
        "fullcodeline": "sbi->s_want_extra_isize ="
    },
    {
        "line": 831,
        "fullcodeline": "else if (test_opt(sb, DATA_FLAGS) == EXT4_MOUNT_ORDERED_DATA)"
    },
    {
        "line": 143,
        "fullcodeline": "else if ((def_mount_opts & EXT4_DEFM_JMODE) == EXT4_DEFM_JMODE_WBACK)"
    },
    {
        "line": 587,
        "fullcodeline": "if (test_opt2(sb, EXPLICIT_JOURNAL_CHECKSUM)) {"
    },
    {
        "line": 592,
        "fullcodeline": "if (test_opt(sb, JOURNAL_ASYNC_COMMIT)) {"
    },
    {
        "line": 597,
        "fullcodeline": "if (sbi->s_commit_interval != JBD2_DEFAULT_MAX_COMMIT_AGE*HZ) {"
    },
    {
        "line": 603,
        "fullcodeline": "if (EXT4_MOUNT_DATA_FLAGS &"
    },
    {
        "line": 741,
        "fullcodeline": "le16_to_cpu(es->s_want_extra_isize);"
    },
    {
        "line": 745,
        "fullcodeline": "le16_to_cpu(es->s_min_extra_isize);"
    },
    {
        "line": 832,
        "fullcodeline": "descr = \" ordered data mode\";"
    },
    {
        "line": 144,
        "fullcodeline": "set_opt(sb, WRITEBACK_DATA);"
    },
    {
        "line": 385,
        "fullcodeline": "if (!(sb->s_flags & MS_RDONLY))"
    },
    {
        "line": 604,
        "fullcodeline": "(sbi->s_mount_opt ^ sbi->s_def_mount_opt)) {"
    },
    {
        "line": 834,
        "fullcodeline": "descr = \" writeback data mode\";"
    },
    {
        "line": 386,
        "fullcodeline": "es->s_flags |="
    },
    {
        "line": 600,
        "fullcodeline": "sbi->s_commit_interval / HZ);"
    },
    {
        "line": 387,
        "fullcodeline": "cpu_to_le32(EXT2_FLAGS_SIGNED_HASH);"
    }
]