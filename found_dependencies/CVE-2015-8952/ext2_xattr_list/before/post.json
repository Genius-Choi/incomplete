[
    {
        "line": 3,
        "fullcodeline": "struct inode *inode = d_inode(dentry);"
    },
    {
        "line": 4,
        "fullcodeline": "struct buffer_head *bh = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "size_t rest = buffer_size;"
    },
    {
        "line": 10,
        "fullcodeline": "ea_idebug(inode, \"buffer=%p, buffer_size=%ld\","
    },
    {
        "line": 14,
        "fullcodeline": "error = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "ea_idebug(inode, \"reading block %d\", EXT2_I(inode)->i_file_acl);"
    },
    {
        "line": 18,
        "fullcodeline": "bh = sb_bread(inode->i_sb, EXT2_I(inode)->i_file_acl);"
    },
    {
        "line": 19,
        "fullcodeline": "error = -EIO;"
    },
    {
        "line": 22,
        "fullcodeline": "ea_bdebug(bh, \"b_count=%d, refcount=%d\","
    },
    {
        "line": 24,
        "fullcodeline": "end = bh->b_data + bh->b_size;"
    },
    {
        "line": 35,
        "fullcodeline": "entry = FIRST_ENTRY(bh);"
    },
    {
        "line": 71,
        "fullcodeline": "error = buffer_size - rest;  /* total size */"
    },
    {
        "line": 74,
        "fullcodeline": "brelse(bh);"
    },
    {
        "line": 75,
        "fullcodeline": "up_read(&EXT2_I(inode)->xattr_sem);"
    },
    {
        "line": 11,
        "fullcodeline": "buffer, (long)buffer_size);"
    },
    {
        "line": 20,
        "fullcodeline": "if (!bh)"
    },
    {
        "line": 23,
        "fullcodeline": "atomic_read(&(bh->b_count)), le32_to_cpu(HDR(bh)->h_refcount));"
    },
    {
        "line": 25,
        "fullcodeline": "if (HDR(bh)->h_magic != cpu_to_le32(EXT2_XATTR_MAGIC) ||"
    },
    {
        "line": 36,
        "fullcodeline": "while (!IS_LAST_ENTRY(entry)) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (ext2_xattr_cache_insert(bh))"
    },
    {
        "line": 47,
        "fullcodeline": "for (entry = FIRST_ENTRY(bh); !IS_LAST_ENTRY(entry);"
    },
    {
        "line": 48,
        "fullcodeline": "entry = EXT2_XATTR_NEXT(entry)) {"
    },
    {
        "line": 26,
        "fullcodeline": "HDR(bh)->h_blocks != cpu_to_le32(1)) {"
    },
    {
        "line": 27,
        "fullcodeline": "bad_block:\text2_error(inode->i_sb, \"ext2_xattr_list\","
    },
    {
        "line": 30,
        "fullcodeline": "error = -EIO;"
    },
    {
        "line": 37,
        "fullcodeline": "struct ext2_xattr_entry *next = EXT2_XATTR_NEXT(entry);"
    },
    {
        "line": 41,
        "fullcodeline": "entry = next;"
    },
    {
        "line": 44,
        "fullcodeline": "ea_idebug(inode, \"cache insert failed\");"
    },
    {
        "line": 49,
        "fullcodeline": "const struct xattr_handler *handler ="
    },
    {
        "line": 13,
        "fullcodeline": "down_read(&EXT2_I(inode)->xattr_sem);"
    },
    {
        "line": 15,
        "fullcodeline": "if (!EXT2_I(inode)->i_file_acl)"
    },
    {
        "line": 39,
        "fullcodeline": "if ((char *)next >= end)"
    },
    {
        "line": 50,
        "fullcodeline": "ext2_xattr_handler(entry->e_name_index);"
    },
    {
        "line": 52,
        "fullcodeline": "if (handler && (!handler->list || handler->list(dentry))) {"
    },
    {
        "line": 29,
        "fullcodeline": "EXT2_I(inode)->i_file_acl);"
    },
    {
        "line": 53,
        "fullcodeline": "const char *prefix = handler->prefix ?: handler->name;"
    },
    {
        "line": 54,
        "fullcodeline": "size_t prefix_len = strlen(prefix);"
    },
    {
        "line": 55,
        "fullcodeline": "size_t size = prefix_len + entry->e_name_len + 1;"
    },
    {
        "line": 68,
        "fullcodeline": "rest -= size;"
    },
    {
        "line": 62,
        "fullcodeline": "memcpy(buffer, prefix, prefix_len);"
    },
    {
        "line": 63,
        "fullcodeline": "buffer += prefix_len;"
    },
    {
        "line": 64,
        "fullcodeline": "memcpy(buffer, entry->e_name, entry->e_name_len);"
    },
    {
        "line": 65,
        "fullcodeline": "buffer += entry->e_name_len;"
    },
    {
        "line": 66,
        "fullcodeline": "*buffer++ = 0;"
    },
    {
        "line": 58,
        "fullcodeline": "if (size > rest) {"
    },
    {
        "line": 59,
        "fullcodeline": "error = -ERANGE;"
    }
]