[
    {
        "line": 73,
        "fullcodeline": "from ansys.geometry.core.modeler import Modeler"
    },
    {
        "line": 78,
        "fullcodeline": "port = _check_port_or_get_one(port)"
    },
    {
        "line": 79,
        "fullcodeline": "installations = get_available_ansys_installations()"
    },
    {
        "line": 86,
        "fullcodeline": "args = []"
    },
    {
        "line": 87,
        "fullcodeline": "env_copy = _get_common_env("
    },
    {
        "line": 132,
        "fullcodeline": "LOG.info(f\"Launching ProductInstance for {backend_type.name}\")"
    },
    {
        "line": 133,
        "fullcodeline": "LOG.debug(f\"Args: {args}\")"
    },
    {
        "line": 134,
        "fullcodeline": "LOG.debug(f\"Environment variables: {env_copy}\")"
    },
    {
        "line": 136,
        "fullcodeline": "instance = ProductInstance(__start_program(args, env_copy).pid)"
    },
    {
        "line": 140,
        "fullcodeline": "LOG.info(\"Waiting for backend to be ready...\")"
    },
    {
        "line": 141,
        "fullcodeline": "_wait_for_backend(host, port, timeout)"
    },
    {
        "line": 75,
        "fullcodeline": "if os.name != \"nt\":  # pragma: no cover"
    },
    {
        "line": 80,
        "fullcodeline": "if product_version != None:"
    },
    {
        "line": 95,
        "fullcodeline": "if backend_type == BackendType.DISCOVERY:"
    },
    {
        "line": 143,
        "fullcodeline": "return Modeler("
    },
    {
        "line": 76,
        "fullcodeline": "raise RuntimeError(\"Method 'prepare_and_start_backend' is only available on Windows.\")"
    },
    {
        "line": 81,
        "fullcodeline": "_check_version_is_available(product_version, installations)"
    },
    {
        "line": 83,
        "fullcodeline": "product_version = get_latest_ansys_installation()[0]"
    },
    {
        "line": 84,
        "fullcodeline": "_check_minimal_versions(product_version)"
    },
    {
        "line": 96,
        "fullcodeline": "args.append(os.path.join(installations[product_version], DISCOVERY_FOLDER, DISCOVERY_EXE))"
    },
    {
        "line": 101,
        "fullcodeline": "args.append(BACKEND_SPACECLAIM_OPTIONS)"
    },
    {
        "line": 102,
        "fullcodeline": "args.append("
    },
    {
        "line": 106,
        "fullcodeline": "env_copy[BACKEND_API_VERSION_VARIABLE] = str(api_version)"
    },
    {
        "line": 97,
        "fullcodeline": "if hidden is True:"
    },
    {
        "line": 103,
        "fullcodeline": "BACKEND_ADDIN_MANIFEST_ARGUMENT"
    },
    {
        "line": 108,
        "fullcodeline": "elif backend_type == BackendType.SPACECLAIM:"
    },
    {
        "line": 98,
        "fullcodeline": "args.append(BACKEND_DISCOVERY_HIDDEN)"
    },
    {
        "line": 104,
        "fullcodeline": "+ _manifest_path_provider(product_version, installations, manifest_path)"
    },
    {
        "line": 109,
        "fullcodeline": "args.append(os.path.join(installations[product_version], SPACECLAIM_FOLDER, SPACECLAIM_EXE))"
    },
    {
        "line": 113,
        "fullcodeline": "args.append("
    },
    {
        "line": 117,
        "fullcodeline": "env_copy[BACKEND_API_VERSION_VARIABLE] = str(api_version)"
    },
    {
        "line": 118,
        "fullcodeline": "env_copy[BACKEND_SPACECLAIM_HIDDEN_ENVVAR_KEY] = BACKEND_SPACECLAIM_HIDDEN_ENVVAR_VALUE"
    },
    {
        "line": 110,
        "fullcodeline": "if hidden is True:"
    },
    {
        "line": 114,
        "fullcodeline": "BACKEND_ADDIN_MANIFEST_ARGUMENT"
    },
    {
        "line": 120,
        "fullcodeline": "elif backend_type == BackendType.WINDOWS_SERVICE:"
    },
    {
        "line": 111,
        "fullcodeline": "args.append(BACKEND_SPACECLAIM_HIDDEN)"
    },
    {
        "line": 112,
        "fullcodeline": "args.append(BACKEND_SPLASH_OFF)"
    },
    {
        "line": 115,
        "fullcodeline": "+ _manifest_path_provider(product_version, installations, manifest_path)"
    },
    {
        "line": 121,
        "fullcodeline": "latest_version = get_latest_ansys_installation()[0]"
    },
    {
        "line": 122,
        "fullcodeline": "args.append("
    },
    {
        "line": 128,
        "fullcodeline": "raise RuntimeError("
    },
    {
        "line": 123,
        "fullcodeline": "os.path.join("
    },
    {
        "line": 129,
        "fullcodeline": "f\"Cannot connect to backend {backend_type.name} using ``prepare_and_start_backend()``\""
    }
]