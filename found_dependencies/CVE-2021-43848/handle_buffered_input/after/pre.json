[
    {
        "line": 3,
        "fullcodeline": "struct st_h2o_http3_server_conn_t *conn = get_conn(stream);"
    },
    {
        "line": 5,
        "fullcodeline": "if (stream->state >= H2O_HTTP3_SERVER_STREAM_STATE_CLOSE_WAIT)"
    },
    {
        "line": 9,
        "fullcodeline": "size_t bytes_available = quicly_recvstate_bytes_available(&stream->quic->recvstate);"
    },
    {
        "line": 11,
        "fullcodeline": "const uint8_t *src = (const uint8_t *)stream->recvbuf.buf->bytes, *src_end = src + bytes_available;"
    },
    {
        "line": 26,
        "fullcodeline": "size_t bytes_consumed = src - (const uint8_t *)stream->recvbuf.buf->bytes;"
    },
    {
        "line": 27,
        "fullcodeline": "h2o_buffer_consume(&stream->recvbuf.buf, bytes_consumed);"
    },
    {
        "line": 28,
        "fullcodeline": "quicly_stream_sync_recvbuf(stream->quic, bytes_consumed);"
    },
    {
        "line": 31,
        "fullcodeline": "if (stream->tunnel != NULL) {"
    },
    {
        "line": 10,
        "fullcodeline": "assert(bytes_available <= stream->recvbuf.buf->size);"
    },
    {
        "line": 12,
        "fullcodeline": "while (src != src_end) {"
    },
    {
        "line": 14,
        "fullcodeline": "const char *err_desc = NULL;"
    },
    {
        "line": 32,
        "fullcodeline": "if (stream->tunnel->tunnel != NULL && !stream->tunnel->up.is_inflight)"
    },
    {
        "line": 38,
        "fullcodeline": "if (stream->recvbuf.buf->size == 0 && (stream->recvbuf.handle_input == handle_input_expect_data ||"
    },
    {
        "line": 15,
        "fullcodeline": "if ((err = stream->recvbuf.handle_input(stream, &src, src_end, in_generator, &err_desc)) != 0) {"
    },
    {
        "line": 39,
        "fullcodeline": "stream->recvbuf.handle_input == handle_input_post_trailers)) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (stream->state == H2O_HTTP3_SERVER_STREAM_STATE_RECV_BODY_BEFORE_BLOCK && stream->req_body != NULL &&"
    },
    {
        "line": 74,
        "fullcodeline": "stream->req_body->size >= H2O_HTTP3_REQUEST_BODY_MIN_BYTES_TO_BLOCK) {"
    },
    {
        "line": 76,
        "fullcodeline": "stream->read_blocked = 1;"
    },
    {
        "line": 78,
        "fullcodeline": "set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_RECV_BODY_BLOCKED, in_generator);"
    },
    {
        "line": 16,
        "fullcodeline": "if (err == H2O_HTTP3_ERROR_INCOMPLETE) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (stream->req.content_length != SIZE_MAX && stream->req.content_length != stream->req.req_body_bytes_received) {"
    },
    {
        "line": 19,
        "fullcodeline": "err = H2O_HTTP3_ERROR_GENERAL_PROTOCOL;"
    },
    {
        "line": 20,
        "fullcodeline": "err_desc = \"incomplete frame\";"
    },
    {
        "line": 80,
        "fullcodeline": "} else if (stream->req.write_req.cb != NULL && stream->req_body->size != 0) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (!quicly_recvstate_transfer_complete(&stream->quic->recvstate))"
    },
    {
        "line": 82,
        "fullcodeline": "if (!h2o_linklist_is_linked(&stream->link))"
    },
    {
        "line": 50,
        "fullcodeline": "if (!h2o_linklist_is_linked(&stream->link))"
    },
    {
        "line": 53,
        "fullcodeline": "} else if (!stream->req.process_called && stream->state < H2O_HTTP3_SERVER_STREAM_STATE_SEND_HEADERS) {"
    },
    {
        "line": 64,
        "fullcodeline": "set_state(stream, H2O_HTTP3_SERVER_STREAM_STATE_REQ_PENDING, in_generator);"
    },
    {
        "line": 61,
        "fullcodeline": "assert(!\"unexpected state\");"
    }
]