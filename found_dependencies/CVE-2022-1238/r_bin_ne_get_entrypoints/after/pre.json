[
    {
        "line": 2,
        "fullcodeline": "RList *entries = r_list_newf (free);"
    },
    {
        "line": 7,
        "fullcodeline": "RList *segments = r_bin_ne_get_segments (bin);"
    },
    {
        "line": 23,
        "fullcodeline": "int off = 0;"
    },
    {
        "line": 3,
        "fullcodeline": "if (!entries) {"
    },
    {
        "line": 8,
        "fullcodeline": "if (!segments) {"
    },
    {
        "line": 24,
        "fullcodeline": "while (off < bin->ne_header->EntryTableLength) {"
    },
    {
        "line": 13,
        "fullcodeline": "entry = R_NEW0 (RBinAddr);"
    },
    {
        "line": 18,
        "fullcodeline": "entry->bits = 16;"
    },
    {
        "line": 19,
        "fullcodeline": "RBinSection *s = r_list_get_n (segments, bin->ne_header->csEntryPoint - 1);"
    },
    {
        "line": 20,
        "fullcodeline": "entry->paddr = bin->ne_header->ipEntryPoint + (s? s->paddr: 0);"
    },
    {
        "line": 21,
        "fullcodeline": "r_list_append (entries, entry);"
    },
    {
        "line": 28,
        "fullcodeline": "ut8 bundle_length = *(ut8 *)(bin->entry_table + off);"
    },
    {
        "line": 32,
        "fullcodeline": "off++;"
    },
    {
        "line": 33,
        "fullcodeline": "ut8 bundle_type = *(ut8 *)(bin->entry_table + off);"
    },
    {
        "line": 34,
        "fullcodeline": "off++;"
    },
    {
        "line": 14,
        "fullcodeline": "if (!entry) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (!bundle_length) {"
    },
    {
        "line": 36,
        "fullcodeline": "for (i = 0; i < bundle_length; i++) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (bin->entry_table + off + 32 >= r_buf_size (bin->buf)) {"
    },
    {
        "line": 37,
        "fullcodeline": "entry = R_NEW0 (RBinAddr);"
    },
    {
        "line": 42,
        "fullcodeline": "off++;"
    },
    {
        "line": 58,
        "fullcodeline": "off += 2;"
    },
    {
        "line": 59,
        "fullcodeline": "r_list_append (entries, entry);"
    },
    {
        "line": 38,
        "fullcodeline": "if (!entry) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (!bundle_type) { // Skip"
    },
    {
        "line": 44,
        "fullcodeline": "off--;"
    },
    {
        "line": 47,
        "fullcodeline": "} else if (bundle_type == 0xFF) { // Moveable"
    },
    {
        "line": 48,
        "fullcodeline": "off += 2;"
    },
    {
        "line": 49,
        "fullcodeline": "ut8 segnum = *(bin->entry_table + off);"
    },
    {
        "line": 50,
        "fullcodeline": "off++;"
    },
    {
        "line": 51,
        "fullcodeline": "ut16 segoff = *(ut16 *)(bin->entry_table + off);"
    },
    {
        "line": 52,
        "fullcodeline": "if (segnum > 0) {"
    },
    {
        "line": 56,
        "fullcodeline": "entry->paddr = (ut64)bin->segment_entries[bundle_type - 1].offset * bin->alignment + *(ut16 *)(bin->entry_table + off);"
    },
    {
        "line": 53,
        "fullcodeline": "entry->paddr = (ut64)bin->segment_entries[segnum - 1].offset * bin->alignment + segoff;"
    }
]