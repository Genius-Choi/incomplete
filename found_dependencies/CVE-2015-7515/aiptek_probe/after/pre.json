[
    {
        "line": 3,
        "fullcodeline": "struct usb_device *usbdev = interface_to_usbdev(intf);"
    },
    {
        "line": 8,
        "fullcodeline": "int speeds[] = { 0,"
    },
    {
        "line": 16,
        "fullcodeline": "int err = -ENOMEM;"
    },
    {
        "line": 24,
        "fullcodeline": "speeds[0] = programmableDelay;"
    },
    {
        "line": 26,
        "fullcodeline": "aiptek = kzalloc(sizeof(struct aiptek), GFP_KERNEL);"
    },
    {
        "line": 27,
        "fullcodeline": "inputdev = input_allocate_device();"
    },
    {
        "line": 34,
        "fullcodeline": "aiptek->data = usb_alloc_coherent(usbdev, AIPTEK_PACKET_LENGTH,"
    },
    {
        "line": 41,
        "fullcodeline": "aiptek->urb = usb_alloc_urb(0, GFP_KERNEL);"
    },
    {
        "line": 47,
        "fullcodeline": "aiptek->inputdev = inputdev;"
    },
    {
        "line": 48,
        "fullcodeline": "aiptek->usbdev = usbdev;"
    },
    {
        "line": 49,
        "fullcodeline": "aiptek->intf = intf;"
    },
    {
        "line": 50,
        "fullcodeline": "aiptek->ifnum = intf->altsetting[0].desc.bInterfaceNumber;"
    },
    {
        "line": 51,
        "fullcodeline": "aiptek->inDelay = 0;"
    },
    {
        "line": 52,
        "fullcodeline": "aiptek->endDelay = 0;"
    },
    {
        "line": 53,
        "fullcodeline": "aiptek->previousJitterable = 0;"
    },
    {
        "line": 54,
        "fullcodeline": "aiptek->lastMacro = -1;"
    },
    {
        "line": 62,
        "fullcodeline": "aiptek->curSetting.pointerMode = AIPTEK_POINTER_EITHER_MODE;"
    },
    {
        "line": 63,
        "fullcodeline": "aiptek->curSetting.coordinateMode = AIPTEK_COORDINATE_ABSOLUTE_MODE;"
    },
    {
        "line": 64,
        "fullcodeline": "aiptek->curSetting.toolMode = AIPTEK_TOOL_BUTTON_PEN_MODE;"
    },
    {
        "line": 65,
        "fullcodeline": "aiptek->curSetting.xTilt = AIPTEK_TILT_DISABLE;"
    },
    {
        "line": 66,
        "fullcodeline": "aiptek->curSetting.yTilt = AIPTEK_TILT_DISABLE;"
    },
    {
        "line": 67,
        "fullcodeline": "aiptek->curSetting.mouseButtonLeft = AIPTEK_MOUSE_LEFT_BUTTON;"
    },
    {
        "line": 68,
        "fullcodeline": "aiptek->curSetting.mouseButtonMiddle = AIPTEK_MOUSE_MIDDLE_BUTTON;"
    },
    {
        "line": 69,
        "fullcodeline": "aiptek->curSetting.mouseButtonRight = AIPTEK_MOUSE_RIGHT_BUTTON;"
    },
    {
        "line": 70,
        "fullcodeline": "aiptek->curSetting.stylusButtonUpper = AIPTEK_STYLUS_UPPER_BUTTON;"
    },
    {
        "line": 71,
        "fullcodeline": "aiptek->curSetting.stylusButtonLower = AIPTEK_STYLUS_LOWER_BUTTON;"
    },
    {
        "line": 72,
        "fullcodeline": "aiptek->curSetting.jitterDelay = jitterDelay;"
    },
    {
        "line": 73,
        "fullcodeline": "aiptek->curSetting.programmableDelay = programmableDelay;"
    },
    {
        "line": 77,
        "fullcodeline": "aiptek->newSetting = aiptek->curSetting;"
    },
    {
        "line": 86,
        "fullcodeline": "usb_make_path(usbdev, aiptek->features.usbPath,"
    },
    {
        "line": 88,
        "fullcodeline": "strlcat(aiptek->features.usbPath, \"/input0\","
    },
    {
        "line": 94,
        "fullcodeline": "inputdev->name = \"Aiptek\";"
    },
    {
        "line": 95,
        "fullcodeline": "inputdev->phys = aiptek->features.usbPath;"
    },
    {
        "line": 96,
        "fullcodeline": "usb_to_input_id(usbdev, &inputdev->id);"
    },
    {
        "line": 97,
        "fullcodeline": "inputdev->dev.parent = &intf->dev;"
    },
    {
        "line": 99,
        "fullcodeline": "input_set_drvdata(inputdev, aiptek);"
    },
    {
        "line": 101,
        "fullcodeline": "inputdev->open = aiptek_open;"
    },
    {
        "line": 102,
        "fullcodeline": "inputdev->close = aiptek_close;"
    },
    {
        "line": 116,
        "fullcodeline": "__set_bit(MSC_SERIAL, inputdev->mscbit);"
    },
    {
        "line": 131,
        "fullcodeline": "input_set_abs_params(inputdev, ABS_X, 0, 2999, 0, 0);"
    },
    {
        "line": 132,
        "fullcodeline": "input_set_abs_params(inputdev, ABS_Y, 0, 2249, 0, 0);"
    },
    {
        "line": 133,
        "fullcodeline": "input_set_abs_params(inputdev, ABS_PRESSURE, 0, 511, 0, 0);"
    },
    {
        "line": 134,
        "fullcodeline": "input_set_abs_params(inputdev, ABS_TILT_X, AIPTEK_TILT_MIN, AIPTEK_TILT_MAX, 0, 0);"
    },
    {
        "line": 135,
        "fullcodeline": "input_set_abs_params(inputdev, ABS_TILT_Y, AIPTEK_TILT_MIN, AIPTEK_TILT_MAX, 0, 0);"
    },
    {
        "line": 136,
        "fullcodeline": "input_set_abs_params(inputdev, ABS_WHEEL, AIPTEK_WHEEL_MIN, AIPTEK_WHEEL_MAX - 1, 0, 0);"
    },
    {
        "line": 146,
        "fullcodeline": "endpoint = &intf->altsetting[0].endpoint[0].desc;"
    },
    {
        "line": 151,
        "fullcodeline": "usb_fill_int_urb(aiptek->urb,"
    },
    {
        "line": 158,
        "fullcodeline": "aiptek->urb->transfer_dma = aiptek->data_dma;"
    },
    {
        "line": 159,
        "fullcodeline": "aiptek->urb->transfer_flags |= URB_NO_TRANSFER_DMA_MAP;"
    },
    {
        "line": 194,
        "fullcodeline": "usb_set_intfdata(intf, aiptek);"
    },
    {
        "line": 198,
        "fullcodeline": "err = sysfs_create_group(&intf->dev.kobj, &aiptek_attribute_group);"
    },
    {
        "line": 207,
        "fullcodeline": "err = input_register_device(aiptek->inputdev);"
    },
    {
        "line": 216,
        "fullcodeline": "fail3: usb_free_urb(aiptek->urb);"
    },
    {
        "line": 217,
        "fullcodeline": "fail2:\tusb_free_coherent(usbdev, AIPTEK_PACKET_LENGTH, aiptek->data,"
    },
    {
        "line": 219,
        "fullcodeline": "fail1: usb_set_intfdata(intf, NULL);"
    },
    {
        "line": 28,
        "fullcodeline": "if (!aiptek || !inputdev) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (!aiptek->data) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (!aiptek->urb) {"
    },
    {
        "line": 107,
        "fullcodeline": "for (i = 0; i < ARRAY_SIZE(eventTypes); ++i)"
    },
    {
        "line": 108,
        "fullcodeline": "__set_bit(eventTypes[i], inputdev->evbit);"
    },
    {
        "line": 110,
        "fullcodeline": "for (i = 0; i < ARRAY_SIZE(absEvents); ++i)"
    },
    {
        "line": 111,
        "fullcodeline": "__set_bit(absEvents[i], inputdev->absbit);"
    },
    {
        "line": 113,
        "fullcodeline": "for (i = 0; i < ARRAY_SIZE(relEvents); ++i)"
    },
    {
        "line": 114,
        "fullcodeline": "__set_bit(relEvents[i], inputdev->relbit);"
    },
    {
        "line": 119,
        "fullcodeline": "for (i = 0; i < ARRAY_SIZE(buttonEvents); ++i)"
    },
    {
        "line": 120,
        "fullcodeline": "__set_bit(buttonEvents[i], inputdev->keybit);"
    },
    {
        "line": 122,
        "fullcodeline": "for (i = 0; i < ARRAY_SIZE(macroKeyEvents); ++i)"
    },
    {
        "line": 123,
        "fullcodeline": "__set_bit(macroKeyEvents[i], inputdev->keybit);"
    },
    {
        "line": 139,
        "fullcodeline": "if (intf->altsetting[0].desc.bNumEndpoints < 1) {"
    },
    {
        "line": 153,
        "fullcodeline": "usb_rcvintpipe(aiptek->usbdev,"
    },
    {
        "line": 172,
        "fullcodeline": "for (i = 0; i < ARRAY_SIZE(speeds); ++i) {"
    },
    {
        "line": 185,
        "fullcodeline": "if (i == ARRAY_SIZE(speeds)) {"
    },
    {
        "line": 143,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 173,
        "fullcodeline": "aiptek->curSetting.programmableDelay = speeds[i];"
    },
    {
        "line": 174,
        "fullcodeline": "(void)aiptek_program_tablet(aiptek);"
    },
    {
        "line": 188,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 200,
        "fullcodeline": "dev_warn(&intf->dev, \"cannot create sysfs group err: %d\\n\","
    },
    {
        "line": 209,
        "fullcodeline": "dev_warn(&intf->dev,"
    },
    {
        "line": 175,
        "fullcodeline": "if (input_abs_get_max(aiptek->inputdev, ABS_X) > 0) {"
    },
    {
        "line": 176,
        "fullcodeline": "dev_info(&intf->dev,"
    }
]