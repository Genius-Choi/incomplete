[
    {
        "line": 6,
        "fullcodeline": "Local<Object> anArray = NEW_ARRAY((int)inBufferSize);"
    },
    {
        "line": 10,
        "fullcodeline": "Local<Value> value = OBJECT_FROM_PERSISTENT(mObject)->Get(GET_CURRENT_CONTEXT, NEW_STRING(\"write\")).ToLocalChecked();"
    },
    {
        "line": 16,
        "fullcodeline": "Local<Function> func = Local<Function>::Cast(value);"
    },
    {
        "line": 18,
        "fullcodeline": "Local<Value> args[1];"
    },
    {
        "line": 19,
        "fullcodeline": "args[0] = anArray;"
    },
    {
        "line": 20,
        "fullcodeline": "MaybeLocal<Value> maybe;"
    },
    {
        "line": 21,
        "fullcodeline": "TryCatch try_catch(Isolate::GetCurrent());"
    },
    {
        "line": 23,
        "fullcodeline": "maybe = func->Call(GET_CURRENT_CONTEXT,  OBJECT_FROM_PERSISTENT(mObject), 1, args);"
    },
    {
        "line": 24,
        "fullcodeline": "Local <Value> result;"
    },
    {
        "line": 7,
        "fullcodeline": "for(int i=0;i<(int)inBufferSize;++i)"
    },
    {
        "line": 8,
        "fullcodeline": "anArray->Set(GET_CURRENT_CONTEXT, NEW_NUMBER(i),NEW_NUMBER(inBuffer[i]));"
    },
    {
        "line": 11,
        "fullcodeline": "if(value->IsUndefined() || !value->IsFunction())"
    },
    {
        "line": 26,
        "fullcodeline": "if (!maybe.ToLocal(&result)) {"
    },
    {
        "line": 30,
        "fullcodeline": "if(result.IsEmpty())"
    },
    {
        "line": 13,
        "fullcodeline": "THROW_EXCEPTION(\"write is not a function, it should be you know...\");"
    },
    {
        "line": 27,
        "fullcodeline": "try_catch.ReThrow();"
    },
    {
        "line": 32,
        "fullcodeline": "THROW_EXCEPTION(\"wrong return value. it's empty. return the number of written characters\");"
    },
    {
        "line": 35,
        "fullcodeline": "else if(result->IsNumber())"
    },
    {
        "line": 37,
        "fullcodeline": "return TO_UINT32(result)->Value();"
    },
    {
        "line": 41,
        "fullcodeline": "THROW_EXCEPTION(\"wrong return value. write should return the number of written characters\");"
    }
]