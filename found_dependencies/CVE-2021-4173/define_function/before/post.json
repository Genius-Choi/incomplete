[
    {
        "line": 3,
        "fullcodeline": "char_u\t*line_to_free = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "char_u\t*name = name_arg;"
    },
    {
        "line": 8,
        "fullcodeline": "int\t\tis_global = FALSE;"
    },
    {
        "line": 12,
        "fullcodeline": "char_u\t*line_arg = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "int\t\tvarargs = FALSE;"
    },
    {
        "line": 18,
        "fullcodeline": "int\t\tflags = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "char_u\t*ret_type = NULL;"
    },
    {
        "line": 20,
        "fullcodeline": "ufunc_T\t*fp = NULL;"
    },
    {
        "line": 21,
        "fullcodeline": "int\t\tfp_allocated = FALSE;"
    },
    {
        "line": 22,
        "fullcodeline": "int\t\tfree_fp = FALSE;"
    },
    {
        "line": 23,
        "fullcodeline": "int\t\toverwrite = FALSE;"
    },
    {
        "line": 26,
        "fullcodeline": "static int\tfunc_nr = 0;\t    // number for nameless function"
    },
    {
        "line": 30,
        "fullcodeline": "int\t\tvim9script = in_vim9script();"
    },
    {
        "line": 31,
        "fullcodeline": "imported_T\t*import = NULL;"
    },
    {
        "line": 71,
        "fullcodeline": "ga_init(&newargs);"
    },
    {
        "line": 72,
        "fullcodeline": "ga_init(&argtypes);"
    },
    {
        "line": 73,
        "fullcodeline": "ga_init(&default_args);"
    },
    {
        "line": 91,
        "fullcodeline": "p = eap->arg;"
    },
    {
        "line": 124,
        "fullcodeline": "saved_did_emsg = did_emsg;"
    },
    {
        "line": 125,
        "fullcodeline": "did_emsg = FALSE;"
    },
    {
        "line": 188,
        "fullcodeline": "p = skipwhite(p);"
    },
    {
        "line": 214,
        "fullcodeline": "ga_init2(&newlines, (int)sizeof(char_u *), 10);"
    },
    {
        "line": 267,
        "fullcodeline": "++p;"
    },
    {
        "line": 273,
        "fullcodeline": "whitep = p;"
    },
    {
        "line": 377,
        "fullcodeline": "sourcing_lnum_top = SOURCING_LNUM;"
    },
    {
        "line": 559,
        "fullcodeline": "fp->uf_args = newargs;"
    },
    {
        "line": 560,
        "fullcodeline": "fp->uf_def_args = default_args;"
    },
    {
        "line": 561,
        "fullcodeline": "fp->uf_ret_type = &t_any;"
    },
    {
        "line": 562,
        "fullcodeline": "fp->uf_func_type = &t_func_any;"
    },
    {
        "line": 614,
        "fullcodeline": "fp->uf_lines = newlines;"
    },
    {
        "line": 615,
        "fullcodeline": "newlines.ga_data = NULL;"
    },
    {
        "line": 628,
        "fullcodeline": "fp->uf_varargs = varargs;"
    },
    {
        "line": 633,
        "fullcodeline": "fp->uf_flags = flags;"
    },
    {
        "line": 634,
        "fullcodeline": "fp->uf_calls = 0;"
    },
    {
        "line": 635,
        "fullcodeline": "fp->uf_cleared = FALSE;"
    },
    {
        "line": 636,
        "fullcodeline": "fp->uf_script_ctx = current_sctx;"
    },
    {
        "line": 637,
        "fullcodeline": "fp->uf_script_ctx_version = current_sctx.sc_version;"
    },
    {
        "line": 638,
        "fullcodeline": "fp->uf_script_ctx.sc_lnum += sourcing_lnum_top;"
    },
    {
        "line": 655,
        "fullcodeline": "ga_clear_strings(&newargs);"
    },
    {
        "line": 656,
        "fullcodeline": "ga_clear_strings(&default_args);"
    },
    {
        "line": 663,
        "fullcodeline": "ga_clear_strings(&newlines);"
    },
    {
        "line": 672,
        "fullcodeline": "ga_clear_strings(&argtypes);"
    },
    {
        "line": 673,
        "fullcodeline": "vim_free(line_to_free);"
    },
    {
        "line": 674,
        "fullcodeline": "vim_free(fudi.fd_newkey);"
    },
    {
        "line": 677,
        "fullcodeline": "vim_free(ret_type);"
    },
    {
        "line": 678,
        "fullcodeline": "did_emsg |= saved_did_emsg;"
    },
    {
        "line": 36,
        "fullcodeline": "if (ends_excmd2(eap->cmd, eap->arg))"
    },
    {
        "line": 47,
        "fullcodeline": "if (*eap->arg == '/')"
    },
    {
        "line": 92,
        "fullcodeline": "if (name_arg != NULL)"
    },
    {
        "line": 130,
        "fullcodeline": "if (!paren)"
    },
    {
        "line": 189,
        "fullcodeline": "if (*p != '(')"
    },
    {
        "line": 201,
        "fullcodeline": "if ((vim9script || eap->cmdidx == CMD_def) && VIM_ISWHITE(p[-1]))"
    },
    {
        "line": 208,
        "fullcodeline": "if (vim9script && eap->forceit && !is_global)"
    },
    {
        "line": 216,
        "fullcodeline": "if (!eap->skip && name_arg == NULL)"
    },
    {
        "line": 268,
        "fullcodeline": "if (get_function_args(&p, ')', &newargs,"
    },
    {
        "line": 275,
        "fullcodeline": "if (eap->cmdidx == CMD_def)"
    },
    {
        "line": 341,
        "fullcodeline": "if (*p == '\\n')"
    },
    {
        "line": 381,
        "fullcodeline": "if (get_function_body(eap, &newlines, line_arg, &line_to_free) == FAIL"
    },
    {
        "line": 388,
        "fullcodeline": "if (fudi.fd_dict == NULL)"
    },
    {
        "line": 490,
        "fullcodeline": "if (fp == NULL)"
    },
    {
        "line": 564,
        "fullcodeline": "if (eap->cmdidx == CMD_def)"
    },
    {
        "line": 616,
        "fullcodeline": "if ((flags & FC_CLOSURE) != 0)"
    },
    {
        "line": 631,
        "fullcodeline": "if (vim9script && !ASCII_ISUPPER(*fp->uf_name))"
    },
    {
        "line": 646,
        "fullcodeline": "if (eap->cmdidx == CMD_def)"
    },
    {
        "line": 657,
        "fullcodeline": "if (fp != NULL)"
    },
    {
        "line": 664,
        "fullcodeline": "if (fp != NULL)"
    },
    {
        "line": 675,
        "fullcodeline": "if (name != name_arg)"
    },
    {
        "line": 40,
        "fullcodeline": "set_nextcmd(eap, eap->arg);"
    },
    {
        "line": 49,
        "fullcodeline": "p = skip_regexp(eap->arg + 1, '/', TRUE);"
    },
    {
        "line": 67,
        "fullcodeline": "set_nextcmd(eap, p);"
    },
    {
        "line": 95,
        "fullcodeline": "paren = TRUE;"
    },
    {
        "line": 96,
        "fullcodeline": "CLEAR_FIELD(fudi);"
    },
    {
        "line": 137,
        "fullcodeline": "set_nextcmd(eap, p);"
    },
    {
        "line": 203,
        "fullcodeline": "semsg(_(e_no_white_space_allowed_before_str_str), \"(\", p - 1);"
    },
    {
        "line": 210,
        "fullcodeline": "emsg(_(e_nobang));"
    },
    {
        "line": 301,
        "fullcodeline": "p = skipwhite(p);"
    },
    {
        "line": 342,
        "fullcodeline": "line_arg = p + 1;"
    },
    {
        "line": 372,
        "fullcodeline": "msg_putchar('\\n');\t    // don't overwrite the function name"
    },
    {
        "line": 373,
        "fullcodeline": "cmdline_row = msg_row;"
    },
    {
        "line": 392,
        "fullcodeline": "v = find_var(name, &ht, TRUE);"
    },
    {
        "line": 400,
        "fullcodeline": "fp = find_func_even_dead(name, is_global, NULL);"
    },
    {
        "line": 524,
        "fullcodeline": "fp = alloc_clear(offsetof(ufunc_T, uf_name) + STRLEN(name) + 1);"
    },
    {
        "line": 527,
        "fullcodeline": "fp_allocated = TRUE;"
    },
    {
        "line": 566,
        "fullcodeline": "int\t    lnum_save = SOURCING_LNUM;"
    },
    {
        "line": 567,
        "fullcodeline": "cstack_T    *cstack = eap->cstack;"
    },
    {
        "line": 569,
        "fullcodeline": "fp->uf_def_status = UF_TO_BE_COMPILED;"
    },
    {
        "line": 572,
        "fullcodeline": "SOURCING_LNUM = sourcing_lnum_top;"
    },
    {
        "line": 575,
        "fullcodeline": "function_using_block_scopes(fp, cstack);"
    },
    {
        "line": 583,
        "fullcodeline": "varargs = FALSE;"
    },
    {
        "line": 592,
        "fullcodeline": "SOURCING_LNUM = lnum_save;"
    },
    {
        "line": 600,
        "fullcodeline": "set_ufunc_name(fp, name);"
    },
    {
        "line": 611,
        "fullcodeline": "fp->uf_refcount = 1;"
    },
    {
        "line": 630,
        "fullcodeline": "flags |= FC_SANDBOX;"
    },
    {
        "line": 632,
        "fullcodeline": "flags |= FC_VIM9;"
    },
    {
        "line": 641,
        "fullcodeline": "fp->uf_flags |= FC_EXPORT;"
    },
    {
        "line": 643,
        "fullcodeline": "is_export = FALSE;"
    },
    {
        "line": 647,
        "fullcodeline": "set_function_type(fp);"
    },
    {
        "line": 659,
        "fullcodeline": "ga_init(&fp->uf_args);"
    },
    {
        "line": 660,
        "fullcodeline": "ga_init(&fp->uf_def_args);"
    },
    {
        "line": 665,
        "fullcodeline": "VIM_CLEAR(fp->uf_arg_types);"
    },
    {
        "line": 668,
        "fullcodeline": "vim_free(fp);"
    },
    {
        "line": 669,
        "fullcodeline": "fp = NULL;"
    },
    {
        "line": 676,
        "fullcodeline": "vim_free(name);"
    },
    {
        "line": 38,
        "fullcodeline": "if (!eap->skip)"
    },
    {
        "line": 50,
        "fullcodeline": "if (!eap->skip)"
    },
    {
        "line": 65,
        "fullcodeline": "if (*p == '/')"
    },
    {
        "line": 100,
        "fullcodeline": "name = save_function_name(&p, &is_global, eap->skip,"
    },
    {
        "line": 102,
        "fullcodeline": "paren = (vim_strchr(p, '(') != NULL);"
    },
    {
        "line": 132,
        "fullcodeline": "if (!ends_excmd(*skipwhite(p)))"
    },
    {
        "line": 138,
        "fullcodeline": "if (eap->nextcmd != NULL)"
    },
    {
        "line": 140,
        "fullcodeline": "if (!eap->skip && !got_int)"
    },
    {
        "line": 191,
        "fullcodeline": "if (!eap->skip)"
    },
    {
        "line": 197,
        "fullcodeline": "if (vim_strchr(p, '(') != NULL)"
    },
    {
        "line": 220,
        "fullcodeline": "if (name != NULL)"
    },
    {
        "line": 224,
        "fullcodeline": "if (arg != NULL && (fudi.fd_di == NULL"
    },
    {
        "line": 258,
        "fullcodeline": "if (fudi.fd_dict != NULL && fudi.fd_dict->dv_scope == VAR_DEF_SCOPE)"
    },
    {
        "line": 269,
        "fullcodeline": "eap->cmdidx == CMD_def ? &argtypes : NULL, FALSE,"
    },
    {
        "line": 278,
        "fullcodeline": "if (*skipwhite(p) == ':')"
    },
    {
        "line": 361,
        "fullcodeline": "if (!eap->skip && !eap->forceit)"
    },
    {
        "line": 369,
        "fullcodeline": "if (!eap->skip && did_emsg)"
    },
    {
        "line": 393,
        "fullcodeline": "if (v != NULL && v->di_tv.v_type == VAR_FUNC)"
    },
    {
        "line": 408,
        "fullcodeline": "if (fp != NULL || import != NULL)"
    },
    {
        "line": 463,
        "fullcodeline": "char\tnumbuf[20];"
    },
    {
        "line": 465,
        "fullcodeline": "fp = NULL;"
    },
    {
        "line": 483,
        "fullcodeline": "vim_free(name);"
    },
    {
        "line": 484,
        "fullcodeline": "sprintf(numbuf, \"%d\", ++func_nr);"
    },
    {
        "line": 485,
        "fullcodeline": "name = vim_strsave((char_u *)numbuf);"
    },
    {
        "line": 492,
        "fullcodeline": "if (fudi.fd_dict == NULL && vim_strchr(name, AUTOLOAD_CHAR) != NULL)"
    },
    {
        "line": 525,
        "fullcodeline": "if (fp == NULL)"
    },
    {
        "line": 529,
        "fullcodeline": "if (fudi.fd_dict != NULL)"
    },
    {
        "line": 577,
        "fullcodeline": "if (parse_argument_types(fp, &argtypes, varargs) == FAIL)"
    },
    {
        "line": 586,
        "fullcodeline": "if (parse_return_type(fp, ret_type) == FAIL)"
    },
    {
        "line": 595,
        "fullcodeline": "fp->uf_def_status = UF_NOT_COMPILED;"
    },
    {
        "line": 618,
        "fullcodeline": "if (register_closure(fp) == FAIL)"
    },
    {
        "line": 622,
        "fullcodeline": "fp->uf_scoped = NULL;"
    },
    {
        "line": 39,
        "fullcodeline": "list_functions(NULL);"
    },
    {
        "line": 55,
        "fullcodeline": "*p = NUL;"
    },
    {
        "line": 56,
        "fullcodeline": "regmatch.regprog = vim_regcomp(eap->arg + 1, RE_MAGIC);"
    },
    {
        "line": 57,
        "fullcodeline": "*p = c;"
    },
    {
        "line": 66,
        "fullcodeline": "++p;"
    },
    {
        "line": 103,
        "fullcodeline": "if (name == NULL && (fudi.fd_dict == NULL || !paren) && !eap->skip)"
    },
    {
        "line": 134,
        "fullcodeline": "semsg(_(e_trailing_arg), p);"
    },
    {
        "line": 139,
        "fullcodeline": "*p = NUL;"
    },
    {
        "line": 142,
        "fullcodeline": "fp = find_func(name, is_global, NULL);"
    },
    {
        "line": 193,
        "fullcodeline": "semsg(_(\"E124: Missing '(': %s\"), eap->arg);"
    },
    {
        "line": 198,
        "fullcodeline": "p = vim_strchr(p, '(');"
    },
    {
        "line": 221,
        "fullcodeline": "arg = name;"
    },
    {
        "line": 228,
        "fullcodeline": "char_u  *name_base = arg;"
    },
    {
        "line": 260,
        "fullcodeline": "emsg(_(\"E862: Cannot use g: here\"));"
    },
    {
        "line": 287,
        "fullcodeline": "ret_type = skipwhite(p + 1);"
    },
    {
        "line": 288,
        "fullcodeline": "p = skip_type(ret_type, FALSE);"
    },
    {
        "line": 343,
        "fullcodeline": "else if (*p != NUL"
    },
    {
        "line": 395,
        "fullcodeline": "emsg_funcname(N_(\"E707: Function name conflicts with variable: %s\"),"
    },
    {
        "line": 403,
        "fullcodeline": "char_u *uname = untrans_function_name(name);"
    },
    {
        "line": 405,
        "fullcodeline": "import = find_imported(uname == NULL ? name : uname, 0, NULL);"
    },
    {
        "line": 410,
        "fullcodeline": "int dead = fp != NULL && (fp->uf_flags & FC_DEAD);"
    },
    {
        "line": 466,
        "fullcodeline": "if (fudi.fd_newkey == NULL && !eap->forceit)"
    },
    {
        "line": 471,
        "fullcodeline": "if (fudi.fd_di == NULL)"
    },
    {
        "line": 486,
        "fullcodeline": "if (name == NULL)"
    },
    {
        "line": 498,
        "fullcodeline": "j = FAIL;"
    },
    {
        "line": 552,
        "fullcodeline": "fudi.fd_di->di_tv.v_type = VAR_FUNC;"
    },
    {
        "line": 553,
        "fullcodeline": "fudi.fd_di->di_tv.vval.v_string = vim_strsave(name);"
    },
    {
        "line": 556,
        "fullcodeline": "flags |= FC_DICT;"
    },
    {
        "line": 579,
        "fullcodeline": "SOURCING_LNUM = lnum_save;"
    },
    {
        "line": 580,
        "fullcodeline": "free_fp = fp_allocated;"
    },
    {
        "line": 588,
        "fullcodeline": "SOURCING_LNUM = lnum_save;"
    },
    {
        "line": 589,
        "fullcodeline": "free_fp = fp_allocated;"
    },
    {
        "line": 603,
        "fullcodeline": "hi = hash_find(&func_hashtab, name);"
    },
    {
        "line": 604,
        "fullcodeline": "hi->hi_key = UF2HIKEY(fp);"
    },
    {
        "line": 648,
        "fullcodeline": "else if (fp->uf_script_ctx.sc_version == SCRIPT_VERSION_VIM9)"
    },
    {
        "line": 58,
        "fullcodeline": "if (regmatch.regprog != NULL)"
    },
    {
        "line": 143,
        "fullcodeline": "if (fp == NULL && ASCII_ISUPPER(*eap->arg))"
    },
    {
        "line": 153,
        "fullcodeline": "if (fp != NULL)"
    },
    {
        "line": 223,
        "fullcodeline": "arg = fudi.fd_newkey;"
    },
    {
        "line": 225,
        "fullcodeline": "|| (fudi.fd_di->di_tv.v_type != VAR_FUNC"
    },
    {
        "line": 231,
        "fullcodeline": "if (*arg == K_SPECIAL)"
    },
    {
        "line": 239,
        "fullcodeline": "for (i = 0; name_base[i] != NUL && (i == 0"
    },
    {
        "line": 241,
        "fullcodeline": ": eval_isnamec(name_base[i])); ++i)"
    },
    {
        "line": 243,
        "fullcodeline": "if (name_base[i] != NUL)"
    },
    {
        "line": 248,
        "fullcodeline": "if (vim9script && *arg == K_SPECIAL"
    },
    {
        "line": 280,
        "fullcodeline": "if (*p != ':')"
    },
    {
        "line": 289,
        "fullcodeline": "if (p > ret_type)"
    },
    {
        "line": 307,
        "fullcodeline": "whitep = p;"
    },
    {
        "line": 308,
        "fullcodeline": "p = skipwhite(p);"
    },
    {
        "line": 349,
        "fullcodeline": "&& !did_emsg)"
    },
    {
        "line": 350,
        "fullcodeline": "semsg(_(e_trailing_arg), p);"
    },
    {
        "line": 363,
        "fullcodeline": "if (fudi.fd_dict != NULL && fudi.fd_newkey == NULL)"
    },
    {
        "line": 415,
        "fullcodeline": "if (import != NULL"
    },
    {
        "line": 427,
        "fullcodeline": "if (fp->uf_calls > 0)"
    },
    {
        "line": 434,
        "fullcodeline": "if (fp->uf_refcount > 1)"
    },
    {
        "line": 468,
        "fullcodeline": "emsg(_(e_funcdict));"
    },
    {
        "line": 499,
        "fullcodeline": "if (SOURCING_NAME != NULL)"
    },
    {
        "line": 513,
        "fullcodeline": "if (j == FAIL)"
    },
    {
        "line": 531,
        "fullcodeline": "if (fudi.fd_di == NULL)"
    },
    {
        "line": 650,
        "fullcodeline": "fp->uf_script_ctx.sc_version = SCRIPT_VERSION_MAX;"
    },
    {
        "line": 60,
        "fullcodeline": "regmatch.rm_ic = p_ic;"
    },
    {
        "line": 61,
        "fullcodeline": "list_functions(&regmatch);"
    },
    {
        "line": 62,
        "fullcodeline": "vim_regfree(regmatch.regprog);"
    },
    {
        "line": 110,
        "fullcodeline": "if (!aborting())"
    },
    {
        "line": 145,
        "fullcodeline": "char_u *up = untrans_function_name(name);"
    },
    {
        "line": 155,
        "fullcodeline": "list_func_head(fp, TRUE);"
    },
    {
        "line": 226,
        "fullcodeline": "&& fudi.fd_di->di_tv.v_type != VAR_PARTIAL)))"
    },
    {
        "line": 233,
        "fullcodeline": "name_base = vim_strchr(arg, '_');"
    },
    {
        "line": 244,
        "fullcodeline": "emsg_funcname((char *)e_invarg2, arg);"
    },
    {
        "line": 249,
        "fullcodeline": "&& eval_variable(name_base, (int)STRLEN(name_base), NULL, NULL,"
    },
    {
        "line": 253,
        "fullcodeline": "semsg(_(e_redefining_script_item_str), name_base);"
    },
    {
        "line": 282,
        "fullcodeline": "semsg(_(e_no_white_space_allowed_before_colon_str), p);"
    },
    {
        "line": 283,
        "fullcodeline": "p = skipwhite(p);"
    },
    {
        "line": 291,
        "fullcodeline": "ret_type = vim_strnsave(ret_type, p - ret_type);"
    },
    {
        "line": 292,
        "fullcodeline": "whitep = p;"
    },
    {
        "line": 293,
        "fullcodeline": "p = skipwhite(p);"
    },
    {
        "line": 309,
        "fullcodeline": "if (STRNCMP(p, \"range\", 5) == 0)"
    },
    {
        "line": 348,
        "fullcodeline": "&& !eap->skip"
    },
    {
        "line": 364,
        "fullcodeline": "emsg(_(e_funcdict));"
    },
    {
        "line": 416,
        "fullcodeline": "|| (!dead && !eap->forceit"
    },
    {
        "line": 420,
        "fullcodeline": "SOURCING_LNUM = sourcing_lnum_top;"
    },
    {
        "line": 429,
        "fullcodeline": "emsg_funcname("
    },
    {
        "line": 438,
        "fullcodeline": "--fp->uf_refcount;"
    },
    {
        "line": 439,
        "fullcodeline": "fp->uf_flags |= FC_REMOVED;"
    },
    {
        "line": 440,
        "fullcodeline": "fp = NULL;"
    },
    {
        "line": 441,
        "fullcodeline": "overwrite = TRUE;"
    },
    {
        "line": 474,
        "fullcodeline": "if (value_check_lock(fudi.fd_dict->dv_lock, eap->arg, FALSE))"
    },
    {
        "line": 501,
        "fullcodeline": "scriptname = autoload_name(name);"
    },
    {
        "line": 515,
        "fullcodeline": "linenr_T save_lnum = SOURCING_LNUM;"
    },
    {
        "line": 517,
        "fullcodeline": "SOURCING_LNUM = sourcing_lnum_top;"
    },
    {
        "line": 518,
        "fullcodeline": "semsg(_(\"E746: Function name does not match script file name: %s\"), name);"
    },
    {
        "line": 519,
        "fullcodeline": "SOURCING_LNUM = save_lnum;"
    },
    {
        "line": 534,
        "fullcodeline": "fudi.fd_di = dictitem_alloc(fudi.fd_newkey);"
    },
    {
        "line": 606,
        "fullcodeline": "else if (hash_add(&func_hashtab, UF2HIKEY(fp)) == FAIL)"
    },
    {
        "line": 114,
        "fullcodeline": "vim_free(fudi.fd_newkey);"
    },
    {
        "line": 149,
        "fullcodeline": "if (up != NULL)"
    },
    {
        "line": 156,
        "fullcodeline": "for (j = 0; j < fp->uf_lines.ga_len && !got_int; ++j)"
    },
    {
        "line": 170,
        "fullcodeline": "if (!got_int)"
    },
    {
        "line": 180,
        "fullcodeline": "emsg_funcname(N_(\"E123: Undefined function: %s\"), eap->arg);"
    },
    {
        "line": 234,
        "fullcodeline": "if (name_base == NULL)"
    },
    {
        "line": 240,
        "fullcodeline": "? eval_isnamec1(name_base[i])"
    },
    {
        "line": 297,
        "fullcodeline": "semsg(_(e_expected_type_str), ret_type);"
    },
    {
        "line": 298,
        "fullcodeline": "ret_type = NULL;"
    },
    {
        "line": 311,
        "fullcodeline": "flags |= FC_RANGE;"
    },
    {
        "line": 312,
        "fullcodeline": "p += 5;"
    },
    {
        "line": 346,
        "fullcodeline": "&& !(VIM_ISWHITE(*whitep) && *p == '#'"
    },
    {
        "line": 417,
        "fullcodeline": "&& (fp->uf_script_ctx.sc_sid != current_sctx.sc_sid"
    },
    {
        "line": 430,
        "fullcodeline": "N_(\"E127: Cannot redefine function %s: It is in use\"),"
    },
    {
        "line": 445,
        "fullcodeline": "char_u *exp_name = fp->uf_name_exp;"
    },
    {
        "line": 448,
        "fullcodeline": "VIM_CLEAR(name);"
    },
    {
        "line": 449,
        "fullcodeline": "fp->uf_name_exp = NULL;"
    },
    {
        "line": 450,
        "fullcodeline": "func_clear_items(fp);"
    },
    {
        "line": 451,
        "fullcodeline": "fp->uf_name_exp = exp_name;"
    },
    {
        "line": 452,
        "fullcodeline": "fp->uf_flags &= ~FC_DEAD;"
    },
    {
        "line": 457,
        "fullcodeline": "fp->uf_def_status = UF_NOT_COMPILED;"
    },
    {
        "line": 478,
        "fullcodeline": "else if (value_check_lock(fudi.fd_di->di_tv.v_lock, eap->arg, FALSE))"
    },
    {
        "line": 502,
        "fullcodeline": "if (scriptname != NULL)"
    },
    {
        "line": 535,
        "fullcodeline": "if (fudi.fd_di == NULL)"
    },
    {
        "line": 541,
        "fullcodeline": "if (dict_add(fudi.fd_dict, fudi.fd_di) == FAIL)"
    },
    {
        "line": 551,
        "fullcodeline": "clear_tv(&fudi.fd_di->di_tv);"
    },
    {
        "line": 608,
        "fullcodeline": "free_fp = TRUE;"
    },
    {
        "line": 112,
        "fullcodeline": "if (!eap->skip && fudi.fd_newkey != NULL)"
    },
    {
        "line": 118,
        "fullcodeline": "eap->skip = TRUE;"
    },
    {
        "line": 150,
        "fullcodeline": "fp = find_func(up, FALSE, NULL);"
    },
    {
        "line": 160,
        "fullcodeline": "msg_putchar('\\n');"
    },
    {
        "line": 161,
        "fullcodeline": "msg_outnum((long)(j + 1));"
    },
    {
        "line": 166,
        "fullcodeline": "msg_prt_line(FUNCLINE(fp, j), FALSE);"
    },
    {
        "line": 167,
        "fullcodeline": "out_flush();\t// show a line at a time"
    },
    {
        "line": 168,
        "fullcodeline": "ui_breakcheck();"
    },
    {
        "line": 172,
        "fullcodeline": "msg_putchar('\\n');"
    },
    {
        "line": 235,
        "fullcodeline": "name_base = arg + 3;"
    },
    {
        "line": 250,
        "fullcodeline": "EVAL_VAR_NOAUTOLOAD + EVAL_VAR_IMPORT"
    },
    {
        "line": 285,
        "fullcodeline": "else if (!IS_WHITE_OR_NUL(p[1]))"
    },
    {
        "line": 344,
        "fullcodeline": "&& !(*p == '\"' && (!vim9script || eap->cmdidx == CMD_function)"
    },
    {
        "line": 365,
        "fullcodeline": "else if (name != NULL && find_func(name, is_global, NULL) != NULL)"
    },
    {
        "line": 422,
        "fullcodeline": "emsg_funcname(e_name_already_defined_str, name);"
    },
    {
        "line": 504,
        "fullcodeline": "p = vim_strchr(scriptname, '/');"
    },
    {
        "line": 505,
        "fullcodeline": "plen = (int)STRLEN(p);"
    },
    {
        "line": 506,
        "fullcodeline": "slen = (int)STRLEN(SOURCING_NAME);"
    },
    {
        "line": 510,
        "fullcodeline": "vim_free(scriptname);"
    },
    {
        "line": 537,
        "fullcodeline": "vim_free(fp);"
    },
    {
        "line": 538,
        "fullcodeline": "fp = NULL;"
    },
    {
        "line": 543,
        "fullcodeline": "vim_free(fudi.fd_di);"
    },
    {
        "line": 544,
        "fullcodeline": "vim_free(fp);"
    },
    {
        "line": 545,
        "fullcodeline": "fp = NULL;"
    },
    {
        "line": 113,
        "fullcodeline": "semsg(_(e_dictkey), fudi.fd_newkey);"
    },
    {
        "line": 158,
        "fullcodeline": "if (FUNCLINE(fp, j) == NULL)"
    },
    {
        "line": 162,
        "fullcodeline": "if (j < 9)"
    },
    {
        "line": 164,
        "fullcodeline": "if (j < 99)"
    },
    {
        "line": 173,
        "fullcodeline": "if (fp->uf_def_status != UF_NOT_COMPILED)"
    },
    {
        "line": 237,
        "fullcodeline": "++name_base;"
    },
    {
        "line": 286,
        "fullcodeline": "semsg(_(e_white_space_required_after_str_str), \":\", p);"
    },
    {
        "line": 314,
        "fullcodeline": "else if (STRNCMP(p, \"dict\", 4) == 0)"
    },
    {
        "line": 347,
        "fullcodeline": "&& (vim9script || eap->cmdidx == CMD_def))"
    },
    {
        "line": 366,
        "fullcodeline": "emsg_funcname(e_funcexts, name);"
    },
    {
        "line": 424,
        "fullcodeline": "emsg_funcname(e_funcexts, name);"
    },
    {
        "line": 507,
        "fullcodeline": "if (slen > plen && fnamecmp(p,"
    },
    {
        "line": 163,
        "fullcodeline": "msg_putchar(' ');"
    },
    {
        "line": 165,
        "fullcodeline": "msg_putchar(' ');"
    },
    {
        "line": 174,
        "fullcodeline": "msg_puts(\"   enddef\");"
    },
    {
        "line": 316,
        "fullcodeline": "flags |= FC_DICT;"
    },
    {
        "line": 317,
        "fullcodeline": "p += 4;"
    },
    {
        "line": 345,
        "fullcodeline": "&& eap->cmdidx != CMD_def)"
    },
    {
        "line": 509,
        "fullcodeline": "j = OK;"
    },
    {
        "line": 176,
        "fullcodeline": "msg_puts(\"   endfunction\");"
    },
    {
        "line": 319,
        "fullcodeline": "else if (STRNCMP(p, \"abort\", 5) == 0)"
    },
    {
        "line": 508,
        "fullcodeline": "SOURCING_NAME + slen - plen) == 0)"
    },
    {
        "line": 321,
        "fullcodeline": "flags |= FC_ABORT;"
    },
    {
        "line": 322,
        "fullcodeline": "p += 5;"
    },
    {
        "line": 324,
        "fullcodeline": "else if (STRNCMP(p, \"closure\", 7) == 0)"
    },
    {
        "line": 326,
        "fullcodeline": "flags |= FC_CLOSURE;"
    },
    {
        "line": 327,
        "fullcodeline": "p += 7;"
    },
    {
        "line": 328,
        "fullcodeline": "if (current_funccal == NULL)"
    },
    {
        "line": 330,
        "fullcodeline": "emsg_funcname(N_(\"E932: Closure function should not be at top level: %s\"),"
    },
    {
        "line": 331,
        "fullcodeline": "name == NULL ? (char_u *)\"\" : name);"
    }
]