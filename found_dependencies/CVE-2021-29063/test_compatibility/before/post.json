[
    {
        "line": 23,
        "fullcodeline": "mp.prec = 1000"
    },
    {
        "line": 25,
        "fullcodeline": "assert sqrt(Fraction(2, 3)).ae(sqrt(mpf('2/3')))"
    },
    {
        "line": 26,
        "fullcodeline": "assert sqrt(Decimal(2)/Decimal(3)).ae(sqrt(mpf('2/3')))"
    },
    {
        "line": 27,
        "fullcodeline": "mp.prec = oldprec"
    },
    {
        "line": 10,
        "fullcodeline": "for nptype in np.core.numerictypes.typeDict.values():"
    },
    {
        "line": 3,
        "fullcodeline": "import numpy as np"
    },
    {
        "line": 4,
        "fullcodeline": "from fractions import Fraction"
    },
    {
        "line": 5,
        "fullcodeline": "from decimal import Decimal"
    },
    {
        "line": 6,
        "fullcodeline": "import decimal"
    },
    {
        "line": 24,
        "fullcodeline": "decimal.getcontext().prec = mp.dps"
    },
    {
        "line": 20,
        "fullcodeline": "assert diff < 2.0**-53"
    },
    {
        "line": 11,
        "fullcodeline": "if issubclass(nptype, np.complexfloating):"
    },
    {
        "line": 12,
        "fullcodeline": "x = nptype(complex(0.5, -0.5))"
    },
    {
        "line": 18,
        "fullcodeline": "try: diff = np.abs(type(np.sqrt(x))(sqrt(x)) - np.sqrt(x))"
    },
    {
        "line": 13,
        "fullcodeline": "elif issubclass(nptype, np.floating):"
    },
    {
        "line": 14,
        "fullcodeline": "x = nptype(0.5)"
    },
    {
        "line": 15,
        "fullcodeline": "elif issubclass(nptype, np.integer):"
    },
    {
        "line": 16,
        "fullcodeline": "x = nptype(2)"
    }
]