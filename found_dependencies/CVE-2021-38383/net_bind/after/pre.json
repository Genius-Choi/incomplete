[
    {
        "line": 3,
        "fullcodeline": "struct addrinfo hints = { 0 };"
    },
    {
        "line": 6,
        "fullcodeline": "union net_sockaddr naddr = { 0 };"
    },
    {
        "line": 7,
        "fullcodeline": "socklen_t naddr_len = sizeof(naddr);"
    },
    {
        "line": 9,
        "fullcodeline": "char addr[INET6_ADDRSTRLEN];"
    },
    {
        "line": 10,
        "fullcodeline": "char strport[8];"
    },
    {
        "line": 11,
        "fullcodeline": "int yes = 1;"
    },
    {
        "line": 12,
        "fullcodeline": "int no = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "cfgaddr = cfg_getstr(cfg_getsec(cfg, \"general\"), \"bind_address\");"
    },
    {
        "line": 18,
        "fullcodeline": "hints.ai_socktype = (type & (SOCK_STREAM | SOCK_DGRAM)); // filter since type can be SOCK_STREAM | SOCK_NONBLOCK"
    },
    {
        "line": 19,
        "fullcodeline": "hints.ai_family = (cfg_getbool(cfg_getsec(cfg, \"general\"), \"ipv6\")) ? AF_INET6 : AF_INET;"
    },
    {
        "line": 20,
        "fullcodeline": "hints.ai_flags = cfgaddr ? 0 : AI_PASSIVE;"
    },
    {
        "line": 22,
        "fullcodeline": "snprintf(strport, sizeof(strport), \"%hu\", *port);"
    },
    {
        "line": 23,
        "fullcodeline": "ret = getaddrinfo(cfgaddr, strport, &hints, &servinfo);"
    },
    {
        "line": 73,
        "fullcodeline": "ret = getsockname(fd, &naddr.sa, &naddr_len);"
    },
    {
        "line": 85,
        "fullcodeline": "net_port_get(port, &naddr);"
    },
    {
        "line": 86,
        "fullcodeline": "net_address_get(addr, sizeof(addr), &naddr);"
    },
    {
        "line": 88,
        "fullcodeline": "DPRINTF(E_DBG, L_MISC, \"Service '%s' bound to %s, port %hu, socket %d\\n\", log_service_name, addr, *port, fd);"
    },
    {
        "line": 24,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 30,
        "fullcodeline": "for (ptr = servinfo, fd = -1; ptr != NULL; ptr = ptr->ai_next)"
    },
    {
        "line": 94,
        "fullcodeline": "return -1;"
    },
    {
        "line": 26,
        "fullcodeline": "DPRINTF(E_LOG, L_MISC, \"Failure creating '%s' service, could not resolve '%s' (port %s): %s\\n\", log_service_name, cfgaddr ? cfgaddr : \"(ANY)\", strport, gai_strerror(ret));"
    },
    {
        "line": 35,
        "fullcodeline": "fd = socket(ptr->ai_family, type | SOCK_CLOEXEC, ptr->ai_protocol);"
    },
    {
        "line": 40,
        "fullcodeline": "ret = setsockopt(fd, SOL_SOCKET, SO_KEEPALIVE, &yes, sizeof(yes));"
    },
    {
        "line": 44,
        "fullcodeline": "ret = setsockopt(fd, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(yes));"
    },
    {
        "line": 56,
        "fullcodeline": "ret = bind(fd, ptr->ai_addr, ptr->ai_addrlen);"
    },
    {
        "line": 27,
        "fullcodeline": "return -1;"
    },
    {
        "line": 32,
        "fullcodeline": "if (fd >= 0)"
    },
    {
        "line": 36,
        "fullcodeline": "if (fd < 0)"
    },
    {
        "line": 48,
        "fullcodeline": "if (ptr->ai_family == AF_INET6)"
    },
    {
        "line": 67,
        "fullcodeline": "DPRINTF(E_LOG, L_MISC, \"Could not create service '%s' with address %s, port %hu: %s\\n\", log_service_name, cfgaddr ? cfgaddr : \"(ANY)\", *port, strerror(errno));"
    },
    {
        "line": 76,
        "fullcodeline": "DPRINTF(E_LOG, L_MISC, \"Error finding address of service '%s': %s\\n\", log_service_name, strerror(errno));"
    },
    {
        "line": 51,
        "fullcodeline": "ret = setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, &no, sizeof(no));"
    }
]