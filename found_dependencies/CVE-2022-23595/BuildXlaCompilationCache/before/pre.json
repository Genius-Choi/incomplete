[
    {
        "line": 11,
        "fullcodeline": "auto platform ="
    },
    {
        "line": 17,
        "fullcodeline": "StatusOr<xla::Compiler*> compiler_for_platform ="
    },
    {
        "line": 39,
        "fullcodeline": "client_options.set_platform(platform.ValueOrDie());"
    },
    {
        "line": 40,
        "fullcodeline": "client_options.set_intra_op_parallelism_threads("
    },
    {
        "line": 47,
        "fullcodeline": "client_options.set_allowed_devices(gpu_ids);"
    },
    {
        "line": 49,
        "fullcodeline": "auto client = xla::ClientLibrary::GetOrCreateLocalClient(client_options);"
    },
    {
        "line": 4,
        "fullcodeline": "if (platform_info.xla_device_metadata()) {"
    },
    {
        "line": 12,
        "fullcodeline": "se::MultiPlatformManager::PlatformWithId(platform_info.platform_id());"
    },
    {
        "line": 18,
        "fullcodeline": "xla::Compiler::GetForPlatform(platform.ValueOrDie());"
    },
    {
        "line": 44,
        "fullcodeline": "flr->config_proto()->gpu_options().visible_device_list();"
    },
    {
        "line": 59,
        "fullcodeline": "*cache = new XlaCompilationCache("
    },
    {
        "line": 61,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 5,
        "fullcodeline": "*cache = new XlaCompilationCache("
    },
    {
        "line": 13,
        "fullcodeline": "if (!platform.ok()) {"
    },
    {
        "line": 19,
        "fullcodeline": "if (!compiler_for_platform.ok()) {"
    },
    {
        "line": 30,
        "fullcodeline": "const Status& status = compiler_for_platform.status();"
    },
    {
        "line": 50,
        "fullcodeline": "if (!client.ok()) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (!XlaOpRegistry::GetCompilationDevice(platform_info.device_type().type(),"
    },
    {
        "line": 60,
        "fullcodeline": "client.ValueOrDie(), DeviceType(registration->compilation_device_name));"
    },
    {
        "line": 8,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 14,
        "fullcodeline": "return platform.status();"
    },
    {
        "line": 51,
        "fullcodeline": "return client.status();"
    },
    {
        "line": 56,
        "fullcodeline": "return errors::InvalidArgument(\"No JIT device registered for \","
    },
    {
        "line": 6,
        "fullcodeline": "platform_info.xla_device_metadata()->client(),"
    },
    {
        "line": 7,
        "fullcodeline": "platform_info.xla_device_metadata()->jit_device_type());"
    },
    {
        "line": 31,
        "fullcodeline": "if (status.code() == error::NOT_FOUND) {"
    },
    {
        "line": 57,
        "fullcodeline": "platform_info.device_type().type());"
    },
    {
        "line": 32,
        "fullcodeline": "return errors::Unimplemented(\"Could not find compiler for platform \","
    },
    {
        "line": 33,
        "fullcodeline": "platform.ValueOrDie()->Name(), \": \","
    },
    {
        "line": 34,
        "fullcodeline": "status.ToString());"
    }
]