[
    {
        "line": 3,
        "fullcodeline": "int8_t level1_lens[18] = { 0 };"
    },
    {
        "line": 4,
        "fullcodeline": "int8_t level1_lens_s[18] = { 0 };"
    },
    {
        "line": 5,
        "fullcodeline": "int16_t level1_syms[18] = { 0 };"
    },
    {
        "line": 6,
        "fullcodeline": "uint32_t level1_codecounts[19] = { 0 };"
    },
    {
        "line": 7,
        "fullcodeline": "uint8_t *buf = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "int repeat_count_prev = 0, repeat_count_zero = 0, prev = 8;"
    },
    {
        "line": 13,
        "fullcodeline": "int total_code = 0, len, hskip, num_codes = 0, ret;"
    },
    {
        "line": 15,
        "fullcodeline": "VLC level1_vlc = { 0 };"
    },
    {
        "line": 23,
        "fullcodeline": "hskip = get_bits(gb, 2);"
    },
    {
        "line": 27,
        "fullcodeline": "level1_codecounts[0] = hskip;"
    },
    {
        "line": 55,
        "fullcodeline": "ret = ff_vlc_init_from_lengths(&level1_vlc, 5, 18, level1_lens_s, 1, level1_syms, 2, 2,"
    },
    {
        "line": 60,
        "fullcodeline": "buf = av_mallocz(MAX_PREFIX_ALPHABET_SIZE * (2 * sizeof(int8_t) + sizeof(int16_t) + sizeof(uint32_t))"
    },
    {
        "line": 67,
        "fullcodeline": "level2_lens = (int8_t *)buf;"
    },
    {
        "line": 68,
        "fullcodeline": "level2_lens_s = (int8_t *)(buf + MAX_PREFIX_ALPHABET_SIZE * sizeof(int8_t));"
    },
    {
        "line": 69,
        "fullcodeline": "level2_syms = (int16_t *)(buf + MAX_PREFIX_ALPHABET_SIZE * (2 * sizeof(int8_t)));"
    },
    {
        "line": 70,
        "fullcodeline": "level2_codecounts = (uint32_t *)(buf + MAX_PREFIX_ALPHABET_SIZE * (2 * sizeof(int8_t) + sizeof(int16_t)));"
    },
    {
        "line": 72,
        "fullcodeline": "total_code = 0;"
    },
    {
        "line": 129,
        "fullcodeline": "ret = ff_vlc_init_from_lengths(&dist->vlc, 15, dist->alphabet_size, level2_lens_s,"
    },
    {
        "line": 17,
        "fullcodeline": "if (dist->alphabet_size == 1) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (hskip == 1)"
    },
    {
        "line": 28,
        "fullcodeline": "for (int i = hskip; i < 18; i++) {"
    },
    {
        "line": 46,
        "fullcodeline": "for (int i = 1; i < 19; i++)"
    },
    {
        "line": 49,
        "fullcodeline": "for (int i = 17; i >= 0; i--) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 62,
        "fullcodeline": "if (!buf) {"
    },
    {
        "line": 73,
        "fullcodeline": "for (int i = 0; i < dist->alphabet_size; i++) {"
    },
    {
        "line": 120,
        "fullcodeline": "for (int i = 1; i < dist->alphabet_size + 1; i++)"
    },
    {
        "line": 123,
        "fullcodeline": "for (int i = dist->alphabet_size - 1; i >= 0; i--) {"
    },
    {
        "line": 18,
        "fullcodeline": "dist->vlc.bits = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "dist->default_symbol = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "len = level1_lens[prefix_codelen_map[i]] = get_vlc2(gb, level0_table, 4, 1);"
    },
    {
        "line": 41,
        "fullcodeline": "if (total_code != 32 && num_codes >= 2 || num_codes < 1) {"
    },
    {
        "line": 42,
        "fullcodeline": "ret = AVERROR_INVALIDDATA;"
    },
    {
        "line": 51,
        "fullcodeline": "level1_lens_s[idx] = level1_lens[i];"
    },
    {
        "line": 52,
        "fullcodeline": "level1_syms[idx] = i;"
    },
    {
        "line": 63,
        "fullcodeline": "ret = AVERROR(ENOMEM);"
    },
    {
        "line": 74,
        "fullcodeline": "len = get_vlc2(gb, level1_vlc.table, 5, 1);"
    },
    {
        "line": 115,
        "fullcodeline": "if (total_code != 32768 && level2_codecounts[0] < dist->alphabet_size - 1) {"
    },
    {
        "line": 116,
        "fullcodeline": "ret = AVERROR_INVALIDDATA;"
    },
    {
        "line": 125,
        "fullcodeline": "level2_lens_s[idx] = level2_lens[i];"
    },
    {
        "line": 126,
        "fullcodeline": "level2_syms[idx] = i;"
    },
    {
        "line": 25,
        "fullcodeline": "return read_simple_vlc_prefix(gb, dec, dist);"
    },
    {
        "line": 35,
        "fullcodeline": "if (total_code >= 32) {"
    },
    {
        "line": 47,
        "fullcodeline": "level1_codecounts[i] += level1_codecounts[i - 1];"
    },
    {
        "line": 50,
        "fullcodeline": "int idx = --level1_codecounts[level1_lens[i]];"
    },
    {
        "line": 79,
        "fullcodeline": "if (len == 16) {"
    },
    {
        "line": 109,
        "fullcodeline": "if (total_code >= 32768) {"
    },
    {
        "line": 121,
        "fullcodeline": "level2_codecounts[i] += level2_codecounts[i - 1];"
    },
    {
        "line": 124,
        "fullcodeline": "int idx = --level2_codecounts[level2_lens[i]];"
    },
    {
        "line": 32,
        "fullcodeline": "total_code += (32 >> len);"
    },
    {
        "line": 33,
        "fullcodeline": "num_codes++;"
    },
    {
        "line": 75,
        "fullcodeline": "if (get_bits_left(gb) < 0) {"
    },
    {
        "line": 76,
        "fullcodeline": "ret = AVERROR_BUFFER_TOO_SMALL;"
    },
    {
        "line": 80,
        "fullcodeline": "int extra = 3 + get_bits(gb, 2);"
    },
    {
        "line": 83,
        "fullcodeline": "extra = FFMIN(extra, dist->alphabet_size - i);"
    },
    {
        "line": 86,
        "fullcodeline": "total_code += (32768 >> prev) * extra;"
    },
    {
        "line": 87,
        "fullcodeline": "i += extra - 1;"
    },
    {
        "line": 88,
        "fullcodeline": "repeat_count_prev += extra;"
    },
    {
        "line": 89,
        "fullcodeline": "repeat_count_zero = 0;"
    },
    {
        "line": 110,
        "fullcodeline": "level2_codecounts[0] += dist->alphabet_size - i - 1;"
    },
    {
        "line": 36,
        "fullcodeline": "level1_codecounts[0] += 18 - i - 1;"
    },
    {
        "line": 84,
        "fullcodeline": "for (int j = 0; j < extra; j++)"
    },
    {
        "line": 82,
        "fullcodeline": "extra += 4 * (repeat_count_prev - 2) - repeat_count_prev;"
    },
    {
        "line": 91,
        "fullcodeline": "} else if (len == 17) {"
    },
    {
        "line": 92,
        "fullcodeline": "int extra = 3 + get_bits(gb, 3);"
    },
    {
        "line": 95,
        "fullcodeline": "extra = FFMIN(extra, dist->alphabet_size - i);"
    },
    {
        "line": 96,
        "fullcodeline": "i += extra - 1;"
    },
    {
        "line": 97,
        "fullcodeline": "repeat_count_prev = 0;"
    },
    {
        "line": 98,
        "fullcodeline": "repeat_count_zero += extra;"
    },
    {
        "line": 99,
        "fullcodeline": "level2_codecounts[0] += extra;"
    },
    {
        "line": 93,
        "fullcodeline": "if (repeat_count_zero > 0)"
    },
    {
        "line": 101,
        "fullcodeline": "level2_lens[i] = len;"
    },
    {
        "line": 102,
        "fullcodeline": "repeat_count_prev = repeat_count_zero = 0;"
    },
    {
        "line": 94,
        "fullcodeline": "extra += 8 * (repeat_count_zero - 2) - repeat_count_zero;"
    },
    {
        "line": 104,
        "fullcodeline": "total_code += (32768 >> len);"
    },
    {
        "line": 105,
        "fullcodeline": "prev = len;"
    }
]