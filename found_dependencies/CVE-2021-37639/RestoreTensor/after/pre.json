[
    {
        "line": 4,
        "fullcodeline": "const Tensor& file_pattern_t = context->input(0);"
    },
    {
        "line": 13,
        "fullcodeline": "const string& file_pattern = file_pattern_t.flat<tstring>()(0);"
    },
    {
        "line": 15,
        "fullcodeline": "const Tensor& tensor_name_t = context->input(1);"
    },
    {
        "line": 23,
        "fullcodeline": "const string& tensor_name = tensor_name_t.flat<tstring>()(restore_index);"
    },
    {
        "line": 26,
        "fullcodeline": "std::unique_ptr<checkpoint::TensorSliceReader> allocated_reader;"
    },
    {
        "line": 28,
        "fullcodeline": "const checkpoint::TensorSliceReader* reader = nullptr;"
    },
    {
        "line": 39,
        "fullcodeline": "OP_REQUIRES_OK(context, CHECK_NOTNULL(reader)->status());"
    },
    {
        "line": 44,
        "fullcodeline": "OP_REQUIRES("
    },
    {
        "line": 48,
        "fullcodeline": "OP_REQUIRES("
    },
    {
        "line": 56,
        "fullcodeline": "TensorShape output_shape(saved_shape);"
    },
    {
        "line": 57,
        "fullcodeline": "TensorSlice slice_to_load(saved_shape.dims());"
    },
    {
        "line": 76,
        "fullcodeline": "Tensor* t = nullptr;"
    },
    {
        "line": 77,
        "fullcodeline": "OP_REQUIRES_OK(context,"
    },
    {
        "line": 6,
        "fullcodeline": "const int64_t size = file_pattern_t.NumElements();"
    },
    {
        "line": 7,
        "fullcodeline": "OP_REQUIRES("
    },
    {
        "line": 17,
        "fullcodeline": "const int64_t size = tensor_name_t.NumElements();"
    },
    {
        "line": 18,
        "fullcodeline": "OP_REQUIRES(context, size > restore_index,"
    },
    {
        "line": 30,
        "fullcodeline": "if (context->slice_reader_cache()) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (!reader) {"
    },
    {
        "line": 45,
        "fullcodeline": "context, reader->HasTensor(tensor_name, &saved_shape, &type),"
    },
    {
        "line": 46,
        "fullcodeline": "errors::NotFound(\"Tensor name \\\"\", tensor_name,"
    },
    {
        "line": 49,
        "fullcodeline": "context, type == context->expected_output_dtype(restore_index),"
    },
    {
        "line": 50,
        "fullcodeline": "errors::InvalidArgument(\"Expected to restore a tensor of type \","
    },
    {
        "line": 78,
        "fullcodeline": "context->allocate_output(restore_index, output_shape, &t));"
    },
    {
        "line": 80,
        "fullcodeline": "if (output_shape.num_elements() == 0) return;"
    },
    {
        "line": 8,
        "fullcodeline": "context, size == 1,"
    },
    {
        "line": 9,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 19,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 31,
        "fullcodeline": "reader = context->slice_reader_cache()->GetReader(file_pattern, open_func,"
    },
    {
        "line": 35,
        "fullcodeline": "allocated_reader.reset(new checkpoint::TensorSliceReader("
    },
    {
        "line": 37,
        "fullcodeline": "reader = allocated_reader.get();"
    },
    {
        "line": 51,
        "fullcodeline": "DataTypeString(context->expected_output_dtype(0)),"
    },
    {
        "line": 52,
        "fullcodeline": "\", got a tensor of type \", DataTypeString(type),"
    },
    {
        "line": 59,
        "fullcodeline": "const tstring& shape_spec ="
    },
    {
        "line": 60,
        "fullcodeline": "context->input(2).flat<tstring>()(restore_index);"
    },
    {
        "line": 61,
        "fullcodeline": "if (!shape_spec.empty()) {"
    },
    {
        "line": 93,
        "fullcodeline": "context->SetStatus(errors::Unimplemented("
    },
    {
        "line": 63,
        "fullcodeline": "OP_REQUIRES_OK(context, checkpoint::ParseShapeAndSlice("
    },
    {
        "line": 66,
        "fullcodeline": "OP_REQUIRES("
    },
    {
        "line": 94,
        "fullcodeline": "\"Restoring data type \", DataTypeString(type), \" not yet supported\"));"
    },
    {
        "line": 67,
        "fullcodeline": "context, parsed_shape.IsSameSize(saved_shape),"
    },
    {
        "line": 68,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 71,
        "fullcodeline": "parsed_shape.DebugString(),"
    },
    {
        "line": 72,
        "fullcodeline": "\", save file shape: \", saved_shape.DebugString()));"
    }
]