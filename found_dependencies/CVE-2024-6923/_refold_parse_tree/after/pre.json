[
    {
        "line": 6,
        "fullcodeline": "maxlen = policy.max_line_length or sys.maxsize"
    },
    {
        "line": 7,
        "fullcodeline": "encoding = 'utf-8' if policy.utf8 else 'us-ascii'"
    },
    {
        "line": 8,
        "fullcodeline": "lines = ['']  # Folded lines to be output"
    },
    {
        "line": 9,
        "fullcodeline": "leading_whitespace = ''  # When we have whitespace between two encoded"
    },
    {
        "line": 12,
        "fullcodeline": "last_ew = None  # Points to the last encoded character if there's an ew on"
    },
    {
        "line": 14,
        "fullcodeline": "last_charset = None"
    },
    {
        "line": 15,
        "fullcodeline": "wrap_as_ew_blocked = 0"
    },
    {
        "line": 16,
        "fullcodeline": "want_encoding = False  # This is set to True if we need to encode this part"
    },
    {
        "line": 17,
        "fullcodeline": "end_ew_not_allowed = Terminal('', 'wrap_as_ew_blocked')"
    },
    {
        "line": 18,
        "fullcodeline": "parts = list(parse_tree)"
    },
    {
        "line": 145,
        "fullcodeline": "return policy.linesep.join(lines) + policy.linesep"
    },
    {
        "line": 20,
        "fullcodeline": "part = parts.pop(0)"
    },
    {
        "line": 24,
        "fullcodeline": "tstr = str(part)"
    },
    {
        "line": 104,
        "fullcodeline": "leading_whitespace = ''"
    },
    {
        "line": 138,
        "fullcodeline": "newline = _steal_trailing_WSP_if_exists(lines)"
    },
    {
        "line": 21,
        "fullcodeline": "if part is end_ew_not_allowed:"
    },
    {
        "line": 25,
        "fullcodeline": "if not want_encoding:"
    },
    {
        "line": 45,
        "fullcodeline": "if part.token_type == 'mime-parameters':"
    },
    {
        "line": 50,
        "fullcodeline": "if want_encoding and not wrap_as_ew_blocked:"
    },
    {
        "line": 97,
        "fullcodeline": "if len(tstr) <= maxlen - len(lines[-1]):"
    },
    {
        "line": 105,
        "fullcodeline": "if (part.syntactic_break and"
    },
    {
        "line": 123,
        "fullcodeline": "if not hasattr(part, 'encode'):"
    },
    {
        "line": 131,
        "fullcodeline": "if part.as_ew_allowed and not wrap_as_ew_blocked:"
    },
    {
        "line": 139,
        "fullcodeline": "if newline or part.startswith_fws():"
    },
    {
        "line": 22,
        "fullcodeline": "wrap_as_ew_blocked -= 1"
    },
    {
        "line": 33,
        "fullcodeline": "tstr.encode(encoding)"
    },
    {
        "line": 34,
        "fullcodeline": "charset = encoding"
    },
    {
        "line": 47,
        "fullcodeline": "_fold_mime_parameters(part, lines, maxlen, encoding)"
    },
    {
        "line": 98,
        "fullcodeline": "lines[-1] += tstr"
    },
    {
        "line": 106,
        "fullcodeline": "len(tstr) + 1 <= maxlen):"
    },
    {
        "line": 107,
        "fullcodeline": "newline = _steal_trailing_WSP_if_exists(lines)"
    },
    {
        "line": 125,
        "fullcodeline": "newparts = list(part)"
    },
    {
        "line": 129,
        "fullcodeline": "parts = newparts + parts"
    },
    {
        "line": 134,
        "fullcodeline": "parts.insert(0, part)"
    },
    {
        "line": 135,
        "fullcodeline": "want_encoding = True"
    },
    {
        "line": 140,
        "fullcodeline": "lines.append(newline + tstr)"
    },
    {
        "line": 143,
        "fullcodeline": "lines[-1] += tstr"
    },
    {
        "line": 26,
        "fullcodeline": "if part.token_type == 'ptext':"
    },
    {
        "line": 51,
        "fullcodeline": "if not part.as_ew_allowed:"
    },
    {
        "line": 69,
        "fullcodeline": "if not hasattr(part, 'encode'):"
    },
    {
        "line": 108,
        "fullcodeline": "if newline or part.startswith_fws():"
    },
    {
        "line": 126,
        "fullcodeline": "if not part.as_ew_allowed:"
    },
    {
        "line": 28,
        "fullcodeline": "want_encoding = not SPECIALSNL.isdisjoint(tstr)"
    },
    {
        "line": 31,
        "fullcodeline": "want_encoding = not NLSET.isdisjoint(tstr)"
    },
    {
        "line": 43,
        "fullcodeline": "want_encoding = True"
    },
    {
        "line": 52,
        "fullcodeline": "want_encoding = False"
    },
    {
        "line": 53,
        "fullcodeline": "last_ew = None"
    },
    {
        "line": 71,
        "fullcodeline": "parts = list(part) + parts"
    },
    {
        "line": 72,
        "fullcodeline": "want_encoding = False"
    },
    {
        "line": 113,
        "fullcodeline": "lines.append(newline + tstr)"
    },
    {
        "line": 115,
        "fullcodeline": "whitespace_accumulator = []"
    },
    {
        "line": 120,
        "fullcodeline": "leading_whitespace = ''.join(whitespace_accumulator)"
    },
    {
        "line": 121,
        "fullcodeline": "last_ew = None"
    },
    {
        "line": 127,
        "fullcodeline": "wrap_as_ew_blocked += 1"
    },
    {
        "line": 128,
        "fullcodeline": "newparts.append(end_ew_not_allowed)"
    },
    {
        "line": 36,
        "fullcodeline": "if any(isinstance(x, errors.UndecodableBytesDefect)"
    },
    {
        "line": 116,
        "fullcodeline": "for char in lines[-1]:"
    },
    {
        "line": 38,
        "fullcodeline": "charset = 'unknown-8bit'"
    },
    {
        "line": 42,
        "fullcodeline": "charset = 'utf-8'"
    },
    {
        "line": 55,
        "fullcodeline": "encoded_part = part.fold(policy=policy)[:-len(policy.linesep)]"
    },
    {
        "line": 82,
        "fullcodeline": "last_ew = _fold_as_ew(tstr, lines, maxlen, last_ew,"
    },
    {
        "line": 86,
        "fullcodeline": "leading_whitespace = ''"
    },
    {
        "line": 87,
        "fullcodeline": "last_charset = charset"
    },
    {
        "line": 88,
        "fullcodeline": "want_encoding = False"
    },
    {
        "line": 93,
        "fullcodeline": "last_ew = None"
    },
    {
        "line": 94,
        "fullcodeline": "want_encoding = False"
    },
    {
        "line": 56,
        "fullcodeline": "if policy.linesep not in encoded_part:"
    },
    {
        "line": 77,
        "fullcodeline": "if (last_ew is not None and"
    },
    {
        "line": 119,
        "fullcodeline": "whitespace_accumulator.append(char)"
    },
    {
        "line": 63,
        "fullcodeline": "lines[-1] += encoded_part"
    },
    {
        "line": 78,
        "fullcodeline": "charset != last_charset and"
    },
    {
        "line": 81,
        "fullcodeline": "last_ew = None"
    },
    {
        "line": 117,
        "fullcodeline": "if char not in WSP:"
    },
    {
        "line": 58,
        "fullcodeline": "if len(encoded_part) > maxlen - len(lines[-1]):"
    },
    {
        "line": 60,
        "fullcodeline": "newline = _steal_trailing_WSP_if_exists(lines)"
    },
    {
        "line": 62,
        "fullcodeline": "lines.append(newline)"
    }
]