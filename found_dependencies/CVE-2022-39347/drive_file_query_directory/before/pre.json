[
    {
        "line": 27,
        "fullcodeline": "length = _wcslen(file->find_data.cFileName) * 2;"
    },
    {
        "line": 171,
        "fullcodeline": "Stream_Write_UINT32(output, 0); /* Length */"
    },
    {
        "line": 7,
        "fullcodeline": "if (!file || !path || !output)"
    },
    {
        "line": 16,
        "fullcodeline": "ent_path = drive_file_combine_fullpath(file->basepath, path, PathLength);"
    },
    {
        "line": 18,
        "fullcodeline": "file->find_handle = FindFirstFileW(ent_path, &file->find_data);"
    },
    {
        "line": 40,
        "fullcodeline": "Stream_Write_UINT32(output, (UINT32)(64 + length)); /* Length */"
    },
    {
        "line": 41,
        "fullcodeline": "Stream_Write_UINT32(output, 0);                     /* NextEntryOffset */"
    },
    {
        "line": 42,
        "fullcodeline": "Stream_Write_UINT32(output, 0);                     /* FileIndex */"
    },
    {
        "line": 43,
        "fullcodeline": "Stream_Write_UINT32(output,"
    },
    {
        "line": 45,
        "fullcodeline": "Stream_Write_UINT32(output,"
    },
    {
        "line": 47,
        "fullcodeline": "Stream_Write_UINT32("
    },
    {
        "line": 49,
        "fullcodeline": "Stream_Write_UINT32("
    },
    {
        "line": 51,
        "fullcodeline": "Stream_Write_UINT32(output,"
    },
    {
        "line": 53,
        "fullcodeline": "Stream_Write_UINT32(output,"
    },
    {
        "line": 55,
        "fullcodeline": "Stream_Write_UINT32(output,"
    },
    {
        "line": 57,
        "fullcodeline": "Stream_Write_UINT32(output,"
    },
    {
        "line": 59,
        "fullcodeline": "Stream_Write_UINT32(output, file->find_data.nFileSizeLow);           /* EndOfFile */"
    },
    {
        "line": 60,
        "fullcodeline": "Stream_Write_UINT32(output, file->find_data.nFileSizeHigh);          /* EndOfFile */"
    },
    {
        "line": 61,
        "fullcodeline": "Stream_Write_UINT32(output, file->find_data.nFileSizeLow);     /* AllocationSize */"
    },
    {
        "line": 62,
        "fullcodeline": "Stream_Write_UINT32(output, file->find_data.nFileSizeHigh);    /* AllocationSize */"
    },
    {
        "line": 63,
        "fullcodeline": "Stream_Write_UINT32(output, file->find_data.dwFileAttributes); /* FileAttributes */"
    },
    {
        "line": 64,
        "fullcodeline": "Stream_Write_UINT32(output, (UINT32)length);                   /* FileNameLength */"
    },
    {
        "line": 77,
        "fullcodeline": "Stream_Write_UINT32(output, (UINT32)(68 + length)); /* Length */"
    },
    {
        "line": 78,
        "fullcodeline": "Stream_Write_UINT32(output, 0);                     /* NextEntryOffset */"
    },
    {
        "line": 79,
        "fullcodeline": "Stream_Write_UINT32(output, 0);                     /* FileIndex */"
    },
    {
        "line": 80,
        "fullcodeline": "Stream_Write_UINT32(output,"
    },
    {
        "line": 82,
        "fullcodeline": "Stream_Write_UINT32(output,"
    },
    {
        "line": 84,
        "fullcodeline": "Stream_Write_UINT32("
    },
    {
        "line": 86,
        "fullcodeline": "Stream_Write_UINT32("
    },
    {
        "line": 88,
        "fullcodeline": "Stream_Write_UINT32(output,"
    },
    {
        "line": 90,
        "fullcodeline": "Stream_Write_UINT32(output,"
    },
    {
        "line": 92,
        "fullcodeline": "Stream_Write_UINT32(output,"
    },
    {
        "line": 94,
        "fullcodeline": "Stream_Write_UINT32(output,"
    },
    {
        "line": 96,
        "fullcodeline": "Stream_Write_UINT32(output, file->find_data.nFileSizeLow);           /* EndOfFile */"
    },
    {
        "line": 97,
        "fullcodeline": "Stream_Write_UINT32(output, file->find_data.nFileSizeHigh);          /* EndOfFile */"
    },
    {
        "line": 98,
        "fullcodeline": "Stream_Write_UINT32(output, file->find_data.nFileSizeLow);     /* AllocationSize */"
    },
    {
        "line": 99,
        "fullcodeline": "Stream_Write_UINT32(output, file->find_data.nFileSizeHigh);    /* AllocationSize */"
    },
    {
        "line": 100,
        "fullcodeline": "Stream_Write_UINT32(output, file->find_data.dwFileAttributes); /* FileAttributes */"
    },
    {
        "line": 101,
        "fullcodeline": "Stream_Write_UINT32(output, (UINT32)length);                   /* FileNameLength */"
    },
    {
        "line": 102,
        "fullcodeline": "Stream_Write_UINT32(output, 0);                                /* EaSize */"
    },
    {
        "line": 115,
        "fullcodeline": "Stream_Write_UINT32(output, (UINT32)(93 + length)); /* Length */"
    },
    {
        "line": 116,
        "fullcodeline": "Stream_Write_UINT32(output, 0);                     /* NextEntryOffset */"
    },
    {
        "line": 117,
        "fullcodeline": "Stream_Write_UINT32(output, 0);                     /* FileIndex */"
    },
    {
        "line": 118,
        "fullcodeline": "Stream_Write_UINT32(output,"
    },
    {
        "line": 120,
        "fullcodeline": "Stream_Write_UINT32(output,"
    },
    {
        "line": 122,
        "fullcodeline": "Stream_Write_UINT32("
    },
    {
        "line": 124,
        "fullcodeline": "Stream_Write_UINT32("
    },
    {
        "line": 126,
        "fullcodeline": "Stream_Write_UINT32(output,"
    },
    {
        "line": 128,
        "fullcodeline": "Stream_Write_UINT32(output,"
    },
    {
        "line": 130,
        "fullcodeline": "Stream_Write_UINT32(output,"
    },
    {
        "line": 132,
        "fullcodeline": "Stream_Write_UINT32(output,"
    },
    {
        "line": 134,
        "fullcodeline": "Stream_Write_UINT32(output, file->find_data.nFileSizeLow);           /* EndOfFile */"
    },
    {
        "line": 135,
        "fullcodeline": "Stream_Write_UINT32(output, file->find_data.nFileSizeHigh);          /* EndOfFile */"
    },
    {
        "line": 136,
        "fullcodeline": "Stream_Write_UINT32(output, file->find_data.nFileSizeLow);     /* AllocationSize */"
    },
    {
        "line": 137,
        "fullcodeline": "Stream_Write_UINT32(output, file->find_data.nFileSizeHigh);    /* AllocationSize */"
    },
    {
        "line": 138,
        "fullcodeline": "Stream_Write_UINT32(output, file->find_data.dwFileAttributes); /* FileAttributes */"
    },
    {
        "line": 139,
        "fullcodeline": "Stream_Write_UINT32(output, (UINT32)length);                   /* FileNameLength */"
    },
    {
        "line": 140,
        "fullcodeline": "Stream_Write_UINT32(output, 0);                                /* EaSize */"
    },
    {
        "line": 141,
        "fullcodeline": "Stream_Write_UINT8(output, 0);                                 /* ShortNameLength */"
    },
    {
        "line": 143,
        "fullcodeline": "Stream_Zero(output, 24); /* ShortName */"
    },
    {
        "line": 156,
        "fullcodeline": "Stream_Write_UINT32(output, (UINT32)(12 + length)); /* Length */"
    },
    {
        "line": 157,
        "fullcodeline": "Stream_Write_UINT32(output, 0);                     /* NextEntryOffset */"
    },
    {
        "line": 158,
        "fullcodeline": "Stream_Write_UINT32(output, 0);                     /* FileIndex */"
    },
    {
        "line": 159,
        "fullcodeline": "Stream_Write_UINT32(output, (UINT32)length);        /* FileNameLength */"
    },
    {
        "line": 13,
        "fullcodeline": "if (file->find_handle != INVALID_HANDLE_VALUE)"
    },
    {
        "line": 37,
        "fullcodeline": "if (length > UINT32_MAX - 64)"
    },
    {
        "line": 74,
        "fullcodeline": "if (length > UINT32_MAX - 68)"
    },
    {
        "line": 112,
        "fullcodeline": "if (length > UINT32_MAX - 93)"
    },
    {
        "line": 153,
        "fullcodeline": "if (length > UINT32_MAX - 12)"
    },
    {
        "line": 34,
        "fullcodeline": "if (!Stream_EnsureRemainingCapacity(output, 4 + 64 + length))"
    },
    {
        "line": 71,
        "fullcodeline": "if (!Stream_EnsureRemainingCapacity(output, 4 + 68 + length))"
    },
    {
        "line": 109,
        "fullcodeline": "if (!Stream_EnsureRemainingCapacity(output, 4 + 93 + length))"
    },
    {
        "line": 150,
        "fullcodeline": "if (!Stream_EnsureRemainingCapacity(output, 4 + 12 + length))"
    },
    {
        "line": 24,
        "fullcodeline": "else if (!FindNextFileW(file->find_handle, &file->find_data))"
    }
]