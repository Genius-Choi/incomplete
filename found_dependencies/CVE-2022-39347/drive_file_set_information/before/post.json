[
    {
        "line": 13,
        "fullcodeline": "FILETIME* pftCreationTime = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "FILETIME* pftLastAccessTime = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "FILETIME* pftLastWriteTime = NULL;"
    },
    {
        "line": 23,
        "fullcodeline": "if (!file || !input)"
    },
    {
        "line": 33,
        "fullcodeline": "Stream_Read_UINT64(input, liCreationTime.QuadPart);"
    },
    {
        "line": 34,
        "fullcodeline": "Stream_Read_UINT64(input, liLastAccessTime.QuadPart);"
    },
    {
        "line": 35,
        "fullcodeline": "Stream_Read_UINT64(input, liLastWriteTime.QuadPart);"
    },
    {
        "line": 36,
        "fullcodeline": "Stream_Read_UINT64(input, liChangeTime.QuadPart);"
    },
    {
        "line": 37,
        "fullcodeline": "Stream_Read_UINT32(input, FileAttributes);"
    },
    {
        "line": 77,
        "fullcodeline": "DEBUG_WSTR(\"SetFileTime %s\", file->fullpath);"
    },
    {
        "line": 79,
        "fullcodeline": "SetFileAttributesW(file->fullpath, FileAttributes);"
    },
    {
        "line": 97,
        "fullcodeline": "Stream_Read_INT64(input, size);"
    },
    {
        "line": 106,
        "fullcodeline": "liSize.QuadPart = size;"
    },
    {
        "line": 115,
        "fullcodeline": "DEBUG_WSTR(\"Truncate %s\", file->fullpath);"
    },
    {
        "line": 155,
        "fullcodeline": "file->delete_pending = delete_pending;"
    },
    {
        "line": 163,
        "fullcodeline": "Stream_Read_UINT8(input, ReplaceIfExists);"
    },
    {
        "line": 164,
        "fullcodeline": "Stream_Seek_UINT8(input); /* RootDirectory */"
    },
    {
        "line": 165,
        "fullcodeline": "Stream_Read_UINT32(input, FileNameLength);"
    },
    {
        "line": 170,
        "fullcodeline": "fullpath = drive_file_combine_fullpath(file->basepath, (WCHAR*)Stream_Pointer(input),"
    },
    {
        "line": 188,
        "fullcodeline": "DEBUG_WSTR(\"MoveFileExW %s\", file->fullpath);"
    },
    {
        "line": 29,
        "fullcodeline": "if (Stream_GetRemainingLength(input) < 36)"
    },
    {
        "line": 39,
        "fullcodeline": "if (!PathFileExistsW(file->fullpath))"
    },
    {
        "line": 42,
        "fullcodeline": "if (file->file_handle == INVALID_HANDLE_VALUE)"
    },
    {
        "line": 49,
        "fullcodeline": "if (liCreationTime.QuadPart != 0)"
    },
    {
        "line": 56,
        "fullcodeline": "if (liLastAccessTime.QuadPart != 0)"
    },
    {
        "line": 63,
        "fullcodeline": "if (liLastWriteTime.QuadPart != 0)"
    },
    {
        "line": 70,
        "fullcodeline": "if (liChangeTime.QuadPart != 0 && liChangeTime.QuadPart > liLastWriteTime.QuadPart)"
    },
    {
        "line": 80,
        "fullcodeline": "if (!SetFileTime(file->file_handle, pftCreationTime, pftLastAccessTime,"
    },
    {
        "line": 93,
        "fullcodeline": "if (Stream_GetRemainingLength(input) < 8)"
    },
    {
        "line": 99,
        "fullcodeline": "if (file->file_handle == INVALID_HANDLE_VALUE)"
    },
    {
        "line": 108,
        "fullcodeline": "if (!SetFilePointerEx(file->file_handle, liSize, NULL, FILE_BEGIN))"
    },
    {
        "line": 117,
        "fullcodeline": "if (SetEndOfFile(file->file_handle) == 0)"
    },
    {
        "line": 130,
        "fullcodeline": "if (file->is_dir && !PathIsDirectoryEmptyW(file->fullpath))"
    },
    {
        "line": 159,
        "fullcodeline": "if (Stream_GetRemainingLength(input) < 6)"
    },
    {
        "line": 167,
        "fullcodeline": "if (Stream_GetRemainingLength(input) < FileNameLength)"
    },
    {
        "line": 173,
        "fullcodeline": "if (!fullpath)"
    },
    {
        "line": 190,
        "fullcodeline": "if (MoveFileExW(file->fullpath, fullpath,"
    },
    {
        "line": 53,
        "fullcodeline": "pftCreationTime = &ftCreationTime;"
    },
    {
        "line": 60,
        "fullcodeline": "pftLastAccessTime = &ftLastAccessTime;"
    },
    {
        "line": 67,
        "fullcodeline": "pftLastWriteTime = &ftLastWriteTime;"
    },
    {
        "line": 74,
        "fullcodeline": "pftLastWriteTime = &ftLastWriteTime;"
    },
    {
        "line": 83,
        "fullcodeline": "WLog_ERR(TAG, \"Unable to set file time to %s\", file->fullpath);"
    },
    {
        "line": 138,
        "fullcodeline": "Stream_Read_UINT8(input, delete_pending);"
    },
    {
        "line": 145,
        "fullcodeline": "DEBUG_WSTR(\"SetDeletePending %s\", file->fullpath);"
    },
    {
        "line": 146,
        "fullcodeline": "attr = GetFileAttributesW(file->fullpath);"
    },
    {
        "line": 175,
        "fullcodeline": "WLog_ERR(TAG, \"drive_file_combine_fullpath failed!\");"
    },
    {
        "line": 191,
        "fullcodeline": "MOVEFILE_COPY_ALLOWED |"
    },
    {
        "line": 135,
        "fullcodeline": "if (Stream_GetRemainingLength(input) < 1)"
    },
    {
        "line": 141,
        "fullcodeline": "delete_pending = 1;"
    },
    {
        "line": 148,
        "fullcodeline": "if (attr & FILE_ATTRIBUTE_READONLY)"
    },
    {
        "line": 192,
        "fullcodeline": "(ReplaceIfExists ? MOVEFILE_REPLACE_EXISTING : 0)))"
    },
    {
        "line": 194,
        "fullcodeline": "if (!drive_file_set_fullpath(file, fullpath))"
    },
    {
        "line": 199,
        "fullcodeline": "free(fullpath);"
    },
    {
        "line": 150,
        "fullcodeline": "SetLastError(ERROR_ACCESS_DENIED);"
    }
]