[
    {
        "line": 11,
        "fullcodeline": "u_int8_t *software = NULL, *platform = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "int software_len = 0, platform_len = 0, proto, version, nb, caps;"
    },
    {
        "line": 13,
        "fullcodeline": "const unsigned char cdpaddr[] = CDP_MULTICAST_ADDR;"
    },
    {
        "line": 24,
        "fullcodeline": "log_debug(\"cdp\", \"decode CDP frame received on %s\", hardware->h_ifname);"
    },
    {
        "line": 30,
        "fullcodeline": "TAILQ_INIT(&chassis->c_mgmt);"
    },
    {
        "line": 40,
        "fullcodeline": "length = s;"
    },
    {
        "line": 41,
        "fullcodeline": "pos = (u_int8_t *)frame;"
    },
    {
        "line": 66,
        "fullcodeline": "len_eth = PEEK_UINT16;"
    },
    {
        "line": 74,
        "fullcodeline": "length = len_eth;"
    },
    {
        "line": 77,
        "fullcodeline": "proto = PEEK_UINT16;"
    },
    {
        "line": 105,
        "fullcodeline": "version = PEEK_UINT8;"
    },
    {
        "line": 112,
        "fullcodeline": "port->p_ttl = PEEK_UINT8; /* TTL */"
    },
    {
        "line": 377,
        "fullcodeline": "lldpd_port_cleanup(port, 1);"
    },
    {
        "line": 26,
        "fullcodeline": "if ((chassis = calloc(1, sizeof(struct lldpd_chassis))) == NULL) {"
    },
    {
        "line": 31,
        "fullcodeline": "if ((port = calloc(1, sizeof(struct lldpd_port))) == NULL) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (length < 2 * ETHER_ADDR_LEN + sizeof(u_int16_t) /* Ethernet */ +"
    },
    {
        "line": 67,
        "fullcodeline": "if (len_eth > length) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (proto != LLC_PID_CDP) {"
    },
    {
        "line": 333,
        "fullcodeline": "if (!software && platform) {"
    },
    {
        "line": 379,
        "fullcodeline": "return -1;"
    },
    {
        "line": 27,
        "fullcodeline": "log_warn(\"cdp\", \"failed to allocate remote chassis\");"
    },
    {
        "line": 50,
        "fullcodeline": "if (PEEK_CMP(cdpaddr, sizeof(cdpaddr)) != 0) {"
    },
    {
        "line": 106,
        "fullcodeline": "if ((version != 1) && (version != 2)) {"
    },
    {
        "line": 123,
        "fullcodeline": "tlv_type = PEEK_UINT16;"
    },
    {
        "line": 124,
        "fullcodeline": "tlv_len = PEEK_UINT16 - 4;"
    },
    {
        "line": 339,
        "fullcodeline": "memcpy(chassis->c_descr, platform, platform_len);"
    },
    {
        "line": 362,
        "fullcodeline": "if ((chassis->c_id == NULL) || (port->p_id == NULL) ||"
    },
    {
        "line": 365,
        "fullcodeline": "(chassis->c_cap_enabled == 0)) {"
    },
    {
        "line": 28,
        "fullcodeline": "return -1;"
    },
    {
        "line": 34,
        "fullcodeline": "return -1;"
    },
    {
        "line": 116,
        "fullcodeline": "if (length < 4) {"
    },
    {
        "line": 126,
        "fullcodeline": "(void)PEEK_SAVE(tlv);"
    },
    {
        "line": 331,
        "fullcodeline": "PEEK_DISCARD(tlv + tlv_len - pos);"
    },
    {
        "line": 334,
        "fullcodeline": "if ((chassis->c_descr = (char *)calloc(1, platform_len + 1)) == NULL) {"
    },
    {
        "line": 364,
        "fullcodeline": "(port->p_descr == NULL) || (port->p_ttl == 0) ||"
    },
    {
        "line": 79,
        "fullcodeline": "if ((proto != LLC_PID_DRIP) && (proto != LLC_PID_PAGP) &&"
    },
    {
        "line": 82,
        "fullcodeline": "(proto != LLC_PID_STP))"
    },
    {
        "line": 127,
        "fullcodeline": "if ((tlv_len < 0) || (length < tlv_len)) {"
    },
    {
        "line": 143,
        "fullcodeline": "PEEK_BYTES(chassis->c_name, tlv_len);"
    },
    {
        "line": 144,
        "fullcodeline": "chassis->c_id_subtype = LLDP_CHASSISID_SUBTYPE_LOCAL;"
    },
    {
        "line": 151,
        "fullcodeline": "memcpy(chassis->c_id, chassis->c_name, tlv_len);"
    },
    {
        "line": 152,
        "fullcodeline": "chassis->c_id_len = tlv_len;"
    },
    {
        "line": 156,
        "fullcodeline": "addresses_len = tlv_len - 4;"
    },
    {
        "line": 229,
        "fullcodeline": "PEEK_BYTES(port->p_descr, tlv_len);"
    },
    {
        "line": 230,
        "fullcodeline": "port->p_id_subtype = LLDP_PORTID_SUBTYPE_IFNAME;"
    },
    {
        "line": 237,
        "fullcodeline": "memcpy(port->p_id, port->p_descr, tlv_len);"
    },
    {
        "line": 238,
        "fullcodeline": "port->p_id_len = tlv_len;"
    },
    {
        "line": 257,
        "fullcodeline": "caps = PEEK_UINT32;"
    },
    {
        "line": 263,
        "fullcodeline": "chassis->c_cap_available = chassis->c_cap_enabled;"
    },
    {
        "line": 266,
        "fullcodeline": "software_len = tlv_len;"
    },
    {
        "line": 270,
        "fullcodeline": "platform_len = tlv_len;"
    },
    {
        "line": 327,
        "fullcodeline": "log_debug(\"cdp\", \"unknown CDP/FDP TLV type (%d) received on %s\","
    },
    {
        "line": 340,
        "fullcodeline": "} else if (software && !platform) {"
    },
    {
        "line": 81,
        "fullcodeline": "(proto != LLC_PID_VTP) && (proto != LLC_PID_DTP) &&"
    },
    {
        "line": 137,
        "fullcodeline": "if ((chassis->c_name = (char *)calloc(1, tlv_len + 1)) =="
    },
    {
        "line": 146,
        "fullcodeline": "if ((chassis->c_id = (char *)malloc(tlv_len)) == NULL) {"
    },
    {
        "line": 157,
        "fullcodeline": "for (nb = PEEK_UINT32; nb > 0; nb--) {"
    },
    {
        "line": 219,
        "fullcodeline": "if (tlv_len == 0) {"
    },
    {
        "line": 224,
        "fullcodeline": "if ((port->p_descr = (char *)calloc(1, tlv_len + 1)) == NULL) {"
    },
    {
        "line": 232,
        "fullcodeline": "if ((port->p_id = (char *)calloc(1, tlv_len)) == NULL) {"
    },
    {
        "line": 258,
        "fullcodeline": "if (caps & CDP_CAP_ROUTER)"
    },
    {
        "line": 261,
        "fullcodeline": "if (chassis->c_cap_enabled == 0)"
    },
    {
        "line": 267,
        "fullcodeline": "(void)PEEK_SAVE(software);"
    },
    {
        "line": 271,
        "fullcodeline": "(void)PEEK_SAVE(platform);"
    },
    {
        "line": 328,
        "fullcodeline": "ntohs(tlv_type), hardware->h_ifname);"
    },
    {
        "line": 346,
        "fullcodeline": "memcpy(chassis->c_descr, software, software_len);"
    },
    {
        "line": 363,
        "fullcodeline": "(chassis->c_name == NULL) || (chassis->c_descr == NULL) ||"
    },
    {
        "line": 168,
        "fullcodeline": "addresses_len--;"
    },
    {
        "line": 169,
        "fullcodeline": "address_len = PEEK_UINT8;"
    },
    {
        "line": 170,
        "fullcodeline": "addresses_len--;"
    },
    {
        "line": 178,
        "fullcodeline": "PEEK_DISCARD(address_len);"
    },
    {
        "line": 179,
        "fullcodeline": "addresses_len -= address_len;"
    },
    {
        "line": 180,
        "fullcodeline": "address_len = PEEK_UINT16;"
    },
    {
        "line": 181,
        "fullcodeline": "addresses_len -= 2;"
    },
    {
        "line": 189,
        "fullcodeline": "PEEK_DISCARD(address_len);"
    },
    {
        "line": 190,
        "fullcodeline": "addresses_len -= address_len;"
    },
    {
        "line": 194,
        "fullcodeline": "PEEK_RESTORE(pos_address);"
    },
    {
        "line": 215,
        "fullcodeline": "PEEK_RESTORE(pos_next_address);"
    },
    {
        "line": 259,
        "fullcodeline": "chassis->c_cap_enabled |= LLDP_CAP_ROUTER;"
    },
    {
        "line": 260,
        "fullcodeline": "if (caps & 0x0e) chassis->c_cap_enabled |= LLDP_CAP_BRIDGE;"
    },
    {
        "line": 262,
        "fullcodeline": "chassis->c_cap_enabled = LLDP_CAP_STATION;"
    },
    {
        "line": 341,
        "fullcodeline": "if ((chassis->c_descr = (char *)calloc(1, software_len + 1)) == NULL) {"
    },
    {
        "line": 80,
        "fullcodeline": "(proto != LLC_PID_PVSTP) && (proto != LLC_PID_UDLD) &&"
    },
    {
        "line": 158,
        "fullcodeline": "(void)PEEK_SAVE(pos_address);"
    },
    {
        "line": 160,
        "fullcodeline": "if (addresses_len < 2) {"
    },
    {
        "line": 171,
        "fullcodeline": "if (addresses_len < address_len + 2) {"
    },
    {
        "line": 182,
        "fullcodeline": "if (addresses_len < address_len) {"
    },
    {
        "line": 191,
        "fullcodeline": "(void)PEEK_SAVE(pos_next_address);"
    },
    {
        "line": 347,
        "fullcodeline": "} else if (software && platform) {"
    },
    {
        "line": 195,
        "fullcodeline": "if ((PEEK_UINT8 == 1) && (PEEK_UINT8 == 1) &&"
    },
    {
        "line": 197,
        "fullcodeline": "(PEEK_UINT16 == sizeof(struct in_addr))) {"
    },
    {
        "line": 198,
        "fullcodeline": "PEEK_BYTES(&addr, sizeof(struct in_addr));"
    },
    {
        "line": 199,
        "fullcodeline": "mgmt = lldpd_alloc_mgmt(LLDPD_AF_IPV4, &addr,"
    },
    {
        "line": 211,
        "fullcodeline": "TAILQ_INSERT_TAIL(&chassis->c_mgmt, mgmt,"
    },
    {
        "line": 356,
        "fullcodeline": "memcpy(chassis->c_descr, platform, platform_len);"
    },
    {
        "line": 196,
        "fullcodeline": "(PEEK_UINT8 == CDP_ADDRESS_PROTO_IP) &&"
    },
    {
        "line": 201,
        "fullcodeline": "if (mgmt == NULL) {"
    },
    {
        "line": 349,
        "fullcodeline": "if ((chassis->c_descr = (char *)calloc(1,"
    },
    {
        "line": 358,
        "fullcodeline": "strlen(CONCAT_PLATFORM));"
    },
    {
        "line": 359,
        "fullcodeline": "memcpy(chassis->c_descr + platform_len + strlen(CONCAT_PLATFORM),"
    },
    {
        "line": 202,
        "fullcodeline": "if (errno == ENOMEM)"
    },
    {
        "line": 350,
        "fullcodeline": "software_len + platform_len + strlen(CONCAT_PLATFORM) + 1)) =="
    }
]