[
    {
        "line": 7,
        "fullcodeline": "Int64 position = is.tellg();"
    },
    {
        "line": 35,
        "fullcodeline": "size_t total_chunks = 0;"
    },
    {
        "line": 41,
        "fullcodeline": "vector<TileOffsets*> tileOffsets(parts.size());"
    },
    {
        "line": 44,
        "fullcodeline": "vector<int> rowsizes(parts.size());"
    },
    {
        "line": 244,
        "fullcodeline": "is.clear();"
    },
    {
        "line": 245,
        "fullcodeline": "is.seekg (position);"
    },
    {
        "line": 15,
        "fullcodeline": "for (size_t i = 0; i < parts.size(); i++)"
    },
    {
        "line": 46,
        "fullcodeline": "for(size_t i = 0 ; i < parts.size() ; i++)"
    },
    {
        "line": 227,
        "fullcodeline": "for(size_t partNumber=0;partNumber<parts.size();partNumber++)"
    },
    {
        "line": 48,
        "fullcodeline": "total_chunks += parts[i]->chunkOffsets.size();"
    },
    {
        "line": 88,
        "fullcodeline": "Int64 chunk_start = position;"
    },
    {
        "line": 23,
        "fullcodeline": "if(!header.hasType() && (isMultiPart(version) || isNonImage(version)))"
    },
    {
        "line": 27,
        "fullcodeline": "if(!isSupportedType(header.type()))"
    },
    {
        "line": 49,
        "fullcodeline": "if (isTiled(parts[i]->header.type()))"
    },
    {
        "line": 89,
        "fullcodeline": "for (size_t i = 0; i < total_chunks ; i++)"
    },
    {
        "line": 51,
        "fullcodeline": "tileOffsets[i] = createTileOffsets(parts[i]->header);"
    },
    {
        "line": 95,
        "fullcodeline": "int partNumber = 0;"
    },
    {
        "line": 231,
        "fullcodeline": "size_t pos=0;"
    },
    {
        "line": 232,
        "fullcodeline": "vector<vector<vector <Int64> > > offsets = tileOffsets[partNumber]->getOffsets();"
    },
    {
        "line": 240,
        "fullcodeline": "delete tileOffsets[partNumber];"
    },
    {
        "line": 25,
        "fullcodeline": "throw IEX_NAMESPACE::ArgExc(\"cannot reconstruct incomplete file: part with missing type\");"
    },
    {
        "line": 29,
        "fullcodeline": "throw IEX_NAMESPACE::ArgExc(\"cannot reconstruct incomplete file: part with unknown type \"+header.type());"
    },
    {
        "line": 53,
        "fullcodeline": "tileOffsets[i] = NULL;"
    },
    {
        "line": 233,
        "fullcodeline": "for (size_t l = 0; l < offsets.size(); l++)"
    },
    {
        "line": 55,
        "fullcodeline": "switch(parts[i]->header.compression())"
    },
    {
        "line": 234,
        "fullcodeline": "for (size_t y = 0; y < offsets[l].size(); y++)"
    },
    {
        "line": 58,
        "fullcodeline": "rowsizes[i] = 256;"
    },
    {
        "line": 64,
        "fullcodeline": "rowsizes[i]=32;"
    },
    {
        "line": 68,
        "fullcodeline": "rowsizes[i]=16;"
    },
    {
        "line": 73,
        "fullcodeline": "rowsizes[i]=1;"
    },
    {
        "line": 235,
        "fullcodeline": "for (size_t x = 0; x < offsets[l][y].size(); x++)"
    },
    {
        "line": 76,
        "fullcodeline": "throw(IEX_NAMESPACE::ArgExc(\"Unknown compression method in chunk offset reconstruction\"));"
    },
    {
        "line": 238,
        "fullcodeline": "pos++;"
    }
]