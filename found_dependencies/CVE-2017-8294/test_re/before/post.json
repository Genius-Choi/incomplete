[
    {
        "line": 3,
        "fullcodeline": "assert_true_rule("
    },
    {
        "line": 7,
        "fullcodeline": "assert_true_rule("
    },
    {
        "line": 11,
        "fullcodeline": "assert_true_rule("
    },
    {
        "line": 15,
        "fullcodeline": "assert_true_rule("
    },
    {
        "line": 19,
        "fullcodeline": "assert_true_rule("
    },
    {
        "line": 23,
        "fullcodeline": "assert_true_rule("
    },
    {
        "line": 27,
        "fullcodeline": "assert_true_rule("
    },
    {
        "line": 31,
        "fullcodeline": "assert_true_rule("
    },
    {
        "line": 35,
        "fullcodeline": "assert_true_rule("
    },
    {
        "line": 39,
        "fullcodeline": "assert_true_rule("
    },
    {
        "line": 43,
        "fullcodeline": "assert_true_rule("
    },
    {
        "line": 47,
        "fullcodeline": "assert_true_rule("
    },
    {
        "line": 51,
        "fullcodeline": "assert_false_rule("
    },
    {
        "line": 55,
        "fullcodeline": "assert_false_rule("
    },
    {
        "line": 59,
        "fullcodeline": "assert_false_rule("
    },
    {
        "line": 63,
        "fullcodeline": "assert_false_rule("
    },
    {
        "line": 67,
        "fullcodeline": "assert_true_rule_blob("
    },
    {
        "line": 71,
        "fullcodeline": "assert_true_rule_blob("
    },
    {
        "line": 75,
        "fullcodeline": "assert_regexp_syntax_error(\")\");"
    },
    {
        "line": 76,
        "fullcodeline": "assert_true_regexp(\"abc\", \"abc\", \"abc\");"
    },
    {
        "line": 77,
        "fullcodeline": "assert_false_regexp(\"abc\", \"xbc\");"
    },
    {
        "line": 78,
        "fullcodeline": "assert_false_regexp(\"abc\", \"axc\");"
    },
    {
        "line": 79,
        "fullcodeline": "assert_false_regexp(\"abc\", \"abx\");"
    },
    {
        "line": 80,
        "fullcodeline": "assert_true_regexp(\"abc\", \"xabcx\", \"abc\");"
    },
    {
        "line": 81,
        "fullcodeline": "assert_true_regexp(\"abc\", \"ababc\", \"abc\");"
    },
    {
        "line": 82,
        "fullcodeline": "assert_true_regexp(\"a.c\", \"abc\", \"abc\");"
    },
    {
        "line": 83,
        "fullcodeline": "assert_false_regexp(\"a.b\", \"a\\nb\");"
    },
    {
        "line": 84,
        "fullcodeline": "assert_false_regexp(\"a.*b\", \"acc\\nccb\");"
    },
    {
        "line": 85,
        "fullcodeline": "assert_false_regexp(\"a.{4,5}b\", \"acc\\nccb\");"
    },
    {
        "line": 86,
        "fullcodeline": "assert_true_regexp(\"a.b\", \"a\\rb\", \"a\\rb\");"
    },
    {
        "line": 87,
        "fullcodeline": "assert_true_regexp(\"ab*c\", \"abc\", \"abc\");"
    },
    {
        "line": 88,
        "fullcodeline": "assert_true_regexp(\"ab*c\", \"ac\", \"ac\");"
    },
    {
        "line": 89,
        "fullcodeline": "assert_true_regexp(\"ab*bc\", \"abc\", \"abc\");"
    },
    {
        "line": 90,
        "fullcodeline": "assert_true_regexp(\"ab*bc\", \"abbc\", \"abbc\");"
    },
    {
        "line": 91,
        "fullcodeline": "assert_true_regexp(\"a.*bb\", \"abbbb\", \"abbbb\");"
    },
    {
        "line": 92,
        "fullcodeline": "assert_true_regexp(\"a.*?bbb\", \"abbbbbb\", \"abbb\");"
    },
    {
        "line": 93,
        "fullcodeline": "assert_true_regexp(\"a.*c\", \"ac\", \"ac\");"
    },
    {
        "line": 94,
        "fullcodeline": "assert_true_regexp(\"a.*c\", \"axyzc\", \"axyzc\");"
    },
    {
        "line": 95,
        "fullcodeline": "assert_true_regexp(\"ab+c\", \"abbc\", \"abbc\");"
    },
    {
        "line": 96,
        "fullcodeline": "assert_false_regexp(\"ab+c\", \"ac\");"
    },
    {
        "line": 97,
        "fullcodeline": "assert_true_regexp(\"ab+\", \"abbbb\", \"abbbb\");"
    },
    {
        "line": 98,
        "fullcodeline": "assert_true_regexp(\"ab+?\", \"abbbb\", \"ab\");"
    },
    {
        "line": 99,
        "fullcodeline": "assert_false_regexp(\"ab+bc\", \"abc\");"
    },
    {
        "line": 100,
        "fullcodeline": "assert_false_regexp(\"ab+bc\", \"abq\");"
    },
    {
        "line": 101,
        "fullcodeline": "assert_true_regexp(\"a+b+c\", \"aabbabc\", \"abc\");"
    },
    {
        "line": 102,
        "fullcodeline": "assert_false_regexp(\"ab?bc\", \"abbbbc\");"
    },
    {
        "line": 103,
        "fullcodeline": "assert_true_regexp(\"ab?c\", \"abc\", \"abc\");"
    },
    {
        "line": 104,
        "fullcodeline": "assert_true_regexp(\"ab*?\", \"abbb\", \"a\");"
    },
    {
        "line": 105,
        "fullcodeline": "assert_true_regexp(\"ab?c\", \"ac\", \"ac\");"
    },
    {
        "line": 106,
        "fullcodeline": "assert_true_regexp(\"ab??\", \"ab\", \"a\");"
    },
    {
        "line": 107,
        "fullcodeline": "assert_true_regexp(\"a(b|x)c\", \"abc\", \"abc\");"
    },
    {
        "line": 108,
        "fullcodeline": "assert_true_regexp(\"a(b|x)c\", \"axc\", \"axc\");"
    },
    {
        "line": 109,
        "fullcodeline": "assert_true_regexp(\"a(b|.)c\", \"axc\", \"axc\");"
    },
    {
        "line": 110,
        "fullcodeline": "assert_true_regexp(\"a(b|x|y)c\", \"ayc\", \"ayc\");"
    },
    {
        "line": 111,
        "fullcodeline": "assert_true_regexp(\"(a+|b)*\", \"ab\", \"ab\");"
    },
    {
        "line": 112,
        "fullcodeline": "assert_true_regexp(\"a|b|c|d|e\", \"e\", \"e\");"
    },
    {
        "line": 113,
        "fullcodeline": "assert_true_regexp(\"(a|b|c|d|e)f\", \"ef\", \"ef\");"
    },
    {
        "line": 114,
        "fullcodeline": "assert_true_regexp(\".b{2}\", \"abb\", \"abb\");"
    },
    {
        "line": 115,
        "fullcodeline": "assert_true_regexp(\".b{2,3}\", \"abbb\", \"abbb\");"
    },
    {
        "line": 116,
        "fullcodeline": "assert_true_regexp(\".b{2,3}?\", \"abbb\", \"abb\");"
    },
    {
        "line": 117,
        "fullcodeline": "assert_true_regexp(\"ab{2,3}c\", \"abbbc\", \"abbbc\");"
    },
    {
        "line": 118,
        "fullcodeline": "assert_true_regexp(\"ab{2,3}?c\", \"abbbc\", \"abbbc\");"
    },
    {
        "line": 119,
        "fullcodeline": "assert_true_regexp(\".b{2,3}cccc\", \"abbbcccc\", \"abbbcccc\");"
    },
    {
        "line": 120,
        "fullcodeline": "assert_true_regexp(\".b{2,3}?cccc\", \"abbbcccc\", \"bbbcccc\");"
    },
    {
        "line": 121,
        "fullcodeline": "assert_true_regexp(\"a.b{2,3}cccc\", \"aabbbcccc\", \"aabbbcccc\");"
    },
    {
        "line": 122,
        "fullcodeline": "assert_true_regexp(\"ab{2,3}c\", \"abbbc\", \"abbbc\");"
    },
    {
        "line": 123,
        "fullcodeline": "assert_true_regexp(\"ab{2,3}?c\", \"abbbc\", \"abbbc\");"
    },
    {
        "line": 124,
        "fullcodeline": "assert_true_regexp(\"ab{0,1}?c\", \"abc\", \"abc\");"
    },
    {
        "line": 125,
        "fullcodeline": "assert_true_regexp(\"a{0,1}?bc\", \"abc\", \"abc\");"
    },
    {
        "line": 126,
        "fullcodeline": "assert_true_regexp(\"a{0,1}bc\", \"bbc\", \"bc\");"
    },
    {
        "line": 127,
        "fullcodeline": "assert_true_regexp(\"a{0,1}?bc\", \"abc\", \"bc\");"
    },
    {
        "line": 128,
        "fullcodeline": "assert_true_regexp(\"aa{0,1}?bc\", \"abc\", \"abc\");"
    },
    {
        "line": 129,
        "fullcodeline": "assert_true_regexp(\"aa{0,1}?bc\", \"abc\", \"abc\");"
    },
    {
        "line": 130,
        "fullcodeline": "assert_true_regexp(\"aa{0,1}bc\", \"abc\", \"abc\");"
    },
    {
        "line": 131,
        "fullcodeline": "assert_true_regexp(\"ab{1}c\", \"abc\", \"abc\");"
    },
    {
        "line": 132,
        "fullcodeline": "assert_true_regexp(\"ab{1,2}c\", \"abbc\", \"abbc\");"
    },
    {
        "line": 133,
        "fullcodeline": "assert_true_regexp(\"ab{1,}c\", \"abbbc\", \"abbbc\");"
    },
    {
        "line": 134,
        "fullcodeline": "assert_false_regexp(\"ab{1,}b\", \"ab\");"
    },
    {
        "line": 135,
        "fullcodeline": "assert_false_regexp(\"ab{1}c\", \"abbc\");"
    },
    {
        "line": 136,
        "fullcodeline": "assert_true_regexp(\"ab{0,}c\", \"ac\", \"ac\");"
    },
    {
        "line": 137,
        "fullcodeline": "assert_true_regexp(\"ab{1,1}c\", \"abc\", \"abc\");"
    },
    {
        "line": 138,
        "fullcodeline": "assert_true_regexp(\"ab{0,}c\", \"abbbc\", \"abbbc\");"
    },
    {
        "line": 139,
        "fullcodeline": "assert_true_regexp(\"ab{,3}c\", \"abbbc\", \"abbbc\");"
    },
    {
        "line": 140,
        "fullcodeline": "assert_false_regexp(\"ab{,2}c\", \"abbbc\");"
    },
    {
        "line": 141,
        "fullcodeline": "assert_false_regexp(\"ab{4,5}bc\", \"abbbbc\");"
    },
    {
        "line": 142,
        "fullcodeline": "assert_true_regexp(\"ab{0,1}\", \"abbbbb\", \"ab\");"
    },
    {
        "line": 143,
        "fullcodeline": "assert_true_regexp(\"ab{0,2}\", \"abbbbb\", \"abb\");"
    },
    {
        "line": 144,
        "fullcodeline": "assert_true_regexp(\"ab{0,3}\", \"abbbbb\", \"abbb\");"
    },
    {
        "line": 145,
        "fullcodeline": "assert_true_regexp(\"ab{0,4}\", \"abbbbb\", \"abbbb\");"
    },
    {
        "line": 146,
        "fullcodeline": "assert_true_regexp(\"ab{1,1}\", \"abbbbb\", \"ab\");"
    },
    {
        "line": 147,
        "fullcodeline": "assert_true_regexp(\"ab{1,2}\", \"abbbbb\", \"abb\");"
    },
    {
        "line": 148,
        "fullcodeline": "assert_true_regexp(\"ab{1,3}\", \"abbbbb\", \"abbb\");"
    },
    {
        "line": 149,
        "fullcodeline": "assert_true_regexp(\"ab{2,2}\", \"abbbbb\", \"abb\");"
    },
    {
        "line": 150,
        "fullcodeline": "assert_true_regexp(\"ab{2,3}\", \"abbbbb\", \"abbb\");"
    },
    {
        "line": 151,
        "fullcodeline": "assert_true_regexp(\"ab{1,3}?\", \"abbbbb\", \"ab\");"
    },
    {
        "line": 152,
        "fullcodeline": "assert_true_regexp(\"ab{0,1}?\", \"abbbbb\", \"a\");"
    },
    {
        "line": 153,
        "fullcodeline": "assert_true_regexp(\"ab{0,2}?\", \"abbbbb\", \"a\");"
    },
    {
        "line": 154,
        "fullcodeline": "assert_true_regexp(\"ab{0,3}?\", \"abbbbb\", \"a\");"
    },
    {
        "line": 155,
        "fullcodeline": "assert_true_regexp(\"ab{0,4}?\", \"abbbbb\", \"a\");"
    },
    {
        "line": 156,
        "fullcodeline": "assert_true_regexp(\"ab{1,1}?\", \"abbbbb\", \"ab\");"
    },
    {
        "line": 157,
        "fullcodeline": "assert_true_regexp(\"ab{1,2}?\", \"abbbbb\", \"ab\");"
    },
    {
        "line": 158,
        "fullcodeline": "assert_true_regexp(\"ab{1,3}?\", \"abbbbb\", \"ab\");"
    },
    {
        "line": 159,
        "fullcodeline": "assert_true_regexp(\"ab{2,2}?\", \"abbbbb\", \"abb\");"
    },
    {
        "line": 160,
        "fullcodeline": "assert_true_regexp(\"ab{2,3}?\", \"abbbbb\", \"abb\");"
    },
    {
        "line": 161,
        "fullcodeline": "assert_true_regexp(\".(abc){0,1}\", \"xabcabcabcabc\", \"xabc\");"
    },
    {
        "line": 162,
        "fullcodeline": "assert_true_regexp(\".(abc){0,2}\", \"xabcabcabcabc\", \"xabcabc\");"
    },
    {
        "line": 163,
        "fullcodeline": "assert_true_regexp(\"x{1,2}abcd\", \"xxxxabcd\", \"xxabcd\");"
    },
    {
        "line": 164,
        "fullcodeline": "assert_true_regexp(\"x{1,2}abcd\", \"xxxxabcd\", \"xxabcd\");"
    },
    {
        "line": 165,
        "fullcodeline": "assert_true_regexp(\"ab{.*}\", \"ab{c}\", \"ab{c}\");"
    },
    {
        "line": 166,
        "fullcodeline": "assert_true_regexp(\".(aa){1,2}\", \"aaaaaaaaaa\", \"aaaaa\");"
    },
    {
        "line": 167,
        "fullcodeline": "assert_true_regexp(\"a.(bc.){2}\", \"aabcabca\", \"aabcabca\");"
    },
    {
        "line": 168,
        "fullcodeline": "assert_true_regexp(\"(ab{1,2}c){1,3}\", \"abbcabc\", \"abbcabc\");"
    },
    {
        "line": 169,
        "fullcodeline": "assert_true_regexp(\"ab(c|cc){1,3}d\", \"abccccccd\", \"abccccccd\");"
    },
    {
        "line": 170,
        "fullcodeline": "assert_true_regexp(\"a[bx]c\", \"abc\", \"abc\");"
    },
    {
        "line": 171,
        "fullcodeline": "assert_true_regexp(\"a[bx]c\", \"axc\", \"axc\");"
    },
    {
        "line": 172,
        "fullcodeline": "assert_true_regexp(\"a[0-9]*b\", \"ab\", \"ab\");"
    },
    {
        "line": 173,
        "fullcodeline": "assert_true_regexp(\"a[0-9]*b\", \"a0123456789b\", \"a0123456789b\");"
    },
    {
        "line": 174,
        "fullcodeline": "assert_true_regexp(\"[0-9a-f]+\", \"0123456789abcdef\", \"0123456789abcdef\");"
    },
    {
        "line": 175,
        "fullcodeline": "assert_true_regexp(\"[0-9a-f]+\", \"xyz0123456789xyz\", \"0123456789\");"
    },
    {
        "line": 176,
        "fullcodeline": "assert_true_regexp(\"a[\\\\s\\\\S]b\", \"a b\", \"a b\");"
    },
    {
        "line": 177,
        "fullcodeline": "assert_true_regexp(\"a[\\\\d\\\\D]b\", \"a1b\", \"a1b\");"
    },
    {
        "line": 178,
        "fullcodeline": "assert_false_regexp(\"[x-z]+\", \"abc\");"
    },
    {
        "line": 179,
        "fullcodeline": "assert_true_regexp(\"a[-]?c\", \"ac\", \"ac\");"
    },
    {
        "line": 180,
        "fullcodeline": "assert_true_regexp(\"a[-b]\", \"a-\", \"a-\");"
    },
    {
        "line": 181,
        "fullcodeline": "assert_true_regexp(\"a[-b]\", \"ab\", \"ab\");"
    },
    {
        "line": 182,
        "fullcodeline": "assert_true_regexp(\"a[b-]\", \"a-\", \"a-\");"
    },
    {
        "line": 183,
        "fullcodeline": "assert_true_regexp(\"a[b-]\", \"ab\", \"ab\");"
    },
    {
        "line": 184,
        "fullcodeline": "assert_true_regexp(\"[a-c-e]\", \"b\", \"b\");"
    },
    {
        "line": 185,
        "fullcodeline": "assert_true_regexp(\"[a-c-e]\", \"-\", \"-\");"
    },
    {
        "line": 186,
        "fullcodeline": "assert_false_regexp(\"[a-c-e]\", \"d\");"
    },
    {
        "line": 187,
        "fullcodeline": "assert_regexp_syntax_error(\"[b-a]\");"
    },
    {
        "line": 188,
        "fullcodeline": "assert_regexp_syntax_error(\"(abc\");"
    },
    {
        "line": 189,
        "fullcodeline": "assert_regexp_syntax_error(\"abc)\");"
    },
    {
        "line": 190,
        "fullcodeline": "assert_regexp_syntax_error(\"a[]b\");"
    },
    {
        "line": 191,
        "fullcodeline": "assert_true_regexp(\"a[\\\\-b]\", \"a-\", \"a-\");"
    },
    {
        "line": 192,
        "fullcodeline": "assert_true_regexp(\"a[\\\\-b]\", \"ab\", \"ab\");"
    },
    {
        "line": 193,
        "fullcodeline": "assert_true_regexp(\"a]\", \"a]\", \"a]\");"
    },
    {
        "line": 194,
        "fullcodeline": "assert_true_regexp(\"a[]]b\", \"a]b\", \"a]b\");"
    },
    {
        "line": 195,
        "fullcodeline": "assert_true_regexp(\"a[\\\\]]b\", \"a]b\", \"a]b\");"
    },
    {
        "line": 196,
        "fullcodeline": "assert_true_regexp(\"a[^bc]d\", \"aed\", \"aed\");"
    },
    {
        "line": 197,
        "fullcodeline": "assert_false_regexp(\"a[^bc]d\", \"abd\");"
    },
    {
        "line": 198,
        "fullcodeline": "assert_true_regexp(\"a[^-b]c\", \"adc\", \"adc\");"
    },
    {
        "line": 199,
        "fullcodeline": "assert_false_regexp(\"a[^-b]c\", \"a-c\");"
    },
    {
        "line": 200,
        "fullcodeline": "assert_false_regexp(\"a[^]b]c\", \"a]c\");"
    },
    {
        "line": 201,
        "fullcodeline": "assert_true_regexp(\"a[^]b]c\", \"adc\", \"adc\");"
    },
    {
        "line": 202,
        "fullcodeline": "assert_true_regexp(\"[^ab]*\", \"cde\", \"cde\");"
    },
    {
        "line": 203,
        "fullcodeline": "assert_regexp_syntax_error(\")(\");"
    },
    {
        "line": 204,
        "fullcodeline": "assert_true_regexp(\"a\\\\sb\", \"a b\", \"a b\");"
    },
    {
        "line": 205,
        "fullcodeline": "assert_true_regexp(\"a\\\\sb\", \"a\\tb\", \"a\\tb\");"
    },
    {
        "line": 206,
        "fullcodeline": "assert_true_regexp(\"a\\\\sb\", \"a\\rb\", \"a\\rb\");"
    },
    {
        "line": 207,
        "fullcodeline": "assert_true_regexp(\"a\\\\sb\", \"a\\nb\", \"a\\nb\");"
    },
    {
        "line": 208,
        "fullcodeline": "assert_true_regexp(\"a\\\\sb\", \"a\\vb\", \"a\\vb\");"
    },
    {
        "line": 209,
        "fullcodeline": "assert_true_regexp(\"a\\\\sb\", \"a\\fb\", \"a\\fb\");"
    },
    {
        "line": 210,
        "fullcodeline": "assert_false_regexp(\"a\\\\Sb\", \"a b\");"
    },
    {
        "line": 211,
        "fullcodeline": "assert_false_regexp(\"a\\\\Sb\", \"a\\tb\");"
    },
    {
        "line": 212,
        "fullcodeline": "assert_false_regexp(\"a\\\\Sb\", \"a\\rb\");"
    },
    {
        "line": 213,
        "fullcodeline": "assert_false_regexp(\"a\\\\Sb\", \"a\\nb\");"
    },
    {
        "line": 214,
        "fullcodeline": "assert_false_regexp(\"a\\\\Sb\", \"a\\vb\");"
    },
    {
        "line": 215,
        "fullcodeline": "assert_false_regexp(\"a\\\\Sb\", \"a\\fb\");"
    },
    {
        "line": 216,
        "fullcodeline": "assert_true_regexp(\"\\\\n\\\\r\\\\t\\\\f\\\\a\", \"\\n\\r\\t\\f\\a\", \"\\n\\r\\t\\f\\a\");"
    },
    {
        "line": 217,
        "fullcodeline": "assert_true_regexp(\"[\\\\n][\\\\r][\\\\t][\\\\f][\\\\a]\", \"\\n\\r\\t\\f\\a\", \"\\n\\r\\t\\f\\a\");"
    },
    {
        "line": 218,
        "fullcodeline": "assert_true_regexp(\"\\\\x01\\\\x02\\\\x03\", \"\\x01\\x02\\x03\", \"\\x01\\x02\\x03\");"
    },
    {
        "line": 219,
        "fullcodeline": "assert_true_regexp(\"[\\\\x01-\\\\x03]+\", \"\\x01\\x02\\x03\", \"\\x01\\x02\\x03\");"
    },
    {
        "line": 220,
        "fullcodeline": "assert_false_regexp(\"[\\\\x00-\\\\x02]+\", \"\\x03\\x04\\x05\");"
    },
    {
        "line": 221,
        "fullcodeline": "assert_true_regexp(\"[\\\\x5D]\", \"]\", \"]\");"
    },
    {
        "line": 222,
        "fullcodeline": "assert_true_regexp(\"[\\\\0x5A-\\\\x5D]\", \"\\x5B\", \"\\x5B\");"
    },
    {
        "line": 223,
        "fullcodeline": "assert_true_regexp(\"[\\\\x5D-\\\\x5F]\", \"\\x5E\", \"\\x5E\");"
    },
    {
        "line": 224,
        "fullcodeline": "assert_true_regexp(\"[\\\\x5C-\\\\x5F]\", \"\\x5E\", \"\\x5E\");"
    },
    {
        "line": 225,
        "fullcodeline": "assert_true_regexp(\"[\\\\x5D-\\\\x5F]\", \"\\x5E\", \"\\x5E\");"
    },
    {
        "line": 226,
        "fullcodeline": "assert_true_regexp(\"a\\\\wc\", \"abc\", \"abc\");"
    },
    {
        "line": 227,
        "fullcodeline": "assert_true_regexp(\"a\\\\wc\", \"a_c\", \"a_c\");"
    },
    {
        "line": 228,
        "fullcodeline": "assert_true_regexp(\"a\\\\wc\", \"a0c\", \"a0c\");"
    },
    {
        "line": 229,
        "fullcodeline": "assert_false_regexp(\"a\\\\wc\", \"a*c\");"
    },
    {
        "line": 230,
        "fullcodeline": "assert_true_regexp(\"\\\\w+\", \"--ab_cd0123--\", \"ab_cd0123\");"
    },
    {
        "line": 231,
        "fullcodeline": "assert_true_regexp(\"[\\\\w]+\", \"--ab_cd0123--\", \"ab_cd0123\");"
    },
    {
        "line": 232,
        "fullcodeline": "assert_true_regexp(\"\\\\D+\", \"1234abc5678\", \"abc\");"
    },
    {
        "line": 233,
        "fullcodeline": "assert_true_regexp(\"[\\\\d]+\", \"0123456789\", \"0123456789\");"
    },
    {
        "line": 234,
        "fullcodeline": "assert_true_regexp(\"[\\\\D]+\", \"1234abc5678\", \"abc\");"
    },
    {
        "line": 235,
        "fullcodeline": "assert_true_regexp(\"[\\\\da-fA-F]+\", \"123abc\", \"123abc\");"
    },
    {
        "line": 236,
        "fullcodeline": "assert_false_regexp(\"^(ab|cd)e\", \"abcde\");"
    },
    {
        "line": 237,
        "fullcodeline": "assert_true_regexp(\"(abc|)ef\", \"abcdef\", \"ef\");"
    },
    {
        "line": 238,
        "fullcodeline": "assert_true_regexp(\"(abc|)ef\", \"abcef\", \"abcef\");"
    },
    {
        "line": 239,
        "fullcodeline": "assert_true_regexp(\"\\\\babc\", \"abc\", \"abc\");"
    },
    {
        "line": 240,
        "fullcodeline": "assert_true_regexp(\"abc\\\\b\", \"abc\", \"abc\");"
    },
    {
        "line": 241,
        "fullcodeline": "assert_false_regexp(\"\\\\babc\", \"1abc\");"
    },
    {
        "line": 242,
        "fullcodeline": "assert_false_regexp(\"abc\\\\b\", \"abc1\");"
    },
    {
        "line": 243,
        "fullcodeline": "assert_true_regexp(\"abc\\\\s\\\\b\", \"abc x\", \"abc \");"
    },
    {
        "line": 244,
        "fullcodeline": "assert_false_regexp(\"abc\\\\s\\\\b\", \"abc  \");"
    },
    {
        "line": 245,
        "fullcodeline": "assert_true_regexp(\"\\\\babc\\\\b\", \" abc \", \"abc\");"
    },
    {
        "line": 246,
        "fullcodeline": "assert_true_regexp(\"\\\\b\\\\w\\\\w\\\\w\\\\b\", \" abc \", \"abc\");"
    },
    {
        "line": 247,
        "fullcodeline": "assert_true_regexp(\"\\\\w\\\\w\\\\w\\\\b\", \"abcd\", \"bcd\");"
    },
    {
        "line": 248,
        "fullcodeline": "assert_true_regexp(\"\\\\b\\\\w\\\\w\\\\w\", \"abcd\", \"abc\");"
    },
    {
        "line": 249,
        "fullcodeline": "assert_false_regexp(\"\\\\b\\\\w\\\\w\\\\w\\\\b\", \"abcd\");"
    },
    {
        "line": 250,
        "fullcodeline": "assert_false_regexp(\"\\\\Babc\", \"abc\");"
    },
    {
        "line": 251,
        "fullcodeline": "assert_false_regexp(\"abc\\\\B\", \"abc\");"
    },
    {
        "line": 252,
        "fullcodeline": "assert_true_regexp(\"\\\\Babc\", \"1abc\", \"abc\");"
    },
    {
        "line": 253,
        "fullcodeline": "assert_true_regexp(\"abc\\\\B\", \"abc1\", \"abc\");"
    },
    {
        "line": 254,
        "fullcodeline": "assert_false_regexp(\"abc\\\\s\\\\B\", \"abc x\");"
    },
    {
        "line": 255,
        "fullcodeline": "assert_true_regexp(\"abc\\\\s\\\\B\", \"abc  \", \"abc \");"
    },
    {
        "line": 256,
        "fullcodeline": "assert_true_regexp(\"\\\\w\\\\w\\\\w\\\\B\", \"abcd\", \"abc\");"
    },
    {
        "line": 257,
        "fullcodeline": "assert_true_regexp(\"\\\\B\\\\w\\\\w\\\\w\", \"abcd\", \"bcd\");"
    },
    {
        "line": 258,
        "fullcodeline": "assert_false_regexp(\"\\\\B\\\\w\\\\w\\\\w\\\\B\", \"abcd\");"
    },
    {
        "line": 263,
        "fullcodeline": "assert_regexp_syntax_error(\"(|abc)ef\");"
    },
    {
        "line": 265,
        "fullcodeline": "assert_true_regexp(\"((a)(b)c)(d)\", \"abcd\", \"abcd\");"
    },
    {
        "line": 266,
        "fullcodeline": "assert_true_regexp(\"(a|b)c*d\", \"abcd\", \"bcd\");"
    },
    {
        "line": 267,
        "fullcodeline": "assert_true_regexp(\"(ab|ab*)bc\", \"abc\", \"abc\");"
    },
    {
        "line": 268,
        "fullcodeline": "assert_true_regexp(\"a([bc]*)c*\", \"abc\", \"abc\");"
    },
    {
        "line": 269,
        "fullcodeline": "assert_true_regexp(\"a([bc]*)c*\", \"ac\", \"ac\");"
    },
    {
        "line": 270,
        "fullcodeline": "assert_true_regexp(\"a([bc]*)c*\", \"a\", \"a\");"
    },
    {
        "line": 271,
        "fullcodeline": "assert_true_regexp(\"a([bc]*)(c*d)\", \"abcd\", \"abcd\");"
    },
    {
        "line": 272,
        "fullcodeline": "assert_true_regexp(\"a([bc]+)(c*d)\", \"abcd\", \"abcd\");"
    },
    {
        "line": 273,
        "fullcodeline": "assert_true_regexp(\"a([bc]*)(c+d)\", \"abcd\", \"abcd\");"
    },
    {
        "line": 274,
        "fullcodeline": "assert_true_regexp(\"a[bcd]*dcdcde\", \"adcdcde\", \"adcdcde\");"
    },
    {
        "line": 275,
        "fullcodeline": "assert_false_regexp(\"a[bcd]+dcdcde\", \"adcdcde\");"
    },
    {
        "line": 276,
        "fullcodeline": "assert_true_regexp(\"\\\\((.*), (.*)\\\\)\", \"(a, b)\", \"(a, b)\");"
    },
    {
        "line": 277,
        "fullcodeline": "assert_true_regexp(\"abc|123$\", \"abcx\", \"abc\");"
    },
    {
        "line": 278,
        "fullcodeline": "assert_false_regexp(\"abc|123$\", \"123x\");"
    },
    {
        "line": 279,
        "fullcodeline": "assert_true_regexp(\"abc|^123\", \"123\", \"123\");"
    },
    {
        "line": 280,
        "fullcodeline": "assert_false_regexp(\"abc|^123\", \"x123\");"
    },
    {
        "line": 281,
        "fullcodeline": "assert_true_regexp(\"^abc$\", \"abc\", \"abc\");"
    },
    {
        "line": 282,
        "fullcodeline": "assert_false_regexp(\"^abc$\", \"abcc\");"
    },
    {
        "line": 283,
        "fullcodeline": "assert_true_regexp(\"^abc\", \"abcc\", \"abc\");"
    },
    {
        "line": 284,
        "fullcodeline": "assert_false_regexp(\"^abc$\", \"aabc\");"
    },
    {
        "line": 285,
        "fullcodeline": "assert_false_regexp(\"abc^\", \"abc\");"
    },
    {
        "line": 286,
        "fullcodeline": "assert_false_regexp(\"ab^c\", \"abc\");"
    },
    {
        "line": 287,
        "fullcodeline": "assert_false_regexp(\"a^bcdef\", \"abcdef\")"
    },
    {
        "line": 288,
        "fullcodeline": "assert_true_regexp(\"abc$\", \"aabc\", \"abc\");"
    },
    {
        "line": 289,
        "fullcodeline": "assert_false_regexp(\"$abc\", \"abc\");"
    },
    {
        "line": 290,
        "fullcodeline": "assert_true_regexp(\"(a|a$)bcd\", \"abcd\", \"abcd\");"
    },
    {
        "line": 291,
        "fullcodeline": "assert_false_regexp(\"(a$|a$)bcd\", \"abcd\");"
    },
    {
        "line": 292,
        "fullcodeline": "assert_false_regexp(\"(abc$|ab$)\", \"abcd\");"
    },
    {
        "line": 293,
        "fullcodeline": "assert_true_regexp(\"^a(bc+|b[eh])g|.h$\", \"abhg\", \"abhg\");"
    },
    {
        "line": 294,
        "fullcodeline": "assert_true_regexp(\"(bc+d$|ef*g.|h?i(j|k))\", \"effgz\", \"effgz\");"
    },
    {
        "line": 295,
        "fullcodeline": "assert_true_regexp(\"(bc+d$|ef*g.|h?i(j|k))\", \"ij\", \"ij\");"
    },
    {
        "line": 296,
        "fullcodeline": "assert_false_regexp(\"(bc+d$|ef*g.|h?i(j|k))\", \"effg\");"
    },
    {
        "line": 297,
        "fullcodeline": "assert_false_regexp(\"(bc+d$|ef*g.|h?i(j|k))\", \"bcdd\");"
    },
    {
        "line": 298,
        "fullcodeline": "assert_true_regexp(\"(bc+d$|ef*g.|h?i(j|k))\", \"reffgz\", \"effgz\");"
    },
    {
        "line": 301,
        "fullcodeline": "assert_true_regexp(\"whatever|   x.   x\", \"   xy   x\", \"   xy   x\");"
    },
    {
        "line": 304,
        "fullcodeline": "assert_regexp_syntax_error(\"\\\\x0\");"
    },
    {
        "line": 305,
        "fullcodeline": "assert_regexp_syntax_error(\"\\\\x\");"
    },
    {
        "line": 307,
        "fullcodeline": "assert_regexp_syntax_error(\"x{0,0}\");"
    },
    {
        "line": 308,
        "fullcodeline": "assert_regexp_syntax_error(\"x{0}\");"
    },
    {
        "line": 310,
        "fullcodeline": "assert_regexp_syntax_error(\"\\\\xxy\");"
    },
    {
        "line": 312,
        "fullcodeline": "assert_error("
    },
    {
        "line": 316,
        "fullcodeline": "assert_error("
    },
    {
        "line": 320,
        "fullcodeline": "assert_true_rule_blob("
    },
    {
        "line": 326,
        "fullcodeline": "assert_true_rule_blob("
    }
]