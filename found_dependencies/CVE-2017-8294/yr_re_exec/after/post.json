[
    {
        "line": 28,
        "fullcodeline": "int result = -1;"
    },
    {
        "line": 61,
        "fullcodeline": "input = input_data;"
    },
    {
        "line": 62,
        "fullcodeline": "input_incr = character_size;"
    },
    {
        "line": 79,
        "fullcodeline": "max_bytes_matched = max_bytes_matched - max_bytes_matched % character_size;"
    },
    {
        "line": 80,
        "fullcodeline": "bytes_matched = 0;"
    },
    {
        "line": 82,
        "fullcodeline": "error = _yr_re_fiber_create(&storage->fiber_pool, &fiber);"
    },
    {
        "line": 83,
        "fullcodeline": "fail_if_error(error);"
    },
    {
        "line": 85,
        "fullcodeline": "fiber->ip = re_code;"
    },
    {
        "line": 86,
        "fullcodeline": "fibers.head = fiber;"
    },
    {
        "line": 87,
        "fullcodeline": "fibers.tail = fiber;"
    },
    {
        "line": 89,
        "fullcodeline": "error = _yr_re_fiber_sync(&fibers, &storage->fiber_pool, fiber);"
    },
    {
        "line": 90,
        "fullcodeline": "fail_if_error(error);"
    },
    {
        "line": 53,
        "fullcodeline": "if (_yr_re_alloc_storage(&storage) != ERROR_SUCCESS)"
    },
    {
        "line": 56,
        "fullcodeline": "if (flags & RE_FLAGS_WIDE)"
    },
    {
        "line": 64,
        "fullcodeline": "if (flags & RE_FLAGS_BACKWARDS)"
    },
    {
        "line": 92,
        "fullcodeline": "while (fibers.head != NULL)"
    },
    {
        "line": 57,
        "fullcodeline": "character_size = 2;"
    },
    {
        "line": 66,
        "fullcodeline": "max_bytes_matched = (int) yr_min(input_backwards_size, RE_SCAN_LIMIT);"
    },
    {
        "line": 67,
        "fullcodeline": "input -= character_size;"
    },
    {
        "line": 68,
        "fullcodeline": "input_incr = -input_incr;"
    },
    {
        "line": 94,
        "fullcodeline": "fiber = fibers.head;"
    },
    {
        "line": 328,
        "fullcodeline": "input += input_incr;"
    },
    {
        "line": 329,
        "fullcodeline": "bytes_matched += character_size;"
    },
    {
        "line": 54,
        "fullcodeline": "return -2;"
    },
    {
        "line": 59,
        "fullcodeline": "character_size = 1;"
    },
    {
        "line": 72,
        "fullcodeline": "max_bytes_matched = (int) yr_min(input_forwards_size, RE_SCAN_LIMIT);"
    },
    {
        "line": 96,
        "fullcodeline": "while(fiber != NULL)"
    },
    {
        "line": 331,
        "fullcodeline": "if (flags & RE_FLAGS_SCAN && bytes_matched < max_bytes_matched)"
    },
    {
        "line": 98,
        "fullcodeline": "ip = fiber->ip;"
    },
    {
        "line": 99,
        "fullcodeline": "action = ACTION_NONE;"
    },
    {
        "line": 333,
        "fullcodeline": "error = _yr_re_fiber_create(&storage->fiber_pool, &fiber);"
    },
    {
        "line": 334,
        "fullcodeline": "fail_if_error(error);"
    },
    {
        "line": 336,
        "fullcodeline": "fiber->ip = re_code;"
    },
    {
        "line": 337,
        "fullcodeline": "_yr_re_fiber_append(&fibers, fiber);"
    },
    {
        "line": 339,
        "fullcodeline": "error = _yr_re_fiber_sync(&fibers, &storage->fiber_pool, fiber);"
    },
    {
        "line": 340,
        "fullcodeline": "fail_if_error(error);"
    },
    {
        "line": 104,
        "fullcodeline": "prolog;"
    },
    {
        "line": 105,
        "fullcodeline": "match = (flags & RE_FLAGS_DOT_ALL) || (*input != 0x0A);"
    },
    {
        "line": 106,
        "fullcodeline": "action = match ? ACTION_NONE : ACTION_KILL;"
    },
    {
        "line": 107,
        "fullcodeline": "fiber->ip += 1;"
    },
    {
        "line": 112,
        "fullcodeline": "prolog;"
    },
    {
        "line": 113,
        "fullcodeline": "match = (flags & RE_FLAGS_DOT_ALL) || (*input != 0x0A);"
    },
    {
        "line": 114,
        "fullcodeline": "action = match ? ACTION_NONE : ACTION_KILL;"
    },
    {
        "line": 124,
        "fullcodeline": "prolog;"
    },
    {
        "line": 129,
        "fullcodeline": "action = match ? ACTION_NONE : ACTION_KILL;"
    },
    {
        "line": 130,
        "fullcodeline": "fiber->ip += 2;"
    },
    {
        "line": 134,
        "fullcodeline": "prolog;"
    },
    {
        "line": 135,
        "fullcodeline": "value = *(int16_t*)(ip + 1) & 0xFF;"
    },
    {
        "line": 136,
        "fullcodeline": "mask = *(int16_t*)(ip + 1) >> 8;"
    },
    {
        "line": 142,
        "fullcodeline": "match = ((*input & mask) == value);"
    },
    {
        "line": 143,
        "fullcodeline": "action = match ? ACTION_NONE : ACTION_KILL;"
    },
    {
        "line": 144,
        "fullcodeline": "fiber->ip += 3;"
    },
    {
        "line": 148,
        "fullcodeline": "prolog;"
    },
    {
        "line": 149,
        "fullcodeline": "match = CHAR_IN_CLASS(*input, ip + 1);"
    },
    {
        "line": 152,
        "fullcodeline": "action = match ? ACTION_NONE : ACTION_KILL;"
    },
    {
        "line": 153,
        "fullcodeline": "fiber->ip += 33;"
    },
    {
        "line": 157,
        "fullcodeline": "prolog;"
    },
    {
        "line": 158,
        "fullcodeline": "match = _yr_re_is_word_char(input, character_size);"
    },
    {
        "line": 159,
        "fullcodeline": "action = match ? ACTION_NONE : ACTION_KILL;"
    },
    {
        "line": 160,
        "fullcodeline": "fiber->ip += 1;"
    },
    {
        "line": 164,
        "fullcodeline": "prolog;"
    },
    {
        "line": 165,
        "fullcodeline": "match = !_yr_re_is_word_char(input, character_size);"
    },
    {
        "line": 166,
        "fullcodeline": "action = match ? ACTION_NONE : ACTION_KILL;"
    },
    {
        "line": 167,
        "fullcodeline": "fiber->ip += 1;"
    },
    {
        "line": 173,
        "fullcodeline": "prolog;"
    },
    {
        "line": 192,
        "fullcodeline": "action = match ? ACTION_NONE : ACTION_KILL;"
    },
    {
        "line": 193,
        "fullcodeline": "fiber->ip += 1;"
    },
    {
        "line": 197,
        "fullcodeline": "prolog;"
    },
    {
        "line": 198,
        "fullcodeline": "match = isdigit(*input);"
    },
    {
        "line": 199,
        "fullcodeline": "action = match ? ACTION_NONE : ACTION_KILL;"
    },
    {
        "line": 200,
        "fullcodeline": "fiber->ip += 1;"
    },
    {
        "line": 204,
        "fullcodeline": "prolog;"
    },
    {
        "line": 205,
        "fullcodeline": "match = !isdigit(*input);"
    },
    {
        "line": 206,
        "fullcodeline": "action = match ? ACTION_NONE : ACTION_KILL;"
    },
    {
        "line": 207,
        "fullcodeline": "fiber->ip += 1;"
    },
    {
        "line": 236,
        "fullcodeline": "action = match ? ACTION_CONTINUE : ACTION_KILL;"
    },
    {
        "line": 237,
        "fullcodeline": "fiber->ip += 1;"
    },
    {
        "line": 245,
        "fullcodeline": "action = kill ? ACTION_KILL : ACTION_CONTINUE;"
    },
    {
        "line": 246,
        "fullcodeline": "fiber->ip += 1;"
    },
    {
        "line": 250,
        "fullcodeline": "kill = flags & RE_FLAGS_BACKWARDS ||"
    },
    {
        "line": 252,
        "fullcodeline": "action = kill ? ACTION_KILL : ACTION_CONTINUE;"
    },
    {
        "line": 253,
        "fullcodeline": "fiber->ip += 1;"
    },
    {
        "line": 258,
        "fullcodeline": "result = bytes_matched;"
    },
    {
        "line": 301,
        "fullcodeline": "assert(FALSE);"
    },
    {
        "line": 306,
        "fullcodeline": "case ACTION_KILL:"
    },
    {
        "line": 307,
        "fullcodeline": "fiber = _yr_re_fiber_kill(&fibers, &storage->fiber_pool, fiber);"
    },
    {
        "line": 310,
        "fullcodeline": "case ACTION_KILL_TAIL:"
    },
    {
        "line": 311,
        "fullcodeline": "_yr_re_fiber_kill_tail(&fibers, &storage->fiber_pool, fiber);"
    },
    {
        "line": 312,
        "fullcodeline": "fiber = NULL;"
    },
    {
        "line": 315,
        "fullcodeline": "case ACTION_CONTINUE:"
    },
    {
        "line": 316,
        "fullcodeline": "error = _yr_re_fiber_sync(&fibers, &storage->fiber_pool, fiber);"
    },
    {
        "line": 317,
        "fullcodeline": "fail_if_error(error);"
    },
    {
        "line": 321,
        "fullcodeline": "next_fiber = fiber->next;"
    },
    {
        "line": 322,
        "fullcodeline": "error = _yr_re_fiber_sync(&fibers, &storage->fiber_pool, fiber);"
    },
    {
        "line": 323,
        "fullcodeline": "fail_if_error(error);"
    },
    {
        "line": 324,
        "fullcodeline": "fiber = next_fiber;"
    },
    {
        "line": 125,
        "fullcodeline": "if (flags & RE_FLAGS_NO_CASE)"
    },
    {
        "line": 150,
        "fullcodeline": "if (!match && (flags & RE_FLAGS_NO_CASE))"
    },
    {
        "line": 189,
        "fullcodeline": "if (*ip == RE_OPCODE_NON_SPACE)"
    },
    {
        "line": 213,
        "fullcodeline": "if (bytes_matched == 0 && input_backwards_size < character_size)"
    },
    {
        "line": 233,
        "fullcodeline": "if (*ip == RE_OPCODE_NON_WORD_BOUNDARY)"
    },
    {
        "line": 241,
        "fullcodeline": "if (flags & RE_FLAGS_BACKWARDS)"
    },
    {
        "line": 260,
        "fullcodeline": "if (flags & RE_FLAGS_EXHAUSTIVE)"
    },
    {
        "line": 126,
        "fullcodeline": "match = yr_lowercase[*input] == yr_lowercase[*(ip + 1)];"
    },
    {
        "line": 151,
        "fullcodeline": "match = CHAR_IN_CLASS(yr_altercase[*input], ip + 1);"
    },
    {
        "line": 183,
        "fullcodeline": "match = TRUE;"
    },
    {
        "line": 186,
        "fullcodeline": "match = FALSE;"
    },
    {
        "line": 190,
        "fullcodeline": "match = !match;"
    },
    {
        "line": 215,
        "fullcodeline": "match = TRUE;"
    },
    {
        "line": 234,
        "fullcodeline": "match = !match;"
    },
    {
        "line": 242,
        "fullcodeline": "kill = input_backwards_size > (size_t) bytes_matched;"
    },
    {
        "line": 251,
        "fullcodeline": "input_forwards_size > (size_t) bytes_matched;"
    },
    {
        "line": 291,
        "fullcodeline": "action = ACTION_KILL;"
    },
    {
        "line": 128,
        "fullcodeline": "match = (*input == *(ip + 1));"
    },
    {
        "line": 244,
        "fullcodeline": "kill = input_backwards_size > 0 || (bytes_matched != 0);"
    },
    {
        "line": 262,
        "fullcodeline": "if (callback != NULL)"
    },
    {
        "line": 295,
        "fullcodeline": "action = ACTION_KILL_TAIL;"
    },
    {
        "line": 217,
        "fullcodeline": "else if (bytes_matched >= max_bytes_matched)"
    },
    {
        "line": 219,
        "fullcodeline": "match = TRUE;"
    },
    {
        "line": 266,
        "fullcodeline": "if (flags & RE_FLAGS_BACKWARDS)"
    },
    {
        "line": 223,
        "fullcodeline": "assert(input <  input_data + input_forwards_size);"
    },
    {
        "line": 224,
        "fullcodeline": "assert(input >= input_data - input_backwards_size);"
    },
    {
        "line": 226,
        "fullcodeline": "assert(input - input_incr <  input_data + input_forwards_size);"
    },
    {
        "line": 227,
        "fullcodeline": "assert(input - input_incr >= input_data - input_backwards_size);"
    },
    {
        "line": 229,
        "fullcodeline": "match = _yr_re_is_word_char(input, character_size) != \\"
    },
    {
        "line": 267,
        "fullcodeline": "cb_result = callback("
    },
    {
        "line": 273,
        "fullcodeline": "cb_result = callback("
    },
    {
        "line": 282,
        "fullcodeline": "return -2;"
    },
    {
        "line": 284,
        "fullcodeline": "return -3;"
    },
    {
        "line": 286,
        "fullcodeline": "if (cb_result != ERROR_SUCCESS)"
    },
    {
        "line": 230,
        "fullcodeline": "_yr_re_is_word_char(input - input_incr, character_size);"
    },
    {
        "line": 268,
        "fullcodeline": "input + character_size,"
    },
    {
        "line": 287,
        "fullcodeline": "return -4;"
    }
]