[
    {
        "line": 27,
        "fullcodeline": "int result = -1;"
    },
    {
        "line": 55,
        "fullcodeline": "input = input_data;"
    },
    {
        "line": 56,
        "fullcodeline": "input_incr = character_size;"
    },
    {
        "line": 64,
        "fullcodeline": "max_bytes_matched = (int) yr_min(input_size, RE_SCAN_LIMIT);"
    },
    {
        "line": 70,
        "fullcodeline": "max_bytes_matched = max_bytes_matched - max_bytes_matched % character_size;"
    },
    {
        "line": 71,
        "fullcodeline": "bytes_matched = 0;"
    },
    {
        "line": 73,
        "fullcodeline": "error = _yr_re_fiber_create(&storage->fiber_pool, &fiber);"
    },
    {
        "line": 76,
        "fullcodeline": "fiber->ip = re_code;"
    },
    {
        "line": 77,
        "fullcodeline": "fibers.head = fiber;"
    },
    {
        "line": 78,
        "fullcodeline": "fibers.tail = fiber;"
    },
    {
        "line": 80,
        "fullcodeline": "error = _yr_re_fiber_sync(&fibers, &storage->fiber_pool, fiber);"
    },
    {
        "line": 47,
        "fullcodeline": "if (_yr_re_alloc_storage(&storage) != ERROR_SUCCESS)"
    },
    {
        "line": 50,
        "fullcodeline": "if (flags & RE_FLAGS_WIDE)"
    },
    {
        "line": 58,
        "fullcodeline": "if (flags & RE_FLAGS_BACKWARDS)"
    },
    {
        "line": 83,
        "fullcodeline": "while (fibers.head != NULL)"
    },
    {
        "line": 51,
        "fullcodeline": "character_size = 2;"
    },
    {
        "line": 60,
        "fullcodeline": "input -= character_size;"
    },
    {
        "line": 61,
        "fullcodeline": "input_incr = -input_incr;"
    },
    {
        "line": 85,
        "fullcodeline": "fiber = fibers.head;"
    },
    {
        "line": 317,
        "fullcodeline": "input += input_incr;"
    },
    {
        "line": 318,
        "fullcodeline": "bytes_matched += character_size;"
    },
    {
        "line": 48,
        "fullcodeline": "return -2;"
    },
    {
        "line": 53,
        "fullcodeline": "character_size = 1;"
    },
    {
        "line": 87,
        "fullcodeline": "while(fiber != NULL)"
    },
    {
        "line": 320,
        "fullcodeline": "if (flags & RE_FLAGS_SCAN && bytes_matched < max_bytes_matched)"
    },
    {
        "line": 89,
        "fullcodeline": "ip = fiber->ip;"
    },
    {
        "line": 310,
        "fullcodeline": "if (flags & RE_FLAGS_WIDE &&"
    },
    {
        "line": 312,
        "fullcodeline": "*(input + 1) != 0)"
    },
    {
        "line": 314,
        "fullcodeline": "_yr_re_fiber_kill_all(&fibers, &storage->fiber_pool);"
    },
    {
        "line": 322,
        "fullcodeline": "error = _yr_re_fiber_create(&storage->fiber_pool, &fiber);"
    },
    {
        "line": 325,
        "fullcodeline": "fiber->ip = re_code;"
    },
    {
        "line": 326,
        "fullcodeline": "_yr_re_fiber_append(&fibers, fiber);"
    },
    {
        "line": 328,
        "fullcodeline": "error = _yr_re_fiber_sync(&fibers, &storage->fiber_pool, fiber);"
    },
    {
        "line": 74,
        "fullcodeline": "fail_if_error(error);"
    },
    {
        "line": 81,
        "fullcodeline": "fail_if_error(error);"
    },
    {
        "line": 311,
        "fullcodeline": "bytes_matched < max_bytes_matched &&"
    },
    {
        "line": 98,
        "fullcodeline": "fiber->ip += 1;"
    },
    {
        "line": 121,
        "fullcodeline": "fiber->ip += 2;"
    },
    {
        "line": 126,
        "fullcodeline": "value = *(int16_t*)(ip + 1) & 0xFF;"
    },
    {
        "line": 127,
        "fullcodeline": "mask = *(int16_t*)(ip + 1) >> 8;"
    },
    {
        "line": 135,
        "fullcodeline": "fiber->ip += 3;"
    },
    {
        "line": 140,
        "fullcodeline": "match = CHAR_IN_CLASS(*input, ip + 1);"
    },
    {
        "line": 144,
        "fullcodeline": "fiber->ip += 33;"
    },
    {
        "line": 151,
        "fullcodeline": "fiber->ip += 1;"
    },
    {
        "line": 158,
        "fullcodeline": "fiber->ip += 1;"
    },
    {
        "line": 184,
        "fullcodeline": "fiber->ip += 1;"
    },
    {
        "line": 191,
        "fullcodeline": "fiber->ip += 1;"
    },
    {
        "line": 198,
        "fullcodeline": "fiber->ip += 1;"
    },
    {
        "line": 219,
        "fullcodeline": "fiber->ip += 1;"
    },
    {
        "line": 228,
        "fullcodeline": "fiber->ip += 1;"
    },
    {
        "line": 235,
        "fullcodeline": "fiber->ip += 1;"
    },
    {
        "line": 240,
        "fullcodeline": "result = bytes_matched;"
    },
    {
        "line": 283,
        "fullcodeline": "assert(FALSE);"
    },
    {
        "line": 288,
        "fullcodeline": "case ACTION_KILL:"
    },
    {
        "line": 289,
        "fullcodeline": "fiber = _yr_re_fiber_kill(&fibers, &storage->fiber_pool, fiber);"
    },
    {
        "line": 293,
        "fullcodeline": "_yr_re_fiber_kill_tail(&fibers, &storage->fiber_pool, fiber);"
    },
    {
        "line": 294,
        "fullcodeline": "fiber = NULL;"
    },
    {
        "line": 297,
        "fullcodeline": "case ACTION_CONTINUE:"
    },
    {
        "line": 298,
        "fullcodeline": "error = _yr_re_fiber_sync(&fibers, &storage->fiber_pool, fiber);"
    },
    {
        "line": 303,
        "fullcodeline": "next_fiber = fiber->next;"
    },
    {
        "line": 304,
        "fullcodeline": "error = _yr_re_fiber_sync(&fibers, &storage->fiber_pool, fiber);"
    },
    {
        "line": 306,
        "fullcodeline": "fiber = next_fiber;"
    },
    {
        "line": 96,
        "fullcodeline": "match = (flags & RE_FLAGS_DOT_ALL) || (*input != 0x0A);"
    },
    {
        "line": 104,
        "fullcodeline": "match = (flags & RE_FLAGS_DOT_ALL) || (*input != 0x0A);"
    },
    {
        "line": 116,
        "fullcodeline": "if (flags & RE_FLAGS_NO_CASE)"
    },
    {
        "line": 133,
        "fullcodeline": "match = ((*input & mask) == value);"
    },
    {
        "line": 149,
        "fullcodeline": "match = IS_WORD_CHAR(*input);"
    },
    {
        "line": 156,
        "fullcodeline": "match = !IS_WORD_CHAR(*input);"
    },
    {
        "line": 180,
        "fullcodeline": "if (*ip == RE_OPCODE_NON_SPACE)"
    },
    {
        "line": 189,
        "fullcodeline": "match = isdigit(*input);"
    },
    {
        "line": 196,
        "fullcodeline": "match = !isdigit(*input);"
    },
    {
        "line": 215,
        "fullcodeline": "if (*ip == RE_OPCODE_NON_WORD_BOUNDARY)"
    },
    {
        "line": 223,
        "fullcodeline": "if (flags & RE_FLAGS_BACKWARDS)"
    },
    {
        "line": 232,
        "fullcodeline": "kill = flags & RE_FLAGS_BACKWARDS ||"
    },
    {
        "line": 242,
        "fullcodeline": "if (flags & RE_FLAGS_EXHAUSTIVE)"
    },
    {
        "line": 141,
        "fullcodeline": "if (!match && (flags & RE_FLAGS_NO_CASE))"
    },
    {
        "line": 174,
        "fullcodeline": "match = TRUE;"
    },
    {
        "line": 177,
        "fullcodeline": "match = FALSE;"
    },
    {
        "line": 204,
        "fullcodeline": "if (bytes_matched == 0 &&"
    },
    {
        "line": 206,
        "fullcodeline": "!(flags & RE_FLAGS_BACKWARDS))"
    },
    {
        "line": 207,
        "fullcodeline": "match = TRUE;"
    },
    {
        "line": 233,
        "fullcodeline": "input_size > (size_t) bytes_matched;"
    },
    {
        "line": 95,
        "fullcodeline": "prolog;"
    },
    {
        "line": 103,
        "fullcodeline": "prolog;"
    },
    {
        "line": 115,
        "fullcodeline": "prolog;"
    },
    {
        "line": 117,
        "fullcodeline": "match = yr_lowercase[*input] == yr_lowercase[*(ip + 1)];"
    },
    {
        "line": 125,
        "fullcodeline": "prolog;"
    },
    {
        "line": 139,
        "fullcodeline": "prolog;"
    },
    {
        "line": 142,
        "fullcodeline": "match = CHAR_IN_CLASS(yr_altercase[*input], ip + 1);"
    },
    {
        "line": 148,
        "fullcodeline": "prolog;"
    },
    {
        "line": 155,
        "fullcodeline": "prolog;"
    },
    {
        "line": 164,
        "fullcodeline": "prolog;"
    },
    {
        "line": 181,
        "fullcodeline": "match = !match;"
    },
    {
        "line": 188,
        "fullcodeline": "prolog;"
    },
    {
        "line": 195,
        "fullcodeline": "prolog;"
    },
    {
        "line": 205,
        "fullcodeline": "!(flags & RE_FLAGS_NOT_AT_START) &&"
    },
    {
        "line": 216,
        "fullcodeline": "match = !match;"
    },
    {
        "line": 224,
        "fullcodeline": "kill = input_size > (size_t) bytes_matched;"
    },
    {
        "line": 244,
        "fullcodeline": "if (callback != NULL)"
    },
    {
        "line": 323,
        "fullcodeline": "fail_if_error(error);"
    },
    {
        "line": 329,
        "fullcodeline": "fail_if_error(error);"
    },
    {
        "line": 119,
        "fullcodeline": "match = (*input == *(ip + 1));"
    },
    {
        "line": 208,
        "fullcodeline": "else if (bytes_matched >= max_bytes_matched)"
    },
    {
        "line": 226,
        "fullcodeline": "kill = (flags & RE_FLAGS_NOT_AT_START) || (bytes_matched != 0);"
    },
    {
        "line": 209,
        "fullcodeline": "match = TRUE;"
    },
    {
        "line": 248,
        "fullcodeline": "if (flags & RE_FLAGS_BACKWARDS)"
    },
    {
        "line": 299,
        "fullcodeline": "fail_if_error(error);"
    },
    {
        "line": 305,
        "fullcodeline": "fail_if_error(error);"
    },
    {
        "line": 249,
        "fullcodeline": "cb_result = callback("
    },
    {
        "line": 255,
        "fullcodeline": "cb_result = callback("
    },
    {
        "line": 264,
        "fullcodeline": "return -2;"
    },
    {
        "line": 266,
        "fullcodeline": "return -3;"
    },
    {
        "line": 210,
        "fullcodeline": "else if (IS_WORD_CHAR(*(input - input_incr)) != IS_WORD_CHAR(*input))"
    },
    {
        "line": 211,
        "fullcodeline": "match = TRUE;"
    },
    {
        "line": 213,
        "fullcodeline": "match = FALSE;"
    },
    {
        "line": 269,
        "fullcodeline": "return -4;"
    }
]