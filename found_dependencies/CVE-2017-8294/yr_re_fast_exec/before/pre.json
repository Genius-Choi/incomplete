[
    {
        "line": 11,
        "fullcodeline": "uint8_t* code_stack[MAX_FAST_RE_STACK];"
    },
    {
        "line": 12,
        "fullcodeline": "uint8_t* input_stack[MAX_FAST_RE_STACK];"
    },
    {
        "line": 13,
        "fullcodeline": "int matches_stack[MAX_FAST_RE_STACK];"
    },
    {
        "line": 15,
        "fullcodeline": "uint8_t* ip = code;"
    },
    {
        "line": 16,
        "fullcodeline": "uint8_t* input = input_data;"
    },
    {
        "line": 25,
        "fullcodeline": "int sp = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "int max_bytes_matched = input_size;"
    },
    {
        "line": 29,
        "fullcodeline": "input_incr = flags & RE_FLAGS_BACKWARDS ? -1 : 1;"
    },
    {
        "line": 34,
        "fullcodeline": "code_stack[sp] = code;"
    },
    {
        "line": 35,
        "fullcodeline": "input_stack[sp] = input;"
    },
    {
        "line": 36,
        "fullcodeline": "matches_stack[sp] = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "sp++;"
    },
    {
        "line": 31,
        "fullcodeline": "if (flags & RE_FLAGS_BACKWARDS)"
    },
    {
        "line": 39,
        "fullcodeline": "while (sp > 0)"
    },
    {
        "line": 162,
        "fullcodeline": "return -1;"
    },
    {
        "line": 32,
        "fullcodeline": "input--;"
    },
    {
        "line": 41,
        "fullcodeline": "sp--;"
    },
    {
        "line": 42,
        "fullcodeline": "ip = code_stack[sp];"
    },
    {
        "line": 43,
        "fullcodeline": "input = input_stack[sp];"
    },
    {
        "line": 44,
        "fullcodeline": "bytes_matched = matches_stack[sp];"
    },
    {
        "line": 45,
        "fullcodeline": "stop = FALSE;"
    },
    {
        "line": 47,
        "fullcodeline": "while(!stop)"
    },
    {
        "line": 49,
        "fullcodeline": "if (*ip == RE_OPCODE_MATCH)"
    },
    {
        "line": 78,
        "fullcodeline": "if (bytes_matched >= max_bytes_matched)"
    },
    {
        "line": 100,
        "fullcodeline": "value = *(int16_t*)(ip + 1) & 0xFF;"
    },
    {
        "line": 101,
        "fullcodeline": "mask = *(int16_t*)(ip + 1) >> 8;"
    },
    {
        "line": 118,
        "fullcodeline": "bytes_matched++;"
    },
    {
        "line": 119,
        "fullcodeline": "input += input_incr;"
    },
    {
        "line": 120,
        "fullcodeline": "ip += 1;"
    },
    {
        "line": 126,
        "fullcodeline": "repeat_any_args = (RE_REPEAT_ANY_ARGS*)(ip + 1);"
    },
    {
        "line": 127,
        "fullcodeline": "next_opcode = ip + 1 + sizeof(RE_REPEAT_ANY_ARGS);"
    },
    {
        "line": 150,
        "fullcodeline": "input += input_incr * repeat_any_args->min;"
    },
    {
        "line": 151,
        "fullcodeline": "bytes_matched += repeat_any_args->min;"
    },
    {
        "line": 152,
        "fullcodeline": "ip = next_opcode;"
    },
    {
        "line": 157,
        "fullcodeline": "assert(FALSE);"
    },
    {
        "line": 51,
        "fullcodeline": "if (flags & RE_FLAGS_EXHAUSTIVE)"
    },
    {
        "line": 85,
        "fullcodeline": "if (*input == *(ip + 1))"
    },
    {
        "line": 103,
        "fullcodeline": "if ((*input & mask) == value)"
    },
    {
        "line": 129,
        "fullcodeline": "for (i = repeat_any_args->min + 1; i <= repeat_any_args->max; i++)"
    },
    {
        "line": 53,
        "fullcodeline": "int cb_result = callback("
    },
    {
        "line": 87,
        "fullcodeline": "bytes_matched++;"
    },
    {
        "line": 88,
        "fullcodeline": "input += input_incr;"
    },
    {
        "line": 89,
        "fullcodeline": "ip += 2;"
    },
    {
        "line": 105,
        "fullcodeline": "bytes_matched++;"
    },
    {
        "line": 106,
        "fullcodeline": "input += input_incr;"
    },
    {
        "line": 107,
        "fullcodeline": "ip += 3;"
    },
    {
        "line": 131,
        "fullcodeline": "next_input = input + i * input_incr;"
    },
    {
        "line": 93,
        "fullcodeline": "stop = TRUE;"
    },
    {
        "line": 111,
        "fullcodeline": "stop = TRUE;"
    },
    {
        "line": 133,
        "fullcodeline": "if (bytes_matched + i >= max_bytes_matched)"
    },
    {
        "line": 136,
        "fullcodeline": "if ( *(next_opcode) != RE_OPCODE_LITERAL ||"
    },
    {
        "line": 54,
        "fullcodeline": "flags & RE_FLAGS_BACKWARDS ? input + 1 : input_data,"
    },
    {
        "line": 137,
        "fullcodeline": "(*(next_opcode) == RE_OPCODE_LITERAL &&"
    },
    {
        "line": 143,
        "fullcodeline": "code_stack[sp] = next_opcode;"
    },
    {
        "line": 144,
        "fullcodeline": "input_stack[sp] = next_input;"
    },
    {
        "line": 145,
        "fullcodeline": "matches_stack[sp] = bytes_matched + i;"
    },
    {
        "line": 146,
        "fullcodeline": "sp++;"
    },
    {
        "line": 62,
        "fullcodeline": "return -2;"
    },
    {
        "line": 64,
        "fullcodeline": "return -3;"
    },
    {
        "line": 66,
        "fullcodeline": "if (cb_result != ERROR_SUCCESS)"
    },
    {
        "line": 138,
        "fullcodeline": "*(next_opcode + 1) == *next_input))"
    },
    {
        "line": 140,
        "fullcodeline": "if (sp >= MAX_FAST_RE_STACK)"
    },
    {
        "line": 67,
        "fullcodeline": "return -4;"
    },
    {
        "line": 141,
        "fullcodeline": "return -4;"
    }
]