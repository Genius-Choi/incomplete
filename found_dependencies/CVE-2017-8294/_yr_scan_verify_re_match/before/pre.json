[
    {
        "line": 12,
        "fullcodeline": "int forward_matches = -1;"
    },
    {
        "line": 13,
        "fullcodeline": "int backward_matches = -1;"
    },
    {
        "line": 14,
        "fullcodeline": "int flags = 0;"
    },
    {
        "line": 70,
        "fullcodeline": "callback_args.string = ac_match->string;"
    },
    {
        "line": 71,
        "fullcodeline": "callback_args.context = context;"
    },
    {
        "line": 72,
        "fullcodeline": "callback_args.data = data;"
    },
    {
        "line": 73,
        "fullcodeline": "callback_args.data_size = data_size;"
    },
    {
        "line": 74,
        "fullcodeline": "callback_args.data_base = data_base;"
    },
    {
        "line": 75,
        "fullcodeline": "callback_args.forward_matches = forward_matches;"
    },
    {
        "line": 76,
        "fullcodeline": "callback_args.full_word = STRING_IS_FULL_WORD(ac_match->string);"
    },
    {
        "line": 16,
        "fullcodeline": "if (STRING_IS_GREEDY_REGEXP(ac_match->string))"
    },
    {
        "line": 19,
        "fullcodeline": "if (STRING_IS_NO_CASE(ac_match->string))"
    },
    {
        "line": 22,
        "fullcodeline": "if (STRING_IS_DOT_ALL(ac_match->string))"
    },
    {
        "line": 25,
        "fullcodeline": "if (STRING_IS_FAST_REGEXP(ac_match->string))"
    },
    {
        "line": 30,
        "fullcodeline": "if (STRING_IS_ASCII(ac_match->string))"
    },
    {
        "line": 41,
        "fullcodeline": "if (STRING_IS_WIDE(ac_match->string) && forward_matches == -1)"
    },
    {
        "line": 78,
        "fullcodeline": "if (ac_match->backward_code != NULL)"
    },
    {
        "line": 17,
        "fullcodeline": "flags |= RE_FLAGS_GREEDY;"
    },
    {
        "line": 20,
        "fullcodeline": "flags |= RE_FLAGS_NO_CASE;"
    },
    {
        "line": 23,
        "fullcodeline": "flags |= RE_FLAGS_DOT_ALL;"
    },
    {
        "line": 26,
        "fullcodeline": "exec = yr_re_fast_exec;"
    },
    {
        "line": 32,
        "fullcodeline": "forward_matches = exec("
    },
    {
        "line": 43,
        "fullcodeline": "flags |= RE_FLAGS_WIDE;"
    },
    {
        "line": 44,
        "fullcodeline": "forward_matches = exec("
    },
    {
        "line": 55,
        "fullcodeline": "case -1:"
    },
    {
        "line": 67,
        "fullcodeline": "if (forward_matches == 0 && ac_match->backward_code == NULL)"
    },
    {
        "line": 28,
        "fullcodeline": "exec = yr_re_exec;"
    },
    {
        "line": 80,
        "fullcodeline": "backward_matches = exec("
    },
    {
        "line": 34,
        "fullcodeline": "data + offset,"
    },
    {
        "line": 35,
        "fullcodeline": "data_size - offset,"
    },
    {
        "line": 36,
        "fullcodeline": "offset > 0 ? flags | RE_FLAGS_NOT_AT_START : flags,"
    },
    {
        "line": 46,
        "fullcodeline": "data + offset,"
    },
    {
        "line": 47,
        "fullcodeline": "data_size - offset,"
    },
    {
        "line": 48,
        "fullcodeline": "offset > 0 ? flags | RE_FLAGS_NOT_AT_START : flags,"
    },
    {
        "line": 84,
        "fullcodeline": "flags | RE_FLAGS_BACKWARDS | RE_FLAGS_EXHAUSTIVE,"
    },
    {
        "line": 102,
        "fullcodeline": "FAIL_ON_ERROR(_yr_scan_match_callback("
    }
]