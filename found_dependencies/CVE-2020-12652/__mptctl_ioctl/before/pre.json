[
    {
        "line": 7,
        "fullcodeline": "int nonblock = (file->f_flags & O_NONBLOCK);"
    },
    {
        "line": 9,
        "fullcodeline": "MPT_ADAPTER *iocp = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "iocnumX = khdr.iocnum & 0xFF;"
    },
    {
        "line": 11,
        "fullcodeline": "if (copy_from_user(&khdr, uhdr, sizeof(khdr))) {"
    },
    {
        "line": 17,
        "fullcodeline": "ret = -ENXIO;\t\t\t\t/* (-6) No such device or address */"
    },
    {
        "line": 27,
        "fullcodeline": "if (!iocp->active) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (cmd == MPTFWDOWNLOAD)"
    },
    {
        "line": 23,
        "fullcodeline": "if (((iocnum = mpt_verify_adapter(iocnumX, &iocp)) < 0) ||"
    },
    {
        "line": 24,
        "fullcodeline": "(iocp == NULL))"
    },
    {
        "line": 38,
        "fullcodeline": "if ((cmd & ~IOCSIZE_MASK) == (MPTIOCINFO & ~IOCSIZE_MASK)) {"
    },
    {
        "line": 57,
        "fullcodeline": "if ((ret = mptctl_syscall_down(iocp, nonblock)) != 0)"
    },
    {
        "line": 61,
        "fullcodeline": "ret = mptctl_fw_download(arg);"
    },
    {
        "line": 15,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 25,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 30,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 39,
        "fullcodeline": "return mptctl_getiocinfo(arg, _IOC_SIZE(cmd));"
    },
    {
        "line": 40,
        "fullcodeline": "} else if (cmd == MPTTARGETINFO) {"
    },
    {
        "line": 62,
        "fullcodeline": "else if (cmd == MPTCOMMAND)"
    },
    {
        "line": 63,
        "fullcodeline": "ret = mptctl_mpt_command(arg);"
    },
    {
        "line": 41,
        "fullcodeline": "return mptctl_gettargetinfo(arg);"
    },
    {
        "line": 42,
        "fullcodeline": "} else if (cmd == MPTTEST) {"
    },
    {
        "line": 64,
        "fullcodeline": "else if (cmd == MPTHARDRESET)"
    },
    {
        "line": 65,
        "fullcodeline": "ret = mptctl_do_reset(arg);"
    },
    {
        "line": 43,
        "fullcodeline": "return mptctl_readtest(arg);"
    },
    {
        "line": 44,
        "fullcodeline": "} else if (cmd == MPTEVENTQUERY) {"
    },
    {
        "line": 66,
        "fullcodeline": "else if ((cmd & ~IOCSIZE_MASK) == (HP_GETHOSTINFO & ~IOCSIZE_MASK))"
    },
    {
        "line": 67,
        "fullcodeline": "ret = mptctl_hp_hostinfo(arg, _IOC_SIZE(cmd));"
    },
    {
        "line": 45,
        "fullcodeline": "return mptctl_eventquery(arg);"
    },
    {
        "line": 46,
        "fullcodeline": "} else if (cmd == MPTEVENTENABLE) {"
    },
    {
        "line": 68,
        "fullcodeline": "else if (cmd == HP_GETTARGETINFO)"
    },
    {
        "line": 69,
        "fullcodeline": "ret = mptctl_hp_targetinfo(arg);"
    },
    {
        "line": 47,
        "fullcodeline": "return mptctl_eventenable(arg);"
    },
    {
        "line": 71,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 48,
        "fullcodeline": "} else if (cmd == MPTEVENTREPORT) {"
    },
    {
        "line": 49,
        "fullcodeline": "return mptctl_eventreport(arg);"
    },
    {
        "line": 50,
        "fullcodeline": "} else if (cmd == MPTFWREPLACE) {"
    },
    {
        "line": 51,
        "fullcodeline": "return mptctl_replace_fw(arg);"
    }
]