[
    {
        "line": 5,
        "fullcodeline": "char                    *pbuf=NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "MPT_FRAME_HDR\t\t*mf = NULL;"
    },
    {
        "line": 39,
        "fullcodeline": "pdev = (struct pci_dev *) ioc->pcidev;"
    },
    {
        "line": 41,
        "fullcodeline": "karg.vendor = pdev->vendor;"
    },
    {
        "line": 42,
        "fullcodeline": "karg.device = pdev->device;"
    },
    {
        "line": 43,
        "fullcodeline": "karg.subsystem_id = pdev->subsystem_device;"
    },
    {
        "line": 44,
        "fullcodeline": "karg.subsystem_vendor = pdev->subsystem_vendor;"
    },
    {
        "line": 45,
        "fullcodeline": "karg.devfn = pdev->devfn;"
    },
    {
        "line": 57,
        "fullcodeline": "snprintf(karg.fw_version, sizeof(karg.fw_version),"
    },
    {
        "line": 66,
        "fullcodeline": "hdr.PageVersion = 0;"
    },
    {
        "line": 67,
        "fullcodeline": "hdr.PageLength = 0;"
    },
    {
        "line": 68,
        "fullcodeline": "hdr.PageNumber = 0;"
    },
    {
        "line": 69,
        "fullcodeline": "hdr.PageType = MPI_CONFIG_PAGETYPE_MANUFACTURING;"
    },
    {
        "line": 70,
        "fullcodeline": "cfg.cfghdr.hdr = &hdr;"
    },
    {
        "line": 71,
        "fullcodeline": "cfg.physAddr = -1;"
    },
    {
        "line": 72,
        "fullcodeline": "cfg.pageAddr = 0;"
    },
    {
        "line": 73,
        "fullcodeline": "cfg.action = MPI_CONFIG_ACTION_PAGE_HEADER;"
    },
    {
        "line": 74,
        "fullcodeline": "cfg.dir = 0;\t/* read */"
    },
    {
        "line": 75,
        "fullcodeline": "cfg.timeout = 10;"
    },
    {
        "line": 77,
        "fullcodeline": "strncpy(karg.serial_number, \" \", 24);"
    },
    {
        "line": 98,
        "fullcodeline": "rc = mpt_GetIocState(ioc, 1);"
    },
    {
        "line": 115,
        "fullcodeline": "karg.base_io_addr = pci_resource_start(pdev, 0);"
    },
    {
        "line": 122,
        "fullcodeline": "karg.hard_resets = 0;"
    },
    {
        "line": 123,
        "fullcodeline": "karg.soft_resets = 0;"
    },
    {
        "line": 124,
        "fullcodeline": "karg.timeouts = 0;"
    },
    {
        "line": 144,
        "fullcodeline": "IstwiRWRequest = (ToolboxIstwiReadWriteRequest_t *)mf;"
    },
    {
        "line": 145,
        "fullcodeline": "msgcontext = IstwiRWRequest->MsgContext;"
    },
    {
        "line": 146,
        "fullcodeline": "memset(IstwiRWRequest,0,sizeof(ToolboxIstwiReadWriteRequest_t));"
    },
    {
        "line": 147,
        "fullcodeline": "IstwiRWRequest->MsgContext = msgcontext;"
    },
    {
        "line": 148,
        "fullcodeline": "IstwiRWRequest->Function = MPI_FUNCTION_TOOLBOX;"
    },
    {
        "line": 149,
        "fullcodeline": "IstwiRWRequest->Tool = MPI_TOOLBOX_ISTWI_READ_WRITE_TOOL;"
    },
    {
        "line": 150,
        "fullcodeline": "IstwiRWRequest->Flags = MPI_TB_ISTWI_FLAGS_READ;"
    },
    {
        "line": 151,
        "fullcodeline": "IstwiRWRequest->NumAddressBytes = 0x01;"
    },
    {
        "line": 152,
        "fullcodeline": "IstwiRWRequest->DataLength = cpu_to_le16(0x04);"
    },
    {
        "line": 158,
        "fullcodeline": "pbuf = pci_alloc_consistent(ioc->pcidev, 4, &buf_dma);"
    },
    {
        "line": 161,
        "fullcodeline": "ioc->add_sge((char *)&IstwiRWRequest->SGL,"
    },
    {
        "line": 164,
        "fullcodeline": "retval = 0;"
    },
    {
        "line": 165,
        "fullcodeline": "SET_MGMT_MSG_CONTEXT(ioc->ioctl_cmds.msg_context,"
    },
    {
        "line": 168,
        "fullcodeline": "mpt_put_msg_frame(mptctl_id, ioc, mf);"
    },
    {
        "line": 171,
        "fullcodeline": "timeleft = wait_for_completion_timeout(&ioc->ioctl_cmds.done,"
    },
    {
        "line": 203,
        "fullcodeline": "CLEAR_MGMT_STATUS(ioc->ioctl_cmds.status)"
    },
    {
        "line": 204,
        "fullcodeline": "SET_MGMT_MSG_CONTEXT(ioc->ioctl_cmds.msg_context, 0);"
    },
    {
        "line": 19,
        "fullcodeline": "if (data_size == sizeof(hp_host_info_t))"
    },
    {
        "line": 26,
        "fullcodeline": "if (copy_from_user(&karg, uarg, sizeof(hp_host_info_t))) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (ioc->sh != NULL)"
    },
    {
        "line": 78,
        "fullcodeline": "if (mpt_config(ioc, &cfg) == 0) {"
    },
    {
        "line": 117,
        "fullcodeline": "if ((ioc->bus_type == SAS) || (ioc->bus_type == FC))"
    },
    {
        "line": 125,
        "fullcodeline": "if (ioc->sh != NULL) {"
    },
    {
        "line": 138,
        "fullcodeline": "if ((mf = mpt_get_msg_frame(mptctl_id, ioc)) == NULL) {"
    },
    {
        "line": 153,
        "fullcodeline": "if (pdev->devfn & 1)"
    },
    {
        "line": 159,
        "fullcodeline": "if (!pbuf)"
    },
    {
        "line": 162,
        "fullcodeline": "(MPT_SGE_FLAGS_SSIMPLE_READ|4), buf_dma);"
    },
    {
        "line": 173,
        "fullcodeline": "if (!(ioc->ioctl_cmds.status & MPT_MGMT_STATUS_COMMAND_GOOD)) {"
    },
    {
        "line": 199,
        "fullcodeline": "if (ioc->ioctl_cmds.status & MPT_MGMT_STATUS_RF_VALID)"
    },
    {
        "line": 20,
        "fullcodeline": "cim_rev = 1;"
    },
    {
        "line": 101,
        "fullcodeline": "karg.ioc_status =  HP_STATUS_OK;"
    },
    {
        "line": 105,
        "fullcodeline": "karg.ioc_status =  HP_STATUS_FAILED;"
    },
    {
        "line": 111,
        "fullcodeline": "karg.ioc_status =  HP_STATUS_OTHER;"
    },
    {
        "line": 118,
        "fullcodeline": "karg.bus_phys_width = HP_BUS_WIDTH_UNK;"
    },
    {
        "line": 126,
        "fullcodeline": "MPT_SCSI_HOST *hd =  shost_priv(ioc->sh);"
    },
    {
        "line": 154,
        "fullcodeline": "IstwiRWRequest->DeviceAddr = 0xB2;"
    },
    {
        "line": 172,
        "fullcodeline": "HZ*MPT_IOCTL_DEFAULT_TIMEOUT);"
    },
    {
        "line": 174,
        "fullcodeline": "retval = -ETIME;"
    },
    {
        "line": 207,
        "fullcodeline": "pci_free_consistent(ioc->pcidev, 4, pbuf, buf_dma);"
    },
    {
        "line": 30,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 54,
        "fullcodeline": "karg.host_no =  -1;"
    },
    {
        "line": 79,
        "fullcodeline": "if (cfg.cfghdr.hdr->PageLength > 0) {"
    },
    {
        "line": 120,
        "fullcodeline": "karg.bus_phys_width = HP_BUS_WIDTH_16;"
    },
    {
        "line": 128,
        "fullcodeline": "if (hd && (cim_rev == 1)) {"
    },
    {
        "line": 156,
        "fullcodeline": "IstwiRWRequest->DeviceAddr = 0xB0;"
    },
    {
        "line": 176,
        "fullcodeline": "if (ioc->ioctl_cmds.status & MPT_MGMT_STATUS_DID_IOCRESET) {"
    },
    {
        "line": 180,
        "fullcodeline": "if (!timeleft) {"
    },
    {
        "line": 215,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 21,
        "fullcodeline": "else if (data_size == sizeof(hp_host_info_rev0_t))"
    },
    {
        "line": 81,
        "fullcodeline": "cfg.action = MPI_CONFIG_ACTION_PAGE_READ_CURRENT;"
    },
    {
        "line": 83,
        "fullcodeline": "pbuf = pci_alloc_consistent(ioc->pcidev, hdr.PageLength * 4, &buf_dma);"
    },
    {
        "line": 129,
        "fullcodeline": "karg.hard_resets = ioc->hard_resets;"
    },
    {
        "line": 130,
        "fullcodeline": "karg.soft_resets = ioc->soft_resets;"
    },
    {
        "line": 131,
        "fullcodeline": "karg.timeouts = ioc->timeouts;"
    },
    {
        "line": 177,
        "fullcodeline": "mpt_free_msg_frame(ioc, mf);"
    },
    {
        "line": 184,
        "fullcodeline": "mptctl_timeout_expired(ioc, mf);"
    },
    {
        "line": 200,
        "fullcodeline": "karg.rsvd = *(u32 *)pbuf;"
    },
    {
        "line": 22,
        "fullcodeline": "cim_rev = 0;\t/* obsolete */"
    },
    {
        "line": 85,
        "fullcodeline": "cfg.physAddr = buf_dma;"
    },
    {
        "line": 93,
        "fullcodeline": "pci_free_consistent(ioc->pcidev, hdr.PageLength * 4, pbuf, buf_dma);"
    },
    {
        "line": 94,
        "fullcodeline": "pbuf = NULL;"
    },
    {
        "line": 24,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 86,
        "fullcodeline": "if (mpt_config(ioc, &cfg) == 0) {"
    },
    {
        "line": 87,
        "fullcodeline": "ManufacturingPage0_t *pdata = (ManufacturingPage0_t *) pbuf;"
    },
    {
        "line": 88,
        "fullcodeline": "if (strlen(pdata->BoardTracerNumber) > 1) {"
    },
    {
        "line": 89,
        "fullcodeline": "strlcpy(karg.serial_number,"
    }
]