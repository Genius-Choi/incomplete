[
    {
        "line": 8,
        "fullcodeline": "int fd = xopen(\"/dev/null\", O_RDWR);"
    },
    {
        "line": 36,
        "fullcodeline": "logmode = LOGMODE_JOURNAL;"
    },
    {
        "line": 39,
        "fullcodeline": "load_abrt_conf();"
    },
    {
        "line": 57,
        "fullcodeline": "errno = 0;"
    },
    {
        "line": 58,
        "fullcodeline": "const char* signal_str = argv[1];"
    },
    {
        "line": 59,
        "fullcodeline": "int signal_no = xatoi_positive(signal_str);"
    },
    {
        "line": 60,
        "fullcodeline": "off_t ulimit_c = strtoull(argv[2], NULL, 10);"
    },
    {
        "line": 66,
        "fullcodeline": "const char *pid_str = argv[3];"
    },
    {
        "line": 67,
        "fullcodeline": "pid_t pid = xatoi_positive(argv[3]);"
    },
    {
        "line": 68,
        "fullcodeline": "uid_t uid = xatoi_positive(argv[4]);"
    },
    {
        "line": 90,
        "fullcodeline": "char path[PATH_MAX];"
    },
    {
        "line": 92,
        "fullcodeline": "int src_fd_binary = -1;"
    },
    {
        "line": 93,
        "fullcodeline": "char *executable = get_executable(pid, setting_SaveBinaryImage ? &src_fd_binary : NULL);"
    },
    {
        "line": 100,
        "fullcodeline": "user_pwd = get_cwd(pid);"
    },
    {
        "line": 101,
        "fullcodeline": "log_notice(\"user_pwd:'%s'\", user_pwd);"
    },
    {
        "line": 103,
        "fullcodeline": "sprintf(path, \"/proc/%lu/status\", (long)pid);"
    },
    {
        "line": 104,
        "fullcodeline": "proc_pid_status = xmalloc_xopen_read_close(path, /*maxsz:*/ NULL);"
    },
    {
        "line": 106,
        "fullcodeline": "uid_t fsuid = uid;"
    },
    {
        "line": 107,
        "fullcodeline": "uid_t tmp_fsuid = get_fsuid();"
    },
    {
        "line": 108,
        "fullcodeline": "int suid_policy = dump_suid_policy();"
    },
    {
        "line": 134,
        "fullcodeline": "const char *signame = NULL;"
    },
    {
        "line": 173,
        "fullcodeline": "snprintf(path, sizeof(path), \"%s/last-ccpp\", g_settings_dump_location);"
    },
    {
        "line": 180,
        "fullcodeline": "const char *last_slash = strrchr(executable, '/');"
    },
    {
        "line": 206,
        "fullcodeline": "unsigned path_len = snprintf(path, sizeof(path), \"%s/ccpp-%s-%lu.new\","
    },
    {
        "line": 220,
        "fullcodeline": "dd = dd_create_skeleton(path, fsuid, DEFAULT_DUMP_DIR_MODE, /*no flags*/0);"
    },
    {
        "line": 9,
        "fullcodeline": "while (fd < 2)"
    },
    {
        "line": 10,
        "fullcodeline": "fd = xdup(fd);"
    },
    {
        "line": 11,
        "fullcodeline": "if (fd > 2)"
    },
    {
        "line": 14,
        "fullcodeline": "if (argc < 8)"
    },
    {
        "line": 27,
        "fullcodeline": "if (strchr(argv[1], ' '))"
    },
    {
        "line": 44,
        "fullcodeline": "map_string_t *settings = new_map_string();"
    },
    {
        "line": 45,
        "fullcodeline": "load_abrt_plugin_conf_file(\"CCpp.conf\", settings);"
    },
    {
        "line": 47,
        "fullcodeline": "value = get_map_string_item_or_NULL(settings, \"MakeCompatCore\");"
    },
    {
        "line": 48,
        "fullcodeline": "setting_MakeCompatCore = value && string_to_bool(value);"
    },
    {
        "line": 49,
        "fullcodeline": "value = get_map_string_item_or_NULL(settings, \"SaveBinaryImage\");"
    },
    {
        "line": 50,
        "fullcodeline": "setting_SaveBinaryImage = value && string_to_bool(value);"
    },
    {
        "line": 51,
        "fullcodeline": "value = get_map_string_item_or_NULL(settings, \"VerboseLog\");"
    },
    {
        "line": 54,
        "fullcodeline": "free_map_string(settings);"
    },
    {
        "line": 61,
        "fullcodeline": "if (ulimit_c < 0) /* unlimited? */"
    },
    {
        "line": 69,
        "fullcodeline": "if (errno || pid <= 0)"
    },
    {
        "line": 84,
        "fullcodeline": "if (!argv[8]) /* no HOSTNAME? */"
    },
    {
        "line": 94,
        "fullcodeline": "if (executable && strstr(executable, \"/abrt-hook-ccpp\"))"
    },
    {
        "line": 109,
        "fullcodeline": "if (tmp_fsuid != uid)"
    },
    {
        "line": 123,
        "fullcodeline": "if (setting_MakeCompatCore && ulimit_c != 0)"
    },
    {
        "line": 127,
        "fullcodeline": "if (executable == NULL)"
    },
    {
        "line": 153,
        "fullcodeline": "if (!daemon_is_ok())"
    },
    {
        "line": 163,
        "fullcodeline": "if (g_settings_nMaxCrashReportsSize > 0)"
    },
    {
        "line": 174,
        "fullcodeline": "if (check_recent_crash_file(path, executable))"
    },
    {
        "line": 181,
        "fullcodeline": "if (last_slash && strncmp(++last_slash, \"abrt\", 4) == 0)"
    },
    {
        "line": 413,
        "fullcodeline": "if (user_core_fd >= 0)"
    },
    {
        "line": 435,
        "fullcodeline": "if (proc_cwd != NULL)"
    },
    {
        "line": 12,
        "fullcodeline": "close(fd);"
    },
    {
        "line": 18,
        "fullcodeline": "error_msg_and_die(\"Usage: %s SIGNO CORE_SIZE_LIMIT PID UID GID TIME BINARY_NAME [HOSTNAME]\", argv[0]);"
    },
    {
        "line": 64,
        "fullcodeline": "ulimit_c = ~((off_t)1 << (sizeof(off_t)*8-1));"
    },
    {
        "line": 71,
        "fullcodeline": "perror_msg_and_die(\"PID '%s' or limit '%s' is bogus\", argv[3], argv[2]);"
    },
    {
        "line": 77,
        "fullcodeline": "if (s && s[0] != '|')"
    },
    {
        "line": 86,
        "fullcodeline": "uname(&uts);"
    },
    {
        "line": 87,
        "fullcodeline": "argv[8] = uts.nodename;"
    },
    {
        "line": 96,
        "fullcodeline": "error_msg_and_die(\"PID %lu is '%s', not dumping it to avoid recursion\","
    },
    {
        "line": 112,
        "fullcodeline": "fsuid = 0;"
    },
    {
        "line": 125,
        "fullcodeline": "user_core_fd = open_user_core(uid, fsuid, pid, &argv[1]);"
    },
    {
        "line": 130,
        "fullcodeline": "error_msg(\"Can't read /proc/%lu/exe link\", (long)pid);"
    },
    {
        "line": 137,
        "fullcodeline": "case SIGILL : signame = \"ILL\" ; break;"
    },
    {
        "line": 138,
        "fullcodeline": "case SIGFPE : signame = \"FPE\" ; break;"
    },
    {
        "line": 139,
        "fullcodeline": "case SIGSEGV: signame = \"SEGV\"; break;"
    },
    {
        "line": 140,
        "fullcodeline": "case SIGBUS : signame = \"BUS\" ; break; //Bus error (bad memory access)"
    },
    {
        "line": 141,
        "fullcodeline": "case SIGABRT: signame = \"ABRT\"; break; //usually when abort() was called"
    },
    {
        "line": 144,
        "fullcodeline": "case SIGTRAP: signame = \"TRAP\"; break; //Trace/breakpoint trap"
    },
    {
        "line": 156,
        "fullcodeline": "log(\"abrtd is not running. If it crashed, \""
    },
    {
        "line": 191,
        "fullcodeline": "int abrt_core_fd = xopen3(path, O_WRONLY | O_CREAT | O_TRUNC, 0600);"
    },
    {
        "line": 192,
        "fullcodeline": "off_t core_size = copyfd_eof(STDIN_FILENO, abrt_core_fd, COPYFD_SPARSE);"
    },
    {
        "line": 200,
        "fullcodeline": "log(\"Saved core dump of pid %lu (%s) to %s (%llu bytes)\", (long)pid, executable, path, (long long)core_size);"
    },
    {
        "line": 207,
        "fullcodeline": "g_settings_dump_location, iso_date_string(NULL), (long)pid);"
    },
    {
        "line": 223,
        "fullcodeline": "char *rootdir = get_rootdir(pid);"
    },
    {
        "line": 225,
        "fullcodeline": "dd_create_basic_files(dd, fsuid, NULL);"
    },
    {
        "line": 227,
        "fullcodeline": "char source_filename[sizeof(\"/proc/%lu/somewhat_long_name\") + sizeof(long)*3];"
    },
    {
        "line": 228,
        "fullcodeline": "int source_base_ofs = sprintf(source_filename, \"/proc/%lu/smaps\", (long)pid);"
    },
    {
        "line": 229,
        "fullcodeline": "source_base_ofs -= strlen(\"smaps\");"
    },
    {
        "line": 230,
        "fullcodeline": "char *dest_filename = concat_path_file(dd->dd_dirname, \"also_somewhat_longish_name\");"
    },
    {
        "line": 231,
        "fullcodeline": "char *dest_base = strrchr(dest_filename, '/') + 1;"
    },
    {
        "line": 237,
        "fullcodeline": "strcpy(source_filename + source_base_ofs, \"maps\");"
    },
    {
        "line": 238,
        "fullcodeline": "strcpy(dest_base, FILENAME_MAPS);"
    },
    {
        "line": 239,
        "fullcodeline": "copy_file_ext(source_filename, dest_filename, 0640, dd->dd_uid, dd->dd_gid, O_RDONLY, O_WRONLY | O_CREAT | O_TRUNC | O_EXCL);"
    },
    {
        "line": 241,
        "fullcodeline": "strcpy(source_filename + source_base_ofs, \"limits\");"
    },
    {
        "line": 242,
        "fullcodeline": "strcpy(dest_base, FILENAME_LIMITS);"
    },
    {
        "line": 243,
        "fullcodeline": "copy_file_ext(source_filename, dest_filename, 0640, dd->dd_uid, dd->dd_gid, O_RDONLY, O_WRONLY | O_CREAT | O_TRUNC | O_EXCL);"
    },
    {
        "line": 245,
        "fullcodeline": "strcpy(source_filename + source_base_ofs, \"cgroup\");"
    },
    {
        "line": 246,
        "fullcodeline": "strcpy(dest_base, FILENAME_CGROUP);"
    },
    {
        "line": 247,
        "fullcodeline": "copy_file_ext(source_filename, dest_filename, 0640, dd->dd_uid, dd->dd_gid, O_RDONLY, O_WRONLY | O_CREAT | O_TRUNC | O_EXCL);"
    },
    {
        "line": 249,
        "fullcodeline": "strcpy(dest_base, FILENAME_OPEN_FDS);"
    },
    {
        "line": 250,
        "fullcodeline": "dump_fd_info(dest_filename, source_filename, source_base_ofs, dd->dd_uid, dd->dd_gid);"
    },
    {
        "line": 252,
        "fullcodeline": "free(dest_filename);"
    },
    {
        "line": 254,
        "fullcodeline": "dd_save_text(dd, FILENAME_ANALYZER, \"CCpp\");"
    },
    {
        "line": 255,
        "fullcodeline": "dd_save_text(dd, FILENAME_TYPE, \"CCpp\");"
    },
    {
        "line": 256,
        "fullcodeline": "dd_save_text(dd, FILENAME_EXECUTABLE, executable);"
    },
    {
        "line": 257,
        "fullcodeline": "dd_save_text(dd, FILENAME_PID, pid_str);"
    },
    {
        "line": 258,
        "fullcodeline": "dd_save_text(dd, FILENAME_PROC_PID_STATUS, proc_pid_status);"
    },
    {
        "line": 267,
        "fullcodeline": "char *reason = xasprintf(\"%s killed by SIG%s\","
    },
    {
        "line": 269,
        "fullcodeline": "dd_save_text(dd, FILENAME_REASON, reason);"
    },
    {
        "line": 270,
        "fullcodeline": "free(reason);"
    },
    {
        "line": 272,
        "fullcodeline": "char *cmdline = get_cmdline(pid);"
    },
    {
        "line": 273,
        "fullcodeline": "dd_save_text(dd, FILENAME_CMDLINE, cmdline ? : \"\");"
    },
    {
        "line": 274,
        "fullcodeline": "free(cmdline);"
    },
    {
        "line": 276,
        "fullcodeline": "char *environ = get_environ(pid);"
    },
    {
        "line": 277,
        "fullcodeline": "dd_save_text(dd, FILENAME_ENVIRON, environ ? : \"\");"
    },
    {
        "line": 278,
        "fullcodeline": "free(environ);"
    },
    {
        "line": 280,
        "fullcodeline": "char *fips_enabled = xmalloc_fopen_fgetline_fclose(\"/proc/sys/crypto/fips_enabled\");"
    },
    {
        "line": 288,
        "fullcodeline": "dd_save_text(dd, FILENAME_ABRT_VERSION, VERSION);"
    },
    {
        "line": 304,
        "fullcodeline": "int abrt_core_fd = create_or_die(path);"
    },
    {
        "line": 316,
        "fullcodeline": "off_t core_size = copyfd_sparse(STDIN_FILENO, abrt_core_fd, user_core_fd, ulimit_c);"
    },
    {
        "line": 375,
        "fullcodeline": "dd_reset_ownership(dd);"
    },
    {
        "line": 383,
        "fullcodeline": "dd_close(dd);"
    },
    {
        "line": 384,
        "fullcodeline": "path[path_len] = '\\0'; /* path now contains only directory name */"
    },
    {
        "line": 385,
        "fullcodeline": "char *newpath = xstrndup(path, path_len - (sizeof(\".new\")-1));"
    },
    {
        "line": 388,
        "fullcodeline": "free(newpath);"
    },
    {
        "line": 390,
        "fullcodeline": "log(\"Saved core dump of pid %lu (%s) to %s (%llu bytes)\", (long)pid, executable, path, (long long)core_size);"
    },
    {
        "line": 392,
        "fullcodeline": "notify_new_path(path);"
    },
    {
        "line": 405,
        "fullcodeline": "free(rootdir);"
    },
    {
        "line": 415,
        "fullcodeline": "off_t core_size = copyfd_size(STDIN_FILENO, user_core_fd, ulimit_c, COPYFD_SPARSE);"
    },
    {
        "line": 432,
        "fullcodeline": "log(\"Saved core dump of pid %lu to %s at %s (%llu bytes)\", (long)pid, core_basename, user_pwd, (long long)core_size);"
    },
    {
        "line": 436,
        "fullcodeline": "closedir(proc_cwd);"
    },
    {
        "line": 30,
        "fullcodeline": "for (i = 1; argv[i]; i++)"
    },
    {
        "line": 53,
        "fullcodeline": "g_verbose = xatoi_positive(value);"
    },
    {
        "line": 78,
        "fullcodeline": "core_basename = s;"
    },
    {
        "line": 97,
        "fullcodeline": "(long)pid, executable);"
    },
    {
        "line": 113,
        "fullcodeline": "if (suid_policy == DUMP_SUID_UNSAFE)"
    },
    {
        "line": 166,
        "fullcodeline": "if (low_free_space(g_settings_nMaxCrashReportsSize, g_settings_dump_location))"
    },
    {
        "line": 188,
        "fullcodeline": "if (snprintf(path, sizeof(path), \"%s/%s-coredump\", g_settings_dump_location, last_slash) >= sizeof(path))"
    },
    {
        "line": 193,
        "fullcodeline": "if (core_size < 0 || fsync(abrt_core_fd) != 0)"
    },
    {
        "line": 201,
        "fullcodeline": "if (proc_cwd != NULL)"
    },
    {
        "line": 290,
        "fullcodeline": "if (src_fd_binary > 0)"
    },
    {
        "line": 317,
        "fullcodeline": "if (fsync(abrt_core_fd) != 0 || close(abrt_core_fd) != 0 || core_size < 0)"
    },
    {
        "line": 327,
        "fullcodeline": "if (user_core_fd >= 0"
    },
    {
        "line": 386,
        "fullcodeline": "if (rename(path, newpath) == 0)"
    },
    {
        "line": 395,
        "fullcodeline": "if (g_settings_nMaxCrashReportsSize > 0)"
    },
    {
        "line": 406,
        "fullcodeline": "if (proc_cwd != NULL)"
    },
    {
        "line": 416,
        "fullcodeline": "if (fsync(user_core_fd) != 0 || close(user_core_fd) != 0 || core_size < 0)"
    },
    {
        "line": 425,
        "fullcodeline": "if (ulimit_c == 0 || core_size > ulimit_c)"
    },
    {
        "line": 32,
        "fullcodeline": "strchrnul(argv[i], ' ')[0] = '\\0';"
    },
    {
        "line": 80,
        "fullcodeline": "free(s);"
    },
    {
        "line": 114,
        "fullcodeline": "fsuid = tmp_fsuid;"
    },
    {
        "line": 189,
        "fullcodeline": "error_msg_and_die(\"Error saving '%s': truncated long file path\", path);"
    },
    {
        "line": 195,
        "fullcodeline": "unlink(path);"
    },
    {
        "line": 198,
        "fullcodeline": "error_msg_and_die(\"Error saving '%s'\", path);"
    },
    {
        "line": 202,
        "fullcodeline": "closedir(proc_cwd);"
    },
    {
        "line": 260,
        "fullcodeline": "dd_save_text(dd, FILENAME_PWD, user_pwd);"
    },
    {
        "line": 268,
        "fullcodeline": "last_slash, signame ? signame : signal_str);"
    },
    {
        "line": 285,
        "fullcodeline": "free(fips_enabled);"
    },
    {
        "line": 293,
        "fullcodeline": "int dst_fd = create_or_die(path);"
    },
    {
        "line": 294,
        "fullcodeline": "off_t sz = copyfd_eof(src_fd_binary, dst_fd, COPYFD_SPARSE);"
    },
    {
        "line": 300,
        "fullcodeline": "close(src_fd_binary);"
    },
    {
        "line": 319,
        "fullcodeline": "unlink(path);"
    },
    {
        "line": 320,
        "fullcodeline": "dd_delete(dd);"
    },
    {
        "line": 325,
        "fullcodeline": "error_msg_and_die(\"Error writing '%s'\", path);"
    },
    {
        "line": 329,
        "fullcodeline": "&& (fsync(user_core_fd) != 0 || close(user_core_fd) != 0"
    },
    {
        "line": 335,
        "fullcodeline": "unlinkat(dirfd(proc_cwd), core_basename, /*unlink file*/0);"
    },
    {
        "line": 387,
        "fullcodeline": "strcpy(path, newpath);"
    },
    {
        "line": 400,
        "fullcodeline": "unsigned maxsize = g_settings_nMaxCrashReportsSize + g_settings_nMaxCrashReportsSize / 4;"
    },
    {
        "line": 401,
        "fullcodeline": "maxsize |= 63;"
    },
    {
        "line": 402,
        "fullcodeline": "trim_problem_dirs(g_settings_dump_location, maxsize * (double)(1024*1024), path);"
    },
    {
        "line": 407,
        "fullcodeline": "closedir(proc_cwd);"
    },
    {
        "line": 419,
        "fullcodeline": "perror_msg(\"Error writing '%s' at '%s'\", core_basename, user_pwd);"
    },
    {
        "line": 420,
        "fullcodeline": "unlinkat(dirfd(proc_cwd), core_basename, /*unlink file*/0);"
    },
    {
        "line": 427,
        "fullcodeline": "unlinkat(dirfd(proc_cwd), core_basename, /*unlink file*/0);"
    },
    {
        "line": 117,
        "fullcodeline": "g_user_core_flags = O_EXCL;"
    },
    {
        "line": 118,
        "fullcodeline": "g_need_nonrelative = 1;"
    },
    {
        "line": 263,
        "fullcodeline": "if (strcmp(rootdir, \"/\") != 0)"
    },
    {
        "line": 283,
        "fullcodeline": "if (strcmp(fips_enabled, \"0\") != 0)"
    },
    {
        "line": 295,
        "fullcodeline": "if (fsync(dst_fd) != 0 || close(dst_fd) != 0 || sz < 0)"
    },
    {
        "line": 321,
        "fullcodeline": "if (user_core_fd >= 0)"
    },
    {
        "line": 331,
        "fullcodeline": "|| (ulimit_c == 0 /* paranoia */ || core_size > ulimit_c)"
    },
    {
        "line": 421,
        "fullcodeline": "if (proc_cwd != NULL)"
    },
    {
        "line": 428,
        "fullcodeline": "if (proc_cwd != NULL)"
    },
    {
        "line": 264,
        "fullcodeline": "dd_save_text(dd, FILENAME_ROOTDIR, rootdir);"
    },
    {
        "line": 284,
        "fullcodeline": "dd_save_text(dd, \"fips_enabled\", fips_enabled);"
    },
    {
        "line": 297,
        "fullcodeline": "dd_delete(dd);"
    },
    {
        "line": 298,
        "fullcodeline": "error_msg_and_die(\"Error saving '%s'\", path);"
    },
    {
        "line": 322,
        "fullcodeline": "unlinkat(dirfd(proc_cwd), core_basename, /*unlink file*/0);"
    },
    {
        "line": 422,
        "fullcodeline": "closedir(proc_cwd);"
    },
    {
        "line": 429,
        "fullcodeline": "closedir(proc_cwd);"
    }
]