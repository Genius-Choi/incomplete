[
    {
        "line": 7,
        "fullcodeline": "std_filesystem::path path_prefix{ \"/tmp\" };"
    },
    {
        "line": 9,
        "fullcodeline": "std_filesystem::path path_kheaders{ \"/sys/kernel/kheaders.tar.xz\" };"
    },
    {
        "line": 13,
        "fullcodeline": "path_prefix /= \"kheaders-\";"
    },
    {
        "line": 14,
        "fullcodeline": "std_filesystem::path shared_path{ path_prefix.string() + utsname.release };"
    },
    {
        "line": 35,
        "fullcodeline": "KernelHeaderTmpDir tmpdir{ path_prefix };"
    },
    {
        "line": 37,
        "fullcodeline": "FILE *tar = ::popen("
    },
    {
        "line": 43,
        "fullcodeline": "int rc = ::pclose(tar);"
    },
    {
        "line": 16,
        "fullcodeline": "if (std_filesystem::exists(shared_path, ec)) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (!tar) {"
    },
    {
        "line": 10,
        "fullcodeline": "if (const char *tmpdir = ::getenv(\"TMPDIR\")) {"
    },
    {
        "line": 11,
        "fullcodeline": "path_prefix = tmpdir;"
    },
    {
        "line": 21,
        "fullcodeline": "if (!std_filesystem::exists(path_kheaders, ec)) {"
    },
    {
        "line": 25,
        "fullcodeline": "FILE *modprobe = ::popen(\"modprobe kheaders\", \"w\");"
    },
    {
        "line": 38,
        "fullcodeline": "(\"tar xf /sys/kernel/kheaders.tar.xz -C \" + tmpdir.path).c_str(), \"w\");"
    },
    {
        "line": 45,
        "fullcodeline": "tmpdir.move_to(shared_path);"
    },
    {
        "line": 18,
        "fullcodeline": "return shared_path.string();"
    },
    {
        "line": 26,
        "fullcodeline": "if (modprobe == nullptr || pclose(modprobe) != 0) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (!std_filesystem::exists(path_kheaders, ec)) {"
    }
]