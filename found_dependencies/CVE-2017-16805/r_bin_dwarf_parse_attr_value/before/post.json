[
    {
        "line": 5,
        "fullcodeline": "const ut8 *buf = obuf;"
    },
    {
        "line": 6,
        "fullcodeline": "const ut8 *buf_end = obuf + obuf_len;"
    },
    {
        "line": 13,
        "fullcodeline": "value->form = spec->attr_form;"
    },
    {
        "line": 14,
        "fullcodeline": "value->name = spec->attr_name;"
    },
    {
        "line": 15,
        "fullcodeline": "value->encoding.block.data = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "value->encoding.str_struct.string = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "value->encoding.str_struct.offset = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "if (!spec || !value || !hdr || !obuf || obuf_len < 0) {"
    },
    {
        "line": 40,
        "fullcodeline": "value->encoding.block.length = READ (buf, ut16);"
    },
    {
        "line": 49,
        "fullcodeline": "value->encoding.block.length = READ (buf, ut32);"
    },
    {
        "line": 61,
        "fullcodeline": "value->encoding.data = READ (buf, ut16);"
    },
    {
        "line": 64,
        "fullcodeline": "value->encoding.data = READ (buf, ut32);"
    },
    {
        "line": 67,
        "fullcodeline": "value->encoding.data = READ (buf, ut64);"
    },
    {
        "line": 70,
        "fullcodeline": "value->encoding.str_struct.string = *buf? strdup ((const char*)buf) : NULL;"
    },
    {
        "line": 71,
        "fullcodeline": "buf += (strlen ((const char*)buf) + 1);"
    },
    {
        "line": 74,
        "fullcodeline": "buf = r_uleb128 (buf, buf_end - buf, &value->encoding.block.length);"
    },
    {
        "line": 78,
        "fullcodeline": "value->encoding.block.data = calloc (sizeof(ut8), value->encoding.block.length);"
    },
    {
        "line": 84,
        "fullcodeline": "value->encoding.block.length = READ (buf, ut8);"
    },
    {
        "line": 85,
        "fullcodeline": "value->encoding.block.data = calloc (sizeof (ut8), value->encoding.block.length + 1);"
    },
    {
        "line": 91,
        "fullcodeline": "value->encoding.flag = READ (buf, ut8);"
    },
    {
        "line": 94,
        "fullcodeline": "buf = r_leb128 (buf, &value->encoding.sdata);"
    },
    {
        "line": 97,
        "fullcodeline": "value->encoding.str_struct.offset = READ (buf, ut32);"
    },
    {
        "line": 116,
        "fullcodeline": "value->encoding.reference = READ (buf, ut64); // addr size of machine"
    },
    {
        "line": 119,
        "fullcodeline": "value->encoding.reference = READ (buf, ut8);"
    },
    {
        "line": 122,
        "fullcodeline": "value->encoding.reference = READ (buf, ut16);"
    },
    {
        "line": 125,
        "fullcodeline": "value->encoding.reference = READ (buf, ut32);"
    },
    {
        "line": 128,
        "fullcodeline": "value->encoding.reference = READ (buf, ut64);"
    },
    {
        "line": 131,
        "fullcodeline": "value->encoding.data = READ (buf, ut8);"
    },
    {
        "line": 135,
        "fullcodeline": "value->encoding.data = 0;"
    },
    {
        "line": 41,
        "fullcodeline": "if (value->encoding.block.length > 0) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (value->encoding.block.length > 0) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (!buf) {"
    },
    {
        "line": 79,
        "fullcodeline": "for (j = 0; j < value->encoding.block.length; j++) {"
    },
    {
        "line": 86,
        "fullcodeline": "for (j = 0; j < value->encoding.block.length; j++) {"
    },
    {
        "line": 98,
        "fullcodeline": "if (debug_str && value->encoding.str_struct.offset < debug_str_len) {"
    },
    {
        "line": 108,
        "fullcodeline": "ut64 ndata = 0;"
    },
    {
        "line": 109,
        "fullcodeline": "const ut8 *data = (const ut8*)&ndata;"
    },
    {
        "line": 110,
        "fullcodeline": "buf = r_uleb128 (buf, R_MIN (sizeof (data), (size_t)(buf_end - buf)), &ndata);"
    },
    {
        "line": 111,
        "fullcodeline": "memcpy (&value->encoding.data, data, sizeof (value->encoding.data));"
    },
    {
        "line": 112,
        "fullcodeline": "value->encoding.str_struct.string = NULL;"
    },
    {
        "line": 23,
        "fullcodeline": "value->encoding.address = READ (buf, ut8);"
    },
    {
        "line": 26,
        "fullcodeline": "value->encoding.address = READ (buf, ut16);"
    },
    {
        "line": 29,
        "fullcodeline": "value->encoding.address = READ (buf, ut32);"
    },
    {
        "line": 32,
        "fullcodeline": "value->encoding.address = READ (buf, ut64);"
    },
    {
        "line": 35,
        "fullcodeline": "eprintf(\"DWARF: Unexpected pointer size: %u\\n\", (unsigned)hdr->pointer_size);"
    },
    {
        "line": 42,
        "fullcodeline": "value->encoding.block.data = calloc (sizeof(ut8), value->encoding.block.length);"
    },
    {
        "line": 51,
        "fullcodeline": "ut8 *data = calloc (sizeof (ut8), value->encoding.block.length);"
    },
    {
        "line": 57,
        "fullcodeline": "value->encoding.block.data = data;"
    },
    {
        "line": 80,
        "fullcodeline": "value->encoding.block.data[j] = READ (buf, ut8);"
    },
    {
        "line": 87,
        "fullcodeline": "value->encoding.block.data[j] = READ (buf, ut8);"
    },
    {
        "line": 99,
        "fullcodeline": "value->encoding.str_struct.string = strdup ("
    },
    {
        "line": 43,
        "fullcodeline": "for (j = 0; j < value->encoding.block.length; j++) {"
    },
    {
        "line": 103,
        "fullcodeline": "value->encoding.str_struct.string = NULL;"
    },
    {
        "line": 44,
        "fullcodeline": "value->encoding.block.data[j] = READ (buf, ut8);"
    },
    {
        "line": 100,
        "fullcodeline": "(const char *)(debug_str +"
    },
    {
        "line": 53,
        "fullcodeline": "for (j = 0; j < value->encoding.block.length; j++) {"
    },
    {
        "line": 54,
        "fullcodeline": "data[j] = READ (buf, ut8);"
    }
]