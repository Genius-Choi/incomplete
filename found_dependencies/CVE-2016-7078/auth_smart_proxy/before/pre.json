[
    {
        "line": 2,
        "fullcodeline": "request_hosts = nil"
    },
    {
        "line": 45,
        "fullcodeline": "hosts = Hash[proxies.map { |p| [URI.parse(p.url).host, p] }]"
    },
    {
        "line": 46,
        "fullcodeline": "allowed_hosts = hosts.keys.push(*Setting[:trusted_puppetmaster_hosts])"
    },
    {
        "line": 1,
        "fullcodeline": "def auth_smart_proxy(proxies = SmartProxy.all, require_cert = true)"
    },
    {
        "line": 43,
        "fullcodeline": "return false unless request_hosts"
    },
    {
        "line": 47,
        "fullcodeline": "logger.debug { (\"Verifying request from #{request_hosts.inspect} against #{allowed_hosts.inspect}\") }"
    },
    {
        "line": 49,
        "fullcodeline": "if (host = detect_matching_host(allowed_hosts, request_hosts))"
    },
    {
        "line": 7,
        "fullcodeline": "if request.env.has_key?(Setting[:ssl_client_cert_env]) && request.env[Setting[:ssl_client_cert_env]].present?"
    },
    {
        "line": 16,
        "fullcodeline": "if (dn && dn =~ /CN=([^\\s\\/,]+)/i) || certificate"
    },
    {
        "line": 53,
        "fullcodeline": "logger.warn \"No smart proxy server found on #{request_hosts.inspect} and is not in trusted_puppetmaster_hosts\""
    },
    {
        "line": 8,
        "fullcodeline": "logger.debug \"Examining client certificate to extract dn and sans\""
    },
    {
        "line": 9,
        "fullcodeline": "cert_raw = request.env[Setting[:ssl_client_cert_env]]"
    },
    {
        "line": 10,
        "fullcodeline": "certificate = CertificateExtract.new(cert_raw)"
    },
    {
        "line": 11,
        "fullcodeline": "logger.debug \"Client sent certificate with subject '#{certificate.subject}' and subject alt names '#{certificate.subject_alternative_names.inspect}'\""
    },
    {
        "line": 13,
        "fullcodeline": "dn = request.env[Setting[:ssl_client_dn_env]]"
    },
    {
        "line": 17,
        "fullcodeline": "verify = request.env[Setting[:ssl_client_verify_env]]"
    },
    {
        "line": 39,
        "fullcodeline": "logger.warn \"SSL is required - request from #{request.ip}\""
    },
    {
        "line": 41,
        "fullcodeline": "request_hosts = Resolv.new.getnames(request.ip)"
    },
    {
        "line": 18,
        "fullcodeline": "if verify == 'SUCCESS'"
    },
    {
        "line": 20,
        "fullcodeline": "request_hosts = []"
    },
    {
        "line": 31,
        "fullcodeline": "logger.warn \"SSL cert has not been verified (#{verify}) - request from #{request.ip}, #{dn}\""
    },
    {
        "line": 34,
        "fullcodeline": "logger.warn \"No SSL cert with CN supplied - request from #{request.ip}, #{dn}\""
    },
    {
        "line": 36,
        "fullcodeline": "request_hosts = Resolv.new.getnames(request.ip)"
    },
    {
        "line": 22,
        "fullcodeline": "if certificate.subject_alternative_names.present?"
    },
    {
        "line": 23,
        "fullcodeline": "request_hosts += certificate.subject_alternative_names"
    },
    {
        "line": 28,
        "fullcodeline": "request_hosts << $1 if $1"
    },
    {
        "line": 25,
        "fullcodeline": "request_hosts << certificate.subject"
    }
]