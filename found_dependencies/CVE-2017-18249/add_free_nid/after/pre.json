[
    {
        "line": 3,
        "fullcodeline": "struct f2fs_nm_info *nm_i = NM_I(sbi);"
    },
    {
        "line": 6,
        "fullcodeline": "int err = -EINVAL;"
    },
    {
        "line": 7,
        "fullcodeline": "bool ret = false;"
    },
    {
        "line": 13,
        "fullcodeline": "i = f2fs_kmem_cache_alloc(free_nid_slab, GFP_NOFS);"
    },
    {
        "line": 14,
        "fullcodeline": "i->nid = nid;"
    },
    {
        "line": 15,
        "fullcodeline": "i->state = NID_NEW;"
    },
    {
        "line": 20,
        "fullcodeline": "spin_lock(&nm_i->nid_list_lock);"
    },
    {
        "line": 56,
        "fullcodeline": "ret = true;"
    },
    {
        "line": 10,
        "fullcodeline": "if (unlikely(nid == 0))"
    },
    {
        "line": 57,
        "fullcodeline": "err = __insert_nid_to_list(sbi, i, FREE_NID_LIST, true);"
    },
    {
        "line": 44,
        "fullcodeline": "ne = __lookup_nat_cache(nm_i, nid);"
    },
    {
        "line": 49,
        "fullcodeline": "e = __lookup_free_nid_list(nm_i, nid);"
    },
    {
        "line": 45,
        "fullcodeline": "if (ne && (!get_nat_flag(ne, IS_CHECKPOINTED) ||"
    },
    {
        "line": 46,
        "fullcodeline": "nat_get_blkaddr(ne) != NULL_ADDR))"
    },
    {
        "line": 52,
        "fullcodeline": "ret = true;"
    }
]