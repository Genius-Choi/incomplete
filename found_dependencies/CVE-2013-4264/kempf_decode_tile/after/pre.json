[
    {
        "line": 5,
        "fullcodeline": "int hdr, zsize, npal, tidx = -1, ret;"
    },
    {
        "line": 7,
        "fullcodeline": "const uint8_t *src_end = src + src_size;"
    },
    {
        "line": 8,
        "fullcodeline": "uint8_t pal[768], transp[3];"
    },
    {
        "line": 9,
        "fullcodeline": "uLongf dlen = (c->tile_width + 1) * c->tile_height;"
    },
    {
        "line": 13,
        "fullcodeline": "uint8_t *dst = c->framebuf + tile_x * c->tile_width * 3 +"
    },
    {
        "line": 19,
        "fullcodeline": "width  = FFMIN(c->width  - tile_x * c->tile_width,  c->tile_width);"
    },
    {
        "line": 20,
        "fullcodeline": "height = FFMIN(c->height - tile_y * c->tile_height, c->tile_height);"
    },
    {
        "line": 22,
        "fullcodeline": "hdr = *src++;"
    },
    {
        "line": 23,
        "fullcodeline": "sub_type = hdr >> 5;"
    },
    {
        "line": 41,
        "fullcodeline": "npal = *src++ + 1;"
    },
    {
        "line": 42,
        "fullcodeline": "memcpy(pal, src, npal * 3); src += npal * 3;"
    },
    {
        "line": 54,
        "fullcodeline": "zsize = (src[0] << 8) | src[1]; src += 2;"
    },
    {
        "line": 62,
        "fullcodeline": "src += zsize;"
    },
    {
        "line": 70,
        "fullcodeline": "nblocks = *src++ + 1;"
    },
    {
        "line": 71,
        "fullcodeline": "cblocks = 0;"
    },
    {
        "line": 72,
        "fullcodeline": "bstride = FFALIGN(width, 16) >> 4;"
    },
    {
        "line": 74,
        "fullcodeline": "bits = 0;"
    },
    {
        "line": 93,
        "fullcodeline": "memset(c->jpeg_tile, 0, c->tile_stride * height);"
    },
    {
        "line": 94,
        "fullcodeline": "jpg_decode_data(&c->jc, width, height, src, src_end - src,"
    },
    {
        "line": 16,
        "fullcodeline": "if (src_size < 2)"
    },
    {
        "line": 24,
        "fullcodeline": "if (sub_type == 0) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (sub_type != 2) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (sub_type != 2) {"
    },
    {
        "line": 59,
        "fullcodeline": "ret = uncompress(c->kempf_buf, &dlen, src, zsize);"
    },
    {
        "line": 75,
        "fullcodeline": "for (i = 0; i < (FFALIGN(height, 16) >> 4); i++) {"
    },
    {
        "line": 14,
        "fullcodeline": "tile_y * c->tile_height * c->framebuf_stride;"
    },
    {
        "line": 26,
        "fullcodeline": "memcpy(transp, src, 3);"
    },
    {
        "line": 38,
        "fullcodeline": "memcpy(transp, src, 3);"
    },
    {
        "line": 39,
        "fullcodeline": "src += 3;"
    },
    {
        "line": 52,
        "fullcodeline": "if (src_end - src < 2)"
    },
    {
        "line": 56,
        "fullcodeline": "if (src_end - src < zsize + (sub_type != 2))"
    },
    {
        "line": 28,
        "fullcodeline": "for (j = 0; j < height; j++, dst += c->framebuf_stride)"
    },
    {
        "line": 44,
        "fullcodeline": "for (i = 0; i < npal; i++) {"
    },
    {
        "line": 76,
        "fullcodeline": "for (j = 0; j < (FFALIGN(width, 16) >> 4); j++) {"
    },
    {
        "line": 29,
        "fullcodeline": "for (i = 0; i < width; i++)"
    },
    {
        "line": 32,
        "fullcodeline": "} else if (sub_type == 1) {"
    },
    {
        "line": 83,
        "fullcodeline": "coded = bitbuf & 1;"
    },
    {
        "line": 84,
        "fullcodeline": "bits--;"
    },
    {
        "line": 85,
        "fullcodeline": "bitbuf >>= 1;"
    },
    {
        "line": 86,
        "fullcodeline": "cblocks += coded;"
    },
    {
        "line": 89,
        "fullcodeline": "c->kempf_flags[j + i * bstride] = coded;"
    },
    {
        "line": 77,
        "fullcodeline": "if (!bits) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (cblocks > nblocks)"
    },
    {
        "line": 30,
        "fullcodeline": "memcpy(dst + i * 3, transp, 3);"
    },
    {
        "line": 33,
        "fullcodeline": "return jpg_decode_data(&c->jc, width, height, src, src_end - src,"
    },
    {
        "line": 45,
        "fullcodeline": "if (!memcmp(pal + i * 3, transp, 3)) {"
    },
    {
        "line": 46,
        "fullcodeline": "tidx = i;"
    },
    {
        "line": 80,
        "fullcodeline": "bitbuf = *src++;"
    },
    {
        "line": 81,
        "fullcodeline": "bits   = 8;"
    },
    {
        "line": 78,
        "fullcodeline": "if (src >= src_end)"
    }
]