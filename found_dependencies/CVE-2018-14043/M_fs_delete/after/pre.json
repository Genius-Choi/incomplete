[
    {
        "line": 8,
        "fullcodeline": "M_fs_progress_t        *progress            = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "M_fs_dir_walk_filter_t  filter              = M_FS_DIR_WALK_FILTER_ALL|M_FS_DIR_WALK_FILTER_RECURSE;"
    },
    {
        "line": 17,
        "fullcodeline": "M_uint64                total_size          = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "M_uint64                total_size_progress = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "res = M_fs_path_norm(&norm_path, path, M_FS_PATH_NORM_HOME, M_FS_SYSTEM_AUTO);"
    },
    {
        "line": 29,
        "fullcodeline": "res = M_fs_info(&info, norm_path, M_FS_PATH_INFO_FLAGS_BASIC);"
    },
    {
        "line": 36,
        "fullcodeline": "type = M_fs_info_get_type(info);"
    },
    {
        "line": 44,
        "fullcodeline": "entries = M_fs_dir_entries_create();"
    },
    {
        "line": 63,
        "fullcodeline": "M_fs_dir_entries_insert(entries, M_fs_dir_walk_fill_entry(norm_path, NULL, type, info, M_FS_DIR_WALK_FILTER_READ_INFO_BASIC));"
    },
    {
        "line": 65,
        "fullcodeline": "len = M_fs_dir_entries_len(entries);"
    },
    {
        "line": 88,
        "fullcodeline": "res = M_FS_ERROR_SUCCESS;"
    },
    {
        "line": 23,
        "fullcodeline": "if (res != M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (res != M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (type == M_FS_TYPE_UNKNOWN) {"
    },
    {
        "line": 90,
        "fullcodeline": "for (i=0; i<len; i++) {"
    },
    {
        "line": 24,
        "fullcodeline": "M_free(norm_path);"
    },
    {
        "line": 50,
        "fullcodeline": "if (type == M_FS_TYPE_DIR && remove_children) {"
    },
    {
        "line": 55,
        "fullcodeline": "M_fs_dir_entries_merge(&entries, M_fs_dir_walk_entries(norm_path, NULL, filter));"
    },
    {
        "line": 69,
        "fullcodeline": "progress = M_fs_progress_create();"
    },
    {
        "line": 91,
        "fullcodeline": "entry     = M_fs_dir_entries_at(entries, i);"
    },
    {
        "line": 92,
        "fullcodeline": "join_path = M_fs_path_join(norm_path, M_fs_dir_entry_get_name(entry), M_FS_SYSTEM_AUTO);"
    },
    {
        "line": 52,
        "fullcodeline": "if (cb && progress_flags & (M_FS_PROGRESS_SIZE_TOTAL|M_FS_PROGRESS_SIZE_CUR)) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (progress_flags & M_FS_PROGRESS_SIZE_TOTAL) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (progress_flags & M_FS_PROGRESS_COUNT) {"
    },
    {
        "line": 101,
        "fullcodeline": "if (res2 != M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 53,
        "fullcodeline": "filter |= M_FS_DIR_WALK_FILTER_READ_INFO_BASIC;"
    },
    {
        "line": 79,
        "fullcodeline": "M_fs_progress_set_size_total(progress, total_size);"
    },
    {
        "line": 83,
        "fullcodeline": "M_fs_progress_set_count_total(progress, len);"
    },
    {
        "line": 94,
        "fullcodeline": "if (M_fs_dir_entry_get_type(entry) == M_FS_TYPE_DIR) {"
    },
    {
        "line": 95,
        "fullcodeline": "res2 = M_fs_delete_dir(join_path);"
    },
    {
        "line": 102,
        "fullcodeline": "res = M_FS_ERROR_GENERIC;"
    },
    {
        "line": 106,
        "fullcodeline": "entry_size           = M_fs_info_get_size(M_fs_dir_entry_get_info(entry));"
    },
    {
        "line": 107,
        "fullcodeline": "total_size_progress += entry_size;"
    },
    {
        "line": 109,
        "fullcodeline": "M_fs_progress_set_path(progress, join_path);"
    },
    {
        "line": 110,
        "fullcodeline": "M_fs_progress_set_type(progress, M_fs_dir_entry_get_type(entry));"
    },
    {
        "line": 111,
        "fullcodeline": "M_fs_progress_set_result(progress, res2);"
    },
    {
        "line": 125,
        "fullcodeline": "if (cb && !cb(progress)) {"
    },
    {
        "line": 126,
        "fullcodeline": "res = M_FS_ERROR_CANCELED;"
    },
    {
        "line": 73,
        "fullcodeline": "for (i=0; i<len; i++) {"
    },
    {
        "line": 97,
        "fullcodeline": "res2 = M_fs_delete_file(join_path);"
    },
    {
        "line": 112,
        "fullcodeline": "if (progress_flags & M_FS_PROGRESS_COUNT) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (progress_flags & M_FS_PROGRESS_SIZE_TOTAL) {"
    },
    {
        "line": 118,
        "fullcodeline": "if (progress_flags & M_FS_PROGRESS_SIZE_CUR) {"
    },
    {
        "line": 74,
        "fullcodeline": "entry       = M_fs_dir_entries_at(entries, i);"
    },
    {
        "line": 75,
        "fullcodeline": "entry_size  = M_fs_info_get_size(M_fs_dir_entry_get_info(entry));"
    },
    {
        "line": 76,
        "fullcodeline": "total_size += entry_size;"
    },
    {
        "line": 113,
        "fullcodeline": "M_fs_progress_set_count(progress, i+1);"
    },
    {
        "line": 116,
        "fullcodeline": "M_fs_progress_set_size_total_progess(progress, total_size_progress);"
    },
    {
        "line": 119,
        "fullcodeline": "M_fs_progress_set_size_current(progress, entry_size);"
    },
    {
        "line": 120,
        "fullcodeline": "M_fs_progress_set_size_current_progress(progress, entry_size);"
    }
]