[
    {
        "line": 5,
        "fullcodeline": "M_fs_info_t   *info         = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "unsigned char  temp[M_FS_BUF_SIZE];"
    },
    {
        "line": 9,
        "fullcodeline": "size_t         wrote_total  = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "res = M_fs_file_open(&fd_old, path_old, M_FS_BUF_SIZE, M_FS_FILE_MODE_READ|M_FS_FILE_MODE_NOCREATE, NULL);"
    },
    {
        "line": 40,
        "fullcodeline": "res = M_fs_file_open(&fd_new, path_new, M_FS_BUF_SIZE, M_FS_FILE_MODE_WRITE|M_FS_FILE_MODE_OVERWRITE, perms);"
    },
    {
        "line": 41,
        "fullcodeline": "M_fs_info_destroy(info);"
    },
    {
        "line": 79,
        "fullcodeline": "M_fs_file_close(fd_old);"
    },
    {
        "line": 80,
        "fullcodeline": "M_fs_file_close(fd_new);"
    },
    {
        "line": 15,
        "fullcodeline": "if (M_fs_perms_can_access(path_new, M_FS_PERMS_MODE_NONE) == M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (res != M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (perms == NULL && mode & M_FS_FILE_MODE_PRESERVE_PERMS) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (res != M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 48,
        "fullcodeline": "while ((res = M_fs_file_read(fd_old, temp, sizeof(temp), &read_len, M_FS_FILE_RW_NORMAL)) == M_FS_ERROR_SUCCESS && read_len != 0) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (res != M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 21,
        "fullcodeline": "res = M_fs_delete(path_new, M_FALSE, NULL, M_FS_PROGRESS_NOEXTRA);"
    },
    {
        "line": 33,
        "fullcodeline": "res = M_fs_info_file(&info, fd_old, M_FS_PATH_INFO_FLAGS_NONE);"
    },
    {
        "line": 38,
        "fullcodeline": "perms = M_fs_info_get_perms(info);"
    },
    {
        "line": 43,
        "fullcodeline": "M_fs_file_close(fd_old);"
    },
    {
        "line": 49,
        "fullcodeline": "offset = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "if (res != M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (res != M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 50,
        "fullcodeline": "while (offset < read_len) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (res != M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 35,
        "fullcodeline": "M_fs_file_close(fd_old);"
    },
    {
        "line": 51,
        "fullcodeline": "res          = M_fs_file_write(fd_new, temp+offset, read_len-offset, &wrote_len, M_FS_FILE_RW_NORMAL);"
    },
    {
        "line": 52,
        "fullcodeline": "offset      += wrote_len;"
    },
    {
        "line": 53,
        "fullcodeline": "wrote_total += wrote_len;"
    },
    {
        "line": 71,
        "fullcodeline": "if (res != M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 56,
        "fullcodeline": "M_fs_progress_set_result(progress, res);"
    },
    {
        "line": 57,
        "fullcodeline": "if (progress_flags & M_FS_PROGRESS_SIZE_TOTAL) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (progress_flags & M_FS_PROGRESS_SIZE_CUR) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (progress_flags & M_FS_PROGRESS_COUNT) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (!cb(progress)) {"
    },
    {
        "line": 58,
        "fullcodeline": "M_fs_progress_set_size_total_progess(progress, M_fs_progress_get_size_total_progess(progress)+wrote_len);"
    },
    {
        "line": 61,
        "fullcodeline": "M_fs_progress_set_size_current_progress(progress, wrote_total);"
    },
    {
        "line": 64,
        "fullcodeline": "M_fs_progress_set_count(progress, M_fs_progress_get_count(progress)+1);"
    },
    {
        "line": 67,
        "fullcodeline": "res = M_FS_ERROR_CANCELED;"
    }
]