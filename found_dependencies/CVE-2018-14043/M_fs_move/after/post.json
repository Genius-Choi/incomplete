[
    {
        "line": 7,
        "fullcodeline": "M_fs_progress_t *progress      = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "res = M_fs_path_norm(&norm_path_new, path_new, M_FS_PATH_NORM_RESDIR, M_FS_SYSTEM_AUTO);"
    },
    {
        "line": 33,
        "fullcodeline": "res = M_fs_path_norm(&norm_path_old, path_old, M_FS_PATH_NORM_RESALL, M_FS_SYSTEM_AUTO);"
    },
    {
        "line": 40,
        "fullcodeline": "progress = M_fs_progress_create();"
    },
    {
        "line": 42,
        "fullcodeline": "res = M_fs_info(&info, path_old, (mode & M_FS_FILE_MODE_PRESERVE_PERMS)?M_FS_PATH_INFO_FLAGS_NONE:M_FS_PATH_INFO_FLAGS_BASIC);"
    },
    {
        "line": 115,
        "fullcodeline": "M_fs_info_destroy(info);"
    },
    {
        "line": 116,
        "fullcodeline": "M_fs_progress_destroy(progress);"
    },
    {
        "line": 117,
        "fullcodeline": "M_free(norm_path_new);"
    },
    {
        "line": 118,
        "fullcodeline": "M_free(norm_path_old);"
    },
    {
        "line": 11,
        "fullcodeline": "if (path_old == NULL || *path_old == '\\0' || path_new == NULL || *path_new == '\\0') {"
    },
    {
        "line": 17,
        "fullcodeline": "if (res != M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (M_fs_isfileintodir(path_old, path_new, &norm_path_old)) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (res != M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (res != M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (!M_fs_check_overwrite_allowed(norm_path_old, norm_path_new, mode)) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (M_fs_info_get_type(info) == M_FS_TYPE_SYMLINK) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (res == M_FS_ERROR_NOT_SAMEDEV) {"
    },
    {
        "line": 18,
        "fullcodeline": "M_free(norm_path_new);"
    },
    {
        "line": 25,
        "fullcodeline": "M_free(norm_path_new);"
    },
    {
        "line": 26,
        "fullcodeline": "res = M_fs_move(path_old, norm_path_old, mode, cb, progress_flags);"
    },
    {
        "line": 27,
        "fullcodeline": "M_free(norm_path_old);"
    },
    {
        "line": 35,
        "fullcodeline": "M_free(norm_path_new);"
    },
    {
        "line": 36,
        "fullcodeline": "M_free(norm_path_old);"
    },
    {
        "line": 44,
        "fullcodeline": "M_fs_progress_destroy(progress);"
    },
    {
        "line": 45,
        "fullcodeline": "M_free(norm_path_new);"
    },
    {
        "line": 46,
        "fullcodeline": "M_free(norm_path_old);"
    },
    {
        "line": 54,
        "fullcodeline": "M_fs_progress_destroy(progress);"
    },
    {
        "line": 55,
        "fullcodeline": "M_free(norm_path_new);"
    },
    {
        "line": 56,
        "fullcodeline": "M_free(norm_path_old);"
    },
    {
        "line": 61,
        "fullcodeline": "entry_size = M_fs_info_get_size(info);"
    },
    {
        "line": 63,
        "fullcodeline": "M_fs_progress_set_path(progress, norm_path_new);"
    },
    {
        "line": 64,
        "fullcodeline": "M_fs_progress_set_type(progress, M_fs_info_get_type(info));"
    },
    {
        "line": 82,
        "fullcodeline": "res = M_fs_path_readlink(&resolve_path, norm_path_old);"
    },
    {
        "line": 86,
        "fullcodeline": "M_free(resolve_path);"
    },
    {
        "line": 65,
        "fullcodeline": "if (progress_flags & M_FS_PROGRESS_SIZE_TOTAL) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (progress_flags & M_FS_PROGRESS_SIZE_CUR) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (progress_flags & M_FS_PROGRESS_COUNT) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (res == M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 88,
        "fullcodeline": "res = M_fs_move_file(norm_path_old, norm_path_new);"
    },
    {
        "line": 93,
        "fullcodeline": "if (M_fs_copy(norm_path_old, norm_path_new, mode, cb, progress_flags) == M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 66,
        "fullcodeline": "M_fs_progress_set_size_total(progress, entry_size);"
    },
    {
        "line": 67,
        "fullcodeline": "M_fs_progress_set_size_total_progess(progress, entry_size);"
    },
    {
        "line": 70,
        "fullcodeline": "M_fs_progress_set_size_current(progress, entry_size);"
    },
    {
        "line": 71,
        "fullcodeline": "M_fs_progress_set_size_current_progress(progress, entry_size);"
    },
    {
        "line": 75,
        "fullcodeline": "M_fs_progress_set_count_total(progress, 1);"
    },
    {
        "line": 76,
        "fullcodeline": "M_fs_progress_set_count(progress, 1);"
    },
    {
        "line": 84,
        "fullcodeline": "res = M_fs_symlink(norm_path_new, resolve_path);"
    },
    {
        "line": 95,
        "fullcodeline": "res = M_fs_delete(norm_path_old, M_TRUE, NULL, M_FS_PROGRESS_NOEXTRA);"
    },
    {
        "line": 102,
        "fullcodeline": "res = M_FS_ERROR_GENERIC;"
    },
    {
        "line": 108,
        "fullcodeline": "M_fs_progress_set_result(progress, res);"
    },
    {
        "line": 99,
        "fullcodeline": "if (!(mode & M_FS_FILE_MODE_OVERWRITE)) {"
    },
    {
        "line": 109,
        "fullcodeline": "if (!cb(progress)) {"
    },
    {
        "line": 100,
        "fullcodeline": "M_fs_delete(norm_path_new, M_TRUE, NULL, M_FS_PROGRESS_NOEXTRA);"
    },
    {
        "line": 110,
        "fullcodeline": "res = M_FS_ERROR_CANCELED;"
    }
]