[
    {
        "line": 10,
        "fullcodeline": "M_fs_progress_t        *progress            = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "M_fs_dir_walk_filter_t  filter              = M_FS_DIR_WALK_FILTER_ALL|M_FS_DIR_WALK_FILTER_RECURSE;"
    },
    {
        "line": 15,
        "fullcodeline": "M_uint64                total_count         = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "M_uint64                total_size          = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "M_uint64                total_size_progress = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "res = M_fs_path_norm(&norm_path_new, path_new, M_FS_PATH_NORM_RESDIR, M_FS_SYSTEM_AUTO);"
    },
    {
        "line": 43,
        "fullcodeline": "res = M_fs_path_norm(&norm_path_old, path_old, M_FS_PATH_NORM_RESALL, M_FS_SYSTEM_AUTO);"
    },
    {
        "line": 50,
        "fullcodeline": "progress = M_fs_progress_create();"
    },
    {
        "line": 52,
        "fullcodeline": "res = M_fs_info(&info, path_old, (mode & M_FS_FILE_MODE_PRESERVE_PERMS)?M_FS_PATH_INFO_FLAGS_NONE:M_FS_PATH_INFO_FLAGS_BASIC);"
    },
    {
        "line": 60,
        "fullcodeline": "type = M_fs_info_get_type(info);"
    },
    {
        "line": 72,
        "fullcodeline": "entries = M_fs_dir_entries_create();"
    },
    {
        "line": 76,
        "fullcodeline": "M_fs_dir_entries_insert(entries, M_fs_dir_walk_fill_entry(norm_path_new, NULL, type, info, M_FS_DIR_WALK_FILTER_READ_INFO_BASIC));"
    },
    {
        "line": 88,
        "fullcodeline": "M_fs_dir_entries_sort(entries, M_FS_DIR_SORT_ISDIR, M_TRUE, M_FS_DIR_SORT_NAME_CASECMP, M_TRUE);"
    },
    {
        "line": 90,
        "fullcodeline": "len = M_fs_dir_entries_len(entries);"
    },
    {
        "line": 182,
        "fullcodeline": "M_fs_dir_entries_destroy(entries);"
    },
    {
        "line": 183,
        "fullcodeline": "M_fs_progress_destroy(progress);"
    },
    {
        "line": 184,
        "fullcodeline": "M_free(norm_path_new);"
    },
    {
        "line": 185,
        "fullcodeline": "M_free(norm_path_old);"
    },
    {
        "line": 21,
        "fullcodeline": "if (path_old == NULL || *path_old == '\\0' || path_new == NULL || *path_new == '\\0') {"
    },
    {
        "line": 27,
        "fullcodeline": "if (res != M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (M_fs_isfileintodir(path_old, path_new, &norm_path_old)) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (res != M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (res != M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (!M_fs_check_overwrite_allowed(norm_path_old, norm_path_new, mode)) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (type == M_FS_TYPE_DIR) {"
    },
    {
        "line": 119,
        "fullcodeline": "for (i=0; i<len; i++) {"
    },
    {
        "line": 178,
        "fullcodeline": "if (res != M_FS_ERROR_SUCCESS && !(mode & M_FS_FILE_MODE_OVERWRITE)) {"
    },
    {
        "line": 28,
        "fullcodeline": "M_free(norm_path_new);"
    },
    {
        "line": 35,
        "fullcodeline": "M_free(norm_path_new);"
    },
    {
        "line": 36,
        "fullcodeline": "res = M_fs_copy(path_old, norm_path_old, mode, cb, progress_flags);"
    },
    {
        "line": 37,
        "fullcodeline": "M_free(norm_path_old);"
    },
    {
        "line": 45,
        "fullcodeline": "M_free(norm_path_new);"
    },
    {
        "line": 46,
        "fullcodeline": "M_free(norm_path_old);"
    },
    {
        "line": 54,
        "fullcodeline": "M_fs_progress_destroy(progress);"
    },
    {
        "line": 55,
        "fullcodeline": "M_free(norm_path_new);"
    },
    {
        "line": 56,
        "fullcodeline": "M_free(norm_path_old);"
    },
    {
        "line": 66,
        "fullcodeline": "M_fs_progress_destroy(progress);"
    },
    {
        "line": 67,
        "fullcodeline": "M_free(norm_path_new);"
    },
    {
        "line": 68,
        "fullcodeline": "M_free(norm_path_old);"
    },
    {
        "line": 84,
        "fullcodeline": "M_fs_dir_entries_merge(&entries, M_fs_dir_walk_entries(norm_path_old, NULL, filter));"
    },
    {
        "line": 92,
        "fullcodeline": "total_size = 0;"
    },
    {
        "line": 120,
        "fullcodeline": "entry         = M_fs_dir_entries_at(entries, i);"
    },
    {
        "line": 121,
        "fullcodeline": "type          = M_fs_dir_entry_get_type(entry);"
    },
    {
        "line": 122,
        "fullcodeline": "join_path_old = M_fs_path_join(norm_path_old, M_fs_dir_entry_get_name(entry), M_FS_SYSTEM_AUTO);"
    },
    {
        "line": 123,
        "fullcodeline": "join_path_new = M_fs_path_join(norm_path_new, M_fs_dir_entry_get_name(entry), M_FS_SYSTEM_AUTO);"
    },
    {
        "line": 125,
        "fullcodeline": "entry_size           = M_fs_info_get_size(M_fs_dir_entry_get_info(entry));"
    },
    {
        "line": 126,
        "fullcodeline": "total_size_progress += entry_size;"
    },
    {
        "line": 149,
        "fullcodeline": "M_free(join_path_old);"
    },
    {
        "line": 150,
        "fullcodeline": "M_free(join_path_new);"
    },
    {
        "line": 179,
        "fullcodeline": "M_fs_delete(path_new, M_TRUE, NULL, M_FS_PROGRESS_NOEXTRA);"
    },
    {
        "line": 78,
        "fullcodeline": "if (mode & M_FS_FILE_MODE_PRESERVE_PERMS) {"
    },
    {
        "line": 93,
        "fullcodeline": "for (i=0; i<len; i++) {"
    },
    {
        "line": 111,
        "fullcodeline": "if (progress_flags & M_FS_PROGRESS_SIZE_TOTAL) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (progress_flags & M_FS_PROGRESS_COUNT) {"
    },
    {
        "line": 136,
        "fullcodeline": "if (type == M_FS_TYPE_DIR || type == M_FS_TYPE_SYMLINK) {"
    },
    {
        "line": 153,
        "fullcodeline": "if ((type == M_FS_TYPE_DIR || type == M_FS_TYPE_SYMLINK) && cb) {"
    },
    {
        "line": 171,
        "fullcodeline": "if (res != M_FS_ERROR_SUCCESS) {"
    },
    {
        "line": 79,
        "fullcodeline": "filter |= M_FS_DIR_WALK_FILTER_READ_INFO_FULL;"
    },
    {
        "line": 94,
        "fullcodeline": "entry       = M_fs_dir_entries_at(entries, i);"
    },
    {
        "line": 95,
        "fullcodeline": "entry_size  = M_fs_info_get_size(M_fs_dir_entry_get_info(entry));"
    },
    {
        "line": 96,
        "fullcodeline": "total_size += entry_size;"
    },
    {
        "line": 98,
        "fullcodeline": "type = M_fs_dir_entry_get_type(entry);"
    },
    {
        "line": 112,
        "fullcodeline": "M_fs_progress_set_size_total(progress, total_size);"
    },
    {
        "line": 116,
        "fullcodeline": "M_fs_progress_set_count_total(progress, total_count);"
    },
    {
        "line": 129,
        "fullcodeline": "M_fs_progress_set_path(progress, join_path_new);"
    },
    {
        "line": 154,
        "fullcodeline": "M_fs_progress_set_type(progress, M_fs_dir_entry_get_type(entry));"
    },
    {
        "line": 155,
        "fullcodeline": "M_fs_progress_set_result(progress, res);"
    },
    {
        "line": 104,
        "fullcodeline": "if (type == M_FS_TYPE_DIR || type == M_FS_TYPE_SYMLINK) {"
    },
    {
        "line": 130,
        "fullcodeline": "if (progress_flags & M_FS_PROGRESS_SIZE_CUR) {"
    },
    {
        "line": 137,
        "fullcodeline": "if (type == M_FS_TYPE_DIR) {"
    },
    {
        "line": 142,
        "fullcodeline": "if (res == M_FS_ERROR_SUCCESS && (mode & M_FS_FILE_MODE_PRESERVE_PERMS)) {"
    },
    {
        "line": 146,
        "fullcodeline": "res = M_fs_copy_file(join_path_old, join_path_new, mode, cb, progress_flags, progress, M_fs_info_get_perms(M_fs_dir_entry_get_info(entry)));"
    },
    {
        "line": 157,
        "fullcodeline": "if (progress_flags & M_FS_PROGRESS_SIZE_TOTAL) {"
    },
    {
        "line": 160,
        "fullcodeline": "if (progress_flags & M_FS_PROGRESS_SIZE_CUR) {"
    },
    {
        "line": 163,
        "fullcodeline": "if (progress_flags & M_FS_PROGRESS_COUNT) {"
    },
    {
        "line": 167,
        "fullcodeline": "if (!cb(progress)) {"
    },
    {
        "line": 80,
        "fullcodeline": "} else if (cb && progress_flags & (M_FS_PROGRESS_SIZE_TOTAL|M_FS_PROGRESS_SIZE_CUR)) {"
    },
    {
        "line": 105,
        "fullcodeline": "total_count++;"
    },
    {
        "line": 131,
        "fullcodeline": "M_fs_progress_set_size_current(progress, entry_size);"
    },
    {
        "line": 138,
        "fullcodeline": "res = M_fs_dir_mkdir(join_path_new, M_FALSE, NULL);"
    },
    {
        "line": 143,
        "fullcodeline": "res = M_fs_perms_set_perms(M_fs_info_get_perms(M_fs_dir_entry_get_info(entry)), join_path_new);"
    },
    {
        "line": 158,
        "fullcodeline": "M_fs_progress_set_size_total_progess(progress, total_size_progress);"
    },
    {
        "line": 161,
        "fullcodeline": "M_fs_progress_set_size_current_progress(progress, entry_size);"
    },
    {
        "line": 164,
        "fullcodeline": "M_fs_progress_set_count(progress, M_fs_progress_get_count(progress)+1);"
    },
    {
        "line": 168,
        "fullcodeline": "res = M_FS_ERROR_CANCELED;"
    },
    {
        "line": 81,
        "fullcodeline": "filter |= M_FS_DIR_WALK_FILTER_READ_INFO_BASIC;"
    },
    {
        "line": 107,
        "fullcodeline": "total_count += (entry_size + M_FS_BUF_SIZE - 1) / M_FS_BUF_SIZE;"
    },
    {
        "line": 139,
        "fullcodeline": "} else if (type == M_FS_TYPE_SYMLINK) {"
    },
    {
        "line": 140,
        "fullcodeline": "res = M_fs_symlink(join_path_new, M_fs_dir_entry_get_resolved_name(entry));"
    }
]