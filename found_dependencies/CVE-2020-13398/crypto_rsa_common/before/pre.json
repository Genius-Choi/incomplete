[
    {
        "line": 5,
        "fullcodeline": "int output_length = -1;"
    },
    {
        "line": 10,
        "fullcodeline": "input_reverse = (BYTE*)malloc(2 * key_length + exponent_size);"
    },
    {
        "line": 15,
        "fullcodeline": "modulus_reverse = input_reverse + key_length;"
    },
    {
        "line": 16,
        "fullcodeline": "exponent_reverse = modulus_reverse + key_length;"
    },
    {
        "line": 17,
        "fullcodeline": "memcpy(modulus_reverse, modulus, key_length);"
    },
    {
        "line": 18,
        "fullcodeline": "crypto_reverse(modulus_reverse, key_length);"
    },
    {
        "line": 19,
        "fullcodeline": "memcpy(exponent_reverse, exponent, exponent_size);"
    },
    {
        "line": 20,
        "fullcodeline": "crypto_reverse(exponent_reverse, exponent_size);"
    },
    {
        "line": 21,
        "fullcodeline": "memcpy(input_reverse, input, length);"
    },
    {
        "line": 22,
        "fullcodeline": "crypto_reverse(input_reverse, length);"
    },
    {
        "line": 39,
        "fullcodeline": "BN_bin2bn(modulus_reverse, key_length, mod);"
    },
    {
        "line": 40,
        "fullcodeline": "BN_bin2bn(exponent_reverse, exponent_size, exp);"
    },
    {
        "line": 41,
        "fullcodeline": "BN_bin2bn(input_reverse, length, x);"
    },
    {
        "line": 42,
        "fullcodeline": "BN_mod_exp(y, x, exp, mod, ctx);"
    },
    {
        "line": 43,
        "fullcodeline": "output_length = BN_bn2bin(y, output);"
    },
    {
        "line": 44,
        "fullcodeline": "crypto_reverse(output, output_length);"
    },
    {
        "line": 12,
        "fullcodeline": "if (!input_reverse)"
    },
    {
        "line": 46,
        "fullcodeline": "if (output_length < (int)key_length)"
    },
    {
        "line": 24,
        "fullcodeline": "if (!(ctx = BN_CTX_new()))"
    },
    {
        "line": 27,
        "fullcodeline": "if (!(mod = BN_new()))"
    },
    {
        "line": 30,
        "fullcodeline": "if (!(exp = BN_new()))"
    },
    {
        "line": 33,
        "fullcodeline": "if (!(x = BN_new()))"
    },
    {
        "line": 36,
        "fullcodeline": "if (!(y = BN_new()))"
    },
    {
        "line": 13,
        "fullcodeline": "return -1;"
    },
    {
        "line": 47,
        "fullcodeline": "memset(output + output_length, 0, key_length - output_length);"
    }
]