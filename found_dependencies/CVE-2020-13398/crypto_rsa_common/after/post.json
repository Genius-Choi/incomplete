[
    {
        "line": 4,
        "fullcodeline": "BN_CTX* ctx = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "int output_length = -1;"
    },
    {
        "line": 6,
        "fullcodeline": "BYTE* input_reverse = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "BYTE* modulus_reverse = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "BYTE* exponent_reverse = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "BIGNUM* mod = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "BIGNUM* exp = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "BIGNUM* x = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "BIGNUM* y = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "size_t bufferSize = 2 * key_length + exponent_size;"
    },
    {
        "line": 21,
        "fullcodeline": "input_reverse = (BYTE*)calloc(bufferSize, 1);"
    },
    {
        "line": 26,
        "fullcodeline": "modulus_reverse = input_reverse + key_length;"
    },
    {
        "line": 27,
        "fullcodeline": "exponent_reverse = modulus_reverse + key_length;"
    },
    {
        "line": 28,
        "fullcodeline": "memcpy(modulus_reverse, modulus, key_length);"
    },
    {
        "line": 29,
        "fullcodeline": "crypto_reverse(modulus_reverse, key_length);"
    },
    {
        "line": 30,
        "fullcodeline": "memcpy(exponent_reverse, exponent, exponent_size);"
    },
    {
        "line": 31,
        "fullcodeline": "crypto_reverse(exponent_reverse, exponent_size);"
    },
    {
        "line": 32,
        "fullcodeline": "memcpy(input_reverse, input, length);"
    },
    {
        "line": 33,
        "fullcodeline": "crypto_reverse(input_reverse, length);"
    },
    {
        "line": 59,
        "fullcodeline": "output_length = BN_bn2bin(y, output);"
    },
    {
        "line": 62,
        "fullcodeline": "crypto_reverse(output, output_length);"
    },
    {
        "line": 68,
        "fullcodeline": "BN_free(y);"
    },
    {
        "line": 70,
        "fullcodeline": "BN_clear_free(x);"
    },
    {
        "line": 72,
        "fullcodeline": "BN_free(exp);"
    },
    {
        "line": 74,
        "fullcodeline": "BN_free(mod);"
    },
    {
        "line": 76,
        "fullcodeline": "BN_CTX_free(ctx);"
    },
    {
        "line": 78,
        "fullcodeline": "free(input_reverse);"
    },
    {
        "line": 15,
        "fullcodeline": "if (!input || (length < 0) || (exponent_size < 0) || !modulus || !exponent || !output)"
    },
    {
        "line": 18,
        "fullcodeline": "if (length > bufferSize)"
    },
    {
        "line": 23,
        "fullcodeline": "if (!input_reverse)"
    },
    {
        "line": 35,
        "fullcodeline": "if (!(ctx = BN_CTX_new()))"
    },
    {
        "line": 38,
        "fullcodeline": "if (!(mod = BN_new()))"
    },
    {
        "line": 41,
        "fullcodeline": "if (!(exp = BN_new()))"
    },
    {
        "line": 44,
        "fullcodeline": "if (!(x = BN_new()))"
    },
    {
        "line": 47,
        "fullcodeline": "if (!(y = BN_new()))"
    },
    {
        "line": 50,
        "fullcodeline": "if (!BN_bin2bn(modulus_reverse, key_length, mod))"
    },
    {
        "line": 53,
        "fullcodeline": "if (!BN_bin2bn(exponent_reverse, exponent_size, exp))"
    },
    {
        "line": 55,
        "fullcodeline": "if (!BN_bin2bn(input_reverse, length, x))"
    },
    {
        "line": 57,
        "fullcodeline": "if (BN_mod_exp(y, x, exp, mod, ctx) != 1)"
    },
    {
        "line": 60,
        "fullcodeline": "if (output_length < 0)"
    },
    {
        "line": 64,
        "fullcodeline": "if (output_length < key_length)"
    },
    {
        "line": 19,
        "fullcodeline": "bufferSize = length;"
    },
    {
        "line": 65,
        "fullcodeline": "memset(output + output_length, 0, key_length - output_length);"
    },
    {
        "line": 16,
        "fullcodeline": "return -1;"
    },
    {
        "line": 24,
        "fullcodeline": "return -1;"
    }
]