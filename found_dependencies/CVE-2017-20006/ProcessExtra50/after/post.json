[
    {
        "line": 4,
        "fullcodeline": "size_t ExtraStart=Raw->Size()-ExtraSize;"
    },
    {
        "line": 7,
        "fullcodeline": "Raw->SetPos(ExtraStart);"
    },
    {
        "line": 5,
        "fullcodeline": "if (ExtraStart<Raw->GetPos())"
    },
    {
        "line": 8,
        "fullcodeline": "while (Raw->DataLeft()>=2)"
    },
    {
        "line": 10,
        "fullcodeline": "int64 FieldSize=Raw->GetV(); // Needs to be signed for check below and can be negative."
    },
    {
        "line": 13,
        "fullcodeline": "size_t NextPos=size_t(Raw->GetPos()+FieldSize);"
    },
    {
        "line": 14,
        "fullcodeline": "uint64 FieldType=Raw->GetV();"
    },
    {
        "line": 16,
        "fullcodeline": "FieldSize=int64(NextPos-Raw->GetPos()); // Field size without size and type fields."
    },
    {
        "line": 237,
        "fullcodeline": "Raw->SetPos(NextPos);"
    },
    {
        "line": 11,
        "fullcodeline": "if (FieldSize<=0 || Raw->DataLeft()==0 || FieldSize>(int64)Raw->DataLeft())"
    },
    {
        "line": 18,
        "fullcodeline": "if (FieldSize<0) // FieldType is longer than expected extra field size."
    },
    {
        "line": 21,
        "fullcodeline": "if (bb->HeaderType==HEAD_MAIN)"
    },
    {
        "line": 43,
        "fullcodeline": "if (bb->HeaderType==HEAD_FILE || bb->HeaderType==HEAD_SERVICE)"
    },
    {
        "line": 23,
        "fullcodeline": "MainHeader *hd=(MainHeader *)bb;"
    },
    {
        "line": 45,
        "fullcodeline": "FileHeader *hd=(FileHeader *)bb;"
    },
    {
        "line": 24,
        "fullcodeline": "if (FieldType==MHEXTRA_LOCATOR)"
    },
    {
        "line": 26,
        "fullcodeline": "hd->Locator=true;"
    },
    {
        "line": 27,
        "fullcodeline": "uint Flags=(uint)Raw->GetV();"
    },
    {
        "line": 28,
        "fullcodeline": "if ((Flags & MHEXTRA_LOCATOR_QLIST)!=0)"
    },
    {
        "line": 34,
        "fullcodeline": "if ((Flags & MHEXTRA_LOCATOR_RR)!=0)"
    },
    {
        "line": 50,
        "fullcodeline": "FileHeader *hd=(FileHeader *)bb;"
    },
    {
        "line": 51,
        "fullcodeline": "uint EncVersion=(uint)Raw->GetV();"
    },
    {
        "line": 100,
        "fullcodeline": "FileHeader *hd=(FileHeader *)bb;"
    },
    {
        "line": 101,
        "fullcodeline": "uint Type=(uint)Raw->GetV();"
    },
    {
        "line": 110,
        "fullcodeline": "if (FieldSize>=5)"
    },
    {
        "line": 142,
        "fullcodeline": "if (FieldSize>=1)"
    },
    {
        "line": 158,
        "fullcodeline": "hd->RedirType=(FILE_SYSTEM_REDIRECT)Raw->GetV();"
    },
    {
        "line": 159,
        "fullcodeline": "uint Flags=(uint)Raw->GetV();"
    },
    {
        "line": 160,
        "fullcodeline": "hd->DirTarget=(Flags & FHEXTRA_REDIR_DIR)!=0;"
    },
    {
        "line": 161,
        "fullcodeline": "size_t NameSize=(size_t)Raw->GetV();"
    },
    {
        "line": 163,
        "fullcodeline": "char UtfName[NM*4];"
    },
    {
        "line": 164,
        "fullcodeline": "*UtfName=0;"
    },
    {
        "line": 173,
        "fullcodeline": "UtfToWide(UtfName,hd->RedirName,ASIZE(hd->RedirName));"
    },
    {
        "line": 178,
        "fullcodeline": "uint Flags=(uint)Raw->GetV();"
    },
    {
        "line": 179,
        "fullcodeline": "hd->UnixOwnerNumeric=(Flags & FHEXTRA_UOWNER_NUMUID)!=0;"
    },
    {
        "line": 180,
        "fullcodeline": "hd->UnixGroupNumeric=(Flags & FHEXTRA_UOWNER_NUMGID)!=0;"
    },
    {
        "line": 181,
        "fullcodeline": "*hd->UnixOwnerName=*hd->UnixGroupName=0;"
    },
    {
        "line": 209,
        "fullcodeline": "hd->UnixOwnerSet=true;"
    },
    {
        "line": 230,
        "fullcodeline": "hd->SubData.Alloc((size_t)FieldSize);"
    },
    {
        "line": 231,
        "fullcodeline": "Raw->GetB(hd->SubData.Addr(0),(size_t)FieldSize);"
    },
    {
        "line": 30,
        "fullcodeline": "uint64 Offset=Raw->GetV();"
    },
    {
        "line": 36,
        "fullcodeline": "uint64 Offset=Raw->GetV();"
    },
    {
        "line": 52,
        "fullcodeline": "if (EncVersion > CRYPT_VERSION)"
    },
    {
        "line": 102,
        "fullcodeline": "if (Type==FHEXTRA_HASH_BLAKE2)"
    },
    {
        "line": 112,
        "fullcodeline": "byte Flags=(byte)Raw->GetV();"
    },
    {
        "line": 113,
        "fullcodeline": "bool UnixTime=(Flags & FHEXTRA_HTIME_UNIXTIME)!=0;"
    },
    {
        "line": 144,
        "fullcodeline": "Raw->GetV(); // Skip flags field."
    },
    {
        "line": 145,
        "fullcodeline": "uint Version=(uint)Raw->GetV();"
    },
    {
        "line": 165,
        "fullcodeline": "if (NameSize<ASIZE(UtfName)-1)"
    },
    {
        "line": 182,
        "fullcodeline": "if ((Flags & FHEXTRA_UOWNER_UNAME)!=0)"
    },
    {
        "line": 189,
        "fullcodeline": "if ((Flags & FHEXTRA_UOWNER_GNAME)!=0)"
    },
    {
        "line": 224,
        "fullcodeline": "if (bb->HeaderType==HEAD_SERVICE && Raw->Size()-NextPos==1)"
    },
    {
        "line": 31,
        "fullcodeline": "if (Offset!=0) // 0 means that reserved space was not enough to write the offset."
    },
    {
        "line": 37,
        "fullcodeline": "if (Offset!=0) // 0 means that reserved space was not enough to write the offset."
    },
    {
        "line": 53,
        "fullcodeline": "UnkEncVerMsg(hd->FileName);"
    },
    {
        "line": 104,
        "fullcodeline": "hd->FileHash.Type=HASH_BLAKE2;"
    },
    {
        "line": 105,
        "fullcodeline": "Raw->GetB(hd->FileHash.Digest,BLAKE2_DIGEST_SIZE);"
    },
    {
        "line": 114,
        "fullcodeline": "if ((Flags & FHEXTRA_HTIME_MTIME)!=0)"
    },
    {
        "line": 119,
        "fullcodeline": "if ((Flags & FHEXTRA_HTIME_CTIME)!=0)"
    },
    {
        "line": 124,
        "fullcodeline": "if ((Flags & FHEXTRA_HTIME_ATIME)!=0)"
    },
    {
        "line": 129,
        "fullcodeline": "if (UnixTime && (Flags & FHEXTRA_HTIME_UNIX_NS)!=0) // Add nanoseconds."
    },
    {
        "line": 146,
        "fullcodeline": "if (Version!=0)"
    },
    {
        "line": 167,
        "fullcodeline": "Raw->GetB(UtfName,NameSize);"
    },
    {
        "line": 168,
        "fullcodeline": "UtfName[NameSize]=0;"
    },
    {
        "line": 184,
        "fullcodeline": "size_t Length=(size_t)Raw->GetV();"
    },
    {
        "line": 185,
        "fullcodeline": "Length=Min(Length,ASIZE(hd->UnixOwnerName)-1);"
    },
    {
        "line": 186,
        "fullcodeline": "Raw->GetB(hd->UnixOwnerName,Length);"
    },
    {
        "line": 187,
        "fullcodeline": "hd->UnixOwnerName[Length]=0;"
    },
    {
        "line": 191,
        "fullcodeline": "size_t Length=(size_t)Raw->GetV();"
    },
    {
        "line": 192,
        "fullcodeline": "Length=Min(Length,ASIZE(hd->UnixGroupName)-1);"
    },
    {
        "line": 193,
        "fullcodeline": "Raw->GetB(hd->UnixGroupName,Length);"
    },
    {
        "line": 194,
        "fullcodeline": "hd->UnixGroupName[Length]=0;"
    },
    {
        "line": 205,
        "fullcodeline": "hd->UnixOwnerID=(uint)Raw->GetV();"
    },
    {
        "line": 207,
        "fullcodeline": "hd->UnixGroupID=(uint)Raw->GetV();"
    },
    {
        "line": 225,
        "fullcodeline": "FieldSize++;"
    },
    {
        "line": 32,
        "fullcodeline": "hd->QOpenOffset=Offset+CurBlockPos;"
    },
    {
        "line": 38,
        "fullcodeline": "hd->RROffset=Offset+CurBlockPos;"
    },
    {
        "line": 56,
        "fullcodeline": "uint Flags=(uint)Raw->GetV();"
    },
    {
        "line": 57,
        "fullcodeline": "hd->UsePswCheck=(Flags & FHEXTRA_CRYPT_PSWCHECK)!=0;"
    },
    {
        "line": 58,
        "fullcodeline": "hd->UseHashKey=(Flags & FHEXTRA_CRYPT_HASHMAC)!=0;"
    },
    {
        "line": 59,
        "fullcodeline": "hd->Lg2Count=Raw->Get1();"
    },
    {
        "line": 62,
        "fullcodeline": "Raw->GetB(hd->Salt,SIZE_SALT50);"
    },
    {
        "line": 63,
        "fullcodeline": "Raw->GetB(hd->InitV,SIZE_INITV);"
    },
    {
        "line": 92,
        "fullcodeline": "hd->SaltSet=true;"
    },
    {
        "line": 93,
        "fullcodeline": "hd->CryptMethod=CRYPT_RAR50;"
    },
    {
        "line": 94,
        "fullcodeline": "hd->Encrypted=true;"
    },
    {
        "line": 148,
        "fullcodeline": "hd->Version=true;"
    },
    {
        "line": 150,
        "fullcodeline": "wchar VerText[20];"
    },
    {
        "line": 151,
        "fullcodeline": "swprintf(VerText,ASIZE(VerText),L\";%u\",Version);"
    },
    {
        "line": 152,
        "fullcodeline": "wcsncatz(hd->FileName,VerText,ASIZE(hd->FileName));"
    },
    {
        "line": 60,
        "fullcodeline": "if (hd->Lg2Count>CRYPT5_KDF_LG2_COUNT_MAX)"
    },
    {
        "line": 132,
        "fullcodeline": "if ((Flags & FHEXTRA_HTIME_MTIME)!=0 && (ns=(Raw->Get4() & 0x3fffffff))<1000000000)"
    },
    {
        "line": 134,
        "fullcodeline": "if ((Flags & FHEXTRA_HTIME_CTIME)!=0 && (ns=(Raw->Get4() & 0x3fffffff))<1000000000)"
    },
    {
        "line": 136,
        "fullcodeline": "if ((Flags & FHEXTRA_HTIME_ATIME)!=0 && (ns=(Raw->Get4() & 0x3fffffff))<1000000000)"
    },
    {
        "line": 61,
        "fullcodeline": "UnkEncVerMsg(hd->FileName);"
    },
    {
        "line": 66,
        "fullcodeline": "Raw->GetB(hd->PswCheck,SIZE_PSWCHECK);"
    },
    {
        "line": 75,
        "fullcodeline": "byte csum[SIZE_PSWCHECK_CSUM];"
    },
    {
        "line": 76,
        "fullcodeline": "Raw->GetB(csum,SIZE_PSWCHECK_CSUM);"
    },
    {
        "line": 79,
        "fullcodeline": "sha256_init(&ctx);"
    },
    {
        "line": 80,
        "fullcodeline": "sha256_process(&ctx, hd->PswCheck, SIZE_PSWCHECK);"
    },
    {
        "line": 82,
        "fullcodeline": "byte Digest[SHA256_DIGEST_SIZE];"
    },
    {
        "line": 83,
        "fullcodeline": "sha256_done(&ctx, Digest);"
    },
    {
        "line": 85,
        "fullcodeline": "hd->UsePswCheck=memcmp(csum,Digest,SIZE_PSWCHECK_CSUM)==0;"
    },
    {
        "line": 116,
        "fullcodeline": "hd->mtime.SetUnix(Raw->Get4());"
    },
    {
        "line": 121,
        "fullcodeline": "hd->ctime.SetUnix(Raw->Get4());"
    },
    {
        "line": 126,
        "fullcodeline": "hd->atime.SetUnix((time_t)Raw->Get4());"
    },
    {
        "line": 133,
        "fullcodeline": "hd->mtime.Adjust(ns);"
    },
    {
        "line": 135,
        "fullcodeline": "hd->ctime.Adjust(ns);"
    },
    {
        "line": 137,
        "fullcodeline": "hd->atime.Adjust(ns);"
    },
    {
        "line": 89,
        "fullcodeline": "if (bb->HeaderType==HEAD_SERVICE && memcmp(hd->PswCheck,\"\\0\\0\\0\\0\\0\\0\\0\\0\",SIZE_PSWCHECK)==0)"
    },
    {
        "line": 118,
        "fullcodeline": "hd->mtime.SetWin(Raw->Get8());"
    },
    {
        "line": 123,
        "fullcodeline": "hd->ctime.SetWin(Raw->Get8());"
    },
    {
        "line": 128,
        "fullcodeline": "hd->atime.SetWin(Raw->Get8());"
    },
    {
        "line": 90,
        "fullcodeline": "hd->UsePswCheck=0;"
    }
]