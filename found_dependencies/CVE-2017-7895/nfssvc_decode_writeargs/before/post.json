[
    {
        "line": 8,
        "fullcodeline": "p = decode_fh(p, &args->fh);"
    },
    {
        "line": 12,
        "fullcodeline": "p++;\t\t\t\t/* beginoffset */"
    },
    {
        "line": 13,
        "fullcodeline": "args->offset = ntohl(*p++);\t/* offset */"
    },
    {
        "line": 14,
        "fullcodeline": "p++;\t\t\t\t/* totalcount */"
    },
    {
        "line": 15,
        "fullcodeline": "len = args->len = ntohl(*p++);"
    },
    {
        "line": 26,
        "fullcodeline": "hdr = (void*)p - head->iov_base;"
    },
    {
        "line": 27,
        "fullcodeline": "dlen = head->iov_len + rqstp->rq_arg.page_len - hdr;"
    },
    {
        "line": 40,
        "fullcodeline": "rqstp->rq_vec[0].iov_base = (void*)p;"
    },
    {
        "line": 41,
        "fullcodeline": "rqstp->rq_vec[0].iov_len = head->iov_len - hdr;"
    },
    {
        "line": 42,
        "fullcodeline": "v = 0;"
    },
    {
        "line": 49,
        "fullcodeline": "rqstp->rq_vec[v].iov_len = len;"
    },
    {
        "line": 50,
        "fullcodeline": "args->vlen = v + 1;"
    },
    {
        "line": 9,
        "fullcodeline": "if (!p)"
    },
    {
        "line": 19,
        "fullcodeline": "if (len > NFSSVC_MAXBLKSIZE_V2)"
    },
    {
        "line": 37,
        "fullcodeline": "if (dlen < XDR_QUADLEN(len)*4)"
    },
    {
        "line": 43,
        "fullcodeline": "while (len > rqstp->rq_vec[v].iov_len) {"
    },
    {
        "line": 44,
        "fullcodeline": "len -= rqstp->rq_vec[v].iov_len;"
    },
    {
        "line": 45,
        "fullcodeline": "v++;"
    },
    {
        "line": 46,
        "fullcodeline": "rqstp->rq_vec[v].iov_base = page_address(rqstp->rq_pages[v]);"
    },
    {
        "line": 47,
        "fullcodeline": "rqstp->rq_vec[v].iov_len = PAGE_SIZE;"
    }
]