[
    {
        "line": 4,
        "fullcodeline": "ldbm_instance *inst = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "struct backentry *e= NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "struct backentry *ec= NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "int retval = -1;"
    },
    {
        "line": 12,
        "fullcodeline": "Slapi_Entry *postentry = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "char *errbuf = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "int disk_full = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "int retry_count = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "int ldap_result_code= LDAP_SUCCESS;"
    },
    {
        "line": 17,
        "fullcodeline": "char *ldap_result_message= NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "char *ldap_result_matcheddn= NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "struct backentry *parententry= NULL;"
    },
    {
        "line": 20,
        "fullcodeline": "struct backentry *newparententry= NULL;"
    },
    {
        "line": 21,
        "fullcodeline": "struct backentry *original_entry = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "struct backentry *tmpentry = NULL;"
    },
    {
        "line": 23,
        "fullcodeline": "modify_context parent_modify_context = {0};"
    },
    {
        "line": 24,
        "fullcodeline": "modify_context newparent_modify_context = {0};"
    },
    {
        "line": 25,
        "fullcodeline": "modify_context ruv_c = {0};"
    },
    {
        "line": 26,
        "fullcodeline": "int ruv_c_init = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "int is_ruv = 0;"
    },
    {
        "line": 28,
        "fullcodeline": "IDList *children= NULL;"
    },
    {
        "line": 29,
        "fullcodeline": "struct backentry **child_entries = NULL;"
    },
    {
        "line": 30,
        "fullcodeline": "struct backdn **child_dns = NULL;"
    },
    {
        "line": 31,
        "fullcodeline": "Slapi_DN *sdn = NULL;"
    },
    {
        "line": 34,
        "fullcodeline": "Slapi_DN *dn_newsuperiordn = NULL;"
    },
    {
        "line": 36,
        "fullcodeline": "Slapi_DN *orig_dn_newsuperiordn = NULL;"
    },
    {
        "line": 37,
        "fullcodeline": "Slapi_Entry *target_entry = NULL;"
    },
    {
        "line": 38,
        "fullcodeline": "Slapi_Entry *original_targetentry = NULL;"
    },
    {
        "line": 42,
        "fullcodeline": "Slapi_Mods smods_operation_wsi = {0};"
    },
    {
        "line": 43,
        "fullcodeline": "Slapi_Mods smods_generated = {0};"
    },
    {
        "line": 44,
        "fullcodeline": "Slapi_Mods smods_generated_wsi = {0};"
    },
    {
        "line": 46,
        "fullcodeline": "int is_replicated_operation= 0;"
    },
    {
        "line": 47,
        "fullcodeline": "int is_fixup_operation = 0;"
    },
    {
        "line": 48,
        "fullcodeline": "int is_resurect_operation = 0;"
    },
    {
        "line": 49,
        "fullcodeline": "int is_tombstone = 0;"
    },
    {
        "line": 54,
        "fullcodeline": "char *original_newrdn = NULL;"
    },
    {
        "line": 55,
        "fullcodeline": "CSN *opcsn = NULL;"
    },
    {
        "line": 56,
        "fullcodeline": "const char *newdn = NULL;"
    },
    {
        "line": 57,
        "fullcodeline": "char *newrdn = NULL;"
    },
    {
        "line": 58,
        "fullcodeline": "int opreturn = 0;"
    },
    {
        "line": 59,
        "fullcodeline": "int free_modrdn_existing_entry = 0;"
    },
    {
        "line": 60,
        "fullcodeline": "int not_an_error = 0;"
    },
    {
        "line": 62,
        "fullcodeline": "int myrc = 0;"
    },
    {
        "line": 68,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_OPERATION_ID, &op_id);"
    },
    {
        "line": 71,
        "fullcodeline": "slapi_sdn_init(&dn_newdn);"
    },
    {
        "line": 72,
        "fullcodeline": "slapi_sdn_init(&dn_newrdn);"
    },
    {
        "line": 73,
        "fullcodeline": "slapi_sdn_init(&dn_parentdn);"
    },
    {
        "line": 75,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_MODRDN_TARGET_SDN, &sdn );"
    },
    {
        "line": 76,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_BACKEND, &be);"
    },
    {
        "line": 77,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_PLUGIN_PRIVATE, &li );"
    },
    {
        "line": 78,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_TXN, (void**)&parent_txn );"
    },
    {
        "line": 79,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_REQUESTOR_ISROOT, &isroot );"
    },
    {
        "line": 80,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_OPERATION, &operation );"
    },
    {
        "line": 81,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_IS_REPLICATED_OPERATION, &is_replicated_operation );"
    },
    {
        "line": 82,
        "fullcodeline": "is_ruv = operation_is_flag_set(operation, OP_FLAG_REPL_RUV);"
    },
    {
        "line": 83,
        "fullcodeline": "is_fixup_operation = operation_is_flag_set(operation, OP_FLAG_REPL_FIXUP);"
    },
    {
        "line": 84,
        "fullcodeline": "is_resurect_operation = operation_is_flag_set(operation,OP_FLAG_RESURECT_ENTRY);"
    },
    {
        "line": 85,
        "fullcodeline": "is_tombstone = operation_is_flag_set(operation,OP_FLAG_TOMBSTONE_ENTRY); /* tombstone_to_glue on parent entry*/"
    },
    {
        "line": 96,
        "fullcodeline": "support_moddn_aci = config_get_moddn_aci();"
    },
    {
        "line": 99,
        "fullcodeline": "dblayer_txn_init(li,&txn);"
    },
    {
        "line": 115,
        "fullcodeline": "inst = (ldbm_instance *) be->be_instance_info;"
    },
    {
        "line": 192,
        "fullcodeline": "txn.back_txn_txn = NULL; /* ready to create the child transaction */"
    },
    {
        "line": 1186,
        "fullcodeline": "postentry = slapi_entry_dup( ec->ep_entry );"
    },
    {
        "line": 1200,
        "fullcodeline": "slapi_pblock_set( pb, SLAPI_ENTRY_POST_OP, postentry );"
    },
    {
        "line": 1225,
        "fullcodeline": "retval = dblayer_txn_commit(be, &txn);"
    },
    {
        "line": 1227,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_TXN, parent_txn);"
    },
    {
        "line": 1285,
        "fullcodeline": "retval= 0;"
    },
    {
        "line": 1387,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_RESULT_CODE, &ldap_result_code);"
    },
    {
        "line": 1391,
        "fullcodeline": "plugin_call_plugins (pb, SLAPI_PLUGIN_BE_POST_MODRDN_FN);"
    },
    {
        "line": 1440,
        "fullcodeline": "moddn_unlock_and_return_entry(be,&e);"
    },
    {
        "line": 1459,
        "fullcodeline": "slapi_mods_done(&smods_operation_wsi);"
    },
    {
        "line": 1460,
        "fullcodeline": "slapi_mods_done(&smods_generated);"
    },
    {
        "line": 1461,
        "fullcodeline": "slapi_mods_done(&smods_generated_wsi);"
    },
    {
        "line": 1462,
        "fullcodeline": "slapi_ch_free((void**)&child_entries);"
    },
    {
        "line": 1463,
        "fullcodeline": "slapi_ch_free((void**)&child_dns);"
    },
    {
        "line": 1466,
        "fullcodeline": "idl_free(&children);"
    },
    {
        "line": 1467,
        "fullcodeline": "slapi_sdn_done(&dn_newdn);"
    },
    {
        "line": 1468,
        "fullcodeline": "slapi_sdn_done(&dn_newrdn);"
    },
    {
        "line": 1469,
        "fullcodeline": "slapi_sdn_done(&dn_parentdn);"
    },
    {
        "line": 1470,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_BACKLDBM, \"ldbm_back_modrdn\","
    },
    {
        "line": 1473,
        "fullcodeline": "myrc = modify_term(&parent_modify_context,be);"
    },
    {
        "line": 1474,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_BACKLDBM, \"ldbm_back_modrdn\","
    },
    {
        "line": 1476,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_BACKLDBM, \"ldbm_back_modrdn\","
    },
    {
        "line": 1479,
        "fullcodeline": "myrc = modify_term(&newparent_modify_context,be);"
    },
    {
        "line": 1485,
        "fullcodeline": "done_with_pblock_entry(pb,SLAPI_MODRDN_PARENT_ENTRY);"
    },
    {
        "line": 1486,
        "fullcodeline": "done_with_pblock_entry(pb,SLAPI_MODRDN_NEWPARENT_ENTRY);"
    },
    {
        "line": 1487,
        "fullcodeline": "done_with_pblock_entry(pb,SLAPI_MODRDN_TARGET_ENTRY);"
    },
    {
        "line": 1488,
        "fullcodeline": "slapi_ch_free_string(&original_newrdn);"
    },
    {
        "line": 1489,
        "fullcodeline": "slapi_sdn_free(&orig_dn_newsuperiordn);"
    },
    {
        "line": 1490,
        "fullcodeline": "backentry_free(&original_entry);"
    },
    {
        "line": 1491,
        "fullcodeline": "backentry_free(&tmpentry);"
    },
    {
        "line": 1492,
        "fullcodeline": "slapi_entry_free(original_targetentry);"
    },
    {
        "line": 1493,
        "fullcodeline": "slapi_ch_free((void**)&errbuf);"
    },
    {
        "line": 65,
        "fullcodeline": "if (slapi_pblock_get(pb, SLAPI_CONN_ID, &conn_id) < 0) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (NULL == sdn) {"
    },
    {
        "line": 120,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_MODRDN_NEWRDN, &newrdn );"
    },
    {
        "line": 121,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_MODRDN_NEWSUPERIOR_SDN, &dn_newsuperiordn );"
    },
    {
        "line": 122,
        "fullcodeline": "slapi_sdn_init_dn_byref(&dn_newrdn, newrdn);"
    },
    {
        "line": 137,
        "fullcodeline": "if (slapi_sdn_compare(dn_newsuperiordn, &dn_parentdn) == 0)"
    },
    {
        "line": 146,
        "fullcodeline": "if ( !entryrdn_get_switch() &&"
    },
    {
        "line": 154,
        "fullcodeline": "if (inst && inst->inst_ref_count) {"
    },
    {
        "line": 193,
        "fullcodeline": "for (retry_count = 0; retry_count < RETRY_TIMES; retry_count++)"
    },
    {
        "line": 1178,
        "fullcodeline": "if (retry_count == RETRY_TIMES)"
    },
    {
        "line": 1188,
        "fullcodeline": "if(parententry!=NULL)"
    },
    {
        "line": 1192,
        "fullcodeline": "if(newparententry!=NULL)"
    },
    {
        "line": 1202,
        "fullcodeline": "if ((retval = plugin_call_plugins(pb, SLAPI_PLUGIN_BE_TXN_POST_MODRDN_FN))) {"
    },
    {
        "line": 1228,
        "fullcodeline": "if (0 != retval)"
    },
    {
        "line": 1329,
        "fullcodeline": "if (retval == DB_RUNRECOVERY) {"
    },
    {
        "line": 1446,
        "fullcodeline": "if (ldap_result_code == -1) {"
    },
    {
        "line": 1464,
        "fullcodeline": "if (ldap_result_matcheddn && 0 != strcmp(ldap_result_matcheddn, \"NULL\"))"
    },
    {
        "line": 1494,
        "fullcodeline": "if (retval == 0 && opcsn != NULL && !is_fixup_operation)"
    },
    {
        "line": 66,
        "fullcodeline": "conn_id = 0; /* connection is NULL */"
    },
    {
        "line": 88,
        "fullcodeline": "slapi_send_ldap_result( pb, LDAP_INVALID_DN_SYNTAX, NULL,"
    },
    {
        "line": 103,
        "fullcodeline": "txn.back_txn_txn = parent_txn;"
    },
    {
        "line": 139,
        "fullcodeline": "slapi_sdn_done(dn_newsuperiordn);"
    },
    {
        "line": 147,
        "fullcodeline": "(!is_replicated_operation && !slapi_sdn_isempty(dn_newsuperiordn)))"
    },
    {
        "line": 149,
        "fullcodeline": "slapi_send_ldap_result( pb, LDAP_UNWILLING_TO_PERFORM, NULL,"
    },
    {
        "line": 155,
        "fullcodeline": "slapi_counter_increment(inst->inst_ref_count);"
    },
    {
        "line": 305,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_TXN, (void *)txn.back_txn_txn);"
    },
    {
        "line": 953,
        "fullcodeline": "retval = plugin_call_plugins(pb, SLAPI_PLUGIN_BE_TXN_PRE_MODRDN_FN);"
    },
    {
        "line": 977,
        "fullcodeline": "retval = modrdn_rename_entry_update_indexes(&txn, pb, li, e, &ec, &smods_generated, &smods_generated_wsi, &smods_operation_wsi);"
    },
    {
        "line": 1181,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_ANY, \"Retry count exceeded in modrdn\\n\", 0, 0, 0 );"
    },
    {
        "line": 1182,
        "fullcodeline": "ldap_result_code= LDAP_BUSY;"
    },
    {
        "line": 1190,
        "fullcodeline": "modify_switch_entries( &parent_modify_context,be);"
    },
    {
        "line": 1194,
        "fullcodeline": "myrc = modify_switch_entries( &newparent_modify_context,be);"
    },
    {
        "line": 1195,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_BACKLDBM, \"ldbm_back_modrdn\","
    },
    {
        "line": 1203,
        "fullcodeline": "LDAPDebug1Arg( LDAP_DEBUG_TRACE, \"SLAPI_PLUGIN_BE_TXN_POST_MODRDN_FN plugin \""
    },
    {
        "line": 1220,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PB_RESULT_TEXT, &ldap_result_message);"
    },
    {
        "line": 1231,
        "fullcodeline": "MOD_SET_ERROR(ldap_result_code, LDAP_OPERATIONS_ERROR, retry_count);"
    },
    {
        "line": 1237,
        "fullcodeline": "int i = 0;"
    },
    {
        "line": 1291,
        "fullcodeline": "slapi_entry_free( postentry );"
    },
    {
        "line": 1292,
        "fullcodeline": "postentry= NULL;"
    },
    {
        "line": 1294,
        "fullcodeline": "slapi_pblock_set( pb, SLAPI_ENTRY_POST_OP, postentry );"
    },
    {
        "line": 1297,
        "fullcodeline": "int i = 0;"
    },
    {
        "line": 1330,
        "fullcodeline": "dblayer_remember_disk_filled(li);"
    },
    {
        "line": 1331,
        "fullcodeline": "ldbm_nasty(\"ModifyDN\",82,retval);"
    },
    {
        "line": 1332,
        "fullcodeline": "disk_full = 1;"
    },
    {
        "line": 1337,
        "fullcodeline": "retval = return_on_disk_full(li);"
    },
    {
        "line": 1426,
        "fullcodeline": "ec = NULL;"
    },
    {
        "line": 1443,
        "fullcodeline": "modify_term(&ruv_c, be);"
    },
    {
        "line": 1448,
        "fullcodeline": "ldap_result_code = LDAP_NO_SUCH_OBJECT;"
    },
    {
        "line": 1449,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_RESULT_CODE, &ldap_result_code);"
    },
    {
        "line": 1465,
        "fullcodeline": "slapi_ch_free((void**)&ldap_result_matcheddn);"
    },
    {
        "line": 1481,
        "fullcodeline": "done_with_pblock_entry(pb,SLAPI_MODRDN_EXISTING_ENTRY);"
    },
    {
        "line": 1496,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_URP_NAMING_COLLISION_DN,"
    },
    {
        "line": 90,
        "fullcodeline": "return( -1 );"
    },
    {
        "line": 105,
        "fullcodeline": "parent_txn = txn.back_txn_txn;"
    },
    {
        "line": 106,
        "fullcodeline": "slapi_pblock_set( pb, SLAPI_TXN, parent_txn );"
    },
    {
        "line": 126,
        "fullcodeline": "const char *pdn = slapi_dn_find_parent_ext(slapi_sdn_get_dn(sdn), is_resurect_operation);"
    },
    {
        "line": 127,
        "fullcodeline": "slapi_sdn_set_dn_byval(&dn_parentdn, pdn);"
    },
    {
        "line": 151,
        "fullcodeline": "return( -1 );"
    },
    {
        "line": 157,
        "fullcodeline": "LDAPDebug1Arg(LDAP_DEBUG_ANY,"
    },
    {
        "line": 195,
        "fullcodeline": "if (txn.back_txn_txn && (txn.back_txn_txn != parent_txn))"
    },
    {
        "line": 291,
        "fullcodeline": "if (0 == retry_count) {"
    },
    {
        "line": 298,
        "fullcodeline": "if (0 != retval) {"
    },
    {
        "line": 307,
        "fullcodeline": "if (0 == retry_count) { /* just once */"
    },
    {
        "line": 978,
        "fullcodeline": "if (DB_LOCK_DEADLOCK == retval)"
    },
    {
        "line": 1041,
        "fullcodeline": "if (slapi_sdn_get_dn(dn_newsuperiordn)!=NULL)"
    },
    {
        "line": 1089,
        "fullcodeline": "if (slapi_sdn_get_dn(dn_newsuperiordn)!=NULL) {"
    },
    {
        "line": 1103,
        "fullcodeline": "if (entryrdn_get_switch())  /* subtree-rename: on */"
    },
    {
        "line": 1127,
        "fullcodeline": "if (!entryrdn_get_switch() && children) /* subtree-rename: off */"
    },
    {
        "line": 1132,
        "fullcodeline": "if (DB_LOCK_DEADLOCK == retval)"
    },
    {
        "line": 1137,
        "fullcodeline": "if (retval != 0)"
    },
    {
        "line": 1145,
        "fullcodeline": "if (!is_ruv && !is_fixup_operation && !NO_RUV_UPDATE(li)) {"
    },
    {
        "line": 1205,
        "fullcodeline": "if (!ldap_result_code) {"
    },
    {
        "line": 1208,
        "fullcodeline": "if (!ldap_result_code) {"
    },
    {
        "line": 1214,
        "fullcodeline": "if (!opreturn) {"
    },
    {
        "line": 1217,
        "fullcodeline": "if (!opreturn) {"
    },
    {
        "line": 1230,
        "fullcodeline": "if (LDBM_OS_ERR_IS_DISKFULL(retval)) disk_full = 1;"
    },
    {
        "line": 1238,
        "fullcodeline": "if (child_entries && *child_entries)"
    },
    {
        "line": 1267,
        "fullcodeline": "if (entryrdn_get_switch() && child_dns && *child_dns)"
    },
    {
        "line": 1277,
        "fullcodeline": "if (modify_switch_entries(&ruv_c, be) != 0 ) {"
    },
    {
        "line": 1298,
        "fullcodeline": "if (child_entries && *child_entries && inst)"
    },
    {
        "line": 1320,
        "fullcodeline": "if (entryrdn_get_switch() && child_dns && *child_dns && inst)"
    },
    {
        "line": 1400,
        "fullcodeline": "if (inst && (0 == retval) && entryrdn_get_switch()) { /* subtree-rename: on */"
    },
    {
        "line": 1420,
        "fullcodeline": "if (ec && inst) {"
    },
    {
        "line": 1430,
        "fullcodeline": "if (e && entryrdn_get_switch() && (0 == retval)) {"
    },
    {
        "line": 1456,
        "fullcodeline": "slapi_send_ldap_result( pb, ldap_result_code, ldap_result_matcheddn,"
    },
    {
        "line": 1483,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_MODRDN_EXISTING_ENTRY, NULL);"
    },
    {
        "line": 1497,
        "fullcodeline": "slapi_ch_strdup(slapi_sdn_get_dn(sdn)));"
    },
    {
        "line": 129,
        "fullcodeline": "slapi_sdn_get_parent(sdn, &dn_parentdn);"
    },
    {
        "line": 159,
        "fullcodeline": "inst ? inst->inst_name : \"null instance\");"
    },
    {
        "line": 160,
        "fullcodeline": "return( -1 );"
    },
    {
        "line": 197,
        "fullcodeline": "Slapi_Entry *ent = NULL;"
    },
    {
        "line": 200,
        "fullcodeline": "dblayer_txn_abort_ext(li, &txn, PR_FALSE);"
    },
    {
        "line": 202,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_TXN, parent_txn);"
    },
    {
        "line": 204,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_MODRDN_NEWRDN, &newrdn);"
    },
    {
        "line": 205,
        "fullcodeline": "slapi_ch_free_string(&newrdn);"
    },
    {
        "line": 206,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_MODRDN_NEWRDN, original_newrdn);"
    },
    {
        "line": 207,
        "fullcodeline": "slapi_sdn_set_dn_byref(&dn_newrdn, original_newrdn);"
    },
    {
        "line": 208,
        "fullcodeline": "original_newrdn = slapi_ch_strdup(original_newrdn);"
    },
    {
        "line": 210,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_MODRDN_NEWSUPERIOR_SDN, &dn_newsuperiordn);"
    },
    {
        "line": 211,
        "fullcodeline": "slapi_sdn_free(&dn_newsuperiordn);"
    },
    {
        "line": 212,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_MODRDN_NEWSUPERIOR_SDN, orig_dn_newsuperiordn);"
    },
    {
        "line": 213,
        "fullcodeline": "orig_dn_newsuperiordn = slapi_sdn_dup(orig_dn_newsuperiordn);"
    },
    {
        "line": 220,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_MODRDN_EXISTING_ENTRY, &ent );"
    },
    {
        "line": 233,
        "fullcodeline": "CACHE_RETURN(&inst->inst_cache, &ec);"
    },
    {
        "line": 245,
        "fullcodeline": "slapi_pblock_set( pb, SLAPI_MODRDN_EXISTING_ENTRY, original_entry->ep_entry );"
    },
    {
        "line": 246,
        "fullcodeline": "ec = original_entry;"
    },
    {
        "line": 247,
        "fullcodeline": "original_entry = tmpentry;"
    },
    {
        "line": 248,
        "fullcodeline": "tmpentry = NULL;"
    },
    {
        "line": 249,
        "fullcodeline": "free_modrdn_existing_entry = 0; /* owned by original_entry now */"
    },
    {
        "line": 267,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_MODRDN_TARGET_ENTRY, &target_entry );"
    },
    {
        "line": 268,
        "fullcodeline": "slapi_entry_free(target_entry);"
    },
    {
        "line": 269,
        "fullcodeline": "slapi_pblock_set( pb, SLAPI_MODRDN_TARGET_ENTRY, original_targetentry );"
    },
    {
        "line": 281,
        "fullcodeline": "LDAPDebug0Args(LDAP_DEBUG_BACKLDBM,"
    },
    {
        "line": 293,
        "fullcodeline": "retval = dblayer_txn_begin(be, parent_txn, &txn);"
    },
    {
        "line": 299,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 308,
        "fullcodeline": "rc = 0;"
    },
    {
        "line": 309,
        "fullcodeline": "rc= slapi_setbit_int(rc,SLAPI_RTN_BIT_FETCH_EXISTING_DN_ENTRY);"
    },
    {
        "line": 310,
        "fullcodeline": "rc= slapi_setbit_int(rc,SLAPI_RTN_BIT_FETCH_PARENT_ENTRY);"
    },
    {
        "line": 311,
        "fullcodeline": "rc= slapi_setbit_int(rc,SLAPI_RTN_BIT_FETCH_NEWPARENT_ENTRY);"
    },
    {
        "line": 312,
        "fullcodeline": "rc= slapi_setbit_int(rc,SLAPI_RTN_BIT_FETCH_TARGET_ENTRY);"
    },
    {
        "line": 443,
        "fullcodeline": "slapi_pblock_get (pb, SLAPI_TARGET_ADDRESS, &old_addr);"
    },
    {
        "line": 444,
        "fullcodeline": "e = find_entry2modify( pb, be, old_addr, &txn );"
    },
    {
        "line": 474,
        "fullcodeline": "oldparent_addr.sdn = &dn_parentdn;"
    },
    {
        "line": 480,
        "fullcodeline": "parententry = find_entry2modify_only( pb, be, &oldparent_addr, &txn );"
    },
    {
        "line": 481,
        "fullcodeline": "modify_init(&parent_modify_context,parententry);"
    },
    {
        "line": 495,
        "fullcodeline": "opcsn = operation_get_csn (operation);"
    },
    {
        "line": 521,
        "fullcodeline": "slapi_sdn_copy( slapi_entry_get_sdn_const( e->ep_entry ), sdn );"
    },
    {
        "line": 522,
        "fullcodeline": "slapi_pblock_set( pb, SLAPI_MODRDN_TARGET_SDN, sdn );"
    },
    {
        "line": 534,
        "fullcodeline": "slapi_sdn_set_dn_passin(&dn_newdn, moddn_get_newdn(pb, sdn, &dn_newrdn, dn_newsuperiordn, is_tombstone));"
    },
    {
        "line": 616,
        "fullcodeline": "slapi_pblock_set( pb, SLAPI_ENTRY_PRE_OP, slapi_entry_dup( e->ep_entry ));"
    },
    {
        "line": 630,
        "fullcodeline": "ldap_result_code = plugin_call_acl_plugin(pb, ec->ep_entry,"
    },
    {
        "line": 639,
        "fullcodeline": "slapi_entry_set_sdn( ec->ep_entry, &dn_newdn );"
    },
    {
        "line": 719,
        "fullcodeline": "slapi_mods_init(&smods_generated,4);"
    },
    {
        "line": 720,
        "fullcodeline": "slapi_mods_init(&smods_generated_wsi,4);"
    },
    {
        "line": 721,
        "fullcodeline": "ldap_result_code = moddn_newrdn_mods(pb, slapi_sdn_get_dn(sdn),"
    },
    {
        "line": 755,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_MODIFY_MODS, &mods );"
    },
    {
        "line": 756,
        "fullcodeline": "slapi_mods_init_byref(&smods_operation_wsi,mods);"
    },
    {
        "line": 834,
        "fullcodeline": "entry_add_dncsn(ec->ep_entry,operation_get_csn(operation));"
    },
    {
        "line": 835,
        "fullcodeline": "entry_add_rdn_csn(ec->ep_entry,operation_get_csn(operation));"
    },
    {
        "line": 940,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_MODRDN_TARGET_ENTRY, &target_entry);"
    },
    {
        "line": 946,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_MODRDN_NEWRDN, &newrdn);"
    },
    {
        "line": 947,
        "fullcodeline": "original_newrdn = slapi_ch_strdup(newrdn);"
    },
    {
        "line": 948,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_MODRDN_NEWSUPERIOR_SDN, &dn_newsuperiordn);"
    },
    {
        "line": 949,
        "fullcodeline": "orig_dn_newsuperiordn = slapi_sdn_dup(dn_newsuperiordn);"
    },
    {
        "line": 955,
        "fullcodeline": "LDAPDebug1Arg( LDAP_DEBUG_TRACE, \"SLAPI_PLUGIN_BE_TXN_PRE_MODRDN_FN plugin \""
    },
    {
        "line": 970,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PB_RESULT_TEXT, &ldap_result_message);"
    },
    {
        "line": 985,
        "fullcodeline": "LDAPDebug(LDAP_DEBUG_ANY, \"modrdn_rename_entry_update_indexes %s --> %s failed, err=%d\\n\","
    },
    {
        "line": 988,
        "fullcodeline": "MOD_SET_ERROR(ldap_result_code, LDAP_OPERATIONS_ERROR, retry_count);"
    },
    {
        "line": 998,
        "fullcodeline": "if ( (rdns = slapi_ldap_explode_rdn( slapi_sdn_get_dn(&dn_newrdn), 0 )) != NULL )"
    },
    {
        "line": 1044,
        "fullcodeline": "retval = modify_update_all(be, pb, &parent_modify_context, &txn);"
    },
    {
        "line": 1090,
        "fullcodeline": "retval = ldbm_ancestorid_move_subtree(be, sdn, &dn_newdn, e->ep_id, children, &txn);"
    },
    {
        "line": 1106,
        "fullcodeline": "slapi_rdn_init_sdn(&newsrdn, (const Slapi_DN *)&dn_newdn);"
    },
    {
        "line": 1107,
        "fullcodeline": "retval = entryrdn_rename_subtree(be, (const Slapi_DN *)sdn, &newsrdn,"
    },
    {
        "line": 1110,
        "fullcodeline": "slapi_rdn_done(&newsrdn);"
    },
    {
        "line": 1129,
        "fullcodeline": "retval= moddn_rename_children(&txn, pb, be, children, sdn,"
    },
    {
        "line": 1141,
        "fullcodeline": "MOD_SET_ERROR(ldap_result_code, LDAP_OPERATIONS_ERROR, retry_count);"
    },
    {
        "line": 1146,
        "fullcodeline": "ruv_c_init = ldbm_txn_ruv_modify_context( pb, &ruv_c );"
    },
    {
        "line": 1159,
        "fullcodeline": "retval = modify_update_all( be, pb, &ruv_c, &txn );"
    },
    {
        "line": 1206,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_RESULT_CODE, &ldap_result_code);"
    },
    {
        "line": 1209,
        "fullcodeline": "LDAPDebug0Args( LDAP_DEBUG_ANY, \"SLAPI_PLUGIN_BE_TXN_POST_MODRDN_FN plugin \""
    },
    {
        "line": 1211,
        "fullcodeline": "ldap_result_code = LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 1212,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_RESULT_CODE, &ldap_result_code);"
    },
    {
        "line": 1215,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PLUGIN_OPRETURN, &opreturn);"
    },
    {
        "line": 1218,
        "fullcodeline": "slapi_pblock_set( pb, SLAPI_PLUGIN_OPRETURN, ldap_result_code ? &ldap_result_code : &retval );"
    },
    {
        "line": 1278,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 1279,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_ANY,"
    },
    {
        "line": 1342,
        "fullcodeline": "if (txn.back_txn_txn && (txn.back_txn_txn != parent_txn))"
    },
    {
        "line": 1379,
        "fullcodeline": "if (!not_an_error) {"
    },
    {
        "line": 1396,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_REPL, \"ldbm_back_modrdn\","
    },
    {
        "line": 1402,
        "fullcodeline": "struct backdn *bdn = dncache_find_id(&inst->inst_dncache, ec->ep_id);"
    },
    {
        "line": 1424,
        "fullcodeline": "CACHE_RETURN( &inst->inst_cache, &ec );"
    },
    {
        "line": 1431,
        "fullcodeline": "struct backdn *bdn = dncache_find_id(&inst->inst_dncache, e->ep_id);"
    },
    {
        "line": 1432,
        "fullcodeline": "CACHE_REMOVE(&inst->inst_dncache, bdn);"
    },
    {
        "line": 1433,
        "fullcodeline": "CACHE_RETURN(&inst->inst_dncache, &bdn);"
    },
    {
        "line": 1436,
        "fullcodeline": "slapi_counter_decrement(inst->inst_ref_count);"
    },
    {
        "line": 216,
        "fullcodeline": "if ((tmpentry = backentry_dup(original_entry?original_entry:ec)) == NULL) {"
    },
    {
        "line": 221,
        "fullcodeline": "if (cache_is_in_cache(&inst->inst_cache, ec)) {"
    },
    {
        "line": 234,
        "fullcodeline": "if (!cache_is_in_cache(&inst->inst_cache, e)) {"
    },
    {
        "line": 241,
        "fullcodeline": "if (ent && (ent != original_entry->ep_entry)) {"
    },
    {
        "line": 250,
        "fullcodeline": "if (!cache_is_in_cache(&inst->inst_cache, ec)) {"
    },
    {
        "line": 270,
        "fullcodeline": "if ( (original_targetentry = slapi_entry_dup( original_targetentry )) == NULL ) {"
    },
    {
        "line": 286,
        "fullcodeline": "interval = PR_MillisecondsToInterval(slapi_rand() % 100);"
    },
    {
        "line": 287,
        "fullcodeline": "DS_Sleep(interval);"
    },
    {
        "line": 296,
        "fullcodeline": "retval = dblayer_txn_begin_ext(li, parent_txn, &txn, PR_FALSE);"
    },
    {
        "line": 300,
        "fullcodeline": "if (LDBM_OS_ERR_IS_DISKFULL(retval)) disk_full = 1;"
    },
    {
        "line": 313,
        "fullcodeline": "while(rc!=0)"
    },
    {
        "line": 445,
        "fullcodeline": "if ( e == NULL )"
    },
    {
        "line": 450,
        "fullcodeline": "if (slapi_entry_flag_is_set(e->ep_entry, SLAPI_ENTRY_FLAG_TOMBSTONE) &&"
    },
    {
        "line": 462,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_MODRDN_EXISTING_ENTRY, &entry);"
    },
    {
        "line": 484,
        "fullcodeline": "if(slapi_sdn_get_ndn(dn_newsuperiordn) != NULL)"
    },
    {
        "line": 496,
        "fullcodeline": "if (!is_fixup_operation)"
    },
    {
        "line": 523,
        "fullcodeline": "if (newparententry != NULL) {"
    },
    {
        "line": 537,
        "fullcodeline": "if ( newparententry == NULL )"
    },
    {
        "line": 587,
        "fullcodeline": "if ( parententry == NULL )"
    },
    {
        "line": 603,
        "fullcodeline": "if ( !is_replicated_operation && !entryrdn_get_switch() &&"
    },
    {
        "line": 619,
        "fullcodeline": "if ( (ec = backentry_dup( e )) == NULL )"
    },
    {
        "line": 633,
        "fullcodeline": "if (ldap_result_code != LDAP_SUCCESS)"
    },
    {
        "line": 640,
        "fullcodeline": "if (entryrdn_get_switch()) { /* subtree-rename: on */"
    },
    {
        "line": 701,
        "fullcodeline": "if (( cache_add_tentative( &inst->inst_cache, ec, NULL ) < 0 ) ) {"
    },
    {
        "line": 723,
        "fullcodeline": "if (ldap_result_code != LDAP_SUCCESS) {"
    },
    {
        "line": 728,
        "fullcodeline": "if (!entryrdn_get_switch()) /* subtree-rename: off */"
    },
    {
        "line": 742,
        "fullcodeline": "if(slapi_sdn_get_dn(dn_newsuperiordn)!=NULL) {"
    },
    {
        "line": 767,
        "fullcodeline": "if ( slapi_op_abandoned( pb ) ) {"
    },
    {
        "line": 774,
        "fullcodeline": "if ( entry_apply_mods( ec->ep_entry, slapi_mods_get_ldapmods_byref(&smods_generated) ) != 0 )"
    },
    {
        "line": 785,
        "fullcodeline": "if (slapi_mods_get_num_mods(&smods_generated_wsi)>0)"
    },
    {
        "line": 803,
        "fullcodeline": "if (slapi_mods_get_num_mods(&smods_operation_wsi)>0)"
    },
    {
        "line": 814,
        "fullcodeline": "if ( slapi_entry_schema_check( pb, ec->ep_entry ) != 0 ) {"
    },
    {
        "line": 821,
        "fullcodeline": "if (slapi_mods_get_num_mods(&smods_operation_wsi)>0)"
    },
    {
        "line": 841,
        "fullcodeline": "if(slapi_sdn_get_dn(dn_newsuperiordn)!=NULL)"
    },
    {
        "line": 871,
        "fullcodeline": "if (is_resurect_operation && parententry) {"
    },
    {
        "line": 887,
        "fullcodeline": "if (slapi_entry_has_children_ext(e->ep_entry, 1)) {"
    },
    {
        "line": 936,
        "fullcodeline": "if ( (original_entry = backentry_dup( ec )) == NULL ) {"
    },
    {
        "line": 941,
        "fullcodeline": "if ( (original_targetentry = slapi_entry_dup(target_entry)) == NULL ) {"
    },
    {
        "line": 957,
        "fullcodeline": "if (SLAPI_PLUGIN_NOOP == retval) {"
    },
    {
        "line": 961,
        "fullcodeline": "if (!ldap_result_code) {"
    },
    {
        "line": 964,
        "fullcodeline": "if (!opreturn) {"
    },
    {
        "line": 967,
        "fullcodeline": "if (!opreturn) {"
    },
    {
        "line": 986,
        "fullcodeline": "slapi_entry_get_dn(e->ep_entry), slapi_entry_get_dn(ec->ep_entry), retval);"
    },
    {
        "line": 987,
        "fullcodeline": "if (LDBM_OS_ERR_IS_DISKFULL(retval)) disk_full = 1;"
    },
    {
        "line": 1033,
        "fullcodeline": "slapi_ldap_value_free( rdns );"
    },
    {
        "line": 1045,
        "fullcodeline": "if (DB_LOCK_DEADLOCK == retval)"
    },
    {
        "line": 1091,
        "fullcodeline": "if (retval != 0) {"
    },
    {
        "line": 1111,
        "fullcodeline": "if (retval != 0) {"
    },
    {
        "line": 1139,
        "fullcodeline": "if (retval == DB_RUNRECOVERY || LDBM_OS_ERR_IS_DISKFULL(retval))"
    },
    {
        "line": 1147,
        "fullcodeline": "if (-1 == ruv_c_init) {"
    },
    {
        "line": 1160,
        "fullcodeline": "if (DB_LOCK_DEADLOCK == retval) {"
    },
    {
        "line": 1164,
        "fullcodeline": "if (0 != retval) {"
    },
    {
        "line": 1240,
        "fullcodeline": "if (entryrdn_get_switch()) /* subtree-rename: on */"
    },
    {
        "line": 1269,
        "fullcodeline": "for (i = 0; child_dns[i] != NULL; i++) {"
    },
    {
        "line": 1300,
        "fullcodeline": "if (entryrdn_get_switch()) /* subtree-rename: on */"
    },
    {
        "line": 1322,
        "fullcodeline": "for (i = 0; child_dns[i] != NULL; i++) {"
    },
    {
        "line": 1345,
        "fullcodeline": "int val = 0;"
    },
    {
        "line": 1346,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_RESULT_CODE, &val);"
    },
    {
        "line": 1353,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_PLUGIN_OPRETURN, &val );"
    },
    {
        "line": 1375,
        "fullcodeline": "dblayer_txn_abort(be, &txn); /* abort crashes in case disk full */"
    },
    {
        "line": 1377,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_TXN, parent_txn);"
    },
    {
        "line": 1380,
        "fullcodeline": "retval = SLAPI_FAIL_GENERAL;"
    },
    {
        "line": 1398,
        "fullcodeline": "slapi_entry_get_dn(ec->ep_entry), ldap_result_code, retval);"
    },
    {
        "line": 1421,
        "fullcodeline": "if (retval && cache_is_in_cache(&inst->inst_cache, ec)) {"
    },
    {
        "line": 1454,
        "fullcodeline": "ldap_result_code = LDAP_SUCCESS;"
    },
    {
        "line": 217,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 222,
        "fullcodeline": "CACHE_REMOVE(&inst->inst_cache, ec);"
    },
    {
        "line": 242,
        "fullcodeline": "slapi_entry_free(ent);"
    },
    {
        "line": 243,
        "fullcodeline": "slapi_pblock_set( pb, SLAPI_MODRDN_EXISTING_ENTRY, NULL );"
    },
    {
        "line": 271,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 277,
        "fullcodeline": "modify_term(&ruv_c, be);"
    },
    {
        "line": 278,
        "fullcodeline": "ruv_c_init = 0;"
    },
    {
        "line": 411,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_RESULT_CODE, &ldap_result_code);"
    },
    {
        "line": 412,
        "fullcodeline": "rc= plugin_call_plugins(pb, SLAPI_PLUGIN_BE_PRE_MODRDN_FN);"
    },
    {
        "line": 447,
        "fullcodeline": "ldap_result_code= -1;"
    },
    {
        "line": 451,
        "fullcodeline": "!is_resurect_operation) {"
    },
    {
        "line": 452,
        "fullcodeline": "ldap_result_code = LDAP_UNWILLING_TO_PERFORM;"
    },
    {
        "line": 453,
        "fullcodeline": "ldap_result_message = \"Operation not allowed on tombstone entry.\";"
    },
    {
        "line": 454,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_FATAL, \"ldbm_back_modrdn\","
    },
    {
        "line": 463,
        "fullcodeline": "if((entry != NULL) &&"
    },
    {
        "line": 486,
        "fullcodeline": "slapi_pblock_get (pb, SLAPI_MODRDN_NEWSUPERIOR_ADDRESS, &newsuperior_addr);"
    },
    {
        "line": 490,
        "fullcodeline": "newparententry = find_entry2modify_only( pb, be, newsuperior_addr, &txn );"
    },
    {
        "line": 491,
        "fullcodeline": "slapi_ch_free_string(&newsuperior_addr->uniqueid);"
    },
    {
        "line": 492,
        "fullcodeline": "modify_init(&newparent_modify_context,newparententry);"
    },
    {
        "line": 532,
        "fullcodeline": "slapi_pblock_set( pb, SLAPI_MODRDN_NEWSUPERIOR_SDN, dn_newsuperiordn );"
    },
    {
        "line": 604,
        "fullcodeline": "slapi_entry_has_children( e->ep_entry ))"
    },
    {
        "line": 606,
        "fullcodeline": "ldap_result_code = LDAP_NOT_ALLOWED_ON_NONLEAF;"
    },
    {
        "line": 621,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 643,
        "fullcodeline": "slapi_rdn_init_all_sdn(&srdn, &dn_newdn);"
    },
    {
        "line": 644,
        "fullcodeline": "slapi_entry_set_srdn(ec->ep_entry, &srdn);"
    },
    {
        "line": 645,
        "fullcodeline": "slapi_rdn_done(&srdn);"
    },
    {
        "line": 649,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_REPL, \"ldbm_back_modrdn\","
    },
    {
        "line": 651,
        "fullcodeline": "slapi_entry_attr_delete(ec->ep_entry, SLAPI_ATTR_VALUE_PARENT_UNIQUEID);"
    },
    {
        "line": 652,
        "fullcodeline": "slapi_entry_attr_delete(ec->ep_entry, SLAPI_ATTR_TOMBSTONE_CSN);"
    },
    {
        "line": 653,
        "fullcodeline": "slapi_entry_delete_string(ec->ep_entry, SLAPI_ATTR_OBJECTCLASS, SLAPI_ATTR_VALUE_TOMBSTONE);"
    },
    {
        "line": 661,
        "fullcodeline": "slapi_entry_add_string(ec->ep_entry, \"nsds5ReplConflict\", \"deletedEntryHasChildren\");"
    },
    {
        "line": 664,
        "fullcodeline": "slapi_entry_clear_flag(ec->ep_entry, SLAPI_ENTRY_FLAG_TOMBSTONE);"
    },
    {
        "line": 733,
        "fullcodeline": "slapi_mods_add( &smods_generated, LDAP_MOD_DELETE, LDBM_ENTRYDN_STR,"
    },
    {
        "line": 735,
        "fullcodeline": "slapi_mods_add( &smods_generated, LDAP_MOD_REPLACE, LDBM_ENTRYDN_STR,"
    },
    {
        "line": 743,
        "fullcodeline": "char buf[40]; /* Enough for an ID */"
    },
    {
        "line": 765,
        "fullcodeline": "operation->o_status = SLAPI_OP_STATUS_WILL_COMPLETE;"
    },
    {
        "line": 776,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 777,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_TRACE, \"ldbm_modrdn: entry_apply_mods failed for entry %s\\n\","
    },
    {
        "line": 815,
        "fullcodeline": "ldap_result_code = LDAP_OBJECT_CLASS_VIOLATION;"
    },
    {
        "line": 816,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PB_RESULT_TEXT, &ldap_result_message);"
    },
    {
        "line": 872,
        "fullcodeline": "retval = parent_update_on_childchange(&parent_modify_context, PARENTUPDATE_RESURECT, NULL);"
    },
    {
        "line": 937,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 942,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 958,
        "fullcodeline": "not_an_error = 1;"
    },
    {
        "line": 959,
        "fullcodeline": "rc = retval = LDAP_SUCCESS;"
    },
    {
        "line": 962,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_RESULT_CODE, &ldap_result_code);"
    },
    {
        "line": 965,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PLUGIN_OPRETURN, &opreturn);"
    },
    {
        "line": 968,
        "fullcodeline": "slapi_pblock_set( pb, SLAPI_PLUGIN_OPRETURN, ldap_result_code ? &ldap_result_code : &retval );"
    },
    {
        "line": 1000,
        "fullcodeline": "for ( i = 0; rdns[i] != NULL; i++ )"
    },
    {
        "line": 1034,
        "fullcodeline": "if (DB_LOCK_DEADLOCK == retval)"
    },
    {
        "line": 1095,
        "fullcodeline": "MOD_SET_ERROR(ldap_result_code,"
    },
    {
        "line": 1108,
        "fullcodeline": "(const Slapi_DN *)dn_newsuperiordn,"
    },
    {
        "line": 1115,
        "fullcodeline": "MOD_SET_ERROR(ldap_result_code, LDAP_OPERATIONS_ERROR, retry_count);"
    },
    {
        "line": 1116,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_FATAL, \"ldbm_back_modrdn\","
    },
    {
        "line": 1140,
        "fullcodeline": "disk_full = 1;"
    },
    {
        "line": 1148,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_ANY,"
    },
    {
        "line": 1152,
        "fullcodeline": "ldap_result_code = LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 1153,
        "fullcodeline": "retval = 0;"
    },
    {
        "line": 1165,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_ANY,"
    },
    {
        "line": 1171,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 1270,
        "fullcodeline": "CACHE_REMOVE( &inst->inst_dncache, child_dns[i] );"
    },
    {
        "line": 1271,
        "fullcodeline": "CACHE_RETURN( &inst->inst_dncache, &child_dns[i] );"
    },
    {
        "line": 1323,
        "fullcodeline": "CACHE_REMOVE( &inst->inst_dncache, child_dns[i] );"
    },
    {
        "line": 1324,
        "fullcodeline": "CACHE_RETURN( &inst->inst_dncache, &child_dns[i] );"
    },
    {
        "line": 1347,
        "fullcodeline": "if (!val) {"
    },
    {
        "line": 1354,
        "fullcodeline": "if (!val) {"
    },
    {
        "line": 1359,
        "fullcodeline": "if ((retval = plugin_call_plugins(pb, SLAPI_PLUGIN_BE_TXN_POST_MODRDN_FN))) {"
    },
    {
        "line": 1404,
        "fullcodeline": "CACHE_RETURN(&inst->inst_dncache, &bdn);"
    },
    {
        "line": 1422,
        "fullcodeline": "CACHE_REMOVE( &inst->inst_cache, ec );"
    },
    {
        "line": 223,
        "fullcodeline": "if (ent && (ent == ec->ep_entry)){"
    },
    {
        "line": 235,
        "fullcodeline": "if (CACHE_ADD(&inst->inst_cache, e, NULL) < 0) {"
    },
    {
        "line": 252,
        "fullcodeline": "if (cache_add_tentative( &inst->inst_cache, ec, NULL ) < 0) {"
    },
    {
        "line": 322,
        "fullcodeline": "if(slapi_isbitset_int(rc,SLAPI_RTN_BIT_FETCH_EXISTING_DN_ENTRY))"
    },
    {
        "line": 354,
        "fullcodeline": "if(slapi_isbitset_int(rc,SLAPI_RTN_BIT_FETCH_PARENT_ENTRY))"
    },
    {
        "line": 364,
        "fullcodeline": "if(slapi_sdn_get_ndn(dn_newsuperiordn)!=NULL &&"
    },
    {
        "line": 396,
        "fullcodeline": "if(slapi_isbitset_int(rc,SLAPI_RTN_BIT_FETCH_TARGET_ENTRY))"
    },
    {
        "line": 413,
        "fullcodeline": "if (rc < 0) {"
    },
    {
        "line": 456,
        "fullcodeline": "slapi_sdn_get_dn(slapi_entry_get_sdn_const( e->ep_entry )));"
    },
    {
        "line": 465,
        "fullcodeline": "(0 != slapi_sdn_compare((const Slapi_DN *)&dn_newdn,"
    },
    {
        "line": 468,
        "fullcodeline": "ldap_result_code= LDAP_ALREADY_EXISTS;"
    },
    {
        "line": 478,
        "fullcodeline": "oldparent_addr.uniqueid = NULL;"
    },
    {
        "line": 498,
        "fullcodeline": "if ( opcsn == NULL && operation->o_csngen_handler)"
    },
    {
        "line": 506,
        "fullcodeline": "if ( opcsn != NULL )"
    },
    {
        "line": 525,
        "fullcodeline": "if (NULL == dn_newsuperiordn) {"
    },
    {
        "line": 540,
        "fullcodeline": "if (slapi_sdn_get_dn(dn_newsuperiordn))"
    },
    {
        "line": 590,
        "fullcodeline": "if (!(slapi_be_issuffix(pb->pb_backend, sdn)) && !isroot)"
    },
    {
        "line": 650,
        "fullcodeline": "\"Resurrecting an entry %s\\n\", slapi_entry_get_dn(ec->ep_entry));"
    },
    {
        "line": 655,
        "fullcodeline": "if (slapi_entry_attr_delete(ec->ep_entry, SLAPI_ATTR_NSCP_ENTRYDN) != 0){"
    },
    {
        "line": 671,
        "fullcodeline": "Slapi_Attr *sa = NULL;"
    },
    {
        "line": 673,
        "fullcodeline": "const struct berval *svbv = NULL;"
    },
    {
        "line": 676,
        "fullcodeline": "slapi_entry_attr_find(ec->ep_entry, SLAPI_ATTR_OBJECTCLASS, &sa);"
    },
    {
        "line": 677,
        "fullcodeline": "slapi_value_init_string(&sv, \"extensibleobject\");"
    },
    {
        "line": 678,
        "fullcodeline": "svbv = slapi_value_get_berval(&sv);"
    },
    {
        "line": 685,
        "fullcodeline": "value_done(&sv);"
    },
    {
        "line": 688,
        "fullcodeline": "slapi_value_init_string(&sv, \"glue\");"
    },
    {
        "line": 689,
        "fullcodeline": "svbv = slapi_value_get_berval(&sv);"
    },
    {
        "line": 696,
        "fullcodeline": "value_done(&sv);"
    },
    {
        "line": 703,
        "fullcodeline": "if ( 0 != slapi_sdn_compare((const Slapi_DN *)&dn_newdn,"
    },
    {
        "line": 724,
        "fullcodeline": "if (ldap_result_code == LDAP_UNWILLING_TO_PERFORM)"
    },
    {
        "line": 734,
        "fullcodeline": "strlen(backentry_get_ndn(e)), backentry_get_ndn(e));"
    },
    {
        "line": 736,
        "fullcodeline": "strlen(backentry_get_ndn(ec)), backentry_get_ndn(ec));"
    },
    {
        "line": 745,
        "fullcodeline": "if (parententry != NULL) {"
    },
    {
        "line": 749,
        "fullcodeline": "if (newparententry != NULL) {"
    },
    {
        "line": 778,
        "fullcodeline": "slapi_entry_get_dn_const(ec->ep_entry), 0, 0);"
    },
    {
        "line": 787,
        "fullcodeline": "if (entry_apply_mods_wsi(ec->ep_entry, &smods_generated_wsi, operation_get_csn(operation), is_replicated_operation)!=0)"
    },
    {
        "line": 805,
        "fullcodeline": "if (entry_apply_mods_wsi(ec->ep_entry, &smods_operation_wsi, operation_get_csn(operation), is_replicated_operation)!=0)"
    },
    {
        "line": 823,
        "fullcodeline": "if (slapi_mods_syntax_check(pb, smods_generated_wsi.mods, 0) != 0)"
    },
    {
        "line": 889,
        "fullcodeline": "if (entryrdn_get_switch()) /* subtree-rename: on */"
    },
    {
        "line": 1003,
        "fullcodeline": "Slapi_Value *svp[2];"
    },
    {
        "line": 1005,
        "fullcodeline": "memset(&sv,0,sizeof(Slapi_Value));"
    },
    {
        "line": 1015,
        "fullcodeline": "svp[0] = &sv;"
    },
    {
        "line": 1016,
        "fullcodeline": "svp[1] = NULL;"
    },
    {
        "line": 1017,
        "fullcodeline": "retval = index_addordel_values_sv( be, type, svp, NULL, ec->ep_id, BE_INDEX_ADD, &txn );"
    },
    {
        "line": 1092,
        "fullcodeline": "if (retval == DB_LOCK_DEADLOCK) continue;"
    },
    {
        "line": 1093,
        "fullcodeline": "if (retval == DB_RUNRECOVERY || LDBM_OS_ERR_IS_DISKFULL(retval))"
    },
    {
        "line": 1112,
        "fullcodeline": "if (retval == DB_LOCK_DEADLOCK) continue;"
    },
    {
        "line": 1113,
        "fullcodeline": "if (retval == DB_RUNRECOVERY || LDBM_OS_ERR_IS_DISKFULL(retval))"
    },
    {
        "line": 1118,
        "fullcodeline": "retval, slapi_sdn_get_dn(sdn), slapi_rdn_get_rdn(&newsrdn),"
    },
    {
        "line": 1119,
        "fullcodeline": "slapi_sdn_get_dn(dn_newsuperiordn));"
    },
    {
        "line": 1167,
        "fullcodeline": "(msg = dblayer_strerror( retval )) ? msg : \"\", 0 );"
    },
    {
        "line": 1168,
        "fullcodeline": "if (LDBM_OS_ERR_IS_DISKFULL(retval)) {"
    },
    {
        "line": 1247,
        "fullcodeline": "for (i = 0; child_entries[i] != NULL; i++) {"
    },
    {
        "line": 1306,
        "fullcodeline": "for (i = 0; child_entries[i] != NULL; i++) {"
    },
    {
        "line": 1351,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_RESULT_CODE, &ldap_result_code);"
    },
    {
        "line": 1355,
        "fullcodeline": "opreturn = -1;"
    },
    {
        "line": 1356,
        "fullcodeline": "slapi_pblock_set( pb, SLAPI_PLUGIN_OPRETURN, &opreturn );"
    },
    {
        "line": 1360,
        "fullcodeline": "LDAPDebug1Arg( LDAP_DEBUG_TRACE, \"SLAPI_PLUGIN_BE_TXN_POST_MODRDN_FN plugin \""
    },
    {
        "line": 1371,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PB_RESULT_TEXT, &ldap_result_message);"
    },
    {
        "line": 1406,
        "fullcodeline": "Slapi_DN *ecsdn = slapi_sdn_dup(slapi_entry_get_sdn(ec->ep_entry));"
    },
    {
        "line": 230,
        "fullcodeline": "ent = NULL;"
    },
    {
        "line": 236,
        "fullcodeline": "LDAPDebug1Arg(LDAP_DEBUG_CACHE,"
    },
    {
        "line": 325,
        "fullcodeline": "done_with_pblock_entry(pb,SLAPI_MODRDN_EXISTING_ENTRY); /* Could be through this multiple times */"
    },
    {
        "line": 328,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_MODRDN_NEWRDN, &newrdn);"
    },
    {
        "line": 329,
        "fullcodeline": "slapi_sdn_init_dn_byref(&dn_newrdn, newrdn);"
    },
    {
        "line": 330,
        "fullcodeline": "newdn = moddn_get_newdn(pb,sdn, &dn_newrdn, dn_newsuperiordn, is_tombstone);"
    },
    {
        "line": 331,
        "fullcodeline": "slapi_sdn_set_dn_passin(&dn_newdn,newdn);"
    },
    {
        "line": 332,
        "fullcodeline": "new_addr.sdn = &dn_newdn;"
    },
    {
        "line": 333,
        "fullcodeline": "new_addr.udn = NULL;"
    },
    {
        "line": 335,
        "fullcodeline": "ldap_result_code = slapi_dn_syntax_check(pb,"
    },
    {
        "line": 343,
        "fullcodeline": "new_addr.uniqueid = NULL;"
    },
    {
        "line": 344,
        "fullcodeline": "ldap_result_code= get_copy_of_entry(pb, &new_addr, &txn, SLAPI_MODRDN_EXISTING_ENTRY, 0);"
    },
    {
        "line": 350,
        "fullcodeline": "free_modrdn_existing_entry = 1; /* need to free it */"
    },
    {
        "line": 357,
        "fullcodeline": "done_with_pblock_entry(pb,SLAPI_MODRDN_PARENT_ENTRY); /* Could be through this multiple times */"
    },
    {
        "line": 358,
        "fullcodeline": "oldparent_addr.sdn = &dn_parentdn;"
    },
    {
        "line": 359,
        "fullcodeline": "oldparent_addr.uniqueid = NULL;"
    },
    {
        "line": 360,
        "fullcodeline": "ldap_result_code= get_copy_of_entry(pb, &oldparent_addr, &txn, SLAPI_MODRDN_PARENT_ENTRY, !is_replicated_operation);"
    },
    {
        "line": 365,
        "fullcodeline": "slapi_isbitset_int(rc,SLAPI_RTN_BIT_FETCH_NEWPARENT_ENTRY))"
    },
    {
        "line": 368,
        "fullcodeline": "done_with_pblock_entry(pb,SLAPI_MODRDN_NEWPARENT_ENTRY); /* Could be through this multiple times */"
    },
    {
        "line": 399,
        "fullcodeline": "done_with_pblock_entry(pb,SLAPI_MODRDN_TARGET_ENTRY); /* Could be through this multiple times */"
    },
    {
        "line": 400,
        "fullcodeline": "slapi_pblock_get (pb, SLAPI_TARGET_ADDRESS, &old_addr);"
    },
    {
        "line": 401,
        "fullcodeline": "ldap_result_code= get_copy_of_entry(pb, old_addr, &txn, SLAPI_MODRDN_TARGET_ENTRY, !is_replicated_operation);"
    },
    {
        "line": 431,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PB_RESULT_TEXT, &ldap_result_message);"
    },
    {
        "line": 488,
        "fullcodeline": "newsuperior_addr->uniqueid = slapi_entry_attr_get_charptr(e->ep_entry, SLAPI_ATTR_VALUE_PARENT_UNIQUEID);"
    },
    {
        "line": 504,
        "fullcodeline": "opcsn = entry_assign_operation_csn ( pb, e->ep_entry, parententry ? parententry->ep_entry : NULL );"
    },
    {
        "line": 508,
        "fullcodeline": "entry_set_maxcsn (e->ep_entry, opcsn);"
    },
    {
        "line": 526,
        "fullcodeline": "dn_newsuperiordn = slapi_sdn_dup("
    },
    {
        "line": 593,
        "fullcodeline": "ldap_result_matcheddn = \"NULL\";"
    },
    {
        "line": 594,
        "fullcodeline": "ldap_result_code= LDAP_NO_SUCH_OBJECT;"
    },
    {
        "line": 595,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_TRACE, \"Parent does not exist matched %s, parentdn = %s\\n\","
    },
    {
        "line": 656,
        "fullcodeline": "LDAPDebug(LDAP_DEBUG_REPL, \"Resurrection of %s - Couldn't remove %s\\n\","
    },
    {
        "line": 679,
        "fullcodeline": "if (slapi_attr_value_find(sa, svbv)) { /* not found, so add it */"
    },
    {
        "line": 690,
        "fullcodeline": "if (slapi_attr_value_find(sa, svbv)) { /* not found, so add it */"
    },
    {
        "line": 707,
        "fullcodeline": "ldap_result_code= LDAP_ALREADY_EXISTS;"
    },
    {
        "line": 725,
        "fullcodeline": "ldap_result_message = \"Modification of old rdn attribute type not allowed.\";"
    },
    {
        "line": 746,
        "fullcodeline": "sprintf( buf, \"%lu\", (u_long)parententry->ep_id );"
    },
    {
        "line": 747,
        "fullcodeline": "slapi_mods_add_string(&smods_generated, LDAP_MOD_DELETE, LDBM_PARENTID_STR, buf);"
    },
    {
        "line": 750,
        "fullcodeline": "sprintf( buf, \"%lu\", (u_long)newparententry->ep_id );"
    },
    {
        "line": 751,
        "fullcodeline": "slapi_mods_add_string(&smods_generated, LDAP_MOD_REPLACE, LDBM_PARENTID_STR, buf);"
    },
    {
        "line": 789,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 790,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_TRACE, \"ldbm_modrdn: entry_apply_mods_wsi failed for entry %s\\n\","
    },
    {
        "line": 807,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 808,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_TRACE, \"ldbm_modrdn: entry_apply_mods_wsi (operational attributes) failed for entry %s\\n\","
    },
    {
        "line": 825,
        "fullcodeline": "ldap_result_code = LDAP_INVALID_SYNTAX;"
    },
    {
        "line": 826,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PB_RESULT_TEXT, &ldap_result_message);"
    },
    {
        "line": 847,
        "fullcodeline": "retval = parent_update_on_childchange(&parent_modify_context,"
    },
    {
        "line": 849,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_BACKLDBM, \"ldbm_back_modrdn\","
    },
    {
        "line": 859,
        "fullcodeline": "retval = parent_update_on_childchange(&newparent_modify_context,"
    },
    {
        "line": 861,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_BACKLDBM, \"ldbm_back_modrdn\","
    },
    {
        "line": 874,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_BACKLDBM, \"ldbm_back_modrdn\","
    },
    {
        "line": 915,
        "fullcodeline": "children = moddn_get_children(&txn, pb, be, e, sdn,"
    },
    {
        "line": 1006,
        "fullcodeline": "if ( slapi_rdn2typeval( rdns[i], &type, &sv.bv ) != 0 )"
    },
    {
        "line": 1018,
        "fullcodeline": "if (DB_LOCK_DEADLOCK == retval)"
    },
    {
        "line": 1050,
        "fullcodeline": "else if (0 != retval)"
    },
    {
        "line": 1094,
        "fullcodeline": "disk_full = 1;"
    },
    {
        "line": 1114,
        "fullcodeline": "disk_full = 1;"
    },
    {
        "line": 1169,
        "fullcodeline": "disk_full = 1;"
    },
    {
        "line": 1254,
        "fullcodeline": "CACHE_REMOVE( &inst->inst_cache, child_entries[i] );"
    },
    {
        "line": 1255,
        "fullcodeline": "cache_unlock_entry( &inst->inst_cache, child_entries[i] );"
    },
    {
        "line": 1256,
        "fullcodeline": "CACHE_RETURN( &inst->inst_cache, &child_entries[i] );"
    },
    {
        "line": 1261,
        "fullcodeline": "for (; child_entries[i]!=NULL; i++) {"
    },
    {
        "line": 1307,
        "fullcodeline": "CACHE_REMOVE( &inst->inst_cache, child_entries[i] );"
    },
    {
        "line": 1308,
        "fullcodeline": "cache_unlock_entry( &inst->inst_cache, child_entries[i] );"
    },
    {
        "line": 1309,
        "fullcodeline": "CACHE_RETURN( &inst->inst_cache, &child_entries[i] );"
    },
    {
        "line": 1314,
        "fullcodeline": "for(;child_entries[i]!=NULL;i++) {"
    },
    {
        "line": 1348,
        "fullcodeline": "if (!ldap_result_code) {"
    },
    {
        "line": 1362,
        "fullcodeline": "if (!ldap_result_code) {"
    },
    {
        "line": 1365,
        "fullcodeline": "if (!opreturn) {"
    },
    {
        "line": 1368,
        "fullcodeline": "if (!opreturn) {"
    },
    {
        "line": 238,
        "fullcodeline": "slapi_entry_get_dn_const(e->ep_entry));"
    },
    {
        "line": 254,
        "fullcodeline": "if ( 0 != slapi_sdn_compare((const Slapi_DN *)&dn_newdn,"
    },
    {
        "line": 345,
        "fullcodeline": "if(ldap_result_code==LDAP_OPERATIONS_ERROR ||"
    },
    {
        "line": 371,
        "fullcodeline": "if (slapi_sdn_compare(dn_newsuperiordn, &dn_parentdn) == 0)"
    },
    {
        "line": 402,
        "fullcodeline": "if(ldap_result_code==LDAP_OPERATIONS_ERROR ||"
    },
    {
        "line": 414,
        "fullcodeline": "if (SLAPI_PLUGIN_NOOP == rc) {"
    },
    {
        "line": 422,
        "fullcodeline": "if (!ldap_result_code) {"
    },
    {
        "line": 425,
        "fullcodeline": "if (!opreturn) {"
    },
    {
        "line": 428,
        "fullcodeline": "if (!opreturn) {"
    },
    {
        "line": 466,
        "fullcodeline": "(const Slapi_DN *)sdn)))"
    },
    {
        "line": 529,
        "fullcodeline": "slapi_sdn_copy(slapi_entry_get_sdn_const(newparententry->ep_entry),"
    },
    {
        "line": 544,
        "fullcodeline": "if (!slapi_be_issuffix(pb->pb_backend, &dn_newdn))"
    },
    {
        "line": 569,
        "fullcodeline": "ldap_result_code = plugin_call_acl_plugin(pb, newparententry->ep_entry, NULL, NULL, SLAPI_ACL_MODDN, ACLPLUGIN_ACCESS_DEFAULT, &errbuf);"
    },
    {
        "line": 596,
        "fullcodeline": "ldap_result_matcheddn, slapi_sdn_get_ndn(&dn_parentdn), 0 );"
    },
    {
        "line": 657,
        "fullcodeline": "slapi_entry_get_dn(ec->ep_entry), SLAPI_ATTR_NSCP_ENTRYDN, 0);"
    },
    {
        "line": 683,
        "fullcodeline": "slapi_attr_add_value(sa, &sv);"
    },
    {
        "line": 694,
        "fullcodeline": "slapi_attr_add_value(sa, &sv);"
    },
    {
        "line": 704,
        "fullcodeline": "(const Slapi_DN *)sdn) ) {"
    },
    {
        "line": 791,
        "fullcodeline": "slapi_entry_get_dn_const(ec->ep_entry), 0, 0);"
    },
    {
        "line": 809,
        "fullcodeline": "slapi_entry_get_dn_const(ec->ep_entry), 0, 0);"
    },
    {
        "line": 878,
        "fullcodeline": "slapi_entry_get_dn_const(ec->ep_entry), retval);"
    },
    {
        "line": 920,
        "fullcodeline": "children = moddn_get_children(&txn, pb, be, e, sdn,"
    },
    {
        "line": 928,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_FATAL, \"ldbm_back_modrdn\","
    },
    {
        "line": 1008,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_ANY, \"modrdn: rdn2typeval (%s) failed\\n\","
    },
    {
        "line": 1011,
        "fullcodeline": "MOD_SET_ERROR(ldap_result_code,"
    },
    {
        "line": 1052,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_ANY, \"modrdn: \""
    },
    {
        "line": 1056,
        "fullcodeline": "MOD_SET_ERROR(ldap_result_code,"
    },
    {
        "line": 1262,
        "fullcodeline": "cache_unlock_entry( &inst->inst_cache, child_entries[i] );"
    },
    {
        "line": 1263,
        "fullcodeline": "CACHE_RETURN( &inst->inst_cache, &(child_entries[i]) );"
    },
    {
        "line": 1315,
        "fullcodeline": "cache_unlock_entry( &inst->inst_cache, child_entries[i] );"
    },
    {
        "line": 1316,
        "fullcodeline": "CACHE_RETURN( &inst->inst_cache, &(child_entries[i]) );"
    },
    {
        "line": 1349,
        "fullcodeline": "ldap_result_code = LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 1363,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_RESULT_CODE, &ldap_result_code);"
    },
    {
        "line": 1366,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PLUGIN_OPRETURN, &opreturn);"
    },
    {
        "line": 1369,
        "fullcodeline": "slapi_pblock_set( pb, SLAPI_PLUGIN_OPRETURN, ldap_result_code ? &ldap_result_code : &retval );"
    },
    {
        "line": 1408,
        "fullcodeline": "bdn = backdn_init(ecsdn, ec->ep_id, 0);"
    },
    {
        "line": 256,
        "fullcodeline": "LDAPDebug1Arg(LDAP_DEBUG_ANY,"
    },
    {
        "line": 259,
        "fullcodeline": "ldap_result_code = LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 336,
        "fullcodeline": "(char *)slapi_sdn_get_ndn(&dn_newdn), 1);"
    },
    {
        "line": 339,
        "fullcodeline": "ldap_result_code = LDAP_INVALID_DN_SYNTAX;"
    },
    {
        "line": 340,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PB_RESULT_TEXT, &ldap_result_message);"
    },
    {
        "line": 346,
        "fullcodeline": "ldap_result_code==LDAP_INVALID_DN_SYNTAX)"
    },
    {
        "line": 373,
        "fullcodeline": "slapi_sdn_done(dn_newsuperiordn);"
    },
    {
        "line": 403,
        "fullcodeline": "ldap_result_code==LDAP_INVALID_DN_SYNTAX)"
    },
    {
        "line": 415,
        "fullcodeline": "not_an_error = 1;"
    },
    {
        "line": 416,
        "fullcodeline": "rc = LDAP_SUCCESS;"
    },
    {
        "line": 423,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_RESULT_CODE, &ldap_result_code);"
    },
    {
        "line": 426,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PLUGIN_OPRETURN, &opreturn);"
    },
    {
        "line": 429,
        "fullcodeline": "slapi_pblock_set( pb, SLAPI_PLUGIN_OPRETURN, ldap_result_code ? &ldap_result_code : &rc );"
    },
    {
        "line": 527,
        "fullcodeline": "slapi_entry_get_sdn_const(newparententry->ep_entry));"
    },
    {
        "line": 547,
        "fullcodeline": "int err = 0;"
    },
    {
        "line": 550,
        "fullcodeline": "slapi_sdn_init(&ancestorsdn);"
    },
    {
        "line": 551,
        "fullcodeline": "ancestorentry= dn2ancestor(be,&dn_newdn,&ancestorsdn,&txn,&err);"
    },
    {
        "line": 552,
        "fullcodeline": "CACHE_RETURN( &inst->inst_cache, &ancestorentry );"
    },
    {
        "line": 553,
        "fullcodeline": "ldap_result_matcheddn= slapi_ch_strdup((char *) slapi_sdn_get_dn(&ancestorsdn));"
    },
    {
        "line": 554,
        "fullcodeline": "ldap_result_code= LDAP_NO_SUCH_OBJECT;"
    },
    {
        "line": 555,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_TRACE, \"ldbm_back_modrdn: New superior \""
    },
    {
        "line": 560,
        "fullcodeline": "slapi_sdn_done(&ancestorsdn);"
    },
    {
        "line": 570,
        "fullcodeline": "if (ldap_result_code != LDAP_SUCCESS) {"
    },
    {
        "line": 577,
        "fullcodeline": "ldap_result_code = plugin_call_acl_plugin (pb, newparententry->ep_entry, NULL, NULL, SLAPI_ACL_ADD, ACLPLUGIN_ACCESS_DEFAULT, &errbuf );"
    },
    {
        "line": 709,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_CACHE, \"ldbm_back_modrdn\","
    },
    {
        "line": 912,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_BACKLDBM, \"ldbm_back_modrdn\","
    },
    {
        "line": 929,
        "fullcodeline": "\"%s has NO children\\n\", slapi_entry_get_dn(e->ep_entry));"
    },
    {
        "line": 1010,
        "fullcodeline": "if (LDBM_OS_ERR_IS_DISKFULL(retval)) disk_full = 1;"
    },
    {
        "line": 1054,
        "fullcodeline": "(msg = dblayer_strerror( retval )) ? msg : \"\", 0 );"
    },
    {
        "line": 1055,
        "fullcodeline": "if (LDBM_OS_ERR_IS_DISKFULL(retval)) disk_full = 1;"
    },
    {
        "line": 1063,
        "fullcodeline": "retval = modify_update_all(be, pb, &newparent_modify_context, &txn);"
    },
    {
        "line": 1064,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_BACKLDBM, \"ldbm_back_modrdn\","
    },
    {
        "line": 1249,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_CACHE, \"ldbm_back_modrdn\","
    },
    {
        "line": 255,
        "fullcodeline": "(const Slapi_DN *)sdn) ) {"
    },
    {
        "line": 258,
        "fullcodeline": "slapi_entry_get_dn_const(ec->ep_entry));"
    },
    {
        "line": 391,
        "fullcodeline": "ldap_result_code= get_copy_of_entry(pb, newsuperior_addr, &txn, SLAPI_MODRDN_NEWPARENT_ENTRY, !is_replicated_operation);"
    },
    {
        "line": 557,
        "fullcodeline": "ldap_result_matcheddn == NULL ? \"NULL\" :"
    },
    {
        "line": 559,
        "fullcodeline": "slapi_sdn_get_ndn(dn_newsuperiordn), 0 );"
    },
    {
        "line": 571,
        "fullcodeline": "ldap_result_message = errbuf;"
    },
    {
        "line": 572,
        "fullcodeline": "LDAPDebug(LDAP_DEBUG_TRACE, \"No 'moddn' access to new superior.\\n\", 0, 0, 0);"
    },
    {
        "line": 578,
        "fullcodeline": "if (ldap_result_code != LDAP_SUCCESS) {"
    },
    {
        "line": 681,
        "fullcodeline": "value_update_csn(&sv, CSN_TYPE_VALUE_UPDATED, opcsn);"
    },
    {
        "line": 692,
        "fullcodeline": "value_update_csn(&sv, CSN_TYPE_VALUE_UPDATED, opcsn);"
    },
    {
        "line": 711,
        "fullcodeline": "conn_id, op_id, slapi_entry_get_dn(ec->ep_entry));"
    },
    {
        "line": 913,
        "fullcodeline": "\"%s has children\\n\", slapi_entry_get_dn(e->ep_entry));"
    },
    {
        "line": 1023,
        "fullcodeline": "else if (retval != 0 )"
    },
    {
        "line": 1067,
        "fullcodeline": "if (DB_LOCK_DEADLOCK == retval)"
    },
    {
        "line": 1072,
        "fullcodeline": "if (0 != retval)"
    },
    {
        "line": 1410,
        "fullcodeline": "CACHE_ADD( &inst->inst_dncache, bdn, NULL );"
    },
    {
        "line": 1411,
        "fullcodeline": "CACHE_RETURN(&inst->inst_dncache, &bdn);"
    },
    {
        "line": 1412,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_CACHE, \"ldbm_back_modrdn\","
    },
    {
        "line": 579,
        "fullcodeline": "ldap_result_message = errbuf;"
    },
    {
        "line": 580,
        "fullcodeline": "LDAPDebug(LDAP_DEBUG_TRACE, \"No 'add' access to new superior.\\n\", 0, 0, 0);"
    },
    {
        "line": 1025,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_ANY, \"modrdn: could not add new value to index, err=%d %s\\n\","
    },
    {
        "line": 1028,
        "fullcodeline": "MOD_SET_ERROR(ldap_result_code,"
    },
    {
        "line": 1074,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_ANY, \"modrdn: \""
    },
    {
        "line": 1079,
        "fullcodeline": "MOD_SET_ERROR(ldap_result_code,"
    },
    {
        "line": 1413,
        "fullcodeline": "\"set %s to dn cache\\n\", slapi_sdn_get_dn(sdn));"
    },
    {
        "line": 382,
        "fullcodeline": "slapi_pblock_get (pb, SLAPI_MODRDN_NEWSUPERIOR_ADDRESS,"
    },
    {
        "line": 1026,
        "fullcodeline": "retval, (msg = dblayer_strerror( retval )) ? msg : \"\", 0 );"
    },
    {
        "line": 1027,
        "fullcodeline": "if (LDBM_OS_ERR_IS_DISKFULL(retval)) disk_full = 1;"
    },
    {
        "line": 1076,
        "fullcodeline": "(msg = dblayer_strerror( retval )) ? msg : \"\","
    },
    {
        "line": 1078,
        "fullcodeline": "if (LDBM_OS_ERR_IS_DISKFULL(retval)) disk_full = 1;"
    },
    {
        "line": 387,
        "fullcodeline": "my_addr.sdn = dn_newsuperiordn;"
    },
    {
        "line": 388,
        "fullcodeline": "my_addr.uniqueid = NULL;"
    },
    {
        "line": 389,
        "fullcodeline": "newsuperior_addr = &my_addr;"
    }
]