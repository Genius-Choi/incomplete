[
    {
        "line": 8,
        "fullcodeline": "} candidates[] = {"
    },
    {
        "line": 12,
        "fullcodeline": "PR_snprintf(buffer, buflen, \"%s (\", DEFBE_NO_SUCH_SUFFIX);"
    },
    {
        "line": 14,
        "fullcodeline": "dnidx--; /* last rdn */"
    },
    {
        "line": 27,
        "fullcodeline": "PL_strcat(buffer, dns[dnidx]);"
    },
    {
        "line": 28,
        "fullcodeline": "PL_strcat(buffer, \")\");"
    },
    {
        "line": 13,
        "fullcodeline": "for (dnidx = 0; dns[dnidx]; dnidx++) ; /* finding the last */"
    },
    {
        "line": 15,
        "fullcodeline": "for (sidx = 0; candidates[sidx].suffix; sidx++) {"
    },
    {
        "line": 9,
        "fullcodeline": "{\"dc=\", 3}, /* dc could be repeated.  otherwise the last rdn is used. */"
    },
    {
        "line": 10,
        "fullcodeline": "{NULL, 0}"
    },
    {
        "line": 16,
        "fullcodeline": "if (!PL_strncasecmp(dns[dnidx], candidates[sidx].suffix, candidates[sidx].size)) {"
    },
    {
        "line": 18,
        "fullcodeline": "PL_strcat(buffer, dns[++dnidx]); /* the first \"dn=\", e.g. */"
    },
    {
        "line": 23,
        "fullcodeline": "PL_strcat(buffer, \")\");"
    },
    {
        "line": 17,
        "fullcodeline": "while (!PL_strncasecmp(dns[--dnidx], candidates[sidx].suffix, candidates[sidx].size)) ;"
    },
    {
        "line": 19,
        "fullcodeline": "for (++dnidx; dns[dnidx]; dnidx++) {"
    },
    {
        "line": 20,
        "fullcodeline": "PL_strcat(buffer, \",\");"
    },
    {
        "line": 21,
        "fullcodeline": "PL_strcat(buffer, dns[dnidx]);"
    }
]