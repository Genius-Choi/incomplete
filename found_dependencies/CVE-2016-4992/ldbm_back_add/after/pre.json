[
    {
        "line": 5,
        "fullcodeline": "ldbm_instance *inst = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "const char *dn = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "Slapi_Entry\t*e = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "struct backentry *tombstoneentry = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "struct backentry *addingentry = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "struct backentry *parententry = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "struct backentry *originalentry = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "struct backentry *tmpentry = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "char *errbuf= NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "int retval = -1;"
    },
    {
        "line": 21,
        "fullcodeline": "int\tldap_result_code = LDAP_SUCCESS;"
    },
    {
        "line": 22,
        "fullcodeline": "char *ldap_result_message = NULL;"
    },
    {
        "line": 23,
        "fullcodeline": "char *ldap_result_matcheddn = NULL;"
    },
    {
        "line": 24,
        "fullcodeline": "int\tretry_count = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "int\tdisk_full = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "modify_context parent_modify_c = {0};"
    },
    {
        "line": 27,
        "fullcodeline": "modify_context ruv_c = {0};"
    },
    {
        "line": 28,
        "fullcodeline": "int parent_found = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "int ruv_c_init = 0;"
    },
    {
        "line": 30,
        "fullcodeline": "int rc = 0;"
    },
    {
        "line": 31,
        "fullcodeline": "int addingentry_id_assigned = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "Slapi_DN *sdn = NULL;"
    },
    {
        "line": 35,
        "fullcodeline": "int is_replicated_operation= 0;"
    },
    {
        "line": 36,
        "fullcodeline": "int is_resurect_operation= 0;"
    },
    {
        "line": 37,
        "fullcodeline": "int is_tombstone_operation= 0;"
    },
    {
        "line": 38,
        "fullcodeline": "int is_fixup_operation= 0;"
    },
    {
        "line": 39,
        "fullcodeline": "int is_remove_from_cache= 0;"
    },
    {
        "line": 40,
        "fullcodeline": "int is_ruv = 0;\t\t\t\t /* True if the current entry is RUV */"
    },
    {
        "line": 41,
        "fullcodeline": "CSN *opcsn = NULL;"
    },
    {
        "line": 42,
        "fullcodeline": "entry_address addr = {0};"
    },
    {
        "line": 43,
        "fullcodeline": "int not_an_error = 0;"
    },
    {
        "line": 44,
        "fullcodeline": "int parent_switched = 0;"
    },
    {
        "line": 45,
        "fullcodeline": "int noabort = 1;"
    },
    {
        "line": 46,
        "fullcodeline": "int myrc = 0;"
    },
    {
        "line": 49,
        "fullcodeline": "int result_sent = 0;"
    },
    {
        "line": 53,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_OPERATION_ID, &op_id);"
    },
    {
        "line": 54,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_PLUGIN_PRIVATE, &li );"
    },
    {
        "line": 55,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_ADD_ENTRY, &e );"
    },
    {
        "line": 56,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_REQUESTOR_ISROOT, &isroot );"
    },
    {
        "line": 57,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_MANAGEDSAIT, &managedsait );"
    },
    {
        "line": 58,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_TXN, (void**)&parent_txn );"
    },
    {
        "line": 59,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_OPERATION, &operation );"
    },
    {
        "line": 60,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_IS_REPLICATED_OPERATION, &is_replicated_operation );"
    },
    {
        "line": 61,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_BACKEND, &be);"
    },
    {
        "line": 63,
        "fullcodeline": "is_resurect_operation= operation_is_flag_set(operation,OP_FLAG_RESURECT_ENTRY);"
    },
    {
        "line": 64,
        "fullcodeline": "is_tombstone_operation= operation_is_flag_set(operation,OP_FLAG_TOMBSTONE_ENTRY);"
    },
    {
        "line": 65,
        "fullcodeline": "is_fixup_operation = operation_is_flag_set(operation, OP_FLAG_REPL_FIXUP);"
    },
    {
        "line": 66,
        "fullcodeline": "is_ruv = operation_is_flag_set(operation, OP_FLAG_REPL_RUV);"
    },
    {
        "line": 67,
        "fullcodeline": "is_remove_from_cache = operation_is_flag_set(operation, OP_FLAG_NEVER_CACHE);"
    },
    {
        "line": 69,
        "fullcodeline": "inst = (ldbm_instance *) be->be_instance_info;"
    },
    {
        "line": 80,
        "fullcodeline": "slapi_sdn_init(&parentsdn);"
    },
    {
        "line": 83,
        "fullcodeline": "slapi_entry_delete_values( e, hassubordinates, NULL );"
    },
    {
        "line": 84,
        "fullcodeline": "slapi_entry_delete_values( e, numsubordinates, NULL );"
    },
    {
        "line": 86,
        "fullcodeline": "dblayer_txn_init(li,&txn);"
    },
    {
        "line": 114,
        "fullcodeline": "rc= 0;"
    },
    {
        "line": 144,
        "fullcodeline": "txn.back_txn_txn = NULL; /* ready to create the child transaction */"
    },
    {
        "line": 1050,
        "fullcodeline": "slapi_pblock_set( pb, SLAPI_ENTRY_PRE_OP, NULL );"
    },
    {
        "line": 1051,
        "fullcodeline": "slapi_pblock_set( pb, SLAPI_ENTRY_POST_OP, slapi_entry_dup( addingentry->ep_entry ));"
    },
    {
        "line": 1123,
        "fullcodeline": "retval = dblayer_txn_commit(be, &txn);"
    },
    {
        "line": 1125,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_TXN, parent_txn);"
    },
    {
        "line": 1135,
        "fullcodeline": "noabort = 1;"
    },
    {
        "line": 1137,
        "fullcodeline": "rc= 0;"
    },
    {
        "line": 1291,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_RESULT_CODE, &ldap_result_code);"
    },
    {
        "line": 1293,
        "fullcodeline": "plugin_call_plugins (pb, SLAPI_PLUGIN_BE_POST_ADD_FN);"
    },
    {
        "line": 1297,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_BACKLDBM, \"ldbm_back_add\","
    },
    {
        "line": 1300,
        "fullcodeline": "myrc = modify_term(&parent_modify_c,be);"
    },
    {
        "line": 1301,
        "fullcodeline": "done_with_pblock_entry(pb,SLAPI_ADD_EXISTING_DN_ENTRY);"
    },
    {
        "line": 1302,
        "fullcodeline": "done_with_pblock_entry(pb,SLAPI_ADD_EXISTING_UNIQUEID_ENTRY);"
    },
    {
        "line": 1303,
        "fullcodeline": "done_with_pblock_entry(pb,SLAPI_ADD_PARENT_ENTRY);"
    },
    {
        "line": 1318,
        "fullcodeline": "backentry_free(&originalentry);"
    },
    {
        "line": 1319,
        "fullcodeline": "backentry_free(&tmpentry);"
    },
    {
        "line": 1320,
        "fullcodeline": "slapi_sdn_done(&parentsdn);"
    },
    {
        "line": 1321,
        "fullcodeline": "slapi_ch_free( (void**)&ldap_result_matcheddn );"
    },
    {
        "line": 1322,
        "fullcodeline": "slapi_ch_free( (void**)&errbuf );"
    },
    {
        "line": 50,
        "fullcodeline": "if (slapi_pblock_get(pb, SLAPI_CONN_ID, &conn_id) < 0) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (inst && inst->inst_ref_count) {"
    },
    {
        "line": 125,
        "fullcodeline": "if ( slapi_op_abandoned( pb ) ) {"
    },
    {
        "line": 145,
        "fullcodeline": "for (retry_count = 0; retry_count < RETRY_TIMES; retry_count++) {"
    },
    {
        "line": 1039,
        "fullcodeline": "if (retry_count == RETRY_TIMES) {"
    },
    {
        "line": 1103,
        "fullcodeline": "if ((retval = plugin_call_plugins(pb, SLAPI_PLUGIN_BE_TXN_POST_ADD_FN))) {"
    },
    {
        "line": 1126,
        "fullcodeline": "if (0 != retval)"
    },
    {
        "line": 1145,
        "fullcodeline": "if (rc == DB_RUNRECOVERY) {"
    },
    {
        "line": 1304,
        "fullcodeline": "if (ldap_result_code == -1) {"
    },
    {
        "line": 51,
        "fullcodeline": "conn_id = 0; /* connection is NULL */"
    },
    {
        "line": 71,
        "fullcodeline": "slapi_counter_increment(inst->inst_ref_count);"
    },
    {
        "line": 90,
        "fullcodeline": "txn.back_txn_txn = parent_txn;"
    },
    {
        "line": 123,
        "fullcodeline": "operation->o_status = SLAPI_OP_STATUS_WILL_COMPLETE;"
    },
    {
        "line": 126,
        "fullcodeline": "ldap_result_code = -1; /* needs to distinguish from \"success\" */"
    },
    {
        "line": 320,
        "fullcodeline": "noabort = 0;"
    },
    {
        "line": 323,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_TXN, txn.back_txn_txn);"
    },
    {
        "line": 792,
        "fullcodeline": "retval = plugin_call_plugins(pb, SLAPI_PLUGIN_BE_TXN_PRE_ADD_FN);"
    },
    {
        "line": 818,
        "fullcodeline": "retval = id2entry_add_ext(be, addingentry, &txn, 1, &myrc);"
    },
    {
        "line": 1041,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_ANY, \"Retry count exceeded in add\\n\", 0, 0, 0 );"
    },
    {
        "line": 1042,
        "fullcodeline": "ldap_result_code= LDAP_BUSY;"
    },
    {
        "line": 1057,
        "fullcodeline": "retval = cache_replace(&inst->inst_cache, tombstoneentry, addingentry);"
    },
    {
        "line": 1084,
        "fullcodeline": "myrc = modify_switch_entries(&parent_modify_c,be);"
    },
    {
        "line": 1085,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_BACKLDBM, \"ldbm_back_add\","
    },
    {
        "line": 1104,
        "fullcodeline": "int opreturn = 0;"
    },
    {
        "line": 1105,
        "fullcodeline": "LDAPDebug1Arg( LDAP_DEBUG_TRACE, \"SLAPI_PLUGIN_BE_TXN_POST_ADD_FN plugin \""
    },
    {
        "line": 1114,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PLUGIN_OPRETURN, &opreturn);"
    },
    {
        "line": 1118,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PB_RESULT_TEXT, &ldap_result_message);"
    },
    {
        "line": 1128,
        "fullcodeline": "ADD_SET_ERROR(ldap_result_code, LDAP_OPERATIONS_ERROR, retry_count);"
    },
    {
        "line": 1143,
        "fullcodeline": "next_id_return( be, addingentry->ep_id );"
    },
    {
        "line": 1146,
        "fullcodeline": "dblayer_remember_disk_filled(li);"
    },
    {
        "line": 1147,
        "fullcodeline": "ldbm_nasty(\"Add\",80,rc);"
    },
    {
        "line": 1148,
        "fullcodeline": "disk_full = 1;"
    },
    {
        "line": 1158,
        "fullcodeline": "myrc = modify_unswitch_entries(&parent_modify_c, be);"
    },
    {
        "line": 1159,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_BACKLDBM, \"ldbm_back_add\","
    },
    {
        "line": 1179,
        "fullcodeline": "rc = return_on_disk_full(li);"
    },
    {
        "line": 1295,
        "fullcodeline": "modify_term(&ruv_c, be);"
    },
    {
        "line": 1306,
        "fullcodeline": "ldap_result_code = LDAP_NO_SUCH_OBJECT;"
    },
    {
        "line": 1307,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_RESULT_CODE, &ldap_result_code);"
    },
    {
        "line": 73,
        "fullcodeline": "LDAPDebug1Arg(LDAP_DEBUG_ANY,"
    },
    {
        "line": 92,
        "fullcodeline": "parent_txn = txn.back_txn_txn;"
    },
    {
        "line": 93,
        "fullcodeline": "slapi_pblock_set( pb, SLAPI_TXN, parent_txn );"
    },
    {
        "line": 146,
        "fullcodeline": "if (txn.back_txn_txn && (txn.back_txn_txn != parent_txn)) {"
    },
    {
        "line": 195,
        "fullcodeline": "if (0 == retry_count) {"
    },
    {
        "line": 311,
        "fullcodeline": "if (0 != retval) {"
    },
    {
        "line": 325,
        "fullcodeline": "if (0 == retry_count) { /* execute just once */"
    },
    {
        "line": 819,
        "fullcodeline": "if (DB_LOCK_DEADLOCK == retval)"
    },
    {
        "line": 941,
        "fullcodeline": "if (DB_LOCK_DEADLOCK == retval)"
    },
    {
        "line": 983,
        "fullcodeline": "if (!is_ruv)"
    },
    {
        "line": 1005,
        "fullcodeline": "if (!is_ruv && !is_fixup_operation && !NO_RUV_UPDATE(li)) {"
    },
    {
        "line": 1035,
        "fullcodeline": "if (retval == 0) {"
    },
    {
        "line": 1071,
        "fullcodeline": "if (entryrdn_get_switch()) { /* subtree-rename: on */"
    },
    {
        "line": 1088,
        "fullcodeline": "if (0 == myrc) {"
    },
    {
        "line": 1094,
        "fullcodeline": "if (modify_switch_entries(&ruv_c, be) != 0 ) {"
    },
    {
        "line": 1107,
        "fullcodeline": "if (!ldap_result_code) {"
    },
    {
        "line": 1110,
        "fullcodeline": "if (!ldap_result_code) {"
    },
    {
        "line": 1115,
        "fullcodeline": "if (!opreturn) {"
    },
    {
        "line": 1129,
        "fullcodeline": "if (LDBM_OS_ERR_IS_DISKFULL(retval)) {"
    },
    {
        "line": 1255,
        "fullcodeline": "if (tombstoneentry && cache_is_in_cache(&inst->inst_cache, tombstoneentry)) {"
    },
    {
        "line": 75,
        "fullcodeline": "inst ? inst->inst_name : \"null instance\");"
    },
    {
        "line": 148,
        "fullcodeline": "dblayer_txn_abort_ext(li, &txn, PR_FALSE);"
    },
    {
        "line": 149,
        "fullcodeline": "noabort = 1;"
    },
    {
        "line": 150,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_TXN, parent_txn);"
    },
    {
        "line": 165,
        "fullcodeline": "CACHE_RETURN(&inst->inst_cache, &addingentry);"
    },
    {
        "line": 166,
        "fullcodeline": "slapi_pblock_set( pb, SLAPI_ADD_ENTRY, originalentry->ep_entry );"
    },
    {
        "line": 167,
        "fullcodeline": "addingentry = originalentry;"
    },
    {
        "line": 168,
        "fullcodeline": "originalentry = tmpentry;"
    },
    {
        "line": 169,
        "fullcodeline": "tmpentry = NULL;"
    },
    {
        "line": 184,
        "fullcodeline": "LDAPDebug0Args(LDAP_DEBUG_BACKLDBM, \"Add Retrying Transaction\\n\");"
    },
    {
        "line": 197,
        "fullcodeline": "retval = dblayer_txn_begin(be, parent_txn, &txn);"
    },
    {
        "line": 198,
        "fullcodeline": "noabort = 0;"
    },
    {
        "line": 204,
        "fullcodeline": "rc= slapi_setbit_int(rc,SLAPI_RTN_BIT_FETCH_EXISTING_UNIQUEID_ENTRY);"
    },
    {
        "line": 205,
        "fullcodeline": "rc= slapi_setbit_int(rc,SLAPI_RTN_BIT_FETCH_PARENT_ENTRY);"
    },
    {
        "line": 317,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 449,
        "fullcodeline": "opcsn = operation_get_csn (operation);"
    },
    {
        "line": 794,
        "fullcodeline": "int opreturn = 0;"
    },
    {
        "line": 799,
        "fullcodeline": "LDAPDebug1Arg(LDAP_DEBUG_TRACE, \"SLAPI_PLUGIN_BE_TXN_PRE_ADD_FN plugin \""
    },
    {
        "line": 808,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PLUGIN_OPRETURN, &opreturn);"
    },
    {
        "line": 812,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PB_RESULT_TEXT, &ldap_result_message);"
    },
    {
        "line": 813,
        "fullcodeline": "LDAPDebug1Arg(LDAP_DEBUG_ANY, \"SLAPI_PLUGIN_BE_TXN_PRE_ADD_FN plugin failed: %d\\n\","
    },
    {
        "line": 821,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_ARGS, \"add 1 DEADLOCK\\n\", 0, 0, 0 );"
    },
    {
        "line": 826,
        "fullcodeline": "LDAPDebug(LDAP_DEBUG_TRACE, \"id2entry_add(%s) failed, err=%d %s\\n\","
    },
    {
        "line": 829,
        "fullcodeline": "ADD_SET_ERROR(ldap_result_code, LDAP_OPERATIONS_ERROR, retry_count);"
    },
    {
        "line": 837,
        "fullcodeline": "const CSN *tombstone_csn = NULL;"
    },
    {
        "line": 838,
        "fullcodeline": "char deletion_csn_str[CSN_STRSIZE];"
    },
    {
        "line": 840,
        "fullcodeline": "retval = index_addordel_string(be,SLAPI_ATTR_OBJECTCLASS, SLAPI_ATTR_VALUE_TOMBSTONE,"
    },
    {
        "line": 882,
        "fullcodeline": "retval = index_addordel_string(be,SLAPI_ATTR_UNIQUEID,slapi_entry_get_uniqueid(addingentry->ep_entry),addingentry->ep_id,BE_INDEX_DEL|BE_INDEX_EQUALITY,&txn);"
    },
    {
        "line": 899,
        "fullcodeline": "retval = index_addordel_string(be,"
    },
    {
        "line": 935,
        "fullcodeline": "retval = index_addordel_entry( be, addingentry, BE_INDEX_ADD | BE_INDEX_TOMBSTONE, &txn );"
    },
    {
        "line": 943,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_ARGS, \"add 5 DEADLOCK\\n\", 0, 0, 0 );"
    },
    {
        "line": 948,
        "fullcodeline": "LDAPDebug2Args(LDAP_DEBUG_ANY, \"add: attempt to index %lu failed; rc=%d\\n\","
    },
    {
        "line": 950,
        "fullcodeline": "ADD_SET_ERROR(ldap_result_code, LDAP_OPERATIONS_ERROR, retry_count);"
    },
    {
        "line": 959,
        "fullcodeline": "retval = modify_update_all(be,pb,&parent_modify_c,&txn);"
    },
    {
        "line": 960,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_BACKLDBM, \"ldbm_back_add\","
    },
    {
        "line": 985,
        "fullcodeline": "retval= vlv_update_all_indexes(&txn, be, pb, NULL, addingentry);"
    },
    {
        "line": 1006,
        "fullcodeline": "ruv_c_init = ldbm_txn_ruv_modify_context( pb, &ruv_c );"
    },
    {
        "line": 1019,
        "fullcodeline": "retval = modify_update_all( be, pb, &ruv_c, &txn );"
    },
    {
        "line": 1060,
        "fullcodeline": "ADD_SET_ERROR(ldap_result_code, LDAP_ALREADY_EXISTS, retry_count);"
    },
    {
        "line": 1061,
        "fullcodeline": "LDAPDebug2Args(LDAP_DEBUG_CACHE, \"ldap_add: cache_replace concurrency detected: %s (rc: %d)\\n\","
    },
    {
        "line": 1063,
        "fullcodeline": "retval = -1;"
    },
    {
        "line": 1073,
        "fullcodeline": "struct backdn *bdn = dncache_find_id(&inst->inst_dncache,"
    },
    {
        "line": 1089,
        "fullcodeline": "parent_switched = 1;"
    },
    {
        "line": 1095,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 1096,
        "fullcodeline": "LDAPDebug0Args(LDAP_DEBUG_ANY,"
    },
    {
        "line": 1108,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_RESULT_CODE, &ldap_result_code);"
    },
    {
        "line": 1111,
        "fullcodeline": "ldap_result_code = LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 1112,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_RESULT_CODE, &ldap_result_code);"
    },
    {
        "line": 1116,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_PLUGIN_OPRETURN, ldap_result_code ? &ldap_result_code : &retval);"
    },
    {
        "line": 1130,
        "fullcodeline": "disk_full = 1;"
    },
    {
        "line": 1149,
        "fullcodeline": "} else if (0 == rc) {"
    },
    {
        "line": 1177,
        "fullcodeline": "CACHE_RETURN( &inst->inst_cache, &addingentry );"
    },
    {
        "line": 1182,
        "fullcodeline": "if (txn.back_txn_txn && (txn.back_txn_txn != parent_txn)) {"
    },
    {
        "line": 1248,
        "fullcodeline": "if (!not_an_error) {"
    },
    {
        "line": 1256,
        "fullcodeline": "cache_unlock_entry(&inst->inst_cache, tombstoneentry);"
    },
    {
        "line": 1257,
        "fullcodeline": "CACHE_RETURN(&inst->inst_cache, &tombstoneentry);"
    },
    {
        "line": 1284,
        "fullcodeline": "CACHE_RETURN( &inst->inst_cache, &addingentry );"
    },
    {
        "line": 1287,
        "fullcodeline": "slapi_counter_decrement(inst->inst_ref_count);"
    },
    {
        "line": 1314,
        "fullcodeline": "if (!result_sent) {"
    },
    {
        "line": 153,
        "fullcodeline": "if ((tmpentry = backentry_dup(originalentry?originalentry:addingentry)) == NULL) {"
    },
    {
        "line": 157,
        "fullcodeline": "if (cache_is_in_cache(&inst->inst_cache, addingentry)) {"
    },
    {
        "line": 171,
        "fullcodeline": "if (cache_add_tentative(&inst->inst_cache, addingentry, NULL) < 0) {"
    },
    {
        "line": 188,
        "fullcodeline": "interval = PR_MillisecondsToInterval(slapi_rand() % 100);"
    },
    {
        "line": 189,
        "fullcodeline": "DS_Sleep(interval);"
    },
    {
        "line": 200,
        "fullcodeline": "if (!is_tombstone_operation) {"
    },
    {
        "line": 206,
        "fullcodeline": "while(rc!=0)"
    },
    {
        "line": 309,
        "fullcodeline": "retval = dblayer_txn_begin_ext(li, parent_txn, &txn, PR_FALSE);"
    },
    {
        "line": 312,
        "fullcodeline": "if (LDBM_OS_ERR_IS_DISKFULL(retval)) {"
    },
    {
        "line": 331,
        "fullcodeline": "if(have_parent_address(&parentsdn, operation->o_params.p.p_add.parentuniqueid))"
    },
    {
        "line": 358,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_ADD_EXISTING_DN_ENTRY, &entry);"
    },
    {
        "line": 429,
        "fullcodeline": "if (!is_replicated_operation) {"
    },
    {
        "line": 664,
        "fullcodeline": "if ( !slapi_sdn_isempty(&parentsdn) )"
    },
    {
        "line": 743,
        "fullcodeline": "if ( cache_add_tentative( &inst->inst_cache, addingentry, NULL ) < 0 )"
    },
    {
        "line": 756,
        "fullcodeline": "if ( plugin_call_acl_verify_syntax (pb, addingentry->ep_entry, &errbuf) != 0 ) {"
    },
    {
        "line": 784,
        "fullcodeline": "if ( (originalentry = backentry_dup(addingentry )) == NULL ) {"
    },
    {
        "line": 795,
        "fullcodeline": "if (SLAPI_PLUGIN_NOOP == retval) {"
    },
    {
        "line": 801,
        "fullcodeline": "if (!ldap_result_code) {"
    },
    {
        "line": 804,
        "fullcodeline": "if (!ldap_result_code) {"
    },
    {
        "line": 809,
        "fullcodeline": "if (!opreturn) {"
    },
    {
        "line": 814,
        "fullcodeline": "ldap_result_code ? ldap_result_code : retval);"
    },
    {
        "line": 827,
        "fullcodeline": "slapi_entry_get_dn_const(addingentry->ep_entry),"
    },
    {
        "line": 828,
        "fullcodeline": "retval, (msg = dblayer_strerror( retval )) ? msg : \"\");"
    },
    {
        "line": 830,
        "fullcodeline": "if (LDBM_OS_ERR_IS_DISKFULL(retval)) {"
    },
    {
        "line": 842,
        "fullcodeline": "if (DB_LOCK_DEADLOCK == retval) {"
    },
    {
        "line": 860,
        "fullcodeline": "if((tombstone_csn = entry_get_deletion_csn(tombstoneentry->ep_entry))){"
    },
    {
        "line": 883,
        "fullcodeline": "if (DB_LOCK_DEADLOCK == retval) {"
    },
    {
        "line": 888,
        "fullcodeline": "if (0 != retval) {"
    },
    {
        "line": 904,
        "fullcodeline": "if (DB_LOCK_DEADLOCK == retval) {"
    },
    {
        "line": 909,
        "fullcodeline": "if (0 != retval) {"
    },
    {
        "line": 921,
        "fullcodeline": "if (entryrdn_get_switch()) { /* subtree-rename: on */"
    },
    {
        "line": 939,
        "fullcodeline": "retval = index_addordel_entry( be, addingentry, BE_INDEX_ADD, &txn );"
    },
    {
        "line": 949,
        "fullcodeline": "(u_long)addingentry->ep_id, retval);"
    },
    {
        "line": 951,
        "fullcodeline": "if (LDBM_OS_ERR_IS_DISKFULL(retval)) {"
    },
    {
        "line": 963,
        "fullcodeline": "if (DB_LOCK_DEADLOCK == retval)"
    },
    {
        "line": 986,
        "fullcodeline": "if (DB_LOCK_DEADLOCK == retval) {"
    },
    {
        "line": 1007,
        "fullcodeline": "if (-1 == ruv_c_init) {"
    },
    {
        "line": 1020,
        "fullcodeline": "if (DB_LOCK_DEADLOCK == retval) {"
    },
    {
        "line": 1024,
        "fullcodeline": "if (0 != retval) {"
    },
    {
        "line": 1062,
        "fullcodeline": "slapi_entry_get_dn_const(addingentry->ep_entry), retval);"
    },
    {
        "line": 1150,
        "fullcodeline": "rc = SLAPI_FAIL_GENERAL;"
    },
    {
        "line": 1166,
        "fullcodeline": "if (inst && cache_is_in_cache(&inst->inst_cache, addingentry)) {"
    },
    {
        "line": 1184,
        "fullcodeline": "int val = 0;"
    },
    {
        "line": 1185,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_RESULT_CODE, &val);"
    },
    {
        "line": 1192,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_PLUGIN_OPRETURN, &val );"
    },
    {
        "line": 1231,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_TXN, parent_txn);"
    },
    {
        "line": 1249,
        "fullcodeline": "rc = SLAPI_FAIL_GENERAL;"
    },
    {
        "line": 1260,
        "fullcodeline": "if ((0 == retval) && entryrdn_get_switch()) { /* subtree-rename: on */"
    },
    {
        "line": 1312,
        "fullcodeline": "ldap_result_code = LDAP_SUCCESS;"
    },
    {
        "line": 1315,
        "fullcodeline": "slapi_send_ldap_result(pb, ldap_result_code, ldap_result_matcheddn, ldap_result_message, 0, NULL);"
    },
    {
        "line": 154,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 159,
        "fullcodeline": "retval = CACHE_REMOVE(&inst->inst_cache, addingentry);"
    },
    {
        "line": 172,
        "fullcodeline": "LDAPDebug1Arg(LDAP_DEBUG_CACHE, \"cache_add_tentative concurrency detected: %s\\n\","
    },
    {
        "line": 174,
        "fullcodeline": "ldap_result_code = LDAP_ALREADY_EXISTS;"
    },
    {
        "line": 179,
        "fullcodeline": "modify_term(&ruv_c, be);"
    },
    {
        "line": 180,
        "fullcodeline": "ruv_c_init = 0;"
    },
    {
        "line": 201,
        "fullcodeline": "rc= slapi_setbit_int(rc,SLAPI_RTN_BIT_FETCH_EXISTING_DN_ENTRY);"
    },
    {
        "line": 272,
        "fullcodeline": "ldap_result_code = LDAP_SUCCESS;"
    },
    {
        "line": 273,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_RESULT_CODE, &ldap_result_code);"
    },
    {
        "line": 274,
        "fullcodeline": "rc = plugin_call_plugins(pb, SLAPI_PLUGIN_BE_PRE_ADD_FN);"
    },
    {
        "line": 313,
        "fullcodeline": "disk_full = 1;"
    },
    {
        "line": 314,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 333,
        "fullcodeline": "addr.sdn = &parentsdn;"
    },
    {
        "line": 334,
        "fullcodeline": "addr.udn = NULL;"
    },
    {
        "line": 335,
        "fullcodeline": "addr.uniqueid = operation->o_params.p.p_add.parentuniqueid;"
    },
    {
        "line": 336,
        "fullcodeline": "parententry = find_entry2modify_only(pb, be, &addr, &txn, &result_sent);"
    },
    {
        "line": 352,
        "fullcodeline": "modify_init(&parent_modify_c,parententry);"
    },
    {
        "line": 452,
        "fullcodeline": "char *reason = NULL;"
    },
    {
        "line": 457,
        "fullcodeline": "addr.udn = NULL;"
    },
    {
        "line": 458,
        "fullcodeline": "addr.sdn = NULL;"
    },
    {
        "line": 459,
        "fullcodeline": "addr.uniqueid = (char *)slapi_entry_get_uniqueid(e); /* jcm - cast away const */"
    },
    {
        "line": 460,
        "fullcodeline": "tombstoneentry = find_entry2modify(pb, be, &addr, &txn, &result_sent);"
    },
    {
        "line": 467,
        "fullcodeline": "addingentry = backentry_dup( tombstoneentry );"
    },
    {
        "line": 485,
        "fullcodeline": "dn = slapi_sdn_get_dn(sdn);"
    },
    {
        "line": 486,
        "fullcodeline": "slapi_entry_set_sdn(addingentry->ep_entry, sdn); /* The DN is passed into the entry. */"
    },
    {
        "line": 488,
        "fullcodeline": "slapi_rdn_set_all_dn(slapi_entry_get_srdn(addingentry->ep_entry),"
    },
    {
        "line": 491,
        "fullcodeline": "addingentry->ep_id = slapi_entry_attr_get_ulong(addingentry->ep_entry,\"entryid\");"
    },
    {
        "line": 492,
        "fullcodeline": "slapi_entry_attr_delete(addingentry->ep_entry, SLAPI_ATTR_VALUE_PARENT_UNIQUEID);"
    },
    {
        "line": 493,
        "fullcodeline": "slapi_entry_delete_string(addingentry->ep_entry, SLAPI_ATTR_OBJECTCLASS, SLAPI_ATTR_VALUE_TOMBSTONE);"
    },
    {
        "line": 494,
        "fullcodeline": "slapi_entry_attr_delete(addingentry->ep_entry, SLAPI_ATTR_TOMBSTONE_CSN);"
    },
    {
        "line": 501,
        "fullcodeline": "reason = slapi_entry_attr_get_charptr(e, \"nsds5ReplConflict\");"
    },
    {
        "line": 510,
        "fullcodeline": "slapi_entry_clear_flag(addingentry->ep_entry, SLAPI_ENTRY_FLAG_TOMBSTONE);"
    },
    {
        "line": 686,
        "fullcodeline": "ldap_result_code = plugin_call_acl_plugin(pb, e, NULL, NULL, SLAPI_ACL_ADD,"
    },
    {
        "line": 695,
        "fullcodeline": "pid = parententry->ep_id;"
    },
    {
        "line": 726,
        "fullcodeline": "add_update_entrydn_operational_attributes(addingentry);"
    },
    {
        "line": 745,
        "fullcodeline": "LDAPDebug1Arg(LDAP_DEBUG_CACHE, \"cache_add_tentative concurrency detected: %s\\n\","
    },
    {
        "line": 747,
        "fullcodeline": "ldap_result_code= LDAP_ALREADY_EXISTS;"
    },
    {
        "line": 757,
        "fullcodeline": "LDAPDebug1Arg(LDAP_DEBUG_TRACE, \"ACL syntax error: %s\\n\","
    },
    {
        "line": 759,
        "fullcodeline": "ldap_result_code= LDAP_INVALID_SYNTAX;"
    },
    {
        "line": 760,
        "fullcodeline": "ldap_result_message= errbuf;"
    },
    {
        "line": 768,
        "fullcodeline": "retval = parent_update_on_childchange(&parent_modify_c,"
    },
    {
        "line": 771,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_BACKLDBM, \"ldbm_back_add\","
    },
    {
        "line": 781,
        "fullcodeline": "parent_found = 1;"
    },
    {
        "line": 782,
        "fullcodeline": "parententry = NULL;"
    },
    {
        "line": 785,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 796,
        "fullcodeline": "not_an_error = 1;"
    },
    {
        "line": 797,
        "fullcodeline": "rc = retval = LDAP_SUCCESS;"
    },
    {
        "line": 802,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_RESULT_CODE, &ldap_result_code);"
    },
    {
        "line": 805,
        "fullcodeline": "ldap_result_code = LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 806,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_RESULT_CODE, &ldap_result_code);"
    },
    {
        "line": 810,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_PLUGIN_OPRETURN, ldap_result_code ? &ldap_result_code : &retval);"
    },
    {
        "line": 831,
        "fullcodeline": "disk_full = 1;"
    },
    {
        "line": 841,
        "fullcodeline": "addingentry->ep_id, BE_INDEX_DEL|BE_INDEX_EQUALITY, &txn);"
    },
    {
        "line": 843,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_ARGS, \"add 2 DB_LOCK_DEADLOCK\\n\", 0, 0, 0 );"
    },
    {
        "line": 848,
        "fullcodeline": "LDAPDebug(LDAP_DEBUG_TRACE, \"index_addordel_string TOMBSTONE (%s), err=%d %s\\n\","
    },
    {
        "line": 851,
        "fullcodeline": "ADD_SET_ERROR(ldap_result_code, LDAP_OPERATIONS_ERROR, retry_count);"
    },
    {
        "line": 861,
        "fullcodeline": "csn_as_string(tombstone_csn, PR_FALSE, deletion_csn_str);"
    },
    {
        "line": 862,
        "fullcodeline": "retval = index_addordel_string(be, SLAPI_ATTR_TOMBSTONE_CSN, deletion_csn_str,"
    },
    {
        "line": 884,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_ARGS, \"add 4 DB_LOCK_DEADLOCK\\n\", 0, 0, 0 );"
    },
    {
        "line": 889,
        "fullcodeline": "LDAPDebug(LDAP_DEBUG_TRACE, \"index_addordel_string UNIQUEID (%s), err=%d %s\\n\","
    },
    {
        "line": 892,
        "fullcodeline": "ADD_SET_ERROR(ldap_result_code, LDAP_OPERATIONS_ERROR, retry_count);"
    },
    {
        "line": 901,
        "fullcodeline": "slapi_sdn_get_ndn(sdn),"
    },
    {
        "line": 903,
        "fullcodeline": "BE_INDEX_DEL|BE_INDEX_EQUALITY, &txn);"
    },
    {
        "line": 905,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_ARGS, \"add 5 DB_LOCK_DEADLOCK\\n\", 0, 0, 0 );"
    },
    {
        "line": 910,
        "fullcodeline": "LDAPDebug(LDAP_DEBUG_TRACE, \"index_addordel_string ENTRYDN (%s), err=%d %s\\n\","
    },
    {
        "line": 913,
        "fullcodeline": "ADD_SET_ERROR(ldap_result_code, LDAP_OPERATIONS_ERROR, retry_count);"
    },
    {
        "line": 952,
        "fullcodeline": "disk_full = 1;"
    },
    {
        "line": 965,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_ARGS, \"add 6 DEADLOCK\\n\", 0, 0, 0 );"
    },
    {
        "line": 970,
        "fullcodeline": "LDAPDebug(LDAP_DEBUG_BACKLDBM, \"modify_update_all: %s (%lu) failed; rc=%d\\n\","
    },
    {
        "line": 972,
        "fullcodeline": "ADD_SET_ERROR(ldap_result_code, LDAP_OPERATIONS_ERROR, retry_count);"
    },
    {
        "line": 987,
        "fullcodeline": "LDAPDebug(LDAP_DEBUG_ARGS,"
    },
    {
        "line": 993,
        "fullcodeline": "LDAPDebug2Args(LDAP_DEBUG_TRACE,"
    },
    {
        "line": 996,
        "fullcodeline": "ADD_SET_ERROR(ldap_result_code, LDAP_OPERATIONS_ERROR, retry_count);"
    },
    {
        "line": 1008,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_ANY,"
    },
    {
        "line": 1012,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 1013,
        "fullcodeline": "retval = 0;"
    },
    {
        "line": 1025,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_ANY,"
    },
    {
        "line": 1030,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 1076,
        "fullcodeline": "CACHE_REMOVE(&inst->inst_dncache, bdn);"
    },
    {
        "line": 1077,
        "fullcodeline": "CACHE_RETURN(&inst->inst_dncache, &bdn);"
    },
    {
        "line": 1167,
        "fullcodeline": "CACHE_REMOVE(&inst->inst_cache, addingentry);"
    },
    {
        "line": 1169,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_ADD_ENTRY, NULL);"
    },
    {
        "line": 1186,
        "fullcodeline": "if (!val) {"
    },
    {
        "line": 1193,
        "fullcodeline": "if (!val) {"
    },
    {
        "line": 1198,
        "fullcodeline": "if ((retval = plugin_call_plugins(pb, SLAPI_PLUGIN_BE_TXN_POST_ADD_FN))) {"
    },
    {
        "line": 1227,
        "fullcodeline": "if (!noabort) {"
    },
    {
        "line": 1263,
        "fullcodeline": "struct backdn *bdn = dncache_find_id(&inst->inst_dncache,"
    },
    {
        "line": 1282,
        "fullcodeline": "CACHE_REMOVE(&inst->inst_cache, addingentry);"
    },
    {
        "line": 173,
        "fullcodeline": "slapi_entry_get_dn_const(addingentry->ep_entry));"
    },
    {
        "line": 214,
        "fullcodeline": "if(slapi_isbitset_int(rc,SLAPI_RTN_BIT_FETCH_EXISTING_UNIQUEID_ENTRY))"
    },
    {
        "line": 223,
        "fullcodeline": "if(slapi_isbitset_int(rc,SLAPI_RTN_BIT_FETCH_EXISTING_DN_ENTRY))"
    },
    {
        "line": 262,
        "fullcodeline": "if (have_parent_address(&parentsdn, operation->o_params.p.p_add.parentuniqueid) &&"
    },
    {
        "line": 275,
        "fullcodeline": "if (rc < 0) {"
    },
    {
        "line": 337,
        "fullcodeline": "if (parententry && parententry->ep_entry) {"
    },
    {
        "line": 430,
        "fullcodeline": "if ((operation_is_flag_set(operation,OP_FLAG_ACTION_SCHEMA_CHECK))"
    },
    {
        "line": 440,
        "fullcodeline": "if (slapi_entry_syntax_check(pb, e, 0) != 0)"
    },
    {
        "line": 461,
        "fullcodeline": "if ( tombstoneentry==NULL )"
    },
    {
        "line": 468,
        "fullcodeline": "if ( addingentry==NULL )"
    },
    {
        "line": 480,
        "fullcodeline": "if (NULL == sdn) {"
    },
    {
        "line": 489,
        "fullcodeline": "slapi_entry_get_dn_const(addingentry->ep_entry));"
    },
    {
        "line": 496,
        "fullcodeline": "if (slapi_entry_attr_delete(addingentry->ep_entry, SLAPI_ATTR_NSCP_ENTRYDN) != 0){"
    },
    {
        "line": 517,
        "fullcodeline": "Slapi_Attr *sa = NULL;"
    },
    {
        "line": 519,
        "fullcodeline": "const struct berval *svbv = NULL;"
    },
    {
        "line": 522,
        "fullcodeline": "slapi_entry_attr_find(addingentry->ep_entry, SLAPI_ATTR_OBJECTCLASS, &sa);"
    },
    {
        "line": 523,
        "fullcodeline": "slapi_value_init_string(&sv, \"extensibleobject\");"
    },
    {
        "line": 524,
        "fullcodeline": "svbv = slapi_value_get_berval(&sv);"
    },
    {
        "line": 531,
        "fullcodeline": "value_done(&sv);"
    },
    {
        "line": 534,
        "fullcodeline": "slapi_value_init_string(&sv, \"glue\");"
    },
    {
        "line": 535,
        "fullcodeline": "svbv = slapi_value_get_berval(&sv);"
    },
    {
        "line": 542,
        "fullcodeline": "value_done(&sv);"
    },
    {
        "line": 556,
        "fullcodeline": "addingentry = backentry_init( e );"
    },
    {
        "line": 564,
        "fullcodeline": "addingentry_id_assigned= 1;"
    },
    {
        "line": 667,
        "fullcodeline": "if (NULL == parententry)"
    },
    {
        "line": 688,
        "fullcodeline": "if ( ldap_result_code != LDAP_SUCCESS )"
    },
    {
        "line": 698,
        "fullcodeline": "if (!slapi_sdn_isparent(slapi_entry_get_sdn_const(parententry->ep_entry),"
    },
    {
        "line": 720,
        "fullcodeline": "parententry = NULL;"
    },
    {
        "line": 721,
        "fullcodeline": "pid = 0;"
    },
    {
        "line": 746,
        "fullcodeline": "slapi_entry_get_dn_const(addingentry->ep_entry));"
    },
    {
        "line": 758,
        "fullcodeline": "slapi_entry_get_dn_const(addingentry->ep_entry));"
    },
    {
        "line": 849,
        "fullcodeline": "slapi_entry_get_dn_const(addingentry->ep_entry),"
    },
    {
        "line": 850,
        "fullcodeline": "retval, (msg = dblayer_strerror( retval )) ? msg : \"\");"
    },
    {
        "line": 852,
        "fullcodeline": "if (LDBM_OS_ERR_IS_DISKFULL(retval)) {"
    },
    {
        "line": 864,
        "fullcodeline": "if (DB_LOCK_DEADLOCK == retval) {"
    },
    {
        "line": 869,
        "fullcodeline": "if (0 != retval) {"
    },
    {
        "line": 890,
        "fullcodeline": "slapi_entry_get_dn_const(addingentry->ep_entry),"
    },
    {
        "line": 891,
        "fullcodeline": "retval, (msg = dblayer_strerror( retval )) ? msg : \"\");"
    },
    {
        "line": 893,
        "fullcodeline": "if (LDBM_OS_ERR_IS_DISKFULL(retval)) {"
    },
    {
        "line": 911,
        "fullcodeline": "slapi_entry_get_dn_const(addingentry->ep_entry),"
    },
    {
        "line": 912,
        "fullcodeline": "retval, (msg = dblayer_strerror( retval )) ? msg : \"\");"
    },
    {
        "line": 914,
        "fullcodeline": "if (LDBM_OS_ERR_IS_DISKFULL(retval)) {"
    },
    {
        "line": 971,
        "fullcodeline": "slapi_entry_get_dn(addingentry->ep_entry), (u_long)addingentry->ep_id, retval);"
    },
    {
        "line": 973,
        "fullcodeline": "if (LDBM_OS_ERR_IS_DISKFULL(retval)) {"
    },
    {
        "line": 995,
        "fullcodeline": "retval, (msg = dblayer_strerror( retval )) ? msg : \"\");"
    },
    {
        "line": 997,
        "fullcodeline": "if (LDBM_OS_ERR_IS_DISKFULL(retval)) {"
    },
    {
        "line": 1027,
        "fullcodeline": "(msg = dblayer_strerror( retval )) ? msg : \"\", 0 );"
    },
    {
        "line": 1028,
        "fullcodeline": "if (LDBM_OS_ERR_IS_DISKFULL(retval))"
    },
    {
        "line": 1190,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_RESULT_CODE, &ldap_result_code);"
    },
    {
        "line": 1194,
        "fullcodeline": "val = -1;"
    },
    {
        "line": 1195,
        "fullcodeline": "slapi_pblock_set( pb, SLAPI_PLUGIN_OPRETURN, &val );"
    },
    {
        "line": 1199,
        "fullcodeline": "int opreturn = 0;"
    },
    {
        "line": 1200,
        "fullcodeline": "LDAPDebug1Arg( LDAP_DEBUG_TRACE, \"SLAPI_PLUGIN_BE_TXN_POST_ADD_FN plugin \""
    },
    {
        "line": 1205,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PLUGIN_OPRETURN, &opreturn);"
    },
    {
        "line": 1210,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PB_RESULT_TEXT, &ldap_result_message);"
    },
    {
        "line": 1224,
        "fullcodeline": "CACHE_RETURN( &inst->inst_cache, &addingentry );"
    },
    {
        "line": 1228,
        "fullcodeline": "dblayer_txn_abort(be, &txn); /* abort crashes in case disk full */"
    },
    {
        "line": 161,
        "fullcodeline": "LDAPDebug1Arg(LDAP_DEBUG_CACHE, \"ldbm_add: cache_remove %s failed.\\n\","
    },
    {
        "line": 217,
        "fullcodeline": "done_with_pblock_entry(pb,SLAPI_ADD_EXISTING_UNIQUEID_ENTRY); /* Could be through this multiple times */"
    },
    {
        "line": 218,
        "fullcodeline": "addr.udn = NULL;"
    },
    {
        "line": 219,
        "fullcodeline": "addr.sdn = NULL;"
    },
    {
        "line": 220,
        "fullcodeline": "addr.uniqueid = (char*)slapi_entry_get_uniqueid(e); /* jcm -  cast away const */"
    },
    {
        "line": 221,
        "fullcodeline": "ldap_result_code= get_copy_of_entry(pb, &addr, &txn, SLAPI_ADD_EXISTING_UNIQUEID_ENTRY, !is_replicated_operation);"
    },
    {
        "line": 225,
        "fullcodeline": "slapi_pblock_get( pb, SLAPI_ADD_TARGET_SDN, &sdn );"
    },
    {
        "line": 249,
        "fullcodeline": "slapi_sdn_get_backend_parent(sdn, &parentsdn, pb->pb_backend);"
    },
    {
        "line": 251,
        "fullcodeline": "done_with_pblock_entry(pb,SLAPI_ADD_EXISTING_DN_ENTRY); /* Could be through this multiple times */"
    },
    {
        "line": 252,
        "fullcodeline": "addr.sdn = sdn;"
    },
    {
        "line": 253,
        "fullcodeline": "addr.udn = NULL;"
    },
    {
        "line": 254,
        "fullcodeline": "addr.uniqueid = NULL;"
    },
    {
        "line": 255,
        "fullcodeline": "ldap_result_code= get_copy_of_entry(pb, &addr, &txn, SLAPI_ADD_EXISTING_DN_ENTRY, !is_replicated_operation);"
    },
    {
        "line": 263,
        "fullcodeline": "slapi_isbitset_int(rc,SLAPI_RTN_BIT_FETCH_PARENT_ENTRY)) {"
    },
    {
        "line": 264,
        "fullcodeline": "done_with_pblock_entry(pb,SLAPI_ADD_PARENT_ENTRY); /* Could be through this multiple times */"
    },
    {
        "line": 265,
        "fullcodeline": "addr.sdn = &parentsdn;"
    },
    {
        "line": 266,
        "fullcodeline": "addr.udn = NULL;"
    },
    {
        "line": 267,
        "fullcodeline": "addr.uniqueid = operation->o_params.p.p_add.parentuniqueid;"
    },
    {
        "line": 268,
        "fullcodeline": "ldap_result_code = get_copy_of_entry(pb, &addr, &txn, SLAPI_ADD_PARENT_ENTRY, !is_replicated_operation);"
    },
    {
        "line": 276,
        "fullcodeline": "int opreturn = 0;"
    },
    {
        "line": 293,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PLUGIN_OPRETURN, &opreturn);"
    },
    {
        "line": 298,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PB_RESULT_TEXT, &ldap_result_message);"
    },
    {
        "line": 388,
        "fullcodeline": "if ((LDAP_ALREADY_EXISTS == ldap_result_code) && !isroot && !is_replicated_operation) {"
    },
    {
        "line": 431,
        "fullcodeline": "&& (slapi_entry_schema_check(pb, e) != 0))"
    },
    {
        "line": 433,
        "fullcodeline": "LDAPDebug(LDAP_DEBUG_TRACE, \"entry failed schema check\\n\", 0, 0, 0);"
    },
    {
        "line": 434,
        "fullcodeline": "ldap_result_code = LDAP_OBJECT_CLASS_VIOLATION;"
    },
    {
        "line": 435,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PB_RESULT_TEXT, &ldap_result_message);"
    },
    {
        "line": 442,
        "fullcodeline": "LDAPDebug(LDAP_DEBUG_TRACE, \"entry failed syntax check\\n\", 0, 0, 0);"
    },
    {
        "line": 443,
        "fullcodeline": "ldap_result_code = LDAP_INVALID_SYNTAX;"
    },
    {
        "line": 444,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PB_RESULT_TEXT, &ldap_result_message);"
    },
    {
        "line": 463,
        "fullcodeline": "ldap_result_code= -1;"
    },
    {
        "line": 470,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 481,
        "fullcodeline": "LDAPDebug0Args(LDAP_DEBUG_ANY, \"ldbm_back_add: Null target dn\\n\");"
    },
    {
        "line": 482,
        "fullcodeline": "ldap_result_code = LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 497,
        "fullcodeline": "LDAPDebug(LDAP_DEBUG_REPL, \"Resurrection of %s - Couldn't remove %s\\n\", dn, SLAPI_ATTR_NSCP_ENTRYDN, 0);"
    },
    {
        "line": 507,
        "fullcodeline": "slapi_ch_free((void **)&reason);"
    },
    {
        "line": 525,
        "fullcodeline": "if (slapi_attr_value_find(sa, svbv)) { /* not found, so add it */"
    },
    {
        "line": 536,
        "fullcodeline": "if (slapi_attr_value_find(sa, svbv)) { /* not found, so add it */"
    },
    {
        "line": 557,
        "fullcodeline": "if ( ( addingentry->ep_id = next_id( be ) ) >= MAXID ) {"
    },
    {
        "line": 566,
        "fullcodeline": "if (!is_fixup_operation)"
    },
    {
        "line": 670,
        "fullcodeline": "int err = 0;"
    },
    {
        "line": 674,
        "fullcodeline": "LDAPDebug1Arg(LDAP_DEBUG_BACKLDBM, \"ldbm_add: Parent \\\"%s\\\" does not exist. \""
    },
    {
        "line": 676,
        "fullcodeline": "slapi_sdn_init(&ancestorsdn);"
    },
    {
        "line": 677,
        "fullcodeline": "ancestorentry = dn2ancestor(be, &parentsdn, &ancestorsdn, &txn, &err, 1);"
    },
    {
        "line": 678,
        "fullcodeline": "CACHE_RETURN( &inst->inst_cache, &ancestorentry );"
    },
    {
        "line": 680,
        "fullcodeline": "ldap_result_code= LDAP_NO_SUCH_OBJECT;"
    },
    {
        "line": 681,
        "fullcodeline": "ldap_result_matcheddn="
    },
    {
        "line": 683,
        "fullcodeline": "slapi_sdn_done(&ancestorsdn);"
    },
    {
        "line": 690,
        "fullcodeline": "LDAPDebug1Arg(LDAP_DEBUG_TRACE, \"no access to parent, pdn = %s\\n\","
    },
    {
        "line": 692,
        "fullcodeline": "ldap_result_message= errbuf;"
    },
    {
        "line": 700,
        "fullcodeline": "Slapi_DN adjustedsdn = {0};"
    },
    {
        "line": 701,
        "fullcodeline": "char *adjusteddn = slapi_ch_smprintf(\"%s,%s\","
    },
    {
        "line": 704,
        "fullcodeline": "LDAPDebug2Args(LDAP_DEBUG_BACKLDBM, \"ldbm_add: adjusting dn: %s --> %s\\n\","
    },
    {
        "line": 706,
        "fullcodeline": "slapi_sdn_set_normdn_passin(&adjustedsdn, adjusteddn);"
    },
    {
        "line": 707,
        "fullcodeline": "slapi_entry_set_sdn(addingentry->ep_entry, &adjustedsdn);"
    },
    {
        "line": 709,
        "fullcodeline": "slapi_rdn_set_all_dn(slapi_entry_get_srdn(addingentry->ep_entry), adjusteddn);"
    },
    {
        "line": 710,
        "fullcodeline": "slapi_sdn_done(&adjustedsdn);"
    },
    {
        "line": 715,
        "fullcodeline": "if (!isroot && !is_replicated_operation) {"
    },
    {
        "line": 769,
        "fullcodeline": "is_resurect_operation?PARENTUPDATE_RESURECT:PARENTUPDATE_ADD,"
    },
    {
        "line": 776,
        "fullcodeline": "LDAPDebug2Args(LDAP_DEBUG_BACKLDBM, \"parent_update_on_childchange: %s, rc=%d\\n\","
    },
    {
        "line": 778,
        "fullcodeline": "ldap_result_code= LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 853,
        "fullcodeline": "disk_full = 1;"
    },
    {
        "line": 863,
        "fullcodeline": "tombstoneentry->ep_id, BE_INDEX_DEL|BE_INDEX_EQUALITY, &txn);"
    },
    {
        "line": 865,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_ARGS, \"add 3 DB_LOCK_DEADLOCK\\n\", 0, 0, 0 );"
    },
    {
        "line": 870,
        "fullcodeline": "LDAPDebug(LDAP_DEBUG_TRACE, \"index_addordel_string TOMBSTONE csn(%s), err=%d %s\\n\","
    },
    {
        "line": 873,
        "fullcodeline": "ADD_SET_ERROR(ldap_result_code, LDAP_OPERATIONS_ERROR, retry_count);"
    },
    {
        "line": 894,
        "fullcodeline": "disk_full = 1;"
    },
    {
        "line": 915,
        "fullcodeline": "disk_full = 1;"
    },
    {
        "line": 923,
        "fullcodeline": "retval = entryrdn_index_entry(be, tombstoneentry, BE_INDEX_DEL, &txn);"
    },
    {
        "line": 974,
        "fullcodeline": "disk_full = 1;"
    },
    {
        "line": 998,
        "fullcodeline": "disk_full = 1;"
    },
    {
        "line": 1029,
        "fullcodeline": "disk_full = 1;"
    },
    {
        "line": 1171,
        "fullcodeline": "else if (!cache_has_otherref(&inst->inst_cache, addingentry))"
    },
    {
        "line": 1187,
        "fullcodeline": "if (!ldap_result_code) {"
    },
    {
        "line": 1202,
        "fullcodeline": "if (!ldap_result_code) {"
    },
    {
        "line": 1206,
        "fullcodeline": "if (!opreturn) {"
    },
    {
        "line": 1213,
        "fullcodeline": "if (inst && cache_is_in_cache(&inst->inst_cache, addingentry)) {"
    },
    {
        "line": 1245,
        "fullcodeline": "CACHE_RETURN( &inst->inst_cache, &addingentry );"
    },
    {
        "line": 1266,
        "fullcodeline": "CACHE_RETURN(&inst->inst_dncache, &bdn);"
    },
    {
        "line": 162,
        "fullcodeline": "slapi_entry_get_dn_const(addingentry->ep_entry));"
    },
    {
        "line": 226,
        "fullcodeline": "if (NULL == sdn)"
    },
    {
        "line": 234,
        "fullcodeline": "if(!is_replicated_operation){"
    },
    {
        "line": 256,
        "fullcodeline": "if(ldap_result_code==LDAP_OPERATIONS_ERROR || ldap_result_code==LDAP_INVALID_DN_SYNTAX) {"
    },
    {
        "line": 277,
        "fullcodeline": "if (SLAPI_PLUGIN_NOOP == rc) {"
    },
    {
        "line": 285,
        "fullcodeline": "if (!ldap_result_code) {"
    },
    {
        "line": 288,
        "fullcodeline": "if (!ldap_result_code) {"
    },
    {
        "line": 294,
        "fullcodeline": "if (!opreturn) {"
    },
    {
        "line": 338,
        "fullcodeline": "if (!operation->o_params.p.p_add.parentuniqueid){"
    },
    {
        "line": 343,
        "fullcodeline": "if (slapi_sdn_isempty(&parentsdn) ||"
    },
    {
        "line": 349,
        "fullcodeline": "LDAPDebug(LDAP_DEBUG_BACKLDBM, \"find_entry2modify_only returned NULL parententry pdn: %s, uniqueid: %s\\n\","
    },
    {
        "line": 362,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_ADD_EXISTING_UNIQUEID_ENTRY, &uniqentry);"
    },
    {
        "line": 389,
        "fullcodeline": "myrc = plugin_call_acl_plugin(pb, e, NULL, NULL, SLAPI_ACL_ADD,"
    },
    {
        "line": 406,
        "fullcodeline": "if (!managedsait && !is_tombstone_operation && !is_resurect_operation)"
    },
    {
        "line": 503,
        "fullcodeline": "if (!slapi_entry_attr_hasvalue(addingentry->ep_entry, \"nsds5ReplConflict\", reason)) {"
    },
    {
        "line": 529,
        "fullcodeline": "slapi_attr_add_value(sa, &sv);"
    },
    {
        "line": 540,
        "fullcodeline": "slapi_attr_add_value(sa, &sv);"
    },
    {
        "line": 558,
        "fullcodeline": "LDAPDebug( LDAP_DEBUG_ANY,"
    },
    {
        "line": 561,
        "fullcodeline": "ldap_result_code = LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 596,
        "fullcodeline": "char *untombstoned_dn = slapi_entry_get_dn(e);"
    },
    {
        "line": 597,
        "fullcodeline": "char *tombstoned_dn = NULL;"
    },
    {
        "line": 602,
        "fullcodeline": "tombstoned_dn = compute_entry_tombstone_dn(untombstoned_dn, addr.uniqueid);"
    },
    {
        "line": 620,
        "fullcodeline": "slapi_entry_set_dn(addingentry->ep_entry, tombstoned_dn);"
    },
    {
        "line": 675,
        "fullcodeline": "\"It might be a conflict entry.\\n\", slapi_sdn_get_dn(&parentsdn));"
    },
    {
        "line": 682,
        "fullcodeline": "slapi_ch_strdup((char *)slapi_sdn_get_dn(&ancestorsdn)); /* jcm - cast away const. */"
    },
    {
        "line": 691,
        "fullcodeline": "slapi_sdn_get_dn(&parentsdn));"
    },
    {
        "line": 699,
        "fullcodeline": "slapi_entry_get_sdn_const(addingentry->ep_entry))) {"
    },
    {
        "line": 705,
        "fullcodeline": "slapi_entry_get_dn(addingentry->ep_entry), adjusteddn);"
    },
    {
        "line": 716,
        "fullcodeline": "LDAPDebug0Args(LDAP_DEBUG_TRACE, \"no parent & not root\\n\");"
    },
    {
        "line": 717,
        "fullcodeline": "ldap_result_code= LDAP_INSUFFICIENT_ACCESS;"
    },
    {
        "line": 731,
        "fullcodeline": "delete_update_entrydn_operational_attributes(addingentry);"
    },
    {
        "line": 777,
        "fullcodeline": "slapi_entry_get_dn_const(addingentry->ep_entry), retval);"
    },
    {
        "line": 871,
        "fullcodeline": "slapi_entry_get_dn_const(tombstoneentry->ep_entry),"
    },
    {
        "line": 872,
        "fullcodeline": "retval, (msg = dblayer_strerror( retval )) ? msg : \"\");"
    },
    {
        "line": 874,
        "fullcodeline": "if (LDBM_OS_ERR_IS_DISKFULL(retval)) {"
    },
    {
        "line": 1188,
        "fullcodeline": "ldap_result_code = LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 1203,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_RESULT_CODE, &ldap_result_code);"
    },
    {
        "line": 1207,
        "fullcodeline": "opreturn = -1;"
    },
    {
        "line": 1208,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_PLUGIN_OPRETURN, &opreturn);"
    },
    {
        "line": 1214,
        "fullcodeline": "CACHE_REMOVE(&inst->inst_cache, addingentry);"
    },
    {
        "line": 1216,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_ADD_ENTRY, NULL);"
    },
    {
        "line": 1234,
        "fullcodeline": "if (inst && cache_is_in_cache(&inst->inst_cache, addingentry)) {"
    },
    {
        "line": 1268,
        "fullcodeline": "Slapi_DN *addingsdn ="
    },
    {
        "line": 228,
        "fullcodeline": "LDAPDebug0Args(LDAP_DEBUG_ANY,"
    },
    {
        "line": 235,
        "fullcodeline": "dn = slapi_sdn_get_dn(sdn);"
    },
    {
        "line": 236,
        "fullcodeline": "ldap_result_code = slapi_dn_syntax_check(pb, dn, 1);"
    },
    {
        "line": 278,
        "fullcodeline": "not_an_error = 1;"
    },
    {
        "line": 279,
        "fullcodeline": "rc = LDAP_SUCCESS;"
    },
    {
        "line": 286,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_RESULT_CODE, &ldap_result_code);"
    },
    {
        "line": 289,
        "fullcodeline": "LDAPDebug0Args(LDAP_DEBUG_ANY,"
    },
    {
        "line": 291,
        "fullcodeline": "ldap_result_code = LDAP_OPERATIONS_ERROR;"
    },
    {
        "line": 296,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_PLUGIN_OPRETURN, ldap_result_code ? &ldap_result_code : &rc);"
    },
    {
        "line": 340,
        "fullcodeline": "operation->o_params.p.p_add.parentuniqueid ="
    },
    {
        "line": 344,
        "fullcodeline": "slapi_sdn_compare(&parentsdn, slapi_entry_get_sdn(parententry->ep_entry))) {"
    },
    {
        "line": 346,
        "fullcodeline": "slapi_sdn_set_dn_byval(&parentsdn, slapi_entry_get_dn_const(parententry->ep_entry));"
    },
    {
        "line": 350,
        "fullcodeline": "slapi_sdn_get_dn(&parentsdn), slapi_sdn_get_dn(&parentsdn), addr.uniqueid?addr.uniqueid:\"none\");"
    },
    {
        "line": 363,
        "fullcodeline": "if (uniqentry == entry) {"
    },
    {
        "line": 386,
        "fullcodeline": "ldap_result_code = LDAP_ALREADY_EXISTS;"
    },
    {
        "line": 408,
        "fullcodeline": "int err= 0;"
    },
    {
        "line": 411,
        "fullcodeline": "slapi_sdn_init(&ancestorsdn);"
    },
    {
        "line": 412,
        "fullcodeline": "ancestorentry = dn2ancestor(pb->pb_backend, sdn, &ancestorsdn, &txn, &err, 0);"
    },
    {
        "line": 413,
        "fullcodeline": "slapi_sdn_done(&ancestorsdn);"
    },
    {
        "line": 504,
        "fullcodeline": "slapi_entry_add_string(addingentry->ep_entry, \"nsds5ReplConflict\", reason);"
    },
    {
        "line": 505,
        "fullcodeline": "LDAPDebug(LDAP_DEBUG_REPL, \"Resurrection of %s - Added Conflict reason %s\\n\", dn, reason, 0);"
    },
    {
        "line": 568,
        "fullcodeline": "if ( opcsn == NULL && operation->o_csngen_handler )"
    },
    {
        "line": 576,
        "fullcodeline": "if ( opcsn != NULL )"
    },
    {
        "line": 598,
        "fullcodeline": "if (NULL == untombstoned_dn)"
    },
    {
        "line": 607,
        "fullcodeline": "if (entryrdn_get_switch())"
    },
    {
        "line": 623,
        "fullcodeline": "if (!slapi_entry_attr_hasvalue(addingentry->ep_entry,"
    },
    {
        "line": 630,
        "fullcodeline": "if (!slapi_entry_attr_hasvalue(addingentry->ep_entry,"
    },
    {
        "line": 638,
        "fullcodeline": "if (attrlist_find( addingentry->ep_entry->e_attrs, SLAPI_ATTR_TOMBSTONE_CSN ) == NULL){"
    },
    {
        "line": 650,
        "fullcodeline": "if (NULL != operation->o_params.p.p_add.parentuniqueid)"
    },
    {
        "line": 702,
        "fullcodeline": "slapi_entry_get_rdn_const(addingentry->ep_entry),"
    },
    {
        "line": 703,
        "fullcodeline": "slapi_entry_get_dn_const(parententry->ep_entry));"
    },
    {
        "line": 738,
        "fullcodeline": "add_update_entry_operational_attributes(addingentry, pid);"
    },
    {
        "line": 875,
        "fullcodeline": "disk_full = 1;"
    },
    {
        "line": 925,
        "fullcodeline": "LDAPDebug(LDAP_DEBUG_ANY, \"Resurrecting %s: failed to remove entryrdn index, err=%d %s\\n\","
    },
    {
        "line": 1173,
        "fullcodeline": "if (!is_resurect_operation) { /* if resurect, tombstoneentry is dupped. */"
    },
    {
        "line": 1235,
        "fullcodeline": "CACHE_REMOVE(&inst->inst_cache, addingentry);"
    },
    {
        "line": 1237,
        "fullcodeline": "slapi_pblock_set(pb, SLAPI_ADD_ENTRY, NULL);"
    },
    {
        "line": 1269,
        "fullcodeline": "slapi_sdn_dup(slapi_entry_get_sdn(addingentry->ep_entry));"
    },
    {
        "line": 341,
        "fullcodeline": "slapi_ch_strdup(slapi_entry_get_uniqueid(parententry->ep_entry));"
    },
    {
        "line": 368,
        "fullcodeline": "ldap_result_code = LDAP_SUCCESS;"
    },
    {
        "line": 392,
        "fullcodeline": "ldap_result_code = myrc;"
    },
    {
        "line": 393,
        "fullcodeline": "ldap_result_message = errbuf;"
    },
    {
        "line": 414,
        "fullcodeline": "if ( ancestorentry != NULL )"
    },
    {
        "line": 527,
        "fullcodeline": "value_update_csn(&sv, CSN_TYPE_VALUE_UPDATED, opcsn);"
    },
    {
        "line": 538,
        "fullcodeline": "value_update_csn(&sv, CSN_TYPE_VALUE_UPDATED, opcsn);"
    },
    {
        "line": 574,
        "fullcodeline": "opcsn = entry_assign_operation_csn ( pb, e, parententry ? parententry->ep_entry : NULL );"
    },
    {
        "line": 578,
        "fullcodeline": "entry_set_csn (e, opcsn);"
    },
    {
        "line": 579,
        "fullcodeline": "entry_add_dncsn (e, opcsn);"
    },
    {
        "line": 580,
        "fullcodeline": "entry_add_rdn_csn (e, opcsn);"
    },
    {
        "line": 581,
        "fullcodeline": "entry_set_maxcsn (e, opcsn);"
    },
    {
        "line": 600,
        "fullcodeline": "untombstoned_dn = \"\";"
    },
    {
        "line": 609,
        "fullcodeline": "Slapi_RDN srdn = {0};"
    },
    {
        "line": 610,
        "fullcodeline": "rc = slapi_rdn_init_all_dn(&srdn, tombstoned_dn);"
    },
    {
        "line": 625,
        "fullcodeline": "slapi_entry_add_string(addingentry->ep_entry,"
    },
    {
        "line": 627,
        "fullcodeline": "slapi_entry_set_flag(addingentry->ep_entry,"
    },
    {
        "line": 633,
        "fullcodeline": "slapi_entry_add_string(addingentry->ep_entry,"
    },
    {
        "line": 635,
        "fullcodeline": "slapi_entry_set_flag(addingentry->ep_entry,"
    },
    {
        "line": 639,
        "fullcodeline": "const CSN *tombstone_csn = NULL;"
    },
    {
        "line": 640,
        "fullcodeline": "char tombstone_csnstr[CSN_STRSIZE];"
    },
    {
        "line": 652,
        "fullcodeline": "slapi_entry_add_string(addingentry->ep_entry,"
    },
    {
        "line": 926,
        "fullcodeline": "slapi_entry_get_dn_const(tombstoneentry->ep_entry),"
    },
    {
        "line": 927,
        "fullcodeline": "retval, (msg = dblayer_strerror( retval )) ? msg : \"\");"
    },
    {
        "line": 1174,
        "fullcodeline": "backentry_clear_entry(addingentry); /* e is released in the frontend */"
    },
    {
        "line": 1218,
        "fullcodeline": "else if (!cache_has_otherref(&inst->inst_cache, addingentry))"
    },
    {
        "line": 1271,
        "fullcodeline": "bdn = backdn_init(addingsdn, addingentry->ep_id, 0);"
    },
    {
        "line": 239,
        "fullcodeline": "ldap_result_code = LDAP_INVALID_DN_SYNTAX;"
    },
    {
        "line": 240,
        "fullcodeline": "slapi_pblock_get(pb, SLAPI_PB_RESULT_TEXT, &ldap_result_message);"
    },
    {
        "line": 416,
        "fullcodeline": "int sentreferral= check_entry_for_referral(pb, ancestorentry->ep_entry, backentry_get_ndn(ancestorentry), \"ldbm_back_add\");"
    },
    {
        "line": 417,
        "fullcodeline": "CACHE_RETURN( &inst->inst_cache, &ancestorentry );"
    },
    {
        "line": 643,
        "fullcodeline": "if((tombstone_csn = entry_get_deletion_csn(addingentry->ep_entry))){"
    },
    {
        "line": 1239,
        "fullcodeline": "else if (!cache_has_otherref(&inst->inst_cache, addingentry))"
    },
    {
        "line": 612,
        "fullcodeline": "LDAPDebug1Arg( LDAP_DEBUG_TRACE,"
    },
    {
        "line": 644,
        "fullcodeline": "csn_as_string(tombstone_csn, PR_FALSE, tombstone_csnstr);"
    },
    {
        "line": 645,
        "fullcodeline": "slapi_entry_add_string(addingentry->ep_entry, SLAPI_ATTR_TOMBSTONE_CSN,"
    },
    {
        "line": 1220,
        "fullcodeline": "if (!is_resurect_operation) { /* if resurect, tombstoneentry is dupped. */"
    },
    {
        "line": 1273,
        "fullcodeline": "CACHE_ADD( &inst->inst_dncache, bdn, NULL );"
    },
    {
        "line": 1274,
        "fullcodeline": "CACHE_RETURN(&inst->inst_dncache, &bdn);"
    },
    {
        "line": 1275,
        "fullcodeline": "slapi_log_error(SLAPI_LOG_CACHE, \"ldbm_back_add\","
    },
    {
        "line": 420,
        "fullcodeline": "ldap_result_code= -1; /* The result was sent by check_entry_for_referral */"
    },
    {
        "line": 616,
        "fullcodeline": "slapi_entry_set_srdn(e, &srdn);"
    },
    {
        "line": 617,
        "fullcodeline": "slapi_rdn_done(&srdn);"
    },
    {
        "line": 1221,
        "fullcodeline": "backentry_clear_entry(addingentry); /* e is released in the frontend */"
    },
    {
        "line": 1241,
        "fullcodeline": "if (!is_resurect_operation) { /* if resurect, tombstoneentry is dupped. */"
    },
    {
        "line": 372,
        "fullcodeline": "if (PL_strcmp(slapi_entry_get_uniqueid(entry),"
    },
    {
        "line": 381,
        "fullcodeline": "ldap_result_code = LDAP_ALREADY_EXISTS;"
    },
    {
        "line": 1242,
        "fullcodeline": "backentry_clear_entry(addingentry); /* e is released in the frontend */"
    },
    {
        "line": 373,
        "fullcodeline": "slapi_entry_get_uniqueid(uniqentry))) {"
    },
    {
        "line": 375,
        "fullcodeline": "ldap_result_code = LDAP_ALREADY_EXISTS;"
    },
    {
        "line": 378,
        "fullcodeline": "ldap_result_code = LDAP_SUCCESS;"
    }
]