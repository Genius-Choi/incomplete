[
    {
        "line": 3,
        "fullcodeline": "PyObject *ret = NULL, *chunk = NULL, *string = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "Py_ssize_t left = length;"
    },
    {
        "line": 6,
        "fullcodeline": "Py_ssize_t buffer_size = 0;  // how many bytes are allocated for the buffer"
    },
    {
        "line": 7,
        "fullcodeline": "Py_ssize_t buffer_length = 0;  // how many bytes are actually stored in the buffer"
    },
    {
        "line": 8,
        "fullcodeline": "char *buffer = NULL;"
    },
    {
        "line": 83,
        "fullcodeline": "if (ret && string_namespace_add(self, ret, length) == -1)"
    },
    {
        "line": 11,
        "fullcodeline": "Py_ssize_t chunk_length = 65536 - buffer_size;"
    },
    {
        "line": 15,
        "fullcodeline": "PyObject *chunk = fp_read_object(self, chunk_length);"
    },
    {
        "line": 16,
        "fullcodeline": "left -= chunk_length;"
    },
    {
        "line": 21,
        "fullcodeline": "char *bytes_buffer = PyBytes_AsString(chunk);"
    },
    {
        "line": 48,
        "fullcodeline": "string = PyUnicode_DecodeUTF8Stateful(source_buffer, chunk_length, NULL, &consumed);"
    },
    {
        "line": 66,
        "fullcodeline": "Py_ssize_t unconsumed = chunk_length - consumed;"
    },
    {
        "line": 12,
        "fullcodeline": "if (left < chunk_length)"
    },
    {
        "line": 17,
        "fullcodeline": "if (!chunk)"
    },
    {
        "line": 22,
        "fullcodeline": "if (!bytes_buffer)"
    },
    {
        "line": 49,
        "fullcodeline": "if (!string)"
    },
    {
        "line": 67,
        "fullcodeline": "if (consumed != chunk_length) {"
    },
    {
        "line": 13,
        "fullcodeline": "chunk_length = left;"
    },
    {
        "line": 38,
        "fullcodeline": "memcpy(buffer + buffer_length, bytes_buffer, chunk_length);"
    },
    {
        "line": 39,
        "fullcodeline": "buffer_length += chunk_length;"
    },
    {
        "line": 41,
        "fullcodeline": "source_buffer = buffer;"
    },
    {
        "line": 42,
        "fullcodeline": "chunk_length = buffer_length;"
    },
    {
        "line": 54,
        "fullcodeline": "PyObject *joined = PyUnicode_Concat(ret, string);"
    },
    {
        "line": 58,
        "fullcodeline": "Py_DECREF(string);"
    },
    {
        "line": 59,
        "fullcodeline": "string = NULL;"
    },
    {
        "line": 60,
        "fullcodeline": "ret = joined;"
    },
    {
        "line": 79,
        "fullcodeline": "buffer_length = unconsumed;"
    },
    {
        "line": 28,
        "fullcodeline": "if (buffer_length + chunk_length > buffer_size) {"
    },
    {
        "line": 45,
        "fullcodeline": "source_buffer = bytes_buffer;"
    },
    {
        "line": 55,
        "fullcodeline": "if (!joined)"
    },
    {
        "line": 63,
        "fullcodeline": "ret = string;"
    },
    {
        "line": 29,
        "fullcodeline": "buffer_size = buffer_length + chunk_length;"
    },
    {
        "line": 30,
        "fullcodeline": "char *new_buffer = PyMem_Realloc(buffer, buffer_size);"
    },
    {
        "line": 34,
        "fullcodeline": "buffer = new_buffer;"
    },
    {
        "line": 70,
        "fullcodeline": "memmove(buffer, buffer + consumed, unconsumed);"
    },
    {
        "line": 31,
        "fullcodeline": "if (!new_buffer)"
    },
    {
        "line": 73,
        "fullcodeline": "buffer = PyMem_Malloc(unconsumed);"
    },
    {
        "line": 77,
        "fullcodeline": "memcpy(buffer, bytes_buffer + consumed, unconsumed);"
    },
    {
        "line": 74,
        "fullcodeline": "if (!buffer)"
    }
]