[
    {
        "line": 6,
        "fullcodeline": "int i, j, x = 0, y, ymax;"
    },
    {
        "line": 17,
        "fullcodeline": "ptr = buf;"
    },
    {
        "line": 19,
        "fullcodeline": "framesize = I32(ptr);"
    },
    {
        "line": 36,
        "fullcodeline": "chunks = I16(ptr + 6);"
    },
    {
        "line": 37,
        "fullcodeline": "ptr += 16;"
    },
    {
        "line": 38,
        "fullcodeline": "bytes -= 16;"
    },
    {
        "line": 10,
        "fullcodeline": "if (bytes < 4) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (framesize < I32(ptr)) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (bytes < 8) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (I16(ptr + 4) != 0xF1FA) {"
    },
    {
        "line": 41,
        "fullcodeline": "for (c = 0; c < chunks; c++) {"
    },
    {
        "line": 230,
        "fullcodeline": "return -1; /* end of frame */"
    },
    {
        "line": 28,
        "fullcodeline": "state->errcode = IMAGING_CODEC_OVERRUN;"
    },
    {
        "line": 32,
        "fullcodeline": "state->errcode = IMAGING_CODEC_UNKNOWN;"
    },
    {
        "line": 47,
        "fullcodeline": "data = ptr + 6;"
    },
    {
        "line": 216,
        "fullcodeline": "advance = I32(ptr);"
    },
    {
        "line": 226,
        "fullcodeline": "ptr += advance;"
    },
    {
        "line": 227,
        "fullcodeline": "bytes -= advance;"
    },
    {
        "line": 29,
        "fullcodeline": "return -1;"
    },
    {
        "line": 33,
        "fullcodeline": "return -1;"
    },
    {
        "line": 43,
        "fullcodeline": "if (bytes < 10) {"
    },
    {
        "line": 48,
        "fullcodeline": "switch (I16(ptr + 4)) {"
    },
    {
        "line": 217,
        "fullcodeline": "if (advance == 0 ) {"
    },
    {
        "line": 222,
        "fullcodeline": "if (advance < 0 || advance > bytes) {"
    },
    {
        "line": 44,
        "fullcodeline": "state->errcode = IMAGING_CODEC_OVERRUN;"
    },
    {
        "line": 56,
        "fullcodeline": "lines = I16(data);"
    },
    {
        "line": 57,
        "fullcodeline": "data += 2;"
    },
    {
        "line": 119,
        "fullcodeline": "y = I16(data);"
    },
    {
        "line": 120,
        "fullcodeline": "ymax = y + I16(data + 2);"
    },
    {
        "line": 121,
        "fullcodeline": "data += 4;"
    },
    {
        "line": 213,
        "fullcodeline": "state->errcode = IMAGING_CODEC_UNKNOWN;"
    },
    {
        "line": 219,
        "fullcodeline": "state->errcode = IMAGING_CODEC_BROKEN;"
    },
    {
        "line": 223,
        "fullcodeline": "state->errcode = IMAGING_CODEC_OVERRUN;"
    },
    {
        "line": 45,
        "fullcodeline": "return -1;"
    },
    {
        "line": 58,
        "fullcodeline": "for (l = y = 0; l < lines && y < state->ysize; l++, y++) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (l < lines) {"
    },
    {
        "line": 122,
        "fullcodeline": "for (; y < ymax && y < state->ysize; y++) {"
    },
    {
        "line": 151,
        "fullcodeline": "if (y < ymax) {"
    },
    {
        "line": 159,
        "fullcodeline": "for (y = 0; y < state->ysize; y++) {"
    },
    {
        "line": 166,
        "fullcodeline": "for (y = 0; y < state->ysize; y++) {"
    },
    {
        "line": 197,
        "fullcodeline": "if (state->xsize > bytes / state->ysize) {"
    },
    {
        "line": 201,
        "fullcodeline": "for (y = 0; y < state->ysize; y++) {"
    },
    {
        "line": 214,
        "fullcodeline": "return -1;"
    },
    {
        "line": 220,
        "fullcodeline": "return -1;"
    },
    {
        "line": 224,
        "fullcodeline": "return -1;"
    },
    {
        "line": 59,
        "fullcodeline": "UINT8 *local_buf = (UINT8 *)im->image[y];"
    },
    {
        "line": 61,
        "fullcodeline": "ERR_IF_DATA_OOB(2)"
    },
    {
        "line": 62,
        "fullcodeline": "packets = I16(data);"
    },
    {
        "line": 63,
        "fullcodeline": "data += 2;"
    },
    {
        "line": 112,
        "fullcodeline": "state->errcode = IMAGING_CODEC_OVERRUN;"
    },
    {
        "line": 123,
        "fullcodeline": "UINT8 *out = (UINT8 *)im->image[y];"
    },
    {
        "line": 124,
        "fullcodeline": "ERR_IF_DATA_OOB(1)"
    },
    {
        "line": 153,
        "fullcodeline": "state->errcode = IMAGING_CODEC_OVERRUN;"
    },
    {
        "line": 160,
        "fullcodeline": "memset(im->image[y], 0, state->xsize);"
    },
    {
        "line": 167,
        "fullcodeline": "UINT8 *out = (UINT8 *)im->image[y];"
    },
    {
        "line": 168,
        "fullcodeline": "data += 1; /* ignore packetcount byte */"
    },
    {
        "line": 202,
        "fullcodeline": "UINT8 *local_buf = (UINT8 *)im->image[y];"
    },
    {
        "line": 203,
        "fullcodeline": "memcpy(local_buf, data, state->xsize);"
    },
    {
        "line": 204,
        "fullcodeline": "data += state->xsize;"
    },
    {
        "line": 64,
        "fullcodeline": "while (packets & 0x8000) {"
    },
    {
        "line": 81,
        "fullcodeline": "for (p = x = 0; p < packets; p++) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (p < packets) {"
    },
    {
        "line": 113,
        "fullcodeline": "return -1;"
    },
    {
        "line": 126,
        "fullcodeline": "for (p = x = 0; p < packets; p++, x += i) {"
    },
    {
        "line": 147,
        "fullcodeline": "if (p < packets) {"
    },
    {
        "line": 154,
        "fullcodeline": "return -1;"
    },
    {
        "line": 169,
        "fullcodeline": "for (x = 0; x < state->xsize; x += i) {"
    },
    {
        "line": 188,
        "fullcodeline": "if (x != state->xsize) {"
    },
    {
        "line": 199,
        "fullcodeline": "return ptr - buf; /* bytes consumed */"
    },
    {
        "line": 77,
        "fullcodeline": "ERR_IF_DATA_OOB(2)"
    },
    {
        "line": 78,
        "fullcodeline": "packets = I16(data);"
    },
    {
        "line": 79,
        "fullcodeline": "data += 2;"
    },
    {
        "line": 82,
        "fullcodeline": "ERR_IF_DATA_OOB(2)"
    },
    {
        "line": 83,
        "fullcodeline": "x += data[0]; /* pixel skip */"
    },
    {
        "line": 125,
        "fullcodeline": "int p, packets = *data++;"
    },
    {
        "line": 127,
        "fullcodeline": "ERR_IF_DATA_OOB(2)"
    },
    {
        "line": 128,
        "fullcodeline": "x += data[0]; /* skip pixels */"
    },
    {
        "line": 170,
        "fullcodeline": "ERR_IF_DATA_OOB(2)"
    },
    {
        "line": 190,
        "fullcodeline": "state->errcode = IMAGING_CODEC_OVERRUN;"
    },
    {
        "line": 66,
        "fullcodeline": "if (packets & 0x4000) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (data[1] >= 128) {"
    },
    {
        "line": 129,
        "fullcodeline": "if (data[1] & 0x80) {"
    },
    {
        "line": 171,
        "fullcodeline": "if (data[0] & 0x80) {"
    },
    {
        "line": 191,
        "fullcodeline": "return -1;"
    },
    {
        "line": 67,
        "fullcodeline": "y += 65536 - packets; /* skip lines */"
    },
    {
        "line": 85,
        "fullcodeline": "ERR_IF_DATA_OOB(4)"
    },
    {
        "line": 86,
        "fullcodeline": "i = 256 - data[1]; /* run */"
    },
    {
        "line": 94,
        "fullcodeline": "data += 2 + 2;"
    },
    {
        "line": 130,
        "fullcodeline": "i = 256 - data[1]; /* run */"
    },
    {
        "line": 134,
        "fullcodeline": "ERR_IF_DATA_OOB(3)"
    },
    {
        "line": 135,
        "fullcodeline": "memset(out + x, data[2], i);"
    },
    {
        "line": 136,
        "fullcodeline": "data += 3;"
    },
    {
        "line": 172,
        "fullcodeline": "i = 256 - data[0];"
    },
    {
        "line": 176,
        "fullcodeline": "ERR_IF_DATA_OOB(i + 1)"
    },
    {
        "line": 177,
        "fullcodeline": "memcpy(out + x, data + 1, i);"
    },
    {
        "line": 178,
        "fullcodeline": "data += i + 1;"
    },
    {
        "line": 68,
        "fullcodeline": "if (y >= state->ysize) {"
    },
    {
        "line": 75,
        "fullcodeline": "local_buf[state->xsize - 1] = (UINT8)packets;"
    },
    {
        "line": 87,
        "fullcodeline": "if (x + i + i > state->xsize) {"
    },
    {
        "line": 90,
        "fullcodeline": "for (j = 0; j < i; j++) {"
    },
    {
        "line": 96,
        "fullcodeline": "i = 2 * (int)data[1]; /* chunk */"
    },
    {
        "line": 100,
        "fullcodeline": "ERR_IF_DATA_OOB(2 + i)"
    },
    {
        "line": 101,
        "fullcodeline": "memcpy(local_buf + x, data + 2, i);"
    },
    {
        "line": 102,
        "fullcodeline": "data += 2 + i;"
    },
    {
        "line": 103,
        "fullcodeline": "x += i;"
    },
    {
        "line": 131,
        "fullcodeline": "if (x + i > state->xsize) {"
    },
    {
        "line": 138,
        "fullcodeline": "i = data[1]; /* chunk */"
    },
    {
        "line": 142,
        "fullcodeline": "ERR_IF_DATA_OOB(2 + i)"
    },
    {
        "line": 143,
        "fullcodeline": "memcpy(out + x, data + 2, i);"
    },
    {
        "line": 144,
        "fullcodeline": "data += i + 2;"
    },
    {
        "line": 173,
        "fullcodeline": "if (x + i > state->xsize) {"
    },
    {
        "line": 180,
        "fullcodeline": "i = data[0];"
    },
    {
        "line": 184,
        "fullcodeline": "memset(out + x, data[1], i);"
    },
    {
        "line": 185,
        "fullcodeline": "data += 2;"
    },
    {
        "line": 69,
        "fullcodeline": "state->errcode = IMAGING_CODEC_OVERRUN;"
    },
    {
        "line": 91,
        "fullcodeline": "local_buf[x++] = data[2];"
    },
    {
        "line": 92,
        "fullcodeline": "local_buf[x++] = data[3];"
    },
    {
        "line": 97,
        "fullcodeline": "if (x + i > state->xsize) {"
    },
    {
        "line": 139,
        "fullcodeline": "if (x + i > state->xsize) {"
    },
    {
        "line": 181,
        "fullcodeline": "if (x + i > state->xsize) {"
    },
    {
        "line": 70,
        "fullcodeline": "return -1;"
    }
]