[
    {
        "line": 11,
        "fullcodeline": "OP_REQUIRES(context,"
    },
    {
        "line": 17,
        "fullcodeline": "this->data_format = data_format;"
    },
    {
        "line": 18,
        "fullcodeline": "depth = GetTensorDim(tensor_in_shape, data_format, 'C') *"
    },
    {
        "line": 20,
        "fullcodeline": "tensor_in_cols = GetTensorDim(tensor_in_shape, data_format, 'W');"
    },
    {
        "line": 21,
        "fullcodeline": "tensor_in_rows = GetTensorDim(tensor_in_shape, data_format, 'H');"
    },
    {
        "line": 22,
        "fullcodeline": "tensor_in_batch = GetTensorDim(tensor_in_shape, data_format, 'N');"
    },
    {
        "line": 23,
        "fullcodeline": "window_rows = GetTensorDim(ksize, data_format, 'H');"
    },
    {
        "line": 24,
        "fullcodeline": "window_cols = GetTensorDim(ksize, data_format, 'W');"
    },
    {
        "line": 25,
        "fullcodeline": "depth_window = GetTensorDim(ksize, data_format, 'C');"
    },
    {
        "line": 26,
        "fullcodeline": "row_stride = GetTensorDim(stride, data_format, 'H');"
    },
    {
        "line": 27,
        "fullcodeline": "col_stride = GetTensorDim(stride, data_format, 'W');"
    },
    {
        "line": 28,
        "fullcodeline": "depth_stride = GetTensorDim(stride, data_format, 'C');"
    },
    {
        "line": 32,
        "fullcodeline": "OP_REQUIRES(context,"
    },
    {
        "line": 12,
        "fullcodeline": "GetTensorSpatialDims(tensor_in_shape.dims(), data_format) == 2,"
    },
    {
        "line": 13,
        "fullcodeline": "errors::InvalidArgument("
    },
    {
        "line": 33,
        "fullcodeline": "(depth_window == 1 || (window_rows == 1 && window_cols == 1)),"
    },
    {
        "line": 34,
        "fullcodeline": "errors::Unimplemented("
    },
    {
        "line": 37,
        "fullcodeline": "if (padding == Padding::EXPLICIT) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (depth_window == 1) {"
    },
    {
        "line": 15,
        "fullcodeline": "tensor_in_shape.dims(), \" \", data_format));"
    },
    {
        "line": 19,
        "fullcodeline": "(data_format == FORMAT_NCHW_VECT_C ? 4 : 1);"
    },
    {
        "line": 38,
        "fullcodeline": "OP_REQUIRES_OK(context, CheckValidPadding(padding, explicit_paddings,"
    },
    {
        "line": 40,
        "fullcodeline": "GetExplicitPaddingForDim(explicit_paddings, data_format, 'H', &pad_top,"
    },
    {
        "line": 42,
        "fullcodeline": "GetExplicitPaddingForDim(explicit_paddings, data_format, 'W', &pad_left,"
    },
    {
        "line": 44,
        "fullcodeline": "OP_REQUIRES_OK(context, CheckPaddingSize(window_rows, window_cols, pad_top,"
    },
    {
        "line": 49,
        "fullcodeline": "OP_REQUIRES_OK(context, GetWindowedOutputSizeVerbose("
    },
    {
        "line": 52,
        "fullcodeline": "OP_REQUIRES_OK(context, GetWindowedOutputSizeVerbose("
    },
    {
        "line": 55,
        "fullcodeline": "pad_depth = 0;"
    },
    {
        "line": 56,
        "fullcodeline": "out_depth = depth;"
    },
    {
        "line": 61,
        "fullcodeline": "OP_REQUIRES("
    },
    {
        "line": 65,
        "fullcodeline": "OP_REQUIRES("
    },
    {
        "line": 71,
        "fullcodeline": "OP_REQUIRES(context,"
    },
    {
        "line": 78,
        "fullcodeline": "pad_depth = 0;"
    },
    {
        "line": 79,
        "fullcodeline": "out_depth = depth / depth_window;"
    },
    {
        "line": 62,
        "fullcodeline": "context, depth % depth_window == 0,"
    },
    {
        "line": 63,
        "fullcodeline": "errors::Unimplemented(\"Depthwise max pooling requires the depth \""
    },
    {
        "line": 66,
        "fullcodeline": "context, depth_stride == depth_window,"
    },
    {
        "line": 67,
        "fullcodeline": "errors::Unimplemented(\"Depthwise max pooling requires the depth \""
    },
    {
        "line": 72,
        "fullcodeline": "(DeviceType(static_cast<Device*>(context->device())"
    },
    {
        "line": 75,
        "fullcodeline": "errors::Unimplemented(\"Depthwise max pooling is currently \""
    },
    {
        "line": 74,
        "fullcodeline": ".device_type()) == DeviceType(DEVICE_CPU)),"
    }
]