[
    {
        "line": 4,
        "fullcodeline": "memcpy(&ualg->cru_name, &alg->cra_name, sizeof(ualg->cru_name));"
    },
    {
        "line": 5,
        "fullcodeline": "memcpy(&ualg->cru_driver_name, &alg->cra_driver_name,"
    },
    {
        "line": 7,
        "fullcodeline": "memcpy(&ualg->cru_module_name, module_name(alg->cra_module),"
    },
    {
        "line": 10,
        "fullcodeline": "ualg->cru_flags = alg->cra_flags;"
    },
    {
        "line": 11,
        "fullcodeline": "ualg->cru_refcnt = atomic_read(&alg->cra_refcnt);"
    },
    {
        "line": 6,
        "fullcodeline": "sizeof(ualg->cru_driver_name));"
    },
    {
        "line": 13,
        "fullcodeline": "if (nla_put_u32(skb, CRYPTOCFGA_PRIORITY_VAL, alg->cra_priority))"
    },
    {
        "line": 15,
        "fullcodeline": "if (alg->cra_flags & CRYPTO_ALG_LARVAL) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (alg->cra_type && alg->cra_type->report) {"
    },
    {
        "line": 33,
        "fullcodeline": "switch (alg->cra_flags & (CRYPTO_ALG_TYPE_MASK | CRYPTO_ALG_LARVAL)) {"
    },
    {
        "line": 50,
        "fullcodeline": "return -EMSGSIZE;"
    },
    {
        "line": 18,
        "fullcodeline": "snprintf(rl.type, CRYPTO_MAX_ALG_NAME, \"%s\", \"larval\");"
    },
    {
        "line": 20,
        "fullcodeline": "if (nla_put(skb, CRYPTOCFGA_REPORT_LARVAL,"
    },
    {
        "line": 27,
        "fullcodeline": "if (alg->cra_type->report(skb, alg))"
    },
    {
        "line": 35,
        "fullcodeline": "if (crypto_report_cipher(skb, alg))"
    },
    {
        "line": 40,
        "fullcodeline": "if (crypto_report_comp(skb, alg))"
    },
    {
        "line": 21,
        "fullcodeline": "sizeof(struct crypto_report_larval), &rl))"
    }
]