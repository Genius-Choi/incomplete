[
    {
        "line": 26,
        "fullcodeline": "unsigned char *BImgBuff=NULL,*ptrB;"
    },
    {
        "line": 32,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 33,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 37,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 38,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 39,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 40,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 49,
        "fullcodeline": "palette=NULL;"
    },
    {
        "line": 50,
        "fullcodeline": "clone_info=NULL;"
    },
    {
        "line": 51,
        "fullcodeline": "Header.Width=ReadBlobLSBShort(image);"
    },
    {
        "line": 52,
        "fullcodeline": "Header.Height=ReadBlobLSBShort(image);"
    },
    {
        "line": 53,
        "fullcodeline": "Header.Reserved=ReadBlobLSBShort(image);"
    },
    {
        "line": 59,
        "fullcodeline": "EncodedByte=ReadBlobLSBShort(image);"
    },
    {
        "line": 60,
        "fullcodeline": "RunCount=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 61,
        "fullcodeline": "RunCountMasked=RunCount & 0x7F;"
    },
    {
        "line": 62,
        "fullcodeline": "ldblk=0;"
    },
    {
        "line": 79,
        "fullcodeline": "i=0;        /*guess a number of bit planes*/"
    },
    {
        "line": 84,
        "fullcodeline": "depth=i;"
    },
    {
        "line": 86,
        "fullcodeline": "image->columns=Header.Width;"
    },
    {
        "line": 87,
        "fullcodeline": "image->rows=Header.Height;"
    },
    {
        "line": 88,
        "fullcodeline": "image->depth=8;"
    },
    {
        "line": 89,
        "fullcodeline": "image->colors=(size_t) (GetQuantumRange(1UL*i)+1);"
    },
    {
        "line": 92,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 106,
        "fullcodeline": "i=(ssize_t) strlen(clone_info->filename);"
    },
    {
        "line": 107,
        "fullcodeline": "j=i;"
    },
    {
        "line": 122,
        "fullcodeline": "(void) CopyMagickString(clone_info->filename+i,\".PAL\",(size_t)"
    },
    {
        "line": 141,
        "fullcodeline": "status=OpenBlob(clone_info,palette,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 235,
        "fullcodeline": "BImgBuff=(unsigned char *) AcquireQuantumMemory((size_t) ldblk,"
    },
    {
        "line": 239,
        "fullcodeline": "offset=SeekBlob(image,6 /*sizeof(Header)*/,SEEK_SET);"
    },
    {
        "line": 289,
        "fullcodeline": "(void) SyncImage(image,exception);"
    },
    {
        "line": 344,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 34,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 41,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 55,
        "fullcodeline": "if (Header.Width==0 || Header.Height==0 || Header.Reserved!=0)"
    },
    {
        "line": 63,
        "fullcodeline": "while((int) RunCountMasked!=0)  /*end of line?*/"
    },
    {
        "line": 78,
        "fullcodeline": "if(EncodedByte!=1) goto CUT_KO;  /*wrong data: size incorrect*/"
    },
    {
        "line": 80,
        "fullcodeline": "if(ldblk==(int) Header.Width)   i=8;"
    },
    {
        "line": 81,
        "fullcodeline": "if(2*ldblk==(int) Header.Width) i=4;"
    },
    {
        "line": 82,
        "fullcodeline": "if(8*ldblk==(int) Header.Width) i=1;"
    },
    {
        "line": 83,
        "fullcodeline": "if(i==0) goto CUT_KO;    /*wrong data: incorrect bit planes*/"
    },
    {
        "line": 91,
        "fullcodeline": "if (image_info->ping != MagickFalse) goto Finish;"
    },
    {
        "line": 93,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 103,
        "fullcodeline": "if ((clone_info=CloneImageInfo(image_info)) == NULL) goto NoPalette;"
    },
    {
        "line": 108,
        "fullcodeline": "while(--i>0)"
    },
    {
        "line": 124,
        "fullcodeline": "if((clone_info->file=fopen_utf8(clone_info->filename,\"rb\"))==NULL)"
    },
    {
        "line": 140,
        "fullcodeline": "if( (palette=AcquireImage(clone_info,exception))==NULL ) goto NoPalette;"
    },
    {
        "line": 142,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 151,
        "fullcodeline": "if(palette!=NULL)"
    },
    {
        "line": 215,
        "fullcodeline": "if(palette==NULL)"
    },
    {
        "line": 237,
        "fullcodeline": "if(BImgBuff==NULL) goto NoMemory;"
    },
    {
        "line": 240,
        "fullcodeline": "if (offset < 0)"
    },
    {
        "line": 249,
        "fullcodeline": "for (i=0; i < (int) Header.Height; i++)"
    },
    {
        "line": 294,
        "fullcodeline": "if(palette==NULL)"
    },
    {
        "line": 335,
        "fullcodeline": "if (BImgBuff != NULL)"
    },
    {
        "line": 337,
        "fullcodeline": "if (palette != NULL)"
    },
    {
        "line": 339,
        "fullcodeline": "if (clone_info != NULL)"
    },
    {
        "line": 341,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 345,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 35,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 43,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 56,
        "fullcodeline": "CUT_KO:  ThrowCUTReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 65,
        "fullcodeline": "i=1;"
    },
    {
        "line": 67,
        "fullcodeline": "offset=SeekBlob(image,TellBlob(image)+i,SEEK_SET);"
    },
    {
        "line": 71,
        "fullcodeline": "EncodedByte-=i+1;"
    },
    {
        "line": 72,
        "fullcodeline": "ldblk+=(ssize_t) RunCountMasked;"
    },
    {
        "line": 74,
        "fullcodeline": "RunCount=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 76,
        "fullcodeline": "RunCountMasked=RunCount & 0x7F;"
    },
    {
        "line": 126,
        "fullcodeline": "(void) CopyMagickString(clone_info->filename+i,\".pal\",(size_t)"
    },
    {
        "line": 145,
        "fullcodeline": "palette=DestroyImage(palette);"
    },
    {
        "line": 146,
        "fullcodeline": "palette=NULL;"
    },
    {
        "line": 153,
        "fullcodeline": "(void) ReadBlob(palette,2,(unsigned char *) PalHeader.FileId);"
    },
    {
        "line": 155,
        "fullcodeline": "PalHeader.Version=ReadBlobLSBShort(palette);"
    },
    {
        "line": 156,
        "fullcodeline": "PalHeader.Size=ReadBlobLSBShort(palette);"
    },
    {
        "line": 157,
        "fullcodeline": "PalHeader.FileType=(char) ReadBlobByte(palette);"
    },
    {
        "line": 158,
        "fullcodeline": "PalHeader.SubType=(char) ReadBlobByte(palette);"
    },
    {
        "line": 159,
        "fullcodeline": "PalHeader.BoardID=ReadBlobLSBShort(palette);"
    },
    {
        "line": 160,
        "fullcodeline": "PalHeader.GraphicsMode=ReadBlobLSBShort(palette);"
    },
    {
        "line": 161,
        "fullcodeline": "PalHeader.MaxIndex=ReadBlobLSBShort(palette);"
    },
    {
        "line": 162,
        "fullcodeline": "PalHeader.MaxRed=ReadBlobLSBShort(palette);"
    },
    {
        "line": 163,
        "fullcodeline": "PalHeader.MaxGreen=ReadBlobLSBShort(palette);"
    },
    {
        "line": 164,
        "fullcodeline": "PalHeader.MaxBlue=ReadBlobLSBShort(palette);"
    },
    {
        "line": 165,
        "fullcodeline": "(void) ReadBlob(palette,20,(unsigned char *) PalHeader.PaletteId);"
    },
    {
        "line": 170,
        "fullcodeline": "image->colors=PalHeader.MaxIndex+1;"
    },
    {
        "line": 218,
        "fullcodeline": "image->colors=256;"
    },
    {
        "line": 246,
        "fullcodeline": "BImgBuff=(unsigned char *) RelinquishMagickMemory(BImgBuff);"
    },
    {
        "line": 247,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 251,
        "fullcodeline": "EncodedByte=ReadBlobLSBShort(image);"
    },
    {
        "line": 253,
        "fullcodeline": "ptrB=BImgBuff;"
    },
    {
        "line": 254,
        "fullcodeline": "j=ldblk;"
    },
    {
        "line": 256,
        "fullcodeline": "RunCount=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 257,
        "fullcodeline": "RunCountMasked=RunCount & 0x7F;"
    },
    {
        "line": 287,
        "fullcodeline": "InsertRow(image,depth,BImgBuff,i,exception);"
    },
    {
        "line": 336,
        "fullcodeline": "BImgBuff=(unsigned char *) RelinquishMagickMemory(BImgBuff);"
    },
    {
        "line": 338,
        "fullcodeline": "palette=DestroyImage(palette);"
    },
    {
        "line": 340,
        "fullcodeline": "clone_info=DestroyImageInfo(clone_info);"
    },
    {
        "line": 342,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 44,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 66,
        "fullcodeline": "if((int) RunCount<0x80) i=(ssize_t) RunCountMasked;"
    },
    {
        "line": 68,
        "fullcodeline": "if (offset < 0)"
    },
    {
        "line": 70,
        "fullcodeline": "if(EOFBlob(image) != MagickFalse) goto CUT_KO;  /*wrong data*/"
    },
    {
        "line": 75,
        "fullcodeline": "if(EOFBlob(image) != MagickFalse)  goto CUT_KO;  /*wrong data: unexpected eof in line*/"
    },
    {
        "line": 95,
        "fullcodeline": "if (palette != NULL)"
    },
    {
        "line": 97,
        "fullcodeline": "if (clone_info != NULL)"
    },
    {
        "line": 99,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 110,
        "fullcodeline": "if(clone_info->filename[i]=='.')"
    },
    {
        "line": 114,
        "fullcodeline": "if(clone_info->filename[i]=='/' || clone_info->filename[i]=='\\\\' ||"
    },
    {
        "line": 123,
        "fullcodeline": "(MagickPathExtent-i));"
    },
    {
        "line": 128,
        "fullcodeline": "if((clone_info->file=fopen_utf8(clone_info->filename,\"rb\"))==NULL)"
    },
    {
        "line": 154,
        "fullcodeline": "if(strncmp(PalHeader.FileId,\"AH\",2) != 0) goto ErasePalette;"
    },
    {
        "line": 166,
        "fullcodeline": "if (EOFBlob(image))"
    },
    {
        "line": 169,
        "fullcodeline": "if(PalHeader.MaxIndex<1) goto ErasePalette;"
    },
    {
        "line": 171,
        "fullcodeline": "if (AcquireImageColormap(image,image->colors,exception) == MagickFalse) goto NoMemory;"
    },
    {
        "line": 173,
        "fullcodeline": "if(PalHeader.MaxRed==0) PalHeader.MaxRed=(unsigned int) QuantumRange;  /*avoid division by 0*/"
    },
    {
        "line": 174,
        "fullcodeline": "if(PalHeader.MaxGreen==0) PalHeader.MaxGreen=(unsigned int) QuantumRange;"
    },
    {
        "line": 175,
        "fullcodeline": "if(PalHeader.MaxBlue==0) PalHeader.MaxBlue=(unsigned int) QuantumRange;"
    },
    {
        "line": 177,
        "fullcodeline": "for(i=0;i<=(int) PalHeader.MaxIndex;i++)"
    },
    {
        "line": 208,
        "fullcodeline": "if (EOFBlob(image))"
    },
    {
        "line": 219,
        "fullcodeline": "if (AcquireImageColormap(image,image->colors,exception) == MagickFalse)"
    },
    {
        "line": 225,
        "fullcodeline": "for (i=0; i < (ssize_t)image->colors; i++)"
    },
    {
        "line": 242,
        "fullcodeline": "if (palette != NULL)"
    },
    {
        "line": 244,
        "fullcodeline": "if (clone_info != NULL)"
    },
    {
        "line": 259,
        "fullcodeline": "while ((int) RunCountMasked != 0)"
    },
    {
        "line": 296,
        "fullcodeline": "if ((image->storage_class == PseudoClass) &&"
    },
    {
        "line": 69,
        "fullcodeline": "ThrowCUTReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 96,
        "fullcodeline": "palette=DestroyImage(palette);"
    },
    {
        "line": 98,
        "fullcodeline": "clone_info=DestroyImageInfo(clone_info);"
    },
    {
        "line": 115,
        "fullcodeline": "clone_info->filename[i]==':' )"
    },
    {
        "line": 117,
        "fullcodeline": "i=j;"
    },
    {
        "line": 130,
        "fullcodeline": "clone_info->filename[i]='\\0';"
    },
    {
        "line": 167,
        "fullcodeline": "ThrowCUTReaderException(CorruptImageError,\"UnexpectedEndOfFile\");"
    },
    {
        "line": 179,
        "fullcodeline": "j=(ssize_t) TellBlob(palette);"
    },
    {
        "line": 187,
        "fullcodeline": "image->colormap[i].red=(Quantum) ReadBlobLSBShort(palette);"
    },
    {
        "line": 194,
        "fullcodeline": "image->colormap[i].green=(Quantum) ReadBlobLSBShort(palette);"
    },
    {
        "line": 200,
        "fullcodeline": "image->colormap[i].blue=(Quantum) ReadBlobLSBShort(palette);"
    },
    {
        "line": 209,
        "fullcodeline": "ThrowCUTReaderException(CorruptImageError,\"UnexpectedEndOfFile\");"
    },
    {
        "line": 222,
        "fullcodeline": "ThrowCUTReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 227,
        "fullcodeline": "image->colormap[i].red=ScaleCharToQuantum((unsigned char) i);"
    },
    {
        "line": 228,
        "fullcodeline": "image->colormap[i].green=ScaleCharToQuantum((unsigned char) i);"
    },
    {
        "line": 229,
        "fullcodeline": "image->colormap[i].blue=ScaleCharToQuantum((unsigned char) i);"
    },
    {
        "line": 243,
        "fullcodeline": "palette=DestroyImage(palette);"
    },
    {
        "line": 245,
        "fullcodeline": "clone_info=DestroyImageInfo(clone_info);"
    },
    {
        "line": 279,
        "fullcodeline": "ptrB+=(int) RunCountMasked;"
    },
    {
        "line": 280,
        "fullcodeline": "j-=(int) RunCountMasked;"
    },
    {
        "line": 283,
        "fullcodeline": "RunCount=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 284,
        "fullcodeline": "RunCountMasked=RunCount & 0x7F;"
    },
    {
        "line": 297,
        "fullcodeline": "(SetImageGray(image,exception) != MagickFalse))"
    },
    {
        "line": 127,
        "fullcodeline": "(MagickPathExtent-i));"
    },
    {
        "line": 131,
        "fullcodeline": "if((clone_info->file=fopen_utf8(clone_info->filename,\"rb\"))==NULL)"
    },
    {
        "line": 180,
        "fullcodeline": "if((j % 512)>512-6)"
    },
    {
        "line": 188,
        "fullcodeline": "if (QuantumRange != (Quantum) PalHeader.MaxRed)"
    },
    {
        "line": 195,
        "fullcodeline": "if (QuantumRange != (Quantum) PalHeader.MaxGreen)"
    },
    {
        "line": 201,
        "fullcodeline": "if (QuantumRange != (Quantum) PalHeader.MaxBlue)"
    },
    {
        "line": 261,
        "fullcodeline": "if((ssize_t) RunCountMasked>j)"
    },
    {
        "line": 270,
        "fullcodeline": "if((int) RunCount>0x80)"
    },
    {
        "line": 282,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse) goto Finish;  /* wrong data: unexpected eof in line */"
    },
    {
        "line": 299,
        "fullcodeline": "if(GetCutColors(image,exception)==2)"
    },
    {
        "line": 133,
        "fullcodeline": "clone_info=DestroyImageInfo(clone_info);"
    },
    {
        "line": 134,
        "fullcodeline": "clone_info=NULL;"
    },
    {
        "line": 182,
        "fullcodeline": "j=((j / 512)+1)*512;"
    },
    {
        "line": 183,
        "fullcodeline": "offset=SeekBlob(palette,j,SEEK_SET);"
    },
    {
        "line": 190,
        "fullcodeline": "image->colormap[i].red=ClampToQuantum(((double)"
    },
    {
        "line": 197,
        "fullcodeline": "image->colormap[i].green=ClampToQuantum"
    },
    {
        "line": 203,
        "fullcodeline": "image->colormap[i].blue=ClampToQuantum"
    },
    {
        "line": 263,
        "fullcodeline": "RunCountMasked=(unsigned char) j;"
    },
    {
        "line": 272,
        "fullcodeline": "RunValue=(unsigned char) ReadBlobByte(image);"
    },
    {
        "line": 273,
        "fullcodeline": "(void) memset(ptrB,(int) RunValue,(size_t) RunCountMasked);"
    },
    {
        "line": 311,
        "fullcodeline": "image->colormap[1].red=image->colormap[1].green="
    },
    {
        "line": 184,
        "fullcodeline": "if (offset < 0)"
    },
    {
        "line": 264,
        "fullcodeline": "if(j==0)"
    },
    {
        "line": 276,
        "fullcodeline": "(void) ReadBlob(image,(size_t) RunCountMasked,ptrB);"
    },
    {
        "line": 301,
        "fullcodeline": "for (i=0; i < (ssize_t)image->colors; i++)"
    },
    {
        "line": 313,
        "fullcodeline": "for (i=0; i < (ssize_t)image->rows; i++)"
    },
    {
        "line": 185,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 198,
        "fullcodeline": "(((double) image->colormap[i].green*QuantumRange+(PalHeader.MaxGreen>>1))/PalHeader.MaxGreen);"
    },
    {
        "line": 204,
        "fullcodeline": "(((double)image->colormap[i].blue*QuantumRange+(PalHeader.MaxBlue>>1))/PalHeader.MaxBlue);"
    },
    {
        "line": 305,
        "fullcodeline": "sample=ScaleCharToQuantum((unsigned char) i);"
    },
    {
        "line": 312,
        "fullcodeline": "image->colormap[1].blue=QuantumRange;"
    },
    {
        "line": 315,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,i,image->columns,1,exception);"
    },
    {
        "line": 306,
        "fullcodeline": "if(image->colormap[i].red!=sample) goto Finish;"
    },
    {
        "line": 307,
        "fullcodeline": "if(image->colormap[i].green!=sample) goto Finish;"
    },
    {
        "line": 308,
        "fullcodeline": "if(image->colormap[i].blue!=sample) goto Finish;"
    },
    {
        "line": 316,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 318,
        "fullcodeline": "for (j=0; j < (ssize_t)image->columns; j++)"
    },
    {
        "line": 328,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse) goto Finish;"
    },
    {
        "line": 191,
        "fullcodeline": "image->colormap[i].red*QuantumRange+(PalHeader.MaxRed>>1))/"
    },
    {
        "line": 326,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 320,
        "fullcodeline": "if (GetPixelRed(image,q) == ScaleCharToQuantum(1))"
    },
    {
        "line": 322,
        "fullcodeline": "SetPixelRed(image,QuantumRange,q);"
    },
    {
        "line": 323,
        "fullcodeline": "SetPixelGreen(image,QuantumRange,q);"
    },
    {
        "line": 324,
        "fullcodeline": "SetPixelBlue(image,QuantumRange,q);"
    }
]