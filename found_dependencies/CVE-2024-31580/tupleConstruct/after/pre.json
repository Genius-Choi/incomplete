[
    {
        "line": 2,
        "fullcodeline": "if (num_inputs > stack.size()) {"
    },
    {
        "line": 3,
        "fullcodeline": "TORCH_CHECK(false, \"Invalid number of inputs: \", num_inputs);"
    },
    {
        "line": 7,
        "fullcodeline": "stack.emplace_back(c10::ivalue::Tuple::create());"
    },
    {
        "line": 10,
        "fullcodeline": "stack.back() = c10::ivalue::Tuple::create(std::move(stack.back()));"
    },
    {
        "line": 13,
        "fullcodeline": "auto tuple = c10::ivalue::Tuple::create("
    },
    {
        "line": 16,
        "fullcodeline": "stack.pop_back();"
    },
    {
        "line": 21,
        "fullcodeline": "auto tuple = c10::ivalue::Tuple::create("
    },
    {
        "line": 25,
        "fullcodeline": "stack.pop_back();"
    },
    {
        "line": 26,
        "fullcodeline": "stack.pop_back();"
    },
    {
        "line": 34,
        "fullcodeline": "drop(stack, num_inputs - 1);"
    },
    {
        "line": 17,
        "fullcodeline": "stack.back() = std::move(tuple);"
    },
    {
        "line": 27,
        "fullcodeline": "stack.back() = std::move(tuple);"
    },
    {
        "line": 31,
        "fullcodeline": "std::vector<IValue> elems{"
    },
    {
        "line": 35,
        "fullcodeline": "stack.back() = c10::ivalue::Tuple::create(std::move(elems));"
    },
    {
        "line": 14,
        "fullcodeline": "std::move(stack[stack.size() - 2]),"
    },
    {
        "line": 15,
        "fullcodeline": "std::move(stack[stack.size() - 1]));"
    },
    {
        "line": 22,
        "fullcodeline": "std::move(stack[stack.size() - 3]),"
    },
    {
        "line": 23,
        "fullcodeline": "std::move(stack[stack.size() - 2]),"
    },
    {
        "line": 24,
        "fullcodeline": "std::move(stack[stack.size() - 1]));"
    },
    {
        "line": 32,
        "fullcodeline": "std::make_move_iterator(stack.end() - num_inputs),"
    },
    {
        "line": 33,
        "fullcodeline": "std::make_move_iterator(stack.end())};"
    }
]