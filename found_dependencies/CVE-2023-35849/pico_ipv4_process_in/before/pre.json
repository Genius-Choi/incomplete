[
    {
        "line": 3,
        "fullcodeline": "uint8_t option_len = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "int ret = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "struct pico_ipv4_hdr *hdr = (struct pico_ipv4_hdr *) f->net_hdr;"
    },
    {
        "line": 6,
        "fullcodeline": "uint16_t max_allowed = (uint16_t) ((int)f->buffer_len - (f->net_hdr - f->buffer) - (int)PICO_SIZE_IP4HDR);"
    },
    {
        "line": 18,
        "fullcodeline": "f->transport_hdr = ((uint8_t *)f->net_hdr) + PICO_SIZE_IP4HDR + option_len;"
    },
    {
        "line": 19,
        "fullcodeline": "f->transport_len = (uint16_t)(short_be(hdr->len) - PICO_SIZE_IP4HDR - option_len);"
    },
    {
        "line": 20,
        "fullcodeline": "f->net_len = (uint16_t)(PICO_SIZE_IP4HDR + option_len);"
    },
    {
        "line": 38,
        "fullcodeline": "ret = pico_ipv4_crc_check(f);"
    },
    {
        "line": 8,
        "fullcodeline": "if (!hdr)"
    },
    {
        "line": 25,
        "fullcodeline": "if (f->transport_len > max_allowed) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (ret < 1)"
    },
    {
        "line": 14,
        "fullcodeline": "if (((hdr->vhl) & 0x0F) > 5) {"
    },
    {
        "line": 15,
        "fullcodeline": "option_len =  (uint8_t)(4 * (((hdr->vhl) & 0x0F) - 5));"
    },
    {
        "line": 43,
        "fullcodeline": "if (!pico_ipv4_is_valid_src(S, hdr->src.addr, f->dev)) {"
    },
    {
        "line": 56,
        "fullcodeline": "if ((hdr->vhl & 0x0f) < 5) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (pico_ipv4_process_bcast_in(S, f) > 0)"
    },
    {
        "line": 83,
        "fullcodeline": "if (pico_ipv4_process_mcast_in(f) > 0)"
    },
    {
        "line": 86,
        "fullcodeline": "if (pico_ipv4_process_local_unicast_in(S, f) > 0)"
    },
    {
        "line": 9,
        "fullcodeline": "return -1;"
    },
    {
        "line": 58,
        "fullcodeline": "(void)pico_icmp4_param_problem(S, f, 0);"
    }
]