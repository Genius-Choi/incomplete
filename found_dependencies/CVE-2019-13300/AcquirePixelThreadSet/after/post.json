[
    {
        "line": 16,
        "fullcodeline": "number_threads=(size_t) GetMagickResourceLimit(ThreadResource);"
    },
    {
        "line": 17,
        "fullcodeline": "pixels=(PixelChannels **) AcquireQuantumMemory(number_threads,"
    },
    {
        "line": 21,
        "fullcodeline": "(void) memset(pixels,0,number_threads*sizeof(*pixels));"
    },
    {
        "line": 22,
        "fullcodeline": "columns=images->columns;"
    },
    {
        "line": 19,
        "fullcodeline": "if (pixels == (PixelChannels **) NULL)"
    },
    {
        "line": 23,
        "fullcodeline": "for (next=images; next != (Image *) NULL; next=next->next)"
    },
    {
        "line": 24,
        "fullcodeline": "columns=MagickMax(next->columns,columns);"
    },
    {
        "line": 25,
        "fullcodeline": "for (i=0; i < (ssize_t) number_threads; i++)"
    },
    {
        "line": 30,
        "fullcodeline": "pixels[i]=(PixelChannels *) AcquireQuantumMemory(columns,sizeof(**pixels));"
    },
    {
        "line": 20,
        "fullcodeline": "return((PixelChannels **) NULL);"
    },
    {
        "line": 31,
        "fullcodeline": "if (pixels[i] == (PixelChannels *) NULL)"
    },
    {
        "line": 33,
        "fullcodeline": "for (j=0; j < (ssize_t) columns; j++)"
    },
    {
        "line": 32,
        "fullcodeline": "return(DestroyPixelThreadSet(pixels));"
    },
    {
        "line": 38,
        "fullcodeline": "for (k=0; k < MaxPixelChannels; k++)"
    },
    {
        "line": 39,
        "fullcodeline": "pixels[i][j].channel[k]=0.0;"
    }
]