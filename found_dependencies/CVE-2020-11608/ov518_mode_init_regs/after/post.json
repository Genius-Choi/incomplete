[
    {
        "line": 3,
        "fullcodeline": "struct gspca_dev *gspca_dev = (struct gspca_dev *)sd;"
    },
    {
        "line": 8,
        "fullcodeline": "intf = usb_ifnum_to_if(sd->gspca_dev.dev, sd->gspca_dev.iface);"
    },
    {
        "line": 9,
        "fullcodeline": "alt = usb_altnum_to_altsetting(intf, sd->gspca_dev.alt);"
    },
    {
        "line": 21,
        "fullcodeline": "packet_size = le16_to_cpu(alt->endpoint[0].desc.wMaxPacketSize);"
    },
    {
        "line": 22,
        "fullcodeline": "ov518_reg_w32(sd, R51x_FIFO_PSIZE, packet_size & ~7, 2);"
    },
    {
        "line": 25,
        "fullcodeline": "reg_w(sd, 0x2b, 0);"
    },
    {
        "line": 26,
        "fullcodeline": "reg_w(sd, 0x2c, 0);"
    },
    {
        "line": 27,
        "fullcodeline": "reg_w(sd, 0x2d, 0);"
    },
    {
        "line": 28,
        "fullcodeline": "reg_w(sd, 0x2e, 0);"
    },
    {
        "line": 29,
        "fullcodeline": "reg_w(sd, 0x3b, 0);"
    },
    {
        "line": 30,
        "fullcodeline": "reg_w(sd, 0x3c, 0);"
    },
    {
        "line": 31,
        "fullcodeline": "reg_w(sd, 0x3d, 0);"
    },
    {
        "line": 32,
        "fullcodeline": "reg_w(sd, 0x3e, 0);"
    },
    {
        "line": 46,
        "fullcodeline": "hsegs = sd->gspca_dev.pixfmt.width / 16;"
    },
    {
        "line": 47,
        "fullcodeline": "vsegs = sd->gspca_dev.pixfmt.height / 4;"
    },
    {
        "line": 49,
        "fullcodeline": "reg_w(sd, 0x29, hsegs);"
    },
    {
        "line": 50,
        "fullcodeline": "reg_w(sd, 0x2a, vsegs);"
    },
    {
        "line": 52,
        "fullcodeline": "reg_w(sd, 0x39, hsegs);"
    },
    {
        "line": 53,
        "fullcodeline": "reg_w(sd, 0x3a, vsegs);"
    },
    {
        "line": 56,
        "fullcodeline": "reg_w(sd, 0x2f, 0x80);"
    },
    {
        "line": 67,
        "fullcodeline": "reg_w(sd, 0x51, 0x04);"
    },
    {
        "line": 68,
        "fullcodeline": "reg_w(sd, 0x22, 0x18);"
    },
    {
        "line": 69,
        "fullcodeline": "reg_w(sd, 0x23, 0xff);"
    },
    {
        "line": 107,
        "fullcodeline": "i2c_w(sd, 0x54, 0x23);"
    },
    {
        "line": 109,
        "fullcodeline": "reg_w(sd, 0x2f, 0x80);"
    },
    {
        "line": 137,
        "fullcodeline": "reg_w(sd, 0x2f, 0x80);"
    },
    {
        "line": 10,
        "fullcodeline": "if (!alt) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (alt->desc.bNumEndpoints < 1) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (sd->bridge == BRIDGE_OV518) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (sd->bridge == BRIDGE_OV518PLUS && sd->revision == 0 &&"
    },
    {
        "line": 71,
        "fullcodeline": "if (sd->bridge == BRIDGE_OV518PLUS) {"
    },
    {
        "line": 111,
        "fullcodeline": "if (sd->bridge == BRIDGE_OV518PLUS) {"
    },
    {
        "line": 11,
        "fullcodeline": "gspca_err(gspca_dev, \"Couldn't get altsetting\\n\");"
    },
    {
        "line": 12,
        "fullcodeline": "sd->gspca_dev.usb_err = -EIO;"
    },
    {
        "line": 17,
        "fullcodeline": "sd->gspca_dev.usb_err = -ENODEV;"
    },
    {
        "line": 36,
        "fullcodeline": "reg_w_mask(sd, 0x20, 0x08, 0x08);"
    },
    {
        "line": 39,
        "fullcodeline": "reg_w_mask(sd, 0x28, 0x80, 0xf0);"
    },
    {
        "line": 40,
        "fullcodeline": "reg_w_mask(sd, 0x38, 0x80, 0xf0);"
    },
    {
        "line": 60,
        "fullcodeline": "sd->sensor == SEN_OV7620AE)"
    },
    {
        "line": 61,
        "fullcodeline": "sd->clockdiv = 0;"
    },
    {
        "line": 112,
        "fullcodeline": "reg_w(sd, 0x24, 0x94);"
    },
    {
        "line": 113,
        "fullcodeline": "reg_w(sd, 0x25, 0x90);"
    },
    {
        "line": 114,
        "fullcodeline": "ov518_reg_w32(sd, 0xc4,    400, 2);\t/* 190h   */"
    },
    {
        "line": 115,
        "fullcodeline": "ov518_reg_w32(sd, 0xc6,    540, 2);\t/* 21ch   */"
    },
    {
        "line": 116,
        "fullcodeline": "ov518_reg_w32(sd, 0xc7,    540, 2);\t/* 21ch   */"
    },
    {
        "line": 117,
        "fullcodeline": "ov518_reg_w32(sd, 0xc8,    108, 2);\t/* 6ch    */"
    },
    {
        "line": 118,
        "fullcodeline": "ov518_reg_w32(sd, 0xca, 131098, 3);\t/* 2001ah */"
    },
    {
        "line": 119,
        "fullcodeline": "ov518_reg_w32(sd, 0xcb,    532, 2);\t/* 214h   */"
    },
    {
        "line": 120,
        "fullcodeline": "ov518_reg_w32(sd, 0xcc,   2400, 2);\t/* 960h   */"
    },
    {
        "line": 121,
        "fullcodeline": "ov518_reg_w32(sd, 0xcd,     32, 2);\t/* 20h    */"
    },
    {
        "line": 122,
        "fullcodeline": "ov518_reg_w32(sd, 0xce,    608, 2);\t/* 260h   */"
    },
    {
        "line": 42,
        "fullcodeline": "reg_w(sd, 0x28, 0x80);"
    },
    {
        "line": 43,
        "fullcodeline": "reg_w(sd, 0x38, 0x80);"
    },
    {
        "line": 63,
        "fullcodeline": "sd->clockdiv = 1;"
    },
    {
        "line": 103,
        "fullcodeline": "reg_w(sd, 0x71, 0x17);\t/* Compression-related? */"
    },
    {
        "line": 124,
        "fullcodeline": "reg_w(sd, 0x24, 0x9f);"
    },
    {
        "line": 125,
        "fullcodeline": "reg_w(sd, 0x25, 0x90);"
    },
    {
        "line": 126,
        "fullcodeline": "ov518_reg_w32(sd, 0xc4,    400, 2);\t/* 190h   */"
    },
    {
        "line": 127,
        "fullcodeline": "ov518_reg_w32(sd, 0xc6,    381, 2);\t/* 17dh   */"
    },
    {
        "line": 128,
        "fullcodeline": "ov518_reg_w32(sd, 0xc7,    381, 2);\t/* 17dh   */"
    },
    {
        "line": 129,
        "fullcodeline": "ov518_reg_w32(sd, 0xc8,    128, 2);\t/* 80h    */"
    },
    {
        "line": 130,
        "fullcodeline": "ov518_reg_w32(sd, 0xca, 183331, 3);\t/* 2cc23h */"
    },
    {
        "line": 131,
        "fullcodeline": "ov518_reg_w32(sd, 0xcb,    746, 2);\t/* 2eah   */"
    },
    {
        "line": 132,
        "fullcodeline": "ov518_reg_w32(sd, 0xcc,   1750, 2);\t/* 6d6h   */"
    },
    {
        "line": 133,
        "fullcodeline": "ov518_reg_w32(sd, 0xcd,     45, 2);\t/* 2dh    */"
    },
    {
        "line": 134,
        "fullcodeline": "ov518_reg_w32(sd, 0xce,    851, 2);\t/* 353h   */"
    },
    {
        "line": 96,
        "fullcodeline": "reg_w(sd, 0x20, 0x00);"
    },
    {
        "line": 97,
        "fullcodeline": "reg_w(sd, 0x21, 0x19);"
    },
    {
        "line": 100,
        "fullcodeline": "reg_w(sd, 0x21, 0x19);"
    },
    {
        "line": 86,
        "fullcodeline": "if (sd->revision > 0 &&"
    },
    {
        "line": 87,
        "fullcodeline": "sd->gspca_dev.pixfmt.width == 640) {"
    },
    {
        "line": 88,
        "fullcodeline": "reg_w(sd, 0x20, 0x60);"
    },
    {
        "line": 89,
        "fullcodeline": "reg_w(sd, 0x21, 0x1f);"
    },
    {
        "line": 91,
        "fullcodeline": "reg_w(sd, 0x20, 0x00);"
    },
    {
        "line": 92,
        "fullcodeline": "reg_w(sd, 0x21, 0x19);"
    }
]