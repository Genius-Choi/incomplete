[
    {
        "line": 5,
        "fullcodeline": "int i = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "while (i < caps_len) {"
    },
    {
        "line": 8,
        "fullcodeline": "ND_TCHECK2(opt[i], BGP_CAP_HEADER_SIZE);"
    },
    {
        "line": 9,
        "fullcodeline": "cap_type=opt[i];"
    },
    {
        "line": 10,
        "fullcodeline": "cap_len=opt[i+1];"
    },
    {
        "line": 11,
        "fullcodeline": "tcap_len=cap_len;"
    },
    {
        "line": 12,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      %s (%u), length: %u\","
    },
    {
        "line": 17,
        "fullcodeline": "ND_TCHECK2(opt[i+2], cap_len);"
    },
    {
        "line": 95,
        "fullcodeline": "i += BGP_CAP_HEADER_SIZE + cap_len;"
    },
    {
        "line": 92,
        "fullcodeline": "if (ndo->ndo_vflag > 1 && cap_len > 0) {"
    },
    {
        "line": 20,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\tAFI %s (%u), SAFI %s (%u)\","
    },
    {
        "line": 30,
        "fullcodeline": "ND_TCHECK_16BITS(opt + i + 2);"
    },
    {
        "line": 31,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\tRestart Flags: [%s], Restart Time %us\","
    },
    {
        "line": 34,
        "fullcodeline": "tcap_len-=2;"
    },
    {
        "line": 35,
        "fullcodeline": "cap_offset=4;"
    },
    {
        "line": 64,
        "fullcodeline": "cap_offset=2;"
    },
    {
        "line": 86,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\tno decoder for Capability %u\","
    },
    {
        "line": 93,
        "fullcodeline": "print_unknown_data(ndo, &opt[i+2], \"\\n\\t\\t\", cap_len);"
    },
    {
        "line": 13,
        "fullcodeline": "tok2str(bgp_capcode_values, \"Unknown\","
    },
    {
        "line": 36,
        "fullcodeline": "while(tcap_len>=4) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (cap_len == 4) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (tcap_len == 0) {"
    },
    {
        "line": 69,
        "fullcodeline": "while (tcap_len > 0) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (ndo->ndo_vflag <= 1)"
    },
    {
        "line": 37,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t  AFI %s (%u), SAFI %s (%u), Forwarding state preserved: %s\","
    },
    {
        "line": 45,
        "fullcodeline": "tcap_len-=4;"
    },
    {
        "line": 46,
        "fullcodeline": "cap_offset+=4;"
    },
    {
        "line": 58,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t 4 Byte AS %s\","
    },
    {
        "line": 66,
        "fullcodeline": "ND_PRINT((ndo, \" (bogus)\")); /* length */"
    },
    {
        "line": 74,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\tAFI %s (%u), SAFI %s (%u), Send/Receive: %s\","
    },
    {
        "line": 81,
        "fullcodeline": "tcap_len-=4;"
    },
    {
        "line": 82,
        "fullcodeline": "cap_offset+=4;"
    },
    {
        "line": 89,
        "fullcodeline": "print_unknown_data(ndo, &opt[i+2], \"\\n\\t\\t\", cap_len);"
    },
    {
        "line": 21,
        "fullcodeline": "tok2str(af_values, \"Unknown\","
    },
    {
        "line": 23,
        "fullcodeline": "EXTRACT_16BITS(opt+i+2),"
    },
    {
        "line": 24,
        "fullcodeline": "tok2str(bgp_safi_values, \"Unknown\","
    },
    {
        "line": 32,
        "fullcodeline": "((opt[i+2])&0x80) ? \"R\" : \"none\","
    },
    {
        "line": 33,
        "fullcodeline": "EXTRACT_16BITS(opt+i+2)&0xfff));"
    },
    {
        "line": 70,
        "fullcodeline": "if (tcap_len < 4) {"
    },
    {
        "line": 22,
        "fullcodeline": "EXTRACT_16BITS(opt+i+2)),"
    },
    {
        "line": 26,
        "fullcodeline": "opt[i+5]));"
    },
    {
        "line": 71,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t(invalid)\"));"
    },
    {
        "line": 25,
        "fullcodeline": "opt[i+5]),"
    },
    {
        "line": 38,
        "fullcodeline": "tok2str(af_values,\"Unknown\","
    },
    {
        "line": 40,
        "fullcodeline": "EXTRACT_16BITS(opt+i+cap_offset),"
    },
    {
        "line": 41,
        "fullcodeline": "tok2str(bgp_safi_values,\"Unknown\","
    },
    {
        "line": 44,
        "fullcodeline": "((opt[i+cap_offset+3])&0x80) ? \"yes\" : \"no\" ));"
    },
    {
        "line": 59,
        "fullcodeline": "as_printf(ndo, astostr, sizeof(astostr),"
    },
    {
        "line": 75,
        "fullcodeline": "tok2str(af_values,\"Unknown\",EXTRACT_16BITS(opt+i+cap_offset)),"
    },
    {
        "line": 76,
        "fullcodeline": "EXTRACT_16BITS(opt+i+cap_offset),"
    },
    {
        "line": 77,
        "fullcodeline": "tok2str(bgp_safi_values,\"Unknown\",opt[i+cap_offset+2]),"
    },
    {
        "line": 79,
        "fullcodeline": "tok2str(bgp_add_path_recvsend,\"Bogus (0x%02x)\",opt[i+cap_offset+3])"
    },
    {
        "line": 39,
        "fullcodeline": "EXTRACT_16BITS(opt+i+cap_offset)),"
    },
    {
        "line": 43,
        "fullcodeline": "opt[i+cap_offset+2],"
    },
    {
        "line": 60,
        "fullcodeline": "EXTRACT_32BITS(opt + i + 2))));"
    },
    {
        "line": 78,
        "fullcodeline": "opt[i+cap_offset+2],"
    },
    {
        "line": 42,
        "fullcodeline": "opt[i+cap_offset+2]),"
    }
]