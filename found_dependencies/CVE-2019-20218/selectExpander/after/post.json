[
    {
        "line": 2,
        "fullcodeline": "Parse *pParse = pWalker->pParse;"
    },
    {
        "line": 7,
        "fullcodeline": "sqlite3 *db = pParse->db;"
    },
    {
        "line": 9,
        "fullcodeline": "u16 selFlags = p->selFlags;"
    },
    {
        "line": 10,
        "fullcodeline": "u32 elistFlags = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "p->selFlags |= SF_Expanded;"
    },
    {
        "line": 16,
        "fullcodeline": "assert( p->pSrc!=0 );"
    },
    {
        "line": 24,
        "fullcodeline": "pTabList = p->pSrc;"
    },
    {
        "line": 25,
        "fullcodeline": "pEList = p->pEList;"
    },
    {
        "line": 26,
        "fullcodeline": "sqlite3WithPush(pParse, p->pWith, 0);"
    },
    {
        "line": 31,
        "fullcodeline": "sqlite3SrcListAssignCursors(pParse, pTabList);"
    },
    {
        "line": 17,
        "fullcodeline": "if( (selFlags & SF_Expanded)!=0 ){"
    },
    {
        "line": 37,
        "fullcodeline": "for(i=0, pFrom=pTabList->a; i<pTabList->nSrc; i++, pFrom++){"
    },
    {
        "line": 99,
        "fullcodeline": "if( pParse->nErr || db->mallocFailed || sqliteProcessJoin(pParse, p) ){"
    },
    {
        "line": 114,
        "fullcodeline": "for(k=0; k<pEList->nExpr; k++){"
    },
    {
        "line": 122,
        "fullcodeline": "if( k<pEList->nExpr ){"
    },
    {
        "line": 22,
        "fullcodeline": "p->selId = ++pParse->nSelect;"
    },
    {
        "line": 39,
        "fullcodeline": "assert( pFrom->fg.isRecursive==0 || pFrom->pTab!=0 );"
    },
    {
        "line": 41,
        "fullcodeline": "assert( pFrom->pTab==0 );"
    },
    {
        "line": 117,
        "fullcodeline": "assert( pE->op!=TK_DOT || pE->pRight!=0 );"
    },
    {
        "line": 118,
        "fullcodeline": "assert( pE->op!=TK_DOT || (pE->pLeft!=0 && pE->pLeft->op==TK_ID) );"
    },
    {
        "line": 120,
        "fullcodeline": "elistFlags |= pE->flags;"
    },
    {
        "line": 128,
        "fullcodeline": "struct ExprList_item *a = pEList->a;"
    },
    {
        "line": 129,
        "fullcodeline": "ExprList *pNew = 0;"
    },
    {
        "line": 131,
        "fullcodeline": "int longNames = (flags & SQLITE_FullColNames)!=0"
    },
    {
        "line": 263,
        "fullcodeline": "sqlite3ExprListDelete(db, pEList);"
    },
    {
        "line": 264,
        "fullcodeline": "p->pEList = pNew;"
    },
    {
        "line": 43,
        "fullcodeline": "if( withExpand(pWalker, pFrom) ) return WRC_Abort;"
    },
    {
        "line": 92,
        "fullcodeline": "if( sqlite3IndexedByLookup(pParse, pFrom) ){"
    },
    {
        "line": 116,
        "fullcodeline": "if( pE->op==TK_ASTERISK ) break;"
    },
    {
        "line": 119,
        "fullcodeline": "if( pE->op==TK_DOT && pE->pRight->op==TK_ASTERISK ) break;"
    },
    {
        "line": 134,
        "fullcodeline": "for(k=0; k<pEList->nExpr; k++){"
    },
    {
        "line": 271,
        "fullcodeline": "if( (elistFlags & (EP_HasFunc|EP_Subquery))!=0 ){"
    },
    {
        "line": 132,
        "fullcodeline": "&& (flags & SQLITE_ShortColNames)==0;"
    },
    {
        "line": 136,
        "fullcodeline": "elistFlags |= pE->flags;"
    },
    {
        "line": 137,
        "fullcodeline": "pRight = pE->pRight;"
    },
    {
        "line": 138,
        "fullcodeline": "assert( pE->op!=TK_DOT || pRight!=0 );"
    },
    {
        "line": 268,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"too many columns in result set\");"
    },
    {
        "line": 272,
        "fullcodeline": "p->selFlags |= SF_ComplexResult;"
    },
    {
        "line": 139,
        "fullcodeline": "if( pE->op!=TK_ASTERISK"
    },
    {
        "line": 46,
        "fullcodeline": "if( pFrom->zName==0 ){"
    },
    {
        "line": 140,
        "fullcodeline": "&& (pE->op!=TK_DOT || pRight->op!=TK_ASTERISK)"
    },
    {
        "line": 144,
        "fullcodeline": "pNew = sqlite3ExprListAppend(pParse, pNew, a[k].pExpr);"
    },
    {
        "line": 151,
        "fullcodeline": "a[k].pExpr = 0;"
    },
    {
        "line": 48,
        "fullcodeline": "Select *pSel = pFrom->pSelect;"
    },
    {
        "line": 50,
        "fullcodeline": "assert( pSel!=0 );"
    },
    {
        "line": 51,
        "fullcodeline": "assert( pFrom->pTab==0 );"
    },
    {
        "line": 155,
        "fullcodeline": "int tableSeen = 0;      /* Set to 1 when TABLE matches */"
    },
    {
        "line": 156,
        "fullcodeline": "char *zTName = 0;       /* text of name of TABLE */"
    },
    {
        "line": 52,
        "fullcodeline": "if( sqlite3WalkSelect(pWalker, pSel) ) return WRC_Abort;"
    },
    {
        "line": 53,
        "fullcodeline": "if( sqlite3ExpandSubquery(pParse, pFrom) ) return WRC_Abort;"
    },
    {
        "line": 57,
        "fullcodeline": "assert( pFrom->pTab==0 );"
    },
    {
        "line": 58,
        "fullcodeline": "pFrom->pTab = pTab = sqlite3LocateTableItem(pParse, 0, pFrom);"
    },
    {
        "line": 66,
        "fullcodeline": "pTab->nTabRef++;"
    },
    {
        "line": 148,
        "fullcodeline": "a[k].zName = 0;"
    },
    {
        "line": 149,
        "fullcodeline": "a[k].zSpan = 0;"
    },
    {
        "line": 157,
        "fullcodeline": "if( pE->op==TK_DOT ){"
    },
    {
        "line": 162,
        "fullcodeline": "for(i=0, pFrom=pTabList->a; i<pTabList->nSrc; i++, pFrom++){"
    },
    {
        "line": 254,
        "fullcodeline": "if( !tableSeen ){"
    },
    {
        "line": 59,
        "fullcodeline": "if( pTab==0 ) return WRC_Abort;"
    },
    {
        "line": 60,
        "fullcodeline": "if( pTab->nTabRef>=0xffff ){"
    },
    {
        "line": 67,
        "fullcodeline": "if( !IsVirtual(pTab) && cannotBeFunction(pParse, pFrom) ){"
    },
    {
        "line": 71,
        "fullcodeline": "if( IsVirtual(pTab) || pTab->pSelect ){"
    },
    {
        "line": 158,
        "fullcodeline": "assert( pE->pLeft!=0 );"
    },
    {
        "line": 159,
        "fullcodeline": "assert( !ExprHasProperty(pE->pLeft, EP_IntValue) );"
    },
    {
        "line": 163,
        "fullcodeline": "Table *pTab = pFrom->pTab;"
    },
    {
        "line": 164,
        "fullcodeline": "Select *pSub = pFrom->pSelect;"
    },
    {
        "line": 165,
        "fullcodeline": "char *zTabName = pFrom->zAlias;"
    },
    {
        "line": 166,
        "fullcodeline": "const char *zSchemaName = 0;"
    },
    {
        "line": 61,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"too many references to \\\"%s\\\": max 65535\","
    },
    {
        "line": 63,
        "fullcodeline": "pFrom->pTab = 0;"
    },
    {
        "line": 73,
        "fullcodeline": "u8 eCodeOrig = pWalker->eCode;"
    },
    {
        "line": 75,
        "fullcodeline": "assert( pFrom->pSelect==0 );"
    },
    {
        "line": 80,
        "fullcodeline": "pFrom->pSelect = sqlite3SelectDup(db, pTab->pSelect, 0);"
    },
    {
        "line": 81,
        "fullcodeline": "nCol = pTab->nCol;"
    },
    {
        "line": 82,
        "fullcodeline": "pTab->nCol = -1;"
    },
    {
        "line": 83,
        "fullcodeline": "pWalker->eCode = 1;  /* Turn on Select.selId renumbering */"
    },
    {
        "line": 84,
        "fullcodeline": "sqlite3WalkSelect(pWalker, pFrom->pSelect);"
    },
    {
        "line": 85,
        "fullcodeline": "pWalker->eCode = eCodeOrig;"
    },
    {
        "line": 86,
        "fullcodeline": "pTab->nCol = nCol;"
    },
    {
        "line": 168,
        "fullcodeline": "if( zTabName==0 ){"
    },
    {
        "line": 172,
        "fullcodeline": "if( pSub==0 || (pSub->selFlags & SF_NestedFrom)==0 ){"
    },
    {
        "line": 180,
        "fullcodeline": "for(j=0; j<pTab->nCol; j++){"
    },
    {
        "line": 74,
        "fullcodeline": "if( sqlite3ViewGetColumnNames(pParse, pTab) ) return WRC_Abort;"
    },
    {
        "line": 76,
        "fullcodeline": "if( pTab->pSelect && (db->flags & SQLITE_EnableView)==0 ){"
    },
    {
        "line": 146,
        "fullcodeline": "pNew->a[pNew->nExpr-1].zName = a[k].zName;"
    },
    {
        "line": 147,
        "fullcodeline": "pNew->a[pNew->nExpr-1].zSpan = a[k].zSpan;"
    },
    {
        "line": 169,
        "fullcodeline": "zTabName = pTab->zName;"
    },
    {
        "line": 173,
        "fullcodeline": "pSub = 0;"
    },
    {
        "line": 177,
        "fullcodeline": "iDb = sqlite3SchemaToIndex(db, pTab->pSchema);"
    },
    {
        "line": 178,
        "fullcodeline": "zSchemaName = iDb>=0 ? db->aDb[iDb].zDbSName : \"*\";"
    },
    {
        "line": 186,
        "fullcodeline": "assert( zName );"
    },
    {
        "line": 202,
        "fullcodeline": "tableSeen = 1;"
    },
    {
        "line": 218,
        "fullcodeline": "pRight = sqlite3Expr(db, TK_ID, zName);"
    },
    {
        "line": 219,
        "fullcodeline": "zColname = zName;"
    },
    {
        "line": 220,
        "fullcodeline": "zToFree = 0;"
    },
    {
        "line": 236,
        "fullcodeline": "pNew = sqlite3ExprListAppend(pParse, pNew, pExpr);"
    },
    {
        "line": 237,
        "fullcodeline": "sqlite3TokenInit(&sColname, zColname);"
    },
    {
        "line": 238,
        "fullcodeline": "sqlite3ExprListSetName(pParse, pNew, &sColname, 0);"
    },
    {
        "line": 251,
        "fullcodeline": "sqlite3DbFree(db, zToFree);"
    },
    {
        "line": 256,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"no such table: %s\", zTName);"
    },
    {
        "line": 77,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"access to view \\\"%s\\\" prohibited\","
    },
    {
        "line": 174,
        "fullcodeline": "if( zTName && sqlite3StrICmp(zTName, zTabName)!=0 ){"
    },
    {
        "line": 187,
        "fullcodeline": "if( zTName && pSub"
    },
    {
        "line": 197,
        "fullcodeline": "if( (p->selFlags & SF_IncludeHidden)==0"
    },
    {
        "line": 204,
        "fullcodeline": "if( i>0 && zTName==0 ){"
    },
    {
        "line": 221,
        "fullcodeline": "if( longNames || pTabList->nSrc>1 ){"
    },
    {
        "line": 239,
        "fullcodeline": "if( pNew && (p->selFlags & SF_NestedFrom)!=0 ){"
    },
    {
        "line": 258,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"no tables specified\");"
    },
    {
        "line": 188,
        "fullcodeline": "&& sqlite3MatchSpanName(pSub->pEList->a[j].zSpan, 0, zTName, 0)==0"
    },
    {
        "line": 223,
        "fullcodeline": "pLeft = sqlite3Expr(db, TK_ID, zTabName);"
    },
    {
        "line": 224,
        "fullcodeline": "pExpr = sqlite3PExpr(pParse, TK_DOT, pLeft, pRight);"
    },
    {
        "line": 249,
        "fullcodeline": "pX->bSpanIsTab = 1;"
    },
    {
        "line": 205,
        "fullcodeline": "if( (pFrom->fg.jointype & JT_NATURAL)!=0"
    },
    {
        "line": 212,
        "fullcodeline": "if( sqlite3IdListIndex(pFrom->pUsing, zName)>=0 ){"
    },
    {
        "line": 234,
        "fullcodeline": "pExpr = pRight;"
    },
    {
        "line": 206,
        "fullcodeline": "&& tableAndColumnIndex(pTabList, i, zName, 0, 0)"
    },
    {
        "line": 226,
        "fullcodeline": "pLeft = sqlite3Expr(db, TK_ID, zSchemaName);"
    },
    {
        "line": 227,
        "fullcodeline": "pExpr = sqlite3PExpr(pParse, TK_DOT, pLeft, pExpr);"
    },
    {
        "line": 230,
        "fullcodeline": "zColname = sqlite3MPrintf(db, \"%s.%s\", zTabName, zName);"
    },
    {
        "line": 231,
        "fullcodeline": "zToFree = zColname;"
    },
    {
        "line": 242,
        "fullcodeline": "pX->zSpan = sqlite3DbStrDup(db, pSub->pEList->a[j].zSpan);"
    },
    {
        "line": 243,
        "fullcodeline": "testcase( pX->zSpan==0 );"
    },
    {
        "line": 240,
        "fullcodeline": "struct ExprList_item *pX = &pNew->a[pNew->nExpr-1];"
    },
    {
        "line": 245,
        "fullcodeline": "pX->zSpan = sqlite3MPrintf(db, \"%s.%s.%s\","
    },
    {
        "line": 247,
        "fullcodeline": "testcase( pX->zSpan==0 );"
    }
]