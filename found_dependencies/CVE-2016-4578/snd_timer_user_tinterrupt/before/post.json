[
    {
        "line": 5,
        "fullcodeline": "struct snd_timer_user *tu = timeri->callback_data;"
    },
    {
        "line": 8,
        "fullcodeline": "int prev, append = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "memset(&tstamp, 0, sizeof(tstamp));"
    },
    {
        "line": 11,
        "fullcodeline": "spin_lock(&tu->qlock);"
    },
    {
        "line": 46,
        "fullcodeline": "r1.event = SNDRV_TIMER_EVENT_TICK;"
    },
    {
        "line": 47,
        "fullcodeline": "r1.tstamp = tstamp;"
    },
    {
        "line": 48,
        "fullcodeline": "r1.val = ticks;"
    },
    {
        "line": 49,
        "fullcodeline": "snd_timer_user_append_to_tqueue(tu, &r1);"
    },
    {
        "line": 50,
        "fullcodeline": "append++;"
    },
    {
        "line": 52,
        "fullcodeline": "spin_unlock(&tu->qlock);"
    },
    {
        "line": 55,
        "fullcodeline": "kill_fasync(&tu->fasync, SIGIO, POLL_IN);"
    },
    {
        "line": 56,
        "fullcodeline": "wake_up(&tu->qchange_sleep);"
    },
    {
        "line": 12,
        "fullcodeline": "if ((tu->filter & ((1 << SNDRV_TIMER_EVENT_RESOLUTION) |"
    },
    {
        "line": 17,
        "fullcodeline": "if (tu->last_resolution != resolution || ticks > 0) {"
    },
    {
        "line": 23,
        "fullcodeline": "if ((tu->filter & (1 << SNDRV_TIMER_EVENT_RESOLUTION)) &&"
    },
    {
        "line": 32,
        "fullcodeline": "if ((tu->filter & (1 << SNDRV_TIMER_EVENT_TICK)) == 0)"
    },
    {
        "line": 34,
        "fullcodeline": "if (ticks == 0)"
    },
    {
        "line": 36,
        "fullcodeline": "if (tu->qused > 0) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (append == 0)"
    },
    {
        "line": 14,
        "fullcodeline": "spin_unlock(&tu->qlock);"
    },
    {
        "line": 24,
        "fullcodeline": "tu->last_resolution != resolution) {"
    },
    {
        "line": 25,
        "fullcodeline": "r1.event = SNDRV_TIMER_EVENT_RESOLUTION;"
    },
    {
        "line": 26,
        "fullcodeline": "r1.tstamp = tstamp;"
    },
    {
        "line": 27,
        "fullcodeline": "r1.val = resolution;"
    },
    {
        "line": 28,
        "fullcodeline": "snd_timer_user_append_to_tqueue(tu, &r1);"
    },
    {
        "line": 29,
        "fullcodeline": "tu->last_resolution = resolution;"
    },
    {
        "line": 30,
        "fullcodeline": "append++;"
    },
    {
        "line": 37,
        "fullcodeline": "prev = tu->qtail == 0 ? tu->queue_size - 1 : tu->qtail - 1;"
    },
    {
        "line": 39,
        "fullcodeline": "if (r->event == SNDRV_TIMER_EVENT_TICK) {"
    },
    {
        "line": 13,
        "fullcodeline": "(1 << SNDRV_TIMER_EVENT_TICK))) == 0) {"
    },
    {
        "line": 19,
        "fullcodeline": "ktime_get_ts(&tstamp);"
    },
    {
        "line": 40,
        "fullcodeline": "r->tstamp = tstamp;"
    },
    {
        "line": 41,
        "fullcodeline": "r->val += ticks;"
    },
    {
        "line": 42,
        "fullcodeline": "append++;"
    },
    {
        "line": 21,
        "fullcodeline": "getnstimeofday(&tstamp);"
    }
]