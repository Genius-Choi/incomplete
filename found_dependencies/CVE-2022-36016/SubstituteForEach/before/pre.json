[
    {
        "line": 2,
        "fullcodeline": "DCHECK_EQ(t.args_size(), 3);"
    },
    {
        "line": 4,
        "fullcodeline": "const auto& cont = t.args(0);"
    },
    {
        "line": 5,
        "fullcodeline": "const auto& tmpl = t.args(1);"
    },
    {
        "line": 6,
        "fullcodeline": "const auto& t_var = t.args(2);"
    },
    {
        "line": 8,
        "fullcodeline": "StringPiece var_name = t_var.s();"
    },
    {
        "line": 14,
        "fullcodeline": "const AttrValue* attr = attrs.at(var_name);"
    },
    {
        "line": 17,
        "fullcodeline": "result.set_type_id(cont.type_id());"
    },
    {
        "line": 19,
        "fullcodeline": "const auto attr_type = attr->value_case();"
    },
    {
        "line": 9,
        "fullcodeline": "if (!attrs.contains(var_name)) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (attr_type == AttrValue::kType) {"
    },
    {
        "line": 56,
        "fullcodeline": "return OkStatus();"
    },
    {
        "line": 21,
        "fullcodeline": "FullTypeDef* target = result.add_args();"
    },
    {
        "line": 22,
        "fullcodeline": "*target = tmpl;"
    },
    {
        "line": 10,
        "fullcodeline": "return Status("
    },
    {
        "line": 24,
        "fullcodeline": "SubstituteFromAttrs(attrs, *target), \"while substituting '\", var_name,"
    },
    {
        "line": 25,
        "fullcodeline": "\"' from\\n\", attr->DebugString(), \"\\ninto \", target->DebugString());"
    },
    {
        "line": 12,
        "fullcodeline": "absl::StrCat(\"could not find an attribute for key '\", var_name, \"'\"));"
    },
    {
        "line": 28,
        "fullcodeline": "const auto& attr_list = attr->list();"
    },
    {
        "line": 29,
        "fullcodeline": "int tsize = attr_list.type_size();"
    },
    {
        "line": 36,
        "fullcodeline": "attrs[var_name] = &replacement;"
    },
    {
        "line": 30,
        "fullcodeline": "if (tsize == 0) {"
    },
    {
        "line": 37,
        "fullcodeline": "for (int i = 0; i < tsize; i++) {"
    },
    {
        "line": 39,
        "fullcodeline": "FullTypeDef* target = result.add_args();"
    },
    {
        "line": 40,
        "fullcodeline": "*target = tmpl;"
    },
    {
        "line": 41,
        "fullcodeline": "TF_RETURN_WITH_CONTEXT_IF_ERROR(SubstituteFromAttrs(attrs, *target),"
    },
    {
        "line": 51,
        "fullcodeline": "return Status(error::UNIMPLEMENTED,"
    },
    {
        "line": 31,
        "fullcodeline": "return Status(error::UNIMPLEMENTED,"
    },
    {
        "line": 38,
        "fullcodeline": "replacement.set_type(attr_list.type(i));"
    },
    {
        "line": 43,
        "fullcodeline": "\"' from\\n\", attr->DebugString(), \"\\n[\", i,"
    },
    {
        "line": 44,
        "fullcodeline": "\"] into\\n\", target->DebugString());"
    },
    {
        "line": 52,
        "fullcodeline": "absl::StrCat(\"unsupported attribute type\\n\","
    },
    {
        "line": 32,
        "fullcodeline": "absl::StrCat(\"unsupported list attribute type\\n\","
    },
    {
        "line": 53,
        "fullcodeline": "attr->DebugString(), \"\\nfor name \", var_name));"
    },
    {
        "line": 33,
        "fullcodeline": "attr_list.DebugString(), \"\\nkey=\", var_name));"
    }
]