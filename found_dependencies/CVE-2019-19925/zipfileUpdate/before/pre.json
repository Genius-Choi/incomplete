[
    {
        "line": 7,
        "fullcodeline": "ZipfileTab *pTab = (ZipfileTab*)pVtab;"
    },
    {
        "line": 8,
        "fullcodeline": "int rc = SQLITE_OK;             /* Return Code */"
    },
    {
        "line": 9,
        "fullcodeline": "ZipfileEntry *pNew = 0;         /* New in-memory CDS entry */"
    },
    {
        "line": 11,
        "fullcodeline": "u32 mode = 0;                   /* Mode for new entry */"
    },
    {
        "line": 12,
        "fullcodeline": "u32 mTime = 0;                  /* Modification time for new entry */"
    },
    {
        "line": 13,
        "fullcodeline": "i64 sz = 0;                     /* Uncompressed size */"
    },
    {
        "line": 14,
        "fullcodeline": "const char *zPath = 0;          /* Path for new entry */"
    },
    {
        "line": 15,
        "fullcodeline": "int nPath = 0;                  /* strlen(zPath) */"
    },
    {
        "line": 16,
        "fullcodeline": "const u8 *pData = 0;            /* Pointer to buffer containing content */"
    },
    {
        "line": 17,
        "fullcodeline": "int nData = 0;                  /* Size of pData buffer in bytes */"
    },
    {
        "line": 18,
        "fullcodeline": "int iMethod = 0;                /* Compression method for new entry */"
    },
    {
        "line": 19,
        "fullcodeline": "u8 *pFree = 0;                  /* Free this */"
    },
    {
        "line": 20,
        "fullcodeline": "char *zFree = 0;                /* Also free this */"
    },
    {
        "line": 21,
        "fullcodeline": "ZipfileEntry *pOld = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "ZipfileEntry *pOld2 = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "int bUpdate = 0;                /* True for an update that modifies \"name\" */"
    },
    {
        "line": 24,
        "fullcodeline": "int bIsDir = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "u32 iCrc32 = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "if( pTab->pWriteFd==0 ){"
    },
    {
        "line": 33,
        "fullcodeline": "if( sqlite3_value_type(apVal[0])!=SQLITE_NULL ){"
    },
    {
        "line": 28,
        "fullcodeline": "rc = zipfileBegin(pVtab);"
    },
    {
        "line": 34,
        "fullcodeline": "const char *zDelete = (const char*)sqlite3_value_text(apVal[0]);"
    },
    {
        "line": 35,
        "fullcodeline": "int nDelete = (int)strlen(zDelete);"
    },
    {
        "line": 168,
        "fullcodeline": "if( rc==SQLITE_OK && (pOld || pOld2) ){"
    },
    {
        "line": 177,
        "fullcodeline": "zipfileRemoveEntryFromList(pTab, pOld);"
    },
    {
        "line": 29,
        "fullcodeline": "if( rc!=SQLITE_OK ) return rc;"
    },
    {
        "line": 36,
        "fullcodeline": "if( nVal>1 ){"
    },
    {
        "line": 42,
        "fullcodeline": "for(pOld=pTab->pFirstEntry; 1; pOld=pOld->pNext){"
    },
    {
        "line": 52,
        "fullcodeline": "if( sqlite3_value_type(apVal[5])!=SQLITE_NULL ){"
    },
    {
        "line": 56,
        "fullcodeline": "if( sqlite3_value_type(apVal[6])!=SQLITE_NULL ){"
    },
    {
        "line": 61,
        "fullcodeline": "if( rc==SQLITE_OK ){"
    },
    {
        "line": 96,
        "fullcodeline": "if( rc==SQLITE_OK ){"
    },
    {
        "line": 100,
        "fullcodeline": "if( rc==SQLITE_OK ){"
    },
    {
        "line": 106,
        "fullcodeline": "if( rc==SQLITE_OK && bIsDir ){"
    },
    {
        "line": 144,
        "fullcodeline": "if( rc==SQLITE_OK ){"
    },
    {
        "line": 170,
        "fullcodeline": "for(pCsr=pTab->pCsrList; pCsr; pCsr=pCsr->pCsrNext){"
    },
    {
        "line": 37,
        "fullcodeline": "const char *zUpdate = (const char*)sqlite3_value_text(apVal[1]);"
    },
    {
        "line": 46,
        "fullcodeline": "assert( pOld->pNext );"
    },
    {
        "line": 53,
        "fullcodeline": "zipfileTableErr(pTab, \"sz must be NULL\");"
    },
    {
        "line": 54,
        "fullcodeline": "rc = SQLITE_CONSTRAINT;"
    },
    {
        "line": 57,
        "fullcodeline": "zipfileTableErr(pTab, \"rawdata must be NULL\");"
    },
    {
        "line": 58,
        "fullcodeline": "rc = SQLITE_CONSTRAINT;"
    },
    {
        "line": 97,
        "fullcodeline": "rc = zipfileGetMode(apVal[3], bIsDir, &mode, &pTab->base.zErrMsg);"
    },
    {
        "line": 101,
        "fullcodeline": "zPath = (const char*)sqlite3_value_text(apVal[2]);"
    },
    {
        "line": 102,
        "fullcodeline": "nPath = (int)strlen(zPath);"
    },
    {
        "line": 103,
        "fullcodeline": "mTime = zipfileGetTime(apVal[4]);"
    },
    {
        "line": 121,
        "fullcodeline": "if( (pOld==0 || bUpdate) && rc==SQLITE_OK ){"
    },
    {
        "line": 146,
        "fullcodeline": "pNew = zipfileNewEntry(zPath);"
    },
    {
        "line": 62,
        "fullcodeline": "if( sqlite3_value_type(apVal[7])==SQLITE_NULL ){"
    },
    {
        "line": 111,
        "fullcodeline": "if( zPath[nPath-1]!='/' ){"
    },
    {
        "line": 123,
        "fullcodeline": "for(p=pTab->pFirstEntry; p; p=p->pNext){"
    },
    {
        "line": 147,
        "fullcodeline": "if( pNew==0 ){"
    },
    {
        "line": 171,
        "fullcodeline": "if( pCsr->pCurrent && (pCsr->pCurrent==pOld || pCsr->pCurrent==pOld2) ){"
    },
    {
        "line": 38,
        "fullcodeline": "if( zUpdate && zipfileComparePath(zUpdate, zDelete, nDelete)!=0 ){"
    },
    {
        "line": 39,
        "fullcodeline": "bUpdate = 1;"
    },
    {
        "line": 43,
        "fullcodeline": "if( zipfileComparePath(pOld->cds.zFile, zDelete, nDelete)==0 ){"
    },
    {
        "line": 64,
        "fullcodeline": "bIsDir = 1;"
    },
    {
        "line": 112,
        "fullcodeline": "zFree = sqlite3_mprintf(\"%s/\", zPath);"
    },
    {
        "line": 114,
        "fullcodeline": "zPath = (const char*)zFree;"
    },
    {
        "line": 115,
        "fullcodeline": "nPath++;"
    },
    {
        "line": 148,
        "fullcodeline": "rc = SQLITE_NOMEM;"
    },
    {
        "line": 172,
        "fullcodeline": "pCsr->pCurrent = pCsr->pCurrent->pNext;"
    },
    {
        "line": 68,
        "fullcodeline": "const u8 *aIn = sqlite3_value_blob(apVal[7]);"
    },
    {
        "line": 69,
        "fullcodeline": "int nIn = sqlite3_value_bytes(apVal[7]);"
    },
    {
        "line": 70,
        "fullcodeline": "int bAuto = sqlite3_value_type(apVal[8])==SQLITE_NULL;"
    },
    {
        "line": 72,
        "fullcodeline": "iMethod = sqlite3_value_int(apVal[8]);"
    },
    {
        "line": 73,
        "fullcodeline": "sz = nIn;"
    },
    {
        "line": 74,
        "fullcodeline": "pData = aIn;"
    },
    {
        "line": 75,
        "fullcodeline": "nData = nIn;"
    },
    {
        "line": 113,
        "fullcodeline": "if( zFree==0 ){ rc = SQLITE_NOMEM; }"
    },
    {
        "line": 150,
        "fullcodeline": "pNew->cds.iVersionMadeBy = ZIPFILE_NEWENTRY_MADEBY;"
    },
    {
        "line": 151,
        "fullcodeline": "pNew->cds.iVersionExtract = ZIPFILE_NEWENTRY_REQUIRED;"
    },
    {
        "line": 152,
        "fullcodeline": "pNew->cds.flags = ZIPFILE_NEWENTRY_FLAGS;"
    },
    {
        "line": 153,
        "fullcodeline": "pNew->cds.iCompression = (u16)iMethod;"
    },
    {
        "line": 154,
        "fullcodeline": "zipfileMtimeToDos(&pNew->cds, mTime);"
    },
    {
        "line": 161,
        "fullcodeline": "pNew->mUnixTime = (u32)mTime;"
    },
    {
        "line": 162,
        "fullcodeline": "rc = zipfileAppendEntry(pTab, pNew, pData, nData);"
    },
    {
        "line": 163,
        "fullcodeline": "zipfileAddEntry(pTab, pOld, pNew);"
    },
    {
        "line": 124,
        "fullcodeline": "if( zipfileComparePath(p->cds.zFile, zPath, nPath)==0 ){"
    },
    {
        "line": 158,
        "fullcodeline": "pNew->cds.iExternalAttr = (mode<<16);"
    },
    {
        "line": 76,
        "fullcodeline": "if( iMethod!=0 && iMethod!=8 ){"
    },
    {
        "line": 77,
        "fullcodeline": "zipfileTableErr(pTab, \"unknown compression method: %d\", iMethod);"
    },
    {
        "line": 78,
        "fullcodeline": "rc = SQLITE_CONSTRAINT;"
    },
    {
        "line": 125,
        "fullcodeline": "switch( sqlite3_vtab_on_conflict(pTab->db) ){"
    },
    {
        "line": 91,
        "fullcodeline": "iCrc32 = crc32(0, aIn, nIn);"
    },
    {
        "line": 80,
        "fullcodeline": "if( bAuto || iMethod ){"
    },
    {
        "line": 130,
        "fullcodeline": "pOld2 = p;"
    },
    {
        "line": 134,
        "fullcodeline": "zipfileTableErr(pTab, \"duplicate name: \\\"%s\\\"\", zPath);"
    },
    {
        "line": 135,
        "fullcodeline": "rc = SQLITE_CONSTRAINT;"
    },
    {
        "line": 82,
        "fullcodeline": "rc = zipfileDeflate(aIn, nIn, &pFree, &nCmp, &pTab->base.zErrMsg);"
    },
    {
        "line": 83,
        "fullcodeline": "if( rc==SQLITE_OK ){"
    },
    {
        "line": 84,
        "fullcodeline": "if( iMethod || nCmp<nIn ){"
    },
    {
        "line": 85,
        "fullcodeline": "iMethod = 8;"
    },
    {
        "line": 86,
        "fullcodeline": "pData = pFree;"
    },
    {
        "line": 87,
        "fullcodeline": "nData = nCmp;"
    }
]