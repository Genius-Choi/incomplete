[
    {
        "line": 11,
        "fullcodeline": "char atype[20];"
    },
    {
        "line": 21,
        "fullcodeline": "for (request = requests; request; request = request->next) {"
    },
    {
        "line": 63,
        "fullcodeline": "for (request = requests; request; request = request->next) {"
    },
    {
        "line": 133,
        "fullcodeline": "for (request = requests; request; request = request->next) {"
    },
    {
        "line": 167,
        "fullcodeline": "for (request = requests; request; request = request->next) {"
    },
    {
        "line": 22,
        "fullcodeline": "entry = (struct vacm_accessEntry *)"
    },
    {
        "line": 24,
        "fullcodeline": "table_info = netsnmp_extract_table_info(request);"
    },
    {
        "line": 28,
        "fullcodeline": "memset(atype, 0, sizeof(atype));"
    },
    {
        "line": 29,
        "fullcodeline": "memcpy(atype, (char *)idx->val.string, idx->val_len);"
    },
    {
        "line": 30,
        "fullcodeline": "viewIdx = se_find_value_in_slist(VACM_VIEW_ENUM_NAME, atype);"
    },
    {
        "line": 31,
        "fullcodeline": "DEBUGMSGTL((\"nsVacm\", \"GET %s (%d)\\n\", idx->val.string, viewIdx));"
    },
    {
        "line": 64,
        "fullcodeline": "entry = (struct vacm_accessEntry *)"
    },
    {
        "line": 66,
        "fullcodeline": "table_info = netsnmp_extract_table_info(request);"
    },
    {
        "line": 67,
        "fullcodeline": "ret = SNMP_ERR_NOERROR;"
    },
    {
        "line": 134,
        "fullcodeline": "entry = (struct vacm_accessEntry *)"
    },
    {
        "line": 136,
        "fullcodeline": "table_info = netsnmp_extract_table_info(request);"
    },
    {
        "line": 168,
        "fullcodeline": "entry = (struct vacm_accessEntry *)"
    },
    {
        "line": 170,
        "fullcodeline": "table_info = netsnmp_extract_table_info(request);"
    },
    {
        "line": 176,
        "fullcodeline": "memset(atype, 0, sizeof(atype));"
    },
    {
        "line": 177,
        "fullcodeline": "memcpy(atype, (char *)idx->val.string, idx->val_len);"
    },
    {
        "line": 178,
        "fullcodeline": "viewIdx = se_find_value_in_slist(VACM_VIEW_ENUM_NAME, atype);"
    },
    {
        "line": 33,
        "fullcodeline": "if (!entry || viewIdx < 0)"
    },
    {
        "line": 125,
        "fullcodeline": "if ( ret != SNMP_ERR_NOERROR ) {"
    },
    {
        "line": 171,
        "fullcodeline": "if ( !entry )"
    },
    {
        "line": 179,
        "fullcodeline": "if (viewIdx < 0)"
    },
    {
        "line": 23,
        "fullcodeline": "netsnmp_extract_iterator_context(request);"
    },
    {
        "line": 38,
        "fullcodeline": "snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,"
    },
    {
        "line": 42,
        "fullcodeline": "snmp_set_var_typed_value(request->requestvb, ASN_OCTET_STR,"
    },
    {
        "line": 47,
        "fullcodeline": "snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,"
    },
    {
        "line": 51,
        "fullcodeline": "snmp_set_var_typed_integer(request->requestvb, ASN_INTEGER,"
    },
    {
        "line": 65,
        "fullcodeline": "netsnmp_extract_iterator_context(request);"
    },
    {
        "line": 71,
        "fullcodeline": "ret = netsnmp_check_vb_int_range(request->requestvb, 1, 2);"
    },
    {
        "line": 74,
        "fullcodeline": "ret = netsnmp_check_vb_type_and_max_size(request->requestvb,"
    },
    {
        "line": 79,
        "fullcodeline": "ret = netsnmp_check_vb_storagetype(request->requestvb,"
    },
    {
        "line": 94,
        "fullcodeline": "ret = netsnmp_check_vb_rowstatus_value(request->requestvb);"
    },
    {
        "line": 102,
        "fullcodeline": "memset(atype, 0, sizeof(atype));"
    },
    {
        "line": 103,
        "fullcodeline": "memcpy(atype, (char *)idx->val.string, idx->val_len);"
    },
    {
        "line": 104,
        "fullcodeline": "viewIdx = se_find_value_in_slist(VACM_VIEW_ENUM_NAME, atype);"
    },
    {
        "line": 126,
        "fullcodeline": "netsnmp_set_request_error(reqinfo, request, ret);"
    },
    {
        "line": 135,
        "fullcodeline": "netsnmp_extract_iterator_context(request);"
    },
    {
        "line": 169,
        "fullcodeline": "netsnmp_extract_iterator_context(request);"
    },
    {
        "line": 187,
        "fullcodeline": "memset( entry->views[viewIdx], 0, VACMSTRINGLEN );"
    },
    {
        "line": 188,
        "fullcodeline": "memcpy( entry->views[viewIdx], request->requestvb->val.string,"
    },
    {
        "line": 43,
        "fullcodeline": "(u_char *)entry->views[ viewIdx ],"
    },
    {
        "line": 95,
        "fullcodeline": "if ( ret != SNMP_ERR_NOERROR )"
    },
    {
        "line": 105,
        "fullcodeline": "if ( viewIdx < 0 ) {"
    },
    {
        "line": 106,
        "fullcodeline": "ret = SNMP_ERR_NOCREATION;"
    },
    {
        "line": 197,
        "fullcodeline": "memset( entry->views[viewIdx], 0, VACMSTRINGLEN );"
    },
    {
        "line": 113,
        "fullcodeline": "if ( !entry || !entry->views[viewIdx][0] )"
    },
    {
        "line": 119,
        "fullcodeline": "if ( entry && entry->views[viewIdx][0] )"
    },
    {
        "line": 143,
        "fullcodeline": "if (!entry) {"
    },
    {
        "line": 114,
        "fullcodeline": "ret = SNMP_ERR_INCONSISTENTVALUE;"
    },
    {
        "line": 120,
        "fullcodeline": "ret = SNMP_ERR_INCONSISTENTVALUE;"
    },
    {
        "line": 144,
        "fullcodeline": "idx = table_info->indexes; gName = (char*)idx->val.string;"
    },
    {
        "line": 145,
        "fullcodeline": "idx = idx->next_variable;  cPrefix = (char*)idx->val.string;"
    },
    {
        "line": 146,
        "fullcodeline": "idx = idx->next_variable;  model = *idx->val.integer;"
    },
    {
        "line": 147,
        "fullcodeline": "idx = idx->next_variable;  level = *idx->val.integer;"
    },
    {
        "line": 148,
        "fullcodeline": "entry = vacm_createAccessEntry( gName, cPrefix, model, level );"
    },
    {
        "line": 149,
        "fullcodeline": "entry->storageType = ST_NONVOLATILE;"
    },
    {
        "line": 150,
        "fullcodeline": "netsnmp_insert_iterator_context(request, (void*)entry);"
    }
]