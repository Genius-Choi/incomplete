[
    {
        "line": 2,
        "fullcodeline": "MLIRContext *ctx = &getContext();"
    },
    {
        "line": 3,
        "fullcodeline": "RewritePatternSet patterns(ctx);"
    },
    {
        "line": 4,
        "fullcodeline": "RewritePatternSet phase_2_patterns(ctx);"
    },
    {
        "line": 5,
        "fullcodeline": "auto func = getOperation();"
    },
    {
        "line": 25,
        "fullcodeline": "patterns.add<ConvertTFDilatedConvOp<TF::Conv2DOp>, FusedBatchNormV3Pat,"
    },
    {
        "line": 28,
        "fullcodeline": "patterns.add<RemoveIdentity>(ctx);"
    },
    {
        "line": 29,
        "fullcodeline": "TFL::populateWithGenerated(patterns);"
    },
    {
        "line": 50,
        "fullcodeline": "TFL::populateWithGenerated(phase_2_patterns);"
    },
    {
        "line": 54,
        "fullcodeline": "phase_2_patterns"
    },
    {
        "line": 57,
        "fullcodeline": "phase_2_patterns.add<ConvertTFConv2D, ConvertTFDepthwiseConv2dNative>("
    },
    {
        "line": 11,
        "fullcodeline": "if (failed(ValidateOp(func))) {"
    },
    {
        "line": 35,
        "fullcodeline": "(void)applyPatternsAndFoldGreedily(func, std::move(patterns));"
    },
    {
        "line": 60,
        "fullcodeline": "(void)applyPatternsAndFoldGreedily(func, std::move(phase_2_patterns));"
    },
    {
        "line": 12,
        "fullcodeline": "func.emitError() << \"tfl-prepare-tf pass failed.\";"
    },
    {
        "line": 13,
        "fullcodeline": "signalPassFailure();"
    },
    {
        "line": 17,
        "fullcodeline": "if (failed(ConvertTf2XlaOps(func, ctx))) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (failed(ConvertFakeQuantOps(func, ctx, use_fake_quant_num_bits_))) {"
    },
    {
        "line": 52,
        "fullcodeline": "TF::PopulateUnrollTfBatchMatMul(ctx, phase_2_patterns);"
    }
]