[
    {
        "line": 3,
        "fullcodeline": "int klinux_flags = TokLinuxRecvSendFlag(flags);"
    },
    {
        "line": 10,
        "fullcodeline": "input.Push<int>(sockfd);"
    },
    {
        "line": 11,
        "fullcodeline": "input.Push<uint64_t>(len);"
    },
    {
        "line": 12,
        "fullcodeline": "input.Push<int>(klinux_flags);"
    },
    {
        "line": 14,
        "fullcodeline": "const auto status = NonSystemCallDispatcher("
    },
    {
        "line": 16,
        "fullcodeline": "CheckStatusAndParamCount(status, output, \"enc_untrusted_recvfrom\", 4);"
    },
    {
        "line": 18,
        "fullcodeline": "int result = output.next<int>();"
    },
    {
        "line": 19,
        "fullcodeline": "int klinux_errno = output.next<int>();"
    },
    {
        "line": 27,
        "fullcodeline": "auto buffer_received = output.next();"
    },
    {
        "line": 28,
        "fullcodeline": "memcpy(buf, buffer_received.data(), len);"
    },
    {
        "line": 4,
        "fullcodeline": "if (klinux_flags == 0 && flags != 0) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (result == -1) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (src_addr != nullptr && addrlen != nullptr) {"
    },
    {
        "line": 5,
        "fullcodeline": "errno = EINVAL;"
    },
    {
        "line": 23,
        "fullcodeline": "errno = FromkLinuxErrorNumber(klinux_errno);"
    },
    {
        "line": 34,
        "fullcodeline": "auto klinux_sockaddr_buf = output.next();"
    },
    {
        "line": 35,
        "fullcodeline": "const struct klinux_sockaddr *klinux_addr ="
    },
    {
        "line": 37,
        "fullcodeline": "FromkLinuxSockAddr(klinux_addr, klinux_sockaddr_buf.size(), src_addr,"
    },
    {
        "line": 6,
        "fullcodeline": "return -1;"
    },
    {
        "line": 36,
        "fullcodeline": "klinux_sockaddr_buf.As<struct klinux_sockaddr>();"
    }
]