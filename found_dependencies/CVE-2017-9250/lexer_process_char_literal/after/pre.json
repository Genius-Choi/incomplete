[
    {
        "line": 9,
        "fullcodeline": "uint32_t literal_index = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "JERRY_ASSERT (literal_type == LEXER_IDENT_LITERAL"
    },
    {
        "line": 14,
        "fullcodeline": "JERRY_ASSERT (literal_type != LEXER_IDENT_LITERAL || length <= PARSER_MAXIMUM_IDENT_LENGTH);"
    },
    {
        "line": 15,
        "fullcodeline": "JERRY_ASSERT (literal_type != LEXER_STRING_LITERAL || length <= PARSER_MAXIMUM_STRING_LENGTH);"
    },
    {
        "line": 17,
        "fullcodeline": "parser_list_iterator_init (&context_p->literal_pool, &literal_iterator);"
    },
    {
        "line": 46,
        "fullcodeline": "literal_p = (lexer_literal_t *) parser_list_append (context_p, &context_p->literal_pool);"
    },
    {
        "line": 48,
        "fullcodeline": "literal_p->type = literal_type;"
    },
    {
        "line": 49,
        "fullcodeline": "literal_p->status_flags = has_escape ? 0 : LEXER_FLAG_SOURCE_PTR;"
    },
    {
        "line": 19,
        "fullcodeline": "while ((literal_p = (lexer_literal_t *) parser_list_iterator_next (&literal_iterator)) != NULL)"
    },
    {
        "line": 34,
        "fullcodeline": "JERRY_ASSERT (literal_index == context_p->literal_count);"
    },
    {
        "line": 36,
        "fullcodeline": "if (literal_index >= PARSER_MAXIMUM_NUMBER_OF_LITERALS)"
    },
    {
        "line": 41,
        "fullcodeline": "if (length == 0)"
    },
    {
        "line": 12,
        "fullcodeline": "|| literal_type == LEXER_STRING_LITERAL);"
    },
    {
        "line": 31,
        "fullcodeline": "literal_index++;"
    },
    {
        "line": 38,
        "fullcodeline": "parser_raise_error (context_p, PARSER_ERR_LITERAL_LIMIT_REACHED);"
    },
    {
        "line": 43,
        "fullcodeline": "has_escape = false;"
    },
    {
        "line": 53,
        "fullcodeline": "literal_p->u.char_p = (uint8_t *) jmem_heap_alloc_block (length);"
    },
    {
        "line": 21,
        "fullcodeline": "if (literal_p->type == literal_type"
    },
    {
        "line": 23,
        "fullcodeline": "&& memcmp (literal_p->u.char_p, char_p, length) == 0)"
    },
    {
        "line": 25,
        "fullcodeline": "context_p->lit_object.literal_p = literal_p;"
    },
    {
        "line": 26,
        "fullcodeline": "context_p->lit_object.index = (uint16_t) literal_index;"
    },
    {
        "line": 27,
        "fullcodeline": "literal_p->status_flags = (uint8_t) (literal_p->status_flags & ~LEXER_FLAG_UNUSED_IDENT);"
    },
    {
        "line": 22,
        "fullcodeline": "&& literal_p->prop.length == length"
    }
]