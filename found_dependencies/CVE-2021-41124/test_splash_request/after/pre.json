[
    {
        "line": 2,
        "fullcodeline": "mw = _get_mw()"
    },
    {
        "line": 3,
        "fullcodeline": "cookie_mw = _get_cookie_mw()"
    },
    {
        "line": 5,
        "fullcodeline": "req = SplashRequest(\"http://example.com?foo=bar&url=1&wait=100\")"
    },
    {
        "line": 6,
        "fullcodeline": "assert repr(req) == \"<GET http://example.com?foo=bar&url=1&wait=100>\""
    },
    {
        "line": 9,
        "fullcodeline": "req2 = cookie_mw.process_request(req, None) or req"
    },
    {
        "line": 10,
        "fullcodeline": "req2 = mw.process_request(req2, None) or req2"
    },
    {
        "line": 12,
        "fullcodeline": "assert req2 is not None"
    },
    {
        "line": 13,
        "fullcodeline": "assert req2 is not req"
    },
    {
        "line": 14,
        "fullcodeline": "assert req2.url == \"http://127.0.0.1:8050/render.html\""
    },
    {
        "line": 15,
        "fullcodeline": "assert req2.headers == {b'Content-Type': [b'application/json']}"
    },
    {
        "line": 16,
        "fullcodeline": "assert req2.method == 'POST'"
    },
    {
        "line": 17,
        "fullcodeline": "assert isinstance(req2, SplashRequest)"
    },
    {
        "line": 18,
        "fullcodeline": "assert repr(req2) == \"<GET http://example.com?foo=bar&url=1&wait=100 via http://127.0.0.1:8050/render.html>\""
    },
    {
        "line": 20,
        "fullcodeline": "expected_body = {'url': req.url}"
    },
    {
        "line": 21,
        "fullcodeline": "assert json.loads(to_native_str(req2.body)) == expected_body"
    },
    {
        "line": 24,
        "fullcodeline": "response = TextResponse(\"http://127.0.0.1:8050/render.html\","
    },
    {
        "line": 29,
        "fullcodeline": "response2 = mw.process_response(req2, response, None)"
    },
    {
        "line": 30,
        "fullcodeline": "response2 = cookie_mw.process_response(req2, response2, None)"
    },
    {
        "line": 31,
        "fullcodeline": "assert isinstance(response2, scrapy_splash.SplashTextResponse)"
    },
    {
        "line": 32,
        "fullcodeline": "assert response2 is not response"
    },
    {
        "line": 33,
        "fullcodeline": "assert response2.real_url == req2.url"
    },
    {
        "line": 34,
        "fullcodeline": "assert response2.url == req.url"
    },
    {
        "line": 35,
        "fullcodeline": "assert response2.body == b\"<html><body>Hello</body></html>\""
    },
    {
        "line": 36,
        "fullcodeline": "assert response2.css(\"body\").extract_first() == \"<body>Hello</body>\""
    },
    {
        "line": 37,
        "fullcodeline": "assert response2.headers == {b'Content-Type': [b'text/html']}"
    },
    {
        "line": 40,
        "fullcodeline": "response3 = response2.replace(status=404)"
    },
    {
        "line": 41,
        "fullcodeline": "assert response3.status == 404"
    },
    {
        "line": 42,
        "fullcodeline": "assert isinstance(response3, scrapy_splash.SplashTextResponse)"
    },
    {
        "line": 43,
        "fullcodeline": "for attr in ['url', 'real_url', 'headers', 'body']:"
    },
    {
        "line": 27,
        "fullcodeline": "headers={b'Content-Type': b'text/html'},"
    },
    {
        "line": 44,
        "fullcodeline": "assert getattr(response3, attr) == getattr(response2, attr)"
    }
]