[
    {
        "line": 2,
        "fullcodeline": "lock_guard<std::recursive_mutex> mutexGuard(globalMutex);"
    },
    {
        "line": 4,
        "fullcodeline": "string pipePath = endpoint.name();"
    },
    {
        "line": 7,
        "fullcodeline": "int sockFd = ::socket(AF_UNIX, SOCK_STREAM, 0);"
    },
    {
        "line": 8,
        "fullcodeline": "FATAL_FAIL(sockFd);"
    },
    {
        "line": 9,
        "fullcodeline": "initSocket(sockFd);"
    },
    {
        "line": 10,
        "fullcodeline": "remote.sun_family = AF_UNIX;"
    },
    {
        "line": 11,
        "fullcodeline": "strcpy(remote.sun_path, pipePath.c_str());"
    },
    {
        "line": 13,
        "fullcodeline": "VLOG(3) << \"Connecting to \" << endpoint << \" with fd \" << sockFd;"
    },
    {
        "line": 14,
        "fullcodeline": "int result ="
    },
    {
        "line": 16,
        "fullcodeline": "auto localErrno = GetErrno();"
    },
    {
        "line": 36,
        "fullcodeline": "FD_ZERO(&fdset);"
    },
    {
        "line": 37,
        "fullcodeline": "FD_SET(sockFd, &fdset);"
    },
    {
        "line": 39,
        "fullcodeline": "tv.tv_sec = 3; /* 3 second timeout */"
    },
    {
        "line": 40,
        "fullcodeline": "tv.tv_usec = 0;"
    },
    {
        "line": 42,
        "fullcodeline": "select(sockFd + 1, NULL, &fdset, NULL, &tv);"
    },
    {
        "line": 15,
        "fullcodeline": "::connect(sockFd, (struct sockaddr*)&remote, sizeof(sockaddr_un));"
    },
    {
        "line": 17,
        "fullcodeline": "if (result < 0 && localErrno != EINPROGRESS) {"
    },
    {
        "line": 41,
        "fullcodeline": "VLOG(4) << \"Before selecting sockFd\";"
    },
    {
        "line": 44,
        "fullcodeline": "if (FD_ISSET(sockFd, &fdset)) {"
    },
    {
        "line": 81,
        "fullcodeline": "LOG(INFO) << sockFd << \" is a good socket\";"
    },
    {
        "line": 82,
        "fullcodeline": "if (sockFd >= 0) {"
    },
    {
        "line": 18,
        "fullcodeline": "VLOG(3) << \"Connection result: \" << result << \" (\" << strerror(localErrno)"
    },
    {
        "line": 23,
        "fullcodeline": "::shutdown(sockFd, SHUT_RDWR);"
    },
    {
        "line": 28,
        "fullcodeline": "FATAL_FAIL(::close(sockFd));"
    },
    {
        "line": 30,
        "fullcodeline": "sockFd = -1;"
    },
    {
        "line": 31,
        "fullcodeline": "SetErrno(localErrno);"
    },
    {
        "line": 47,
        "fullcodeline": "socklen_t len = sizeof so_error;"
    },
    {
        "line": 83,
        "fullcodeline": "addToActiveSockets(sockFd);"
    },
    {
        "line": 45,
        "fullcodeline": "VLOG(4) << \"sockFd \" << sockFd << \" is selected\";"
    },
    {
        "line": 50,
        "fullcodeline": "::getsockopt(sockFd, SOL_SOCKET, SO_ERROR, (char*)&so_error, &len));"
    },
    {
        "line": 52,
        "fullcodeline": "if (so_error == 0) {"
    },
    {
        "line": 70,
        "fullcodeline": "auto localErrno = GetErrno();"
    },
    {
        "line": 78,
        "fullcodeline": "sockFd = -1;"
    },
    {
        "line": 56,
        "fullcodeline": "initSocket(sockFd);"
    },
    {
        "line": 71,
        "fullcodeline": "LOG(INFO) << \"Error connecting to \" << endpoint << \": \" << localErrno << \" \""
    },
    {
        "line": 72,
        "fullcodeline": "<< strerror(localErrno);"
    },
    {
        "line": 76,
        "fullcodeline": "FATAL_FAIL(::close(sockFd));"
    },
    {
        "line": 53,
        "fullcodeline": "LOG(INFO) << \"Connected to endpoint \" << endpoint;"
    },
    {
        "line": 67,
        "fullcodeline": "sockFd = -1;"
    },
    {
        "line": 60,
        "fullcodeline": "LOG(INFO) << \"Error connecting to \" << endpoint << \": \" << so_error << \" \""
    },
    {
        "line": 61,
        "fullcodeline": "<< strerror(so_error);"
    },
    {
        "line": 65,
        "fullcodeline": "FATAL_FAIL(::close(sockFd));"
    }
]