[
    {
        "line": 8,
        "fullcodeline": "op = pwcs;"
    },
    {
        "line": 9,
        "fullcodeline": "while (len > 0 && maxlen > 0 && *s) {"
    },
    {
        "line": 39,
        "fullcodeline": "return op - pwcs;"
    },
    {
        "line": 10,
        "fullcodeline": "if (*s & 0x80) {"
    },
    {
        "line": 11,
        "fullcodeline": "size = utf8_to_utf32(s, len, &u);"
    },
    {
        "line": 14,
        "fullcodeline": "s += size;"
    },
    {
        "line": 15,
        "fullcodeline": "len -= size;"
    },
    {
        "line": 12,
        "fullcodeline": "if (size < 0)"
    },
    {
        "line": 17,
        "fullcodeline": "if (u >= PLANE_SIZE) {"
    },
    {
        "line": 34,
        "fullcodeline": "put_utf16(op++, *s++, endian);"
    },
    {
        "line": 35,
        "fullcodeline": "len--;"
    },
    {
        "line": 36,
        "fullcodeline": "maxlen--;"
    },
    {
        "line": 20,
        "fullcodeline": "u -= PLANE_SIZE;"
    },
    {
        "line": 21,
        "fullcodeline": "put_utf16(op++, SURROGATE_PAIR |"
    },
    {
        "line": 24,
        "fullcodeline": "put_utf16(op++, SURROGATE_PAIR |"
    },
    {
        "line": 28,
        "fullcodeline": "maxlen -= 2;"
    },
    {
        "line": 13,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 18,
        "fullcodeline": "if (maxlen < 2)"
    },
    {
        "line": 30,
        "fullcodeline": "put_utf16(op++, u, endian);"
    },
    {
        "line": 31,
        "fullcodeline": "maxlen--;"
    },
    {
        "line": 22,
        "fullcodeline": "((u >> 10) & SURROGATE_BITS),"
    },
    {
        "line": 26,
        "fullcodeline": "(u & SURROGATE_BITS),"
    }
]