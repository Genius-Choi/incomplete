[
    {
        "line": 3,
        "fullcodeline": "const struct cred *cred = current_cred();"
    },
    {
        "line": 20,
        "fullcodeline": "f = kmem_cache_zalloc(filp_cachep, GFP_KERNEL);"
    },
    {
        "line": 24,
        "fullcodeline": "percpu_counter_inc(&nr_files);"
    },
    {
        "line": 25,
        "fullcodeline": "f->f_cred = get_cred(cred);"
    },
    {
        "line": 26,
        "fullcodeline": "error = security_file_alloc(f);"
    },
    {
        "line": 32,
        "fullcodeline": "atomic_long_set(&f->f_count, 1);"
    },
    {
        "line": 34,
        "fullcodeline": "spin_lock_init(&f->f_lock);"
    },
    {
        "line": 35,
        "fullcodeline": "eventpoll_init_file(f);"
    },
    {
        "line": 11,
        "fullcodeline": "if (get_nr_files() >= files_stat.max_files && !capable(CAP_SYS_ADMIN)) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (unlikely(!f))"
    },
    {
        "line": 27,
        "fullcodeline": "if (unlikely(error)) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (get_nr_files() > old_max) {"
    },
    {
        "line": 45,
        "fullcodeline": "return ERR_PTR(-ENFILE);"
    },
    {
        "line": 28,
        "fullcodeline": "file_free(f);"
    },
    {
        "line": 42,
        "fullcodeline": "pr_info(\"VFS: file-max limit %lu reached\\n\", get_max_files());"
    },
    {
        "line": 43,
        "fullcodeline": "old_max = get_nr_files();"
    },
    {
        "line": 16,
        "fullcodeline": "if (percpu_counter_sum_positive(&nr_files) >= files_stat.max_files)"
    },
    {
        "line": 22,
        "fullcodeline": "return ERR_PTR(-ENOMEM);"
    },
    {
        "line": 29,
        "fullcodeline": "return ERR_PTR(error);"
    }
]