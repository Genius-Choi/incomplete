[
    {
        "line": 3,
        "fullcodeline": "struct super_block *s = kzalloc(sizeof(struct super_block),  GFP_USER);"
    },
    {
        "line": 30,
        "fullcodeline": "s->s_flags = flags;"
    },
    {
        "line": 31,
        "fullcodeline": "s->s_bdi = &default_backing_dev_info;"
    },
    {
        "line": 42,
        "fullcodeline": "init_rwsem(&s->s_umount);"
    },
    {
        "line": 43,
        "fullcodeline": "lockdep_set_class(&s->s_umount, &type->s_umount_key);"
    },
    {
        "line": 59,
        "fullcodeline": "down_write_nested(&s->s_umount, SINGLE_DEPTH_NESTING);"
    },
    {
        "line": 60,
        "fullcodeline": "s->s_count = 1;"
    },
    {
        "line": 62,
        "fullcodeline": "mutex_init(&s->s_vfs_rename_mutex);"
    },
    {
        "line": 67,
        "fullcodeline": "s->s_maxbytes = MAX_NON_LFS;"
    },
    {
        "line": 68,
        "fullcodeline": "s->s_op = &default_op;"
    },
    {
        "line": 69,
        "fullcodeline": "s->s_time_gran = 1000000000;"
    },
    {
        "line": 70,
        "fullcodeline": "s->cleancache_poolid = -1;"
    },
    {
        "line": 72,
        "fullcodeline": "s->s_shrink.seeks = DEFAULT_SEEKS;"
    },
    {
        "line": 73,
        "fullcodeline": "s->s_shrink.scan_objects = super_cache_scan;"
    },
    {
        "line": 74,
        "fullcodeline": "s->s_shrink.count_objects = super_cache_count;"
    },
    {
        "line": 76,
        "fullcodeline": "s->s_shrink.flags = SHRINKER_NUMA_AWARE;"
    },
    {
        "line": 7,
        "fullcodeline": "if (!s)"
    },
    {
        "line": 10,
        "fullcodeline": "if (security_sb_alloc(s))"
    },
    {
        "line": 22,
        "fullcodeline": "for (i = 0; i < SB_FREEZE_LEVELS; i++) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (percpu_counter_init(&s->s_writers.counter[i], 0) < 0)"
    }
]