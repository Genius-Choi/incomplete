[
    {
        "line": 5,
        "fullcodeline": "static const struct file_operations empty_fops = {};"
    },
    {
        "line": 9,
        "fullcodeline": "f->f_mode = OPEN_FMODE(f->f_flags) | FMODE_LSEEK |"
    },
    {
        "line": 15,
        "fullcodeline": "path_get(&f->f_path);"
    },
    {
        "line": 16,
        "fullcodeline": "inode = f->f_inode = f->f_path.dentry->d_inode;"
    },
    {
        "line": 25,
        "fullcodeline": "f->f_mapping = inode->i_mapping;"
    },
    {
        "line": 32,
        "fullcodeline": "f->f_op = fops_get(inode->i_fop);"
    },
    {
        "line": 38,
        "fullcodeline": "error = security_file_open(f, cred);"
    },
    {
        "line": 42,
        "fullcodeline": "error = break_lease(inode, f->f_flags);"
    },
    {
        "line": 56,
        "fullcodeline": "f->f_flags &= ~(O_CREAT | O_EXCL | O_NOCTTY | O_TRUNC);"
    },
    {
        "line": 58,
        "fullcodeline": "file_ra_state_init(&f->f_ra, f->f_mapping->host->i_mapping);"
    },
    {
        "line": 63,
        "fullcodeline": "fops_put(f->f_op);"
    },
    {
        "line": 78,
        "fullcodeline": "path_put(&f->f_path);"
    },
    {
        "line": 79,
        "fullcodeline": "f->f_path.mnt = NULL;"
    },
    {
        "line": 80,
        "fullcodeline": "f->f_path.dentry = NULL;"
    },
    {
        "line": 81,
        "fullcodeline": "f->f_inode = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "if (unlikely(f->f_flags & O_PATH))"
    },
    {
        "line": 17,
        "fullcodeline": "if (f->f_mode & FMODE_WRITE) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (unlikely(f->f_mode & FMODE_PATH)) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (unlikely(WARN_ON(!f->f_op))) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (!open)"
    },
    {
        "line": 53,
        "fullcodeline": "if ((f->f_mode & (FMODE_READ | FMODE_WRITE)) == FMODE_READ)"
    },
    {
        "line": 64,
        "fullcodeline": "if (f->f_mode & FMODE_WRITE) {"
    },
    {
        "line": 13,
        "fullcodeline": "f->f_mode = FMODE_PATH;"
    },
    {
        "line": 18,
        "fullcodeline": "error = __get_file_write_access(inode, f->f_path.mnt);"
    },
    {
        "line": 28,
        "fullcodeline": "f->f_op = &empty_fops;"
    },
    {
        "line": 34,
        "fullcodeline": "error = -ENODEV;"
    },
    {
        "line": 49,
        "fullcodeline": "error = open(inode, f);"
    },
    {
        "line": 54,
        "fullcodeline": "i_readcount_inc(inode);"
    },
    {
        "line": 65,
        "fullcodeline": "put_write_access(inode);"
    },
    {
        "line": 21,
        "fullcodeline": "if (!special_file(inode->i_mode))"
    },
    {
        "line": 66,
        "fullcodeline": "if (!special_file(inode->i_mode)) {"
    },
    {
        "line": 22,
        "fullcodeline": "file_take_write(f);"
    },
    {
        "line": 73,
        "fullcodeline": "file_reset_write(f);"
    }
]