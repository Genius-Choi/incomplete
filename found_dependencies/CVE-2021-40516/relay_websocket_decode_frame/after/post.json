[
    {
        "line": 9,
        "fullcodeline": "*decoded_length = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "index_buffer = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "while (index_buffer + 1 < buffer_length)"
    },
    {
        "line": 15,
        "fullcodeline": "opcode = buffer[index_buffer] & 15;"
    },
    {
        "line": 25,
        "fullcodeline": "length_frame_size = 1;"
    },
    {
        "line": 26,
        "fullcodeline": "length_frame = buffer[index_buffer + 1] & 127;"
    },
    {
        "line": 27,
        "fullcodeline": "index_buffer += 2;"
    },
    {
        "line": 46,
        "fullcodeline": "int masks[4];"
    },
    {
        "line": 51,
        "fullcodeline": "index_buffer += 4;"
    },
    {
        "line": 66,
        "fullcodeline": "*decoded_length += 1;"
    },
    {
        "line": 78,
        "fullcodeline": "decoded[*decoded_length + length_frame] = '\\0';"
    },
    {
        "line": 79,
        "fullcodeline": "*decoded_length += length_frame + 1;"
    },
    {
        "line": 80,
        "fullcodeline": "index_buffer += length_frame;"
    },
    {
        "line": 21,
        "fullcodeline": "if (!(buffer[index_buffer + 1] & 128))"
    },
    {
        "line": 28,
        "fullcodeline": "if (index_buffer >= buffer_length)"
    },
    {
        "line": 30,
        "fullcodeline": "if ((length_frame == 126) || (length_frame == 127))"
    },
    {
        "line": 44,
        "fullcodeline": "if (index_buffer + 4 > buffer_length)"
    },
    {
        "line": 47,
        "fullcodeline": "for (i = 0; i < 4; i++)"
    },
    {
        "line": 69,
        "fullcodeline": "if ((length_frame > buffer_length)"
    },
    {
        "line": 74,
        "fullcodeline": "for (i = 0; i < length_frame; i++)"
    },
    {
        "line": 32,
        "fullcodeline": "length_frame_size = (length_frame == 126) ? 2 : 8;"
    },
    {
        "line": 35,
        "fullcodeline": "length_frame = 0;"
    },
    {
        "line": 40,
        "fullcodeline": "index_buffer += length_frame_size;"
    },
    {
        "line": 49,
        "fullcodeline": "masks[i] = (int)((unsigned char)buffer[index_buffer + i]);"
    },
    {
        "line": 57,
        "fullcodeline": "decoded[*decoded_length] = RELAY_CLIENT_MSG_PING;"
    },
    {
        "line": 60,
        "fullcodeline": "decoded[*decoded_length] = RELAY_CLIENT_MSG_CLOSE;"
    },
    {
        "line": 63,
        "fullcodeline": "decoded[*decoded_length] = RELAY_CLIENT_MSG_STANDARD;"
    },
    {
        "line": 70,
        "fullcodeline": "|| (index_buffer + length_frame > buffer_length))"
    },
    {
        "line": 76,
        "fullcodeline": "decoded[*decoded_length + i] = (int)((unsigned char)buffer[index_buffer + i]) ^ masks[i % 4];"
    },
    {
        "line": 33,
        "fullcodeline": "if (index_buffer + length_frame_size > buffer_length)"
    },
    {
        "line": 36,
        "fullcodeline": "for (i = 0; i < length_frame_size; i++)"
    },
    {
        "line": 38,
        "fullcodeline": "length_frame += (unsigned long long)buffer[index_buffer + i] << ((length_frame_size - i - 1) * 8);"
    }
]