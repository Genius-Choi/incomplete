[
    {
        "line": 6,
        "fullcodeline": "Bool vps_default_ptl_dpb_hrd_max_tid_flag=0;"
    },
    {
        "line": 9,
        "fullcodeline": "vps_id = gf_bs_read_int_log(bs, 4, \"vps_id\");"
    },
    {
        "line": 20,
        "fullcodeline": "vps->max_layers = 1 + gf_bs_read_int_log(bs, 6, \"max_layers\");"
    },
    {
        "line": 25,
        "fullcodeline": "vps->max_sub_layers = gf_bs_read_int_log(bs, 3, \"max_sub_layers_minus1\") + 1;"
    },
    {
        "line": 49,
        "fullcodeline": "vps->num_ptl = 1;"
    },
    {
        "line": 70,
        "fullcodeline": "vps->ptl[0].pt_present = 1;"
    },
    {
        "line": 80,
        "fullcodeline": "gf_bs_align(bs);"
    },
    {
        "line": 10,
        "fullcodeline": "if (vps_id >= 16) return -1;"
    },
    {
        "line": 11,
        "fullcodeline": "if (!vps_id) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (!vps->state) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (vps->max_layers > MAX_LHVC_LAYERS) {"
    },
    {
        "line": 27,
        "fullcodeline": "if ((vps->max_layers>1) && (vps->max_sub_layers>1))"
    },
    {
        "line": 30,
        "fullcodeline": "if (vps->max_layers>1)"
    },
    {
        "line": 33,
        "fullcodeline": "for (i=0; i<vps->max_layers; i++) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (vps->max_layers > 1) {"
    },
    {
        "line": 71,
        "fullcodeline": "for (i=0; i<vps->num_ptl; i++) {"
    },
    {
        "line": 82,
        "fullcodeline": "for (i=0; i<vps->num_ptl; i++) {"
    },
    {
        "line": 12,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] VPS ID 0 is forbidden\\n\"));"
    },
    {
        "line": 17,
        "fullcodeline": "vps->id = vps_id;"
    },
    {
        "line": 18,
        "fullcodeline": "vps->state = 1;"
    },
    {
        "line": 22,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[VVC] sorry, %d layers in VPS but only %d supported\\n\", vps->max_layers, MAX_LHVC_LAYERS));"
    },
    {
        "line": 28,
        "fullcodeline": "vps_default_ptl_dpb_hrd_max_tid_flag = gf_bs_read_int_log(bs, 1, \"vps_default_ptl_dpb_hrd_max_tid_flag\");"
    },
    {
        "line": 31,
        "fullcodeline": "vps->all_layers_independent = gf_bs_read_int_log(bs, 1, \"all_layers_independent\");"
    },
    {
        "line": 34,
        "fullcodeline": "u32 layer_id = gf_bs_read_int_log_idx(bs, 6, \"layer_id\", i);"
    },
    {
        "line": 68,
        "fullcodeline": "vps->num_ptl = 1 + gf_bs_read_int_log(bs, 8, \"num_ptl_minus1\");"
    },
    {
        "line": 83,
        "fullcodeline": "vvc_profile_tier_level(bs, &vps->ptl[i], i);"
    },
    {
        "line": 13,
        "fullcodeline": "return -1;"
    },
    {
        "line": 23,
        "fullcodeline": "return -1;"
    },
    {
        "line": 35,
        "fullcodeline": "if (layer_id>vps->max_layer_id) vps->max_layer_id = layer_id;"
    },
    {
        "line": 36,
        "fullcodeline": "if (i && !vps->all_layers_independent) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (!vps->each_layer_is_ols) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (!vps_default_ptl_dpb_hrd_max_tid_flag)"
    },
    {
        "line": 37,
        "fullcodeline": "Bool layer_indep = gf_bs_read_int_log_idx(bs, 1, \"layer_independent\", i);"
    },
    {
        "line": 52,
        "fullcodeline": "vps->each_layer_is_ols = gf_bs_read_int_log(bs, 1, \"each_layer_is_ols\");"
    },
    {
        "line": 55,
        "fullcodeline": "u32 vps_ols_mode_idc = 2;"
    },
    {
        "line": 73,
        "fullcodeline": "vps->ptl[i].pt_present = gf_bs_read_int_log_idx(bs, 1, \"pt_present\", i);"
    },
    {
        "line": 75,
        "fullcodeline": "vps->ptl[i].ptl_max_tid = gf_bs_read_int_log_idx(bs, 3, \"ptl_max_tid\", i);"
    },
    {
        "line": 38,
        "fullcodeline": "if (!layer_indep) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (!vps->all_layers_independent) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (vps_ols_mode_idc==2) {"
    },
    {
        "line": 77,
        "fullcodeline": "vps->ptl[i].ptl_max_tid = vps->max_sub_layers - 1;;"
    },
    {
        "line": 39,
        "fullcodeline": "Bool vps_max_tid_ref_present_flag = gf_bs_read_int_log_idx(bs, 1, \"vps_max_tid_ref_present_flag\", i);"
    },
    {
        "line": 57,
        "fullcodeline": "vps_ols_mode_idc = gf_bs_read_int_log(bs, 2, \"vps_ols_mode_idc\");"
    },
    {
        "line": 60,
        "fullcodeline": "u8 vps_num_output_layer_sets = 2 + gf_bs_read_int_log(bs, 8, \"vps_num_output_layer_sets_minus2\");"
    },
    {
        "line": 40,
        "fullcodeline": "for (j=0; j<i; j++) {"
    },
    {
        "line": 61,
        "fullcodeline": "for (i=0; i<vps_num_output_layer_sets; i++) {"
    },
    {
        "line": 41,
        "fullcodeline": "Bool vps_direct_ref_layer_flag = gf_bs_read_int_log_idx2(bs, 1, \"vps_direct_ref_layer_flag\", i, j);"
    },
    {
        "line": 42,
        "fullcodeline": "if (vps_max_tid_ref_present_flag && vps_direct_ref_layer_flag) {"
    },
    {
        "line": 62,
        "fullcodeline": "for (j=0; j<vps->max_layers; j++) {"
    },
    {
        "line": 43,
        "fullcodeline": "gf_bs_read_int_log_idx2(bs, 3, \"vps_max_tid_il_ref_pics_plus1\", i, j);"
    },
    {
        "line": 63,
        "fullcodeline": "gf_bs_read_int_log_idx2(bs, 1, \"vps_ols_output_layer_flag\", i, j);"
    }
]