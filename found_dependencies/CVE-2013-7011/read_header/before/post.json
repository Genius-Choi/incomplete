[
    {
        "line": 3,
        "fullcodeline": "uint8_t state[CONTEXT_SIZE];"
    },
    {
        "line": 4,
        "fullcodeline": "int i, j, context_count = -1; //-1 to avoid warning"
    },
    {
        "line": 7,
        "fullcodeline": "memset(state, 128, sizeof(state));"
    },
    {
        "line": 113,
        "fullcodeline": "av_dlog(f->avctx, \"%d %d %d\\n\","
    },
    {
        "line": 9,
        "fullcodeline": "if (f->version < 2) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (f->colorspace == 0) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (f->version < 2) {"
    },
    {
        "line": 135,
        "fullcodeline": "if (f->slice_count > (unsigned)MAX_SLICES || f->slice_count <= 0) {"
    },
    {
        "line": 140,
        "fullcodeline": "for (j = 0; j < f->slice_count; j++) {"
    },
    {
        "line": 10,
        "fullcodeline": "unsigned v= get_symbol(c, state, 0);"
    },
    {
        "line": 15,
        "fullcodeline": "f->version = v;"
    },
    {
        "line": 16,
        "fullcodeline": "f->ac      = f->avctx->coder_type = get_symbol(c, state, 0);"
    },
    {
        "line": 22,
        "fullcodeline": "f->colorspace = get_symbol(c, state, 0); //YUV cs type"
    },
    {
        "line": 27,
        "fullcodeline": "f->chroma_planes  = get_rac(c, state);"
    },
    {
        "line": 28,
        "fullcodeline": "f->chroma_h_shift = get_symbol(c, state, 0);"
    },
    {
        "line": 29,
        "fullcodeline": "f->chroma_v_shift = get_symbol(c, state, 0);"
    },
    {
        "line": 30,
        "fullcodeline": "f->transparency   = get_rac(c, state);"
    },
    {
        "line": 31,
        "fullcodeline": "f->plane_count    = 2 + f->transparency;"
    },
    {
        "line": 116,
        "fullcodeline": "context_count = read_quant_tables(c, f->quant_table);"
    },
    {
        "line": 136,
        "fullcodeline": "av_log(f->avctx, AV_LOG_ERROR, \"slice count %d is invalid\\n\", f->slice_count);"
    },
    {
        "line": 142,
        "fullcodeline": "fs->ac            = f->ac;"
    },
    {
        "line": 143,
        "fullcodeline": "fs->packed_at_lsb = f->packed_at_lsb;"
    },
    {
        "line": 145,
        "fullcodeline": "fs->slice_damaged = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "if (v >= 2) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (f->ac > 1) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (f->version > 0)"
    },
    {
        "line": 35,
        "fullcodeline": "if (!f->transparency && !f->chroma_planes) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (context_count < 0) {"
    },
    {
        "line": 147,
        "fullcodeline": "if (f->version == 2) {"
    },
    {
        "line": 165,
        "fullcodeline": "for (i = 0; i < f->plane_count; i++) {"
    },
    {
        "line": 12,
        "fullcodeline": "av_log(f->avctx, AV_LOG_ERROR, \"invalid version %d in ver01 header\\n\", v);"
    },
    {
        "line": 25,
        "fullcodeline": "f->avctx->bits_per_raw_sample = get_symbol(c, state, 0);"
    },
    {
        "line": 91,
        "fullcodeline": "} else if (f->colorspace == 1) {"
    },
    {
        "line": 118,
        "fullcodeline": "av_log(f->avctx, AV_LOG_ERROR, \"read_quant_table error\\n\");"
    },
    {
        "line": 121,
        "fullcodeline": "} else if (f->version < 3) {"
    },
    {
        "line": 148,
        "fullcodeline": "fs->slice_x      =  get_symbol(c, state, 0)      * f->width ;"
    },
    {
        "line": 149,
        "fullcodeline": "fs->slice_y      =  get_symbol(c, state, 0)      * f->height;"
    },
    {
        "line": 150,
        "fullcodeline": "fs->slice_width  = (get_symbol(c, state, 0) + 1) * f->width  + fs->slice_x;"
    },
    {
        "line": 151,
        "fullcodeline": "fs->slice_height = (get_symbol(c, state, 0) + 1) * f->height + fs->slice_y;"
    },
    {
        "line": 153,
        "fullcodeline": "fs->slice_x     /= f->num_h_slices;"
    },
    {
        "line": 154,
        "fullcodeline": "fs->slice_y     /= f->num_v_slices;"
    },
    {
        "line": 155,
        "fullcodeline": "fs->slice_width  = fs->slice_width  / f->num_h_slices - fs->slice_x;"
    },
    {
        "line": 156,
        "fullcodeline": "fs->slice_height = fs->slice_height / f->num_v_slices - fs->slice_y;"
    },
    {
        "line": 18,
        "fullcodeline": "for (i = 1; i < 256; i++)"
    },
    {
        "line": 19,
        "fullcodeline": "f->state_transition[i] = get_symbol(c, state, 1) + c->one_state[i];"
    },
    {
        "line": 36,
        "fullcodeline": "if (f->avctx->bits_per_raw_sample <= 8)"
    },
    {
        "line": 122,
        "fullcodeline": "f->slice_count = get_symbol(c, state, 0);"
    },
    {
        "line": 157,
        "fullcodeline": "if ((unsigned)fs->slice_width  > f->width ||"
    },
    {
        "line": 160,
        "fullcodeline": "if (   (unsigned)fs->slice_x + (uint64_t)fs->slice_width  > f->width"
    },
    {
        "line": 168,
        "fullcodeline": "if (f->version == 2) {"
    },
    {
        "line": 183,
        "fullcodeline": "if (f->version <= 2) {"
    },
    {
        "line": 37,
        "fullcodeline": "f->avctx->pix_fmt = AV_PIX_FMT_GRAY8;"
    },
    {
        "line": 40,
        "fullcodeline": "} else if (f->avctx->bits_per_raw_sample<=8 && !f->transparency) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (f->chroma_h_shift || f->chroma_v_shift) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (     f->avctx->bits_per_raw_sample ==  9)"
    },
    {
        "line": 109,
        "fullcodeline": "av_log(f->avctx, AV_LOG_ERROR, \"colorspace not supported\\n\");"
    },
    {
        "line": 124,
        "fullcodeline": "const uint8_t *p = c->bytestream_end;"
    },
    {
        "line": 158,
        "fullcodeline": "(unsigned)fs->slice_height > f->height)"
    },
    {
        "line": 161,
        "fullcodeline": "|| (unsigned)fs->slice_y + (uint64_t)fs->slice_height > f->height)"
    },
    {
        "line": 169,
        "fullcodeline": "int idx = get_symbol(c, state, 0);"
    },
    {
        "line": 175,
        "fullcodeline": "p->quant_table_index = idx;"
    },
    {
        "line": 176,
        "fullcodeline": "memcpy(p->quant_table, f->quant_tables[idx],"
    },
    {
        "line": 184,
        "fullcodeline": "av_assert0(context_count >= 0);"
    },
    {
        "line": 189,
        "fullcodeline": "p->context_count = context_count;"
    },
    {
        "line": 39,
        "fullcodeline": "f->avctx->pix_fmt = AV_PIX_FMT_GRAY16;"
    },
    {
        "line": 93,
        "fullcodeline": "av_log(f->avctx, AV_LOG_ERROR,"
    },
    {
        "line": 98,
        "fullcodeline": "f->avctx->pix_fmt = AV_PIX_FMT_GBRP9;"
    },
    {
        "line": 110,
        "fullcodeline": "return AVERROR(ENOSYS);"
    },
    {
        "line": 126,
        "fullcodeline": "f->slice_count < MAX_SLICES && 3 < p - c->bytestream_start;"
    },
    {
        "line": 127,
        "fullcodeline": "f->slice_count++) {"
    },
    {
        "line": 170,
        "fullcodeline": "if (idx > (unsigned)f->quant_table_count) {"
    },
    {
        "line": 180,
        "fullcodeline": "memcpy(p->quant_table, f->quant_table, sizeof(p->quant_table));"
    },
    {
        "line": 185,
        "fullcodeline": "if (p->context_count < context_count) {"
    },
    {
        "line": 41,
        "fullcodeline": "switch(16 * f->chroma_h_shift + f->chroma_v_shift) {"
    },
    {
        "line": 95,
        "fullcodeline": "return AVERROR(ENOSYS);"
    },
    {
        "line": 125,
        "fullcodeline": "for (f->slice_count = 0;"
    },
    {
        "line": 128,
        "fullcodeline": "int trailer = 3 + 5*!!f->ec;"
    },
    {
        "line": 129,
        "fullcodeline": "int size = AV_RB24(p-trailer);"
    },
    {
        "line": 132,
        "fullcodeline": "p -= size + trailer;"
    },
    {
        "line": 171,
        "fullcodeline": "av_log(f->avctx, AV_LOG_ERROR,"
    },
    {
        "line": 186,
        "fullcodeline": "av_freep(&p->state);"
    },
    {
        "line": 187,
        "fullcodeline": "av_freep(&p->vlc_state);"
    },
    {
        "line": 42,
        "fullcodeline": "case 0x00: f->avctx->pix_fmt = AV_PIX_FMT_YUV444P; break;"
    },
    {
        "line": 43,
        "fullcodeline": "case 0x01: f->avctx->pix_fmt = AV_PIX_FMT_YUV440P; break;"
    },
    {
        "line": 44,
        "fullcodeline": "case 0x10: f->avctx->pix_fmt = AV_PIX_FMT_YUV422P; break;"
    },
    {
        "line": 45,
        "fullcodeline": "case 0x11: f->avctx->pix_fmt = AV_PIX_FMT_YUV420P; break;"
    },
    {
        "line": 46,
        "fullcodeline": "case 0x20: f->avctx->pix_fmt = AV_PIX_FMT_YUV411P; break;"
    },
    {
        "line": 47,
        "fullcodeline": "case 0x22: f->avctx->pix_fmt = AV_PIX_FMT_YUV410P; break;"
    },
    {
        "line": 49,
        "fullcodeline": "av_log(f->avctx, AV_LOG_ERROR, \"format not supported\\n\");"
    },
    {
        "line": 52,
        "fullcodeline": "} else if (f->avctx->bits_per_raw_sample <= 8 && f->transparency) {"
    },
    {
        "line": 99,
        "fullcodeline": "else if (f->avctx->bits_per_raw_sample == 10)"
    },
    {
        "line": 130,
        "fullcodeline": "if (size + trailer > p - c->bytestream_start)"
    },
    {
        "line": 50,
        "fullcodeline": "return AVERROR(ENOSYS);"
    },
    {
        "line": 100,
        "fullcodeline": "f->avctx->pix_fmt = AV_PIX_FMT_GBRP10;"
    },
    {
        "line": 53,
        "fullcodeline": "switch(16*f->chroma_h_shift + f->chroma_v_shift) {"
    },
    {
        "line": 54,
        "fullcodeline": "case 0x00: f->avctx->pix_fmt = AV_PIX_FMT_YUVA444P; break;"
    },
    {
        "line": 55,
        "fullcodeline": "case 0x10: f->avctx->pix_fmt = AV_PIX_FMT_YUVA422P; break;"
    },
    {
        "line": 56,
        "fullcodeline": "case 0x11: f->avctx->pix_fmt = AV_PIX_FMT_YUVA420P; break;"
    },
    {
        "line": 58,
        "fullcodeline": "av_log(f->avctx, AV_LOG_ERROR, \"format not supported\\n\");"
    },
    {
        "line": 61,
        "fullcodeline": "} else if (f->avctx->bits_per_raw_sample == 9) {"
    },
    {
        "line": 101,
        "fullcodeline": "else if (f->avctx->bits_per_raw_sample == 12)"
    },
    {
        "line": 59,
        "fullcodeline": "return AVERROR(ENOSYS);"
    },
    {
        "line": 62,
        "fullcodeline": "f->packed_at_lsb = 1;"
    },
    {
        "line": 102,
        "fullcodeline": "f->avctx->pix_fmt = AV_PIX_FMT_GBRP12;"
    },
    {
        "line": 63,
        "fullcodeline": "switch(16 * f->chroma_h_shift + f->chroma_v_shift) {"
    },
    {
        "line": 64,
        "fullcodeline": "case 0x00: f->avctx->pix_fmt = AV_PIX_FMT_YUV444P9; break;"
    },
    {
        "line": 65,
        "fullcodeline": "case 0x10: f->avctx->pix_fmt = AV_PIX_FMT_YUV422P9; break;"
    },
    {
        "line": 66,
        "fullcodeline": "case 0x11: f->avctx->pix_fmt = AV_PIX_FMT_YUV420P9; break;"
    },
    {
        "line": 68,
        "fullcodeline": "av_log(f->avctx, AV_LOG_ERROR, \"format not supported\\n\");"
    },
    {
        "line": 71,
        "fullcodeline": "} else if (f->avctx->bits_per_raw_sample == 10) {"
    },
    {
        "line": 103,
        "fullcodeline": "else if (f->avctx->bits_per_raw_sample == 14)"
    },
    {
        "line": 69,
        "fullcodeline": "return AVERROR(ENOSYS);"
    },
    {
        "line": 72,
        "fullcodeline": "f->packed_at_lsb = 1;"
    },
    {
        "line": 104,
        "fullcodeline": "f->avctx->pix_fmt = AV_PIX_FMT_GBRP14;"
    },
    {
        "line": 73,
        "fullcodeline": "switch(16 * f->chroma_h_shift + f->chroma_v_shift) {"
    },
    {
        "line": 74,
        "fullcodeline": "case 0x00: f->avctx->pix_fmt = AV_PIX_FMT_YUV444P10; break;"
    },
    {
        "line": 75,
        "fullcodeline": "case 0x10: f->avctx->pix_fmt = AV_PIX_FMT_YUV422P10; break;"
    },
    {
        "line": 76,
        "fullcodeline": "case 0x11: f->avctx->pix_fmt = AV_PIX_FMT_YUV420P10; break;"
    },
    {
        "line": 78,
        "fullcodeline": "av_log(f->avctx, AV_LOG_ERROR, \"format not supported\\n\");"
    },
    {
        "line": 82,
        "fullcodeline": "switch(16 * f->chroma_h_shift + f->chroma_v_shift) {"
    },
    {
        "line": 79,
        "fullcodeline": "return AVERROR(ENOSYS);"
    },
    {
        "line": 83,
        "fullcodeline": "case 0x00: f->avctx->pix_fmt = AV_PIX_FMT_YUV444P16; break;"
    },
    {
        "line": 84,
        "fullcodeline": "case 0x10: f->avctx->pix_fmt = AV_PIX_FMT_YUV422P16; break;"
    },
    {
        "line": 85,
        "fullcodeline": "case 0x11: f->avctx->pix_fmt = AV_PIX_FMT_YUV420P16; break;"
    },
    {
        "line": 87,
        "fullcodeline": "av_log(f->avctx, AV_LOG_ERROR, \"format not supported\\n\");"
    },
    {
        "line": 106,
        "fullcodeline": "if (f->transparency) f->avctx->pix_fmt = AV_PIX_FMT_RGB32;"
    },
    {
        "line": 88,
        "fullcodeline": "return AVERROR(ENOSYS);"
    },
    {
        "line": 107,
        "fullcodeline": "else                 f->avctx->pix_fmt = AV_PIX_FMT_0RGB32;"
    }
]