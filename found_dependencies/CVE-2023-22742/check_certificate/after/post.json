[
    {
        "line": 9,
        "fullcodeline": "git_cert_hostkey cert = {{ 0 }};"
    },
    {
        "line": 12,
        "fullcodeline": "int cert_type, cert_valid = 0, error = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "cert.parent.cert_type = GIT_CERT_HOSTKEY_LIBSSH2;"
    },
    {
        "line": 65,
        "fullcodeline": "key = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_SHA1);"
    },
    {
        "line": 71,
        "fullcodeline": "key = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_MD5);"
    },
    {
        "line": 82,
        "fullcodeline": "git_error_clear();"
    },
    {
        "line": 83,
        "fullcodeline": "error = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "if ((key = libssh2_session_hostkey(session, &cert_len, &cert_type)) == NULL) {"
    },
    {
        "line": 19,
        "fullcodeline": "if ((cert_valid = check_against_known_hosts(session, known_hosts, host, port, key, cert_len, cert_type)) < 0)"
    },
    {
        "line": 23,
        "fullcodeline": "if (key != NULL) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (key != NULL) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (key != NULL) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (cert.type == 0) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (!cert_valid) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (check_cb != NULL) {"
    },
    {
        "line": 15,
        "fullcodeline": "ssh_error(session, \"failed to retrieve hostkey\");"
    },
    {
        "line": 24,
        "fullcodeline": "cert.type |= GIT_CERT_SSH_RAW;"
    },
    {
        "line": 25,
        "fullcodeline": "cert.hostkey = key;"
    },
    {
        "line": 26,
        "fullcodeline": "cert.hostkey_len = cert_len;"
    },
    {
        "line": 67,
        "fullcodeline": "cert.type |= GIT_CERT_SSH_SHA1;"
    },
    {
        "line": 68,
        "fullcodeline": "memcpy(&cert.hash_sha1, key, 20);"
    },
    {
        "line": 73,
        "fullcodeline": "cert.type |= GIT_CERT_SSH_MD5;"
    },
    {
        "line": 74,
        "fullcodeline": "memcpy(&cert.hash_md5, key, 16);"
    },
    {
        "line": 78,
        "fullcodeline": "git_error_set(GIT_ERROR_SSH, \"unable to get the host key\");"
    },
    {
        "line": 85,
        "fullcodeline": "git_error_set(GIT_ERROR_SSH, \"invalid or unknown remote ssh hostkey\");"
    },
    {
        "line": 86,
        "fullcodeline": "error = GIT_ECERTIFICATE;"
    },
    {
        "line": 90,
        "fullcodeline": "git_cert_hostkey *cert_ptr = &cert;"
    },
    {
        "line": 91,
        "fullcodeline": "git_error_state previous_error = {0};"
    },
    {
        "line": 93,
        "fullcodeline": "git_error_state_capture(&previous_error, error);"
    },
    {
        "line": 94,
        "fullcodeline": "error = check_cb((git_cert *) cert_ptr, cert_valid, host, check_cb_payload);"
    },
    {
        "line": 101,
        "fullcodeline": "git_error_state_free(&previous_error);"
    },
    {
        "line": 16,
        "fullcodeline": "return -1;"
    },
    {
        "line": 20,
        "fullcodeline": "return -1;"
    },
    {
        "line": 79,
        "fullcodeline": "return -1;"
    },
    {
        "line": 95,
        "fullcodeline": "if (error == GIT_PASSTHROUGH) {"
    },
    {
        "line": 29,
        "fullcodeline": "cert.raw_type = GIT_CERT_SSH_RAW_TYPE_RSA;"
    },
    {
        "line": 32,
        "fullcodeline": "cert.raw_type = GIT_CERT_SSH_RAW_TYPE_DSS;"
    },
    {
        "line": 53,
        "fullcodeline": "cert.raw_type = GIT_CERT_SSH_RAW_TYPE_UNKNOWN;"
    },
    {
        "line": 96,
        "fullcodeline": "error = git_error_state_restore(&previous_error);"
    },
    {
        "line": 97,
        "fullcodeline": "} else if (error < 0 && !git_error_last()) {"
    },
    {
        "line": 98,
        "fullcodeline": "git_error_set(GIT_ERROR_NET, \"user canceled hostkey check\");"
    }
]