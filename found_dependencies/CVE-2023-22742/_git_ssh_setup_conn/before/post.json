[
    {
        "line": 7,
        "fullcodeline": "int auth_methods, error = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "git_credential *cred = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "LIBSSH2_SESSION *session=NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "LIBSSH2_CHANNEL *channel=NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "t->current_stream = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "*stream = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "s = (ssh_stream *)*stream;"
    },
    {
        "line": 20,
        "fullcodeline": "s->session = NULL;"
    },
    {
        "line": 21,
        "fullcodeline": "s->channel = NULL;"
    },
    {
        "line": 144,
        "fullcodeline": "error = GIT_EAUTH;"
    },
    {
        "line": 178,
        "fullcodeline": "channel = libssh2_channel_open_session(session);"
    },
    {
        "line": 185,
        "fullcodeline": "libssh2_channel_set_blocking(channel, 1);"
    },
    {
        "line": 187,
        "fullcodeline": "s->session = session;"
    },
    {
        "line": 188,
        "fullcodeline": "s->channel = channel;"
    },
    {
        "line": 190,
        "fullcodeline": "t->current_stream = s;"
    },
    {
        "line": 16,
        "fullcodeline": "if (ssh_stream_alloc(t, cmd, stream) < 0)"
    },
    {
        "line": 23,
        "fullcodeline": "if (git_net_str_is_url(url))"
    },
    {
        "line": 28,
        "fullcodeline": "if (error < 0)"
    },
    {
        "line": 31,
        "fullcodeline": "if ((error = git_socket_stream_new(&s->io, s->url.host, s->url.port)) < 0 ||"
    },
    {
        "line": 35,
        "fullcodeline": "if ((error = _git_ssh_session_create(&session, s->io)) < 0)"
    },
    {
        "line": 38,
        "fullcodeline": "if (t->owner->connect_opts.callbacks.certificate_check != NULL) {"
    },
    {
        "line": 141,
        "fullcodeline": "if ((error = list_auth_methods(&auth_methods, session, s->url.username)) < 0)"
    },
    {
        "line": 146,
        "fullcodeline": "if (cred && auth_methods & cred->credtype)"
    },
    {
        "line": 149,
        "fullcodeline": "while (error == GIT_EAUTH) {"
    },
    {
        "line": 175,
        "fullcodeline": "if (error < 0)"
    },
    {
        "line": 179,
        "fullcodeline": "if (!channel) {"
    },
    {
        "line": 193,
        "fullcodeline": "if (error < 0) {"
    },
    {
        "line": 24,
        "fullcodeline": "error = git_net_url_parse(&s->url, url);"
    },
    {
        "line": 32,
        "fullcodeline": "(error = git_stream_connect(s->io)) < 0)"
    },
    {
        "line": 39,
        "fullcodeline": "git_cert_hostkey cert = {{ 0 }}, *cert_ptr;"
    },
    {
        "line": 44,
        "fullcodeline": "cert.parent.cert_type = GIT_CERT_HOSTKEY_LIBSSH2;"
    },
    {
        "line": 46,
        "fullcodeline": "key = libssh2_session_hostkey(session, &cert_len, &cert_type);"
    },
    {
        "line": 89,
        "fullcodeline": "key = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_SHA1);"
    },
    {
        "line": 95,
        "fullcodeline": "key = libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_MD5);"
    },
    {
        "line": 108,
        "fullcodeline": "git_error_clear();"
    },
    {
        "line": 110,
        "fullcodeline": "cert_ptr = &cert;"
    },
    {
        "line": 112,
        "fullcodeline": "error = t->owner->connect_opts.callbacks.certificate_check("
    },
    {
        "line": 131,
        "fullcodeline": "s->url.username = git__strdup(((git_credential_username *) cred)->username);"
    },
    {
        "line": 132,
        "fullcodeline": "cred->free(cred);"
    },
    {
        "line": 133,
        "fullcodeline": "cred = NULL;"
    },
    {
        "line": 147,
        "fullcodeline": "error = _git_ssh_authenticate_session(session, cred);"
    },
    {
        "line": 164,
        "fullcodeline": "error = _git_ssh_authenticate_session(session, cred);"
    },
    {
        "line": 180,
        "fullcodeline": "error = -1;"
    },
    {
        "line": 181,
        "fullcodeline": "ssh_error(session, \"Failed to open SSH channel\");"
    },
    {
        "line": 194,
        "fullcodeline": "ssh_stream_free(*stream);"
    },
    {
        "line": 201,
        "fullcodeline": "cred->free(cred);"
    },
    {
        "line": 17,
        "fullcodeline": "return -1;"
    },
    {
        "line": 26,
        "fullcodeline": "error = git_net_url_parse_scp(&s->url, url);"
    },
    {
        "line": 47,
        "fullcodeline": "if (key != NULL) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (key != NULL) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (key != NULL) {"
    },
    {
        "line": 101,
        "fullcodeline": "if (cert.type == 0) {"
    },
    {
        "line": 118,
        "fullcodeline": "if (error < 0 && error != GIT_PASSTHROUGH) {"
    },
    {
        "line": 128,
        "fullcodeline": "if ((error = request_creds(&cred, t, NULL, GIT_CREDENTIAL_USERNAME)) < 0)"
    },
    {
        "line": 134,
        "fullcodeline": "if (!s->url.username)"
    },
    {
        "line": 155,
        "fullcodeline": "if ((error = request_creds(&cred, t, s->url.username, auth_methods)) < 0)"
    },
    {
        "line": 158,
        "fullcodeline": "if (strcmp(s->url.username, git_credential_get_username(cred))) {"
    },
    {
        "line": 166,
        "fullcodeline": "if (error == GIT_EAUTH) {"
    },
    {
        "line": 48,
        "fullcodeline": "cert.type |= GIT_CERT_SSH_RAW;"
    },
    {
        "line": 49,
        "fullcodeline": "cert.hostkey = key;"
    },
    {
        "line": 50,
        "fullcodeline": "cert.hostkey_len = cert_len;"
    },
    {
        "line": 91,
        "fullcodeline": "cert.type |= GIT_CERT_SSH_SHA1;"
    },
    {
        "line": 92,
        "fullcodeline": "memcpy(&cert.hash_sha1, key, 20);"
    },
    {
        "line": 97,
        "fullcodeline": "cert.type |= GIT_CERT_SSH_MD5;"
    },
    {
        "line": 98,
        "fullcodeline": "memcpy(&cert.hash_md5, key, 16);"
    },
    {
        "line": 102,
        "fullcodeline": "git_error_set(GIT_ERROR_SSH, \"unable to get the host key\");"
    },
    {
        "line": 103,
        "fullcodeline": "error = -1;"
    },
    {
        "line": 113,
        "fullcodeline": "(git_cert *)cert_ptr,"
    },
    {
        "line": 136,
        "fullcodeline": "} else if (s->url.username && s->url.password) {"
    },
    {
        "line": 151,
        "fullcodeline": "cred->free(cred);"
    },
    {
        "line": 152,
        "fullcodeline": "cred = NULL;"
    },
    {
        "line": 159,
        "fullcodeline": "git_error_set(GIT_ERROR_SSH, \"username does not match previous request\");"
    },
    {
        "line": 160,
        "fullcodeline": "error = -1;"
    },
    {
        "line": 197,
        "fullcodeline": "libssh2_session_free(session);"
    },
    {
        "line": 119,
        "fullcodeline": "if (!git_error_last())"
    },
    {
        "line": 168,
        "fullcodeline": "if ((error = list_auth_methods(&auth_methods, session, s->url.username)) < 0)"
    },
    {
        "line": 53,
        "fullcodeline": "cert.raw_type = GIT_CERT_SSH_RAW_TYPE_RSA;"
    },
    {
        "line": 56,
        "fullcodeline": "cert.raw_type = GIT_CERT_SSH_RAW_TYPE_DSS;"
    },
    {
        "line": 77,
        "fullcodeline": "cert.raw_type = GIT_CERT_SSH_RAW_TYPE_UNKNOWN;"
    },
    {
        "line": 120,
        "fullcodeline": "git_error_set(GIT_ERROR_NET, \"user cancelled hostkey check\");"
    },
    {
        "line": 137,
        "fullcodeline": "if ((error = git_credential_userpass_plaintext_new(&cred, s->url.username, s->url.password)) < 0)"
    },
    {
        "line": 171,
        "fullcodeline": "error = GIT_EAUTH;"
    }
]