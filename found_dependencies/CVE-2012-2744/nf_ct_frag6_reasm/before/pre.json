[
    {
        "line": 3,
        "fullcodeline": "struct sk_buff *fp, *op, *head = fq->q.fragments;"
    },
    {
        "line": 6,
        "fullcodeline": "fq_kill(fq);"
    },
    {
        "line": 8,
        "fullcodeline": "WARN_ON(head == NULL);"
    },
    {
        "line": 9,
        "fullcodeline": "WARN_ON(NFCT_FRAG6_CB(head)->offset != 0);"
    },
    {
        "line": 12,
        "fullcodeline": "payload_len = ((head->data - skb_network_header(head)) -"
    },
    {
        "line": 55,
        "fullcodeline": "skb_network_header(head)[fq->nhoffset] = skb_transport_header(head)[0];"
    },
    {
        "line": 56,
        "fullcodeline": "memmove(head->head + sizeof(struct frag_hdr), head->head,"
    },
    {
        "line": 58,
        "fullcodeline": "head->mac_header += sizeof(struct frag_hdr);"
    },
    {
        "line": 59,
        "fullcodeline": "head->network_header += sizeof(struct frag_hdr);"
    },
    {
        "line": 61,
        "fullcodeline": "skb_shinfo(head)->frag_list = head->next;"
    },
    {
        "line": 62,
        "fullcodeline": "skb_reset_transport_header(head);"
    },
    {
        "line": 63,
        "fullcodeline": "skb_push(head, head->data - skb_network_header(head));"
    },
    {
        "line": 64,
        "fullcodeline": "atomic_sub(head->truesize, &nf_init_frags.mem);"
    },
    {
        "line": 77,
        "fullcodeline": "head->next = NULL;"
    },
    {
        "line": 78,
        "fullcodeline": "head->dev = dev;"
    },
    {
        "line": 79,
        "fullcodeline": "head->tstamp = fq->q.stamp;"
    },
    {
        "line": 80,
        "fullcodeline": "ipv6_hdr(head)->payload_len = htons(payload_len);"
    },
    {
        "line": 88,
        "fullcodeline": "fq->q.fragments = NULL;"
    },
    {
        "line": 91,
        "fullcodeline": "fp = skb_shinfo(head)->frag_list;"
    },
    {
        "line": 96,
        "fullcodeline": "op = NFCT_FRAG6_CB(head)->orig;"
    },
    {
        "line": 15,
        "fullcodeline": "if (payload_len > IPV6_MAXPLEN) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (skb_cloned(head) && pskb_expand_head(head, 0, 0, GFP_ATOMIC)) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (skb_has_frags(head)) {"
    },
    {
        "line": 57,
        "fullcodeline": "(head->data - head->head) - sizeof(struct frag_hdr));"
    },
    {
        "line": 66,
        "fullcodeline": "for (fp=head->next; fp; fp = fp->next) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (head->ip_summed == CHECKSUM_COMPLETE)"
    },
    {
        "line": 92,
        "fullcodeline": "if (NFCT_FRAG6_CB(fp)->orig == NULL)"
    },
    {
        "line": 97,
        "fullcodeline": "for (; fp; fp = fp->next) {"
    },
    {
        "line": 31,
        "fullcodeline": "int i, plen = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "clone->next = head->next;"
    },
    {
        "line": 38,
        "fullcodeline": "head->next = clone;"
    },
    {
        "line": 39,
        "fullcodeline": "skb_shinfo(clone)->frag_list = skb_shinfo(head)->frag_list;"
    },
    {
        "line": 40,
        "fullcodeline": "skb_frag_list_init(head);"
    },
    {
        "line": 43,
        "fullcodeline": "clone->len = clone->data_len = head->data_len - plen;"
    },
    {
        "line": 44,
        "fullcodeline": "head->data_len -= clone->len;"
    },
    {
        "line": 45,
        "fullcodeline": "head->len -= clone->len;"
    },
    {
        "line": 46,
        "fullcodeline": "clone->csum = 0;"
    },
    {
        "line": 47,
        "fullcodeline": "clone->ip_summed = head->ip_summed;"
    },
    {
        "line": 49,
        "fullcodeline": "NFCT_FRAG6_CB(clone)->orig = NULL;"
    },
    {
        "line": 50,
        "fullcodeline": "atomic_add(clone->truesize, &nf_init_frags.mem);"
    },
    {
        "line": 67,
        "fullcodeline": "head->data_len += fp->len;"
    },
    {
        "line": 68,
        "fullcodeline": "head->len += fp->len;"
    },
    {
        "line": 73,
        "fullcodeline": "head->truesize += fp->truesize;"
    },
    {
        "line": 74,
        "fullcodeline": "atomic_sub(fp->truesize, &nf_init_frags.mem);"
    },
    {
        "line": 84,
        "fullcodeline": "head->csum = csum_partial(skb_network_header(head),"
    },
    {
        "line": 94,
        "fullcodeline": "fp = fp->next;"
    },
    {
        "line": 98,
        "fullcodeline": "struct sk_buff *orig = NFCT_FRAG6_CB(fp)->orig;"
    },
    {
        "line": 100,
        "fullcodeline": "op->next = orig;"
    },
    {
        "line": 101,
        "fullcodeline": "op = orig;"
    },
    {
        "line": 102,
        "fullcodeline": "NFCT_FRAG6_CB(fp)->orig = NULL;"
    },
    {
        "line": 33,
        "fullcodeline": "if ((clone = alloc_skb(0, GFP_ATOMIC)) == NULL) {"
    },
    {
        "line": 41,
        "fullcodeline": "for (i=0; i<skb_shinfo(head)->nr_frags; i++)"
    },
    {
        "line": 42,
        "fullcodeline": "plen += skb_shinfo(head)->frags[i].size;"
    },
    {
        "line": 69,
        "fullcodeline": "if (head->ip_summed != fp->ip_summed)"
    },
    {
        "line": 13,
        "fullcodeline": "sizeof(struct ipv6hdr) + fq->q.len -"
    },
    {
        "line": 70,
        "fullcodeline": "head->ip_summed = CHECKSUM_NONE;"
    },
    {
        "line": 85,
        "fullcodeline": "skb_network_header_len(head),"
    },
    {
        "line": 71,
        "fullcodeline": "else if (head->ip_summed == CHECKSUM_COMPLETE)"
    },
    {
        "line": 72,
        "fullcodeline": "head->csum = csum_add(head->csum, fp->csum);"
    }
]