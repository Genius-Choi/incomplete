[
    {
        "line": 3,
        "fullcodeline": "QList<QByteArray> params;"
    },
    {
        "line": 4,
        "fullcodeline": "params << net->serverEncode(bufname) << lowLevelQuote(pack(net->serverEncode(ctcpTag), net->userEncode(bufname, message)));"
    },
    {
        "line": 6,
        "fullcodeline": "static const char *splitter = \" .,-!?\";"
    },
    {
        "line": 7,
        "fullcodeline": "int maxSplitPos = message.count();"
    },
    {
        "line": 8,
        "fullcodeline": "int splitPos = maxSplitPos;"
    },
    {
        "line": 10,
        "fullcodeline": "int overrun = net->userInputHandler()->lastParamOverrun(\"PRIVMSG\", params);"
    },
    {
        "line": 22,
        "fullcodeline": "net->putCmd(\"PRIVMSG\", params);"
    },
    {
        "line": 24,
        "fullcodeline": "if (splitPos < message.count())"
    },
    {
        "line": 12,
        "fullcodeline": "maxSplitPos = message.count() - overrun -2;"
    },
    {
        "line": 13,
        "fullcodeline": "splitPos = -1;"
    },
    {
        "line": 20,
        "fullcodeline": "params = params.mid(0, 1) <<  lowLevelQuote(pack(net->serverEncode(ctcpTag), net->userEncode(bufname, message.left(splitPos))));"
    },
    {
        "line": 25,
        "fullcodeline": "query(net, bufname, ctcpTag, message.mid(splitPos));"
    },
    {
        "line": 14,
        "fullcodeline": "for (const char *splitChar = splitter; *splitChar != 0; splitChar++) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (splitPos <= 0 || splitPos > maxSplitPos)"
    },
    {
        "line": 15,
        "fullcodeline": "splitPos = qMax(splitPos, message.lastIndexOf(*splitChar, maxSplitPos) + 1); // keep split char on old line"
    },
    {
        "line": 18,
        "fullcodeline": "splitPos = maxSplitPos;"
    }
]