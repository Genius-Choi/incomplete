[
    {
        "line": 3,
        "fullcodeline": "struct inet_sock *inet = inet_sk(sk);"
    },
    {
        "line": 4,
        "fullcodeline": "struct inet_connection_sock *icsk = inet_csk(sk);"
    },
    {
        "line": 5,
        "fullcodeline": "struct tcp_sock *tp = tcp_sk(sk);"
    },
    {
        "line": 6,
        "fullcodeline": "int err = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "int old_state = sk->sk_state;"
    },
    {
        "line": 28,
        "fullcodeline": "tcp_clear_xmit_timers(sk);"
    },
    {
        "line": 29,
        "fullcodeline": "__skb_queue_purge(&sk->sk_receive_queue);"
    },
    {
        "line": 30,
        "fullcodeline": "tcp_write_queue_purge(sk);"
    },
    {
        "line": 31,
        "fullcodeline": "tcp_fastopen_active_disable_ofo_check(sk);"
    },
    {
        "line": 32,
        "fullcodeline": "skb_rbtree_purge(&tp->out_of_order_queue);"
    },
    {
        "line": 34,
        "fullcodeline": "inet->inet_dport = 0;"
    },
    {
        "line": 39,
        "fullcodeline": "sk->sk_shutdown = 0;"
    },
    {
        "line": 40,
        "fullcodeline": "sock_reset_flag(sk, SOCK_DONE);"
    },
    {
        "line": 41,
        "fullcodeline": "tp->srtt_us = 0;"
    },
    {
        "line": 42,
        "fullcodeline": "tp->write_seq += tp->max_window + 2;"
    },
    {
        "line": 45,
        "fullcodeline": "icsk->icsk_backoff = 0;"
    },
    {
        "line": 46,
        "fullcodeline": "tp->snd_cwnd = 2;"
    },
    {
        "line": 47,
        "fullcodeline": "icsk->icsk_probes_out = 0;"
    },
    {
        "line": 48,
        "fullcodeline": "tp->packets_out = 0;"
    },
    {
        "line": 49,
        "fullcodeline": "tp->snd_ssthresh = TCP_INFINITE_SSTHRESH;"
    },
    {
        "line": 50,
        "fullcodeline": "tp->snd_cwnd_cnt = 0;"
    },
    {
        "line": 51,
        "fullcodeline": "tp->window_clamp = 0;"
    },
    {
        "line": 52,
        "fullcodeline": "tcp_set_ca_state(sk, TCP_CA_Open);"
    },
    {
        "line": 53,
        "fullcodeline": "tcp_clear_retrans(tp);"
    },
    {
        "line": 54,
        "fullcodeline": "inet_csk_delack_init(sk);"
    },
    {
        "line": 58,
        "fullcodeline": "icsk->icsk_ack.rcv_mss = TCP_MIN_MSS;"
    },
    {
        "line": 59,
        "fullcodeline": "tcp_init_send_head(sk);"
    },
    {
        "line": 60,
        "fullcodeline": "memset(&tp->rx_opt, 0, sizeof(tp->rx_opt));"
    },
    {
        "line": 61,
        "fullcodeline": "__sk_dst_reset(sk);"
    },
    {
        "line": 62,
        "fullcodeline": "tcp_saved_syn_free(tp);"
    },
    {
        "line": 65,
        "fullcodeline": "tcp_free_fastopen_req(tp);"
    },
    {
        "line": 66,
        "fullcodeline": "inet->defer_connect = 0;"
    },
    {
        "line": 68,
        "fullcodeline": "WARN_ON(inet->inet_num && !icsk->icsk_bind_hash);"
    },
    {
        "line": 70,
        "fullcodeline": "sk->sk_error_report(sk);"
    },
    {
        "line": 9,
        "fullcodeline": "if (old_state != TCP_CLOSE)"
    },
    {
        "line": 13,
        "fullcodeline": "if (old_state == TCP_LISTEN) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (!(sk->sk_userlocks & SOCK_BINDADDR_LOCK))"
    },
    {
        "line": 43,
        "fullcodeline": "if (tp->write_seq == 0)"
    },
    {
        "line": 10,
        "fullcodeline": "tcp_set_state(sk, TCP_CLOSE);"
    },
    {
        "line": 14,
        "fullcodeline": "inet_csk_listen_stop(sk);"
    },
    {
        "line": 37,
        "fullcodeline": "inet_reset_saddr(sk);"
    },
    {
        "line": 44,
        "fullcodeline": "tp->write_seq = 1;"
    },
    {
        "line": 15,
        "fullcodeline": "} else if (unlikely(tp->repair)) {"
    },
    {
        "line": 16,
        "fullcodeline": "sk->sk_err = ECONNABORTED;"
    },
    {
        "line": 17,
        "fullcodeline": "} else if (tcp_need_reset(old_state) ||"
    },
    {
        "line": 18,
        "fullcodeline": "(tp->snd_nxt != tp->write_seq &&"
    },
    {
        "line": 23,
        "fullcodeline": "tcp_send_active_reset(sk, gfp_any());"
    },
    {
        "line": 24,
        "fullcodeline": "sk->sk_err = ECONNRESET;"
    },
    {
        "line": 19,
        "fullcodeline": "(1 << old_state) & (TCPF_CLOSING | TCPF_LAST_ACK))) {"
    },
    {
        "line": 25,
        "fullcodeline": "} else if (old_state == TCP_SYN_SENT)"
    },
    {
        "line": 26,
        "fullcodeline": "sk->sk_err = ECONNRESET;"
    }
]