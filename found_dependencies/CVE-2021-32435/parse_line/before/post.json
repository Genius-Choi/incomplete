[
    {
        "line": 5,
        "fullcodeline": "char *dot = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "struct SYMBOL *last_note_sav = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "int i, flags, flags_sav = 0, slur;"
    },
    {
        "line": 9,
        "fullcodeline": "static char qtb[10] = {0, 1, 3, 2, 3, 0, 2, 0, 3, 0};"
    },
    {
        "line": 11,
        "fullcodeline": "colnum = 0;"
    },
    {
        "line": 135,
        "fullcodeline": "flags = 0;"
    },
    {
        "line": 138,
        "fullcodeline": "deco_start = deco_cont = NULL;"
    },
    {
        "line": 139,
        "fullcodeline": "slur = 0;"
    },
    {
        "line": 458,
        "fullcodeline": "s = abc_new(ABC_T_EOLN, NULL);"
    },
    {
        "line": 112,
        "fullcodeline": "if (p[1] == ':'"
    },
    {
        "line": 131,
        "fullcodeline": "if (parse.abc_state != ABC_S_TUNE)"
    },
    {
        "line": 136,
        "fullcodeline": "if (parse.abc_vers <= (2 << 16))"
    },
    {
        "line": 140,
        "fullcodeline": "while (*p != '\\0') {"
    },
    {
        "line": 449,
        "fullcodeline": "if (flags & ABC_F_GRACE) {"
    },
    {
        "line": 459,
        "fullcodeline": "if (flags & ABC_F_SPACE)"
    },
    {
        "line": 461,
        "fullcodeline": "if (p[-1] == '\\\\'"
    },
    {
        "line": 113,
        "fullcodeline": "&& *p != '|' && *p != ':') {\t\t/* not '|:' nor '::' */"
    },
    {
        "line": 116,
        "fullcodeline": "new_tune = parse_info(p);"
    },
    {
        "line": 123,
        "fullcodeline": "c = p[strlen(p) - 1];"
    },
    {
        "line": 137,
        "fullcodeline": "lyric_started = 0;"
    },
    {
        "line": 141,
        "fullcodeline": "colnum = p - abc_line;"
    },
    {
        "line": 450,
        "fullcodeline": "syntax(\"EOLN in grace note sequence\", p - 1);"
    },
    {
        "line": 453,
        "fullcodeline": "curvoice->last_note = last_note_sav;"
    },
    {
        "line": 454,
        "fullcodeline": "memcpy(&dc, &dc_sav, sizeof dc);"
    },
    {
        "line": 460,
        "fullcodeline": "s->flags |= ABC_F_SPACE;"
    },
    {
        "line": 462,
        "fullcodeline": "|| char_tb['\\n'] != CHAR_LINEBREAK)"
    },
    {
        "line": 463,
        "fullcodeline": "s->u.eoln.type = 1;\t\t/* no break */"
    },
    {
        "line": 24,
        "fullcodeline": "if (p[1] == '%') {"
    },
    {
        "line": 120,
        "fullcodeline": "if (*p != 'V'"
    },
    {
        "line": 124,
        "fullcodeline": "if (c != '|' && c != ']')"
    },
    {
        "line": 126,
        "fullcodeline": "while (!isspace((unsigned char) *p) && *p != '\\0')"
    },
    {
        "line": 127,
        "fullcodeline": "p++;"
    },
    {
        "line": 128,
        "fullcodeline": "while (isspace((unsigned char) *p))"
    },
    {
        "line": 129,
        "fullcodeline": "p++;"
    },
    {
        "line": 25,
        "fullcodeline": "s = abc_new(ABC_T_PSCOM, p);"
    },
    {
        "line": 26,
        "fullcodeline": "p += 2;\t\t\t\t/* skip '%%' */"
    },
    {
        "line": 121,
        "fullcodeline": "|| parse.abc_state != ABC_S_TUNE)"
    },
    {
        "line": 146,
        "fullcodeline": "p = parse_gchord(p);"
    },
    {
        "line": 151,
        "fullcodeline": "last_note_sav = curvoice->last_note;"
    },
    {
        "line": 152,
        "fullcodeline": "curvoice->last_note = NULL;"
    },
    {
        "line": 153,
        "fullcodeline": "memcpy(&dc_sav, &dc, sizeof dc);"
    },
    {
        "line": 154,
        "fullcodeline": "dc.n = 0;"
    },
    {
        "line": 155,
        "fullcodeline": "flags_sav = flags;"
    },
    {
        "line": 156,
        "fullcodeline": "flags = ABC_F_GRACE;"
    },
    {
        "line": 165,
        "fullcodeline": "parse.last_sym->flags |= ABC_F_GR_END;"
    },
    {
        "line": 168,
        "fullcodeline": "curvoice->last_note = last_note_sav;"
    },
    {
        "line": 169,
        "fullcodeline": "memcpy(&dc, &dc_sav, sizeof dc);"
    },
    {
        "line": 170,
        "fullcodeline": "flags = flags_sav;"
    },
    {
        "line": 193,
        "fullcodeline": "p = parse_deco(p - 1, &dc, -1);"
    },
    {
        "line": 196,
        "fullcodeline": "s = abc_new(ABC_T_EOLN, NULL);"
    },
    {
        "line": 200,
        "fullcodeline": "p = parse_note(p - 1, flags);"
    },
    {
        "line": 201,
        "fullcodeline": "flags &= ABC_F_GRACE;"
    },
    {
        "line": 202,
        "fullcodeline": "parse.last_sym->u.note.slur_st = slur;"
    },
    {
        "line": 203,
        "fullcodeline": "slur = 0;"
    },
    {
        "line": 212,
        "fullcodeline": "q = p;"
    },
    {
        "line": 217,
        "fullcodeline": "s = abc_new(ABC_T_MREP, NULL);"
    },
    {
        "line": 218,
        "fullcodeline": "s->u.bar.type = 0;"
    },
    {
        "line": 219,
        "fullcodeline": "s->u.bar.len = q - p + 1;"
    },
    {
        "line": 220,
        "fullcodeline": "syntax(\"Non standard measure repeat syntax\", p - 1);"
    },
    {
        "line": 221,
        "fullcodeline": "p = q;"
    },
    {
        "line": 226,
        "fullcodeline": "syntax(\"'\\\\' ignored\", p - 1);"
    },
    {
        "line": 257,
        "fullcodeline": "c = ']';"
    },
    {
        "line": 258,
        "fullcodeline": "q = p;"
    },
    {
        "line": 267,
        "fullcodeline": "parse_info(q);"
    },
    {
        "line": 268,
        "fullcodeline": "*p = c;"
    },
    {
        "line": 275,
        "fullcodeline": "p = parse_bar(p);"
    },
    {
        "line": 333,
        "fullcodeline": "slur <<= 4;"
    },
    {
        "line": 377,
        "fullcodeline": "p++;"
    },
    {
        "line": 378,
        "fullcodeline": "vover = 0;"
    },
    {
        "line": 379,
        "fullcodeline": "s = abc_new(ABC_T_V_OVER, NULL);"
    },
    {
        "line": 380,
        "fullcodeline": "s->u.v_over.type = V_OVER_E;"
    },
    {
        "line": 381,
        "fullcodeline": "s->u.v_over.voice = curvoice->mvoice;"
    },
    {
        "line": 382,
        "fullcodeline": "curvoice->last_note = NULL;\t/* ?? */"
    },
    {
        "line": 383,
        "fullcodeline": "curvoice = &voice_tb[curvoice->mvoice];"
    },
    {
        "line": 386,
        "fullcodeline": "flags |= ABC_F_SPACE;"
    },
    {
        "line": 422,
        "fullcodeline": "i = 1;"
    },
    {
        "line": 433,
        "fullcodeline": "broken_rhythm(curvoice->last_note, i);"
    },
    {
        "line": 434,
        "fullcodeline": "curvoice->last_note->u.note.brhythm = i;"
    },
    {
        "line": 440,
        "fullcodeline": "syntax((flags & ABC_F_GRACE)"
    },
    {
        "line": 452,
        "fullcodeline": "curvoice->last_note->flags |= ABC_F_GR_END;"
    },
    {
        "line": 16,
        "fullcodeline": "if (parse.last_sym"
    },
    {
        "line": 27,
        "fullcodeline": "if (strncasecmp(p, \"decoration \", 11) == 0) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (strncasecmp(p, \"linebreak \", 10) == 0) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (strncasecmp(p, \"microscale \", 11) == 0) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (strncasecmp(p, \"user \", 5) == 0) {"
    },
    {
        "line": 144,
        "fullcodeline": "if (flags & ABC_F_GRACE)"
    },
    {
        "line": 149,
        "fullcodeline": "if (flags & ABC_F_GRACE)"
    },
    {
        "line": 157,
        "fullcodeline": "if (*p == '/') {"
    },
    {
        "line": 163,
        "fullcodeline": "if (!(flags & ABC_F_GRACE))"
    },
    {
        "line": 166,
        "fullcodeline": "if (dc.n != 0)"
    },
    {
        "line": 173,
        "fullcodeline": "if (p[-1] == '!'"
    },
    {
        "line": 182,
        "fullcodeline": "if (p[-1] == '.') {"
    },
    {
        "line": 204,
        "fullcodeline": "if (parse.last_sym->u.note.notes[0].len > 0) /* if not space */"
    },
    {
        "line": 208,
        "fullcodeline": "if (flags & ABC_F_GRACE)"
    },
    {
        "line": 210,
        "fullcodeline": "if (char_tb[(unsigned char) p[-1]] != CHAR_BAR)"
    },
    {
        "line": 213,
        "fullcodeline": "while (*q == '/')"
    },
    {
        "line": 214,
        "fullcodeline": "q++;"
    },
    {
        "line": 215,
        "fullcodeline": "if (char_tb[(unsigned char) *q] != CHAR_BAR)"
    },
    {
        "line": 224,
        "fullcodeline": "if (*p == '\\0')"
    },
    {
        "line": 229,
        "fullcodeline": "if (*p == '|' || *p == ']' || *p == ':'"
    },
    {
        "line": 237,
        "fullcodeline": "if (p[1] != ':') {"
    },
    {
        "line": 252,
        "fullcodeline": "while (p[2] == ' ') {\t\t/* remove the spaces */"
    },
    {
        "line": 259,
        "fullcodeline": "while (*p != '\\0' && *p != c)"
    },
    {
        "line": 260,
        "fullcodeline": "p++;"
    },
    {
        "line": 261,
        "fullcodeline": "if (*p == '\\0') {"
    },
    {
        "line": 269,
        "fullcodeline": "if (c != '\\0')"
    },
    {
        "line": 273,
        "fullcodeline": "if (flags & ABC_F_GRACE)"
    },
    {
        "line": 278,
        "fullcodeline": "if (*p > '0' && *p <= '9') {"
    },
    {
        "line": 319,
        "fullcodeline": "if (*p == '&') {"
    },
    {
        "line": 334,
        "fullcodeline": "if (p == dot + 1 && dc.n == 0)"
    },
    {
        "line": 361,
        "fullcodeline": "if (flags & ABC_F_GRACE)"
    },
    {
        "line": 363,
        "fullcodeline": "if (*p != ')'"
    },
    {
        "line": 420,
        "fullcodeline": "if (!curvoice->last_note)"
    },
    {
        "line": 423,
        "fullcodeline": "while (*p == p[-1]) {"
    },
    {
        "line": 427,
        "fullcodeline": "if (i > 3) {"
    },
    {
        "line": 431,
        "fullcodeline": "if (p[-1] == '<')"
    },
    {
        "line": 443,
        "fullcodeline": "p - 1);"
    },
    {
        "line": 17,
        "fullcodeline": "&& parse.last_sym->abc_type != ABC_T_NULL)"
    },
    {
        "line": 18,
        "fullcodeline": "abc_new(ABC_T_NULL, NULL);"
    },
    {
        "line": 28,
        "fullcodeline": "p += 11;"
    },
    {
        "line": 50,
        "fullcodeline": "p += 10;"
    },
    {
        "line": 87,
        "fullcodeline": "p += 11;"
    },
    {
        "line": 90,
        "fullcodeline": "sscanf(p, \"%d\", &v);"
    },
    {
        "line": 98,
        "fullcodeline": "p += 5;"
    },
    {
        "line": 101,
        "fullcodeline": "get_user(p, s);"
    },
    {
        "line": 142,
        "fullcodeline": "switch (char_tb[(unsigned char) *p++]) {"
    },
    {
        "line": 158,
        "fullcodeline": "flags |= ABC_F_SAPPO;"
    },
    {
        "line": 159,
        "fullcodeline": "p++;"
    },
    {
        "line": 167,
        "fullcodeline": "syntax(\"Decoration ignored\", p);"
    },
    {
        "line": 175,
        "fullcodeline": "&& check_nl(p)) {"
    },
    {
        "line": 176,
        "fullcodeline": "s = abc_new(ABC_T_EOLN, NULL);\t/* abc2win EOL */"
    },
    {
        "line": 177,
        "fullcodeline": "s->u.eoln.type = 2;"
    },
    {
        "line": 205,
        "fullcodeline": "curvoice->last_note = parse.last_sym;"
    },
    {
        "line": 231,
        "fullcodeline": "|| *p == ' ') {"
    },
    {
        "line": 234,
        "fullcodeline": "p = parse_bar(p);"
    },
    {
        "line": 238,
        "fullcodeline": "p = parse_note(p - 1, flags); /* chord */"
    },
    {
        "line": 239,
        "fullcodeline": "flags &= ABC_F_GRACE;"
    },
    {
        "line": 240,
        "fullcodeline": "parse.last_sym->u.note.slur_st = slur;"
    },
    {
        "line": 241,
        "fullcodeline": "slur = 0;"
    },
    {
        "line": 242,
        "fullcodeline": "curvoice->last_note = parse.last_sym;"
    },
    {
        "line": 253,
        "fullcodeline": "p[2] = ':';"
    },
    {
        "line": 254,
        "fullcodeline": "p[1] = *p;"
    },
    {
        "line": 255,
        "fullcodeline": "p++;"
    },
    {
        "line": 262,
        "fullcodeline": "syntax(\"Escape sequence [..] not closed\", q);"
    },
    {
        "line": 263,
        "fullcodeline": "c = '\\0';"
    },
    {
        "line": 270,
        "fullcodeline": "p++;"
    },
    {
        "line": 281,
        "fullcodeline": "pplet = strtol(p, &q, 10);"
    },
    {
        "line": 282,
        "fullcodeline": "p = q;"
    },
    {
        "line": 287,
        "fullcodeline": "rplet = pplet;"
    },
    {
        "line": 312,
        "fullcodeline": "s = abc_new(ABC_T_TUPLET, NULL);"
    },
    {
        "line": 313,
        "fullcodeline": "s->u.tuplet.p_plet = pplet;"
    },
    {
        "line": 314,
        "fullcodeline": "s->u.tuplet.q_plet = qplet;"
    },
    {
        "line": 315,
        "fullcodeline": "s->u.tuplet.r_plet = rplet;"
    },
    {
        "line": 316,
        "fullcodeline": "s->flags |= flags;"
    },
    {
        "line": 322,
        "fullcodeline": "p++;"
    },
    {
        "line": 327,
        "fullcodeline": "s = abc_new(ABC_T_V_OVER, NULL);"
    },
    {
        "line": 328,
        "fullcodeline": "s->u.v_over.type = V_OVER_S;"
    },
    {
        "line": 329,
        "fullcodeline": "s->u.v_over.voice = curvoice - voice_tb;"
    },
    {
        "line": 330,
        "fullcodeline": "vover = -1;\t\t/* multi-bars */"
    },
    {
        "line": 335,
        "fullcodeline": "slur |= SL_DOTTED;"
    },
    {
        "line": 338,
        "fullcodeline": "slur += SL_ABOVE;"
    },
    {
        "line": 339,
        "fullcodeline": "p++;"
    },
    {
        "line": 342,
        "fullcodeline": "slur += SL_BELOW;"
    },
    {
        "line": 343,
        "fullcodeline": "p++;"
    },
    {
        "line": 346,
        "fullcodeline": "slur += SL_AUTO;"
    },
    {
        "line": 364,
        "fullcodeline": "|| vover == 0) {\t\t/*??*/"
    },
    {
        "line": 369,
        "fullcodeline": "s = abc_new(ABC_T_V_OVER, NULL);"
    },
    {
        "line": 371,
        "fullcodeline": "vover_new();"
    },
    {
        "line": 372,
        "fullcodeline": "s->u.v_over.voice = curvoice - voice_tb;"
    },
    {
        "line": 391,
        "fullcodeline": "if (!curvoice->last_note"
    },
    {
        "line": 394,
        "fullcodeline": "if (p == dot + 1 && dc.n == 0)"
    },
    {
        "line": 411,
        "fullcodeline": "for (i = 0; i <= curvoice->last_note->nhd; i++) {"
    },
    {
        "line": 424,
        "fullcodeline": "i++;"
    },
    {
        "line": 425,
        "fullcodeline": "p++;"
    },
    {
        "line": 428,
        "fullcodeline": "syntax(\"Bad broken rhythm\", p - 1);"
    },
    {
        "line": 429,
        "fullcodeline": "i = 3;"
    },
    {
        "line": 432,
        "fullcodeline": "i = -i;"
    },
    {
        "line": 30,
        "fullcodeline": "p++;"
    },
    {
        "line": 44,
        "fullcodeline": "for (i = 0; i < sizeof char_tb; i++) {"
    },
    {
        "line": 89,
        "fullcodeline": "p++;"
    },
    {
        "line": 91,
        "fullcodeline": "if (v < 4 || v >= 256 || v & 1)"
    },
    {
        "line": 100,
        "fullcodeline": "p++;"
    },
    {
        "line": 174,
        "fullcodeline": "&& char_tb['\\n'] == CHAR_LINEBREAK"
    },
    {
        "line": 183,
        "fullcodeline": "if (*p == '(' || *p == '-') {"
    },
    {
        "line": 230,
        "fullcodeline": "|| isdigit((unsigned char) *p) || *p == '\"'"
    },
    {
        "line": 232,
        "fullcodeline": "if (flags & ABC_F_GRACE)"
    },
    {
        "line": 265,
        "fullcodeline": "*p = '\\0';"
    },
    {
        "line": 283,
        "fullcodeline": "if ((unsigned) pplet < sizeof qtb / sizeof qtb[0])"
    },
    {
        "line": 288,
        "fullcodeline": "if (*p == ':') {"
    },
    {
        "line": 302,
        "fullcodeline": "if (rplet < 1) {"
    },
    {
        "line": 306,
        "fullcodeline": "if (pplet >= 128 || qplet >= 128 || rplet >= 128) {"
    },
    {
        "line": 310,
        "fullcodeline": "if (qplet == 0)"
    },
    {
        "line": 320,
        "fullcodeline": "if (flags & ABC_F_GRACE)"
    },
    {
        "line": 323,
        "fullcodeline": "if (vover != 0) {"
    },
    {
        "line": 365,
        "fullcodeline": "if (!curvoice->last_note) {"
    },
    {
        "line": 373,
        "fullcodeline": "if (vover == 0)"
    },
    {
        "line": 392,
        "fullcodeline": "|| curvoice->last_note->abc_type != ABC_T_NOTE)"
    },
    {
        "line": 395,
        "fullcodeline": "tie_pos = SL_DOTTED;"
    },
    {
        "line": 400,
        "fullcodeline": "tie_pos += SL_ABOVE;"
    },
    {
        "line": 401,
        "fullcodeline": "p++;"
    },
    {
        "line": 404,
        "fullcodeline": "tie_pos += SL_BELOW;"
    },
    {
        "line": 405,
        "fullcodeline": "p++;"
    },
    {
        "line": 408,
        "fullcodeline": "tie_pos += SL_AUTO;"
    },
    {
        "line": 33,
        "fullcodeline": "char_tb['!'] = CHAR_DECOS;"
    },
    {
        "line": 34,
        "fullcodeline": "char_tb['+'] = CHAR_BAD;"
    },
    {
        "line": 37,
        "fullcodeline": "char_tb['+'] = CHAR_DECOS;"
    },
    {
        "line": 38,
        "fullcodeline": "char_tb['!'] = CHAR_BAD;"
    },
    {
        "line": 92,
        "fullcodeline": "syntax(\"Invalid value in %%microscale\", p);"
    },
    {
        "line": 184,
        "fullcodeline": "dot = p;"
    },
    {
        "line": 289,
        "fullcodeline": "p++;"
    },
    {
        "line": 303,
        "fullcodeline": "syntax(\"Invalid 'r' in tuplet\", p);"
    },
    {
        "line": 307,
        "fullcodeline": "syntax(\"Invalid 'p:q:r' in tuplet\", p);"
    },
    {
        "line": 311,
        "fullcodeline": "qplet = meter % 3 == 0 ? 3 : 2;"
    },
    {
        "line": 324,
        "fullcodeline": "syntax(\"Nested voice overlay\", p - 1);"
    },
    {
        "line": 366,
        "fullcodeline": "syntax(\"Bad start of voice overlay\", p);"
    },
    {
        "line": 374,
        "fullcodeline": "vover = 1;\t/* single bar */"
    },
    {
        "line": 397,
        "fullcodeline": "tie_pos = 0;"
    },
    {
        "line": 412,
        "fullcodeline": "if (curvoice->last_note->u.note.notes[i].ti1 == 0)"
    },
    {
        "line": 45,
        "fullcodeline": "if (char_tb[i] == CHAR_LINEBREAK)"
    },
    {
        "line": 52,
        "fullcodeline": "while (isspace((unsigned char) *p))"
    },
    {
        "line": 53,
        "fullcodeline": "p++;"
    },
    {
        "line": 54,
        "fullcodeline": "if (*p == '\\0')"
    },
    {
        "line": 94,
        "fullcodeline": "microscale = v;"
    },
    {
        "line": 290,
        "fullcodeline": "if (isdigit((unsigned char) *p)) {"
    },
    {
        "line": 294,
        "fullcodeline": "if (*p == ':') {"
    },
    {
        "line": 413,
        "fullcodeline": "curvoice->last_note->u.note.notes[i].ti1 = tie_pos;"
    },
    {
        "line": 46,
        "fullcodeline": "char_tb[i] = i != '!' ?"
    },
    {
        "line": 63,
        "fullcodeline": "char_tb[(unsigned char) *p++]"
    },
    {
        "line": 291,
        "fullcodeline": "qplet = strtol(p, &q, 10);"
    },
    {
        "line": 292,
        "fullcodeline": "p = q;"
    },
    {
        "line": 295,
        "fullcodeline": "p++;"
    },
    {
        "line": 67,
        "fullcodeline": "if (strncmp(p, \"<none>\", 6) == 0)"
    },
    {
        "line": 69,
        "fullcodeline": "if (strncmp(p, \"<EOL>\", 5) == 0) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (strcmp(p, \"lock\") != 0)"
    },
    {
        "line": 296,
        "fullcodeline": "if (isdigit((unsigned char) *p)) {"
    },
    {
        "line": 414,
        "fullcodeline": "else if (curvoice->last_note->nhd == 0)"
    },
    {
        "line": 70,
        "fullcodeline": "char_tb['\\n'] = CHAR_LINEBREAK;"
    },
    {
        "line": 71,
        "fullcodeline": "p += 5;"
    },
    {
        "line": 77,
        "fullcodeline": "syntax(\"Invalid character in %%%%linebreak\","
    },
    {
        "line": 297,
        "fullcodeline": "rplet = strtol(p, &q, 10);"
    },
    {
        "line": 298,
        "fullcodeline": "p = q;"
    },
    {
        "line": 415,
        "fullcodeline": "syntax(\"Too many ties\", p);"
    }
]