[
    {
        "line": 6,
        "fullcodeline": "int pit = 0, len, acc, nostem, chord, j, m, n;"
    },
    {
        "line": 15,
        "fullcodeline": "s->flags |= flags;"
    },
    {
        "line": 16,
        "fullcodeline": "s->u.note.notes[0].color = -1;"
    },
    {
        "line": 27,
        "fullcodeline": "chord = 0;"
    },
    {
        "line": 74,
        "fullcodeline": "q = p;"
    },
    {
        "line": 77,
        "fullcodeline": "m = 0;"
    },
    {
        "line": 78,
        "fullcodeline": "nostem = 0;"
    },
    {
        "line": 185,
        "fullcodeline": "s->u.note.microscale = microscale;"
    },
    {
        "line": 186,
        "fullcodeline": "s->nhd = m - 1;"
    },
    {
        "line": 8,
        "fullcodeline": "if (flags & ABC_F_GRACE) {\t/* in a grace note sequence */"
    },
    {
        "line": 18,
        "fullcodeline": "if (!lyric_started) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (*p != 'X' && *p != 'Z'"
    },
    {
        "line": 182,
        "fullcodeline": "if (m == 0)\t\t\t/* if no note (or error) */"
    },
    {
        "line": 189,
        "fullcodeline": "if (curvoice->last_note"
    },
    {
        "line": 193,
        "fullcodeline": "if (dc.n > 0) {"
    },
    {
        "line": 201,
        "fullcodeline": "if (s->abc_type != ABC_T_NOTE && (flags & ABC_F_GRACE)) {"
    },
    {
        "line": 205,
        "fullcodeline": "if (s->u.note.notes[0].len > 0) /* if not space */"
    },
    {
        "line": 210,
        "fullcodeline": "if ((parse.last_sym = s->abc_prev) == NULL) {"
    },
    {
        "line": 9,
        "fullcodeline": "s = abc_new(ABC_T_NOTE, NULL);"
    },
    {
        "line": 19,
        "fullcodeline": "lyric_started = 1;"
    },
    {
        "line": 20,
        "fullcodeline": "s->flags |= ABC_F_LYRIC_START;"
    },
    {
        "line": 23,
        "fullcodeline": "&& !(flags & ABC_F_GRACE)) {"
    },
    {
        "line": 32,
        "fullcodeline": "s->flags |= ABC_F_INVIS;"
    },
    {
        "line": 34,
        "fullcodeline": "s->abc_type = ABC_T_MREST;"
    },
    {
        "line": 35,
        "fullcodeline": "p++;"
    },
    {
        "line": 36,
        "fullcodeline": "len = 1;"
    },
    {
        "line": 45,
        "fullcodeline": "s->u.bar.type = 0;"
    },
    {
        "line": 46,
        "fullcodeline": "s->u.bar.len = len;"
    },
    {
        "line": 49,
        "fullcodeline": "s->abc_type = ABC_T_REST;"
    },
    {
        "line": 50,
        "fullcodeline": "s->flags |= ABC_F_INVIS;"
    },
    {
        "line": 51,
        "fullcodeline": "p++;"
    },
    {
        "line": 61,
        "fullcodeline": "s->flags |= ABC_F_INVIS;"
    },
    {
        "line": 64,
        "fullcodeline": "s->abc_type = ABC_T_REST;"
    },
    {
        "line": 65,
        "fullcodeline": "p = parse_len(p + 1, ulen, &len);"
    },
    {
        "line": 66,
        "fullcodeline": "s->u.note.notes[0].len = len;"
    },
    {
        "line": 69,
        "fullcodeline": "chord = 1;"
    },
    {
        "line": 70,
        "fullcodeline": "p++;"
    },
    {
        "line": 109,
        "fullcodeline": "p = parse_deco(p, &dc, m);\t/* note head decorations */"
    },
    {
        "line": 110,
        "fullcodeline": "p = parse_acc_pit(p, &pit, &acc);"
    },
    {
        "line": 115,
        "fullcodeline": "p = parse_len(p, (flags & ABC_F_GRACE) ?"
    },
    {
        "line": 119,
        "fullcodeline": "s->u.note.notes[m].pit = pit;"
    },
    {
        "line": 120,
        "fullcodeline": "s->pits[m] = pit;"
    },
    {
        "line": 121,
        "fullcodeline": "s->u.note.notes[m].len = len;"
    },
    {
        "line": 122,
        "fullcodeline": "s->u.note.notes[m].acc = acc;"
    },
    {
        "line": 123,
        "fullcodeline": "s->u.note.notes[m].color = -1;"
    },
    {
        "line": 180,
        "fullcodeline": "s->flags |= ABC_F_STEMLESS;"
    },
    {
        "line": 190,
        "fullcodeline": "&& curvoice->last_note->u.note.brhythm != 0)"
    },
    {
        "line": 191,
        "fullcodeline": "broken_rhythm(s, -curvoice->last_note->u.note.brhythm);"
    },
    {
        "line": 194,
        "fullcodeline": "memcpy(s->abc_type != ABC_T_MREST ? &s->u.note.dc"
    },
    {
        "line": 197,
        "fullcodeline": "dc.n = 0;"
    },
    {
        "line": 202,
        "fullcodeline": "syntax(\"Not a note in grace note sequence\", p);"
    },
    {
        "line": 206,
        "fullcodeline": "curvoice->last_note = s;"
    },
    {
        "line": 211,
        "fullcodeline": "parse.first_sym = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "s = abc_new(ABC_T_NOTE, gchord);"
    },
    {
        "line": 24,
        "fullcodeline": "if (!deco_start)"
    },
    {
        "line": 37,
        "fullcodeline": "if (isdigit((unsigned char) *p)) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (isdigit((unsigned char) *p)\t\t/* number of points */"
    },
    {
        "line": 111,
        "fullcodeline": "if (*p == '0') {"
    },
    {
        "line": 154,
        "fullcodeline": "if (acc >= 0)\t\t\t/* if no error */"
    },
    {
        "line": 157,
        "fullcodeline": "if (!chord)"
    },
    {
        "line": 159,
        "fullcodeline": "if (*p == ']') {"
    },
    {
        "line": 174,
        "fullcodeline": "if (*p == '\\0') {"
    },
    {
        "line": 213,
        "fullcodeline": "s->abc_prev->abc_next = NULL;"
    },
    {
        "line": 214,
        "fullcodeline": "s->abc_prev->flags |= (s->flags & ABC_F_ERROR);"
    },
    {
        "line": 25,
        "fullcodeline": "deco_start = s;"
    },
    {
        "line": 38,
        "fullcodeline": "len = strtol(p, &q, 10);"
    },
    {
        "line": 43,
        "fullcodeline": "p = q;"
    },
    {
        "line": 53,
        "fullcodeline": "|| *p == '-') {\t\t\t/* accept negative offset... */"
    },
    {
        "line": 54,
        "fullcodeline": "s->u.note.notes[0].shhd = strtol(p, &q, 10);"
    },
    {
        "line": 55,
        "fullcodeline": "p = q;"
    },
    {
        "line": 85,
        "fullcodeline": "n = 0;"
    },
    {
        "line": 112,
        "fullcodeline": "nostem = 1;"
    },
    {
        "line": 113,
        "fullcodeline": "p++;"
    },
    {
        "line": 155,
        "fullcodeline": "m++;\t\t\t/* normal case */"
    },
    {
        "line": 160,
        "fullcodeline": "p++;"
    },
    {
        "line": 175,
        "fullcodeline": "syntax(\"Chord not closed\", q);"
    },
    {
        "line": 13,
        "fullcodeline": "gchord = NULL;"
    },
    {
        "line": 39,
        "fullcodeline": "if (len == 0 || len > 100) {"
    },
    {
        "line": 57,
        "fullcodeline": "s->u.note.notes[0].shhd = 10;\t// default"
    },
    {
        "line": 81,
        "fullcodeline": "if (m >= MAXHD) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (*p == '.') {"
    },
    {
        "line": 90,
        "fullcodeline": "if (*p == '(') {"
    },
    {
        "line": 116,
        "fullcodeline": "BASE_LEN / 8 :\t// for grace note alone"
    },
    {
        "line": 161,
        "fullcodeline": "if (*p == '0') {"
    },
    {
        "line": 165,
        "fullcodeline": "if (*p == '/' || isdigit((unsigned char) *p)) {"
    },
    {
        "line": 40,
        "fullcodeline": "syntax(\"Bad number of measures\", p);"
    },
    {
        "line": 41,
        "fullcodeline": "len = 1;"
    },
    {
        "line": 82,
        "fullcodeline": "syntax(\"Too many notes in chord\", p);"
    },
    {
        "line": 83,
        "fullcodeline": "m--;"
    },
    {
        "line": 87,
        "fullcodeline": "n = SL_DOTTED;"
    },
    {
        "line": 88,
        "fullcodeline": "p++;"
    },
    {
        "line": 91,
        "fullcodeline": "p++;"
    },
    {
        "line": 105,
        "fullcodeline": "s->u.note.notes[m].sl1 = (s->u.note.notes[m].sl1 << 3)"
    },
    {
        "line": 151,
        "fullcodeline": "p++;"
    },
    {
        "line": 162,
        "fullcodeline": "nostem = 1;"
    },
    {
        "line": 163,
        "fullcodeline": "p++;"
    },
    {
        "line": 166,
        "fullcodeline": "p = parse_len(p, ulen, &len);"
    },
    {
        "line": 127,
        "fullcodeline": "if (*p == '.') {"
    },
    {
        "line": 132,
        "fullcodeline": "if (*p == '-') {"
    },
    {
        "line": 167,
        "fullcodeline": "for (j = 0; j < m; j++) {"
    },
    {
        "line": 94,
        "fullcodeline": "n += SL_ABOVE;"
    },
    {
        "line": 95,
        "fullcodeline": "p++;"
    },
    {
        "line": 98,
        "fullcodeline": "n += SL_BELOW;"
    },
    {
        "line": 99,
        "fullcodeline": "p++;"
    },
    {
        "line": 102,
        "fullcodeline": "n += SL_AUTO;"
    },
    {
        "line": 130,
        "fullcodeline": "p++;"
    },
    {
        "line": 168,
        "fullcodeline": "s->u.note.notes[j].len ="
    },
    {
        "line": 128,
        "fullcodeline": "if (p[1] != '-')"
    },
    {
        "line": 169,
        "fullcodeline": "len * s->u.note.notes[j].len / ulen;"
    },
    {
        "line": 135,
        "fullcodeline": "s->u.note.notes[m].ti1 = SL_ABOVE;"
    },
    {
        "line": 136,
        "fullcodeline": "p++;"
    },
    {
        "line": 139,
        "fullcodeline": "s->u.note.notes[m].ti1 = SL_BELOW;"
    },
    {
        "line": 140,
        "fullcodeline": "p++;"
    },
    {
        "line": 143,
        "fullcodeline": "s->u.note.notes[m].ti1 = SL_AUTO;"
    },
    {
        "line": 146,
        "fullcodeline": "} else if (*p == ')') {"
    }
]