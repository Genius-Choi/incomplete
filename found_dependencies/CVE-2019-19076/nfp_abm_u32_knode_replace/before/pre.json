[
    {
        "line": 5,
        "fullcodeline": "struct nfp_abm_u32_match *match = NULL, *iter;"
    },
    {
        "line": 13,
        "fullcodeline": "tos_off = proto == htons(ETH_P_IP) ? 16 : 20;"
    },
    {
        "line": 16,
        "fullcodeline": "val = be32_to_cpu(knode->sel->keys[0].val) >> tos_off & 0xff;"
    },
    {
        "line": 17,
        "fullcodeline": "mask = be32_to_cpu(knode->sel->keys[0].mask) >> tos_off & 0xff;"
    },
    {
        "line": 20,
        "fullcodeline": "list_for_each_entry(iter, &alink->dscp_map, list) {"
    },
    {
        "line": 10,
        "fullcodeline": "if (!nfp_abm_u32_check_knode(alink->abm, knode, proto, extack))"
    },
    {
        "line": 28,
        "fullcodeline": "cmask = iter->mask & mask;"
    },
    {
        "line": 47,
        "fullcodeline": "err = nfp_abm_update_band_map(alink);"
    },
    {
        "line": 55,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 23,
        "fullcodeline": "if (iter->handle == knode->handle) {"
    },
    {
        "line": 29,
        "fullcodeline": "if ((iter->val & cmask) == (val & cmask) &&"
    },
    {
        "line": 37,
        "fullcodeline": "match = kzalloc(sizeof(*match), GFP_KERNEL);"
    },
    {
        "line": 30,
        "fullcodeline": "iter->band != knode->res->classid) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (!match)"
    },
    {
        "line": 39,
        "fullcodeline": "return -ENOMEM;"
    }
]