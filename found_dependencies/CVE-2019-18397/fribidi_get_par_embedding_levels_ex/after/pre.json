[
    {
        "line": 12,
        "fullcodeline": "FriBidiLevel base_level_per_iso_level[FRIBIDI_BIDI_MAX_EXPLICIT_LEVEL];"
    },
    {
        "line": 13,
        "fullcodeline": "FriBidiLevel base_level, max_level = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "FriBidiRun *main_run_list = NULL, *explicits_list = NULL, *pp;"
    },
    {
        "line": 16,
        "fullcodeline": "fribidi_boolean status = false;"
    },
    {
        "line": 26,
        "fullcodeline": "DBG (\"in fribidi_get_par_embedding_levels\");"
    },
    {
        "line": 28,
        "fullcodeline": "fribidi_assert (bidi_types);"
    },
    {
        "line": 29,
        "fullcodeline": "fribidi_assert (pbase_dir);"
    },
    {
        "line": 30,
        "fullcodeline": "fribidi_assert (embedding_levels);"
    },
    {
        "line": 43,
        "fullcodeline": "base_level = FRIBIDI_DIR_TO_LEVEL (*pbase_dir);"
    },
    {
        "line": 67,
        "fullcodeline": "base_dir = FRIBIDI_LEVEL_TO_DIR (base_level);"
    },
    {
        "line": 68,
        "fullcodeline": "DBG2 (\"  base level : %c\", fribidi_char_from_level (base_level));"
    },
    {
        "line": 69,
        "fullcodeline": "DBG2 (\"  base dir   : %s\", fribidi_get_bidi_type_name (base_dir));"
    },
    {
        "line": 71,
        "fullcodeline": "base_level_per_iso_level[0] = base_level;"
    },
    {
        "line": 82,
        "fullcodeline": "DBG (\"explicit levels and directions\");"
    },
    {
        "line": 319,
        "fullcodeline": "compact_list (main_run_list);"
    },
    {
        "line": 333,
        "fullcodeline": "max_iso_level = 0;"
    },
    {
        "line": 334,
        "fullcodeline": "DBG (\"resolving weak types\");"
    },
    {
        "line": 503,
        "fullcodeline": "compact_neutrals (main_run_list);"
    },
    {
        "line": 516,
        "fullcodeline": "DBG (\"resolving neutral types - N0\");"
    },
    {
        "line": 698,
        "fullcodeline": "DBG (\"resolving neutral types - N1+N2\");"
    },
    {
        "line": 729,
        "fullcodeline": "compact_list (main_run_list);"
    },
    {
        "line": 741,
        "fullcodeline": "DBG (\"resolving implicit levels\");"
    },
    {
        "line": 767,
        "fullcodeline": "compact_list (main_run_list);"
    },
    {
        "line": 781,
        "fullcodeline": "DBG (\"reinserting explicit codes\");"
    },
    {
        "line": 811,
        "fullcodeline": "DBG (\"reset the embedding levels, 1, 2, 3.\");"
    },
    {
        "line": 888,
        "fullcodeline": "status = true;"
    },
    {
        "line": 891,
        "fullcodeline": "DBG (\"leaving fribidi_get_par_embedding_levels\");"
    },
    {
        "line": 35,
        "fullcodeline": "main_run_list = run_list_encode_bidi_types (bidi_types, bracket_types, len);"
    },
    {
        "line": 44,
        "fullcodeline": "if (!FRIBIDI_IS_STRONG (*pbase_dir))"
    },
    {
        "line": 84,
        "fullcodeline": "FriBidiLevel level, new_level = 0;"
    },
    {
        "line": 85,
        "fullcodeline": "int isolate_level = 0;"
    },
    {
        "line": 91,
        "fullcodeline": "int isolate = 0; /* The isolate status flag */"
    },
    {
        "line": 98,
        "fullcodeline": "} status_stack[FRIBIDI_BIDI_MAX_RESOLVED_LEVELS];"
    },
    {
        "line": 100,
        "fullcodeline": "FriBidiRun *run_per_isolate_level[FRIBIDI_BIDI_MAX_RESOLVED_LEVELS];"
    },
    {
        "line": 102,
        "fullcodeline": "memset(run_per_isolate_level, 0, sizeof(run_per_isolate_level[0])"
    },
    {
        "line": 109,
        "fullcodeline": "explicits_list = new_run_list ();"
    },
    {
        "line": 120,
        "fullcodeline": "level = base_level;"
    },
    {
        "line": 121,
        "fullcodeline": "override = FRIBIDI_TYPE_ON;"
    },
    {
        "line": 123,
        "fullcodeline": "stack_size = 0;"
    },
    {
        "line": 125,
        "fullcodeline": "first_interval = 0;"
    },
    {
        "line": 126,
        "fullcodeline": "valid_isolate_count = 0;"
    },
    {
        "line": 127,
        "fullcodeline": "isolate_overflow = 0;"
    },
    {
        "line": 129,
        "fullcodeline": "for_run_list (pp, main_run_list)"
    },
    {
        "line": 292,
        "fullcodeline": "for_run_list (pp, main_run_list)"
    },
    {
        "line": 304,
        "fullcodeline": "level = base_level;"
    },
    {
        "line": 305,
        "fullcodeline": "override = FRIBIDI_TYPE_ON;"
    },
    {
        "line": 306,
        "fullcodeline": "stack_size = 0;"
    },
    {
        "line": 307,
        "fullcodeline": "over_pushed = 0;"
    },
    {
        "line": 336,
        "fullcodeline": "int last_strong_stack[FRIBIDI_BIDI_MAX_RESOLVED_LEVELS];"
    },
    {
        "line": 342,
        "fullcodeline": "for_run_list (pp, main_run_list)"
    },
    {
        "line": 413,
        "fullcodeline": "last_strong_stack[0] = base_dir;"
    },
    {
        "line": 418,
        "fullcodeline": "w4 = true;"
    },
    {
        "line": 422,
        "fullcodeline": "prev_type_orig = FRIBIDI_TYPE_ON;"
    },
    {
        "line": 425,
        "fullcodeline": "for_run_list (pp, main_run_list)"
    },
    {
        "line": 519,
        "fullcodeline": "int num_iso_levels = max_iso_level + 1;"
    },
    {
        "line": 520,
        "fullcodeline": "FriBidiPairingNode *pairing_nodes = NULL;"
    },
    {
        "line": 521,
        "fullcodeline": "FriBidiRun *local_bracket_stack[FRIBIDI_BIDI_MAX_EXPLICIT_LEVEL][LOCAL_BRACKET_SIZE];"
    },
    {
        "line": 522,
        "fullcodeline": "FriBidiRun **bracket_stack[FRIBIDI_BIDI_MAX_EXPLICIT_LEVEL];"
    },
    {
        "line": 523,
        "fullcodeline": "int bracket_stack_size[FRIBIDI_BIDI_MAX_EXPLICIT_LEVEL];"
    },
    {
        "line": 524,
        "fullcodeline": "int last_level = RL_LEVEL(main_run_list);"
    },
    {
        "line": 525,
        "fullcodeline": "int last_iso_level = 0;"
    },
    {
        "line": 527,
        "fullcodeline": "memset(bracket_stack, 0, sizeof(bracket_stack[0])*num_iso_levels);"
    },
    {
        "line": 528,
        "fullcodeline": "memset(bracket_stack_size, 0, sizeof(bracket_stack_size[0])*num_iso_levels);"
    },
    {
        "line": 544,
        "fullcodeline": "for_run_list (pp, main_run_list)"
    },
    {
        "line": 591,
        "fullcodeline": "sort_pairing_nodes(&pairing_nodes);"
    },
    {
        "line": 700,
        "fullcodeline": "for_run_list (pp, main_run_list)"
    },
    {
        "line": 743,
        "fullcodeline": "max_level = base_level;"
    },
    {
        "line": 745,
        "fullcodeline": "for_run_list (pp, main_run_list)"
    },
    {
        "line": 825,
        "fullcodeline": "list = new_run_list ();"
    },
    {
        "line": 828,
        "fullcodeline": "q = list;"
    },
    {
        "line": 829,
        "fullcodeline": "state = 1;"
    },
    {
        "line": 830,
        "fullcodeline": "pos = len - 1;"
    },
    {
        "line": 878,
        "fullcodeline": "FriBidiStrIndex pos = 0;"
    },
    {
        "line": 879,
        "fullcodeline": "for_run_list (pp, main_run_list)"
    },
    {
        "line": 898,
        "fullcodeline": "return status ? max_level + 1 : 0;"
    },
    {
        "line": 48,
        "fullcodeline": "int valid_isolate_count = 0;"
    },
    {
        "line": 49,
        "fullcodeline": "for_run_list (pp, main_run_list)"
    },
    {
        "line": 131,
        "fullcodeline": "FriBidiCharType this_type = RL_TYPE (pp);"
    },
    {
        "line": 132,
        "fullcodeline": "RL_ISOLATE_LEVEL (pp) = isolate_level;"
    },
    {
        "line": 294,
        "fullcodeline": "int isolate_level = RL_ISOLATE_LEVEL (pp);"
    },
    {
        "line": 300,
        "fullcodeline": "run_per_isolate_level[isolate_level] = pp;"
    },
    {
        "line": 348,
        "fullcodeline": "ppp_prev = get_adjacent_run(pp, false, false);"
    },
    {
        "line": 349,
        "fullcodeline": "ppp_next = get_adjacent_run(pp, true, false);"
    },
    {
        "line": 351,
        "fullcodeline": "this_type = RL_TYPE (pp);"
    },
    {
        "line": 352,
        "fullcodeline": "iso_level = RL_ISOLATE_LEVEL(pp);"
    },
    {
        "line": 431,
        "fullcodeline": "this_type = RL_TYPE (pp);"
    },
    {
        "line": 434,
        "fullcodeline": "ppp_prev = get_adjacent_run(pp, false, false);"
    },
    {
        "line": 435,
        "fullcodeline": "ppp_next = get_adjacent_run(pp, true, false);"
    },
    {
        "line": 474,
        "fullcodeline": "w4 = true;"
    },
    {
        "line": 546,
        "fullcodeline": "int level = RL_LEVEL(pp);"
    },
    {
        "line": 547,
        "fullcodeline": "int iso_level = RL_ISOLATE_LEVEL(pp);"
    },
    {
        "line": 548,
        "fullcodeline": "FriBidiBracketType brack_prop = RL_BRACKET_TYPE(pp);"
    },
    {
        "line": 586,
        "fullcodeline": "last_level = level;"
    },
    {
        "line": 587,
        "fullcodeline": "last_iso_level = iso_level;"
    },
    {
        "line": 603,
        "fullcodeline": "FriBidiPairingNode *ppairs = pairing_nodes;"
    },
    {
        "line": 669,
        "fullcodeline": "free_pairing_nodes(pairing_nodes);"
    },
    {
        "line": 705,
        "fullcodeline": "ppp_prev = get_adjacent_run(pp, false, false);"
    },
    {
        "line": 706,
        "fullcodeline": "ppp_next = get_adjacent_run(pp, true, false);"
    },
    {
        "line": 710,
        "fullcodeline": "this_type = FRIBIDI_CHANGE_NUMBER_TO_RTL (RL_TYPE (pp));"
    },
    {
        "line": 750,
        "fullcodeline": "this_type = RL_TYPE (pp);"
    },
    {
        "line": 751,
        "fullcodeline": "level = RL_LEVEL (pp);"
    },
    {
        "line": 831,
        "fullcodeline": "for (j = len - 1; j >= -1; j--)"
    },
    {
        "line": 882,
        "fullcodeline": "register FriBidiLevel level = pp->level;"
    },
    {
        "line": 894,
        "fullcodeline": "free_run_list (main_run_list);"
    },
    {
        "line": 134,
        "fullcodeline": "if (FRIBIDI_IS_EXPLICIT_OR_BN (this_type))"
    },
    {
        "line": 354,
        "fullcodeline": "if (iso_level > max_iso_level)"
    },
    {
        "line": 367,
        "fullcodeline": "if (FRIBIDI_IS_STRONG (prev_type))"
    },
    {
        "line": 378,
        "fullcodeline": "if (this_type == FRIBIDI_TYPE_NSM)"
    },
    {
        "line": 401,
        "fullcodeline": "if (this_type == FRIBIDI_TYPE_EN && last_strong_stack[iso_level] == FRIBIDI_TYPE_AL)"
    },
    {
        "line": 432,
        "fullcodeline": "iso_level = RL_ISOLATE_LEVEL(pp);"
    },
    {
        "line": 447,
        "fullcodeline": "if (FRIBIDI_IS_STRONG (prev_type))"
    },
    {
        "line": 453,
        "fullcodeline": "if (this_type == FRIBIDI_TYPE_AL)"
    },
    {
        "line": 464,
        "fullcodeline": "if (w4"
    },
    {
        "line": 478,
        "fullcodeline": "if (this_type == FRIBIDI_TYPE_ET"
    },
    {
        "line": 488,
        "fullcodeline": "if (FRIBIDI_IS_NUMBER_SEPARATOR_OR_TERMINATOR (this_type))"
    },
    {
        "line": 492,
        "fullcodeline": "if (this_type == FRIBIDI_TYPE_EN && last_strong_stack[iso_level] == FRIBIDI_TYPE_LTR)"
    },
    {
        "line": 535,
        "fullcodeline": "for (iso_level=0; iso_level < LOCAL_BRACKET_SIZE; iso_level++)"
    },
    {
        "line": 536,
        "fullcodeline": "bracket_stack[iso_level] = local_bracket_stack[iso_level];"
    },
    {
        "line": 538,
        "fullcodeline": "for (iso_level=LOCAL_BRACKET_SIZE; iso_level < num_iso_levels; iso_level++)"
    },
    {
        "line": 539,
        "fullcodeline": "bracket_stack[iso_level] = fribidi_malloc (sizeof (bracket_stack[0])"
    },
    {
        "line": 553,
        "fullcodeline": "if (level != last_level && last_iso_level == iso_level)"
    },
    {
        "line": 556,
        "fullcodeline": "if (brack_prop!= FRIBIDI_NO_BRACKET"
    },
    {
        "line": 671,
        "fullcodeline": "if (num_iso_levels >= LOCAL_BRACKET_SIZE)"
    },
    {
        "line": 681,
        "fullcodeline": "const FriBidiBracketType NoBracket = FRIBIDI_NO_BRACKET;"
    },
    {
        "line": 682,
        "fullcodeline": "for_run_list (pp, main_run_list)"
    },
    {
        "line": 683,
        "fullcodeline": "pp->bracket_type = NoBracket;"
    },
    {
        "line": 684,
        "fullcodeline": "compact_neutrals (main_run_list);"
    },
    {
        "line": 712,
        "fullcodeline": "if (RL_LEVEL(ppp_prev) == RL_LEVEL(pp))"
    },
    {
        "line": 717,
        "fullcodeline": "if (RL_LEVEL(ppp_next) == RL_LEVEL(pp))"
    },
    {
        "line": 722,
        "fullcodeline": "if (FRIBIDI_IS_NEUTRAL (this_type))"
    },
    {
        "line": 755,
        "fullcodeline": "if (FRIBIDI_IS_NUMBER (this_type))"
    },
    {
        "line": 762,
        "fullcodeline": "if (RL_LEVEL (pp) > max_level)"
    },
    {
        "line": 883,
        "fullcodeline": "for (l = pp->len; l; l--)"
    },
    {
        "line": 884,
        "fullcodeline": "embedding_levels[pos++] = level;"
    },
    {
        "line": 51,
        "fullcodeline": "if (RL_TYPE(pp) == FRIBIDI_TYPE_PDI)"
    },
    {
        "line": 173,
        "fullcodeline": "RL_LEVEL (pp) = FRIBIDI_SENTINEL;"
    },
    {
        "line": 174,
        "fullcodeline": "temp_link.next = pp->next;"
    },
    {
        "line": 175,
        "fullcodeline": "move_node_before (pp, explicits_list);"
    },
    {
        "line": 176,
        "fullcodeline": "pp = &temp_link;"
    },
    {
        "line": 297,
        "fullcodeline": "run_per_isolate_level[isolate_level]->next_isolate = pp;"
    },
    {
        "line": 298,
        "fullcodeline": "pp->prev_isolate = run_per_isolate_level[isolate_level];"
    },
    {
        "line": 355,
        "fullcodeline": "max_iso_level = iso_level;"
    },
    {
        "line": 357,
        "fullcodeline": "if (RL_LEVEL(ppp_prev) == RL_LEVEL(pp))"
    },
    {
        "line": 358,
        "fullcodeline": "prev_type = RL_TYPE(ppp_prev);"
    },
    {
        "line": 362,
        "fullcodeline": "if (RL_LEVEL(ppp_next) == RL_LEVEL(pp))"
    },
    {
        "line": 363,
        "fullcodeline": "next_type = RL_TYPE(ppp_next);"
    },
    {
        "line": 368,
        "fullcodeline": "last_strong_stack[iso_level] = prev_type;"
    },
    {
        "line": 403,
        "fullcodeline": "RL_TYPE (pp) = FRIBIDI_TYPE_AN;"
    },
    {
        "line": 437,
        "fullcodeline": "if (RL_LEVEL(ppp_prev) == RL_LEVEL(pp))"
    },
    {
        "line": 438,
        "fullcodeline": "prev_type = RL_TYPE(ppp_prev);"
    },
    {
        "line": 442,
        "fullcodeline": "if (RL_LEVEL(ppp_next) == RL_LEVEL(pp))"
    },
    {
        "line": 443,
        "fullcodeline": "next_type = RL_TYPE(ppp_next);"
    },
    {
        "line": 448,
        "fullcodeline": "last_strong_stack[iso_level] = prev_type;"
    },
    {
        "line": 455,
        "fullcodeline": "RL_TYPE (pp) = FRIBIDI_TYPE_RTL;"
    },
    {
        "line": 468,
        "fullcodeline": "&& (prev_type_orig == FRIBIDI_TYPE_EN"
    },
    {
        "line": 471,
        "fullcodeline": "RL_TYPE (pp) = prev_type;"
    },
    {
        "line": 472,
        "fullcodeline": "this_type = RL_TYPE (pp);"
    },
    {
        "line": 479,
        "fullcodeline": "&& (prev_type_orig == FRIBIDI_TYPE_EN"
    },
    {
        "line": 482,
        "fullcodeline": "RL_TYPE (pp) = FRIBIDI_TYPE_EN;"
    },
    {
        "line": 483,
        "fullcodeline": "w4 = false;"
    },
    {
        "line": 484,
        "fullcodeline": "this_type = RL_TYPE (pp);"
    },
    {
        "line": 489,
        "fullcodeline": "RL_TYPE (pp) = FRIBIDI_TYPE_ON;"
    },
    {
        "line": 494,
        "fullcodeline": "RL_TYPE (pp) = FRIBIDI_TYPE_LTR;"
    },
    {
        "line": 495,
        "fullcodeline": "prev_type_orig = (RL_LEVEL (pp) == RL_LEVEL (pp->next) ?"
    },
    {
        "line": 554,
        "fullcodeline": "bracket_stack_size[last_iso_level] = 0;"
    },
    {
        "line": 557,
        "fullcodeline": "&& RL_TYPE(pp)==FRIBIDI_TYPE_ON)"
    },
    {
        "line": 606,
        "fullcodeline": "int iso_level = ppairs->open->isolate_level;"
    },
    {
        "line": 607,
        "fullcodeline": "int embedding_level = base_level_per_iso_level[iso_level];"
    },
    {
        "line": 610,
        "fullcodeline": "fribidi_boolean found = false;"
    },
    {
        "line": 666,
        "fullcodeline": "ppairs = ppairs->next;"
    },
    {
        "line": 713,
        "fullcodeline": "prev_type = FRIBIDI_CHANGE_NUMBER_TO_RTL (RL_TYPE(ppp_prev));"
    },
    {
        "line": 718,
        "fullcodeline": "next_type = FRIBIDI_CHANGE_NUMBER_TO_RTL (RL_TYPE(ppp_next));"
    },
    {
        "line": 723,
        "fullcodeline": "RL_TYPE (pp) = (prev_type == next_type) ?"
    },
    {
        "line": 756,
        "fullcodeline": "RL_LEVEL (pp) = (level + 2) & ~1;"
    },
    {
        "line": 763,
        "fullcodeline": "max_level = RL_LEVEL (pp);"
    },
    {
        "line": 834,
        "fullcodeline": "if (j >= 0)"
    },
    {
        "line": 838,
        "fullcodeline": "if (!state && FRIBIDI_IS_SEPARATOR (char_type))"
    },
    {
        "line": 136,
        "fullcodeline": "if (FRIBIDI_IS_STRONG (this_type))"
    },
    {
        "line": 360,
        "fullcodeline": "prev_type = FRIBIDI_LEVEL_TO_DIR(MAX(RL_LEVEL(ppp_prev), RL_LEVEL(pp)));"
    },
    {
        "line": 365,
        "fullcodeline": "next_type = FRIBIDI_LEVEL_TO_DIR(MAX(RL_LEVEL(ppp_next), RL_LEVEL(pp)));"
    },
    {
        "line": 407,
        "fullcodeline": "if (next_type == FRIBIDI_TYPE_NSM)"
    },
    {
        "line": 440,
        "fullcodeline": "prev_type = FRIBIDI_LEVEL_TO_DIR(MAX(RL_LEVEL(ppp_prev), RL_LEVEL(pp)));"
    },
    {
        "line": 445,
        "fullcodeline": "next_type = FRIBIDI_LEVEL_TO_DIR(MAX(RL_LEVEL(ppp_next), RL_LEVEL(pp)));"
    },
    {
        "line": 467,
        "fullcodeline": "&& prev_type_orig == next_type"
    },
    {
        "line": 469,
        "fullcodeline": "|| this_type == FRIBIDI_TYPE_CS))"
    },
    {
        "line": 480,
        "fullcodeline": "|| next_type == FRIBIDI_TYPE_EN))"
    },
    {
        "line": 499,
        "fullcodeline": "prev_type_orig = PREV_TYPE_OR_SOR (pp->next);"
    },
    {
        "line": 559,
        "fullcodeline": "if (FRIBIDI_IS_BRACKET_OPEN(brack_prop))"
    },
    {
        "line": 612,
        "fullcodeline": "for (ppn = ppairs->open; ppn!= ppairs->close; ppn = ppn->next)"
    },
    {
        "line": 632,
        "fullcodeline": "if (!found)"
    },
    {
        "line": 675,
        "fullcodeline": "for (i=LOCAL_BRACKET_SIZE; i<num_iso_levels; i++)"
    },
    {
        "line": 676,
        "fullcodeline": "fribidi_free(bracket_stack[i]);"
    },
    {
        "line": 715,
        "fullcodeline": "prev_type = FRIBIDI_LEVEL_TO_DIR(MAX(RL_LEVEL(ppp_prev), RL_LEVEL(pp)));"
    },
    {
        "line": 720,
        "fullcodeline": "next_type = FRIBIDI_LEVEL_TO_DIR(MAX(RL_LEVEL(ppp_next), RL_LEVEL(pp)));"
    },
    {
        "line": 758,
        "fullcodeline": "RL_LEVEL (pp) ="
    },
    {
        "line": 835,
        "fullcodeline": "char_type = bidi_types[j];"
    },
    {
        "line": 840,
        "fullcodeline": "state = 1;"
    },
    {
        "line": 841,
        "fullcodeline": "pos = j;"
    },
    {
        "line": 54,
        "fullcodeline": "if (valid_isolate_count>0)"
    },
    {
        "line": 148,
        "fullcodeline": "new_override = FRIBIDI_EXPLICIT_TO_OVERRIDE_DIR (this_type);"
    },
    {
        "line": 178,
        "fullcodeline": "else if (this_type == FRIBIDI_TYPE_PDI)"
    },
    {
        "line": 381,
        "fullcodeline": "if (FRIBIDI_IS_ISOLATE (RL_TYPE (pp->prev)))"
    },
    {
        "line": 382,
        "fullcodeline": "RL_TYPE(pp) = FRIBIDI_TYPE_ON;"
    },
    {
        "line": 384,
        "fullcodeline": "if (RL_LEVEL (ppp_prev) == RL_LEVEL (pp))"
    },
    {
        "line": 392,
        "fullcodeline": "if (prev_type == next_type && RL_LEVEL (pp) == RL_LEVEL (pp->next))"
    },
    {
        "line": 408,
        "fullcodeline": "RL_TYPE (ppp_next) = FRIBIDI_TYPE_AN;"
    },
    {
        "line": 466,
        "fullcodeline": "&& FRIBIDI_IS_NUMBER (prev_type_orig)"
    },
    {
        "line": 565,
        "fullcodeline": "bracket_stack[iso_level][bracket_stack_size[iso_level]++] = pp;"
    },
    {
        "line": 614,
        "fullcodeline": "FriBidiCharType this_type = RL_TYPE_AN_EN_AS_RTL(ppn);"
    },
    {
        "line": 618,
        "fullcodeline": "int this_level = RL_LEVEL (ppn) +"
    },
    {
        "line": 635,
        "fullcodeline": "int prec_strong_level = embedding_level; /* TBDov! Extract from Isolate level in effect */"
    },
    {
        "line": 636,
        "fullcodeline": "int iso_level = RL_ISOLATE_LEVEL(ppairs->open);"
    },
    {
        "line": 725,
        "fullcodeline": "/* N2. */ FRIBIDI_EMBEDDING_DIRECTION (pp);"
    },
    {
        "line": 759,
        "fullcodeline": "level +"
    },
    {
        "line": 837,
        "fullcodeline": "char_type = FRIBIDI_TYPE_ON;"
    },
    {
        "line": 55,
        "fullcodeline": "valid_isolate_count--;"
    },
    {
        "line": 57,
        "fullcodeline": "else if (FRIBIDI_IS_ISOLATE(RL_TYPE(pp)))"
    },
    {
        "line": 149,
        "fullcodeline": "for (i = RL_LEN (pp); i; i--)"
    },
    {
        "line": 386,
        "fullcodeline": "if (ppp_prev == pp->prev)"
    },
    {
        "line": 390,
        "fullcodeline": "RL_TYPE (pp) = prev_type;"
    },
    {
        "line": 394,
        "fullcodeline": "if (ppp_next == pp->next)"
    },
    {
        "line": 465,
        "fullcodeline": "&& RL_LEN (pp) == 1 && FRIBIDI_IS_ES_OR_CS (this_type)"
    },
    {
        "line": 561,
        "fullcodeline": "if (bracket_stack_size[iso_level]==FRIBIDI_BIDI_MAX_NESTED_BRACKET_PAIRS)"
    },
    {
        "line": 569,
        "fullcodeline": "int stack_idx = bracket_stack_size[iso_level] - 1;"
    },
    {
        "line": 622,
        "fullcodeline": "if (FRIBIDI_IS_STRONG (this_type) && this_level == embedding_level)"
    },
    {
        "line": 637,
        "fullcodeline": "for (ppn = ppairs->open->prev; ppn->type != FRIBIDI_TYPE_SENTINEL; ppn=ppn->prev)"
    },
    {
        "line": 649,
        "fullcodeline": "for (ppn = ppairs->open; ppn!= ppairs->close; ppn = ppn->next)"
    },
    {
        "line": 760,
        "fullcodeline": "(FRIBIDI_LEVEL_IS_RTL (level) ^ FRIBIDI_DIR_TO_LEVEL (this_type));"
    },
    {
        "line": 843,
        "fullcodeline": "else if (state &&"
    },
    {
        "line": 58,
        "fullcodeline": "valid_isolate_count++;"
    },
    {
        "line": 151,
        "fullcodeline": "new_level ="
    },
    {
        "line": 154,
        "fullcodeline": "isolate = 0;"
    },
    {
        "line": 158,
        "fullcodeline": "else if (this_type == FRIBIDI_TYPE_PDF)"
    },
    {
        "line": 181,
        "fullcodeline": "for (i = RL_LEN (pp); i; i--)"
    },
    {
        "line": 387,
        "fullcodeline": "pp = merge_with_prev (pp);"
    },
    {
        "line": 570,
        "fullcodeline": "while (stack_idx >= 0)"
    },
    {
        "line": 619,
        "fullcodeline": "(FRIBIDI_LEVEL_IS_RTL (RL_LEVEL(ppn)) ^ FRIBIDI_DIR_TO_LEVEL (this_type));"
    },
    {
        "line": 624,
        "fullcodeline": "RL_TYPE(ppairs->open) = RL_TYPE(ppairs->close) = this_level%2 ? FRIBIDI_TYPE_RTL : FRIBIDI_TYPE_LTR;"
    },
    {
        "line": 625,
        "fullcodeline": "found = true;"
    },
    {
        "line": 639,
        "fullcodeline": "FriBidiCharType this_type = RL_TYPE_AN_EN_AS_RTL(ppn);"
    },
    {
        "line": 651,
        "fullcodeline": "FriBidiCharType this_type = RL_TYPE_AN_EN_AS_RTL(ppn);"
    },
    {
        "line": 844,
        "fullcodeline": "!(FRIBIDI_IS_EXPLICIT_OR_SEPARATOR_OR_BN_OR_WS(char_type)"
    },
    {
        "line": 847,
        "fullcodeline": "state = 0;"
    },
    {
        "line": 848,
        "fullcodeline": "p = new_run ();"
    },
    {
        "line": 855,
        "fullcodeline": "p->pos = j + 1;"
    },
    {
        "line": 856,
        "fullcodeline": "p->len = pos - j;"
    },
    {
        "line": 857,
        "fullcodeline": "p->type = base_dir;"
    },
    {
        "line": 858,
        "fullcodeline": "p->level = base_level;"
    },
    {
        "line": 859,
        "fullcodeline": "move_node_before (p, q);"
    },
    {
        "line": 860,
        "fullcodeline": "q = p;"
    },
    {
        "line": 152,
        "fullcodeline": "((level + FRIBIDI_DIR_TO_LEVEL (this_type) + 2) & ~1) -"
    },
    {
        "line": 211,
        "fullcodeline": "else if (FRIBIDI_IS_ISOLATE(this_type))"
    },
    {
        "line": 395,
        "fullcodeline": "pp = merge_with_prev (pp->next);"
    },
    {
        "line": 572,
        "fullcodeline": "FriBidiBracketType se_brack_prop = RL_BRACKET_TYPE(bracket_stack[iso_level][stack_idx]);"
    },
    {
        "line": 582,
        "fullcodeline": "stack_idx--;"
    },
    {
        "line": 640,
        "fullcodeline": "if (FRIBIDI_IS_STRONG (this_type) && RL_ISOLATE_LEVEL(ppn) == iso_level)"
    },
    {
        "line": 652,
        "fullcodeline": "if (FRIBIDI_IS_STRONG (this_type) && RL_ISOLATE_LEVEL(ppn) == iso_level)"
    },
    {
        "line": 59,
        "fullcodeline": "else if (valid_isolate_count==0 && FRIBIDI_IS_LETTER (RL_TYPE (pp)))"
    },
    {
        "line": 153,
        "fullcodeline": "FRIBIDI_DIR_TO_LEVEL (this_type);"
    },
    {
        "line": 163,
        "fullcodeline": "for (i = RL_LEN (pp); i; i--)"
    },
    {
        "line": 183,
        "fullcodeline": "if (isolate_overflow > 0)"
    },
    {
        "line": 214,
        "fullcodeline": "new_override = FRIBIDI_TYPE_ON;"
    },
    {
        "line": 215,
        "fullcodeline": "isolate = 1;"
    },
    {
        "line": 252,
        "fullcodeline": "RL_LEVEL (pp) = level;"
    },
    {
        "line": 253,
        "fullcodeline": "RL_ISOLATE_LEVEL (pp) = isolate_level;"
    },
    {
        "line": 256,
        "fullcodeline": "base_level_per_iso_level[isolate_level] = new_level;"
    },
    {
        "line": 573,
        "fullcodeline": "if (FRIBIDI_BRACKET_ID(se_brack_prop) == FRIBIDI_BRACKET_ID(brack_prop))"
    },
    {
        "line": 642,
        "fullcodeline": "prec_strong_level = RL_LEVEL (ppn) +"
    },
    {
        "line": 658,
        "fullcodeline": "RL_TYPE(ppairs->open) = RL_TYPE(ppairs->close) = prec_strong_level % 2 ? FRIBIDI_TYPE_RTL : FRIBIDI_TYPE_LTR;"
    },
    {
        "line": 659,
        "fullcodeline": "RL_LEVEL(ppairs->open) = RL_LEVEL(ppairs->close) = prec_strong_level;"
    },
    {
        "line": 660,
        "fullcodeline": "found = true;"
    },
    {
        "line": 845,
        "fullcodeline": "|| FRIBIDI_IS_ISOLATE(char_type)))"
    },
    {
        "line": 61,
        "fullcodeline": "base_level = FRIBIDI_DIR_TO_LEVEL (RL_TYPE (pp));"
    },
    {
        "line": 185,
        "fullcodeline": "isolate_overflow--;"
    },
    {
        "line": 186,
        "fullcodeline": "RL_LEVEL (pp) = level;"
    },
    {
        "line": 216,
        "fullcodeline": "if (this_type == FRIBIDI_TYPE_LRI)"
    },
    {
        "line": 254,
        "fullcodeline": "if (isolate_level < FRIBIDI_BIDI_MAX_EXPLICIT_LEVEL-1)"
    },
    {
        "line": 258,
        "fullcodeline": "if (!FRIBIDI_IS_NEUTRAL (override))"
    },
    {
        "line": 261,
        "fullcodeline": "if (new_level <= FRIBIDI_BIDI_MAX_EXPLICIT_LEVEL)"
    },
    {
        "line": 575,
        "fullcodeline": "bracket_stack_size[iso_level] = stack_idx;"
    },
    {
        "line": 577,
        "fullcodeline": "pairing_nodes = pairing_nodes_push(pairing_nodes,"
    },
    {
        "line": 62,
        "fullcodeline": "*pbase_dir = FRIBIDI_LEVEL_TO_DIR (base_level);"
    },
    {
        "line": 165,
        "fullcodeline": "if (stack_size && status_stack[stack_size-1].isolate != 0)"
    },
    {
        "line": 217,
        "fullcodeline": "new_level = level + 2 - (level%2);"
    },
    {
        "line": 255,
        "fullcodeline": "isolate_level++;"
    },
    {
        "line": 259,
        "fullcodeline": "RL_TYPE (pp) = override;"
    },
    {
        "line": 263,
        "fullcodeline": "valid_isolate_count++;"
    },
    {
        "line": 265,
        "fullcodeline": "level = new_level;"
    },
    {
        "line": 270,
        "fullcodeline": "else if (this_type == FRIBIDI_TYPE_BS)"
    },
    {
        "line": 643,
        "fullcodeline": "(FRIBIDI_LEVEL_IS_RTL (RL_LEVEL(ppn)) ^ FRIBIDI_DIR_TO_LEVEL (this_type));"
    },
    {
        "line": 189,
        "fullcodeline": "else if (valid_isolate_count > 0)"
    },
    {
        "line": 268,
        "fullcodeline": "isolate_overflow += 1;"
    },
    {
        "line": 198,
        "fullcodeline": "isolate_level-- ;"
    },
    {
        "line": 199,
        "fullcodeline": "valid_isolate_count--;"
    },
    {
        "line": 200,
        "fullcodeline": "RL_LEVEL (pp) = level;"
    },
    {
        "line": 201,
        "fullcodeline": "RL_ISOLATE_LEVEL (pp) = isolate_level;"
    },
    {
        "line": 218,
        "fullcodeline": "else if (this_type == FRIBIDI_TYPE_RLI)"
    },
    {
        "line": 285,
        "fullcodeline": "RL_LEVEL (pp) = level;"
    },
    {
        "line": 194,
        "fullcodeline": "while (stack_size && !status_stack[stack_size-1].isolate)"
    },
    {
        "line": 206,
        "fullcodeline": "RL_TYPE (pp) = FRIBIDI_TYPE_ON;"
    },
    {
        "line": 207,
        "fullcodeline": "RL_LEVEL (pp) = level;"
    },
    {
        "line": 219,
        "fullcodeline": "new_level = level + 1 + (level%2);"
    },
    {
        "line": 286,
        "fullcodeline": "if (!FRIBIDI_IS_NEUTRAL (override))"
    },
    {
        "line": 287,
        "fullcodeline": "RL_TYPE (pp) = override;"
    },
    {
        "line": 220,
        "fullcodeline": "else if (this_type == FRIBIDI_TYPE_FSI)"
    },
    {
        "line": 226,
        "fullcodeline": "int isolate_count = 0;"
    },
    {
        "line": 227,
        "fullcodeline": "int fsi_base_level = 0;"
    },
    {
        "line": 228,
        "fullcodeline": "for_run_list (fsi_pp, pp)"
    },
    {
        "line": 246,
        "fullcodeline": "if (FRIBIDI_LEVEL_IS_RTL (fsi_base_level))"
    },
    {
        "line": 230,
        "fullcodeline": "if (RL_TYPE(fsi_pp) == FRIBIDI_TYPE_PDI)"
    },
    {
        "line": 247,
        "fullcodeline": "new_level = level + 1 + (level%2);"
    },
    {
        "line": 232,
        "fullcodeline": "isolate_count--;"
    },
    {
        "line": 249,
        "fullcodeline": "new_level = level + 2 - (level%2);"
    },
    {
        "line": 233,
        "fullcodeline": "if (valid_isolate_count < 0)"
    },
    {
        "line": 236,
        "fullcodeline": "else if (FRIBIDI_IS_ISOLATE(RL_TYPE(fsi_pp)))"
    },
    {
        "line": 237,
        "fullcodeline": "isolate_count++;"
    },
    {
        "line": 238,
        "fullcodeline": "else if (isolate_count==0 && FRIBIDI_IS_LETTER (RL_TYPE (fsi_pp)))"
    },
    {
        "line": 240,
        "fullcodeline": "fsi_base_level = FRIBIDI_DIR_TO_LEVEL (RL_TYPE (fsi_pp));"
    }
]