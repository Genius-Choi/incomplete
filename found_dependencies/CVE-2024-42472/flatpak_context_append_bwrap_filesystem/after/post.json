[
    {
        "line": 71,
        "fullcodeline": "flatpak_exports_append_bwrap_args (exports, bwrap);"
    },
    {
        "line": 12,
        "fullcodeline": "if (app_id_dir != NULL)"
    },
    {
        "line": 15,
        "fullcodeline": "if (!home_access)"
    },
    {
        "line": 50,
        "fullcodeline": "if (app_id_dir != NULL)"
    },
    {
        "line": 109,
        "fullcodeline": "if (home_access && app_id_dir != NULL)"
    },
    {
        "line": 13,
        "fullcodeline": "flatpak_run_apply_env_appid (bwrap, app_id_dir);"
    },
    {
        "line": 19,
        "fullcodeline": "g_hash_table_iter_init (&iter, context->persistent);"
    },
    {
        "line": 52,
        "fullcodeline": "g_autofree char *user_runtime_dir = flatpak_get_real_xdg_runtime_dir ();"
    },
    {
        "line": 53,
        "fullcodeline": "g_autofree char *run_user_app_dst = g_strdup_printf (\"/run/flatpak/app/%s\", app_id);"
    },
    {
        "line": 54,
        "fullcodeline": "g_autofree char *run_user_app_src = g_build_filename (user_runtime_dir, \"app\", app_id, NULL);"
    },
    {
        "line": 66,
        "fullcodeline": "flatpak_bwrap_add_runtime_dir_member (bwrap, \"app\");"
    },
    {
        "line": 81,
        "fullcodeline": "g_hash_table_iter_init (&iter, context->filesystems);"
    },
    {
        "line": 111,
        "fullcodeline": "g_autofree char *src_path = g_build_filename (g_get_user_config_dir (),"
    },
    {
        "line": 114,
        "fullcodeline": "g_autofree char *path = g_build_filename (flatpak_file_get_path_cached (app_id_dir),"
    },
    {
        "line": 20,
        "fullcodeline": "while (g_hash_table_iter_next (&iter, &key, NULL))"
    },
    {
        "line": 56,
        "fullcodeline": "if (glnx_shutil_mkdir_p_at (AT_FDCWD,"
    },
    {
        "line": 82,
        "fullcodeline": "while (g_hash_table_iter_next (&iter, &key, &value))"
    },
    {
        "line": 116,
        "fullcodeline": "if (g_file_test (src_path, G_FILE_TEST_EXISTS))"
    },
    {
        "line": 22,
        "fullcodeline": "const char *persist = key;"
    },
    {
        "line": 23,
        "fullcodeline": "g_autofree char *appdir = g_build_filename (g_get_home_dir (), \".var/app\", app_id, NULL);"
    },
    {
        "line": 24,
        "fullcodeline": "g_autofree char *dest = g_build_filename (g_get_home_dir (), persist, NULL);"
    },
    {
        "line": 25,
        "fullcodeline": "g_autoptr(GError) local_error = NULL;"
    },
    {
        "line": 34,
        "fullcodeline": "glnx_autofd int src_fd = -1;"
    },
    {
        "line": 43,
        "fullcodeline": "g_autofree char *src_via_proc = g_strdup_printf (\"%d\", src_fd);"
    },
    {
        "line": 45,
        "fullcodeline": "flatpak_bwrap_add_fd (bwrap, glnx_steal_fd (&src_fd));"
    },
    {
        "line": 46,
        "fullcodeline": "flatpak_bwrap_add_bind_arg (bwrap, \"--bind-fd\", src_via_proc, dest);"
    },
    {
        "line": 61,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 84,
        "fullcodeline": "const char *filesystem = key;"
    },
    {
        "line": 85,
        "fullcodeline": "FlatpakFilesystemMode mode = GPOINTER_TO_INT (value);"
    },
    {
        "line": 86,
        "fullcodeline": "g_autofree char *xdg_path = NULL;"
    },
    {
        "line": 89,
        "fullcodeline": "xdg_path = get_xdg_dir_from_string (filesystem, &rest, &where);"
    },
    {
        "line": 117,
        "fullcodeline": "flatpak_bwrap_add_bind_arg (bwrap, \"--ro-bind\", src_path, path);"
    },
    {
        "line": 119,
        "fullcodeline": "else if (xdg_dirs_conf != NULL && xdg_dirs_conf[0] != '\\0' && app_id_dir != NULL)"
    },
    {
        "line": 27,
        "fullcodeline": "if (g_mkdir_with_parents (appdir, 0755) != 0)"
    },
    {
        "line": 35,
        "fullcodeline": "if (!mkdir_p_open_nofollow_at (AT_FDCWD, appdir, 0755,"
    },
    {
        "line": 91,
        "fullcodeline": "if (xdg_path != NULL && *rest != 0 &&"
    },
    {
        "line": 121,
        "fullcodeline": "g_autofree char *path ="
    },
    {
        "line": 125,
        "fullcodeline": "flatpak_bwrap_add_args_data (bwrap, \"xdg-config-dirs\","
    },
    {
        "line": 29,
        "fullcodeline": "g_warning (\"Unable to create directory %s\", appdir);"
    },
    {
        "line": 39,
        "fullcodeline": "g_warning (\"Failed to create persist path %s: %s\", persist, local_error->message);"
    },
    {
        "line": 92,
        "fullcodeline": "mode >= FLATPAK_FILESYSTEM_MODE_READ_ONLY)"
    },
    {
        "line": 94,
        "fullcodeline": "g_autoptr(GFile) app_version = g_file_get_child (app_id_dir, where);"
    },
    {
        "line": 95,
        "fullcodeline": "g_autoptr(GFile) app_version_subdir = g_file_resolve_relative_path (app_version, rest);"
    },
    {
        "line": 122,
        "fullcodeline": "g_build_filename (flatpak_file_get_path_cached (app_id_dir),"
    },
    {
        "line": 126,
        "fullcodeline": "xdg_dirs_conf, strlen (xdg_dirs_conf), path, NULL);"
    },
    {
        "line": 97,
        "fullcodeline": "if (g_file_test (xdg_path, G_FILE_TEST_IS_DIR) ||"
    },
    {
        "line": 98,
        "fullcodeline": "g_file_test (xdg_path, G_FILE_TEST_IS_REGULAR))"
    },
    {
        "line": 100,
        "fullcodeline": "g_autofree char *xdg_path_in_app = g_file_get_path (app_version_subdir);"
    },
    {
        "line": 101,
        "fullcodeline": "flatpak_bwrap_add_bind_arg (bwrap,"
    },
    {
        "line": 102,
        "fullcodeline": "mode == FLATPAK_FILESYSTEM_MODE_READ_ONLY ? \"--ro-bind\" : \"--bind\","
    }
]