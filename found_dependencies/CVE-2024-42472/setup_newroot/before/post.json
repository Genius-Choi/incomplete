[
    {
        "line": 317,
        "fullcodeline": "privileged_op (privileged_op_socket,"
    },
    {
        "line": 6,
        "fullcodeline": "for (op = ops; op != NULL; op = op->next)"
    },
    {
        "line": 8,
        "fullcodeline": "cleanup_free char *source = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "cleanup_free char *dest = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "int source_mode = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "if (op->source &&"
    },
    {
        "line": 26,
        "fullcodeline": "if (op->dest &&"
    },
    {
        "line": 14,
        "fullcodeline": "op->type != SETUP_MAKE_SYMLINK)"
    },
    {
        "line": 16,
        "fullcodeline": "source = get_oldroot_path (op->source);"
    },
    {
        "line": 17,
        "fullcodeline": "source_mode = get_file_mode (source);"
    },
    {
        "line": 27,
        "fullcodeline": "(op->flags & NO_CREATE_DEST) == 0)"
    },
    {
        "line": 29,
        "fullcodeline": "unsigned parent_mode = 0755;"
    },
    {
        "line": 43,
        "fullcodeline": "dest = get_newroot_path (op->dest);"
    },
    {
        "line": 61,
        "fullcodeline": "privileged_op (privileged_op_socket,"
    },
    {
        "line": 69,
        "fullcodeline": "privileged_op (privileged_op_socket,"
    },
    {
        "line": 96,
        "fullcodeline": "static const char * const cover_proc_dirs[] = { \"sys\", \"sysrq-trigger\", \"irq\", \"bus\" };"
    },
    {
        "line": 120,
        "fullcodeline": "privileged_op (privileged_op_socket,"
    },
    {
        "line": 124,
        "fullcodeline": "static const char *const devnodes[] = { \"null\", \"zero\", \"full\", \"random\", \"urandom\", \"tty\" };"
    },
    {
        "line": 136,
        "fullcodeline": "static const char *const stdionodes[] = { \"stdin\", \"stdout\", \"stderr\" };"
    },
    {
        "line": 193,
        "fullcodeline": "assert (dest != NULL);"
    },
    {
        "line": 194,
        "fullcodeline": "assert (op->perms >= 0);"
    },
    {
        "line": 195,
        "fullcodeline": "assert (op->perms <= 07777);"
    },
    {
        "line": 200,
        "fullcodeline": "privileged_op (privileged_op_socket,"
    },
    {
        "line": 209,
        "fullcodeline": "privileged_op (privileged_op_socket,"
    },
    {
        "line": 215,
        "fullcodeline": "assert (dest != NULL);"
    },
    {
        "line": 216,
        "fullcodeline": "assert (op->perms >= 0);"
    },
    {
        "line": 217,
        "fullcodeline": "assert (op->perms <= 07777);"
    },
    {
        "line": 225,
        "fullcodeline": "assert (op->dest != NULL);"
    },
    {
        "line": 228,
        "fullcodeline": "assert (dest == NULL);"
    },
    {
        "line": 229,
        "fullcodeline": "dest = get_newroot_path (op->dest);"
    },
    {
        "line": 230,
        "fullcodeline": "assert (dest != NULL);"
    },
    {
        "line": 231,
        "fullcodeline": "assert (op->perms >= 0);"
    },
    {
        "line": 232,
        "fullcodeline": "assert (op->perms <= 07777);"
    },
    {
        "line": 301,
        "fullcodeline": "assert (op->source != NULL);  /* guaranteed by the constructor */"
    },
    {
        "line": 307,
        "fullcodeline": "assert (op->dest != NULL);  /* guaranteed by the constructor */"
    },
    {
        "line": 308,
        "fullcodeline": "privileged_op (privileged_op_socket,"
    },
    {
        "line": 314,
        "fullcodeline": "die (\"Unexpected type %d\", op->type);"
    },
    {
        "line": 18,
        "fullcodeline": "if (source_mode < 0)"
    },
    {
        "line": 34,
        "fullcodeline": "if (op->perms >= 0 &&"
    },
    {
        "line": 39,
        "fullcodeline": "if (op->perms >= 0 &&"
    },
    {
        "line": 44,
        "fullcodeline": "if (mkdir_with_parents (dest, parent_mode, FALSE) != 0)"
    },
    {
        "line": 53,
        "fullcodeline": "if (source_mode == S_IFDIR)"
    },
    {
        "line": 63,
        "fullcodeline": "(op->type == SETUP_RO_BIND_MOUNT ? BIND_READONLY : 0) |"
    },
    {
        "line": 74,
        "fullcodeline": "if (ensure_dir (dest, 0755) != 0)"
    },
    {
        "line": 77,
        "fullcodeline": "if (unshare_pid || opt_pidns_fd != -1)"
    },
    {
        "line": 97,
        "fullcodeline": "for (i = 0; i < N_ELEMENTS (cover_proc_dirs); i++)"
    },
    {
        "line": 117,
        "fullcodeline": "if (ensure_dir (dest, 0755) != 0)"
    },
    {
        "line": 125,
        "fullcodeline": "for (i = 0; i < N_ELEMENTS (devnodes); i++)"
    },
    {
        "line": 137,
        "fullcodeline": "for (i = 0; i < N_ELEMENTS (stdionodes); i++)"
    },
    {
        "line": 146,
        "fullcodeline": "{ cleanup_free char *dev_fd = strconcat (dest, \"/fd\");"
    },
    {
        "line": 150,
        "fullcodeline": "{ cleanup_free char *dev_core = strconcat (dest, \"/core\");"
    },
    {
        "line": 156,
        "fullcodeline": "cleanup_free char *pts = strconcat (dest, \"/pts\");"
    },
    {
        "line": 157,
        "fullcodeline": "cleanup_free char *ptmx = strconcat (dest, \"/ptmx\");"
    },
    {
        "line": 158,
        "fullcodeline": "cleanup_free char *shm = strconcat (dest, \"/shm\");"
    },
    {
        "line": 165,
        "fullcodeline": "privileged_op (privileged_op_socket,"
    },
    {
        "line": 177,
        "fullcodeline": "if (host_tty_dev != NULL && *host_tty_dev != 0)"
    },
    {
        "line": 197,
        "fullcodeline": "if (ensure_dir (dest, 0755) != 0)"
    },
    {
        "line": 206,
        "fullcodeline": "if (ensure_dir (dest, 0755) != 0)"
    },
    {
        "line": 219,
        "fullcodeline": "if (ensure_dir (dest, op->perms) != 0)"
    },
    {
        "line": 234,
        "fullcodeline": "if (chmod (dest, op->perms) != 0)"
    },
    {
        "line": 241,
        "fullcodeline": "cleanup_fd int dest_fd = -1;"
    },
    {
        "line": 243,
        "fullcodeline": "assert (dest != NULL);"
    },
    {
        "line": 244,
        "fullcodeline": "assert (op->perms >= 0);"
    },
    {
        "line": 245,
        "fullcodeline": "assert (op->perms <= 07777);"
    },
    {
        "line": 247,
        "fullcodeline": "dest_fd = creat (dest, op->perms);"
    },
    {
        "line": 254,
        "fullcodeline": "close (op->fd);"
    },
    {
        "line": 255,
        "fullcodeline": "op->fd = -1;"
    },
    {
        "line": 262,
        "fullcodeline": "cleanup_fd int dest_fd = -1;"
    },
    {
        "line": 263,
        "fullcodeline": "char tempfile[] = \"/bindfileXXXXXX\";"
    },
    {
        "line": 265,
        "fullcodeline": "assert (dest != NULL);"
    },
    {
        "line": 266,
        "fullcodeline": "assert (op->perms >= 0);"
    },
    {
        "line": 267,
        "fullcodeline": "assert (op->perms <= 07777);"
    },
    {
        "line": 269,
        "fullcodeline": "dest_fd = mkstemp (tempfile);"
    },
    {
        "line": 280,
        "fullcodeline": "close (op->fd);"
    },
    {
        "line": 281,
        "fullcodeline": "op->fd = -1;"
    },
    {
        "line": 283,
        "fullcodeline": "assert (dest != NULL);"
    },
    {
        "line": 288,
        "fullcodeline": "privileged_op (privileged_op_socket,"
    },
    {
        "line": 296,
        "fullcodeline": "unlink (tempfile);"
    },
    {
        "line": 302,
        "fullcodeline": "if (symlink (op->source, dest) != 0)"
    },
    {
        "line": 22,
        "fullcodeline": "die_with_error(\"Can't get type of source %s\", op->source);"
    },
    {
        "line": 35,
        "fullcodeline": "(op->perms & 0070) == 0)"
    },
    {
        "line": 36,
        "fullcodeline": "parent_mode &= ~0050;"
    },
    {
        "line": 40,
        "fullcodeline": "(op->perms & 0007) == 0)"
    },
    {
        "line": 41,
        "fullcodeline": "parent_mode &= ~0005;"
    },
    {
        "line": 45,
        "fullcodeline": "die_with_error (\"Can't mkdir parents for %s\", op->dest);"
    },
    {
        "line": 64,
        "fullcodeline": "(op->type == SETUP_DEV_BIND_MOUNT ? BIND_DEVICES : 0),"
    },
    {
        "line": 75,
        "fullcodeline": "die_with_error (\"Can't mkdir %s\", op->dest);"
    },
    {
        "line": 80,
        "fullcodeline": "privileged_op (privileged_op_socket,"
    },
    {
        "line": 99,
        "fullcodeline": "cleanup_free char *subdir = strconcat3 (dest, \"/\", cover_proc_dirs[i]);"
    },
    {
        "line": 109,
        "fullcodeline": "privileged_op (privileged_op_socket,"
    },
    {
        "line": 118,
        "fullcodeline": "die_with_error (\"Can't mkdir %s\", op->dest);"
    },
    {
        "line": 127,
        "fullcodeline": "cleanup_free char *node_dest = strconcat3 (dest, \"/\", devnodes[i]);"
    },
    {
        "line": 128,
        "fullcodeline": "cleanup_free char *node_src = strconcat (\"/oldroot/dev/\", devnodes[i]);"
    },
    {
        "line": 131,
        "fullcodeline": "privileged_op (privileged_op_socket,"
    },
    {
        "line": 139,
        "fullcodeline": "cleanup_free char *target = xasprintf (\"/proc/self/fd/%d\", i);"
    },
    {
        "line": 140,
        "fullcodeline": "cleanup_free char *node_dest = strconcat3 (dest, \"/\", stdionodes[i]);"
    },
    {
        "line": 147,
        "fullcodeline": "if (symlink (\"/proc/self/fd\", dev_fd) < 0)"
    },
    {
        "line": 151,
        "fullcodeline": "if (symlink (\"/proc/kcore\", dev_core) < 0)"
    },
    {
        "line": 160,
        "fullcodeline": "if (mkdir (shm, 0755) == -1)"
    },
    {
        "line": 163,
        "fullcodeline": "if (mkdir (pts, 0755) == -1)"
    },
    {
        "line": 168,
        "fullcodeline": "if (symlink (\"pts/ptmx\", ptmx) != 0)"
    },
    {
        "line": 179,
        "fullcodeline": "cleanup_free char *src_tty_dev = strconcat (\"/oldroot\", host_tty_dev);"
    },
    {
        "line": 180,
        "fullcodeline": "cleanup_free char *dest_console = strconcat (dest, \"/console\");"
    },
    {
        "line": 185,
        "fullcodeline": "privileged_op (privileged_op_socket,"
    },
    {
        "line": 198,
        "fullcodeline": "die_with_error (\"Can't mkdir %s\", op->dest);"
    },
    {
        "line": 207,
        "fullcodeline": "die_with_error (\"Can't mkdir %s\", op->dest);"
    },
    {
        "line": 220,
        "fullcodeline": "die_with_error (\"Can't mkdir %s\", op->dest);"
    },
    {
        "line": 235,
        "fullcodeline": "die_with_error (\"Can't chmod %#o %s\", op->perms, op->dest);"
    },
    {
        "line": 248,
        "fullcodeline": "if (dest_fd == -1)"
    },
    {
        "line": 251,
        "fullcodeline": "if (copy_file_data (op->fd, dest_fd) != 0)"
    },
    {
        "line": 270,
        "fullcodeline": "if (dest_fd == -1)"
    },
    {
        "line": 273,
        "fullcodeline": "if (fchmod (dest_fd, op->perms) != 0)"
    },
    {
        "line": 277,
        "fullcodeline": "if (copy_file_data (op->fd, dest_fd) != 0)"
    },
    {
        "line": 285,
        "fullcodeline": "if (ensure_file (dest, 0444) != 0)"
    },
    {
        "line": 290,
        "fullcodeline": "(op->type == SETUP_MAKE_RO_BIND_FILE ? BIND_READONLY : 0),"
    },
    {
        "line": 303,
        "fullcodeline": "die_with_error (\"Can't make symlink at %s\", op->dest);"
    },
    {
        "line": 20,
        "fullcodeline": "if (op->flags & ALLOW_NOTEXIST && errno == ENOENT)"
    },
    {
        "line": 55,
        "fullcodeline": "if (ensure_dir (dest, 0755) != 0)"
    },
    {
        "line": 87,
        "fullcodeline": "privileged_op (privileged_op_socket,"
    },
    {
        "line": 100,
        "fullcodeline": "if (access (subdir, W_OK) < 0)"
    },
    {
        "line": 129,
        "fullcodeline": "if (create_file (node_dest, 0444, NULL) != 0)"
    },
    {
        "line": 141,
        "fullcodeline": "if (symlink (target, node_dest) < 0)"
    },
    {
        "line": 148,
        "fullcodeline": "die_with_error (\"Can't create symlink %s\", dev_fd);"
    },
    {
        "line": 152,
        "fullcodeline": "die_with_error (\"Can't create symlink %s\", dev_core);"
    },
    {
        "line": 161,
        "fullcodeline": "die_with_error (\"Can't create %s/shm\", op->dest);"
    },
    {
        "line": 164,
        "fullcodeline": "die_with_error (\"Can't create %s/devpts\", op->dest);"
    },
    {
        "line": 169,
        "fullcodeline": "die_with_error (\"Can't make symlink at %s/ptmx\", op->dest);"
    },
    {
        "line": 182,
        "fullcodeline": "if (create_file (dest_console, 0444, NULL) != 0)"
    },
    {
        "line": 249,
        "fullcodeline": "die_with_error (\"Can't create file %s\", op->dest);"
    },
    {
        "line": 252,
        "fullcodeline": "die_with_error (\"Can't write data to file %s\", op->dest);"
    },
    {
        "line": 271,
        "fullcodeline": "die_with_error (\"Can't create tmpfile for %s\", op->dest);"
    },
    {
        "line": 274,
        "fullcodeline": "die_with_error (\"Can't set mode %#o on file to be used for %s\","
    },
    {
        "line": 278,
        "fullcodeline": "die_with_error (\"Can't write data to file %s\", op->dest);"
    },
    {
        "line": 286,
        "fullcodeline": "die_with_error (\"Can't create file at %s\", op->dest);"
    },
    {
        "line": 56,
        "fullcodeline": "die_with_error (\"Can't mkdir %s\", op->dest);"
    },
    {
        "line": 58,
        "fullcodeline": "else if (ensure_file (dest, 0444) != 0)"
    },
    {
        "line": 106,
        "fullcodeline": "die_with_error (\"Can't access %s\", subdir);"
    },
    {
        "line": 130,
        "fullcodeline": "die_with_error (\"Can't create file %s/%s\", op->dest, devnodes[i]);"
    },
    {
        "line": 142,
        "fullcodeline": "die_with_error (\"Can't create symlink %s/%s\", op->dest, stdionodes[i]);"
    },
    {
        "line": 183,
        "fullcodeline": "die_with_error (\"creating %s/console\", op->dest);"
    },
    {
        "line": 59,
        "fullcodeline": "die_with_error (\"Can't create file at %s\", op->dest);"
    },
    {
        "line": 103,
        "fullcodeline": "if (errno == EACCES || errno == ENOENT || errno == EROFS)"
    }
]