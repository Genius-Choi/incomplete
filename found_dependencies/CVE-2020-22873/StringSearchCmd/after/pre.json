[
    {
        "line": 7,
        "fullcodeline": "ChkString(_this, funcPtr, source_str, &sLen, &bLen);"
    },
    {
        "line": 9,
        "fullcodeline": "char *v = _this->d.obj->d.s.str;"
    },
    {
        "line": 10,
        "fullcodeline": "Jsi_Value *seq = Jsi_ValueArrayIndex(interp, args, skip);"
    },
    {
        "line": 26,
        "fullcodeline": "regex_t *reg = &seq->d.obj->d.robj->reg;"
    },
    {
        "line": 28,
        "fullcodeline": "regmatch_t pos[MAX_SUBREGEX] = {};"
    },
    {
        "line": 12,
        "fullcodeline": "if (Jsi_ValueIsString(interp, seq)) {"
    },
    {
        "line": 13,
        "fullcodeline": "char *ce, *cp = Jsi_ValueString(interp, seq, NULL);"
    },
    {
        "line": 14,
        "fullcodeline": "int n = -1;"
    },
    {
        "line": 18,
        "fullcodeline": "Jsi_ValueMakeNumber(interp, ret, n);"
    },
    {
        "line": 21,
        "fullcodeline": "if (!seq || seq->vt != JSI_VT_OBJECT || seq->d.obj->ot != JSI_OT_REGEXP) {"
    },
    {
        "line": 30,
        "fullcodeline": "if ((r = regexec(reg, v, MAX_SUBREGEX, pos, 0)) != 0) {"
    },
    {
        "line": 15,
        "fullcodeline": "if ((ce = Jsi_Strstr(source_str, cp))) {"
    },
    {
        "line": 22,
        "fullcodeline": "Jsi_ValueMakeNumber(interp, ret, -1);"
    },
    {
        "line": 31,
        "fullcodeline": "if (r == REG_NOMATCH) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (r >= REG_BADPAT) {"
    },
    {
        "line": 16,
        "fullcodeline": "n = (ce-source_str);"
    },
    {
        "line": 38,
        "fullcodeline": "regerror(r, reg, buf, sizeof(buf));"
    },
    {
        "line": 32,
        "fullcodeline": "Jsi_ValueMakeNumber(interp, ret, -1.0);"
    },
    {
        "line": 36,
        "fullcodeline": "char buf[JSI_MAX_NUMBER_STRING];"
    }
]