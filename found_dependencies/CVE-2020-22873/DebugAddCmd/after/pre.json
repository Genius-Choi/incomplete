[
    {
        "line": 6,
        "fullcodeline": "int argc = Jsi_ValueGetLength(interp, args);"
    },
    {
        "line": 7,
        "fullcodeline": "jsi_BreakPoint *bptr, bp = {};"
    },
    {
        "line": 11,
        "fullcodeline": "Jsi_Value *v = Jsi_ValueArrayIndex(interp, args, 0);"
    },
    {
        "line": 37,
        "fullcodeline": "bp.id = ++interp->debugOpts.breakIdx;"
    },
    {
        "line": 38,
        "fullcodeline": "bp.enabled = 1;"
    },
    {
        "line": 39,
        "fullcodeline": "snprintf(nbuf, sizeof(nbuf), \"%d\", bp.id);"
    },
    {
        "line": 40,
        "fullcodeline": "bptr = (jsi_BreakPoint*)Jsi_Malloc(sizeof(*bptr));"
    },
    {
        "line": 41,
        "fullcodeline": "*bptr = bp;"
    },
    {
        "line": 42,
        "fullcodeline": "Jsi_HashSet(interp->breakpointHash, (void*)nbuf, bptr);"
    },
    {
        "line": 4,
        "fullcodeline": "if (!interp->breakpointHash)"
    },
    {
        "line": 9,
        "fullcodeline": "if (argc>1 && Jsi_ValueGetBoolean(interp, Jsi_ValueArrayIndex(interp, args, 1), &bp.temp) != JSI_OK)"
    },
    {
        "line": 12,
        "fullcodeline": "if (Jsi_ValueGetNumber(interp, v, &vnum) == JSI_OK) {"
    },
    {
        "line": 36,
        "fullcodeline": "char nbuf[JSI_MAX_NUMBER_STRING];"
    },
    {
        "line": 5,
        "fullcodeline": "interp->breakpointHash = Jsi_HashNew(interp, JSI_KEYS_STRING, jsi_HashFree);"
    },
    {
        "line": 13,
        "fullcodeline": "bp.line = (int)vnum;"
    },
    {
        "line": 14,
        "fullcodeline": "bp.file = interp->curFile;"
    },
    {
        "line": 34,
        "fullcodeline": "if (bp.line<=0 && !bp.func)"
    },
    {
        "line": 10,
        "fullcodeline": "return Jsi_LogError(\"bad boolean\");"
    },
    {
        "line": 16,
        "fullcodeline": "const char *val = Jsi_ValueArrayIndexToStr(interp, args, 0, NULL);"
    },
    {
        "line": 35,
        "fullcodeline": "return Jsi_LogError(\"bad number\");"
    },
    {
        "line": 19,
        "fullcodeline": "if (isdigit(val[0])) {"
    },
    {
        "line": 22,
        "fullcodeline": "bp.file = interp->curFile;"
    },
    {
        "line": 20,
        "fullcodeline": "if (Jsi_GetInt(interp, val, &bp.line, 0) != JSI_OK)"
    },
    {
        "line": 23,
        "fullcodeline": "} else if ((cp = Jsi_Strchr(val, ':'))) {"
    },
    {
        "line": 21,
        "fullcodeline": "return Jsi_LogError(\"bad number\");"
    },
    {
        "line": 26,
        "fullcodeline": "Jsi_DString dStr = {};"
    },
    {
        "line": 27,
        "fullcodeline": "Jsi_DSAppendLen(&dStr, val, cp-val);"
    },
    {
        "line": 28,
        "fullcodeline": "bp.file = Jsi_KeyAdd(interp, Jsi_DSValue(&dStr));"
    },
    {
        "line": 24,
        "fullcodeline": "if (Jsi_GetInt(interp, cp+1, &bp.line, 0) != JSI_OK)"
    },
    {
        "line": 31,
        "fullcodeline": "bp.func = Jsi_KeyAdd(interp, val);"
    },
    {
        "line": 25,
        "fullcodeline": "return Jsi_LogError(\"bad number\");"
    }
]