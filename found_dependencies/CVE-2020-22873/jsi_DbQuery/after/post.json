[
    {
        "line": 3,
        "fullcodeline": "int k, cnt, erc = -1;"
    },
    {
        "line": 4,
        "fullcodeline": "Jsi_CDataDb statbinds[] = {{}, {}};"
    },
    {
        "line": 6,
        "fullcodeline": "OptionBind ob = {.binds = dbopts};"
    },
    {
        "line": 8,
        "fullcodeline": "Jsi_Interp *interp = jdb->interp;"
    },
    {
        "line": 17,
        "fullcodeline": "const char *cPtr = Jsi_Strstr(query, \" %s\");"
    },
    {
        "line": 63,
        "fullcodeline": "specs = dbopts[0].sf;"
    },
    {
        "line": 99,
        "fullcodeline": "DbEvalContext sEval = {};"
    },
    {
        "line": 100,
        "fullcodeline": "int insert = 0, replace = 0, update = 0;"
    },
    {
        "line": 101,
        "fullcodeline": "char nbuf[JSI_MAX_NUMBER_STRING], *bPtr;"
    },
    {
        "line": 105,
        "fullcodeline": "Jsi_DString sStr, *dStr = &sStr;"
    },
    {
        "line": 106,
        "fullcodeline": "Jsi_DSInit(dStr);"
    },
    {
        "line": 113,
        "fullcodeline": "cnt = 0;"
    },
    {
        "line": 116,
        "fullcodeline": "char ch[2];"
    },
    {
        "line": 119,
        "fullcodeline": "ch[1] = 0;"
    },
    {
        "line": 179,
        "fullcodeline": "sEval.zSql = Jsi_DSValue(dStr);"
    },
    {
        "line": 183,
        "fullcodeline": "int rc, bindMax = -1, dataIdx = 0;"
    },
    {
        "line": 184,
        "fullcodeline": "cnt = 0;"
    },
    {
        "line": 185,
        "fullcodeline": "int ismodify = (replace||insert||update);"
    },
    {
        "line": 186,
        "fullcodeline": "int isnew = (replace||insert);"
    },
    {
        "line": 187,
        "fullcodeline": "int didBegin = 0;"
    },
    {
        "line": 188,
        "fullcodeline": "DbEvalContext *p = &sEval;"
    },
    {
        "line": 189,
        "fullcodeline": "rc = dbPrepareStmt(p->jdb, p->zSql, &p->zSql, &p->pPreStmt);"
    },
    {
        "line": 238,
        "fullcodeline": "dbEvalFinalize(&sEval);"
    },
    {
        "line": 245,
        "fullcodeline": "dbEvalFinalize(&sEval);"
    },
    {
        "line": 5,
        "fullcodeline": "if (!dbopts) dbopts = statbinds;"
    },
    {
        "line": 9,
        "fullcodeline": "if (!query) query=\"\";"
    },
    {
        "line": 10,
        "fullcodeline": "if (query[0]==';') {"
    },
    {
        "line": 18,
        "fullcodeline": "if (!cPtr) cPtr = Jsi_Strstr(query, \"\\t%s\");"
    },
    {
        "line": 19,
        "fullcodeline": "if (!dbopts) {"
    },
    {
        "line": 31,
        "fullcodeline": "for (k=0; dbopts[k].sf; k++) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (dbopts->memClear || dbopts->memFree) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (!Jsi_Strncasecmp(query, \"SELECT\", 6))"
    },
    {
        "line": 110,
        "fullcodeline": "if (dbEvalInit(interp, &sEval, jdb, NULL, dStr, 0, 0) != JSI_OK)"
    },
    {
        "line": 114,
        "fullcodeline": "if (dataMax==0)"
    },
    {
        "line": 120,
        "fullcodeline": "if (!ch[0])"
    },
    {
        "line": 122,
        "fullcodeline": "if ((update=(Jsi_Strncasecmp(query, \"UPDATE\", 6)==0))) {"
    },
    {
        "line": 180,
        "fullcodeline": "if (jdb->echo && sEval.zSql)"
    },
    {
        "line": 190,
        "fullcodeline": "if( rc!=JSI_OK ) return -1;"
    },
    {
        "line": 191,
        "fullcodeline": "if (dataMax>1 && !dbopts->noBegin) {"
    },
    {
        "line": 196,
        "fullcodeline": "while (dataIdx<dataMax) {"
    },
    {
        "line": 236,
        "fullcodeline": "if (didBegin && !dbExecCmd(jdb, JSI_DBQUERY_COMMIT_STR, &erc))"
    },
    {
        "line": 239,
        "fullcodeline": "if( rc==JSI_BREAK ) {"
    },
    {
        "line": 242,
        "fullcodeline": "return (rc==JSI_OK?cnt:erc);"
    },
    {
        "line": 20,
        "fullcodeline": "Jsi_LogError(\"dbopts may not be null\");"
    },
    {
        "line": 24,
        "fullcodeline": "Jsi_LogError(\"data may not be null\");"
    },
    {
        "line": 28,
        "fullcodeline": "Jsi_LogError(\"specs may not be null\");"
    },
    {
        "line": 67,
        "fullcodeline": "void *rec = dbopts[0].data, *prec = rec;"
    },
    {
        "line": 68,
        "fullcodeline": "void **recPtrPtr = NULL;"
    },
    {
        "line": 109,
        "fullcodeline": "sEval.nocache = 1;"
    },
    {
        "line": 115,
        "fullcodeline": "dataMax = 1;"
    },
    {
        "line": 121,
        "fullcodeline": "ch[0] = ':';"
    },
    {
        "line": 123,
        "fullcodeline": "Jsi_DSAppendLen(dStr, query, cPtr?(cPtr-query):-1);"
    },
    {
        "line": 181,
        "fullcodeline": "Jsi_LogInfo(\"SQL-ECHO: %s\\n\", sEval.zSql);"
    },
    {
        "line": 192,
        "fullcodeline": "didBegin = 1;"
    },
    {
        "line": 215,
        "fullcodeline": "rc = dbBindOptionStmt(jdb, p->pPreStmt->pStmt, &ob, dataIdx, bindMax, dbopts);"
    },
    {
        "line": 218,
        "fullcodeline": "bindMax = 1;"
    },
    {
        "line": 219,
        "fullcodeline": "rc = dbEvalStepSub(p, (dataIdx>=dataMax), &erc);"
    },
    {
        "line": 222,
        "fullcodeline": "cnt += sqlite3_changes(jdb->db);"
    },
    {
        "line": 234,
        "fullcodeline": "dataIdx++;"
    },
    {
        "line": 237,
        "fullcodeline": "rc = JSI_ERROR;"
    },
    {
        "line": 240,
        "fullcodeline": "rc = JSI_OK;"
    },
    {
        "line": 247,
        "fullcodeline": "dbExecCmd(jdb, JSI_DBQUERY_ROLLBACK_STR, NULL);"
    },
    {
        "line": 11,
        "fullcodeline": "if (!dbExecCmd(jdb, query+1, &erc)) {"
    },
    {
        "line": 21,
        "fullcodeline": "return -1;"
    },
    {
        "line": 25,
        "fullcodeline": "return -1;"
    },
    {
        "line": 29,
        "fullcodeline": "return -1;"
    },
    {
        "line": 32,
        "fullcodeline": "if (dbopts[k].arrSize>1 || k==0) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (cnt<=0 && rec && dbopts->isPtr2) {"
    },
    {
        "line": 76,
        "fullcodeline": "for (k=0; k<cnt; k++) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (query == NULL || query[0] == 0)"
    },
    {
        "line": 97,
        "fullcodeline": "return dbOptSelect(jdb, query, &ob, dbopts);"
    },
    {
        "line": 111,
        "fullcodeline": "return -1;"
    },
    {
        "line": 193,
        "fullcodeline": "if (!dbExecCmd(jdb, JSI_DBQUERY_BEGIN_STR, &erc))"
    },
    {
        "line": 197,
        "fullcodeline": "if (ismodify && ob.dirtyPtr && (dbopts->dirtyOnly)) { /* Check to limit updates to dirty values only. */"
    },
    {
        "line": 216,
        "fullcodeline": "if( rc!=JSI_OK )"
    },
    {
        "line": 220,
        "fullcodeline": "if (rc == JSI_ERROR)"
    },
    {
        "line": 223,
        "fullcodeline": "if (rc != JSI_OK && rc != JSI_BREAK)"
    },
    {
        "line": 225,
        "fullcodeline": "if (ob.rowidPtr && isnew) {"
    },
    {
        "line": 12,
        "fullcodeline": "Jsi_LogError(\"EXEC ERROR=\\\"%s\\\", SQL=\\\"%s\\\"\", sqlite3_errmsg(jdb->db), query);"
    },
    {
        "line": 33,
        "fullcodeline": "int scnt = 0;"
    },
    {
        "line": 59,
        "fullcodeline": "assert(specPtr->id == JSI_OPTION_END);"
    },
    {
        "line": 70,
        "fullcodeline": "recPtrPtr = (void**)rec; /* This is really a void***, but this gets recast below. */"
    },
    {
        "line": 83,
        "fullcodeline": "Jsi_OptionsFree(interp, (Jsi_OptionSpec*)specs, prec, 0);"
    },
    {
        "line": 90,
        "fullcodeline": "*recPtrPtr = NULL;"
    },
    {
        "line": 125,
        "fullcodeline": "Jsi_DSAppend(dStr, \" \", NULL);"
    },
    {
        "line": 126,
        "fullcodeline": "int cidx = 0;"
    },
    {
        "line": 127,
        "fullcodeline": "int killf = (JSI_OPT_DB_IGNORE|JSI_OPT_READ_ONLY|JSI_OPT_INIT_ONLY);"
    },
    {
        "line": 140,
        "fullcodeline": "Jsi_DSAppend(dStr, cPtr+3, NULL);"
    },
    {
        "line": 142,
        "fullcodeline": "} else if ((insert=(Jsi_Strncasecmp(query, \"INSERT\", 6)==0))"
    },
    {
        "line": 198,
        "fullcodeline": "void *rec = dbopts[0].data;"
    },
    {
        "line": 203,
        "fullcodeline": "char *ptr = (char*)rec + ob.dirtyPtr->offset;"
    },
    {
        "line": 205,
        "fullcodeline": "int bit = 0;"
    },
    {
        "line": 212,
        "fullcodeline": "isDirty &= ~(1<<(bit));"
    },
    {
        "line": 213,
        "fullcodeline": "*(int*)ptr = isDirty; /* Note that the dirty bit is cleared, even upon error.*/"
    },
    {
        "line": 231,
        "fullcodeline": "char *ptr = (char*)rec + ob.rowidPtr->offset;"
    },
    {
        "line": 232,
        "fullcodeline": "*(Jsi_Wide*)ptr = sqlite3_last_insert_rowid(jdb->db);"
    },
    {
        "line": 34,
        "fullcodeline": "for (specPtr = dbopts[k].sf, scnt=0; specPtr->id>=JSI_OPTION_BOOL"
    },
    {
        "line": 35,
        "fullcodeline": "&& specPtr->id < JSI_OPTION_END; specPtr++, scnt++) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (k==0)"
    },
    {
        "line": 74,
        "fullcodeline": "for (cnt=0; ((void**)rec)[cnt]!=NULL; cnt++);"
    },
    {
        "line": 77,
        "fullcodeline": "if (dbopts->isPtr2 || dbopts->isPtrs)"
    },
    {
        "line": 81,
        "fullcodeline": "if (!prec)"
    },
    {
        "line": 84,
        "fullcodeline": "if (dbopts->isPtr2 || dbopts->isPtrs) {"
    },
    {
        "line": 128,
        "fullcodeline": "for (specPtr = specs; specPtr->id != JSI_OPTION_END; specPtr++, cidx++) {"
    },
    {
        "line": 143,
        "fullcodeline": "|| (replace=(Jsi_Strncasecmp(query, \"REPLACE\", 7)==0))) {"
    },
    {
        "line": 144,
        "fullcodeline": "Jsi_DSAppendLen(dStr, query, cPtr?(cPtr-query):-1);"
    },
    {
        "line": 199,
        "fullcodeline": "if (dbopts->isPtrs || dbopts->isPtr2)"
    },
    {
        "line": 206,
        "fullcodeline": "if (ob.dirtyPtr->id == JSI_OPTION_BOOL)"
    },
    {
        "line": 208,
        "fullcodeline": "if (!(isDirty&(1<<(bit)))) {"
    },
    {
        "line": 227,
        "fullcodeline": "if (dbopts->isPtrs || dbopts->isPtr2)"
    },
    {
        "line": 58,
        "fullcodeline": "ob.optLen = scnt;"
    },
    {
        "line": 85,
        "fullcodeline": "Jsi_Free(prec);"
    },
    {
        "line": 131,
        "fullcodeline": "const char *fname = specPtr->name;"
    },
    {
        "line": 136,
        "fullcodeline": "Jsi_DSAppend(dStr, (cnt?\",\":\"\"), \"[\", fname, \"]=\","
    },
    {
        "line": 138,
        "fullcodeline": "cnt++;"
    },
    {
        "line": 204,
        "fullcodeline": "int isDirty = *(int*)ptr;"
    },
    {
        "line": 209,
        "fullcodeline": "dataIdx++;"
    },
    {
        "line": 36,
        "fullcodeline": "if (specPtr->flags&JSI_OPT_DB_IGNORE)"
    },
    {
        "line": 38,
        "fullcodeline": "if (k==0) {"
    },
    {
        "line": 80,
        "fullcodeline": "prec = (char*)rec + (k * structSize);"
    },
    {
        "line": 129,
        "fullcodeline": "if (specPtr == ob.rowidPtr || specPtr == ob.dirtyPtr || (specPtr->flags&killf))"
    },
    {
        "line": 132,
        "fullcodeline": "if (ch[0] == '?')"
    },
    {
        "line": 146,
        "fullcodeline": "Jsi_DSAppend(dStr, \" (\", NULL);"
    },
    {
        "line": 147,
        "fullcodeline": "int killf = JSI_OPT_DB_IGNORE;"
    },
    {
        "line": 157,
        "fullcodeline": "Jsi_DSAppendLen(dStr,\") VALUES(\", -1);"
    },
    {
        "line": 158,
        "fullcodeline": "cnt = 0;"
    },
    {
        "line": 159,
        "fullcodeline": "int cidx = 0;"
    },
    {
        "line": 171,
        "fullcodeline": "Jsi_DSAppend(dStr,\")\", cPtr+3, NULL);"
    },
    {
        "line": 173,
        "fullcodeline": "} else if (!Jsi_Strncasecmp(query, \"DELETE\", 6)) {"
    },
    {
        "line": 202,
        "fullcodeline": "rec = (char*)rec + (dataIdx * structSize);"
    },
    {
        "line": 230,
        "fullcodeline": "rec = (char*)rec + (dataIdx * structSize);"
    },
    {
        "line": 78,
        "fullcodeline": "prec = ((void**)rec)[k];"
    },
    {
        "line": 133,
        "fullcodeline": "snprintf(bPtr=nbuf, sizeof(nbuf), \"%d\", cidx+1);"
    },
    {
        "line": 150,
        "fullcodeline": "for (specPtr = specs; specPtr->id != JSI_OPTION_END; specPtr++) {"
    },
    {
        "line": 160,
        "fullcodeline": "for (specPtr = specs; specPtr->id != JSI_OPTION_END; specPtr++, cidx++) {"
    },
    {
        "line": 174,
        "fullcodeline": "Jsi_DSAppend(dStr, query, NULL);"
    },
    {
        "line": 200,
        "fullcodeline": "rec = ((void**)rec)[dataIdx];"
    },
    {
        "line": 228,
        "fullcodeline": "rec = ((void**)rec)[dataIdx];"
    },
    {
        "line": 39,
        "fullcodeline": "if (specPtr->flags&JSI_OPT_DB_ROWID) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (specPtr->flags&JSI_OPT_DB_DIRTY) {"
    },
    {
        "line": 135,
        "fullcodeline": "bPtr = (char*)specPtr->name;"
    },
    {
        "line": 149,
        "fullcodeline": "killf |= (JSI_OPT_READ_ONLY|JSI_OPT_INIT_ONLY);"
    },
    {
        "line": 153,
        "fullcodeline": "const char *fname = specPtr->name;"
    },
    {
        "line": 154,
        "fullcodeline": "Jsi_DSAppend(dStr, (cnt?\",\":\"\"), \"[\", fname, \"]\", NULL);"
    },
    {
        "line": 155,
        "fullcodeline": "cnt++;"
    },
    {
        "line": 168,
        "fullcodeline": "Jsi_DSAppend(dStr, (cnt?\",\":\"\"), ch, bPtr, NULL);"
    },
    {
        "line": 169,
        "fullcodeline": "cnt++;"
    },
    {
        "line": 176,
        "fullcodeline": "Jsi_LogError(\"unrecognized query \\\"%s\\\": expected one of: SELECT, UPDATE, INSERT, REPLACE or DELETE\", query);"
    },
    {
        "line": 44,
        "fullcodeline": "ob.rowidPtr = specPtr;"
    },
    {
        "line": 151,
        "fullcodeline": "if (specPtr == ob.rowidPtr || specPtr == ob.dirtyPtr || specPtr->flags&killf)"
    },
    {
        "line": 161,
        "fullcodeline": "if (specPtr == ob.rowidPtr || specPtr == ob.dirtyPtr"
    },
    {
        "line": 164,
        "fullcodeline": "if (ch[0] == '?')"
    },
    {
        "line": 177,
        "fullcodeline": "return -1;"
    },
    {
        "line": 40,
        "fullcodeline": "if (specPtr->id != JSI_OPTION_INT64) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (specPtr->id == JSI_OPTION_BOOL || specPtr->id == JSI_OPTION_INT) {"
    },
    {
        "line": 162,
        "fullcodeline": "|| specPtr->flags&killf)"
    },
    {
        "line": 165,
        "fullcodeline": "snprintf(bPtr=nbuf, sizeof(nbuf), \"%d\", cidx+1);"
    },
    {
        "line": 41,
        "fullcodeline": "Jsi_LogError(\"rowid flag must be a wide field: %s\", specPtr->name);"
    },
    {
        "line": 48,
        "fullcodeline": "ob.dirtyPtr = specPtr;"
    },
    {
        "line": 167,
        "fullcodeline": "bPtr = (char*)specPtr->name;"
    },
    {
        "line": 42,
        "fullcodeline": "return -1;"
    },
    {
        "line": 50,
        "fullcodeline": "Jsi_LogError(\"dirty flag must be a int/bool field: %s\", specPtr->name);"
    },
    {
        "line": 51,
        "fullcodeline": "return -1;"
    }
]