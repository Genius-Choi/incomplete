[
    {
        "line": 3,
        "fullcodeline": "Jsi_RC rc = JSI_OK;"
    },
    {
        "line": 4,
        "fullcodeline": "char idxBuf[200];"
    },
    {
        "line": 5,
        "fullcodeline": "idxBuf[0] = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "if (func && arg->vt == JSI_VT_UNDEF && !interp->typeCheck.noundef && index>0 && !isdefault && !(typ&JSI_TT_UNDEFINED)) {"
    },
    {
        "line": 15,
        "fullcodeline": "if (typ <= 0)"
    },
    {
        "line": 19,
        "fullcodeline": "if (interp->typeCheck.all==0) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (index == 0 && func && func->type == FC_BUILDIN &&"
    },
    {
        "line": 26,
        "fullcodeline": "if ((typ&JSI_TT_ANY)) return JSI_OK;"
    },
    {
        "line": 27,
        "fullcodeline": "if (index == 0 && arg->vt == JSI_VT_UNDEF) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (isdefault && index && typ&JSI_TT_VOID && arg->vt == JSI_VT_UNDEF)"
    },
    {
        "line": 34,
        "fullcodeline": "if (typ&JSI_TT_UNDEFINED && Jsi_ValueIsUndef(interp, arg)) return rc;"
    },
    {
        "line": 35,
        "fullcodeline": "if (typ&JSI_TT_NUMBER && Jsi_ValueIsNumber(interp, arg)) return rc;"
    },
    {
        "line": 36,
        "fullcodeline": "if (typ&JSI_TT_STRING && Jsi_ValueIsString(interp, arg)) return rc;"
    },
    {
        "line": 37,
        "fullcodeline": "if (typ&JSI_TT_BOOLEAN && Jsi_ValueIsBoolean(interp, arg))  return rc;"
    },
    {
        "line": 38,
        "fullcodeline": "if (typ&JSI_TT_ARRAY && Jsi_ValueIsArray(interp, arg))   return rc;"
    },
    {
        "line": 39,
        "fullcodeline": "if (typ&JSI_TT_FUNCTION && Jsi_ValueIsFunction(interp, arg)) return rc;"
    },
    {
        "line": 40,
        "fullcodeline": "if (typ&JSI_TT_REGEXP && Jsi_ValueIsObjType(interp, arg, JSI_OT_REGEXP)) return rc;"
    },
    {
        "line": 41,
        "fullcodeline": "if (typ&JSI_TT_USEROBJ && Jsi_ValueIsObjType(interp, arg, JSI_OT_USEROBJ)) return rc;"
    },
    {
        "line": 42,
        "fullcodeline": "if (typ&JSI_TT_ITEROBJ && Jsi_ValueIsObjType(interp, arg, JSI_OT_ITER)) return rc;"
    },
    {
        "line": 43,
        "fullcodeline": "if (typ&JSI_TT_OBJECT && ("
    },
    {
        "line": 46,
        "fullcodeline": "if (typ&JSI_TT_NULL && Jsi_ValueIsNull(interp, arg)) return rc;"
    },
    {
        "line": 49,
        "fullcodeline": "Jsi_DString dStr = {};"
    },
    {
        "line": 50,
        "fullcodeline": "const char *exp = jsi_typeName(interp, typ, &dStr);"
    },
    {
        "line": 51,
        "fullcodeline": "const char *vtyp = jsi_ValueTypeName(interp, arg);"
    },
    {
        "line": 56,
        "fullcodeline": "jsi_TypeMismatch(interp);"
    },
    {
        "line": 57,
        "fullcodeline": "Jsi_DString fStr = {};"
    },
    {
        "line": 58,
        "fullcodeline": "rc = Jsi_LogType(\"type mismatch %s%s '%s': expected \\\"%s\\\" but got \\\"%s\\\"%s\","
    },
    {
        "line": 60,
        "fullcodeline": "Jsi_DSFree(&fStr);"
    },
    {
        "line": 61,
        "fullcodeline": "Jsi_DSFree(&dStr);"
    },
    {
        "line": 7,
        "fullcodeline": "snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);"
    },
    {
        "line": 8,
        "fullcodeline": "jsi_TypeMismatch(interp);"
    },
    {
        "line": 10,
        "fullcodeline": "Jsi_DString fStr = {};"
    },
    {
        "line": 11,
        "fullcodeline": "rc = Jsi_LogType(\"call with undefined var %s%s '%s'%s\", p1, idxBuf, p2, jsiFuncInfo(interp, &fStr, func, arg));"
    },
    {
        "line": 12,
        "fullcodeline": "Jsi_DSFree(&fStr);"
    },
    {
        "line": 24,
        "fullcodeline": "interp->typeCheck.all == 0) // Normally do not check return types for builtins."
    },
    {
        "line": 44,
        "fullcodeline": "Jsi_ValueIsObjType(interp, arg, JSI_OT_OBJECT) && Jsi_ValueIsArray(interp, arg)==0))"
    },
    {
        "line": 52,
        "fullcodeline": "if (index>0)"
    },
    {
        "line": 20,
        "fullcodeline": "if (func ? (interp->typeCheck.run==0) : (interp->typeCheck.parse==0))"
    },
    {
        "line": 28,
        "fullcodeline": "if (!(typ&JSI_TT_VOID))"
    },
    {
        "line": 53,
        "fullcodeline": "snprintf(idxBuf, sizeof(idxBuf), \" arg %d\", index);"
    },
    {
        "line": 55,
        "fullcodeline": "rc = JSI_ERROR;"
    },
    {
        "line": 59,
        "fullcodeline": "p1, idxBuf, p2, exp, vtyp, jsiFuncInfo(interp, &fStr, func, arg));"
    }
]