[
    {
        "line": 3,
        "fullcodeline": "char buf[100], *str;"
    },
    {
        "line": 5,
        "fullcodeline": "Jsi_DSInit(&eStr);"
    },
    {
        "line": 8,
        "fullcodeline": "int quote = owPtr->quote;"
    },
    {
        "line": 9,
        "fullcodeline": "int isjson = owPtr->quote&JSI_OUTPUT_JSON;"
    },
    {
        "line": 6,
        "fullcodeline": "if (interp->maxDepth>0 && owPtr->depth > interp->maxDepth)"
    },
    {
        "line": 13,
        "fullcodeline": "Jsi_DSAppend(dStr, \"undefined\", NULL);"
    },
    {
        "line": 16,
        "fullcodeline": "Jsi_DSAppend(dStr, \"null\", NULL);"
    },
    {
        "line": 19,
        "fullcodeline": "Jsi_DSAppend(dStr, \"variable\", NULL);"
    },
    {
        "line": 22,
        "fullcodeline": "Jsi_DSAppend(dStr, (v->d.val ? \"true\":\"false\"), NULL);"
    },
    {
        "line": 54,
        "fullcodeline": "Jsi_DSAppend(dStr,\"\\\"\", NULL);"
    },
    {
        "line": 81,
        "fullcodeline": "Jsi_DSAppend(dStr,\"\\\"\", NULL);"
    },
    {
        "line": 82,
        "fullcodeline": "Jsi_DSFree(&eStr);"
    },
    {
        "line": 149,
        "fullcodeline": "Jsi_LogBug(\"Unexpected value type: %d\", v->vt);"
    },
    {
        "line": 7,
        "fullcodeline": "return Jsi_LogError(\"recursive ToString\");"
    },
    {
        "line": 27,
        "fullcodeline": "if (isjson && !Jsi_NumberIsNormal(num)) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (!quote) {"
    },
    {
        "line": 28,
        "fullcodeline": "Jsi_DSAppend(dStr, \"null\", NULL);"
    },
    {
        "line": 51,
        "fullcodeline": "Jsi_DSAppend(dStr, str, NULL);"
    },
    {
        "line": 79,
        "fullcodeline": "str++;"
    },
    {
        "line": 56,
        "fullcodeline": "if ((*str == '\\'' && (!isjson)) || *str == '\\\\'|| *str == '\\\"'|| (*str == '\\n'"
    },
    {
        "line": 88,
        "fullcodeline": "Jsi_DSAppend(dStr, (o->d.val ? \"true\":\"false\"), NULL);"
    },
    {
        "line": 98,
        "fullcodeline": "Jsi_FuncObjToString(interp, o->d.fobj->func, &eStr, 3 | ((owPtr->depth==0 && owPtr->quote)?8:0));"
    },
    {
        "line": 99,
        "fullcodeline": "str = Jsi_DSValue(&eStr);"
    },
    {
        "line": 105,
        "fullcodeline": "jsi_UserObjToName(interp, o->d.uobj, &eStr);"
    },
    {
        "line": 106,
        "fullcodeline": "str = Jsi_DSValue(&eStr);"
    },
    {
        "line": 109,
        "fullcodeline": "Jsi_DSAppend(dStr, (isjson?\"null\":\"*ITER*\"), NULL);"
    },
    {
        "line": 118,
        "fullcodeline": "int i, len = o->arrCnt;"
    },
    {
        "line": 122,
        "fullcodeline": "Jsi_DSAppend(dStr,\"[\",len?\" \":\"\", NULL);"
    },
    {
        "line": 136,
        "fullcodeline": "Jsi_DSAppend(dStr,len?\" \":\"\",\"]\", NULL);"
    },
    {
        "line": 29,
        "fullcodeline": "} else if (Jsi_NumberIsInteger(num)) {"
    },
    {
        "line": 58,
        "fullcodeline": "|| *str == '\\r' || *str == '\\t' || *str == '\\f' || *str == '\\b'  ) {"
    },
    {
        "line": 59,
        "fullcodeline": "char pcp[2];"
    },
    {
        "line": 60,
        "fullcodeline": "*pcp = *str;"
    },
    {
        "line": 61,
        "fullcodeline": "pcp[1] = 0;"
    },
    {
        "line": 62,
        "fullcodeline": "Jsi_DSAppendLen(dStr,\"\\\\\", 1);"
    },
    {
        "line": 70,
        "fullcodeline": "Jsi_DSAppendLen(dStr,pcp, 1);"
    },
    {
        "line": 120,
        "fullcodeline": "if (!o->arr)"
    },
    {
        "line": 123,
        "fullcodeline": "for (i = 0; i < len; ++i) {"
    },
    {
        "line": 138,
        "fullcodeline": "int len = Jsi_TreeSize(o->tree);"
    },
    {
        "line": 139,
        "fullcodeline": "Jsi_DSAppend(dStr,\"{\",len?\" \":\"\", NULL);"
    },
    {
        "line": 140,
        "fullcodeline": "owPtr->depth++;"
    },
    {
        "line": 141,
        "fullcodeline": "Jsi_TreeWalk(o->tree, _object_get_callback, owPtr, 0);"
    },
    {
        "line": 142,
        "fullcodeline": "owPtr->depth--;"
    },
    {
        "line": 143,
        "fullcodeline": "Jsi_DSAppend(dStr,len?\" \":\"\",\"}\", NULL);"
    },
    {
        "line": 30,
        "fullcodeline": "Jsi_NumberItoA10((Jsi_Wide)num, buf, sizeof(buf));"
    },
    {
        "line": 31,
        "fullcodeline": "Jsi_DSAppend(dStr, buf, NULL);"
    },
    {
        "line": 121,
        "fullcodeline": "len = Jsi_ValueGetLength(interp, v);"
    },
    {
        "line": 124,
        "fullcodeline": "nv = Jsi_ValueArrayIndex(interp, v, i);"
    },
    {
        "line": 126,
        "fullcodeline": "owPtr->depth++;"
    },
    {
        "line": 134,
        "fullcodeline": "owPtr->depth--;"
    },
    {
        "line": 64,
        "fullcodeline": "case '\\r': *pcp = 'r'; break;"
    },
    {
        "line": 65,
        "fullcodeline": "case '\\n': *pcp = 'n'; break;"
    },
    {
        "line": 66,
        "fullcodeline": "case '\\t': *pcp = 't'; break;"
    },
    {
        "line": 67,
        "fullcodeline": "case '\\f': *pcp = 'f'; break;"
    },
    {
        "line": 68,
        "fullcodeline": "case '\\b': *pcp = 'b'; break;"
    },
    {
        "line": 71,
        "fullcodeline": "} else if (isprint(*str) || !isjson)"
    },
    {
        "line": 32,
        "fullcodeline": "} else if (Jsi_NumberIsWide(num)) {"
    },
    {
        "line": 72,
        "fullcodeline": "Jsi_DSAppendLen(dStr,str, 1);"
    },
    {
        "line": 125,
        "fullcodeline": "if (i) Jsi_DSAppend(dStr,\", \", NULL);"
    },
    {
        "line": 34,
        "fullcodeline": "Jsi_DSAppend(dStr, buf, NULL);"
    },
    {
        "line": 74,
        "fullcodeline": "char ubuf[10];"
    },
    {
        "line": 75,
        "fullcodeline": "int l = Jsi_UtfEncode(str, ubuf);"
    },
    {
        "line": 76,
        "fullcodeline": "Jsi_DSAppend(dStr,ubuf, NULL);"
    },
    {
        "line": 77,
        "fullcodeline": "str += l-1;"
    },
    {
        "line": 128,
        "fullcodeline": "if (jsiValueGetString(interp, nv, dStr, owPtr) != JSI_OK) {"
    },
    {
        "line": 133,
        "fullcodeline": "else Jsi_DSAppend(dStr, \"undefined\", NULL);"
    },
    {
        "line": 57,
        "fullcodeline": "&& (!(owPtr->quote&JSI_OUTPUT_NEWLINES)))"
    },
    {
        "line": 129,
        "fullcodeline": "owPtr->depth--;"
    },
    {
        "line": 35,
        "fullcodeline": "} else if (Jsi_NumberIsNormal(num) || Jsi_NumberIsSubnormal(num)) {"
    },
    {
        "line": 36,
        "fullcodeline": "Jsi_NumberDtoA(interp, num, buf, sizeof(buf), 0);"
    },
    {
        "line": 37,
        "fullcodeline": "Jsi_DSAppend(dStr, buf, NULL);"
    },
    {
        "line": 38,
        "fullcodeline": "} else if (Jsi_NumberIsNaN(num)) {"
    },
    {
        "line": 39,
        "fullcodeline": "Jsi_DSAppend(dStr, \"NaN\", NULL);"
    },
    {
        "line": 41,
        "fullcodeline": "int s = Jsi_NumberIsInfinity(num);"
    },
    {
        "line": 42,
        "fullcodeline": "if (s > 0) Jsi_DSAppend(dStr, \"+Infinity\", NULL);"
    },
    {
        "line": 43,
        "fullcodeline": "else if (s < 0) Jsi_DSAppend(dStr, \"-Infinity\", NULL);"
    },
    {
        "line": 44,
        "fullcodeline": "else Jsi_LogBug(\"Ieee function problem: %d\", fpclassify(num));"
    }
]