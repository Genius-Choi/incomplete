[
    {
        "line": 3,
        "fullcodeline": "Jsi_RC rc = JSI_OK;"
    },
    {
        "line": 9,
        "fullcodeline": "Jsi_CmdSpec *spec = func->cmdSpec;"
    },
    {
        "line": 10,
        "fullcodeline": "Jsi_ScopeStrs *ss = func->argnames;"
    },
    {
        "line": 4,
        "fullcodeline": "if (interp->typeCheck.all==0) {"
    },
    {
        "line": 14,
        "fullcodeline": "char nbuf[JSI_MAX_NUMBER_STRING];"
    },
    {
        "line": 15,
        "fullcodeline": "if (func->type == FC_BUILDIN) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (argCodes && argCodes->code_len>=argc) {"
    },
    {
        "line": 11,
        "fullcodeline": "if (ss==NULL && spec == NULL)"
    },
    {
        "line": 17,
        "fullcodeline": "maxArgs = spec->maxArgs + func->callflags.bits.addargs;"
    },
    {
        "line": 18,
        "fullcodeline": "minArgs = spec->minArgs + func->callflags.bits.addargs;"
    },
    {
        "line": 44,
        "fullcodeline": "Jsi_DString dStr = {};"
    },
    {
        "line": 45,
        "fullcodeline": "Jsi_FuncObjToString(interp, func, &dStr, 2);"
    },
    {
        "line": 57,
        "fullcodeline": "int cl = argCodes->code_len;"
    },
    {
        "line": 58,
        "fullcodeline": "int aind=argc-1;"
    },
    {
        "line": 5,
        "fullcodeline": "if (!argCodes ? (interp->typeCheck.run==0) : (interp->typeCheck.parse==0))"
    },
    {
        "line": 16,
        "fullcodeline": "varargs =  (spec->maxArgs<0);"
    },
    {
        "line": 21,
        "fullcodeline": "minArgs = (ss->firstDef>0 ? ss->firstDef-1 : ss->count);"
    },
    {
        "line": 22,
        "fullcodeline": "maxArgs = ss->count;"
    },
    {
        "line": 28,
        "fullcodeline": "if (argc >= minArgs)"
    },
    {
        "line": 30,
        "fullcodeline": "mis = (argc<minArgs);"
    },
    {
        "line": 23,
        "fullcodeline": "mis = (argc != ss->count);"
    },
    {
        "line": 32,
        "fullcodeline": "mis = (argc<minArgs || argc>maxArgs);"
    },
    {
        "line": 35,
        "fullcodeline": "snprintf(nbuf, sizeof(nbuf), \"%d or more\", minArgs);"
    },
    {
        "line": 41,
        "fullcodeline": "interp->parseLine = line;"
    },
    {
        "line": 43,
        "fullcodeline": "rc = JSI_ERROR;"
    },
    {
        "line": 59,
        "fullcodeline": "for (i=cl-1; rc == JSI_OK && i>=0 && aind>=0; i--,aind--) {"
    },
    {
        "line": 60,
        "fullcodeline": "Jsi_ttype atyp = JSI_TT_ANY;"
    },
    {
        "line": 77,
        "fullcodeline": "rc = jsi_StaticArgTypeCheck(interp, atyp, \"for argument\", name, aind+1, func, line);"
    },
    {
        "line": 24,
        "fullcodeline": "if (func->retType == 0 && ss && ss->typeCnt == 0 && interp->typeCheck.all==0)"
    },
    {
        "line": 47,
        "fullcodeline": "Jsi_LogWarn(\"got %d args, expected %s, calling %s\", argc, nbuf, Jsi_DSValue(&dStr));"
    },
    {
        "line": 49,
        "fullcodeline": "rc = Jsi_LogType(\"got %d args, expected %s, calling %s\", argc, nbuf, Jsi_DSValue(&dStr));"
    },
    {
        "line": 76,
        "fullcodeline": "if (atyp == JSI_TT_ANY) continue;"
    },
    {
        "line": 36,
        "fullcodeline": "else if (maxArgs > minArgs)"
    },
    {
        "line": 62,
        "fullcodeline": "case OP_PUSHSTR: atyp=JSI_TT_STRING; break;"
    },
    {
        "line": 63,
        "fullcodeline": "case OP_PUSHNUM: atyp=JSI_TT_NUMBER; break;"
    },
    {
        "line": 64,
        "fullcodeline": "case OP_PUSHBOO: atyp=JSI_TT_BOOLEAN; break;"
    },
    {
        "line": 65,
        "fullcodeline": "case OP_PUSHFUN: atyp=JSI_TT_FUNCTION; break;"
    },
    {
        "line": 66,
        "fullcodeline": "case OP_PUSHTHS: atyp=JSI_TT_OBJECT; break;"
    },
    {
        "line": 67,
        "fullcodeline": "case OP_PUSHREG: atyp=JSI_TT_REGEXP; break;"
    },
    {
        "line": 68,
        "fullcodeline": "case OP_PUSHUND: atyp=JSI_TT_VOID; break;"
    },
    {
        "line": 69,
        "fullcodeline": "case OP_PUSHNULL: atyp=JSI_TT_NULL; break;"
    },
    {
        "line": 70,
        "fullcodeline": "case OP_PUSHARG: atyp=JSI_TT_ARRAY; break;"
    },
    {
        "line": 71,
        "fullcodeline": "case OP_SUBSCRIPT: i++; break;"
    },
    {
        "line": 72,
        "fullcodeline": "case OP_ARRAY: atyp=JSI_TT_ARRAY; i=jsiPopArgs(argCodes, i); break;"
    },
    {
        "line": 73,
        "fullcodeline": "case OP_OBJECT: atyp=JSI_TT_OBJECT; i=jsiPopArgs(argCodes, i); break;"
    },
    {
        "line": 37,
        "fullcodeline": "snprintf(nbuf, sizeof(nbuf), \"%d-%d\", minArgs, maxArgs);"
    },
    {
        "line": 39,
        "fullcodeline": "snprintf(nbuf, sizeof(nbuf), \"%d\", maxArgs);"
    }
]