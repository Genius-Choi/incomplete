[
    {
        "line": 8,
        "fullcodeline": "char *myerror=NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "memset(payload,0,len);"
    },
    {
        "line": 19,
        "fullcodeline": "ms=&msg->first_line;"
    },
    {
        "line": 39,
        "fullcodeline": "h=htons(h);"
    },
    {
        "line": 41,
        "fullcodeline": "memcpy(payload,&h,2);"
    },
    {
        "line": 42,
        "fullcodeline": "h=htons((unsigned short int)msg->len);"
    },
    {
        "line": 45,
        "fullcodeline": "memcpy(&payload[MSG_LEN_IDX],&h,2);"
    },
    {
        "line": 52,
        "fullcodeline": "memcpy(payload+CONTENT_IDX,&h,2);"
    },
    {
        "line": 53,
        "fullcodeline": "payload[METHOD_CODE_IDX]=(unsigned char)(request?"
    },
    {
        "line": 59,
        "fullcodeline": "payload[URI_REASON_IDX]=(unsigned char)(request?"
    },
    {
        "line": 65,
        "fullcodeline": "payload[VERSION_IDX]=(unsigned char)(request?"
    },
    {
        "line": 86,
        "fullcodeline": "u=k;"
    },
    {
        "line": 87,
        "fullcodeline": "k++;"
    },
    {
        "line": 89,
        "fullcodeline": "i++;/*we do as if there was an extra header, that marks the end of"
    },
    {
        "line": 91,
        "fullcodeline": "j=k+3*i;"
    },
    {
        "line": 107,
        "fullcodeline": "payload[u]=(unsigned char)((k-u-1)/3);"
    },
    {
        "line": 108,
        "fullcodeline": "j=htons(j);"
    },
    {
        "line": 114,
        "fullcodeline": "memcpy(&payload[k+1],&j,2);"
    },
    {
        "line": 115,
        "fullcodeline": "k+=3;"
    },
    {
        "line": 116,
        "fullcodeline": "j=ntohs(j);"
    },
    {
        "line": 127,
        "fullcodeline": "memcpy(&payload[j],msg->buf,msg->len);"
    },
    {
        "line": 128,
        "fullcodeline": "LM_DBG(\"msglen = %d,msg starts at %d\\n\",msg->len,j);"
    },
    {
        "line": 129,
        "fullcodeline": "j=htons(j);"
    },
    {
        "line": 131,
        "fullcodeline": "memcpy(&payload[MSG_START_IDX],&j,2);"
    },
    {
        "line": 134,
        "fullcodeline": "LM_ERR(\"%s\\n\",myerror);"
    },
    {
        "line": 11,
        "fullcodeline": "if(len < MAX_ENCODED_MSG + MAX_MESSAGE_LEN)"
    },
    {
        "line": 14,
        "fullcodeline": "if(parse_headers(msg,HDR_EOH_F,0)<0){"
    },
    {
        "line": 20,
        "fullcodeline": "if(ms->type == SIP_REQUEST)"
    },
    {
        "line": 35,
        "fullcodeline": "if(h==32){/*statuscode wont be 32...*/"
    },
    {
        "line": 47,
        "fullcodeline": "if(0>(diff=(get_body(msg)-(msg->buf)))){"
    },
    {
        "line": 88,
        "fullcodeline": "for(i=0,hf=msg->headers;hf;hf=hf->next,i++);"
    },
    {
        "line": 92,
        "fullcodeline": "for(i=0,hf=msg->headers;hf;hf=hf->next,k+=3){"
    },
    {
        "line": 123,
        "fullcodeline": "if(len < j + msg->len + 1) {"
    },
    {
        "line": 132,
        "fullcodeline": "return GET_PAY_SIZE( payload );"
    },
    {
        "line": 135,
        "fullcodeline": "return -1;"
    },
    {
        "line": 15,
        "fullcodeline": "myerror=\"in parse_headers\";"
    },
    {
        "line": 21,
        "fullcodeline": "request=1;"
    },
    {
        "line": 36,
        "fullcodeline": "myerror=\"unknown message type\\n\";"
    },
    {
        "line": 48,
        "fullcodeline": "myerror=\"body starts before the message (uh ?)\";"
    },
    {
        "line": 56,
        "fullcodeline": "payload[METHOD_CODE_IDX+1]=(unsigned char)(request?"
    },
    {
        "line": 62,
        "fullcodeline": "payload[URI_REASON_IDX+1]=(unsigned char)(request?"
    },
    {
        "line": 82,
        "fullcodeline": "payload[REQUEST_URI_IDX]=(unsigned char)j;"
    },
    {
        "line": 83,
        "fullcodeline": "k=REQUEST_URI_IDX+1+j;"
    },
    {
        "line": 93,
        "fullcodeline": "payload[k]=(unsigned char)(hf->type & 0xFF);"
    },
    {
        "line": 94,
        "fullcodeline": "h=htons(j);"
    },
    {
        "line": 96,
        "fullcodeline": "memcpy(&payload[k+1],&h,2);"
    },
    {
        "line": 104,
        "fullcodeline": "j+=(unsigned short int)i;"
    },
    {
        "line": 124,
        "fullcodeline": "LM_ERR(\"not enough space to encode sip message\\n\");"
    },
    {
        "line": 12,
        "fullcodeline": "return -1;"
    },
    {
        "line": 29,
        "fullcodeline": "for(h=0;h<32;j=(0x01<<h),h++)"
    },
    {
        "line": 51,
        "fullcodeline": "h=htons((unsigned short int)diff);"
    },
    {
        "line": 54,
        "fullcodeline": "(ms->u.request.method.s-msg->buf):"
    },
    {
        "line": 55,
        "fullcodeline": "(ms->u.reply.status.s-msg->buf));"
    },
    {
        "line": 60,
        "fullcodeline": "(ms->u.request.uri.s-msg->buf):"
    },
    {
        "line": 61,
        "fullcodeline": "(ms->u.reply.reason.s-msg->buf));"
    },
    {
        "line": 66,
        "fullcodeline": "(ms->u.request.version.s-msg->buf):"
    },
    {
        "line": 67,
        "fullcodeline": "(ms->u.reply.version.s-msg->buf));"
    },
    {
        "line": 69,
        "fullcodeline": "if (parse_uri(ms->u.request.uri.s,ms->u.request.uri.len, &miuri)<0){"
    },
    {
        "line": 74,
        "fullcodeline": "if(0>(j=encode_uri2(msg->buf,"
    },
    {
        "line": 85,
        "fullcodeline": "k=REQUEST_URI_IDX;"
    },
    {
        "line": 98,
        "fullcodeline": "if(0>(i=encode_header(msg,hf,(unsigned char*)(payload+j),MAX_ENCODED_MSG+MAX_MESSAGE_LEN-j))){"
    },
    {
        "line": 125,
        "fullcodeline": "return -1;"
    },
    {
        "line": 22,
        "fullcodeline": "else if(ms->type == SIP_REPLY)"
    },
    {
        "line": 30,
        "fullcodeline": "if(j & ms->u.request.method_value)"
    },
    {
        "line": 70,
        "fullcodeline": "LM_ERR(\"<%.*s>\\n\",ms->u.request.uri.len,ms->u.request.uri.s);"
    },
    {
        "line": 71,
        "fullcodeline": "myerror=\"while parsing the R-URI\";"
    },
    {
        "line": 79,
        "fullcodeline": "myerror=\"ENCODE_MSG: ERROR while encoding the R-URI\";"
    },
    {
        "line": 99,
        "fullcodeline": "LM_ERR(\"encoding header %.*s\\n\",hf->name.len,hf->name.s);"
    },
    {
        "line": 23,
        "fullcodeline": "request=0;"
    },
    {
        "line": 25,
        "fullcodeline": "myerror=\"message is neither request nor response\";"
    },
    {
        "line": 75,
        "fullcodeline": "ms->u.request.method.s-msg->buf+ms->len,"
    },
    {
        "line": 77,
        "fullcodeline": "(unsigned char*)&payload[REQUEST_URI_IDX+1])))"
    }
]