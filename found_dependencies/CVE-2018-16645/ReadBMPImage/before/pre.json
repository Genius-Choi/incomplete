[
    {
        "line": 42,
        "fullcodeline": "magick[12],"
    },
    {
        "line": 54,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 55,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 59,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 60,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 61,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 62,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 72,
        "fullcodeline": "bmp_info.ba_offset=0;"
    },
    {
        "line": 73,
        "fullcodeline": "start_position=0;"
    },
    {
        "line": 74,
        "fullcodeline": "offset_bits=0;"
    },
    {
        "line": 75,
        "fullcodeline": "count=ReadBlob(image,2,magick);"
    },
    {
        "line": 56,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 63,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 71,
        "fullcodeline": "(void) memset(&bmp_info,0,sizeof(bmp_info));"
    },
    {
        "line": 76,
        "fullcodeline": "if (count != 2)"
    },
    {
        "line": 962,
        "fullcodeline": "} while (IsBMP(magick,2) != MagickFalse);"
    },
    {
        "line": 963,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 966,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 57,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 65,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 77,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 91,
        "fullcodeline": "bmp_info.ba_offset=0;"
    },
    {
        "line": 107,
        "fullcodeline": "bmp_info.file_size=ReadBlobLSBLong(image);"
    },
    {
        "line": 109,
        "fullcodeline": "bmp_info.offset_bits=ReadBlobLSBLong(image);"
    },
    {
        "line": 110,
        "fullcodeline": "bmp_info.size=ReadBlobLSBLong(image);"
    },
    {
        "line": 360,
        "fullcodeline": "image->columns=(size_t) MagickAbsoluteValue(bmp_info.width);"
    },
    {
        "line": 361,
        "fullcodeline": "image->rows=(size_t) MagickAbsoluteValue(bmp_info.height);"
    },
    {
        "line": 362,
        "fullcodeline": "image->depth=bmp_info.bits_per_pixel <= 8 ? bmp_info.bits_per_pixel : 8;"
    },
    {
        "line": 363,
        "fullcodeline": "image->alpha_trait=((bmp_info.alpha_mask != 0) &&"
    },
    {
        "line": 379,
        "fullcodeline": "image->units=PixelsPerCentimeterResolution;"
    },
    {
        "line": 383,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 439,
        "fullcodeline": "offset_bits=bmp_info.offset_bits;"
    },
    {
        "line": 440,
        "fullcodeline": "offset=SeekBlob(image,start_position+bmp_info.offset_bits,SEEK_SET);"
    },
    {
        "line": 445,
        "fullcodeline": "bytes_per_line=4*((image->columns*bmp_info.bits_per_pixel+31)/32);"
    },
    {
        "line": 446,
        "fullcodeline": "length=(size_t) bytes_per_line*image->rows;"
    },
    {
        "line": 937,
        "fullcodeline": "*magick='\\0';"
    },
    {
        "line": 944,
        "fullcodeline": "count=ReadBlob(image,2,magick);"
    },
    {
        "line": 66,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 101,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 108,
        "fullcodeline": "(void) ReadBlobLSBLong(image);"
    },
    {
        "line": 111,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 114,
        "fullcodeline": "if (bmp_info.size == 12)"
    },
    {
        "line": 323,
        "fullcodeline": "if (bmp_info.width <= 0)"
    },
    {
        "line": 325,
        "fullcodeline": "if (bmp_info.height == 0)"
    },
    {
        "line": 333,
        "fullcodeline": "if (bmp_info.bits_per_pixel < 16 &&"
    },
    {
        "line": 336,
        "fullcodeline": "if ((bmp_info.compression == 1) && (bmp_info.bits_per_pixel != 8))"
    },
    {
        "line": 338,
        "fullcodeline": "if ((bmp_info.compression == 2) && (bmp_info.bits_per_pixel != 4))"
    },
    {
        "line": 366,
        "fullcodeline": "if (bmp_info.bits_per_pixel < 16)"
    },
    {
        "line": 377,
        "fullcodeline": "image->resolution.x=(double) bmp_info.x_pixels/100.0;"
    },
    {
        "line": 378,
        "fullcodeline": "image->resolution.y=(double) bmp_info.y_pixels/100.0;"
    },
    {
        "line": 384,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 386,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 437,
        "fullcodeline": "if (bmp_info.offset_bits == offset_bits)"
    },
    {
        "line": 443,
        "fullcodeline": "if (bmp_info.compression == BI_RLE4)"
    },
    {
        "line": 449,
        "fullcodeline": "if ((bmp_info.compression == BI_RGB) ||"
    },
    {
        "line": 490,
        "fullcodeline": "if (bmp_info.compression == BI_RGB)"
    },
    {
        "line": 533,
        "fullcodeline": "(void) memset(&shift,0,sizeof(shift));"
    },
    {
        "line": 534,
        "fullcodeline": "(void) memset(&quantum_bits,0,sizeof(quantum_bits));"
    },
    {
        "line": 535,
        "fullcodeline": "if ((bmp_info.bits_per_pixel == 16) || (bmp_info.bits_per_pixel == 32))"
    },
    {
        "line": 906,
        "fullcodeline": "pixel_info=RelinquishVirtualMemory(pixel_info);"
    },
    {
        "line": 909,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 934,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 938,
        "fullcodeline": "if (bmp_info.ba_offset != 0)"
    },
    {
        "line": 965,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 90,
        "fullcodeline": "start_position=TellBlob(image)-2;"
    },
    {
        "line": 92,
        "fullcodeline": "while (LocaleNCompare((char *) magick,\"BA\",2) == 0)"
    },
    {
        "line": 95,
        "fullcodeline": "bmp_info.ba_offset=ReadBlobLSBLong(image);"
    },
    {
        "line": 97,
        "fullcodeline": "count=ReadBlob(image,2,magick);"
    },
    {
        "line": 104,
        "fullcodeline": "if ((count != 2) || ((LocaleNCompare((char *) magick,\"BM\",2) != 0) &&"
    },
    {
        "line": 106,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 120,
        "fullcodeline": "bmp_info.width=(ssize_t) ((short) ReadBlobLSBShort(image));"
    },
    {
        "line": 121,
        "fullcodeline": "bmp_info.height=(ssize_t) ((short) ReadBlobLSBShort(image));"
    },
    {
        "line": 122,
        "fullcodeline": "bmp_info.planes=ReadBlobLSBShort(image);"
    },
    {
        "line": 123,
        "fullcodeline": "bmp_info.bits_per_pixel=ReadBlobLSBShort(image);"
    },
    {
        "line": 124,
        "fullcodeline": "bmp_info.x_pixels=0;"
    },
    {
        "line": 125,
        "fullcodeline": "bmp_info.y_pixels=0;"
    },
    {
        "line": 126,
        "fullcodeline": "bmp_info.number_colors=0;"
    },
    {
        "line": 127,
        "fullcodeline": "bmp_info.compression=BI_RGB;"
    },
    {
        "line": 129,
        "fullcodeline": "bmp_info.alpha_mask=0;"
    },
    {
        "line": 315,
        "fullcodeline": "if ((MagickSizeType) bmp_info.file_size > GetBlobSize(image))"
    },
    {
        "line": 324,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"NegativeOrZeroImageSize\");"
    },
    {
        "line": 326,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"NegativeOrZeroImageSize\");"
    },
    {
        "line": 328,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"StaticPlanesValueNotEqualToOne\");"
    },
    {
        "line": 329,
        "fullcodeline": "if ((bmp_info.bits_per_pixel != 1) && (bmp_info.bits_per_pixel != 4) &&"
    },
    {
        "line": 331,
        "fullcodeline": "(bmp_info.bits_per_pixel != 24) && (bmp_info.bits_per_pixel != 32))"
    },
    {
        "line": 332,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnrecognizedBitsPerPixel\");"
    },
    {
        "line": 334,
        "fullcodeline": "bmp_info.number_colors > (1U << bmp_info.bits_per_pixel))"
    },
    {
        "line": 335,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnrecognizedNumberOfColors\");"
    },
    {
        "line": 337,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnrecognizedBitsPerPixel\");"
    },
    {
        "line": 339,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnrecognizedBitsPerPixel\");"
    },
    {
        "line": 340,
        "fullcodeline": "if ((bmp_info.compression == 3) && (bmp_info.bits_per_pixel < 16))"
    },
    {
        "line": 341,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnrecognizedBitsPerPixel\");"
    },
    {
        "line": 345,
        "fullcodeline": "image->compression=NoCompression;"
    },
    {
        "line": 349,
        "fullcodeline": "image->compression=RLECompression;"
    },
    {
        "line": 354,
        "fullcodeline": "ThrowReaderException(CoderError,\"JPEGCompressNotSupported\");"
    },
    {
        "line": 356,
        "fullcodeline": "ThrowReaderException(CoderError,\"PNGCompressNotSupported\");"
    },
    {
        "line": 358,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnrecognizedImageCompression\");"
    },
    {
        "line": 371,
        "fullcodeline": "image->storage_class=PseudoClass;"
    },
    {
        "line": 372,
        "fullcodeline": "image->colors=bmp_info.number_colors;"
    },
    {
        "line": 373,
        "fullcodeline": "one=1;"
    },
    {
        "line": 380,
        "fullcodeline": "if ((image_info->ping != MagickFalse) && (image_info->number_scenes != 0))"
    },
    {
        "line": 402,
        "fullcodeline": "bmp_colormap=(unsigned char *) AcquireQuantumMemory((size_t)"
    },
    {
        "line": 410,
        "fullcodeline": "offset=SeekBlob(image,start_position+14+bmp_info.size,SEEK_SET);"
    },
    {
        "line": 416,
        "fullcodeline": "count=ReadBlob(image,packet_size*image->colors,bmp_colormap);"
    },
    {
        "line": 423,
        "fullcodeline": "p=bmp_colormap;"
    },
    {
        "line": 438,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 442,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 444,
        "fullcodeline": "bmp_info.bits_per_pixel<<=1;"
    },
    {
        "line": 447,
        "fullcodeline": "if (((MagickSizeType) length/8) > GetBlobSize(image))"
    },
    {
        "line": 448,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"InsufficientImageDataInFile\");"
    },
    {
        "line": 450,
        "fullcodeline": "(bmp_info.compression == BI_BITFIELDS))"
    },
    {
        "line": 452,
        "fullcodeline": "pixel_info=AcquireVirtualMemory(image->rows,"
    },
    {
        "line": 456,
        "fullcodeline": "pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);"
    },
    {
        "line": 460,
        "fullcodeline": "count=ReadBlob(image,length,pixels);"
    },
    {
        "line": 518,
        "fullcodeline": "bmp_info.alpha_mask=image->alpha_trait != UndefinedPixelTrait ?"
    },
    {
        "line": 520,
        "fullcodeline": "bmp_info.red_mask=0x00ff0000U;"
    },
    {
        "line": 521,
        "fullcodeline": "bmp_info.green_mask=0x0000ff00U;"
    },
    {
        "line": 522,
        "fullcodeline": "bmp_info.blue_mask=0x000000ffU;"
    },
    {
        "line": 571,
        "fullcodeline": "sample=shift.red;"
    },
    {
        "line": 578,
        "fullcodeline": "quantum_bits.red=(MagickRealType) (sample-shift.red);"
    },
    {
        "line": 579,
        "fullcodeline": "sample=shift.green;"
    },
    {
        "line": 586,
        "fullcodeline": "quantum_bits.green=(MagickRealType) (sample-shift.green);"
    },
    {
        "line": 587,
        "fullcodeline": "sample=shift.blue;"
    },
    {
        "line": 594,
        "fullcodeline": "quantum_bits.blue=(MagickRealType) (sample-shift.blue);"
    },
    {
        "line": 595,
        "fullcodeline": "sample=shift.alpha;"
    },
    {
        "line": 602,
        "fullcodeline": "quantum_bits.alpha=(MagickRealType) (sample-shift.alpha);"
    },
    {
        "line": 911,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 923,
        "fullcodeline": "flipped_image=FlipImage(image,exception);"
    },
    {
        "line": 940,
        "fullcodeline": "offset=SeekBlob(image,(MagickOffsetType) bmp_info.ba_offset,SEEK_SET);"
    },
    {
        "line": 945,
        "fullcodeline": "if ((count == 2) && (IsBMP(magick,2) != MagickFalse))"
    },
    {
        "line": 950,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 956,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 957,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 94,
        "fullcodeline": "bmp_info.file_size=ReadBlobLSBLong(image);"
    },
    {
        "line": 96,
        "fullcodeline": "bmp_info.offset_bits=ReadBlobLSBLong(image);"
    },
    {
        "line": 98,
        "fullcodeline": "if (count != 2)"
    },
    {
        "line": 102,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\"  Magick: %c%c\","
    },
    {
        "line": 105,
        "fullcodeline": "(LocaleNCompare((char *) magick,\"CI\",2) != 0)))"
    },
    {
        "line": 112,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\"  BMP size: %u\","
    },
    {
        "line": 119,
        "fullcodeline": "(void) CopyMagickString(image->magick,\"BMP2\",MagickPathExtent);"
    },
    {
        "line": 130,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 146,
        "fullcodeline": "bmp_info.width=(ssize_t) ReadBlobLSBSignedLong(image);"
    },
    {
        "line": 147,
        "fullcodeline": "bmp_info.height=(ssize_t) ReadBlobLSBSignedLong(image);"
    },
    {
        "line": 148,
        "fullcodeline": "bmp_info.planes=ReadBlobLSBShort(image);"
    },
    {
        "line": 149,
        "fullcodeline": "bmp_info.bits_per_pixel=ReadBlobLSBShort(image);"
    },
    {
        "line": 150,
        "fullcodeline": "bmp_info.compression=ReadBlobLSBLong(image);"
    },
    {
        "line": 152,
        "fullcodeline": "bmp_info.x_pixels=ReadBlobLSBLong(image);"
    },
    {
        "line": 153,
        "fullcodeline": "bmp_info.y_pixels=ReadBlobLSBLong(image);"
    },
    {
        "line": 154,
        "fullcodeline": "bmp_info.number_colors=ReadBlobLSBLong(image);"
    },
    {
        "line": 212,
        "fullcodeline": "bmp_info.red_mask=ReadBlobLSBLong(image);"
    },
    {
        "line": 213,
        "fullcodeline": "bmp_info.green_mask=ReadBlobLSBLong(image);"
    },
    {
        "line": 214,
        "fullcodeline": "bmp_info.blue_mask=ReadBlobLSBLong(image);"
    },
    {
        "line": 316,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),CorruptImageError,"
    },
    {
        "line": 364,
        "fullcodeline": "(bmp_info.compression == BI_BITFIELDS)) ? BlendPixelTrait :"
    },
    {
        "line": 374,
        "fullcodeline": "if (image->colors == 0)"
    },
    {
        "line": 381,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 385,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 397,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 400,
        "fullcodeline": "if (AcquireImageColormap(image,image->colors,exception) == MagickFalse)"
    },
    {
        "line": 404,
        "fullcodeline": "if (bmp_colormap == (unsigned char *) NULL)"
    },
    {
        "line": 424,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 454,
        "fullcodeline": "if (pixel_info == (MemoryInfo *) NULL)"
    },
    {
        "line": 457,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 473,
        "fullcodeline": "pixel_info=AcquireVirtualMemory(image->rows,"
    },
    {
        "line": 477,
        "fullcodeline": "pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);"
    },
    {
        "line": 478,
        "fullcodeline": "status=DecodeImage(image,bmp_info.compression,pixels,"
    },
    {
        "line": 499,
        "fullcodeline": "if ((image->alpha_trait == UndefinedPixelTrait) && (bmp_info.size == 40) &&"
    },
    {
        "line": 523,
        "fullcodeline": "if (bmp_info.bits_per_pixel == 16)"
    },
    {
        "line": 543,
        "fullcodeline": "if (bmp_info.red_mask != 0)"
    },
    {
        "line": 550,
        "fullcodeline": "if (bmp_info.green_mask != 0)"
    },
    {
        "line": 557,
        "fullcodeline": "if (bmp_info.blue_mask != 0)"
    },
    {
        "line": 564,
        "fullcodeline": "if (bmp_info.alpha_mask != 0)"
    },
    {
        "line": 746,
        "fullcodeline": "bytes_per_line=2*(image->columns+image->columns % 2);"
    },
    {
        "line": 747,
        "fullcodeline": "image->storage_class=DirectClass;"
    },
    {
        "line": 807,
        "fullcodeline": "bytes_per_line=4*((image->columns*24+31)/32);"
    },
    {
        "line": 847,
        "fullcodeline": "bytes_per_line=4*(image->columns);"
    },
    {
        "line": 902,
        "fullcodeline": "pixel_info=RelinquishVirtualMemory(pixel_info);"
    },
    {
        "line": 903,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 924,
        "fullcodeline": "if (flipped_image != (Image *) NULL)"
    },
    {
        "line": 935,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 959,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 144,
        "fullcodeline": "if (bmp_info.size < 40)"
    },
    {
        "line": 151,
        "fullcodeline": "bmp_info.image_size=ReadBlobLSBLong(image);"
    },
    {
        "line": 155,
        "fullcodeline": "bmp_info.colors_important=ReadBlobLSBLong(image);"
    },
    {
        "line": 156,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 215,
        "fullcodeline": "if (bmp_info.size > 40)"
    },
    {
        "line": 278,
        "fullcodeline": "if (bmp_info.size > 108)"
    },
    {
        "line": 330,
        "fullcodeline": "(bmp_info.bits_per_pixel != 8) && (bmp_info.bits_per_pixel != 16) &&"
    },
    {
        "line": 375,
        "fullcodeline": "image->colors=one << bmp_info.bits_per_pixel;"
    },
    {
        "line": 401,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 405,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 406,
        "fullcodeline": "if ((bmp_info.size == 12) || (bmp_info.size == 64))"
    },
    {
        "line": 407,
        "fullcodeline": "packet_size=3;"
    },
    {
        "line": 413,
        "fullcodeline": "bmp_colormap=(unsigned char *) RelinquishMagickMemory(bmp_colormap);"
    },
    {
        "line": 414,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 417,
        "fullcodeline": "if (count != (ssize_t) (packet_size*image->colors))"
    },
    {
        "line": 419,
        "fullcodeline": "bmp_colormap=(unsigned char *) RelinquishMagickMemory(bmp_colormap);"
    },
    {
        "line": 420,
        "fullcodeline": "ThrowReaderException(CorruptImageError,"
    },
    {
        "line": 432,
        "fullcodeline": "bmp_colormap=(unsigned char *) RelinquishMagickMemory(bmp_colormap);"
    },
    {
        "line": 453,
        "fullcodeline": "MagickMax(bytes_per_line,image->columns+256UL)*sizeof(*pixels));"
    },
    {
        "line": 455,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 463,
        "fullcodeline": "pixel_info=RelinquishVirtualMemory(pixel_info);"
    },
    {
        "line": 464,
        "fullcodeline": "ThrowReaderException(CorruptImageError,"
    },
    {
        "line": 475,
        "fullcodeline": "if (pixel_info == (MemoryInfo *) NULL)"
    },
    {
        "line": 480,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 500,
        "fullcodeline": "(bmp_info.bits_per_pixel == 32))"
    },
    {
        "line": 502,
        "fullcodeline": "bytes_per_line=4*(image->columns);"
    },
    {
        "line": 528,
        "fullcodeline": "bmp_info.red_mask=0x00007c00U;"
    },
    {
        "line": 529,
        "fullcodeline": "bmp_info.green_mask=0x000003e0U;"
    },
    {
        "line": 530,
        "fullcodeline": "bmp_info.blue_mask=0x0000001fU;"
    },
    {
        "line": 572,
        "fullcodeline": "while (((bmp_info.red_mask << sample) & 0x80000000UL) != 0)"
    },
    {
        "line": 574,
        "fullcodeline": "sample++;"
    },
    {
        "line": 580,
        "fullcodeline": "while (((bmp_info.green_mask << sample) & 0x80000000UL) != 0)"
    },
    {
        "line": 582,
        "fullcodeline": "sample++;"
    },
    {
        "line": 588,
        "fullcodeline": "while (((bmp_info.blue_mask << sample) & 0x80000000UL) != 0)"
    },
    {
        "line": 590,
        "fullcodeline": "sample++;"
    },
    {
        "line": 596,
        "fullcodeline": "while (((bmp_info.alpha_mask << sample) & 0x80000000UL) != 0)"
    },
    {
        "line": 598,
        "fullcodeline": "sample++;"
    },
    {
        "line": 611,
        "fullcodeline": "for (y=(ssize_t) image->rows-1; y >= 0; y--)"
    },
    {
        "line": 647,
        "fullcodeline": "(void) SyncImage(image,exception);"
    },
    {
        "line": 655,
        "fullcodeline": "for (y=(ssize_t) image->rows-1; y >= 0; y--)"
    },
    {
        "line": 693,
        "fullcodeline": "(void) SyncImage(image,exception);"
    },
    {
        "line": 704,
        "fullcodeline": "for (y=(ssize_t) image->rows-1; y >= 0; y--)"
    },
    {
        "line": 727,
        "fullcodeline": "(void) SyncImage(image,exception);"
    },
    {
        "line": 739,
        "fullcodeline": "if ((bmp_info.compression != BI_RGB) &&"
    },
    {
        "line": 748,
        "fullcodeline": "for (y=(ssize_t) image->rows-1; y >= 0; y--)"
    },
    {
        "line": 808,
        "fullcodeline": "for (y=(ssize_t) image->rows-1; y >= 0; y--)"
    },
    {
        "line": 840,
        "fullcodeline": "if ((bmp_info.compression != BI_RGB) &&"
    },
    {
        "line": 848,
        "fullcodeline": "for (y=(ssize_t) image->rows-1; y >= 0; y--)"
    },
    {
        "line": 926,
        "fullcodeline": "DuplicateBlob(flipped_image,image);"
    },
    {
        "line": 927,
        "fullcodeline": "ReplaceImageInList(&image, flipped_image);"
    },
    {
        "line": 928,
        "fullcodeline": "image=flipped_image;"
    },
    {
        "line": 942,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 951,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 958,
        "fullcodeline": "GetBlobSize(image));"
    },
    {
        "line": 132,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 134,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 145,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"NonOS2HeaderSizeError\");"
    },
    {
        "line": 223,
        "fullcodeline": "bmp_info.alpha_mask=ReadBlobLSBLong(image);"
    },
    {
        "line": 229,
        "fullcodeline": "bmp_info.red_primary.x=(double) ReadBlobLSBLong(image)/BMP_DENOM;"
    },
    {
        "line": 230,
        "fullcodeline": "bmp_info.red_primary.y=(double) ReadBlobLSBLong(image)/BMP_DENOM;"
    },
    {
        "line": 231,
        "fullcodeline": "bmp_info.red_primary.z=(double) ReadBlobLSBLong(image)/BMP_DENOM;"
    },
    {
        "line": 232,
        "fullcodeline": "bmp_info.green_primary.x=(double) ReadBlobLSBLong(image)/BMP_DENOM;"
    },
    {
        "line": 233,
        "fullcodeline": "bmp_info.green_primary.y=(double) ReadBlobLSBLong(image)/BMP_DENOM;"
    },
    {
        "line": 234,
        "fullcodeline": "bmp_info.green_primary.z=(double) ReadBlobLSBLong(image)/BMP_DENOM;"
    },
    {
        "line": 235,
        "fullcodeline": "bmp_info.blue_primary.x=(double) ReadBlobLSBLong(image)/BMP_DENOM;"
    },
    {
        "line": 236,
        "fullcodeline": "bmp_info.blue_primary.y=(double) ReadBlobLSBLong(image)/BMP_DENOM;"
    },
    {
        "line": 237,
        "fullcodeline": "bmp_info.blue_primary.z=(double) ReadBlobLSBLong(image)/BMP_DENOM;"
    },
    {
        "line": 239,
        "fullcodeline": "gamma=bmp_info.red_primary.x+bmp_info.red_primary.y+"
    },
    {
        "line": 241,
        "fullcodeline": "gamma=PerceptibleReciprocal(gamma);"
    },
    {
        "line": 242,
        "fullcodeline": "bmp_info.red_primary.x*=gamma;"
    },
    {
        "line": 243,
        "fullcodeline": "bmp_info.red_primary.y*=gamma;"
    },
    {
        "line": 247,
        "fullcodeline": "gamma=bmp_info.green_primary.x+bmp_info.green_primary.y+"
    },
    {
        "line": 249,
        "fullcodeline": "gamma=PerceptibleReciprocal(gamma);"
    },
    {
        "line": 250,
        "fullcodeline": "bmp_info.green_primary.x*=gamma;"
    },
    {
        "line": 251,
        "fullcodeline": "bmp_info.green_primary.y*=gamma;"
    },
    {
        "line": 255,
        "fullcodeline": "gamma=bmp_info.blue_primary.x+bmp_info.blue_primary.y+"
    },
    {
        "line": 257,
        "fullcodeline": "gamma=PerceptibleReciprocal(gamma);"
    },
    {
        "line": 258,
        "fullcodeline": "bmp_info.blue_primary.x*=gamma;"
    },
    {
        "line": 259,
        "fullcodeline": "bmp_info.blue_primary.y*=gamma;"
    },
    {
        "line": 266,
        "fullcodeline": "bmp_info.gamma_scale.x=(double) ReadBlobLSBLong(image)/0x10000;"
    },
    {
        "line": 267,
        "fullcodeline": "bmp_info.gamma_scale.y=(double) ReadBlobLSBLong(image)/0x10000;"
    },
    {
        "line": 268,
        "fullcodeline": "bmp_info.gamma_scale.z=(double) ReadBlobLSBLong(image)/0x10000;"
    },
    {
        "line": 272,
        "fullcodeline": "image->gamma=(bmp_info.gamma_scale.x+bmp_info.gamma_scale.y+"
    },
    {
        "line": 286,
        "fullcodeline": "intent=ReadBlobLSBLong(image);"
    },
    {
        "line": 319,
        "fullcodeline": "if ((MagickSizeType) bmp_info.file_size < GetBlobSize(image))"
    },
    {
        "line": 398,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 403,
        "fullcodeline": "image->colors,4*sizeof(*bmp_colormap));"
    },
    {
        "line": 409,
        "fullcodeline": "packet_size=4;"
    },
    {
        "line": 458,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 474,
        "fullcodeline": "MagickMax(bytes_per_line,image->columns+256UL)*sizeof(*pixels));"
    },
    {
        "line": 476,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 479,
        "fullcodeline": "image->columns*image->rows);"
    },
    {
        "line": 482,
        "fullcodeline": "pixel_info=RelinquishVirtualMemory(pixel_info);"
    },
    {
        "line": 483,
        "fullcodeline": "ThrowReaderException(CorruptImageError,"
    },
    {
        "line": 503,
        "fullcodeline": "for (y=(ssize_t) image->rows-1; y >= 0; y--)"
    },
    {
        "line": 575,
        "fullcodeline": "if (sample >= 32U)"
    },
    {
        "line": 583,
        "fullcodeline": "if (sample >= 32U)"
    },
    {
        "line": 591,
        "fullcodeline": "if (sample >= 32U)"
    },
    {
        "line": 599,
        "fullcodeline": "if (sample >= 32U)"
    },
    {
        "line": 613,
        "fullcodeline": "p=pixels+(image->rows-y-1)*bytes_per_line;"
    },
    {
        "line": 614,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 657,
        "fullcodeline": "p=pixels+(image->rows-y-1)*bytes_per_line;"
    },
    {
        "line": 658,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 701,
        "fullcodeline": "if ((bmp_info.compression == BI_RLE8) ||"
    },
    {
        "line": 702,
        "fullcodeline": "(bmp_info.compression == BI_RLE4))"
    },
    {
        "line": 703,
        "fullcodeline": "bytes_per_line=image->columns;"
    },
    {
        "line": 706,
        "fullcodeline": "p=pixels+(image->rows-y-1)*bytes_per_line;"
    },
    {
        "line": 707,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 740,
        "fullcodeline": "(bmp_info.compression != BI_BITFIELDS))"
    },
    {
        "line": 742,
        "fullcodeline": "pixel_info=RelinquishVirtualMemory(pixel_info);"
    },
    {
        "line": 743,
        "fullcodeline": "ThrowReaderException(CorruptImageError,"
    },
    {
        "line": 750,
        "fullcodeline": "p=pixels+(image->rows-y-1)*bytes_per_line;"
    },
    {
        "line": 751,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 810,
        "fullcodeline": "p=pixels+(image->rows-y-1)*bytes_per_line;"
    },
    {
        "line": 811,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 841,
        "fullcodeline": "(bmp_info.compression != BI_BITFIELDS))"
    },
    {
        "line": 843,
        "fullcodeline": "pixel_info=RelinquishVirtualMemory(pixel_info);"
    },
    {
        "line": 844,
        "fullcodeline": "ThrowReaderException(CorruptImageError,"
    },
    {
        "line": 854,
        "fullcodeline": "p=pixels+(image->rows-y-1)*bytes_per_line;"
    },
    {
        "line": 855,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 954,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 158,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 160,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 163,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 209,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 224,
        "fullcodeline": "bmp_info.colorspace=ReadBlobLSBSignedLong(image);"
    },
    {
        "line": 310,
        "fullcodeline": "(void) ReadBlobLSBLong(image);  /* Profile data */"
    },
    {
        "line": 311,
        "fullcodeline": "(void) ReadBlobLSBLong(image);  /* Profile size */"
    },
    {
        "line": 312,
        "fullcodeline": "(void) ReadBlobLSBLong(image);  /* Reserved byte */"
    },
    {
        "line": 320,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),"
    },
    {
        "line": 426,
        "fullcodeline": "image->colormap[i].blue=(MagickRealType) ScaleCharToQuantum(*p++);"
    },
    {
        "line": 427,
        "fullcodeline": "image->colormap[i].green=(MagickRealType) ScaleCharToQuantum(*p++);"
    },
    {
        "line": 428,
        "fullcodeline": "image->colormap[i].red=(MagickRealType) ScaleCharToQuantum(*p++);"
    },
    {
        "line": 430,
        "fullcodeline": "p++;"
    },
    {
        "line": 505,
        "fullcodeline": "p=pixels+(image->rows-y-1)*bytes_per_line;"
    },
    {
        "line": 544,
        "fullcodeline": "while (((bmp_info.red_mask << shift.red) & 0x80000000UL) == 0)"
    },
    {
        "line": 546,
        "fullcodeline": "shift.red++;"
    },
    {
        "line": 551,
        "fullcodeline": "while (((bmp_info.green_mask << shift.green) & 0x80000000UL) == 0)"
    },
    {
        "line": 553,
        "fullcodeline": "shift.green++;"
    },
    {
        "line": 558,
        "fullcodeline": "while (((bmp_info.blue_mask << shift.blue) & 0x80000000UL) == 0)"
    },
    {
        "line": 560,
        "fullcodeline": "shift.blue++;"
    },
    {
        "line": 565,
        "fullcodeline": "while (((bmp_info.alpha_mask << shift.alpha) & 0x80000000UL) == 0)"
    },
    {
        "line": 567,
        "fullcodeline": "shift.alpha++;"
    },
    {
        "line": 615,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 617,
        "fullcodeline": "for (x=0; x < ((ssize_t) image->columns-7); x+=8)"
    },
    {
        "line": 637,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 639,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 659,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 661,
        "fullcodeline": "for (x=0; x < ((ssize_t) image->columns-1); x+=2)"
    },
    {
        "line": 683,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 685,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 708,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 710,
        "fullcodeline": "for (x=(ssize_t) image->columns; x != 0; --x)"
    },
    {
        "line": 716,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 718,
        "fullcodeline": "offset=(MagickOffsetType) (image->rows-y-1);"
    },
    {
        "line": 719,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 752,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 754,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 789,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 791,
        "fullcodeline": "offset=(MagickOffsetType) (image->rows-y-1);"
    },
    {
        "line": 792,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 812,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 814,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 822,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 824,
        "fullcodeline": "offset=(MagickOffsetType) (image->rows-y-1);"
    },
    {
        "line": 825,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 856,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 858,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 887,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 889,
        "fullcodeline": "offset=(MagickOffsetType) (image->rows-y-1);"
    },
    {
        "line": 890,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 276,
        "fullcodeline": "(void) CopyMagickString(image->magick,\"BMP3\",MagickPathExtent);"
    },
    {
        "line": 506,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 547,
        "fullcodeline": "if (shift.red >= 32U)"
    },
    {
        "line": 554,
        "fullcodeline": "if (shift.green >= 32U)"
    },
    {
        "line": 561,
        "fullcodeline": "if (shift.blue >= 32U)"
    },
    {
        "line": 568,
        "fullcodeline": "if (shift.alpha >= 32U)"
    },
    {
        "line": 625,
        "fullcodeline": "p++;"
    },
    {
        "line": 627,
        "fullcodeline": "if ((image->columns % 8) != 0)"
    },
    {
        "line": 641,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType)"
    },
    {
        "line": 663,
        "fullcodeline": "ValidateColormapValue(image,(ssize_t) ((*p >> 4) & 0x0f),&index,"
    },
    {
        "line": 665,
        "fullcodeline": "SetPixelIndex(image,index,q);"
    },
    {
        "line": 666,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 667,
        "fullcodeline": "ValidateColormapValue(image,(ssize_t) (*p & 0x0f),&index,exception);"
    },
    {
        "line": 668,
        "fullcodeline": "SetPixelIndex(image,index,q);"
    },
    {
        "line": 669,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 670,
        "fullcodeline": "p++;"
    },
    {
        "line": 672,
        "fullcodeline": "if ((image->columns % 2) != 0)"
    },
    {
        "line": 674,
        "fullcodeline": "ValidateColormapValue(image,(ssize_t) ((*p >> 4) & 0xf),&index,"
    },
    {
        "line": 676,
        "fullcodeline": "SetPixelIndex(image,index,q);"
    },
    {
        "line": 679,
        "fullcodeline": "x++;"
    },
    {
        "line": 687,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType)"
    },
    {
        "line": 712,
        "fullcodeline": "ValidateColormapValue(image,(ssize_t) *p++,&index,exception);"
    },
    {
        "line": 713,
        "fullcodeline": "SetPixelIndex(image,index,q);"
    },
    {
        "line": 714,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 721,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType)"
    },
    {
        "line": 756,
        "fullcodeline": "pixel=(unsigned int) (*p++);"
    },
    {
        "line": 757,
        "fullcodeline": "pixel|=(*p++) << 8;"
    },
    {
        "line": 758,
        "fullcodeline": "red=((pixel & bmp_info.red_mask) << shift.red) >> 16;"
    },
    {
        "line": 763,
        "fullcodeline": "green=((pixel & bmp_info.green_mask) << shift.green) >> 16;"
    },
    {
        "line": 770,
        "fullcodeline": "blue=((pixel & bmp_info.blue_mask) << shift.blue) >> 16;"
    },
    {
        "line": 775,
        "fullcodeline": "SetPixelRed(image,ScaleShortToQuantum((unsigned short) red),q);"
    },
    {
        "line": 776,
        "fullcodeline": "SetPixelGreen(image,ScaleShortToQuantum((unsigned short) green),q);"
    },
    {
        "line": 777,
        "fullcodeline": "SetPixelBlue(image,ScaleShortToQuantum((unsigned short) blue),q);"
    },
    {
        "line": 778,
        "fullcodeline": "SetPixelAlpha(image,OpaqueAlpha,q);"
    },
    {
        "line": 787,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 794,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType)"
    },
    {
        "line": 816,
        "fullcodeline": "SetPixelBlue(image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 817,
        "fullcodeline": "SetPixelGreen(image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 818,
        "fullcodeline": "SetPixelRed(image,ScaleCharToQuantum(*p++),q);"
    },
    {
        "line": 819,
        "fullcodeline": "SetPixelAlpha(image,OpaqueAlpha,q);"
    },
    {
        "line": 820,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 827,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType)"
    },
    {
        "line": 860,
        "fullcodeline": "pixel=(unsigned int) (*p++);"
    },
    {
        "line": 861,
        "fullcodeline": "pixel|=((unsigned int) *p++ << 8);"
    },
    {
        "line": 862,
        "fullcodeline": "pixel|=((unsigned int) *p++ << 16);"
    },
    {
        "line": 863,
        "fullcodeline": "pixel|=((unsigned int) *p++ << 24);"
    },
    {
        "line": 864,
        "fullcodeline": "red=((pixel & bmp_info.red_mask) << shift.red) >> 16;"
    },
    {
        "line": 867,
        "fullcodeline": "green=((pixel & bmp_info.green_mask) << shift.green) >> 16;"
    },
    {
        "line": 870,
        "fullcodeline": "blue=((pixel & bmp_info.blue_mask) << shift.blue) >> 16;"
    },
    {
        "line": 873,
        "fullcodeline": "SetPixelRed(image,ScaleShortToQuantum((unsigned short) red),q);"
    },
    {
        "line": 874,
        "fullcodeline": "SetPixelGreen(image,ScaleShortToQuantum((unsigned short) green),q);"
    },
    {
        "line": 875,
        "fullcodeline": "SetPixelBlue(image,ScaleShortToQuantum((unsigned short) blue),q);"
    },
    {
        "line": 876,
        "fullcodeline": "SetPixelAlpha(image,OpaqueAlpha,q);"
    },
    {
        "line": 885,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 892,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType)"
    },
    {
        "line": 291,
        "fullcodeline": "image->rendering_intent=SaturationIntent;"
    },
    {
        "line": 296,
        "fullcodeline": "image->rendering_intent=RelativeIntent;"
    },
    {
        "line": 301,
        "fullcodeline": "image->rendering_intent=PerceptualIntent;"
    },
    {
        "line": 306,
        "fullcodeline": "image->rendering_intent=AbsoluteIntent;"
    },
    {
        "line": 514,
        "fullcodeline": "p+=4;"
    },
    {
        "line": 619,
        "fullcodeline": "for (bit=0; bit < 8; bit++)"
    },
    {
        "line": 629,
        "fullcodeline": "for (bit=0; bit < (image->columns % 8); bit++)"
    },
    {
        "line": 643,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 677,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 689,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 723,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 759,
        "fullcodeline": "if (quantum_bits.red == 5)"
    },
    {
        "line": 761,
        "fullcodeline": "if (quantum_bits.red <= 8)"
    },
    {
        "line": 764,
        "fullcodeline": "if (quantum_bits.green == 5)"
    },
    {
        "line": 766,
        "fullcodeline": "if (quantum_bits.green == 6)"
    },
    {
        "line": 768,
        "fullcodeline": "if (quantum_bits.green <= 8)"
    },
    {
        "line": 771,
        "fullcodeline": "if (quantum_bits.blue == 5)"
    },
    {
        "line": 773,
        "fullcodeline": "if (quantum_bits.blue <= 8)"
    },
    {
        "line": 779,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 796,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 829,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 865,
        "fullcodeline": "if (quantum_bits.red == 8)"
    },
    {
        "line": 868,
        "fullcodeline": "if (quantum_bits.green == 8)"
    },
    {
        "line": 871,
        "fullcodeline": "if (quantum_bits.blue == 8)"
    },
    {
        "line": 877,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 894,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 169,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 175,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 181,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 187,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 193,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 199,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 205,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 621,
        "fullcodeline": "index=(Quantum) (((*p) & (0x80 >> bit)) != 0 ? 0x01 : 0x00);"
    },
    {
        "line": 622,
        "fullcodeline": "SetPixelIndex(image,index,q);"
    },
    {
        "line": 623,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 631,
        "fullcodeline": "index=(Quantum) (((*p) & (0x80 >> bit)) != 0 ? 0x01 : 0x00);"
    },
    {
        "line": 632,
        "fullcodeline": "SetPixelIndex(image,index,q);"
    },
    {
        "line": 633,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 760,
        "fullcodeline": "red|=((red & 0xe000) >> 5);"
    },
    {
        "line": 762,
        "fullcodeline": "red|=((red & 0xff00) >> 8);"
    },
    {
        "line": 765,
        "fullcodeline": "green|=((green & 0xe000) >> 5);"
    },
    {
        "line": 767,
        "fullcodeline": "green|=((green & 0xc000) >> 6);"
    },
    {
        "line": 769,
        "fullcodeline": "green|=((green & 0xff00) >> 8);"
    },
    {
        "line": 772,
        "fullcodeline": "blue|=((blue & 0xe000) >> 5);"
    },
    {
        "line": 774,
        "fullcodeline": "blue|=((blue & 0xff00) >> 8);"
    },
    {
        "line": 781,
        "fullcodeline": "alpha=((pixel & bmp_info.alpha_mask) << shift.alpha) >> 16;"
    },
    {
        "line": 784,
        "fullcodeline": "SetPixelAlpha(image,ScaleShortToQuantum("
    },
    {
        "line": 866,
        "fullcodeline": "red|=(red >> 8);"
    },
    {
        "line": 869,
        "fullcodeline": "green|=(green >> 8);"
    },
    {
        "line": 872,
        "fullcodeline": "blue|=(blue >> 8);"
    },
    {
        "line": 879,
        "fullcodeline": "alpha=((pixel & bmp_info.alpha_mask) << shift.alpha) >> 16;"
    },
    {
        "line": 882,
        "fullcodeline": "SetPixelAlpha(image,ScaleShortToQuantum("
    },
    {
        "line": 510,
        "fullcodeline": "image->alpha_trait=BlendPixelTrait;"
    },
    {
        "line": 511,
        "fullcodeline": "y=-1;"
    },
    {
        "line": 642,
        "fullcodeline": "(image->rows-y),image->rows);"
    },
    {
        "line": 688,
        "fullcodeline": "(image->rows-y),image->rows);"
    },
    {
        "line": 722,
        "fullcodeline": "(image->rows-y),image->rows);"
    },
    {
        "line": 782,
        "fullcodeline": "if (quantum_bits.alpha <= 8)"
    },
    {
        "line": 795,
        "fullcodeline": "(image->rows-y),image->rows);"
    },
    {
        "line": 828,
        "fullcodeline": "(image->rows-y),image->rows);"
    },
    {
        "line": 880,
        "fullcodeline": "if (quantum_bits.alpha == 8)"
    },
    {
        "line": 893,
        "fullcodeline": "(image->rows-y),image->rows);"
    },
    {
        "line": 783,
        "fullcodeline": "alpha|=((alpha & 0xff00) >> 8);"
    },
    {
        "line": 881,
        "fullcodeline": "alpha|=(alpha >> 8);"
    }
]