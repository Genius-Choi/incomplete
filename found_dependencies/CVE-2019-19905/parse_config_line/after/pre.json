[
    {
        "line": 10,
        "fullcodeline": "char *bufp, buf[4 * BUFSZ];"
    },
    {
        "line": 11,
        "fullcodeline": "uchar translate[MAXPCHARS];"
    },
    {
        "line": 13,
        "fullcodeline": "boolean retval = TRUE;"
    },
    {
        "line": 17,
        "fullcodeline": "(void) strncpy(buf, origbuf, sizeof buf - 1);"
    },
    {
        "line": 18,
        "fullcodeline": "buf[sizeof buf - 1] = '\\0'; /* strncpy not guaranteed to NUL terminate */"
    },
    {
        "line": 22,
        "fullcodeline": "mungspaces(buf);"
    },
    {
        "line": 25,
        "fullcodeline": "bufp = find_optparam(buf);"
    },
    {
        "line": 31,
        "fullcodeline": "++bufp;"
    },
    {
        "line": 15,
        "fullcodeline": "while (*origbuf == ' ' || *origbuf == '\\t') /* skip leading whitespace */"
    },
    {
        "line": 16,
        "fullcodeline": "++origbuf;                   /* (caller probably already did this) */"
    },
    {
        "line": 26,
        "fullcodeline": "if (!bufp) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (*bufp == ' ')"
    },
    {
        "line": 39,
        "fullcodeline": "if (match_varname(buf, \"OPTIONS\", 4)) {"
    },
    {
        "line": 27,
        "fullcodeline": "config_error_add(\"Not a config statement, missing '='\");"
    },
    {
        "line": 33,
        "fullcodeline": "++bufp;"
    },
    {
        "line": 43,
        "fullcodeline": "bufp = find_optparam(origbuf);"
    },
    {
        "line": 44,
        "fullcodeline": "++bufp; /* skip '='; parseoptions() handles spaces */"
    },
    {
        "line": 46,
        "fullcodeline": "if (!parseoptions(bufp, TRUE, TRUE))"
    },
    {
        "line": 47,
        "fullcodeline": "retval = FALSE;"
    },
    {
        "line": 48,
        "fullcodeline": "} else if (match_varname(buf, \"AUTOPICKUP_EXCEPTION\", 5)) {"
    },
    {
        "line": 50,
        "fullcodeline": "} else if (match_varname(buf, \"BINDINGS\", 4)) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (!parsebindings(bufp))"
    },
    {
        "line": 52,
        "fullcodeline": "retval = FALSE;"
    },
    {
        "line": 53,
        "fullcodeline": "} else if (match_varname(buf, \"AUTOCOMPLETE\", 5)) {"
    },
    {
        "line": 55,
        "fullcodeline": "} else if (match_varname(buf, \"MSGTYPE\", 7)) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (!msgtype_parse_add(bufp))"
    },
    {
        "line": 57,
        "fullcodeline": "retval = FALSE;"
    },
    {
        "line": 126,
        "fullcodeline": "} else if (match_varname(buf, \"NAME\", 4)) {"
    },
    {
        "line": 127,
        "fullcodeline": "(void) strncpy(plname, bufp, PL_NSIZ - 1);"
    },
    {
        "line": 128,
        "fullcodeline": "} else if (match_varname(buf, \"ROLE\", 4)"
    },
    {
        "line": 129,
        "fullcodeline": "|| match_varname(buf, \"CHARACTER\", 4)) {"
    },
    {
        "line": 130,
        "fullcodeline": "if ((len = str2role(bufp)) >= 0)"
    },
    {
        "line": 132,
        "fullcodeline": "} else if (match_varname(buf, \"DOGNAME\", 3)) {"
    },
    {
        "line": 133,
        "fullcodeline": "(void) strncpy(dogname, bufp, PL_PSIZ - 1);"
    },
    {
        "line": 134,
        "fullcodeline": "} else if (match_varname(buf, \"CATNAME\", 3)) {"
    },
    {
        "line": 135,
        "fullcodeline": "(void) strncpy(catname, bufp, PL_PSIZ - 1);"
    },
    {
        "line": 313,
        "fullcodeline": "} else if (match_varname(buf, \"BOULDER\", 3)) {"
    },
    {
        "line": 314,
        "fullcodeline": "(void) get_uchars(bufp, &ov_primary_syms[SYM_BOULDER + SYM_OFF_X],"
    },
    {
        "line": 316,
        "fullcodeline": "} else if (match_varname(buf, \"MENUCOLOR\", 9)) {"
    },
    {
        "line": 317,
        "fullcodeline": "if (!add_menu_coloring(bufp))"
    },
    {
        "line": 318,
        "fullcodeline": "retval = FALSE;"
    },
    {
        "line": 319,
        "fullcodeline": "} else if (match_varname(buf, \"HILITE_STATUS\", 6)) {"
    },
    {
        "line": 324,
        "fullcodeline": "} else if (match_varname(buf, \"WARNINGS\", 5)) {"
    },
    {
        "line": 325,
        "fullcodeline": "(void) get_uchars(bufp, translate, FALSE, WARNCOUNT,"
    },
    {
        "line": 328,
        "fullcodeline": "} else if (match_varname(buf, \"ROGUESYMBOLS\", 4)) {"
    },
    {
        "line": 329,
        "fullcodeline": "if (!parsesymbols(bufp, ROGUESET)) {"
    },
    {
        "line": 331,
        "fullcodeline": "retval = FALSE;"
    },
    {
        "line": 334,
        "fullcodeline": "} else if (match_varname(buf, \"SYMBOLS\", 4)) {"
    },
    {
        "line": 335,
        "fullcodeline": "if (!parsesymbols(bufp, PRIMARY)) {"
    },
    {
        "line": 337,
        "fullcodeline": "retval = FALSE;"
    },
    {
        "line": 340,
        "fullcodeline": "} else if (match_varname(buf, \"WIZKIT\", 6)) {"
    },
    {
        "line": 341,
        "fullcodeline": "(void) strncpy(wizkit, bufp, WIZKIT_MAX - 1);"
    },
    {
        "line": 459,
        "fullcodeline": "} else if (match_varname(buf, \"QT_TILEWIDTH\", 12)) {"
    },
    {
        "line": 466,
        "fullcodeline": "} else if (match_varname(buf, \"QT_TILEHEIGHT\", 13)) {"
    },
    {
        "line": 473,
        "fullcodeline": "} else if (match_varname(buf, \"QT_FONTSIZE\", 11)) {"
    }
]