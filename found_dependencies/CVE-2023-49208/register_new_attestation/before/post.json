[
    {
        "line": 2,
        "fullcodeline": "json_t * j_return, * j_client_data = NULL, * j_error, * j_result, * j_pubkey = NULL, * j_cert = NULL, * j_query, * j_element = NULL;"
    },
    {
        "line": 3,
        "fullcodeline": "unsigned char * client_data = NULL, * challenge_b64 = NULL, * att_obj = NULL, * cbor_bs_handle = NULL, rpid_hash[32], * fmt = NULL, * credential_id_b64 = NULL, * cbor_auth_data, * cred_pub_key, cert_x[256], cert_y[256], pubkey_export[1024];"
    },
    {
        "line": 4,
        "fullcodeline": "char * challenge_hash = NULL, * message = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "const char * rpid = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "size_t client_data_len = 0, challenge_b64_len = 0, att_obj_len = 0, rpid_hash_len = 32, fmt_len = 0, credential_id_len = 0, credential_id_b64_len, cbor_auth_data_len, cred_pub_key_len, cert_x_len = 0, cert_y_len = 0, pubkey_export_len = 1024, index = 0, cbor_bs_handle_len, rpid_len;"
    },
    {
        "line": 7,
        "fullcodeline": "uint32_t counter = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "int ret = G_OK, res, status, has_x = 0, has_y = 0, key_type_valid = 0, key_alg_valid = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "cbor_item_t * item = NULL, * key = NULL, * auth_data = NULL, * att_stmt = NULL, * cbor_cose = NULL, * cbor_key, * cbor_value;"
    },
    {
        "line": 12,
        "fullcodeline": "gnutls_pubkey_t g_key = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "gnutls_ecc_curve_t curve = GNUTLS_ECC_CURVE_INVALID;"
    },
    {
        "line": 16,
        "fullcodeline": "if (j_scheme_data != NULL) {"
    },
    {
        "line": 17,
        "fullcodeline": "j_error = json_array();"
    },
    {
        "line": 18,
        "fullcodeline": "if (j_error != NULL) {"
    },
    {
        "line": 484,
        "fullcodeline": "j_return = json_pack(\"{sis[s]}\", \"result\", G_ERROR_PARAM, \"error\", \"scheme_data mandatory\");"
    },
    {
        "line": 463,
        "fullcodeline": "json_decref(j_error);"
    },
    {
        "line": 464,
        "fullcodeline": "json_decref(j_client_data);"
    },
    {
        "line": 465,
        "fullcodeline": "json_decref(j_pubkey);"
    },
    {
        "line": 466,
        "fullcodeline": "json_decref(j_cert);"
    },
    {
        "line": 467,
        "fullcodeline": "o_free(client_data);"
    },
    {
        "line": 468,
        "fullcodeline": "o_free(challenge_b64);"
    },
    {
        "line": 469,
        "fullcodeline": "o_free(challenge_hash);"
    },
    {
        "line": 470,
        "fullcodeline": "o_free(att_obj);"
    },
    {
        "line": 471,
        "fullcodeline": "o_free(credential_id_b64);"
    },
    {
        "line": 472,
        "fullcodeline": "gnutls_pubkey_deinit(g_key);"
    },
    {
        "line": 413,
        "fullcodeline": "if (ret != G_OK) {"
    },
    {
        "line": 473,
        "fullcodeline": "if (item != NULL) {"
    },
    {
        "line": 476,
        "fullcodeline": "if (cbor_cose != NULL) {"
    },
    {
        "line": 480,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"register_new_attestation - Error allocating resources for j_error\");"
    },
    {
        "line": 481,
        "fullcodeline": "j_return = json_pack(\"{si}\", \"result\", G_ERROR);"
    },
    {
        "line": 42,
        "fullcodeline": "client_data[client_data_len] = '\\0';"
    },
    {
        "line": 43,
        "fullcodeline": "j_client_data = json_loads((const char *)client_data, JSON_DECODE_ANY, NULL);"
    },
    {
        "line": 72,
        "fullcodeline": "challenge_b64[challenge_b64_len] = '\\0';"
    },
    {
        "line": 117,
        "fullcodeline": "item = cbor_load(att_obj, att_obj_len, &cbor_result);"
    },
    {
        "line": 174,
        "fullcodeline": "cbor_bs_handle = cbor_bytestring_handle(auth_data);"
    },
    {
        "line": 175,
        "fullcodeline": "cbor_bs_handle_len = cbor_bytestring_length(auth_data);"
    },
    {
        "line": 225,
        "fullcodeline": "credential_id_len = (size_t)(cbor_bs_handle[CRED_ID_L_OFFSET+1] | (cbor_bs_handle[CRED_ID_L_OFFSET] << 8));"
    },
    {
        "line": 232,
        "fullcodeline": "credential_id_b64 = o_malloc(credential_id_len*2);"
    },
    {
        "line": 257,
        "fullcodeline": "cbor_auth_data_len = cbor_bytestring_length(auth_data);"
    },
    {
        "line": 258,
        "fullcodeline": "cbor_auth_data = cbor_bytestring_handle(auth_data);"
    },
    {
        "line": 260,
        "fullcodeline": "cred_pub_key = cbor_auth_data+CREDENTIAL_ID_OFFSET+credential_id_len;"
    },
    {
        "line": 261,
        "fullcodeline": "cred_pub_key_len = cbor_auth_data_len-CREDENTIAL_ID_OFFSET-credential_id_len;"
    },
    {
        "line": 262,
        "fullcodeline": "cbor_cose = cbor_load(cred_pub_key, cred_pub_key_len, &cbor_result);"
    },
    {
        "line": 474,
        "fullcodeline": "cbor_decref(&item);"
    },
    {
        "line": 477,
        "fullcodeline": "cbor_decref(&cbor_cose);"
    },
    {
        "line": 20,
        "fullcodeline": "if (json_string_null_or_empty(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"rawId\"))) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (json_string_null_or_empty(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"clientDataJSON\"))) {"
    },
    {
        "line": 30,
        "fullcodeline": "if ((client_data = o_malloc(json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"clientDataJSON\"))+4)) == NULL) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (!o_base64_decode((const unsigned char *)json_string_value(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"clientDataJSON\")), json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"clientDataJSON\")), client_data, &client_data_len)) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (j_client_data == NULL) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (0 != o_strcmp(json_string_value(json_object_get(j_client_data, \"type\")), \"webauthn.create\")) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (json_string_null_or_empty(json_object_get(j_client_data, \"challenge\"))) {"
    },
    {
        "line": 61,
        "fullcodeline": "if ((challenge_b64 = o_malloc(json_string_length(json_object_get(j_client_data, \"challenge\"))+3)) == NULL) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (!o_base64url_2_base64((unsigned char *)json_string_value(json_object_get(j_client_data, \"challenge\")), json_string_length(json_object_get(j_client_data, \"challenge\")), challenge_b64, &challenge_b64_len)) {"
    },
    {
        "line": 73,
        "fullcodeline": "if ((challenge_hash = generate_hash(config->hash_algorithm, (const char *)challenge_b64)) == NULL) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (0 != o_strcmp(challenge_hash, json_string_value(json_object_get(j_credential, \"challenge_hash\")))) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (json_string_null_or_empty(json_object_get(j_client_data, \"origin\"))) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (0 != o_strcmp(json_string_value(json_object_get(j_params, \"rp-origin\")), json_string_value(json_object_get(j_client_data, \"origin\")))) {"
    },
    {
        "line": 99,
        "fullcodeline": "if (json_string_null_or_empty(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"attestationObject\"))) {"
    },
    {
        "line": 105,
        "fullcodeline": "if ((att_obj = o_malloc(json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"attestationObject\"))+4)) == NULL) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (!o_base64_decode((unsigned char *)json_string_value(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"attestationObject\")), json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"attestationObject\")), att_obj, &att_obj_len)) {"
    },
    {
        "line": 118,
        "fullcodeline": "if (cbor_result.error.code != CBOR_ERR_NONE) {"
    },
    {
        "line": 123,
        "fullcodeline": "if (!cbor_isa_map(item)) {"
    },
    {
        "line": 130,
        "fullcodeline": "if (cbor_map_size(item) != 3) {"
    },
    {
        "line": 136,
        "fullcodeline": "for (i=0; i<3; i++) {"
    },
    {
        "line": 168,
        "fullcodeline": "if (auth_data == NULL) {"
    },
    {
        "line": 176,
        "fullcodeline": "if (o_strstr(json_string_value(json_object_get(j_params, \"rp-origin\")), \"://\") == NULL) {"
    },
    {
        "line": 183,
        "fullcodeline": "if (o_strstr(json_string_value(json_object_get(j_params, \"rp-origin\")), \"://\") != NULL) {"
    },
    {
        "line": 188,
        "fullcodeline": "if (o_strchr(rpid, ':') != NULL) {"
    },
    {
        "line": 194,
        "fullcodeline": "if (!generate_digest_raw(digest_SHA256, (unsigned char *)rpid, rpid_len, rpid_hash, &rpid_hash_len)) {"
    },
    {
        "line": 201,
        "fullcodeline": "if (0 != memcmp(cbor_bs_handle, rpid_hash, rpid_hash_len)) {"
    },
    {
        "line": 208,
        "fullcodeline": "if (!(cbor_bs_handle[FLAGS_OFFSET] & FLAG_USER_PRESENT)) {"
    },
    {
        "line": 213,
        "fullcodeline": "if (!(cbor_bs_handle[FLAGS_OFFSET] & FLAG_AT)) {"
    },
    {
        "line": 226,
        "fullcodeline": "if (cbor_bs_handle_len < CRED_ID_L_OFFSET+2+credential_id_len) {"
    },
    {
        "line": 233,
        "fullcodeline": "if (credential_id_b64 == NULL) {"
    },
    {
        "line": 240,
        "fullcodeline": "if (!o_base64_encode(cbor_bs_handle+CRED_ID_L_OFFSET+2, credential_id_len, credential_id_b64, &credential_id_b64_len)) {"
    },
    {
        "line": 248,
        "fullcodeline": "if (memcmp(credential_id_b64, json_string_value(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"rawId\")), MIN(json_string_length(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"rawId\")), credential_id_b64_len))) {"
    },
    {
        "line": 263,
        "fullcodeline": "if (cbor_result.error.code != CBOR_ERR_NONE) {"
    },
    {
        "line": 270,
        "fullcodeline": "if (!cbor_isa_map(cbor_cose)) {"
    },
    {
        "line": 277,
        "fullcodeline": "for (i=0; i<cbor_map_size(cbor_cose); i++) {"
    },
    {
        "line": 312,
        "fullcodeline": "if (!has_x || !has_y || !key_type_valid || !key_alg_valid) {"
    },
    {
        "line": 319,
        "fullcodeline": "if (gnutls_pubkey_init(&g_key)) {"
    },
    {
        "line": 325,
        "fullcodeline": "if (gnutls_pubkey_import_ecc_raw(g_key, curve, &g_x, &g_y) < 0) {"
    },
    {
        "line": 331,
        "fullcodeline": "if ((ret = gnutls_pubkey_export(g_key, GNUTLS_X509_FMT_PEM, pubkey_export, &pubkey_export_len)) < 0) {"
    },
    {
        "line": 339,
        "fullcodeline": "if (0 == o_strncmp(\"packed\", (char *)fmt, MIN(fmt_len, o_strlen(\"packed\"))) && (json_object_get(json_object_get(j_params, \"fmt\"), \"packed\") == json_true())) {"
    },
    {
        "line": 414,
        "fullcodeline": "if (json_array_size(j_error)) {"
    },
    {
        "line": 434,
        "fullcodeline": "counter = (uint32_t)(cbor_bs_handle[COUNTER_OFFSET+3] | (cbor_bs_handle[COUNTER_OFFSET+2] << 8) | (cbor_bs_handle[COUNTER_OFFSET+1] << 16) | (cbor_bs_handle[COUNTER_OFFSET] << 24));"
    },
    {
        "line": 436,
        "fullcodeline": "j_query = json_pack(\"{sss{siss%sOss%sOsi}s{sO}}\","
    },
    {
        "line": 457,
        "fullcodeline": "res = h_update(config->conn, j_query, NULL);"
    },
    {
        "line": 458,
        "fullcodeline": "json_decref(j_query);"
    },
    {
        "line": 21,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"rawId mandatory\"));"
    },
    {
        "line": 22,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 26,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"clientDataJSON mandatory\"));"
    },
    {
        "line": 27,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 31,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"register_new_attestation - Error allocating resources for client_data\");"
    },
    {
        "line": 32,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Internal error\"));"
    },
    {
        "line": 33,
        "fullcodeline": "ret = G_ERROR_MEMORY;"
    },
    {
        "line": 37,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"register_new_attestation - Error o_base64_decode client_data\");"
    },
    {
        "line": 38,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Internal error\"));"
    },
    {
        "line": 39,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 45,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Error parsing JSON client data\"));"
    },
    {
        "line": 46,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 51,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"clientDataJSON.type invalid\"));"
    },
    {
        "line": 52,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 57,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"clientDataJSON.challenge mandatory\"));"
    },
    {
        "line": 58,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 62,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"register_new_attestation - Error allocating resources for challenge_b64\");"
    },
    {
        "line": 63,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Internal error\"));"
    },
    {
        "line": 64,
        "fullcodeline": "ret = G_ERROR_MEMORY;"
    },
    {
        "line": 68,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"clientDataJSON.challenge invalid format\"));"
    },
    {
        "line": 69,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 74,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"register_new_attestation - Error generate_hash for challenge_b64\");"
    },
    {
        "line": 75,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Internal error\"));"
    },
    {
        "line": 76,
        "fullcodeline": "ret = G_ERROR;"
    },
    {
        "line": 80,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"clientDataJSON.challenge invalid\"));"
    },
    {
        "line": 81,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 86,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"clientDataJSON.origin mandatory\"));"
    },
    {
        "line": 87,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 91,
        "fullcodeline": "message = msprintf(\"clientDataJSON.origin invalid - Client send %s, required %s\", json_string_value(json_object_get(j_client_data, \"origin\")), json_string_value(json_object_get(j_params, \"rp-origin\")));"
    },
    {
        "line": 92,
        "fullcodeline": "json_array_append_new(j_error, json_string(message));"
    },
    {
        "line": 93,
        "fullcodeline": "o_free(message);"
    },
    {
        "line": 94,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 100,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"attestationObject required\"));"
    },
    {
        "line": 101,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 106,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"register_new_attestation - Error allocating resources for o_malloc\");"
    },
    {
        "line": 107,
        "fullcodeline": "ret = G_ERROR_MEMORY;"
    },
    {
        "line": 111,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"attestationObject invalid base64\"));"
    },
    {
        "line": 112,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 119,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"attestationObject invalid cbor\"));"
    },
    {
        "line": 120,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 124,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"attestationObject invalid cbor item\"));"
    },
    {
        "line": 125,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 131,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"attestationObject invalid cbor item\"));"
    },
    {
        "line": 132,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 169,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"authData invalid\"));"
    },
    {
        "line": 170,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 177,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"register_new_attestation - rp-origin invalid\");"
    },
    {
        "line": 178,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Internal error\"));"
    },
    {
        "line": 179,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 184,
        "fullcodeline": "rpid = o_strstr(json_string_value(json_object_get(j_params, \"rp-origin\")), \"://\")+3;"
    },
    {
        "line": 189,
        "fullcodeline": "rpid_len = (size_t)(o_strchr(rpid, ':') - rpid);"
    },
    {
        "line": 195,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"register_new_attestation - Error generate_digest_raw\");"
    },
    {
        "line": 196,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Internal error\"));"
    },
    {
        "line": 197,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 202,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"authData.rpIdHash invalid\"));"
    },
    {
        "line": 203,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 209,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"authData.userPresent not set\"));"
    },
    {
        "line": 210,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 214,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"authData.Attested credential data not set\"));"
    },
    {
        "line": 215,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 227,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"auth_data invalid size\"));"
    },
    {
        "line": 228,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 234,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"register_new_attestation - Error o_malloc for credential_id_b64\");"
    },
    {
        "line": 235,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Internal error\"));"
    },
    {
        "line": 236,
        "fullcodeline": "ret = G_ERROR_MEMORY;"
    },
    {
        "line": 241,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"register_new_attestation - Error o_base64_encode for credential_id_b64\");"
    },
    {
        "line": 242,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Internal error\"));"
    },
    {
        "line": 243,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 249,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Invalid rawId\"));"
    },
    {
        "line": 250,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 264,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Invalid COSE key\"));"
    },
    {
        "line": 265,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"register_new_attestation - Error cbor_load cbor_cose\");"
    },
    {
        "line": 266,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 271,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Invalid COSE key\"));"
    },
    {
        "line": 272,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"register_new_attestation - Error cbor_cose not a map\");"
    },
    {
        "line": 273,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 313,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Invalid COSE key\"));"
    },
    {
        "line": 314,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"register_new_attestation - Error invalid COSE key has_x %d && has_y %d && key_type_valid %d && key_alg_valid %d\", has_x, has_y, key_type_valid, key_alg_valid);"
    },
    {
        "line": 315,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 320,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Internal error\"));"
    },
    {
        "line": 321,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"register_new_attestation - Error gnutls_pubkey_init\");"
    },
    {
        "line": 322,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 326,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Internal error\"));"
    },
    {
        "line": 327,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"register_new_attestation - error gnutls_pubkey_import_ecc_raw\");"
    },
    {
        "line": 328,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 332,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Error exporting pubkey\"));"
    },
    {
        "line": 333,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"register_new_attestation - Error gnutls_pubkey_export: %d\", ret);"
    },
    {
        "line": 334,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 340,
        "fullcodeline": "j_result = check_attestation_packed(j_params, auth_data, att_stmt, client_data, g_key);"
    },
    {
        "line": 351,
        "fullcodeline": "json_decref(j_result);"
    },
    {
        "line": 415,
        "fullcodeline": "j_return = json_pack(\"{sisO}\", \"result\", ret, \"error\", j_error);"
    },
    {
        "line": 420,
        "fullcodeline": "if ((res = check_certificate(config, j_params, json_string_value(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"rawId\")), json_integer_value(json_object_get(j_credential, \"gswu_id\")))) == G_OK) {"
    },
    {
        "line": 459,
        "fullcodeline": "if (res != H_OK) {"
    },
    {
        "line": 138,
        "fullcodeline": "if (cbor_isa_string(key)) {"
    },
    {
        "line": 186,
        "fullcodeline": "rpid = json_string_value(json_object_get(j_params, \"rp-origin\"));"
    },
    {
        "line": 191,
        "fullcodeline": "rpid_len = o_strlen(rpid);"
    },
    {
        "line": 280,
        "fullcodeline": "if (cbor_isa_negint(cbor_key) && cbor_get_int(cbor_key) == 1 && cbor_isa_bytestring(cbor_value)) {"
    },
    {
        "line": 341,
        "fullcodeline": "if (check_result_value(j_result, G_ERROR_PARAM)) {"
    },
    {
        "line": 417,
        "fullcodeline": "j_return = json_pack(\"{si}\", \"result\", ret);"
    },
    {
        "line": 421,
        "fullcodeline": "j_return = json_pack(\"{sis[s]}\", \"result\", G_ERROR_PARAM, \"error\", \"Credential already registered\");"
    },
    {
        "line": 422,
        "fullcodeline": "status = 2;"
    },
    {
        "line": 446,
        "fullcodeline": "json_object_get(json_object_get(j_scheme_data, \"credential\"), \"rawId\"),"
    },
    {
        "line": 456,
        "fullcodeline": "json_object_get(j_credential, \"gswc_id\"));"
    },
    {
        "line": 460,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"register_new_attestation - Error h_update\");"
    },
    {
        "line": 281,
        "fullcodeline": "has_x = 1;"
    },
    {
        "line": 282,
        "fullcodeline": "memcpy(cert_x, cbor_bytestring_handle(cbor_value), cbor_bytestring_length(cbor_value));"
    },
    {
        "line": 283,
        "fullcodeline": "cert_x_len = cbor_bytestring_length(cbor_value);"
    },
    {
        "line": 284,
        "fullcodeline": "g_x.data = cert_x;"
    },
    {
        "line": 285,
        "fullcodeline": "g_x.size = (unsigned int)cbor_bytestring_length(cbor_value);"
    },
    {
        "line": 342,
        "fullcodeline": "json_array_extend(j_error, json_object_get(j_result, \"error\"));"
    },
    {
        "line": 343,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 352,
        "fullcodeline": "} else if (0 == o_strncmp(\"tpm\", (char *)fmt, MIN(fmt_len, o_strlen(\"tpm\"))) && (json_object_get(json_object_get(j_params, \"fmt\"), \"tpm\") == json_true())) {"
    },
    {
        "line": 137,
        "fullcodeline": "key = cbor_map_handle(item)[i].key;"
    },
    {
        "line": 139,
        "fullcodeline": "if (0 == o_strncmp((const char *)cbor_string_handle(key), \"fmt\", MIN(o_strlen(\"fmt\"), cbor_string_length(key)))) {"
    },
    {
        "line": 278,
        "fullcodeline": "cbor_key = cbor_map_handle(cbor_cose)[i].key;"
    },
    {
        "line": 279,
        "fullcodeline": "cbor_value = cbor_map_handle(cbor_cose)[i].value;"
    },
    {
        "line": 353,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Format 'tpm' not supported yet\"));"
    },
    {
        "line": 354,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 423,
        "fullcodeline": "} else if (res == G_ERROR_UNAUTHORIZED) {"
    },
    {
        "line": 286,
        "fullcodeline": "} else if (cbor_isa_negint(cbor_key) && cbor_get_int(cbor_key) == 2 && cbor_isa_bytestring(cbor_value)) {"
    },
    {
        "line": 344,
        "fullcodeline": "} else if (!check_result_value(j_result, G_OK)) {"
    },
    {
        "line": 424,
        "fullcodeline": "j_return = json_pack(\"{sis[s]}\", \"result\", G_ERROR_PARAM, \"error\", \"Credential unauthorized\");"
    },
    {
        "line": 425,
        "fullcodeline": "status = 2;"
    },
    {
        "line": 140,
        "fullcodeline": "if (!cbor_isa_string(cbor_map_handle(item)[i].value)) {"
    },
    {
        "line": 287,
        "fullcodeline": "has_y = 1;"
    },
    {
        "line": 288,
        "fullcodeline": "memcpy(cert_y, cbor_bytestring_handle(cbor_value), cbor_bytestring_length(cbor_value));"
    },
    {
        "line": 289,
        "fullcodeline": "cert_y_len = cbor_bytestring_length(cbor_value);"
    },
    {
        "line": 290,
        "fullcodeline": "g_y.data = cert_y;"
    },
    {
        "line": 291,
        "fullcodeline": "g_y.size = (unsigned int)cbor_bytestring_length(cbor_value);"
    },
    {
        "line": 345,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 346,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"register_new_attestation - Error check_attestation_packed\");"
    },
    {
        "line": 347,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"internal error\"));"
    },
    {
        "line": 355,
        "fullcodeline": "} else if (0 == o_strncmp(\"android-key\", (char *)fmt, MIN(fmt_len, o_strlen(\"android-key\"))) && (json_object_get(json_object_get(j_params, \"fmt\"), \"android-key\") == json_true())) {"
    },
    {
        "line": 141,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"CBOR map value 'fmt' isnt't a string\"));"
    },
    {
        "line": 142,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 148,
        "fullcodeline": "} else if (0 == o_strncmp((const char *)cbor_string_handle(key), \"attStmt\", MIN(o_strlen(\"attStmt\"), cbor_string_length(key)))) {"
    },
    {
        "line": 349,
        "fullcodeline": "j_cert = json_incref(json_object_get(json_object_get(j_result, \"data\"), \"certificate\"));"
    },
    {
        "line": 356,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Format 'android-key' not supported yet\"));"
    },
    {
        "line": 357,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 426,
        "fullcodeline": "} else if (res != G_ERROR_NOT_FOUND) {"
    },
    {
        "line": 145,
        "fullcodeline": "fmt_len = cbor_string_length(cbor_map_handle(item)[i].value);"
    },
    {
        "line": 146,
        "fullcodeline": "fmt = cbor_string_handle(cbor_map_handle(item)[i].value);"
    },
    {
        "line": 292,
        "fullcodeline": "} else if (cbor_isa_uint(cbor_key) && cbor_get_int(cbor_key) == 1 && cbor_isa_uint(cbor_value) && cbor_get_int(cbor_value) == 2) {"
    },
    {
        "line": 427,
        "fullcodeline": "j_return = json_pack(\"{sis[s]}\", \"result\", G_ERROR_PARAM, \"error\", \"Internal error\");"
    },
    {
        "line": 428,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"register_new_attestation - Error check_certificate\");"
    },
    {
        "line": 429,
        "fullcodeline": "status = 2;"
    },
    {
        "line": 293,
        "fullcodeline": "key_type_valid = 1;"
    },
    {
        "line": 358,
        "fullcodeline": "} else if (0 == o_strncmp(\"android-safetynet\", (char *)fmt, MIN(fmt_len, o_strlen(\"android-safetynet\"))) && (json_object_get(json_object_get(j_params, \"fmt\"), \"android-safetynet\") == json_true())) {"
    },
    {
        "line": 431,
        "fullcodeline": "j_return = json_pack(\"{si}\", \"result\", G_OK);"
    },
    {
        "line": 432,
        "fullcodeline": "status = 1;"
    },
    {
        "line": 150,
        "fullcodeline": "} else if (0 == o_strncmp((const char *)cbor_string_handle(key), \"authData\", MIN(o_strlen(\"authData\"), cbor_string_length(key)))) {"
    },
    {
        "line": 359,
        "fullcodeline": "j_result = check_attestation_android_safetynet(j_params, auth_data, att_stmt, client_data);"
    },
    {
        "line": 370,
        "fullcodeline": "json_decref(j_result);"
    },
    {
        "line": 149,
        "fullcodeline": "att_stmt = cbor_map_handle(item)[i].value;"
    },
    {
        "line": 294,
        "fullcodeline": "} else if (cbor_isa_uint(cbor_key) && cbor_get_int(cbor_key) == 3 && cbor_isa_negint(cbor_value)) {"
    },
    {
        "line": 360,
        "fullcodeline": "if (check_result_value(j_result, G_ERROR_PARAM)) {"
    },
    {
        "line": 152,
        "fullcodeline": "if (!cbor_isa_bytestring(auth_data) || cbor_bytestring_length(auth_data) < 56 || cbor_bytestring_is_indefinite(auth_data)) {"
    },
    {
        "line": 158,
        "fullcodeline": "message = msprintf(\"CBOR map element %d is not an expected item\", i);"
    },
    {
        "line": 159,
        "fullcodeline": "json_array_append_new(j_error, json_string(message));"
    },
    {
        "line": 160,
        "fullcodeline": "o_free(message);"
    },
    {
        "line": 161,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 361,
        "fullcodeline": "json_array_extend(j_error, json_object_get(j_result, \"error\"));"
    },
    {
        "line": 362,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 371,
        "fullcodeline": "} else if (0 == o_strncmp(\"fido-u2f\", (char *)fmt, MIN(fmt_len, o_strlen(\"fido-u2f\"))) && (json_object_get(json_object_get(j_params, \"fmt\"), \"fido-u2f\") == json_true())) {"
    },
    {
        "line": 153,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"CBOR map value 'authData' is invalid\"));"
    },
    {
        "line": 154,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 295,
        "fullcodeline": "if (cbor_get_int(cbor_value) == 6 || cbor_get_int(cbor_value) == 34 || cbor_get_int(cbor_value) == 35) {"
    },
    {
        "line": 372,
        "fullcodeline": "j_result = check_attestation_fido_u2f(j_params, (cbor_auth_data+CREDENTIAL_ID_OFFSET), credential_id_len, cert_x, cert_x_len, cert_y, cert_y_len, att_stmt, rpid_hash, rpid_hash_len, client_data);"
    },
    {
        "line": 383,
        "fullcodeline": "json_decref(j_result);"
    },
    {
        "line": 151,
        "fullcodeline": "auth_data = cbor_map_handle(item)[i].value;"
    },
    {
        "line": 296,
        "fullcodeline": "json_array_foreach(json_object_get(j_params, \"pubKey-cred-params\"), index, j_element) {"
    },
    {
        "line": 363,
        "fullcodeline": "} else if (!check_result_value(j_result, G_OK)) {"
    },
    {
        "line": 373,
        "fullcodeline": "if (check_result_value(j_result, G_ERROR_PARAM)) {"
    },
    {
        "line": 364,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 365,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"register_new_attestation - Error check_attestation_android_safetynet\");"
    },
    {
        "line": 366,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"internal error\"));"
    },
    {
        "line": 374,
        "fullcodeline": "json_array_extend(j_error, json_object_get(j_result, \"error\"));"
    },
    {
        "line": 375,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 384,
        "fullcodeline": "} else if (0 == o_strncmp(\"apple\", (char *)fmt, MIN(fmt_len, o_strlen(\"apple\"))) && (json_object_get(json_object_get(j_params, \"fmt\"), \"apple\") == json_true() || json_object_get(j_params, \"force-fmt-apple\") == json_true())) {"
    },
    {
        "line": 297,
        "fullcodeline": "if (cbor_get_int(cbor_value) == 6 && json_integer_value(json_object_get(j_element, \"alg\")) == ECDSA256) {"
    },
    {
        "line": 368,
        "fullcodeline": "j_cert = json_incref(json_object_get(json_object_get(j_result, \"data\"), \"certificate\"));"
    },
    {
        "line": 385,
        "fullcodeline": "j_result = check_attestation_apple(j_params, auth_data, att_stmt, client_data, g_key);"
    },
    {
        "line": 396,
        "fullcodeline": "json_decref(j_result);"
    },
    {
        "line": 298,
        "fullcodeline": "key_alg_valid = 1;"
    },
    {
        "line": 299,
        "fullcodeline": "curve = GNUTLS_ECC_CURVE_SECP256R1;"
    },
    {
        "line": 376,
        "fullcodeline": "} else if (!check_result_value(j_result, G_OK)) {"
    },
    {
        "line": 386,
        "fullcodeline": "if (check_result_value(j_result, G_ERROR_PARAM)) {"
    },
    {
        "line": 377,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 378,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"register_new_attestation - Error check_attestation_fido_u2f\");"
    },
    {
        "line": 379,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"internal error\"));"
    },
    {
        "line": 387,
        "fullcodeline": "json_array_extend(j_error, json_object_get(j_result, \"error\"));"
    },
    {
        "line": 388,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 397,
        "fullcodeline": "} else if (0 == o_strncmp(\"none\", (char *)fmt, MIN(fmt_len, o_strlen(\"none\"))) && (json_object_get(json_object_get(j_params, \"fmt\"), \"none\") == json_true() || json_object_get(j_params, \"force-fmt-none\") == json_true())) {"
    },
    {
        "line": 300,
        "fullcodeline": "} else if (cbor_get_int(cbor_value) == 34 && json_integer_value(json_object_get(j_element, \"alg\")) == ECDSA384) {"
    },
    {
        "line": 381,
        "fullcodeline": "j_cert = json_incref(json_object_get(json_object_get(j_result, \"data\"), \"certificate\"));"
    },
    {
        "line": 301,
        "fullcodeline": "key_alg_valid = 1;"
    },
    {
        "line": 302,
        "fullcodeline": "curve = GNUTLS_ECC_CURVE_SECP384R1;"
    },
    {
        "line": 389,
        "fullcodeline": "} else if (!check_result_value(j_result, G_OK)) {"
    },
    {
        "line": 398,
        "fullcodeline": "if (att_stmt != NULL && cbor_isa_map(att_stmt) && cbor_map_is_definite(att_stmt) && !cbor_map_size(att_stmt)) {"
    },
    {
        "line": 406,
        "fullcodeline": "message = msprintf(\"Format '%.*s' is not supported by Glewlwyd WebAuthn scheme\", fmt_len, fmt);"
    },
    {
        "line": 407,
        "fullcodeline": "json_array_append_new(j_error, json_string(message));"
    },
    {
        "line": 408,
        "fullcodeline": "o_free(message);"
    },
    {
        "line": 409,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 390,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 391,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"register_new_attestation - Error check_attestation_apple\");"
    },
    {
        "line": 392,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"internal error\"));"
    },
    {
        "line": 399,
        "fullcodeline": "j_cert = json_string(\"\");"
    },
    {
        "line": 303,
        "fullcodeline": "} else if (cbor_get_int(cbor_value) == 35 && json_integer_value(json_object_get(j_element, \"alg\")) == ECDSA512) {"
    },
    {
        "line": 394,
        "fullcodeline": "j_cert = json_incref(json_object_get(json_object_get(j_result, \"data\"), \"certificate\"));"
    },
    {
        "line": 401,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"register_new_attestation - response type 'none' has invalid format\");"
    },
    {
        "line": 402,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"response invalid\"));"
    },
    {
        "line": 403,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 304,
        "fullcodeline": "key_alg_valid = 1;"
    },
    {
        "line": 305,
        "fullcodeline": "curve = GNUTLS_ECC_CURVE_SECP521R1;"
    }
]