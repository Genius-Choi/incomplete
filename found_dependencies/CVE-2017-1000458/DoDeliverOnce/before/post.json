[
    {
        "line": 3,
        "fullcodeline": "const u_char* data_start = data;"
    },
    {
        "line": 5,
        "fullcodeline": "if ( len <= 0 )"
    },
    {
        "line": 8,
        "fullcodeline": "for ( ; len > 0; --len, ++data )"
    },
    {
        "line": 81,
        "fullcodeline": "return data - data_start;"
    },
    {
        "line": 13,
        "fullcodeline": "int c = data[0];"
    },
    {
        "line": 78,
        "fullcodeline": "last_char = c;"
    },
    {
        "line": 10,
        "fullcodeline": "if ( offset >= buf_len )"
    },
    {
        "line": 74,
        "fullcodeline": "if ( last_char == '\\r' )"
    },
    {
        "line": 11,
        "fullcodeline": "InitBuffer(buf_len * 2);"
    },
    {
        "line": 70,
        "fullcodeline": "buf[offset++] = c;"
    },
    {
        "line": 29,
        "fullcodeline": "if ( len > 1 && data[1] == '\\n' )"
    },
    {
        "line": 45,
        "fullcodeline": "if ( last_char == '\\r' )"
    },
    {
        "line": 75,
        "fullcodeline": "if ( ! suppress_weirds && Conn()->FlagEvent(SINGULAR_CR) )"
    },
    {
        "line": 31,
        "fullcodeline": "--len; ++data;"
    },
    {
        "line": 32,
        "fullcodeline": "last_char = c;"
    },
    {
        "line": 33,
        "fullcodeline": "c = data[0];"
    },
    {
        "line": 34,
        "fullcodeline": "EMIT_LINE"
    },
    {
        "line": 47,
        "fullcodeline": "--offset; // remove '\\r'"
    },
    {
        "line": 48,
        "fullcodeline": "EMIT_LINE"
    },
    {
        "line": 64,
        "fullcodeline": "CheckNUL();"
    },
    {
        "line": 76,
        "fullcodeline": "Conn()->Weird(\"line_terminated_with_single_CR\");"
    },
    {
        "line": 66,
        "fullcodeline": "buf[offset++] = c;"
    }
]