[
    {
        "line": 2,
        "fullcodeline": "const char *s = jsvGetConstString(v);"
    },
    {
        "line": 4,
        "fullcodeline": "strncpy(str, s, len);"
    },
    {
        "line": 5,
        "fullcodeline": "return strlen(s);"
    },
    {
        "line": 6,
        "fullcodeline": "} else if (jsvIsInt(v)) {"
    },
    {
        "line": 7,
        "fullcodeline": "itostr(v->varData.integer, str, 10);"
    },
    {
        "line": 8,
        "fullcodeline": "return strlen(str);"
    },
    {
        "line": 9,
        "fullcodeline": "} else if (jsvIsFloat(v)) {"
    },
    {
        "line": 10,
        "fullcodeline": "ftoa_bounded(v->varData.floating, str, len);"
    },
    {
        "line": 11,
        "fullcodeline": "return strlen(str);"
    },
    {
        "line": 12,
        "fullcodeline": "} else if (jsvHasCharacterData(v)) {"
    },
    {
        "line": 14,
        "fullcodeline": "size_t l = len;"
    },
    {
        "line": 16,
        "fullcodeline": "jsvStringIteratorNewConst(&it, v, 0);"
    },
    {
        "line": 13,
        "fullcodeline": "assert(!jsvIsStringExt(v));"
    },
    {
        "line": 17,
        "fullcodeline": "while (jsvStringIteratorHasChar(&it)) {"
    },
    {
        "line": 28,
        "fullcodeline": "return len-l;"
    },
    {
        "line": 31,
        "fullcodeline": "JsVar *stringVar = jsvAsString((JsVar*)v, false); // we know we're casting to non-const here"
    },
    {
        "line": 24,
        "fullcodeline": "jsvStringIteratorNext(&it);"
    },
    {
        "line": 23,
        "fullcodeline": "*(str++) = jsvStringIteratorGetChar(&it);"
    },
    {
        "line": 33,
        "fullcodeline": "size_t l = jsvGetString(stringVar, str, len); // call again - but this time with converted var"
    },
    {
        "line": 18,
        "fullcodeline": "if (l--<=1) {"
    },
    {
        "line": 38,
        "fullcodeline": "jsExceptionHere(JSET_INTERNALERROR, \"Variable type cannot be converted to string\");"
    }
]