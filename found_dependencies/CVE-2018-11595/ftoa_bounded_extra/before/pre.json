[
    {
        "line": 2,
        "fullcodeline": "const JsVarFloat stopAtError = 0.0000001;"
    },
    {
        "line": 3,
        "fullcodeline": "if (isnan(val)) strncpy(str,\"NaN\",len);"
    },
    {
        "line": 4,
        "fullcodeline": "else if (!isfinite(val)) {"
    },
    {
        "line": 18,
        "fullcodeline": "JsVarFloat d = 1;"
    },
    {
        "line": 8,
        "fullcodeline": "if (val<0) {"
    },
    {
        "line": 19,
        "fullcodeline": "while (d*radix <= val) d*=radix;"
    },
    {
        "line": 20,
        "fullcodeline": "while (d >= 1) {"
    },
    {
        "line": 11,
        "fullcodeline": "val = -val;"
    },
    {
        "line": 15,
        "fullcodeline": "if (((JsVarInt)(val+stopAtError)) == (1+(JsVarInt)val))"
    },
    {
        "line": 16,
        "fullcodeline": "val = (JsVarFloat)(1+(JsVarInt)val);"
    },
    {
        "line": 21,
        "fullcodeline": "int v = (int)(val / d);"
    },
    {
        "line": 22,
        "fullcodeline": "val -= v*d;"
    },
    {
        "line": 25,
        "fullcodeline": "d /= radix;"
    },
    {
        "line": 28,
        "fullcodeline": "if (((fractionalDigits<0) && val>0) || fractionalDigits>0) {"
    },
    {
        "line": 29,
        "fullcodeline": "bool hasPt = false;"
    },
    {
        "line": 30,
        "fullcodeline": "val*=radix;"
    },
    {
        "line": 9,
        "fullcodeline": "if (--len <= 0) { *str=0; return; } // bounds check"
    },
    {
        "line": 24,
        "fullcodeline": "*(str++) = itoch(v);"
    },
    {
        "line": 10,
        "fullcodeline": "*(str++) = '-';"
    },
    {
        "line": 23,
        "fullcodeline": "if (--len <= 0) { *str=0; return; } // bounds check"
    },
    {
        "line": 31,
        "fullcodeline": "while (((fractionalDigits<0) && (fractionalDigits>-12) && (val > stopAtError)) || (fractionalDigits > 0)) {"
    },
    {
        "line": 32,
        "fullcodeline": "int v = (int)(val+((fractionalDigits==1) ? 0.4 : 0.00000001) );"
    },
    {
        "line": 33,
        "fullcodeline": "val = (val-v)*radix;"
    },
    {
        "line": 42,
        "fullcodeline": "fractionalDigits--;"
    },
    {
        "line": 34,
        "fullcodeline": "if (v==radix) v=radix-1;"
    },
    {
        "line": 41,
        "fullcodeline": "*(str++)=itoch(v);"
    },
    {
        "line": 36,
        "fullcodeline": "hasPt = true;"
    },
    {
        "line": 40,
        "fullcodeline": "if (--len <= 0) { *str=0; return; } // bounds check"
    },
    {
        "line": 37,
        "fullcodeline": "if (--len <= 0) { *str=0; return; } // bounds check"
    },
    {
        "line": 38,
        "fullcodeline": "*(str++)='.';"
    }
]