[
    {
        "line": 3,
        "fullcodeline": "while (m_udpSocket.hasPendingDatagrams()) {"
    },
    {
        "line": 6,
        "fullcodeline": "datagram.resize(m_udpSocket.pendingDatagramSize());"
    },
    {
        "line": 9,
        "fullcodeline": "m_udpSocket.readDatagram(datagram.data(), datagram.size(), &sender);"
    },
    {
        "line": 14,
        "fullcodeline": "NetworkPacket* receivedPacket = new NetworkPacket(QLatin1String(\"\"));"
    },
    {
        "line": 15,
        "fullcodeline": "bool success = NetworkPacket::unserialize(datagram, receivedPacket);"
    },
    {
        "line": 39,
        "fullcodeline": "int tcpPort = receivedPacket->get<int>(QStringLiteral(\"tcpPort\"));"
    },
    {
        "line": 54,
        "fullcodeline": "QSslSocket* socket = new QSslSocket(this);"
    },
    {
        "line": 55,
        "fullcodeline": "socket->setProxy(QNetworkProxy::NoProxy);"
    },
    {
        "line": 58,
        "fullcodeline": "connect(socket, &QAbstractSocket::connected, this, &LanLinkProvider::tcpSocketConnected);"
    },
    {
        "line": 62,
        "fullcodeline": "connect(socket, &QAbstractSocket::errorOccurred, this, &LanLinkProvider::connectError);"
    },
    {
        "line": 27,
        "fullcodeline": "if (receivedPacket->type() != PACKET_TYPE_IDENTITY) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (m_receivedIdentityPackets.size() > MAX_REMEMBERED_IDENTITY_PACKETS) {"
    },
    {
        "line": 11,
        "fullcodeline": "if (sender.isLoopback() && !m_testMode)"
    },
    {
        "line": 33,
        "fullcodeline": "if (receivedPacket->get<QString>(QStringLiteral(\"deviceId\")) == KdeConnectConfig::instance().deviceId()) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (tcpPort < MIN_TCP_PORT || tcpPort > MAX_TCP_PORT) {"
    },
    {
        "line": 22,
        "fullcodeline": "qCDebug(KDECONNECT_CORE) << \"Could not unserialize UDP packet\";"
    },
    {
        "line": 28,
        "fullcodeline": "qCDebug(KDECONNECT_CORE) << \"Received a UDP packet of wrong type\" << receivedPacket->type();"
    },
    {
        "line": 41,
        "fullcodeline": "qCDebug(KDECONNECT_CORE) << \"TCP port outside of kdeconnect's range\";"
    },
    {
        "line": 49,
        "fullcodeline": "qCWarning(KDECONNECT_CORE) << \"Too many remembered identities, ignoring\" << receivedPacket->get<QString>(QStringLiteral(\"deviceId\")) << \"received via UDP\";"
    }
]