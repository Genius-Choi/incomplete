[
    {
        "line": 6,
        "fullcodeline": "JSUINT32 escBuffer[(JSON_MAX_STACK_BUFFER_SIZE / sizeof(JSUINT32))];"
    },
    {
        "line": 9,
        "fullcodeline": "ds.start = (char *) buffer;"
    },
    {
        "line": 10,
        "fullcodeline": "ds.end = ds.start + cbBuffer;"
    },
    {
        "line": 12,
        "fullcodeline": "ds.escStart = escBuffer;"
    },
    {
        "line": 13,
        "fullcodeline": "ds.escEnd = ds.escStart + (JSON_MAX_STACK_BUFFER_SIZE / sizeof(JSUINT32));"
    },
    {
        "line": 14,
        "fullcodeline": "ds.escHeap = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "ds.prv = dec->prv;"
    },
    {
        "line": 16,
        "fullcodeline": "ds.dec = dec;"
    },
    {
        "line": 17,
        "fullcodeline": "ds.dec->errorStr = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "ds.dec->errorOffset = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "ds.objDepth = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "ds.dec = dec;"
    },
    {
        "line": 23,
        "fullcodeline": "ret = decode_any (&ds);"
    },
    {
        "line": 30,
        "fullcodeline": "if (!(dec->errorStr))"
    },
    {
        "line": 27,
        "fullcodeline": "dec->free(ds.escStart);"
    },
    {
        "line": 32,
        "fullcodeline": "if ((ds.end - ds.start) > 0)"
    },
    {
        "line": 37,
        "fullcodeline": "if (ds.start != ds.end && ret)"
    },
    {
        "line": 34,
        "fullcodeline": "SkipWhitespace(&ds);"
    },
    {
        "line": 39,
        "fullcodeline": "dec->releaseObject(ds.prv, ret);"
    },
    {
        "line": 40,
        "fullcodeline": "return SetError(&ds, -1, \"Trailing data\");"
    }
]