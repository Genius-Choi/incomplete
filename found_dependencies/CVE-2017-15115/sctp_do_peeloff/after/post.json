[
    {
        "line": 3,
        "fullcodeline": "struct sctp_association *asoc = sctp_id2assoc(sk, id);"
    },
    {
        "line": 4,
        "fullcodeline": "struct sctp_sock *sp = sctp_sk(sk);"
    },
    {
        "line": 6,
        "fullcodeline": "int err = 0;"
    },
    {
        "line": 28,
        "fullcodeline": "err = sock_create(sk->sk_family, SOCK_SEQPACKET, IPPROTO_SCTP, &sock);"
    },
    {
        "line": 32,
        "fullcodeline": "sctp_copy_sock(sock->sk, sk, asoc);"
    },
    {
        "line": 37,
        "fullcodeline": "sp->pf->to_sk_daddr(&asoc->peer.primary_addr, sk);"
    },
    {
        "line": 42,
        "fullcodeline": "sctp_sock_migrate(sk, sock->sk, asoc, SCTP_SOCKET_UDP_HIGH_BANDWIDTH);"
    },
    {
        "line": 44,
        "fullcodeline": "*sockp = sock;"
    },
    {
        "line": 9,
        "fullcodeline": "if (!net_eq(current->nsproxy->net_ns, sock_net(sk)))"
    },
    {
        "line": 12,
        "fullcodeline": "if (!asoc)"
    },
    {
        "line": 18,
        "fullcodeline": "if (waitqueue_active(&asoc->wait))"
    },
    {
        "line": 24,
        "fullcodeline": "if (!sctp_style(sk, UDP))"
    },
    {
        "line": 29,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 10,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 13,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 19,
        "fullcodeline": "return -EBUSY;"
    },
    {
        "line": 25,
        "fullcodeline": "return -EINVAL;"
    }
]