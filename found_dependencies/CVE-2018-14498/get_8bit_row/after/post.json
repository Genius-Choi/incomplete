[
    {
        "line": 4,
        "fullcodeline": "bmp_source_ptr source = (bmp_source_ptr)sinfo;"
    },
    {
        "line": 5,
        "fullcodeline": "register JSAMPARRAY colormap = source->colormap;"
    },
    {
        "line": 6,
        "fullcodeline": "int cmaplen = source->cmap_length;"
    },
    {
        "line": 27,
        "fullcodeline": "if (cinfo->in_color_space == JCS_GRAYSCALE) {"
    },
    {
        "line": 14,
        "fullcodeline": "source->source_row--;"
    },
    {
        "line": 15,
        "fullcodeline": "image_ptr = (*cinfo->mem->access_virt_sarray)"
    },
    {
        "line": 18,
        "fullcodeline": "inptr = image_ptr[0];"
    },
    {
        "line": 22,
        "fullcodeline": "inptr = source->iobuffer;"
    },
    {
        "line": 28,
        "fullcodeline": "for (col = cinfo->image_width; col > 0; col--) {"
    },
    {
        "line": 16,
        "fullcodeline": "((j_common_ptr)cinfo, source->whole_image,"
    },
    {
        "line": 17,
        "fullcodeline": "source->source_row, (JDIMENSION)1, FALSE);"
    },
    {
        "line": 20,
        "fullcodeline": "if (!ReadOK(source->pub.input_file, source->iobuffer, source->row_width))"
    },
    {
        "line": 29,
        "fullcodeline": "t = GETJSAMPLE(*inptr++);"
    },
    {
        "line": 34,
        "fullcodeline": "} else if (cinfo->in_color_space == JCS_CMYK) {"
    },
    {
        "line": 21,
        "fullcodeline": "ERREXIT(cinfo, JERR_INPUT_EOF);"
    },
    {
        "line": 30,
        "fullcodeline": "if (t >= cmaplen)"
    },
    {
        "line": 31,
        "fullcodeline": "ERREXIT(cinfo, JERR_BMP_OUTOFRANGE);"
    },
    {
        "line": 32,
        "fullcodeline": "*outptr++ = colormap[0][t];"
    },
    {
        "line": 35,
        "fullcodeline": "for (col = cinfo->image_width; col > 0; col--) {"
    },
    {
        "line": 36,
        "fullcodeline": "t = GETJSAMPLE(*inptr++);"
    },
    {
        "line": 39,
        "fullcodeline": "rgb_to_cmyk(colormap[0][t], colormap[1][t], colormap[2][t], outptr,"
    },
    {
        "line": 41,
        "fullcodeline": "outptr += 4;"
    },
    {
        "line": 50,
        "fullcodeline": "if (aindex >= 0) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (t >= cmaplen)"
    },
    {
        "line": 40,
        "fullcodeline": "outptr + 1, outptr + 2, outptr + 3);"
    },
    {
        "line": 38,
        "fullcodeline": "ERREXIT(cinfo, JERR_BMP_OUTOFRANGE);"
    },
    {
        "line": 51,
        "fullcodeline": "for (col = cinfo->image_width; col > 0; col--) {"
    },
    {
        "line": 52,
        "fullcodeline": "t = GETJSAMPLE(*inptr++);"
    },
    {
        "line": 58,
        "fullcodeline": "outptr[aindex] = 0xFF;"
    },
    {
        "line": 59,
        "fullcodeline": "outptr += ps;"
    },
    {
        "line": 62,
        "fullcodeline": "for (col = cinfo->image_width; col > 0; col--) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (t >= cmaplen)"
    },
    {
        "line": 63,
        "fullcodeline": "t = GETJSAMPLE(*inptr++);"
    },
    {
        "line": 69,
        "fullcodeline": "outptr += ps;"
    },
    {
        "line": 54,
        "fullcodeline": "ERREXIT(cinfo, JERR_BMP_OUTOFRANGE);"
    },
    {
        "line": 64,
        "fullcodeline": "if (t >= cmaplen)"
    },
    {
        "line": 65,
        "fullcodeline": "ERREXIT(cinfo, JERR_BMP_OUTOFRANGE);"
    }
]