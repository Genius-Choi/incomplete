[
    {
        "line": 3,
        "fullcodeline": "char outbuf[FILENAME_MAX];"
    },
    {
        "line": 7,
        "fullcodeline": "char *query_string = query ? strdup(query) : NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "tok = strtok_r(query_string, \"&\", &where);"
    },
    {
        "line": 66,
        "fullcodeline": "if(query_string) free(query_string);"
    },
    {
        "line": 69,
        "fullcodeline": "lua_setglobal(L, table_name);"
    },
    {
        "line": 16,
        "fullcodeline": "while(tok != NULL) {"
    },
    {
        "line": 62,
        "fullcodeline": "tok = strtok_r(NULL, \"&\", &where);"
    },
    {
        "line": 19,
        "fullcodeline": "if(strncmp(tok, \"csrf\", strlen(\"csrf\")) /* Do not put csrf into the params table */"
    },
    {
        "line": 21,
        "fullcodeline": "&& (strlen(_equal) > 1)) {"
    },
    {
        "line": 25,
        "fullcodeline": "_equal[0] = '\\0';"
    },
    {
        "line": 26,
        "fullcodeline": "_equal = &_equal[1];"
    },
    {
        "line": 27,
        "fullcodeline": "len = strlen(_equal);"
    },
    {
        "line": 29,
        "fullcodeline": "purifyHTTPParameter(tok), purifyHTTPParameter(_equal);"
    },
    {
        "line": 20,
        "fullcodeline": "&& (_equal = strchr(tok, '='))"
    },
    {
        "line": 33,
        "fullcodeline": "if((decoded_buf = (char*)malloc(len+1)) != NULL) {"
    },
    {
        "line": 35,
        "fullcodeline": "Utils::urlDecode(_equal, decoded_buf, len+1);"
    },
    {
        "line": 37,
        "fullcodeline": "Utils::purifyHTTPparam(tok, true, false);"
    },
    {
        "line": 38,
        "fullcodeline": "Utils::purifyHTTPparam(decoded_buf, false, false);"
    },
    {
        "line": 55,
        "fullcodeline": "lua_push_str_table_entry(vm, tok, decoded_buf);"
    },
    {
        "line": 57,
        "fullcodeline": "free(decoded_buf);"
    },
    {
        "line": 42,
        "fullcodeline": "if((decoded_buf[0] == '.')"
    },
    {
        "line": 59,
        "fullcodeline": "ntop->getTrace()->traceEvent(TRACE_WARNING, \"Not enough memory\");"
    },
    {
        "line": 43,
        "fullcodeline": "&& ((fd = fopen(decoded_buf, \"r\"))"
    },
    {
        "line": 46,
        "fullcodeline": "ntop->getTrace()->traceEvent(TRACE_WARNING, \"Discarded '%s'='%s' as argument is a valid file path\","
    },
    {
        "line": 48,
        "fullcodeline": "decoded_buf[0] = '\\0';"
    },
    {
        "line": 49,
        "fullcodeline": "fclose(fd);"
    },
    {
        "line": 44,
        "fullcodeline": "|| (fd = fopen(realpath(decoded_buf, outbuf), \"r\")))) {"
    }
]