[
    {
        "line": 16,
        "fullcodeline": "email = prereg_user.email"
    },
    {
        "line": 17,
        "fullcodeline": "realm_creation = prereg_user.realm_creation"
    },
    {
        "line": 18,
        "fullcodeline": "password_required = prereg_user.password_required"
    },
    {
        "line": 20,
        "fullcodeline": "role = prereg_user.invited_as"
    },
    {
        "line": 76,
        "fullcodeline": "name_validated = False"
    },
    {
        "line": 77,
        "fullcodeline": "require_ldap_password = False"
    },
    {
        "line": 175,
        "fullcodeline": "if not (password_auth_enabled(realm) and password_required):"
    },
    {
        "line": 178,
        "fullcodeline": "if form.is_valid():"
    },
    {
        "line": 345,
        "fullcodeline": "return render("
    },
    {
        "line": 12,
        "fullcodeline": "prereg_user = check_prereg_key(request, key)"
    },
    {
        "line": 25,
        "fullcodeline": "validators.validate_email(email)"
    },
    {
        "line": 31,
        "fullcodeline": "realm = None"
    },
    {
        "line": 33,
        "fullcodeline": "assert prereg_user.realm is not None"
    },
    {
        "line": 38,
        "fullcodeline": "realm = prereg_user.realm"
    },
    {
        "line": 85,
        "fullcodeline": "ldap_full_name = None"
    },
    {
        "line": 163,
        "fullcodeline": "postdata = request.POST.copy()"
    },
    {
        "line": 173,
        "fullcodeline": "form = RegistrationForm(postdata, realm_creation=realm_creation)"
    },
    {
        "line": 176,
        "fullcodeline": "form[\"password\"].field.required = False"
    },
    {
        "line": 197,
        "fullcodeline": "assert realm is not None"
    },
    {
        "line": 201,
        "fullcodeline": "default_stream_group_names = request.POST.getlist(\"default_stream_group\")"
    },
    {
        "line": 202,
        "fullcodeline": "default_stream_groups = lookup_default_stream_groups(default_stream_group_names, realm)"
    },
    {
        "line": 221,
        "fullcodeline": "user_profile: Optional[UserProfile] = None"
    },
    {
        "line": 222,
        "fullcodeline": "return_data: Dict[str, bool] = {}"
    },
    {
        "line": 327,
        "fullcodeline": "auth_result = authenticate("
    },
    {
        "line": 342,
        "fullcodeline": "assert isinstance(auth_result, UserProfile)"
    },
    {
        "line": 34,
        "fullcodeline": "if get_subdomain(request) != prereg_user.realm.string_id:"
    },
    {
        "line": 164,
        "fullcodeline": "if name_changes_disabled(realm):"
    },
    {
        "line": 179,
        "fullcodeline": "if password_auth_enabled(realm) and form[\"password\"].field.required:"
    },
    {
        "line": 204,
        "fullcodeline": "if source_realm_id is not None:"
    },
    {
        "line": 211,
        "fullcodeline": "if not realm_creation:"
    },
    {
        "line": 223,
        "fullcodeline": "if ldap_auth_enabled(realm):"
    },
    {
        "line": 284,
        "fullcodeline": "if existing_user_profile is not None and existing_user_profile.is_mirror_dummy:"
    },
    {
        "line": 299,
        "fullcodeline": "if user_profile is None:"
    },
    {
        "line": 333,
        "fullcodeline": "if return_data.get(\"invalid_subdomain\"):"
    },
    {
        "line": 343,
        "fullcodeline": "return login_and_go_to_home(request, auth_result)"
    },
    {
        "line": 348,
        "fullcodeline": "context={"
    },
    {
        "line": 40,
        "fullcodeline": "email_allowed_for_realm(email, realm)"
    },
    {
        "line": 66,
        "fullcodeline": "validate_email_not_already_in_realm(realm, email)"
    },
    {
        "line": 130,
        "fullcodeline": "form = RegistrationForm({\"full_name\": ldap_full_name}, realm_creation=realm_creation)"
    },
    {
        "line": 131,
        "fullcodeline": "request.session[\"authenticated_full_name\"] = ldap_full_name"
    },
    {
        "line": 132,
        "fullcodeline": "name_validated = True"
    },
    {
        "line": 187,
        "fullcodeline": "password = None"
    },
    {
        "line": 194,
        "fullcodeline": "realm = do_create_realm("
    },
    {
        "line": 207,
        "fullcodeline": "source_profile: Optional[UserProfile] = get_source_profile(email, source_realm_id)"
    },
    {
        "line": 209,
        "fullcodeline": "source_profile = None"
    },
    {
        "line": 219,
        "fullcodeline": "existing_user_profile = None"
    },
    {
        "line": 239,
        "fullcodeline": "user = authenticate("
    },
    {
        "line": 285,
        "fullcodeline": "user_profile = existing_user_profile"
    },
    {
        "line": 286,
        "fullcodeline": "do_activate_mirror_dummy_user(user_profile, acting_user=user_profile)"
    },
    {
        "line": 287,
        "fullcodeline": "do_change_password(user_profile, password)"
    },
    {
        "line": 288,
        "fullcodeline": "do_change_full_name(user_profile, full_name, user_profile)"
    },
    {
        "line": 289,
        "fullcodeline": "do_change_user_setting(user_profile, \"timezone\", timezone, acting_user=user_profile)"
    },
    {
        "line": 290,
        "fullcodeline": "do_change_user_setting("
    },
    {
        "line": 300,
        "fullcodeline": "user_profile = do_create_user("
    },
    {
        "line": 335,
        "fullcodeline": "logging.error("
    },
    {
        "line": 353,
        "fullcodeline": "\"lock_name\": name_validated and name_changes_disabled(realm),"
    },
    {
        "line": 358,
        "fullcodeline": "\"password_required\": password_auth_enabled(realm) and password_required,"
    },
    {
        "line": 360,
        "fullcodeline": "\"password_auth_enabled\": password_auth_enabled(realm),"
    },
    {
        "line": 362,
        "fullcodeline": "\"default_stream_groups\": [] if realm is None else get_default_stream_groups(realm),"
    },
    {
        "line": 363,
        "fullcodeline": "\"accounts\": get_accounts_for_email(email),"
    },
    {
        "line": 366,
        "fullcodeline": "\"MAX_PASSWORD_LENGTH\": str(form.MAX_PASSWORD_LENGTH),"
    },
    {
        "line": 369,
        "fullcodeline": "\"sorted_realm_types\": sorted("
    },
    {
        "line": 14,
        "fullcodeline": "return render_confirmation_key_error(request, e)"
    },
    {
        "line": 27,
        "fullcodeline": "return render(request, \"zerver/invalid_email.html\", context={\"invalid_email\": True})"
    },
    {
        "line": 35,
        "fullcodeline": "return render_confirmation_key_error("
    },
    {
        "line": 63,
        "fullcodeline": "return redirect_to_deactivation_notice()"
    },
    {
        "line": 89,
        "fullcodeline": "for backend in get_backends():"
    },
    {
        "line": 133,
        "fullcodeline": "elif realm is not None and realm.is_zephyr_mirror_realm:"
    },
    {
        "line": 247,
        "fullcodeline": "if user is None:"
    },
    {
        "line": 293,
        "fullcodeline": "get_default_language_for_new_user(request, realm),"
    },
    {
        "line": 321,
        "fullcodeline": "return redirect_and_log_into_subdomain("
    },
    {
        "line": 340,
        "fullcodeline": "return redirect(\"/\")"
    },
    {
        "line": 352,
        "fullcodeline": "\"full_name\": request.session.get(\"authenticated_full_name\", None),"
    },
    {
        "line": 72,
        "fullcodeline": "check_spare_licenses_available_for_registering_new_user(realm, email, role=role)"
    },
    {
        "line": 83,
        "fullcodeline": "pass"
    },
    {
        "line": 138,
        "fullcodeline": "hesiod_name = compute_mit_user_fullname(email)"
    },
    {
        "line": 139,
        "fullcodeline": "form = RegistrationForm("
    },
    {
        "line": 143,
        "fullcodeline": "name_validated = True"
    },
    {
        "line": 169,
        "fullcodeline": "postdata.update(full_name=request.session[\"authenticated_full_name\"])"
    },
    {
        "line": 170,
        "fullcodeline": "name_validated = True"
    },
    {
        "line": 213,
        "fullcodeline": "existing_user_profile: Optional[UserProfile] = get_user_by_delivery_email("
    },
    {
        "line": 248,
        "fullcodeline": "can_use_different_backend = email_auth_enabled(realm) or ("
    },
    {
        "line": 276,
        "fullcodeline": "assert isinstance(user, UserProfile)"
    },
    {
        "line": 277,
        "fullcodeline": "user_profile = user"
    },
    {
        "line": 309,
        "fullcodeline": "default_language=get_default_language_for_new_user(request, realm),"
    },
    {
        "line": 322,
        "fullcodeline": "ExternalAuthResult(user_profile=user_profile, data_dict={\"is_realm_creation\": True})"
    },
    {
        "line": 370,
        "fullcodeline": "Realm.ORG_TYPES.values(), key=lambda d: d[\"display_order\"]"
    },
    {
        "line": 42,
        "fullcodeline": "return render("
    },
    {
        "line": 48,
        "fullcodeline": "return render("
    },
    {
        "line": 54,
        "fullcodeline": "return render("
    },
    {
        "line": 68,
        "fullcodeline": "return redirect_to_email_login_url(email)"
    },
    {
        "line": 257,
        "fullcodeline": "if return_data.get(\"no_matching_ldap_user\") and can_use_different_backend:"
    },
    {
        "line": 278,
        "fullcodeline": "if not realm_creation:"
    },
    {
        "line": 90,
        "fullcodeline": "if isinstance(backend, LDAPBackend):"
    },
    {
        "line": 172,
        "fullcodeline": "pass"
    },
    {
        "line": 217,
        "fullcodeline": "existing_user_profile = None"
    },
    {
        "line": 249,
        "fullcodeline": "len(get_external_method_dicts(realm)) > 0"
    },
    {
        "line": 254,
        "fullcodeline": "can_use_different_backend = can_use_different_backend and ("
    },
    {
        "line": 265,
        "fullcodeline": "pass"
    },
    {
        "line": 271,
        "fullcodeline": "view_url = reverse(\"login\")"
    },
    {
        "line": 272,
        "fullcodeline": "query = urlencode({\"email\": email})"
    },
    {
        "line": 273,
        "fullcodeline": "redirect_url = append_url_query_string(view_url, query)"
    },
    {
        "line": 45,
        "fullcodeline": "context={\"realm_name\": realm.name, \"closed_domain\": True},"
    },
    {
        "line": 51,
        "fullcodeline": "context={\"realm_name\": realm.name, \"disposable_emails_not_allowed\": True},"
    },
    {
        "line": 57,
        "fullcodeline": "context={\"realm_name\": realm.name, \"email_contains_plus\": True},"
    },
    {
        "line": 74,
        "fullcodeline": "return render(request, \"zerver/no_spare_licenses.html\")"
    },
    {
        "line": 109,
        "fullcodeline": "ldap_user = _LDAPUser(backend, ldap_username)"
    },
    {
        "line": 121,
        "fullcodeline": "require_ldap_password = isinstance(backend, ZulipLDAPAuthBackend)"
    },
    {
        "line": 140,
        "fullcodeline": "initial={\"full_name\": hesiod_name if \"@\" not in hesiod_name else \"\"},"
    },
    {
        "line": 155,
        "fullcodeline": "elif form_full_name is not None:"
    },
    {
        "line": 274,
        "fullcodeline": "return HttpResponseRedirect(redirect_url)"
    },
    {
        "line": 280,
        "fullcodeline": "return login_and_go_to_home(request, user_profile)"
    },
    {
        "line": 146,
        "fullcodeline": "request.session[\"authenticated_full_name\"] = prereg_user.full_name"
    },
    {
        "line": 147,
        "fullcodeline": "name_validated = True"
    },
    {
        "line": 148,
        "fullcodeline": "form = RegistrationForm("
    },
    {
        "line": 152,
        "fullcodeline": "form = RegistrationForm("
    },
    {
        "line": 156,
        "fullcodeline": "form = RegistrationForm("
    },
    {
        "line": 161,
        "fullcodeline": "form = RegistrationForm(realm_creation=realm_creation)"
    },
    {
        "line": 255,
        "fullcodeline": "not email_belongs_to_ldap(realm, email)"
    },
    {
        "line": 92,
        "fullcodeline": "ldap_username = backend.django_to_ldap_username(email)"
    },
    {
        "line": 112,
        "fullcodeline": "ldap_full_name = backend.get_mapped_name(ldap_user)"
    },
    {
        "line": 94,
        "fullcodeline": "logging.warning(\"New account email %s could not be found in LDAP\", email)"
    },
    {
        "line": 149,
        "fullcodeline": "{\"full_name\": prereg_user.full_name}, realm_creation=realm_creation"
    },
    {
        "line": 153,
        "fullcodeline": "initial={\"full_name\": prereg_user.full_name}, realm_creation=realm_creation"
    },
    {
        "line": 157,
        "fullcodeline": "initial={\"full_name\": form_full_name},"
    }
]