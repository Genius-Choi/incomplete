[
    {
        "line": 5,
        "fullcodeline": "r2007_section *sections = NULL, *last_section = NULL, *section = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "Bit_Chain page = { 0 };"
    },
    {
        "line": 8,
        "fullcodeline": "int i, j = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "LOG_TRACE (\"\\n=== System Section (Section Map) ===\\n\");"
    },
    {
        "line": 176,
        "fullcodeline": "bit_chain_free (&page);"
    },
    {
        "line": 10,
        "fullcodeline": "if (!read_system_page (&page, dat, size_comp, size_uncomp, correction))"
    },
    {
        "line": 17,
        "fullcodeline": "while (page.byte < (size_t)size_uncomp)"
    },
    {
        "line": 12,
        "fullcodeline": "LOG_ERROR (\"Failed to read system page\")"
    },
    {
        "line": 19,
        "fullcodeline": "section = (r2007_section *)calloc (1, sizeof (r2007_section));"
    },
    {
        "line": 27,
        "fullcodeline": "LOG_TRACE (\"\\nSection [%d]:\\n\", j);"
    },
    {
        "line": 28,
        "fullcodeline": "section->data_size = bit_read_RLL (&page);"
    },
    {
        "line": 29,
        "fullcodeline": "section->max_size = bit_read_RLL (&page);"
    },
    {
        "line": 30,
        "fullcodeline": "section->encrypted = bit_read_RLL (&page);"
    },
    {
        "line": 31,
        "fullcodeline": "section->hashcode = bit_read_RLL (&page);"
    },
    {
        "line": 32,
        "fullcodeline": "section->name_length = bit_read_RLL (&page);"
    },
    {
        "line": 33,
        "fullcodeline": "section->unknown = bit_read_RLL (&page);"
    },
    {
        "line": 34,
        "fullcodeline": "section->encoded = bit_read_RLL (&page);"
    },
    {
        "line": 35,
        "fullcodeline": "section->num_pages = bit_read_RLL (&page);"
    },
    {
        "line": 44,
        "fullcodeline": "LOG_POS_DAT (&page)"
    },
    {
        "line": 76,
        "fullcodeline": "j++;"
    },
    {
        "line": 89,
        "fullcodeline": "LOG_TRACE (\"  name:          \")"
    },
    {
        "line": 90,
        "fullcodeline": "LOG_TEXT_UNICODE (TRACE, section->name)"
    },
    {
        "line": 92,
        "fullcodeline": "LOG_POS_DAT (&page)"
    },
    {
        "line": 93,
        "fullcodeline": "LOG_TRACE (\"\\n\")"
    },
    {
        "line": 94,
        "fullcodeline": "section->type = dwg_section_wtype (section->name);"
    },
    {
        "line": 105,
        "fullcodeline": "section->pages = (r2007_section_page **)calloc ("
    },
    {
        "line": 20,
        "fullcodeline": "if (!section)"
    },
    {
        "line": 48,
        "fullcodeline": "if (section->data_size > 10 * dat->size"
    },
    {
        "line": 66,
        "fullcodeline": "if (!sections)"
    },
    {
        "line": 77,
        "fullcodeline": "if (page.byte >= page.size)"
    },
    {
        "line": 82,
        "fullcodeline": "uint64_t sz = section->name_length;"
    },
    {
        "line": 83,
        "fullcodeline": "section->name = (DWGCHAR *)calloc (1, sz + 2);"
    },
    {
        "line": 84,
        "fullcodeline": "bit_read_fixed (&page, (BITCODE_RC*)section->name, sz);"
    },
    {
        "line": 96,
        "fullcodeline": "if (section->num_pages <= 0)"
    },
    {
        "line": 98,
        "fullcodeline": "if (section->num_pages > 0xf0000)"
    },
    {
        "line": 107,
        "fullcodeline": "if (!section->pages)"
    },
    {
        "line": 118,
        "fullcodeline": "for (i = 0; i < section->num_pages; i++)"
    },
    {
        "line": 22,
        "fullcodeline": "LOG_ERROR (\"Out of memory\");"
    },
    {
        "line": 23,
        "fullcodeline": "bit_chain_free (&page);"
    },
    {
        "line": 24,
        "fullcodeline": "sections_destroy (sections); // the root"
    },
    {
        "line": 50,
        "fullcodeline": "|| section->name_length >= 48)"
    },
    {
        "line": 52,
        "fullcodeline": "LOG_ERROR (\"Invalid System Section\");"
    },
    {
        "line": 53,
        "fullcodeline": "free (section);"
    },
    {
        "line": 54,
        "fullcodeline": "bit_chain_free (&page);"
    },
    {
        "line": 55,
        "fullcodeline": "sections_destroy (sections); // the root"
    },
    {
        "line": 68,
        "fullcodeline": "sections = last_section = section;"
    },
    {
        "line": 100,
        "fullcodeline": "LOG_ERROR (\"Invalid num_pages %zu, skip\","
    },
    {
        "line": 109,
        "fullcodeline": "LOG_ERROR (\"Out of memory\");"
    },
    {
        "line": 110,
        "fullcodeline": "bit_chain_free (&page);"
    },
    {
        "line": 120,
        "fullcodeline": "section->pages[i]"
    },
    {
        "line": 142,
        "fullcodeline": "section->pages[i]->offset = bit_read_RLL (&page);"
    },
    {
        "line": 143,
        "fullcodeline": "section->pages[i]->size = bit_read_RLL (&page);"
    },
    {
        "line": 144,
        "fullcodeline": "section->pages[i]->id = (int64_t)bit_read_RLL (&page);"
    },
    {
        "line": 145,
        "fullcodeline": "section->pages[i]->uncomp_size = bit_read_RLL (&page);"
    },
    {
        "line": 146,
        "fullcodeline": "section->pages[i]->comp_size = bit_read_RLL (&page);"
    },
    {
        "line": 147,
        "fullcodeline": "section->pages[i]->checksum = bit_read_RLL (&page);"
    },
    {
        "line": 148,
        "fullcodeline": "section->pages[i]->crc = bit_read_RLL (&page);"
    },
    {
        "line": 150,
        "fullcodeline": "LOG_TRACE (\" Page[%d]: \", i)"
    },
    {
        "line": 170,
        "fullcodeline": "assert (section->pages[i]->size < DBG_MAX_SIZE);"
    },
    {
        "line": 171,
        "fullcodeline": "assert (section->pages[i]->uncomp_size < DBG_MAX_SIZE);"
    },
    {
        "line": 172,
        "fullcodeline": "assert (section->pages[i]->comp_size < DBG_MAX_SIZE);"
    },
    {
        "line": 49,
        "fullcodeline": "|| section->name_length >= (int64_t)dat->size"
    },
    {
        "line": 72,
        "fullcodeline": "last_section->next = section;"
    },
    {
        "line": 73,
        "fullcodeline": "last_section = section;"
    },
    {
        "line": 101,
        "fullcodeline": "(size_t)section->num_pages);"
    },
    {
        "line": 106,
        "fullcodeline": "(size_t)section->num_pages, sizeof (r2007_section_page *));"
    },
    {
        "line": 121,
        "fullcodeline": "= (r2007_section_page *)calloc (1, sizeof (r2007_section_page));"
    },
    {
        "line": 122,
        "fullcodeline": "if (!section->pages[i])"
    },
    {
        "line": 133,
        "fullcodeline": "if (page.byte + 56 > page.size)"
    },
    {
        "line": 160,
        "fullcodeline": "if (section->pages[i]->size >= DBG_MAX_SIZE"
    },
    {
        "line": 112,
        "fullcodeline": "sections_destroy (sections); // the root"
    },
    {
        "line": 124,
        "fullcodeline": "LOG_ERROR (\"Out of memory\");"
    },
    {
        "line": 125,
        "fullcodeline": "bit_chain_free (&page);"
    },
    {
        "line": 135,
        "fullcodeline": "LOG_ERROR (\"Section[%d]->pages[%d] overflow (%zu > %zu)\", j, i,"
    },
    {
        "line": 137,
        "fullcodeline": "free (section->pages[i]);"
    },
    {
        "line": 138,
        "fullcodeline": "section->num_pages = i; // skip this last section"
    },
    {
        "line": 162,
        "fullcodeline": "|| section->pages[i]->comp_size >= DBG_MAX_SIZE)"
    },
    {
        "line": 164,
        "fullcodeline": "LOG_ERROR (\"Invalid section->pages[%d] size\", i);"
    },
    {
        "line": 165,
        "fullcodeline": "bit_chain_free (&page);"
    },
    {
        "line": 166,
        "fullcodeline": "free (section->pages[i]);"
    },
    {
        "line": 167,
        "fullcodeline": "section->num_pages = i; // skip this last section"
    },
    {
        "line": 114,
        "fullcodeline": "sections_destroy (section);"
    },
    {
        "line": 136,
        "fullcodeline": "page.byte + 56, page.size);"
    },
    {
        "line": 161,
        "fullcodeline": "|| section->pages[i]->uncomp_size >= DBG_MAX_SIZE"
    },
    {
        "line": 127,
        "fullcodeline": "sections_destroy (sections); // the root"
    },
    {
        "line": 129,
        "fullcodeline": "sections_destroy (section);"
    }
]