[
    {
        "line": 14,
        "fullcodeline": "struct tcp_sock_t *tcp_socket = NULL, *tcp6_socket = NULL;"
    },
    {
        "line": 45,
        "fullcodeline": "printf(\"%u|\", real_port);"
    },
    {
        "line": 46,
        "fullcodeline": "fflush(stdout);"
    },
    {
        "line": 48,
        "fullcodeline": "NOTE(\"Port: %d, IPv4 %savailable, IPv6 %savailable\","
    },
    {
        "line": 5,
        "fullcodeline": "if (g_options.noprinter_mode == 0) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (tcp_socket == NULL && tcp6_socket == NULL)"
    },
    {
        "line": 39,
        "fullcodeline": "if (desired_port != 0 && g_options.only_desired_port == 1 &&"
    },
    {
        "line": 49,
        "fullcodeline": "real_port, tcp_socket ? \"\" : \"not \", tcp6_socket ? \"\" : \"not \");"
    },
    {
        "line": 53,
        "fullcodeline": "if (!g_options.nofork_mode && (pid = fork()) > 0) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (usb_can_callback(usb_sock))"
    },
    {
        "line": 98,
        "fullcodeline": "if (tcp_socket!= NULL)"
    },
    {
        "line": 100,
        "fullcodeline": "if (tcp6_socket!= NULL)"
    },
    {
        "line": 103,
        "fullcodeline": "if (usb_sock != NULL)"
    },
    {
        "line": 6,
        "fullcodeline": "usb_sock = usb_open();"
    },
    {
        "line": 16,
        "fullcodeline": "tcp_socket = tcp_open(desired_port);"
    },
    {
        "line": 17,
        "fullcodeline": "tcp6_socket = tcp6_open(desired_port);"
    },
    {
        "line": 21,
        "fullcodeline": "desired_port ++;"
    },
    {
        "line": 29,
        "fullcodeline": "NOTE(\"Access to desired port failed, trying alternative port %d\", desired_port);"
    },
    {
        "line": 36,
        "fullcodeline": "real_port = tcp_port_number_get(tcp_socket);"
    },
    {
        "line": 40,
        "fullcodeline": "desired_port != real_port) {"
    },
    {
        "line": 41,
        "fullcodeline": "ERR(\"Received port number did not match requested port number.\""
    },
    {
        "line": 54,
        "fullcodeline": "printf(\"%u|\", pid);"
    },
    {
        "line": 55,
        "fullcodeline": "exit(0);"
    },
    {
        "line": 60,
        "fullcodeline": "usb_register_callback(usb_sock);"
    },
    {
        "line": 63,
        "fullcodeline": "struct service_thread_param *args = calloc(1, sizeof(*args));"
    },
    {
        "line": 69,
        "fullcodeline": "args->usb_sock = usb_sock;"
    },
    {
        "line": 73,
        "fullcodeline": "args->tcp = tcp_conn_select(tcp_socket, tcp6_socket);"
    },
    {
        "line": 79,
        "fullcodeline": "int status = pthread_create(&args->thread_handle, NULL,"
    },
    {
        "line": 99,
        "fullcodeline": "tcp_close(tcp_socket);"
    },
    {
        "line": 101,
        "fullcodeline": "tcp_close(tcp6_socket);"
    },
    {
        "line": 104,
        "fullcodeline": "usb_close(usb_sock);"
    },
    {
        "line": 7,
        "fullcodeline": "if (usb_sock == NULL)"
    },
    {
        "line": 10,
        "fullcodeline": "usb_sock = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "if (tcp_socket || tcp6_socket || g_options.only_desired_port)"
    },
    {
        "line": 24,
        "fullcodeline": "if (desired_port == 1 || desired_port == 0)"
    },
    {
        "line": 38,
        "fullcodeline": "real_port = tcp_port_number_get(tcp6_socket);"
    },
    {
        "line": 64,
        "fullcodeline": "if (args == NULL) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (args->tcp == NULL) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (args != NULL) {"
    },
    {
        "line": 28,
        "fullcodeline": "desired_port = 49152;"
    },
    {
        "line": 65,
        "fullcodeline": "ERR(\"Failed to alloc space for thread args\");"
    },
    {
        "line": 75,
        "fullcodeline": "ERR(\"Failed to open tcp connection\");"
    },
    {
        "line": 82,
        "fullcodeline": "ERR(\"Failed to spawn thread, error %d\", status);"
    },
    {
        "line": 92,
        "fullcodeline": "free(args);"
    },
    {
        "line": 90,
        "fullcodeline": "if (args->tcp != NULL)"
    },
    {
        "line": 91,
        "fullcodeline": "tcp_conn_close(args->tcp);"
    }
]