[
    {
        "line": 4,
        "fullcodeline": "unsigned char *data = pkthdr->data;"
    },
    {
        "line": 5,
        "fullcodeline": "unsigned int act_size = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "int got_user_packet = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "int got_pass_packet = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "int got_width_packet = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "int got_height_packet = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "success = parse_control_packet(data, data_len - MT_HEADER_LEN, &cpkt);"
    },
    {
        "line": 80,
        "fullcodeline": "if (got_user_packet && got_pass_packet) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (curconn->state == STATE_ACTIVE && (got_width_packet || got_height_packet)) {"
    },
    {
        "line": 77,
        "fullcodeline": "success = parse_control_packet(NULL, 0, &cpkt);"
    },
    {
        "line": 81,
        "fullcodeline": "user_login(curconn, pkthdr);"
    },
    {
        "line": 85,
        "fullcodeline": "set_terminal_size(curconn->ptsfd, curconn->terminal_width, curconn->terminal_height);"
    },
    {
        "line": 16,
        "fullcodeline": "if (cpkt.cptype == MT_CPTYPE_BEGINAUTH) {"
    },
    {
        "line": 26,
        "fullcodeline": "init_packet(&pdata, MT_PTYPE_DATA, pkthdr->dstaddr, pkthdr->srcaddr, pkthdr->seskey, curconn->outcounter);"
    },
    {
        "line": 27,
        "fullcodeline": "plen = add_control_packet(&pdata, MT_CPTYPE_PASSSALT, (curconn->pass_salt), 16);"
    },
    {
        "line": 28,
        "fullcodeline": "curconn->outcounter += plen;"
    },
    {
        "line": 30,
        "fullcodeline": "send_udp(curconn, &pdata);"
    },
    {
        "line": 18,
        "fullcodeline": "if (!curconn->have_pass_salt) {"
    },
    {
        "line": 22,
        "fullcodeline": "curconn->have_pass_salt = 1;"
    },
    {
        "line": 24,
        "fullcodeline": "memset(curconn->trypassword, 0, sizeof(curconn->trypassword));"
    },
    {
        "line": 33,
        "fullcodeline": "} else if (cpkt.cptype == MT_CPTYPE_USERNAME && curconn->state != STATE_ACTIVE) {"
    },
    {
        "line": 19,
        "fullcodeline": "for (i = 0; i < 16; ++i) {"
    },
    {
        "line": 34,
        "fullcodeline": "memcpy(curconn->username, cpkt.data, act_size = (cpkt.length > MT_MNDP_MAX_STRING_SIZE - 1 ? MT_MNDP_MAX_STRING_SIZE - 1 : cpkt.length));"
    },
    {
        "line": 35,
        "fullcodeline": "curconn->username[act_size] = 0;"
    },
    {
        "line": 36,
        "fullcodeline": "got_user_packet = 1;"
    },
    {
        "line": 20,
        "fullcodeline": "curconn->pass_salt[i] = rand() % 256;"
    },
    {
        "line": 38,
        "fullcodeline": "} else if (cpkt.cptype == MT_CPTYPE_TERM_WIDTH && cpkt.length >= 2) {"
    },
    {
        "line": 41,
        "fullcodeline": "memcpy(&width, cpkt.data, 2);"
    },
    {
        "line": 42,
        "fullcodeline": "curconn->terminal_width = le16toh(width);"
    },
    {
        "line": 43,
        "fullcodeline": "got_width_packet = 1;"
    },
    {
        "line": 45,
        "fullcodeline": "} else if (cpkt.cptype == MT_CPTYPE_TERM_HEIGHT && cpkt.length >= 2) {"
    },
    {
        "line": 48,
        "fullcodeline": "memcpy(&height, cpkt.data, 2);"
    },
    {
        "line": 49,
        "fullcodeline": "curconn->terminal_height = le16toh(height);"
    },
    {
        "line": 50,
        "fullcodeline": "got_height_packet = 1;"
    },
    {
        "line": 52,
        "fullcodeline": "} else if (cpkt.cptype == MT_CPTYPE_TERM_TYPE) {"
    },
    {
        "line": 54,
        "fullcodeline": "memcpy(curconn->terminal_type, cpkt.data, act_size = (cpkt.length > 30 - 1 ? 30 - 1 : cpkt.length));"
    },
    {
        "line": 55,
        "fullcodeline": "curconn->terminal_type[act_size] = 0;"
    },
    {
        "line": 57,
        "fullcodeline": "} else if (cpkt.cptype == MT_CPTYPE_PASSWORD) {"
    },
    {
        "line": 62,
        "fullcodeline": "memcpy(curconn->trypassword, cpkt.data, 17);"
    },
    {
        "line": 63,
        "fullcodeline": "got_pass_packet = 1;"
    },
    {
        "line": 65,
        "fullcodeline": "} else if (cpkt.cptype == MT_CPTYPE_PLAINDATA) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (curconn->state == STATE_ACTIVE && curconn->ptsfd != -1) {"
    },
    {
        "line": 73,
        "fullcodeline": "syslog(LOG_WARNING, _(\"(%d) Unhandeled control packet type: %d\"), curconn->seskey, cpkt.cptype);"
    },
    {
        "line": 69,
        "fullcodeline": "write(curconn->ptsfd, cpkt.data, cpkt.length);"
    }
]