[
    {
        "line": 3,
        "fullcodeline": "unsigned char md5sum[17];"
    },
    {
        "line": 4,
        "fullcodeline": "char md5data[100];"
    },
    {
        "line": 10,
        "fullcodeline": "read_userfile();"
    },
    {
        "line": 57,
        "fullcodeline": "curconn->state = STATE_ACTIVE;"
    },
    {
        "line": 60,
        "fullcodeline": "curconn->terminal_mode = 1;"
    },
    {
        "line": 63,
        "fullcodeline": "curconn->ptsfd = posix_openpt(O_RDWR);"
    },
    {
        "line": 72,
        "fullcodeline": "slavename = ptsname(curconn->ptsfd);"
    },
    {
        "line": 12,
        "fullcodeline": "if ((user = find_user(curconn->username)) != NULL) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (slavename != NULL) {"
    },
    {
        "line": 23,
        "fullcodeline": "act_pass_len = strlen(user->password);"
    },
    {
        "line": 24,
        "fullcodeline": "act_pass_len = act_pass_len <= 82 ? act_pass_len : 82;"
    },
    {
        "line": 27,
        "fullcodeline": "md5data[0] = 0;"
    },
    {
        "line": 28,
        "fullcodeline": "memcpy(md5data + 1, user->password, act_pass_len);"
    },
    {
        "line": 29,
        "fullcodeline": "memcpy(md5data + 1 + act_pass_len, curconn->pass_salt, 16);"
    },
    {
        "line": 32,
        "fullcodeline": "md5_init(&state);"
    },
    {
        "line": 33,
        "fullcodeline": "md5_append(&state, (const md5_byte_t *)md5data, 1 + act_pass_len + 16);"
    },
    {
        "line": 34,
        "fullcodeline": "md5_finish(&state, (md5_byte_t *)md5sum + 1);"
    },
    {
        "line": 35,
        "fullcodeline": "md5sum[0] = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "init_packet(&pdata, MT_PTYPE_DATA, pkthdr->dstaddr, pkthdr->srcaddr, pkthdr->seskey, curconn->outcounter);"
    },
    {
        "line": 38,
        "fullcodeline": "curconn->outcounter += add_control_packet(&pdata, MT_CPTYPE_END_AUTH, NULL, 0);"
    },
    {
        "line": 39,
        "fullcodeline": "send_udp(curconn, &pdata);"
    },
    {
        "line": 46,
        "fullcodeline": "if (user == NULL || memcmp(md5sum, curconn->trypassword, 17) != 0) {"
    },
    {
        "line": 47,
        "fullcodeline": "syslog(LOG_NOTICE, _(\"(%d) Invalid login by %s.\"), curconn->seskey, curconn->username);"
    },
    {
        "line": 64,
        "fullcodeline": "if (curconn->ptsfd == -1 || grantpt(curconn->ptsfd) == -1 || unlockpt(curconn->ptsfd) == -1) {"
    },
    {
        "line": 76,
        "fullcodeline": "struct passwd *user = (struct passwd *)malloc(sizeof(struct passwd));"
    },
    {
        "line": 77,
        "fullcodeline": "struct passwd *tmpuser=user;"
    },
    {
        "line": 78,
        "fullcodeline": "char *buffer = malloc(1024);"
    },
    {
        "line": 97,
        "fullcodeline": "chown(slavename, user->pw_uid, user->pw_gid);"
    },
    {
        "line": 99,
        "fullcodeline": "curconn->slavefd = open(slavename, O_RDWR);"
    },
    {
        "line": 41,
        "fullcodeline": "if (curconn->state == STATE_ACTIVE) {"
    },
    {
        "line": 50,
        "fullcodeline": "abort_connection(curconn, pkthdr, _(\"Login failed, incorrect username or password\\r\\n\"));"
    },
    {
        "line": 65,
        "fullcodeline": "syslog(LOG_ERR, \"posix_openpt: %s\", strerror(errno));"
    },
    {
        "line": 67,
        "fullcodeline": "abort_connection(curconn, pkthdr, _(\"Terminal error\\r\\n\"));"
    },
    {
        "line": 100,
        "fullcodeline": "if (curconn->slavefd == -1) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (user == NULL || buffer == NULL) {"
    },
    {
        "line": 81,
        "fullcodeline": "syslog(LOG_CRIT, _(\"(%d) Error allocating memory.\"), curconn->seskey);"
    },
    {
        "line": 87,
        "fullcodeline": "if (getpwnam_r(curconn->username, user, buffer, 1024, &tmpuser) != 0) {"
    },
    {
        "line": 88,
        "fullcodeline": "syslog(LOG_WARNING, _(\"(%d) Login ok, but local user not accessible (%s).\"), curconn->seskey, curconn->username);"
    },
    {
        "line": 103,
        "fullcodeline": "abort_connection(curconn, pkthdr, _(\"Error opening terminal\\r\\n\"));"
    },
    {
        "line": 108,
        "fullcodeline": "if ((pid = fork()) == 0) {"
    },
    {
        "line": 112,
        "fullcodeline": "uwtmp_login(curconn);"
    },
    {
        "line": 114,
        "fullcodeline": "syslog(LOG_INFO, _(\"(%d) User %s logged in.\"), curconn->seskey, curconn->username);"
    },
    {
        "line": 117,
        "fullcodeline": "setenv(\"USER\", user->pw_name, 1);"
    },
    {
        "line": 118,
        "fullcodeline": "setenv(\"HOME\", user->pw_dir, 1);"
    },
    {
        "line": 119,
        "fullcodeline": "setenv(\"SHELL\", user->pw_shell, 1);"
    },
    {
        "line": 120,
        "fullcodeline": "setenv(\"TERM\", curconn->terminal_type, 1);"
    },
    {
        "line": 121,
        "fullcodeline": "close(sockfd);"
    },
    {
        "line": 122,
        "fullcodeline": "close(insockfd);"
    },
    {
        "line": 124,
        "fullcodeline": "DL_FOREACH(interfaces, interface) {"
    },
    {
        "line": 132,
        "fullcodeline": "fcntl (curconn->slavefd, F_SETFD, FD_CLOEXEC);"
    },
    {
        "line": 133,
        "fullcodeline": "close(curconn->ptsfd);"
    },
    {
        "line": 137,
        "fullcodeline": "dup(curconn->slavefd);"
    },
    {
        "line": 139,
        "fullcodeline": "dup(curconn->slavefd);"
    },
    {
        "line": 141,
        "fullcodeline": "dup(curconn->slavefd);"
    },
    {
        "line": 144,
        "fullcodeline": "ioctl(0, TIOCSCTTY, 1);"
    },
    {
        "line": 168,
        "fullcodeline": "chdir(user->pw_dir);"
    },
    {
        "line": 172,
        "fullcodeline": "execl(user->pw_shell, user->pw_shell, \"-\", (char *) 0);"
    },
    {
        "line": 83,
        "fullcodeline": "abort_connection(curconn, pkthdr, _(\"System error, out of memory\\r\\n\"));"
    },
    {
        "line": 90,
        "fullcodeline": "abort_connection(curconn, pkthdr, _(\"Local user not accessible\\r\\n\"));"
    },
    {
        "line": 101,
        "fullcodeline": "syslog(LOG_ERR, _(\"Error opening %s: %s\"), slavename, strerror(errno));"
    },
    {
        "line": 125,
        "fullcodeline": "if (interface->socketfd > 0) {"
    },
    {
        "line": 148,
        "fullcodeline": "if ((setgid(user->pw_gid) != 0) || (setuid(user->pw_uid) != 0)) {"
    },
    {
        "line": 149,
        "fullcodeline": "syslog(LOG_ERR, _(\"(%d) Could not log in %s (%d:%d): setuid/setgid: %s\"), curconn->seskey, curconn->username, user->pw_uid, user->pw_gid, strerror(errno));"
    },
    {
        "line": 151,
        "fullcodeline": "abort_connection(curconn, pkthdr, _(\"Internal error\\r\\n\"));"
    },
    {
        "line": 156,
        "fullcodeline": "if (stat(_PATH_NOLOGIN, &sb) == 0 && getuid() != 0) {"
    },
    {
        "line": 159,
        "fullcodeline": "curconn->state = STATE_CLOSED;"
    },
    {
        "line": 160,
        "fullcodeline": "init_packet(&pdata, MT_PTYPE_END, pkthdr->dstaddr, pkthdr->srcaddr, pkthdr->seskey, curconn->outcounter);"
    },
    {
        "line": 161,
        "fullcodeline": "send_udp(curconn, &pdata);"
    }
]