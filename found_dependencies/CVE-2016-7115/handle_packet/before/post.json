[
    {
        "line": 8,
        "fullcodeline": "parse_packet(data, &pkthdr);"
    },
    {
        "line": 5,
        "fullcodeline": "if (data_len < MT_HEADER_LEN){"
    },
    {
        "line": 11,
        "fullcodeline": "if (pkthdr.seskey != sessionkey) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (pkthdr.ptype == MT_PTYPE_DATA) {"
    },
    {
        "line": 19,
        "fullcodeline": "int success = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "init_packet(&odata, MT_PTYPE_ACK, srcmac, dstmac, sessionkey, pkthdr.counter + (data_len - MT_HEADER_LEN));"
    },
    {
        "line": 23,
        "fullcodeline": "send_udp(&odata, 0);"
    },
    {
        "line": 35,
        "fullcodeline": "success = parse_control_packet(data + MT_HEADER_LEN, data_len - MT_HEADER_LEN, &cpkt);"
    },
    {
        "line": 6,
        "fullcodeline": "return -1;"
    },
    {
        "line": 12,
        "fullcodeline": "return -1;"
    },
    {
        "line": 27,
        "fullcodeline": "if (pkthdr.counter > incounter || (incounter - pkthdr.counter) > 65535) {"
    },
    {
        "line": 28,
        "fullcodeline": "incounter = pkthdr.counter;"
    },
    {
        "line": 70,
        "fullcodeline": "success = parse_control_packet(NULL, 0, &cpkt);"
    },
    {
        "line": 73,
        "fullcodeline": "else if (pkthdr.ptype == MT_PTYPE_ACK) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (cpkt.cptype == MT_CPTYPE_PASSSALT) {"
    },
    {
        "line": 31,
        "fullcodeline": "return -1;"
    },
    {
        "line": 41,
        "fullcodeline": "memcpy(pass_salt, cpkt.data, cpkt.length);"
    },
    {
        "line": 42,
        "fullcodeline": "send_auth(username, password);"
    },
    {
        "line": 78,
        "fullcodeline": "else if (pkthdr.ptype == MT_PTYPE_END) {"
    },
    {
        "line": 47,
        "fullcodeline": "else if (cpkt.cptype == MT_CPTYPE_PLAINDATA) {"
    },
    {
        "line": 82,
        "fullcodeline": "init_packet(&odata, MT_PTYPE_END, srcmac, dstmac, pkthdr.seskey, 0);"
    },
    {
        "line": 83,
        "fullcodeline": "send_udp(&odata, 0);"
    },
    {
        "line": 90,
        "fullcodeline": "running = 0;"
    },
    {
        "line": 48,
        "fullcodeline": "fwrite((const void *)cpkt.data, 1, cpkt.length, stdout);"
    },
    {
        "line": 85,
        "fullcodeline": "if (!quiet_mode) {"
    },
    {
        "line": 92,
        "fullcodeline": "fprintf(stderr, _(\"Unhandeled packet type: %d received from server %s\\n\"), pkthdr.ptype, ether_ntoa((struct ether_addr *)dstmac));"
    },
    {
        "line": 86,
        "fullcodeline": "fprintf(stderr, _(\"Connection closed.\\n\"));"
    },
    {
        "line": 93,
        "fullcodeline": "return -1;"
    },
    {
        "line": 53,
        "fullcodeline": "else if (cpkt.cptype == MT_CPTYPE_END_AUTH) {"
    },
    {
        "line": 56,
        "fullcodeline": "terminal_mode = 1;"
    },
    {
        "line": 60,
        "fullcodeline": "raw_term();"
    },
    {
        "line": 62,
        "fullcodeline": "setvbuf(stdin,  (char*)NULL, _IONBF, 0);"
    },
    {
        "line": 65,
        "fullcodeline": "signal(SIGWINCH, sig_winch);"
    }
]