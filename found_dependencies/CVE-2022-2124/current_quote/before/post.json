[
    {
        "line": 7,
        "fullcodeline": "char_u\t*line = ml_get_curline();"
    },
    {
        "line": 10,
        "fullcodeline": "int\t\tinclusive = FALSE;"
    },
    {
        "line": 11,
        "fullcodeline": "int\t\tvis_empty = TRUE;\t// Visual selection <= 1 char"
    },
    {
        "line": 12,
        "fullcodeline": "int\t\tvis_bef_curs = FALSE;\t// Visual starts before cursor"
    },
    {
        "line": 13,
        "fullcodeline": "int\t\tdid_exclusive_adj = FALSE;  // adjusted pos for 'selection'"
    },
    {
        "line": 14,
        "fullcodeline": "int\t\tinside_quotes = FALSE;\t// Looks like \"i'\" done before"
    },
    {
        "line": 15,
        "fullcodeline": "int\t\tselected_quote = FALSE;\t// Has quote inside selection"
    },
    {
        "line": 17,
        "fullcodeline": "int\t\trestore_vis_bef = FALSE; // restore VIsual on abort"
    },
    {
        "line": 195,
        "fullcodeline": "curwin->w_cursor.col = col_start;"
    },
    {
        "line": 220,
        "fullcodeline": "curwin->w_cursor.col = col_end;"
    },
    {
        "line": 56,
        "fullcodeline": "if (!vis_empty)"
    },
    {
        "line": 88,
        "fullcodeline": "if (!vis_empty && line[col_start] == quotechar)"
    },
    {
        "line": 193,
        "fullcodeline": "if (!include && count < 2 && (vis_empty || !inside_quotes))"
    },
    {
        "line": 221,
        "fullcodeline": "if ((include || count > 1 // After vi\" another i\" must include the \"."
    },
    {
        "line": 264,
        "fullcodeline": "if (VIsual_active && *p_sel == 'e')"
    },
    {
        "line": 28,
        "fullcodeline": "vis_bef_curs = LT_POS(VIsual, curwin->w_cursor);"
    },
    {
        "line": 29,
        "fullcodeline": "vis_empty = EQUAL_POS(VIsual, curwin->w_cursor);"
    },
    {
        "line": 194,
        "fullcodeline": "++col_start;"
    },
    {
        "line": 223,
        "fullcodeline": ") && inc_cursor() == 2)"
    },
    {
        "line": 224,
        "fullcodeline": "inclusive = TRUE;"
    },
    {
        "line": 30,
        "fullcodeline": "if (*p_sel == 'e')"
    },
    {
        "line": 80,
        "fullcodeline": "while (i <= col_end)"
    },
    {
        "line": 183,
        "fullcodeline": "if (VIM_ISWHITE(line[col_end + 1]))"
    },
    {
        "line": 201,
        "fullcodeline": "if (vis_empty"
    },
    {
        "line": 215,
        "fullcodeline": "oap->start = curwin->w_cursor;"
    },
    {
        "line": 216,
        "fullcodeline": "oap->motion_type = MCHAR;"
    },
    {
        "line": 222,
        "fullcodeline": "|| (!vis_empty && inside_quotes)"
    },
    {
        "line": 227,
        "fullcodeline": "if (vis_empty || vis_bef_curs)"
    },
    {
        "line": 249,
        "fullcodeline": "if (VIsual_mode == 'V')"
    },
    {
        "line": 258,
        "fullcodeline": "oap->inclusive = inclusive;"
    },
    {
        "line": 42,
        "fullcodeline": "vis_empty = EQUAL_POS(VIsual, curwin->w_cursor);"
    },
    {
        "line": 62,
        "fullcodeline": "inside_quotes = VIsual.col > 0"
    },
    {
        "line": 66,
        "fullcodeline": "i = VIsual.col;"
    },
    {
        "line": 81,
        "fullcodeline": "if (line[i++] == quotechar)"
    },
    {
        "line": 96,
        "fullcodeline": "col_start = find_next_quote(line, col_start + 1, quotechar, NULL);"
    },
    {
        "line": 99,
        "fullcodeline": "col_end = find_next_quote(line, col_start + 1, quotechar,"
    },
    {
        "line": 125,
        "fullcodeline": "if (line[col_start] == quotechar || !vis_empty)"
    },
    {
        "line": 202,
        "fullcodeline": "|| (vis_bef_curs"
    },
    {
        "line": 209,
        "fullcodeline": "VIsual = curwin->w_cursor;"
    },
    {
        "line": 210,
        "fullcodeline": "redraw_curbuf_later(INVERTED);"
    },
    {
        "line": 251,
        "fullcodeline": "VIsual_mode = 'v';"
    },
    {
        "line": 252,
        "fullcodeline": "redraw_cmdline = TRUE;\t\t// show mode later"
    },
    {
        "line": 267,
        "fullcodeline": "inc_cursor();"
    },
    {
        "line": 270,
        "fullcodeline": "pos_T t = curwin->w_cursor;"
    },
    {
        "line": 272,
        "fullcodeline": "curwin->w_cursor = VIsual;"
    },
    {
        "line": 273,
        "fullcodeline": "VIsual = t;"
    },
    {
        "line": 43,
        "fullcodeline": "if (!vis_bef_curs && !vis_empty)"
    },
    {
        "line": 71,
        "fullcodeline": "inside_quotes = curwin->w_cursor.col > 0"
    },
    {
        "line": 75,
        "fullcodeline": "i = curwin->w_cursor.col;"
    },
    {
        "line": 76,
        "fullcodeline": "col_end = VIsual.col;"
    },
    {
        "line": 83,
        "fullcodeline": "selected_quote = TRUE;"
    },
    {
        "line": 97,
        "fullcodeline": "if (col_start < 0)"
    },
    {
        "line": 101,
        "fullcodeline": "if (col_end < 0)"
    },
    {
        "line": 110,
        "fullcodeline": "col_end = find_prev_quote(line, col_start, quotechar, NULL);"
    },
    {
        "line": 113,
        "fullcodeline": "col_start = find_prev_quote(line, col_end, quotechar,"
    },
    {
        "line": 127,
        "fullcodeline": "int\tfirst_col = col_start;"
    },
    {
        "line": 141,
        "fullcodeline": "col_start = 0;"
    },
    {
        "line": 184,
        "fullcodeline": "while (VIM_ISWHITE(line[col_end + 1]))"
    },
    {
        "line": 185,
        "fullcodeline": "++col_end;"
    },
    {
        "line": 204,
        "fullcodeline": "&& (inside_quotes"
    },
    {
        "line": 230,
        "fullcodeline": "if (*p_sel != 'e')"
    },
    {
        "line": 247,
        "fullcodeline": "curwin->w_cursor.col = col_start;"
    },
    {
        "line": 34,
        "fullcodeline": "dec_cursor();"
    },
    {
        "line": 35,
        "fullcodeline": "did_exclusive_adj = TRUE;"
    },
    {
        "line": 46,
        "fullcodeline": "pos_T t = curwin->w_cursor;"
    },
    {
        "line": 48,
        "fullcodeline": "curwin->w_cursor = VIsual;"
    },
    {
        "line": 49,
        "fullcodeline": "VIsual = t;"
    },
    {
        "line": 50,
        "fullcodeline": "vis_bef_curs = TRUE;"
    },
    {
        "line": 51,
        "fullcodeline": "restore_vis_bef = TRUE;"
    },
    {
        "line": 65,
        "fullcodeline": "&& line[curwin->w_cursor.col + 1] == quotechar;"
    },
    {
        "line": 104,
        "fullcodeline": "col_end = col_start;"
    },
    {
        "line": 105,
        "fullcodeline": "col_start = curwin->w_cursor.col;"
    },
    {
        "line": 111,
        "fullcodeline": "if (line[col_end] != quotechar)"
    },
    {
        "line": 115,
        "fullcodeline": "if (line[col_start] != quotechar)"
    },
    {
        "line": 129,
        "fullcodeline": "if (!vis_empty)"
    },
    {
        "line": 163,
        "fullcodeline": "col_start = find_prev_quote(line, col_start, quotechar, curbuf->b_p_qe);"
    },
    {
        "line": 173,
        "fullcodeline": "col_end = find_next_quote(line, col_start + 1, quotechar,"
    },
    {
        "line": 187,
        "fullcodeline": "while (col_start > 0 && VIM_ISWHITE(line[col_start - 1]))"
    },
    {
        "line": 188,
        "fullcodeline": "--col_start;"
    },
    {
        "line": 203,
        "fullcodeline": "&& !selected_quote"
    },
    {
        "line": 205,
        "fullcodeline": "|| (line[VIsual.col] != quotechar"
    },
    {
        "line": 231,
        "fullcodeline": "dec_cursor();"
    },
    {
        "line": 238,
        "fullcodeline": "if (inside_quotes"
    },
    {
        "line": 64,
        "fullcodeline": "&& line[curwin->w_cursor.col] != NUL"
    },
    {
        "line": 74,
        "fullcodeline": "&& line[VIsual.col + 1] == quotechar;"
    },
    {
        "line": 118,
        "fullcodeline": "col_start = col_end;"
    },
    {
        "line": 119,
        "fullcodeline": "col_end = curwin->w_cursor.col;"
    },
    {
        "line": 145,
        "fullcodeline": "col_start = find_next_quote(line, col_start, quotechar, NULL);"
    },
    {
        "line": 149,
        "fullcodeline": "col_end = find_next_quote(line, col_start + 1, quotechar,"
    },
    {
        "line": 157,
        "fullcodeline": "col_start = col_end + 1;"
    },
    {
        "line": 164,
        "fullcodeline": "if (line[col_start] != quotechar)"
    },
    {
        "line": 175,
        "fullcodeline": "if (col_end < 0)"
    },
    {
        "line": 206,
        "fullcodeline": "&& (VIsual.col == 0"
    },
    {
        "line": 239,
        "fullcodeline": "|| (!selected_quote"
    },
    {
        "line": 244,
        "fullcodeline": "dec_cursor();"
    },
    {
        "line": 245,
        "fullcodeline": "VIsual = curwin->w_cursor;"
    },
    {
        "line": 37,
        "fullcodeline": "else if (!vis_empty)"
    },
    {
        "line": 63,
        "fullcodeline": "&& line[VIsual.col - 1] == quotechar"
    },
    {
        "line": 73,
        "fullcodeline": "&& line[VIsual.col] != NUL"
    },
    {
        "line": 146,
        "fullcodeline": "if (col_start < 0 || col_start > first_col)"
    },
    {
        "line": 151,
        "fullcodeline": "if (col_end < 0)"
    },
    {
        "line": 155,
        "fullcodeline": "if (col_start <= first_col && first_col <= col_end)"
    },
    {
        "line": 167,
        "fullcodeline": "col_start = find_next_quote(line, col_start, quotechar, NULL);"
    },
    {
        "line": 207,
        "fullcodeline": "|| line[VIsual.col - 1] != quotechar)))))"
    },
    {
        "line": 241,
        "fullcodeline": "&& (line[VIsual.col] == NUL"
    },
    {
        "line": 39,
        "fullcodeline": "dec(&VIsual);"
    },
    {
        "line": 40,
        "fullcodeline": "did_exclusive_adj = TRUE;"
    },
    {
        "line": 72,
        "fullcodeline": "&& line[curwin->w_cursor.col - 1] == quotechar"
    },
    {
        "line": 132,
        "fullcodeline": "first_col = find_next_quote(line, col_start, quotechar, NULL);"
    },
    {
        "line": 168,
        "fullcodeline": "if (col_start < 0)"
    },
    {
        "line": 240,
        "fullcodeline": "&& line[VIsual.col] != quotechar"
    },
    {
        "line": 242,
        "fullcodeline": "|| line[VIsual.col + 1] != quotechar)))"
    },
    {
        "line": 134,
        "fullcodeline": "first_col = find_prev_quote(line, col_start, quotechar, NULL);"
    }
]