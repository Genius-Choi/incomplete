[
    {
        "line": 3,
        "fullcodeline": "SECURITY_STATUS status = SEC_E_INVALID_TOKEN;"
    },
    {
        "line": 6,
        "fullcodeline": "UINT32 flags = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "NTLM_AV_PAIR* AvFlags = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "SSPI_CREDENTIALS* credentials = context->credentials;"
    },
    {
        "line": 12,
        "fullcodeline": "message = &context->AUTHENTICATE_MESSAGE;"
    },
    {
        "line": 13,
        "fullcodeline": "ZeroMemory(message, sizeof(NTLM_AUTHENTICATE_MESSAGE));"
    },
    {
        "line": 14,
        "fullcodeline": "s = Stream_New((BYTE*)buffer->pvBuffer, buffer->cbBuffer);"
    },
    {
        "line": 48,
        "fullcodeline": "Stream_Read_UINT32(s, message->NegotiateFlags); /* NegotiateFlags (4 bytes) */"
    },
    {
        "line": 49,
        "fullcodeline": "context->NegotiateKeyExchange ="
    },
    {
        "line": 62,
        "fullcodeline": "PayloadBufferOffset = Stream_GetPosition(s);"
    },
    {
        "line": 64,
        "fullcodeline": "status = SEC_E_INTERNAL_ERROR;"
    },
    {
        "line": 126,
        "fullcodeline": "length = Stream_GetPosition(s);"
    },
    {
        "line": 131,
        "fullcodeline": "CopyMemory(context->AuthenticateMessage.pvBuffer, Stream_Buffer(s), length);"
    },
    {
        "line": 132,
        "fullcodeline": "buffer->cbBuffer = length;"
    },
    {
        "line": 133,
        "fullcodeline": "Stream_SetPosition(s, PayloadBufferOffset);"
    },
    {
        "line": 146,
        "fullcodeline": "status = SEC_E_INTERNAL_ERROR;"
    },
    {
        "line": 197,
        "fullcodeline": "Stream_Free(s, FALSE);"
    },
    {
        "line": 199,
        "fullcodeline": "context->state = NTLM_STATE_COMPLETION;"
    },
    {
        "line": 203,
        "fullcodeline": "Stream_Free(s, FALSE);"
    },
    {
        "line": 16,
        "fullcodeline": "if (!s)"
    },
    {
        "line": 19,
        "fullcodeline": "if (ntlm_read_message_header(s, (NTLM_MESSAGE_HEADER*)message) < 0)"
    },
    {
        "line": 22,
        "fullcodeline": "if (message->MessageType != MESSAGE_TYPE_AUTHENTICATE)"
    },
    {
        "line": 25,
        "fullcodeline": "if (ntlm_read_message_fields(s, &(message->LmChallengeResponse)) <"
    },
    {
        "line": 29,
        "fullcodeline": "if (ntlm_read_message_fields(s, &(message->NtChallengeResponse)) <"
    },
    {
        "line": 33,
        "fullcodeline": "if (ntlm_read_message_fields(s, &(message->DomainName)) < 0) /* DomainNameFields (8 bytes) */"
    },
    {
        "line": 36,
        "fullcodeline": "if (ntlm_read_message_fields(s, &(message->UserName)) < 0) /* UserNameFields (8 bytes) */"
    },
    {
        "line": 39,
        "fullcodeline": "if (ntlm_read_message_fields(s, &(message->Workstation)) < 0) /* WorkstationFields (8 bytes) */"
    },
    {
        "line": 42,
        "fullcodeline": "if (ntlm_read_message_fields(s, &(message->EncryptedRandomSessionKey)) <"
    },
    {
        "line": 46,
        "fullcodeline": "if (Stream_GetRemainingLength(s) < 4)"
    },
    {
        "line": 50,
        "fullcodeline": "(message->NegotiateFlags & NTLMSSP_NEGOTIATE_KEY_EXCH) ? TRUE : FALSE;"
    },
    {
        "line": 52,
        "fullcodeline": "if ((context->NegotiateKeyExchange && !message->EncryptedRandomSessionKey.Len) ||"
    },
    {
        "line": 56,
        "fullcodeline": "if (message->NegotiateFlags & NTLMSSP_NEGOTIATE_VERSION)"
    },
    {
        "line": 65,
        "fullcodeline": "if (ntlm_read_message_fields_buffer(s, &(message->DomainName)) < 0) /* DomainName */"
    },
    {
        "line": 68,
        "fullcodeline": "if (ntlm_read_message_fields_buffer(s, &(message->UserName)) < 0) /* UserName */"
    },
    {
        "line": 71,
        "fullcodeline": "if (ntlm_read_message_fields_buffer(s, &(message->Workstation)) < 0) /* Workstation */"
    },
    {
        "line": 74,
        "fullcodeline": "if (ntlm_read_message_fields_buffer(s, &(message->LmChallengeResponse)) <"
    },
    {
        "line": 78,
        "fullcodeline": "if (ntlm_read_message_fields_buffer(s, &(message->NtChallengeResponse)) <"
    },
    {
        "line": 82,
        "fullcodeline": "if (message->NtChallengeResponse.Len > 0)"
    },
    {
        "line": 113,
        "fullcodeline": "if (ntlm_read_message_fields_buffer(s, &(message->EncryptedRandomSessionKey)) <"
    },
    {
        "line": 117,
        "fullcodeline": "if (message->EncryptedRandomSessionKey.Len > 0)"
    },
    {
        "line": 128,
        "fullcodeline": "if (!sspi_SecBufferAlloc(&context->AuthenticateMessage, length))"
    },
    {
        "line": 135,
        "fullcodeline": "if (flags & MSV_AV_FLAGS_MESSAGE_INTEGRITY_CHECK)"
    },
    {
        "line": 174,
        "fullcodeline": "if (message->UserName.Len > 0)"
    },
    {
        "line": 185,
        "fullcodeline": "if (message->DomainName.Len > 0)"
    },
    {
        "line": 53,
        "fullcodeline": "(!context->NegotiateKeyExchange && message->EncryptedRandomSessionKey.Len))"
    },
    {
        "line": 86,
        "fullcodeline": "wStream* snt ="
    },
    {
        "line": 92,
        "fullcodeline": "status = SEC_E_INVALID_TOKEN;"
    },
    {
        "line": 93,
        "fullcodeline": "rc = ntlm_read_ntlm_v2_response(snt, &(context->NTLMv2Response));"
    },
    {
        "line": 94,
        "fullcodeline": "Stream_Free(snt, FALSE);"
    },
    {
        "line": 97,
        "fullcodeline": "status = SEC_E_INTERNAL_ERROR;"
    },
    {
        "line": 99,
        "fullcodeline": "context->NtChallengeResponse.pvBuffer = message->NtChallengeResponse.Buffer;"
    },
    {
        "line": 100,
        "fullcodeline": "context->NtChallengeResponse.cbBuffer = message->NtChallengeResponse.Len;"
    },
    {
        "line": 101,
        "fullcodeline": "sspi_SecBufferFree(&(context->ChallengeTargetInfo));"
    },
    {
        "line": 103,
        "fullcodeline": "context->ChallengeTargetInfo.cbBuffer = message->NtChallengeResponse.Len - (28 + 16);"
    },
    {
        "line": 104,
        "fullcodeline": "CopyMemory(context->ClientChallenge, context->NTLMv2Response.Challenge.ClientChallenge, 8);"
    },
    {
        "line": 105,
        "fullcodeline": "AvFlags ="
    },
    {
        "line": 122,
        "fullcodeline": "CopyMemory(context->EncryptedRandomSessionKey, message->EncryptedRandomSessionKey.Buffer,"
    },
    {
        "line": 137,
        "fullcodeline": "context->MessageIntegrityCheckOffset = (UINT32)Stream_GetPosition(s);"
    },
    {
        "line": 139,
        "fullcodeline": "status = SEC_E_INVALID_TOKEN;"
    },
    {
        "line": 143,
        "fullcodeline": "Stream_Read(s, message->MessageIntegrityCheck, 16);"
    },
    {
        "line": 176,
        "fullcodeline": "credentials->identity.User = (UINT16*)malloc(message->UserName.Len);"
    },
    {
        "line": 181,
        "fullcodeline": "CopyMemory(credentials->identity.User, message->UserName.Buffer, message->UserName.Len);"
    },
    {
        "line": 182,
        "fullcodeline": "credentials->identity.UserLength = message->UserName.Len / 2;"
    },
    {
        "line": 187,
        "fullcodeline": "credentials->identity.Domain = (UINT16*)malloc(message->DomainName.Len);"
    },
    {
        "line": 192,
        "fullcodeline": "CopyMemory(credentials->identity.Domain, message->DomainName.Buffer,"
    },
    {
        "line": 194,
        "fullcodeline": "credentials->identity.DomainLength = message->DomainName.Len / 2;"
    },
    {
        "line": 58,
        "fullcodeline": "if (ntlm_read_version_info(s, &(message->Version)) < 0) /* Version (8 bytes) */"
    },
    {
        "line": 87,
        "fullcodeline": "Stream_New(message->NtChallengeResponse.Buffer, message->NtChallengeResponse.Len);"
    },
    {
        "line": 89,
        "fullcodeline": "if (!snt)"
    },
    {
        "line": 95,
        "fullcodeline": "if (rc < 0)"
    },
    {
        "line": 106,
        "fullcodeline": "ntlm_av_pair_get(context->NTLMv2Response.Challenge.AvPairs,"
    },
    {
        "line": 119,
        "fullcodeline": "if (message->EncryptedRandomSessionKey.Len != 16)"
    },
    {
        "line": 140,
        "fullcodeline": "if (Stream_GetRemainingLength(s) < 16)"
    },
    {
        "line": 178,
        "fullcodeline": "if (!credentials->identity.User)"
    },
    {
        "line": 189,
        "fullcodeline": "if (!credentials->identity.Domain)"
    },
    {
        "line": 110,
        "fullcodeline": "Data_Read_UINT32(ntlm_av_pair_get_value_pointer(AvFlags), flags);"
    }
]