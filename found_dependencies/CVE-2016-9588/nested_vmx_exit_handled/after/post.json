[
    {
        "line": 3,
        "fullcodeline": "u32 intr_info = vmcs_read32(VM_EXIT_INTR_INFO);"
    },
    {
        "line": 4,
        "fullcodeline": "struct vcpu_vmx *vmx = to_vmx(vcpu);"
    },
    {
        "line": 5,
        "fullcodeline": "struct vmcs12 *vmcs12 = get_vmcs12(vcpu);"
    },
    {
        "line": 6,
        "fullcodeline": "u32 exit_reason = vmx->exit_reason;"
    },
    {
        "line": 8,
        "fullcodeline": "trace_kvm_nested_vmexit(kvm_rip_read(vcpu), exit_reason,"
    },
    {
        "line": 9,
        "fullcodeline": "vmcs_readl(EXIT_QUALIFICATION),"
    },
    {
        "line": 12,
        "fullcodeline": "vmcs_read32(VM_EXIT_INTR_ERROR_CODE),"
    },
    {
        "line": 18,
        "fullcodeline": "if (unlikely(vmx->fail)) {"
    },
    {
        "line": 19,
        "fullcodeline": "pr_info_ratelimited(\"%s failed vm entry %x\\n\", __func__,"
    },
    {
        "line": 20,
        "fullcodeline": "vmcs_read32(VM_INSTRUCTION_ERROR));"
    },
    {
        "line": 26,
        "fullcodeline": "if (is_nmi(intr_info))"
    },
    {
        "line": 40,
        "fullcodeline": "return vmcs12->exception_bitmap &"
    },
    {
        "line": 47,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_VIRTUAL_INTR_PENDING);"
    },
    {
        "line": 49,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_VIRTUAL_NMI_PENDING);"
    },
    {
        "line": 53,
        "fullcodeline": "if (kvm_register_read(vcpu, VCPU_REGS_RAX) == 0xa)"
    },
    {
        "line": 57,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_HLT_EXITING);"
    },
    {
        "line": 61,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_INVLPG_EXITING);"
    },
    {
        "line": 63,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_RDPMC_EXITING);"
    },
    {
        "line": 65,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_RDTSC_EXITING);"
    },
    {
        "line": 78,
        "fullcodeline": "return nested_vmx_exit_handled_cr(vcpu, vmcs12);"
    },
    {
        "line": 80,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_MOV_DR_EXITING);"
    },
    {
        "line": 82,
        "fullcodeline": "return nested_vmx_exit_handled_io(vcpu, vmcs12);"
    },
    {
        "line": 84,
        "fullcodeline": "return nested_cpu_has2(vmcs12, SECONDARY_EXEC_DESC);"
    },
    {
        "line": 87,
        "fullcodeline": "return nested_vmx_exit_handled_msr(vcpu, vmcs12, exit_reason);"
    },
    {
        "line": 91,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_MWAIT_EXITING);"
    },
    {
        "line": 93,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_MONITOR_TRAP_FLAG);"
    },
    {
        "line": 95,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_MONITOR_EXITING);"
    },
    {
        "line": 97,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_PAUSE_EXITING) ||"
    },
    {
        "line": 103,
        "fullcodeline": "return nested_cpu_has(vmcs12, CPU_BASED_TPR_SHADOW);"
    },
    {
        "line": 105,
        "fullcodeline": "return nested_cpu_has2(vmcs12,"
    },
    {
        "line": 128,
        "fullcodeline": "return nested_cpu_has2(vmcs12, SECONDARY_EXEC_WBINVD_EXITING);"
    },
    {
        "line": 138,
        "fullcodeline": "return nested_cpu_has2(vmcs12, SECONDARY_EXEC_XSAVES);"
    },
    {
        "line": 41,
        "fullcodeline": "(1u << (intr_info & INTR_INFO_VECTOR_MASK));"
    },
    {
        "line": 98,
        "fullcodeline": "nested_cpu_has2(vmcs12,"
    },
    {
        "line": 28,
        "fullcodeline": "else if (is_page_fault(intr_info))"
    },
    {
        "line": 30,
        "fullcodeline": "else if (is_no_device(intr_info) &&"
    },
    {
        "line": 31,
        "fullcodeline": "!(vmcs12->guest_cr0 & X86_CR0_TS))"
    },
    {
        "line": 33,
        "fullcodeline": "else if (is_debug(intr_info) &&"
    },
    {
        "line": 34,
        "fullcodeline": "vcpu->guest_debug &"
    },
    {
        "line": 35,
        "fullcodeline": "(KVM_GUESTDBG_SINGLESTEP | KVM_GUESTDBG_USE_HW_BP))"
    },
    {
        "line": 37,
        "fullcodeline": "else if (is_breakpoint(intr_info) &&"
    },
    {
        "line": 38,
        "fullcodeline": "vcpu->guest_debug & KVM_GUESTDBG_USE_SW_BP)"
    }
]