[
    {
        "line": 3,
        "fullcodeline": "int color = img.channels() > 1;"
    },
    {
        "line": 4,
        "fullcodeline": "uchar* data = img.ptr();"
    },
    {
        "line": 5,
        "fullcodeline": "PaletteEntry palette[256];"
    },
    {
        "line": 6,
        "fullcodeline": "bool   result = false;"
    },
    {
        "line": 7,
        "fullcodeline": "const int bit_depth = CV_ELEM_SIZE1(m_type)*8;"
    },
    {
        "line": 8,
        "fullcodeline": "const int src_pitch = divUp(m_width*m_bpp*(bit_depth/8), 8);"
    },
    {
        "line": 9,
        "fullcodeline": "int  nch = CV_MAT_CN(m_type);"
    },
    {
        "line": 10,
        "fullcodeline": "int  width3 = m_width*nch;"
    },
    {
        "line": 15,
        "fullcodeline": "uchar gray_palette[256] = {0};"
    },
    {
        "line": 154,
        "fullcodeline": "CV_CATCH (cv::Exception, e)"
    },
    {
        "line": 12,
        "fullcodeline": "if( m_offset < 0 || !m_strm.isOpened())"
    },
    {
        "line": 18,
        "fullcodeline": "if( bit_depth == 8 )"
    },
    {
        "line": 157,
        "fullcodeline": "CV_RETHROW();"
    },
    {
        "line": 20,
        "fullcodeline": "CV_Assert(m_maxval < 256);"
    },
    {
        "line": 25,
        "fullcodeline": "FillGrayPalette( palette, m_bpp==1 ? 1 : 8 , m_bpp == 1 );"
    },
    {
        "line": 22,
        "fullcodeline": "for (int i = 0; i <= m_maxval; i++)"
    },
    {
        "line": 23,
        "fullcodeline": "gray_palette[i] = (uchar)((i*255/m_maxval)^(m_bpp == 1 ? 255 : 0));"
    }
]