[
    {
        "line": 3,
        "fullcodeline": "TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 5, &input_shape));"
    },
    {
        "line": 5,
        "fullcodeline": "TF_RETURN_IF_ERROR(c->WithRank(c->input(1), 5, &filter_shape));"
    },
    {
        "line": 8,
        "fullcodeline": "Status s = c->GetAttr(\"data_format\", &data_format);"
    },
    {
        "line": 10,
        "fullcodeline": "std::vector<int32> dilations;"
    },
    {
        "line": 11,
        "fullcodeline": "TF_RETURN_IF_ERROR(c->GetAttr(\"dilations\", &dilations));"
    },
    {
        "line": 19,
        "fullcodeline": "std::vector<int32> strides;"
    },
    {
        "line": 20,
        "fullcodeline": "TF_RETURN_IF_ERROR(c->GetAttr(\"strides\", &strides));"
    },
    {
        "line": 51,
        "fullcodeline": "DimensionHandle batch_size_dim = c->Dim(input_shape, 0);"
    },
    {
        "line": 52,
        "fullcodeline": "DimensionHandle in_planes_dim = c->Dim(input_shape, 1);"
    },
    {
        "line": 53,
        "fullcodeline": "DimensionHandle in_rows_dim = c->Dim(input_shape, 2);"
    },
    {
        "line": 54,
        "fullcodeline": "DimensionHandle in_cols_dim = c->Dim(input_shape, 3);"
    },
    {
        "line": 55,
        "fullcodeline": "DimensionHandle input_depth_dim = c->Dim(input_shape, 4);"
    },
    {
        "line": 57,
        "fullcodeline": "DimensionHandle filter_planes_dim = c->Dim(filter_shape, 0);"
    },
    {
        "line": 58,
        "fullcodeline": "DimensionHandle filter_rows_dim = c->Dim(filter_shape, 1);"
    },
    {
        "line": 59,
        "fullcodeline": "DimensionHandle filter_cols_dim = c->Dim(filter_shape, 2);"
    },
    {
        "line": 60,
        "fullcodeline": "DimensionHandle filter_input_depth_dim = c->Dim(filter_shape, 3);"
    },
    {
        "line": 61,
        "fullcodeline": "DimensionHandle output_depth_dim = c->Dim(filter_shape, 4);"
    },
    {
        "line": 90,
        "fullcodeline": "TF_RETURN_IF_ERROR(c->GetAttr(\"padding\", &padding));"
    },
    {
        "line": 93,
        "fullcodeline": "TF_RETURN_IF_ERROR(GetWindowedOutputSizeFromDimsV2("
    },
    {
        "line": 96,
        "fullcodeline": "TF_RETURN_IF_ERROR(GetWindowedOutputSizeFromDimsV2("
    },
    {
        "line": 99,
        "fullcodeline": "TF_RETURN_IF_ERROR(GetWindowedOutputSizeFromDimsV2("
    },
    {
        "line": 111,
        "fullcodeline": "c->set_output(0, output_shape);"
    },
    {
        "line": 13,
        "fullcodeline": "if (dilations.size() != 5) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (strides.size() != 5) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (s.ok() && data_format == \"NCDHW\") {"
    },
    {
        "line": 65,
        "fullcodeline": "if (c->ValueKnown(input_depth_dim) && c->ValueKnown(filter_input_depth_dim)) {"
    },
    {
        "line": 104,
        "fullcodeline": "if (data_format == \"NCDHW\") {"
    },
    {
        "line": 112,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 31,
        "fullcodeline": "auto dim = [&](char dimension) {"
    },
    {
        "line": 34,
        "fullcodeline": "input_shape ="
    },
    {
        "line": 36,
        "fullcodeline": "stride_planes = strides[2];"
    },
    {
        "line": 37,
        "fullcodeline": "stride_rows = strides[3];"
    },
    {
        "line": 38,
        "fullcodeline": "stride_cols = strides[4];"
    },
    {
        "line": 39,
        "fullcodeline": "dilation_planes = dilations[2];"
    },
    {
        "line": 40,
        "fullcodeline": "dilation_cols = dilations[3];"
    },
    {
        "line": 41,
        "fullcodeline": "dilation_rows = dilations[4];"
    },
    {
        "line": 66,
        "fullcodeline": "int64_t input_depth_value = c->Value(input_depth_dim),"
    },
    {
        "line": 67,
        "fullcodeline": "filter_input_depth_value = c->Value(filter_input_depth_dim);"
    },
    {
        "line": 95,
        "fullcodeline": "padding, -1, -1, &output_planes));"
    },
    {
        "line": 97,
        "fullcodeline": "c, in_rows_dim, filter_rows_dim, dilation_rows, stride_rows, padding, -1,"
    },
    {
        "line": 98,
        "fullcodeline": "-1, &output_rows));"
    },
    {
        "line": 100,
        "fullcodeline": "c, in_cols_dim, filter_cols_dim, dilation_cols, stride_cols, padding, -1,"
    },
    {
        "line": 101,
        "fullcodeline": "-1, &output_cols));"
    },
    {
        "line": 105,
        "fullcodeline": "output_shape = c->MakeShape({batch_size_dim, output_depth_dim,"
    },
    {
        "line": 14,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 22,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 35,
        "fullcodeline": "c->MakeShape({{dim('N'), dim('0'), dim('1'), dim('2'), dim('C')}});"
    },
    {
        "line": 43,
        "fullcodeline": "stride_planes = strides[1];"
    },
    {
        "line": 44,
        "fullcodeline": "stride_rows = strides[2];"
    },
    {
        "line": 45,
        "fullcodeline": "stride_cols = strides[3];"
    },
    {
        "line": 46,
        "fullcodeline": "dilation_planes = dilations[1];"
    },
    {
        "line": 47,
        "fullcodeline": "dilation_cols = dilations[2];"
    },
    {
        "line": 48,
        "fullcodeline": "dilation_rows = dilations[3];"
    },
    {
        "line": 68,
        "fullcodeline": "if (filter_input_depth_value == 0)"
    },
    {
        "line": 70,
        "fullcodeline": "if (input_depth_value % filter_input_depth_value != 0)"
    },
    {
        "line": 75,
        "fullcodeline": "if (input_depth_value != filter_input_depth_value) {"
    },
    {
        "line": 108,
        "fullcodeline": "output_shape = c->MakeShape({batch_size_dim, output_planes, output_rows,"
    },
    {
        "line": 16,
        "fullcodeline": "dilations.size());"
    },
    {
        "line": 24,
        "fullcodeline": "strides.size());"
    },
    {
        "line": 76,
        "fullcodeline": "int64_t num_groups = input_depth_value / filter_input_depth_value;"
    },
    {
        "line": 69,
        "fullcodeline": "return errors::InvalidArgument(\"Depth of filter must not be 0\");"
    },
    {
        "line": 71,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 77,
        "fullcodeline": "if (c->ValueKnown(output_depth_dim)) {"
    },
    {
        "line": 78,
        "fullcodeline": "int64_t output_depth_value = c->Value(output_depth_dim);"
    },
    {
        "line": 79,
        "fullcodeline": "if (num_groups == 0)"
    },
    {
        "line": 81,
        "fullcodeline": "if (output_depth_value % num_groups != 0)"
    },
    {
        "line": 80,
        "fullcodeline": "return errors::InvalidArgument(\"Number of groups must not be 0\");"
    },
    {
        "line": 82,
        "fullcodeline": "return errors::InvalidArgument("
    }
]