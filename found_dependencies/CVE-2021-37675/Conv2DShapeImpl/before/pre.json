[
    {
        "line": 22,
        "fullcodeline": "constexpr int num_spatial_dims = 2;"
    },
    {
        "line": 23,
        "fullcodeline": "const int rank = GetTensorDimsFromSpatialDims(num_spatial_dims, data_format);"
    },
    {
        "line": 35,
        "fullcodeline": "std::vector<int32> dilations;"
    },
    {
        "line": 44,
        "fullcodeline": "std::vector<int32> strides;"
    },
    {
        "line": 55,
        "fullcodeline": "const int32_t stride_rows = GetTensorDim(strides, data_format, 'H');"
    },
    {
        "line": 56,
        "fullcodeline": "const int32_t stride_cols = GetTensorDim(strides, data_format, 'W');"
    },
    {
        "line": 57,
        "fullcodeline": "const int32_t dilation_rows = GetTensorDim(dilations, data_format, 'H');"
    },
    {
        "line": 58,
        "fullcodeline": "const int32_t dilation_cols = GetTensorDim(dilations, data_format, 'W');"
    },
    {
        "line": 67,
        "fullcodeline": "DimensionHandle output_depth_dim = c->Dim("
    },
    {
        "line": 69,
        "fullcodeline": "DimensionHandle filter_rows_dim = c->Dim("
    },
    {
        "line": 71,
        "fullcodeline": "DimensionHandle filter_cols_dim = c->Dim("
    },
    {
        "line": 111,
        "fullcodeline": "std::vector<int64> explicit_paddings;"
    },
    {
        "line": 126,
        "fullcodeline": "int64_t pad_rows_before = -1, pad_rows_after = -1;"
    },
    {
        "line": 127,
        "fullcodeline": "int64_t pad_cols_before = -1, pad_cols_after = -1;"
    },
    {
        "line": 141,
        "fullcodeline": "absl::optional<DimensionHandle> vect_size;"
    },
    {
        "line": 4,
        "fullcodeline": "if (!c->GetAttr(\"data_format\", &data_format_str).ok()) {"
    },
    {
        "line": 7,
        "fullcodeline": "if (!c->GetAttr(\"filter_format\", &filter_format_str).ok()) {"
    },
    {
        "line": 12,
        "fullcodeline": "if (!FormatFromString(data_format_str, &data_format)) {"
    },
    {
        "line": 25,
        "fullcodeline": "TF_RETURN_IF_ERROR(c->WithRank(c->input(0), rank, &conv_input_shape));"
    },
    {
        "line": 26,
        "fullcodeline": "TF_RETURN_IF_ERROR(CheckFormatConstraintsOnShape("
    },
    {
        "line": 31,
        "fullcodeline": "TF_RETURN_IF_ERROR(c->WithRank(c->input(1), rank, &filter_shape));"
    },
    {
        "line": 33,
        "fullcodeline": "CheckFormatConstraintsOnShape(data_format, filter_shape, \"filter\", c));"
    },
    {
        "line": 36,
        "fullcodeline": "TF_RETURN_IF_ERROR(c->GetAttr(\"dilations\", &dilations));"
    },
    {
        "line": 45,
        "fullcodeline": "TF_RETURN_IF_ERROR(c->GetAttr(\"strides\", &strides));"
    },
    {
        "line": 62,
        "fullcodeline": "gtl::InlinedVector<DimensionHandle, 2> input_spatial_dims(2);"
    },
    {
        "line": 63,
        "fullcodeline": "TF_RETURN_IF_ERROR(DimensionsFromShape("
    },
    {
        "line": 74,
        "fullcodeline": "if (filter_format == FORMAT_OIHW_VECT_I) {"
    },
    {
        "line": 109,
        "fullcodeline": "TF_RETURN_IF_ERROR(c->GetAttr(\"padding\", &padding));"
    },
    {
        "line": 128,
        "fullcodeline": "if (padding == Padding::EXPLICIT) {"
    },
    {
        "line": 134,
        "fullcodeline": "TF_RETURN_IF_ERROR(GetWindowedOutputSizeFromDimsV2("
    },
    {
        "line": 137,
        "fullcodeline": "TF_RETURN_IF_ERROR(GetWindowedOutputSizeFromDimsV2("
    },
    {
        "line": 142,
        "fullcodeline": "if (data_format == FORMAT_NCHW_VECT_C) {"
    },
    {
        "line": 147,
        "fullcodeline": "TF_RETURN_IF_ERROR(ShapeFromDimensions("
    },
    {
        "line": 151,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 5,
        "fullcodeline": "data_format_str = \"NHWC\";"
    },
    {
        "line": 8,
        "fullcodeline": "filter_format_str = \"HWIO\";"
    },
    {
        "line": 17,
        "fullcodeline": "if (!FilterFormatFromString(filter_format_str, &filter_format)) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (dilations.size() != 4) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (strides.size() != 4) {"
    },
    {
        "line": 65,
        "fullcodeline": "absl::MakeSpan(input_spatial_dims), &input_depth_dim, c));"
    },
    {
        "line": 68,
        "fullcodeline": "filter_shape, GetFilterDimIndex<num_spatial_dims>(filter_format, 'O'));"
    },
    {
        "line": 70,
        "fullcodeline": "filter_shape, GetFilterDimIndex<num_spatial_dims>(filter_format, 'H'));"
    },
    {
        "line": 72,
        "fullcodeline": "filter_shape, GetFilterDimIndex<num_spatial_dims>(filter_format, 'W'));"
    },
    {
        "line": 88,
        "fullcodeline": "if (c->ValueKnown(input_depth_dim) && c->ValueKnown(filter_input_depth_dim)) {"
    },
    {
        "line": 89,
        "fullcodeline": "int64_t input_depth_value = c->Value(input_depth_dim),"
    },
    {
        "line": 90,
        "fullcodeline": "filter_input_depth_value = c->Value(filter_input_depth_dim);"
    },
    {
        "line": 113,
        "fullcodeline": "Status s = c->GetAttr(\"explicit_paddings\", &explicit_paddings);"
    },
    {
        "line": 129,
        "fullcodeline": "GetExplicitPaddingForDim(explicit_paddings, data_format, 'H',"
    },
    {
        "line": 131,
        "fullcodeline": "GetExplicitPaddingForDim(explicit_paddings, data_format, 'W',"
    },
    {
        "line": 143,
        "fullcodeline": "vect_size.emplace(c->Dim(conv_input_shape,"
    },
    {
        "line": 148,
        "fullcodeline": "batch_size_dim, {output_rows, output_cols}, output_depth_dim, data_format,"
    },
    {
        "line": 13,
        "fullcodeline": "return errors::InvalidArgument(\"Invalid data format string: \","
    },
    {
        "line": 18,
        "fullcodeline": "return errors::InvalidArgument(\"Invalid filter format string: \","
    },
    {
        "line": 39,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 49,
        "fullcodeline": "return errors::InvalidArgument(\"Conv2D on data format \", data_format_str,"
    },
    {
        "line": 75,
        "fullcodeline": "TF_RETURN_IF_ERROR(c->Multiply("
    },
    {
        "line": 82,
        "fullcodeline": "filter_input_depth_dim = c->Dim("
    },
    {
        "line": 96,
        "fullcodeline": "if (input_depth_value != filter_input_depth_value) {"
    },
    {
        "line": 119,
        "fullcodeline": "TF_RETURN_IF_ERROR(CheckValidPadding(padding, explicit_paddings,"
    },
    {
        "line": 41,
        "fullcodeline": "dilations.size());"
    },
    {
        "line": 52,
        "fullcodeline": "strides.size());"
    },
    {
        "line": 76,
        "fullcodeline": "c->Dim(filter_shape,"
    },
    {
        "line": 78,
        "fullcodeline": "c->Dim(filter_shape,"
    },
    {
        "line": 91,
        "fullcodeline": "if (input_depth_value % filter_input_depth_value != 0)"
    },
    {
        "line": 97,
        "fullcodeline": "int64_t num_groups = input_depth_value / filter_input_depth_value;"
    },
    {
        "line": 116,
        "fullcodeline": "if (!s.ok() && !errors::IsNotFound(s)) {"
    },
    {
        "line": 122,
        "fullcodeline": "CHECK(padding != Padding::EXPLICIT);  // Crash ok."
    },
    {
        "line": 144,
        "fullcodeline": "GetTensorInnerFeatureDimIndex(rank, data_format)));"
    },
    {
        "line": 77,
        "fullcodeline": "GetFilterDimIndex<num_spatial_dims>(filter_format, 'I')),"
    },
    {
        "line": 79,
        "fullcodeline": "GetFilterTensorInnerInputChannelsDimIndex(rank, filter_format)),"
    },
    {
        "line": 83,
        "fullcodeline": "filter_shape, GetFilterDimIndex<num_spatial_dims>(filter_format, 'I'));"
    },
    {
        "line": 92,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 98,
        "fullcodeline": "if (c->ValueKnown(output_depth_dim)) {"
    },
    {
        "line": 99,
        "fullcodeline": "int64_t output_depth_value = c->Value(output_depth_dim);"
    },
    {
        "line": 100,
        "fullcodeline": "if (output_depth_value % num_groups != 0)"
    },
    {
        "line": 101,
        "fullcodeline": "return errors::InvalidArgument("
    }
]