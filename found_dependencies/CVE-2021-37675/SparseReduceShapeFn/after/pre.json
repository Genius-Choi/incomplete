[
    {
        "line": 7,
        "fullcodeline": "bool keep_dims = false;"
    },
    {
        "line": 8,
        "fullcodeline": "TF_RETURN_IF_ERROR(c->GetAttr(\"keep_dims\", &keep_dims));"
    },
    {
        "line": 10,
        "fullcodeline": "const Tensor* shape_tensor = c->input_tensor(2);"
    },
    {
        "line": 11,
        "fullcodeline": "const Tensor* axes_tensor = c->input_tensor(3);"
    },
    {
        "line": 12,
        "fullcodeline": "if (shape_tensor != nullptr && axes_tensor != nullptr) {"
    },
    {
        "line": 46,
        "fullcodeline": "return UnknownShape(c);"
    },
    {
        "line": 13,
        "fullcodeline": "auto shape_vec = shape_tensor->flat<int64>();"
    },
    {
        "line": 14,
        "fullcodeline": "auto axes_vec = axes_tensor->flat<int32>();"
    },
    {
        "line": 16,
        "fullcodeline": "int64_t ndims = shape_vec.size();"
    },
    {
        "line": 17,
        "fullcodeline": "absl::flat_hash_set<int64> axes;"
    },
    {
        "line": 25,
        "fullcodeline": "std::vector<DimensionHandle> dims;"
    },
    {
        "line": 18,
        "fullcodeline": "if (ndims == 0)"
    },
    {
        "line": 21,
        "fullcodeline": "for (int i = 0; i < axes_vec.size(); i++) {"
    },
    {
        "line": 43,
        "fullcodeline": "c->set_output(0, c->MakeShape(dims));"
    },
    {
        "line": 44,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 22,
        "fullcodeline": "axes.insert((axes_vec(i) + ndims) % ndims);"
    },
    {
        "line": 27,
        "fullcodeline": "dims.reserve(ndims);"
    },
    {
        "line": 19,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 28,
        "fullcodeline": "for (int d = 0; d < ndims; ++d) {"
    },
    {
        "line": 36,
        "fullcodeline": "for (int d = 0; d < ndims; ++d) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (axes.find(d) == axes.end()) {"
    },
    {
        "line": 30,
        "fullcodeline": "dims.push_back(c->MakeDim(shape_vec(d)));"
    },
    {
        "line": 32,
        "fullcodeline": "dims.push_back(c->MakeDim(1));"
    },
    {
        "line": 37,
        "fullcodeline": "if (axes.find(d) == axes.end()) {"
    },
    {
        "line": 38,
        "fullcodeline": "dims.push_back(c->MakeDim(shape_vec(d)));"
    }
]