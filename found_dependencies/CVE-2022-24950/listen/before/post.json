[
    {
        "line": 2,
        "fullcodeline": "lock_guard<std::recursive_mutex> guard(globalMutex);"
    },
    {
        "line": 4,
        "fullcodeline": "string pipePath = endpoint.name();"
    },
    {
        "line": 11,
        "fullcodeline": "int fd = socket(AF_UNIX, SOCK_STREAM, 0);"
    },
    {
        "line": 12,
        "fullcodeline": "FATAL_FAIL(fd);"
    },
    {
        "line": 13,
        "fullcodeline": "initServerSocket(fd);"
    },
    {
        "line": 14,
        "fullcodeline": "local.sun_family = AF_UNIX; /* local is declared before socket() ^ */"
    },
    {
        "line": 15,
        "fullcodeline": "strcpy(local.sun_path, pipePath.c_str());"
    },
    {
        "line": 16,
        "fullcodeline": "unlink(local.sun_path);"
    },
    {
        "line": 18,
        "fullcodeline": "FATAL_FAIL(::bind(fd, (struct sockaddr*)&local, sizeof(sockaddr_un)));"
    },
    {
        "line": 19,
        "fullcodeline": "::listen(fd, 5);"
    },
    {
        "line": 21,
        "fullcodeline": "FATAL_FAIL(::chmod(local.sun_path, S_IRUSR | S_IWUSR | S_IXUSR));"
    },
    {
        "line": 24,
        "fullcodeline": "pipeServerSockets[pipePath] = set<int>({fd});"
    },
    {
        "line": 5,
        "fullcodeline": "if (pipeServerSockets.find(pipePath) != pipeServerSockets.end()) {"
    },
    {
        "line": 6,
        "fullcodeline": "throw runtime_error(\"Tried to listen twice on the same path\");"
    }
]