[
    {
        "line": 2,
        "fullcodeline": "vector<PortForwardSourceRequest> pfsrs;"
    },
    {
        "line": 3,
        "fullcodeline": "auto j = split(input, ',');"
    },
    {
        "line": 5,
        "fullcodeline": "vector<string> sourceDestination = split(pair, ':');"
    },
    {
        "line": 7,
        "fullcodeline": "if (sourceDestination[0].find_first_not_of(\"0123456789-\") !="
    },
    {
        "line": 49,
        "fullcodeline": "STFATAL << \"Logic error: \" << lr.what();"
    },
    {
        "line": 50,
        "fullcodeline": "exit(1);"
    },
    {
        "line": 9,
        "fullcodeline": "sourceDestination[1].find_first_not_of(\"0123456789-\") !="
    },
    {
        "line": 12,
        "fullcodeline": "pfsr.set_environmentvariable(sourceDestination[0]);"
    },
    {
        "line": 13,
        "fullcodeline": "pfsr.mutable_destination()->set_name(sourceDestination[1]);"
    },
    {
        "line": 14,
        "fullcodeline": "pfsrs.push_back(pfsr);"
    },
    {
        "line": 15,
        "fullcodeline": "} else if (sourceDestination[0].find('-') != string::npos &&"
    },
    {
        "line": 16,
        "fullcodeline": "sourceDestination[1].find('-') != string::npos) {"
    },
    {
        "line": 17,
        "fullcodeline": "vector<string> sourcePortRange = split(sourceDestination[0], '-');"
    },
    {
        "line": 18,
        "fullcodeline": "int sourcePortStart = stoi(sourcePortRange[0]);"
    },
    {
        "line": 19,
        "fullcodeline": "int sourcePortEnd = stoi(sourcePortRange[1]);"
    },
    {
        "line": 21,
        "fullcodeline": "vector<string> destinationPortRange = split(sourceDestination[1], '-');"
    },
    {
        "line": 22,
        "fullcodeline": "int destinationPortStart = stoi(destinationPortRange[0]);"
    },
    {
        "line": 23,
        "fullcodeline": "int destinationPortEnd = stoi(destinationPortRange[1]);"
    },
    {
        "line": 25,
        "fullcodeline": "if (sourcePortEnd - sourcePortStart !="
    },
    {
        "line": 26,
        "fullcodeline": "destinationPortEnd - destinationPortStart) {"
    },
    {
        "line": 27,
        "fullcodeline": "STFATAL << \"source/destination port range mismatch\";"
    },
    {
        "line": 28,
        "fullcodeline": "exit(1);"
    },
    {
        "line": 38,
        "fullcodeline": "} else if (sourceDestination[0].find('-') != string::npos ||"
    },
    {
        "line": 30,
        "fullcodeline": "int portRangeLength = sourcePortEnd - sourcePortStart + 1;"
    },
    {
        "line": 39,
        "fullcodeline": "sourceDestination[1].find('-') != string::npos) {"
    },
    {
        "line": 40,
        "fullcodeline": "STFATAL << \"Invalid port range syntax: if source is range, \""
    },
    {
        "line": 31,
        "fullcodeline": "for (int i = 0; i < portRangeLength; ++i) {"
    },
    {
        "line": 44,
        "fullcodeline": "pfsr.mutable_source()->set_port(stoi(sourceDestination[0]));"
    },
    {
        "line": 45,
        "fullcodeline": "pfsr.mutable_destination()->set_port(stoi(sourceDestination[1]));"
    },
    {
        "line": 46,
        "fullcodeline": "pfsrs.push_back(pfsr);"
    },
    {
        "line": 33,
        "fullcodeline": "pfsr.mutable_source()->set_port(sourcePortStart + i);"
    },
    {
        "line": 34,
        "fullcodeline": "pfsr.mutable_destination()->set_port(destinationPortStart + i);"
    },
    {
        "line": 35,
        "fullcodeline": "pfsrs.push_back(pfsr);"
    }
]