[
    {
        "line": 2,
        "fullcodeline": "DnsStream *s = userdata;"
    },
    {
        "line": 5,
        "fullcodeline": "assert(s);"
    },
    {
        "line": 24,
        "fullcodeline": "if (s->tfo_salen == 0) {"
    },
    {
        "line": 30,
        "fullcodeline": "if ((revents & EPOLLOUT) &&"
    },
    {
        "line": 57,
        "fullcodeline": "if ((revents & (EPOLLIN|EPOLLHUP|EPOLLRDHUP)) &&"
    },
    {
        "line": 142,
        "fullcodeline": "if ((s->write_packet && s->n_written >= sizeof(s->write_size) + s->write_packet->size) &&"
    },
    {
        "line": 25,
        "fullcodeline": "r = dns_stream_identify(s);"
    },
    {
        "line": 32,
        "fullcodeline": "s->n_written < sizeof(s->write_size) + s->write_packet->size) {"
    },
    {
        "line": 34,
        "fullcodeline": "struct iovec iov[2];"
    },
    {
        "line": 37,
        "fullcodeline": "iov[0] = IOVEC_MAKE(&s->write_size, sizeof(s->write_size));"
    },
    {
        "line": 38,
        "fullcodeline": "iov[1] = IOVEC_MAKE(DNS_PACKET_DATA(s->write_packet), s->write_packet->size);"
    },
    {
        "line": 40,
        "fullcodeline": "IOVEC_INCREMENT(iov, 2, s->n_written);"
    },
    {
        "line": 42,
        "fullcodeline": "ss = dns_stream_writev(s, iov, 2, 0);"
    },
    {
        "line": 58,
        "fullcodeline": "(!s->read_packet ||"
    },
    {
        "line": 143,
        "fullcodeline": "(s->read_packet && s->n_read >= sizeof(s->read_size) + s->read_packet->size))"
    },
    {
        "line": 26,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 43,
        "fullcodeline": "if (ss < 0) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (s->n_written >= sizeof(s->write_size) + s->write_packet->size) {"
    },
    {
        "line": 59,
        "fullcodeline": "s->n_read < sizeof(s->read_size) + s->read_packet->size)) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (s->n_read < sizeof(s->read_size)) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (s->n_read >= sizeof(s->read_size)) {"
    },
    {
        "line": 144,
        "fullcodeline": "return dns_stream_complete(s, 0);"
    },
    {
        "line": 51,
        "fullcodeline": "r = dns_stream_update_io(s);"
    },
    {
        "line": 64,
        "fullcodeline": "ss = dns_stream_read(s, (uint8_t*) &s->read_size + s->n_read, sizeof(s->read_size) - s->n_read);"
    },
    {
        "line": 27,
        "fullcodeline": "return dns_stream_complete(s, -r);"
    },
    {
        "line": 44,
        "fullcodeline": "if (!IN_SET(-ss, EINTR, EAGAIN))"
    },
    {
        "line": 47,
        "fullcodeline": "s->n_written += ss;"
    },
    {
        "line": 52,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 65,
        "fullcodeline": "if (ss < 0) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (be16toh(s->read_size) < DNS_PACKET_HEADER_SIZE)"
    },
    {
        "line": 79,
        "fullcodeline": "if (s->n_read < sizeof(s->read_size) + be16toh(s->read_size)) {"
    },
    {
        "line": 125,
        "fullcodeline": "if (s->n_read >= sizeof(s->read_size) + be16toh(s->read_size)) {"
    },
    {
        "line": 112,
        "fullcodeline": "ss = dns_stream_read(s,"
    },
    {
        "line": 135,
        "fullcodeline": "r = dns_stream_update_io(s);"
    },
    {
        "line": 45,
        "fullcodeline": "return dns_stream_complete(s, -ss);"
    },
    {
        "line": 53,
        "fullcodeline": "return dns_stream_complete(s, -r);"
    },
    {
        "line": 66,
        "fullcodeline": "if (!IN_SET(-ss, EINTR, EAGAIN))"
    },
    {
        "line": 77,
        "fullcodeline": "return dns_stream_complete(s, EBADMSG);"
    },
    {
        "line": 82,
        "fullcodeline": "if (!s->read_packet) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (ss < 0) {"
    },
    {
        "line": 136,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 68,
        "fullcodeline": "} else if (ss == 0)"
    },
    {
        "line": 83,
        "fullcodeline": "r = dns_packet_new(&s->read_packet, s->protocol, be16toh(s->read_size), DNS_PACKET_SIZE_MAX);"
    },
    {
        "line": 87,
        "fullcodeline": "s->read_packet->size = be16toh(s->read_size);"
    },
    {
        "line": 88,
        "fullcodeline": "s->read_packet->ipproto = IPPROTO_TCP;"
    },
    {
        "line": 90,
        "fullcodeline": "s->read_packet->ttl = s->ttl;"
    },
    {
        "line": 91,
        "fullcodeline": "s->read_packet->ifindex = s->ifindex;"
    },
    {
        "line": 113,
        "fullcodeline": "(uint8_t*) DNS_PACKET_DATA(s->read_packet) + s->n_read - sizeof(s->read_size),"
    },
    {
        "line": 114,
        "fullcodeline": "sizeof(s->read_size) + be16toh(s->read_size) - s->n_read);"
    },
    {
        "line": 130,
        "fullcodeline": "r = s->on_packet(s);"
    },
    {
        "line": 67,
        "fullcodeline": "return dns_stream_complete(s, -ss);"
    },
    {
        "line": 84,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 93,
        "fullcodeline": "if (s->read_packet->family == AF_INET) {"
    },
    {
        "line": 116,
        "fullcodeline": "if (!IN_SET(-ss, EINTR, EAGAIN))"
    },
    {
        "line": 131,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 137,
        "fullcodeline": "return dns_stream_complete(s, -r);"
    },
    {
        "line": 69,
        "fullcodeline": "return dns_stream_complete(s, ECONNRESET);"
    },
    {
        "line": 71,
        "fullcodeline": "s->n_read += ss;"
    },
    {
        "line": 95,
        "fullcodeline": "s->read_packet->sender_port = be16toh(s->peer.in.sin_port);"
    },
    {
        "line": 97,
        "fullcodeline": "s->read_packet->destination_port = be16toh(s->local.in.sin_port);"
    },
    {
        "line": 118,
        "fullcodeline": "} else if (ss == 0)"
    },
    {
        "line": 85,
        "fullcodeline": "return dns_stream_complete(s, -r);"
    },
    {
        "line": 99,
        "fullcodeline": "assert(s->read_packet->family == AF_INET6);"
    },
    {
        "line": 101,
        "fullcodeline": "s->read_packet->sender_port = be16toh(s->peer.in6.sin6_port);"
    },
    {
        "line": 103,
        "fullcodeline": "s->read_packet->destination_port = be16toh(s->local.in6.sin6_port);"
    },
    {
        "line": 117,
        "fullcodeline": "return dns_stream_complete(s, -ss);"
    },
    {
        "line": 105,
        "fullcodeline": "if (s->read_packet->ifindex == 0)"
    },
    {
        "line": 107,
        "fullcodeline": "if (s->read_packet->ifindex == 0)"
    },
    {
        "line": 119,
        "fullcodeline": "return dns_stream_complete(s, ECONNRESET);"
    },
    {
        "line": 121,
        "fullcodeline": "s->n_read += ss;"
    }
]