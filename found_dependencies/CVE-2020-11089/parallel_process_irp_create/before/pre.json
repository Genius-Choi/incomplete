[
    {
        "line": 3,
        "fullcodeline": "char* path = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "Stream_Seek(irp->input, 28);"
    },
    {
        "line": 9,
        "fullcodeline": "Stream_Read_UINT32(irp->input, PathLength);"
    },
    {
        "line": 10,
        "fullcodeline": "status = ConvertFromUnicode(CP_UTF8, 0, (WCHAR*)Stream_Pointer(irp->input), PathLength / 2,"
    },
    {
        "line": 20,
        "fullcodeline": "parallel->id = irp->devman->id_sequence++;"
    },
    {
        "line": 21,
        "fullcodeline": "parallel->file = open(parallel->path, O_RDWR);"
    },
    {
        "line": 36,
        "fullcodeline": "Stream_Write_UINT32(irp->output, parallel->id);"
    },
    {
        "line": 37,
        "fullcodeline": "Stream_Write_UINT8(irp->output, 0);"
    },
    {
        "line": 13,
        "fullcodeline": "if (status < 1)"
    },
    {
        "line": 23,
        "fullcodeline": "if (parallel->file < 0)"
    },
    {
        "line": 39,
        "fullcodeline": "return irp->Complete(irp);"
    },
    {
        "line": 25,
        "fullcodeline": "irp->IoStatus = STATUS_ACCESS_DENIED;"
    },
    {
        "line": 26,
        "fullcodeline": "parallel->id = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "if (!(path = (char*)calloc(1, 1)))"
    },
    {
        "line": 16,
        "fullcodeline": "WLog_ERR(TAG, \"calloc failed!\");"
    },
    {
        "line": 31,
        "fullcodeline": "if (fcntl(parallel->file, F_SETFL, O_NONBLOCK) == -1)"
    }
]