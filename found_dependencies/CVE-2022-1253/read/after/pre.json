[
    {
        "line": 5,
        "fullcodeline": "video_parameter_set_id = get_bits(br,4);"
    },
    {
        "line": 6,
        "fullcodeline": "sps_max_sub_layers     = get_bits(br,3) +1;"
    },
    {
        "line": 11,
        "fullcodeline": "sps_temporal_id_nesting_flag = get_bits(br,1);"
    },
    {
        "line": 13,
        "fullcodeline": "profile_tier_level_.read(br, sps_max_sub_layers);"
    },
    {
        "line": 15,
        "fullcodeline": "READ_VLC(seq_parameter_set_id, uvlc);"
    },
    {
        "line": 23,
        "fullcodeline": "READ_VLC(chroma_format_idc, uvlc);"
    },
    {
        "line": 41,
        "fullcodeline": "READ_VLC(pic_width_in_luma_samples,  uvlc);"
    },
    {
        "line": 42,
        "fullcodeline": "READ_VLC(pic_height_in_luma_samples, uvlc);"
    },
    {
        "line": 54,
        "fullcodeline": "conformance_window_flag = get_bits(br,1);"
    },
    {
        "line": 69,
        "fullcodeline": "READ_VLC_OFFSET(bit_depth_luma,  uvlc, 8);"
    },
    {
        "line": 70,
        "fullcodeline": "READ_VLC_OFFSET(bit_depth_chroma,uvlc, 8);"
    },
    {
        "line": 77,
        "fullcodeline": "READ_VLC_OFFSET(log2_max_pic_order_cnt_lsb, uvlc, 4);"
    },
    {
        "line": 83,
        "fullcodeline": "MaxPicOrderCntLsb = 1<<(log2_max_pic_order_cnt_lsb);"
    },
    {
        "line": 90,
        "fullcodeline": "int firstLayer = (sps_sub_layer_ordering_info_present_flag ?"
    },
    {
        "line": 133,
        "fullcodeline": "READ_VLC_OFFSET(log2_min_luma_coding_block_size, uvlc, 3);"
    },
    {
        "line": 134,
        "fullcodeline": "READ_VLC       (log2_diff_max_min_luma_coding_block_size, uvlc);"
    },
    {
        "line": 135,
        "fullcodeline": "READ_VLC_OFFSET(log2_min_transform_block_size, uvlc, 2);"
    },
    {
        "line": 136,
        "fullcodeline": "READ_VLC(log2_diff_max_min_transform_block_size, uvlc);"
    },
    {
        "line": 137,
        "fullcodeline": "READ_VLC(max_transform_hierarchy_depth_inter, uvlc);"
    },
    {
        "line": 138,
        "fullcodeline": "READ_VLC(max_transform_hierarchy_depth_intra, uvlc);"
    },
    {
        "line": 145,
        "fullcodeline": "scaling_list_enable_flag = get_bits(br,1);"
    },
    {
        "line": 162,
        "fullcodeline": "amp_enabled_flag = get_bits(br,1);"
    },
    {
        "line": 163,
        "fullcodeline": "sample_adaptive_offset_enabled_flag = get_bits(br,1);"
    },
    {
        "line": 164,
        "fullcodeline": "pcm_enabled_flag = get_bits(br,1);"
    },
    {
        "line": 191,
        "fullcodeline": "READ_VLC(num_short_term_ref_pic_sets, uvlc);"
    },
    {
        "line": 202,
        "fullcodeline": "ref_pic_sets.resize(num_short_term_ref_pic_sets);"
    },
    {
        "line": 218,
        "fullcodeline": "long_term_ref_pics_present_flag = get_bits(br,1);"
    },
    {
        "line": 236,
        "fullcodeline": "sps_temporal_mvp_enabled_flag = get_bits(br,1);"
    },
    {
        "line": 237,
        "fullcodeline": "strong_intra_smoothing_enable_flag = get_bits(br,1);"
    },
    {
        "line": 239,
        "fullcodeline": "vui_parameters_present_flag = get_bits(br,1);"
    },
    {
        "line": 248,
        "fullcodeline": "sps_extension_present_flag = get_bits(br,1);"
    },
    {
        "line": 271,
        "fullcodeline": "de265_error err = compute_derived_values();"
    },
    {
        "line": 274,
        "fullcodeline": "sps_read = true;"
    },
    {
        "line": 7,
        "fullcodeline": "if (sps_max_sub_layers>7) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (seq_parameter_set_id >= DE265_MAX_SPS_SETS) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (chroma_format_idc == 3) {"
    },
    {
        "line": 88,
        "fullcodeline": "sps_sub_layer_ordering_info_present_flag = get_bits(br,1);"
    },
    {
        "line": 93,
        "fullcodeline": "for (int i=firstLayer ; i <= sps_max_sub_layers-1; i++ ) {"
    },
    {
        "line": 140,
        "fullcodeline": "if (log2_min_luma_coding_block_size > 6) { return DE265_ERROR_CODED_PARAMETER_OUT_OF_RANGE; }"
    },
    {
        "line": 142,
        "fullcodeline": "if (log2_min_transform_block_size > 5) { return DE265_ERROR_CODED_PARAMETER_OUT_OF_RANGE; }"
    },
    {
        "line": 204,
        "fullcodeline": "for (int i = 0; i < num_short_term_ref_pic_sets; i++) {"
    },
    {
        "line": 272,
        "fullcodeline": "if (err != DE265_OK) { return err; }"
    },
    {
        "line": 32,
        "fullcodeline": "if (chroma_format_idc<0 ||"
    },
    {
        "line": 33,
        "fullcodeline": "chroma_format_idc>3) {"
    },
    {
        "line": 34,
        "fullcodeline": "errqueue->add_warning(DE265_WARNING_INVALID_CHROMA_FORMAT, false);"
    },
    {
        "line": 44,
        "fullcodeline": "if (pic_width_in_luma_samples  == 0 ||"
    },
    {
        "line": 45,
        "fullcodeline": "pic_height_in_luma_samples == 0) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (pic_width_in_luma_samples > MAX_PICTURE_WIDTH ||"
    },
    {
        "line": 50,
        "fullcodeline": "pic_height_in_luma_samples> MAX_PICTURE_HEIGHT) {"
    },
    {
        "line": 57,
        "fullcodeline": "READ_VLC(conf_win_left_offset,  uvlc);"
    },
    {
        "line": 58,
        "fullcodeline": "READ_VLC(conf_win_right_offset, uvlc);"
    },
    {
        "line": 59,
        "fullcodeline": "READ_VLC(conf_win_top_offset,   uvlc);"
    },
    {
        "line": 60,
        "fullcodeline": "READ_VLC(conf_win_bottom_offset,uvlc);"
    },
    {
        "line": 71,
        "fullcodeline": "if (bit_depth_luma > 16 ||"
    },
    {
        "line": 72,
        "fullcodeline": "bit_depth_chroma > 16) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (log2_max_pic_order_cnt_lsb<4 ||"
    },
    {
        "line": 79,
        "fullcodeline": "log2_max_pic_order_cnt_lsb>16) {"
    },
    {
        "line": 91,
        "fullcodeline": "0 : sps_max_sub_layers-1 );"
    },
    {
        "line": 97,
        "fullcodeline": "vlc=get_uvlc(br);"
    },
    {
        "line": 108,
        "fullcodeline": "READ_VLC(sps_max_num_reorder_pics[i], uvlc);"
    },
    {
        "line": 113,
        "fullcodeline": "READ_VLC(sps_max_latency_increase_plus1[i], uvlc);"
    },
    {
        "line": 122,
        "fullcodeline": "int ref = sps_max_sub_layers-1;"
    },
    {
        "line": 149,
        "fullcodeline": "sps_scaling_list_data_present_flag = get_bits(br,1);"
    },
    {
        "line": 166,
        "fullcodeline": "pcm_sample_bit_depth_luma = get_bits(br,4)+1;"
    },
    {
        "line": 167,
        "fullcodeline": "pcm_sample_bit_depth_chroma = get_bits(br,4)+1;"
    },
    {
        "line": 168,
        "fullcodeline": "READ_VLC_OFFSET(log2_min_pcm_luma_coding_block_size, uvlc, 3);"
    },
    {
        "line": 169,
        "fullcodeline": "READ_VLC(log2_diff_max_min_pcm_luma_coding_block_size, uvlc);"
    },
    {
        "line": 192,
        "fullcodeline": "if (num_short_term_ref_pic_sets < 0 ||"
    },
    {
        "line": 193,
        "fullcodeline": "num_short_term_ref_pic_sets > 64) {"
    },
    {
        "line": 194,
        "fullcodeline": "errqueue->add_warning(DE265_WARNING_NUMBER_OF_SHORT_TERM_REF_PIC_SETS_OUT_OF_RANGE, false);"
    },
    {
        "line": 206,
        "fullcodeline": "bool success = read_short_term_ref_pic_set(errqueue,this,br,"
    },
    {
        "line": 222,
        "fullcodeline": "READ_VLC(num_long_term_ref_pics_sps, uvlc);"
    },
    {
        "line": 241,
        "fullcodeline": "de265_error err = vui.read(errqueue, br, this);"
    },
    {
        "line": 251,
        "fullcodeline": "sps_multilayer_extension_flag = get_bits(br,1);"
    },
    {
        "line": 252,
        "fullcodeline": "sps_extension_6bits = get_bits(br,6);"
    },
    {
        "line": 259,
        "fullcodeline": "de265_error err = range_extension.read(errqueue, br);"
    },
    {
        "line": 26,
        "fullcodeline": "separate_colour_plane_flag = get_bits(br,1);"
    },
    {
        "line": 115,
        "fullcodeline": "SpsMaxLatencyPictures[i] = (sps_max_num_reorder_pics[i] +"
    },
    {
        "line": 123,
        "fullcodeline": "assert(ref<7);"
    },
    {
        "line": 125,
        "fullcodeline": "for (int i=0 ; i < sps_max_sub_layers-1; i++ ) {"
    },
    {
        "line": 170,
        "fullcodeline": "pcm_loop_filter_disable_flag = get_bits(br,1);"
    },
    {
        "line": 223,
        "fullcodeline": "if (num_long_term_ref_pics_sps > MAX_NUM_LT_REF_PICS_SPS) {"
    },
    {
        "line": 227,
        "fullcodeline": "for (int i = 0; i < num_long_term_ref_pics_sps; i++ ) {"
    },
    {
        "line": 250,
        "fullcodeline": "sps_range_extension_flag = get_bits(br,1);"
    },
    {
        "line": 260,
        "fullcodeline": "if (err != DE265_OK) { return err; }"
    },
    {
        "line": 98,
        "fullcodeline": "if (vlc == UVLC_ERROR ||"
    },
    {
        "line": 99,
        "fullcodeline": "vlc+1 > MAX_NUM_REF_PICS) {"
    },
    {
        "line": 100,
        "fullcodeline": "errqueue->add_warning(DE265_ERROR_CODED_PARAMETER_OUT_OF_RANGE, false);"
    },
    {
        "line": 153,
        "fullcodeline": "if ((err=read_scaling_list(br,this, &scaling_list, false)) != DE265_OK) {"
    },
    {
        "line": 228,
        "fullcodeline": "lt_ref_pic_poc_lsb_sps[i] = get_bits(br, log2_max_pic_order_cnt_lsb);"
    },
    {
        "line": 229,
        "fullcodeline": "used_by_curr_pic_lt_sps_flag[i] = get_bits(br,1);"
    }
]