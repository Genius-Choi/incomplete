[
    {
        "line": 4,
        "fullcodeline": "struct mm_struct *mm = ctx->mm;"
    },
    {
        "line": 16,
        "fullcodeline": "ret = -EFAULT;"
    },
    {
        "line": 21,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 27,
        "fullcodeline": "vm_flags = 0;"
    },
    {
        "line": 40,
        "fullcodeline": "ret = validate_range(mm, uffdio_register.range.start,"
    },
    {
        "line": 45,
        "fullcodeline": "start = uffdio_register.range.start;"
    },
    {
        "line": 46,
        "fullcodeline": "end = start + uffdio_register.range.len;"
    },
    {
        "line": 48,
        "fullcodeline": "ret = -ENOMEM;"
    },
    {
        "line": 52,
        "fullcodeline": "down_write(&mm->mmap_sem);"
    },
    {
        "line": 55,
        "fullcodeline": "vma = find_vma_prev(mm, start, &prev);"
    },
    {
        "line": 60,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 78,
        "fullcodeline": "found = false;"
    },
    {
        "line": 79,
        "fullcodeline": "basic_ioctls = false;"
    },
    {
        "line": 136,
        "fullcodeline": "BUG_ON(!found);"
    },
    {
        "line": 141,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 196,
        "fullcodeline": "up_write(&mm->mmap_sem);"
    },
    {
        "line": 197,
        "fullcodeline": "mmput(mm);"
    },
    {
        "line": 17,
        "fullcodeline": "if (copy_from_user(&uffdio_register, user_uffdio_register,"
    },
    {
        "line": 22,
        "fullcodeline": "if (!uffdio_register.mode)"
    },
    {
        "line": 24,
        "fullcodeline": "if (uffdio_register.mode & ~(UFFDIO_REGISTER_MODE_MISSING|"
    },
    {
        "line": 28,
        "fullcodeline": "if (uffdio_register.mode & UFFDIO_REGISTER_MODE_MISSING)"
    },
    {
        "line": 30,
        "fullcodeline": "if (uffdio_register.mode & UFFDIO_REGISTER_MODE_WP) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (!mmget_not_zero(mm))"
    },
    {
        "line": 53,
        "fullcodeline": "if (!mmget_still_valid(mm))"
    },
    {
        "line": 56,
        "fullcodeline": "if (!vma)"
    },
    {
        "line": 61,
        "fullcodeline": "if (vma->vm_start >= end)"
    },
    {
        "line": 68,
        "fullcodeline": "if (is_vm_hugetlb_page(vma)) {"
    },
    {
        "line": 80,
        "fullcodeline": "for (cur = vma; cur && cur->vm_start < end; cur = cur->vm_next) {"
    },
    {
        "line": 138,
        "fullcodeline": "if (vma->vm_start < start)"
    },
    {
        "line": 194,
        "fullcodeline": "} while (vma && vma->vm_start < end);"
    },
    {
        "line": 198,
        "fullcodeline": "if (!ret) {"
    },
    {
        "line": 29,
        "fullcodeline": "vm_flags |= VM_UFFD_MISSING;"
    },
    {
        "line": 31,
        "fullcodeline": "vm_flags |= VM_UFFD_WP;"
    },
    {
        "line": 36,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 69,
        "fullcodeline": "unsigned long vma_hpagesize = vma_kernel_pagesize(vma);"
    },
    {
        "line": 81,
        "fullcodeline": "cond_resched();"
    },
    {
        "line": 83,
        "fullcodeline": "BUG_ON(!!cur->vm_userfaultfd_ctx.ctx ^"
    },
    {
        "line": 87,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 99,
        "fullcodeline": "ret = -EPERM;"
    },
    {
        "line": 123,
        "fullcodeline": "ret = -EBUSY;"
    },
    {
        "line": 134,
        "fullcodeline": "found = true;"
    },
    {
        "line": 139,
        "fullcodeline": "prev = vma;"
    },
    {
        "line": 143,
        "fullcodeline": "cond_resched();"
    },
    {
        "line": 145,
        "fullcodeline": "BUG_ON(!vma_can_userfault(vma));"
    },
    {
        "line": 146,
        "fullcodeline": "BUG_ON(vma->vm_userfaultfd_ctx.ctx &&"
    },
    {
        "line": 148,
        "fullcodeline": "WARN_ON(!(vma->vm_flags & VM_MAYWRITE));"
    },
    {
        "line": 160,
        "fullcodeline": "vma_end = min(end, vma->vm_end);"
    },
    {
        "line": 162,
        "fullcodeline": "new_flags = (vma->vm_flags & ~vm_flags) | vm_flags;"
    },
    {
        "line": 163,
        "fullcodeline": "prev = vma_merge(mm, prev, start, vma_end, new_flags,"
    },
    {
        "line": 187,
        "fullcodeline": "vma->vm_flags = new_flags;"
    },
    {
        "line": 188,
        "fullcodeline": "vma->vm_userfaultfd_ctx.ctx = ctx;"
    },
    {
        "line": 191,
        "fullcodeline": "prev = vma;"
    },
    {
        "line": 192,
        "fullcodeline": "start = vma->vm_end;"
    },
    {
        "line": 193,
        "fullcodeline": "vma = vma->vm_next;"
    },
    {
        "line": 18,
        "fullcodeline": "sizeof(uffdio_register)-sizeof(__u64)))"
    },
    {
        "line": 71,
        "fullcodeline": "if (start & (vma_hpagesize - 1))"
    },
    {
        "line": 88,
        "fullcodeline": "if (!vma_can_userfault(cur))"
    },
    {
        "line": 100,
        "fullcodeline": "if (unlikely(!(cur->vm_flags & VM_MAYWRITE)))"
    },
    {
        "line": 107,
        "fullcodeline": "if (is_vm_hugetlb_page(cur) && end <= cur->vm_end &&"
    },
    {
        "line": 124,
        "fullcodeline": "if (cur->vm_userfaultfd_ctx.ctx &&"
    },
    {
        "line": 131,
        "fullcodeline": "if (is_vm_hugetlb_page(cur))"
    },
    {
        "line": 154,
        "fullcodeline": "if (vma->vm_userfaultfd_ctx.ctx == ctx &&"
    },
    {
        "line": 158,
        "fullcodeline": "if (vma->vm_start > start)"
    },
    {
        "line": 171,
        "fullcodeline": "if (vma->vm_start < start) {"
    },
    {
        "line": 176,
        "fullcodeline": "if (vma->vm_end > end) {"
    },
    {
        "line": 204,
        "fullcodeline": "if (put_user(basic_ioctls ? UFFD_API_RANGE_IOCTLS_BASIC :"
    },
    {
        "line": 84,
        "fullcodeline": "!!(cur->vm_flags & (VM_UFFD_MISSING | VM_UFFD_WP)));"
    },
    {
        "line": 108,
        "fullcodeline": "end > cur->vm_start) {"
    },
    {
        "line": 109,
        "fullcodeline": "unsigned long vma_hpagesize = vma_kernel_pagesize(cur);"
    },
    {
        "line": 111,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 125,
        "fullcodeline": "cur->vm_userfaultfd_ctx.ctx != ctx)"
    },
    {
        "line": 132,
        "fullcodeline": "basic_ioctls = true;"
    },
    {
        "line": 147,
        "fullcodeline": "vma->vm_userfaultfd_ctx.ctx != ctx);"
    },
    {
        "line": 155,
        "fullcodeline": "(vma->vm_flags & vm_flags) == vm_flags)"
    },
    {
        "line": 159,
        "fullcodeline": "start = vma->vm_start;"
    },
    {
        "line": 165,
        "fullcodeline": "vma_policy(vma),"
    },
    {
        "line": 166,
        "fullcodeline": "((struct vm_userfaultfd_ctx){ ctx }));"
    },
    {
        "line": 168,
        "fullcodeline": "vma = prev;"
    },
    {
        "line": 172,
        "fullcodeline": "ret = split_vma(mm, vma, start, 1);"
    },
    {
        "line": 177,
        "fullcodeline": "ret = split_vma(mm, vma, end, 0);"
    },
    {
        "line": 207,
        "fullcodeline": "ret = -EFAULT;"
    },
    {
        "line": 113,
        "fullcodeline": "if (end & (vma_hpagesize - 1))"
    }
]