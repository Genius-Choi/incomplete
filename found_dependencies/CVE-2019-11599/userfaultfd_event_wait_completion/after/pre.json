[
    {
        "line": 9,
        "fullcodeline": "ewq->ctx = ctx;"
    },
    {
        "line": 10,
        "fullcodeline": "init_waitqueue_entry(&ewq->wq, current);"
    },
    {
        "line": 11,
        "fullcodeline": "release_new_ctx = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "spin_lock(&ctx->event_wqh.lock);"
    },
    {
        "line": 18,
        "fullcodeline": "__add_wait_queue(&ctx->event_wqh, &ewq->wq);"
    },
    {
        "line": 50,
        "fullcodeline": "__set_current_state(TASK_RUNNING);"
    },
    {
        "line": 51,
        "fullcodeline": "spin_unlock(&ctx->event_wqh.lock);"
    },
    {
        "line": 76,
        "fullcodeline": "WRITE_ONCE(ctx->mmap_changing, false);"
    },
    {
        "line": 77,
        "fullcodeline": "userfaultfd_ctx_put(ctx);"
    },
    {
        "line": 6,
        "fullcodeline": "if (WARN_ON_ONCE(current->flags & PF_EXITING))"
    },
    {
        "line": 20,
        "fullcodeline": "set_current_state(TASK_KILLABLE);"
    },
    {
        "line": 43,
        "fullcodeline": "spin_unlock(&ctx->event_wqh.lock);"
    },
    {
        "line": 45,
        "fullcodeline": "wake_up_poll(&ctx->fd_wqh, EPOLLIN);"
    },
    {
        "line": 46,
        "fullcodeline": "schedule();"
    },
    {
        "line": 48,
        "fullcodeline": "spin_lock(&ctx->event_wqh.lock);"
    },
    {
        "line": 55,
        "fullcodeline": "struct mm_struct *mm = release_new_ctx->mm;"
    },
    {
        "line": 58,
        "fullcodeline": "down_write(&mm->mmap_sem);"
    },
    {
        "line": 60,
        "fullcodeline": "VM_WARN_ON(!mmget_still_valid(mm));"
    },
    {
        "line": 66,
        "fullcodeline": "up_write(&mm->mmap_sem);"
    },
    {
        "line": 68,
        "fullcodeline": "userfaultfd_ctx_put(release_new_ctx);"
    },
    {
        "line": 21,
        "fullcodeline": "if (ewq->msg.event == 0)"
    },
    {
        "line": 23,
        "fullcodeline": "if (READ_ONCE(ctx->released) ||"
    },
    {
        "line": 61,
        "fullcodeline": "for (vma = mm->mmap; vma; vma = vma->vm_next)"
    },
    {
        "line": 24,
        "fullcodeline": "fatal_signal_pending(current)) {"
    },
    {
        "line": 31,
        "fullcodeline": "__remove_wait_queue(&ctx->event_wqh, &ewq->wq);"
    },
    {
        "line": 62,
        "fullcodeline": "if (vma->vm_userfaultfd_ctx.ctx == release_new_ctx) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (ewq->msg.event == UFFD_EVENT_FORK) {"
    },
    {
        "line": 63,
        "fullcodeline": "vma->vm_userfaultfd_ctx = NULL_VM_UFFD_CTX;"
    },
    {
        "line": 64,
        "fullcodeline": "vma->vm_flags &= ~(VM_UFFD_WP | VM_UFFD_MISSING);"
    },
    {
        "line": 35,
        "fullcodeline": "new = (struct userfaultfd_ctx *)"
    },
    {
        "line": 38,
        "fullcodeline": "release_new_ctx = new;"
    },
    {
        "line": 36,
        "fullcodeline": "(unsigned long)"
    }
]