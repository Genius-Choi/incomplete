[
    {
        "line": 3,
        "fullcodeline": "BIGNUM *b, *c = NULL, *u = NULL, *v = NULL, *tmp;"
    },
    {
        "line": 4,
        "fullcodeline": "int ret = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "bn_check_top(a);"
    },
    {
        "line": 7,
        "fullcodeline": "bn_check_top(p);"
    },
    {
        "line": 9,
        "fullcodeline": "BN_CTX_start(ctx);"
    },
    {
        "line": 152,
        "fullcodeline": "bn_check_top(r);"
    },
    {
        "line": 153,
        "fullcodeline": "ret = 1;"
    },
    {
        "line": 162,
        "fullcodeline": "BN_CTX_end(ctx);"
    },
    {
        "line": 11,
        "fullcodeline": "if ((b = BN_CTX_get(ctx)) == NULL)"
    },
    {
        "line": 13,
        "fullcodeline": "if ((c = BN_CTX_get(ctx)) == NULL)"
    },
    {
        "line": 15,
        "fullcodeline": "if ((u = BN_CTX_get(ctx)) == NULL)"
    },
    {
        "line": 17,
        "fullcodeline": "if ((v = BN_CTX_get(ctx)) == NULL)"
    },
    {
        "line": 20,
        "fullcodeline": "if (!BN_GF2m_mod(u, a, p))"
    },
    {
        "line": 22,
        "fullcodeline": "if (BN_is_zero(u))"
    },
    {
        "line": 25,
        "fullcodeline": "if (!BN_copy(v, p))"
    },
    {
        "line": 65,
        "fullcodeline": "int ubits = BN_num_bits(u);"
    },
    {
        "line": 66,
        "fullcodeline": "int vbits = BN_num_bits(v); /* v is copy of p */"
    },
    {
        "line": 67,
        "fullcodeline": "int top = p->top;"
    },
    {
        "line": 70,
        "fullcodeline": "bn_wexpand(u, top);"
    },
    {
        "line": 71,
        "fullcodeline": "udp = u->d;"
    },
    {
        "line": 74,
        "fullcodeline": "u->top = top;"
    },
    {
        "line": 75,
        "fullcodeline": "bn_wexpand(b, top);"
    },
    {
        "line": 76,
        "fullcodeline": "bdp = b->d;"
    },
    {
        "line": 77,
        "fullcodeline": "bdp[0] = 1;"
    },
    {
        "line": 80,
        "fullcodeline": "b->top = top;"
    },
    {
        "line": 81,
        "fullcodeline": "bn_wexpand(c, top);"
    },
    {
        "line": 82,
        "fullcodeline": "cdp = c->d;"
    },
    {
        "line": 85,
        "fullcodeline": "c->top = top;"
    },
    {
        "line": 86,
        "fullcodeline": "vdp = v->d;             /* It pays off to \"cache\" *->d pointers,"
    },
    {
        "line": 146,
        "fullcodeline": "bn_correct_top(b);"
    },
    {
        "line": 150,
        "fullcodeline": "if (!BN_copy(r, b))"
    },
    {
        "line": 72,
        "fullcodeline": "for (i = u->top; i < top; i++)"
    },
    {
        "line": 73,
        "fullcodeline": "udp[i] = 0;"
    },
    {
        "line": 78,
        "fullcodeline": "for (i = 1; i < top; i++)"
    },
    {
        "line": 79,
        "fullcodeline": "bdp[i] = 0;"
    },
    {
        "line": 83,
        "fullcodeline": "for (i = 0; i < top; i++)"
    },
    {
        "line": 84,
        "fullcodeline": "cdp[i] = 0;"
    },
    {
        "line": 91,
        "fullcodeline": "while (ubits && !(udp[0] & 1)) {"
    },
    {
        "line": 111,
        "fullcodeline": "if (ubits <= BN_BITS2) {"
    },
    {
        "line": 118,
        "fullcodeline": "if (ubits < vbits) {"
    },
    {
        "line": 133,
        "fullcodeline": "for (i = 0; i < top; i++) {"
    },
    {
        "line": 137,
        "fullcodeline": "if (ubits == vbits) {"
    },
    {
        "line": 94,
        "fullcodeline": "u0 = udp[0];"
    },
    {
        "line": 95,
        "fullcodeline": "b0 = bdp[0];"
    },
    {
        "line": 96,
        "fullcodeline": "mask = (BN_ULONG)0 - (b0 & 1);"
    },
    {
        "line": 97,
        "fullcodeline": "b0 ^= p->d[0] & mask;"
    },
    {
        "line": 106,
        "fullcodeline": "udp[i] = u0 >> 1;"
    },
    {
        "line": 107,
        "fullcodeline": "bdp[i] = b0 >> 1;"
    },
    {
        "line": 108,
        "fullcodeline": "ubits--;"
    },
    {
        "line": 119,
        "fullcodeline": "i = ubits;"
    },
    {
        "line": 120,
        "fullcodeline": "ubits = vbits;"
    },
    {
        "line": 121,
        "fullcodeline": "vbits = i;"
    },
    {
        "line": 122,
        "fullcodeline": "tmp = u;"
    },
    {
        "line": 123,
        "fullcodeline": "u = v;"
    },
    {
        "line": 124,
        "fullcodeline": "v = tmp;"
    },
    {
        "line": 125,
        "fullcodeline": "tmp = b;"
    },
    {
        "line": 126,
        "fullcodeline": "b = c;"
    },
    {
        "line": 127,
        "fullcodeline": "c = tmp;"
    },
    {
        "line": 128,
        "fullcodeline": "udp = vdp;"
    },
    {
        "line": 129,
        "fullcodeline": "vdp = v->d;"
    },
    {
        "line": 130,
        "fullcodeline": "bdp = cdp;"
    },
    {
        "line": 131,
        "fullcodeline": "cdp = c->d;"
    },
    {
        "line": 134,
        "fullcodeline": "udp[i] ^= vdp[i];"
    },
    {
        "line": 135,
        "fullcodeline": "bdp[i] ^= cdp[i];"
    },
    {
        "line": 139,
        "fullcodeline": "int utop = (ubits - 1) / BN_BITS2;"
    },
    {
        "line": 143,
        "fullcodeline": "ubits = utop * BN_BITS2 + BN_num_bits_word(ul);"
    },
    {
        "line": 98,
        "fullcodeline": "for (i = 0; i < top - 1; i++) {"
    },
    {
        "line": 112,
        "fullcodeline": "if (udp[0] == 0) /* poly was reducible */"
    },
    {
        "line": 114,
        "fullcodeline": "if (udp[0] == 1)"
    },
    {
        "line": 141,
        "fullcodeline": "while ((ul = udp[utop]) == 0 && utop)"
    },
    {
        "line": 142,
        "fullcodeline": "utop--;"
    },
    {
        "line": 99,
        "fullcodeline": "u1 = udp[i + 1];"
    },
    {
        "line": 100,
        "fullcodeline": "udp[i] = ((u0 >> 1) | (u1 << (BN_BITS2 - 1))) & BN_MASK2;"
    },
    {
        "line": 101,
        "fullcodeline": "u0 = u1;"
    },
    {
        "line": 102,
        "fullcodeline": "b1 = bdp[i + 1] ^ (p->d[i + 1] & mask);"
    },
    {
        "line": 103,
        "fullcodeline": "bdp[i] = ((b0 >> 1) | (b1 << (BN_BITS2 - 1))) & BN_MASK2;"
    },
    {
        "line": 104,
        "fullcodeline": "b0 = b1;"
    }
]