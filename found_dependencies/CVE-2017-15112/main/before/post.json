[
    {
        "line": 3,
        "fullcodeline": "result = 0"
    },
    {
        "line": 5,
        "fullcodeline": "parser = argparse.ArgumentParser(description='Keycloak REST client',"
    },
    {
        "line": 10,
        "fullcodeline": "parser.add_argument('-v', '--verbose', action='store_true',"
    },
    {
        "line": 13,
        "fullcodeline": "parser.add_argument('-d', '--debug', action='store_true',"
    },
    {
        "line": 16,
        "fullcodeline": "parser.add_argument('--show-traceback', action='store_true',"
    },
    {
        "line": 20,
        "fullcodeline": "parser.add_argument('--log-file',"
    },
    {
        "line": 25,
        "fullcodeline": "parser.add_argument('--permit-insecure-transport',  action='store_true',"
    },
    {
        "line": 29,
        "fullcodeline": "parser.add_argument('--tls-verify', action=TlsVerifyAction,"
    },
    {
        "line": 38,
        "fullcodeline": "group = parser.add_argument_group('Server')"
    },
    {
        "line": 40,
        "fullcodeline": "group.add_argument('-s', '--server',"
    },
    {
        "line": 44,
        "fullcodeline": "group.add_argument('-a', '--auth-role',"
    },
    {
        "line": 49,
        "fullcodeline": "group.add_argument('-u', '--admin-username',"
    },
    {
        "line": 53,
        "fullcodeline": "group.add_argument('-p', '--admin-password',"
    },
    {
        "line": 57,
        "fullcodeline": "group.add_argument('--admin-realm',"
    },
    {
        "line": 61,
        "fullcodeline": "cmd_parsers = parser.add_subparsers(help='available commands')"
    },
    {
        "line": 64,
        "fullcodeline": "realm_parser = cmd_parsers.add_parser('realm',"
    },
    {
        "line": 67,
        "fullcodeline": "sub_parser = realm_parser.add_subparsers(help='realm commands')"
    },
    {
        "line": 69,
        "fullcodeline": "cmd_parser = sub_parser.add_parser('server_info',"
    },
    {
        "line": 71,
        "fullcodeline": "cmd_parser.set_defaults(func=do_server_info)"
    },
    {
        "line": 73,
        "fullcodeline": "cmd_parser = sub_parser.add_parser('list',"
    },
    {
        "line": 75,
        "fullcodeline": "cmd_parser.set_defaults(func=do_list_realms)"
    },
    {
        "line": 77,
        "fullcodeline": "cmd_parser = sub_parser.add_parser('create',"
    },
    {
        "line": 79,
        "fullcodeline": "cmd_parser.add_argument('-r', '--realm-name', required=True,"
    },
    {
        "line": 81,
        "fullcodeline": "cmd_parser.set_defaults(func=do_create_realm)"
    },
    {
        "line": 83,
        "fullcodeline": "cmd_parser = sub_parser.add_parser('delete',"
    },
    {
        "line": 85,
        "fullcodeline": "cmd_parser.add_argument('-r', '--realm-name', required=True,"
    },
    {
        "line": 87,
        "fullcodeline": "cmd_parser.set_defaults(func=do_delete_realm)"
    },
    {
        "line": 89,
        "fullcodeline": "cmd_parser = sub_parser.add_parser('metadata',"
    },
    {
        "line": 91,
        "fullcodeline": "cmd_parser.add_argument('-r', '--realm-name', required=True,"
    },
    {
        "line": 93,
        "fullcodeline": "cmd_parser.set_defaults(func=do_get_realm_metadata)"
    },
    {
        "line": 96,
        "fullcodeline": "client_parser = cmd_parsers.add_parser('client',"
    },
    {
        "line": 99,
        "fullcodeline": "sub_parser = client_parser.add_subparsers(help='client commands')"
    },
    {
        "line": 101,
        "fullcodeline": "cmd_parser = sub_parser.add_parser('list',"
    },
    {
        "line": 103,
        "fullcodeline": "cmd_parser.add_argument('-r', '--realm-name', required=True,"
    },
    {
        "line": 106,
        "fullcodeline": "cmd_parser.set_defaults(func=do_list_clients)"
    },
    {
        "line": 108,
        "fullcodeline": "cmd_parser = sub_parser.add_parser('create',"
    },
    {
        "line": 110,
        "fullcodeline": "cmd_parser.add_argument('-r', '--realm-name', required=True,"
    },
    {
        "line": 112,
        "fullcodeline": "cmd_parser.add_argument('-m', '--metadata', type=argparse.FileType('rb'),"
    },
    {
        "line": 115,
        "fullcodeline": "cmd_parser.set_defaults(func=do_create_client)"
    },
    {
        "line": 117,
        "fullcodeline": "cmd_parser = sub_parser.add_parser('register',"
    },
    {
        "line": 119,
        "fullcodeline": "cmd_parser.add_argument('-r', '--realm-name', required=True,"
    },
    {
        "line": 121,
        "fullcodeline": "cmd_parser.add_argument('-m', '--metadata', type=argparse.FileType('rb'),"
    },
    {
        "line": 124,
        "fullcodeline": "cmd_parser.add_argument('--initial-access-token', required=True,"
    },
    {
        "line": 127,
        "fullcodeline": "cmd_parser.set_defaults(func=do_register_client)"
    },
    {
        "line": 129,
        "fullcodeline": "cmd_parser = sub_parser.add_parser('delete',"
    },
    {
        "line": 131,
        "fullcodeline": "cmd_parser.add_argument('-r', '--realm-name', required=True,"
    },
    {
        "line": 133,
        "fullcodeline": "cmd_parser.add_argument('-c', '--client-name', required=True,"
    },
    {
        "line": 135,
        "fullcodeline": "cmd_parser.set_defaults(func=do_delete_client)"
    },
    {
        "line": 137,
        "fullcodeline": "cmd_parser = sub_parser.add_parser('test',"
    },
    {
        "line": 140,
        "fullcodeline": "cmd_parser.add_argument('-r', '--realm-name', required=True,"
    },
    {
        "line": 142,
        "fullcodeline": "cmd_parser.add_argument('-c', '--client-name', required=True,"
    },
    {
        "line": 144,
        "fullcodeline": "cmd_parser.set_defaults(func=do_client_test)"
    },
    {
        "line": 147,
        "fullcodeline": "options = parser.parse_args()"
    },
    {
        "line": 148,
        "fullcodeline": "configure_logging(options)"
    },
    {
        "line": 17,
        "fullcodeline": "help='exceptions print traceback in addition to '"
    },
    {
        "line": 26,
        "fullcodeline": "help='Normally secure transport such as TLS '"
    },
    {
        "line": 31,
        "fullcodeline": "help='TLS certificate verification for requests to'"
    },
    {
        "line": 125,
        "fullcodeline": "help='realm initial access token for '"
    },
    {
        "line": 7,
        "fullcodeline": "epilog=verbose_help.format(prog_name=prog_name),"
    },
    {
        "line": 21,
        "fullcodeline": "default='/tmp/{prog_name}.log'.format("
    },
    {
        "line": 138,
        "fullcodeline": "help='experimental test used during '"
    },
    {
        "line": 151,
        "fullcodeline": "os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'"
    },
    {
        "line": 154,
        "fullcodeline": "anonymous_conn = KeycloakAnonymousConnection(options.server,"
    },
    {
        "line": 157,
        "fullcodeline": "admin_conn = KeycloakAdminConnection(options.server,"
    },
    {
        "line": 176,
        "fullcodeline": "result = options.func(options, conn)"
    },
    {
        "line": 172,
        "fullcodeline": "if options.func == do_register_client:"
    },
    {
        "line": 167,
        "fullcodeline": "print(six.text_type(e), file=sys.stderr)"
    },
    {
        "line": 168,
        "fullcodeline": "result = 1"
    },
    {
        "line": 173,
        "fullcodeline": "conn = admin_conn"
    },
    {
        "line": 175,
        "fullcodeline": "conn = admin_conn"
    },
    {
        "line": 180,
        "fullcodeline": "print(six.text_type(e), file=sys.stderr)"
    },
    {
        "line": 181,
        "fullcodeline": "result = 2"
    },
    {
        "line": 166,
        "fullcodeline": "traceback.print_exc()"
    },
    {
        "line": 179,
        "fullcodeline": "traceback.print_exc()"
    }
]