[
    {
        "line": 6,
        "fullcodeline": "if (self->extra_flags == 0)"
    },
    {
        "line": 8,
        "fullcodeline": "in_uint32_be(self->in_s, version);"
    },
    {
        "line": 9,
        "fullcodeline": "in_uint32_be(self->in_s, size);"
    },
    {
        "line": 15,
        "fullcodeline": "self->header_size = size;"
    },
    {
        "line": 16,
        "fullcodeline": "self->extra_flags = 1;"
    },
    {
        "line": 10,
        "fullcodeline": "if (size > self->in_s->size)"
    },
    {
        "line": 21,
        "fullcodeline": "struct sesman_con *sc = (struct sesman_con *)self->callback_data;"
    },
    {
        "line": 29,
        "fullcodeline": "self->header_size = 8;"
    },
    {
        "line": 30,
        "fullcodeline": "self->extra_flags = 0;"
    },
    {
        "line": 31,
        "fullcodeline": "init_stream(self->in_s, 0); /* Reset input stream pointers */"
    },
    {
        "line": 12,
        "fullcodeline": "LOG(LOG_LEVEL_ERROR, \"sesman_data_in: bad message size\");"
    },
    {
        "line": 23,
        "fullcodeline": "if (scp_process(self, sc->s) != SCP_SERVER_STATE_OK)"
    },
    {
        "line": 25,
        "fullcodeline": "LOG(LOG_LEVEL_ERROR, \"sesman_data_in: scp_process_msg failed\");"
    }
]