[
    {
        "line": 2,
        "fullcodeline": "assert("
    },
    {
        "line": 5,
        "fullcodeline": "valid_ = false;"
    },
    {
        "line": 7,
        "fullcodeline": "assert("
    },
    {
        "line": 11,
        "fullcodeline": "auto kinds = stringTable_.getStringKinds();"
    },
    {
        "line": 12,
        "fullcodeline": "auto hashes = stringTable_.getIdentifierHashes();"
    },
    {
        "line": 16,
        "fullcodeline": "bytecodeOptions.cjsModulesStaticallyResolved = !cjsModulesStatic_.empty();"
    },
    {
        "line": 17,
        "fullcodeline": "std::unique_ptr<BytecodeModule> BM{new BytecodeModule("
    },
    {
        "line": 34,
        "fullcodeline": "DebugInfoGenerator debugInfoGen{std::move(filenameTable_)};"
    },
    {
        "line": 36,
        "fullcodeline": "const uint32_t strippedFunctionNameId ="
    },
    {
        "line": 38,
        "fullcodeline": "auto functions = functionIDMap_.getElements();"
    },
    {
        "line": 39,
        "fullcodeline": "std::shared_ptr<Context> contextIfNeeded;"
    },
    {
        "line": 97,
        "fullcodeline": "BM->setContext(contextIfNeeded);"
    },
    {
        "line": 99,
        "fullcodeline": "BM->setDebugInfo(debugInfoGen.serializeWithMove());"
    },
    {
        "line": 3,
        "fullcodeline": "valid_ &&"
    },
    {
        "line": 8,
        "fullcodeline": "functionIDMap_.getElements().size() == functionGenerators_.size() &&"
    },
    {
        "line": 37,
        "fullcodeline": "options_.stripFunctionNames ? getStringID(kStrippedFunctionName) : 0;"
    },
    {
        "line": 40,
        "fullcodeline": "for (unsigned i = 0, e = functions.size(); i < e; ++i) {"
    },
    {
        "line": 41,
        "fullcodeline": "auto *F = functions[i];"
    },
    {
        "line": 44,
        "fullcodeline": "uint32_t functionNameId = options_.stripFunctionNames"
    },
    {
        "line": 48,
        "fullcodeline": "std::unique_ptr<BytecodeFunction> func = BFG.generateBytecodeFunction("
    },
    {
        "line": 94,
        "fullcodeline": "BM->setFunction(i, std::move(func));"
    },
    {
        "line": 57,
        "fullcodeline": "if (F->getParent()"
    },
    {
        "line": 70,
        "fullcodeline": "if (F->isLazy()) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (BFG.hasDebugInfo()) {"
    },
    {
        "line": 18,
        "fullcodeline": "functionGenerators_.size(),"
    },
    {
        "line": 19,
        "fullcodeline": "std::move(kinds),"
    },
    {
        "line": 20,
        "fullcodeline": "std::move(hashes),"
    },
    {
        "line": 21,
        "fullcodeline": "stringTable_.acquireStringTable(),"
    },
    {
        "line": 22,
        "fullcodeline": "stringTable_.acquireStringStorage(),"
    },
    {
        "line": 23,
        "fullcodeline": "regExpTable_.getEntryList(),"
    },
    {
        "line": 24,
        "fullcodeline": "regExpTable_.getBytecodeBuffer(),"
    },
    {
        "line": 26,
        "fullcodeline": "std::move(arrayBuffer_),"
    },
    {
        "line": 27,
        "fullcodeline": "std::move(objKeyBuffer_),"
    },
    {
        "line": 28,
        "fullcodeline": "std::move(objValBuffer_),"
    },
    {
        "line": 30,
        "fullcodeline": "std::move(cjsModules_),"
    },
    {
        "line": 31,
        "fullcodeline": "std::move(cjsModulesStatic_),"
    },
    {
        "line": 46,
        "fullcodeline": ": getStringID(functions[i]->getOriginalOrInferredName().str());"
    },
    {
        "line": 49,
        "fullcodeline": "F->getDefinitionKind(),"
    },
    {
        "line": 50,
        "fullcodeline": "F->getKind(),"
    },
    {
        "line": 51,
        "fullcodeline": "F->isStrictMode(),"
    },
    {
        "line": 52,
        "fullcodeline": "F->getExpectedParamCountIncludingThis(),"
    },
    {
        "line": 53,
        "fullcodeline": "F->getFunctionScope()->getVariables().size(),"
    },
    {
        "line": 60,
        "fullcodeline": "F->isLazy()) {"
    },
    {
        "line": 61,
        "fullcodeline": "auto context = F->getParent()->shareContext();"
    },
    {
        "line": 62,
        "fullcodeline": "assert("
    },
    {
        "line": 65,
        "fullcodeline": "contextIfNeeded = context;"
    },
    {
        "line": 66,
        "fullcodeline": "BM->setFunctionSourceRange(i, F->getSourceRange());"
    },
    {
        "line": 74,
        "fullcodeline": "auto lazyData = llvh::make_unique<LazyCompilationData>();"
    },
    {
        "line": 75,
        "fullcodeline": "lazyData->parentScope = F->getLazyScope();"
    },
    {
        "line": 78,
        "fullcodeline": "lazyData->originalName = F->getOriginalOrInferredName();"
    },
    {
        "line": 79,
        "fullcodeline": "lazyData->closureAlias = F->getLazyClosureAlias()"
    },
    {
        "line": 82,
        "fullcodeline": "lazyData->strictMode = F->isStrictMode();"
    },
    {
        "line": 83,
        "fullcodeline": "func->setLazyCompilationData(std::move(lazyData));"
    },
    {
        "line": 88,
        "fullcodeline": "uint32_t sourceLocOffset = debugInfoGen.appendSourceLocations("
    },
    {
        "line": 90,
        "fullcodeline": "uint32_t lexicalDataOffset = debugInfoGen.appendLexicalData("
    },
    {
        "line": 92,
        "fullcodeline": "func->setDebugOffsets({sourceLocOffset, lexicalDataOffset});"
    },
    {
        "line": 63,
        "fullcodeline": "(!contextIfNeeded || contextIfNeeded.get() == context.get()) &&"
    },
    {
        "line": 76,
        "fullcodeline": "lazyData->nodeKind = F->getLazySource().nodeKind;"
    },
    {
        "line": 77,
        "fullcodeline": "lazyData->bufferId = F->getLazySource().bufferId;"
    },
    {
        "line": 80,
        "fullcodeline": "? F->getLazyClosureAlias()->getName()"
    },
    {
        "line": 89,
        "fullcodeline": "BFG.getSourceLocation(), i, BFG.getDebugLocations());"
    },
    {
        "line": 91,
        "fullcodeline": "BFG.getLexicalParentID(), BFG.getDebugVariableNames());"
    }
]