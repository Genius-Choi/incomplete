[
    {
        "line": 6,
        "fullcodeline": "assert(functionNode && \"Function AST cannot be null\");"
    },
    {
        "line": 8,
        "fullcodeline": "auto *body = ESTree::getBlockStatement(functionNode);"
    },
    {
        "line": 9,
        "fullcodeline": "assert(body && \"body of ES5 function cannot be null\");"
    },
    {
        "line": 11,
        "fullcodeline": "Function *newFunction = isGeneratorInnerFunction"
    },
    {
        "line": 26,
        "fullcodeline": "newFunction->setLazyClosureAlias(lazyClosureAlias);"
    },
    {
        "line": 45,
        "fullcodeline": "FunctionContext newFunctionContext{"
    },
    {
        "line": 103,
        "fullcodeline": "emitFunctionEpilogue(Builder.getLiteralUndefined());"
    },
    {
        "line": 12,
        "fullcodeline": "? Builder.createGeneratorInnerFunction("
    },
    {
        "line": 18,
        "fullcodeline": ": Builder.createFunction("
    },
    {
        "line": 28,
        "fullcodeline": "if (auto *bodyBlock = llvh::dyn_cast<ESTree::BlockStatementNode>(body)) {"
    },
    {
        "line": 46,
        "fullcodeline": "this, newFunction, functionNode->getSemInfo()};"
    },
    {
        "line": 52,
        "fullcodeline": "auto *initGenBB = Builder.createBasicBlock(newFunction);"
    },
    {
        "line": 53,
        "fullcodeline": "Builder.setInsertionBlock(initGenBB);"
    },
    {
        "line": 54,
        "fullcodeline": "Builder.createStartGeneratorInst();"
    },
    {
        "line": 55,
        "fullcodeline": "auto *prologueBB = Builder.createBasicBlock(newFunction);"
    },
    {
        "line": 56,
        "fullcodeline": "auto *prologueResumeIsReturn = Builder.createAllocStackInst("
    },
    {
        "line": 58,
        "fullcodeline": "genResumeGenerator(nullptr, prologueResumeIsReturn, prologueBB);"
    },
    {
        "line": 15,
        "fullcodeline": "ESTree::isStrict(functionNode->strictness),"
    },
    {
        "line": 16,
        "fullcodeline": "functionNode->getSourceRange(),"
    },
    {
        "line": 21,
        "fullcodeline": "ESTree::isStrict(functionNode->strictness),"
    },
    {
        "line": 22,
        "fullcodeline": "functionNode->getSourceRange(),"
    },
    {
        "line": 60,
        "fullcodeline": "if (hasSimpleParams(functionNode)) {"
    },
    {
        "line": 31,
        "fullcodeline": "newFunction->setLazyScope(saveCurrentScope());"
    },
    {
        "line": 32,
        "fullcodeline": "auto &lazySource = newFunction->getLazySource();"
    },
    {
        "line": 33,
        "fullcodeline": "lazySource.bufferId = bodyBlock->bufferId;"
    },
    {
        "line": 34,
        "fullcodeline": "lazySource.nodeKind = getLazyFunctionKind(functionNode);"
    },
    {
        "line": 35,
        "fullcodeline": "lazySource.isGeneratorInnerFunction = isGeneratorInnerFunction;"
    },
    {
        "line": 36,
        "fullcodeline": "lazySource.functionRange = functionNode->getSourceRange();"
    },
    {
        "line": 39,
        "fullcodeline": "newFunction->setExpectedParamCountIncludingThis("
    },
    {
        "line": 57,
        "fullcodeline": "genAnonymousLabelName(\"isReturn_prologue\"));"
    },
    {
        "line": 63,
        "fullcodeline": "Builder.setInsertionBlock(prologueBB);"
    },
    {
        "line": 97,
        "fullcodeline": "Builder.createBasicBlock(newFunction),"
    },
    {
        "line": 40,
        "fullcodeline": "countExpectedArgumentsIncludingThis(functionNode));"
    },
    {
        "line": 73,
        "fullcodeline": "auto *entryPointBB = Builder.createBasicBlock(newFunction);"
    },
    {
        "line": 74,
        "fullcodeline": "auto *entryPointResumeIsReturn ="
    },
    {
        "line": 78,
        "fullcodeline": "Builder.setInsertionBlock(prologueBB);"
    },
    {
        "line": 84,
        "fullcodeline": "Builder.createSaveAndYieldInst("
    },
    {
        "line": 88,
        "fullcodeline": "Builder.setInsertionBlock(entryPointBB);"
    },
    {
        "line": 75,
        "fullcodeline": "Builder.createAllocStackInst(genAnonymousLabelName(\"isReturn_entry\"));"
    },
    {
        "line": 85,
        "fullcodeline": "Builder.getLiteralUndefined(), entryPointBB);"
    },
    {
        "line": 92,
        "fullcodeline": "Builder.createBasicBlock(newFunction));"
    }
]