[
    {
        "line": 5,
        "fullcodeline": "Value *found = nameTable_.lookup(name);"
    },
    {
        "line": 57,
        "fullcodeline": "nameTable_.insert(name, res);"
    },
    {
        "line": 24,
        "fullcodeline": "if (inFunc->isGlobalScope() && declKind == VarDecl::Kind::Var) {"
    },
    {
        "line": 25,
        "fullcodeline": "res = Builder.createGlobalObjectProperty(name, true);"
    },
    {
        "line": 37,
        "fullcodeline": "auto *var = Builder.createVariable(inFunc->getFunctionScope(), vdc, name);"
    },
    {
        "line": 53,
        "fullcodeline": "res = var;"
    },
    {
        "line": 10,
        "fullcodeline": "if (auto *var = llvh::dyn_cast<Variable>(found)) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (declKind == VarDecl::Kind::Let)"
    },
    {
        "line": 40,
        "fullcodeline": "if (Variable::declKindNeedsTDZ(vdc) &&"
    },
    {
        "line": 11,
        "fullcodeline": "if (var->getParent()->getFunction() == inFunc)"
    },
    {
        "line": 14,
        "fullcodeline": "assert("
    },
    {
        "line": 42,
        "fullcodeline": "llvh::SmallString<32> strBuf{\"tdz$\"};"
    },
    {
        "line": 43,
        "fullcodeline": "strBuf.append(name.str());"
    },
    {
        "line": 45,
        "fullcodeline": "auto *related = Builder.createVariable("
    },
    {
        "line": 49,
        "fullcodeline": "var->setRelatedVariable(related);"
    },
    {
        "line": 50,
        "fullcodeline": "related->setRelatedVariable(var);"
    },
    {
        "line": 15,
        "fullcodeline": "llvh::isa<GlobalObjectProperty>(found) &&"
    },
    {
        "line": 17,
        "fullcodeline": "if (inFunc->isGlobalScope())"
    },
    {
        "line": 41,
        "fullcodeline": "Mod->getContext().getCodeGenerationSettings().enableTDZ) {"
    },
    {
        "line": 30,
        "fullcodeline": "else if (declKind == VarDecl::Kind::Const)"
    },
    {
        "line": 46,
        "fullcodeline": "var->getParent(),"
    },
    {
        "line": 48,
        "fullcodeline": "genAnonymousLabelName(strBuf));"
    },
    {
        "line": 33,
        "fullcodeline": "assert(declKind == VarDecl::Kind::Var);"
    }
]