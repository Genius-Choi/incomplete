[
    {
        "line": 6,
        "fullcodeline": "Function *topLevel = Builder.createTopLevelFunction(lazyData->strictMode, {});"
    },
    {
        "line": 8,
        "fullcodeline": "FunctionContext topLevelFunctionContext{this, topLevel, nullptr};"
    },
    {
        "line": 12,
        "fullcodeline": "llvh::SaveAndRestore<FunctionContext *> saveTopLevelContext("
    },
    {
        "line": 15,
        "fullcodeline": "auto *node = cast<ESTree::FunctionLikeNode>(Root);"
    },
    {
        "line": 24,
        "fullcodeline": "lexicalScopeChain = lazyData->parentScope;"
    },
    {
        "line": 25,
        "fullcodeline": "materializeScopesInChain("
    },
    {
        "line": 31,
        "fullcodeline": "Variable *parentVar = nullptr;"
    },
    {
        "line": 45,
        "fullcodeline": "assert("
    },
    {
        "line": 49,
        "fullcodeline": "auto *func = genES5Function(lazyData->originalName, parentVar, node);"
    },
    {
        "line": 50,
        "fullcodeline": "addLexicalDebugInfo(func, topLevel, lexicalScopeChain);"
    },
    {
        "line": 26,
        "fullcodeline": "topLevel, lexicalScopeChain, getDepth(lexicalScopeChain) - 1);"
    },
    {
        "line": 32,
        "fullcodeline": "if (lazyData->closureAlias.isValid()) {"
    },
    {
        "line": 46,
        "fullcodeline": "!llvh::isa<ESTree::ArrowFunctionExpressionNode>(node) &&"
    },
    {
        "line": 33,
        "fullcodeline": "assert(lazyData->originalName.isValid() && \"Original name invalid\");"
    },
    {
        "line": 34,
        "fullcodeline": "assert("
    },
    {
        "line": 39,
        "fullcodeline": "parentVar = cast<Variable>(nameTable_.lookup(lazyData->closureAlias));"
    },
    {
        "line": 42,
        "fullcodeline": "nameTable_.insert(lazyData->originalName, parentVar);"
    },
    {
        "line": 35,
        "fullcodeline": "lazyData->originalName != lazyData->closureAlias &&"
    }
]