[
    {
        "line": 2,
        "fullcodeline": "auto* params ="
    },
    {
        "line": 4,
        "fullcodeline": "OpData* data = reinterpret_cast<OpData*>(node->user_data);"
    },
    {
        "line": 6,
        "fullcodeline": "bool has_bias = NumInputs(node) == 3;"
    },
    {
        "line": 8,
        "fullcodeline": "TF_LITE_ENSURE(context, has_bias || NumInputs(node) == 2);"
    },
    {
        "line": 10,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));"
    },
    {
        "line": 12,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 14,
        "fullcodeline": "const TfLiteTensor* bias = nullptr;"
    },
    {
        "line": 16,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);"
    },
    {
        "line": 18,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 21,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);"
    },
    {
        "line": 22,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumDimensions(filter), 4);"
    },
    {
        "line": 24,
        "fullcodeline": "const TfLiteType data_type = input->type;"
    },
    {
        "line": 26,
        "fullcodeline": "const TfLiteType filter_type = filter->type;"
    },
    {
        "line": 27,
        "fullcodeline": "const bool is_hybrid ="
    },
    {
        "line": 29,
        "fullcodeline": "TF_LITE_ENSURE(context,"
    },
    {
        "line": 32,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, output->type, data_type);"
    },
    {
        "line": 44,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, SizeOfDimension(filter, 0), 1);"
    },
    {
        "line": 62,
        "fullcodeline": "int channels_out = SizeOfDimension(filter, 3);"
    },
    {
        "line": 63,
        "fullcodeline": "int width = SizeOfDimension(input, 2);"
    },
    {
        "line": 64,
        "fullcodeline": "int height = SizeOfDimension(input, 1);"
    },
    {
        "line": 65,
        "fullcodeline": "int filter_width = SizeOfDimension(filter, 2);"
    },
    {
        "line": 66,
        "fullcodeline": "int filter_height = SizeOfDimension(filter, 1);"
    },
    {
        "line": 67,
        "fullcodeline": "int batches = SizeOfDimension(input, 0);"
    },
    {
        "line": 70,
        "fullcodeline": "auto padding = params->padding;"
    },
    {
        "line": 73,
        "fullcodeline": "data->padding = ComputePaddingHeightWidth("
    },
    {
        "line": 181,
        "fullcodeline": "TfLiteIntArray* outputSize = TfLiteIntArrayCreate(4);"
    },
    {
        "line": 182,
        "fullcodeline": "outputSize->data[0] = batches;"
    },
    {
        "line": 183,
        "fullcodeline": "outputSize->data[1] = out_height;"
    },
    {
        "line": 184,
        "fullcodeline": "outputSize->data[2] = out_width;"
    },
    {
        "line": 185,
        "fullcodeline": "outputSize->data[3] = channels_out;"
    },
    {
        "line": 3,
        "fullcodeline": "reinterpret_cast<TfLiteDepthwiseConvParams*>(node->builtin_data);"
    },
    {
        "line": 13,
        "fullcodeline": "GetInputSafe(context, node, kFilterTensor, &filter));"
    },
    {
        "line": 19,
        "fullcodeline": "GetOutputSafe(context, node, kOutputTensor, &output));"
    },
    {
        "line": 28,
        "fullcodeline": "data_type == kTfLiteFloat32 && filter_type == kTfLiteInt8;"
    },
    {
        "line": 30,
        "fullcodeline": "data_type == kTfLiteFloat32 || data_type == kTfLiteUInt8 ||"
    },
    {
        "line": 33,
        "fullcodeline": "if (!is_hybrid) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (data_type == kTfLiteInt16) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (data_type != kTfLiteFloat32) {"
    },
    {
        "line": 186,
        "fullcodeline": "return context->ResizeTensor(context, output, outputSize);"
    },
    {
        "line": 31,
        "fullcodeline": "data_type == kTfLiteInt8 || data_type == kTfLiteInt16);"
    },
    {
        "line": 34,
        "fullcodeline": "TF_LITE_ENSURE(context,"
    },
    {
        "line": 39,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input->params.zero_point, 0);"
    },
    {
        "line": 40,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);"
    },
    {
        "line": 47,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kBiasTensor, &bias));"
    },
    {
        "line": 57,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumDimensions(bias), 1);"
    },
    {
        "line": 58,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, SizeOfDimension(filter, 3),"
    },
    {
        "line": 82,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, filter->quantization.type,"
    },
    {
        "line": 84,
        "fullcodeline": "TF_LITE_ENSURE(context, filter->quantization.type != kTfLiteNoQuantization);"
    },
    {
        "line": 88,
        "fullcodeline": "TF_LITE_ENSURE(context, affine_quantization);"
    },
    {
        "line": 89,
        "fullcodeline": "TF_LITE_ENSURE(context, affine_quantization->scale);"
    },
    {
        "line": 90,
        "fullcodeline": "TF_LITE_ENSURE(context, (affine_quantization->scale->size == 1 ||"
    },
    {
        "line": 93,
        "fullcodeline": "data->per_channel_output_multiplier.resize(channels_out);"
    },
    {
        "line": 94,
        "fullcodeline": "data->per_channel_output_shift.resize(channels_out);"
    },
    {
        "line": 95,
        "fullcodeline": "TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams("
    },
    {
        "line": 104,
        "fullcodeline": "TF_LITE_ENSURE(context, filter->quantization.type != kTfLiteNoQuantization);"
    },
    {
        "line": 108,
        "fullcodeline": "TF_LITE_ENSURE(context, affine_quantization);"
    },
    {
        "line": 109,
        "fullcodeline": "TF_LITE_ENSURE(context, affine_quantization->scale);"
    },
    {
        "line": 110,
        "fullcodeline": "TF_LITE_ENSURE_EQ("
    },
    {
        "line": 114,
        "fullcodeline": "int temporaries_count = 0;"
    },
    {
        "line": 115,
        "fullcodeline": "data->input_quantized_index = temporaries_count;"
    },
    {
        "line": 120,
        "fullcodeline": "++temporaries_count;"
    },
    {
        "line": 121,
        "fullcodeline": "data->scaling_factors_index = temporaries_count;"
    },
    {
        "line": 126,
        "fullcodeline": "++temporaries_count;"
    },
    {
        "line": 127,
        "fullcodeline": "data->input_offset_index = temporaries_count;"
    },
    {
        "line": 132,
        "fullcodeline": "++temporaries_count;"
    },
    {
        "line": 134,
        "fullcodeline": "TfLiteIntArrayFree(node->temporaries);"
    },
    {
        "line": 135,
        "fullcodeline": "node->temporaries = TfLiteIntArrayCreate(temporaries_count);"
    },
    {
        "line": 137,
        "fullcodeline": "node->temporaries->data[data->input_quantized_index] ="
    },
    {
        "line": 140,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 143,
        "fullcodeline": "input_quantized->type = kTfLiteInt8;"
    },
    {
        "line": 144,
        "fullcodeline": "input_quantized->allocation_type = kTfLiteArenaRw;"
    },
    {
        "line": 150,
        "fullcodeline": "node->temporaries->data[data->scaling_factors_index] ="
    },
    {
        "line": 153,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 156,
        "fullcodeline": "scaling_factors->type = kTfLiteFloat32;"
    },
    {
        "line": 157,
        "fullcodeline": "scaling_factors->allocation_type = kTfLiteArenaRw;"
    },
    {
        "line": 158,
        "fullcodeline": "const int batch_size = SizeOfDimension(input, 0);"
    },
    {
        "line": 159,
        "fullcodeline": "int scaling_dims[1] = {batch_size};"
    },
    {
        "line": 166,
        "fullcodeline": "node->temporaries->data[data->input_offset_index] = data->input_offset_id;"
    },
    {
        "line": 168,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 171,
        "fullcodeline": "input_offsets->type = kTfLiteInt32;"
    },
    {
        "line": 172,
        "fullcodeline": "input_offsets->allocation_type = kTfLiteArenaRw;"
    },
    {
        "line": 35,
        "fullcodeline": "filter->type == data_type || data_type == kTfLiteInt16);"
    },
    {
        "line": 48,
        "fullcodeline": "if (data_type == kTfLiteUInt8 || data_type == kTfLiteInt8) {"
    },
    {
        "line": 59,
        "fullcodeline": "SizeOfDimension(bias, 0));"
    },
    {
        "line": 116,
        "fullcodeline": "if (data->input_quantized_id == kTensorNotAllocated) {"
    },
    {
        "line": 122,
        "fullcodeline": "if (data->scaling_factors_id == kTensorNotAllocated) {"
    },
    {
        "line": 128,
        "fullcodeline": "if (data->input_offset_id == kTensorNotAllocated) {"
    },
    {
        "line": 141,
        "fullcodeline": "context, GetTemporarySafe(context, node, data->input_quantized_index,"
    },
    {
        "line": 145,
        "fullcodeline": "if (!TfLiteIntArrayEqual(input_quantized->dims, input->dims)) {"
    },
    {
        "line": 154,
        "fullcodeline": "context, GetTemporarySafe(context, node, data->scaling_factors_index,"
    },
    {
        "line": 160,
        "fullcodeline": "if (!TfLiteIntArrayEqualsArray(scaling_factors->dims, 1, scaling_dims)) {"
    },
    {
        "line": 169,
        "fullcodeline": "GetTemporarySafe(context, node, data->input_offset_index,"
    },
    {
        "line": 173,
        "fullcodeline": "if (!TfLiteIntArrayEqualsArray(input_offsets->dims, 1, scaling_dims)) {"
    },
    {
        "line": 49,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, bias->type, kTfLiteInt32);"
    },
    {
        "line": 50,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, bias->params.zero_point, 0);"
    },
    {
        "line": 91,
        "fullcodeline": "affine_quantization->scale->size == channels_out));"
    },
    {
        "line": 99,
        "fullcodeline": "data->per_channel_output_multiplier.data(),"
    },
    {
        "line": 100,
        "fullcodeline": "data->per_channel_output_shift.data(), channels_out));"
    },
    {
        "line": 117,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 123,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 129,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 146,
        "fullcodeline": "TfLiteIntArray* input_quantized_size = TfLiteIntArrayCopy(input->dims);"
    },
    {
        "line": 147,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_quantized,"
    },
    {
        "line": 161,
        "fullcodeline": "TfLiteIntArray* scaling_factors_size = TfLiteIntArrayCreate(1);"
    },
    {
        "line": 162,
        "fullcodeline": "scaling_factors_size->data[0] = batch_size;"
    },
    {
        "line": 163,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, scaling_factors,"
    },
    {
        "line": 174,
        "fullcodeline": "TfLiteIntArray* input_offsets_size = TfLiteIntArrayCreate(1);"
    },
    {
        "line": 175,
        "fullcodeline": "input_offsets_size->data[0] = batch_size;"
    },
    {
        "line": 176,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, context->ResizeTensor(context, input_offsets,"
    },
    {
        "line": 118,
        "fullcodeline": "context, context->AddTensors(context, 1, &data->input_quantized_id));"
    },
    {
        "line": 124,
        "fullcodeline": "context, context->AddTensors(context, 1, &data->scaling_factors_id));"
    },
    {
        "line": 130,
        "fullcodeline": "context, context->AddTensors(context, 1, &data->input_offset_id));"
    },
    {
        "line": 51,
        "fullcodeline": "} else if (data_type == kTfLiteInt16) {"
    },
    {
        "line": 52,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, bias->type, kTfLiteInt64);"
    },
    {
        "line": 53,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, bias->params.zero_point, 0);"
    },
    {
        "line": 55,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, bias->type, data_type);"
    }
]