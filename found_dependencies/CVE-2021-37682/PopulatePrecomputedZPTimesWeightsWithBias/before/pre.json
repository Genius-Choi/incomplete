[
    {
        "line": 5,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 7,
        "fullcodeline": "const TfLiteTensor* output_state ="
    },
    {
        "line": 9,
        "fullcodeline": "TF_LITE_ENSURE(context, output_state != nullptr);"
    },
    {
        "line": 11,
        "fullcodeline": "const int32_t input_zero_point = -input->params.zero_point;"
    },
    {
        "line": 12,
        "fullcodeline": "const int32_t output_state_zero_point = -output_state->params.zero_point;"
    },
    {
        "line": 14,
        "fullcodeline": "const TfLiteTensor* input_to_input_weights = GetOptionalInputTensor("
    },
    {
        "line": 17,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 22,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node,"
    },
    {
        "line": 26,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 31,
        "fullcodeline": "const TfLiteTensor* recurrent_to_input_weights = GetOptionalInputTensor("
    },
    {
        "line": 34,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 39,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 44,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 49,
        "fullcodeline": "const TfLiteTensor* projection_weights = GetOptionalInputTensor("
    },
    {
        "line": 51,
        "fullcodeline": "const TfLiteTensor* projection_bias ="
    },
    {
        "line": 54,
        "fullcodeline": "lstm_eval::IntegerLstmParameter* integer_lstm_params ="
    },
    {
        "line": 57,
        "fullcodeline": "const TfLiteTensor* intermediate ="
    },
    {
        "line": 59,
        "fullcodeline": "const auto* params ="
    },
    {
        "line": 61,
        "fullcodeline": "const int32_t hidden_zp = params->zero_point->data[0];"
    },
    {
        "line": 67,
        "fullcodeline": "const bool is_layer_norm = op_data->use_layer_norm;"
    },
    {
        "line": 70,
        "fullcodeline": "const TfLiteTensor* forget_gate_bias ="
    },
    {
        "line": 74,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 80,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 87,
        "fullcodeline": "const TfLiteTensor* cell_gate_bias ="
    },
    {
        "line": 90,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 95,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 102,
        "fullcodeline": "const TfLiteTensor* output_gate_bias ="
    },
    {
        "line": 106,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 112,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 119,
        "fullcodeline": "const TfLiteTensor* input_gate_bias ="
    },
    {
        "line": 122,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 127,
        "fullcodeline": "TF_LITE_ENSURE_OK("
    },
    {
        "line": 134,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 6,
        "fullcodeline": "context, GetInputSafe(context, node, lstm::full::kInputTensor, &input));"
    },
    {
        "line": 8,
        "fullcodeline": "GetVariableInput(context, node, lstm::full::kOutputStateTensor);"
    },
    {
        "line": 19,
        "fullcodeline": "GetInputSafe(context, node, lstm::full::kInputToForgetWeightsTensor,"
    },
    {
        "line": 28,
        "fullcodeline": "GetInputSafe(context, node, lstm::full::kInputToOutputWeightsTensor,"
    },
    {
        "line": 36,
        "fullcodeline": "GetInputSafe(context, node, lstm::full::kRecurrentToForgetWeightsTensor,"
    },
    {
        "line": 41,
        "fullcodeline": "GetInputSafe(context, node, lstm::full::kRecurrentToCellWeightsTensor,"
    },
    {
        "line": 46,
        "fullcodeline": "GetInputSafe(context, node, lstm::full::kRecurrentToOutputWeightsTensor,"
    },
    {
        "line": 52,
        "fullcodeline": "GetOptionalInputTensor(context, node, lstm::full::kProjectionBiasTensor);"
    },
    {
        "line": 60,
        "fullcodeline": "static_cast<TfLiteAffineQuantization*>(intermediate->quantization.params);"
    },
    {
        "line": 71,
        "fullcodeline": "is_layer_norm"
    },
    {
        "line": 76,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 82,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 88,
        "fullcodeline": "is_layer_norm ? nullptr"
    },
    {
        "line": 92,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 97,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 103,
        "fullcodeline": "is_layer_norm"
    },
    {
        "line": 108,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 114,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 120,
        "fullcodeline": "is_layer_norm ? nullptr"
    },
    {
        "line": 124,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 129,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 135,
        "fullcodeline": "PrecomputeZeroPointTimesWeightWithBias("
    },
    {
        "line": 73,
        "fullcodeline": ": GetInput(context, node, lstm::full::kForgetGateBiasTensor);"
    },
    {
        "line": 89,
        "fullcodeline": ": GetInput(context, node, lstm::full::kCellGateBiasTensor);"
    },
    {
        "line": 105,
        "fullcodeline": ": GetInput(context, node, lstm::full::kOutputGateBiasTensor);"
    },
    {
        "line": 121,
        "fullcodeline": ": GetInput(context, node, lstm::full::kInputGateBiasTensor);"
    }
]