[
    {
        "line": 3,
        "fullcodeline": "struct net_device *dev = skb->dev;"
    },
    {
        "line": 22,
        "fullcodeline": "skb_set_transport_header(skb, fhoff);"
    },
    {
        "line": 23,
        "fullcodeline": "hdr = ipv6_hdr(skb);"
    },
    {
        "line": 24,
        "fullcodeline": "fhdr = (struct frag_hdr *)skb_transport_header(skb);"
    },
    {
        "line": 26,
        "fullcodeline": "fq = fq_find(net, fhdr->identification, user, &hdr->saddr, &hdr->daddr,"
    },
    {
        "line": 33,
        "fullcodeline": "spin_lock_bh(&fq->q.lock);"
    },
    {
        "line": 43,
        "fullcodeline": "ret = -EINPROGRESS;"
    },
    {
        "line": 11,
        "fullcodeline": "if (ipv6_hdr(skb)->payload_len == 0) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (fq == NULL) {"
    },
    {
        "line": 12,
        "fullcodeline": "pr_debug(\"payload len = 0\\n\");"
    },
    {
        "line": 16,
        "fullcodeline": "if (find_prev_fhdr(skb, &prevhdr, &nhoff, &fhoff) < 0)"
    },
    {
        "line": 19,
        "fullcodeline": "if (!pskb_may_pull(skb, fhoff + sizeof(*fhdr)))"
    },
    {
        "line": 27,
        "fullcodeline": "skb->dev ? skb->dev->ifindex : 0, ip6_frag_ecn(hdr));"
    },
    {
        "line": 35,
        "fullcodeline": "if (nf_ct_frag6_queue(fq, skb, fhdr, nhoff) < 0) {"
    },
    {
        "line": 36,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 44,
        "fullcodeline": "if (fq->q.flags == (INET_FRAG_FIRST_IN | INET_FRAG_LAST_IN) &&"
    },
    {
        "line": 46,
        "fullcodeline": "nf_ct_frag6_reasm(fq, skb, dev))"
    },
    {
        "line": 47,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 17,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 20,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 30,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 45,
        "fullcodeline": "fq->q.meat == fq->q.len &&"
    }
]