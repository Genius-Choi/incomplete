[
    {
        "line": 3,
        "fullcodeline": "int pixel_block_size = (tga->bits / 8);"
    },
    {
        "line": 4,
        "fullcodeline": "int image_block_size = (tga->width * tga->height) * pixel_block_size;"
    },
    {
        "line": 5,
        "fullcodeline": "int* decompression_buffer = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "unsigned char* conversion_buffer = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "int buffer_caret = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "int bitmap_caret = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "int i = 0;"
    },
    {
        "line": 33,
        "fullcodeline": "tga->bitmap = (int *) gdMalloc(image_block_size * sizeof(int));"
    },
    {
        "line": 13,
        "fullcodeline": "if(overflow2(tga->width, tga->height)) {"
    },
    {
        "line": 17,
        "fullcodeline": "if(overflow2(tga->width * tga->height, pixel_block_size)) {"
    },
    {
        "line": 21,
        "fullcodeline": "if(overflow2(image_block_size, sizeof(int))) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (tga->bitmap == NULL)"
    },
    {
        "line": 27,
        "fullcodeline": "if (tga->imagetype != TGA_TYPE_RGB && tga->imagetype != TGA_TYPE_RGB_RLE)"
    },
    {
        "line": 42,
        "fullcodeline": "conversion_buffer = (unsigned char *) gdMalloc(image_block_size * sizeof(unsigned char));"
    },
    {
        "line": 65,
        "fullcodeline": "decompression_buffer = (int*) gdMalloc(image_block_size * sizeof(int));"
    },
    {
        "line": 69,
        "fullcodeline": "conversion_buffer = (unsigned char *) gdMalloc(image_block_size * sizeof(unsigned char));"
    },
    {
        "line": 76,
        "fullcodeline": "rle_size = gdGetBuf(conversion_buffer, image_block_size, ctx);"
    },
    {
        "line": 83,
        "fullcodeline": "buffer_caret = 0;"
    },
    {
        "line": 90,
        "fullcodeline": "buffer_caret = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "return -1;"
    },
    {
        "line": 18,
        "fullcodeline": "return -1;"
    },
    {
        "line": 22,
        "fullcodeline": "return -1;"
    },
    {
        "line": 28,
        "fullcodeline": "return -1;"
    },
    {
        "line": 35,
        "fullcodeline": "return -1;"
    },
    {
        "line": 43,
        "fullcodeline": "if (conversion_buffer == NULL) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (gdGetBuf(conversion_buffer, image_block_size, ctx) != image_block_size) {"
    },
    {
        "line": 53,
        "fullcodeline": "while (buffer_caret < image_block_size) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (decompression_buffer == NULL) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (conversion_buffer == NULL) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (rle_size <= 0) {"
    },
    {
        "line": 85,
        "fullcodeline": "while( buffer_caret < rle_size) {"
    },
    {
        "line": 92,
        "fullcodeline": "while( bitmap_caret < image_block_size ) {"
    },
    {
        "line": 55,
        "fullcodeline": "buffer_caret++;"
    },
    {
        "line": 86,
        "fullcodeline": "decompression_buffer[buffer_caret] = (int)conversion_buffer[buffer_caret];"
    },
    {
        "line": 87,
        "fullcodeline": "buffer_caret++;"
    },
    {
        "line": 44,
        "fullcodeline": "return -1;"
    },
    {
        "line": 50,
        "fullcodeline": "return -1;"
    },
    {
        "line": 67,
        "fullcodeline": "return -1;"
    },
    {
        "line": 73,
        "fullcodeline": "return -1;"
    },
    {
        "line": 80,
        "fullcodeline": "return -1;"
    },
    {
        "line": 94,
        "fullcodeline": "if ((decompression_buffer[buffer_caret] & TGA_RLE_FLAG) == TGA_RLE_FLAG) {"
    },
    {
        "line": 95,
        "fullcodeline": "encoded_pixels = ( ( decompression_buffer[ buffer_caret ] & ~TGA_RLE_FLAG ) + 1 );"
    },
    {
        "line": 96,
        "fullcodeline": "buffer_caret++;"
    },
    {
        "line": 109,
        "fullcodeline": "buffer_caret += pixel_block_size;"
    },
    {
        "line": 105,
        "fullcodeline": "for (i = 0; i < encoded_pixels; i++) {"
    },
    {
        "line": 112,
        "fullcodeline": "encoded_pixels = decompression_buffer[ buffer_caret ] + 1;"
    },
    {
        "line": 113,
        "fullcodeline": "buffer_caret++;"
    },
    {
        "line": 123,
        "fullcodeline": "bitmap_caret += (encoded_pixels * pixel_block_size);"
    },
    {
        "line": 124,
        "fullcodeline": "buffer_caret += (encoded_pixels * pixel_block_size);"
    },
    {
        "line": 98,
        "fullcodeline": "if ((bitmap_caret + (encoded_pixels * pixel_block_size)) > image_block_size"
    },
    {
        "line": 99,
        "fullcodeline": "|| buffer_caret + pixel_block_size > rle_size) {"
    },
    {
        "line": 107,
        "fullcodeline": "bitmap_caret += pixel_block_size;"
    },
    {
        "line": 122,
        "fullcodeline": "memcpy(tga->bitmap + bitmap_caret, decompression_buffer + buffer_caret, encoded_pixels * pixel_block_size * sizeof(int));"
    },
    {
        "line": 102,
        "fullcodeline": "return -1;"
    },
    {
        "line": 106,
        "fullcodeline": "memcpy(tga->bitmap + bitmap_caret, decompression_buffer + buffer_caret, pixel_block_size * sizeof(int));"
    },
    {
        "line": 115,
        "fullcodeline": "if ((bitmap_caret + (encoded_pixels * pixel_block_size)) > image_block_size"
    },
    {
        "line": 116,
        "fullcodeline": "|| buffer_caret + (encoded_pixels * pixel_block_size) > rle_size) {"
    },
    {
        "line": 119,
        "fullcodeline": "return -1;"
    }
]