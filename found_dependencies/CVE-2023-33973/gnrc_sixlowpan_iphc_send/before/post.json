[
    {
        "line": 3,
        "fullcodeline": "gnrc_netif_hdr_t *netif_hdr = pkt->data;"
    },
    {
        "line": 4,
        "fullcodeline": "gnrc_netif_t *netif = gnrc_netif_hdr_get_netif(netif_hdr);"
    },
    {
        "line": 7,
        "fullcodeline": "size_t orig_datagram_size = gnrc_pkt_len(pkt->next);"
    },
    {
        "line": 11,
        "fullcodeline": "if (IS_USED(MODULE_GNRC_SIXLOWPAN_FRAG_MINFWD)) {"
    },
    {
        "line": 15,
        "fullcodeline": "if ((tmp = _iphc_encode(pkt, pkt->data, netif))) {"
    },
    {
        "line": 12,
        "fullcodeline": "dst = ipv6_hdr->dst;    /* copying original destination address */"
    },
    {
        "line": 22,
        "fullcodeline": "gnrc_sixlowpan_multiplex_by_size(tmp, orig_datagram_size, netif, page);"
    },
    {
        "line": 16,
        "fullcodeline": "if (IS_USED(MODULE_GNRC_SIXLOWPAN_FRAG_MINFWD) && (ctx != NULL) &&"
    },
    {
        "line": 25,
        "fullcodeline": "gnrc_pktbuf_release(pkt);"
    },
    {
        "line": 17,
        "fullcodeline": "(gnrc_sixlowpan_frag_minfwd_frag_iphc(tmp, orig_datagram_size, &dst,"
    },
    {
        "line": 19,
        "fullcodeline": "DEBUG(\"6lo iphc minfwd: putting slack in first fragment\\n\");"
    }
]