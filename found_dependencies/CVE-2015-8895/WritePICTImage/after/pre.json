[
    {
        "line": 66,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 67,
        "fullcodeline": "assert(image_info->signature == MagickSignature);"
    },
    {
        "line": 68,
        "fullcodeline": "assert(image != (Image *) NULL);"
    },
    {
        "line": 69,
        "fullcodeline": "assert(image->signature == MagickSignature);"
    },
    {
        "line": 74,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 75,
        "fullcodeline": "assert(exception->signature == MagickSignature);"
    },
    {
        "line": 76,
        "fullcodeline": "status=OpenBlob(image_info,image,WriteBinaryBlobMode,exception);"
    },
    {
        "line": 83,
        "fullcodeline": "size_rectangle.top=0;"
    },
    {
        "line": 84,
        "fullcodeline": "size_rectangle.left=0;"
    },
    {
        "line": 85,
        "fullcodeline": "size_rectangle.bottom=(short) image->rows;"
    },
    {
        "line": 86,
        "fullcodeline": "size_rectangle.right=(short) image->columns;"
    },
    {
        "line": 87,
        "fullcodeline": "frame_rectangle=size_rectangle;"
    },
    {
        "line": 88,
        "fullcodeline": "crop_rectangle=size_rectangle;"
    },
    {
        "line": 89,
        "fullcodeline": "source_rectangle=size_rectangle;"
    },
    {
        "line": 90,
        "fullcodeline": "destination_rectangle=size_rectangle;"
    },
    {
        "line": 91,
        "fullcodeline": "base_address=0xff;"
    },
    {
        "line": 92,
        "fullcodeline": "row_bytes=image->columns;"
    },
    {
        "line": 93,
        "fullcodeline": "bounds.top=0;"
    },
    {
        "line": 94,
        "fullcodeline": "bounds.left=0;"
    },
    {
        "line": 95,
        "fullcodeline": "bounds.bottom=(short) image->rows;"
    },
    {
        "line": 96,
        "fullcodeline": "bounds.right=(short) image->columns;"
    },
    {
        "line": 97,
        "fullcodeline": "pixmap.version=0;"
    },
    {
        "line": 98,
        "fullcodeline": "pixmap.pack_type=0;"
    },
    {
        "line": 99,
        "fullcodeline": "pixmap.pack_size=0;"
    },
    {
        "line": 100,
        "fullcodeline": "pixmap.pixel_type=0;"
    },
    {
        "line": 101,
        "fullcodeline": "pixmap.bits_per_pixel=8;"
    },
    {
        "line": 102,
        "fullcodeline": "pixmap.component_count=1;"
    },
    {
        "line": 103,
        "fullcodeline": "pixmap.component_size=8;"
    },
    {
        "line": 104,
        "fullcodeline": "pixmap.plane_bytes=0;"
    },
    {
        "line": 105,
        "fullcodeline": "pixmap.table=0;"
    },
    {
        "line": 106,
        "fullcodeline": "pixmap.reserved=0;"
    },
    {
        "line": 107,
        "fullcodeline": "transfer_mode=0;"
    },
    {
        "line": 108,
        "fullcodeline": "x_resolution=image->resolution.x != 0.0 ? image->resolution.x :"
    },
    {
        "line": 110,
        "fullcodeline": "y_resolution=image->resolution.y != 0.0 ? image->resolution.y :"
    },
    {
        "line": 112,
        "fullcodeline": "storage_class=image->storage_class;"
    },
    {
        "line": 127,
        "fullcodeline": "bytes_per_line=image->columns;"
    },
    {
        "line": 130,
        "fullcodeline": "buffer=(unsigned char *) AcquireQuantumMemory(PictInfoSize,sizeof(*buffer));"
    },
    {
        "line": 131,
        "fullcodeline": "packed_scanline=(unsigned char *) AcquireQuantumMemory((size_t)"
    },
    {
        "line": 133,
        "fullcodeline": "scanline=(unsigned char *) AcquireQuantumMemory(row_bytes,sizeof(*scanline));"
    },
    {
        "line": 166,
        "fullcodeline": "profile=GetImageProfile(image,\"iptc\");"
    },
    {
        "line": 177,
        "fullcodeline": "profile=GetImageProfile(image,\"icc\");"
    },
    {
        "line": 351,
        "fullcodeline": "count=0;"
    },
    {
        "line": 432,
        "fullcodeline": "offset=SeekBlob(image,512,SEEK_SET);"
    },
    {
        "line": 70,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 72,
        "fullcodeline": "if ((image->columns > 65535L) || (image->rows > 65535L))"
    },
    {
        "line": 77,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 79,
        "fullcodeline": "(void) TransformImageColorspace(image,sRGBColorspace,exception);"
    },
    {
        "line": 113,
        "fullcodeline": "if (image_info->compression == JPEGCompression)"
    },
    {
        "line": 115,
        "fullcodeline": "if (storage_class == DirectClass)"
    },
    {
        "line": 128,
        "fullcodeline": "if (storage_class == DirectClass)"
    },
    {
        "line": 138,
        "fullcodeline": "(void) ResetMagickMemory(scanline,0,row_bytes);"
    },
    {
        "line": 139,
        "fullcodeline": "(void) ResetMagickMemory(packed_scanline,0,(size_t) (row_bytes+MaxCount));"
    },
    {
        "line": 143,
        "fullcodeline": "(void) ResetMagickMemory(buffer,0,PictInfoSize);"
    },
    {
        "line": 144,
        "fullcodeline": "(void) WriteBlob(image,PictInfoSize,buffer);"
    },
    {
        "line": 145,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0);"
    },
    {
        "line": 146,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) size_rectangle.top);"
    },
    {
        "line": 147,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) size_rectangle.left);"
    },
    {
        "line": 148,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) size_rectangle.bottom);"
    },
    {
        "line": 149,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) size_rectangle.right);"
    },
    {
        "line": 150,
        "fullcodeline": "(void) WriteBlobMSBShort(image,PictVersion);"
    },
    {
        "line": 151,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0x02ff);  /* version #2 */"
    },
    {
        "line": 152,
        "fullcodeline": "(void) WriteBlobMSBShort(image,PictInfoOp);"
    },
    {
        "line": 153,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0xFFFE0000UL);"
    },
    {
        "line": 157,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) x_resolution);"
    },
    {
        "line": 158,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0x0000);"
    },
    {
        "line": 159,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) y_resolution);"
    },
    {
        "line": 160,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0x0000);"
    },
    {
        "line": 161,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) frame_rectangle.top);"
    },
    {
        "line": 162,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) frame_rectangle.left);"
    },
    {
        "line": 163,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) frame_rectangle.bottom);"
    },
    {
        "line": 164,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) frame_rectangle.right);"
    },
    {
        "line": 165,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000L);"
    },
    {
        "line": 167,
        "fullcodeline": "if (profile != (StringInfo *) NULL)"
    },
    {
        "line": 178,
        "fullcodeline": "if (profile != (StringInfo *) NULL)"
    },
    {
        "line": 195,
        "fullcodeline": "(void) WriteBlobMSBShort(image,PictCropRegionOp);"
    },
    {
        "line": 196,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0xa);"
    },
    {
        "line": 197,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) crop_rectangle.top);"
    },
    {
        "line": 198,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) crop_rectangle.left);"
    },
    {
        "line": 199,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) crop_rectangle.bottom);"
    },
    {
        "line": 200,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) crop_rectangle.right);"
    },
    {
        "line": 201,
        "fullcodeline": "if (image_info->compression == JPEGCompression)"
    },
    {
        "line": 285,
        "fullcodeline": "if (storage_class == PseudoClass)"
    },
    {
        "line": 292,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) (row_bytes | 0x8000));"
    },
    {
        "line": 293,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) bounds.top);"
    },
    {
        "line": 294,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) bounds.left);"
    },
    {
        "line": 295,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) bounds.bottom);"
    },
    {
        "line": 296,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) bounds.right);"
    },
    {
        "line": 300,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) pixmap.version);"
    },
    {
        "line": 301,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) pixmap.pack_type);"
    },
    {
        "line": 302,
        "fullcodeline": "(void) WriteBlobMSBLong(image,(unsigned int) pixmap.pack_size);"
    },
    {
        "line": 303,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) (x_resolution+0.5));"
    },
    {
        "line": 304,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0x0000);"
    },
    {
        "line": 305,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) (y_resolution+0.5));"
    },
    {
        "line": 306,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0x0000);"
    },
    {
        "line": 307,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) pixmap.pixel_type);"
    },
    {
        "line": 308,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) pixmap.bits_per_pixel);"
    },
    {
        "line": 312,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) pixmap.component_count);"
    },
    {
        "line": 313,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) pixmap.component_size);"
    },
    {
        "line": 314,
        "fullcodeline": "(void) WriteBlobMSBLong(image,(unsigned int) pixmap.plane_bytes);"
    },
    {
        "line": 315,
        "fullcodeline": "(void) WriteBlobMSBLong(image,(unsigned int) pixmap.table);"
    },
    {
        "line": 316,
        "fullcodeline": "(void) WriteBlobMSBLong(image,(unsigned int) pixmap.reserved);"
    },
    {
        "line": 317,
        "fullcodeline": "if (storage_class == PseudoClass)"
    },
    {
        "line": 339,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) source_rectangle.top);"
    },
    {
        "line": 340,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) source_rectangle.left);"
    },
    {
        "line": 341,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) source_rectangle.bottom);"
    },
    {
        "line": 342,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) source_rectangle.right);"
    },
    {
        "line": 343,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) destination_rectangle.top);"
    },
    {
        "line": 344,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) destination_rectangle.left);"
    },
    {
        "line": 345,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) destination_rectangle.bottom);"
    },
    {
        "line": 346,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) destination_rectangle.right);"
    },
    {
        "line": 347,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) transfer_mode);"
    },
    {
        "line": 430,
        "fullcodeline": "(void) WriteBlobMSBShort(image,PictEndOfPictureOp);"
    },
    {
        "line": 431,
        "fullcodeline": "offset=TellBlob(image);"
    },
    {
        "line": 433,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) offset);"
    },
    {
        "line": 437,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 71,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 73,
        "fullcodeline": "ThrowWriterException(ImageError,\"WidthOrHeightExceedsLimit\");"
    },
    {
        "line": 114,
        "fullcodeline": "storage_class=DirectClass;"
    },
    {
        "line": 117,
        "fullcodeline": "pixmap.component_count=image->alpha_trait != UndefinedPixelTrait ? 4 : 3;"
    },
    {
        "line": 118,
        "fullcodeline": "pixmap.pixel_type=16;"
    },
    {
        "line": 119,
        "fullcodeline": "pixmap.bits_per_pixel=32;"
    },
    {
        "line": 120,
        "fullcodeline": "pixmap.pack_type=0x04;"
    },
    {
        "line": 121,
        "fullcodeline": "transfer_mode=0x40;"
    },
    {
        "line": 122,
        "fullcodeline": "row_bytes=4*image->columns;"
    },
    {
        "line": 129,
        "fullcodeline": "bytes_per_line*=image->alpha_trait != UndefinedPixelTrait ? 4 : 3;"
    },
    {
        "line": 134,
        "fullcodeline": "if ((buffer == (unsigned char *) NULL) ||"
    },
    {
        "line": 136,
        "fullcodeline": "(scanline == (unsigned char *) NULL))"
    },
    {
        "line": 137,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 215,
        "fullcodeline": "jpeg_image=CloneImage(image,0,0,MagickTrue,exception);"
    },
    {
        "line": 221,
        "fullcodeline": "jpeg_info=CloneImageInfo(image_info);"
    },
    {
        "line": 223,
        "fullcodeline": "length=0;"
    },
    {
        "line": 224,
        "fullcodeline": "blob=(unsigned char *) ImageToBlob(jpeg_info,jpeg_image,&length,"
    },
    {
        "line": 428,
        "fullcodeline": "if ((count & 0x01) != 0)"
    },
    {
        "line": 434,
        "fullcodeline": "scanline=(unsigned char *) RelinquishMagickMemory(scanline);"
    },
    {
        "line": 435,
        "fullcodeline": "packed_scanline=(unsigned char *) RelinquishMagickMemory(packed_scanline);"
    },
    {
        "line": 436,
        "fullcodeline": "buffer=(unsigned char *) RelinquishMagickMemory(buffer);"
    },
    {
        "line": 135,
        "fullcodeline": "(packed_scanline == (unsigned char *) NULL) ||"
    },
    {
        "line": 169,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0xa1);"
    },
    {
        "line": 170,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0x1f2);"
    },
    {
        "line": 171,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short)"
    },
    {
        "line": 173,
        "fullcodeline": "(void) WriteBlobString(image,\"8BIM\");"
    },
    {
        "line": 174,
        "fullcodeline": "(void) WriteBlob(image,GetStringInfoLength(profile),"
    },
    {
        "line": 180,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0xa1);"
    },
    {
        "line": 181,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0xe0);"
    },
    {
        "line": 182,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short)"
    },
    {
        "line": 184,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000UL);"
    },
    {
        "line": 185,
        "fullcodeline": "(void) WriteBlob(image,GetStringInfoLength(profile),"
    },
    {
        "line": 187,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0xa1);"
    },
    {
        "line": 188,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0xe0);"
    },
    {
        "line": 189,
        "fullcodeline": "(void) WriteBlobMSBShort(image,4);"
    },
    {
        "line": 190,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000002UL);"
    },
    {
        "line": 216,
        "fullcodeline": "if (jpeg_image == (Image *) NULL)"
    },
    {
        "line": 222,
        "fullcodeline": "(void) CopyMagickString(jpeg_info->magick,\"JPEG\",MagickPathExtent);"
    },
    {
        "line": 226,
        "fullcodeline": "jpeg_info=DestroyImageInfo(jpeg_info);"
    },
    {
        "line": 227,
        "fullcodeline": "if (blob == (unsigned char *) NULL)"
    },
    {
        "line": 229,
        "fullcodeline": "jpeg_image=DestroyImage(jpeg_image);"
    },
    {
        "line": 230,
        "fullcodeline": "(void) WriteBlobMSBShort(image,PictJPEGOp);"
    },
    {
        "line": 231,
        "fullcodeline": "(void) WriteBlobMSBLong(image,(unsigned int) length+154);"
    },
    {
        "line": 232,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0x0000);"
    },
    {
        "line": 233,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00010000UL);"
    },
    {
        "line": 234,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000UL);"
    },
    {
        "line": 235,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000UL);"
    },
    {
        "line": 236,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000UL);"
    },
    {
        "line": 237,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00010000UL);"
    },
    {
        "line": 238,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000UL);"
    },
    {
        "line": 239,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000UL);"
    },
    {
        "line": 240,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000UL);"
    },
    {
        "line": 241,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x40000000UL);"
    },
    {
        "line": 242,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000UL);"
    },
    {
        "line": 243,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000UL);"
    },
    {
        "line": 244,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000UL);"
    },
    {
        "line": 245,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00400000UL);"
    },
    {
        "line": 246,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0x0000);"
    },
    {
        "line": 247,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) image->rows);"
    },
    {
        "line": 248,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) image->columns);"
    },
    {
        "line": 249,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0x0000);"
    },
    {
        "line": 250,
        "fullcodeline": "(void) WriteBlobMSBShort(image,768);"
    },
    {
        "line": 251,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0x0000);"
    },
    {
        "line": 252,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000UL);"
    },
    {
        "line": 253,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00566A70UL);"
    },
    {
        "line": 254,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x65670000UL);"
    },
    {
        "line": 255,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000UL);"
    },
    {
        "line": 256,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000001UL);"
    },
    {
        "line": 257,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00016170UL);"
    },
    {
        "line": 258,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x706C0000UL);"
    },
    {
        "line": 259,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000UL);"
    },
    {
        "line": 260,
        "fullcodeline": "(void) WriteBlobMSBShort(image,768);"
    },
    {
        "line": 261,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) image->columns);"
    },
    {
        "line": 262,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) image->rows);"
    },
    {
        "line": 263,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) x_resolution);"
    },
    {
        "line": 264,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0x0000);"
    },
    {
        "line": 265,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) y_resolution);"
    },
    {
        "line": 266,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000UL);"
    },
    {
        "line": 267,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x87AC0001UL);"
    },
    {
        "line": 268,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x0B466F74UL);"
    },
    {
        "line": 269,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x6F202D20UL);"
    },
    {
        "line": 270,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x4A504547UL);"
    },
    {
        "line": 271,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000UL);"
    },
    {
        "line": 272,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000UL);"
    },
    {
        "line": 273,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000UL);"
    },
    {
        "line": 274,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000UL);"
    },
    {
        "line": 275,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000UL);"
    },
    {
        "line": 276,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x0018FFFFUL);"
    },
    {
        "line": 277,
        "fullcodeline": "(void) WriteBlob(image,length,blob);"
    },
    {
        "line": 286,
        "fullcodeline": "(void) WriteBlobMSBShort(image,PictPICTOp);"
    },
    {
        "line": 322,
        "fullcodeline": "(void) WriteBlobMSBLong(image,0x00000000L);  /* color seed */"
    },
    {
        "line": 323,
        "fullcodeline": "(void) WriteBlobMSBShort(image,0L);  /* color flags */"
    },
    {
        "line": 324,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) (image->colors-1));"
    },
    {
        "line": 325,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 353,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 429,
        "fullcodeline": "(void) WriteBlobByte(image,'\\0');"
    },
    {
        "line": 175,
        "fullcodeline": "GetStringInfoDatum(profile));"
    },
    {
        "line": 186,
        "fullcodeline": "GetStringInfoDatum(profile));"
    },
    {
        "line": 278,
        "fullcodeline": "if ((length & 0x01) != 0)"
    },
    {
        "line": 280,
        "fullcodeline": "blob=(unsigned char *) RelinquishMagickMemory(blob);"
    },
    {
        "line": 289,
        "fullcodeline": "(void) WriteBlobMSBShort(image,PictPixmapOp);"
    },
    {
        "line": 290,
        "fullcodeline": "(void) WriteBlobMSBLong(image,(size_t) base_address);"
    },
    {
        "line": 355,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 363,
        "fullcodeline": "count+=EncodeImage(image,scanline,(size_t) (row_bytes & 0x7FFF),"
    },
    {
        "line": 218,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 279,
        "fullcodeline": "(void) WriteBlobByte(image,'\\0');"
    },
    {
        "line": 327,
        "fullcodeline": "(void) WriteBlobMSBShort(image,(unsigned short) i);"
    },
    {
        "line": 328,
        "fullcodeline": "(void) WriteBlobMSBShort(image,ScaleQuantumToShort("
    },
    {
        "line": 330,
        "fullcodeline": "(void) WriteBlobMSBShort(image,ScaleQuantumToShort("
    },
    {
        "line": 332,
        "fullcodeline": "(void) WriteBlobMSBShort(image,ScaleQuantumToShort("
    },
    {
        "line": 356,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 358,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 365,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 172,
        "fullcodeline": "(GetStringInfoLength(profile)+4));"
    },
    {
        "line": 183,
        "fullcodeline": "(GetStringInfoLength(profile)+4));"
    },
    {
        "line": 360,
        "fullcodeline": "scanline[x]=(unsigned char) GetPixelIndex(image,p);"
    },
    {
        "line": 361,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 367,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 376,
        "fullcodeline": "(void) ResetMagickMemory(scanline,0,row_bytes);"
    },
    {
        "line": 377,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 378,
        "fullcodeline": "count+=EncodeImage(image,scanline,(size_t) (row_bytes & 0x7FFF),"
    },
    {
        "line": 392,
        "fullcodeline": "opacity=scanline+3*image->columns;"
    },
    {
        "line": 393,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 391,
        "fullcodeline": "blue=scanline+2*image->columns;"
    },
    {
        "line": 395,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 398,
        "fullcodeline": "red=scanline;"
    },
    {
        "line": 399,
        "fullcodeline": "green=scanline+image->columns;"
    },
    {
        "line": 400,
        "fullcodeline": "blue=scanline+2*image->columns;"
    },
    {
        "line": 417,
        "fullcodeline": "count+=EncodeImage(image,scanline,bytes_per_line & 0x7FFF,"
    },
    {
        "line": 396,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 401,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 408,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 419,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 403,
        "fullcodeline": "opacity=scanline;"
    },
    {
        "line": 404,
        "fullcodeline": "red=scanline+image->columns;"
    },
    {
        "line": 405,
        "fullcodeline": "green=scanline+2*image->columns;"
    },
    {
        "line": 406,
        "fullcodeline": "blue=scanline+3*image->columns;"
    },
    {
        "line": 415,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 421,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 410,
        "fullcodeline": "*red++=ScaleQuantumToChar(GetPixelRed(image,p));"
    },
    {
        "line": 411,
        "fullcodeline": "*green++=ScaleQuantumToChar(GetPixelGreen(image,p));"
    },
    {
        "line": 412,
        "fullcodeline": "*blue++=ScaleQuantumToChar(GetPixelBlue(image,p));"
    },
    {
        "line": 413,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 414,
        "fullcodeline": "*opacity++=ScaleQuantumToChar((Quantum) (GetPixelAlpha(image,p)));"
    }
]