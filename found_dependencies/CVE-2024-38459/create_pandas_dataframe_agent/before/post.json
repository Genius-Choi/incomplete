[
    {
        "line": 103,
        "fullcodeline": "df_locals = {}"
    },
    {
        "line": 109,
        "fullcodeline": "tools = [PythonAstREPLTool(locals=df_locals)] + list(extra_tools)"
    },
    {
        "line": 88,
        "fullcodeline": "if is_interactive_env():"
    },
    {
        "line": 91,
        "fullcodeline": "for _df in df if isinstance(df, list) else [df]:"
    },
    {
        "line": 104,
        "fullcodeline": "if isinstance(df, list):"
    },
    {
        "line": 111,
        "fullcodeline": "if agent_type == AgentType.ZERO_SHOT_REACT_DESCRIPTION:"
    },
    {
        "line": 165,
        "fullcodeline": "return AgentExecutor("
    },
    {
        "line": 89,
        "fullcodeline": "pd.set_option(\"display.max_columns\", None)"
    },
    {
        "line": 96,
        "fullcodeline": "kwargs = kwargs or {}"
    },
    {
        "line": 97,
        "fullcodeline": "kwargs[\"input_variables\"] = input_variables"
    },
    {
        "line": 99,
        "fullcodeline": "warnings.warn("
    },
    {
        "line": 108,
        "fullcodeline": "df_locals[\"df\"] = df"
    },
    {
        "line": 116,
        "fullcodeline": "prompt = _get_prompt("
    },
    {
        "line": 123,
        "fullcodeline": "agent: Union[BaseSingleActionAgent, BaseMultiActionAgent] = RunnableAgent("
    },
    {
        "line": 75,
        "fullcodeline": "if engine == \"modin\":"
    },
    {
        "line": 100,
        "fullcodeline": "f\"Received additional kwargs {kwargs} which are no longer supported.\""
    },
    {
        "line": 105,
        "fullcodeline": "for i, dataframe in enumerate(df):"
    },
    {
        "line": 112,
        "fullcodeline": "if include_df_in_prompt is not None and suffix is not None:"
    },
    {
        "line": 128,
        "fullcodeline": "elif agent_type in (AgentType.OPENAI_FUNCTIONS, \"openai-tools\", \"tool-calling\"):"
    },
    {
        "line": 76,
        "fullcodeline": "import modin.pandas as pd"
    },
    {
        "line": 84,
        "fullcodeline": "raise ImportError("
    },
    {
        "line": 92,
        "fullcodeline": "if not isinstance(_df, pd.DataFrame):"
    },
    {
        "line": 113,
        "fullcodeline": "raise ValueError("
    },
    {
        "line": 124,
        "fullcodeline": "runnable=create_react_agent(llm, tools, prompt),  # type: ignore"
    },
    {
        "line": 125,
        "fullcodeline": "input_keys_arg=[\"input\"],"
    },
    {
        "line": 126,
        "fullcodeline": "return_keys_arg=[\"output\"],"
    },
    {
        "line": 129,
        "fullcodeline": "prompt = _get_functions_prompt("
    },
    {
        "line": 160,
        "fullcodeline": "raise ValueError("
    },
    {
        "line": 77,
        "fullcodeline": "elif engine == \"pandas\":"
    },
    {
        "line": 93,
        "fullcodeline": "raise ValueError(f\"Expected pandas DataFrame, got {type(_df)}\")"
    },
    {
        "line": 106,
        "fullcodeline": "df_locals[f\"df{i + 1}\"] = dataframe"
    },
    {
        "line": 136,
        "fullcodeline": "if agent_type == AgentType.OPENAI_FUNCTIONS:"
    },
    {
        "line": 78,
        "fullcodeline": "import pandas as pd"
    },
    {
        "line": 80,
        "fullcodeline": "raise ValueError("
    },
    {
        "line": 85,
        "fullcodeline": "f\"`{engine}` package not found, please install with `pip install {engine}`\""
    },
    {
        "line": 137,
        "fullcodeline": "runnable = create_openai_functions_agent("
    },
    {
        "line": 140,
        "fullcodeline": "agent = RunnableAgent("
    },
    {
        "line": 154,
        "fullcodeline": "agent = RunnableMultiActionAgent("
    },
    {
        "line": 161,
        "fullcodeline": "f\"Agent type {agent_type} not supported at the moment. Must be one of \""
    },
    {
        "line": 146,
        "fullcodeline": "if agent_type == \"openai-tools\":"
    },
    {
        "line": 81,
        "fullcodeline": "f\"Unsupported engine {engine}. It must be one of 'modin' or 'pandas'.\""
    },
    {
        "line": 138,
        "fullcodeline": "cast(BaseLanguageModel, llm), tools, prompt"
    },
    {
        "line": 142,
        "fullcodeline": "input_keys_arg=[\"input\"],"
    },
    {
        "line": 143,
        "fullcodeline": "return_keys_arg=[\"output\"],"
    },
    {
        "line": 147,
        "fullcodeline": "runnable = create_openai_tools_agent("
    },
    {
        "line": 151,
        "fullcodeline": "runnable = create_tool_calling_agent("
    },
    {
        "line": 156,
        "fullcodeline": "input_keys_arg=[\"input\"],"
    },
    {
        "line": 157,
        "fullcodeline": "return_keys_arg=[\"output\"],"
    },
    {
        "line": 148,
        "fullcodeline": "cast(BaseLanguageModel, llm), tools, prompt"
    },
    {
        "line": 152,
        "fullcodeline": "cast(BaseLanguageModel, llm), tools, prompt"
    }
]