[
    {
        "line": 3,
        "fullcodeline": "program_retval = exitcodes.GOOD"
    },
    {
        "line": 4,
        "fullcodeline": "client_audit = client_host is not None  # If set, this is a client audit."
    },
    {
        "line": 5,
        "fullcodeline": "sshv = 1 if pkm is not None else 2"
    },
    {
        "line": 6,
        "fullcodeline": "algs = Algorithms(pkm, kex)"
    },
    {
        "line": 9,
        "fullcodeline": "algorithm_recommendation_suppress_list = post_process_findings(banner, algs)"
    },
    {
        "line": 58,
        "fullcodeline": "maxlen = algs.maxlen + 1"
    },
    {
        "line": 59,
        "fullcodeline": "cves = output_security(out, banner, client_audit, maxlen, aconf.json)"
    },
    {
        "line": 61,
        "fullcodeline": "unknown_algorithms: List[str] = []"
    },
    {
        "line": 87,
        "fullcodeline": "output_fingerprints(out, algs, aconf.json)"
    },
    {
        "line": 88,
        "fullcodeline": "perfect_config = output_recommendations(out, algs, algorithm_recommendation_suppress_list, software, aconf.json, maxlen)"
    },
    {
        "line": 89,
        "fullcodeline": "output_info(out, software, client_audit, not perfect_config, aconf.json)"
    },
    {
        "line": 11,
        "fullcodeline": "with out:"
    },
    {
        "line": 54,
        "fullcodeline": "if not out.is_section_empty() and not aconf.json:  # Print output when it exists and JSON output isn't requested."
    },
    {
        "line": 64,
        "fullcodeline": "if pkm is not None:"
    },
    {
        "line": 76,
        "fullcodeline": "if kex is not None:"
    },
    {
        "line": 55,
        "fullcodeline": "out.head('# general')"
    },
    {
        "line": 56,
        "fullcodeline": "out.flush_section()"
    },
    {
        "line": 57,
        "fullcodeline": "out.sep()"
    },
    {
        "line": 65,
        "fullcodeline": "adb = SSH1_KexDB.get_db()"
    },
    {
        "line": 66,
        "fullcodeline": "ciphers = pkm.supported_ciphers"
    },
    {
        "line": 67,
        "fullcodeline": "auths = pkm.supported_authentications"
    },
    {
        "line": 69,
        "fullcodeline": "program_retval = output_algorithms(out, title, adb, atype, ['ssh-rsa1'], unknown_algorithms, aconf.json, program_retval, maxlen)"
    },
    {
        "line": 71,
        "fullcodeline": "program_retval = output_algorithms(out, title, adb, atype, ciphers, unknown_algorithms, aconf.json, program_retval, maxlen)"
    },
    {
        "line": 73,
        "fullcodeline": "program_retval = output_algorithms(out, title, adb, atype, auths, unknown_algorithms, aconf.json, program_retval, maxlen)"
    },
    {
        "line": 77,
        "fullcodeline": "adb = SSH2_KexDB.get_db()"
    },
    {
        "line": 79,
        "fullcodeline": "program_retval = output_algorithms(out, title, adb, atype, kex.kex_algorithms, unknown_algorithms, aconf.json, program_retval, maxlen, dh_modulus_sizes=kex.dh_modulus_sizes())"
    },
    {
        "line": 81,
        "fullcodeline": "program_retval = output_algorithms(out, title, adb, atype, kex.key_algorithms, unknown_algorithms, aconf.json, program_retval, maxlen, host_keys=kex.host_keys())"
    },
    {
        "line": 83,
        "fullcodeline": "program_retval = output_algorithms(out, title, adb, atype, kex.server.encryption, unknown_algorithms, aconf.json, program_retval, maxlen)"
    },
    {
        "line": 85,
        "fullcodeline": "program_retval = output_algorithms(out, title, adb, atype, kex.server.mac, unknown_algorithms, aconf.json, program_retval, maxlen)"
    },
    {
        "line": 92,
        "fullcodeline": "out.reset()"
    },
    {
        "line": 94,
        "fullcodeline": "out.info(json.dumps(build_struct(aconf.host + \":\" + str(aconf.port), banner, cves, kex=kex, client_host=client_host, software=software, algorithms=algs, algorithm_recommendation_suppress_list=algorithm_recommendation_suppress_list), indent=4 if aconf.json_print_indent else None, sort_keys=True))"
    },
    {
        "line": 46,
        "fullcodeline": "output_compatibility(out, algs, client_audit)"
    },
    {
        "line": 68,
        "fullcodeline": "title, atype = 'SSH1 host-key algorithms', 'key'"
    },
    {
        "line": 70,
        "fullcodeline": "title, atype = 'SSH1 encryption algorithms (ciphers)', 'enc'"
    },
    {
        "line": 72,
        "fullcodeline": "title, atype = 'SSH1 authentication types', 'aut'"
    },
    {
        "line": 78,
        "fullcodeline": "title, atype = 'key exchange algorithms', 'kex'"
    },
    {
        "line": 80,
        "fullcodeline": "title, atype = 'host-key algorithms', 'key'"
    },
    {
        "line": 82,
        "fullcodeline": "title, atype = 'encryption algorithms (ciphers)', 'enc'"
    },
    {
        "line": 84,
        "fullcodeline": "title, atype = 'message authentication code algorithms', 'mac'"
    },
    {
        "line": 95,
        "fullcodeline": "elif len(unknown_algorithms) > 0:  # If we encountered any unknown algorithms, ask the user to report them."
    },
    {
        "line": 27,
        "fullcodeline": "if len(header) > 0:"
    },
    {
        "line": 29,
        "fullcodeline": "if banner is not None:"
    },
    {
        "line": 47,
        "fullcodeline": "if kex is not None:"
    },
    {
        "line": 96,
        "fullcodeline": "out.warn(\"\\n\\n!!! WARNING: unknown algorithm(s) found!: %s.  Please email the full output above to the maintainer (jtesta@positronsecurity.com), or create a Github issue at <https://github.com/jtesta/ssh-audit/issues>.\\n\" % ','.join(unknown_algorithms))"
    },
    {
        "line": 13,
        "fullcodeline": "host = aconf.host"
    },
    {
        "line": 24,
        "fullcodeline": "out.good('(gen) target: {}'. format(host))"
    },
    {
        "line": 26,
        "fullcodeline": "out.good('(gen) client IP: {}'.format(client_host))"
    },
    {
        "line": 28,
        "fullcodeline": "out.info('(gen) header: ' + '\\n'.join(header))"
    },
    {
        "line": 30,
        "fullcodeline": "banner_line = '(gen) banner: {}'.format(banner)"
    },
    {
        "line": 41,
        "fullcodeline": "software = Software.parse(banner)"
    },
    {
        "line": 45,
        "fullcodeline": "software = None"
    },
    {
        "line": 48,
        "fullcodeline": "compressions = [x for x in kex.server.compression if x != 'none']"
    },
    {
        "line": 53,
        "fullcodeline": "out.good('(gen) compression: {}'.format(cmptxt))"
    },
    {
        "line": 16,
        "fullcodeline": "if aconf.port != 22:"
    },
    {
        "line": 31,
        "fullcodeline": "if sshv == 1 or banner.protocol[0] == 1:"
    },
    {
        "line": 37,
        "fullcodeline": "if not banner.valid_ascii:"
    },
    {
        "line": 42,
        "fullcodeline": "if software is not None:"
    },
    {
        "line": 49,
        "fullcodeline": "if len(compressions) > 0:"
    },
    {
        "line": 32,
        "fullcodeline": "out.fail(banner_line)"
    },
    {
        "line": 33,
        "fullcodeline": "out.fail('(gen) protocol SSH1 enabled')"
    },
    {
        "line": 35,
        "fullcodeline": "out.good(banner_line)"
    },
    {
        "line": 39,
        "fullcodeline": "out.warn('(gen) banner contains non-printable ASCII')"
    },
    {
        "line": 43,
        "fullcodeline": "out.good('(gen) software: {}'.format(software))"
    },
    {
        "line": 50,
        "fullcodeline": "cmptxt = 'enabled ({})'.format(', '.join(compressions))"
    },
    {
        "line": 52,
        "fullcodeline": "cmptxt = 'disabled'"
    },
    {
        "line": 19,
        "fullcodeline": "if Utils.is_ipv6_address(aconf.host):"
    },
    {
        "line": 20,
        "fullcodeline": "host = '[%s]:%d' % (aconf.host, aconf.port)"
    },
    {
        "line": 22,
        "fullcodeline": "host = '%s:%d' % (aconf.host, aconf.port)"
    }
]