[
    {
        "line": 9,
        "fullcodeline": "PerfSection perf(\"Bytecode Generation\");"
    },
    {
        "line": 10,
        "fullcodeline": "lowerIR(M, options);"
    },
    {
        "line": 15,
        "fullcodeline": "BytecodeModuleGenerator BMGen(options);"
    },
    {
        "line": 22,
        "fullcodeline": "llvh::DenseSet<Function *> functionsToGenerate = segment"
    },
    {
        "line": 93,
        "fullcodeline": "assert(BMGen.getEntryPointIndex() != -1 && \"Entry point not added\");"
    },
    {
        "line": 96,
        "fullcodeline": "FunctionScopeAnalysis scopeAnalysis{lexicalTopLevel};"
    },
    {
        "line": 12,
        "fullcodeline": "if (options.format == DumpLIR)"
    },
    {
        "line": 39,
        "fullcodeline": "auto strings = baseBCProvider"
    },
    {
        "line": 43,
        "fullcodeline": "auto addStringOrIdent = [&strings](llvh::StringRef str, bool isIdentifier) {"
    },
    {
        "line": 47,
        "fullcodeline": "auto addString = [&strings](llvh::StringRef str) {"
    },
    {
        "line": 51,
        "fullcodeline": "traverseLiteralStrings(M, shouldGenerate, addStringOrIdent);"
    },
    {
        "line": 56,
        "fullcodeline": "traverseFunctions(M, shouldGenerate, addString, options.stripFunctionNames);"
    },
    {
        "line": 62,
        "fullcodeline": "BMGen.initializeStringTable(UniquingStringLiteralAccumulator::toTable("
    },
    {
        "line": 160,
        "fullcodeline": "return BMGen.generate();"
    },
    {
        "line": 13,
        "fullcodeline": "M->dump();"
    },
    {
        "line": 18,
        "fullcodeline": "BMGen.setSegmentID(*segment);"
    },
    {
        "line": 23,
        "fullcodeline": "? M->getFunctionsInSegment(*segment)"
    },
    {
        "line": 24,
        "fullcodeline": ": llvh::DenseSet<Function *>{};"
    },
    {
        "line": 29,
        "fullcodeline": "shouldGenerate = [entryPoint, &functionsToGenerate](const Function *f) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (!M->getCJSModulesResolved()) {"
    },
    {
        "line": 72,
        "fullcodeline": "unsigned index = BMGen.addFunction(&F);"
    },
    {
        "line": 77,
        "fullcodeline": "auto *cjsModule = M->findCJSModule(&F);"
    },
    {
        "line": 107,
        "fullcodeline": "std::unique_ptr<BytecodeFunctionGenerator> funcGen;"
    },
    {
        "line": 157,
        "fullcodeline": "BMGen.setFunctionGenerator(&F, std::move(funcGen));"
    },
    {
        "line": 33,
        "fullcodeline": "shouldGenerate = [](const Function *) { return true; };"
    },
    {
        "line": 40,
        "fullcodeline": "? stringAccumulatorFromBCProvider(*baseBCProvider)"
    },
    {
        "line": 41,
        "fullcodeline": ": UniquingStringLiteralAccumulator{};"
    },
    {
        "line": 54,
        "fullcodeline": "addString(kStrippedFunctionName);"
    },
    {
        "line": 59,
        "fullcodeline": "traverseCJSModuleNames(M, shouldGenerate, addString);"
    },
    {
        "line": 63,
        "fullcodeline": "std::move(strings), options.optimizationEnabled));"
    },
    {
        "line": 73,
        "fullcodeline": "if (&F == entryPoint) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (!F.isGlobalScope()) {"
    },
    {
        "line": 103,
        "fullcodeline": "if (!shouldGenerate(&F)) {"
    },
    {
        "line": 109,
        "fullcodeline": "if (F.isLazy()) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (!shouldGenerate(&F)) {"
    },
    {
        "line": 74,
        "fullcodeline": "BMGen.setEntryPointIndex(index);"
    },
    {
        "line": 110,
        "fullcodeline": "funcGen = BytecodeFunctionGenerator::create(BMGen, 0);"
    },
    {
        "line": 79,
        "fullcodeline": "if (M->getCJSModulesResolved()) {"
    },
    {
        "line": 112,
        "fullcodeline": "HVMRegisterAllocator RA(&F);"
    },
    {
        "line": 117,
        "fullcodeline": "PostOrderAnalysis PO(&F);"
    },
    {
        "line": 120,
        "fullcodeline": "llvh::SmallVector<BasicBlock *, 16> order(PO.rbegin(), PO.rend());"
    },
    {
        "line": 121,
        "fullcodeline": "RA.allocate(order);"
    },
    {
        "line": 128,
        "fullcodeline": "PM.addPass(new LowerStoreInstrs(RA));"
    },
    {
        "line": 129,
        "fullcodeline": "PM.addPass(new LowerCalls(RA));"
    },
    {
        "line": 135,
        "fullcodeline": "PM.addPass(new SpillRegisters(RA));"
    },
    {
        "line": 141,
        "fullcodeline": "PM.run(&F);"
    },
    {
        "line": 149,
        "fullcodeline": "funcGen ="
    },
    {
        "line": 151,
        "fullcodeline": "HBCISel hbciSel(&F, funcGen.get(), RA, scopeAnalysis, options);"
    },
    {
        "line": 152,
        "fullcodeline": "hbciSel.populateDebugCache(debugCache);"
    },
    {
        "line": 153,
        "fullcodeline": "hbciSel.generate(sourceMapGen);"
    },
    {
        "line": 154,
        "fullcodeline": "debugCache = hbciSel.getDebugCache();"
    },
    {
        "line": 80,
        "fullcodeline": "BMGen.addCJSModuleStatic(cjsModule->id, index);"
    },
    {
        "line": 88,
        "fullcodeline": "if (auto source = F.getSourceRepresentationStr()) {"
    },
    {
        "line": 89,
        "fullcodeline": "BMGen.addFunctionSource(index, BMGen.getStringID(*source));"
    },
    {
        "line": 113,
        "fullcodeline": "if (!options.optimizationEnabled) {"
    },
    {
        "line": 123,
        "fullcodeline": "if (options.format == DumpRA) {"
    },
    {
        "line": 143,
        "fullcodeline": "if (options.format == DumpLRA)"
    },
    {
        "line": 146,
        "fullcodeline": "if (options.format == DumpPostRA)"
    },
    {
        "line": 150,
        "fullcodeline": "BytecodeFunctionGenerator::create(BMGen, RA.getMaxRegisterUsage());"
    },
    {
        "line": 82,
        "fullcodeline": "BMGen.addCJSModule(index, BMGen.getStringID(cjsModule->filename.str()));"
    },
    {
        "line": 114,
        "fullcodeline": "RA.setFastPassThreshold(kFastRegisterAllocationThreshold);"
    },
    {
        "line": 115,
        "fullcodeline": "RA.setMemoryLimit(kRegisterAllocationMemoryLimit);"
    },
    {
        "line": 124,
        "fullcodeline": "RA.dump();"
    },
    {
        "line": 131,
        "fullcodeline": "PM.addPass(new MovElimination(RA));"
    },
    {
        "line": 132,
        "fullcodeline": "PM.addPass(new RecreateCheapValues(RA));"
    },
    {
        "line": 133,
        "fullcodeline": "PM.addPass(new LoadConstantValueNumbering(RA));"
    },
    {
        "line": 139,
        "fullcodeline": "PM.addPass(new InsertProfilePoint());"
    },
    {
        "line": 144,
        "fullcodeline": "RA.dump();"
    },
    {
        "line": 147,
        "fullcodeline": "F.dump();"
    }
]