[
    {
        "line": 3,
        "fullcodeline": "assert(!breakpoint.isResolved() && \"breakpoint already resolved\");"
    },
    {
        "line": 5,
        "fullcodeline": "OptValue<hbc::DebugSearchResult> locationOpt{};"
    },
    {
        "line": 17,
        "fullcodeline": "GCScope gcScope{runtime_};"
    },
    {
        "line": 78,
        "fullcodeline": "it != runtime_.getRuntimeModules().rend();"
    },
    {
        "line": 79,
        "fullcodeline": "++it) {"
    },
    {
        "line": 19,
        "fullcodeline": "llvh::DenseSet<CodeBlock *> visited{};"
    },
    {
        "line": 20,
        "fullcodeline": "std::vector<CodeBlock *> toVisit{};"
    },
    {
        "line": 77,
        "fullcodeline": "for (auto it = runtime_.getRuntimeModules().rbegin();"
    },
    {
        "line": 81,
        "fullcodeline": "GCScope gcScope{runtime_};"
    },
    {
        "line": 92,
        "fullcodeline": "const auto *debugInfo = runtimeModule.getBytecode()->getDebugInfo();"
    },
    {
        "line": 93,
        "fullcodeline": "const auto &fileRegions = debugInfo->viewFiles();"
    },
    {
        "line": 98,
        "fullcodeline": "uint32_t resolvedFileId = kInvalidLocation;"
    },
    {
        "line": 99,
        "fullcodeline": "std::string resolvedFileName{};"
    },
    {
        "line": 140,
        "fullcodeline": "locationOpt = debugInfo->getAddressForLocation("
    },
    {
        "line": 21,
        "fullcodeline": "for (uint32_t i = 0, e = runtimeModule.getNumCodeBlocks(); i < e; ++i) {"
    },
    {
        "line": 27,
        "fullcodeline": "while (!toVisit.empty()) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (!runtimeModule.isInitialized()) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (!runtimeModule.getBytecode()->getDebugInfo()) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (fileRegions.empty()) {"
    },
    {
        "line": 101,
        "fullcodeline": "if (!breakpoint.requestedLocation.fileName.empty()) {"
    },
    {
        "line": 135,
        "fullcodeline": "if (resolvedFileId == kInvalidLocation) {"
    },
    {
        "line": 147,
        "fullcodeline": "if (locationOpt.hasValue()) {"
    },
    {
        "line": 22,
        "fullcodeline": "GCScopeMarkerRAII marker{gcScope};"
    },
    {
        "line": 24,
        "fullcodeline": "toVisit.push_back(runtimeModule.getCodeBlockMayAllocate(i));"
    },
    {
        "line": 28,
        "fullcodeline": "GCScopeMarkerRAII marker{gcScope};"
    },
    {
        "line": 29,
        "fullcodeline": "CodeBlock *codeBlock = toVisit.back();"
    },
    {
        "line": 30,
        "fullcodeline": "toVisit.pop_back();"
    },
    {
        "line": 43,
        "fullcodeline": "visited.insert(codeBlock);"
    },
    {
        "line": 44,
        "fullcodeline": "auto start = codeBlock->getLazyFunctionStartLoc();"
    },
    {
        "line": 45,
        "fullcodeline": "auto end = codeBlock->getLazyFunctionEndLoc();"
    },
    {
        "line": 47,
        "fullcodeline": "const auto &request = breakpoint.requestedLocation;"
    },
    {
        "line": 143,
        "fullcodeline": "breakpoint.requestedLocation.column == kInvalidLocation"
    },
    {
        "line": 148,
        "fullcodeline": "breakpoint.codeBlock ="
    },
    {
        "line": 150,
        "fullcodeline": "breakpoint.offset = locationOpt->bytecodeOffset;"
    },
    {
        "line": 153,
        "fullcodeline": "resolvedLocation.line = locationOpt->line;"
    },
    {
        "line": 154,
        "fullcodeline": "resolvedLocation.column = locationOpt->column;"
    },
    {
        "line": 155,
        "fullcodeline": "resolvedLocation.fileId = resolveScriptId(&runtimeModule, resolvedFileId);"
    },
    {
        "line": 156,
        "fullcodeline": "resolvedLocation.fileName = std::move(resolvedFileName);"
    },
    {
        "line": 157,
        "fullcodeline": "breakpoint.resolvedLocation = resolvedLocation;"
    },
    {
        "line": 32,
        "fullcodeline": "if (!codeBlock || !codeBlock->isLazy()) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (visited.count(codeBlock) > 0) {"
    },
    {
        "line": 48,
        "fullcodeline": "if ((start.line < request.line && request.line < end.line) ||"
    },
    {
        "line": 145,
        "fullcodeline": ": OptValue<uint32_t>{breakpoint.requestedLocation.column});"
    },
    {
        "line": 149,
        "fullcodeline": "runtimeModule.getCodeBlockMayAllocate(locationOpt->functionIndex);"
    },
    {
        "line": 49,
        "fullcodeline": "((start.line == request.line || request.line == end.line) &&"
    },
    {
        "line": 53,
        "fullcodeline": "codeBlock->lazyCompile(runtime_);"
    },
    {
        "line": 58,
        "fullcodeline": "toVisit.clear();"
    },
    {
        "line": 103,
        "fullcodeline": "std::string storage ="
    },
    {
        "line": 105,
        "fullcodeline": "llvh::StringRef storageRef{storage};"
    },
    {
        "line": 112,
        "fullcodeline": "} else if (breakpoint.requestedLocation.fileId != kInvalidLocation) {"
    },
    {
        "line": 50,
        "fullcodeline": "(start.col <= request.column && request.column <= end.col))) {"
    },
    {
        "line": 62,
        "fullcodeline": "for (uint32_t i = 0, e = runtimeModule.getNumCodeBlocks(); i < e; ++i) {"
    },
    {
        "line": 104,
        "fullcodeline": "getFileNameAsUTF8(runtime_, &runtimeModule, region.filenameId);"
    },
    {
        "line": 106,
        "fullcodeline": "if (storageRef.consume_back(breakpoint.requestedLocation.fileName)) {"
    },
    {
        "line": 63,
        "fullcodeline": "GCScopeMarkerRAII marker2{gcScope};"
    },
    {
        "line": 65,
        "fullcodeline": "toVisit.push_back(runtimeModule.getCodeBlockMayAllocate(i));"
    },
    {
        "line": 107,
        "fullcodeline": "resolvedFileId = region.filenameId;"
    },
    {
        "line": 108,
        "fullcodeline": "resolvedFileName = std::move(storage);"
    },
    {
        "line": 131,
        "fullcodeline": "resolvedFileName ="
    },
    {
        "line": 118,
        "fullcodeline": "assert("
    },
    {
        "line": 132,
        "fullcodeline": "getFileNameAsUTF8(runtime_, &runtimeModule, resolvedFileId);"
    },
    {
        "line": 119,
        "fullcodeline": "region.filenameId == 0 && \"Unexpected multiple filenames per RM\");"
    },
    {
        "line": 120,
        "fullcodeline": "if (resolveScriptId(&runtimeModule, region.filenameId) =="
    },
    {
        "line": 130,
        "fullcodeline": "resolvedFileId = fileRegions.front().filenameId;"
    },
    {
        "line": 122,
        "fullcodeline": "resolvedFileId = region.filenameId;"
    },
    {
        "line": 123,
        "fullcodeline": "resolvedFileName ="
    },
    {
        "line": 124,
        "fullcodeline": "getFileNameAsUTF8(runtime_, &runtimeModule, resolvedFileId);"
    }
]