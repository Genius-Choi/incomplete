[
    {
        "line": 2,
        "fullcodeline": "assert(isLazy() && \"Laziness has not been checked\");"
    },
    {
        "line": 3,
        "fullcodeline": "PerfSection perf(\"Lazy function compilation\");"
    },
    {
        "line": 4,
        "fullcodeline": "auto *provider = (hbc::BCProviderLazy *)runtimeModule_->getBytecode();"
    },
    {
        "line": 5,
        "fullcodeline": "auto *func = provider->getBytecodeFunction();"
    },
    {
        "line": 6,
        "fullcodeline": "auto *lazyData = func->getLazyCompilationData();"
    },
    {
        "line": 7,
        "fullcodeline": "SourceErrorManager &manager = lazyData->context->getSourceErrorManager();"
    },
    {
        "line": 8,
        "fullcodeline": "SimpleDiagHandlerRAII outputManager{manager};"
    },
    {
        "line": 9,
        "fullcodeline": "auto bcModule = compileLazyFunction(lazyData);"
    },
    {
        "line": 19,
        "fullcodeline": "runtimeModule_->initializeLazyMayAllocate("
    },
    {
        "line": 23,
        "fullcodeline": "functionID_ = runtimeModule_->getBytecode()->getGlobalFunctionIndex();"
    },
    {
        "line": 24,
        "fullcodeline": "functionHeader_ ="
    },
    {
        "line": 26,
        "fullcodeline": "bytecode_ = runtimeModule_->getBytecode()->getBytecode(functionID_);"
    },
    {
        "line": 11,
        "fullcodeline": "if (manager.getErrorCount()) {"
    },
    {
        "line": 17,
        "fullcodeline": "assert(bcModule && \"No errors, yet no bcModule\");"
    },
    {
        "line": 20,
        "fullcodeline": "hbc::BCProviderFromSrc::createBCProviderFromSrc(std::move(bcModule)));"
    },
    {
        "line": 25,
        "fullcodeline": "runtimeModule_->getBytecode()->getFunctionHeader(functionID_);"
    },
    {
        "line": 13,
        "fullcodeline": "return runtime.raiseSyntaxError("
    },
    {
        "line": 14,
        "fullcodeline": "llvh::StringRef{outputManager.getErrorString()});"
    }
]