[
    {
        "line": 4,
        "fullcodeline": "if delta.specific.delta == 'cat':"
    },
    {
        "line": 5,
        "fullcodeline": "datalines = data.split('\\n')"
    },
    {
        "line": 6,
        "fullcodeline": "for line in delta.data.split('\\n'):"
    },
    {
        "line": 15,
        "fullcodeline": "elif delta.specific.delta == 'diff':"
    },
    {
        "line": 14,
        "fullcodeline": "return \"\\n\".join(datalines)"
    },
    {
        "line": 17,
        "fullcodeline": "basefile = open(basename, 'w')"
    },
    {
        "line": 18,
        "fullcodeline": "basefile.write(data)"
    },
    {
        "line": 19,
        "fullcodeline": "basefile.close()"
    },
    {
        "line": 20,
        "fullcodeline": "os.close(basehandle)"
    },
    {
        "line": 22,
        "fullcodeline": "cmd = [\"patch\", \"-u\", \"-f\", basefile.name]"
    },
    {
        "line": 23,
        "fullcodeline": "patch = Popen(cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE)"
    },
    {
        "line": 25,
        "fullcodeline": "ret = patch.wait()"
    },
    {
        "line": 26,
        "fullcodeline": "output = open(basefile.name, 'r').read()"
    },
    {
        "line": 27,
        "fullcodeline": "os.unlink(basefile.name)"
    },
    {
        "line": 16,
        "fullcodeline": "basehandle, basename = tempfile.mkstemp()"
    },
    {
        "line": 28,
        "fullcodeline": "if ret >> 8 != 0:"
    },
    {
        "line": 7,
        "fullcodeline": "if not line:"
    },
    {
        "line": 9,
        "fullcodeline": "if line[0] == '+':"
    },
    {
        "line": 24,
        "fullcodeline": "stderr = patch.communicate(input=delta.data)[1]"
    },
    {
        "line": 29,
        "fullcodeline": "logger.error(\"Error applying diff %s: %s\" % (delta.name, stderr))"
    },
    {
        "line": 30,
        "fullcodeline": "raise Bcfg2.Server.Plugin.PluginExecutionError('delta', delta)"
    },
    {
        "line": 10,
        "fullcodeline": "datalines.append(line[1:])"
    },
    {
        "line": 11,
        "fullcodeline": "elif line[0] == '-':"
    },
    {
        "line": 12,
        "fullcodeline": "if line[1:] in datalines:"
    },
    {
        "line": 13,
        "fullcodeline": "datalines.remove(line[1:])"
    }
]