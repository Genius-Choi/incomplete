[
    {
        "line": 5,
        "fullcodeline": "cpe_regex = cpe"
    },
    {
        "line": 6,
        "fullcodeline": "final_cves = []"
    },
    {
        "line": 7,
        "fullcodeline": "cpe_searchField = ("
    },
    {
        "line": 154,
        "fullcodeline": "final_cves = sanitize(final_cves)"
    },
    {
        "line": 2,
        "fullcodeline": "if not cpe:"
    },
    {
        "line": 13,
        "fullcodeline": "target_version = cpe.split(\":\")[-1]"
    },
    {
        "line": 14,
        "fullcodeline": "product = cpe.rsplit(\":\", 1)[0]"
    },
    {
        "line": 35,
        "fullcodeline": "cpe_regex = product"
    },
    {
        "line": 67,
        "fullcodeline": "i = 0"
    },
    {
        "line": 155,
        "fullcodeline": "return {\"results\": final_cves, \"total\": len(final_cves)}"
    },
    {
        "line": 3,
        "fullcodeline": "return []"
    },
    {
        "line": 23,
        "fullcodeline": "for i in target_version.split(\".\"):"
    },
    {
        "line": 37,
        "fullcodeline": "if limit != 0:"
    },
    {
        "line": 69,
        "fullcodeline": "for cve in cves:"
    },
    {
        "line": 16,
        "fullcodeline": "if None is target_version or [] is target_version:"
    },
    {
        "line": 22,
        "fullcodeline": "sys.exit(-1)"
    },
    {
        "line": 98,
        "fullcodeline": "cpe_regex_string = r\"^{}\".format(re.escape(product))"
    },
    {
        "line": 117,
        "fullcodeline": "final_cves = cves"
    },
    {
        "line": 152,
        "fullcodeline": "final_cves = cves"
    },
    {
        "line": 70,
        "fullcodeline": "vuln_confs = cve[\"vulnerable_configuration\"]"
    },
    {
        "line": 71,
        "fullcodeline": "vuln_confs += cve[\"vulnerable_configuration_cpe_2_2\"]"
    },
    {
        "line": 72,
        "fullcodeline": "vuln_confs += cve[\"vulnerable_product\"]"
    },
    {
        "line": 96,
        "fullcodeline": "vendor, product = cpe"
    },
    {
        "line": 100,
        "fullcodeline": "if limit != 0:"
    },
    {
        "line": 122,
        "fullcodeline": "if cpe_regex.startswith(\"cpe\"):"
    },
    {
        "line": 135,
        "fullcodeline": "if limit != 0:"
    },
    {
        "line": 18,
        "fullcodeline": "\"Error, target version not found at the end of product description '{}'\".format("
    },
    {
        "line": 38,
        "fullcodeline": "if mongo_version > [4, 4]:"
    },
    {
        "line": 39,
        "fullcodeline": "cves = ("
    },
    {
        "line": 48,
        "fullcodeline": "cves = ("
    },
    {
        "line": 56,
        "fullcodeline": "if mongo_version > [4, 4]:"
    },
    {
        "line": 57,
        "fullcodeline": "cves = ("
    },
    {
        "line": 63,
        "fullcodeline": "cves = colCVE.find({cpe_searchField: {\"$regex\": cpe_regex}}).sort("
    },
    {
        "line": 74,
        "fullcodeline": "for vc in vuln_confs:"
    },
    {
        "line": 115,
        "fullcodeline": "cves = colCVE.find({\"vendors\": vendor, \"products\": {\"$regex\": cpe_regex_string}})"
    },
    {
        "line": 125,
        "fullcodeline": "remove_trailing_regex_stars = r\"(?:\\:|\\:\\:|\\:\\*)+$\""
    },
    {
        "line": 127,
        "fullcodeline": "cpe_regex = re.escape(re.sub(remove_trailing_regex_stars, \"\", cpe_regex))"
    },
    {
        "line": 129,
        "fullcodeline": "cpe_regex_string = r\"^{}:\".format(cpe_regex)"
    },
    {
        "line": 132,
        "fullcodeline": "cpe_regex_string = \"{}\".format(re.escape(cpe_regex))"
    },
    {
        "line": 150,
        "fullcodeline": "cves = colCVE.find({\"{}\".format(cpe_searchField): {\"$regex\": cpe_regex_string}})"
    },
    {
        "line": 40,
        "fullcodeline": "colCVE.find({cpe_searchField: {\"$regex\": cpe_regex}})"
    },
    {
        "line": 49,
        "fullcodeline": "colCVE.find({cpe_searchField: {\"$regex\": cpe_regex}})"
    },
    {
        "line": 58,
        "fullcodeline": "colCVE.find({cpe_searchField: {\"$regex\": cpe_regex}})"
    },
    {
        "line": 78,
        "fullcodeline": "re_from_start = re.compile(\"^.*{}:\".format(cpe_regex))"
    },
    {
        "line": 79,
        "fullcodeline": "cpe_version = re_from_start.sub(\"\", vc)"
    },
    {
        "line": 82,
        "fullcodeline": "cpe_version = cpe_version.split(\":\")[0]"
    },
    {
        "line": 85,
        "fullcodeline": "cpe_version = re.search(r\"([0-9\\.]*)\", cpe_version).group(0)"
    },
    {
        "line": 101,
        "fullcodeline": "if mongo_version > [4, 4]:"
    },
    {
        "line": 102,
        "fullcodeline": "cves = ("
    },
    {
        "line": 109,
        "fullcodeline": "cves = ("
    },
    {
        "line": 136,
        "fullcodeline": "if mongo_version > [4, 4]:"
    },
    {
        "line": 137,
        "fullcodeline": "cves = ("
    },
    {
        "line": 144,
        "fullcodeline": "cves = ("
    },
    {
        "line": 52,
        "fullcodeline": "[(\"Modified\", pymongo.DESCENDING), (\"cvss\", pymongo.DESCENDING)]"
    },
    {
        "line": 75,
        "fullcodeline": "if cpe_regex not in vc:"
    },
    {
        "line": 32,
        "fullcodeline": "sys.exit(-1)"
    },
    {
        "line": 86,
        "fullcodeline": "if len(cpe_version) == 0:"
    },
    {
        "line": 91,
        "fullcodeline": "final_cves.append(cve)"
    },
    {
        "line": 103,
        "fullcodeline": "colCVE.find({\"vendors\": vendor, \"products\": {\"$regex\": cpe_regex_string}})"
    },
    {
        "line": 110,
        "fullcodeline": "colCVE.find({\"vendors\": vendor, \"products\": {\"$regex\": cpe_regex_string}})"
    },
    {
        "line": 138,
        "fullcodeline": "colCVE.find({\"{}\".format(cpe_searchField): {\"$regex\": cpe_regex_string}})"
    },
    {
        "line": 145,
        "fullcodeline": "colCVE.find({\"{}\".format(cpe_searchField): {\"$regex\": cpe_regex_string}})"
    },
    {
        "line": 28,
        "fullcodeline": "\"Error, target version should be of the form '1.2.3'. Current form is '{}'\".format("
    },
    {
        "line": 43,
        "fullcodeline": "[(\"Modified\", pymongo.DESCENDING), (\"cvss\", pymongo.DESCENDING)]"
    }
]