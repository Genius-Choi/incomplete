[
    {
        "line": 28,
        "fullcodeline": "box_p[5],"
    },
    {
        "line": 29,
        "fullcodeline": "box_q[5],"
    },
    {
        "line": 56,
        "fullcodeline": "number_vertices=primitive_info->coordinates;"
    },
    {
        "line": 57,
        "fullcodeline": "max_strokes=2*number_vertices+6*BezierQuantum+360;"
    },
    {
        "line": 58,
        "fullcodeline": "path_p=(PointInfo *) AcquireQuantumMemory((size_t) max_strokes,"
    },
    {
        "line": 60,
        "fullcodeline": "path_q=(PointInfo *) AcquireQuantumMemory((size_t) max_strokes,"
    },
    {
        "line": 62,
        "fullcodeline": "polygon_primitive=(PrimitiveInfo *) AcquireQuantumMemory((size_t)"
    },
    {
        "line": 67,
        "fullcodeline": "(void) CopyMagickMemory(polygon_primitive,primitive_info,(size_t)"
    },
    {
        "line": 69,
        "fullcodeline": "closed_path="
    },
    {
        "line": 79,
        "fullcodeline": "polygon_primitive[number_vertices].primitive=UndefinedPrimitive;"
    },
    {
        "line": 83,
        "fullcodeline": "dx.p=0.0;"
    },
    {
        "line": 84,
        "fullcodeline": "dy.p=0.0;"
    },
    {
        "line": 94,
        "fullcodeline": "slope.p=DrawEpsilonReciprocal(dx.p)*dy.p;"
    },
    {
        "line": 95,
        "fullcodeline": "inverse_slope.p=(-1.0*DrawEpsilonReciprocal(slope.p));"
    },
    {
        "line": 96,
        "fullcodeline": "mid=ExpandAffine(&draw_info->affine)*draw_info->stroke_width/2.0;"
    },
    {
        "line": 97,
        "fullcodeline": "miterlimit=(double) (draw_info->miterlimit*draw_info->miterlimit*"
    },
    {
        "line": 101,
        "fullcodeline": "offset.x=sqrt((double) (mid*mid/(inverse_slope.p*inverse_slope.p+1.0)));"
    },
    {
        "line": 102,
        "fullcodeline": "offset.y=(double) (offset.x*inverse_slope.p);"
    },
    {
        "line": 128,
        "fullcodeline": "p=0;"
    },
    {
        "line": 129,
        "fullcodeline": "q=0;"
    },
    {
        "line": 130,
        "fullcodeline": "path_q[p++]=box_q[0];"
    },
    {
        "line": 131,
        "fullcodeline": "path_p[q++]=box_p[0];"
    },
    {
        "line": 362,
        "fullcodeline": "path_p[p++]=box_p[1];"
    },
    {
        "line": 363,
        "fullcodeline": "path_q[q++]=box_q[1];"
    },
    {
        "line": 367,
        "fullcodeline": "stroke_polygon=(PrimitiveInfo *) AcquireQuantumMemory((size_t)"
    },
    {
        "line": 399,
        "fullcodeline": "path_p=(PointInfo *) RelinquishMagickMemory(path_p);"
    },
    {
        "line": 400,
        "fullcodeline": "path_q=(PointInfo *) RelinquishMagickMemory(path_q);"
    },
    {
        "line": 401,
        "fullcodeline": "polygon_primitive=(PrimitiveInfo *) RelinquishMagickMemory(polygon_primitive);"
    },
    {
        "line": 64,
        "fullcodeline": "if ((path_p == (PointInfo *) NULL) || (path_q == (PointInfo *) NULL) ||"
    },
    {
        "line": 70,
        "fullcodeline": "(primitive_info[number_vertices-1].point.x == primitive_info[0].point.x) &&"
    },
    {
        "line": 73,
        "fullcodeline": "if ((draw_info->linejoin == RoundJoin) ||"
    },
    {
        "line": 85,
        "fullcodeline": "for (n=1; n < (ssize_t) number_vertices; n++)"
    },
    {
        "line": 92,
        "fullcodeline": "if (n == (ssize_t) number_vertices)"
    },
    {
        "line": 99,
        "fullcodeline": "if ((draw_info->linecap == SquareCap) && (closed_path == MagickFalse))"
    },
    {
        "line": 103,
        "fullcodeline": "if ((dy.p*offset.x-dx.p*offset.y) > 0.0)"
    },
    {
        "line": 132,
        "fullcodeline": "for (i=(ssize_t) n+1; i < (ssize_t) number_vertices; i++)"
    },
    {
        "line": 369,
        "fullcodeline": "if (stroke_polygon != (PrimitiveInfo *) NULL)"
    },
    {
        "line": 65,
        "fullcodeline": "(polygon_primitive == (PrimitiveInfo *) NULL))"
    },
    {
        "line": 74,
        "fullcodeline": "((draw_info->linejoin == MiterJoin) && (closed_path != MagickFalse)))"
    },
    {
        "line": 76,
        "fullcodeline": "polygon_primitive[number_vertices]=primitive_info[1];"
    },
    {
        "line": 77,
        "fullcodeline": "number_vertices++;"
    },
    {
        "line": 87,
        "fullcodeline": "dx.p=polygon_primitive[n].point.x-polygon_primitive[0].point.x;"
    },
    {
        "line": 88,
        "fullcodeline": "dy.p=polygon_primitive[n].point.y-polygon_primitive[0].point.y;"
    },
    {
        "line": 93,
        "fullcodeline": "n=(ssize_t) number_vertices-1L;"
    },
    {
        "line": 100,
        "fullcodeline": "TraceSquareLinecap(polygon_primitive,number_vertices,mid);"
    },
    {
        "line": 105,
        "fullcodeline": "box_p[0].x=polygon_primitive[0].point.x-offset.x;"
    },
    {
        "line": 106,
        "fullcodeline": "box_p[0].y=polygon_primitive[0].point.y-offset.x*inverse_slope.p;"
    },
    {
        "line": 107,
        "fullcodeline": "box_p[1].x=polygon_primitive[n].point.x-offset.x;"
    },
    {
        "line": 108,
        "fullcodeline": "box_p[1].y=polygon_primitive[n].point.y-offset.x*inverse_slope.p;"
    },
    {
        "line": 109,
        "fullcodeline": "box_q[0].x=polygon_primitive[0].point.x+offset.x;"
    },
    {
        "line": 110,
        "fullcodeline": "box_q[0].y=polygon_primitive[0].point.y+offset.x*inverse_slope.p;"
    },
    {
        "line": 111,
        "fullcodeline": "box_q[1].x=polygon_primitive[n].point.x+offset.x;"
    },
    {
        "line": 112,
        "fullcodeline": "box_q[1].y=polygon_primitive[n].point.y+offset.x*inverse_slope.p;"
    },
    {
        "line": 137,
        "fullcodeline": "dx.q=polygon_primitive[i].point.x-polygon_primitive[n].point.x;"
    },
    {
        "line": 138,
        "fullcodeline": "dy.q=polygon_primitive[i].point.y-polygon_primitive[n].point.y;"
    },
    {
        "line": 139,
        "fullcodeline": "dot_product=dx.q*dx.q+dy.q*dy.q;"
    },
    {
        "line": 142,
        "fullcodeline": "slope.q=DrawEpsilonReciprocal(dx.q)*dy.q;"
    },
    {
        "line": 143,
        "fullcodeline": "inverse_slope.q=(-1.0*DrawEpsilonReciprocal(slope.q));"
    },
    {
        "line": 144,
        "fullcodeline": "offset.x=sqrt((double) (mid*mid/(inverse_slope.q*inverse_slope.q+1.0)));"
    },
    {
        "line": 145,
        "fullcodeline": "offset.y=(double) (offset.x*inverse_slope.q);"
    },
    {
        "line": 146,
        "fullcodeline": "dot_product=dy.q*offset.x-dx.q*offset.y;"
    },
    {
        "line": 209,
        "fullcodeline": "dot_product=dx.q*dy.p-dx.p*dy.q;"
    },
    {
        "line": 352,
        "fullcodeline": "slope.p=slope.q;"
    },
    {
        "line": 353,
        "fullcodeline": "inverse_slope.p=inverse_slope.q;"
    },
    {
        "line": 354,
        "fullcodeline": "box_p[0]=box_p[2];"
    },
    {
        "line": 355,
        "fullcodeline": "box_p[1]=box_p[3];"
    },
    {
        "line": 356,
        "fullcodeline": "box_q[0]=box_q[2];"
    },
    {
        "line": 357,
        "fullcodeline": "box_q[1]=box_q[3];"
    },
    {
        "line": 358,
        "fullcodeline": "dx.p=dx.q;"
    },
    {
        "line": 359,
        "fullcodeline": "dy.p=dy.q;"
    },
    {
        "line": 360,
        "fullcodeline": "n=i;"
    },
    {
        "line": 393,
        "fullcodeline": "stroke_polygon[i]=polygon_primitive[0];"
    },
    {
        "line": 395,
        "fullcodeline": "i++;"
    },
    {
        "line": 396,
        "fullcodeline": "stroke_polygon[i].primitive=UndefinedPrimitive;"
    },
    {
        "line": 397,
        "fullcodeline": "stroke_polygon[0].coordinates=(size_t) (p+q+2*closed_path+1);"
    },
    {
        "line": 66,
        "fullcodeline": "return((PrimitiveInfo *) NULL);"
    },
    {
        "line": 89,
        "fullcodeline": "if ((fabs(dx.p) >= MagickEpsilon) || (fabs(dy.p) >= MagickEpsilon))"
    },
    {
        "line": 116,
        "fullcodeline": "box_p[0].x=polygon_primitive[0].point.x+offset.x;"
    },
    {
        "line": 117,
        "fullcodeline": "box_p[0].y=polygon_primitive[0].point.y+offset.y;"
    },
    {
        "line": 118,
        "fullcodeline": "box_p[1].x=polygon_primitive[n].point.x+offset.x;"
    },
    {
        "line": 119,
        "fullcodeline": "box_p[1].y=polygon_primitive[n].point.y+offset.y;"
    },
    {
        "line": 120,
        "fullcodeline": "box_q[0].x=polygon_primitive[0].point.x-offset.x;"
    },
    {
        "line": 121,
        "fullcodeline": "box_q[0].y=polygon_primitive[0].point.y-offset.y;"
    },
    {
        "line": 122,
        "fullcodeline": "box_q[1].x=polygon_primitive[n].point.x-offset.x;"
    },
    {
        "line": 123,
        "fullcodeline": "box_q[1].y=polygon_primitive[n].point.y-offset.y;"
    },
    {
        "line": 140,
        "fullcodeline": "if (dot_product < 0.25)"
    },
    {
        "line": 147,
        "fullcodeline": "if (dot_product > 0.0)"
    },
    {
        "line": 169,
        "fullcodeline": "if (fabs((double) (slope.p-slope.q)) < MagickEpsilon)"
    },
    {
        "line": 183,
        "fullcodeline": "if (q >= (ssize_t) (max_strokes-6*BezierQuantum-360))"
    },
    {
        "line": 210,
        "fullcodeline": "if (dot_product <= 0.0)"
    },
    {
        "line": 371,
        "fullcodeline": "for (i=0; i < (ssize_t) p; i++)"
    },
    {
        "line": 376,
        "fullcodeline": "if (closed_path != MagickFalse)"
    },
    {
        "line": 382,
        "fullcodeline": "for ( ; i < (ssize_t) (p+q+closed_path); i++)"
    },
    {
        "line": 387,
        "fullcodeline": "if (closed_path != MagickFalse)"
    },
    {
        "line": 149,
        "fullcodeline": "box_p[2].x=polygon_primitive[n].point.x-offset.x;"
    },
    {
        "line": 150,
        "fullcodeline": "box_p[2].y=polygon_primitive[n].point.y-offset.y;"
    },
    {
        "line": 151,
        "fullcodeline": "box_p[3].x=polygon_primitive[i].point.x-offset.x;"
    },
    {
        "line": 152,
        "fullcodeline": "box_p[3].y=polygon_primitive[i].point.y-offset.y;"
    },
    {
        "line": 153,
        "fullcodeline": "box_q[2].x=polygon_primitive[n].point.x+offset.x;"
    },
    {
        "line": 154,
        "fullcodeline": "box_q[2].y=polygon_primitive[n].point.y+offset.y;"
    },
    {
        "line": 155,
        "fullcodeline": "box_q[3].x=polygon_primitive[i].point.x+offset.x;"
    },
    {
        "line": 156,
        "fullcodeline": "box_q[3].y=polygon_primitive[i].point.y+offset.y;"
    },
    {
        "line": 171,
        "fullcodeline": "box_p[4]=box_p[1];"
    },
    {
        "line": 172,
        "fullcodeline": "box_q[4]=box_q[1];"
    },
    {
        "line": 368,
        "fullcodeline": "(p+q+2UL*closed_path+2UL),sizeof(*stroke_polygon));"
    },
    {
        "line": 373,
        "fullcodeline": "stroke_polygon[i]=polygon_primitive[0];"
    },
    {
        "line": 374,
        "fullcodeline": "stroke_polygon[i].point=path_p[i];"
    },
    {
        "line": 378,
        "fullcodeline": "stroke_polygon[i]=polygon_primitive[0];"
    },
    {
        "line": 380,
        "fullcodeline": "i++;"
    },
    {
        "line": 384,
        "fullcodeline": "stroke_polygon[i]=polygon_primitive[0];"
    },
    {
        "line": 385,
        "fullcodeline": "stroke_polygon[i].point=path_q[p+q+closed_path-(i+1)];"
    },
    {
        "line": 389,
        "fullcodeline": "stroke_polygon[i]=polygon_primitive[0];"
    },
    {
        "line": 391,
        "fullcodeline": "i++;"
    },
    {
        "line": 160,
        "fullcodeline": "box_p[2].x=polygon_primitive[n].point.x+offset.x;"
    },
    {
        "line": 161,
        "fullcodeline": "box_p[2].y=polygon_primitive[n].point.y+offset.y;"
    },
    {
        "line": 162,
        "fullcodeline": "box_p[3].x=polygon_primitive[i].point.x+offset.x;"
    },
    {
        "line": 163,
        "fullcodeline": "box_p[3].y=polygon_primitive[i].point.y+offset.y;"
    },
    {
        "line": 164,
        "fullcodeline": "box_q[2].x=polygon_primitive[n].point.x-offset.x;"
    },
    {
        "line": 165,
        "fullcodeline": "box_q[2].y=polygon_primitive[n].point.y-offset.y;"
    },
    {
        "line": 166,
        "fullcodeline": "box_q[3].x=polygon_primitive[i].point.x-offset.x;"
    },
    {
        "line": 167,
        "fullcodeline": "box_q[3].y=polygon_primitive[i].point.y-offset.y;"
    },
    {
        "line": 176,
        "fullcodeline": "box_p[4].x=(double) ((slope.p*box_p[0].x-box_p[0].y-slope.q*box_p[3].x+"
    },
    {
        "line": 178,
        "fullcodeline": "box_p[4].y=(double) (slope.p*(box_p[4].x-box_p[0].x)+box_p[0].y);"
    },
    {
        "line": 179,
        "fullcodeline": "box_q[4].x=(double) ((slope.p*box_q[0].x-box_q[0].y-slope.q*box_q[3].x+"
    },
    {
        "line": 181,
        "fullcodeline": "box_q[4].y=(double) (slope.p*(box_q[4].x-box_q[0].x)+box_q[0].y);"
    },
    {
        "line": 185,
        "fullcodeline": "if (~max_strokes < (6*BezierQuantum+360))"
    },
    {
        "line": 198,
        "fullcodeline": "if ((path_p == (PointInfo *) NULL) || (path_q == (PointInfo *) NULL))"
    },
    {
        "line": 187,
        "fullcodeline": "path_p=(PointInfo *) RelinquishMagickMemory(path_p);"
    },
    {
        "line": 188,
        "fullcodeline": "path_q=(PointInfo *) RelinquishMagickMemory(path_q);"
    },
    {
        "line": 204,
        "fullcodeline": "polygon_primitive=(PrimitiveInfo *)"
    },
    {
        "line": 71,
        "fullcodeline": "(primitive_info[number_vertices-1].point.y == primitive_info[0].point.y) ?"
    },
    {
        "line": 192,
        "fullcodeline": "max_strokes+=6*BezierQuantum+360;"
    },
    {
        "line": 193,
        "fullcodeline": "path_p=(PointInfo *) ResizeQuantumMemory(path_p,max_strokes,"
    },
    {
        "line": 195,
        "fullcodeline": "path_q=(PointInfo *) ResizeQuantumMemory(path_q,max_strokes,"
    },
    {
        "line": 200,
        "fullcodeline": "if (path_p != (PointInfo *) NULL)"
    },
    {
        "line": 202,
        "fullcodeline": "if (path_q != (PointInfo *) NULL)"
    },
    {
        "line": 206,
        "fullcodeline": "return((PrimitiveInfo *) NULL);"
    },
    {
        "line": 215,
        "fullcodeline": "path_q[q++]=box_q[1];"
    },
    {
        "line": 216,
        "fullcodeline": "path_q[q++]=box_q[2];"
    },
    {
        "line": 217,
        "fullcodeline": "dot_product=(box_q[4].x-box_p[4].x)*(box_q[4].x-box_p[4].x)+"
    },
    {
        "line": 230,
        "fullcodeline": "dot_product=(box_q[4].x-box_p[4].x)*(box_q[4].x-box_p[4].x)+"
    },
    {
        "line": 248,
        "fullcodeline": "dot_product=(box_q[4].x-box_p[4].x)*(box_q[4].x-box_p[4].x)+"
    },
    {
        "line": 257,
        "fullcodeline": "center=polygon_primitive[n].point;"
    },
    {
        "line": 258,
        "fullcodeline": "theta.p=atan2(box_q[1].y-center.y,box_q[1].x-center.x);"
    },
    {
        "line": 259,
        "fullcodeline": "theta.q=atan2(box_q[2].y-center.y,box_q[2].x-center.x);"
    },
    {
        "line": 264,
        "fullcodeline": "path_q[q].x=box_q[1].x;"
    },
    {
        "line": 265,
        "fullcodeline": "path_q[q].y=box_q[1].y;"
    },
    {
        "line": 266,
        "fullcodeline": "q++;"
    },
    {
        "line": 276,
        "fullcodeline": "path_q[q++]=box_q[2];"
    },
    {
        "line": 390,
        "fullcodeline": "stroke_polygon[i].point=stroke_polygon[p+closed_path].point;"
    },
    {
        "line": 177,
        "fullcodeline": "box_p[3].y)/(slope.p-slope.q));"
    },
    {
        "line": 180,
        "fullcodeline": "box_q[3].y)/(slope.p-slope.q));"
    },
    {
        "line": 201,
        "fullcodeline": "path_p=(PointInfo *) RelinquishMagickMemory(path_p);"
    },
    {
        "line": 203,
        "fullcodeline": "path_q=(PointInfo *) RelinquishMagickMemory(path_q);"
    },
    {
        "line": 205,
        "fullcodeline": "RelinquishMagickMemory(polygon_primitive);"
    },
    {
        "line": 219,
        "fullcodeline": "if (dot_product <= miterlimit)"
    },
    {
        "line": 232,
        "fullcodeline": "if (dot_product <= miterlimit)"
    },
    {
        "line": 250,
        "fullcodeline": "if (dot_product <= miterlimit)"
    },
    {
        "line": 260,
        "fullcodeline": "if (theta.q < theta.p)"
    },
    {
        "line": 267,
        "fullcodeline": "for (j=1; j < (ssize_t) arc_segments; j++)"
    },
    {
        "line": 287,
        "fullcodeline": "path_p[p++]=box_p[1];"
    },
    {
        "line": 288,
        "fullcodeline": "path_p[p++]=box_p[2];"
    },
    {
        "line": 289,
        "fullcodeline": "dot_product=(box_q[4].x-box_p[4].x)*(box_q[4].x-box_p[4].x)+"
    },
    {
        "line": 302,
        "fullcodeline": "dot_product=(box_q[4].x-box_p[4].x)*(box_q[4].x-box_p[4].x)+"
    },
    {
        "line": 320,
        "fullcodeline": "dot_product=(box_q[4].x-box_p[4].x)*(box_q[4].x-box_p[4].x)+"
    },
    {
        "line": 329,
        "fullcodeline": "center=polygon_primitive[n].point;"
    },
    {
        "line": 330,
        "fullcodeline": "theta.p=atan2(box_p[1].y-center.y,box_p[1].x-center.x);"
    },
    {
        "line": 331,
        "fullcodeline": "theta.q=atan2(box_p[2].y-center.y,box_p[2].x-center.x);"
    },
    {
        "line": 336,
        "fullcodeline": "path_p[p++]=box_p[1];"
    },
    {
        "line": 346,
        "fullcodeline": "path_p[p++]=box_p[2];"
    },
    {
        "line": 218,
        "fullcodeline": "(box_q[4].y-box_p[4].y)*(box_q[4].y-box_p[4].y);"
    },
    {
        "line": 220,
        "fullcodeline": "path_p[p++]=box_p[4];"
    },
    {
        "line": 231,
        "fullcodeline": "(box_q[4].y-box_p[4].y)*(box_q[4].y-box_p[4].y);"
    },
    {
        "line": 234,
        "fullcodeline": "path_q[q++]=box_q[4];"
    },
    {
        "line": 235,
        "fullcodeline": "path_p[p++]=box_p[4];"
    },
    {
        "line": 249,
        "fullcodeline": "(box_q[4].y-box_p[4].y)*(box_q[4].y-box_p[4].y);"
    },
    {
        "line": 251,
        "fullcodeline": "path_p[p++]=box_p[4];"
    },
    {
        "line": 261,
        "fullcodeline": "theta.q+=(double) (2.0*MagickPI);"
    },
    {
        "line": 262,
        "fullcodeline": "arc_segments=(size_t) ceil((double) ((theta.q-theta.p)/"
    },
    {
        "line": 269,
        "fullcodeline": "delta_theta=(double) (j*(theta.q-theta.p)/arc_segments);"
    },
    {
        "line": 270,
        "fullcodeline": "path_q[q].x=(double) (center.x+mid*cos(fmod((double)"
    },
    {
        "line": 272,
        "fullcodeline": "path_q[q].y=(double) (center.y+mid*sin(fmod((double)"
    },
    {
        "line": 274,
        "fullcodeline": "q++;"
    },
    {
        "line": 291,
        "fullcodeline": "if (dot_product <= miterlimit)"
    },
    {
        "line": 304,
        "fullcodeline": "if (dot_product <= miterlimit)"
    },
    {
        "line": 322,
        "fullcodeline": "if (dot_product <= miterlimit)"
    },
    {
        "line": 332,
        "fullcodeline": "if (theta.p < theta.q)"
    },
    {
        "line": 337,
        "fullcodeline": "for (j=1; j < (ssize_t) arc_segments; j++)"
    },
    {
        "line": 223,
        "fullcodeline": "path_p[p++]=box_p[1];"
    },
    {
        "line": 224,
        "fullcodeline": "path_p[p++]=box_p[2];"
    },
    {
        "line": 239,
        "fullcodeline": "path_q[q++]=box_q[1];"
    },
    {
        "line": 240,
        "fullcodeline": "path_q[q++]=box_q[2];"
    },
    {
        "line": 241,
        "fullcodeline": "path_p[p++]=box_p[1];"
    },
    {
        "line": 242,
        "fullcodeline": "path_p[p++]=box_p[2];"
    },
    {
        "line": 254,
        "fullcodeline": "path_p[p++]=box_p[1];"
    },
    {
        "line": 255,
        "fullcodeline": "path_p[p++]=box_p[2];"
    },
    {
        "line": 290,
        "fullcodeline": "(box_q[4].y-box_p[4].y)*(box_q[4].y-box_p[4].y);"
    },
    {
        "line": 292,
        "fullcodeline": "path_q[q++]=box_q[4];"
    },
    {
        "line": 303,
        "fullcodeline": "(box_q[4].y-box_p[4].y)*(box_q[4].y-box_p[4].y);"
    },
    {
        "line": 306,
        "fullcodeline": "path_q[q++]=box_q[4];"
    },
    {
        "line": 307,
        "fullcodeline": "path_p[p++]=box_p[4];"
    },
    {
        "line": 321,
        "fullcodeline": "(box_q[4].y-box_p[4].y)*(box_q[4].y-box_p[4].y);"
    },
    {
        "line": 323,
        "fullcodeline": "path_q[q++]=box_q[4];"
    },
    {
        "line": 333,
        "fullcodeline": "theta.p+=(double) (2.0*MagickPI);"
    },
    {
        "line": 334,
        "fullcodeline": "arc_segments=(size_t) ceil((double) ((theta.p-theta.q)/"
    },
    {
        "line": 339,
        "fullcodeline": "delta_theta=(double) (j*(theta.q-theta.p)/arc_segments);"
    },
    {
        "line": 340,
        "fullcodeline": "path_p[p].x=(double) (center.x+mid*cos(fmod((double)"
    },
    {
        "line": 342,
        "fullcodeline": "path_p[p].y=(double) (center.y+mid*sin(fmod((double)"
    },
    {
        "line": 344,
        "fullcodeline": "p++;"
    },
    {
        "line": 295,
        "fullcodeline": "path_q[q++]=box_q[1];"
    },
    {
        "line": 296,
        "fullcodeline": "path_q[q++]=box_q[2];"
    },
    {
        "line": 311,
        "fullcodeline": "path_q[q++]=box_q[1];"
    },
    {
        "line": 312,
        "fullcodeline": "path_q[q++]=box_q[2];"
    },
    {
        "line": 313,
        "fullcodeline": "path_p[p++]=box_p[1];"
    },
    {
        "line": 314,
        "fullcodeline": "path_p[p++]=box_p[2];"
    },
    {
        "line": 326,
        "fullcodeline": "path_q[q++]=box_q[1];"
    },
    {
        "line": 327,
        "fullcodeline": "path_q[q++]=box_q[2];"
    },
    {
        "line": 263,
        "fullcodeline": "(2.0*sqrt((double) (1.0/mid)))));"
    },
    {
        "line": 335,
        "fullcodeline": "(2.0*sqrt((double) (1.0/mid)))));"
    },
    {
        "line": 271,
        "fullcodeline": "(theta.p+delta_theta),DegreesToRadians(360.0))));"
    },
    {
        "line": 273,
        "fullcodeline": "(theta.p+delta_theta),DegreesToRadians(360.0))));"
    },
    {
        "line": 341,
        "fullcodeline": "(theta.p+delta_theta),DegreesToRadians(360.0))));"
    },
    {
        "line": 343,
        "fullcodeline": "(theta.p+delta_theta),DegreesToRadians(360.0))));"
    }
]