[
    {
        "line": 3,
        "fullcodeline": "struct ksmbd_conn *conn = work->conn;"
    },
    {
        "line": 4,
        "fullcodeline": "struct ksmbd_session *sess = work->sess;"
    },
    {
        "line": 5,
        "fullcodeline": "struct ksmbd_tree_connect *tcon = work->tcon;"
    },
    {
        "line": 9,
        "fullcodeline": "struct ksmbd_share_config *share = tcon->share_conf;"
    },
    {
        "line": 10,
        "fullcodeline": "struct ksmbd_file *fp = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "struct file *filp = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "struct user_namespace *user_ns = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "struct lease_ctx_info *lc = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "struct create_ea_buf_req *ea_buf = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "__le32 *next_ptr = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "int req_op_level = 0, open_flags = 0, may_flags = 0, file_info = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "int rc = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "int contxt_cnt = 0, query_disk_id = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "int maximal_access_ctxt = 0, posix_ctxt = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "int s_type = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "int next_off = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "char *name = NULL;"
    },
    {
        "line": 26,
        "fullcodeline": "char *stream_name = NULL;"
    },
    {
        "line": 27,
        "fullcodeline": "bool file_present = false, created = false, already_permitted = false;"
    },
    {
        "line": 28,
        "fullcodeline": "int share_ret, need_truncate = 0;"
    },
    {
        "line": 30,
        "fullcodeline": "umode_t posix_mode = 0;"
    },
    {
        "line": 31,
        "fullcodeline": "__le32 daccess, maximal_access = 0;"
    },
    {
        "line": 33,
        "fullcodeline": "WORK_BUFFERS(work, req, rsp);"
    },
    {
        "line": 97,
        "fullcodeline": "req_op_level = req->RequestedOplockLevel;"
    },
    {
        "line": 229,
        "fullcodeline": "rc = ksmbd_vfs_kern_path(work, name, LOOKUP_NO_SYMLINKS, &path, 1);"
    },
    {
        "line": 314,
        "fullcodeline": "daccess = smb_map_generic_desired_access(req->DesiredAccess);"
    },
    {
        "line": 337,
        "fullcodeline": "open_flags = smb2_create_open_flags(file_present, daccess,"
    },
    {
        "line": 401,
        "fullcodeline": "rc = ksmbd_query_inode_status(d_inode(path.dentry->d_parent));"
    },
    {
        "line": 408,
        "fullcodeline": "filp = dentry_open(&path, open_flags, current_cred());"
    },
    {
        "line": 428,
        "fullcodeline": "ksmbd_vfs_set_fadvise(filp, req->CreateOptions);"
    },
    {
        "line": 431,
        "fullcodeline": "fp = ksmbd_open_fd(work, filp);"
    },
    {
        "line": 440,
        "fullcodeline": "ksmbd_open_durable_fd(fp);"
    },
    {
        "line": 446,
        "fullcodeline": "fp->cdoption = req->CreateDisposition;"
    },
    {
        "line": 447,
        "fullcodeline": "fp->daccess = daccess;"
    },
    {
        "line": 448,
        "fullcodeline": "fp->saccess = req->ShareAccess;"
    },
    {
        "line": 449,
        "fullcodeline": "fp->coption = req->CreateOptions;"
    },
    {
        "line": 533,
        "fullcodeline": "fp->attrib_only = !(req->DesiredAccess & ~(FILE_READ_ATTRIBUTES_LE |"
    },
    {
        "line": 545,
        "fullcodeline": "write_lock(&fp->f_ci->m_lock);"
    },
    {
        "line": 549,
        "fullcodeline": "rc = ksmbd_vfs_getattr(&path, &stat);"
    },
    {
        "line": 561,
        "fullcodeline": "share_ret = ksmbd_smb_check_shared_mode(fp->filp, fp);"
    },
    {
        "line": 654,
        "fullcodeline": "memcpy(fp->client_guid, conn->ClientGUID, SMB2_CLIENT_GUID_SIZE);"
    },
    {
        "line": 656,
        "fullcodeline": "generic_fillattr(user_ns, file_inode(fp->filp),"
    },
    {
        "line": 661,
        "fullcodeline": "opinfo = rcu_dereference(fp->f_opinfo);"
    },
    {
        "line": 667,
        "fullcodeline": "time = ksmbd_UnixTimeToNT(stat.atime);"
    },
    {
        "line": 669,
        "fullcodeline": "time = ksmbd_UnixTimeToNT(stat.mtime);"
    },
    {
        "line": 671,
        "fullcodeline": "time = ksmbd_UnixTimeToNT(stat.ctime);"
    },
    {
        "line": 684,
        "fullcodeline": "rsp->CreateContextsLength = 0;"
    },
    {
        "line": 685,
        "fullcodeline": "inc_rfc1001_len(work->response_buf, 88); /* StructureSize - 1*/"
    },
    {
        "line": 769,
        "fullcodeline": "ksmbd_revert_fsids(work);"
    },
    {
        "line": 35,
        "fullcodeline": "if (req->hdr.NextCommand && !work->next_smb2_rcv_hdr_off &&"
    },
    {
        "line": 43,
        "fullcodeline": "if (test_share_config_flag(share, KSMBD_SHARE_FLAG_PIPE)) {"
    },
    {
        "line": 98,
        "fullcodeline": "if (req_op_level == SMB2_OPLOCK_LEVEL_LEASE)"
    },
    {
        "line": 109,
        "fullcodeline": "if (req->CreateOptions && !(req->CreateOptions & CREATE_OPTIONS_MASK_LE)) {"
    },
    {
        "line": 151,
        "fullcodeline": "if (req->FileAttributes && !(req->FileAttributes & FILE_ATTRIBUTE_MASK_LE)) {"
    },
    {
        "line": 224,
        "fullcodeline": "if (ksmbd_override_fsids(work)) {"
    },
    {
        "line": 230,
        "fullcodeline": "if (!rc) {"
    },
    {
        "line": 291,
        "fullcodeline": "if (file_present && req->CreateOptions & FILE_NON_DIRECTORY_FILE_LE &&"
    },
    {
        "line": 316,
        "fullcodeline": "if (file_present && !(req->CreateOptions & FILE_DELETE_ON_CLOSE_LE)) {"
    },
    {
        "line": 323,
        "fullcodeline": "if (daccess & FILE_MAXIMAL_ACCESS_LE) {"
    },
    {
        "line": 351,
        "fullcodeline": "if (!file_present) {"
    },
    {
        "line": 402,
        "fullcodeline": "if (rc == KSMBD_INODE_STATUS_PENDING_DELETE) {"
    },
    {
        "line": 409,
        "fullcodeline": "if (IS_ERR(filp)) {"
    },
    {
        "line": 432,
        "fullcodeline": "if (IS_ERR(fp)) {"
    },
    {
        "line": 556,
        "fullcodeline": "if (ksmbd_inode_pending_delete(fp)) {"
    },
    {
        "line": 591,
        "fullcodeline": "if (req->CreateOptions & FILE_DELETE_ON_CLOSE_LE)"
    },
    {
        "line": 641,
        "fullcodeline": "if (stat.result_mask & STATX_BTIME)"
    },
    {
        "line": 645,
        "fullcodeline": "if (req->FileAttributes || fp->f_ci->m_fattr == 0)"
    },
    {
        "line": 649,
        "fullcodeline": "if (!created)"
    },
    {
        "line": 659,
        "fullcodeline": "rsp->StructureSize = cpu_to_le16(89);"
    },
    {
        "line": 665,
        "fullcodeline": "rsp->CreateAction = cpu_to_le32(file_info);"
    },
    {
        "line": 666,
        "fullcodeline": "rsp->CreationTime = cpu_to_le64(fp->create_time);"
    },
    {
        "line": 668,
        "fullcodeline": "rsp->LastAccessTime = cpu_to_le64(time);"
    },
    {
        "line": 670,
        "fullcodeline": "rsp->LastWriteTime = cpu_to_le64(time);"
    },
    {
        "line": 672,
        "fullcodeline": "rsp->ChangeTime = cpu_to_le64(time);"
    },
    {
        "line": 688,
        "fullcodeline": "if (opinfo && opinfo->is_lease) {"
    },
    {
        "line": 36,
        "fullcodeline": "(req->hdr.Flags & SMB2_FLAGS_RELATED_OPERATIONS)) {"
    },
    {
        "line": 37,
        "fullcodeline": "ksmbd_debug(SMB, \"invalid flag in chained command\\n\");"
    },
    {
        "line": 38,
        "fullcodeline": "rsp->hdr.Status = STATUS_INVALID_PARAMETER;"
    },
    {
        "line": 39,
        "fullcodeline": "smb2_set_err_rsp(work);"
    },
    {
        "line": 56,
        "fullcodeline": "name = smb2_get_name(req->Buffer,"
    },
    {
        "line": 67,
        "fullcodeline": "ksmbd_debug(SMB, \"converted name = %s\\n\", name);"
    },
    {
        "line": 79,
        "fullcodeline": "rc = ksmbd_validate_filename(name);"
    },
    {
        "line": 99,
        "fullcodeline": "lc = parse_lease_state(req);"
    },
    {
        "line": 101,
        "fullcodeline": "if (le32_to_cpu(req->ImpersonationLevel) > le32_to_cpu(IL_DELEGATE)) {"
    },
    {
        "line": 104,
        "fullcodeline": "rc = -EIO;"
    },
    {
        "line": 105,
        "fullcodeline": "rsp->hdr.Status = STATUS_BAD_IMPERSONATION_LEVEL;"
    },
    {
        "line": 112,
        "fullcodeline": "rc = -EINVAL;"
    },
    {
        "line": 136,
        "fullcodeline": "if (le32_to_cpu(req->CreateDisposition) >"
    },
    {
        "line": 137,
        "fullcodeline": "le32_to_cpu(FILE_OVERWRITE_IF_LE)) {"
    },
    {
        "line": 140,
        "fullcodeline": "rc = -EINVAL;"
    },
    {
        "line": 144,
        "fullcodeline": "if (!(req->DesiredAccess & DESIRED_ACCESS_MASK)) {"
    },
    {
        "line": 147,
        "fullcodeline": "rc = -EACCES;"
    },
    {
        "line": 154,
        "fullcodeline": "rc = -EINVAL;"
    },
    {
        "line": 160,
        "fullcodeline": "context = smb2_find_context_vals(req, SMB2_CREATE_EA_BUFFER);"
    },
    {
        "line": 179,
        "fullcodeline": "context = smb2_find_context_vals(req,"
    },
    {
        "line": 190,
        "fullcodeline": "context = smb2_find_context_vals(req,"
    },
    {
        "line": 225,
        "fullcodeline": "rc = -ENOMEM;"
    },
    {
        "line": 260,
        "fullcodeline": "ksmbd_debug(SMB, \"can not get linux path for %s, rc = %d\\n\","
    },
    {
        "line": 262,
        "fullcodeline": "rc = 0;"
    },
    {
        "line": 292,
        "fullcodeline": "S_ISDIR(stat.mode) && !(req->CreateOptions & FILE_DELETE_ON_CLOSE_LE)) {"
    },
    {
        "line": 293,
        "fullcodeline": "ksmbd_debug(SMB, \"open() argument is a directory: %s, %x\\n\","
    },
    {
        "line": 295,
        "fullcodeline": "rsp->hdr.Status = STATUS_FILE_IS_A_DIRECTORY;"
    },
    {
        "line": 296,
        "fullcodeline": "rc = -EIO;"
    },
    {
        "line": 300,
        "fullcodeline": "if (file_present && (req->CreateOptions & FILE_DIRECTORY_FILE_LE) &&"
    },
    {
        "line": 302,
        "fullcodeline": "!S_ISDIR(stat.mode)) {"
    },
    {
        "line": 303,
        "fullcodeline": "rsp->hdr.Status = STATUS_NOT_A_DIRECTORY;"
    },
    {
        "line": 304,
        "fullcodeline": "rc = -EIO;"
    },
    {
        "line": 308,
        "fullcodeline": "if (!stream_name && file_present &&"
    },
    {
        "line": 309,
        "fullcodeline": "req->CreateDisposition == FILE_CREATE_LE) {"
    },
    {
        "line": 310,
        "fullcodeline": "rc = -EEXIST;"
    },
    {
        "line": 317,
        "fullcodeline": "rc = smb_check_perm_dacl(conn, &path, &daccess,"
    },
    {
        "line": 334,
        "fullcodeline": "maximal_access = daccess;"
    },
    {
        "line": 341,
        "fullcodeline": "if (!test_tree_conn_flag(tcon, KSMBD_TREE_CONN_FLAG_WRITABLE)) {"
    },
    {
        "line": 352,
        "fullcodeline": "rc = smb2_creat(work, &path, name, open_flags, posix_mode,"
    },
    {
        "line": 362,
        "fullcodeline": "created = true;"
    },
    {
        "line": 363,
        "fullcodeline": "user_ns = mnt_user_ns(path.mnt);"
    },
    {
        "line": 403,
        "fullcodeline": "rc = -EBUSY;"
    },
    {
        "line": 410,
        "fullcodeline": "rc = PTR_ERR(filp);"
    },
    {
        "line": 411,
        "fullcodeline": "pr_err(\"dentry open for dir failed, rc %d\\n\", rc);"
    },
    {
        "line": 434,
        "fullcodeline": "rc = PTR_ERR(fp);"
    },
    {
        "line": 435,
        "fullcodeline": "fp = NULL;"
    },
    {
        "line": 441,
        "fullcodeline": "if (!has_file_id(fp->persistent_id)) {"
    },
    {
        "line": 442,
        "fullcodeline": "rc = -ENOMEM;"
    },
    {
        "line": 454,
        "fullcodeline": "struct inode *inode = d_inode(path.dentry);"
    },
    {
        "line": 456,
        "fullcodeline": "posix_acl_rc = ksmbd_vfs_inherit_posix_acl(user_ns,"
    },
    {
        "line": 524,
        "fullcodeline": "rc = smb2_set_stream_name_xattr(&path,"
    },
    {
        "line": 530,
        "fullcodeline": "file_info = FILE_CREATED;"
    },
    {
        "line": 535,
        "fullcodeline": "if (!S_ISDIR(file_inode(filp)->i_mode) && open_flags & O_TRUNC &&"
    },
    {
        "line": 536,
        "fullcodeline": "!fp->attrib_only && !stream_name) {"
    },
    {
        "line": 537,
        "fullcodeline": "smb_break_all_oplock(work, fp);"
    },
    {
        "line": 551,
        "fullcodeline": "generic_fillattr(user_ns, d_inode(path.dentry), &stat);"
    },
    {
        "line": 552,
        "fullcodeline": "rc = 0;"
    },
    {
        "line": 557,
        "fullcodeline": "rc = -EBUSY;"
    },
    {
        "line": 562,
        "fullcodeline": "if (!test_share_config_flag(work->tcon->share_conf, KSMBD_SHARE_FLAG_OPLOCKS) ||"
    },
    {
        "line": 563,
        "fullcodeline": "(req_op_level == SMB2_OPLOCK_LEVEL_LEASE &&"
    },
    {
        "line": 592,
        "fullcodeline": "ksmbd_fd_set_delete_on_close(fp, file_info);"
    },
    {
        "line": 595,
        "fullcodeline": "rc = smb2_create_truncate(&path);"
    },
    {
        "line": 603,
        "fullcodeline": "az_req = (struct create_alloc_size_req *)smb2_find_context_vals(req,"
    },
    {
        "line": 631,
        "fullcodeline": "context = smb2_find_context_vals(req, SMB2_CREATE_QUERY_ON_DISK_ID);"
    },
    {
        "line": 642,
        "fullcodeline": "fp->create_time = ksmbd_UnixTimeToNT(stat.btime);"
    },
    {
        "line": 646,
        "fullcodeline": "fp->f_ci->m_fattr ="
    },
    {
        "line": 650,
        "fullcodeline": "smb2_update_xattrs(tcon, &path, fp);"
    },
    {
        "line": 662,
        "fullcodeline": "rsp->OplockLevel = opinfo != NULL ? opinfo->level : 0;"
    },
    {
        "line": 673,
        "fullcodeline": "rsp->AllocationSize = S_ISDIR(stat.mode) ? 0 :"
    },
    {
        "line": 674,
        "fullcodeline": "cpu_to_le64(stat.blocks << 9);"
    },
    {
        "line": 675,
        "fullcodeline": "rsp->EndofFile = S_ISDIR(stat.mode) ? 0 : cpu_to_le64(stat.size);"
    },
    {
        "line": 691,
        "fullcodeline": "ksmbd_debug(SMB, \"lease granted on(%s) lease state 0x%x\\n\","
    },
    {
        "line": 695,
        "fullcodeline": "lease_ccontext = (struct create_context *)rsp->Buffer;"
    },
    {
        "line": 696,
        "fullcodeline": "contxt_cnt++;"
    },
    {
        "line": 697,
        "fullcodeline": "create_lease_buf(rsp->Buffer, opinfo->o_lease);"
    },
    {
        "line": 698,
        "fullcodeline": "le32_add_cpu(&rsp->CreateContextsLength,"
    },
    {
        "line": 700,
        "fullcodeline": "inc_rfc1001_len(work->response_buf,"
    },
    {
        "line": 703,
        "fullcodeline": "next_off = conn->vals->create_lease_size;"
    },
    {
        "line": 713,
        "fullcodeline": "mxac_ccontext = (struct create_context *)(rsp->Buffer +"
    },
    {
        "line": 715,
        "fullcodeline": "contxt_cnt++;"
    },
    {
        "line": 719,
        "fullcodeline": "le32_add_cpu(&rsp->CreateContextsLength,"
    },
    {
        "line": 721,
        "fullcodeline": "inc_rfc1001_len(work->response_buf,"
    },
    {
        "line": 726,
        "fullcodeline": "next_off = conn->vals->create_mxac_size;"
    },
    {
        "line": 732,
        "fullcodeline": "disk_id_ccontext = (struct create_context *)(rsp->Buffer +"
    },
    {
        "line": 734,
        "fullcodeline": "contxt_cnt++;"
    },
    {
        "line": 738,
        "fullcodeline": "le32_add_cpu(&rsp->CreateContextsLength,"
    },
    {
        "line": 740,
        "fullcodeline": "inc_rfc1001_len(work->response_buf,"
    },
    {
        "line": 745,
        "fullcodeline": "next_off = conn->vals->create_disk_id_size;"
    },
    {
        "line": 749,
        "fullcodeline": "contxt_cnt++;"
    },
    {
        "line": 750,
        "fullcodeline": "create_posix_rsp_buf(rsp->Buffer +"
    },
    {
        "line": 753,
        "fullcodeline": "le32_add_cpu(&rsp->CreateContextsLength,"
    },
    {
        "line": 755,
        "fullcodeline": "inc_rfc1001_len(work->response_buf,"
    },
    {
        "line": 40,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 45,
        "fullcodeline": "return create_smb2_pipe(work);"
    },
    {
        "line": 59,
        "fullcodeline": "if (IS_ERR(name)) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (strchr(name, ':')) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (rc < 0)"
    },
    {
        "line": 83,
        "fullcodeline": "if (ksmbd_share_veto_filename(share, name)) {"
    },
    {
        "line": 90,
        "fullcodeline": "name = kstrdup(\"\", GFP_KERNEL);"
    },
    {
        "line": 103,
        "fullcodeline": "le32_to_cpu(req->ImpersonationLevel));"
    },
    {
        "line": 111,
        "fullcodeline": "le32_to_cpu(req->CreateOptions));"
    },
    {
        "line": 139,
        "fullcodeline": "le32_to_cpu(req->CreateDisposition));"
    },
    {
        "line": 146,
        "fullcodeline": "le32_to_cpu(req->DesiredAccess));"
    },
    {
        "line": 153,
        "fullcodeline": "le32_to_cpu(req->FileAttributes));"
    },
    {
        "line": 161,
        "fullcodeline": "if (IS_ERR(context)) {"
    },
    {
        "line": 181,
        "fullcodeline": "if (IS_ERR(context)) {"
    },
    {
        "line": 192,
        "fullcodeline": "if (IS_ERR(context)) {"
    },
    {
        "line": 231,
        "fullcodeline": "if (req->CreateOptions & FILE_DELETE_ON_CLOSE_LE) {"
    },
    {
        "line": 258,
        "fullcodeline": "if (rc != -ENOENT)"
    },
    {
        "line": 264,
        "fullcodeline": "file_present = true;"
    },
    {
        "line": 265,
        "fullcodeline": "user_ns = mnt_user_ns(path.mnt);"
    },
    {
        "line": 266,
        "fullcodeline": "generic_fillattr(user_ns, d_inode(path.dentry), &stat);"
    },
    {
        "line": 269,
        "fullcodeline": "if (req->CreateOptions & FILE_DIRECTORY_FILE_LE) {"
    },
    {
        "line": 281,
        "fullcodeline": "if (req->CreateOptions & FILE_DIRECTORY_FILE_LE &&"
    },
    {
        "line": 287,
        "fullcodeline": "if (rc < 0)"
    },
    {
        "line": 301,
        "fullcodeline": "!(req->CreateDisposition == FILE_CREATE_LE) &&"
    },
    {
        "line": 324,
        "fullcodeline": "if (!file_present) {"
    },
    {
        "line": 342,
        "fullcodeline": "if (open_flags & O_CREAT) {"
    },
    {
        "line": 416,
        "fullcodeline": "if (!(open_flags & O_TRUNC))"
    },
    {
        "line": 421,
        "fullcodeline": "if ((req->CreateDisposition & FILE_CREATE_MASK_LE) =="
    },
    {
        "line": 462,
        "fullcodeline": "if (test_share_config_flag(work->tcon->share_conf,"
    },
    {
        "line": 564,
        "fullcodeline": "!(conn->vals->capabilities & SMB2_GLOBAL_CAP_LEASING))) {"
    },
    {
        "line": 583,
        "fullcodeline": "rc = smb_grant_oplock(work, req_op_level,"
    },
    {
        "line": 605,
        "fullcodeline": "if (IS_ERR(az_req)) {"
    },
    {
        "line": 632,
        "fullcodeline": "if (IS_ERR(context)) {"
    },
    {
        "line": 644,
        "fullcodeline": "fp->create_time = ksmbd_UnixTimeToNT(stat.ctime);"
    },
    {
        "line": 647,
        "fullcodeline": "cpu_to_le32(smb2_get_dos_mode(&stat, le32_to_cpu(req->FileAttributes)));"
    },
    {
        "line": 652,
        "fullcodeline": "smb2_new_xattrs(tcon, &path, fp);"
    },
    {
        "line": 709,
        "fullcodeline": "if (maximal_access == 0)"
    },
    {
        "line": 718,
        "fullcodeline": "le32_to_cpu(maximal_access));"
    },
    {
        "line": 772,
        "fullcodeline": "if (rc == -EINVAL)"
    },
    {
        "line": 794,
        "fullcodeline": "if (!rsp->hdr.Status)"
    },
    {
        "line": 49,
        "fullcodeline": "if ((req->CreateOptions & FILE_DIRECTORY_FILE_LE) &&"
    },
    {
        "line": 50,
        "fullcodeline": "*(char *)req->Buffer == '\\\\') {"
    },
    {
        "line": 52,
        "fullcodeline": "rc = -EINVAL;"
    },
    {
        "line": 57,
        "fullcodeline": "le16_to_cpu(req->NameLength),"
    },
    {
        "line": 60,
        "fullcodeline": "rc = PTR_ERR(name);"
    },
    {
        "line": 63,
        "fullcodeline": "name = NULL;"
    },
    {
        "line": 74,
        "fullcodeline": "rc = parse_stream_name(name, &stream_name, &s_type);"
    },
    {
        "line": 84,
        "fullcodeline": "rc = -ENOENT;"
    },
    {
        "line": 85,
        "fullcodeline": "ksmbd_debug(SMB, \"Reject open(), vetoed file: %s\\n\","
    },
    {
        "line": 91,
        "fullcodeline": "if (!name) {"
    },
    {
        "line": 119,
        "fullcodeline": "if (req->CreateOptions &"
    },
    {
        "line": 126,
        "fullcodeline": "if (req->CreateOptions & FILE_DIRECTORY_FILE_LE) {"
    },
    {
        "line": 162,
        "fullcodeline": "rc = PTR_ERR(context);"
    },
    {
        "line": 182,
        "fullcodeline": "rc = PTR_ERR(context);"
    },
    {
        "line": 193,
        "fullcodeline": "rc = PTR_ERR(context);"
    },
    {
        "line": 202,
        "fullcodeline": "context = smb2_find_context_vals(req,"
    },
    {
        "line": 282,
        "fullcodeline": "req->FileAttributes & FILE_ATTRIBUTE_NORMAL_LE) {"
    },
    {
        "line": 283,
        "fullcodeline": "rsp->hdr.Status = STATUS_NOT_A_DIRECTORY;"
    },
    {
        "line": 284,
        "fullcodeline": "rc = -EIO;"
    },
    {
        "line": 325,
        "fullcodeline": "daccess = cpu_to_le32(GENERIC_ALL_FLAGS);"
    },
    {
        "line": 343,
        "fullcodeline": "ksmbd_debug(SMB,"
    },
    {
        "line": 345,
        "fullcodeline": "rc = -EACCES;"
    },
    {
        "line": 353,
        "fullcodeline": "req->CreateOptions & FILE_DIRECTORY_FILE_LE);"
    },
    {
        "line": 371,
        "fullcodeline": "rc = smb2_set_ea(&ea_buf->ea,"
    },
    {
        "line": 417,
        "fullcodeline": "file_info = FILE_OPENED;"
    },
    {
        "line": 423,
        "fullcodeline": "file_info = FILE_SUPERSEDED;"
    },
    {
        "line": 424,
        "fullcodeline": "} else if (open_flags & O_CREAT) {"
    },
    {
        "line": 458,
        "fullcodeline": "d_inode(path.dentry->d_parent));"
    },
    {
        "line": 460,
        "fullcodeline": "ksmbd_debug(SMB, \"inherit posix acl failed : %d\\n\", posix_acl_rc);"
    },
    {
        "line": 469,
        "fullcodeline": "rc = smb2_create_sd_buffer(work, req, &path);"
    },
    {
        "line": 565,
        "fullcodeline": "if (share_ret < 0 && !S_ISDIR(file_inode(fp->filp)->i_mode)) {"
    },
    {
        "line": 566,
        "fullcodeline": "rc = share_ret;"
    },
    {
        "line": 570,
        "fullcodeline": "if (req_op_level == SMB2_OPLOCK_LEVEL_LEASE) {"
    },
    {
        "line": 587,
        "fullcodeline": "if (rc < 0)"
    },
    {
        "line": 606,
        "fullcodeline": "rc = PTR_ERR(az_req);"
    },
    {
        "line": 633,
        "fullcodeline": "rc = PTR_ERR(context);"
    },
    {
        "line": 710,
        "fullcodeline": "ksmbd_vfs_query_maximal_access(user_ns,"
    },
    {
        "line": 717,
        "fullcodeline": "le32_to_cpu(rsp->CreateContextsLength),"
    },
    {
        "line": 736,
        "fullcodeline": "le32_to_cpu(rsp->CreateContextsLength),"
    },
    {
        "line": 751,
        "fullcodeline": "le32_to_cpu(rsp->CreateContextsLength),"
    },
    {
        "line": 773,
        "fullcodeline": "rsp->hdr.Status = STATUS_INVALID_PARAMETER;"
    },
    {
        "line": 795,
        "fullcodeline": "rsp->hdr.Status = STATUS_UNEXPECTED_IO_ERROR;"
    },
    {
        "line": 798,
        "fullcodeline": "ksmbd_fd_put(work, fp);"
    },
    {
        "line": 61,
        "fullcodeline": "if (rc != -ENOMEM)"
    },
    {
        "line": 75,
        "fullcodeline": "if (rc < 0)"
    },
    {
        "line": 92,
        "fullcodeline": "rc = -ENOMEM;"
    },
    {
        "line": 115,
        "fullcodeline": "if (req->CreateOptions & FILE_SEQUENTIAL_ONLY_LE &&"
    },
    {
        "line": 116,
        "fullcodeline": "req->CreateOptions & FILE_RANDOM_ACCESS_LE)"
    },
    {
        "line": 117,
        "fullcodeline": "req->CreateOptions = ~(FILE_SEQUENTIAL_ONLY_LE);"
    },
    {
        "line": 120,
        "fullcodeline": "(FILE_OPEN_BY_FILE_ID_LE | CREATE_TREE_CONNECTION |"
    },
    {
        "line": 122,
        "fullcodeline": "rc = -EOPNOTSUPP;"
    },
    {
        "line": 204,
        "fullcodeline": "if (IS_ERR(context)) {"
    },
    {
        "line": 270,
        "fullcodeline": "if (s_type == DATA_STREAM) {"
    },
    {
        "line": 327,
        "fullcodeline": "rc = ksmbd_vfs_query_maximal_access(user_ns,"
    },
    {
        "line": 332,
        "fullcodeline": "already_permitted = true;"
    },
    {
        "line": 355,
        "fullcodeline": "if (rc == -ENOENT) {"
    },
    {
        "line": 374,
        "fullcodeline": "if (rc == -EOPNOTSUPP)"
    },
    {
        "line": 419,
        "fullcodeline": "file_info = FILE_OVERWRITTEN;"
    },
    {
        "line": 425,
        "fullcodeline": "file_info = FILE_CREATED;"
    },
    {
        "line": 464,
        "fullcodeline": "rc = smb_inherit_dacl(conn, &path, sess->user->uid,"
    },
    {
        "line": 571,
        "fullcodeline": "req_op_level = smb2_map_lease_to_oplock(lc->req_state);"
    },
    {
        "line": 572,
        "fullcodeline": "ksmbd_debug(SMB,"
    },
    {
        "line": 575,
        "fullcodeline": "rc = find_same_lease_key(sess, fp->f_ci, lc);"
    },
    {
        "line": 585,
        "fullcodeline": "le32_to_cpu(req->hdr.Id.SyncId.TreeId),"
    },
    {
        "line": 714,
        "fullcodeline": "le32_to_cpu(rsp->CreateContextsLength));"
    },
    {
        "line": 724,
        "fullcodeline": "*next_ptr = cpu_to_le32(next_off);"
    },
    {
        "line": 733,
        "fullcodeline": "le32_to_cpu(rsp->CreateContextsLength));"
    },
    {
        "line": 743,
        "fullcodeline": "*next_ptr = cpu_to_le32(next_off);"
    },
    {
        "line": 758,
        "fullcodeline": "*next_ptr = cpu_to_le32(next_off);"
    },
    {
        "line": 62,
        "fullcodeline": "rc = -ENOENT;"
    },
    {
        "line": 69,
        "fullcodeline": "if (!test_share_config_flag(work->tcon->share_conf,"
    },
    {
        "line": 71,
        "fullcodeline": "rc = -EBADF;"
    },
    {
        "line": 127,
        "fullcodeline": "if (req->CreateOptions & FILE_NON_DIRECTORY_FILE_LE) {"
    },
    {
        "line": 205,
        "fullcodeline": "rc = PTR_ERR(context);"
    },
    {
        "line": 236,
        "fullcodeline": "if (req->CreateDisposition == FILE_OVERWRITE_IF_LE ||"
    },
    {
        "line": 237,
        "fullcodeline": "req->CreateDisposition == FILE_OPEN_IF_LE) {"
    },
    {
        "line": 238,
        "fullcodeline": "rc = -EACCES;"
    },
    {
        "line": 239,
        "fullcodeline": "path_put(&path);"
    },
    {
        "line": 243,
        "fullcodeline": "if (!test_tree_conn_flag(tcon, KSMBD_TREE_CONN_FLAG_WRITABLE)) {"
    },
    {
        "line": 244,
        "fullcodeline": "ksmbd_debug(SMB,"
    },
    {
        "line": 246,
        "fullcodeline": "rc = -EACCES;"
    },
    {
        "line": 247,
        "fullcodeline": "path_put(&path);"
    },
    {
        "line": 250,
        "fullcodeline": "} else if (d_is_symlink(path.dentry)) {"
    },
    {
        "line": 271,
        "fullcodeline": "rc = -EIO;"
    },
    {
        "line": 272,
        "fullcodeline": "rsp->hdr.Status = STATUS_NOT_A_DIRECTORY;"
    },
    {
        "line": 275,
        "fullcodeline": "if (S_ISDIR(stat.mode) && s_type == DATA_STREAM) {"
    },
    {
        "line": 356,
        "fullcodeline": "rc = -EIO;"
    },
    {
        "line": 357,
        "fullcodeline": "rsp->hdr.Status = STATUS_OBJECT_PATH_NOT_FOUND;"
    },
    {
        "line": 365,
        "fullcodeline": "if (le32_to_cpu(ea_buf->ccontext.DataLength) <"
    },
    {
        "line": 366,
        "fullcodeline": "sizeof(struct smb2_ea_info)) {"
    },
    {
        "line": 367,
        "fullcodeline": "rc = -EINVAL;"
    },
    {
        "line": 372,
        "fullcodeline": "le32_to_cpu(ea_buf->ccontext.DataLength),"
    },
    {
        "line": 384,
        "fullcodeline": "if (daccess & ~(FILE_READ_ATTRIBUTES_LE | FILE_READ_CONTROL_LE)) {"
    },
    {
        "line": 774,
        "fullcodeline": "else if (rc == -EOPNOTSUPP)"
    },
    {
        "line": 128,
        "fullcodeline": "rc = -EINVAL;"
    },
    {
        "line": 165,
        "fullcodeline": "ea_buf = (struct create_ea_buf_req *)context;"
    },
    {
        "line": 185,
        "fullcodeline": "ksmbd_debug(SMB,"
    },
    {
        "line": 196,
        "fullcodeline": "ksmbd_debug(SMB, \"get timewarp context\\n\");"
    },
    {
        "line": 197,
        "fullcodeline": "rc = -EBADF;"
    },
    {
        "line": 251,
        "fullcodeline": "rc = -EACCES;"
    },
    {
        "line": 252,
        "fullcodeline": "path_put(&path);"
    },
    {
        "line": 276,
        "fullcodeline": "rc = -EIO;"
    },
    {
        "line": 277,
        "fullcodeline": "rsp->hdr.Status = STATUS_FILE_IS_A_DIRECTORY;"
    },
    {
        "line": 385,
        "fullcodeline": "rc = inode_permission(user_ns,"
    },
    {
        "line": 475,
        "fullcodeline": "if (test_share_config_flag(work->tcon->share_conf,"
    },
    {
        "line": 618,
        "fullcodeline": "alloc_size = le64_to_cpu(az_req->AllocationSize);"
    },
    {
        "line": 619,
        "fullcodeline": "ksmbd_debug(SMB,"
    },
    {
        "line": 622,
        "fullcodeline": "smb_break_all_levII_oplock(work, fp, 1);"
    },
    {
        "line": 623,
        "fullcodeline": "err = vfs_fallocate(fp->filp, FALLOC_FL_KEEP_SIZE, 0,"
    },
    {
        "line": 636,
        "fullcodeline": "ksmbd_debug(SMB, \"get query on disk id context\\n\");"
    },
    {
        "line": 775,
        "fullcodeline": "rsp->hdr.Status = STATUS_NOT_SUPPORTED;"
    },
    {
        "line": 172,
        "fullcodeline": "if (req->CreateOptions & FILE_NO_EA_KNOWLEDGE_LE) {"
    },
    {
        "line": 472,
        "fullcodeline": "ksmbd_vfs_set_init_posix_acl(user_ns,"
    },
    {
        "line": 479,
        "fullcodeline": "int pntsd_size, ace_num = 0;"
    },
    {
        "line": 481,
        "fullcodeline": "ksmbd_acls_fattr(&fattr, user_ns, inode);"
    },
    {
        "line": 487,
        "fullcodeline": "pntsd = kmalloc(sizeof(struct smb_ntsd) +"
    },
    {
        "line": 495,
        "fullcodeline": "rc = build_sec_desc(user_ns,"
    },
    {
        "line": 508,
        "fullcodeline": "rc = ksmbd_vfs_set_sd_xattr(conn,"
    },
    {
        "line": 578,
        "fullcodeline": "} else if (open_flags == O_RDONLY &&"
    },
    {
        "line": 579,
        "fullcodeline": "(req_op_level == SMB2_OPLOCK_LEVEL_BATCH ||"
    },
    {
        "line": 581,
        "fullcodeline": "req_op_level = SMB2_OPLOCK_LEVEL_II;"
    },
    {
        "line": 625,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 130,
        "fullcodeline": "} else if (req->CreateOptions & FILE_NO_COMPRESSION_LE) {"
    },
    {
        "line": 168,
        "fullcodeline": "sizeof(struct create_ea_buf_req)) {"
    },
    {
        "line": 169,
        "fullcodeline": "rc = -EINVAL;"
    },
    {
        "line": 173,
        "fullcodeline": "rsp->hdr.Status = STATUS_ACCESS_DENIED;"
    },
    {
        "line": 174,
        "fullcodeline": "rc = -EACCES;"
    },
    {
        "line": 208,
        "fullcodeline": "struct create_posix *posix ="
    },
    {
        "line": 216,
        "fullcodeline": "ksmbd_debug(SMB, \"get posix context\\n\");"
    },
    {
        "line": 218,
        "fullcodeline": "posix_mode = le32_to_cpu(posix->Mode);"
    },
    {
        "line": 386,
        "fullcodeline": "d_inode(path.dentry),"
    },
    {
        "line": 391,
        "fullcodeline": "if ((daccess & FILE_DELETE_LE) ||"
    },
    {
        "line": 392,
        "fullcodeline": "(req->CreateOptions & FILE_DELETE_ON_CLOSE_LE)) {"
    },
    {
        "line": 393,
        "fullcodeline": "rc = ksmbd_vfs_may_delete(user_ns,"
    },
    {
        "line": 492,
        "fullcodeline": "if (!pntsd)"
    },
    {
        "line": 580,
        "fullcodeline": "req_op_level == SMB2_OPLOCK_LEVEL_EXCLUSIVE))"
    },
    {
        "line": 614,
        "fullcodeline": "sizeof(struct create_alloc_size_req)) {"
    },
    {
        "line": 615,
        "fullcodeline": "rc = -EINVAL;"
    },
    {
        "line": 626,
        "fullcodeline": "ksmbd_debug(SMB,"
    },
    {
        "line": 131,
        "fullcodeline": "req->CreateOptions = ~(FILE_NO_COMPRESSION_LE);"
    },
    {
        "line": 166,
        "fullcodeline": "if (le16_to_cpu(context->DataOffset) +"
    },
    {
        "line": 167,
        "fullcodeline": "le32_to_cpu(context->DataLength) <"
    },
    {
        "line": 483,
        "fullcodeline": "ace_num = fattr.cf_acls->a_count;"
    },
    {
        "line": 485,
        "fullcodeline": "ace_num += fattr.cf_dacls->a_count;"
    },
    {
        "line": 497,
        "fullcodeline": "OWNER_SECINFO |"
    },
    {
        "line": 612,
        "fullcodeline": "if (le16_to_cpu(az_req->ccontext.DataOffset) +"
    },
    {
        "line": 613,
        "fullcodeline": "le32_to_cpu(az_req->ccontext.DataLength) <"
    },
    {
        "line": 776,
        "fullcodeline": "else if (rc == -EACCES || rc == -ESTALE || rc == -EXDEV)"
    },
    {
        "line": 777,
        "fullcodeline": "rsp->hdr.Status = STATUS_ACCESS_DENIED;"
    },
    {
        "line": 212,
        "fullcodeline": "sizeof(struct create_posix) - 4) {"
    },
    {
        "line": 213,
        "fullcodeline": "rc = -EINVAL;"
    },
    {
        "line": 490,
        "fullcodeline": "sizeof(struct smb_ace) * ace_num * 2,"
    },
    {
        "line": 210,
        "fullcodeline": "if (le16_to_cpu(context->DataOffset) +"
    },
    {
        "line": 211,
        "fullcodeline": "le32_to_cpu(context->DataLength) <"
    },
    {
        "line": 489,
        "fullcodeline": "sizeof(struct smb_acl) +"
    },
    {
        "line": 778,
        "fullcodeline": "else if (rc == -ENOENT)"
    },
    {
        "line": 488,
        "fullcodeline": "sizeof(struct smb_sid) * 3 +"
    },
    {
        "line": 779,
        "fullcodeline": "rsp->hdr.Status = STATUS_OBJECT_NAME_INVALID;"
    },
    {
        "line": 780,
        "fullcodeline": "else if (rc == -EPERM)"
    },
    {
        "line": 781,
        "fullcodeline": "rsp->hdr.Status = STATUS_SHARING_VIOLATION;"
    },
    {
        "line": 782,
        "fullcodeline": "else if (rc == -EBUSY)"
    },
    {
        "line": 783,
        "fullcodeline": "rsp->hdr.Status = STATUS_DELETE_PENDING;"
    },
    {
        "line": 784,
        "fullcodeline": "else if (rc == -EBADF)"
    },
    {
        "line": 785,
        "fullcodeline": "rsp->hdr.Status = STATUS_OBJECT_NAME_NOT_FOUND;"
    },
    {
        "line": 786,
        "fullcodeline": "else if (rc == -ENOEXEC)"
    },
    {
        "line": 787,
        "fullcodeline": "rsp->hdr.Status = STATUS_DUPLICATE_OBJECTID;"
    },
    {
        "line": 788,
        "fullcodeline": "else if (rc == -ENXIO)"
    },
    {
        "line": 789,
        "fullcodeline": "rsp->hdr.Status = STATUS_NO_SUCH_DEVICE;"
    },
    {
        "line": 790,
        "fullcodeline": "else if (rc == -EEXIST)"
    },
    {
        "line": 791,
        "fullcodeline": "rsp->hdr.Status = STATUS_OBJECT_NAME_COLLISION;"
    },
    {
        "line": 792,
        "fullcodeline": "else if (rc == -EMFILE)"
    },
    {
        "line": 793,
        "fullcodeline": "rsp->hdr.Status = STATUS_INSUFFICIENT_RESOURCES;"
    }
]