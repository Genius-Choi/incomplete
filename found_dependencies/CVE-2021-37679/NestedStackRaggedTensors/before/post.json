[
    {
        "line": 5,
        "fullcodeline": "output_ragged->mutable_nested_splits()->reserve(output_ragged_rank);"
    },
    {
        "line": 6,
        "fullcodeline": "const int dims = nested_dim_sizes.size();"
    },
    {
        "line": 21,
        "fullcodeline": "int splits_size = ragged_components.size() + 1;"
    },
    {
        "line": 22,
        "fullcodeline": "output_ragged->append_splits("
    },
    {
        "line": 24,
        "fullcodeline": "auto dims_splits_vec ="
    },
    {
        "line": 26,
        "fullcodeline": "dims_splits_vec(0) = 0;"
    },
    {
        "line": 81,
        "fullcodeline": "int values_size = component_values_shape.dim_size(0);"
    },
    {
        "line": 92,
        "fullcodeline": "component_values_shape.set_dim(0, values_size);"
    },
    {
        "line": 93,
        "fullcodeline": "output_ragged->set_values("
    },
    {
        "line": 95,
        "fullcodeline": "auto output_values_flat ="
    },
    {
        "line": 97,
        "fullcodeline": "int values_index = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "for (int i = 0; i < dims - 1; i++) {"
    },
    {
        "line": 23,
        "fullcodeline": "Tensor(DataTypeToEnum<SPLIT_TYPE>::value, TensorShape({splits_size})));"
    },
    {
        "line": 25,
        "fullcodeline": "output_ragged->mutable_splits(dims - 1)->vec<SPLIT_TYPE>();"
    },
    {
        "line": 27,
        "fullcodeline": "for (int i = 0; i < ragged_components.size(); i++) {"
    },
    {
        "line": 36,
        "fullcodeline": "for (int i = 0; i < input_ragged_rank; i++) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (ragged_components.empty()) {"
    },
    {
        "line": 82,
        "fullcodeline": "for (int i = 1; i < ragged_components.size(); i++) {"
    },
    {
        "line": 94,
        "fullcodeline": "Tensor(DataTypeToEnum<VALUE_TYPE>::value, component_values_shape));"
    },
    {
        "line": 96,
        "fullcodeline": "output_ragged->mutable_values()->flat_outer_dims<VALUE_TYPE, 2>();"
    },
    {
        "line": 98,
        "fullcodeline": "for (int i = 0; i < ragged_components.size(); i++) {"
    },
    {
        "line": 112,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 10,
        "fullcodeline": "int dims_splits_size = nested_dim_sizes[i] + 1;"
    },
    {
        "line": 11,
        "fullcodeline": "output_ragged->append_splits(Tensor(DataTypeToEnum<SPLIT_TYPE>::value,"
    },
    {
        "line": 13,
        "fullcodeline": "auto splits_vec = output_ragged->mutable_splits(i)->vec<SPLIT_TYPE>();"
    },
    {
        "line": 14,
        "fullcodeline": "int split_diff = nested_dim_sizes[i + 1];"
    },
    {
        "line": 28,
        "fullcodeline": "int split_val = ragged_components[i].values().shape().dim_size(0);"
    },
    {
        "line": 32,
        "fullcodeline": "dims_splits_vec(i + 1) = dims_splits_vec(i) + split_val;"
    },
    {
        "line": 37,
        "fullcodeline": "int split_index = dims + i;"
    },
    {
        "line": 38,
        "fullcodeline": "int split_size = 1;"
    },
    {
        "line": 44,
        "fullcodeline": "output_ragged->append_splits("
    },
    {
        "line": 46,
        "fullcodeline": "auto splits_vec ="
    },
    {
        "line": 48,
        "fullcodeline": "splits_vec(0) = 0;"
    },
    {
        "line": 49,
        "fullcodeline": "SPLIT_TYPE last_split_value = 0;"
    },
    {
        "line": 50,
        "fullcodeline": "int index = 1;"
    },
    {
        "line": 75,
        "fullcodeline": "component_values_shape = TensorShape({0});"
    },
    {
        "line": 90,
        "fullcodeline": "values_size += ragged_components[i].values().shape().dim_size(0);"
    },
    {
        "line": 99,
        "fullcodeline": "auto component_values_flat ="
    },
    {
        "line": 101,
        "fullcodeline": "int num_inner_elements = ragged_components[i].values().NumElements();"
    },
    {
        "line": 15,
        "fullcodeline": "for (int j = 0; j < dims_splits_size; j++) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (input_ragged_rank != 0 && ragged_components[i].ragged_rank() > 0) {"
    },
    {
        "line": 39,
        "fullcodeline": "for (int j = 0; j < ragged_components.size(); j++) {"
    },
    {
        "line": 45,
        "fullcodeline": "Tensor(DataTypeToEnum<SPLIT_TYPE>::value, TensorShape({split_size})));"
    },
    {
        "line": 47,
        "fullcodeline": "output_ragged->mutable_splits(split_index)->vec<SPLIT_TYPE>();"
    },
    {
        "line": 51,
        "fullcodeline": "for (int j = 0; j < ragged_components.size(); j++) {"
    },
    {
        "line": 77,
        "fullcodeline": "component_values_shape = ragged_components[0].values().shape();"
    },
    {
        "line": 83,
        "fullcodeline": "if (ragged_components[i].values().dims() != component_values_shape.dims()) {"
    },
    {
        "line": 100,
        "fullcodeline": "ragged_components[i].values().flat_outer_dims<VALUE_TYPE, 2>();"
    },
    {
        "line": 102,
        "fullcodeline": "if (ragged_components[i].values().dim_size(0) > 0) {"
    },
    {
        "line": 105,
        "fullcodeline": "for (int j = 0; j < ragged_components[i].values().dim_size(0);"
    },
    {
        "line": 106,
        "fullcodeline": "j++, values_index++) {"
    },
    {
        "line": 12,
        "fullcodeline": "TensorShape({dims_splits_size})));"
    },
    {
        "line": 16,
        "fullcodeline": "splits_vec(j) = j * split_diff;"
    },
    {
        "line": 30,
        "fullcodeline": "split_val = ragged_components[i].splits(0).NumElements() - 1;"
    },
    {
        "line": 56,
        "fullcodeline": "auto component_splits_vec ="
    },
    {
        "line": 61,
        "fullcodeline": "last_split_value = splits_vec(index - 1);"
    },
    {
        "line": 103,
        "fullcodeline": "num_inner_elements /= ragged_components[i].values().dim_size(0);"
    },
    {
        "line": 40,
        "fullcodeline": "if (!ragged_components[j].nested_splits().empty()) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (ragged_components[j].nested_splits().empty()) {"
    },
    {
        "line": 57,
        "fullcodeline": "ragged_components[j].splits(i).vec<SPLIT_TYPE>();"
    },
    {
        "line": 58,
        "fullcodeline": "for (int k = 1; k < component_splits_vec.size(); k++, index++) {"
    },
    {
        "line": 84,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 107,
        "fullcodeline": "for (int k = 0; k < num_inner_elements; k++) {"
    },
    {
        "line": 41,
        "fullcodeline": "split_size += ragged_components[j].splits(i).NumElements() - 1;"
    },
    {
        "line": 59,
        "fullcodeline": "splits_vec(index) = component_splits_vec(k) + last_split_value;"
    },
    {
        "line": 87,
        "fullcodeline": "component_values_shape.DebugString(), \", values shape at index \", i,"
    },
    {
        "line": 88,
        "fullcodeline": "\": \", ragged_components[i].values().shape().DebugString());"
    },
    {
        "line": 108,
        "fullcodeline": "output_values_flat(values_index, k) = component_values_flat(j, k);"
    }
]