[
    {
        "line": 2,
        "fullcodeline": "from flask_login import current_user"
    },
    {
        "line": 4,
        "fullcodeline": "default_redirect_url = request.script_root + url_for(\"index\")"
    },
    {
        "line": 5,
        "fullcodeline": "redirect_url = request.args.get(\"redirect\", default_redirect_url)"
    },
    {
        "line": 7,
        "fullcodeline": "parsed = urlparse(redirect_url)  # check if redirect url is valid"
    },
    {
        "line": 14,
        "fullcodeline": "permissions = sorted("
    },
    {
        "line": 27,
        "fullcodeline": "user_id = request.args.get(\"user_id\", \"\")"
    },
    {
        "line": 34,
        "fullcodeline": "render_kwargs = {"
    },
    {
        "line": 8,
        "fullcodeline": "if parsed.scheme != \"\" or parsed.netloc != \"\":"
    },
    {
        "line": 24,
        "fullcodeline": "if not permissions:"
    },
    {
        "line": 29,
        "fullcodeline": "if (not user_id or current_user.get_id() == user_id) and has_permissions("
    },
    {
        "line": 53,
        "fullcodeline": "return render_template(\"login.jinja2\", **render_kwargs)"
    },
    {
        "line": 9,
        "fullcodeline": "_logger.warning("
    },
    {
        "line": 12,
        "fullcodeline": "redirect_url = default_redirect_url"
    },
    {
        "line": 15,
        "fullcodeline": "filter("
    },
    {
        "line": 25,
        "fullcodeline": "permissions = [Permissions.STATUS, Permissions.SETTINGS_READ]"
    },
    {
        "line": 43,
        "fullcodeline": "additional_assets = _add_additional_assets(\"octoprint.theming.login\")"
    },
    {
        "line": 46,
        "fullcodeline": "additional_assets += _add_additional_assets(\"octoprint.plugin.forcelogin.theming\")"
    },
    {
        "line": 47,
        "fullcodeline": "additional_assets += _add_additional_assets(\"octoprint.plugin.loginui.theming\")"
    },
    {
        "line": 49,
        "fullcodeline": "render_kwargs.update({\"theming\": additional_assets})"
    },
    {
        "line": 10,
        "fullcodeline": "f\"Got an invalid redirect URL with the login attempt, misconfiguration or attack attempt: {redirect_url}\""
    },
    {
        "line": 17,
        "fullcodeline": "map("
    },
    {
        "line": 30,
        "fullcodeline": "*permissions"
    },
    {
        "line": 32,
        "fullcodeline": "return redirect(redirect_url)"
    },
    {
        "line": 37,
        "fullcodeline": "\"permission_names\": map(lambda x: x.get_name(), permissions),"
    },
    {
        "line": 39,
        "fullcodeline": "\"logged_in\": not current_user.is_anonymous,"
    },
    {
        "line": 51,
        "fullcodeline": "_logger.exception(\"Error processing theming CSS, ignoring\")"
    },
    {
        "line": 19,
        "fullcodeline": "request.args.get(\"permissions\", \"\").split(\",\"),"
    }
]