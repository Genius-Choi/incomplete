[
    {
        "line": 4,
        "fullcodeline": "GF_DasherCtx *ctx = gf_filter_get_udta(filter);"
    },
    {
        "line": 6,
        "fullcodeline": "Bool seg_done = GF_FALSE;"
    },
    {
        "line": 7,
        "fullcodeline": "u32 nb_seg_waiting = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "u32 nb_seg_active = 0;"
    },
    {
        "line": 55,
        "fullcodeline": "count = gf_list_count(ctx->current_period->streams);"
    },
    {
        "line": 88,
        "fullcodeline": "nb_init = has_init = nb_reg_done = 0;"
    },
    {
        "line": 1134,
        "fullcodeline": "nb_init = 0;"
    },
    {
        "line": 1151,
        "fullcodeline": "dasher_format_report(filter, ctx);"
    },
    {
        "line": 1232,
        "fullcodeline": "gf_filter_prevent_blocking(filter, GF_FALSE);"
    },
    {
        "line": 1233,
        "fullcodeline": "ctx->force_period_switch = GF_FALSE;"
    },
    {
        "line": 1235,
        "fullcodeline": "e = dasher_switch_period(filter, ctx);"
    },
    {
        "line": 14,
        "fullcodeline": "if (!ctx->utc_initialized) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (ctx->sreg && !ctx->state && ctx->mpd && ctx->mpd->gpac_next_ntp_ms) {"
    },
    {
        "line": 90,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 1128,
        "fullcodeline": "if (nb_seg_waiting && !nb_seg_active) {"
    },
    {
        "line": 1135,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 1147,
        "fullcodeline": "if (nb_reg_done && (nb_reg_done == count)) {"
    },
    {
        "line": 1189,
        "fullcodeline": "if (count && (nb_init<count)) {"
    },
    {
        "line": 1229,
        "fullcodeline": "if (ctx->sseg && !ctx->on_demand_done && !ctx->sigfrag && !ctx->do_index && !ctx->index_media_duration) {"
    },
    {
        "line": 1237,
        "fullcodeline": "if (e==GF_EOS) {"
    },
    {
        "line": 11,
        "fullcodeline": "gf_filter_abort(filter);"
    },
    {
        "line": 15,
        "fullcodeline": "dasher_init_utc(filter, ctx);"
    },
    {
        "line": 22,
        "fullcodeline": "s64 diff = (s64) ctx->mpd->gpac_next_ntp_ms;"
    },
    {
        "line": 23,
        "fullcodeline": "diff -= (s64) gf_net_get_ntp_ms();"
    },
    {
        "line": 38,
        "fullcodeline": "is_eos = gf_filter_end_of_session(filter);"
    },
    {
        "line": 42,
        "fullcodeline": "e = dasher_setup_period(filter, ctx, NULL);"
    },
    {
        "line": 48,
        "fullcodeline": "ctx->check_connections = GF_FALSE;"
    },
    {
        "line": 57,
        "fullcodeline": "u64 min_ts=0, min_timescale = 0;"
    },
    {
        "line": 58,
        "fullcodeline": "u32 num_ready=0, num_blocked=0;"
    },
    {
        "line": 81,
        "fullcodeline": "ctx->min_cts_period.num = min_ts;"
    },
    {
        "line": 82,
        "fullcodeline": "ctx->min_cts_period.den = min_timescale;"
    },
    {
        "line": 92,
        "fullcodeline": "GF_DashStream *ds = gf_list_get(ctx->current_period->streams, i);"
    },
    {
        "line": 93,
        "fullcodeline": "assert(ds);"
    },
    {
        "line": 95,
        "fullcodeline": "base_ds = ds->muxed_base ? ds->muxed_base : ds;"
    },
    {
        "line": 1129,
        "fullcodeline": "ctx->last_min_segment_start_time = ctx->min_segment_start_time;"
    },
    {
        "line": 1130,
        "fullcodeline": "ctx->min_segment_start_time = 0;"
    },
    {
        "line": 1136,
        "fullcodeline": "GF_DashStream *ds = gf_list_get(ctx->current_period->streams, i);"
    },
    {
        "line": 1148,
        "fullcodeline": "ctx->mpd->gpac_mpd_time = 0;"
    },
    {
        "line": 1154,
        "fullcodeline": "Bool update_period = GF_FALSE;"
    },
    {
        "line": 1155,
        "fullcodeline": "Bool update_manifest = GF_FALSE;"
    },
    {
        "line": 1220,
        "fullcodeline": "diff = gf_sys_clock_high_res() - ctx->last_evt_check_time;"
    },
    {
        "line": 1226,
        "fullcodeline": "ctx->nb_seg_url_pending = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "if (!ctx->utc_initialized) return GF_OK;"
    },
    {
        "line": 24,
        "fullcodeline": "if (diff>100) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (gf_filter_connections_pending(filter))"
    },
    {
        "line": 39,
        "fullcodeline": "if (! dasher_check_period_ready(ctx, is_eos)) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (gf_filter_connections_pending(filter))"
    },
    {
        "line": 59,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (ctx->dmode == GF_MPD_TYPE_DYNAMIC_LAST) {"
    },
    {
        "line": 1138,
        "fullcodeline": "if (ds->done || ds->subdur_done) nb_init++;"
    },
    {
        "line": 1196,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 1215,
        "fullcodeline": "if (!ctx->last_evt_check_time) {"
    },
    {
        "line": 1221,
        "fullcodeline": "if (diff < 10000000) {"
    },
    {
        "line": 1238,
        "fullcodeline": "if (!ctx->is_eos) {"
    },
    {
        "line": 25,
        "fullcodeline": "GF_LOG(GF_LOG_DEBUG, GF_LOG_DASH, (\"[Dasher] Next generation scheduled in %d ms, nothing to do\\n\", diff));"
    },
    {
        "line": 26,
        "fullcodeline": "gf_filter_ask_rt_reschedule(filter, (u32) (diff*1000));"
    },
    {
        "line": 60,
        "fullcodeline": "GF_DashStream *ds = gf_list_get(ctx->current_period->streams, i);"
    },
    {
        "line": 64,
        "fullcodeline": "GF_FilterPacket *pck = gf_filter_pid_get_packet(ds->ipid);"
    },
    {
        "line": 66,
        "fullcodeline": "u64 ts = gf_filter_pck_get_cts(pck);"
    },
    {
        "line": 75,
        "fullcodeline": "num_ready++;"
    },
    {
        "line": 85,
        "fullcodeline": "count = gf_list_count(ctx->current_period->streams);"
    },
    {
        "line": 104,
        "fullcodeline": "ds->done = 1;"
    },
    {
        "line": 113,
        "fullcodeline": "Bool seg_over = GF_FALSE;"
    },
    {
        "line": 114,
        "fullcodeline": "Bool is_packet_split = GF_FALSE;"
    },
    {
        "line": 115,
        "fullcodeline": "Bool is_queue_flush = GF_FALSE;"
    },
    {
        "line": 117,
        "fullcodeline": "GF_FilterPacket *pck = NULL;"
    },
    {
        "line": 335,
        "fullcodeline": "sap_type = gf_filter_pck_get_sap(pck);"
    },
    {
        "line": 336,
        "fullcodeline": "ds->loop_state = 0;"
    },
    {
        "line": 338,
        "fullcodeline": "cts = gf_filter_pck_get_cts(pck);"
    },
    {
        "line": 339,
        "fullcodeline": "dts = gf_filter_pck_get_dts(pck);"
    },
    {
        "line": 357,
        "fullcodeline": "pcont_cts = cts;"
    },
    {
        "line": 453,
        "fullcodeline": "nb_init++;"
    },
    {
        "line": 466,
        "fullcodeline": "cts = dasher_translate_cts(ds, cts);"
    },
    {
        "line": 467,
        "fullcodeline": "dts -= ds->first_dts;"
    },
    {
        "line": 474,
        "fullcodeline": "dur = o_dur = gf_filter_pck_get_duration(pck);"
    },
    {
        "line": 475,
        "fullcodeline": "pcont_cts += dur;"
    },
    {
        "line": 479,
        "fullcodeline": "split_dur = 0;"
    },
    {
        "line": 480,
        "fullcodeline": "split_dur_next = 0;"
    },
    {
        "line": 483,
        "fullcodeline": "check_dur = 0;"
    },
    {
        "line": 501,
        "fullcodeline": "nb_seg_active++;"
    },
    {
        "line": 504,
        "fullcodeline": "orig_cts = cts;"
    },
    {
        "line": 984,
        "fullcodeline": "dst = NULL;"
    },
    {
        "line": 1094,
        "fullcodeline": "ds->cumulated_dur += dur;"
    },
    {
        "line": 1156,
        "fullcodeline": "if (ctx->purge_segments) update_period = GF_TRUE;"
    },
    {
        "line": 1198,
        "fullcodeline": "GF_DashStream *ds = gf_list_get(ctx->current_period->streams, i);"
    },
    {
        "line": 1200,
        "fullcodeline": "eods_pck = gf_filter_pck_new_alloc(ds->opid, 0, NULL);"
    },
    {
        "line": 1202,
        "fullcodeline": "ds->done = 2;"
    },
    {
        "line": 1203,
        "fullcodeline": "ds->subdur_done = GF_TRUE;"
    },
    {
        "line": 1204,
        "fullcodeline": "gf_filter_pck_set_property(eods_pck, GF_PROP_PCK_EODS, &PROP_BOOL(GF_TRUE) );"
    },
    {
        "line": 1205,
        "fullcodeline": "gf_filter_pck_send(eods_pck);"
    },
    {
        "line": 1207,
        "fullcodeline": "dasher_drop_input(ctx, ds, GF_TRUE);"
    },
    {
        "line": 1216,
        "fullcodeline": "ctx->last_evt_check_time = gf_sys_clock_high_res();"
    },
    {
        "line": 1217,
        "fullcodeline": "gf_filter_prevent_blocking(filter, GF_TRUE);"
    },
    {
        "line": 1222,
        "fullcodeline": "gf_filter_ask_rt_reschedule(filter, 1000);"
    },
    {
        "line": 1248,
        "fullcodeline": "ctx->is_eos = GF_TRUE;"
    },
    {
        "line": 1249,
        "fullcodeline": "gf_filter_pid_set_eos(ctx->opid);"
    },
    {
        "line": 40,
        "fullcodeline": "return is_eos ? GF_SERVICE_ERROR : GF_OK;"
    },
    {
        "line": 65,
        "fullcodeline": "if (!pck) continue;"
    },
    {
        "line": 69,
        "fullcodeline": "if (ds->pts_minus_cts<0)"
    },
    {
        "line": 71,
        "fullcodeline": "if (!min_ts || gf_timestamp_less(ts, ds->timescale, min_ts, min_timescale)) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (gf_filter_pid_would_block(ds->ipid)) num_blocked++;"
    },
    {
        "line": 79,
        "fullcodeline": "if (num_ready < num_blocked) return GF_OK;"
    },
    {
        "line": 103,
        "fullcodeline": "if (!ds->done && ds->opid) gf_filter_pid_set_eos(ds->opid);"
    },
    {
        "line": 119,
        "fullcodeline": "if (!ds->request_period_switch) {"
    },
    {
        "line": 155,
        "fullcodeline": "if (ds->sbound && pck && gf_filter_pck_is_blocking_ref(pck)) {"
    },
    {
        "line": 195,
        "fullcodeline": "if (!pck) {"
    },
    {
        "line": 340,
        "fullcodeline": "if (dts==GF_FILTER_NO_TS) dts = cts;"
    },
    {
        "line": 342,
        "fullcodeline": "if (!sap_type && (ds->sync_points_type != DASHER_SYNC_PRESENT)) {"
    },
    {
        "line": 354,
        "fullcodeline": "if ((ctx->strict_sap==DASHER_SAP_INTRA_ONLY) && (sap_type>=4))"
    },
    {
        "line": 359,
        "fullcodeline": "if (!ds->rep_init) {"
    },
    {
        "line": 461,
        "fullcodeline": "if (has_init && (nb_init==count) && (ctx->dmode==GF_MPD_TYPE_DYNAMIC) && ctx->tpl && ctx->do_mpd && !ctx->dyn_rate) {"
    },
    {
        "line": 469,
        "fullcodeline": "if (ctx->sreg && ctx->mpd->gpac_mpd_time && gf_timestamp_greater(dts, ds->timescale, ctx->mpd->gpac_mpd_time, 1000)) {"
    },
    {
        "line": 476,
        "fullcodeline": "if (ds->period_continuity_next_cts < pcont_cts)"
    },
    {
        "line": 484,
        "fullcodeline": "if (ds->stream_type==GF_STREAM_AUDIO)"
    },
    {
        "line": 490,
        "fullcodeline": "if (!base_ds->segment_started && ctx->min_segment_start_time) {"
    },
    {
        "line": 514,
        "fullcodeline": "if (ds->splitable && !ds->split_dur_next && !ds->cues && !ds->inband_cues) {"
    },
    {
        "line": 539,
        "fullcodeline": "if ((base_ds != ds) && !base_ds->seg_done && gf_timestamp_greater(cts, ds->timescale, base_ds->last_cts, base_ds->timescale) )"
    },
    {
        "line": 862,
        "fullcodeline": "if (ds->muxed_base && ds->muxed_base->done) {"
    },
    {
        "line": 881,
        "fullcodeline": "if (seg_over && dur) {"
    },
    {
        "line": 920,
        "fullcodeline": "if (cts==GF_FILTER_NO_TS) {"
    },
    {
        "line": 939,
        "fullcodeline": "if (!is_packet_split)"
    },
    {
        "line": 942,
        "fullcodeline": "if (!ds->min_cts_in_seg_plus_one)"
    },
    {
        "line": 985,
        "fullcodeline": "if (!ctx->do_index && !ctx->index_media_duration) {"
    },
    {
        "line": 1012,
        "fullcodeline": "if (!ds->segment_started) {"
    },
    {
        "line": 1071,
        "fullcodeline": "if (dst && (ctx->ntp != DASHER_NTP_KEEP))"
    },
    {
        "line": 1075,
        "fullcodeline": "if (ds->force_timescale && dst) {"
    },
    {
        "line": 1096,
        "fullcodeline": "if (ds->current_seg_state && gf_filter_pck_get_crypt_flags(pck))"
    },
    {
        "line": 1100,
        "fullcodeline": "if (ctx->gxns && dst && !ds->rep->first_tfdt_plus_one && !ds->muxed_base) {"
    },
    {
        "line": 1108,
        "fullcodeline": "if (ctx->update_report>=0)"
    },
    {
        "line": 1122,
        "fullcodeline": "if (!ds->split_dur_next)"
    },
    {
        "line": 1184,
        "fullcodeline": "ctx->force_hls_ll_manifest = GF_FALSE;"
    },
    {
        "line": 1185,
        "fullcodeline": "dasher_send_manifest(filter, ctx, GF_FALSE);"
    },
    {
        "line": 1201,
        "fullcodeline": "if (!eods_pck) return GF_OUT_OF_MEM;"
    },
    {
        "line": 70,
        "fullcodeline": "ts = ts + ds->pts_minus_cts;"
    },
    {
        "line": 72,
        "fullcodeline": "min_ts = ts;"
    },
    {
        "line": 73,
        "fullcodeline": "min_timescale = ds->timescale;"
    },
    {
        "line": 120,
        "fullcodeline": "assert(ds->period == ctx->current_period);"
    },
    {
        "line": 121,
        "fullcodeline": "pck = gf_filter_pid_get_packet(ds->ipid);"
    },
    {
        "line": 156,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_DASH, (\"[Dasher] Cannot use `sbound` with blocking input packet references, disabling packet buffering for PID %s\\n\", gf_filter_pid_get_name(ds->ipid) ));"
    },
    {
        "line": 157,
        "fullcodeline": "ds->sbound = DASHER_BOUNDS_OUT;"
    },
    {
        "line": 163,
        "fullcodeline": "pck = NULL;"
    },
    {
        "line": 196,
        "fullcodeline": "Bool ds_is_done=GF_FALSE;"
    },
    {
        "line": 319,
        "fullcodeline": "u32 sn = gf_filter_pck_get_seq_num(pck);"
    },
    {
        "line": 343,
        "fullcodeline": "ds->sync_points_type = DASHER_SYNC_PRESENT;"
    },
    {
        "line": 355,
        "fullcodeline": "sap_type = 0;"
    },
    {
        "line": 444,
        "fullcodeline": "ds->first_cts = cts;"
    },
    {
        "line": 445,
        "fullcodeline": "ds->first_dts = dts;"
    },
    {
        "line": 449,
        "fullcodeline": "ds->rep_init++;"
    },
    {
        "line": 450,
        "fullcodeline": "has_init++;"
    },
    {
        "line": 456,
        "fullcodeline": "cts += ds->ts_offset;"
    },
    {
        "line": 457,
        "fullcodeline": "dts += ds->ts_offset;"
    },
    {
        "line": 462,
        "fullcodeline": "e = dasher_send_manifest(filter, ctx, GF_TRUE);"
    },
    {
        "line": 470,
        "fullcodeline": "nb_reg_done++;"
    },
    {
        "line": 477,
        "fullcodeline": "ds->period_continuity_next_cts = pcont_cts;"
    },
    {
        "line": 485,
        "fullcodeline": "check_dur = dur;"
    },
    {
        "line": 491,
        "fullcodeline": "orig_cts = cts;"
    },
    {
        "line": 499,
        "fullcodeline": "cts = orig_cts;"
    },
    {
        "line": 506,
        "fullcodeline": "cts += ds->split_dur_next;"
    },
    {
        "line": 507,
        "fullcodeline": "assert(dur > ds->split_dur_next);"
    },
    {
        "line": 508,
        "fullcodeline": "dur -= ds->split_dur_next;"
    },
    {
        "line": 509,
        "fullcodeline": "split_dur_next = ds->split_dur_next;"
    },
    {
        "line": 510,
        "fullcodeline": "ds->split_dur_next = 0;"
    },
    {
        "line": 511,
        "fullcodeline": "is_packet_split = GF_TRUE;"
    },
    {
        "line": 515,
        "fullcodeline": "Bool do_split = GF_FALSE;"
    },
    {
        "line": 543,
        "fullcodeline": "ds->seek_to_pck = 0;"
    },
    {
        "line": 863,
        "fullcodeline": "seg_over = GF_FALSE;"
    },
    {
        "line": 882,
        "fullcodeline": "assert(!ds->seg_done);"
    },
    {
        "line": 896,
        "fullcodeline": "ds->seg_done = GF_TRUE;"
    },
    {
        "line": 904,
        "fullcodeline": "dasher_inject_eods(ctx, ds, GF_FALSE);"
    },
    {
        "line": 906,
        "fullcodeline": "ds->first_cts_in_next_seg = cts;"
    },
    {
        "line": 907,
        "fullcodeline": "assert(base_ds->nb_comp_done < base_ds->nb_comp);"
    },
    {
        "line": 908,
        "fullcodeline": "base_ds->nb_comp_done ++;"
    },
    {
        "line": 921,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_DASH, (\"[Dasher] WARNING! Source packet has no timestamp !\\n\"));"
    },
    {
        "line": 923,
        "fullcodeline": "cts = ds->last_cts;"
    },
    {
        "line": 924,
        "fullcodeline": "dts = ds->last_dts;"
    },
    {
        "line": 940,
        "fullcodeline": "ds->nb_pck ++;"
    },
    {
        "line": 943,
        "fullcodeline": "ds->min_cts_in_seg_plus_one = cts+1;"
    },
    {
        "line": 955,
        "fullcodeline": "ds->cumulated_dur += dur;"
    },
    {
        "line": 971,
        "fullcodeline": "const GF_PropertyValue *p = gf_filter_pck_get_property(pck, GF_PROP_PCK_FRAG_RANGE);"
    },
    {
        "line": 986,
        "fullcodeline": "dst = gf_filter_pck_new_ref(ds->opid, 0, 0, pck);"
    },
    {
        "line": 990,
        "fullcodeline": "gf_filter_pck_merge_properties(pck, dst);"
    },
    {
        "line": 1013,
        "fullcodeline": "ds->first_cts_in_seg = cts;"
    },
    {
        "line": 1017,
        "fullcodeline": "dasher_mark_segment_start(ctx, ds, dst, pck);"
    },
    {
        "line": 1018,
        "fullcodeline": "ds->segment_started = GF_TRUE;"
    },
    {
        "line": 1028,
        "fullcodeline": "u64 diff=0;"
    },
    {
        "line": 1029,
        "fullcodeline": "u8 dep_flags = gf_filter_pck_get_dependency_flags(pck);"
    },
    {
        "line": 1030,
        "fullcodeline": "u64 ts = gf_filter_pck_get_cts(pck);"
    },
    {
        "line": 1059,
        "fullcodeline": "u32 cumulated_split_dur = split_dur;"
    },
    {
        "line": 1063,
        "fullcodeline": "cumulated_split_dur += (u32) (cts - orig_cts);"
    },
    {
        "line": 1064,
        "fullcodeline": "assert( dur > split_dur);"
    },
    {
        "line": 1065,
        "fullcodeline": "assert( cumulated_split_dur <= gf_filter_pck_get_duration(pck) );"
    },
    {
        "line": 1066,
        "fullcodeline": "ds->split_dur_next = cumulated_split_dur;"
    },
    {
        "line": 1067,
        "fullcodeline": "dur = split_dur;"
    },
    {
        "line": 1072,
        "fullcodeline": "gf_filter_pck_set_property(dst, GF_PROP_PCK_SENDER_NTP, NULL);"
    },
    {
        "line": 1077,
        "fullcodeline": "ats = gf_filter_pck_get_dts(dst);"
    },
    {
        "line": 1082,
        "fullcodeline": "ats = gf_filter_pck_get_cts(dst);"
    },
    {
        "line": 1087,
        "fullcodeline": "ats = (u64) gf_filter_pck_get_duration(dst);"
    },
    {
        "line": 1097,
        "fullcodeline": "ds->current_seg_state->encrypted = GF_TRUE;"
    },
    {
        "line": 1101,
        "fullcodeline": "ds->rep->first_tfdt_plus_one = 1 + gf_filter_pck_get_dts(dst);"
    },
    {
        "line": 1102,
        "fullcodeline": "ds->rep->first_tfdt_timescale = ds->timescale;"
    },
    {
        "line": 1106,
        "fullcodeline": "gf_filter_pck_send(dst);"
    },
    {
        "line": 1109,
        "fullcodeline": "ctx->update_report++;"
    },
    {
        "line": 1113,
        "fullcodeline": "u64 rdts = gf_filter_pck_get_dts(pck);"
    },
    {
        "line": 1114,
        "fullcodeline": "gf_filter_pck_get_data(pck, &dsize);"
    },
    {
        "line": 1117,
        "fullcodeline": "ds->rate_last_dts = rdts;"
    },
    {
        "line": 1118,
        "fullcodeline": "ds->rate_media_size += dsize;"
    },
    {
        "line": 1123,
        "fullcodeline": "dasher_drop_input(ctx, ds, GF_FALSE);"
    },
    {
        "line": 1139,
        "fullcodeline": "else if (ds->seg_done && ctx->force_period_switch) nb_init++;"
    },
    {
        "line": 1160,
        "fullcodeline": "update_manifest = GF_TRUE;"
    },
    {
        "line": 1178,
        "fullcodeline": "dasher_update_period_duration(ctx, GF_FALSE);"
    },
    {
        "line": 1181,
        "fullcodeline": "dasher_send_manifest(filter, ctx, GF_FALSE);"
    },
    {
        "line": 1240,
        "fullcodeline": "ctx->dmode = GF_MPD_TYPE_DYNAMIC_LAST;"
    },
    {
        "line": 1246,
        "fullcodeline": "ctx->move_to_static = GF_FALSE;"
    },
    {
        "line": 123,
        "fullcodeline": "if ((ds->period != ctx->current_period) || ds->request_period_switch) {"
    },
    {
        "line": 142,
        "fullcodeline": "if (!pck"
    },
    {
        "line": 153,
        "fullcodeline": "is_queue_flush = GF_TRUE;"
    },
    {
        "line": 347,
        "fullcodeline": "if (!ctx->sbound && !ds->cues"
    },
    {
        "line": 362,
        "fullcodeline": "if ((ds->stream_type==GF_STREAM_VISUAL) && (ctx->profile != GF_DASH_PROFILE_FULL)) {"
    },
    {
        "line": 366,
        "fullcodeline": "if (!sap_type) {"
    },
    {
        "line": 377,
        "fullcodeline": "if (!ds->muxed_base) {"
    },
    {
        "line": 495,
        "fullcodeline": "if (gf_timestamp_greater(cts, ds->timescale, ctx->min_segment_start_time, 1000)) {"
    },
    {
        "line": 517,
        "fullcodeline": "if (gf_sys_old_arch_compat()) {"
    },
    {
        "line": 884,
        "fullcodeline": "if (ds->request_period_switch && !gf_list_count(ds->packet_queue)) {"
    },
    {
        "line": 897,
        "fullcodeline": "if (split_dur_next && ctx->do_index) {"
    },
    {
        "line": 913,
        "fullcodeline": "if (base_ds->nb_comp_done == base_ds->nb_comp) {"
    },
    {
        "line": 926,
        "fullcodeline": "u64 ncts = cts + (split_dur ? split_dur : dur);"
    },
    {
        "line": 930,
        "fullcodeline": "ncts = gf_timestamp_rescale(ncts, ds->timescale, 1000);"
    },
    {
        "line": 934,
        "fullcodeline": "ds->last_cts = cts + (split_dur ? split_dur : dur);"
    },
    {
        "line": 935,
        "fullcodeline": "ds->last_dts = dts;"
    },
    {
        "line": 936,
        "fullcodeline": "ds->est_next_dts = dts + o_dur;"
    },
    {
        "line": 949,
        "fullcodeline": "if (!ds->segment_started) {"
    },
    {
        "line": 958,
        "fullcodeline": "if (!ds->split_dur_next)"
    },
    {
        "line": 987,
        "fullcodeline": "if (!dst) return GF_OUT_OF_MEM;"
    },
    {
        "line": 997,
        "fullcodeline": "if (gf_sys_old_arch_compat() && ds->clamped_dur.num && ctx->loop"
    },
    {
        "line": 1014,
        "fullcodeline": "if (split_dur_next && (ctx->from_index==IDXMODE_SEG)) {"
    },
    {
        "line": 1019,
        "fullcodeline": "if (split_dur_next && ctx->do_index) {"
    },
    {
        "line": 1031,
        "fullcodeline": "if (ts != GF_FILTER_NO_TS) {"
    },
    {
        "line": 1078,
        "fullcodeline": "if (ats!=GF_FILTER_NO_TS) {"
    },
    {
        "line": 1083,
        "fullcodeline": "if (ats!=GF_FILTER_NO_TS) {"
    },
    {
        "line": 1115,
        "fullcodeline": "if (!ds->rate_first_dts_plus_one)"
    },
    {
        "line": 131,
        "fullcodeline": "is_queue_flush = GF_TRUE;"
    },
    {
        "line": 145,
        "fullcodeline": "&& (gf_filter_pid_is_eos(ds->ipid) || (ctx->dmode==GF_MPD_TYPE_DYNAMIC))"
    },
    {
        "line": 147,
        "fullcodeline": "u64 ddur_ms = (1000*ds->dash_dur.num)/ds->dash_dur.den;"
    },
    {
        "line": 162,
        "fullcodeline": "if (pck) gf_filter_pid_drop_packet(ds->ipid);"
    },
    {
        "line": 198,
        "fullcodeline": "e = dasher_stream_period_changed(filter, ctx, ds, (ds->request_period_switch==2) ? GF_TRUE : GF_FALSE);"
    },
    {
        "line": 204,
        "fullcodeline": "assert(gf_list_find(ctx->current_period->streams, ds)<0);"
    },
    {
        "line": 205,
        "fullcodeline": "count = gf_list_count(ctx->current_period->streams);"
    },
    {
        "line": 206,
        "fullcodeline": "i--;"
    },
    {
        "line": 210,
        "fullcodeline": "if (ds->clamp_done) ds_is_done=GF_TRUE;"
    },
    {
        "line": 229,
        "fullcodeline": "u32 ds_done = 1;"
    },
    {
        "line": 262,
        "fullcodeline": "ds->clamp_done = GF_FALSE;"
    },
    {
        "line": 264,
        "fullcodeline": "ctx->update_report = -1;"
    },
    {
        "line": 270,
        "fullcodeline": "ds->seg_done = GF_TRUE;"
    },
    {
        "line": 271,
        "fullcodeline": "seg_done = GF_TRUE;"
    },
    {
        "line": 272,
        "fullcodeline": "ds->first_cts_in_next_seg = ds->est_first_cts_in_next_seg;"
    },
    {
        "line": 273,
        "fullcodeline": "ds->est_first_cts_in_next_seg = 0;"
    },
    {
        "line": 274,
        "fullcodeline": "assert(base_ds->nb_comp_done < base_ds->nb_comp);"
    },
    {
        "line": 275,
        "fullcodeline": "base_ds->nb_comp_done ++;"
    },
    {
        "line": 325,
        "fullcodeline": "ds->nb_pck = sn-1;"
    },
    {
        "line": 348,
        "fullcodeline": "&& (ds->pts_minus_cts<0) && (ds->next_seg_start> (u32) -ds->pts_minus_cts)"
    },
    {
        "line": 350,
        "fullcodeline": "ds->next_seg_start -= (u32) -ds->pts_minus_cts;"
    },
    {
        "line": 372,
        "fullcodeline": "dasher_drop_input(ctx, ds, GF_FALSE);"
    },
    {
        "line": 407,
        "fullcodeline": "check_ts = cts;"
    },
    {
        "line": 411,
        "fullcodeline": "ds->presentation_time_offset = 0;"
    },
    {
        "line": 447,
        "fullcodeline": "ds->rep->segment_list->first_cts_offset = (s32) ((s64) ds->first_cts - (s64) ds->first_dts);"
    },
    {
        "line": 493,
        "fullcodeline": "cts += ds->split_dur_next;"
    },
    {
        "line": 496,
        "fullcodeline": "nb_seg_waiting++;"
    },
    {
        "line": 871,
        "fullcodeline": "else if (seg_over && ds->nb_samples_in_source && !ctx->loop"
    },
    {
        "line": 885,
        "fullcodeline": "e = dasher_stream_period_changed(filter, ctx, ds, (ds->request_period_switch==2) ? GF_TRUE : GF_FALSE);"
    },
    {
        "line": 890,
        "fullcodeline": "assert(gf_list_find(ctx->current_period->streams, ds)<0);"
    },
    {
        "line": 891,
        "fullcodeline": "count = gf_list_count(ctx->current_period->streams);"
    },
    {
        "line": 892,
        "fullcodeline": "i--;"
    },
    {
        "line": 898,
        "fullcodeline": "GF_MPD_SegmentURL *s = gf_list_last(ds->rep->segment_list->segment_URLs);"
    },
    {
        "line": 899,
        "fullcodeline": "s->split_last_dur = dur;"
    },
    {
        "line": 900,
        "fullcodeline": "assert(gf_filter_pck_get_duration(pck) > dur);"
    },
    {
        "line": 901,
        "fullcodeline": "ds->rep->segment_list->use_split_dur = GF_TRUE;"
    },
    {
        "line": 911,
        "fullcodeline": "ds->split_dur_next = (u32) split_dur_next;"
    },
    {
        "line": 914,
        "fullcodeline": "dasher_flush_segment(ctx, base_ds, GF_FALSE);"
    },
    {
        "line": 915,
        "fullcodeline": "seg_done = GF_TRUE;"
    },
    {
        "line": 927,
        "fullcodeline": "if (ncts>ds->est_first_cts_in_next_seg)"
    },
    {
        "line": 931,
        "fullcodeline": "if (ncts>base_ds->max_period_dur)"
    },
    {
        "line": 944,
        "fullcodeline": "else if (ds->min_cts_in_seg_plus_one - 1 > cts)"
    },
    {
        "line": 950,
        "fullcodeline": "ds->first_cts_in_seg = cts;"
    },
    {
        "line": 951,
        "fullcodeline": "dasher_mark_segment_start(ctx, ds, NULL, pck);"
    },
    {
        "line": 952,
        "fullcodeline": "ds->segment_started = GF_TRUE;"
    },
    {
        "line": 959,
        "fullcodeline": "gf_filter_pid_drop_packet(ds->ipid);"
    },
    {
        "line": 962,
        "fullcodeline": "gf_filter_pid_set_discard(ds->ipid, GF_TRUE);"
    },
    {
        "line": 963,
        "fullcodeline": "gf_filter_pid_set_eos(ctx->opid);"
    },
    {
        "line": 975,
        "fullcodeline": "p = gf_filter_pck_get_property(pck, GF_PROP_PCK_FRAG_START);"
    },
    {
        "line": 993,
        "fullcodeline": "gf_filter_pck_set_cts(dst, gf_filter_pck_get_cts(pck) + ds->ts_offset);"
    },
    {
        "line": 994,
        "fullcodeline": "gf_filter_pck_set_dts(dst, gf_filter_pck_get_dts(pck) + ds->ts_offset);"
    },
    {
        "line": 998,
        "fullcodeline": "&& (cts + 2*o_dur >= ds->ts_offset + base_ds->clamped_dur.num * ds->timescale / base_ds->clamped_dur.den)"
    },
    {
        "line": 1000,
        "fullcodeline": "u32 _dur = dur;"
    },
    {
        "line": 1002,
        "fullcodeline": "dur = (u32) (ds->clamped_dur.num * ds->timescale / ds->clamped_dur.den - (dts - ds->ts_offset) + 0.5);"
    },
    {
        "line": 1007,
        "fullcodeline": "gf_filter_pck_set_duration(dst, dur);"
    },
    {
        "line": 1008,
        "fullcodeline": "ds->est_next_dts += (s32) dur - (s32) _dur;"
    },
    {
        "line": 1015,
        "fullcodeline": "ds->first_cts_in_seg -= split_dur_next;"
    },
    {
        "line": 1020,
        "fullcodeline": "GF_MPD_SegmentURL *s = gf_list_last(ds->rep->segment_list->segment_URLs);"
    },
    {
        "line": 1021,
        "fullcodeline": "s->split_first_dur = (u32) split_dur_next;"
    },
    {
        "line": 1022,
        "fullcodeline": "assert(gf_filter_pck_get_duration(pck) > split_dur_next);"
    },
    {
        "line": 1023,
        "fullcodeline": "ds->rep->segment_list->use_split_dur = GF_TRUE;"
    },
    {
        "line": 1032,
        "fullcodeline": "cts += ds->first_cts;"
    },
    {
        "line": 1033,
        "fullcodeline": "assert(cts >= ts);"
    },
    {
        "line": 1034,
        "fullcodeline": "diff = cts - ts;"
    },
    {
        "line": 1039,
        "fullcodeline": "gf_filter_pck_set_cts(dst, cts + ds->ts_offset);"
    },
    {
        "line": 1041,
        "fullcodeline": "ts = gf_filter_pck_get_dts(pck);"
    },
    {
        "line": 1046,
        "fullcodeline": "dep_flags |= 0x1;"
    },
    {
        "line": 1047,
        "fullcodeline": "gf_filter_pck_set_dependency_flags(dst, dep_flags);"
    },
    {
        "line": 1049,
        "fullcodeline": "gf_filter_pck_set_duration(dst, dur);"
    },
    {
        "line": 1054,
        "fullcodeline": "cts -= ds->first_cts;"
    },
    {
        "line": 1061,
        "fullcodeline": "gf_filter_pck_set_duration(dst, split_dur);"
    },
    {
        "line": 1079,
        "fullcodeline": "ats = gf_timestamp_rescale(ats, ds->timescale, ds->force_timescale);"
    },
    {
        "line": 1080,
        "fullcodeline": "gf_filter_pck_set_dts(dst, ats);"
    },
    {
        "line": 1084,
        "fullcodeline": "ats = gf_timestamp_rescale(ats, ds->timescale, ds->force_timescale);"
    },
    {
        "line": 1085,
        "fullcodeline": "gf_filter_pck_set_cts(dst, ats);"
    },
    {
        "line": 1089,
        "fullcodeline": "ats = gf_timestamp_rescale(ats, ds->timescale, ds->force_timescale);"
    },
    {
        "line": 1090,
        "fullcodeline": "gf_filter_pck_set_duration(dst, (u32) ats);"
    },
    {
        "line": 1116,
        "fullcodeline": "ds->rate_first_dts_plus_one = 1 + rdts;"
    },
    {
        "line": 1161,
        "fullcodeline": "else if (ctx->dmode==GF_DASH_DYNAMIC) {"
    },
    {
        "line": 1242,
        "fullcodeline": "ctx->mpd->type = ctx->dmode;"
    },
    {
        "line": 1243,
        "fullcodeline": "GF_LOG(GF_LOG_INFO, GF_LOG_DASH, (\"[Dasher] EOS, flushing manifest as static\\n\"));"
    },
    {
        "line": 1244,
        "fullcodeline": "dasher_send_manifest(filter, ctx, GF_FALSE);"
    },
    {
        "line": 125,
        "fullcodeline": "if (!ds->sbound || !gf_list_count(ds->packet_queue)) {"
    },
    {
        "line": 144,
        "fullcodeline": "&& !ds->muxed_base"
    },
    {
        "line": 148,
        "fullcodeline": "while (ds->last_min_segment_start_time + ddur_ms < ctx->last_min_segment_start_time) {"
    },
    {
        "line": 199,
        "fullcodeline": "if (e < 0) {"
    },
    {
        "line": 231,
        "fullcodeline": "if (!ds->clamp_done && !ds->muxed_base && (ds->stream_type==GF_STREAM_TEXT)) {"
    },
    {
        "line": 255,
        "fullcodeline": "if (ctx->loop && dasher_check_loop(ctx, ds)) {"
    },
    {
        "line": 266,
        "fullcodeline": "if (!ctx->sigfrag && ds->opid)"
    },
    {
        "line": 269,
        "fullcodeline": "if (!ds->done) ds->done = ds_done;"
    },
    {
        "line": 276,
        "fullcodeline": "if (base_ds->nb_comp_done == base_ds->nb_comp) {"
    },
    {
        "line": 280,
        "fullcodeline": "if (!ds->done) {"
    },
    {
        "line": 321,
        "fullcodeline": "if (sn <= ds->seek_to_pck) {"
    },
    {
        "line": 363,
        "fullcodeline": "if ((sap_type!=GF_FILTER_SAP_1) && (sap_type!=GF_FILTER_SAP_2))"
    },
    {
        "line": 368,
        "fullcodeline": "if (!ds->presentation_time_offset)"
    },
    {
        "line": 380,
        "fullcodeline": "if ((ds->stream_type!=GF_STREAM_VISUAL) && (ctx->strict_sap==DASHER_SAP_OFF) ) {"
    },
    {
        "line": 392,
        "fullcodeline": "if (!set_start_with_sap) {"
    },
    {
        "line": 413,
        "fullcodeline": "if ((s64) check_ts + ds->pts_minus_cts > 0) {"
    },
    {
        "line": 518,
        "fullcodeline": "if (gf_timestamp_greater_or_equal(cts + dur, ds->timescale, base_ds->adjusted_next_seg_start, base_ds->timescale))"
    },
    {
        "line": 526,
        "fullcodeline": "if (gf_timestamp_less(cts, ds->timescale, base_ds->adjusted_next_seg_start, base_ds->timescale) ) {"
    },
    {
        "line": 547,
        "fullcodeline": "ds->seg_done = GF_TRUE;"
    },
    {
        "line": 548,
        "fullcodeline": "dasher_inject_eods(ctx, ds, GF_FALSE);"
    },
    {
        "line": 549,
        "fullcodeline": "seg_done = GF_TRUE;"
    },
    {
        "line": 550,
        "fullcodeline": "dasher_stream_period_changed(filter, ctx, ds, GF_FALSE);"
    },
    {
        "line": 551,
        "fullcodeline": "i--;"
    },
    {
        "line": 552,
        "fullcodeline": "count--;"
    },
    {
        "line": 876,
        "fullcodeline": "&& (ctx->strict_sap!=DASHER_SAP_INTRA_ONLY)"
    },
    {
        "line": 878,
        "fullcodeline": "seg_over = GF_FALSE;"
    },
    {
        "line": 886,
        "fullcodeline": "if (e < 0) {"
    },
    {
        "line": 928,
        "fullcodeline": "ds->est_first_cts_in_next_seg = ncts;"
    },
    {
        "line": 932,
        "fullcodeline": "base_ds->max_period_dur = ncts;"
    },
    {
        "line": 945,
        "fullcodeline": "ds->min_cts_in_seg_plus_one = cts+1;"
    },
    {
        "line": 976,
        "fullcodeline": "if (p && p->value.boolean) {"
    },
    {
        "line": 1004,
        "fullcodeline": "if (dur==0)"
    },
    {
        "line": 1036,
        "fullcodeline": "cts = ds->last_cts;"
    },
    {
        "line": 1042,
        "fullcodeline": "if (ts != GF_FILTER_NO_TS)"
    },
    {
        "line": 1140,
        "fullcodeline": "else if (ds->seg_done && ds->muxed_base && ds->muxed_base->done) {"
    },
    {
        "line": 126,
        "fullcodeline": "assert(gf_list_find(ctx->current_period->streams, ds)<0);"
    },
    {
        "line": 127,
        "fullcodeline": "count = gf_list_count(ctx->current_period->streams);"
    },
    {
        "line": 128,
        "fullcodeline": "i--;"
    },
    {
        "line": 143,
        "fullcodeline": "&& (ds->stream_type==GF_STREAM_TEXT)"
    },
    {
        "line": 149,
        "fullcodeline": "dasher_send_empty_segment(ctx, ds);"
    },
    {
        "line": 167,
        "fullcodeline": "if (!is_queue_flush && pck) {"
    },
    {
        "line": 176,
        "fullcodeline": "is_queue_flush"
    },
    {
        "line": 200,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_DASH, (\"[Dasher] Period switch request failed.\\n\"));"
    },
    {
        "line": 201,
        "fullcodeline": "i--;"
    },
    {
        "line": 211,
        "fullcodeline": "else if (gf_filter_pid_is_eos(ds->ipid)) {"
    },
    {
        "line": 234,
        "fullcodeline": "Bool over = GF_TRUE;"
    },
    {
        "line": 248,
        "fullcodeline": "ddur_ms = (1000*ds->dash_dur.num)/ds->dash_dur.den;"
    },
    {
        "line": 259,
        "fullcodeline": "ds_done = 0;"
    },
    {
        "line": 267,
        "fullcodeline": "gf_filter_pid_set_eos(ds->opid);"
    },
    {
        "line": 277,
        "fullcodeline": "dasher_flush_segment(ctx, base_ds, GF_FALSE);"
    },
    {
        "line": 282,
        "fullcodeline": "ds->done = 2;"
    },
    {
        "line": 283,
        "fullcodeline": "ds->subdur_done = GF_TRUE;"
    },
    {
        "line": 284,
        "fullcodeline": "u32 nb_sub_done=0;"
    },
    {
        "line": 306,
        "fullcodeline": "else if (ds->muxed_base && base_ds->seg_done && !ds->seg_done && !ds->is_av) {"
    },
    {
        "line": 322,
        "fullcodeline": "dasher_drop_input(ctx, ds, GF_FALSE);"
    },
    {
        "line": 328,
        "fullcodeline": "if (ds->nb_pck < ds->seek_to_pck) {"
    },
    {
        "line": 364,
        "fullcodeline": "sap_type = 0;"
    },
    {
        "line": 369,
        "fullcodeline": "ds->presentation_time_offset = cts + 1;"
    },
    {
        "line": 410,
        "fullcodeline": "check_ts = ds->presentation_time_offset - 1;"
    },
    {
        "line": 414,
        "fullcodeline": "u64 pto = check_ts + ds->pts_minus_cts;"
    },
    {
        "line": 415,
        "fullcodeline": "u64 pto_adj = pto;"
    },
    {
        "line": 437,
        "fullcodeline": "ds->presentation_time_offset = pto;"
    },
    {
        "line": 441,
        "fullcodeline": "ds->pts_minus_cts = 0;"
    },
    {
        "line": 519,
        "fullcodeline": "do_split = GF_TRUE;"
    },
    {
        "line": 521,
        "fullcodeline": "if ( gf_timestamp_greater(cts + dur, ds->timescale, base_ds->adjusted_next_seg_start, base_ds->timescale))"
    },
    {
        "line": 527,
        "fullcodeline": "split_dur = (u32) (gf_timestamp_rescale(base_ds->adjusted_next_seg_start, base_ds->timescale, ds->timescale) - ds->last_cts);"
    },
    {
        "line": 875,
        "fullcodeline": "&& ! ((ds->sync_points_type==DASHER_SYNC_NONE) && (ds->stream_type!=GF_STREAM_AUDIO))"
    },
    {
        "line": 887,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_DASH, (\"[Dasher] Period switch request failed.\\n\"));"
    },
    {
        "line": 977,
        "fullcodeline": "p = gf_filter_pck_get_property(pck, GF_PROP_PCK_FRAG_TFDT);"
    },
    {
        "line": 1005,
        "fullcodeline": "dur=1;"
    },
    {
        "line": 1043,
        "fullcodeline": "gf_filter_pck_set_dts(dst, ts + diff + ds->ts_offset);"
    },
    {
        "line": 1141,
        "fullcodeline": "nb_init++;"
    },
    {
        "line": 1143,
        "fullcodeline": "ds->done = 1;"
    },
    {
        "line": 168,
        "fullcodeline": "gf_filter_pck_ref(&pck);"
    },
    {
        "line": 169,
        "fullcodeline": "gf_filter_pid_drop_packet(ds->ipid);"
    },
    {
        "line": 170,
        "fullcodeline": "gf_list_add(ds->packet_queue, pck);"
    },
    {
        "line": 180,
        "fullcodeline": "pck = gf_list_get(ds->packet_queue, 0);"
    },
    {
        "line": 181,
        "fullcodeline": "is_queue_flush = GF_TRUE;"
    },
    {
        "line": 235,
        "fullcodeline": "for (s_idx=0; s_idx<count; s_idx++) {"
    },
    {
        "line": 244,
        "fullcodeline": "if (!over)"
    },
    {
        "line": 249,
        "fullcodeline": "while (ds->last_min_segment_start_time + ddur_ms <= ctx->min_segment_start_time) {"
    },
    {
        "line": 285,
        "fullcodeline": "for (j=0; j<count; j++) {"
    },
    {
        "line": 292,
        "fullcodeline": "if (nb_sub_done==count)"
    },
    {
        "line": 307,
        "fullcodeline": "ds->seg_done = GF_TRUE;"
    },
    {
        "line": 308,
        "fullcodeline": "ds->first_cts_in_next_seg = ds->est_first_cts_in_next_seg;"
    },
    {
        "line": 309,
        "fullcodeline": "ds->est_first_cts_in_next_seg = 0;"
    },
    {
        "line": 310,
        "fullcodeline": "assert(base_ds->nb_comp_done < base_ds->nb_comp);"
    },
    {
        "line": 311,
        "fullcodeline": "base_ds->nb_comp_done ++;"
    },
    {
        "line": 329,
        "fullcodeline": "ds->nb_pck ++;"
    },
    {
        "line": 330,
        "fullcodeline": "dasher_drop_input(ctx, ds, GF_FALSE);"
    },
    {
        "line": 416,
        "fullcodeline": "if (ds->timescale != ds->mpd_timescale) {"
    },
    {
        "line": 522,
        "fullcodeline": "do_split = GF_TRUE;"
    },
    {
        "line": 529,
        "fullcodeline": "if (gf_sys_old_arch_compat() && (split_dur==dur))"
    },
    {
        "line": 532,
        "fullcodeline": "if (split_dur>=dur)"
    },
    {
        "line": 874,
        "fullcodeline": "&& !ctx->asto"
    },
    {
        "line": 1142,
        "fullcodeline": "if (!ds->done && ds->opid) gf_filter_pid_set_eos(ds->opid);"
    },
    {
        "line": 1164,
        "fullcodeline": "update_manifest = GF_TRUE;"
    },
    {
        "line": 171,
        "fullcodeline": "if (gf_filter_pck_get_sap(pck))"
    },
    {
        "line": 178,
        "fullcodeline": "|| gf_filter_pid_is_eos(ds->ipid) || ds->clamp_done"
    },
    {
        "line": 212,
        "fullcodeline": "if (gf_filter_pid_is_flush_eos(ds->ipid)) {"
    },
    {
        "line": 236,
        "fullcodeline": "GF_DashStream *a_ds = gf_list_get(ctx->current_period->streams, s_idx);"
    },
    {
        "line": 250,
        "fullcodeline": "dasher_send_empty_segment(ctx, ds);"
    },
    {
        "line": 286,
        "fullcodeline": "GF_DashStream *a_ds = gf_list_get(ctx->current_period->streams, j);"
    },
    {
        "line": 293,
        "fullcodeline": "ctx->subdur_done = GF_TRUE;"
    },
    {
        "line": 294,
        "fullcodeline": "} else if (ctx->reschedule && !ctx->loop && (ctx->dmode==GF_MPD_TYPE_DYNAMIC) && !strcmp(ds->period_id, DEFAULT_PERIOD_ID) ) {"
    },
    {
        "line": 312,
        "fullcodeline": "if (base_ds->nb_comp_done == base_ds->nb_comp) {"
    },
    {
        "line": 387,
        "fullcodeline": "sap_type = 1;"
    },
    {
        "line": 403,
        "fullcodeline": "else if (set_start_with_sap != sap_type) {"
    },
    {
        "line": 417,
        "fullcodeline": "pto_adj = gf_timestamp_rescale(pto_adj, ds->timescale, ds->mpd_timescale);"
    },
    {
        "line": 420,
        "fullcodeline": "u64 diff = gf_timestamp_rescale(ctx->min_cts_period.num, ctx->min_cts_period.den, ds->mpd_timescale);"
    },
    {
        "line": 421,
        "fullcodeline": "pto_adj = diff;"
    },
    {
        "line": 425,
        "fullcodeline": "ds->rep->segment_list->presentation_time_offset = pto_adj;"
    },
    {
        "line": 530,
        "fullcodeline": "split_dur=0;"
    },
    {
        "line": 533,
        "fullcodeline": "split_dur=0;"
    },
    {
        "line": 873,
        "fullcodeline": "&& !ds->inband_cues && !ds->cues"
    },
    {
        "line": 172,
        "fullcodeline": "ds->nb_sap_in_queue ++;"
    },
    {
        "line": 184,
        "fullcodeline": "!ds->segment_started"
    },
    {
        "line": 237,
        "fullcodeline": "if (a_ds == ds) continue;"
    },
    {
        "line": 238,
        "fullcodeline": "if (a_ds->stream_type==GF_STREAM_TEXT) continue;"
    },
    {
        "line": 239,
        "fullcodeline": "if (!a_ds->done) {"
    },
    {
        "line": 298,
        "fullcodeline": "ctx->post_play_events = GF_TRUE;"
    },
    {
        "line": 299,
        "fullcodeline": "ds->nb_repeat++;"
    },
    {
        "line": 300,
        "fullcodeline": "ds->reschedule = GF_TRUE;"
    },
    {
        "line": 301,
        "fullcodeline": "gf_filter_pid_discard_block(ds->opid);"
    },
    {
        "line": 313,
        "fullcodeline": "dasher_flush_segment(ctx, base_ds, GF_FALSE);"
    },
    {
        "line": 397,
        "fullcodeline": "ds->set->subsegment_starts_with_sap = sap_type;"
    },
    {
        "line": 404,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_DASH, (\"[Dasher] Segments do not start with the same SAP types: set initialized with %d but first packet got %d - bitstream will not be compliant\\n\", set_start_with_sap, sap_type));"
    },
    {
        "line": 186,
        "fullcodeline": "|| (ds->nb_sap_in_queue>=2)"
    },
    {
        "line": 188,
        "fullcodeline": "pck = gf_list_get(ds->packet_queue, 0);"
    },
    {
        "line": 213,
        "fullcodeline": "if (ds->segment_started && !ds->seg_done) {"
    },
    {
        "line": 225,
        "fullcodeline": "ds_is_done=GF_TRUE;"
    },
    {
        "line": 240,
        "fullcodeline": "over = GF_FALSE;"
    },
    {
        "line": 287,
        "fullcodeline": "if (a_ds->muxed_base) a_ds = a_ds->muxed_base;"
    },
    {
        "line": 289,
        "fullcodeline": "nb_sub_done++;"
    },
    {
        "line": 295,
        "fullcodeline": "if (gf_list_find(ctx->next_period->streams, ds)<0) {"
    },
    {
        "line": 399,
        "fullcodeline": "ds->set->starts_with_sap = sap_type;"
    },
    {
        "line": 872,
        "fullcodeline": "&& (ds->nb_pck+1 == ds->nb_samples_in_source)"
    },
    {
        "line": 1168,
        "fullcodeline": "update_manifest = GF_TRUE;"
    },
    {
        "line": 190,
        "fullcodeline": "pck = NULL;"
    },
    {
        "line": 214,
        "fullcodeline": "ds->seg_done = GF_TRUE;"
    },
    {
        "line": 215,
        "fullcodeline": "ds->first_cts_in_next_seg = ds->est_first_cts_in_next_seg;"
    },
    {
        "line": 216,
        "fullcodeline": "ds->est_first_cts_in_next_seg = 0;"
    },
    {
        "line": 217,
        "fullcodeline": "assert(base_ds->nb_comp_done < base_ds->nb_comp);"
    },
    {
        "line": 218,
        "fullcodeline": "base_ds->nb_comp_done ++;"
    },
    {
        "line": 296,
        "fullcodeline": "gf_list_add(ctx->next_period->streams, ds);"
    },
    {
        "line": 427,
        "fullcodeline": "ds->rep->segment_template->presentation_time_offset = pto_adj;"
    },
    {
        "line": 560,
        "fullcodeline": "const GF_PropertyValue *p = gf_filter_pck_get_property(pck, GF_PROP_PCK_FRAG_START);"
    },
    {
        "line": 219,
        "fullcodeline": "if (base_ds->nb_comp_done == base_ds->nb_comp) {"
    },
    {
        "line": 561,
        "fullcodeline": "if (p && (p->value.uint>=1) && base_ds->segment_started) {"
    },
    {
        "line": 220,
        "fullcodeline": "dasher_flush_segment(ctx, base_ds, GF_FALSE);"
    },
    {
        "line": 221,
        "fullcodeline": "dasher_inject_eods(ctx, base_ds, GF_TRUE);"
    },
    {
        "line": 562,
        "fullcodeline": "seg_over = GF_TRUE;"
    },
    {
        "line": 1172,
        "fullcodeline": "u64 diff = dasher_get_utc(ctx) - ctx->mpd->publishTime;"
    },
    {
        "line": 429,
        "fullcodeline": "ds->set->segment_template->presentation_time_offset = pto_adj;"
    },
    {
        "line": 563,
        "fullcodeline": "if (ds == base_ds) {"
    },
    {
        "line": 570,
        "fullcodeline": "const GF_PropertyValue *p = gf_filter_pck_get_property(pck, GF_PROP_PCK_CUE_START);"
    },
    {
        "line": 601,
        "fullcodeline": "p = gf_filter_pck_get_property(pck, GF_PROP_PCK_SPLIT_END);"
    },
    {
        "line": 1173,
        "fullcodeline": "if (diff >= ctx->mpd->minimum_update_period)"
    },
    {
        "line": 564,
        "fullcodeline": "base_ds->adjusted_next_seg_start = cts;"
    },
    {
        "line": 571,
        "fullcodeline": "if (p && p->value.boolean) {"
    },
    {
        "line": 1174,
        "fullcodeline": "update_manifest = GF_TRUE;"
    },
    {
        "line": 573,
        "fullcodeline": "gf_filter_pck_get_data(pck, &size);"
    },
    {
        "line": 591,
        "fullcodeline": "p = gf_filter_pck_get_property(pck, GF_PROP_PCK_SPLIT_START);"
    },
    {
        "line": 603,
        "fullcodeline": "assert(dur > p->value.uint);"
    },
    {
        "line": 604,
        "fullcodeline": "dur -= p->value.uint;"
    },
    {
        "line": 431,
        "fullcodeline": "ds->set->segment_list->presentation_time_offset = pto_adj;"
    },
    {
        "line": 610,
        "fullcodeline": "GF_DASHCueInfo *cue=NULL;"
    },
    {
        "line": 611,
        "fullcodeline": "Bool is_cue_split = GF_FALSE;"
    },
    {
        "line": 612,
        "fullcodeline": "s32 has_mismatch = -1;"
    },
    {
        "line": 575,
        "fullcodeline": "seg_over = GF_TRUE;"
    },
    {
        "line": 593,
        "fullcodeline": "cts += p->value.uint;"
    },
    {
        "line": 594,
        "fullcodeline": "assert(dur > p->value.uint);"
    },
    {
        "line": 595,
        "fullcodeline": "dur -= p->value.uint;"
    },
    {
        "line": 596,
        "fullcodeline": "split_dur_next = p->value.uint;"
    },
    {
        "line": 597,
        "fullcodeline": "ds->split_dur_next = 0;"
    },
    {
        "line": 598,
        "fullcodeline": "is_packet_split = GF_TRUE;"
    },
    {
        "line": 614,
        "fullcodeline": "for (cidx=0;cidx<ds->nb_cues; cidx++) {"
    },
    {
        "line": 657,
        "fullcodeline": "if (is_cue_split && !ds->segment_started) {"
    },
    {
        "line": 703,
        "fullcodeline": "if (has_mismatch>=0) {"
    },
    {
        "line": 576,
        "fullcodeline": "if (ds == base_ds) {"
    },
    {
        "line": 615,
        "fullcodeline": "cue = &ds->cues[cidx];"
    },
    {
        "line": 658,
        "fullcodeline": "memmove(ds->cues, &ds->cues[cidx+1], (ds->nb_cues-cidx-1) * sizeof(GF_DASHCueInfo));"
    },
    {
        "line": 659,
        "fullcodeline": "ds->nb_cues -= cidx+1;"
    },
    {
        "line": 660,
        "fullcodeline": "is_cue_split = 0;"
    },
    {
        "line": 672,
        "fullcodeline": "memmove(ds->cues, &ds->cues[cidx+1], (ds->nb_cues-cidx-1) * sizeof(GF_DASHCueInfo));"
    },
    {
        "line": 673,
        "fullcodeline": "ds->nb_cues -= cidx+1;"
    },
    {
        "line": 697,
        "fullcodeline": "seg_over = GF_TRUE;"
    },
    {
        "line": 704,
        "fullcodeline": "cue = &ds->cues[has_mismatch];"
    },
    {
        "line": 715,
        "fullcodeline": "(base_ds->force_rep_end && gf_timestamp_greater_or_equal(cts, ds->timescale, base_ds->force_rep_end, base_ds->timescale) )"
    },
    {
        "line": 433,
        "fullcodeline": "ds->rep->segment_base->presentation_time_offset = pto_adj;"
    },
    {
        "line": 434,
        "fullcodeline": "ds->rep->segment_base->timescale = ds->mpd_timescale;"
    },
    {
        "line": 577,
        "fullcodeline": "base_ds->adjusted_next_seg_start = cts;"
    },
    {
        "line": 583,
        "fullcodeline": "else if (!size) {"
    },
    {
        "line": 664,
        "fullcodeline": "if (!sap_type) {"
    },
    {
        "line": 675,
        "fullcodeline": "if (sap_type==3)"
    },
    {
        "line": 682,
        "fullcodeline": "(ds->nb_sap_4 || (ds->nb_sap_3 > 1))"
    },
    {
        "line": 698,
        "fullcodeline": "if (ds == base_ds) {"
    },
    {
        "line": 716,
        "fullcodeline": "|| (base_ds->clamped_dur.num && (cts + o_dur > ds->ts_offset + base_ds->clamped_dur.num * ds->timescale / base_ds->clamped_dur.den))"
    },
    {
        "line": 721,
        "fullcodeline": "dasher_drop_input(ctx, ds, GF_TRUE);"
    },
    {
        "line": 722,
        "fullcodeline": "ds->clamp_done = GF_TRUE;"
    },
    {
        "line": 676,
        "fullcodeline": "ds->nb_sap_3 ++;"
    },
    {
        "line": 686,
        "fullcodeline": "&& ((ds->stream_type==GF_STREAM_VISUAL) || (ctx->strict_sap==DASHER_SAP_ON) )"
    },
    {
        "line": 688,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_DASH, (\"[Dasher] WARNING! Max SAP type %d detected - switching to FULL profile\\n\", ds->nb_sap_4 ? 4 : 3));"
    },
    {
        "line": 689,
        "fullcodeline": "ctx->profile = GF_DASH_PROFILE_FULL;"
    },
    {
        "line": 699,
        "fullcodeline": "base_ds->adjusted_next_seg_start = cts;"
    },
    {
        "line": 707,
        "fullcodeline": "gf_filter_pid_drop_packet(ds->ipid);"
    },
    {
        "line": 708,
        "fullcodeline": "gf_filter_pid_set_discard(ds->ipid, GF_TRUE);"
    },
    {
        "line": 718,
        "fullcodeline": "if (!base_ds->period->period->duration && base_ds->force_rep_end) {"
    },
    {
        "line": 584,
        "fullcodeline": "if (!gf_filter_pck_get_seek_flag(pck) ) {"
    },
    {
        "line": 617,
        "fullcodeline": "if (cue->sample_num == ds->nb_pck + 1) {"
    },
    {
        "line": 683,
        "fullcodeline": "&& (ctx->profile != GF_DASH_PROFILE_FULL)"
    },
    {
        "line": 719,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_DASH, (\"[Dasher] Inputs duration do not match, %s truncated to %g duration\\n\", ds->src_url, ((Double)base_ds->force_rep_end)/base_ds->timescale ));"
    },
    {
        "line": 727,
        "fullcodeline": "else if (ds->segment_started && ds->sbound && sap_type) {"
    },
    {
        "line": 585,
        "fullcodeline": "ds->first_cts_in_seg = gf_filter_pck_get_cts(pck);"
    },
    {
        "line": 586,
        "fullcodeline": "dasher_send_empty_segment(ctx, ds);"
    },
    {
        "line": 587,
        "fullcodeline": "dasher_drop_input(ctx, ds, GF_TRUE);"
    },
    {
        "line": 618,
        "fullcodeline": "is_cue_split = GF_TRUE;"
    },
    {
        "line": 667,
        "fullcodeline": "gf_filter_pid_drop_packet(ds->ipid);"
    },
    {
        "line": 668,
        "fullcodeline": "gf_filter_pid_set_discard(ds->ipid, GF_TRUE);"
    },
    {
        "line": 677,
        "fullcodeline": "else if (sap_type>3)"
    },
    {
        "line": 691,
        "fullcodeline": "ds->set->subsegment_starts_with_sap = sap_type;"
    },
    {
        "line": 728,
        "fullcodeline": "u32 idx, nb_queued, nb_pck = gf_list_count(ds->packet_queue);"
    },
    {
        "line": 729,
        "fullcodeline": "nb_queued = nb_pck;"
    },
    {
        "line": 627,
        "fullcodeline": "u64 ts = (cue->dts - ds->cues_ts_offset) * ds->timescale;"
    },
    {
        "line": 628,
        "fullcodeline": "u64 ts2 = dts * ds->cues_timescale;"
    },
    {
        "line": 678,
        "fullcodeline": "ds->nb_sap_4 ++;"
    },
    {
        "line": 693,
        "fullcodeline": "ds->set->starts_with_sap = sap_type;"
    },
    {
        "line": 732,
        "fullcodeline": "for (idx=1; idx<nb_queued; idx++) {"
    },
    {
        "line": 620,
        "fullcodeline": "} else if (cue->sample_num < ds->nb_pck) {"
    },
    {
        "line": 629,
        "fullcodeline": "if (ts == ts2) {"
    },
    {
        "line": 730,
        "fullcodeline": "if (is_queue_flush) nb_queued += 1;"
    },
    {
        "line": 741,
        "fullcodeline": "u32 next_dur = gf_filter_pck_get_duration(next);"
    },
    {
        "line": 743,
        "fullcodeline": "u64 cts_next = gf_filter_pck_get_cts(next);"
    },
    {
        "line": 747,
        "fullcodeline": "cts_next = dasher_translate_cts(ds, cts_next);"
    },
    {
        "line": 795,
        "fullcodeline": "else if (!ds->sbound && ds->segment_started && gf_timestamp_greater_or_equal(cts + check_dur, ds->timescale, base_ds->adjusted_next_seg_start, base_ds->timescale) ) {"
    },
    {
        "line": 621,
        "fullcodeline": "has_mismatch = cidx;"
    },
    {
        "line": 630,
        "fullcodeline": "is_cue_split = GF_TRUE;"
    },
    {
        "line": 734,
        "fullcodeline": "if (idx==nb_pck) {"
    },
    {
        "line": 749,
        "fullcodeline": "if ((idx==nb_pck) && ctx->last_seg_merge) {"
    },
    {
        "line": 756,
        "fullcodeline": "if (gf_timestamp_greater_or_equal(cts_next + next_dur, ds->timescale, base_ds->adjusted_next_seg_start, base_ds->timescale)) {"
    },
    {
        "line": 639,
        "fullcodeline": "s64 ts = (cue->cts - ds->cues_ts_offset) * ds->timescale;"
    },
    {
        "line": 640,
        "fullcodeline": "s64 ts2 = (cts + ds->first_cts) * ds->cues_timescale;"
    },
    {
        "line": 735,
        "fullcodeline": "next = gf_list_last(ds->packet_queue);"
    },
    {
        "line": 745,
        "fullcodeline": "cts_next += ds->ts_offset;"
    },
    {
        "line": 750,
        "fullcodeline": "u64 next_seg_dur = (cts_next + next_dur - cts);"
    },
    {
        "line": 757,
        "fullcodeline": "Bool force_seg_flush = GF_FALSE;"
    },
    {
        "line": 758,
        "fullcodeline": "s64 diff_next = gf_timestamp_rescale(cts_next, ds->timescale, base_ds->timescale);"
    },
    {
        "line": 759,
        "fullcodeline": "diff_next -= base_ds->adjusted_next_seg_start;"
    },
    {
        "line": 801,
        "fullcodeline": "if ((ds != base_ds) && !base_ds->seg_done) {"
    },
    {
        "line": 806,
        "fullcodeline": "if (! ctx->sap) {"
    },
    {
        "line": 632,
        "fullcodeline": "} else if (ts < ts2) {"
    },
    {
        "line": 646,
        "fullcodeline": "if (ts == ts2) {"
    },
    {
        "line": 737,
        "fullcodeline": "next = gf_list_get(ds->packet_queue, idx);"
    },
    {
        "line": 738,
        "fullcodeline": "u32 sap_next = gf_filter_pck_get_sap(next);"
    },
    {
        "line": 751,
        "fullcodeline": "if (next_seg_dur * ds->dash_dur.den < (u64) ds->dash_dur.num * ds->timescale / 2)"
    },
    {
        "line": 761,
        "fullcodeline": "if (ds->sbound==DASHER_BOUNDS_CLOSEST) {"
    },
    {
        "line": 807,
        "fullcodeline": "seg_over = GF_TRUE;"
    },
    {
        "line": 633,
        "fullcodeline": "has_mismatch = cidx;"
    },
    {
        "line": 644,
        "fullcodeline": "ts2 += (s64) (ds->pts_minus_cts) * ds->cues_timescale;"
    },
    {
        "line": 647,
        "fullcodeline": "is_cue_split = GF_TRUE;"
    },
    {
        "line": 739,
        "fullcodeline": "if (!sap_next) continue;"
    },
    {
        "line": 762,
        "fullcodeline": "s64 diff = gf_timestamp_rescale(cts, ds->timescale, base_ds->timescale);"
    },
    {
        "line": 763,
        "fullcodeline": "diff -= base_ds->adjusted_next_seg_start;"
    },
    {
        "line": 784,
        "fullcodeline": "seg_over = GF_TRUE;"
    },
    {
        "line": 765,
        "fullcodeline": "if (diff<0)"
    },
    {
        "line": 768,
        "fullcodeline": "if (gf_sys_old_arch_compat() && (base_ds->sync_points_type==DASHER_SYNC_NONE) ) {"
    },
    {
        "line": 785,
        "fullcodeline": "if (ds == base_ds) {"
    },
    {
        "line": 809,
        "fullcodeline": "else if ((ds->stream_type==GF_STREAM_AUDIO)"
    },
    {
        "line": 649,
        "fullcodeline": "} else if (ts < ts2) {"
    },
    {
        "line": 766,
        "fullcodeline": "diff = -diff;"
    },
    {
        "line": 779,
        "fullcodeline": "if (diff_next > 0) {"
    },
    {
        "line": 786,
        "fullcodeline": "base_ds->adjusted_next_seg_start = cts;"
    },
    {
        "line": 810,
        "fullcodeline": "&& gf_timestamp_equal(cts + check_dur, ds->timescale, base_ds->adjusted_next_seg_start, base_ds->timescale)"
    },
    {
        "line": 650,
        "fullcodeline": "has_mismatch = cidx;"
    },
    {
        "line": 769,
        "fullcodeline": "if (diff_next > 0) {"
    },
    {
        "line": 780,
        "fullcodeline": "force_seg_flush = GF_TRUE;"
    },
    {
        "line": 770,
        "fullcodeline": "force_seg_flush = GF_TRUE;"
    },
    {
        "line": 773,
        "fullcodeline": "else if (diff<diff_next) {"
    },
    {
        "line": 774,
        "fullcodeline": "force_seg_flush = GF_TRUE;"
    },
    {
        "line": 854,
        "fullcodeline": "seg_over = GF_TRUE;"
    },
    {
        "line": 817,
        "fullcodeline": "if (sap_type==3)"
    },
    {
        "line": 823,
        "fullcodeline": "if ((ctx->profile != GF_DASH_PROFILE_FULL)"
    },
    {
        "line": 847,
        "fullcodeline": "if (sap_type == GF_FILTER_SAP_2) {"
    },
    {
        "line": 855,
        "fullcodeline": "if (ds == base_ds) {"
    },
    {
        "line": 818,
        "fullcodeline": "ds->nb_sap_3 ++;"
    },
    {
        "line": 827,
        "fullcodeline": "&& ((ds->stream_type==GF_STREAM_VISUAL) || (ctx->strict_sap==DASHER_SAP_ON) )"
    },
    {
        "line": 856,
        "fullcodeline": "base_ds->adjusted_next_seg_start = cts;"
    },
    {
        "line": 824,
        "fullcodeline": "&& (ds->nb_sap_4 || (ds->nb_sap_3 > 1))"
    },
    {
        "line": 829,
        "fullcodeline": "if ((sap_type == GF_FILTER_SAP_3)"
    },
    {
        "line": 819,
        "fullcodeline": "else if (sap_type>3)"
    },
    {
        "line": 831,
        "fullcodeline": "&& (ds->inband_params==2)"
    },
    {
        "line": 841,
        "fullcodeline": "ds->set->subsegment_starts_with_sap = sap_type;"
    },
    {
        "line": 849,
        "fullcodeline": "ds->set->subsegment_starts_with_sap = MAX(ds->set->subsegment_starts_with_sap, sap_type);"
    },
    {
        "line": 820,
        "fullcodeline": "ds->nb_sap_4 ++;"
    },
    {
        "line": 830,
        "fullcodeline": "&& (ds->codec_id==GF_CODECID_VVC)"
    },
    {
        "line": 833,
        "fullcodeline": "if (ds->set->starts_with_sap<3) {"
    },
    {
        "line": 837,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_DASH, (\"[Dasher] WARNING! Max SAP type %d detected - switching to FULL profile\\n\", ds->nb_sap_4 ? 4 : 3));"
    },
    {
        "line": 838,
        "fullcodeline": "ctx->profile = GF_DASH_PROFILE_FULL;"
    },
    {
        "line": 843,
        "fullcodeline": "ds->set->starts_with_sap = sap_type;"
    },
    {
        "line": 851,
        "fullcodeline": "ds->set->starts_with_sap = MAX(ds->set->starts_with_sap, sap_type);"
    },
    {
        "line": 834,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_DASH, (\"[Dasher] Using VVC with SAP type 3 and inband PPS, profile not yet defined\\n\", ds->nb_sap_4 ? 4 : 3));"
    }
]