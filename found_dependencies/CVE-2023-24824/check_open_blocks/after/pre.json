[
    {
        "line": 3,
        "fullcodeline": "bool should_continue = true;"
    },
    {
        "line": 4,
        "fullcodeline": "*all_matched = false;"
    },
    {
        "line": 5,
        "fullcodeline": "cmark_node *container = parser->root;"
    },
    {
        "line": 8,
        "fullcodeline": "memcpy(tmp_parser.open_block_counts, parser->open_block_counts, sizeof(parser->open_block_counts));"
    },
    {
        "line": 9,
        "fullcodeline": "tmp_parser.total_open_blocks = parser->total_open_blocks;"
    },
    {
        "line": 11,
        "fullcodeline": "assert(check_open_block_counts(parser));"
    },
    {
        "line": 106,
        "fullcodeline": "*all_matched = true;"
    },
    {
        "line": 13,
        "fullcodeline": "while (S_last_child_is_open(container)) {"
    },
    {
        "line": 109,
        "fullcodeline": "if (!*all_matched) {"
    },
    {
        "line": 113,
        "fullcodeline": "if (!should_continue) {"
    },
    {
        "line": 14,
        "fullcodeline": "decr_open_block_count(&tmp_parser, S_type(container));"
    },
    {
        "line": 15,
        "fullcodeline": "container = container->last_child;"
    },
    {
        "line": 16,
        "fullcodeline": "cont_type = S_type(container);"
    },
    {
        "line": 18,
        "fullcodeline": "S_find_first_nonspace(parser, input);"
    },
    {
        "line": 110,
        "fullcodeline": "container = container->parent; // back up to last matching node"
    },
    {
        "line": 114,
        "fullcodeline": "container = NULL;"
    },
    {
        "line": 38,
        "fullcodeline": "if (parser->blank && parser->indent == 0) {  // Current line is empty"
    },
    {
        "line": 21,
        "fullcodeline": "if (!parse_extension_block(parser, container, input))"
    },
    {
        "line": 40,
        "fullcodeline": "if (parser->current->flags & CMARK_NODE__OPEN_BLOCK) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (!parse_block_quote_prefix(parser, input))"
    },
    {
        "line": 79,
        "fullcodeline": "if (!parse_node_item_prefix(parser, input, container))"
    },
    {
        "line": 83,
        "fullcodeline": "if (!parse_code_block_prefix(parser, input, container, &should_continue))"
    },
    {
        "line": 90,
        "fullcodeline": "if (!parse_html_block_prefix(parser, container))"
    },
    {
        "line": 98,
        "fullcodeline": "if (!parse_footnote_definition_block_prefix(parser, input, container))"
    },
    {
        "line": 41,
        "fullcodeline": "if (parser->current->flags & CMARK_NODE__OPEN) {"
    },
    {
        "line": 42,
        "fullcodeline": "const size_t n_list = read_open_block_count(&tmp_parser, CMARK_NODE_LIST);"
    },
    {
        "line": 43,
        "fullcodeline": "const size_t n_item = read_open_block_count(&tmp_parser, CMARK_NODE_ITEM);"
    },
    {
        "line": 45,
        "fullcodeline": "if (n_list + n_item + 1 >= tmp_parser.total_open_blocks) {"
    },
    {
        "line": 47,
        "fullcodeline": "switch (S_type(parser->current)) {"
    },
    {
        "line": 62,
        "fullcodeline": "container = parser->current;"
    },
    {
        "line": 63,
        "fullcodeline": "cont_type = S_type(container);"
    },
    {
        "line": 50,
        "fullcodeline": "if (n_list + n_item != tmp_parser.total_open_blocks) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (parser->current->last_child == NULL) {"
    }
]