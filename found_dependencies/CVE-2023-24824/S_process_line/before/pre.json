[
    {
        "line": 4,
        "fullcodeline": "bool all_matched = true;"
    },
    {
        "line": 9,
        "fullcodeline": "cmark_strbuf_clear(&parser->curline);"
    },
    {
        "line": 16,
        "fullcodeline": "bytes = parser->curline.size;"
    },
    {
        "line": 22,
        "fullcodeline": "parser->offset = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "parser->column = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "parser->first_nonspace = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "parser->first_nonspace_column = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "parser->thematic_break_kill_pos = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "parser->indent = 0;"
    },
    {
        "line": 28,
        "fullcodeline": "parser->blank = false;"
    },
    {
        "line": 29,
        "fullcodeline": "parser->partially_consumed_tab = false;"
    },
    {
        "line": 31,
        "fullcodeline": "input.data = parser->curline.ptr;"
    },
    {
        "line": 32,
        "fullcodeline": "input.len = parser->curline.size;"
    },
    {
        "line": 33,
        "fullcodeline": "input.alloc = 0;"
    },
    {
        "line": 41,
        "fullcodeline": "parser->line_number++;"
    },
    {
        "line": 43,
        "fullcodeline": "last_matched_container = check_open_blocks(parser, &input, &all_matched);"
    },
    {
        "line": 48,
        "fullcodeline": "container = last_matched_container;"
    },
    {
        "line": 50,
        "fullcodeline": "current = parser->current;"
    },
    {
        "line": 52,
        "fullcodeline": "open_new_blocks(parser, &container, &input, all_matched);"
    },
    {
        "line": 59,
        "fullcodeline": "parser->last_line_length = input.len;"
    },
    {
        "line": 67,
        "fullcodeline": "cmark_strbuf_clear(&parser->curline);"
    },
    {
        "line": 11,
        "fullcodeline": "if (parser->options & CMARK_OPT_VALIDATE_UTF8)"
    },
    {
        "line": 19,
        "fullcodeline": "if (bytes == 0 || !S_is_line_end_char(parser->curline.ptr[bytes - 1]))"
    },
    {
        "line": 36,
        "fullcodeline": "if (parser->line_number == 0 &&"
    },
    {
        "line": 45,
        "fullcodeline": "if (!last_matched_container)"
    },
    {
        "line": 55,
        "fullcodeline": "if (current == parser->current)"
    },
    {
        "line": 60,
        "fullcodeline": "if (parser->last_line_length &&"
    },
    {
        "line": 63,
        "fullcodeline": "if (parser->last_line_length &&"
    },
    {
        "line": 12,
        "fullcodeline": "cmark_utf8proc_check(&parser->curline, buffer, bytes);"
    },
    {
        "line": 20,
        "fullcodeline": "cmark_strbuf_putc(&parser->curline, '\\n');"
    },
    {
        "line": 38,
        "fullcodeline": "memcmp(input.data, \"\\xef\\xbb\\xbf\", 3) == 0)"
    },
    {
        "line": 39,
        "fullcodeline": "parser->offset += 3;"
    },
    {
        "line": 56,
        "fullcodeline": "add_text_to_container(parser, container, last_matched_container, &input);"
    },
    {
        "line": 61,
        "fullcodeline": "input.data[parser->last_line_length - 1] == '\\n')"
    },
    {
        "line": 62,
        "fullcodeline": "parser->last_line_length -= 1;"
    },
    {
        "line": 64,
        "fullcodeline": "input.data[parser->last_line_length - 1] == '\\r')"
    },
    {
        "line": 65,
        "fullcodeline": "parser->last_line_length -= 1;"
    },
    {
        "line": 14,
        "fullcodeline": "cmark_strbuf_put(&parser->curline, buffer, bytes);"
    },
    {
        "line": 37,
        "fullcodeline": "input.len >= 3 &&"
    }
]