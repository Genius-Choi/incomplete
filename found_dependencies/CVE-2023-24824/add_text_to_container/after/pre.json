[
    {
        "line": 8,
        "fullcodeline": "S_find_first_nonspace(parser, input);"
    },
    {
        "line": 17,
        "fullcodeline": "const cmark_node_type ctype = S_type(container);"
    },
    {
        "line": 18,
        "fullcodeline": "const bool last_line_blank ="
    },
    {
        "line": 25,
        "fullcodeline": "S_set_last_line_blank(container, last_line_blank);"
    },
    {
        "line": 27,
        "fullcodeline": "tmp = container;"
    },
    {
        "line": 10,
        "fullcodeline": "if (parser->blank && container->last_child)"
    },
    {
        "line": 19,
        "fullcodeline": "(parser->blank && ctype != CMARK_NODE_BLOCK_QUOTE &&"
    },
    {
        "line": 28,
        "fullcodeline": "while (tmp->parent && S_last_line_blank(tmp->parent)) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (parser->current != last_matched_container &&"
    },
    {
        "line": 11,
        "fullcodeline": "S_set_last_line_blank(container->last_child, true);"
    },
    {
        "line": 22,
        "fullcodeline": "!(ctype == CMARK_NODE_ITEM && container->first_child == NULL &&"
    },
    {
        "line": 29,
        "fullcodeline": "S_set_last_line_blank(tmp->parent, false);"
    },
    {
        "line": 30,
        "fullcodeline": "tmp = tmp->parent;"
    },
    {
        "line": 41,
        "fullcodeline": "S_type(parser->current) == CMARK_NODE_PARAGRAPH) {"
    },
    {
        "line": 42,
        "fullcodeline": "add_line(parser->current, input, parser);"
    },
    {
        "line": 21,
        "fullcodeline": "!(ctype == CMARK_NODE_CODE_BLOCK && container->as.code.fenced) &&"
    },
    {
        "line": 40,
        "fullcodeline": "container == last_matched_container && !parser->blank &&"
    },
    {
        "line": 20,
        "fullcodeline": "ctype != CMARK_NODE_HEADING && ctype != CMARK_NODE_THEMATIC_BREAK &&"
    },
    {
        "line": 23,
        "fullcodeline": "container->start_line == parser->line_number));"
    },
    {
        "line": 45,
        "fullcodeline": "while (parser->current != last_matched_container) {"
    },
    {
        "line": 46,
        "fullcodeline": "parser->current = finalize(parser, parser->current);"
    },
    {
        "line": 50,
        "fullcodeline": "if (S_type(container) == CMARK_NODE_CODE_BLOCK) {"
    },
    {
        "line": 51,
        "fullcodeline": "add_line(container, input, parser);"
    },
    {
        "line": 47,
        "fullcodeline": "assert(parser->current != NULL);"
    },
    {
        "line": 52,
        "fullcodeline": "} else if (S_type(container) == CMARK_NODE_HTML_BLOCK) {"
    },
    {
        "line": 53,
        "fullcodeline": "add_line(container, input, parser);"
    },
    {
        "line": 88,
        "fullcodeline": "container = finalize(parser, container);"
    },
    {
        "line": 60,
        "fullcodeline": "scan_html_block_end_1(input, parser->first_nonspace);"
    },
    {
        "line": 65,
        "fullcodeline": "scan_html_block_end_2(input, parser->first_nonspace);"
    },
    {
        "line": 70,
        "fullcodeline": "scan_html_block_end_3(input, parser->first_nonspace);"
    },
    {
        "line": 75,
        "fullcodeline": "scan_html_block_end_4(input, parser->first_nonspace);"
    },
    {
        "line": 80,
        "fullcodeline": "scan_html_block_end_5(input, parser->first_nonspace);"
    },
    {
        "line": 89,
        "fullcodeline": "assert(parser->current != NULL);"
    },
    {
        "line": 93,
        "fullcodeline": "} else if (accepts_lines(S_type(container))) {"
    },
    {
        "line": 98,
        "fullcodeline": "S_advance_offset(parser, input, parser->first_nonspace - parser->offset,"
    },
    {
        "line": 100,
        "fullcodeline": "add_line(container, input, parser);"
    },
    {
        "line": 103,
        "fullcodeline": "container = add_child(parser, container, CMARK_NODE_PARAGRAPH,"
    },
    {
        "line": 105,
        "fullcodeline": "S_advance_offset(parser, input, parser->first_nonspace - parser->offset,"
    },
    {
        "line": 107,
        "fullcodeline": "add_line(container, input, parser);"
    },
    {
        "line": 94,
        "fullcodeline": "if (S_type(container) == CMARK_NODE_HEADING &&"
    },
    {
        "line": 95,
        "fullcodeline": "container->as.heading.setext == false) {"
    },
    {
        "line": 96,
        "fullcodeline": "chop_trailing_hashtags(input);"
    }
]