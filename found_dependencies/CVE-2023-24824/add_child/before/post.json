[
    {
        "line": 3,
        "fullcodeline": "assert(parent);"
    },
    {
        "line": 11,
        "fullcodeline": "cmark_node *child ="
    },
    {
        "line": 13,
        "fullcodeline": "child->parent = parent;"
    },
    {
        "line": 22,
        "fullcodeline": "parent->last_child = child;"
    },
    {
        "line": 7,
        "fullcodeline": "while (!cmark_node_can_contain_type(parent, block_type)) {"
    },
    {
        "line": 12,
        "fullcodeline": "make_block(parser->mem, block_type, parser->line_number, start_column);"
    },
    {
        "line": 8,
        "fullcodeline": "parent = finalize(parser, parent);"
    },
    {
        "line": 16,
        "fullcodeline": "parent->last_child->next = child;"
    },
    {
        "line": 17,
        "fullcodeline": "child->prev = parent->last_child;"
    },
    {
        "line": 19,
        "fullcodeline": "parent->first_child = child;"
    },
    {
        "line": 20,
        "fullcodeline": "child->prev = NULL;"
    }
]