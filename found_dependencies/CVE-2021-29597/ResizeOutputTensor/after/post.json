[
    {
        "line": 4,
        "fullcodeline": "const int32* block_shape = GetTensorData<int32>(op_context->block_shape);"
    },
    {
        "line": 5,
        "fullcodeline": "const int32* paddings_data = GetTensorData<int32>(op_context->paddings);"
    },
    {
        "line": 7,
        "fullcodeline": "int spatial_dims_num = input_size->size - 2;"
    },
    {
        "line": 9,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumDimensions(op_context->block_shape), 1);"
    },
    {
        "line": 10,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, op_context->block_shape->dims->data[0],"
    },
    {
        "line": 13,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumDimensions(op_context->paddings), 2);"
    },
    {
        "line": 14,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, op_context->paddings->dims->data[0],"
    },
    {
        "line": 16,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, op_context->paddings->dims->data[1], 2);"
    },
    {
        "line": 18,
        "fullcodeline": "TfLiteIntArray* output_size = TfLiteIntArrayCopy(input_size);"
    },
    {
        "line": 32,
        "fullcodeline": "output_size->data[0] = output_batch_size;"
    },
    {
        "line": 23,
        "fullcodeline": "for (int dim = 0; dim < spatial_dims_num; ++dim) {"
    },
    {
        "line": 36,
        "fullcodeline": "return context->ResizeTensor(context, op_context->output, output_size);"
    },
    {
        "line": 24,
        "fullcodeline": "int final_dim_size = (input_size->data[dim + 1] + paddings_data[dim * 2] +"
    },
    {
        "line": 26,
        "fullcodeline": "TF_LITE_ENSURE(context, block_shape[dim] != 0);"
    },
    {
        "line": 27,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, final_dim_size % block_shape[dim], 0);"
    },
    {
        "line": 28,
        "fullcodeline": "output_size->data[dim + 1] = final_dim_size / block_shape[dim];"
    },
    {
        "line": 29,
        "fullcodeline": "output_batch_size *= block_shape[dim];"
    },
    {
        "line": 33,
        "fullcodeline": "output_size->data[input_size->size - 1] ="
    },
    {
        "line": 34,
        "fullcodeline": "input_size->data[input_size->size - 1];"
    },
    {
        "line": 25,
        "fullcodeline": "paddings_data[dim * 2 + 1]);"
    }
]