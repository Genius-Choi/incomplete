[
    {
        "line": 4,
        "fullcodeline": "static int initialized = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "static const char *selftest_failed = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "int i,j, r, t, rconpointer = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "(void)hd;"
    },
    {
        "line": 23,
        "fullcodeline": "if (!fips_mode () && !initialized)"
    },
    {
        "line": 33,
        "fullcodeline": "if( keylen == 128/8 )"
    },
    {
        "line": 25,
        "fullcodeline": "initialized = 1;"
    },
    {
        "line": 26,
        "fullcodeline": "selftest_failed = selftest ();"
    },
    {
        "line": 35,
        "fullcodeline": "rounds = 10;"
    },
    {
        "line": 36,
        "fullcodeline": "KC = 4;"
    },
    {
        "line": 153,
        "fullcodeline": "ctx->encrypt_fn = do_encrypt;"
    },
    {
        "line": 154,
        "fullcodeline": "ctx->decrypt_fn = do_decrypt;"
    },
    {
        "line": 155,
        "fullcodeline": "ctx->prefetch_enc_fn = prefetch_enc;"
    },
    {
        "line": 156,
        "fullcodeline": "ctx->prefetch_dec_fn = prefetch_dec;"
    },
    {
        "line": 179,
        "fullcodeline": "const byte *sbox = ((const byte *)encT) + 1;"
    },
    {
        "line": 185,
        "fullcodeline": "} tkk[2];"
    },
    {
        "line": 204,
        "fullcodeline": "r = 0;"
    },
    {
        "line": 205,
        "fullcodeline": "t = 0;"
    },
    {
        "line": 28,
        "fullcodeline": "log_error (\"%s\\n\", selftest_failed );"
    },
    {
        "line": 38,
        "fullcodeline": "else if ( keylen == 192/8 )"
    },
    {
        "line": 195,
        "fullcodeline": "for (i = 0; i < keylen; i++)"
    },
    {
        "line": 200,
        "fullcodeline": "for (j = KC-1; j >= 0; j--)"
    },
    {
        "line": 220,
        "fullcodeline": "while (r < rounds + 1)"
    },
    {
        "line": 40,
        "fullcodeline": "rounds = 12;"
    },
    {
        "line": 41,
        "fullcodeline": "KC = 6;"
    },
    {
        "line": 207,
        "fullcodeline": "for (j = 0; (j < KC) && (r < rounds + 1); )"
    },
    {
        "line": 209,
        "fullcodeline": "for (; (j < KC) && (t < 4); j++, t++)"
    },
    {
        "line": 213,
        "fullcodeline": "if (t == 4)"
    },
    {
        "line": 230,
        "fullcodeline": "if (KC != 8)"
    },
    {
        "line": 43,
        "fullcodeline": "else if ( keylen == 256/8 )"
    },
    {
        "line": 215,
        "fullcodeline": "r++;"
    },
    {
        "line": 216,
        "fullcodeline": "t = 0;"
    },
    {
        "line": 254,
        "fullcodeline": "for (j = 0; (j < KC) && (r < rounds + 1); )"
    },
    {
        "line": 45,
        "fullcodeline": "rounds = 14;"
    },
    {
        "line": 46,
        "fullcodeline": "KC = 8;"
    },
    {
        "line": 211,
        "fullcodeline": "W_u32[r][t] = le_bswap32(tk_u32[j]);"
    },
    {
        "line": 232,
        "fullcodeline": "for (j = 1; j < KC; j++)"
    },
    {
        "line": 260,
        "fullcodeline": "if (t == 4)"
    },
    {
        "line": 197,
        "fullcodeline": "k[i >> 2][i & 3] = key[i];"
    },
    {
        "line": 239,
        "fullcodeline": "for (j = 1; j < KC/2; j++)"
    },
    {
        "line": 247,
        "fullcodeline": "for (j = KC/2 + 1; j < KC; j++)"
    },
    {
        "line": 256,
        "fullcodeline": "for (; (j < KC) && (t < 4); j++, t++)"
    },
    {
        "line": 262,
        "fullcodeline": "r++;"
    },
    {
        "line": 263,
        "fullcodeline": "t = 0;"
    },
    {
        "line": 258,
        "fullcodeline": "W_u32[r][t] = le_bswap32(tk_u32[j]);"
    },
    {
        "line": 224,
        "fullcodeline": "tk[0][0] ^= sbox[tk[KC-1][1] * 4];"
    },
    {
        "line": 225,
        "fullcodeline": "tk[0][1] ^= sbox[tk[KC-1][2] * 4];"
    },
    {
        "line": 226,
        "fullcodeline": "tk[0][2] ^= sbox[tk[KC-1][3] * 4];"
    },
    {
        "line": 227,
        "fullcodeline": "tk[0][3] ^= sbox[tk[KC-1][0] * 4];"
    },
    {
        "line": 234,
        "fullcodeline": "tk_u32[j] ^= tk_u32[j-1];"
    },
    {
        "line": 243,
        "fullcodeline": "tk[KC/2][0] ^= sbox[tk[KC/2 - 1][0] * 4];"
    },
    {
        "line": 244,
        "fullcodeline": "tk[KC/2][1] ^= sbox[tk[KC/2 - 1][1] * 4];"
    },
    {
        "line": 245,
        "fullcodeline": "tk[KC/2][2] ^= sbox[tk[KC/2 - 1][2] * 4];"
    },
    {
        "line": 246,
        "fullcodeline": "tk[KC/2][3] ^= sbox[tk[KC/2 - 1][3] * 4];"
    },
    {
        "line": 241,
        "fullcodeline": "tk_u32[j] ^= tk_u32[j-1];"
    },
    {
        "line": 249,
        "fullcodeline": "tk_u32[j] ^= tk_u32[j-1];"
    }
]