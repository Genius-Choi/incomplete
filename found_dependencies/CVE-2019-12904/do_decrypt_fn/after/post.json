[
    {
        "line": 5,
        "fullcodeline": "int rounds = ctx->rounds;"
    },
    {
        "line": 7,
        "fullcodeline": "u32 sa[4];"
    },
    {
        "line": 8,
        "fullcodeline": "u32 sb[4];"
    },
    {
        "line": 10,
        "fullcodeline": "sb[0] = buf_get_le32(a + 0);"
    },
    {
        "line": 11,
        "fullcodeline": "sb[1] = buf_get_le32(a + 4);"
    },
    {
        "line": 12,
        "fullcodeline": "sb[2] = buf_get_le32(a + 8);"
    },
    {
        "line": 13,
        "fullcodeline": "sb[3] = buf_get_le32(a + 12);"
    },
    {
        "line": 15,
        "fullcodeline": "sa[0] = sb[0] ^ rk[rounds][0];"
    },
    {
        "line": 16,
        "fullcodeline": "sa[1] = sb[1] ^ rk[rounds][1];"
    },
    {
        "line": 17,
        "fullcodeline": "sa[2] = sb[2] ^ rk[rounds][2];"
    },
    {
        "line": 18,
        "fullcodeline": "sa[3] = sb[3] ^ rk[rounds][3];"
    },
    {
        "line": 73,
        "fullcodeline": "sb[0] = rol(decT[(byte)(sa[0] >> (0 * 8))], (0 * 8));"
    },
    {
        "line": 74,
        "fullcodeline": "sb[1] = rol(decT[(byte)(sa[0] >> (1 * 8))], (1 * 8));"
    },
    {
        "line": 75,
        "fullcodeline": "sb[2] = rol(decT[(byte)(sa[0] >> (2 * 8))], (2 * 8));"
    },
    {
        "line": 76,
        "fullcodeline": "sb[3] = rol(decT[(byte)(sa[0] >> (3 * 8))], (3 * 8));"
    },
    {
        "line": 77,
        "fullcodeline": "sa[0] = rk[1][0] ^ sb[0];"
    },
    {
        "line": 79,
        "fullcodeline": "sb[1] ^= rol(decT[(byte)(sa[1] >> (0 * 8))], (0 * 8));"
    },
    {
        "line": 80,
        "fullcodeline": "sb[2] ^= rol(decT[(byte)(sa[1] >> (1 * 8))], (1 * 8));"
    },
    {
        "line": 81,
        "fullcodeline": "sb[3] ^= rol(decT[(byte)(sa[1] >> (2 * 8))], (2 * 8));"
    },
    {
        "line": 82,
        "fullcodeline": "sa[0] ^= rol(decT[(byte)(sa[1] >> (3 * 8))], (3 * 8));"
    },
    {
        "line": 83,
        "fullcodeline": "sa[1] = rk[1][1] ^ sb[1];"
    },
    {
        "line": 85,
        "fullcodeline": "sb[2] ^= rol(decT[(byte)(sa[2] >> (0 * 8))], (0 * 8));"
    },
    {
        "line": 86,
        "fullcodeline": "sb[3] ^= rol(decT[(byte)(sa[2] >> (1 * 8))], (1 * 8));"
    },
    {
        "line": 87,
        "fullcodeline": "sa[0] ^= rol(decT[(byte)(sa[2] >> (2 * 8))], (2 * 8));"
    },
    {
        "line": 88,
        "fullcodeline": "sa[1] ^= rol(decT[(byte)(sa[2] >> (3 * 8))], (3 * 8));"
    },
    {
        "line": 89,
        "fullcodeline": "sa[2] = rk[1][2] ^ sb[2];"
    },
    {
        "line": 91,
        "fullcodeline": "sb[3] ^= rol(decT[(byte)(sa[3] >> (0 * 8))], (0 * 8));"
    },
    {
        "line": 92,
        "fullcodeline": "sa[0] ^= rol(decT[(byte)(sa[3] >> (1 * 8))], (1 * 8));"
    },
    {
        "line": 93,
        "fullcodeline": "sa[1] ^= rol(decT[(byte)(sa[3] >> (2 * 8))], (2 * 8));"
    },
    {
        "line": 94,
        "fullcodeline": "sa[2] ^= rol(decT[(byte)(sa[3] >> (3 * 8))], (3 * 8));"
    },
    {
        "line": 95,
        "fullcodeline": "sa[3] = rk[1][3] ^ sb[3];"
    },
    {
        "line": 98,
        "fullcodeline": "sb[0] = inv_sbox[(byte)(sa[0] >> (0 * 8))] << (0 * 8);"
    },
    {
        "line": 99,
        "fullcodeline": "sb[1] = inv_sbox[(byte)(sa[0] >> (1 * 8))] << (1 * 8);"
    },
    {
        "line": 100,
        "fullcodeline": "sb[2] = inv_sbox[(byte)(sa[0] >> (2 * 8))] << (2 * 8);"
    },
    {
        "line": 101,
        "fullcodeline": "sb[3] = inv_sbox[(byte)(sa[0] >> (3 * 8))] << (3 * 8);"
    },
    {
        "line": 102,
        "fullcodeline": "sa[0] = sb[0] ^ rk[0][0];"
    },
    {
        "line": 104,
        "fullcodeline": "sb[1] ^= inv_sbox[(byte)(sa[1] >> (0 * 8))] << (0 * 8);"
    },
    {
        "line": 105,
        "fullcodeline": "sb[2] ^= inv_sbox[(byte)(sa[1] >> (1 * 8))] << (1 * 8);"
    },
    {
        "line": 106,
        "fullcodeline": "sb[3] ^= inv_sbox[(byte)(sa[1] >> (2 * 8))] << (2 * 8);"
    },
    {
        "line": 107,
        "fullcodeline": "sa[0] ^= inv_sbox[(byte)(sa[1] >> (3 * 8))] << (3 * 8);"
    },
    {
        "line": 108,
        "fullcodeline": "sa[1] = sb[1] ^ rk[0][1];"
    },
    {
        "line": 110,
        "fullcodeline": "sb[2] ^= inv_sbox[(byte)(sa[2] >> (0 * 8))] << (0 * 8);"
    },
    {
        "line": 111,
        "fullcodeline": "sb[3] ^= inv_sbox[(byte)(sa[2] >> (1 * 8))] << (1 * 8);"
    },
    {
        "line": 112,
        "fullcodeline": "sa[0] ^= inv_sbox[(byte)(sa[2] >> (2 * 8))] << (2 * 8);"
    },
    {
        "line": 113,
        "fullcodeline": "sa[1] ^= inv_sbox[(byte)(sa[2] >> (3 * 8))] << (3 * 8);"
    },
    {
        "line": 114,
        "fullcodeline": "sa[2] = sb[2] ^ rk[0][2];"
    },
    {
        "line": 116,
        "fullcodeline": "sb[3] ^= inv_sbox[(byte)(sa[3] >> (0 * 8))] << (0 * 8);"
    },
    {
        "line": 117,
        "fullcodeline": "sa[0] ^= inv_sbox[(byte)(sa[3] >> (1 * 8))] << (1 * 8);"
    },
    {
        "line": 118,
        "fullcodeline": "sa[1] ^= inv_sbox[(byte)(sa[3] >> (2 * 8))] << (2 * 8);"
    },
    {
        "line": 119,
        "fullcodeline": "sa[2] ^= inv_sbox[(byte)(sa[3] >> (3 * 8))] << (3 * 8);"
    },
    {
        "line": 120,
        "fullcodeline": "sa[3] = sb[3] ^ rk[0][3];"
    },
    {
        "line": 122,
        "fullcodeline": "buf_put_le32(b + 0, sa[0]);"
    },
    {
        "line": 123,
        "fullcodeline": "buf_put_le32(b + 4, sa[1]);"
    },
    {
        "line": 124,
        "fullcodeline": "buf_put_le32(b + 8, sa[2]);"
    },
    {
        "line": 125,
        "fullcodeline": "buf_put_le32(b + 12, sa[3]);"
    },
    {
        "line": 20,
        "fullcodeline": "for (r = rounds - 1; r > 1; r--)"
    },
    {
        "line": 128,
        "fullcodeline": "return (56+2*sizeof(int));"
    },
    {
        "line": 22,
        "fullcodeline": "sb[0] = rol(decT[(byte)(sa[0] >> (0 * 8))], (0 * 8));"
    },
    {
        "line": 23,
        "fullcodeline": "sb[1] = rol(decT[(byte)(sa[0] >> (1 * 8))], (1 * 8));"
    },
    {
        "line": 24,
        "fullcodeline": "sb[2] = rol(decT[(byte)(sa[0] >> (2 * 8))], (2 * 8));"
    },
    {
        "line": 25,
        "fullcodeline": "sb[3] = rol(decT[(byte)(sa[0] >> (3 * 8))], (3 * 8));"
    },
    {
        "line": 26,
        "fullcodeline": "sa[0] = rk[r][0] ^ sb[0];"
    },
    {
        "line": 28,
        "fullcodeline": "sb[1] ^= rol(decT[(byte)(sa[1] >> (0 * 8))], (0 * 8));"
    },
    {
        "line": 29,
        "fullcodeline": "sb[2] ^= rol(decT[(byte)(sa[1] >> (1 * 8))], (1 * 8));"
    },
    {
        "line": 30,
        "fullcodeline": "sb[3] ^= rol(decT[(byte)(sa[1] >> (2 * 8))], (2 * 8));"
    },
    {
        "line": 31,
        "fullcodeline": "sa[0] ^= rol(decT[(byte)(sa[1] >> (3 * 8))], (3 * 8));"
    },
    {
        "line": 32,
        "fullcodeline": "sa[1] = rk[r][1] ^ sb[1];"
    },
    {
        "line": 34,
        "fullcodeline": "sb[2] ^= rol(decT[(byte)(sa[2] >> (0 * 8))], (0 * 8));"
    },
    {
        "line": 35,
        "fullcodeline": "sb[3] ^= rol(decT[(byte)(sa[2] >> (1 * 8))], (1 * 8));"
    },
    {
        "line": 36,
        "fullcodeline": "sa[0] ^= rol(decT[(byte)(sa[2] >> (2 * 8))], (2 * 8));"
    },
    {
        "line": 37,
        "fullcodeline": "sa[1] ^= rol(decT[(byte)(sa[2] >> (3 * 8))], (3 * 8));"
    },
    {
        "line": 38,
        "fullcodeline": "sa[2] = rk[r][2] ^ sb[2];"
    },
    {
        "line": 40,
        "fullcodeline": "sb[3] ^= rol(decT[(byte)(sa[3] >> (0 * 8))], (0 * 8));"
    },
    {
        "line": 41,
        "fullcodeline": "sa[0] ^= rol(decT[(byte)(sa[3] >> (1 * 8))], (1 * 8));"
    },
    {
        "line": 42,
        "fullcodeline": "sa[1] ^= rol(decT[(byte)(sa[3] >> (2 * 8))], (2 * 8));"
    },
    {
        "line": 43,
        "fullcodeline": "sa[2] ^= rol(decT[(byte)(sa[3] >> (3 * 8))], (3 * 8));"
    },
    {
        "line": 44,
        "fullcodeline": "sa[3] = rk[r][3] ^ sb[3];"
    },
    {
        "line": 46,
        "fullcodeline": "r--;"
    },
    {
        "line": 48,
        "fullcodeline": "sb[0] = rol(decT[(byte)(sa[0] >> (0 * 8))], (0 * 8));"
    },
    {
        "line": 49,
        "fullcodeline": "sb[1] = rol(decT[(byte)(sa[0] >> (1 * 8))], (1 * 8));"
    },
    {
        "line": 50,
        "fullcodeline": "sb[2] = rol(decT[(byte)(sa[0] >> (2 * 8))], (2 * 8));"
    },
    {
        "line": 51,
        "fullcodeline": "sb[3] = rol(decT[(byte)(sa[0] >> (3 * 8))], (3 * 8));"
    },
    {
        "line": 52,
        "fullcodeline": "sa[0] = rk[r][0] ^ sb[0];"
    },
    {
        "line": 54,
        "fullcodeline": "sb[1] ^= rol(decT[(byte)(sa[1] >> (0 * 8))], (0 * 8));"
    },
    {
        "line": 55,
        "fullcodeline": "sb[2] ^= rol(decT[(byte)(sa[1] >> (1 * 8))], (1 * 8));"
    },
    {
        "line": 56,
        "fullcodeline": "sb[3] ^= rol(decT[(byte)(sa[1] >> (2 * 8))], (2 * 8));"
    },
    {
        "line": 57,
        "fullcodeline": "sa[0] ^= rol(decT[(byte)(sa[1] >> (3 * 8))], (3 * 8));"
    },
    {
        "line": 58,
        "fullcodeline": "sa[1] = rk[r][1] ^ sb[1];"
    },
    {
        "line": 60,
        "fullcodeline": "sb[2] ^= rol(decT[(byte)(sa[2] >> (0 * 8))], (0 * 8));"
    },
    {
        "line": 61,
        "fullcodeline": "sb[3] ^= rol(decT[(byte)(sa[2] >> (1 * 8))], (1 * 8));"
    },
    {
        "line": 62,
        "fullcodeline": "sa[0] ^= rol(decT[(byte)(sa[2] >> (2 * 8))], (2 * 8));"
    },
    {
        "line": 63,
        "fullcodeline": "sa[1] ^= rol(decT[(byte)(sa[2] >> (3 * 8))], (3 * 8));"
    },
    {
        "line": 64,
        "fullcodeline": "sa[2] = rk[r][2] ^ sb[2];"
    },
    {
        "line": 66,
        "fullcodeline": "sb[3] ^= rol(decT[(byte)(sa[3] >> (0 * 8))], (0 * 8));"
    },
    {
        "line": 67,
        "fullcodeline": "sa[0] ^= rol(decT[(byte)(sa[3] >> (1 * 8))], (1 * 8));"
    },
    {
        "line": 68,
        "fullcodeline": "sa[1] ^= rol(decT[(byte)(sa[3] >> (2 * 8))], (2 * 8));"
    },
    {
        "line": 69,
        "fullcodeline": "sa[2] ^= rol(decT[(byte)(sa[3] >> (3 * 8))], (3 * 8));"
    },
    {
        "line": 70,
        "fullcodeline": "sa[3] = rk[r][3] ^ sb[3];"
    }
]