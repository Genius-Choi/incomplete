[
    {
        "line": 2,
        "fullcodeline": "patchinfo = Package.new(:name => \"patchinfo\", :title => \"Patchinfo\", :description => \"Collected packages for update\")"
    },
    {
        "line": 3,
        "fullcodeline": "self.packages << patchinfo"
    },
    {
        "line": 4,
        "fullcodeline": "patchinfo.add_flag(\"build\", \"enable\", nil, nil)"
    },
    {
        "line": 5,
        "fullcodeline": "patchinfo.add_flag(\"useforbuild\", \"disable\", nil, nil)"
    },
    {
        "line": 10,
        "fullcodeline": "node = Nokogiri::XML::Builder.new"
    },
    {
        "line": 11,
        "fullcodeline": "attrs = { }"
    },
    {
        "line": 17,
        "fullcodeline": "description = req.description || ''"
    },
    {
        "line": 18,
        "fullcodeline": "node.patchinfo(attrs) do |n|"
    },
    {
        "line": 25,
        "fullcodeline": "data = ActiveXML::Node.new( node.doc.to_xml )"
    },
    {
        "line": 26,
        "fullcodeline": "data = self.update_patchinfo( data, enfore_issue_update: true )"
    },
    {
        "line": 27,
        "fullcodeline": "p = { :user => User.current.login, :comment => \"generated by request id #{req.id} accept call\" }"
    },
    {
        "line": 28,
        "fullcodeline": "patchinfo_path = \"/source/#{CGI.escape(patchinfo.project.name)}/patchinfo/_patchinfo\""
    },
    {
        "line": 29,
        "fullcodeline": "patchinfo_path << Suse::Backend.build_query_from_hash(p, [:user, :comment])"
    },
    {
        "line": 30,
        "fullcodeline": "Suse::Backend.put( patchinfo_path, data.dump_xml )"
    },
    {
        "line": 6,
        "fullcodeline": "patchinfo.add_flag(\"publish\", \"enable\", nil, nil) unless self.flags.find_by_flag_and_status(\"access\", \"disable\")"
    },
    {
        "line": 12,
        "fullcodeline": "if self.project_type.to_s == \"maintenance_incident\""
    },
    {
        "line": 14,
        "fullcodeline": "attrs[:incident] = self.name.gsub(/.*:/, '')"
    }
]