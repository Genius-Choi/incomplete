[
    {
        "line": 5,
        "fullcodeline": "cmark_reference *ref = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "advance(subj); // advance past ]"
    },
    {
        "line": 16,
        "fullcodeline": "initial_pos = subj->pos;"
    },
    {
        "line": 19,
        "fullcodeline": "opener = subj->last_bracket;"
    },
    {
        "line": 33,
        "fullcodeline": "is_image = opener->image;"
    },
    {
        "line": 35,
        "fullcodeline": "after_link_text_pos = subj->pos;"
    },
    {
        "line": 73,
        "fullcodeline": "raw_label = cmark_chunk_literal(\"\");"
    },
    {
        "line": 74,
        "fullcodeline": "found_label = link_label(subj, &raw_label);"
    },
    {
        "line": 182,
        "fullcodeline": "pop_bracket(subj); // remove this opener from delimiter list"
    },
    {
        "line": 183,
        "fullcodeline": "subj->pos = initial_pos;"
    },
    {
        "line": 187,
        "fullcodeline": "inl = make_simple(subj->mem, is_image ? CMARK_NODE_IMAGE : CMARK_NODE_LINK);"
    },
    {
        "line": 188,
        "fullcodeline": "inl->as.link.url = url;"
    },
    {
        "line": 189,
        "fullcodeline": "inl->as.link.title = title;"
    },
    {
        "line": 190,
        "fullcodeline": "inl->start_line = inl->end_line = subj->line;"
    },
    {
        "line": 192,
        "fullcodeline": "inl->end_column = subj->pos + subj->column_offset + subj->block_offset;"
    },
    {
        "line": 193,
        "fullcodeline": "cmark_node_insert_before(opener->inl_text, inl);"
    },
    {
        "line": 203,
        "fullcodeline": "cmark_node_free(opener->inl_text);"
    },
    {
        "line": 205,
        "fullcodeline": "process_emphasis(parser, subj, opener->previous_delimiter);"
    },
    {
        "line": 206,
        "fullcodeline": "pop_bracket(subj);"
    },
    {
        "line": 21,
        "fullcodeline": "if (opener == NULL) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (!opener->active) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (peek_char(subj) == '(' &&"
    },
    {
        "line": 75,
        "fullcodeline": "if (!found_label) {"
    },
    {
        "line": 81,
        "fullcodeline": "if ((!found_label || raw_label.len == 0) && !opener->bracket_after) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (ref != NULL) { // found"
    },
    {
        "line": 104,
        "fullcodeline": "if (parser->options & CMARK_OPT_FOOTNOTES &&"
    },
    {
        "line": 184,
        "fullcodeline": "return make_str(subj, subj->pos - 1, subj->pos - 1, cmark_chunk_literal(\"]\"));"
    },
    {
        "line": 211,
        "fullcodeline": "if (!is_image) {"
    },
    {
        "line": 27,
        "fullcodeline": "pop_bracket(subj);"
    },
    {
        "line": 40,
        "fullcodeline": "((n = manual_scan_link_url(&subj->input, subj->pos + 1 + sps,"
    },
    {
        "line": 44,
        "fullcodeline": "endurl = subj->pos + 1 + sps + n;"
    },
    {
        "line": 45,
        "fullcodeline": "starttitle = endurl + scan_spacechars(&subj->input, endurl);"
    },
    {
        "line": 48,
        "fullcodeline": "endtitle = (starttitle == endurl)"
    },
    {
        "line": 52,
        "fullcodeline": "endall = endtitle + scan_spacechars(&subj->input, endtitle);"
    },
    {
        "line": 78,
        "fullcodeline": "subj->pos = initial_pos;"
    },
    {
        "line": 82,
        "fullcodeline": "cmark_chunk_free(subj->mem, &raw_label);"
    },
    {
        "line": 83,
        "fullcodeline": "raw_label = cmark_chunk_dup(&subj->input, opener->position,"
    },
    {
        "line": 85,
        "fullcodeline": "found_label = true;"
    },
    {
        "line": 89,
        "fullcodeline": "ref = (cmark_reference *)cmark_map_lookup(subj->refmap, &raw_label);"
    },
    {
        "line": 90,
        "fullcodeline": "cmark_chunk_free(subj->mem, &raw_label);"
    },
    {
        "line": 94,
        "fullcodeline": "url = chunk_clone(subj->mem, &ref->url);"
    },
    {
        "line": 95,
        "fullcodeline": "title = chunk_clone(subj->mem, &ref->title);"
    },
    {
        "line": 106,
        "fullcodeline": "opener->inl_text->next->type == CMARK_NODE_TEXT) {"
    },
    {
        "line": 197,
        "fullcodeline": "tmpnext = tmp->next;"
    },
    {
        "line": 198,
        "fullcodeline": "cmark_node_append_child(inl, tmp);"
    },
    {
        "line": 199,
        "fullcodeline": "tmp = tmpnext;"
    },
    {
        "line": 212,
        "fullcodeline": "opener = subj->last_bracket;"
    },
    {
        "line": 223,
        "fullcodeline": "bool in_bracket_image1 = false;"
    },
    {
        "line": 227,
        "fullcodeline": "bracket *opener2 = subj->last_bracket;"
    },
    {
        "line": 22,
        "fullcodeline": "return make_str(subj, subj->pos - 1, subj->pos - 1, cmark_chunk_literal(\"]\"));"
    },
    {
        "line": 28,
        "fullcodeline": "return make_str(subj, subj->pos - 1, subj->pos - 1, cmark_chunk_literal(\"]\"));"
    },
    {
        "line": 39,
        "fullcodeline": "((sps = scan_spacechars(&subj->input, subj->pos + 1)) > -1) &&"
    },
    {
        "line": 41,
        "fullcodeline": "&url_chunk)) > -1)) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (peek_at(subj, endall) == ')') {"
    },
    {
        "line": 113,
        "fullcodeline": "if ((literal->len > 0 && literal->data[0] == '^') && (literal->len > 1 || opener->inl_text->next->next)) {"
    },
    {
        "line": 213,
        "fullcodeline": "while (opener != NULL) {"
    },
    {
        "line": 228,
        "fullcodeline": "while (opener2 != opener) {"
    },
    {
        "line": 50,
        "fullcodeline": ": starttitle + scan_link_title(&subj->input, starttitle);"
    },
    {
        "line": 55,
        "fullcodeline": "subj->pos = endall + 1;"
    },
    {
        "line": 57,
        "fullcodeline": "title_chunk ="
    },
    {
        "line": 59,
        "fullcodeline": "url = cmark_clean_url(subj->mem, &url_chunk);"
    },
    {
        "line": 60,
        "fullcodeline": "title = cmark_clean_title(subj->mem, &title_chunk);"
    },
    {
        "line": 61,
        "fullcodeline": "cmark_chunk_free(subj->mem, &url_chunk);"
    },
    {
        "line": 62,
        "fullcodeline": "cmark_chunk_free(subj->mem, &title_chunk);"
    },
    {
        "line": 84,
        "fullcodeline": "initial_pos - opener->position - 1);"
    },
    {
        "line": 119,
        "fullcodeline": "subj->pos = initial_pos;"
    },
    {
        "line": 121,
        "fullcodeline": "cmark_node *fnref = make_simple(subj->mem, CMARK_NODE_FOOTNOTE_REFERENCE);"
    },
    {
        "line": 125,
        "fullcodeline": "int fnref_end_column = subj->pos + subj->column_offset + subj->block_offset;"
    },
    {
        "line": 145,
        "fullcodeline": "fnref->start_line = fnref->end_line = subj->line;"
    },
    {
        "line": 146,
        "fullcodeline": "fnref->start_column = fnref_start_column;"
    },
    {
        "line": 147,
        "fullcodeline": "fnref->end_column = fnref_end_column;"
    },
    {
        "line": 151,
        "fullcodeline": "cmark_node_insert_before(opener->inl_text, fnref);"
    },
    {
        "line": 153,
        "fullcodeline": "process_emphasis(parser, subj, opener->previous_delimiter);"
    },
    {
        "line": 168,
        "fullcodeline": "cmark_node *current_node = opener->inl_text->next;"
    },
    {
        "line": 175,
        "fullcodeline": "cmark_node_free(opener->inl_text);"
    },
    {
        "line": 177,
        "fullcodeline": "pop_bracket(subj);"
    },
    {
        "line": 221,
        "fullcodeline": "opener = opener->previous;"
    },
    {
        "line": 225,
        "fullcodeline": "in_bracket_image1 = opener->in_bracket_image1;"
    },
    {
        "line": 232,
        "fullcodeline": "opener2 = opener2->previous;"
    },
    {
        "line": 58,
        "fullcodeline": "cmark_chunk_dup(&subj->input, starttitle, endtitle - starttitle);"
    },
    {
        "line": 67,
        "fullcodeline": "subj->pos = after_link_text_pos;"
    },
    {
        "line": 139,
        "fullcodeline": "if ((fnref_start_column + 2) <= fnref_end_column) {"
    },
    {
        "line": 214,
        "fullcodeline": "if (!opener->image) {"
    },
    {
        "line": 140,
        "fullcodeline": "fnref->as.literal = cmark_chunk_dup(literal, 1, (fnref_end_column - fnref_start_column) - 2);"
    },
    {
        "line": 170,
        "fullcodeline": "next_node = current_node->next;"
    },
    {
        "line": 171,
        "fullcodeline": "cmark_node_free(current_node);"
    },
    {
        "line": 172,
        "fullcodeline": "current_node = next_node;"
    },
    {
        "line": 230,
        "fullcodeline": "opener2->in_bracket_image1 = in_bracket_image1;"
    },
    {
        "line": 142,
        "fullcodeline": "fnref->as.literal = cmark_chunk_dup(literal, 1, 0);"
    },
    {
        "line": 215,
        "fullcodeline": "if (!opener->active) {"
    },
    {
        "line": 218,
        "fullcodeline": "opener->active = false;"
    }
]