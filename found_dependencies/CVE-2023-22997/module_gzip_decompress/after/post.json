[
    {
        "line": 4,
        "fullcodeline": "struct z_stream_s s = { 0 };"
    },
    {
        "line": 5,
        "fullcodeline": "size_t new_size = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "gzip_hdr_len = module_gzip_header_len(buf, size);"
    },
    {
        "line": 16,
        "fullcodeline": "s.next_in = buf + gzip_hdr_len;"
    },
    {
        "line": 17,
        "fullcodeline": "s.avail_in = size - gzip_hdr_len;"
    },
    {
        "line": 19,
        "fullcodeline": "s.workspace = kmalloc(zlib_inflate_workspacesize(), GFP_KERNEL);"
    },
    {
        "line": 23,
        "fullcodeline": "rc = zlib_inflateInit2(&s, -MAX_WBITS);"
    },
    {
        "line": 52,
        "fullcodeline": "retval = new_size;"
    },
    {
        "line": 55,
        "fullcodeline": "zlib_inflateEnd(&s);"
    },
    {
        "line": 57,
        "fullcodeline": "kfree(s.workspace);"
    },
    {
        "line": 11,
        "fullcodeline": "if (!gzip_hdr_len) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (!s.workspace)"
    },
    {
        "line": 24,
        "fullcodeline": "if (rc != Z_OK) {"
    },
    {
        "line": 44,
        "fullcodeline": "} while (rc == Z_OK);"
    },
    {
        "line": 46,
        "fullcodeline": "if (rc != Z_STREAM_END) {"
    },
    {
        "line": 12,
        "fullcodeline": "pr_err(\"not a gzip compressed module\\n\");"
    },
    {
        "line": 25,
        "fullcodeline": "pr_err(\"failed to initialize decompressor: %d\\n\", rc);"
    },
    {
        "line": 26,
        "fullcodeline": "retval = -EINVAL;"
    },
    {
        "line": 31,
        "fullcodeline": "struct page *page = module_get_next_page(info);"
    },
    {
        "line": 38,
        "fullcodeline": "s.next_out = kmap_local_page(page);"
    },
    {
        "line": 39,
        "fullcodeline": "s.avail_out = PAGE_SIZE;"
    },
    {
        "line": 40,
        "fullcodeline": "rc = zlib_inflate(&s, 0);"
    },
    {
        "line": 41,
        "fullcodeline": "kunmap_local(s.next_out);"
    },
    {
        "line": 43,
        "fullcodeline": "new_size += PAGE_SIZE - s.avail_out;"
    },
    {
        "line": 47,
        "fullcodeline": "pr_err(\"decompression failed with status %d\\n\", rc);"
    },
    {
        "line": 48,
        "fullcodeline": "retval = -EINVAL;"
    },
    {
        "line": 13,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 21,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 33,
        "fullcodeline": "if (IS_ERR(page)) {"
    },
    {
        "line": 34,
        "fullcodeline": "retval = PTR_ERR(page);"
    }
]