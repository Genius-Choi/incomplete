[
    {
        "line": 7,
        "fullcodeline": "char_u  *cmd_start = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "int\t    starts_with_colon = FALSE;"
    },
    {
        "line": 10,
        "fullcodeline": "int\t    vim9script = in_vim9script();"
    },
    {
        "line": 11,
        "fullcodeline": "int\t    has_visual_range = FALSE;"
    },
    {
        "line": 13,
        "fullcodeline": "CLEAR_POINTER(cmod);"
    },
    {
        "line": 14,
        "fullcodeline": "cmod->cmod_flags = sticky_cmdmod_flags;"
    },
    {
        "line": 16,
        "fullcodeline": "if (STRNCMP(eap->cmd, \"'<,'>\", 5) == 0)"
    },
    {
        "line": 21,
        "fullcodeline": "eap->cmd += 5;"
    },
    {
        "line": 22,
        "fullcodeline": "cmd_start = eap->cmd;"
    },
    {
        "line": 23,
        "fullcodeline": "has_visual_range = TRUE;"
    },
    {
        "line": 72,
        "fullcodeline": "p = skip_range(eap->cmd, TRUE, NULL);"
    },
    {
        "line": 29,
        "fullcodeline": "while (*eap->cmd == ' ' || *eap->cmd == '\\t' || *eap->cmd == ':')"
    },
    {
        "line": 37,
        "fullcodeline": "if (*eap->cmd == NUL && exmode_active"
    },
    {
        "line": 48,
        "fullcodeline": "if (comment_start(eap->cmd, starts_with_colon))"
    },
    {
        "line": 61,
        "fullcodeline": "if (*eap->cmd == NUL)"
    },
    {
        "line": 323,
        "fullcodeline": "if (eap->cmd > cmd_start)"
    },
    {
        "line": 33,
        "fullcodeline": "++eap->cmd;"
    },
    {
        "line": 40,
        "fullcodeline": "&& curwin->w_cursor.lnum < curbuf->b_ml.ml_line_count)"
    },
    {
        "line": 42,
        "fullcodeline": "eap->cmd = (char_u *)\"+\";"
    },
    {
        "line": 88,
        "fullcodeline": "n = skipwhite(s);"
    },
    {
        "line": 99,
        "fullcodeline": "cmod->cmod_split |= WSP_ABOVE;"
    },
    {
        "line": 116,
        "fullcodeline": "cmod->cmod_split |= WSP_BOT;"
    },
    {
        "line": 143,
        "fullcodeline": "cmod->cmod_flags |= CMOD_KEEPJUMPS;"
    },
    {
        "line": 200,
        "fullcodeline": "eap->cmd = p;"
    },
    {
        "line": 201,
        "fullcodeline": "cmod->cmod_flags |= CMOD_HIDE;"
    },
    {
        "line": 223,
        "fullcodeline": "cmod->cmod_split |= WSP_ABOVE;"
    },
    {
        "line": 233,
        "fullcodeline": "cmod->cmod_flags |= CMOD_NOSWAPFILE;"
    },
    {
        "line": 238,
        "fullcodeline": "cmod->cmod_split |= WSP_BELOW;"
    },
    {
        "line": 248,
        "fullcodeline": "cmod->cmod_flags |= CMOD_SILENT;"
    },
    {
        "line": 281,
        "fullcodeline": "cmod->cmod_split |= WSP_TOP;"
    },
    {
        "line": 286,
        "fullcodeline": "cmod->cmod_flags |= CMOD_UNSILENT;"
    },
    {
        "line": 315,
        "fullcodeline": "eap->cmd = p;"
    },
    {
        "line": 330,
        "fullcodeline": "eap->cmd -= 5;"
    },
    {
        "line": 31,
        "fullcodeline": "if (*eap->cmd == ':')"
    },
    {
        "line": 38,
        "fullcodeline": "&& (getline_equal(eap->getline, eap->cookie, getexmodeline)"
    },
    {
        "line": 43,
        "fullcodeline": "if (!skip_only)"
    },
    {
        "line": 51,
        "fullcodeline": "if (eap->nextcmd == NULL)"
    },
    {
        "line": 57,
        "fullcodeline": "if (vim9script && has_cmdmod(cmod, FALSE))"
    },
    {
        "line": 86,
        "fullcodeline": "for (s = eap->cmd; ASCII_ISALPHA(*s); ++s)"
    },
    {
        "line": 89,
        "fullcodeline": "if (*n == '.' || *n == '=' || (*n != NUL && n[1] == '=')"
    },
    {
        "line": 97,
        "fullcodeline": "case 'a':\tif (!checkforcmd_noparen(&eap->cmd, \"aboveleft\", 3))"
    },
    {
        "line": 102,
        "fullcodeline": "case 'b':\tif (checkforcmd_noparen(&eap->cmd, \"belowright\", 3))"
    },
    {
        "line": 107,
        "fullcodeline": "if (checkforcmd_opt(&eap->cmd, \"browse\", 3, TRUE))"
    },
    {
        "line": 114,
        "fullcodeline": "if (!checkforcmd_noparen(&eap->cmd, \"botright\", 2))"
    },
    {
        "line": 119,
        "fullcodeline": "case 'c':\tif (!checkforcmd_opt(&eap->cmd, \"confirm\", 4, TRUE))"
    },
    {
        "line": 126,
        "fullcodeline": "case 'k':\tif (checkforcmd_noparen(&eap->cmd, \"keepmarks\", 3))"
    },
    {
        "line": 131,
        "fullcodeline": "if (checkforcmd_noparen(&eap->cmd, \"keepalt\", 5))"
    },
    {
        "line": 136,
        "fullcodeline": "if (checkforcmd_noparen(&eap->cmd, \"keeppatterns\", 5))"
    },
    {
        "line": 141,
        "fullcodeline": "if (!checkforcmd_noparen(&eap->cmd, \"keepjumps\", 5))"
    },
    {
        "line": 149,
        "fullcodeline": "char_u  *nulp = NULL;"
    },
    {
        "line": 150,
        "fullcodeline": "int\t    c = 0;"
    },
    {
        "line": 192,
        "fullcodeline": "eap->cmd = p;"
    },
    {
        "line": 197,
        "fullcodeline": "case 'h':\tif (p != eap->cmd || !checkforcmd_noparen(&p, \"hide\", 3)"
    },
    {
        "line": 204,
        "fullcodeline": "case 'l':\tif (checkforcmd_noparen(&eap->cmd, \"lockmarks\", 3))"
    },
    {
        "line": 209,
        "fullcodeline": "if (checkforcmd_noparen(&eap->cmd, \"legacy\", 3))"
    },
    {
        "line": 221,
        "fullcodeline": "if (!checkforcmd_noparen(&eap->cmd, \"leftabove\", 5))"
    },
    {
        "line": 226,
        "fullcodeline": "case 'n':\tif (checkforcmd_noparen(&eap->cmd, \"noautocmd\", 3))"
    },
    {
        "line": 231,
        "fullcodeline": "if (!checkforcmd_noparen(&eap->cmd, \"noswapfile\", 3))"
    },
    {
        "line": 236,
        "fullcodeline": "case 'r':\tif (!checkforcmd_noparen(&eap->cmd, \"rightbelow\", 6))"
    },
    {
        "line": 241,
        "fullcodeline": "case 's':\tif (checkforcmd_noparen(&eap->cmd, \"sandbox\", 3))"
    },
    {
        "line": 246,
        "fullcodeline": "if (!checkforcmd_noparen(&eap->cmd, \"silent\", 3))"
    },
    {
        "line": 249,
        "fullcodeline": "if (*eap->cmd == '!' && !VIM_ISWHITE(eap->cmd[-1]))"
    },
    {
        "line": 257,
        "fullcodeline": "case 't':\tif (checkforcmd_noparen(&p, \"tab\", 3))"
    },
    {
        "line": 279,
        "fullcodeline": "if (!checkforcmd_noparen(&eap->cmd, \"topleft\", 2))"
    },
    {
        "line": 284,
        "fullcodeline": "case 'u':\tif (!checkforcmd_noparen(&eap->cmd, \"unsilent\", 3))"
    },
    {
        "line": 289,
        "fullcodeline": "case 'v':\tif (checkforcmd_noparen(&eap->cmd, \"vertical\", 4))"
    },
    {
        "line": 294,
        "fullcodeline": "if (checkforcmd_noparen(&eap->cmd, \"vim9cmd\", 4))"
    },
    {
        "line": 305,
        "fullcodeline": "if (!checkforcmd_noparen(&p, \"verbose\", 4))"
    },
    {
        "line": 307,
        "fullcodeline": "if (vim_isdigit(*eap->cmd))"
    },
    {
        "line": 329,
        "fullcodeline": "mch_memmove(cmd_start - 5, cmd_start, eap->cmd - cmd_start);"
    },
    {
        "line": 331,
        "fullcodeline": "mch_memmove(eap->cmd - 1, \":'<,'>\", 6);"
    },
    {
        "line": 32,
        "fullcodeline": "starts_with_colon = TRUE;"
    },
    {
        "line": 39,
        "fullcodeline": "|| getline_equal(eap->getline, eap->cookie, getexline))"
    },
    {
        "line": 44,
        "fullcodeline": "ex_pressedreturn = TRUE;"
    },
    {
        "line": 53,
        "fullcodeline": "eap->nextcmd = vim_strchr(eap->cmd, '\\n');"
    },
    {
        "line": 58,
        "fullcodeline": "*errormsg = _(e_command_modifier_without_command);"
    },
    {
        "line": 90,
        "fullcodeline": "|| *s == '[')"
    },
    {
        "line": 104,
        "fullcodeline": "cmod->cmod_split |= WSP_BELOW;"
    },
    {
        "line": 128,
        "fullcodeline": "cmod->cmod_flags |= CMOD_KEEPMARKS;"
    },
    {
        "line": 133,
        "fullcodeline": "cmod->cmod_flags |= CMOD_KEEPALT;"
    },
    {
        "line": 138,
        "fullcodeline": "cmod->cmod_flags |= CMOD_KEEPPATTERNS;"
    },
    {
        "line": 152,
        "fullcodeline": "if (!checkforcmd_noparen(&p, \"filter\", 4)"
    },
    {
        "line": 162,
        "fullcodeline": "if (*p == '!')"
    },
    {
        "line": 180,
        "fullcodeline": "if (p == NULL || *p == NUL)"
    },
    {
        "line": 182,
        "fullcodeline": "if (!skip_only)"
    },
    {
        "line": 198,
        "fullcodeline": "|| *p == NUL || ends_excmd(*p))"
    },
    {
        "line": 206,
        "fullcodeline": "cmod->cmod_flags |= CMOD_LOCKMARKS;"
    },
    {
        "line": 217,
        "fullcodeline": "cmod->cmod_flags |= CMOD_LEGACY;"
    },
    {
        "line": 228,
        "fullcodeline": "cmod->cmod_flags |= CMOD_NOAUTOCMD;"
    },
    {
        "line": 243,
        "fullcodeline": "cmod->cmod_flags |= CMOD_SANDBOX;"
    },
    {
        "line": 252,
        "fullcodeline": "eap->cmd = skipwhite(eap->cmd + 1);"
    },
    {
        "line": 253,
        "fullcodeline": "cmod->cmod_flags |= CMOD_ERRSILENT;"
    },
    {
        "line": 276,
        "fullcodeline": "eap->cmd = p;"
    },
    {
        "line": 291,
        "fullcodeline": "cmod->cmod_split |= WSP_VERT;"
    },
    {
        "line": 302,
        "fullcodeline": "cmod->cmod_flags |= CMOD_VIM9CMD;"
    },
    {
        "line": 309,
        "fullcodeline": "cmod->cmod_verbose = atoi((char *)eap->cmd);"
    },
    {
        "line": 54,
        "fullcodeline": "if (eap->nextcmd != NULL)"
    },
    {
        "line": 154,
        "fullcodeline": "|| (ends_excmd(*p)"
    },
    {
        "line": 164,
        "fullcodeline": "cmod->cmod_filter_force = TRUE;"
    },
    {
        "line": 165,
        "fullcodeline": "p = skipwhite(p + 1);"
    },
    {
        "line": 175,
        "fullcodeline": "p = skip_vimgrep_pat(p, NULL, NULL);"
    },
    {
        "line": 184,
        "fullcodeline": "cmod->cmod_filter_regmatch.regprog ="
    },
    {
        "line": 211,
        "fullcodeline": "if (ends_excmd2(p, eap->cmd))"
    },
    {
        "line": 259,
        "fullcodeline": "if (!skip_only)"
    },
    {
        "line": 296,
        "fullcodeline": "if (ends_excmd2(p, eap->cmd))"
    },
    {
        "line": 310,
        "fullcodeline": "if (cmod->cmod_verbose == 0)"
    },
    {
        "line": 314,
        "fullcodeline": "cmod->cmod_verbose = 1;"
    },
    {
        "line": 55,
        "fullcodeline": "++eap->nextcmd;"
    },
    {
        "line": 66,
        "fullcodeline": "if (vim9script && has_cmdmod(cmod, FALSE))"
    },
    {
        "line": 153,
        "fullcodeline": "|| *p == NUL"
    },
    {
        "line": 166,
        "fullcodeline": "if (*p == NUL || ends_excmd(*p))"
    },
    {
        "line": 178,
        "fullcodeline": "p = skip_vimgrep_pat_ext(p, &reg_pat, NULL,"
    },
    {
        "line": 185,
        "fullcodeline": "vim_regcomp(reg_pat, RE_MAGIC);"
    },
    {
        "line": 186,
        "fullcodeline": "if (cmod->cmod_filter_regmatch.regprog == NULL)"
    },
    {
        "line": 189,
        "fullcodeline": "if (nulp != NULL)"
    },
    {
        "line": 261,
        "fullcodeline": "long tabnr = get_address(eap, &eap->cmd,"
    },
    {
        "line": 311,
        "fullcodeline": "cmod->cmod_verbose = -1;"
    },
    {
        "line": 67,
        "fullcodeline": "*errormsg = _(e_command_modifier_without_command);"
    },
    {
        "line": 190,
        "fullcodeline": "*nulp = c;"
    },
    {
        "line": 214,
        "fullcodeline": "_(e_legacy_must_be_followed_by_command);"
    },
    {
        "line": 264,
        "fullcodeline": "if (tabnr == MAXLNUM)"
    },
    {
        "line": 299,
        "fullcodeline": "_(e_vim9cmd_must_be_followed_by_command);"
    },
    {
        "line": 265,
        "fullcodeline": "cmod->cmod_tab = tabpage_index(curtab) + 1;"
    },
    {
        "line": 273,
        "fullcodeline": "cmod->cmod_tab = tabnr + 1;"
    },
    {
        "line": 268,
        "fullcodeline": "if (tabnr < 0 || tabnr > LAST_TAB_NR)"
    },
    {
        "line": 270,
        "fullcodeline": "*errormsg = _(e_invalid_range);"
    }
]