[
    {
        "line": 5,
        "fullcodeline": "av_req_data_t *data = ci_service_data(req);"
    },
    {
        "line": 12,
        "fullcodeline": "char *chain_ret = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "char *ret = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "int chkipdone = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: processing preview header.\\n\");"
    },
    {
        "line": 77,
        "fullcodeline": "ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: URL requested: %s\\n\", httpinf.url);"
    },
    {
        "line": 125,
        "fullcodeline": "content_length = ci_http_content_length(req);"
    },
    {
        "line": 126,
        "fullcodeline": "ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Content-Length: %d\\n\", (int)content_length);"
    },
    {
        "line": 154,
        "fullcodeline": "data->url = ci_buffer_alloc(strlen(httpinf.url)+1);"
    },
    {
        "line": 155,
        "fullcodeline": "strcpy(data->url, httpinf.url);"
    },
    {
        "line": 170,
        "fullcodeline": "data->body = ci_simple_file_new(0);"
    },
    {
        "line": 22,
        "fullcodeline": "if ((req_header = ci_http_request_headers(req)) == NULL) {"
    },
    {
        "line": 28,
        "fullcodeline": "if ((username = ci_headers_value(req->request_header, \"X-Authenticated-User\")) != NULL) {"
    },
    {
        "line": 42,
        "fullcodeline": "if ((clientip = ci_headers_value(req->request_header, \"X-Client-IP\")) != NULL) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (!extract_http_info(req, req_header, &httpinf)) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (simple_pattern_compare(httpinf.url, WHITELIST) == 1) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (usepipe == 1) {"
    },
    {
        "line": 113,
        "fullcodeline": "if (strcmp(httpinf.method, \"CONNECT\") == 0) {"
    },
    {
        "line": 119,
        "fullcodeline": "if (simple_pattern_compare(httpinf.url, ABORT) == 1) {"
    },
    {
        "line": 128,
        "fullcodeline": "if ((content_length > 0) && (maxsize > 0) && (content_length >= maxsize)) {"
    },
    {
        "line": 134,
        "fullcodeline": "if ((content_type = http_content_type(req)) != NULL) {"
    },
    {
        "line": 144,
        "fullcodeline": "if (!data || !ci_req_hasbody(req)) {"
    },
    {
        "line": 149,
        "fullcodeline": "if (preview_data_len == 0) {"
    },
    {
        "line": 156,
        "fullcodeline": "if (username != NULL) {"
    },
    {
        "line": 162,
        "fullcodeline": "if (clientip != NULL) {"
    },
    {
        "line": 171,
        "fullcodeline": "if ((SEND_PERCENT_BYTES >= 0) && (START_SEND_AFTER == 0)) {"
    },
    {
        "line": 175,
        "fullcodeline": "if (!data->body)"
    },
    {
        "line": 19,
        "fullcodeline": "ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: preview data size is %d\\n\", preview_data_len);"
    },
    {
        "line": 23,
        "fullcodeline": "ci_debug_printf(0, \"ERROR squidclamav_check_preview_handler: bad http header, aborting.\\n\");"
    },
    {
        "line": 29,
        "fullcodeline": "ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: X-Authenticated-User: %s\\n\", username);"
    },
    {
        "line": 43,
        "fullcodeline": "ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: X-Client-IP: %s\\n\", clientip);"
    },
    {
        "line": 44,
        "fullcodeline": "ip = inet_addr(clientip);"
    },
    {
        "line": 45,
        "fullcodeline": "chkipdone = 0;"
    },
    {
        "line": 74,
        "fullcodeline": "ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: bad http header, aborting.\\n\");"
    },
    {
        "line": 81,
        "fullcodeline": "ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No squidguard and antivir check (WHITELIST match) for url: %s\\n\", httpinf.url);"
    },
    {
        "line": 88,
        "fullcodeline": "ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Sending request to chained program: %s\\n\", squidguard);"
    },
    {
        "line": 89,
        "fullcodeline": "ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Request: %s %s %s %s\\n\", httpinf.url,clientip,username,httpinf.method);"
    },
    {
        "line": 90,
        "fullcodeline": "fprintf(sgfpw,\"%s %s %s %s\\n\",httpinf.url,clientip,username,httpinf.method);"
    },
    {
        "line": 91,
        "fullcodeline": "fflush(sgfpw);"
    },
    {
        "line": 93,
        "fullcodeline": "chain_ret = (char *)malloc(sizeof(char)*MAX_URL_SIZE);"
    },
    {
        "line": 114,
        "fullcodeline": "ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: method %s can't be scanned.\\n\", httpinf.method);"
    },
    {
        "line": 120,
        "fullcodeline": "ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No antivir check (ABORT match) for url: %s\\n\", httpinf.url);"
    },
    {
        "line": 129,
        "fullcodeline": "ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: No antivir check, content-length upper than maxsize (%d > %d)\\n\", content_length, (int)maxsize);"
    },
    {
        "line": 135,
        "fullcodeline": "ci_debug_printf(2, \"DEBUG squidclamav_check_preview_handler: Content-Type: %s\\n\", content_type);"
    },
    {
        "line": 145,
        "fullcodeline": "ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No body data, allow 204\\n\");"
    },
    {
        "line": 150,
        "fullcodeline": "ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: can not begin to scan url: No preview data.\\n\");"
    },
    {
        "line": 157,
        "fullcodeline": "data->user = ci_buffer_alloc(strlen(username)+1);"
    },
    {
        "line": 158,
        "fullcodeline": "strcpy(data->user, username);"
    },
    {
        "line": 163,
        "fullcodeline": "data->clientip = ci_buffer_alloc(strlen(clientip)+1);"
    },
    {
        "line": 164,
        "fullcodeline": "strcpy(data->clientip, clientip);"
    },
    {
        "line": 172,
        "fullcodeline": "ci_req_unlock_data(req);"
    },
    {
        "line": 173,
        "fullcodeline": "ci_simple_file_lock_all(data->body);"
    },
    {
        "line": 31,
        "fullcodeline": "if (simple_pattern_compare(username, TRUSTUSER) == 1) {"
    },
    {
        "line": 37,
        "fullcodeline": "username = (char *)malloc(sizeof(char)*2);"
    },
    {
        "line": 38,
        "fullcodeline": "strcpy(username, \"-\");"
    },
    {
        "line": 46,
        "fullcodeline": "if (dnslookup == 1) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (chkipdone == 0) {"
    },
    {
        "line": 67,
        "fullcodeline": "clientip = (char *)malloc(sizeof(char)*2);"
    },
    {
        "line": 68,
        "fullcodeline": "strcpy(clientip, \"-\");"
    },
    {
        "line": 94,
        "fullcodeline": "if (chain_ret != NULL) {"
    },
    {
        "line": 137,
        "fullcodeline": "if (simple_pattern_compare(content_type, ABORTCONTENT)) {"
    },
    {
        "line": 160,
        "fullcodeline": "data->user = NULL;"
    },
    {
        "line": 166,
        "fullcodeline": "ci_debug_printf(0, \"ERROR squidclamav_check_preview_handler: clientip is null, you must set 'icap_send_client_ip on' into squid.conf\\n\");"
    },
    {
        "line": 167,
        "fullcodeline": "data->clientip = NULL;"
    },
    {
        "line": 179,
        "fullcodeline": "if (ci_simple_file_write(data->body, preview_data, preview_data_len, ci_req_hasalldata(req)) == CI_ERROR)"
    },
    {
        "line": 32,
        "fullcodeline": "ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No squidguard and antivir check (TRUSTUSER match) for user: %s\\n\", username);"
    },
    {
        "line": 95,
        "fullcodeline": "ret = fgets(chain_ret,MAX_URL_SIZE,sgfpr);"
    },
    {
        "line": 107,
        "fullcodeline": "xfree(chain_ret);"
    },
    {
        "line": 108,
        "fullcodeline": "chain_ret = NULL;"
    },
    {
        "line": 138,
        "fullcodeline": "ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No antivir check (ABORTCONTENT match) for content-type: %s\\n\", content_type);"
    },
    {
        "line": 47,
        "fullcodeline": "if ( (clientname = gethostbyaddr((char *)&ip, sizeof(ip), AF_INET)) != NULL) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (client_pattern_compare(clientip, NULL) > 0) {"
    },
    {
        "line": 96,
        "fullcodeline": "if ((ret != NULL) && (strlen(chain_ret) > 1)) {"
    },
    {
        "line": 61,
        "fullcodeline": "ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No squidguard and antivir check (TRUSTCLIENT match) for client: %s\\n\", clientip);"
    },
    {
        "line": 97,
        "fullcodeline": "ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: Chained program redirection received: %s\\n\", chain_ret);"
    },
    {
        "line": 101,
        "fullcodeline": "data->blocked = 1;"
    },
    {
        "line": 102,
        "fullcodeline": "generate_redirect_page(strtok(chain_ret, \" \"), req, data);"
    },
    {
        "line": 103,
        "fullcodeline": "xfree(chain_ret);"
    },
    {
        "line": 104,
        "fullcodeline": "chain_ret = NULL;"
    },
    {
        "line": 48,
        "fullcodeline": "if (clientname->h_name != NULL) {"
    },
    {
        "line": 54,
        "fullcodeline": "chkipdone = 1;"
    },
    {
        "line": 99,
        "fullcodeline": "ci_debug_printf(0, \"INFO Chained program redirection received: %s\\n\", chain_ret);"
    },
    {
        "line": 50,
        "fullcodeline": "if (client_pattern_compare(clientip, clientname->h_name) > 0) {"
    },
    {
        "line": 51,
        "fullcodeline": "ci_debug_printf(1, \"DEBUG squidclamav_check_preview_handler: No squidguard and antivir check (TRUSTCLIENT match) for client: %s(%s)\\n\", clientname->h_name, clientip);"
    }
]