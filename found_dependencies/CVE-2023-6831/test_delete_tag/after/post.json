[
    {
        "line": 2,
        "fullcodeline": "experiment_id = mlflow_client.create_experiment(\"DeleteTagExperiment\")"
    },
    {
        "line": 3,
        "fullcodeline": "created_run = mlflow_client.create_run(experiment_id)"
    },
    {
        "line": 5,
        "fullcodeline": "mlflow_client.log_metric(run_id, key=\"metric\", value=123.456, timestamp=789, step=2)"
    },
    {
        "line": 6,
        "fullcodeline": "mlflow_client.log_metric(run_id, key=\"stepless-metric\", value=987.654, timestamp=321)"
    },
    {
        "line": 7,
        "fullcodeline": "mlflow_client.log_param(run_id, \"param\", \"value\")"
    },
    {
        "line": 8,
        "fullcodeline": "mlflow_client.set_tag(run_id, \"taggity\", \"do-dah\")"
    },
    {
        "line": 9,
        "fullcodeline": "run = mlflow_client.get_run(run_id)"
    },
    {
        "line": 10,
        "fullcodeline": "assert \"taggity\" in run.data.tags"
    },
    {
        "line": 11,
        "fullcodeline": "assert run.data.tags[\"taggity\"] == \"do-dah\""
    },
    {
        "line": 12,
        "fullcodeline": "mlflow_client.delete_tag(run_id, \"taggity\")"
    },
    {
        "line": 13,
        "fullcodeline": "run = mlflow_client.get_run(run_id)"
    },
    {
        "line": 14,
        "fullcodeline": "assert \"taggity\" not in run.data.tags"
    },
    {
        "line": 19,
        "fullcodeline": "mlflow_client.delete_run(run_id)"
    },
    {
        "line": 15,
        "fullcodeline": "with pytest.raises(MlflowException, match=r\"Run .+ not found\"):"
    },
    {
        "line": 17,
        "fullcodeline": "with pytest.raises(MlflowException, match=\"No tag with name: fakeTag\"):"
    },
    {
        "line": 20,
        "fullcodeline": "with pytest.raises(MlflowException, match=f\"The run {run_id} must be in\"):"
    },
    {
        "line": 16,
        "fullcodeline": "mlflow_client.delete_tag(\"fake_run_id\", \"taggity\")"
    },
    {
        "line": 18,
        "fullcodeline": "mlflow_client.delete_tag(run_id, \"fakeTag\")"
    },
    {
        "line": 21,
        "fullcodeline": "mlflow_client.delete_tag(run_id, \"taggity\")"
    }
]