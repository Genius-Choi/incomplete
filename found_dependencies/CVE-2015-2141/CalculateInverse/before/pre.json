[
    {
        "line": 3,
        "fullcodeline": "DoQuickSanityCheck();"
    },
    {
        "line": 4,
        "fullcodeline": "ModularArithmetic modn(m_n);"
    },
    {
        "line": 10,
        "fullcodeline": "Integer re = modn.Square(r);"
    },
    {
        "line": 11,
        "fullcodeline": "re = modn.Multiply(re, x);\t\t\t// blind"
    },
    {
        "line": 13,
        "fullcodeline": "Integer cp=re%m_p, cq=re%m_q;"
    },
    {
        "line": 29,
        "fullcodeline": "Integer y = CRT(cq, m_q, cp, m_p, m_u);"
    },
    {
        "line": 30,
        "fullcodeline": "y = modn.Multiply(y, rInv);\t\t\t\t// unblind"
    },
    {
        "line": 31,
        "fullcodeline": "y = STDMIN(y, m_n-y);"
    },
    {
        "line": 9,
        "fullcodeline": "} while (rInv.IsZero());"
    },
    {
        "line": 14,
        "fullcodeline": "if (Jacobi(cp, m_p) * Jacobi(cq, m_q) != 1)"
    },
    {
        "line": 24,
        "fullcodeline": "cp = ModularSquareRoot(cp, m_p);"
    },
    {
        "line": 26,
        "fullcodeline": "cq = ModularSquareRoot(cq, m_q);"
    },
    {
        "line": 32,
        "fullcodeline": "if (ApplyFunction(y) != x)\t\t\t\t// check"
    },
    {
        "line": 7,
        "fullcodeline": "r.Randomize(rng, Integer::One(), m_n - Integer::One());"
    },
    {
        "line": 8,
        "fullcodeline": "rInv = modn.MultiplicativeInverse(r);"
    },
    {
        "line": 16,
        "fullcodeline": "cp = cp.IsOdd() ? (cp+m_p) >> 1 : cp >> 1;"
    },
    {
        "line": 17,
        "fullcodeline": "cq = cq.IsOdd() ? (cq+m_q) >> 1 : cq >> 1;"
    },
    {
        "line": 33,
        "fullcodeline": "throw Exception(Exception::OTHER_ERROR, \"InvertibleRWFunction: computational error during private key operation\");"
    }
]