[
    {
        "line": 4,
        "fullcodeline": "struct usb_cdc_union_desc *union_header = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "struct usb_cdc_country_functional_desc *cfd = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "struct usb_endpoint_descriptor *epctrl = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "struct usb_endpoint_descriptor *epread = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "struct usb_endpoint_descriptor *epwrite = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "struct usb_device *usb_dev = interface_to_usbdev(intf);"
    },
    {
        "line": 18,
        "fullcodeline": "u8 ac_management_function = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "u8 call_management_function = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "int call_interface_num = -1;"
    },
    {
        "line": 21,
        "fullcodeline": "int data_interface_num = -1;"
    },
    {
        "line": 25,
        "fullcodeline": "unsigned int elength = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "int combined_interfaces = 0;"
    },
    {
        "line": 28,
        "fullcodeline": "int rv = -ENOMEM;"
    },
    {
        "line": 31,
        "fullcodeline": "quirks = (unsigned long)id->driver_info;"
    },
    {
        "line": 36,
        "fullcodeline": "num_rx_buf = (quirks == SINGLE_RX_URB) ? 1 : ACM_NR;"
    },
    {
        "line": 231,
        "fullcodeline": "dev_dbg(&intf->dev, \"interfaces are valid\\n\");"
    },
    {
        "line": 233,
        "fullcodeline": "acm = kzalloc(sizeof(struct acm), GFP_KERNEL);"
    },
    {
        "line": 237,
        "fullcodeline": "minor = acm_alloc_minor(acm);"
    },
    {
        "line": 244,
        "fullcodeline": "ctrlsize = usb_endpoint_maxp(epctrl);"
    },
    {
        "line": 245,
        "fullcodeline": "readsize = usb_endpoint_maxp(epread) *"
    },
    {
        "line": 247,
        "fullcodeline": "acm->combined_interfaces = combined_interfaces;"
    },
    {
        "line": 248,
        "fullcodeline": "acm->writesize = usb_endpoint_maxp(epwrite) * 20;"
    },
    {
        "line": 249,
        "fullcodeline": "acm->control = control_interface;"
    },
    {
        "line": 250,
        "fullcodeline": "acm->data = data_interface;"
    },
    {
        "line": 251,
        "fullcodeline": "acm->minor = minor;"
    },
    {
        "line": 252,
        "fullcodeline": "acm->dev = usb_dev;"
    },
    {
        "line": 253,
        "fullcodeline": "acm->ctrl_caps = ac_management_function;"
    },
    {
        "line": 256,
        "fullcodeline": "acm->ctrlsize = ctrlsize;"
    },
    {
        "line": 257,
        "fullcodeline": "acm->readsize = readsize;"
    },
    {
        "line": 258,
        "fullcodeline": "acm->rx_buflimit = num_rx_buf;"
    },
    {
        "line": 259,
        "fullcodeline": "INIT_WORK(&acm->work, acm_softint);"
    },
    {
        "line": 260,
        "fullcodeline": "init_waitqueue_head(&acm->wioctl);"
    },
    {
        "line": 261,
        "fullcodeline": "spin_lock_init(&acm->write_lock);"
    },
    {
        "line": 262,
        "fullcodeline": "spin_lock_init(&acm->read_lock);"
    },
    {
        "line": 263,
        "fullcodeline": "mutex_init(&acm->mutex);"
    },
    {
        "line": 264,
        "fullcodeline": "acm->rx_endpoint = usb_rcvbulkpipe(usb_dev, epread->bEndpointAddress);"
    },
    {
        "line": 265,
        "fullcodeline": "acm->is_int_ep = usb_endpoint_xfer_int(epread);"
    },
    {
        "line": 268,
        "fullcodeline": "tty_port_init(&acm->port);"
    },
    {
        "line": 269,
        "fullcodeline": "acm->port.ops = &acm_port_ops;"
    },
    {
        "line": 270,
        "fullcodeline": "init_usb_anchor(&acm->delayed);"
    },
    {
        "line": 271,
        "fullcodeline": "acm->quirks = quirks;"
    },
    {
        "line": 273,
        "fullcodeline": "buf = usb_alloc_coherent(usb_dev, ctrlsize, GFP_KERNEL, &acm->ctrl_dma);"
    },
    {
        "line": 276,
        "fullcodeline": "acm->ctrl_buffer = buf;"
    },
    {
        "line": 281,
        "fullcodeline": "acm->ctrlurb = usb_alloc_urb(0, GFP_KERNEL);"
    },
    {
        "line": 341,
        "fullcodeline": "usb_set_intfdata(intf, acm);"
    },
    {
        "line": 343,
        "fullcodeline": "i = device_create_file(&intf->dev, &dev_attr_bmCapabilities);"
    },
    {
        "line": 376,
        "fullcodeline": "usb_fill_int_urb(acm->ctrlurb, usb_dev,"
    },
    {
        "line": 381,
        "fullcodeline": "acm->ctrlurb->transfer_flags |= URB_NO_TRANSFER_DMA_MAP;"
    },
    {
        "line": 382,
        "fullcodeline": "acm->ctrlurb->transfer_dma = acm->ctrl_dma;"
    },
    {
        "line": 384,
        "fullcodeline": "dev_info(&intf->dev, \"ttyACM%d: USB ACM device\\n\", minor);"
    },
    {
        "line": 386,
        "fullcodeline": "acm->line.dwDTERate = cpu_to_le32(9600);"
    },
    {
        "line": 387,
        "fullcodeline": "acm->line.bDataBits = 8;"
    },
    {
        "line": 388,
        "fullcodeline": "acm_set_line(acm, &acm->line);"
    },
    {
        "line": 390,
        "fullcodeline": "usb_driver_claim_interface(&acm_driver, data_interface, acm);"
    },
    {
        "line": 391,
        "fullcodeline": "usb_set_intfdata(data_interface, acm);"
    },
    {
        "line": 393,
        "fullcodeline": "usb_get_intf(control_interface);"
    },
    {
        "line": 394,
        "fullcodeline": "tty_dev = tty_port_register_device(&acm->port, acm_tty_driver, minor,"
    },
    {
        "line": 415,
        "fullcodeline": "device_remove_file(&acm->control->dev, &dev_attr_bmCapabilities);"
    },
    {
        "line": 417,
        "fullcodeline": "usb_set_intfdata(intf, NULL);"
    },
    {
        "line": 423,
        "fullcodeline": "acm_read_buffers_free(acm);"
    },
    {
        "line": 424,
        "fullcodeline": "usb_free_urb(acm->ctrlurb);"
    },
    {
        "line": 426,
        "fullcodeline": "acm_write_buffers_free(acm);"
    },
    {
        "line": 428,
        "fullcodeline": "usb_free_coherent(usb_dev, ctrlsize, acm->ctrl_buffer, acm->ctrl_dma);"
    },
    {
        "line": 430,
        "fullcodeline": "acm_release_minor(acm);"
    },
    {
        "line": 431,
        "fullcodeline": "kfree(acm);"
    },
    {
        "line": 33,
        "fullcodeline": "if (quirks == IGNORE_DEVICE)"
    },
    {
        "line": 39,
        "fullcodeline": "if (quirks == NO_UNION_NORMAL) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (!buffer) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (!buflen) {"
    },
    {
        "line": 69,
        "fullcodeline": "while (buflen > 0) {"
    },
    {
        "line": 125,
        "fullcodeline": "if (!union_header) {"
    },
    {
        "line": 150,
        "fullcodeline": "if (!control_interface || !data_interface) {"
    },
    {
        "line": 155,
        "fullcodeline": "if (data_interface_num != call_interface_num)"
    },
    {
        "line": 158,
        "fullcodeline": "if (control_interface == data_interface) {"
    },
    {
        "line": 191,
        "fullcodeline": "if (data_interface->cur_altsetting->desc.bInterfaceClass"
    },
    {
        "line": 204,
        "fullcodeline": "if (!combined_interfaces && intf != control_interface)"
    },
    {
        "line": 207,
        "fullcodeline": "if (!combined_interfaces && usb_interface_claimed(data_interface)) {"
    },
    {
        "line": 214,
        "fullcodeline": "if (data_interface->cur_altsetting->desc.bNumEndpoints < 2 ||"
    },
    {
        "line": 224,
        "fullcodeline": "if (!usb_endpoint_dir_in(epread)) {"
    },
    {
        "line": 234,
        "fullcodeline": "if (acm == NULL)"
    },
    {
        "line": 238,
        "fullcodeline": "if (minor < 0) {"
    },
    {
        "line": 254,
        "fullcodeline": "if (quirks & NO_CAP_LINE)"
    },
    {
        "line": 274,
        "fullcodeline": "if (!buf)"
    },
    {
        "line": 278,
        "fullcodeline": "if (acm_write_buffers_alloc(acm) < 0)"
    },
    {
        "line": 282,
        "fullcodeline": "if (!acm->ctrlurb)"
    },
    {
        "line": 285,
        "fullcodeline": "for (i = 0; i < num_rx_buf; i++) {"
    },
    {
        "line": 320,
        "fullcodeline": "for (i = 0; i < ACM_NW; i++) {"
    },
    {
        "line": 344,
        "fullcodeline": "if (i < 0)"
    },
    {
        "line": 377,
        "fullcodeline": "usb_rcvintpipe(usb_dev, epctrl->bEndpointAddress),"
    },
    {
        "line": 380,
        "fullcodeline": "epctrl->bInterval ? epctrl->bInterval : 16);"
    },
    {
        "line": 396,
        "fullcodeline": "if (IS_ERR(tty_dev)) {"
    },
    {
        "line": 401,
        "fullcodeline": "if (quirks & CLEAR_HALT_CONDITIONS) {"
    },
    {
        "line": 418,
        "fullcodeline": "for (i = 0; i < ACM_NW; i++)"
    },
    {
        "line": 421,
        "fullcodeline": "for (i = 0; i < num_rx_buf; i++)"
    },
    {
        "line": 422,
        "fullcodeline": "usb_free_urb(acm->read_urbs[i]);"
    },
    {
        "line": 40,
        "fullcodeline": "data_interface = usb_ifnum_to_if(usb_dev, 1);"
    },
    {
        "line": 41,
        "fullcodeline": "control_interface = usb_ifnum_to_if(usb_dev, 0);"
    },
    {
        "line": 50,
        "fullcodeline": "dev_err(&intf->dev, \"Weird descriptor references\\n\");"
    },
    {
        "line": 70,
        "fullcodeline": "elength = buffer[0];"
    },
    {
        "line": 121,
        "fullcodeline": "buflen -= elength;"
    },
    {
        "line": 122,
        "fullcodeline": "buffer += elength;"
    },
    {
        "line": 151,
        "fullcodeline": "dev_dbg(&intf->dev, \"no interfaces\\n\");"
    },
    {
        "line": 156,
        "fullcodeline": "dev_dbg(&intf->dev, \"Separate call control interface. That is not fully supported.\\n\");"
    },
    {
        "line": 160,
        "fullcodeline": "dev_warn(&intf->dev,\"Control and data interfaces are not separated!\\n\");"
    },
    {
        "line": 161,
        "fullcodeline": "combined_interfaces = 1;"
    },
    {
        "line": 163,
        "fullcodeline": "quirks |= NO_CAP_LINE;"
    },
    {
        "line": 209,
        "fullcodeline": "dev_dbg(&intf->dev, \"The data interface isn't available\\n\");"
    },
    {
        "line": 215,
        "fullcodeline": "control_interface->cur_altsetting->desc.bNumEndpoints == 0)"
    },
    {
        "line": 226,
        "fullcodeline": "dev_dbg(&intf->dev,"
    },
    {
        "line": 228,
        "fullcodeline": "swap(epread, epwrite);"
    },
    {
        "line": 239,
        "fullcodeline": "dev_err(&intf->dev, \"no more free acm devices\\n\");"
    },
    {
        "line": 240,
        "fullcodeline": "kfree(acm);"
    },
    {
        "line": 246,
        "fullcodeline": "(quirks == SINGLE_RX_URB ? 1 : 2);"
    },
    {
        "line": 255,
        "fullcodeline": "acm->ctrl_caps &= ~USB_CDC_CAP_LINE;"
    },
    {
        "line": 267,
        "fullcodeline": "acm->bInterval = epread->bInterval;"
    },
    {
        "line": 289,
        "fullcodeline": "rb->base = usb_alloc_coherent(acm->dev, readsize, GFP_KERNEL,"
    },
    {
        "line": 293,
        "fullcodeline": "rb->index = i;"
    },
    {
        "line": 294,
        "fullcodeline": "rb->instance = acm;"
    },
    {
        "line": 296,
        "fullcodeline": "urb = usb_alloc_urb(0, GFP_KERNEL);"
    },
    {
        "line": 300,
        "fullcodeline": "urb->transfer_flags |= URB_NO_TRANSFER_DMA_MAP;"
    },
    {
        "line": 301,
        "fullcodeline": "urb->transfer_dma = rb->dma;"
    },
    {
        "line": 317,
        "fullcodeline": "acm->read_urbs[i] = urb;"
    },
    {
        "line": 318,
        "fullcodeline": "__set_bit(i, &acm->read_urbs_free);"
    },
    {
        "line": 323,
        "fullcodeline": "snd->urb = usb_alloc_urb(0, GFP_KERNEL);"
    },
    {
        "line": 335,
        "fullcodeline": "snd->urb->transfer_flags |= URB_NO_TRANSFER_DMA_MAP;"
    },
    {
        "line": 338,
        "fullcodeline": "snd->instance = acm;"
    },
    {
        "line": 348,
        "fullcodeline": "acm->country_codes = kmalloc(cfd->bLength - 4, GFP_KERNEL);"
    },
    {
        "line": 351,
        "fullcodeline": "acm->country_code_size = cfd->bLength - 4;"
    },
    {
        "line": 352,
        "fullcodeline": "memcpy(acm->country_codes, (u8 *)&cfd->wCountyCode0,"
    },
    {
        "line": 354,
        "fullcodeline": "acm->country_rel_date = cfd->iCountryCodeRelDate;"
    },
    {
        "line": 356,
        "fullcodeline": "i = device_create_file(&intf->dev, &dev_attr_wCountryCodes);"
    },
    {
        "line": 364,
        "fullcodeline": "i = device_create_file(&intf->dev,"
    },
    {
        "line": 397,
        "fullcodeline": "rv = PTR_ERR(tty_dev);"
    },
    {
        "line": 402,
        "fullcodeline": "usb_clear_halt(usb_dev, usb_rcvbulkpipe(usb_dev, epread->bEndpointAddress));"
    },
    {
        "line": 403,
        "fullcodeline": "usb_clear_halt(usb_dev, usb_sndbulkpipe(usb_dev, epwrite->bEndpointAddress));"
    },
    {
        "line": 409,
        "fullcodeline": "device_remove_file(&acm->control->dev,"
    },
    {
        "line": 411,
        "fullcodeline": "device_remove_file(&acm->control->dev,"
    },
    {
        "line": 413,
        "fullcodeline": "kfree(acm->country_codes);"
    },
    {
        "line": 34,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 43,
        "fullcodeline": "if (!data_interface || !control_interface)"
    },
    {
        "line": 51,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 55,
        "fullcodeline": "if (intf->cur_altsetting->endpoint &&"
    },
    {
        "line": 71,
        "fullcodeline": "if (!elength) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (buffer[1] != USB_DT_CS_INTERFACE) {"
    },
    {
        "line": 126,
        "fullcodeline": "if (call_interface_num > 0) {"
    },
    {
        "line": 146,
        "fullcodeline": "control_interface = usb_ifnum_to_if(usb_dev, union_header->bMasterInterface0);"
    },
    {
        "line": 147,
        "fullcodeline": "data_interface = usb_ifnum_to_if(usb_dev, (data_interface_num = union_header->bSlaveInterface0));"
    },
    {
        "line": 152,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 164,
        "fullcodeline": "if (data_interface->cur_altsetting->desc.bNumEndpoints != 3) {"
    },
    {
        "line": 169,
        "fullcodeline": "for (i = 0; i < 3; i++) {"
    },
    {
        "line": 182,
        "fullcodeline": "if (!epctrl || !epread || !epwrite)"
    },
    {
        "line": 193,
        "fullcodeline": "if (control_interface->cur_altsetting->desc.bInterfaceClass"
    },
    {
        "line": 205,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 210,
        "fullcodeline": "return -EBUSY;"
    },
    {
        "line": 216,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 241,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 291,
        "fullcodeline": "if (!rb->base)"
    },
    {
        "line": 297,
        "fullcodeline": "if (!urb)"
    },
    {
        "line": 324,
        "fullcodeline": "if (snd->urb == NULL)"
    },
    {
        "line": 327,
        "fullcodeline": "if (usb_endpoint_xfer_int(epwrite))"
    },
    {
        "line": 336,
        "fullcodeline": "if (quirks & SEND_ZERO_PACKET)"
    },
    {
        "line": 349,
        "fullcodeline": "if (!acm->country_codes)"
    },
    {
        "line": 353,
        "fullcodeline": "cfd->bLength - 4);"
    },
    {
        "line": 357,
        "fullcodeline": "if (i < 0) {"
    },
    {
        "line": 366,
        "fullcodeline": "if (i < 0) {"
    },
    {
        "line": 58,
        "fullcodeline": "dev_dbg(&intf->dev,"
    },
    {
        "line": 60,
        "fullcodeline": "buflen = intf->cur_altsetting->endpoint->extralen;"
    },
    {
        "line": 61,
        "fullcodeline": "buffer = intf->cur_altsetting->endpoint->extra;"
    },
    {
        "line": 72,
        "fullcodeline": "dev_err(&intf->dev, \"skipping garbage byte\\n\");"
    },
    {
        "line": 73,
        "fullcodeline": "elength = 1;"
    },
    {
        "line": 77,
        "fullcodeline": "dev_err(&intf->dev, \"skipping garbage\\n\");"
    },
    {
        "line": 90,
        "fullcodeline": "union_header = (struct usb_cdc_union_desc *)buffer;"
    },
    {
        "line": 95,
        "fullcodeline": "cfd = (struct usb_cdc_country_functional_desc *)buffer;"
    },
    {
        "line": 102,
        "fullcodeline": "ac_management_function = buffer[3];"
    },
    {
        "line": 107,
        "fullcodeline": "call_management_function = buffer[3];"
    },
    {
        "line": 108,
        "fullcodeline": "call_interface_num = buffer[4];"
    },
    {
        "line": 115,
        "fullcodeline": "dev_dbg(&intf->dev, \"Ignoring descriptor: \""
    },
    {
        "line": 127,
        "fullcodeline": "dev_dbg(&intf->dev, \"No union descriptor, using call management descriptor\\n\");"
    },
    {
        "line": 133,
        "fullcodeline": "control_interface = intf;"
    },
    {
        "line": 165,
        "fullcodeline": "dev_err(&intf->dev, \"This needs exactly 3 endpoints\\n\");"
    },
    {
        "line": 195,
        "fullcodeline": "dev_dbg(&intf->dev,"
    },
    {
        "line": 197,
        "fullcodeline": "swap(control_interface, data_interface);"
    },
    {
        "line": 303,
        "fullcodeline": "usb_fill_int_urb(urb, acm->dev,"
    },
    {
        "line": 328,
        "fullcodeline": "usb_fill_int_urb(snd->urb, usb_dev,"
    },
    {
        "line": 337,
        "fullcodeline": "snd->urb->transfer_flags |= URB_ZERO_PACKET;"
    },
    {
        "line": 358,
        "fullcodeline": "kfree(acm->country_codes);"
    },
    {
        "line": 359,
        "fullcodeline": "acm->country_codes = NULL;"
    },
    {
        "line": 360,
        "fullcodeline": "acm->country_code_size = 0;"
    },
    {
        "line": 367,
        "fullcodeline": "device_remove_file(&intf->dev, &dev_attr_wCountryCodes);"
    },
    {
        "line": 368,
        "fullcodeline": "kfree(acm->country_codes);"
    },
    {
        "line": 369,
        "fullcodeline": "acm->country_codes = NULL;"
    },
    {
        "line": 370,
        "fullcodeline": "acm->country_code_size = 0;"
    },
    {
        "line": 44,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 63,
        "fullcodeline": "dev_err(&intf->dev,"
    },
    {
        "line": 83,
        "fullcodeline": "if (elength < sizeof(struct usb_cdc_union_desc))"
    },
    {
        "line": 93,
        "fullcodeline": "if (elength < sizeof(struct usb_cdc_country_functional_desc))"
    },
    {
        "line": 100,
        "fullcodeline": "if (elength < 4)"
    },
    {
        "line": 105,
        "fullcodeline": "if (elength < 5)"
    },
    {
        "line": 129,
        "fullcodeline": "if (quirks & NO_DATA_INTERFACE)"
    },
    {
        "line": 166,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 173,
        "fullcodeline": "if (usb_endpoint_is_int_in(ep))"
    },
    {
        "line": 183,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 310,
        "fullcodeline": "usb_fill_bulk_urb(urb, acm->dev,"
    },
    {
        "line": 329,
        "fullcodeline": "usb_sndintpipe(usb_dev, epwrite->bEndpointAddress),"
    },
    {
        "line": 332,
        "fullcodeline": "usb_fill_bulk_urb(snd->urb, usb_dev,"
    },
    {
        "line": 65,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 86,
        "fullcodeline": "dev_err(&intf->dev, \"More than one \""
    },
    {
        "line": 130,
        "fullcodeline": "data_interface = usb_ifnum_to_if(usb_dev, 0);"
    },
    {
        "line": 135,
        "fullcodeline": "if (intf->cur_altsetting->desc.bNumEndpoints != 3) {"
    },
    {
        "line": 174,
        "fullcodeline": "epctrl = ep;"
    },
    {
        "line": 199,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 333,
        "fullcodeline": "usb_sndbulkpipe(usb_dev, epwrite->bEndpointAddress),"
    },
    {
        "line": 132,
        "fullcodeline": "data_interface = usb_ifnum_to_if(usb_dev, (data_interface_num = call_interface_num));"
    },
    {
        "line": 136,
        "fullcodeline": "dev_dbg(&intf->dev,\"No union descriptor, giving up\\n\");"
    },
    {
        "line": 137,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 139,
        "fullcodeline": "dev_warn(&intf->dev,\"No union descriptor, testing for castrated device\\n\");"
    },
    {
        "line": 140,
        "fullcodeline": "combined_interfaces = 1;"
    },
    {
        "line": 141,
        "fullcodeline": "control_interface = data_interface = intf;"
    },
    {
        "line": 175,
        "fullcodeline": "else if (usb_endpoint_is_bulk_out(ep))"
    },
    {
        "line": 176,
        "fullcodeline": "epwrite = ep;"
    },
    {
        "line": 177,
        "fullcodeline": "else if (usb_endpoint_is_bulk_in(ep))"
    },
    {
        "line": 178,
        "fullcodeline": "epread = ep;"
    },
    {
        "line": 180,
        "fullcodeline": "return -EINVAL;"
    }
]