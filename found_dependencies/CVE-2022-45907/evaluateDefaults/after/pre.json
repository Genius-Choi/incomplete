[
    {
        "line": 5,
        "fullcodeline": "std::vector<IValue> default_values;"
    },
    {
        "line": 15,
        "fullcodeline": "auto tuple_type = Subscript::create("
    },
    {
        "line": 19,
        "fullcodeline": "auto blank_decl = Decl::create("
    },
    {
        "line": 22,
        "fullcodeline": "auto tuple_expr ="
    },
    {
        "line": 24,
        "fullcodeline": "auto ret = Return::create(r, tuple_expr);"
    },
    {
        "line": 25,
        "fullcodeline": "auto def = Def::create("
    },
    {
        "line": 32,
        "fullcodeline": "cu.define("
    },
    {
        "line": 43,
        "fullcodeline": "cu.get_function(def.name().name()).run(stack);"
    },
    {
        "line": 6,
        "fullcodeline": "if (default_exprs.empty())"
    },
    {
        "line": 23,
        "fullcodeline": "TupleLiteral::create(r, List<Expr>::create(r, default_exprs));"
    },
    {
        "line": 36,
        "fullcodeline": "{def},"
    },
    {
        "line": 37,
        "fullcodeline": "{resolver_},"
    },
    {
        "line": 44,
        "fullcodeline": "return stack.at(0).toTupleRef().elements().vec();"
    },
    {
        "line": 17,
        "fullcodeline": "Var::create(r, Ident::create(r, \"Tuple\")),"
    },
    {
        "line": 18,
        "fullcodeline": "List<Expr>::create(r, default_types));"
    },
    {
        "line": 20,
        "fullcodeline": "r, List<Param>::create(r, {}), Maybe<Expr>::create(r, tuple_type));"
    },
    {
        "line": 27,
        "fullcodeline": "Ident::create(r, \"defaults\"),"
    },
    {
        "line": 29,
        "fullcodeline": "List<Stmt>::create(r, {ret}));"
    }
]