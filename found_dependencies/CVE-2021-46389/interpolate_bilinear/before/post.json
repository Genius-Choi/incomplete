[
    {
        "line": 4,
        "fullcodeline": "unsigned char *input = (unsigned char*) in.data;"
    },
    {
        "line": 6,
        "fullcodeline": "int channels = in.channels;"
    },
    {
        "line": 7,
        "fullcodeline": "unsigned int width = in.width;"
    },
    {
        "line": 8,
        "fullcodeline": "unsigned int height = in.height;"
    },
    {
        "line": 11,
        "fullcodeline": "unsigned long max = ( (width*height) - 1 ) * channels;"
    },
    {
        "line": 14,
        "fullcodeline": "unsigned char *output = new unsigned char[(unsigned long long)resampled_width*resampled_height*channels];"
    },
    {
        "line": 17,
        "fullcodeline": "float xscale = (float)(width) / (float)resampled_width;"
    },
    {
        "line": 18,
        "fullcodeline": "float yscale = (float)(height) / (float)resampled_height;"
    },
    {
        "line": 74,
        "fullcodeline": "delete[] (unsigned char*) input;"
    },
    {
        "line": 77,
        "fullcodeline": "in.width = resampled_width;"
    },
    {
        "line": 78,
        "fullcodeline": "in.height = resampled_height;"
    },
    {
        "line": 79,
        "fullcodeline": "in.dataLength = resampled_width * resampled_height * channels * (in.bpc/8);"
    },
    {
        "line": 80,
        "fullcodeline": "in.data = output;"
    },
    {
        "line": 27,
        "fullcodeline": "for( unsigned int j=0; j<resampled_height; j++ ){"
    },
    {
        "line": 30,
        "fullcodeline": "int jj = (int) floor( j*yscale );"
    },
    {
        "line": 33,
        "fullcodeline": "float jscale = j*yscale;"
    },
    {
        "line": 34,
        "fullcodeline": "float c = (float)(jj+1) - jscale;"
    },
    {
        "line": 35,
        "fullcodeline": "float d = jscale - (float)jj;"
    },
    {
        "line": 37,
        "fullcodeline": "for( unsigned int i=0; i<resampled_width; i++ ){"
    },
    {
        "line": 40,
        "fullcodeline": "int ii = (int) floor( i*xscale );"
    },
    {
        "line": 44,
        "fullcodeline": "unsigned long jj_w = jj*width;"
    },
    {
        "line": 45,
        "fullcodeline": "p11 = (unsigned long) ( channels * ( ii + jj_w ) );"
    },
    {
        "line": 46,
        "fullcodeline": "p12 = (unsigned long) ( channels * ( ii + (jj_w+width) ) );"
    },
    {
        "line": 47,
        "fullcodeline": "p21 = (unsigned long) ( channels * ( (ii+1) + jj_w ) );"
    },
    {
        "line": 48,
        "fullcodeline": "p22 = (unsigned long) ( channels * ( (ii+1) + (jj_w+width) ) );"
    },
    {
        "line": 52,
        "fullcodeline": "p12 = (p12<=max)? p12 : max;"
    },
    {
        "line": 53,
        "fullcodeline": "p21 = (p21<=max)? p21 : max;"
    },
    {
        "line": 54,
        "fullcodeline": "p22 = (p22<=max)? p22 : max;"
    },
    {
        "line": 57,
        "fullcodeline": "float iscale = i*xscale;"
    },
    {
        "line": 58,
        "fullcodeline": "float a = (float)(ii+1) - iscale;"
    },
    {
        "line": 59,
        "fullcodeline": "float b = iscale - (float)ii;"
    },
    {
        "line": 62,
        "fullcodeline": "unsigned long long resampled_index = (unsigned long long)( (j*resampled_width + i) * channels );"
    },
    {
        "line": 64,
        "fullcodeline": "for( int k=0; k<channels; k++ ){"
    },
    {
        "line": 65,
        "fullcodeline": "float tx = input[p11+k]*a + input[p21+k]*b;"
    },
    {
        "line": 66,
        "fullcodeline": "float ty = input[p12+k]*a + input[p22+k]*b;"
    },
    {
        "line": 67,
        "fullcodeline": "unsigned char r = (unsigned char)( c*tx + d*ty );"
    },
    {
        "line": 68,
        "fullcodeline": "output[resampled_index+k] = r;"
    }
]