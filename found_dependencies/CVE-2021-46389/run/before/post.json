[
    {
        "line": 20,
        "fullcodeline": "string arg = argument;"
    },
    {
        "line": 21,
        "fullcodeline": "int delimitter = arg.find( \",\" );"
    },
    {
        "line": 22,
        "fullcodeline": "resolution = atoi( arg.substr(0,delimitter).c_str() );"
    },
    {
        "line": 24,
        "fullcodeline": "arg = arg.substr( delimitter + 1, arg.length() );"
    },
    {
        "line": 25,
        "fullcodeline": "delimitter = arg.find( \",\" );"
    },
    {
        "line": 26,
        "fullcodeline": "tile = atoi( arg.substr(0,delimitter).c_str() );"
    },
    {
        "line": 28,
        "fullcodeline": "arg = arg.substr( delimitter + 1, arg.length() );"
    },
    {
        "line": 29,
        "fullcodeline": "delimitter = arg.find( \",\" );"
    },
    {
        "line": 30,
        "fullcodeline": "x = atoi( arg.substr(0,delimitter).c_str() );"
    },
    {
        "line": 32,
        "fullcodeline": "arg = arg.substr( delimitter + 1, arg.length() );"
    },
    {
        "line": 33,
        "fullcodeline": "delimitter = arg.find( \",\" );"
    },
    {
        "line": 34,
        "fullcodeline": "y = atoi( arg.substr(0,arg.length()).c_str() );"
    },
    {
        "line": 50,
        "fullcodeline": "TileManager tilemanager( session->tileCache, *session->image, session->watermark, session->jpeg, session->logfile, session->loglevel );"
    },
    {
        "line": 53,
        "fullcodeline": "list <int> views = (*session->image)->getHorizontalViewsList();"
    },
    {
        "line": 63,
        "fullcodeline": "header << session->response->createHTTPHeader( \"xml\", (*session->image)->getTimestamp() );"
    },
    {
        "line": 64,
        "fullcodeline": "session->out->putStr( (const char*) header.str().c_str(), header.tellp() );"
    },
    {
        "line": 65,
        "fullcodeline": "session->out->flush();"
    },
    {
        "line": 68,
        "fullcodeline": "session->out->putS( \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" );"
    },
    {
        "line": 69,
        "fullcodeline": "session->out->putS( \"<spectra>\\n\" );"
    },
    {
        "line": 70,
        "fullcodeline": "session->out->flush();"
    },
    {
        "line": 128,
        "fullcodeline": "session->out->putS( \"</spectra>\" );"
    },
    {
        "line": 138,
        "fullcodeline": "session->response->setImageSent();"
    },
    {
        "line": 10,
        "fullcodeline": "if( session->loglevel >= 3 ) (*session->logfile) << \"SPECTRA handler reached\" << endl;"
    },
    {
        "line": 16,
        "fullcodeline": "if( session->loglevel >= 2 ) command_timer.start();"
    },
    {
        "line": 36,
        "fullcodeline": "if( session->loglevel >= 5 ){"
    },
    {
        "line": 44,
        "fullcodeline": "if( x < 0 || x >= (int)(*session->image)->getTileWidth() ||"
    },
    {
        "line": 72,
        "fullcodeline": "for( i = views.begin(); i != views.end(); i++ ){"
    },
    {
        "line": 130,
        "fullcodeline": "if( session->out->flush() == -1 ) {"
    },
    {
        "line": 141,
        "fullcodeline": "if( session->loglevel >= 2 ){"
    },
    {
        "line": 37,
        "fullcodeline": "(*session->logfile) << \"SPECTRA :: resolution: \" << resolution"
    },
    {
        "line": 45,
        "fullcodeline": "y < 0 || y >= (int)(*session->image)->getTileHeight() ){"
    },
    {
        "line": 76,
        "fullcodeline": "RawTile rawtile = tilemanager.getTile( resolution, tile, n, session->view->yangle, session->view->getLayers(), UNCOMPRESSED );"
    },
    {
        "line": 87,
        "fullcodeline": "unsigned int tw = (*session->image)->getTileWidth();"
    },
    {
        "line": 88,
        "fullcodeline": "unsigned int index = y*tw + x;"
    },
    {
        "line": 91,
        "fullcodeline": "float reflectance = 0.0;"
    },
    {
        "line": 115,
        "fullcodeline": "spectrum.push_front( reflectance );"
    },
    {
        "line": 117,
        "fullcodeline": "string metadata = (*session->image)->getMetadata( \"subject\" );"
    },
    {
        "line": 119,
        "fullcodeline": "char tmp[1024];"
    },
    {
        "line": 120,
        "fullcodeline": "snprintf( tmp, 1024, \"\\t<point>\\n\\t\\t<wavelength>%d</wavelength>\\n\\t\\t<reflectance>%f</reflectance>\\n\\t</point>\\n\", n, reflectance );"
    },
    {
        "line": 121,
        "fullcodeline": "session->out->putS( tmp );"
    },
    {
        "line": 122,
        "fullcodeline": "session->out->flush();"
    },
    {
        "line": 142,
        "fullcodeline": "*(session->logfile) << \"SPECTRA :: Total command time \" << command_timer.getTime() << \" microseconds\" << endl;"
    },
    {
        "line": 46,
        "fullcodeline": "throw invalid_argument( \"SPECTRA :: Error: x,y coordinates outside of tile boundaries\" );"
    },
    {
        "line": 79,
        "fullcodeline": "if( x >= (int)rawtile.width || y >= (int)rawtile.height ){"
    },
    {
        "line": 93,
        "fullcodeline": "if( session->loglevel >= 5 ) (*session->logfile) << \"SPECTRA :: \" << rawtile.bpc << \" bits per channel data\" << endl;"
    },
    {
        "line": 96,
        "fullcodeline": "if( rawtile.bpc == 8 ){"
    },
    {
        "line": 124,
        "fullcodeline": "if( session->loglevel >= 3 ) (*session->logfile) << \"SPECTRA :: Band: \" << n << \", reflectance: \" << reflectance << endl;"
    },
    {
        "line": 131,
        "fullcodeline": "if( session->loglevel >= 1 ){"
    },
    {
        "line": 97,
        "fullcodeline": "ptr = (unsigned char*) (rawtile.data);"
    },
    {
        "line": 98,
        "fullcodeline": "reflectance = static_cast<float>((float)((unsigned char*)ptr)[index]) / 255.0;"
    },
    {
        "line": 132,
        "fullcodeline": "*(session->logfile) << \"SPECTRA :: Error flushing XML\" << endl;"
    },
    {
        "line": 80,
        "fullcodeline": "if( session->loglevel >= 1 ){"
    },
    {
        "line": 81,
        "fullcodeline": "(*session->logfile) << \"SPECTRA :: Error: x,y coordinates outside of tile boundaries\" << endl;"
    },
    {
        "line": 100,
        "fullcodeline": "else if( rawtile.bpc == 16 ){"
    },
    {
        "line": 101,
        "fullcodeline": "ptr = (unsigned short*) (rawtile.data);"
    },
    {
        "line": 102,
        "fullcodeline": "reflectance = static_cast<float>((float)((unsigned short*)ptr)[index]) / 65535.0;"
    },
    {
        "line": 104,
        "fullcodeline": "else if( rawtile.bpc == 32 ){"
    },
    {
        "line": 105,
        "fullcodeline": "if( rawtile.sampleType == FIXEDPOINT ) {"
    },
    {
        "line": 106,
        "fullcodeline": "ptr = (unsigned int*) rawtile.data;"
    },
    {
        "line": 110,
        "fullcodeline": "ptr = (float*) rawtile.data;"
    },
    {
        "line": 107,
        "fullcodeline": "reflectance = static_cast<float>((float)((unsigned int*)ptr)[index]);"
    },
    {
        "line": 111,
        "fullcodeline": "reflectance = static_cast<float>((float)((float*)ptr)[index]);"
    }
]