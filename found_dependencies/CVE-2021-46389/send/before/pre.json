[
    {
        "line": 9,
        "fullcodeline": "this->session = session;"
    },
    {
        "line": 10,
        "fullcodeline": "checkImage();"
    },
    {
        "line": 44,
        "fullcodeline": "CompressionType ct = session->view->output_format;"
    },
    {
        "line": 53,
        "fullcodeline": "TileManager tilemanager( session->tileCache, *session->image, session->watermark, compressor, session->logfile, session->loglevel );"
    },
    {
        "line": 94,
        "fullcodeline": "int num_res = (*session->image)->getNumResolutions();"
    },
    {
        "line": 95,
        "fullcodeline": "unsigned int im_width = (*session->image)->image_widths[num_res-resolution-1];"
    },
    {
        "line": 96,
        "fullcodeline": "unsigned int im_height = (*session->image)->image_heights[num_res-resolution-1];"
    },
    {
        "line": 97,
        "fullcodeline": "float dpi_x = (*session->image)->dpi_x * (float) im_width / (float) (*session->image)->getImageWidth();"
    },
    {
        "line": 98,
        "fullcodeline": "float dpi_y = (*session->image)->dpi_y * (float) im_height / (float) (*session->image)->getImageHeight();"
    },
    {
        "line": 99,
        "fullcodeline": "compressor->setResolution( dpi_x, dpi_y, (*session->image)->dpi_units );"
    },
    {
        "line": 116,
        "fullcodeline": "RawTile rawtile = tilemanager.getTile( resolution, tile, session->view->xangle,"
    },
    {
        "line": 120,
        "fullcodeline": "int len = rawtile.dataLength;"
    },
    {
        "line": 383,
        "fullcodeline": "header << session->response->createHTTPHeader( compressor->getMimeType(), (*session->image)->getTimestamp(), len );"
    },
    {
        "line": 5,
        "fullcodeline": "if( session->loglevel >= 3 ) (*session->logfile) << \"JTL handler reached\" << endl;"
    },
    {
        "line": 14,
        "fullcodeline": "if( session->loglevel >= 2 ) command_timer.start();"
    },
    {
        "line": 18,
        "fullcodeline": "if( (int)((session->view)->getRotation()) % 360 == 90 ){"
    },
    {
        "line": 36,
        "fullcodeline": "if( (resolution<0) || (tile<0) ){"
    },
    {
        "line": 46,
        "fullcodeline": "if( session->view->output_format == JPEG ) compressor = session->jpeg;"
    },
    {
        "line": 101,
        "fullcodeline": "if( session->loglevel >= 5 ){"
    },
    {
        "line": 122,
        "fullcodeline": "if( session->loglevel >= 2 ){"
    },
    {
        "line": 333,
        "fullcodeline": "if( session->view->flip != 0 ){"
    },
    {
        "line": 365,
        "fullcodeline": "if( rawtile.compressionType == UNCOMPRESSED ){"
    },
    {
        "line": 38,
        "fullcodeline": "error << \"JTL :: Invalid resolution/tile number: \" << resolution << \",\" << tile;"
    },
    {
        "line": 58,
        "fullcodeline": "if( session->view->requireHistogram() && (*session->image)->histogram.size()==0 ){"
    },
    {
        "line": 64,
        "fullcodeline": "RawTile thumbnail = tilemanager.getTile( 0, 0, 0, session->view->yangle, session->view->getLayers(), UNCOMPRESSED );"
    },
    {
        "line": 67,
        "fullcodeline": "(*session->image)->histogram ="
    },
    {
        "line": 76,
        "fullcodeline": "const string key = (*session->image)->getImagePath();"
    },
    {
        "line": 77,
        "fullcodeline": "imageCacheMapType::iterator i = session->imageCache->find(key);"
    },
    {
        "line": 84,
        "fullcodeline": "if( (*session->image)->getNumBitsPerPixel() > 8 || (*session->image)->getColourSpace() == CIELAB"
    },
    {
        "line": 89,
        "fullcodeline": "|| session->view->getRotation() != 0.0 || session->view->flip != 0"
    },
    {
        "line": 90,
        "fullcodeline": ") ct = UNCOMPRESSED;"
    },
    {
        "line": 102,
        "fullcodeline": "*(session->logfile) << \"JTL :: Setting physical resolution of tile to \" <<  dpi_x << \" x \" << dpi_y"
    },
    {
        "line": 107,
        "fullcodeline": "if( session->view->embedICC() && ((*session->image)->getMetadata(\"icc\").size()>0) ){"
    },
    {
        "line": 112,
        "fullcodeline": "compressor->setICCProfile( (*session->image)->getMetadata(\"icc\") );"
    },
    {
        "line": 117,
        "fullcodeline": "session->view->yangle, session->view->getLayers(), ct );"
    },
    {
        "line": 123,
        "fullcodeline": "*(session->logfile) << \"JTL :: Tile size: \" << rawtile.width << \" x \" << rawtile.height << endl"
    },
    {
        "line": 131,
        "fullcodeline": "if( (*session->image)->getColourSpace() == CIELAB ){"
    },
    {
        "line": 137,
        "fullcodeline": "session->processor->LAB2sRGB( rawtile );"
    },
    {
        "line": 145,
        "fullcodeline": "if( rawtile.bpc > 8 || session->view->floatProcessing() ){"
    },
    {
        "line": 148,
        "fullcodeline": "vector <float> min = (*session->image)->min;"
    },
    {
        "line": 149,
        "fullcodeline": "vector <float> max = (*session->image)->max;"
    },
    {
        "line": 186,
        "fullcodeline": "session->processor->normalize( rawtile, max, min );"
    },
    {
        "line": 263,
        "fullcodeline": "float contrast = session->view->contrast;"
    },
    {
        "line": 268,
        "fullcodeline": "session->processor->contrast( rawtile, contrast );"
    },
    {
        "line": 278,
        "fullcodeline": "if( ( (session->view->output_format == JPEG) && (rawtile.channels == 2 || rawtile.channels > 3) ) ||"
    },
    {
        "line": 279,
        "fullcodeline": "( (session->view->output_format == PNG) && (rawtile.channels > 4) ) ){"
    },
    {
        "line": 281,
        "fullcodeline": "unsigned int bands = (rawtile.channels==2) ? 1 : 3;"
    },
    {
        "line": 286,
        "fullcodeline": "session->processor->flatten( rawtile, bands );"
    },
    {
        "line": 294,
        "fullcodeline": "if( (*session->image)->getColourSpace() == sRGB && session->view->colourspace == GREYSCALE ){"
    },
    {
        "line": 299,
        "fullcodeline": "session->processor->greyscale( rawtile );"
    },
    {
        "line": 307,
        "fullcodeline": "if( (*session->image)->getColourSpace() != BINARY && session->view->colourspace == BINARY ){"
    },
    {
        "line": 312,
        "fullcodeline": "unsigned int threshold = session->processor->threshold( (*session->image)->histogram );"
    },
    {
        "line": 313,
        "fullcodeline": "session->processor->binary( rawtile, threshold );"
    },
    {
        "line": 324,
        "fullcodeline": "session->processor->equalize( rawtile, (*session->image)->histogram );"
    },
    {
        "line": 339,
        "fullcodeline": "session->processor->flip( rawtile, session->view->flip  );"
    },
    {
        "line": 351,
        "fullcodeline": "if( session->view->getRotation() != 0.0 ){"
    },
    {
        "line": 352,
        "fullcodeline": "float rotation = session->view->getRotation();"
    },
    {
        "line": 357,
        "fullcodeline": "session->processor->rotate( rawtile, rotation );"
    },
    {
        "line": 370,
        "fullcodeline": "len = compressor->Compress( rawtile );"
    },
    {
        "line": 384,
        "fullcodeline": "if( session->out->putStr( (const char*) header.str().c_str(), header.tellp() ) == -1 ){"
    },
    {
        "line": 393,
        "fullcodeline": "if( session->out->putStr( static_cast<const char*>(rawtile.data), len ) != len ){"
    },
    {
        "line": 400,
        "fullcodeline": "if( session->out->flush() == -1 ) {"
    },
    {
        "line": 39,
        "fullcodeline": "throw error.str();"
    },
    {
        "line": 50,
        "fullcodeline": "else compressor = session->jpeg;"
    },
    {
        "line": 60,
        "fullcodeline": "if( session->loglevel >= 4 ) function_timer.start();"
    },
    {
        "line": 68,
        "fullcodeline": "session->processor->histogram( thumbnail, (*session->image)->max, (*session->image)->min );"
    },
    {
        "line": 70,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 108,
        "fullcodeline": "if( session->loglevel >= 3 ){"
    },
    {
        "line": 133,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 138,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 152,
        "fullcodeline": "if( session->view->contrast == -1 ){"
    },
    {
        "line": 182,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 187,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 206,
        "fullcodeline": "if( session->view->ctw.size() ){"
    },
    {
        "line": 219,
        "fullcodeline": "if( session->view->gamma != 1.0 ){"
    },
    {
        "line": 264,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 269,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 282,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 287,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 295,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 300,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 308,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 314,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 322,
        "fullcodeline": "if( session->loglevel >= 4 ) function_timer.start();"
    },
    {
        "line": 325,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 335,
        "fullcodeline": "if( session->loglevel >= 5 ){"
    },
    {
        "line": 341,
        "fullcodeline": "if( session->loglevel >= 5 ){"
    },
    {
        "line": 353,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 358,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 366,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 371,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 385,
        "fullcodeline": "if( session->loglevel >= 1 ){"
    },
    {
        "line": 394,
        "fullcodeline": "if( session->loglevel >= 1 ){"
    },
    {
        "line": 401,
        "fullcodeline": "if( session->loglevel >= 1 ){"
    },
    {
        "line": 412,
        "fullcodeline": "*(session->logfile) << \"JTL :: Total command time \" << command_timer.getTime() << \" microseconds\" << endl;"
    },
    {
        "line": 21,
        "fullcodeline": "else if( (int)((session->view)->getRotation()) % 360 == 270 ){"
    },
    {
        "line": 71,
        "fullcodeline": "*(session->logfile) << \"JTL :: Calculated histogram in \""
    },
    {
        "line": 78,
        "fullcodeline": "if( i != session->imageCache->end() ) (i->second).histogram = (*session->image)->histogram;"
    },
    {
        "line": 109,
        "fullcodeline": "*(session->logfile) << \"JTL :: Embedding ICC profile with size \""
    },
    {
        "line": 134,
        "fullcodeline": "*(session->logfile) << \"JTL :: Converting from CIELAB->sRGB\";"
    },
    {
        "line": 135,
        "fullcodeline": "function_timer.start();"
    },
    {
        "line": 139,
        "fullcodeline": "*(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;"
    },
    {
        "line": 155,
        "fullcodeline": "unsigned int n0 = 0;"
    },
    {
        "line": 159,
        "fullcodeline": "unsigned int n1 = (*session->image)->histogram.size() - 1;"
    },
    {
        "line": 168,
        "fullcodeline": "min.assign( rawtile.bpc, (float)n0 );"
    },
    {
        "line": 169,
        "fullcodeline": "max.assign( rawtile.bpc, (float)n1 );"
    },
    {
        "line": 172,
        "fullcodeline": "session->view->contrast = 1.0;"
    },
    {
        "line": 183,
        "fullcodeline": "*(session->logfile) << \"JTL :: Normalizing and converting to float\";"
    },
    {
        "line": 184,
        "fullcodeline": "function_timer.start();"
    },
    {
        "line": 188,
        "fullcodeline": "*(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;"
    },
    {
        "line": 198,
        "fullcodeline": "session->processor->shade( rawtile, session->view->shade[0], session->view->shade[1] );"
    },
    {
        "line": 211,
        "fullcodeline": "session->processor->twist( rawtile, session->view->ctw );"
    },
    {
        "line": 221,
        "fullcodeline": "float gamma = session->view->gamma;"
    },
    {
        "line": 242,
        "fullcodeline": "session->processor->inv( rawtile );"
    },
    {
        "line": 255,
        "fullcodeline": "session->processor->cmap( rawtile, session->view->cmap );"
    },
    {
        "line": 266,
        "fullcodeline": "function_timer.start();"
    },
    {
        "line": 270,
        "fullcodeline": "*(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;"
    },
    {
        "line": 283,
        "fullcodeline": "*(session->logfile) << \"JTL :: Flattening channels to \" << bands;"
    },
    {
        "line": 284,
        "fullcodeline": "function_timer.start();"
    },
    {
        "line": 288,
        "fullcodeline": "*(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;"
    },
    {
        "line": 296,
        "fullcodeline": "*(session->logfile) << \"JTL :: Converting to greyscale\";"
    },
    {
        "line": 297,
        "fullcodeline": "function_timer.start();"
    },
    {
        "line": 301,
        "fullcodeline": "*(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;"
    },
    {
        "line": 309,
        "fullcodeline": "*(session->logfile) << \"JTL :: Converting to binary with threshold \";"
    },
    {
        "line": 310,
        "fullcodeline": "function_timer.start();"
    },
    {
        "line": 315,
        "fullcodeline": "*(session->logfile) << threshold << \" in \" << function_timer.getTime() << \" microseconds\" << endl;"
    },
    {
        "line": 326,
        "fullcodeline": "*(session->logfile) << \"JTL :: Applying histogram equalization in \""
    },
    {
        "line": 336,
        "fullcodeline": "flip_timer.start();"
    },
    {
        "line": 342,
        "fullcodeline": "*(session->logfile) << \"JTL :: Flipping image \";"
    },
    {
        "line": 345,
        "fullcodeline": "*(session->logfile) << \" in \" << flip_timer.getTime() << \" microseconds\" << endl;"
    },
    {
        "line": 355,
        "fullcodeline": "function_timer.start();"
    },
    {
        "line": 359,
        "fullcodeline": "*(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;"
    },
    {
        "line": 367,
        "fullcodeline": "*(session->logfile) << \"JTL :: Encoding UNCOMPRESSED tile\";"
    },
    {
        "line": 368,
        "fullcodeline": "function_timer.start();"
    },
    {
        "line": 372,
        "fullcodeline": "*(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds to \""
    },
    {
        "line": 386,
        "fullcodeline": "*(session->logfile) << \"JTL :: Error writing HTTP header\" << endl;"
    },
    {
        "line": 395,
        "fullcodeline": "*(session->logfile) << \"JTL :: Error writing JPEG tile\" << endl;"
    },
    {
        "line": 402,
        "fullcodeline": "*(session->logfile) << \"JTL :: Error flushing JPEG tile\" << endl;"
    },
    {
        "line": 88,
        "fullcodeline": "|| session->view->floatProcessing() || session->view->equalization"
    },
    {
        "line": 103,
        "fullcodeline": "<< ( ((*session->image)->dpi_units==1) ? \" pixels/inch\" : \" pixels/cm\" ) << endl;"
    },
    {
        "line": 156,
        "fullcodeline": "while( (*session->image)->histogram[n0] == 0 ) ++n0;"
    },
    {
        "line": 160,
        "fullcodeline": "while( (*session->image)->histogram[n1] == 0 ) --n1;"
    },
    {
        "line": 174,
        "fullcodeline": "if( session->loglevel >= 5 ){"
    },
    {
        "line": 194,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 199,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 207,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 212,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 222,
        "fullcodeline": "if( session->loglevel >= 4 ) function_timer.start();"
    },
    {
        "line": 225,
        "fullcodeline": "if( gamma == -1 ) session->processor->log( rawtile );"
    },
    {
        "line": 228,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 238,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 243,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 251,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 256,
        "fullcodeline": "if( session->loglevel >= 4 ){"
    },
    {
        "line": 265,
        "fullcodeline": "*(session->logfile) << \"JTL :: Applying contrast of \" << contrast << \" and converting to 8 bit\";"
    },
    {
        "line": 343,
        "fullcodeline": "if( session->view->flip == 1 ) *(session->logfile) << \"horizontally\";"
    },
    {
        "line": 354,
        "fullcodeline": "*(session->logfile) << \"JTL :: Rotating image by \" << rotation << \" degrees\";"
    },
    {
        "line": 86,
        "fullcodeline": "|| ( (session->view->colourspace==GREYSCALE || session->view->colourspace==BINARY) && (*session->image)->getNumChannels()==3 &&"
    },
    {
        "line": 163,
        "fullcodeline": "if( rawtile.bpc > 8 && rawtile.sampleType == FIXEDPOINT ){"
    },
    {
        "line": 164,
        "fullcodeline": "n0 = n0 << (rawtile.bpc-8);"
    },
    {
        "line": 165,
        "fullcodeline": "n1 = n1 << (rawtile.bpc-8);"
    },
    {
        "line": 175,
        "fullcodeline": "*(session->logfile) << \"JTL :: Applying contrast stretch for image range of \""
    },
    {
        "line": 195,
        "fullcodeline": "*(session->logfile) << \"JTL :: Applying hill-shading\";"
    },
    {
        "line": 196,
        "fullcodeline": "function_timer.start();"
    },
    {
        "line": 200,
        "fullcodeline": "*(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;"
    },
    {
        "line": 208,
        "fullcodeline": "*(session->logfile) << \"JTL :: Applying color twist\";"
    },
    {
        "line": 209,
        "fullcodeline": "function_timer.start();"
    },
    {
        "line": 213,
        "fullcodeline": "*(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;"
    },
    {
        "line": 231,
        "fullcodeline": "*(session->logfile) << function_timer.getTime() << \" microseconds\" << endl;"
    },
    {
        "line": 239,
        "fullcodeline": "*(session->logfile) << \"JTL :: Applying inversion\";"
    },
    {
        "line": 240,
        "fullcodeline": "function_timer.start();"
    },
    {
        "line": 244,
        "fullcodeline": "*(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;"
    },
    {
        "line": 252,
        "fullcodeline": "*(session->logfile) << \"JTL :: Applying color map\";"
    },
    {
        "line": 253,
        "fullcodeline": "function_timer.start();"
    },
    {
        "line": 257,
        "fullcodeline": "*(session->logfile) << \" in \" << function_timer.getTime() << \" microseconds\" << endl;"
    },
    {
        "line": 24,
        "fullcodeline": "else if( (int)((session->view)->getRotation()) % 360 == 180 ){"
    },
    {
        "line": 72,
        "fullcodeline": "<< function_timer.getTime() << \" microseconds\" << endl;"
    },
    {
        "line": 85,
        "fullcodeline": "|| (*session->image)->getNumChannels() == 2 || (*session->image)->getNumChannels() > 3"
    },
    {
        "line": 87,
        "fullcodeline": "(*session->image)->getNumBitsPerPixel()==8 )"
    },
    {
        "line": 110,
        "fullcodeline": "<< (*session->image)->getMetadata(\"icc\").size() << \" bytes\" << endl;"
    },
    {
        "line": 226,
        "fullcodeline": "else session->processor->gamma( rawtile, gamma );"
    },
    {
        "line": 229,
        "fullcodeline": "if( gamma == -1 ) *(session->logfile) << \"JTL :: Applying logarithm transform in \";"
    },
    {
        "line": 327,
        "fullcodeline": "<< function_timer.getTime() << \" microseconds\" << endl;"
    },
    {
        "line": 344,
        "fullcodeline": "else *(session->logfile) << \"vertically\";"
    },
    {
        "line": 25,
        "fullcodeline": "int num_res = (*session->image)->getNumResolutions();"
    },
    {
        "line": 26,
        "fullcodeline": "unsigned int im_width = (*session->image)->image_widths[num_res-resolution-1];"
    },
    {
        "line": 27,
        "fullcodeline": "unsigned int im_height = (*session->image)->image_heights[num_res-resolution-1];"
    },
    {
        "line": 28,
        "fullcodeline": "unsigned int tw = (*session->image)->getTileWidth();"
    },
    {
        "line": 30,
        "fullcodeline": "int ntiles = (int) ceil( (double)im_width/tw ) * (int) ceil( (double)im_height/tw );"
    },
    {
        "line": 31,
        "fullcodeline": "tile = ntiles - tile - 1;"
    },
    {
        "line": 230,
        "fullcodeline": "else *(session->logfile) << \"JTL :: Applying gamma of \" << gamma << \" in \";"
    }
]