[
    {
        "line": 4,
        "fullcodeline": "struct device *ddev = &dev->dev;"
    },
    {
        "line": 5,
        "fullcodeline": "unsigned char *buffer0 = buffer;"
    },
    {
        "line": 14,
        "fullcodeline": "u8 inums[USB_MAXINTERFACES], nalts[USB_MAXINTERFACES];"
    },
    {
        "line": 15,
        "fullcodeline": "unsigned iad_num = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "memcpy(&config->desc, buffer, USB_DT_CONFIG_SIZE);"
    },
    {
        "line": 26,
        "fullcodeline": "cfgno = config->desc.bConfigurationValue;"
    },
    {
        "line": 28,
        "fullcodeline": "buffer += config->desc.bLength;"
    },
    {
        "line": 29,
        "fullcodeline": "size -= config->desc.bLength;"
    },
    {
        "line": 31,
        "fullcodeline": "nintf = nintf_orig = config->desc.bNumInterfaces;"
    },
    {
        "line": 41,
        "fullcodeline": "n = 0;"
    },
    {
        "line": 133,
        "fullcodeline": "size = buffer2 - buffer;"
    },
    {
        "line": 177,
        "fullcodeline": "config->extra = buffer;"
    },
    {
        "line": 178,
        "fullcodeline": "i = find_next_descriptor(buffer, size, USB_DT_INTERFACE,"
    },
    {
        "line": 180,
        "fullcodeline": "config->extralen = i;"
    },
    {
        "line": 184,
        "fullcodeline": "buffer += i;"
    },
    {
        "line": 185,
        "fullcodeline": "size -= i;"
    },
    {
        "line": 18,
        "fullcodeline": "if (config->desc.bDescriptorType != USB_DT_CONFIG ||"
    },
    {
        "line": 32,
        "fullcodeline": "if (nintf > USB_MAXINTERFACES) {"
    },
    {
        "line": 43,
        "fullcodeline": "size2 > 0;"
    },
    {
        "line": 134,
        "fullcodeline": "config->desc.wTotalLength = cpu_to_le16(buffer2 - buffer0);"
    },
    {
        "line": 136,
        "fullcodeline": "if (n != nintf)"
    },
    {
        "line": 142,
        "fullcodeline": "config->desc.bNumInterfaces = nintf = n;"
    },
    {
        "line": 145,
        "fullcodeline": "for (i = 0; i < nintf; ++i) {"
    },
    {
        "line": 156,
        "fullcodeline": "for (i = 0; i < nintf; ++i) {"
    },
    {
        "line": 181,
        "fullcodeline": "if (n > 0)"
    },
    {
        "line": 188,
        "fullcodeline": "while (size > 0) {"
    },
    {
        "line": 199,
        "fullcodeline": "for (i = 0; i < nintf; ++i) {"
    },
    {
        "line": 20,
        "fullcodeline": "config->desc.bLength > size) {"
    },
    {
        "line": 21,
        "fullcodeline": "dev_err(ddev, \"invalid descriptor for config index %d: \""
    },
    {
        "line": 33,
        "fullcodeline": "dev_warn(ddev, \"config %d has too many interfaces: %d, \""
    },
    {
        "line": 36,
        "fullcodeline": "nintf = USB_MAXINTERFACES;"
    },
    {
        "line": 44,
        "fullcodeline": "(buffer2 += header->bLength, size2 -= header->bLength)) {"
    },
    {
        "line": 53,
        "fullcodeline": "header = (struct usb_descriptor_header *) buffer2;"
    },
    {
        "line": 137,
        "fullcodeline": "dev_warn(ddev, \"config %d has %d interface%s, different from \""
    },
    {
        "line": 157,
        "fullcodeline": "j = nalts[i];"
    },
    {
        "line": 166,
        "fullcodeline": "len = sizeof(*intfc) + sizeof(struct usb_host_interface) * j;"
    },
    {
        "line": 167,
        "fullcodeline": "config->intf_cache[i] = intfc = kzalloc(len, GFP_KERNEL);"
    },
    {
        "line": 170,
        "fullcodeline": "kref_init(&intfc->ref);"
    },
    {
        "line": 182,
        "fullcodeline": "dev_dbg(ddev, \"skipped %d descriptor%s after %s\\n\","
    },
    {
        "line": 189,
        "fullcodeline": "retval = usb_parse_interface(ddev, cfgno, config,"
    },
    {
        "line": 194,
        "fullcodeline": "buffer += retval;"
    },
    {
        "line": 195,
        "fullcodeline": "size -= retval;"
    },
    {
        "line": 200,
        "fullcodeline": "intfc = config->intf_cache[i];"
    },
    {
        "line": 19,
        "fullcodeline": "config->desc.bLength < USB_DT_CONFIG_SIZE ||"
    },
    {
        "line": 24,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 42,
        "fullcodeline": "for ((buffer2 = buffer, size2 = size);"
    },
    {
        "line": 46,
        "fullcodeline": "if (size2 < sizeof(struct usb_descriptor_header)) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (header->bDescriptorType == USB_DT_INTERFACE) {"
    },
    {
        "line": 139,
        "fullcodeline": "cfgno, n, plural(n), nintf_orig);"
    },
    {
        "line": 146,
        "fullcodeline": "for (j = 0; j < nintf; ++j) {"
    },
    {
        "line": 150,
        "fullcodeline": "if (j >= nintf)"
    },
    {
        "line": 158,
        "fullcodeline": "if (j > USB_MAXALTSETTING) {"
    },
    {
        "line": 168,
        "fullcodeline": "if (!intfc)"
    },
    {
        "line": 183,
        "fullcodeline": "n, plural(n), \"configuration\");"
    },
    {
        "line": 191,
        "fullcodeline": "if (retval < 0)"
    },
    {
        "line": 201,
        "fullcodeline": "for (j = 0; j < intfc->num_altsetting; ++j) {"
    },
    {
        "line": 47,
        "fullcodeline": "dev_warn(ddev, \"config %d descriptor has %d excess \""
    },
    {
        "line": 54,
        "fullcodeline": "if ((header->bLength > size2) || (header->bLength < 2)) {"
    },
    {
        "line": 55,
        "fullcodeline": "dev_warn(ddev, \"config %d has an invalid descriptor \""
    },
    {
        "line": 65,
        "fullcodeline": "d = (struct usb_interface_descriptor *) header;"
    },
    {
        "line": 73,
        "fullcodeline": "inum = d->bInterfaceNumber;"
    },
    {
        "line": 140,
        "fullcodeline": "else if (n == 0)"
    },
    {
        "line": 151,
        "fullcodeline": "dev_warn(ddev, \"config %d has no interface number \""
    },
    {
        "line": 159,
        "fullcodeline": "dev_warn(ddev, \"too many alternate settings for \""
    },
    {
        "line": 163,
        "fullcodeline": "nalts[i] = j = USB_MAXALTSETTING;"
    },
    {
        "line": 49,
        "fullcodeline": "cfgno, size2, plural(size2));"
    },
    {
        "line": 66,
        "fullcodeline": "if (d->bLength < USB_DT_INTERFACE_SIZE) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (inum >= nintf_orig)"
    },
    {
        "line": 91,
        "fullcodeline": "for (i = 0; i < n; ++i) {"
    },
    {
        "line": 95,
        "fullcodeline": "if (i < n) {"
    },
    {
        "line": 141,
        "fullcodeline": "dev_warn(ddev, \"config %d has no interfaces?\\n\", cfgno);"
    },
    {
        "line": 147,
        "fullcodeline": "if (inums[j] == i)"
    },
    {
        "line": 169,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 202,
        "fullcodeline": "for (n = 0; n < intfc->num_altsetting; ++n) {"
    },
    {
        "line": 207,
        "fullcodeline": "if (n >= intfc->num_altsetting)"
    },
    {
        "line": 67,
        "fullcodeline": "dev_warn(ddev, \"config %d has an invalid \""
    },
    {
        "line": 75,
        "fullcodeline": "if ((dev->quirks & USB_QUIRK_HONOR_BNUMINTERFACES) &&"
    },
    {
        "line": 76,
        "fullcodeline": "n >= nintf_orig) {"
    },
    {
        "line": 77,
        "fullcodeline": "dev_warn(ddev, \"config %d has more interface \""
    },
    {
        "line": 85,
        "fullcodeline": "dev_warn(ddev, \"config %d has an invalid \""
    },
    {
        "line": 104,
        "fullcodeline": "} else if (header->bDescriptorType =="
    },
    {
        "line": 208,
        "fullcodeline": "dev_warn(ddev, \"config %d interface %d has no \""
    },
    {
        "line": 87,
        "fullcodeline": "cfgno, inum, nintf_orig - 1);"
    },
    {
        "line": 92,
        "fullcodeline": "if (inums[i] == inum)"
    },
    {
        "line": 96,
        "fullcodeline": "if (nalts[i] < 255)"
    },
    {
        "line": 108,
        "fullcodeline": "d = (struct usb_interface_assoc_descriptor *)header;"
    },
    {
        "line": 203,
        "fullcodeline": "if (intfc->altsetting[n].desc."
    },
    {
        "line": 97,
        "fullcodeline": "++nalts[i];"
    },
    {
        "line": 98,
        "fullcodeline": "} else if (n < USB_MAXINTERFACES) {"
    },
    {
        "line": 109,
        "fullcodeline": "if (d->bLength < USB_DT_INTERFACE_ASSOCIATION_SIZE) {"
    },
    {
        "line": 116,
        "fullcodeline": "if (iad_num == USB_MAXIADS) {"
    },
    {
        "line": 99,
        "fullcodeline": "inums[n] = inum;"
    },
    {
        "line": 100,
        "fullcodeline": "nalts[n] = 1;"
    },
    {
        "line": 101,
        "fullcodeline": "++n;"
    },
    {
        "line": 110,
        "fullcodeline": "dev_warn(ddev,"
    },
    {
        "line": 117,
        "fullcodeline": "dev_warn(ddev, \"found more Interface \""
    },
    {
        "line": 123,
        "fullcodeline": "iad_num++;"
    },
    {
        "line": 126,
        "fullcodeline": "} else if (header->bDescriptorType == USB_DT_DEVICE ||"
    },
    {
        "line": 127,
        "fullcodeline": "header->bDescriptorType == USB_DT_CONFIG)"
    },
    {
        "line": 128,
        "fullcodeline": "dev_warn(ddev, \"config %d contains an unexpected \""
    }
]