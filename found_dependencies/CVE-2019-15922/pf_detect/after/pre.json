[
    {
        "line": 3,
        "fullcodeline": "struct pf_unit *pf = units;"
    },
    {
        "line": 6,
        "fullcodeline": "printk(\"%s: %s version %s, major %d, cluster %d, nice %d\\n\","
    },
    {
        "line": 9,
        "fullcodeline": "par_drv = pi_register_driver(name);"
    },
    {
        "line": 14,
        "fullcodeline": "k = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "if (!par_drv) {"
    },
    {
        "line": 15,
        "fullcodeline": "if (pf_drive_count == 0) {"
    },
    {
        "line": 44,
        "fullcodeline": "for (pf = units, unit = 0; unit < PF_UNITS; pf++, unit++) {"
    },
    {
        "line": 53,
        "fullcodeline": "return -1;"
    },
    {
        "line": 11,
        "fullcodeline": "pr_err(\"failed to register %s driver\\n\", name);"
    },
    {
        "line": 48,
        "fullcodeline": "pf->disk->queue = NULL;"
    },
    {
        "line": 49,
        "fullcodeline": "blk_mq_free_tag_set(&pf->tag_set);"
    },
    {
        "line": 50,
        "fullcodeline": "put_disk(pf->disk);"
    },
    {
        "line": 12,
        "fullcodeline": "return -1;"
    },
    {
        "line": 16,
        "fullcodeline": "if (pi_init(pf->pi, 1, -1, -1, -1, -1, -1, pf_scratch, PI_PF,"
    },
    {
        "line": 45,
        "fullcodeline": "if (!pf->disk)"
    },
    {
        "line": 26,
        "fullcodeline": "for (unit = 0; unit < PF_UNITS; unit++, pf++) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (!pf_probe(pf) && pf->disk) {"
    },
    {
        "line": 27,
        "fullcodeline": "int *conf = *drives[unit];"
    },
    {
        "line": 19,
        "fullcodeline": "pf->present = 1;"
    },
    {
        "line": 28,
        "fullcodeline": "if (!conf[D_PRT])"
    },
    {
        "line": 30,
        "fullcodeline": "if (pi_init(pf->pi, 0, conf[D_PRT], conf[D_MOD],"
    },
    {
        "line": 22,
        "fullcodeline": "pi_release(pf->pi);"
    },
    {
        "line": 33,
        "fullcodeline": "if (pf->disk && !pf_probe(pf)) {"
    },
    {
        "line": 34,
        "fullcodeline": "pf->present = 1;"
    },
    {
        "line": 37,
        "fullcodeline": "pi_release(pf->pi);"
    }
]