[
    {
        "line": 4,
        "fullcodeline": "mysql->affected_rows= net_field_length_ll(&pos);"
    },
    {
        "line": 5,
        "fullcodeline": "mysql->insert_id=\t  net_field_length_ll(&pos);"
    },
    {
        "line": 6,
        "fullcodeline": "mysql->server_status=uint2korr(pos);"
    },
    {
        "line": 7,
        "fullcodeline": "pos+=2;"
    },
    {
        "line": 8,
        "fullcodeline": "mysql->warning_count=uint2korr(pos);"
    },
    {
        "line": 9,
        "fullcodeline": "pos+=2;"
    },
    {
        "line": 10,
        "fullcodeline": "if (pos < mysql->net.read_pos+length)"
    },
    {
        "line": 12,
        "fullcodeline": "if ((item_len= net_field_length(&pos)))"
    },
    {
        "line": 16,
        "fullcodeline": "if (mysql->server_capabilities & CLIENT_SESSION_TRACKING)"
    },
    {
        "line": 13,
        "fullcodeline": "mysql->info=(char*) pos;"
    },
    {
        "line": 18,
        "fullcodeline": "ma_clear_session_state(mysql);"
    },
    {
        "line": 19,
        "fullcodeline": "pos+= item_len;"
    },
    {
        "line": 128,
        "fullcodeline": "else if (mysql->server_capabilities & CLIENT_SESSION_TRACKING)"
    },
    {
        "line": 21,
        "fullcodeline": "if (mysql->server_status & SERVER_SESSION_STATE_CHANGED)"
    },
    {
        "line": 129,
        "fullcodeline": "ma_clear_session_state(mysql);"
    },
    {
        "line": 24,
        "fullcodeline": "if (pos < mysql->net.read_pos + length)"
    },
    {
        "line": 119,
        "fullcodeline": "for (i= SESSION_TRACK_BEGIN; i <= SESSION_TRACK_END; i++)"
    },
    {
        "line": 27,
        "fullcodeline": "MYSQL_LEX_STRING *str= NULL;"
    },
    {
        "line": 29,
        "fullcodeline": "uchar *old_pos= pos;"
    },
    {
        "line": 30,
        "fullcodeline": "size_t item_len= net_field_length(&pos);  /* length for all items */"
    },
    {
        "line": 121,
        "fullcodeline": "mysql->extension->session_state[i].list= list_reverse(mysql->extension->session_state[i].list);"
    },
    {
        "line": 122,
        "fullcodeline": "mysql->extension->session_state[i].current= mysql->extension->session_state[i].list;"
    },
    {
        "line": 36,
        "fullcodeline": "while (item_len > 0)"
    },
    {
        "line": 34,
        "fullcodeline": "*old_pos= 0;"
    },
    {
        "line": 40,
        "fullcodeline": "old_pos= pos;"
    },
    {
        "line": 41,
        "fullcodeline": "si_type= (enum enum_session_state_type)net_field_length(&pos);"
    },
    {
        "line": 116,
        "fullcodeline": "item_len-= (pos - old_pos);"
    },
    {
        "line": 49,
        "fullcodeline": "plen= net_field_length(&pos);"
    },
    {
        "line": 60,
        "fullcodeline": "str->length= plen;"
    },
    {
        "line": 61,
        "fullcodeline": "str->str= data;"
    },
    {
        "line": 62,
        "fullcodeline": "memcpy(str->str, (char *)pos, plen);"
    },
    {
        "line": 63,
        "fullcodeline": "pos+= plen;"
    },
    {
        "line": 64,
        "fullcodeline": "session_item->data= str;"
    },
    {
        "line": 65,
        "fullcodeline": "mysql->extension->session_state[si_type].list= list_add(mysql->extension->session_state[si_type].list, session_item);"
    },
    {
        "line": 112,
        "fullcodeline": "plen= net_field_length(&pos);"
    },
    {
        "line": 113,
        "fullcodeline": "pos+= plen;"
    },
    {
        "line": 47,
        "fullcodeline": "if (si_type != SESSION_TRACK_STATE_CHANGE)"
    },
    {
        "line": 50,
        "fullcodeline": "if (!(session_item= ma_multi_malloc(0,"
    },
    {
        "line": 68,
        "fullcodeline": "if (si_type == SESSION_TRACK_SCHEMA)"
    },
    {
        "line": 48,
        "fullcodeline": "net_field_length(&pos); /* ignore total length, item length will follow next */"
    },
    {
        "line": 56,
        "fullcodeline": "ma_clear_session_state(mysql);"
    },
    {
        "line": 57,
        "fullcodeline": "SET_CLIENT_ERROR(mysql, CR_OUT_OF_MEMORY, SQLSTATE_UNKNOWN, 0);"
    },
    {
        "line": 70,
        "fullcodeline": "free(mysql->db);"
    },
    {
        "line": 71,
        "fullcodeline": "mysql->db= malloc(plen + 1);"
    },
    {
        "line": 72,
        "fullcodeline": "memcpy(mysql->db, str->str, plen);"
    },
    {
        "line": 73,
        "fullcodeline": "mysql->db[plen]= 0;"
    },
    {
        "line": 58,
        "fullcodeline": "return -1;"
    },
    {
        "line": 75,
        "fullcodeline": "else if (si_type == SESSION_TRACK_SYSTEM_VARIABLES)"
    },
    {
        "line": 77,
        "fullcodeline": "my_bool set_charset= 0;"
    },
    {
        "line": 81,
        "fullcodeline": "plen= net_field_length(&pos);"
    },
    {
        "line": 92,
        "fullcodeline": "str->length= plen;"
    },
    {
        "line": 93,
        "fullcodeline": "str->str= data;"
    },
    {
        "line": 94,
        "fullcodeline": "memcpy(str->str, (char *)pos, plen);"
    },
    {
        "line": 95,
        "fullcodeline": "pos+= plen;"
    },
    {
        "line": 96,
        "fullcodeline": "session_item->data= str;"
    },
    {
        "line": 97,
        "fullcodeline": "mysql->extension->session_state[si_type].list= list_add(mysql->extension->session_state[si_type].list, session_item);"
    },
    {
        "line": 79,
        "fullcodeline": "if (!strncmp(str->str, \"character_set_client\", str->length))"
    },
    {
        "line": 82,
        "fullcodeline": "if (!(session_item= ma_multi_malloc(0,"
    },
    {
        "line": 98,
        "fullcodeline": "if (set_charset &&"
    },
    {
        "line": 80,
        "fullcodeline": "set_charset= 1;"
    },
    {
        "line": 88,
        "fullcodeline": "ma_clear_session_state(mysql);"
    },
    {
        "line": 89,
        "fullcodeline": "SET_CLIENT_ERROR(mysql, CR_OUT_OF_MEMORY, SQLSTATE_UNKNOWN, 0);"
    },
    {
        "line": 99,
        "fullcodeline": "strncmp(mysql->charset->csname, str->str, str->length) != 0)"
    },
    {
        "line": 101,
        "fullcodeline": "char cs_name[64];"
    },
    {
        "line": 103,
        "fullcodeline": "memcpy(cs_name, str->str, str->length);"
    },
    {
        "line": 104,
        "fullcodeline": "cs_name[str->length]= 0;"
    },
    {
        "line": 90,
        "fullcodeline": "return -1;"
    },
    {
        "line": 105,
        "fullcodeline": "if ((cs_info = (MARIADB_CHARSET_INFO *)mysql_find_charset_name(cs_name)))"
    },
    {
        "line": 106,
        "fullcodeline": "mysql->charset= cs_info;"
    }
]