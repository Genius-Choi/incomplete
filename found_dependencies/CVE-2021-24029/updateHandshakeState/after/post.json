[
    {
        "line": 4,
        "fullcodeline": "auto handshakeLayer = conn.serverHandshakeLayer;"
    },
    {
        "line": 5,
        "fullcodeline": "auto zeroRttReadCipher = handshakeLayer->getZeroRttReadCipher();"
    },
    {
        "line": 6,
        "fullcodeline": "auto zeroRttHeaderCipher = handshakeLayer->getZeroRttReadHeaderCipher();"
    },
    {
        "line": 11,
        "fullcodeline": "auto oneRttWriteCipher = handshakeLayer->getOneRttWriteCipher();"
    },
    {
        "line": 13,
        "fullcodeline": "auto oneRttReadCipher = handshakeLayer->getOneRttReadCipher();"
    },
    {
        "line": 15,
        "fullcodeline": "auto oneRttWriteHeaderCipher = handshakeLayer->getOneRttWriteHeaderCipher();"
    },
    {
        "line": 16,
        "fullcodeline": "auto oneRttReadHeaderCipher = handshakeLayer->getOneRttReadHeaderCipher();"
    },
    {
        "line": 67,
        "fullcodeline": "auto handshakeReadCipher = handshakeLayer->getHandshakeReadCipher();"
    },
    {
        "line": 68,
        "fullcodeline": "auto handshakeReadHeaderCipher ="
    },
    {
        "line": 69,
        "fullcodeline": "handshakeLayer->getHandshakeReadHeaderCipher();"
    },
    {
        "line": 76,
        "fullcodeline": "if (handshakeLayer->isHandshakeDone()) {"
    },
    {
        "line": 22,
        "fullcodeline": "QUIC_TRACE(fst_trace, conn, \"derived 0-rtt read cipher\");"
    },
    {
        "line": 23,
        "fullcodeline": "conn.readCodec->setZeroRttReadCipher(std::move(zeroRttReadCipher));"
    },
    {
        "line": 26,
        "fullcodeline": "conn.readCodec->setZeroRttHeaderCipher(std::move(zeroRttHeaderCipher));"
    },
    {
        "line": 29,
        "fullcodeline": "conn.oneRttWriteHeaderCipher = std::move(oneRttWriteHeaderCipher);"
    },
    {
        "line": 32,
        "fullcodeline": "conn.readCodec->setOneRttHeaderCipher(std::move(oneRttReadHeaderCipher));"
    },
    {
        "line": 39,
        "fullcodeline": "QUIC_TRACE(fst_trace, conn, \"derived 1-rtt write cipher\");"
    },
    {
        "line": 44,
        "fullcodeline": "conn.oneRttWriteCipher = std::move(oneRttWriteCipher);"
    },
    {
        "line": 46,
        "fullcodeline": "updatePacingOnKeyEstablished(conn);"
    },
    {
        "line": 50,
        "fullcodeline": "auto clientParams = handshakeLayer->getClientTransportParams();"
    },
    {
        "line": 56,
        "fullcodeline": "processClientInitialParams(conn, std::move(*clientParams));"
    },
    {
        "line": 62,
        "fullcodeline": "QUIC_TRACE(fst_trace, conn, \"derived 1-rtt read cipher\");"
    },
    {
        "line": 65,
        "fullcodeline": "conn.readCodec->setOneRttReadCipher(std::move(oneRttReadCipher));"
    },
    {
        "line": 71,
        "fullcodeline": "CHECK(handshakeReadHeaderCipher);"
    },
    {
        "line": 72,
        "fullcodeline": "conn.readCodec->setHandshakeReadCipher(std::move(handshakeReadCipher));"
    },
    {
        "line": 73,
        "fullcodeline": "conn.readCodec->setHandshakeHeaderCipher("
    },
    {
        "line": 77,
        "fullcodeline": "CHECK(conn.oneRttWriteCipher);"
    },
    {
        "line": 51,
        "fullcodeline": "if (!clientParams) {"
    },
    {
        "line": 74,
        "fullcodeline": "std::move(handshakeReadHeaderCipher));"
    },
    {
        "line": 78,
        "fullcodeline": "if (conn.version != QuicVersion::MVFST_D24 && !conn.sentHandshakeDone) {"
    },
    {
        "line": 20,
        "fullcodeline": "conn.qLogger->addTransportStateUpdate(kDerivedZeroRttReadCipher);"
    },
    {
        "line": 37,
        "fullcodeline": "conn.qLogger->addTransportStateUpdate(kDerivedOneRttWriteCipher);"
    },
    {
        "line": 60,
        "fullcodeline": "conn.qLogger->addTransportStateUpdate(kDerivedOneRttReadCipher);"
    },
    {
        "line": 79,
        "fullcodeline": "sendSimpleFrame(conn, HandshakeDoneFrame());"
    },
    {
        "line": 80,
        "fullcodeline": "conn.sentHandshakeDone = true;"
    },
    {
        "line": 41,
        "fullcodeline": "throw QuicTransportException("
    },
    {
        "line": 52,
        "fullcodeline": "throw QuicTransportException("
    }
]