[
    {
        "line": 24,
        "fullcodeline": "packet_len=length;"
    },
    {
        "line": 25,
        "fullcodeline": "optr = p; /* initialize the _o_riginal pointer to the packet start -"
    },
    {
        "line": 28,
        "fullcodeline": "isis_header = (const struct isis_common_header *)p;"
    },
    {
        "line": 32,
        "fullcodeline": "pptr = p+(ISIS_COMMON_HEADER_SIZE);"
    },
    {
        "line": 33,
        "fullcodeline": "header_iih_lan = (const struct isis_iih_lan_header *)pptr;"
    },
    {
        "line": 34,
        "fullcodeline": "header_iih_ptp = (const struct isis_iih_ptp_header *)pptr;"
    },
    {
        "line": 35,
        "fullcodeline": "header_lsp = (const struct isis_lsp_header *)pptr;"
    },
    {
        "line": 36,
        "fullcodeline": "header_csnp = (const struct isis_csnp_header *)pptr;"
    },
    {
        "line": 37,
        "fullcodeline": "header_psnp = (const struct isis_psnp_header *)pptr;"
    },
    {
        "line": 72,
        "fullcodeline": "max_area = isis_header->max_area;"
    },
    {
        "line": 84,
        "fullcodeline": "id_length = isis_header->id_length;"
    },
    {
        "line": 111,
        "fullcodeline": "pdu_type=isis_header->pdu_type;"
    },
    {
        "line": 970,
        "fullcodeline": "ND_PRINT((ndo, \"%s\", tstr));"
    },
    {
        "line": 974,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t\"));"
    },
    {
        "line": 975,
        "fullcodeline": "ND_PRINT((ndo, \"%s\", tstr));"
    },
    {
        "line": 30,
        "fullcodeline": "if (length < ISIS_COMMON_HEADER_SIZE)"
    },
    {
        "line": 39,
        "fullcodeline": "if (!ndo->ndo_eflag)"
    },
    {
        "line": 46,
        "fullcodeline": "if (isis_header->version != ISIS_VERSION) {"
    },
    {
        "line": 51,
        "fullcodeline": "if ((isis_header->id_length != SYSTEM_ID_LEN) && (isis_header->id_length != 0)) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (isis_header->pdu_version != ISIS_VERSION) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (length < isis_header->fixed_len) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (isis_header->fixed_len < ISIS_COMMON_HEADER_SIZE) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (id_length != 6 ) {"
    },
    {
        "line": 114,
        "fullcodeline": "if (ndo->ndo_vflag == 0) {"
    },
    {
        "line": 371,
        "fullcodeline": "while (packet_len > 0) {"
    },
    {
        "line": 964,
        "fullcodeline": "if (packet_len != 0) {"
    },
    {
        "line": 40,
        "fullcodeline": "ND_PRINT((ndo, \"IS-IS\"));"
    },
    {
        "line": 47,
        "fullcodeline": "ND_PRINT((ndo, \"version %d packet not supported\", isis_header->version));"
    },
    {
        "line": 52,
        "fullcodeline": "ND_PRINT((ndo, \"system ID length of %d is not supported\","
    },
    {
        "line": 58,
        "fullcodeline": "ND_PRINT((ndo, \"version %d packet not supported\", isis_header->pdu_version));"
    },
    {
        "line": 63,
        "fullcodeline": "ND_PRINT((ndo, \"fixed header length %u > packet length %u\", isis_header->fixed_len, length));"
    },
    {
        "line": 68,
        "fullcodeline": "ND_PRINT((ndo, \"fixed header length %u < minimum header size %u\", isis_header->fixed_len, (u_int)ISIS_COMMON_HEADER_SIZE));"
    },
    {
        "line": 75,
        "fullcodeline": "max_area = 3;\t /* silly shit */"
    },
    {
        "line": 78,
        "fullcodeline": "ND_PRINT((ndo, \"bad packet -- 255 areas\"));"
    },
    {
        "line": 87,
        "fullcodeline": "id_length = 6;\t /* silly shit again */"
    },
    {
        "line": 99,
        "fullcodeline": "id_length = 0;   /* entirely useless */"
    },
    {
        "line": 107,
        "fullcodeline": "ND_PRINT((ndo, \"bad packet -- illegal sys-ID length (%u)\", id_length));"
    },
    {
        "line": 115,
        "fullcodeline": "ND_PRINT((ndo, \"%s%s\","
    },
    {
        "line": 161,
        "fullcodeline": "pdu_len=EXTRACT_16BITS(header_iih_lan->pdu_len);"
    },
    {
        "line": 167,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  source-id: %s,  holding time: %us, Flags: [%s]\","
    },
    {
        "line": 174,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  lan-id:    %s, Priority: %u, PDU length: %u\","
    },
    {
        "line": 184,
        "fullcodeline": "packet_len -= (ISIS_COMMON_HEADER_SIZE+ISIS_IIH_LAN_HEADER_SIZE);"
    },
    {
        "line": 185,
        "fullcodeline": "pptr = p + (ISIS_COMMON_HEADER_SIZE+ISIS_IIH_LAN_HEADER_SIZE);"
    },
    {
        "line": 202,
        "fullcodeline": "pdu_len=EXTRACT_16BITS(header_iih_ptp->pdu_len);"
    },
    {
        "line": 208,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  source-id: %s, holding time: %us, Flags: [%s]\","
    },
    {
        "line": 215,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  circuit-id: 0x%02x, PDU length: %u\","
    },
    {
        "line": 224,
        "fullcodeline": "packet_len -= (ISIS_COMMON_HEADER_SIZE+ISIS_IIH_PTP_HEADER_SIZE);"
    },
    {
        "line": 225,
        "fullcodeline": "pptr = p + (ISIS_COMMON_HEADER_SIZE+ISIS_IIH_PTP_HEADER_SIZE);"
    },
    {
        "line": 246,
        "fullcodeline": "pdu_len=EXTRACT_16BITS(header_lsp->pdu_len);"
    },
    {
        "line": 252,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  lsp-id: %s, seq: 0x%08x, lifetime: %5us\\n\\t  chksum: 0x%04x\","
    },
    {
        "line": 258,
        "fullcodeline": "osi_print_cksum(ndo, (const uint8_t *)header_lsp->lsp_id,"
    },
    {
        "line": 262,
        "fullcodeline": "ND_PRINT((ndo, \", PDU length: %u, Flags: [ %s\","
    },
    {
        "line": 273,
        "fullcodeline": "ND_PRINT((ndo, \"%s\", ISIS_MASK_LSP_PARTITION_BIT(header_lsp->typeblock) ? \"P bit set, \" : \"\"));"
    },
    {
        "line": 274,
        "fullcodeline": "ND_PRINT((ndo, \"%s ]\", tok2str(isis_lsp_istype_values, \"Unknown(0x%x)\","
    },
    {
        "line": 282,
        "fullcodeline": "packet_len -= (ISIS_COMMON_HEADER_SIZE+ISIS_LSP_HEADER_SIZE);"
    },
    {
        "line": 283,
        "fullcodeline": "pptr = p + (ISIS_COMMON_HEADER_SIZE+ISIS_LSP_HEADER_SIZE);"
    },
    {
        "line": 301,
        "fullcodeline": "pdu_len=EXTRACT_16BITS(header_csnp->pdu_len);"
    },
    {
        "line": 307,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  source-id:    %s, PDU length: %u\","
    },
    {
        "line": 310,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  start lsp-id: %s\","
    },
    {
        "line": 312,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  end lsp-id:   %s\","
    },
    {
        "line": 320,
        "fullcodeline": "packet_len -= (ISIS_COMMON_HEADER_SIZE+ISIS_CSNP_HEADER_SIZE);"
    },
    {
        "line": 321,
        "fullcodeline": "pptr = p + (ISIS_COMMON_HEADER_SIZE+ISIS_CSNP_HEADER_SIZE);"
    },
    {
        "line": 339,
        "fullcodeline": "pdu_len=EXTRACT_16BITS(header_psnp->pdu_len);"
    },
    {
        "line": 345,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  source-id:    %s, PDU length: %u\","
    },
    {
        "line": 354,
        "fullcodeline": "packet_len -= (ISIS_COMMON_HEADER_SIZE+ISIS_PSNP_HEADER_SIZE);"
    },
    {
        "line": 355,
        "fullcodeline": "pptr = p + (ISIS_COMMON_HEADER_SIZE+ISIS_PSNP_HEADER_SIZE);"
    },
    {
        "line": 363,
        "fullcodeline": "(void)print_unknown_data(ndo, pptr, \"\\n\\t  \", length);"
    },
    {
        "line": 372,
        "fullcodeline": "ND_TCHECK2(*pptr, 2);"
    },
    {
        "line": 377,
        "fullcodeline": "tmp =tlv_len; /* copy temporary len & pointer to packet data */"
    },
    {
        "line": 378,
        "fullcodeline": "tptr = pptr;"
    },
    {
        "line": 379,
        "fullcodeline": "packet_len -= 2;"
    },
    {
        "line": 382,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    %s TLV #%u, length: %u\","
    },
    {
        "line": 960,
        "fullcodeline": "pptr += tlv_len;"
    },
    {
        "line": 961,
        "fullcodeline": "packet_len -= tlv_len;"
    },
    {
        "line": 965,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      %u straggler bytes\", packet_len));"
    },
    {
        "line": 120,
        "fullcodeline": "ND_PRINT((ndo, \"%slength %u\", ndo->ndo_eflag ? \"\" : \", \", length));"
    },
    {
        "line": 122,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t%s, hlen: %u, v: %u, pdu-v: %u, sys-id-len: %u (%u), max-area: %u (%u)\","
    },
    {
        "line": 144,
        "fullcodeline": "if (isis_header->fixed_len != (ISIS_COMMON_HEADER_SIZE+ISIS_IIH_LAN_HEADER_SIZE)) {"
    },
    {
        "line": 150,
        "fullcodeline": "if (length < ISIS_COMMON_HEADER_SIZE+ISIS_IIH_LAN_HEADER_SIZE)"
    },
    {
        "line": 152,
        "fullcodeline": "if (ndo->ndo_vflag == 0) {"
    },
    {
        "line": 162,
        "fullcodeline": "if (packet_len>pdu_len) {"
    },
    {
        "line": 179,
        "fullcodeline": "if (ndo->ndo_vflag > 1) {"
    },
    {
        "line": 189,
        "fullcodeline": "if (isis_header->fixed_len != (ISIS_COMMON_HEADER_SIZE+ISIS_IIH_PTP_HEADER_SIZE)) {"
    },
    {
        "line": 195,
        "fullcodeline": "if (length < ISIS_COMMON_HEADER_SIZE+ISIS_IIH_PTP_HEADER_SIZE)"
    },
    {
        "line": 197,
        "fullcodeline": "if (ndo->ndo_vflag == 0) {"
    },
    {
        "line": 203,
        "fullcodeline": "if (packet_len>pdu_len) {"
    },
    {
        "line": 219,
        "fullcodeline": "if (ndo->ndo_vflag > 1) {"
    },
    {
        "line": 230,
        "fullcodeline": "if (isis_header->fixed_len != (ISIS_COMMON_HEADER_SIZE+ISIS_LSP_HEADER_SIZE)) {"
    },
    {
        "line": 236,
        "fullcodeline": "if (length < ISIS_COMMON_HEADER_SIZE+ISIS_LSP_HEADER_SIZE)"
    },
    {
        "line": 238,
        "fullcodeline": "if (ndo->ndo_vflag == 0) {"
    },
    {
        "line": 247,
        "fullcodeline": "if (packet_len>pdu_len) {"
    },
    {
        "line": 259,
        "fullcodeline": "EXTRACT_16BITS(header_lsp->checksum),"
    },
    {
        "line": 260,
        "fullcodeline": "12, length-12);"
    },
    {
        "line": 266,
        "fullcodeline": "if (ISIS_MASK_LSP_ATT_BITS(header_lsp->typeblock)) {"
    },
    {
        "line": 277,
        "fullcodeline": "if (ndo->ndo_vflag > 1) {"
    },
    {
        "line": 288,
        "fullcodeline": "if (isis_header->fixed_len != (ISIS_COMMON_HEADER_SIZE+ISIS_CSNP_HEADER_SIZE)) {"
    },
    {
        "line": 294,
        "fullcodeline": "if (length < ISIS_COMMON_HEADER_SIZE+ISIS_CSNP_HEADER_SIZE)"
    },
    {
        "line": 296,
        "fullcodeline": "if (ndo->ndo_vflag == 0) {"
    },
    {
        "line": 302,
        "fullcodeline": "if (packet_len>pdu_len) {"
    },
    {
        "line": 315,
        "fullcodeline": "if (ndo->ndo_vflag > 1) {"
    },
    {
        "line": 326,
        "fullcodeline": "if (isis_header->fixed_len != (ISIS_COMMON_HEADER_SIZE+ISIS_PSNP_HEADER_SIZE)) {"
    },
    {
        "line": 332,
        "fullcodeline": "if (length < ISIS_COMMON_HEADER_SIZE+ISIS_PSNP_HEADER_SIZE)"
    },
    {
        "line": 334,
        "fullcodeline": "if (ndo->ndo_vflag == 0) {"
    },
    {
        "line": 340,
        "fullcodeline": "if (packet_len>pdu_len) {"
    },
    {
        "line": 349,
        "fullcodeline": "if (ndo->ndo_vflag > 1) {"
    },
    {
        "line": 359,
        "fullcodeline": "if (ndo->ndo_vflag == 0) {"
    },
    {
        "line": 373,
        "fullcodeline": "if (packet_len < 2)"
    },
    {
        "line": 389,
        "fullcodeline": "if (tlv_len == 0) /* something is invalid */"
    },
    {
        "line": 392,
        "fullcodeline": "if (packet_len < tlv_len)"
    },
    {
        "line": 955,
        "fullcodeline": "if (ndo->ndo_vflag> 1) {"
    },
    {
        "line": 134,
        "fullcodeline": "if (ndo->ndo_vflag > 1) {"
    },
    {
        "line": 145,
        "fullcodeline": "ND_PRINT((ndo, \", bogus fixed header length %u should be %lu\","
    },
    {
        "line": 153,
        "fullcodeline": "ND_PRINT((ndo, \", src-id %s\","
    },
    {
        "line": 155,
        "fullcodeline": "ND_PRINT((ndo, \", lan-id %s, prio %u\","
    },
    {
        "line": 158,
        "fullcodeline": "ND_PRINT((ndo, \", length %u\", length));"
    },
    {
        "line": 163,
        "fullcodeline": "packet_len=pdu_len; /* do TLV decoding as long as it makes sense */"
    },
    {
        "line": 164,
        "fullcodeline": "length=pdu_len;"
    },
    {
        "line": 190,
        "fullcodeline": "ND_PRINT((ndo, \", bogus fixed header length %u should be %lu\","
    },
    {
        "line": 198,
        "fullcodeline": "ND_PRINT((ndo, \", src-id %s\", isis_print_id(header_iih_ptp->source_id, SYSTEM_ID_LEN)));"
    },
    {
        "line": 199,
        "fullcodeline": "ND_PRINT((ndo, \", length %u\", length));"
    },
    {
        "line": 204,
        "fullcodeline": "packet_len=pdu_len; /* do TLV decoding as long as it makes sense */"
    },
    {
        "line": 205,
        "fullcodeline": "length=pdu_len;"
    },
    {
        "line": 231,
        "fullcodeline": "ND_PRINT((ndo, \", bogus fixed header length %u should be %lu\","
    },
    {
        "line": 239,
        "fullcodeline": "ND_PRINT((ndo, \", lsp-id %s, seq 0x%08x, lifetime %5us\","
    },
    {
        "line": 243,
        "fullcodeline": "ND_PRINT((ndo, \", length %u\", length));"
    },
    {
        "line": 248,
        "fullcodeline": "packet_len=pdu_len; /* do TLV decoding as long as it makes sense */"
    },
    {
        "line": 249,
        "fullcodeline": "length=pdu_len;"
    },
    {
        "line": 267,
        "fullcodeline": "ND_PRINT((ndo, \"%s\", ISIS_MASK_LSP_ATT_DEFAULT_BIT(header_lsp->typeblock) ? \"default \" : \"\"));"
    },
    {
        "line": 268,
        "fullcodeline": "ND_PRINT((ndo, \"%s\", ISIS_MASK_LSP_ATT_DELAY_BIT(header_lsp->typeblock) ? \"delay \" : \"\"));"
    },
    {
        "line": 269,
        "fullcodeline": "ND_PRINT((ndo, \"%s\", ISIS_MASK_LSP_ATT_EXPENSE_BIT(header_lsp->typeblock) ? \"expense \" : \"\"));"
    },
    {
        "line": 270,
        "fullcodeline": "ND_PRINT((ndo, \"%s\", ISIS_MASK_LSP_ATT_ERROR_BIT(header_lsp->typeblock) ? \"error \" : \"\"));"
    },
    {
        "line": 271,
        "fullcodeline": "ND_PRINT((ndo, \"ATT bit set, \"));"
    },
    {
        "line": 289,
        "fullcodeline": "ND_PRINT((ndo, \", bogus fixed header length %u should be %lu\","
    },
    {
        "line": 297,
        "fullcodeline": "ND_PRINT((ndo, \", src-id %s\", isis_print_id(header_csnp->source_id, NODE_ID_LEN)));"
    },
    {
        "line": 298,
        "fullcodeline": "ND_PRINT((ndo, \", length %u\", length));"
    },
    {
        "line": 303,
        "fullcodeline": "packet_len=pdu_len; /* do TLV decoding as long as it makes sense */"
    },
    {
        "line": 304,
        "fullcodeline": "length=pdu_len;"
    },
    {
        "line": 327,
        "fullcodeline": "ND_PRINT((ndo, \"- bogus fixed header length %u should be %lu\","
    },
    {
        "line": 335,
        "fullcodeline": "ND_PRINT((ndo, \", src-id %s\", isis_print_id(header_psnp->source_id, NODE_ID_LEN)));"
    },
    {
        "line": 336,
        "fullcodeline": "ND_PRINT((ndo, \", length %u\", length));"
    },
    {
        "line": 341,
        "fullcodeline": "packet_len=pdu_len; /* do TLV decoding as long as it makes sense */"
    },
    {
        "line": 342,
        "fullcodeline": "length=pdu_len;"
    },
    {
        "line": 360,
        "fullcodeline": "ND_PRINT((ndo, \", length %u\", length));"
    },
    {
        "line": 375,
        "fullcodeline": "tlv_type = *pptr++;"
    },
    {
        "line": 376,
        "fullcodeline": "tlv_len = *pptr++;"
    },
    {
        "line": 398,
        "fullcodeline": "ND_TCHECK2(*tptr, 1);"
    },
    {
        "line": 430,
        "fullcodeline": "tmp --;"
    },
    {
        "line": 431,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      LAN address length %u bytes \", lan_alen));"
    },
    {
        "line": 444,
        "fullcodeline": "mt_len = isis_print_mtid(ndo, tptr, \"\\n\\t      \");"
    },
    {
        "line": 447,
        "fullcodeline": "tptr+=mt_len;"
    },
    {
        "line": 448,
        "fullcodeline": "tmp-=mt_len;"
    },
    {
        "line": 479,
        "fullcodeline": "ND_TCHECK2(*tptr,1);  /* check if there is one byte left to read out the virtual flag */"
    },
    {
        "line": 480,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      %s\","
    },
    {
        "line": 484,
        "fullcodeline": "tlv_is_reach = (const struct isis_tlv_is_reach *)tptr;"
    },
    {
        "line": 496,
        "fullcodeline": "tlv_es_reach = (const struct isis_tlv_es_reach *)tptr;"
    },
    {
        "line": 525,
        "fullcodeline": "mt_len = isis_print_mtid(ndo, tptr, \"\\n\\t      \");"
    },
    {
        "line": 529,
        "fullcodeline": "tptr+=mt_len;"
    },
    {
        "line": 530,
        "fullcodeline": "tmp-=mt_len;"
    },
    {
        "line": 552,
        "fullcodeline": "mt_len = isis_print_mtid(ndo, tptr, \"\\n\\t      \");"
    },
    {
        "line": 556,
        "fullcodeline": "tptr+=mt_len;"
    },
    {
        "line": 557,
        "fullcodeline": "tmp-=mt_len;"
    },
    {
        "line": 580,
        "fullcodeline": "ND_TCHECK2(*tptr, 1);"
    },
    {
        "line": 582,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      %s: \","
    },
    {
        "line": 624,
        "fullcodeline": "tlv_ptp_adj = (const struct isis_tlv_ptp_adj *)tptr;"
    },
    {
        "line": 652,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      NLPID(s): \"));"
    },
    {
        "line": 686,
        "fullcodeline": "ND_TCHECK2(*(tptr), 2);"
    },
    {
        "line": 688,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      O: %d, RES: %d, MTID(s): %d\","
    },
    {
        "line": 693,
        "fullcodeline": "tmp = tmp-2;"
    },
    {
        "line": 694,
        "fullcodeline": "tptr = tptr+2;"
    },
    {
        "line": 702,
        "fullcodeline": "ND_TCHECK2(*pptr, sizeof(struct in_addr));"
    },
    {
        "line": 703,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Traffic Engineering Router ID: %s\", ipaddr_string(ndo, pptr)));"
    },
    {
        "line": 716,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Hostname: \"));"
    },
    {
        "line": 724,
        "fullcodeline": "ND_TCHECK2(*tptr, NODE_ID_LEN);"
    },
    {
        "line": 725,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      IS Neighbor: %s\", isis_print_id(tptr, NODE_ID_LEN)));"
    },
    {
        "line": 726,
        "fullcodeline": "tptr+=(NODE_ID_LEN);"
    },
    {
        "line": 727,
        "fullcodeline": "tmp-=(NODE_ID_LEN);"
    },
    {
        "line": 731,
        "fullcodeline": "ND_TCHECK2(*tptr, 1);"
    },
    {
        "line": 732,
        "fullcodeline": "ND_PRINT((ndo, \", Flags: [%s]\", ISIS_MASK_TLV_SHARED_RISK_GROUP(*tptr++) ? \"numbered\" : \"unnumbered\"));"
    },
    {
        "line": 733,
        "fullcodeline": "tmp--;"
    },
    {
        "line": 737,
        "fullcodeline": "ND_TCHECK2(*tptr, sizeof(struct in_addr));"
    },
    {
        "line": 738,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      IPv4 interface address: %s\", ipaddr_string(ndo, tptr)));"
    },
    {
        "line": 739,
        "fullcodeline": "tptr+=sizeof(struct in_addr);"
    },
    {
        "line": 740,
        "fullcodeline": "tmp-=sizeof(struct in_addr);"
    },
    {
        "line": 744,
        "fullcodeline": "ND_TCHECK2(*tptr, sizeof(struct in_addr));"
    },
    {
        "line": 745,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      IPv4 neighbor address: %s\", ipaddr_string(ndo, tptr)));"
    },
    {
        "line": 746,
        "fullcodeline": "tptr+=sizeof(struct in_addr);"
    },
    {
        "line": 747,
        "fullcodeline": "tmp-=sizeof(struct in_addr);"
    },
    {
        "line": 758,
        "fullcodeline": "tlv_lsp = (const struct isis_tlv_lsp *)tptr;"
    },
    {
        "line": 777,
        "fullcodeline": "ND_TCHECK2(*tptr, ISIS_TLV_CHECKSUM_MINLEN);"
    },
    {
        "line": 778,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      checksum: 0x%04x \", EXTRACT_16BITS(tptr)));"
    },
    {
        "line": 784,
        "fullcodeline": "osi_print_cksum(ndo, optr, EXTRACT_16BITS(tptr), tptr-optr,"
    },
    {
        "line": 825,
        "fullcodeline": "ND_TCHECK2(*tptr, ISIS_TLV_RESTART_SIGNALING_FLAGLEN);"
    },
    {
        "line": 826,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Flags [%s]\","
    },
    {
        "line": 828,
        "fullcodeline": "tptr+=ISIS_TLV_RESTART_SIGNALING_FLAGLEN;"
    },
    {
        "line": 829,
        "fullcodeline": "tmp-=ISIS_TLV_RESTART_SIGNALING_FLAGLEN;"
    },
    {
        "line": 837,
        "fullcodeline": "ND_TCHECK2(*tptr, ISIS_TLV_RESTART_SIGNALING_HOLDTIMELEN);"
    },
    {
        "line": 839,
        "fullcodeline": "ND_PRINT((ndo, \", Remaining holding time %us\", EXTRACT_16BITS(tptr)));"
    },
    {
        "line": 840,
        "fullcodeline": "tptr+=ISIS_TLV_RESTART_SIGNALING_HOLDTIMELEN;"
    },
    {
        "line": 841,
        "fullcodeline": "tmp-=ISIS_TLV_RESTART_SIGNALING_HOLDTIMELEN;"
    },
    {
        "line": 853,
        "fullcodeline": "ND_TCHECK2(*tptr, ISIS_TLV_IDRP_INFO_MINLEN);"
    },
    {
        "line": 854,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Inter-Domain Information Type: %s\","
    },
    {
        "line": 875,
        "fullcodeline": "ND_TCHECK2(*tptr, ISIS_TLV_LSP_BUFFERSIZE_MINLEN);"
    },
    {
        "line": 876,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      LSP Buffersize: %u\", EXTRACT_16BITS(tptr)));"
    },
    {
        "line": 891,
        "fullcodeline": "ND_TCHECK2(*tptr, sizeof(struct isis_metric_block));"
    },
    {
        "line": 892,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Metric Block\"));"
    },
    {
        "line": 893,
        "fullcodeline": "isis_print_metric_block(ndo, (const struct isis_metric_block *)tptr);"
    },
    {
        "line": 894,
        "fullcodeline": "tptr+=sizeof(struct isis_metric_block);"
    },
    {
        "line": 895,
        "fullcodeline": "tmp-=sizeof(struct isis_metric_block);"
    },
    {
        "line": 918,
        "fullcodeline": "ND_TCHECK2(*tptr, ISIS_TLV_IIH_SEQNR_MINLEN); /* check if four bytes are on the wire */"
    },
    {
        "line": 919,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Sequence number: %u\", EXTRACT_32BITS(tptr)));"
    },
    {
        "line": 925,
        "fullcodeline": "ND_TCHECK2(*tptr, ISIS_TLV_VENDOR_PRIVATE_MINLEN); /* check if enough byte for a full oui */"
    },
    {
        "line": 926,
        "fullcodeline": "vendor_id = EXTRACT_24BITS(tptr);"
    },
    {
        "line": 927,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Vendor: %s (%u)\","
    },
    {
        "line": 930,
        "fullcodeline": "tptr+=3;"
    },
    {
        "line": 931,
        "fullcodeline": "tmp-=3;"
    },
    {
        "line": 116,
        "fullcodeline": "ndo->ndo_eflag ? \"\" : \", \","
    },
    {
        "line": 117,
        "fullcodeline": "tok2str(isis_pdu_values, \"unknown PDU-Type %u\", pdu_type)));"
    },
    {
        "line": 168,
        "fullcodeline": "isis_print_id(header_iih_lan->source_id,SYSTEM_ID_LEN),"
    },
    {
        "line": 169,
        "fullcodeline": "EXTRACT_16BITS(header_iih_lan->holding_time),"
    },
    {
        "line": 170,
        "fullcodeline": "tok2str(isis_iih_circuit_type_values,"
    },
    {
        "line": 175,
        "fullcodeline": "isis_print_id(header_iih_lan->lan_id, NODE_ID_LEN),"
    },
    {
        "line": 176,
        "fullcodeline": "(header_iih_lan->priority) & ISIS_LAN_PRIORITY_MASK,"
    },
    {
        "line": 180,
        "fullcodeline": "if (!print_unknown_data(ndo, pptr, \"\\n\\t  \", ISIS_IIH_LAN_HEADER_SIZE))"
    },
    {
        "line": 209,
        "fullcodeline": "isis_print_id(header_iih_ptp->source_id,SYSTEM_ID_LEN),"
    },
    {
        "line": 210,
        "fullcodeline": "EXTRACT_16BITS(header_iih_ptp->holding_time),"
    },
    {
        "line": 211,
        "fullcodeline": "tok2str(isis_iih_circuit_type_values,"
    },
    {
        "line": 220,
        "fullcodeline": "if (!print_unknown_data(ndo, pptr, \"\\n\\t  \", ISIS_IIH_PTP_HEADER_SIZE))"
    },
    {
        "line": 253,
        "fullcodeline": "isis_print_id(header_lsp->lsp_id, LSP_ID_LEN),"
    },
    {
        "line": 254,
        "fullcodeline": "EXTRACT_32BITS(header_lsp->sequence_number),"
    },
    {
        "line": 255,
        "fullcodeline": "EXTRACT_16BITS(header_lsp->remaining_lifetime),"
    },
    {
        "line": 256,
        "fullcodeline": "EXTRACT_16BITS(header_lsp->checksum)));"
    },
    {
        "line": 264,
        "fullcodeline": "ISIS_MASK_LSP_OL_BIT(header_lsp->typeblock) ? \"Overload bit set, \" : \"\"));"
    },
    {
        "line": 278,
        "fullcodeline": "if (!print_unknown_data(ndo, pptr, \"\\n\\t  \", ISIS_LSP_HEADER_SIZE))"
    },
    {
        "line": 308,
        "fullcodeline": "isis_print_id(header_csnp->source_id, NODE_ID_LEN),"
    },
    {
        "line": 311,
        "fullcodeline": "isis_print_id(header_csnp->start_lsp_id, LSP_ID_LEN)));"
    },
    {
        "line": 313,
        "fullcodeline": "isis_print_id(header_csnp->end_lsp_id, LSP_ID_LEN)));"
    },
    {
        "line": 316,
        "fullcodeline": "if (!print_unknown_data(ndo, pptr, \"\\n\\t  \", ISIS_CSNP_HEADER_SIZE))"
    },
    {
        "line": 346,
        "fullcodeline": "isis_print_id(header_psnp->source_id, NODE_ID_LEN),"
    },
    {
        "line": 350,
        "fullcodeline": "if (!print_unknown_data(ndo, pptr, \"\\n\\t  \", ISIS_PSNP_HEADER_SIZE))"
    },
    {
        "line": 383,
        "fullcodeline": "tok2str(isis_tlv_values,"
    },
    {
        "line": 400,
        "fullcodeline": "while (tmp && alen < tmp) {"
    },
    {
        "line": 414,
        "fullcodeline": "while (tmp >= ETHER_ADDR_LEN) {"
    },
    {
        "line": 423,
        "fullcodeline": "if (!ND_TTEST2(*tptr, 1) || tmp < 3) /* min. TLV length */"
    },
    {
        "line": 426,
        "fullcodeline": "if (lan_alen == 0) {"
    },
    {
        "line": 432,
        "fullcodeline": "while (tmp >= lan_alen) {"
    },
    {
        "line": 445,
        "fullcodeline": "if (mt_len == 0) /* did something go wrong ? */"
    },
    {
        "line": 449,
        "fullcodeline": "while (tmp >= 2+NODE_ID_LEN+3+1) {"
    },
    {
        "line": 460,
        "fullcodeline": "while (tmp >= NODE_ID_LEN+1) { /* is it worth attempting a decode ? */"
    },
    {
        "line": 470,
        "fullcodeline": "while (tmp >= NODE_ID_LEN+3+1) { /* is it worth attempting a decode ? */"
    },
    {
        "line": 485,
        "fullcodeline": "while (tmp >= sizeof(struct isis_tlv_is_reach)) {"
    },
    {
        "line": 497,
        "fullcodeline": "while (tmp >= sizeof(struct isis_tlv_es_reach)) {"
    },
    {
        "line": 510,
        "fullcodeline": "if (!isis_print_tlv_ip_reach(ndo, pptr, \"\\n\\t      \", tlv_len))"
    },
    {
        "line": 515,
        "fullcodeline": "while (tmp>0) {"
    },
    {
        "line": 526,
        "fullcodeline": "if (mt_len == 0) { /* did something go wrong ? */"
    },
    {
        "line": 532,
        "fullcodeline": "while (tmp>0) {"
    },
    {
        "line": 542,
        "fullcodeline": "while (tmp>0) {"
    },
    {
        "line": 553,
        "fullcodeline": "if (mt_len == 0) { /* did something go wrong ? */"
    },
    {
        "line": 559,
        "fullcodeline": "while (tmp>0) {"
    },
    {
        "line": 569,
        "fullcodeline": "while (tmp>=sizeof(struct in6_addr)) {"
    },
    {
        "line": 625,
        "fullcodeline": "if(tmp>=1) {"
    },
    {
        "line": 632,
        "fullcodeline": "if(tmp>sizeof(tlv_ptp_adj->extd_local_circuit_id)) {"
    },
    {
        "line": 638,
        "fullcodeline": "if(tmp>=SYSTEM_ID_LEN) {"
    },
    {
        "line": 644,
        "fullcodeline": "if(tmp>=sizeof(tlv_ptp_adj->neighbor_extd_local_circuit_id)) {"
    },
    {
        "line": 653,
        "fullcodeline": "while (tmp>0) {"
    },
    {
        "line": 669,
        "fullcodeline": "ND_TCHECK2(*(tptr), 2);"
    },
    {
        "line": 671,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t       RES: %d, MTID(s): %d\","
    },
    {
        "line": 675,
        "fullcodeline": "tmp = tmp-2;"
    },
    {
        "line": 676,
        "fullcodeline": "tptr = tptr+2;"
    },
    {
        "line": 707,
        "fullcodeline": "while (tmp>=sizeof(struct in_addr)) {"
    },
    {
        "line": 717,
        "fullcodeline": "if (fn_printzp(ndo, tptr, tmp, ndo->ndo_snapend))"
    },
    {
        "line": 722,
        "fullcodeline": "if (tmp < NODE_ID_LEN)"
    },
    {
        "line": 729,
        "fullcodeline": "if (tmp < 1)"
    },
    {
        "line": 735,
        "fullcodeline": "if (tmp < sizeof(struct in_addr))"
    },
    {
        "line": 742,
        "fullcodeline": "if (tmp < sizeof(struct in_addr))"
    },
    {
        "line": 749,
        "fullcodeline": "while (tmp>=4) {"
    },
    {
        "line": 759,
        "fullcodeline": "while(tmp>=sizeof(struct isis_tlv_lsp)) {"
    },
    {
        "line": 775,
        "fullcodeline": "if (tmp < ISIS_TLV_CHECKSUM_MINLEN)"
    },
    {
        "line": 789,
        "fullcodeline": "if (tlv_len >= SYSTEM_ID_LEN + 1) {"
    },
    {
        "line": 795,
        "fullcodeline": "if (tlv_len == 2 * SYSTEM_ID_LEN + 1) {"
    },
    {
        "line": 803,
        "fullcodeline": "if (tmp < ISIS_TLV_MT_SUPPORTED_MINLEN)"
    },
    {
        "line": 805,
        "fullcodeline": "while (tmp>1) {"
    },
    {
        "line": 823,
        "fullcodeline": "if (tmp < ISIS_TLV_RESTART_SIGNALING_FLAGLEN)"
    },
    {
        "line": 832,
        "fullcodeline": "if (tmp == 0)"
    },
    {
        "line": 835,
        "fullcodeline": "if (tmp < ISIS_TLV_RESTART_SIGNALING_HOLDTIMELEN)"
    },
    {
        "line": 844,
        "fullcodeline": "if (tmp == SYSTEM_ID_LEN) {"
    },
    {
        "line": 851,
        "fullcodeline": "if (tmp < ISIS_TLV_IDRP_INFO_MINLEN)"
    },
    {
        "line": 873,
        "fullcodeline": "if (tmp < ISIS_TLV_LSP_BUFFERSIZE_MINLEN)"
    },
    {
        "line": 880,
        "fullcodeline": "while (tmp >= SYSTEM_ID_LEN) {"
    },
    {
        "line": 889,
        "fullcodeline": "if (tmp < sizeof(struct isis_metric_block))"
    },
    {
        "line": 897,
        "fullcodeline": "while(tmp>0) {"
    },
    {
        "line": 916,
        "fullcodeline": "if (tmp < ISIS_TLV_IIH_SEQNR_MINLEN)"
    },
    {
        "line": 923,
        "fullcodeline": "if (tmp < ISIS_TLV_VENDOR_PRIVATE_MINLEN)"
    },
    {
        "line": 932,
        "fullcodeline": "if (tmp > 0) /* hexdump the rest */"
    },
    {
        "line": 948,
        "fullcodeline": "if (ndo->ndo_vflag <= 1) {"
    },
    {
        "line": 956,
        "fullcodeline": "if (!print_unknown_data(ndo, pptr, \"\\n\\t      \", tlv_len))"
    },
    {
        "line": 123,
        "fullcodeline": "tok2str(isis_pdu_values,"
    },
    {
        "line": 135,
        "fullcodeline": "if (!print_unknown_data(ndo, optr, \"\\n\\t\", 8)) /* provide the _o_riginal pointer */"
    },
    {
        "line": 275,
        "fullcodeline": "ISIS_MASK_LSP_ISTYPE_BITS(header_lsp->typeblock))));"
    },
    {
        "line": 399,
        "fullcodeline": "alen = *tptr++;"
    },
    {
        "line": 401,
        "fullcodeline": "ND_TCHECK2(*tptr, alen);"
    },
    {
        "line": 402,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Area address (length: %u): %s\","
    },
    {
        "line": 405,
        "fullcodeline": "tptr += alen;"
    },
    {
        "line": 406,
        "fullcodeline": "tmp -= alen + 1;"
    },
    {
        "line": 409,
        "fullcodeline": "ND_TCHECK2(*tptr, 1);"
    },
    {
        "line": 415,
        "fullcodeline": "ND_TCHECK2(*tptr, ETHER_ADDR_LEN);"
    },
    {
        "line": 416,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      SNPA: %s\", isis_print_id(tptr, ETHER_ADDR_LEN)));"
    },
    {
        "line": 417,
        "fullcodeline": "tmp -= ETHER_ADDR_LEN;"
    },
    {
        "line": 418,
        "fullcodeline": "tptr += ETHER_ADDR_LEN;"
    },
    {
        "line": 425,
        "fullcodeline": "lan_alen = *tptr++; /* LAN address length */"
    },
    {
        "line": 427,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      LAN address length 0 bytes (invalid)\"));"
    },
    {
        "line": 433,
        "fullcodeline": "ND_TCHECK2(*tptr, lan_alen);"
    },
    {
        "line": 434,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\tIS Neighbor: %s\", isis_print_id(tptr, lan_alen)));"
    },
    {
        "line": 435,
        "fullcodeline": "tmp -= lan_alen;"
    },
    {
        "line": 436,
        "fullcodeline": "tptr +=lan_alen;"
    },
    {
        "line": 450,
        "fullcodeline": "ext_is_len = isis_print_ext_is_reach(ndo, tptr, \"\\n\\t      \", tlv_type);"
    },
    {
        "line": 454,
        "fullcodeline": "tmp-=ext_is_len;"
    },
    {
        "line": 455,
        "fullcodeline": "tptr+=ext_is_len;"
    },
    {
        "line": 461,
        "fullcodeline": "ext_is_len = isis_print_ext_is_reach(ndo, tptr, \"\\n\\t      \", tlv_type);"
    },
    {
        "line": 464,
        "fullcodeline": "tmp-=ext_is_len;"
    },
    {
        "line": 465,
        "fullcodeline": "tptr+=ext_is_len;"
    },
    {
        "line": 471,
        "fullcodeline": "ext_is_len = isis_print_ext_is_reach(ndo, tptr, \"\\n\\t      \", tlv_type);"
    },
    {
        "line": 474,
        "fullcodeline": "tmp-=ext_is_len;"
    },
    {
        "line": 475,
        "fullcodeline": "tptr+=ext_is_len;"
    },
    {
        "line": 487,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      IS Neighbor: %s\","
    },
    {
        "line": 489,
        "fullcodeline": "isis_print_metric_block(ndo, &tlv_is_reach->isis_metric_block);"
    },
    {
        "line": 490,
        "fullcodeline": "tmp -= sizeof(struct isis_tlv_is_reach);"
    },
    {
        "line": 491,
        "fullcodeline": "tlv_is_reach++;"
    },
    {
        "line": 499,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      ES Neighbor: %s\","
    },
    {
        "line": 501,
        "fullcodeline": "isis_print_metric_block(ndo, &tlv_es_reach->isis_metric_block);"
    },
    {
        "line": 502,
        "fullcodeline": "tmp -= sizeof(struct isis_tlv_es_reach);"
    },
    {
        "line": 503,
        "fullcodeline": "tlv_es_reach++;"
    },
    {
        "line": 516,
        "fullcodeline": "ext_ip_len = isis_print_extd_ip_reach(ndo, tptr, \"\\n\\t      \", AF_INET);"
    },
    {
        "line": 519,
        "fullcodeline": "tptr+=ext_ip_len;"
    },
    {
        "line": 520,
        "fullcodeline": "tmp-=ext_ip_len;"
    },
    {
        "line": 533,
        "fullcodeline": "ext_ip_len = isis_print_extd_ip_reach(ndo, tptr, \"\\n\\t      \", AF_INET);"
    },
    {
        "line": 536,
        "fullcodeline": "tptr+=ext_ip_len;"
    },
    {
        "line": 537,
        "fullcodeline": "tmp-=ext_ip_len;"
    },
    {
        "line": 543,
        "fullcodeline": "ext_ip_len = isis_print_extd_ip_reach(ndo, tptr, \"\\n\\t      \", AF_INET6);"
    },
    {
        "line": 546,
        "fullcodeline": "tptr+=ext_ip_len;"
    },
    {
        "line": 547,
        "fullcodeline": "tmp-=ext_ip_len;"
    },
    {
        "line": 560,
        "fullcodeline": "ext_ip_len = isis_print_extd_ip_reach(ndo, tptr, \"\\n\\t      \", AF_INET6);"
    },
    {
        "line": 563,
        "fullcodeline": "tptr+=ext_ip_len;"
    },
    {
        "line": 564,
        "fullcodeline": "tmp-=ext_ip_len;"
    },
    {
        "line": 570,
        "fullcodeline": "ND_TCHECK2(*tptr, sizeof(struct in6_addr));"
    },
    {
        "line": 572,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      IPv6 interface address: %s\","
    },
    {
        "line": 575,
        "fullcodeline": "tptr += sizeof(struct in6_addr);"
    },
    {
        "line": 576,
        "fullcodeline": "tmp -= sizeof(struct in6_addr);"
    },
    {
        "line": 600,
        "fullcodeline": "sigcheck = signature_verify(ndo, optr, length, tptr + 1,"
    },
    {
        "line": 603,
        "fullcodeline": "ND_PRINT((ndo, \" (%s)\", tok2str(signature_check_values, \"Unknown\", sigcheck)));"
    },
    {
        "line": 607,
        "fullcodeline": "ND_TCHECK2(*(tptr + 1), 2);"
    },
    {
        "line": 608,
        "fullcodeline": "key_id = EXTRACT_16BITS((tptr+1));"
    },
    {
        "line": 609,
        "fullcodeline": "ND_PRINT((ndo, \"%u, password: \", key_id));"
    },
    {
        "line": 626,
        "fullcodeline": "ND_TCHECK2(*tptr, 1);"
    },
    {
        "line": 627,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Adjacency State: %s (%u)\","
    },
    {
        "line": 630,
        "fullcodeline": "tmp--;"
    },
    {
        "line": 633,
        "fullcodeline": "ND_TCHECK(tlv_ptp_adj->extd_local_circuit_id);"
    },
    {
        "line": 634,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Extended Local circuit-ID: 0x%08x\","
    },
    {
        "line": 636,
        "fullcodeline": "tmp-=sizeof(tlv_ptp_adj->extd_local_circuit_id);"
    },
    {
        "line": 639,
        "fullcodeline": "ND_TCHECK2(tlv_ptp_adj->neighbor_sysid, SYSTEM_ID_LEN);"
    },
    {
        "line": 640,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Neighbor System-ID: %s\","
    },
    {
        "line": 642,
        "fullcodeline": "tmp-=SYSTEM_ID_LEN;"
    },
    {
        "line": 645,
        "fullcodeline": "ND_TCHECK(tlv_ptp_adj->neighbor_extd_local_circuit_id);"
    },
    {
        "line": 646,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Neighbor Extended Local circuit-ID: 0x%08x\","
    },
    {
        "line": 654,
        "fullcodeline": "ND_TCHECK2(*(tptr), 1);"
    },
    {
        "line": 655,
        "fullcodeline": "ND_PRINT((ndo, \"%s (0x%02x)\","
    },
    {
        "line": 662,
        "fullcodeline": "tptr++;"
    },
    {
        "line": 663,
        "fullcodeline": "tmp--;"
    },
    {
        "line": 697,
        "fullcodeline": "isis_print_mt_capability_subtlv(ndo, tptr, tmp);"
    },
    {
        "line": 708,
        "fullcodeline": "ND_TCHECK2(*tptr, sizeof(struct in_addr));"
    },
    {
        "line": 709,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      IPv4 interface address: %s\", ipaddr_string(ndo, tptr)));"
    },
    {
        "line": 710,
        "fullcodeline": "tptr += sizeof(struct in_addr);"
    },
    {
        "line": 711,
        "fullcodeline": "tmp -= sizeof(struct in_addr);"
    },
    {
        "line": 750,
        "fullcodeline": "ND_TCHECK2(*tptr, 4);"
    },
    {
        "line": 751,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Link-ID: 0x%08x\", EXTRACT_32BITS(tptr)));"
    },
    {
        "line": 752,
        "fullcodeline": "tptr+=4;"
    },
    {
        "line": 753,
        "fullcodeline": "tmp-=4;"
    },
    {
        "line": 761,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      lsp-id: %s\","
    },
    {
        "line": 763,
        "fullcodeline": "ND_TCHECK2(tlv_lsp->sequence_number, 4);"
    },
    {
        "line": 764,
        "fullcodeline": "ND_PRINT((ndo, \", seq: 0x%08x\", EXTRACT_32BITS(tlv_lsp->sequence_number)));"
    },
    {
        "line": 765,
        "fullcodeline": "ND_TCHECK2(tlv_lsp->remaining_lifetime, 2);"
    },
    {
        "line": 766,
        "fullcodeline": "ND_PRINT((ndo, \", lifetime: %5ds\", EXTRACT_16BITS(tlv_lsp->remaining_lifetime)));"
    },
    {
        "line": 767,
        "fullcodeline": "ND_TCHECK2(tlv_lsp->checksum, 2);"
    },
    {
        "line": 768,
        "fullcodeline": "ND_PRINT((ndo, \", chksum: 0x%04x\", EXTRACT_16BITS(tlv_lsp->checksum)));"
    },
    {
        "line": 769,
        "fullcodeline": "tmp-=sizeof(struct isis_tlv_lsp);"
    },
    {
        "line": 770,
        "fullcodeline": "tlv_lsp++;"
    },
    {
        "line": 790,
        "fullcodeline": "ND_TCHECK2(*tptr, SYSTEM_ID_LEN + 1);"
    },
    {
        "line": 791,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Purge Originator System-ID: %s\","
    },
    {
        "line": 796,
        "fullcodeline": "ND_TCHECK2(*tptr, 2 * SYSTEM_ID_LEN + 1);"
    },
    {
        "line": 797,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      Received from System-ID: %s\","
    },
    {
        "line": 845,
        "fullcodeline": "ND_TCHECK2(*tptr, SYSTEM_ID_LEN);"
    },
    {
        "line": 846,
        "fullcodeline": "ND_PRINT((ndo, \", for %s\", isis_print_id(tptr,SYSTEM_ID_LEN)));"
    },
    {
        "line": 858,
        "fullcodeline": "switch (*tptr++) {"
    },
    {
        "line": 860,
        "fullcodeline": "ND_TCHECK2(*tptr, 2); /* fetch AS number */"
    },
    {
        "line": 861,
        "fullcodeline": "ND_PRINT((ndo, \"AS Number: %u\", EXTRACT_16BITS(tptr)));"
    },
    {
        "line": 881,
        "fullcodeline": "ND_TCHECK2(*tptr, SYSTEM_ID_LEN);"
    },
    {
        "line": 882,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      %s\", isis_print_id(tptr, SYSTEM_ID_LEN)));"
    },
    {
        "line": 883,
        "fullcodeline": "tptr+=SYSTEM_ID_LEN;"
    },
    {
        "line": 884,
        "fullcodeline": "tmp-=SYSTEM_ID_LEN;"
    },
    {
        "line": 898,
        "fullcodeline": "ND_TCHECK2(*tptr, 1);"
    },
    {
        "line": 904,
        "fullcodeline": "tmp--;"
    },
    {
        "line": 907,
        "fullcodeline": "ND_TCHECK2(*tptr, prefix_len / 2);"
    },
    {
        "line": 908,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\tAddress: %s/%u\","
    },
    {
        "line": 910,
        "fullcodeline": "tptr+=prefix_len/2;"
    },
    {
        "line": 911,
        "fullcodeline": "tmp-=prefix_len/2;"
    },
    {
        "line": 146,
        "fullcodeline": "isis_header->fixed_len, (unsigned long)(ISIS_COMMON_HEADER_SIZE+ISIS_IIH_LAN_HEADER_SIZE)));"
    },
    {
        "line": 154,
        "fullcodeline": "isis_print_id(header_iih_lan->source_id, SYSTEM_ID_LEN)));"
    },
    {
        "line": 156,
        "fullcodeline": "isis_print_id(header_iih_lan->lan_id,NODE_ID_LEN),"
    },
    {
        "line": 191,
        "fullcodeline": "isis_header->fixed_len, (unsigned long)(ISIS_COMMON_HEADER_SIZE+ISIS_IIH_PTP_HEADER_SIZE)));"
    },
    {
        "line": 232,
        "fullcodeline": "isis_header->fixed_len, (unsigned long)ISIS_LSP_HEADER_SIZE));"
    },
    {
        "line": 240,
        "fullcodeline": "isis_print_id(header_lsp->lsp_id, LSP_ID_LEN),"
    },
    {
        "line": 241,
        "fullcodeline": "EXTRACT_32BITS(header_lsp->sequence_number),"
    },
    {
        "line": 242,
        "fullcodeline": "EXTRACT_16BITS(header_lsp->remaining_lifetime)));"
    },
    {
        "line": 290,
        "fullcodeline": "isis_header->fixed_len, (unsigned long)(ISIS_COMMON_HEADER_SIZE+ISIS_CSNP_HEADER_SIZE)));"
    },
    {
        "line": 328,
        "fullcodeline": "isis_header->fixed_len, (unsigned long)(ISIS_COMMON_HEADER_SIZE+ISIS_PSNP_HEADER_SIZE)));"
    },
    {
        "line": 407,
        "fullcodeline": "if (tmp==0) /* if this is the last area address do not attemt a boundary check */"
    },
    {
        "line": 451,
        "fullcodeline": "if (ext_is_len == 0) /* did something go wrong ? */"
    },
    {
        "line": 462,
        "fullcodeline": "if (ext_is_len == 0) /* did something go wrong ? */"
    },
    {
        "line": 472,
        "fullcodeline": "if (ext_is_len == 0) /* did something go wrong ? */"
    },
    {
        "line": 481,
        "fullcodeline": "tok2str(isis_is_reach_virtual_values,"
    },
    {
        "line": 517,
        "fullcodeline": "if (ext_ip_len == 0) /* did something go wrong ? */"
    },
    {
        "line": 534,
        "fullcodeline": "if (ext_ip_len == 0) /* did something go wrong ? */"
    },
    {
        "line": 544,
        "fullcodeline": "if (ext_ip_len == 0) /* did something go wrong ? */"
    },
    {
        "line": 561,
        "fullcodeline": "if (ext_ip_len == 0) /* did something go wrong ? */"
    },
    {
        "line": 583,
        "fullcodeline": "tok2str(isis_subtlv_auth_values,"
    },
    {
        "line": 589,
        "fullcodeline": "if (fn_printzp(ndo, tptr + 1, tlv_len - 1, ndo->ndo_snapend))"
    },
    {
        "line": 593,
        "fullcodeline": "for(i=1;i<tlv_len;i++) {"
    },
    {
        "line": 597,
        "fullcodeline": "if (tlv_len != ISIS_SUBTLV_AUTH_MD5_LEN+1)"
    },
    {
        "line": 610,
        "fullcodeline": "for(i=1 + sizeof(uint16_t);i<tlv_len;i++) {"
    },
    {
        "line": 617,
        "fullcodeline": "if (!print_unknown_data(ndo, tptr + 1, \"\\n\\t\\t  \", tlv_len - 1))"
    },
    {
        "line": 660,
        "fullcodeline": "if (tmp>1) /* further NPLIDs ? - put comma */"
    },
    {
        "line": 679,
        "fullcodeline": "isis_print_mt_port_cap_subtlv(ndo, tptr, tmp);"
    },
    {
        "line": 689,
        "fullcodeline": "(EXTRACT_16BITS(tptr) >> 15) & 0x01,"
    },
    {
        "line": 690,
        "fullcodeline": "(EXTRACT_16BITS(tptr) >> 12) & 0x07,"
    },
    {
        "line": 691,
        "fullcodeline": "EXTRACT_16BITS(tptr) & 0x0fff));"
    },
    {
        "line": 808,
        "fullcodeline": "if (tmp!=1) {"
    },
    {
        "line": 827,
        "fullcodeline": "bittok2str(isis_restart_flag_values, \"none\", *tptr)));"
    },
    {
        "line": 855,
        "fullcodeline": "tok2str(isis_subtlv_idrp_values,"
    },
    {
        "line": 866,
        "fullcodeline": "if (!print_unknown_data(ndo, tptr, \"\\n\\t      \", tlv_len - 1))"
    },
    {
        "line": 900,
        "fullcodeline": "if (prefix_len < 2) {"
    },
    {
        "line": 905,
        "fullcodeline": "if (tmp < prefix_len/2)"
    },
    {
        "line": 928,
        "fullcodeline": "tok2str(oui_values, \"Unknown\", vendor_id),"
    },
    {
        "line": 933,
        "fullcodeline": "if (!print_unknown_data(ndo, tptr, \"\\n\\t\\t\", tmp))"
    },
    {
        "line": 949,
        "fullcodeline": "if (!print_unknown_data(ndo, pptr, \"\\n\\t\\t\", tlv_len))"
    },
    {
        "line": 410,
        "fullcodeline": "alen = *tptr++;"
    },
    {
        "line": 594,
        "fullcodeline": "ND_TCHECK2(*(tptr + i), 1);"
    },
    {
        "line": 595,
        "fullcodeline": "ND_PRINT((ndo, \"%02x\", *(tptr + i)));"
    },
    {
        "line": 598,
        "fullcodeline": "ND_PRINT((ndo, \", (invalid subTLV) \"));"
    },
    {
        "line": 611,
        "fullcodeline": "ND_TCHECK2(*(tptr + i), 1);"
    },
    {
        "line": 612,
        "fullcodeline": "ND_PRINT((ndo, \"%02x\", *(tptr + i)));"
    },
    {
        "line": 661,
        "fullcodeline": "ND_PRINT((ndo, \", \"));"
    },
    {
        "line": 672,
        "fullcodeline": "(EXTRACT_16BITS (tptr) >> 12),"
    },
    {
        "line": 673,
        "fullcodeline": "(EXTRACT_16BITS (tptr) & 0x0fff)));"
    },
    {
        "line": 760,
        "fullcodeline": "ND_TCHECK((tlv_lsp->lsp_id)[LSP_ID_LEN-1]);"
    },
    {
        "line": 809,
        "fullcodeline": "mt_len = isis_print_mtid(ndo, tptr, \"\\n\\t      \");"
    },
    {
        "line": 812,
        "fullcodeline": "tptr+=mt_len;"
    },
    {
        "line": 813,
        "fullcodeline": "tmp-=mt_len;"
    },
    {
        "line": 899,
        "fullcodeline": "prefix_len=*tptr++; /* read out prefix length in semioctets*/"
    },
    {
        "line": 901,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\tAddress: prefix length %u < 2\", prefix_len));"
    },
    {
        "line": 404,
        "fullcodeline": "isonsap_string(ndo, tptr, alen)));"
    },
    {
        "line": 483,
        "fullcodeline": "*tptr++)));"
    },
    {
        "line": 488,
        "fullcodeline": "isis_print_id(tlv_is_reach->neighbor_nodeid, NODE_ID_LEN)));"
    },
    {
        "line": 500,
        "fullcodeline": "isis_print_id(tlv_es_reach->neighbor_sysid, SYSTEM_ID_LEN)));"
    },
    {
        "line": 573,
        "fullcodeline": "ip6addr_string(ndo, tptr)));"
    },
    {
        "line": 628,
        "fullcodeline": "tok2str(isis_ptp_adjancey_values, \"unknown\", *tptr),"
    },
    {
        "line": 635,
        "fullcodeline": "EXTRACT_32BITS(tlv_ptp_adj->extd_local_circuit_id)));"
    },
    {
        "line": 641,
        "fullcodeline": "isis_print_id(tlv_ptp_adj->neighbor_sysid, SYSTEM_ID_LEN)));"
    },
    {
        "line": 647,
        "fullcodeline": "EXTRACT_32BITS(tlv_ptp_adj->neighbor_extd_local_circuit_id)));"
    },
    {
        "line": 656,
        "fullcodeline": "tok2str(nlpid_values,"
    },
    {
        "line": 762,
        "fullcodeline": "isis_print_id(tlv_lsp->lsp_id, LSP_ID_LEN)));"
    },
    {
        "line": 792,
        "fullcodeline": "isis_print_id(tptr + 1, SYSTEM_ID_LEN)));"
    },
    {
        "line": 798,
        "fullcodeline": "isis_print_id(tptr + SYSTEM_ID_LEN + 1, SYSTEM_ID_LEN)));"
    },
    {
        "line": 810,
        "fullcodeline": "if (mt_len == 0) /* did something go wrong ? */"
    },
    {
        "line": 815,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      invalid MT-ID\"));"
    },
    {
        "line": 909,
        "fullcodeline": "isonsap_string(ndo, tptr, prefix_len / 2), prefix_len * 4));"
    }
]