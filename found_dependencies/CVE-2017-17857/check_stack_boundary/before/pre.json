[
    {
        "line": 5,
        "fullcodeline": "struct bpf_verifier_state *state = env->cur_state;"
    },
    {
        "line": 6,
        "fullcodeline": "struct bpf_reg_state *regs = state->regs;"
    },
    {
        "line": 29,
        "fullcodeline": "off = regs[regno].off + regs[regno].var_off.value;"
    },
    {
        "line": 9,
        "fullcodeline": "if (regs[regno].type != PTR_TO_STACK) {"
    },
    {
        "line": 46,
        "fullcodeline": "for (i = 0; i < access_size; i++) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (!tnum_is_const(regs[regno].var_off)) {"
    },
    {
        "line": 25,
        "fullcodeline": "tnum_strn(tn_buf, sizeof(tn_buf), regs[regno].var_off);"
    },
    {
        "line": 26,
        "fullcodeline": "verbose(env, \"invalid variable stack read R%d var_off=%s\\n\","
    },
    {
        "line": 30,
        "fullcodeline": "if (off >= 0 || off < -MAX_BPF_STACK || off + access_size > 0 ||"
    },
    {
        "line": 31,
        "fullcodeline": "access_size < 0 || (access_size == 0 && !zero_size_allowed)) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (env->prog->aux->stack_depth < -off)"
    },
    {
        "line": 47,
        "fullcodeline": "slot = -(off + i) - 1;"
    },
    {
        "line": 11,
        "fullcodeline": "if (zero_size_allowed && access_size == 0 &&"
    },
    {
        "line": 18,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 23,
        "fullcodeline": "char tn_buf[48];"
    },
    {
        "line": 34,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 38,
        "fullcodeline": "env->prog->aux->stack_depth = -off;"
    },
    {
        "line": 48,
        "fullcodeline": "spi = slot / BPF_REG_SIZE;"
    },
    {
        "line": 12,
        "fullcodeline": "register_is_null(regs[regno]))"
    },
    {
        "line": 49,
        "fullcodeline": "if (state->allocated_stack <= slot ||"
    },
    {
        "line": 50,
        "fullcodeline": "state->stack[spi].slot_type[slot % BPF_REG_SIZE] !="
    },
    {
        "line": 54,
        "fullcodeline": "return -EACCES;"
    }
]