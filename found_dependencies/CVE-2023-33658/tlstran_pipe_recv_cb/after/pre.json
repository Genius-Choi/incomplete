[
    {
        "line": 4,
        "fullcodeline": "nni_iov       iov[2];"
    },
    {
        "line": 7,
        "fullcodeline": "uint32_t      pos = 1;"
    },
    {
        "line": 8,
        "fullcodeline": "uint64_t      len = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "tlstran_pipe *p     = arg;"
    },
    {
        "line": 12,
        "fullcodeline": "nni_aio *     rxaio = p->rxaio;"
    },
    {
        "line": 14,
        "fullcodeline": "bool          ack   = false;"
    },
    {
        "line": 16,
        "fullcodeline": "log_trace(\"tlstran_pipe_recv_cb %p\\n\", p);"
    },
    {
        "line": 17,
        "fullcodeline": "nni_mtx_lock(&p->mtx);"
    },
    {
        "line": 19,
        "fullcodeline": "aio = nni_list_first(&p->recvq);"
    },
    {
        "line": 27,
        "fullcodeline": "n = nni_aio_count(rxaio);"
    },
    {
        "line": 28,
        "fullcodeline": "p->gotrxhead += n;"
    },
    {
        "line": 30,
        "fullcodeline": "nni_aio_iov_advance(rxaio, n);"
    },
    {
        "line": 32,
        "fullcodeline": "len = get_var_integer(p->rxlen, &pos);"
    },
    {
        "line": 33,
        "fullcodeline": "log_trace(\"new %ld recevied %ld header %x %d pos: %d len : %d\", n,"
    },
    {
        "line": 35,
        "fullcodeline": "log_trace(\"still need byte count:%ld > 0\\n\", nni_aio_iov_count(rxaio));"
    },
    {
        "line": 72,
        "fullcodeline": "p->wantrxhead = len + p->gotrxhead;"
    },
    {
        "line": 73,
        "fullcodeline": "cparam        = p->tcp_cparam;"
    },
    {
        "line": 112,
        "fullcodeline": "nni_aio_list_remove(aio);"
    },
    {
        "line": 113,
        "fullcodeline": "msg      = p->rxmsg;"
    },
    {
        "line": 114,
        "fullcodeline": "p->rxmsg = NULL;"
    },
    {
        "line": 115,
        "fullcodeline": "n        = nni_msg_len(msg);"
    },
    {
        "line": 116,
        "fullcodeline": "type     = p->rxlen[0] & 0xf0;"
    },
    {
        "line": 118,
        "fullcodeline": "fixed_header_adaptor(p->rxlen, msg);"
    },
    {
        "line": 119,
        "fullcodeline": "nni_msg_set_conn_param(msg, cparam);"
    },
    {
        "line": 121,
        "fullcodeline": "nni_msg_set_remaining_len(msg, len);"
    },
    {
        "line": 122,
        "fullcodeline": "nni_msg_set_cmd_type(msg, type);"
    },
    {
        "line": 123,
        "fullcodeline": "log_trace(\"remain_len %d cparam %p clientid %s username %s proto %d\\n\","
    },
    {
        "line": 128,
        "fullcodeline": "log_trace(\"The type of msg is %x\", type);"
    },
    {
        "line": 129,
        "fullcodeline": "uint16_t  packet_id   = 0;"
    },
    {
        "line": 130,
        "fullcodeline": "uint8_t   reason_code = 0;"
    },
    {
        "line": 131,
        "fullcodeline": "property *prop        = NULL;"
    },
    {
        "line": 132,
        "fullcodeline": "uint8_t   ack_cmd     = 0;"
    },
    {
        "line": 254,
        "fullcodeline": "nni_pipe_bump_rx(p->npipe, n);"
    },
    {
        "line": 257,
        "fullcodeline": "nni_aio_set_msg(aio, msg);"
    },
    {
        "line": 263,
        "fullcodeline": "nni_aio_list_remove(aio);"
    },
    {
        "line": 264,
        "fullcodeline": "msg      = p->rxmsg;"
    },
    {
        "line": 266,
        "fullcodeline": "nni_pipe_bump_error(p->npipe, rv);"
    },
    {
        "line": 270,
        "fullcodeline": "nni_aio_finish_error(aio, rv);"
    },
    {
        "line": 275,
        "fullcodeline": "nni_aio_list_remove(aio);"
    },
    {
        "line": 278,
        "fullcodeline": "nni_aio_set_msg(aio, NULL);"
    },
    {
        "line": 21,
        "fullcodeline": "if ((rv = nni_aio_result(rxaio)) != 0) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (nni_aio_iov_count(rxaio) > 0) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (p->rxmsg == NULL) {"
    },
    {
        "line": 133,
        "fullcodeline": "if (type == CMD_PUBLISH) {"
    },
    {
        "line": 188,
        "fullcodeline": "if (ack == true) {"
    },
    {
        "line": 23,
        "fullcodeline": "rv = NMQ_SERVER_BUSY;"
    },
    {
        "line": 38,
        "fullcodeline": "log_trace(\"got: %x %x, %ld!!\\n\", p->rxlen[0], p->rxlen[1],"
    },
    {
        "line": 40,
        "fullcodeline": "nng_stream_recv(p->conn, rxaio);"
    },
    {
        "line": 41,
        "fullcodeline": "nni_mtx_unlock(&p->mtx);"
    },
    {
        "line": 78,
        "fullcodeline": "log_trace(\"pipe %p header got: %x %x %x %x %x, %ld!!\\n\", p,"
    },
    {
        "line": 134,
        "fullcodeline": "nni_msg_set_timestamp(msg, nng_clock());"
    },
    {
        "line": 135,
        "fullcodeline": "uint8_t qos_pac = nni_msg_get_pub_qos(msg);"
    },
    {
        "line": 198,
        "fullcodeline": "nni_msg_set_cmd_type(qmsg, ack_cmd);"
    },
    {
        "line": 199,
        "fullcodeline": "nni_mqtt_msgack_encode("
    },
    {
        "line": 201,
        "fullcodeline": "nni_mqtt_pubres_header_encode(qmsg, ack_cmd);"
    },
    {
        "line": 251,
        "fullcodeline": "if (!nni_list_empty(&p->recvq)) {"
    },
    {
        "line": 252,
        "fullcodeline": "tlstran_pipe_recv_start(p);"
    },
    {
        "line": 22,
        "fullcodeline": "log_warn(\" recv aio error %s\", nng_strerror(rv));"
    },
    {
        "line": 39,
        "fullcodeline": "strlen((char *) p->rxlen));"
    },
    {
        "line": 83,
        "fullcodeline": "if (len > p->conf->max_packet_size) {"
    },
    {
        "line": 98,
        "fullcodeline": "if (len != 0) {"
    },
    {
        "line": 136,
        "fullcodeline": "if (qos_pac > 0) {"
    },
    {
        "line": 206,
        "fullcodeline": "if (p->busy == false) {"
    },
    {
        "line": 85,
        "fullcodeline": "rv = NMQ_PACKET_TOO_LARGE;"
    },
    {
        "line": 89,
        "fullcodeline": "if ((rv = nni_msg_alloc(&p->rxmsg, (size_t) len)) != 0) {"
    },
    {
        "line": 91,
        "fullcodeline": "rv = NMQ_SERVER_UNAVAILABLE;"
    },
    {
        "line": 102,
        "fullcodeline": "nni_aio_set_iov(rxaio, 1, iov);"
    },
    {
        "line": 160,
        "fullcodeline": "ack       = true;"
    },
    {
        "line": 162,
        "fullcodeline": "} else if (type == CMD_PUBREC) {"
    },
    {
        "line": 191,
        "fullcodeline": "if ((rv = nni_msg_alloc(&qmsg, 0)) != 0) {"
    },
    {
        "line": 193,
        "fullcodeline": "rv  = NMQ_SERVER_BUSY;"
    },
    {
        "line": 212,
        "fullcodeline": "nni_msg_insert(qmsg, nni_msg_header(qmsg),"
    },
    {
        "line": 216,
        "fullcodeline": "p->busy        = true;"
    },
    {
        "line": 217,
        "fullcodeline": "nni_aio_set_msg(p->qsaio, qmsg);"
    },
    {
        "line": 219,
        "fullcodeline": "nni_aio_set_iov(p->qsaio, 1, iov);"
    },
    {
        "line": 220,
        "fullcodeline": "nng_stream_send(p->conn, p->qsaio);"
    },
    {
        "line": 43,
        "fullcodeline": "} else if (p->gotrxhead <= NNI_NANO_MAX_HEADER_SIZE &&"
    },
    {
        "line": 44,
        "fullcodeline": "p->rxlen[p->gotrxhead - 1] > 0x7f) {"
    },
    {
        "line": 53,
        "fullcodeline": "nni_aio_set_iov(rxaio, 1, iov);"
    },
    {
        "line": 99,
        "fullcodeline": "iov[0].iov_buf = nni_msg_body(p->rxmsg);"
    },
    {
        "line": 147,
        "fullcodeline": "if (qos_pac == 1) {"
    },
    {
        "line": 167,
        "fullcodeline": "ack_cmd = CMD_PUBREL;"
    },
    {
        "line": 168,
        "fullcodeline": "ack     = true;"
    },
    {
        "line": 213,
        "fullcodeline": "nni_msg_header_len(qmsg));"
    },
    {
        "line": 214,
        "fullcodeline": "iov[0].iov_len = nni_msg_len(qmsg);"
    },
    {
        "line": 215,
        "fullcodeline": "iov[0].iov_buf = nni_msg_body(qmsg);"
    },
    {
        "line": 148,
        "fullcodeline": "ack_cmd = CMD_PUBACK;"
    },
    {
        "line": 156,
        "fullcodeline": "if ((packet_id = nni_msg_get_pub_pid(msg)) == 0) {"
    },
    {
        "line": 157,
        "fullcodeline": "rv = PROTOCOL_ERROR;"
    },
    {
        "line": 209,
        "fullcodeline": "if (nni_aio_begin(aio) != 0) {"
    },
    {
        "line": 223,
        "fullcodeline": "if (nni_lmq_full(&p->rslmq)) {"
    },
    {
        "line": 47,
        "fullcodeline": "rv = NNG_EMSGSIZE;"
    },
    {
        "line": 140,
        "fullcodeline": "if (p->qrecv_quota > 0) {"
    },
    {
        "line": 163,
        "fullcodeline": "if (nni_mqtt_pubres_decode(msg, &packet_id, &reason_code, &prop,"
    },
    {
        "line": 169,
        "fullcodeline": "} else if (type == CMD_PUBREL) {"
    },
    {
        "line": 57,
        "fullcodeline": "} else if (len == 0 && n == 2) {"
    },
    {
        "line": 141,
        "fullcodeline": "p->qrecv_quota--;"
    },
    {
        "line": 174,
        "fullcodeline": "ack_cmd = CMD_PUBCOMP;"
    },
    {
        "line": 175,
        "fullcodeline": "ack     = true;"
    },
    {
        "line": 226,
        "fullcodeline": "if (nni_lmq_cap(&p->rslmq) <="
    },
    {
        "line": 58,
        "fullcodeline": "if ((p->rxlen[0] & 0XFF) == CMD_PINGREQ) {"
    },
    {
        "line": 143,
        "fullcodeline": "rv = NMQ_RECEIVE_MAXIMUM_EXCEEDED;"
    },
    {
        "line": 150,
        "fullcodeline": "ack_cmd = CMD_PUBREC;"
    },
    {
        "line": 59,
        "fullcodeline": "nng_aio_wait(p->rpaio);"
    },
    {
        "line": 60,
        "fullcodeline": "p->txlen[0] = CMD_PINGRESP;"
    },
    {
        "line": 61,
        "fullcodeline": "p->txlen[1] = 0x00;"
    },
    {
        "line": 65,
        "fullcodeline": "nni_aio_set_iov(p->rpaio, 1, iov);"
    },
    {
        "line": 153,
        "fullcodeline": "rv = PROTOCOL_ERROR;"
    },
    {
        "line": 170,
        "fullcodeline": "if (nni_mqtt_pubres_decode(msg, &packet_id, &reason_code, &prop,"
    },
    {
        "line": 176,
        "fullcodeline": "} else if (type == CMD_PUBACK || type == CMD_PUBCOMP) {"
    },
    {
        "line": 228,
        "fullcodeline": "if ((rv = nni_lmq_resize(&p->rslmq,"
    },
    {
        "line": 238,
        "fullcodeline": "(void) nni_lmq_get(&p->rslmq, &old);"
    },
    {
        "line": 177,
        "fullcodeline": "if (nni_mqtt_pubres_decode(msg, &packet_id, &reason_code, &prop,"
    },
    {
        "line": 184,
        "fullcodeline": "property_free(prop);"
    },
    {
        "line": 185,
        "fullcodeline": "p->qsend_quota++;"
    },
    {
        "line": 229,
        "fullcodeline": "nni_lmq_cap(&p->rslmq) *"
    }
]