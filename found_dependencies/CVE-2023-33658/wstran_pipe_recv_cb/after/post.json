[
    {
        "line": 3,
        "fullcodeline": "ws_pipe *p = arg;"
    },
    {
        "line": 4,
        "fullcodeline": "nni_iov  iov[2];"
    },
    {
        "line": 6,
        "fullcodeline": "uint32_t pos = 1;"
    },
    {
        "line": 7,
        "fullcodeline": "uint64_t len = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "nni_msg *smsg = NULL, *msg = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "nni_aio *raio = p->rxaio;"
    },
    {
        "line": 11,
        "fullcodeline": "nni_aio *uaio = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "bool     ack  = false;"
    },
    {
        "line": 14,
        "fullcodeline": "nni_mtx_lock(&p->mtx);"
    },
    {
        "line": 24,
        "fullcodeline": "msg = nni_aio_get_msg(raio);"
    },
    {
        "line": 29,
        "fullcodeline": "ptr = nni_msg_body(msg);"
    },
    {
        "line": 30,
        "fullcodeline": "p->gotrxhead += nni_msg_len(msg);"
    },
    {
        "line": 31,
        "fullcodeline": "log_trace(\"#### wstran_pipe_recv_cb got %ld msg: %p %x %ld\","
    },
    {
        "line": 41,
        "fullcodeline": "nni_msg_append(p->tmp_msg, ptr, nni_msg_len(msg));"
    },
    {
        "line": 42,
        "fullcodeline": "ptr = nni_msg_body(p->tmp_msg); // packet might be sticky?"
    },
    {
        "line": 67,
        "fullcodeline": "nni_msg_free(msg);"
    },
    {
        "line": 68,
        "fullcodeline": "nng_stream_recv(p->ws, raio);"
    },
    {
        "line": 69,
        "fullcodeline": "nni_mtx_unlock(&p->mtx);"
    },
    {
        "line": 234,
        "fullcodeline": "nni_mtx_unlock(&p->mtx);"
    },
    {
        "line": 235,
        "fullcodeline": "nni_aio_finish(uaio, 0, nni_msg_len(smsg));"
    },
    {
        "line": 238,
        "fullcodeline": "p->gotrxhead  = 0;"
    },
    {
        "line": 239,
        "fullcodeline": "p->wantrxhead = 0;"
    },
    {
        "line": 240,
        "fullcodeline": "nng_stream_close(p->ws);"
    },
    {
        "line": 251,
        "fullcodeline": "nni_mtx_unlock(&p->mtx);"
    },
    {
        "line": 259,
        "fullcodeline": "nni_pipe_bump_error(p->npipe, rv);"
    },
    {
        "line": 260,
        "fullcodeline": "nni_mtx_unlock(&p->mtx);"
    },
    {
        "line": 261,
        "fullcodeline": "nni_msg_free(msg);"
    },
    {
        "line": 263,
        "fullcodeline": "log_error(\"tcptran_pipe_recv_cb: recv error rv: %d\\n\", rv);"
    },
    {
        "line": 16,
        "fullcodeline": "if (p->user_rxaio != NULL) {"
    },
    {
        "line": 20,
        "fullcodeline": "if ((rv = nni_aio_result(raio)) != 0) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (nni_msg_header_len(msg) == 0 && nni_msg_len(msg) == 0) {"
    },
    {
        "line": 32,
        "fullcodeline": "p->gotrxhead, ptr, *ptr, nni_msg_len(msg));"
    },
    {
        "line": 34,
        "fullcodeline": "if (p->tmp_msg == NULL && p->gotrxhead > 0) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (p->wantrxhead == 0) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (p->gotrxhead >= p->wantrxhead) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (uaio == NULL) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (uaio != NULL) {"
    },
    {
        "line": 241,
        "fullcodeline": "if (uaio != NULL) {"
    },
    {
        "line": 246,
        "fullcodeline": "if (p->tmp_msg != NULL) {"
    },
    {
        "line": 17,
        "fullcodeline": "uaio = p->user_rxaio;"
    },
    {
        "line": 21,
        "fullcodeline": "log_warn(\" recv aio error %s\", nng_strerror(rv));"
    },
    {
        "line": 26,
        "fullcodeline": "log_trace(\"empty msg received! continue next receive\");"
    },
    {
        "line": 48,
        "fullcodeline": "len = get_var_integer(ptr, &pos);"
    },
    {
        "line": 73,
        "fullcodeline": "uaio = p->ep_aio;"
    },
    {
        "line": 81,
        "fullcodeline": "p->gotrxhead  = 0;"
    },
    {
        "line": 82,
        "fullcodeline": "p->wantrxhead = 0;"
    },
    {
        "line": 83,
        "fullcodeline": "nni_msg_free(msg);"
    },
    {
        "line": 123,
        "fullcodeline": "property *prop        = NULL;"
    },
    {
        "line": 124,
        "fullcodeline": "uint8_t   reason_code = 0;"
    },
    {
        "line": 125,
        "fullcodeline": "uint8_t   ack_cmd     = 0;"
    },
    {
        "line": 127,
        "fullcodeline": "uint16_t packet_id = 0;"
    },
    {
        "line": 129,
        "fullcodeline": "uint8_t  cmd = nni_msg_cmd_type(smsg);"
    },
    {
        "line": 229,
        "fullcodeline": "nni_aio_set_msg(uaio, smsg);"
    },
    {
        "line": 230,
        "fullcodeline": "nni_aio_set_output(uaio, 0, p);"
    },
    {
        "line": 242,
        "fullcodeline": "nni_aio_finish_error(uaio, rv);"
    },
    {
        "line": 247,
        "fullcodeline": "smsg = p->tmp_msg;"
    },
    {
        "line": 248,
        "fullcodeline": "nni_msg_free(smsg);"
    },
    {
        "line": 249,
        "fullcodeline": "p->tmp_msg = NULL;"
    },
    {
        "line": 35,
        "fullcodeline": "if ((rv = nni_msg_alloc(&p->tmp_msg, 0)) != 0) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (p->gotrxhead == 1) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (*(ptr + pos - 1) > 0x7f) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (p->gotrxhead+p->wantrxhead > p->conf->max_packet_size) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (nni_msg_cmd_type(p->tmp_msg) == CMD_CONNECT) {"
    },
    {
        "line": 130,
        "fullcodeline": "if (cmd == CMD_PUBLISH) {"
    },
    {
        "line": 190,
        "fullcodeline": "if (ack == true) {"
    },
    {
        "line": 36,
        "fullcodeline": "log_error(\"mem error %ld\\n\", (size_t) len);"
    },
    {
        "line": 77,
        "fullcodeline": "log_trace(\"size error 0x95\\n\");"
    },
    {
        "line": 78,
        "fullcodeline": "rv = NMQ_PACKET_TOO_LARGE;"
    },
    {
        "line": 103,
        "fullcodeline": "nni_msg_free(p->tmp_msg);"
    },
    {
        "line": 104,
        "fullcodeline": "p->tmp_msg = NULL;"
    },
    {
        "line": 105,
        "fullcodeline": "nni_aio_set_output(uaio, 0, p);"
    },
    {
        "line": 107,
        "fullcodeline": "nni_aio_finish(uaio, 0, 0);"
    },
    {
        "line": 108,
        "fullcodeline": "nni_mtx_unlock(&p->mtx);"
    },
    {
        "line": 131,
        "fullcodeline": "qos_pac = nni_msg_get_pub_qos(smsg);"
    },
    {
        "line": 243,
        "fullcodeline": "} else if (p->ep_aio != NULL) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (p->gotrxhead >= NNI_NANO_MAX_HEADER_SIZE) {"
    },
    {
        "line": 58,
        "fullcodeline": "p->wantrxhead = len + pos;"
    },
    {
        "line": 59,
        "fullcodeline": "nni_msg_set_cmd_type(p->tmp_msg, *ptr & 0xf0);"
    },
    {
        "line": 86,
        "fullcodeline": "if (p->ws_param == NULL) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (conn_handler(nni_msg_body(p->tmp_msg), p->ws_param,"
    },
    {
        "line": 95,
        "fullcodeline": "if (p->ws_param->pro_ver == 5) {"
    },
    {
        "line": 98,
        "fullcodeline": "if (p->ws_param->max_packet_size == 0) {"
    },
    {
        "line": 115,
        "fullcodeline": "ws_msg_adaptor(ptr, smsg);"
    },
    {
        "line": 117,
        "fullcodeline": "nni_msg_free(p->tmp_msg);"
    },
    {
        "line": 118,
        "fullcodeline": "p->tmp_msg = NULL;"
    },
    {
        "line": 119,
        "fullcodeline": "nni_msg_set_conn_param(smsg, p->ws_param);"
    },
    {
        "line": 132,
        "fullcodeline": "if (qos_pac > 0) {"
    },
    {
        "line": 193,
        "fullcodeline": "if ((rv = nni_msg_alloc(&qmsg, 0)) != 0) {"
    },
    {
        "line": 199,
        "fullcodeline": "if (cmd == CMD_PINGREQ) {"
    },
    {
        "line": 244,
        "fullcodeline": "nni_aio_finish_error(p->ep_aio, rv);"
    },
    {
        "line": 53,
        "fullcodeline": "rv = NNG_EMSGSIZE;"
    },
    {
        "line": 87,
        "fullcodeline": "conn_param_alloc(&p->ws_param);"
    },
    {
        "line": 91,
        "fullcodeline": "conn_param_free(p->ws_param);"
    },
    {
        "line": 92,
        "fullcodeline": "rv = NNG_ECONNRESET;"
    },
    {
        "line": 111,
        "fullcodeline": "if (nni_msg_alloc(&smsg, 0) != 0) {"
    },
    {
        "line": 158,
        "fullcodeline": "ack = true;"
    },
    {
        "line": 160,
        "fullcodeline": "} else if (cmd == CMD_PUBREC) {"
    },
    {
        "line": 194,
        "fullcodeline": "ack = false;"
    },
    {
        "line": 195,
        "fullcodeline": "rv  = NMQ_SERVER_BUSY;"
    },
    {
        "line": 196,
        "fullcodeline": "log_error(\"ERROR: OOM in WebSocket\");"
    },
    {
        "line": 200,
        "fullcodeline": "uint8_t buf[2] = { CMD_PINGRESP, 0x00 };"
    },
    {
        "line": 201,
        "fullcodeline": "nni_msg_set_cmd_type(qmsg, CMD_PINGRESP);"
    },
    {
        "line": 202,
        "fullcodeline": "nni_msg_header_append(qmsg, buf, 2);"
    },
    {
        "line": 203,
        "fullcodeline": "nng_aio_wait(p->qsaio);"
    },
    {
        "line": 204,
        "fullcodeline": "iov[0].iov_len = nni_msg_header_len(qmsg);"
    },
    {
        "line": 205,
        "fullcodeline": "iov[0].iov_buf = nni_msg_header(qmsg);"
    },
    {
        "line": 206,
        "fullcodeline": "nni_aio_set_msg(p->qsaio, qmsg);"
    },
    {
        "line": 208,
        "fullcodeline": "nni_aio_set_iov(p->qsaio, 1, iov);"
    },
    {
        "line": 209,
        "fullcodeline": "nng_stream_send(p->ws, p->qsaio);"
    },
    {
        "line": 90,
        "fullcodeline": "nni_msg_len(p->tmp_msg)) != 0) {"
    },
    {
        "line": 135,
        "fullcodeline": "if (p->ws_param->pro_ver == 5) {"
    },
    {
        "line": 144,
        "fullcodeline": "if (qos_pac == 1) {"
    },
    {
        "line": 153,
        "fullcodeline": "if ((packet_id = nni_msg_get_pub_pid(msg)) =="
    },
    {
        "line": 165,
        "fullcodeline": "ack_cmd = CMD_PUBREL;"
    },
    {
        "line": 166,
        "fullcodeline": "ack     = true;"
    },
    {
        "line": 214,
        "fullcodeline": "nni_msg_set_cmd_type(qmsg, ack_cmd);"
    },
    {
        "line": 215,
        "fullcodeline": "nni_mqtt_msgack_encode(qmsg, packet_id, reason_code,"
    },
    {
        "line": 217,
        "fullcodeline": "nni_mqtt_pubres_header_encode(qmsg, ack_cmd);"
    },
    {
        "line": 218,
        "fullcodeline": "nng_aio_wait(p->qsaio);"
    },
    {
        "line": 219,
        "fullcodeline": "iov[0].iov_len = nni_msg_header_len(qmsg);"
    },
    {
        "line": 220,
        "fullcodeline": "iov[0].iov_buf = nni_msg_header(qmsg);"
    },
    {
        "line": 221,
        "fullcodeline": "iov[1].iov_len = nni_msg_len(qmsg);"
    },
    {
        "line": 222,
        "fullcodeline": "iov[1].iov_buf = nni_msg_body(qmsg);"
    },
    {
        "line": 223,
        "fullcodeline": "nni_aio_set_msg(p->qsaio, qmsg);"
    },
    {
        "line": 225,
        "fullcodeline": "nni_aio_set_iov(p->qsaio, 2, iov);"
    },
    {
        "line": 226,
        "fullcodeline": "nng_stream_send(p->ws, p->qsaio);"
    },
    {
        "line": 145,
        "fullcodeline": "ack_cmd = CMD_PUBACK;"
    },
    {
        "line": 155,
        "fullcodeline": "rv = PROTOCOL_ERROR;"
    },
    {
        "line": 161,
        "fullcodeline": "if (nni_mqtt_pubres_decode(smsg, &packet_id, &reason_code, &prop,"
    },
    {
        "line": 136,
        "fullcodeline": "if (p->qrecv_quota > 0) {"
    },
    {
        "line": 163,
        "fullcodeline": "log_trace(\"decode PUBREC variable header failed!\");"
    },
    {
        "line": 167,
        "fullcodeline": "} else if (cmd == CMD_PUBREL) {"
    },
    {
        "line": 137,
        "fullcodeline": "p->qrecv_quota--;"
    },
    {
        "line": 146,
        "fullcodeline": "} else if (qos_pac == 2) {"
    },
    {
        "line": 172,
        "fullcodeline": "ack_cmd = CMD_PUBCOMP;"
    },
    {
        "line": 173,
        "fullcodeline": "ack     = true;"
    },
    {
        "line": 139,
        "fullcodeline": "rv = NMQ_RECEIVE_MAXIMUM_EXCEEDED;"
    },
    {
        "line": 147,
        "fullcodeline": "ack_cmd = CMD_PUBREC;"
    },
    {
        "line": 168,
        "fullcodeline": "if (nni_mqtt_pubres_decode(smsg, &packet_id, &reason_code, &prop,"
    },
    {
        "line": 149,
        "fullcodeline": "log_warn(\"Wrong QoS level!\");"
    },
    {
        "line": 150,
        "fullcodeline": "rv = PROTOCOL_ERROR;"
    },
    {
        "line": 170,
        "fullcodeline": "log_trace(\"decode PUBREL variable header failed!\");"
    },
    {
        "line": 174,
        "fullcodeline": "} else if (cmd == CMD_PUBACK || cmd == CMD_PUBCOMP) {"
    },
    {
        "line": 175,
        "fullcodeline": "if (nni_mqtt_pubres_decode(smsg, &packet_id, &reason_code, &prop,"
    },
    {
        "line": 181,
        "fullcodeline": "if (p->ws_param->pro_ver == 5) {"
    },
    {
        "line": 177,
        "fullcodeline": "log_trace(\"decode PUBACK or PUBCOMP variable header \""
    },
    {
        "line": 182,
        "fullcodeline": "property_free(prop);"
    },
    {
        "line": 183,
        "fullcodeline": "p->qsend_quota++;"
    },
    {
        "line": 185,
        "fullcodeline": "} else if (cmd == CMD_PINGREQ) {"
    },
    {
        "line": 187,
        "fullcodeline": "ack = true;"
    }
]