[
    {
        "line": 6,
        "fullcodeline": "uint32_t            len = 0, rv;"
    },
    {
        "line": 9,
        "fullcodeline": "mqtts_tcptran_pipe *p     = arg;"
    },
    {
        "line": 10,
        "fullcodeline": "nni_aio *           rxaio = p->rxaio;"
    },
    {
        "line": 11,
        "fullcodeline": "bool                ack   = false;"
    },
    {
        "line": 12,
        "fullcodeline": "nni_mtx_lock(&p->mtx);"
    },
    {
        "line": 14,
        "fullcodeline": "aio = nni_list_first(&p->recvq);"
    },
    {
        "line": 21,
        "fullcodeline": "n = nni_aio_count(rxaio);"
    },
    {
        "line": 22,
        "fullcodeline": "p->gotrxhead += n;"
    },
    {
        "line": 25,
        "fullcodeline": "nni_aio_iov_advance(rxaio, n);"
    },
    {
        "line": 32,
        "fullcodeline": "rv = mqtt_get_remaining_length(p->rxlen, p->gotrxhead, &len, &pos);"
    },
    {
        "line": 33,
        "fullcodeline": "p->wantrxhead = len + 1 + pos;"
    },
    {
        "line": 79,
        "fullcodeline": "nni_aio_list_remove(aio);"
    },
    {
        "line": 80,
        "fullcodeline": "nni_msg_header_append(p->rxmsg, p->rxlen, pos + 1);"
    },
    {
        "line": 81,
        "fullcodeline": "msg      = p->rxmsg;"
    },
    {
        "line": 82,
        "fullcodeline": "p->rxmsg = NULL;"
    },
    {
        "line": 83,
        "fullcodeline": "n        = nni_msg_len(msg);"
    },
    {
        "line": 84,
        "fullcodeline": "type     = p->rxlen[0] & 0xf0;"
    },
    {
        "line": 85,
        "fullcodeline": "flags    = p->rxlen[0] & 0x0f;"
    },
    {
        "line": 88,
        "fullcodeline": "uint16_t  packet_id   = 0;"
    },
    {
        "line": 89,
        "fullcodeline": "uint8_t   reason_code = 0;"
    },
    {
        "line": 90,
        "fullcodeline": "property *prop        = NULL;"
    },
    {
        "line": 91,
        "fullcodeline": "uint8_t   ack_cmd     = 0;"
    },
    {
        "line": 207,
        "fullcodeline": "nni_pipe_bump_rx(p->npipe, n);"
    },
    {
        "line": 214,
        "fullcodeline": "nni_aio_set_msg(aio, msg);"
    },
    {
        "line": 215,
        "fullcodeline": "p->pingcnt = 0;"
    },
    {
        "line": 216,
        "fullcodeline": "nni_mtx_unlock(&p->mtx);"
    },
    {
        "line": 217,
        "fullcodeline": "nni_aio_finish_sync(aio, 0, n);"
    },
    {
        "line": 221,
        "fullcodeline": "nni_aio_list_remove(aio);"
    },
    {
        "line": 222,
        "fullcodeline": "msg      = p->rxmsg;"
    },
    {
        "line": 223,
        "fullcodeline": "p->rxmsg = NULL;"
    },
    {
        "line": 224,
        "fullcodeline": "nni_pipe_bump_error(p->npipe, rv);"
    },
    {
        "line": 225,
        "fullcodeline": "nni_mtx_unlock(&p->mtx);"
    },
    {
        "line": 227,
        "fullcodeline": "nni_msg_free(msg);"
    },
    {
        "line": 228,
        "fullcodeline": "nni_aio_finish_error(aio, rv);"
    },
    {
        "line": 16,
        "fullcodeline": "if ((rv = nni_aio_result(rxaio)) != 0) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (nni_aio_iov_count(rxaio) > 0) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (p->gotrxhead <= 5 && p->rxlen[p->gotrxhead - 1] > 0x7f) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (NULL == p->rxmsg) {"
    },
    {
        "line": 153,
        "fullcodeline": "if (ack == true) {"
    },
    {
        "line": 208,
        "fullcodeline": "if (!nni_list_empty(&p->recvq)) {"
    },
    {
        "line": 17,
        "fullcodeline": "rv = SERVER_UNAVAILABLE;"
    },
    {
        "line": 27,
        "fullcodeline": "nng_stream_recv(p->conn, rxaio);"
    },
    {
        "line": 28,
        "fullcodeline": "nni_mtx_unlock(&p->mtx);"
    },
    {
        "line": 40,
        "fullcodeline": "iov.iov_buf = &p->rxlen[p->gotrxhead];"
    },
    {
        "line": 41,
        "fullcodeline": "iov.iov_len = 1;"
    },
    {
        "line": 42,
        "fullcodeline": "nni_aio_set_iov(rxaio, 1, &iov);"
    },
    {
        "line": 43,
        "fullcodeline": "nng_stream_recv(p->conn, rxaio);"
    },
    {
        "line": 44,
        "fullcodeline": "nni_mtx_unlock(&p->mtx);"
    },
    {
        "line": 60,
        "fullcodeline": "nni_msg_set_remaining_len(p->rxmsg, len);"
    },
    {
        "line": 96,
        "fullcodeline": "qos_pac = nni_msg_get_pub_qos(msg);"
    },
    {
        "line": 120,
        "fullcodeline": "ack_cmd = CMD_PUBREL;"
    },
    {
        "line": 121,
        "fullcodeline": "ack     = true;"
    },
    {
        "line": 162,
        "fullcodeline": "nni_mqtt_msgack_encode("
    },
    {
        "line": 164,
        "fullcodeline": "nni_mqtt_pubres_header_encode(qmsg, ack_cmd);"
    },
    {
        "line": 203,
        "fullcodeline": "ack = false;"
    },
    {
        "line": 209,
        "fullcodeline": "mqtts_tcptran_pipe_recv_start(p);"
    },
    {
        "line": 35,
        "fullcodeline": "if (p->gotrxhead == NNI_NANO_MAX_HEADER_SIZE) {"
    },
    {
        "line": 52,
        "fullcodeline": "if ((len > p->rcvmax) && (p->rcvmax > 0)) {"
    },
    {
        "line": 56,
        "fullcodeline": "if ((rv = nni_msg_alloc(&p->rxmsg, (size_t) len)) != 0) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (len != 0) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (qos_pac > 0) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (nni_mqtt_pubres_decode(msg, &packet_id, &reason_code, &prop,"
    },
    {
        "line": 124,
        "fullcodeline": "if (flags == 0x02) {"
    },
    {
        "line": 140,
        "fullcodeline": "if (nni_mqtt_pubres_decode("
    },
    {
        "line": 145,
        "fullcodeline": "if (p->proto == MQTT_PROTOCOL_VERSION_v5) {"
    },
    {
        "line": 156,
        "fullcodeline": "if ((rv = nni_msg_alloc(&qmsg, 0)) != 0) {"
    },
    {
        "line": 165,
        "fullcodeline": "if (p->proto == MQTT_PROTOCOL_VERSION_v5) {"
    },
    {
        "line": 169,
        "fullcodeline": "if (p->busy == false) {"
    },
    {
        "line": 36,
        "fullcodeline": "rv = PACKET_TOO_LARGE;"
    },
    {
        "line": 53,
        "fullcodeline": "rv = PACKET_TOO_LARGE;"
    },
    {
        "line": 57,
        "fullcodeline": "rv = UNSPECIFIED_ERROR;"
    },
    {
        "line": 66,
        "fullcodeline": "iov.iov_buf = nni_msg_body(p->rxmsg);"
    },
    {
        "line": 67,
        "fullcodeline": "iov.iov_len = (size_t) len;"
    },
    {
        "line": 69,
        "fullcodeline": "nni_aio_set_iov(rxaio, 1, &iov);"
    },
    {
        "line": 71,
        "fullcodeline": "nng_stream_recv(p->conn, rxaio);"
    },
    {
        "line": 72,
        "fullcodeline": "nni_mtx_unlock(&p->mtx);"
    },
    {
        "line": 111,
        "fullcodeline": "ack = true;"
    },
    {
        "line": 117,
        "fullcodeline": "rv = PROTOCOL_ERROR;"
    },
    {
        "line": 130,
        "fullcodeline": "ack_cmd = CMD_PUBCOMP;"
    },
    {
        "line": 131,
        "fullcodeline": "ack     = true;"
    },
    {
        "line": 142,
        "fullcodeline": "rv = PROTOCOL_ERROR;"
    },
    {
        "line": 146,
        "fullcodeline": "p->sndmax++;"
    },
    {
        "line": 157,
        "fullcodeline": "ack = false;"
    },
    {
        "line": 158,
        "fullcodeline": "rv  = UNSPECIFIED_ERROR;"
    },
    {
        "line": 166,
        "fullcodeline": "property_free(prop);"
    },
    {
        "line": 170,
        "fullcodeline": "nni_msg_insert(qmsg, nni_msg_header(qmsg),"
    },
    {
        "line": 172,
        "fullcodeline": "iov.iov_len    = nni_msg_len(qmsg);"
    },
    {
        "line": 173,
        "fullcodeline": "iov.iov_buf    = nni_msg_body(qmsg);"
    },
    {
        "line": 174,
        "fullcodeline": "p->busy        = true;"
    },
    {
        "line": 175,
        "fullcodeline": "nni_aio_set_msg(p->qsaio, qmsg);"
    },
    {
        "line": 177,
        "fullcodeline": "nni_aio_set_iov(p->qsaio, 1, &iov);"
    },
    {
        "line": 178,
        "fullcodeline": "nng_stream_send(p->conn, p->qsaio);"
    },
    {
        "line": 98,
        "fullcodeline": "if (qos_pac == 1) {"
    },
    {
        "line": 107,
        "fullcodeline": "if ((packet_id = nni_msg_get_pub_pid(msg)) == 0) {"
    },
    {
        "line": 125,
        "fullcodeline": "if (nni_mqtt_pubres_decode(msg, &packet_id, &reason_code,"
    },
    {
        "line": 134,
        "fullcodeline": "rv = PROTOCOL_ERROR;"
    },
    {
        "line": 171,
        "fullcodeline": "nni_msg_header_len(qmsg));"
    },
    {
        "line": 99,
        "fullcodeline": "ack_cmd = CMD_PUBACK;"
    },
    {
        "line": 108,
        "fullcodeline": "rv = PROTOCOL_ERROR;"
    },
    {
        "line": 127,
        "fullcodeline": "rv = PROTOCOL_ERROR;"
    },
    {
        "line": 180,
        "fullcodeline": "if (nni_lmq_full(&p->rslmq)) {"
    },
    {
        "line": 100,
        "fullcodeline": "} else if (qos_pac == 2) {"
    },
    {
        "line": 183,
        "fullcodeline": "if (nni_lmq_cap(&p->rslmq) <="
    },
    {
        "line": 200,
        "fullcodeline": "nni_lmq_put(&p->rslmq, qmsg);"
    },
    {
        "line": 101,
        "fullcodeline": "ack_cmd = CMD_PUBREC;"
    },
    {
        "line": 103,
        "fullcodeline": "log_warn(\"Wrong QoS level!\");"
    },
    {
        "line": 104,
        "fullcodeline": "rv = PROTOCOL_ERROR;"
    },
    {
        "line": 185,
        "fullcodeline": "if ((rv = nni_lmq_resize(&p->rslmq,"
    },
    {
        "line": 195,
        "fullcodeline": "(void) nni_lmq_get(&p->rslmq, &old);"
    },
    {
        "line": 196,
        "fullcodeline": "nni_msg_free(old);"
    },
    {
        "line": 197,
        "fullcodeline": "nni_lmq_put(&p->rslmq, qmsg);"
    },
    {
        "line": 188,
        "fullcodeline": "nni_lmq_put(&p->rslmq, qmsg);"
    },
    {
        "line": 191,
        "fullcodeline": "nni_msg_free(qmsg);"
    },
    {
        "line": 186,
        "fullcodeline": "nni_lmq_cap(&p->rslmq) *"
    }
]