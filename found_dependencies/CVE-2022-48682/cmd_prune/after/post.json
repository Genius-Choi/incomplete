[
    {
        "line": 6,
        "fullcodeline": "int totaldeleted = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "int totalfailed = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "double deletedbytes = 0;"
    },
    {
        "line": 191,
        "fullcodeline": "to = 0;"
    },
    {
        "line": 210,
        "fullcodeline": "*totalgroups = to;"
    },
    {
        "line": 220,
        "fullcodeline": "adjusttopline = 1;"
    },
    {
        "line": 221,
        "fullcodeline": "toplineoffset = 0;"
    },
    {
        "line": 222,
        "fullcodeline": "groupfirstline = 0;"
    },
    {
        "line": 256,
        "fullcodeline": "cmd_clear_all_selections(groups, *totalgroups, commandarguments, 0);"
    },
    {
        "line": 22,
        "fullcodeline": "if (logfile != 0)"
    },
    {
        "line": 27,
        "fullcodeline": "for (g = 0; g < *totalgroups; ++g)"
    },
    {
        "line": 161,
        "fullcodeline": "if (loginfo != 0)"
    },
    {
        "line": 164,
        "fullcodeline": "if (deletedbytes < 1000.0)"
    },
    {
        "line": 173,
        "fullcodeline": "if (totalfailed > 0)"
    },
    {
        "line": 192,
        "fullcodeline": "for (g = 0; g < *totalgroups; ++g)"
    },
    {
        "line": 213,
        "fullcodeline": "if (*cursorgroup >= *totalgroups)"
    },
    {
        "line": 224,
        "fullcodeline": "for (g = 0; g < *totalgroups; ++g)"
    },
    {
        "line": 248,
        "fullcodeline": "if (*totalgroups > 0 && groups[*totalgroups-1].endline <= *topline)"
    },
    {
        "line": 23,
        "fullcodeline": "loginfo = log_open(logfile, 0);"
    },
    {
        "line": 29,
        "fullcodeline": "preservecount = 0;"
    },
    {
        "line": 30,
        "fullcodeline": "deletecount = 0;"
    },
    {
        "line": 31,
        "fullcodeline": "unresolvedcount = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "firstnotdeleted = 0;"
    },
    {
        "line": 149,
        "fullcodeline": "to = 0;"
    },
    {
        "line": 154,
        "fullcodeline": "groups[g].filecount = to;"
    },
    {
        "line": 162,
        "fullcodeline": "log_close(loginfo);"
    },
    {
        "line": 165,
        "fullcodeline": "format_status_left(status, L\"Deleted %ld files (occupying %.0f bytes)%c\", totaldeleted, deletedbytes, totalfailed ? ';' : '.');"
    },
    {
        "line": 175,
        "fullcodeline": "statuscopy = malloc(sizeof(wchar_t) * (wcslen(status->left) + 1));"
    },
    {
        "line": 183,
        "fullcodeline": "wcsncpy(statuscopy, status->left, wcslen(status->left) + 1);"
    },
    {
        "line": 185,
        "fullcodeline": "format_status_left(status, L\"%S %d failed.\", statuscopy, totalfailed);"
    },
    {
        "line": 187,
        "fullcodeline": "free(statuscopy);"
    },
    {
        "line": 215,
        "fullcodeline": "*cursorgroup = *totalgroups - 1;"
    },
    {
        "line": 216,
        "fullcodeline": "*cursorfile = 0;"
    },
    {
        "line": 229,
        "fullcodeline": "groups[g].startline = groupfirstline;"
    },
    {
        "line": 230,
        "fullcodeline": "groups[g].endline = groupfirstline + 2;"
    },
    {
        "line": 245,
        "fullcodeline": "groupfirstline = groups[g].endline + 1;"
    },
    {
        "line": 250,
        "fullcodeline": "*topline = groups[*totalgroups-1].endline - getmaxy(filewin) + 1;"
    },
    {
        "line": 25,
        "fullcodeline": "loginfo = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "for (f = 0; f < groups[g].filecount; ++f)"
    },
    {
        "line": 65,
        "fullcodeline": "if (deletecount < groups[g].filecount)"
    },
    {
        "line": 132,
        "fullcodeline": "if (unresolvedcount == 0)"
    },
    {
        "line": 150,
        "fullcodeline": "for (f = 0; f < groups[g].filecount; ++f)"
    },
    {
        "line": 157,
        "fullcodeline": "if (*cursorgroup == g && *cursorfile > 0 && *cursorfile >= groups[g].filecount)"
    },
    {
        "line": 176,
        "fullcodeline": "if (!statuscopy)"
    },
    {
        "line": 194,
        "fullcodeline": "if (groups[g].filecount > 0)"
    },
    {
        "line": 226,
        "fullcodeline": "if (adjusttopline && groups[g].endline >= *topline)"
    },
    {
        "line": 232,
        "fullcodeline": "for (f = 0; f < groups[g].filecount; ++f)"
    },
    {
        "line": 233,
        "fullcodeline": "groups[g].endline += filerowcount(groups[g].files[f].file, COLS, groups[g].filecount);"
    },
    {
        "line": 235,
        "fullcodeline": "if (adjusttopline && toplineoffset > 0)"
    },
    {
        "line": 252,
        "fullcodeline": "if (*topline < 0)"
    },
    {
        "line": 62,
        "fullcodeline": "log_begin_set(loginfo);"
    },
    {
        "line": 125,
        "fullcodeline": "deletecount = 0;"
    },
    {
        "line": 129,
        "fullcodeline": "log_end_set(loginfo);"
    },
    {
        "line": 138,
        "fullcodeline": "preservecount = 0;"
    },
    {
        "line": 151,
        "fullcodeline": "if (groups[g].files[f].action != FILEACTION_DELIST)"
    },
    {
        "line": 158,
        "fullcodeline": "*cursorfile = groups[g].filecount - 1;"
    },
    {
        "line": 166,
        "fullcodeline": "else if (deletedbytes <= (1000.0 * 1000.0))"
    },
    {
        "line": 178,
        "fullcodeline": "endwin();"
    },
    {
        "line": 179,
        "fullcodeline": "errormsg(\"out of memory\\n\");"
    },
    {
        "line": 180,
        "fullcodeline": "exit(1);"
    },
    {
        "line": 196,
        "fullcodeline": "groups[to] = groups[g];"
    },
    {
        "line": 202,
        "fullcodeline": "++to;"
    },
    {
        "line": 227,
        "fullcodeline": "toplineoffset = groups[g].endline - *topline;"
    },
    {
        "line": 237,
        "fullcodeline": "*topline = groups[g].endline - toplineoffset;"
    },
    {
        "line": 242,
        "fullcodeline": "adjusttopline = 0;"
    },
    {
        "line": 253,
        "fullcodeline": "*topline = 0;"
    },
    {
        "line": 67,
        "fullcodeline": "for (f = 0; f < groups[g].filecount; ++f)"
    },
    {
        "line": 134,
        "fullcodeline": "for (f = 0; f < groups[g].filecount; ++f)"
    },
    {
        "line": 152,
        "fullcodeline": "groups[g].files[to++] = groups[g].files[f];"
    },
    {
        "line": 167,
        "fullcodeline": "format_status_left(status, L\"Deleted %ld files (occupying %.1f KB)%c\", totaldeleted, deletedbytes / 1000.0, totalfailed ? ';' : '.');"
    },
    {
        "line": 199,
        "fullcodeline": "if (to == *cursorgroup && to != g)"
    },
    {
        "line": 206,
        "fullcodeline": "free(groups[g].files);"
    },
    {
        "line": 239,
        "fullcodeline": "if (*topline < 0)"
    },
    {
        "line": 39,
        "fullcodeline": "++deletecount;"
    },
    {
        "line": 44,
        "fullcodeline": "++unresolvedcount;"
    },
    {
        "line": 52,
        "fullcodeline": "++preservecount;"
    },
    {
        "line": 135,
        "fullcodeline": "if (groups[g].files[f].action == FILEACTION_KEEP)"
    },
    {
        "line": 141,
        "fullcodeline": "else if (unresolvedcount == 1 && preservecount + deletecount == 0)"
    },
    {
        "line": 200,
        "fullcodeline": "*cursorfile = 0;"
    },
    {
        "line": 240,
        "fullcodeline": "*topline = 0;"
    },
    {
        "line": 46,
        "fullcodeline": "if (firstnotdeleted == 0)"
    },
    {
        "line": 54,
        "fullcodeline": "if (firstnotdeleted == 0)"
    },
    {
        "line": 69,
        "fullcodeline": "if (groups[g].files[f].action == FILEACTION_DELETE)"
    },
    {
        "line": 117,
        "fullcodeline": "for (f = 0; f < groups[g].filecount; ++f)"
    },
    {
        "line": 136,
        "fullcodeline": "set_file_action(&groups[g].files[f], FILEACTION_DELIST, deletiontally);"
    },
    {
        "line": 168,
        "fullcodeline": "else if (deletedbytes <= (1000.0 * 1000.0 * 1000.0))"
    },
    {
        "line": 143,
        "fullcodeline": "for (f = 0; f < groups[g].filecount; ++f)"
    },
    {
        "line": 169,
        "fullcodeline": "format_status_left(status, L\"Deleted %ld files (occupying %.1f MB)%c\", totaldeleted, deletedbytes / (1000.0 * 1000.0), totalfailed ? ';' : '.');"
    },
    {
        "line": 71,
        "fullcodeline": "if (ISFLAG(flags, F_DEFERCONFIRMATION))"
    },
    {
        "line": 96,
        "fullcodeline": "if (ismatch && removeifnotchanged(groups[g].files[f].file, 0) == 0)"
    },
    {
        "line": 119,
        "fullcodeline": "if (groups[g].files[f].action != FILEACTION_DELETE &&"
    },
    {
        "line": 144,
        "fullcodeline": "if (groups[g].files[f].action == FILEACTION_UNRESOLVED || groups[g].files[f].action == FILEACTION_ERROR)"
    },
    {
        "line": 171,
        "fullcodeline": "format_status_left(status, L\"Deleted %ld files (occupying %.1f GB)%c\", totaldeleted, deletedbytes / (1000.0 * 1000.0 * 1000.0), totalfailed ? ';' : '.');"
    },
    {
        "line": 73,
        "fullcodeline": "format_status_left(status, L\"Confirming duplicates...\");"
    },
    {
        "line": 74,
        "fullcodeline": "print_status(statuswin, status);"
    },
    {
        "line": 75,
        "fullcodeline": "wrefresh(statuswin);"
    },
    {
        "line": 77,
        "fullcodeline": "file1 = fopen(groups[g].files[f].file->d_name, \"rb\");"
    },
    {
        "line": 78,
        "fullcodeline": "file2 = fopen(firstnotdeleted->file->d_name, \"rb\");"
    },
    {
        "line": 98,
        "fullcodeline": "set_file_action(&groups[g].files[f], FILEACTION_DELIST, deletiontally);"
    },
    {
        "line": 100,
        "fullcodeline": "deletedbytes += groups[g].files[f].file->size;"
    },
    {
        "line": 101,
        "fullcodeline": "++totaldeleted;"
    },
    {
        "line": 120,
        "fullcodeline": "groups[g].files[f].action != FILEACTION_DELIST)"
    },
    {
        "line": 121,
        "fullcodeline": "log_file_remaining(loginfo, groups[g].files[f].file->d_name);"
    },
    {
        "line": 145,
        "fullcodeline": "set_file_action(&groups[g].files[f], FILEACTION_DELIST, deletiontally);"
    },
    {
        "line": 80,
        "fullcodeline": "if (file1 && file2)"
    },
    {
        "line": 93,
        "fullcodeline": "ismatch = 1;"
    },
    {
        "line": 108,
        "fullcodeline": "set_file_action(&groups[g].files[f], FILEACTION_ERROR, deletiontally);"
    },
    {
        "line": 109,
        "fullcodeline": "unresolvedcount++;"
    },
    {
        "line": 110,
        "fullcodeline": "totalfailed++;"
    },
    {
        "line": 81,
        "fullcodeline": "ismatch = confirmmatch(file1, file2);"
    },
    {
        "line": 86,
        "fullcodeline": "fclose(file2);"
    },
    {
        "line": 89,
        "fullcodeline": "fclose(file1);"
    },
    {
        "line": 104,
        "fullcodeline": "log_file_deleted(loginfo, groups[g].files[f].file->d_name);"
    },
    {
        "line": 83,
        "fullcodeline": "ismatch = 0;"
    }
]