[
    {
        "line": 5,
        "fullcodeline": "buffer[MagickPathExtent],"
    },
    {
        "line": 6,
        "fullcodeline": "colorspace[MagickPathExtent],"
    },
    {
        "line": 7,
        "fullcodeline": "tuple[MagickPathExtent];"
    },
    {
        "line": 30,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 31,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 32,
        "fullcodeline": "assert(image != (Image *) NULL);"
    },
    {
        "line": 33,
        "fullcodeline": "assert(image->signature == MagickCoreSignature);"
    },
    {
        "line": 36,
        "fullcodeline": "status=OpenBlob(image_info,image,WriteBlobMode,exception);"
    },
    {
        "line": 39,
        "fullcodeline": "scene=0;"
    },
    {
        "line": 156,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 34,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 37,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 155,
        "fullcodeline": "} while (image_info->adjoin != MagickFalse);"
    },
    {
        "line": 35,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 48,
        "fullcodeline": "(void) CopyMagickString(colorspace,CommandOptionToMnemonic("
    },
    {
        "line": 50,
        "fullcodeline": "LocaleLower(colorspace);"
    },
    {
        "line": 51,
        "fullcodeline": "image->depth=GetImageQuantumDepth(image,MagickTrue);"
    },
    {
        "line": 54,
        "fullcodeline": "compliance=NoCompliance;"
    },
    {
        "line": 55,
        "fullcodeline": "value=GetImageOption(image_info,\"txt:compliance\");"
    },
    {
        "line": 72,
        "fullcodeline": "GetPixelInfo(image,&pixel);"
    },
    {
        "line": 150,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 151,
        "fullcodeline": "status=SetImageProgress(image,SaveImagesTag,scene++,"
    },
    {
        "line": 52,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 56,
        "fullcodeline": "if (value != (char *) NULL)"
    },
    {
        "line": 59,
        "fullcodeline": "if (LocaleCompare(image_info->magick,\"SPARSE-COLOR\") != 0)"
    },
    {
        "line": 73,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 148,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 153,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 53,
        "fullcodeline": "(void) ConcatenateMagickString(colorspace,\"a\",MagickPathExtent);"
    },
    {
        "line": 57,
        "fullcodeline": "compliance=(ComplianceType) ParseCommandOption(MagickComplianceOptions,"
    },
    {
        "line": 64,
        "fullcodeline": "depth=compliance == SVGCompliance ? image->depth :"
    },
    {
        "line": 66,
        "fullcodeline": "(void) FormatLocaleString(buffer,MagickPathExtent,"
    },
    {
        "line": 70,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 75,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 143,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 152,
        "fullcodeline": "GetImageListLength(image));"
    },
    {
        "line": 49,
        "fullcodeline": "MagickColorspaceOptions,(ssize_t) image->colorspace),MagickPathExtent);"
    },
    {
        "line": 76,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 78,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 145,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 67,
        "fullcodeline": "\"# ImageMagick pixel enumeration: %.20g,%.20g,%.20g,%s\\n\",(double)"
    },
    {
        "line": 68,
        "fullcodeline": "image->columns,(double) image->rows,(double) ((MagickOffsetType)"
    },
    {
        "line": 80,
        "fullcodeline": "GetPixelInfoPixel(image,p,&pixel);"
    },
    {
        "line": 103,
        "fullcodeline": "(void) FormatLocaleString(buffer,MagickPathExtent,\"%.20g,%.20g: \","
    },
    {
        "line": 105,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 106,
        "fullcodeline": "(void) CopyMagickString(tuple,\"(\",MagickPathExtent);"
    },
    {
        "line": 131,
        "fullcodeline": "(void) ConcatenateMagickString(tuple,\")\",MagickPathExtent);"
    },
    {
        "line": 132,
        "fullcodeline": "(void) WriteBlobString(image,tuple);"
    },
    {
        "line": 133,
        "fullcodeline": "(void) WriteBlobString(image,\"  \");"
    },
    {
        "line": 134,
        "fullcodeline": "GetColorTuple(&pixel,MagickTrue,tuple);"
    },
    {
        "line": 135,
        "fullcodeline": "(void) FormatLocaleString(buffer,MagickPathExtent,\"%s\",tuple);"
    },
    {
        "line": 136,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 137,
        "fullcodeline": "(void) WriteBlobString(image,\"  \");"
    },
    {
        "line": 138,
        "fullcodeline": "(void) QueryColorname(image,&pixel,SVGCompliance,tuple,exception);"
    },
    {
        "line": 139,
        "fullcodeline": "(void) WriteBlobString(image,tuple);"
    },
    {
        "line": 140,
        "fullcodeline": "(void) WriteBlobString(image,\"\\n\");"
    },
    {
        "line": 141,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 81,
        "fullcodeline": "if (pixel.colorspace == LabColorspace)"
    },
    {
        "line": 86,
        "fullcodeline": "if (LocaleCompare(image_info->magick,\"SPARSE-COLOR\") == 0)"
    },
    {
        "line": 107,
        "fullcodeline": "if (pixel.colorspace == GRAYColorspace)"
    },
    {
        "line": 119,
        "fullcodeline": "if (pixel.colorspace == CMYKColorspace)"
    },
    {
        "line": 125,
        "fullcodeline": "if (pixel.alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 69,
        "fullcodeline": "GetQuantumRange(depth)),colorspace);"
    },
    {
        "line": 83,
        "fullcodeline": "pixel.green-=(QuantumRange+1)/2.0;"
    },
    {
        "line": 84,
        "fullcodeline": "pixel.blue-=(QuantumRange+1)/2.0;"
    },
    {
        "line": 100,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 104,
        "fullcodeline": "(double) x,(double) y);"
    },
    {
        "line": 108,
        "fullcodeline": "ConcatenateColorComponent(&pixel,GrayPixelChannel,compliance,"
    },
    {
        "line": 121,
        "fullcodeline": "(void) ConcatenateMagickString(tuple,\",\",MagickPathExtent);"
    },
    {
        "line": 122,
        "fullcodeline": "ConcatenateColorComponent(&pixel,BlackPixelChannel,compliance,"
    },
    {
        "line": 127,
        "fullcodeline": "(void) ConcatenateMagickString(tuple,\",\",MagickPathExtent);"
    },
    {
        "line": 128,
        "fullcodeline": "ConcatenateColorComponent(&pixel,AlphaPixelChannel,compliance,"
    },
    {
        "line": 91,
        "fullcodeline": "if (GetPixelAlpha(image,p) == (Quantum) OpaqueAlpha)"
    },
    {
        "line": 112,
        "fullcodeline": "ConcatenateColorComponent(&pixel,RedPixelChannel,compliance,tuple);"
    },
    {
        "line": 113,
        "fullcodeline": "(void) ConcatenateMagickString(tuple,\",\",MagickPathExtent);"
    },
    {
        "line": 114,
        "fullcodeline": "ConcatenateColorComponent(&pixel,GreenPixelChannel,compliance,"
    },
    {
        "line": 116,
        "fullcodeline": "(void) ConcatenateMagickString(tuple,\",\",MagickPathExtent);"
    },
    {
        "line": 117,
        "fullcodeline": "ConcatenateColorComponent(&pixel,BluePixelChannel,compliance,tuple);"
    },
    {
        "line": 93,
        "fullcodeline": "GetColorTuple(&pixel,MagickFalse,tuple);"
    },
    {
        "line": 94,
        "fullcodeline": "(void) FormatLocaleString(buffer,MagickPathExtent,"
    },
    {
        "line": 96,
        "fullcodeline": "(void) WriteBlobString(image,buffer);"
    },
    {
        "line": 97,
        "fullcodeline": "(void) WriteBlobString(image,tuple);"
    },
    {
        "line": 98,
        "fullcodeline": "(void) WriteBlobString(image,\" \");"
    },
    {
        "line": 95,
        "fullcodeline": "\"%.20g,%.20g,\",(double) x,(double) y);"
    }
]