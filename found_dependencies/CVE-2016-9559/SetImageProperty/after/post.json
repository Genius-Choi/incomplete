[
    {
        "line": 10,
        "fullcodeline": "assert(image != (Image *) NULL);"
    },
    {
        "line": 11,
        "fullcodeline": "assert(image->signature == MagickCoreSignature);"
    },
    {
        "line": 19,
        "fullcodeline": "status=MagickTrue;"
    },
    {
        "line": 455,
        "fullcodeline": "status=AddValueToSplayTree((SplayTreeInfo *) image->properties,"
    },
    {
        "line": 12,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 14,
        "fullcodeline": "if (image->properties == (void *) NULL)"
    },
    {
        "line": 17,
        "fullcodeline": "if (value == (const char *) NULL)"
    },
    {
        "line": 20,
        "fullcodeline": "if (strlen(property) <= 1)"
    },
    {
        "line": 13,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 15,
        "fullcodeline": "image->properties=NewSplayTree(CompareSplayTreeString,"
    },
    {
        "line": 25,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),OptionError,"
    },
    {
        "line": 456,
        "fullcodeline": "ConstantString(property),ConstantString(value));"
    },
    {
        "line": 18,
        "fullcodeline": "return(DeleteImageProperty(image,property));  /* delete if NULL */"
    },
    {
        "line": 277,
        "fullcodeline": "if (LocaleCompare(\"kurtosis\",property) == 0)"
    },
    {
        "line": 296,
        "fullcodeline": "if ((LocaleCompare(\"magick\",property) == 0) ||"
    },
    {
        "line": 309,
        "fullcodeline": "if (LocaleCompare(\"opaque\",property) == 0)"
    },
    {
        "line": 376,
        "fullcodeline": "if ((LocaleCompare(\"size\",property) == 0) ||"
    },
    {
        "line": 52,
        "fullcodeline": "if (LocaleCompare(\"background\",property) == 0)"
    },
    {
        "line": 64,
        "fullcodeline": "if (LocaleCompare(\"channels\",property) == 0)"
    },
    {
        "line": 70,
        "fullcodeline": "if (LocaleCompare(\"colorspace\",property) == 0)"
    },
    {
        "line": 81,
        "fullcodeline": "if (LocaleCompare(\"compose\",property) == 0)"
    },
    {
        "line": 92,
        "fullcodeline": "if (LocaleCompare(\"compress\",property) == 0)"
    },
    {
        "line": 109,
        "fullcodeline": "if (LocaleCompare(\"delay\",property) == 0)"
    },
    {
        "line": 133,
        "fullcodeline": "if (LocaleCompare(\"delay_units\",property) == 0)"
    },
    {
        "line": 139,
        "fullcodeline": "if (LocaleCompare(\"density\",property) == 0)"
    },
    {
        "line": 151,
        "fullcodeline": "if (LocaleCompare(\"depth\",property) == 0)"
    },
    {
        "line": 156,
        "fullcodeline": "if (LocaleCompare(\"dispose\",property) == 0)"
    },
    {
        "line": 197,
        "fullcodeline": "if (LocaleCompare(\"gamma\",property) == 0)"
    },
    {
        "line": 202,
        "fullcodeline": "if (LocaleCompare(\"gravity\",property) == 0)"
    },
    {
        "line": 218,
        "fullcodeline": "if (LocaleCompare(\"height\",property) == 0)"
    },
    {
        "line": 229,
        "fullcodeline": "if (LocaleCompare(\"intensity\",property) == 0)"
    },
    {
        "line": 240,
        "fullcodeline": "if (LocaleCompare(\"intent\",property) == 0)"
    },
    {
        "line": 252,
        "fullcodeline": "if (LocaleCompare(\"interpolate\",property) == 0)"
    },
    {
        "line": 279,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),OptionError,"
    },
    {
        "line": 287,
        "fullcodeline": "if (LocaleCompare(\"loop\",property) == 0)"
    },
    {
        "line": 300,
        "fullcodeline": "(LocaleCompare(\"min\",property) == 0))"
    },
    {
        "line": 302,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),OptionError,"
    },
    {
        "line": 311,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),OptionError,"
    },
    {
        "line": 319,
        "fullcodeline": "if (LocaleCompare(\"page\",property) == 0)"
    },
    {
        "line": 338,
        "fullcodeline": "if (LocaleCompare(\"profile\",property) == 0)"
    },
    {
        "line": 360,
        "fullcodeline": "if (LocaleCompare(\"rendering-intent\",property) == 0)"
    },
    {
        "line": 379,
        "fullcodeline": "(LocaleCompare(\"standard-deviation\",property) == 0))"
    },
    {
        "line": 381,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),OptionError,"
    },
    {
        "line": 389,
        "fullcodeline": "if (LocaleCompare(\"tile-offset\",property) == 0)"
    },
    {
        "line": 404,
        "fullcodeline": "if (LocaleCompare(\"units\",property) == 0)"
    },
    {
        "line": 420,
        "fullcodeline": "if (LocaleCompare(\"version\",property) == 0)"
    },
    {
        "line": 431,
        "fullcodeline": "if (LocaleCompare(\"width\",property) == 0)"
    },
    {
        "line": 54,
        "fullcodeline": "(void) QueryColorCompliance(value,AllCompliance,"
    },
    {
        "line": 66,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),OptionError,"
    },
    {
        "line": 75,
        "fullcodeline": "colorspace=ParseCommandOption(MagickColorspaceOptions,MagickFalse,"
    },
    {
        "line": 86,
        "fullcodeline": "compose=ParseCommandOption(MagickComposeOptions,MagickFalse,value);"
    },
    {
        "line": 89,
        "fullcodeline": "image->compose=(CompositeOperator) compose;"
    },
    {
        "line": 97,
        "fullcodeline": "compression=ParseCommandOption(MagickCompressOptions,MagickFalse,"
    },
    {
        "line": 101,
        "fullcodeline": "image->compression=(CompressionType) compression;"
    },
    {
        "line": 114,
        "fullcodeline": "flags=ParseGeometry(value,&geometry_info);"
    },
    {
        "line": 135,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),OptionError,"
    },
    {
        "line": 144,
        "fullcodeline": "flags=ParseGeometry(value,&geometry_info);"
    },
    {
        "line": 145,
        "fullcodeline": "image->resolution.x=geometry_info.rho;"
    },
    {
        "line": 146,
        "fullcodeline": "image->resolution.y=geometry_info.sigma;"
    },
    {
        "line": 153,
        "fullcodeline": "image->depth=StringToUnsignedLong(value);"
    },
    {
        "line": 161,
        "fullcodeline": "dispose=ParseCommandOption(MagickDisposeOptions,MagickFalse,value);"
    },
    {
        "line": 164,
        "fullcodeline": "image->dispose=(DisposeType) dispose;"
    },
    {
        "line": 199,
        "fullcodeline": "image->gamma=StringToDouble(value,(char **) NULL);"
    },
    {
        "line": 207,
        "fullcodeline": "gravity=ParseCommandOption(MagickGravityOptions,MagickFalse,value);"
    },
    {
        "line": 210,
        "fullcodeline": "image->gravity=(GravityType) gravity;"
    },
    {
        "line": 220,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),OptionError,"
    },
    {
        "line": 234,
        "fullcodeline": "intensity=ParseCommandOption(MagickIntentOptions,MagickFalse,value);"
    },
    {
        "line": 237,
        "fullcodeline": "image->intensity=(PixelIntensityMethod) intensity;"
    },
    {
        "line": 245,
        "fullcodeline": "rendering_intent=ParseCommandOption(MagickIntentOptions,MagickFalse,"
    },
    {
        "line": 249,
        "fullcodeline": "image->rendering_intent=(RenderingIntent) rendering_intent;"
    },
    {
        "line": 257,
        "fullcodeline": "interpolate=ParseCommandOption(MagickInterpolateOptions,MagickFalse,"
    },
    {
        "line": 261,
        "fullcodeline": "image->interpolate=(PixelInterpolateMethod) interpolate;"
    },
    {
        "line": 289,
        "fullcodeline": "image->iterations=StringToUnsignedLong(value);"
    },
    {
        "line": 299,
        "fullcodeline": "(LocaleCompare(\"min\",property) == 0) ||"
    },
    {
        "line": 324,
        "fullcodeline": "geometry=GetPageGeometry(value);"
    },
    {
        "line": 325,
        "fullcodeline": "flags=ParseAbsoluteGeometry(geometry,&image->page);"
    },
    {
        "line": 326,
        "fullcodeline": "geometry=DestroyString(geometry);"
    },
    {
        "line": 346,
        "fullcodeline": "image_info=AcquireImageInfo();"
    },
    {
        "line": 347,
        "fullcodeline": "(void) CopyMagickString(image_info->filename,value,MagickPathExtent);"
    },
    {
        "line": 348,
        "fullcodeline": "(void) SetImageInfo(image_info,1,exception);"
    },
    {
        "line": 349,
        "fullcodeline": "profile=FileToStringInfo(image_info->filename,~0UL,exception);"
    },
    {
        "line": 352,
        "fullcodeline": "image_info=DestroyImageInfo(image_info);"
    },
    {
        "line": 365,
        "fullcodeline": "rendering_intent=ParseCommandOption(MagickIntentOptions,MagickFalse,"
    },
    {
        "line": 369,
        "fullcodeline": "image->rendering_intent=(RenderingIntent) rendering_intent;"
    },
    {
        "line": 378,
        "fullcodeline": "(LocaleCompare(\"scenes\",property) == 0) ||"
    },
    {
        "line": 394,
        "fullcodeline": "geometry=GetPageGeometry(value);"
    },
    {
        "line": 395,
        "fullcodeline": "flags=ParseAbsoluteGeometry(geometry,&image->tile_offset);"
    },
    {
        "line": 396,
        "fullcodeline": "geometry=DestroyString(geometry);"
    },
    {
        "line": 409,
        "fullcodeline": "units=ParseCommandOption(MagickResolutionOptions,MagickFalse,value);"
    },
    {
        "line": 412,
        "fullcodeline": "image->units=(ResolutionType) units;"
    },
    {
        "line": 422,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),OptionError,"
    },
    {
        "line": 433,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),OptionError,"
    },
    {
        "line": 77,
        "fullcodeline": "if (colorspace < 0)"
    },
    {
        "line": 79,
        "fullcodeline": "return(SetImageColorspace(image,(ColorspaceType) colorspace,exception));"
    },
    {
        "line": 87,
        "fullcodeline": "if (compose < 0)"
    },
    {
        "line": 99,
        "fullcodeline": "if (compression < 0)"
    },
    {
        "line": 115,
        "fullcodeline": "if ((flags & GreaterValue) != 0)"
    },
    {
        "line": 129,
        "fullcodeline": "if ((flags & SigmaValue) != 0)"
    },
    {
        "line": 147,
        "fullcodeline": "if ((flags & SigmaValue) == 0)"
    },
    {
        "line": 162,
        "fullcodeline": "if (dispose < 0)"
    },
    {
        "line": 208,
        "fullcodeline": "if (gravity < 0)"
    },
    {
        "line": 235,
        "fullcodeline": "if (intensity < 0)"
    },
    {
        "line": 247,
        "fullcodeline": "if (rendering_intent < 0)"
    },
    {
        "line": 259,
        "fullcodeline": "if (interpolate < 0)"
    },
    {
        "line": 298,
        "fullcodeline": "(LocaleCompare(\"mean\",property) == 0) ||"
    },
    {
        "line": 350,
        "fullcodeline": "if (profile != (StringInfo *) NULL)"
    },
    {
        "line": 367,
        "fullcodeline": "if (rendering_intent < 0)"
    },
    {
        "line": 377,
        "fullcodeline": "(LocaleCompare(\"skewness\",property) == 0) ||"
    },
    {
        "line": 410,
        "fullcodeline": "if (units < 0)"
    },
    {
        "line": 130,
        "fullcodeline": "image->ticks_per_second=(ssize_t) floor(geometry_info.sigma+0.5);"
    },
    {
        "line": 148,
        "fullcodeline": "image->resolution.y=image->resolution.x;"
    },
    {
        "line": 297,
        "fullcodeline": "(LocaleCompare(\"max\",property) == 0) ||"
    },
    {
        "line": 351,
        "fullcodeline": "status=SetImageProfile(image,image_info->magick,profile,exception);"
    },
    {
        "line": 117,
        "fullcodeline": "if (image->delay > (size_t) floor(geometry_info.rho+0.5))"
    },
    {
        "line": 118,
        "fullcodeline": "image->delay=(size_t) floor(geometry_info.rho+0.5);"
    },
    {
        "line": 121,
        "fullcodeline": "if ((flags & LessValue) != 0)"
    },
    {
        "line": 123,
        "fullcodeline": "if (image->delay < (size_t) floor(geometry_info.rho+0.5))"
    },
    {
        "line": 128,
        "fullcodeline": "image->delay=(size_t) floor(geometry_info.rho+0.5);"
    },
    {
        "line": 124,
        "fullcodeline": "image->delay=(ssize_t)"
    },
    {
        "line": 125,
        "fullcodeline": "floor(geometry_info.sigma+0.5);"
    }
]