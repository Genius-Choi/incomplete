[
    {
        "line": 9,
        "fullcodeline": "int                     result = 0, retry;"
    },
    {
        "line": 14,
        "fullcodeline": "gtco = kzalloc(sizeof(struct gtco), GFP_KERNEL);"
    },
    {
        "line": 15,
        "fullcodeline": "input_dev = input_allocate_device();"
    },
    {
        "line": 23,
        "fullcodeline": "gtco->inputdevice = input_dev;"
    },
    {
        "line": 26,
        "fullcodeline": "gtco->usbdev = interface_to_usbdev(usbinterface);"
    },
    {
        "line": 27,
        "fullcodeline": "gtco->intf = usbinterface;"
    },
    {
        "line": 30,
        "fullcodeline": "gtco->buffer = usb_alloc_coherent(gtco->usbdev, REPORT_MAX_SIZE,"
    },
    {
        "line": 39,
        "fullcodeline": "gtco->urbinfo = usb_alloc_urb(0, GFP_KERNEL);"
    },
    {
        "line": 50,
        "fullcodeline": "endpoint = &usbinterface->altsetting[0].endpoint[0].desc;"
    },
    {
        "line": 53,
        "fullcodeline": "dev_dbg(&usbinterface->dev, \"gtco # interfaces: %d\\n\", usbinterface->num_altsetting);"
    },
    {
        "line": 54,
        "fullcodeline": "dev_dbg(&usbinterface->dev, \"num endpoints:     %d\\n\", usbinterface->cur_altsetting->desc.bNumEndpoints);"
    },
    {
        "line": 55,
        "fullcodeline": "dev_dbg(&usbinterface->dev, \"interface class:   %d\\n\", usbinterface->cur_altsetting->desc.bInterfaceClass);"
    },
    {
        "line": 56,
        "fullcodeline": "dev_dbg(&usbinterface->dev, \"endpoint: attribute:0x%x type:0x%x\\n\", endpoint->bmAttributes, endpoint->bDescriptorType);"
    },
    {
        "line": 60,
        "fullcodeline": "dev_dbg(&usbinterface->dev, \"endpoint extra len:%d\\n\", usbinterface->altsetting[0].extralen);"
    },
    {
        "line": 74,
        "fullcodeline": "dev_dbg(&usbinterface->dev,"
    },
    {
        "line": 78,
        "fullcodeline": "report = kzalloc(le16_to_cpu(hid_desc->wDescriptorLength), GFP_KERNEL);"
    },
    {
        "line": 104,
        "fullcodeline": "kfree(report);"
    },
    {
        "line": 116,
        "fullcodeline": "usb_make_path(gtco->usbdev, gtco->usbpath, sizeof(gtco->usbpath));"
    },
    {
        "line": 117,
        "fullcodeline": "strlcat(gtco->usbpath, \"/input0\", sizeof(gtco->usbpath));"
    },
    {
        "line": 120,
        "fullcodeline": "input_dev->open = gtco_input_open;"
    },
    {
        "line": 121,
        "fullcodeline": "input_dev->close = gtco_input_close;"
    },
    {
        "line": 124,
        "fullcodeline": "input_dev->name = \"GTCO_CalComp\";"
    },
    {
        "line": 125,
        "fullcodeline": "input_dev->phys = gtco->usbpath;"
    },
    {
        "line": 127,
        "fullcodeline": "input_set_drvdata(input_dev, gtco);"
    },
    {
        "line": 130,
        "fullcodeline": "gtco_setup_caps(input_dev);"
    },
    {
        "line": 133,
        "fullcodeline": "usb_to_input_id(gtco->usbdev, &input_dev->id);"
    },
    {
        "line": 134,
        "fullcodeline": "input_dev->dev.parent = &usbinterface->dev;"
    },
    {
        "line": 137,
        "fullcodeline": "endpoint = &usbinterface->altsetting[0].endpoint[0].desc;"
    },
    {
        "line": 139,
        "fullcodeline": "usb_fill_int_urb(gtco->urbinfo,"
    },
    {
        "line": 149,
        "fullcodeline": "gtco->urbinfo->transfer_dma = gtco->buf_dma;"
    },
    {
        "line": 150,
        "fullcodeline": "gtco->urbinfo->transfer_flags |= URB_NO_TRANSFER_DMA_MAP;"
    },
    {
        "line": 153,
        "fullcodeline": "usb_set_intfdata(usbinterface, gtco);"
    },
    {
        "line": 156,
        "fullcodeline": "error = input_register_device(input_dev);"
    },
    {
        "line": 163,
        "fullcodeline": "usb_free_urb(gtco->urbinfo);"
    },
    {
        "line": 165,
        "fullcodeline": "usb_free_coherent(gtco->usbdev, REPORT_MAX_SIZE,"
    },
    {
        "line": 16,
        "fullcodeline": "if (!gtco || !input_dev) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (!gtco->buffer) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (!gtco->urbinfo) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (usb_endpoint_xfer_int(endpoint))"
    },
    {
        "line": 66,
        "fullcodeline": "if (usb_get_extra_descriptor(usbinterface->cur_altsetting,"
    },
    {
        "line": 79,
        "fullcodeline": "if (!report) {"
    },
    {
        "line": 86,
        "fullcodeline": "for (retry = 0; retry < 3; retry++) {"
    },
    {
        "line": 107,
        "fullcodeline": "if (result != le16_to_cpu(hid_desc->wDescriptorLength)) {"
    },
    {
        "line": 141,
        "fullcodeline": "usb_rcvintpipe(gtco->usbdev,"
    },
    {
        "line": 18,
        "fullcodeline": "error = -ENOMEM;"
    },
    {
        "line": 34,
        "fullcodeline": "error = -ENOMEM;"
    },
    {
        "line": 42,
        "fullcodeline": "error = -ENOMEM;"
    },
    {
        "line": 58,
        "fullcodeline": "dev_dbg(&usbinterface->dev, \"endpoint: we have interrupt endpoint\\n\");"
    },
    {
        "line": 70,
        "fullcodeline": "error = -EIO;"
    },
    {
        "line": 81,
        "fullcodeline": "error = -ENOMEM;"
    },
    {
        "line": 87,
        "fullcodeline": "result = usb_control_msg(gtco->usbdev,"
    },
    {
        "line": 97,
        "fullcodeline": "dev_dbg(&usbinterface->dev, \"usb_control_msg result: %d\\n\", result);"
    },
    {
        "line": 111,
        "fullcodeline": "error = -EIO;"
    },
    {
        "line": 98,
        "fullcodeline": "if (result == le16_to_cpu(hid_desc->wDescriptorLength)) {"
    },
    {
        "line": 88,
        "fullcodeline": "usb_rcvctrlpipe(gtco->usbdev, 0),"
    },
    {
        "line": 90,
        "fullcodeline": "USB_RECIP_INTERFACE | USB_DIR_IN,"
    },
    {
        "line": 91,
        "fullcodeline": "REPORT_DEVICE_TYPE << 8,"
    },
    {
        "line": 94,
        "fullcodeline": "le16_to_cpu(hid_desc->wDescriptorLength),"
    },
    {
        "line": 99,
        "fullcodeline": "parse_hid_report_descriptor(gtco, report, result);"
    }
]