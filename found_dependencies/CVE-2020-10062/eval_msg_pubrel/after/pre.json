[
    {
        "line": 3,
        "fullcodeline": "struct mqtt_pubrel_param *param ="
    },
    {
        "line": 11,
        "fullcodeline": "memset(&dec_param, 0, sizeof(dec_param));"
    },
    {
        "line": 13,
        "fullcodeline": "buf.cur = client.tx_buf;"
    },
    {
        "line": 14,
        "fullcodeline": "buf.end = client.tx_buf + client.tx_buf_size;"
    },
    {
        "line": 16,
        "fullcodeline": "rc = publish_release_encode(param, &buf);"
    },
    {
        "line": 19,
        "fullcodeline": "zassert_false(rc, \"publish_release_encode failed\");"
    },
    {
        "line": 21,
        "fullcodeline": "rc = eval_buffers(&buf, mqtt_test->expected, mqtt_test->expected_len);"
    },
    {
        "line": 23,
        "fullcodeline": "zassert_false(rc, \"eval_buffers failed\");"
    },
    {
        "line": 25,
        "fullcodeline": "rc = fixed_header_decode(&buf, &type_and_flags, &length);"
    },
    {
        "line": 27,
        "fullcodeline": "zassert_false(rc, \"fixed_header_decode failed\");"
    },
    {
        "line": 29,
        "fullcodeline": "rc = publish_release_decode(&buf, &dec_param);"
    },
    {
        "line": 31,
        "fullcodeline": "zassert_false(rc, \"publish_release_decode failed\");"
    },
    {
        "line": 33,
        "fullcodeline": "zassert_equal(dec_param.message_id, param->message_id,"
    },
    {
        "line": 4,
        "fullcodeline": "(struct mqtt_pubrel_param *)mqtt_test->ctx;"
    }
]