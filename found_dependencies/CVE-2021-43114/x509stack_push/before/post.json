[
    {
        "line": 15,
        "fullcodeline": "repo->level = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "work_repo_level = working_repo_peek_level();"
    },
    {
        "line": 17,
        "fullcodeline": "head_repo = SLIST_FIRST(&stack->levels);"
    },
    {
        "line": 21,
        "fullcodeline": "SLIST_INSERT_HEAD(&stack->levels, repo, next);"
    },
    {
        "line": 29,
        "fullcodeline": "meta->uri = uri;"
    },
    {
        "line": 30,
        "fullcodeline": "uri_refget(uri);"
    },
    {
        "line": 31,
        "fullcodeline": "serial_numbers_init(&meta->serials);"
    },
    {
        "line": 32,
        "fullcodeline": "subjects_init(&meta->subjects);"
    },
    {
        "line": 34,
        "fullcodeline": "meta->resources = resources_create(false);"
    },
    {
        "line": 39,
        "fullcodeline": "resources_set_policy(meta->resources, policy);"
    },
    {
        "line": 40,
        "fullcodeline": "error = certificate_get_resources(x509, meta->resources, type);"
    },
    {
        "line": 61,
        "fullcodeline": "defer_separator->type = DNT_SEPARATOR;"
    },
    {
        "line": 63,
        "fullcodeline": "ok = sk_X509_push(stack->x509s, x509);"
    },
    {
        "line": 70,
        "fullcodeline": "SLIST_INSERT_HEAD(&stack->defers, defer_separator, next);"
    },
    {
        "line": 71,
        "fullcodeline": "SLIST_INSERT_HEAD(&stack->metas, meta, next);"
    },
    {
        "line": 75,
        "fullcodeline": "end5:\tresources_destroy(meta->resources);"
    },
    {
        "line": 76,
        "fullcodeline": "end4:\tsubjects_cleanup(&meta->subjects, subject_cleanup);"
    },
    {
        "line": 77,
        "fullcodeline": "serial_numbers_cleanup(&meta->serials, serial_cleanup);"
    },
    {
        "line": 78,
        "fullcodeline": "uri_refput(meta->uri);"
    },
    {
        "line": 79,
        "fullcodeline": "free(meta);"
    },
    {
        "line": 80,
        "fullcodeline": "end3:\tSLIST_REMOVE_HEAD(&stack->levels, next);"
    },
    {
        "line": 81,
        "fullcodeline": "free(repo);"
    },
    {
        "line": 12,
        "fullcodeline": "if (repo == NULL)"
    },
    {
        "line": 18,
        "fullcodeline": "if (head_repo != NULL && work_repo_level > head_repo->level)"
    },
    {
        "line": 24,
        "fullcodeline": "if (meta == NULL) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (meta->resources == NULL) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (type == TA && resources_empty(meta->resources)) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (defer_separator == NULL) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (ok <= 0) {"
    },
    {
        "line": 19,
        "fullcodeline": "repo->level = work_repo_level;"
    },
    {
        "line": 25,
        "fullcodeline": "error = pr_enomem();"
    },
    {
        "line": 36,
        "fullcodeline": "error = pr_enomem();"
    },
    {
        "line": 52,
        "fullcodeline": "error = pr_val_err(\"Trust Anchor certificate does not define any number resources.\");"
    },
    {
        "line": 58,
        "fullcodeline": "error = pr_enomem();"
    },
    {
        "line": 65,
        "fullcodeline": "error = val_crypto_err("
    },
    {
        "line": 13,
        "fullcodeline": "return pr_enomem();"
    }
]