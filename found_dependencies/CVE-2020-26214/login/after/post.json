[
    {
        "line": 32,
        "fullcodeline": "userdn = current_app.config['LDAP_DOMAINS'][domain] % username"
    },
    {
        "line": 54,
        "fullcodeline": "user = User.find_by_username(username=login)"
    },
    {
        "line": 64,
        "fullcodeline": "groups = list()"
    },
    {
        "line": 84,
        "fullcodeline": "user.update_last_login()"
    },
    {
        "line": 86,
        "fullcodeline": "scopes = Permission.lookup(login=login, roles=user.roles + groups)"
    },
    {
        "line": 87,
        "fullcodeline": "customers = get_customers(login=login, groups=[user.domain] + groups)"
    },
    {
        "line": 89,
        "fullcodeline": "auth_audit_trail.send(current_app._get_current_object(), event='basic-ldap-login', message='user login via LDAP',"
    },
    {
        "line": 94,
        "fullcodeline": "token = create_token(user_id=user.id, name=user.name, login=user.email, provider='ldap',"
    },
    {
        "line": 13,
        "fullcodeline": "if not password:"
    },
    {
        "line": 29,
        "fullcodeline": "if domain not in current_app.config['LDAP_DOMAINS']:"
    },
    {
        "line": 45,
        "fullcodeline": "if not email_verified:"
    },
    {
        "line": 55,
        "fullcodeline": "if not user:"
    },
    {
        "line": 82,
        "fullcodeline": "if user.status != 'active':"
    },
    {
        "line": 97,
        "fullcodeline": "return jsonify(token=token.tokenize)"
    },
    {
        "line": 4,
        "fullcodeline": "ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_ALLOW)"
    },
    {
        "line": 8,
        "fullcodeline": "login = request.json.get('username', None) or request.json['email']"
    },
    {
        "line": 14,
        "fullcodeline": "raise ApiError('password not allowed to be empty', 401)"
    },
    {
        "line": 30,
        "fullcodeline": "raise ApiError('unauthorized domain', 403)"
    },
    {
        "line": 36,
        "fullcodeline": "trace_level = 2 if current_app.debug else 0"
    },
    {
        "line": 37,
        "fullcodeline": "ldap_connection = ldap.initialize(current_app.config['LDAP_URL'], trace_level=trace_level)"
    },
    {
        "line": 38,
        "fullcodeline": "ldap_connection.simple_bind_s(userdn, password)"
    },
    {
        "line": 56,
        "fullcodeline": "user = User(name=username, login=login, password='', email=email,"
    },
    {
        "line": 66,
        "fullcodeline": "groups_filters = current_app.config.get('LDAP_DOMAINS_GROUP', {})"
    },
    {
        "line": 67,
        "fullcodeline": "base_dns = current_app.config.get('LDAP_DOMAINS_BASEDN', {})"
    },
    {
        "line": 83,
        "fullcodeline": "raise ApiError('User {} not active'.format(login), 403)"
    },
    {
        "line": 17,
        "fullcodeline": "if '\\\\' in login:"
    },
    {
        "line": 68,
        "fullcodeline": "if domain in groups_filters and domain in base_dns:"
    },
    {
        "line": 11,
        "fullcodeline": "raise ApiError(\"must supply 'username' and 'password'\", 401)"
    },
    {
        "line": 19,
        "fullcodeline": "email = ''"
    },
    {
        "line": 20,
        "fullcodeline": "email_verified = False"
    },
    {
        "line": 23,
        "fullcodeline": "email = login"
    },
    {
        "line": 24,
        "fullcodeline": "email_verified = True"
    },
    {
        "line": 26,
        "fullcodeline": "raise ApiError('expected username with domain', 401)"
    },
    {
        "line": 40,
        "fullcodeline": "raise ApiError('invalid username or password', 401)"
    },
    {
        "line": 42,
        "fullcodeline": "raise ApiError(str(e), 500)"
    },
    {
        "line": 47,
        "fullcodeline": "ldap_result = ldap_connection.search_s(userdn, ldap.SCOPE_SUBTREE, '(objectClass=*)', ['mail'])"
    },
    {
        "line": 48,
        "fullcodeline": "email = ldap_result[0][1]['mail'][0].decode(sys.stdout.encoding)"
    },
    {
        "line": 49,
        "fullcodeline": "email_verified = True"
    },
    {
        "line": 59,
        "fullcodeline": "user = user.create()"
    },
    {
        "line": 69,
        "fullcodeline": "resultID = ldap_connection.search("
    },
    {
        "line": 79,
        "fullcodeline": "raise ApiError(str(e), 500)"
    },
    {
        "line": 18,
        "fullcodeline": "domain, username = login.split('\\\\')"
    },
    {
        "line": 22,
        "fullcodeline": "username, domain = login.split('@')"
    },
    {
        "line": 75,
        "fullcodeline": "resultTypes, results = ldap_connection.result(resultID)"
    },
    {
        "line": 76,
        "fullcodeline": "for _dn, attributes in results:"
    },
    {
        "line": 51,
        "fullcodeline": "email = '{}@{}'.format(username, domain)"
    },
    {
        "line": 61,
        "fullcodeline": "ApiError(str(e), 500)"
    },
    {
        "line": 73,
        "fullcodeline": "['cn']"
    },
    {
        "line": 72,
        "fullcodeline": "groups_filters[domain].format(username=username, email=email, userdn=userdn),"
    },
    {
        "line": 77,
        "fullcodeline": "groups.append(attributes['cn'][0].decode('utf-8'))"
    }
]