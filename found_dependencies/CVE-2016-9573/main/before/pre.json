[
    {
        "line": 4,
        "fullcodeline": "opj_image_t* image = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "opj_stream_t *l_stream = NULL;\t\t\t\t/* Stream */"
    },
    {
        "line": 6,
        "fullcodeline": "opj_codec_t* l_codec = NULL;\t\t\t\t/* Handle to a decompressor */"
    },
    {
        "line": 7,
        "fullcodeline": "opj_codestream_index_t* cstr_index = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "dircnt_t *dirptr = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "int failed = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "OPJ_FLOAT64 t, tCumulative = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "OPJ_UINT32 numDecompressedImages = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "set_default_parameters(&parameters);"
    },
    {
        "line": 20,
        "fullcodeline": "memset(&img_fol,0,sizeof(img_fol_t));"
    },
    {
        "line": 23,
        "fullcodeline": "if(parse_cmdline_decoder(argc, argv, &parameters,&img_fol) == 1) {"
    },
    {
        "line": 28,
        "fullcodeline": "if(img_fol.set_imgdir==1){"
    },
    {
        "line": 63,
        "fullcodeline": "for(imageno = 0; imageno < num_images ; imageno++)\t{"
    },
    {
        "line": 394,
        "fullcodeline": "if(failed && img_fol.imgdirpath) free(img_fol.imgdirpath);"
    },
    {
        "line": 403,
        "fullcodeline": "return failed ? EXIT_FAILURE : EXIT_SUCCESS;"
    },
    {
        "line": 24,
        "fullcodeline": "failed = 1; goto fin;"
    },
    {
        "line": 30,
        "fullcodeline": "num_images=get_num_images(img_fol.imgdirpath);"
    },
    {
        "line": 32,
        "fullcodeline": "dirptr=(dircnt_t*)malloc(sizeof(dircnt_t));"
    },
    {
        "line": 37,
        "fullcodeline": "dirptr->filename_buf = (char*)malloc((size_t)num_images*OPJ_PATH_LEN*sizeof(char));\t/* Stores at max 10 image file names*/"
    },
    {
        "line": 42,
        "fullcodeline": "dirptr->filename = (char**) malloc((size_t)num_images*sizeof(char*));"
    },
    {
        "line": 65,
        "fullcodeline": "fprintf(stderr,\"\\n\");"
    },
    {
        "line": 78,
        "fullcodeline": "l_stream = opj_stream_create_default_file_stream(parameters.infile,1);"
    },
    {
        "line": 114,
        "fullcodeline": "opj_set_info_handler(l_codec, info_callback,00);"
    },
    {
        "line": 115,
        "fullcodeline": "opj_set_warning_handler(l_codec, warning_callback,00);"
    },
    {
        "line": 116,
        "fullcodeline": "opj_set_error_handler(l_codec, error_callback,00);"
    },
    {
        "line": 118,
        "fullcodeline": "t = opj_clock();"
    },
    {
        "line": 185,
        "fullcodeline": "tCumulative += opj_clock() - t;"
    },
    {
        "line": 186,
        "fullcodeline": "numDecompressedImages++;"
    },
    {
        "line": 385,
        "fullcodeline": "opj_image_destroy(image);"
    },
    {
        "line": 33,
        "fullcodeline": "if(!dirptr){"
    },
    {
        "line": 38,
        "fullcodeline": "if(!dirptr->filename_buf){"
    },
    {
        "line": 44,
        "fullcodeline": "if(!dirptr->filename){"
    },
    {
        "line": 47,
        "fullcodeline": "for(it_image=0;it_image<num_images;it_image++){"
    },
    {
        "line": 54,
        "fullcodeline": "if (num_images==0){"
    },
    {
        "line": 59,
        "fullcodeline": "num_images=1;"
    },
    {
        "line": 67,
        "fullcodeline": "if(img_fol.set_imgdir==1){"
    },
    {
        "line": 79,
        "fullcodeline": "if (!l_stream){"
    },
    {
        "line": 144,
        "fullcodeline": "if (!parameters.nb_tile_to_decode) {"
    },
    {
        "line": 198,
        "fullcodeline": "if(image->color_space == OPJ_CLRSPC_SYCC){"
    },
    {
        "line": 221,
        "fullcodeline": "if (parameters.precision != NULL)"
    },
    {
        "line": 34,
        "fullcodeline": "destroy_parameters(&parameters);"
    },
    {
        "line": 39,
        "fullcodeline": "failed = 1; goto fin;"
    },
    {
        "line": 45,
        "fullcodeline": "failed = 1; goto fin;"
    },
    {
        "line": 48,
        "fullcodeline": "dirptr->filename[it_image] = dirptr->filename_buf + it_image*OPJ_PATH_LEN;"
    },
    {
        "line": 51,
        "fullcodeline": "if(load_images(dirptr,img_fol.imgdirpath)==1){"
    },
    {
        "line": 52,
        "fullcodeline": "failed = 1; goto fin;"
    },
    {
        "line": 55,
        "fullcodeline": "fprintf(stdout,\"Folder is empty\\n\");"
    },
    {
        "line": 56,
        "fullcodeline": "failed = 1; goto fin;"
    },
    {
        "line": 80,
        "fullcodeline": "fprintf(stderr, \"ERROR -> failed to create the stream from the file %s\\n\", parameters.infile);"
    },
    {
        "line": 81,
        "fullcodeline": "failed = 1; goto fin;"
    },
    {
        "line": 107,
        "fullcodeline": "fprintf(stderr, \"skipping file..\\n\");"
    },
    {
        "line": 108,
        "fullcodeline": "destroy_parameters(&parameters);"
    },
    {
        "line": 121,
        "fullcodeline": "if ( !opj_setup_decoder(l_codec, &(parameters.core)) ){"
    },
    {
        "line": 125,
        "fullcodeline": "failed = 1; goto fin;"
    },
    {
        "line": 128,
        "fullcodeline": "if( parameters.num_threads >= 1 && !opj_codec_set_threads(l_codec, parameters.num_threads) ) {"
    },
    {
        "line": 132,
        "fullcodeline": "failed = 1; goto fin;"
    },
    {
        "line": 136,
        "fullcodeline": "if(! opj_read_header(l_stream, l_codec, &image)){"
    },
    {
        "line": 141,
        "fullcodeline": "failed = 1; goto fin;"
    },
    {
        "line": 191,
        "fullcodeline": "if( image->color_space != OPJ_CLRSPC_SYCC"
    },
    {
        "line": 193,
        "fullcodeline": "&& image->comps[1].dx != 1 )"
    },
    {
        "line": 194,
        "fullcodeline": "image->color_space = OPJ_CLRSPC_SYCC;"
    },
    {
        "line": 199,
        "fullcodeline": "color_sycc_to_rgb(image);"
    },
    {
        "line": 216,
        "fullcodeline": "image->icc_profile_buf = NULL; image->icc_profile_len = 0;"
    },
    {
        "line": 256,
        "fullcodeline": "image = upsample_image_components(image);"
    },
    {
        "line": 374,
        "fullcodeline": "fprintf(stderr,\"[ERROR] Outfile %s not generated\\n\",parameters.outfile);"
    },
    {
        "line": 375,
        "fullcodeline": "failed = 1;"
    },
    {
        "line": 396,
        "fullcodeline": "if(dirptr->filename) free(dirptr->filename);"
    },
    {
        "line": 397,
        "fullcodeline": "if(dirptr->filename_buf) free(dirptr->filename_buf);"
    },
    {
        "line": 401,
        "fullcodeline": "fprintf(stdout, \"decode time: %d ms\\n\", (int)( (tCumulative * 1000.0) / (OPJ_FLOAT64)numDecompressedImages));"
    },
    {
        "line": 68,
        "fullcodeline": "if (get_next_file(imageno, dirptr,&img_fol, &parameters)) {"
    },
    {
        "line": 91,
        "fullcodeline": "l_codec = opj_create_decompress(OPJ_CODEC_J2K);"
    },
    {
        "line": 97,
        "fullcodeline": "l_codec = opj_create_decompress(OPJ_CODEC_JP2);"
    },
    {
        "line": 103,
        "fullcodeline": "l_codec = opj_create_decompress(OPJ_CODEC_JPT);"
    },
    {
        "line": 182,
        "fullcodeline": "fprintf(stdout, \"tile %d is decoded!\\n\\n\", parameters.tile_index);"
    },
    {
        "line": 192,
        "fullcodeline": "&& image->numcomps == 3 && image->comps[0].dx == image->comps[0].dy"
    },
    {
        "line": 224,
        "fullcodeline": "for (compno = 0; compno < image->numcomps; ++compno)"
    },
    {
        "line": 257,
        "fullcodeline": "if (image == NULL) {"
    },
    {
        "line": 280,
        "fullcodeline": "if (image == NULL) {"
    },
    {
        "line": 291,
        "fullcodeline": "if (imagetopnm(image, parameters.outfile, parameters.split_pnm)) {"
    },
    {
        "line": 301,
        "fullcodeline": "if(imagetopgx(image, parameters.outfile)){"
    },
    {
        "line": 311,
        "fullcodeline": "if(imagetobmp(image, parameters.outfile)){"
    },
    {
        "line": 331,
        "fullcodeline": "if(imagetoraw(image, parameters.outfile)){"
    },
    {
        "line": 341,
        "fullcodeline": "if(imagetorawl(image, parameters.outfile)){"
    },
    {
        "line": 351,
        "fullcodeline": "if(imagetotga(image, parameters.outfile)){"
    },
    {
        "line": 390,
        "fullcodeline": "if(failed) (void)remove(parameters.outfile); /* ignore return value */"
    },
    {
        "line": 69,
        "fullcodeline": "fprintf(stderr,\"skipping file...\\n\");"
    },
    {
        "line": 70,
        "fullcodeline": "destroy_parameters(&parameters);"
    },
    {
        "line": 146,
        "fullcodeline": "if (!opj_set_decode_area(l_codec, image, (OPJ_INT32)parameters.DA_x0,"
    },
    {
        "line": 152,
        "fullcodeline": "failed = 1; goto fin;"
    },
    {
        "line": 156,
        "fullcodeline": "if (!(opj_decode(l_codec, l_stream, image) && opj_end_decompress(l_codec,\tl_stream))) {"
    },
    {
        "line": 161,
        "fullcodeline": "failed = 1; goto fin;"
    },
    {
        "line": 195,
        "fullcodeline": "else if (image->numcomps <= 2)"
    },
    {
        "line": 226,
        "fullcodeline": "OPJ_UINT32 precno = compno;"
    },
    {
        "line": 233,
        "fullcodeline": "prec = parameters.precision[precno].prec;"
    },
    {
        "line": 260,
        "fullcodeline": "failed = 1; goto fin;"
    },
    {
        "line": 272,
        "fullcodeline": "image = convert_gray_to_rgb(image);"
    },
    {
        "line": 275,
        "fullcodeline": "fprintf(stderr, \"ERROR -> opj_decompress: don't know how to convert image to RGB colorspace!\\n\");"
    },
    {
        "line": 277,
        "fullcodeline": "image = NULL;"
    },
    {
        "line": 283,
        "fullcodeline": "failed = 1; goto fin;"
    },
    {
        "line": 292,
        "fullcodeline": "fprintf(stderr,\"[ERROR] Outfile %s not generated\\n\",parameters.outfile);"
    },
    {
        "line": 293,
        "fullcodeline": "failed = 1;"
    },
    {
        "line": 302,
        "fullcodeline": "fprintf(stderr,\"[ERROR] Outfile %s not generated\\n\",parameters.outfile);"
    },
    {
        "line": 303,
        "fullcodeline": "failed = 1;"
    },
    {
        "line": 312,
        "fullcodeline": "fprintf(stderr,\"[ERROR] Outfile %s not generated\\n\",parameters.outfile);"
    },
    {
        "line": 313,
        "fullcodeline": "failed = 1;"
    },
    {
        "line": 332,
        "fullcodeline": "fprintf(stderr,\"[ERROR] Error generating raw file. Outfile %s not generated\\n\",parameters.outfile);"
    },
    {
        "line": 333,
        "fullcodeline": "failed = 1;"
    },
    {
        "line": 342,
        "fullcodeline": "fprintf(stderr,\"[ERROR] Error generating rawl file. Outfile %s not generated\\n\",parameters.outfile);"
    },
    {
        "line": 343,
        "fullcodeline": "failed = 1;"
    },
    {
        "line": 352,
        "fullcodeline": "fprintf(stderr,\"[ERROR] Error generating tga file. Outfile %s not generated\\n\",parameters.outfile);"
    },
    {
        "line": 353,
        "fullcodeline": "failed = 1;"
    },
    {
        "line": 175,
        "fullcodeline": "if (!opj_get_decoded_tile(l_codec, l_stream, image, parameters.tile_index)) {"
    },
    {
        "line": 180,
        "fullcodeline": "failed = 1; goto fin;"
    },
    {
        "line": 196,
        "fullcodeline": "image->color_space = OPJ_CLRSPC_GRAY;"
    },
    {
        "line": 201,
        "fullcodeline": "else if((image->color_space == OPJ_CLRSPC_CMYK) && (parameters.cod_format != TIF_DFMT)){"
    },
    {
        "line": 202,
        "fullcodeline": "color_cmyk_to_rgb(image);"
    },
    {
        "line": 229,
        "fullcodeline": "if (precno >= parameters.nb_precision) {"
    },
    {
        "line": 234,
        "fullcodeline": "if (prec == 0) {"
    },
    {
        "line": 296,
        "fullcodeline": "fprintf(stdout,\"[INFO] Generated Outfile %s\\n\",parameters.outfile);"
    },
    {
        "line": 306,
        "fullcodeline": "fprintf(stdout,\"[INFO] Generated Outfile %s\\n\",parameters.outfile);"
    },
    {
        "line": 316,
        "fullcodeline": "fprintf(stdout,\"[INFO] Generated Outfile %s\\n\",parameters.outfile);"
    },
    {
        "line": 336,
        "fullcodeline": "fprintf(stdout,\"[INFO] Generated Outfile %s\\n\",parameters.outfile);"
    },
    {
        "line": 346,
        "fullcodeline": "fprintf(stdout,\"[INFO] Generated Outfile %s\\n\",parameters.outfile);"
    },
    {
        "line": 356,
        "fullcodeline": "fprintf(stdout,\"[INFO] Generated Outfile %s\\n\",parameters.outfile);"
    },
    {
        "line": 235,
        "fullcodeline": "prec = image->comps[compno].prec;"
    },
    {
        "line": 240,
        "fullcodeline": "clip_component(&(image->comps[compno]), prec);"
    },
    {
        "line": 243,
        "fullcodeline": "scale_component(&(image->comps[compno]), prec);"
    },
    {
        "line": 204,
        "fullcodeline": "else if(image->color_space == OPJ_CLRSPC_EYCC){"
    },
    {
        "line": 230,
        "fullcodeline": "precno = parameters.nb_precision - 1U;"
    },
    {
        "line": 205,
        "fullcodeline": "color_esycc_to_rgb(image);"
    }
]