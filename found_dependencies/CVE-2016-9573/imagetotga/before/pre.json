[
    {
        "line": 12,
        "fullcodeline": "fails = 1;"
    },
    {
        "line": 14,
        "fullcodeline": "fdest = fopen(outfile, \"wb\");"
    },
    {
        "line": 30,
        "fullcodeline": "width  = (int)image->comps[0].w;"
    },
    {
        "line": 31,
        "fullcodeline": "height = (int)image->comps[0].h;"
    },
    {
        "line": 37,
        "fullcodeline": "bpp = write_alpha ? 32 : 24;"
    },
    {
        "line": 44,
        "fullcodeline": "scale = 255.0f / (float)((1<<image->comps[0].prec)-1);"
    },
    {
        "line": 46,
        "fullcodeline": "adjustR = (image->comps[0].sgnd ? 1 << (image->comps[0].prec - 1) : 0);"
    },
    {
        "line": 47,
        "fullcodeline": "adjustG = (image->comps[1].sgnd ? 1 << (image->comps[1].prec - 1) : 0);"
    },
    {
        "line": 48,
        "fullcodeline": "adjustB = (image->comps[2].sgnd ? 1 << (image->comps[2].prec - 1) : 0);"
    },
    {
        "line": 113,
        "fullcodeline": "fails = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "if (!fdest) {"
    },
    {
        "line": 20,
        "fullcodeline": "for (i = 0; i < image->numcomps-1; i++)\t{"
    },
    {
        "line": 34,
        "fullcodeline": "write_alpha = (image->numcomps==2) || (image->numcomps==4);"
    },
    {
        "line": 42,
        "fullcodeline": "alpha_channel = image->numcomps-1;"
    },
    {
        "line": 50,
        "fullcodeline": "for (y=0; y < height; y++)"
    },
    {
        "line": 16,
        "fullcodeline": "fprintf(stderr, \"ERROR -> failed to open %s for writing\\n\", outfile);"
    },
    {
        "line": 39,
        "fullcodeline": "if (!tga_writeheader(fdest, bpp, width , height, OPJ_TRUE))"
    },
    {
        "line": 52,
        "fullcodeline": "unsigned int index= (unsigned int)(y*width);"
    },
    {
        "line": 54,
        "fullcodeline": "for (x=0; x < width; x++, index++)"
    },
    {
        "line": 21,
        "fullcodeline": "if ((image->comps[0].dx != image->comps[i+1].dx)"
    },
    {
        "line": 23,
        "fullcodeline": "||(image->comps[0].prec != image->comps[i+1].prec))\t{"
    },
    {
        "line": 56,
        "fullcodeline": "r = (float)(image->comps[0].data[index] + adjustR);"
    },
    {
        "line": 71,
        "fullcodeline": "value = (unsigned char)(b*scale);"
    },
    {
        "line": 72,
        "fullcodeline": "res = fwrite(&value,1,1,fdest);"
    },
    {
        "line": 80,
        "fullcodeline": "value = (unsigned char)(g*scale);"
    },
    {
        "line": 81,
        "fullcodeline": "res = fwrite(&value,1,1,fdest);"
    },
    {
        "line": 89,
        "fullcodeline": "value = (unsigned char)(r*scale);"
    },
    {
        "line": 90,
        "fullcodeline": "res = fwrite(&value,1,1,fdest);"
    },
    {
        "line": 22,
        "fullcodeline": "||(image->comps[0].dy != image->comps[i+1].dy)"
    },
    {
        "line": 70,
        "fullcodeline": "if(b > 255.) b = 255.; else if(b < 0.) b = 0.;"
    },
    {
        "line": 79,
        "fullcodeline": "if(g > 255.) g = 255.; else if(g < 0.) g = 0.;"
    },
    {
        "line": 88,
        "fullcodeline": "if(r > 255.) r = 255.; else if(r < 0.) r = 0.;"
    },
    {
        "line": 60,
        "fullcodeline": "g = (float)(image->comps[1].data[index] + adjustG);"
    },
    {
        "line": 61,
        "fullcodeline": "b = (float)(image->comps[2].data[index] + adjustB);"
    },
    {
        "line": 100,
        "fullcodeline": "a = (float)(image->comps[alpha_channel].data[index]);"
    },
    {
        "line": 102,
        "fullcodeline": "value = (unsigned char)(a*scale);"
    },
    {
        "line": 103,
        "fullcodeline": "res = fwrite(&value,1,1,fdest);"
    },
    {
        "line": 65,
        "fullcodeline": "g = r;"
    },
    {
        "line": 66,
        "fullcodeline": "b = r;"
    },
    {
        "line": 101,
        "fullcodeline": "if(a > 255.) a = 255.; else if(a < 0.) a = 0.;"
    }
]