[
    {
        "line": 3,
        "fullcodeline": "GF_Err e = GF_OK;"
    },
    {
        "line": 5,
        "fullcodeline": "GF_PropertyEntry *pe=NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "count = gf_list_count(ctx->tracks);"
    },
    {
        "line": 201,
        "fullcodeline": "gf_filter_release_property(pe);"
    },
    {
        "line": 8,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 203,
        "fullcodeline": "if (ctx->boxpatch && !ctx->box_patched) {"
    },
    {
        "line": 9,
        "fullcodeline": "u32 ctts_mode = ctx->ctmode;"
    },
    {
        "line": 11,
        "fullcodeline": "Bool has_bframes = GF_FALSE;"
    },
    {
        "line": 12,
        "fullcodeline": "TrackWriter *tkw = gf_list_get(ctx->tracks, i);"
    },
    {
        "line": 14,
        "fullcodeline": "p = gf_filter_pid_get_property(tkw->ipid, GF_PROP_PID_ISOM_FORCE_NEGCTTS);"
    },
    {
        "line": 77,
        "fullcodeline": "gf_isom_purge_track_reference(ctx->file, tkw->track_num);"
    },
    {
        "line": 137,
        "fullcodeline": "mp4_mux_set_hevc_groups(ctx, tkw);"
    },
    {
        "line": 139,
        "fullcodeline": "p = gf_filter_pid_get_info_str(tkw->ipid, \"ttxt:rem_last\", &pe);"
    },
    {
        "line": 143,
        "fullcodeline": "p = gf_filter_pid_get_info_str(tkw->ipid, \"ttxt:last_dur\", &pe);"
    },
    {
        "line": 151,
        "fullcodeline": "p = gf_filter_pid_get_info(tkw->ipid, GF_PROP_PID_FORCED_SUB, &pe);"
    },
    {
        "line": 204,
        "fullcodeline": "e = gf_isom_apply_box_patch(ctx->file, 0, ctx->boxpatch, GF_FALSE);"
    },
    {
        "line": 208,
        "fullcodeline": "ctx->box_patched = GF_TRUE;"
    },
    {
        "line": 244,
        "fullcodeline": "ctx->file = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "if (p && p->value.boolean) ctts_mode = MP4MX_CT_NEGCTTS;"
    },
    {
        "line": 17,
        "fullcodeline": "if (tkw->min_neg_ctts<0) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (ctx->importer && ctx->dur.num && ctx->dur.den) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (tkw->codecid == GF_CODECID_MPEG4_PART2) {"
    },
    {
        "line": 125,
        "fullcodeline": "if ((tkw->nb_samples == 1) && (ctx->dur.num>0) && ctx->dur.den) {"
    },
    {
        "line": 140,
        "fullcodeline": "if (p && p->value.boolean)"
    },
    {
        "line": 156,
        "fullcodeline": "if (tkw->is_nalu && ctx->pack_nal && (gf_isom_get_mode(ctx->file)!=GF_ISOM_OPEN_WRITE)) {"
    },
    {
        "line": 185,
        "fullcodeline": "if (ctx->btrt && !tkw->skip_bitrate_update && ((tkw->nb_samples>1) || ctx->m4sys) )"
    },
    {
        "line": 188,
        "fullcodeline": "if (!tkw->box_patched) {"
    },
    {
        "line": 248,
        "fullcodeline": "ctx->file = NULL;"
    },
    {
        "line": 31,
        "fullcodeline": "has_bframes = GF_TRUE;"
    },
    {
        "line": 41,
        "fullcodeline": "u64 min_ts = tkw->min_ts_seek_plus_one - 1;"
    },
    {
        "line": 42,
        "fullcodeline": "u64 mdur = gf_isom_get_media_duration(ctx->file, tkw->track_num);"
    },
    {
        "line": 43,
        "fullcodeline": "u32 delay = 0;"
    },
    {
        "line": 61,
        "fullcodeline": "mdur += delay;"
    },
    {
        "line": 66,
        "fullcodeline": "gf_isom_remove_edits(ctx->file, tkw->track_num);"
    },
    {
        "line": 69,
        "fullcodeline": "gf_isom_set_edit(ctx->file, tkw->track_num, tkw->empty_init_dur, mdur, min_ts, GF_ISOM_EDIT_NORMAL);"
    },
    {
        "line": 74,
        "fullcodeline": "gf_isom_force_ctts(ctx->file, tkw->track_num);"
    },
    {
        "line": 80,
        "fullcodeline": "u64 mdur = gf_isom_get_media_duration(ctx->file, tkw->track_num);"
    },
    {
        "line": 81,
        "fullcodeline": "u64 pdur = gf_isom_get_track_duration(ctx->file, tkw->track_num);"
    },
    {
        "line": 92,
        "fullcodeline": "Bool force_rewrite = GF_FALSE;"
    },
    {
        "line": 93,
        "fullcodeline": "u32 PL = tkw->media_profile_level;"
    },
    {
        "line": 123,
        "fullcodeline": "gf_isom_refresh_size_info(ctx->file, tkw->track_num);"
    },
    {
        "line": 126,
        "fullcodeline": "u32 dur = (u32) gf_timestamp_rescale(ctx->dur.num, ctx->dur.den, tkw->tk_timescale);"
    },
    {
        "line": 127,
        "fullcodeline": "gf_isom_set_last_sample_duration(ctx->file, tkw->track_num, dur);"
    },
    {
        "line": 134,
        "fullcodeline": "gf_isom_modify_alternate_brand(ctx->file, GF_ISOM_BRAND_ISO6, GF_TRUE);"
    },
    {
        "line": 141,
        "fullcodeline": "gf_isom_remove_sample(ctx->file, tkw->track_num, tkw->nb_samples);"
    },
    {
        "line": 149,
        "fullcodeline": "gf_isom_set_last_sample_duration(ctx->file, tkw->track_num, (u32) val);"
    },
    {
        "line": 153,
        "fullcodeline": "gf_isom_set_forced_text(ctx->file, tkw->track_num, tkw->stsd_idx, p->value.uint);"
    },
    {
        "line": 157,
        "fullcodeline": "u32 msize = 0;"
    },
    {
        "line": 158,
        "fullcodeline": "Bool do_rewrite = GF_FALSE;"
    },
    {
        "line": 159,
        "fullcodeline": "u32 j, stsd_count = gf_isom_get_sample_description_count(ctx->file, tkw->track_num);"
    },
    {
        "line": 160,
        "fullcodeline": "p = gf_filter_pid_get_info(tkw->ipid, GF_PROP_PID_MAX_NALU_SIZE, &pe);"
    },
    {
        "line": 161,
        "fullcodeline": "msize = gf_get_bit_size(p->value.uint);"
    },
    {
        "line": 186,
        "fullcodeline": "gf_media_update_bitrate(ctx->file, tkw->track_num);"
    },
    {
        "line": 189,
        "fullcodeline": "p = gf_filter_pid_get_property_str(tkw->ipid, \"boxpatch\");"
    },
    {
        "line": 197,
        "fullcodeline": "tkw->box_patched = GF_TRUE;"
    },
    {
        "line": 206,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[MP4Mux] Unable to apply box patch %s: %s\\n\", ctx->boxpatch, gf_error_to_string(e) ));"
    },
    {
        "line": 214,
        "fullcodeline": "gf_isom_set_inplace_padding(ctx->file, ctx->moovpad);"
    },
    {
        "line": 226,
        "fullcodeline": "e = gf_isom_set_storage_mode(ctx->file, GF_ISOM_STORE_FLAT);"
    },
    {
        "line": 229,
        "fullcodeline": "e = gf_isom_set_storage_mode(ctx->file, GF_ISOM_STORE_FASTSTART);"
    },
    {
        "line": 232,
        "fullcodeline": "e = gf_isom_set_storage_mode(ctx->file, GF_ISOM_STORE_TIGHT);"
    },
    {
        "line": 236,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[MP4Mux] Failed to set storage mode: %s\\n\", gf_error_to_string(e) ));"
    },
    {
        "line": 237,
        "fullcodeline": "gf_isom_delete(ctx->file);"
    },
    {
        "line": 246,
        "fullcodeline": "gf_filter_pid_set_eos(ctx->opid);"
    },
    {
        "line": 19,
        "fullcodeline": "if (ctts_mode==MP4MX_CT_NEGCTTS) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (mdur > min_ts)"
    },
    {
        "line": 53,
        "fullcodeline": "if ((ctts_mode != MP4MX_CT_NEGCTTS) && (tkw->ts_delay<0) && (tkw->stream_type==GF_STREAM_VISUAL)) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (tkw->src_timescale != tkw->tk_timescale) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (ctx->moovts != tkw->tk_timescale) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (pdur==mdur) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (!PL) PL = 0x01;"
    },
    {
        "line": 100,
        "fullcodeline": "if (has_bframes && (tkw->media_profile_level <= 3)) {"
    },
    {
        "line": 105,
        "fullcodeline": "if (PL != tkw->media_profile_level) {"
    },
    {
        "line": 146,
        "fullcodeline": "if (tkw->src_timescale != tkw->tk_timescale) {"
    },
    {
        "line": 162,
        "fullcodeline": "if (msize<8) msize = 8;"
    },
    {
        "line": 166,
        "fullcodeline": "if (msize<=0xFFFF) {"
    },
    {
        "line": 190,
        "fullcodeline": "if (p && p->value.string) {"
    },
    {
        "line": 218,
        "fullcodeline": "if (ctx->cdur.num==0) {"
    },
    {
        "line": 239,
        "fullcodeline": "e = gf_isom_close(ctx->file);"
    },
    {
        "line": 20,
        "fullcodeline": "gf_isom_set_ctts_v1(ctx->file, tkw->track_num, (u32) -tkw->min_neg_ctts);"
    },
    {
        "line": 32,
        "fullcodeline": "} else if (tkw->has_ctts && (tkw->stream_type==GF_STREAM_VISUAL)) {"
    },
    {
        "line": 45,
        "fullcodeline": "mdur = tkw->max_cts - tkw->min_cts;"
    },
    {
        "line": 46,
        "fullcodeline": "mdur += tkw->max_cts_samp_dur;"
    },
    {
        "line": 49,
        "fullcodeline": "mdur -= min_ts;"
    },
    {
        "line": 54,
        "fullcodeline": "delay = (u32) -tkw->ts_delay;"
    },
    {
        "line": 58,
        "fullcodeline": "min_ts = gf_timestamp_rescale(min_ts, tkw->src_timescale, tkw->tk_timescale);"
    },
    {
        "line": 59,
        "fullcodeline": "delay = (u32) gf_timestamp_rescale(delay, tkw->src_timescale, tkw->tk_timescale);"
    },
    {
        "line": 64,
        "fullcodeline": "mdur = gf_timestamp_rescale(mdur, tkw->tk_timescale, ctx->moovts);"
    },
    {
        "line": 68,
        "fullcodeline": "gf_isom_set_edit(ctx->file, tkw->track_num, 0, tkw->empty_init_dur, 0, GF_ISOM_EDIT_EMPTY);"
    },
    {
        "line": 83,
        "fullcodeline": "GF_LOG(GF_LOG_INFO, GF_LOG_MEDIA, (\"[MP4Mux] Imported %d frames - duration %g\\n\", tkw->nb_samples, ((Double)mdur)/tkw->tk_timescale ));"
    },
    {
        "line": 97,
        "fullcodeline": "GF_LOG(GF_LOG_INFO, GF_LOG_MEDIA, (\"Indicated Profile: %s\\n\", gf_m4v_get_profile_name((u8) PL) ));"
    },
    {
        "line": 101,
        "fullcodeline": "PL = 0xF5;"
    },
    {
        "line": 102,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[MP4Mux] Indicated profile doesn't include B-VOPs - forcing %s\\n\", gf_m4v_get_profile_name((u8) PL) ));"
    },
    {
        "line": 103,
        "fullcodeline": "force_rewrite = GF_TRUE;"
    },
    {
        "line": 132,
        "fullcodeline": "GF_LOG(GF_LOG_INFO, GF_LOG_MEDIA, (\"OpenGOP detected - adjusting file brand\\n\"));"
    },
    {
        "line": 147,
        "fullcodeline": "val = gf_timestamp_rescale(val, tkw->src_timescale, tkw->tk_timescale);"
    },
    {
        "line": 191,
        "fullcodeline": "e = gf_isom_apply_box_patch(ctx->file, tkw->track_id ? tkw->track_id : tkw->item_id, p->value.string, GF_FALSE);"
    },
    {
        "line": 219,
        "fullcodeline": "e = gf_isom_set_storage_mode(ctx->file, GF_ISOM_STORE_STREAMABLE);"
    },
    {
        "line": 24,
        "fullcodeline": "gf_isom_set_cts_packing(ctx->file, tkw->track_num, GF_TRUE);"
    },
    {
        "line": 25,
        "fullcodeline": "gf_isom_shift_cts_offset(ctx->file, tkw->track_num, (s32) tkw->min_neg_ctts);"
    },
    {
        "line": 26,
        "fullcodeline": "gf_isom_set_cts_packing(ctx->file, tkw->track_num, GF_FALSE);"
    },
    {
        "line": 27,
        "fullcodeline": "gf_isom_set_composition_offset_mode(ctx->file, tkw->track_num, GF_FALSE);"
    },
    {
        "line": 29,
        "fullcodeline": "mp4_mux_update_edit_list_for_bframes(ctx, tkw, ctts_mode);"
    },
    {
        "line": 33,
        "fullcodeline": "mp4_mux_update_edit_list_for_bframes(ctx, tkw, ctts_mode);"
    },
    {
        "line": 35,
        "fullcodeline": "has_bframes = GF_TRUE;"
    },
    {
        "line": 51,
        "fullcodeline": "mdur = 0;"
    },
    {
        "line": 85,
        "fullcodeline": "GF_LOG(GF_LOG_INFO, GF_LOG_MEDIA, (\"[MP4Mux] Imported %d frames - media duration %g - track duration %g\\n\", tkw->nb_samples, ((Double)mdur)/tkw->tk_timescale, ((Double)pdur)/ctx->moovts ));"
    },
    {
        "line": 116,
        "fullcodeline": "if (!ctx->make_qt)"
    },
    {
        "line": 167,
        "fullcodeline": "for (j=0; j<stsd_count; j++) {"
    },
    {
        "line": 222,
        "fullcodeline": "e = gf_isom_make_interleave_ex(ctx->file, &ctx->cdur);"
    },
    {
        "line": 241,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[MP4Mux] Failed to write file: %s\\n\", gf_error_to_string(e) ));"
    },
    {
        "line": 108,
        "fullcodeline": "GF_ESD *esd = gf_isom_get_esd(ctx->file, tkw->track_num, tkw->stsd_idx);"
    },
    {
        "line": 109,
        "fullcodeline": "assert(esd);"
    },
    {
        "line": 110,
        "fullcodeline": "gf_m4v_rewrite_pl(&esd->decoderConfig->decoderSpecificInfo->data, &esd->decoderConfig->decoderSpecificInfo->dataLength, (u8) PL);"
    },
    {
        "line": 111,
        "fullcodeline": "gf_isom_change_mpeg4_description(ctx->file, tkw->track_num, tkw->stsd_idx, esd);"
    },
    {
        "line": 112,
        "fullcodeline": "gf_odf_desc_del((GF_Descriptor*)esd);"
    },
    {
        "line": 117,
        "fullcodeline": "gf_isom_set_pl_indication(ctx->file, GF_ISOM_PL_VISUAL, PL);"
    },
    {
        "line": 163,
        "fullcodeline": "else if (msize<16) msize = 16;"
    },
    {
        "line": 168,
        "fullcodeline": "u32 k = 8 * gf_isom_get_nalu_length_field(ctx->file, tkw->track_num, j+1);"
    },
    {
        "line": 174,
        "fullcodeline": "GF_LOG(GF_LOG_INFO, GF_LOG_MEDIA, (\"[MP4Mux] Adjusting NALU SizeLength to %d bits\\n\", msize ));"
    },
    {
        "line": 175,
        "fullcodeline": "gf_media_nal_rewrite_samples(ctx->file, tkw->track_num, msize);"
    },
    {
        "line": 176,
        "fullcodeline": "msize /= 8;"
    },
    {
        "line": 193,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[MP4Mux] Unable to apply box patch %s to track %d: %s\\n\","
    },
    {
        "line": 221,
        "fullcodeline": "if (ctx->cdur.num < 0) ctx->cdur.num = 1000;"
    },
    {
        "line": 36,
        "fullcodeline": "} else if (tkw->ts_delay || tkw->empty_init_dur) {"
    },
    {
        "line": 169,
        "fullcodeline": "if (k > msize) {"
    },
    {
        "line": 177,
        "fullcodeline": "for (j=0; j<stsd_count; j++) {"
    },
    {
        "line": 37,
        "fullcodeline": "gf_isom_update_edit_list_duration(ctx->file, tkw->track_num);"
    },
    {
        "line": 164,
        "fullcodeline": "else msize = 32;"
    },
    {
        "line": 170,
        "fullcodeline": "do_rewrite = GF_TRUE;"
    },
    {
        "line": 178,
        "fullcodeline": "gf_isom_set_nalu_length_field(ctx->file, tkw->track_num, j+1, msize);"
    },
    {
        "line": 194,
        "fullcodeline": "p->value.string, tkw->track_id, gf_error_to_string(e) ));"
    }
]