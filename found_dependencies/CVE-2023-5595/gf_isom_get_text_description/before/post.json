[
    {
        "line": 5,
        "fullcodeline": "GF_Tx3gSampleEntryBox *txt = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "GF_TextSampleEntryBox *qt_txt = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "trak = gf_isom_get_track_from_file(movie, trackNumber);"
    },
    {
        "line": 21,
        "fullcodeline": "txt = (GF_Tx3gSampleEntryBox*)gf_list_get(trak->Media->information->sampleTable->SampleDescription->child_boxes, descriptionIndex - 1);"
    },
    {
        "line": 34,
        "fullcodeline": "(*out_desc) = (GF_TextSampleDescriptor *) gf_odf_desc_new(GF_ODF_TX3G_TAG);"
    },
    {
        "line": 7,
        "fullcodeline": "if (!descriptionIndex || !out_desc) return GF_BAD_PARAM;"
    },
    {
        "line": 10,
        "fullcodeline": "if (!trak || !trak->Media) return GF_BAD_PARAM;"
    },
    {
        "line": 22,
        "fullcodeline": "if (!txt) return GF_BAD_PARAM;"
    },
    {
        "line": 35,
        "fullcodeline": "if (! (*out_desc) ) return GF_OUT_OF_MEM;"
    },
    {
        "line": 27,
        "fullcodeline": "qt_txt = (GF_TextSampleEntryBox *)txt;"
    },
    {
        "line": 28,
        "fullcodeline": "txt = NULL;"
    },
    {
        "line": 38,
        "fullcodeline": "(*out_desc)->back_color = rgb_48_to_32(qt_txt->background_color);"
    },
    {
        "line": 39,
        "fullcodeline": "(*out_desc)->default_pos = qt_txt->default_box;"
    },
    {
        "line": 40,
        "fullcodeline": "(*out_desc)->default_style.style_flags = 0; //todo, expose qt_txt->fontFace;"
    },
    {
        "line": 41,
        "fullcodeline": "(*out_desc)->default_style.text_color = rgb_48_to_32(qt_txt->foreground_color);"
    },
    {
        "line": 42,
        "fullcodeline": "(*out_desc)->displayFlags = qt_txt->displayFlags;"
    },
    {
        "line": 43,
        "fullcodeline": "(*out_desc)->vert_justif = -1;"
    },
    {
        "line": 44,
        "fullcodeline": "(*out_desc)->horiz_justif = qt_txt->textJustification;"
    },
    {
        "line": 51,
        "fullcodeline": "(*out_desc)->back_color = txt->back_color;"
    },
    {
        "line": 52,
        "fullcodeline": "(*out_desc)->default_pos = txt->default_box;"
    },
    {
        "line": 53,
        "fullcodeline": "(*out_desc)->default_style = txt->default_style;"
    },
    {
        "line": 54,
        "fullcodeline": "(*out_desc)->displayFlags = txt->displayFlags;"
    },
    {
        "line": 55,
        "fullcodeline": "(*out_desc)->vert_justif = txt->vertical_justification;"
    },
    {
        "line": 56,
        "fullcodeline": "(*out_desc)->horiz_justif = txt->horizontal_justification;"
    },
    {
        "line": 58,
        "fullcodeline": "(*out_desc)->fonts = (GF_FontRecord *) gf_malloc(sizeof(GF_FontRecord) * txt->font_table->entry_count);"
    },
    {
        "line": 46,
        "fullcodeline": "(*out_desc)->font_count = 1;"
    },
    {
        "line": 48,
        "fullcodeline": "(*out_desc)->fonts[0].fontName = gf_strdup(qt_txt->textName);"
    },
    {
        "line": 59,
        "fullcodeline": "for (i=0; i<txt->font_table->entry_count; i++) {"
    },
    {
        "line": 62,
        "fullcodeline": "(*out_desc)->fonts[i].fontName = gf_strdup(txt->font_table->fonts[i].fontName);"
    }
]