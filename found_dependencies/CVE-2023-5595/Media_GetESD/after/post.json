[
    {
        "line": 5,
        "fullcodeline": "GF_MPEGSampleEntryBox *entry = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "*out_esd = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "esd = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "entry = (GF_MPEGSampleEntryBox*)gf_list_get(stsd->child_boxes, sampleDescIndex - 1);"
    },
    {
        "line": 18,
        "fullcodeline": "*out_esd = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "ESDa = NULL;"
    },
    {
        "line": 20,
        "fullcodeline": "type = entry->type;"
    },
    {
        "line": 11,
        "fullcodeline": "if (!stsd || !stsd->child_boxes || !sampleDescIndex || (sampleDescIndex > gf_list_count(stsd->child_boxes)) )"
    },
    {
        "line": 16,
        "fullcodeline": "if (! entry) return GF_ISOM_INVALID_MEDIA;"
    },
    {
        "line": 28,
        "fullcodeline": "sinf = (GF_ProtectionSchemeInfoBox *) gf_isom_box_find_child(entry->child_boxes, GF_ISOM_BOX_TYPE_SINF);"
    },
    {
        "line": 34,
        "fullcodeline": "sinf = (GF_ProtectionSchemeInfoBox *) gf_isom_box_find_child(entry->child_boxes, GF_ISOM_BOX_TYPE_RINF);"
    },
    {
        "line": 96,
        "fullcodeline": "AV1_RewriteESDescriptorEx((GF_MPEGVisualSampleEntryBox*)entry, mdia);"
    },
    {
        "line": 103,
        "fullcodeline": "VP9_RewriteESDescriptorEx((GF_MPEGVisualSampleEntryBox*)entry, mdia);"
    },
    {
        "line": 304,
        "fullcodeline": "*out_esd = esd;"
    },
    {
        "line": 29,
        "fullcodeline": "if (sinf && sinf->original_format) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (sinf && sinf->original_format) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)"
    },
    {
        "line": 68,
        "fullcodeline": "if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)"
    },
    {
        "line": 74,
        "fullcodeline": "if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)"
    },
    {
        "line": 76,
        "fullcodeline": "if ((mdia->mediaTrack->extractor_mode & 0x0000FFFF) != GF_ISOM_NALU_EXTRACT_INSPECT)"
    },
    {
        "line": 84,
        "fullcodeline": "if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)"
    },
    {
        "line": 86,
        "fullcodeline": "if ((mdia->mediaTrack->extractor_mode & 0x0000FFFF) != GF_ISOM_NALU_EXTRACT_INSPECT)"
    },
    {
        "line": 94,
        "fullcodeline": "if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)"
    },
    {
        "line": 101,
        "fullcodeline": "if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)"
    },
    {
        "line": 107,
        "fullcodeline": "if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_AUDIO)"
    },
    {
        "line": 110,
        "fullcodeline": "GF_MPEGAudioSampleEntryBox *ase = (GF_MPEGAudioSampleEntryBox*)entry;"
    },
    {
        "line": 111,
        "fullcodeline": "ESDa = ase->esd;"
    },
    {
        "line": 145,
        "fullcodeline": "if (entry->internal_type==GF_ISOM_SAMPLE_ENTRY_MP4S) {"
    },
    {
        "line": 153,
        "fullcodeline": "if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_GENERIC)"
    },
    {
        "line": 156,
        "fullcodeline": "if (!true_desc_only && mdia->mediaTrack->moov->mov->convert_streaming_text) {"
    },
    {
        "line": 166,
        "fullcodeline": "if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_GENERIC)"
    },
    {
        "line": 169,
        "fullcodeline": "GF_WebVTTSampleEntryBox*vtte = (GF_WebVTTSampleEntryBox*)entry;"
    },
    {
        "line": 170,
        "fullcodeline": "esd =  gf_odf_desc_esd_new(2);"
    },
    {
        "line": 171,
        "fullcodeline": "*out_esd = esd;"
    },
    {
        "line": 172,
        "fullcodeline": "esd->decoderConfig->streamType = GF_STREAM_TEXT;"
    },
    {
        "line": 173,
        "fullcodeline": "esd->decoderConfig->objectTypeIndication = GF_CODECID_WEBVTT;"
    },
    {
        "line": 192,
        "fullcodeline": "if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_AUDIO)"
    },
    {
        "line": 194,
        "fullcodeline": "if (!true_desc_only) {"
    },
    {
        "line": 201,
        "fullcodeline": "if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_AUDIO)"
    },
    {
        "line": 213,
        "fullcodeline": "*out_esd = gf_odf_desc_esd_new(2);"
    },
    {
        "line": 214,
        "fullcodeline": "(*out_esd)->decoderConfig->streamType = GF_STREAM_AUDIO;"
    },
    {
        "line": 215,
        "fullcodeline": "(*out_esd)->decoderConfig->objectTypeIndication = GF_CODECID_OPUS;"
    },
    {
        "line": 216,
        "fullcodeline": "gf_odf_opus_cfg_write(&opus_c->opcfg, & (*out_esd)->decoderConfig->decoderSpecificInfo->data, & (*out_esd)->decoderConfig->decoderSpecificInfo->dataLength);"
    },
    {
        "line": 220,
        "fullcodeline": "if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_VIDEO)"
    },
    {
        "line": 233,
        "fullcodeline": "if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_AUDIO)"
    },
    {
        "line": 246,
        "fullcodeline": "if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_GENERIC)"
    },
    {
        "line": 268,
        "fullcodeline": "if (entry->internal_type != GF_ISOM_SAMPLE_ENTRY_AUDIO)"
    },
    {
        "line": 303,
        "fullcodeline": "if (!esd) return GF_ISOM_INVALID_MEDIA;"
    },
    {
        "line": 46,
        "fullcodeline": "ESDa = ((GF_MPEGVisualSampleEntryBox*)entry)->esd;"
    },
    {
        "line": 47,
        "fullcodeline": "if (ESDa) esd = (GF_ESD *) ESDa->desc;"
    },
    {
        "line": 70,
        "fullcodeline": "esd = ((GF_MPEGVisualSampleEntryBox*) entry)->emul_esd;"
    },
    {
        "line": 77,
        "fullcodeline": "AVC_RewriteESDescriptorEx((GF_MPEGVisualSampleEntryBox*) entry, mdia);"
    },
    {
        "line": 80,
        "fullcodeline": "esd = ((GF_MPEGVisualSampleEntryBox*) entry)->emul_esd;"
    },
    {
        "line": 87,
        "fullcodeline": "HEVC_RewriteESDescriptorEx((GF_MPEGVisualSampleEntryBox*) entry, mdia);"
    },
    {
        "line": 90,
        "fullcodeline": "esd = ((GF_MPEGVisualSampleEntryBox*) entry)->emul_esd;"
    },
    {
        "line": 97,
        "fullcodeline": "esd = ((GF_MPEGVisualSampleEntryBox*)entry)->emul_esd;"
    },
    {
        "line": 104,
        "fullcodeline": "esd = ((GF_MPEGVisualSampleEntryBox*)entry)->emul_esd;"
    },
    {
        "line": 146,
        "fullcodeline": "ESDa = entry->esd;"
    },
    {
        "line": 157,
        "fullcodeline": "GF_Err e = gf_isom_get_ttxt_esd(mdia, out_esd);"
    },
    {
        "line": 195,
        "fullcodeline": "GF_Err e = gf_isom_get_3gpp_audio_esd(mdia->information->sampleTable, type, (GF_GenericAudioSampleEntryBox*)entry, out_esd);"
    },
    {
        "line": 209,
        "fullcodeline": "if (!opus_c) {"
    },
    {
        "line": 307,
        "fullcodeline": "if (!esd && !*out_esd) return GF_ISOM_INVALID_MEDIA;"
    },
    {
        "line": 308,
        "fullcodeline": "if (*out_esd == NULL) return gf_odf_desc_copy((GF_Descriptor *)esd, (GF_Descriptor **)out_esd);"
    },
    {
        "line": 79,
        "fullcodeline": "AVC_RewriteESDescriptorEx((GF_MPEGVisualSampleEntryBox*) entry, NULL);"
    },
    {
        "line": 89,
        "fullcodeline": "HEVC_RewriteESDescriptorEx((GF_MPEGVisualSampleEntryBox*) entry, NULL);"
    },
    {
        "line": 113,
        "fullcodeline": "esd = (GF_ESD *) ESDa->desc;"
    },
    {
        "line": 175,
        "fullcodeline": "esd->decoderConfig->decoderSpecificInfo->dataLength = (u32) strlen(vtte->config->string);"
    },
    {
        "line": 176,
        "fullcodeline": "esd->decoderConfig->decoderSpecificInfo->data = gf_malloc(sizeof(char)*esd->decoderConfig->decoderSpecificInfo->dataLength);"
    },
    {
        "line": 177,
        "fullcodeline": "memcpy(esd->decoderConfig->decoderSpecificInfo->data, vtte->config->string, esd->decoderConfig->decoderSpecificInfo->dataLength);"
    },
    {
        "line": 208,
        "fullcodeline": "opus_c = ((GF_MPEGAudioSampleEntryBox*)entry)->cfg_opus;"
    },
    {
        "line": 210,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"ESD not found for Opus\\n)\"));"
    },
    {
        "line": 225,
        "fullcodeline": "esd =  gf_odf_desc_esd_new(2);"
    },
    {
        "line": 226,
        "fullcodeline": "*out_esd = esd;"
    },
    {
        "line": 227,
        "fullcodeline": "esd->decoderConfig->streamType = GF_STREAM_VISUAL;"
    },
    {
        "line": 228,
        "fullcodeline": "esd->decoderConfig->objectTypeIndication = GF_CODECID_H263;"
    },
    {
        "line": 238,
        "fullcodeline": "esd =  gf_odf_desc_esd_new(2);"
    },
    {
        "line": 239,
        "fullcodeline": "*out_esd = esd;"
    },
    {
        "line": 240,
        "fullcodeline": "esd->decoderConfig->streamType = GF_STREAM_AUDIO;"
    },
    {
        "line": 241,
        "fullcodeline": "esd->decoderConfig->objectTypeIndication = GF_CODECID_MPEG_AUDIO;"
    },
    {
        "line": 251,
        "fullcodeline": "GF_LASeRSampleEntryBox*ptr = (GF_LASeRSampleEntryBox*)entry;"
    },
    {
        "line": 254,
        "fullcodeline": "esd =  gf_odf_desc_esd_new(2);"
    },
    {
        "line": 255,
        "fullcodeline": "*out_esd = esd;"
    },
    {
        "line": 256,
        "fullcodeline": "esd->decoderConfig->streamType = GF_STREAM_SCENE;"
    },
    {
        "line": 257,
        "fullcodeline": "esd->decoderConfig->objectTypeIndication = GF_CODECID_LASER;"
    },
    {
        "line": 258,
        "fullcodeline": "esd->decoderConfig->decoderSpecificInfo->dataLength = ptr->lsr_config->hdr_size;"
    },
    {
        "line": 259,
        "fullcodeline": "esd->decoderConfig->decoderSpecificInfo->data = gf_malloc(sizeof(char)*ptr->lsr_config->hdr_size);"
    },
    {
        "line": 261,
        "fullcodeline": "memcpy(esd->decoderConfig->decoderSpecificInfo->data, ptr->lsr_config->hdr, sizeof(char)*ptr->lsr_config->hdr_size);"
    },
    {
        "line": 274,
        "fullcodeline": "GF_MPEGAudioSampleEntryBox*ptr = (GF_MPEGAudioSampleEntryBox*)entry;"
    },
    {
        "line": 275,
        "fullcodeline": "esd = gf_odf_desc_esd_new(2);"
    },
    {
        "line": 276,
        "fullcodeline": "*out_esd = esd;"
    },
    {
        "line": 277,
        "fullcodeline": "esd->decoderConfig->streamType = GF_STREAM_AUDIO;"
    },
    {
        "line": 147,
        "fullcodeline": "if (ESDa) esd = (GF_ESD *) ESDa->desc;"
    },
    {
        "line": 252,
        "fullcodeline": "if (!ptr || !ptr->lsr_config || !ptr->lsr_config->hdr_size)"
    },
    {
        "line": 260,
        "fullcodeline": "if (!esd->decoderConfig->decoderSpecificInfo->data) return GF_OUT_OF_MEM;"
    },
    {
        "line": 278,
        "fullcodeline": "if ((type==GF_ISOM_SUBTYPE_MH3D_MHA1) || (type==GF_ISOM_SUBTYPE_MH3D_MHA2))"
    },
    {
        "line": 49,
        "fullcodeline": "else esd = ((GF_MPEGVisualSampleEntryBox*) entry)->emul_esd;"
    },
    {
        "line": 114,
        "fullcodeline": "} else if (!true_desc_only) {"
    },
    {
        "line": 279,
        "fullcodeline": "esd->decoderConfig->objectTypeIndication = GF_CODECID_MPHA;"
    },
    {
        "line": 283,
        "fullcodeline": "GF_BitStream *bs = gf_bs_new(NULL, 0, GF_BITSTREAM_WRITE);"
    },
    {
        "line": 285,
        "fullcodeline": "gf_bs_write_u8(bs, ptr->cfg_mha->configuration_version);"
    },
    {
        "line": 286,
        "fullcodeline": "gf_bs_write_u8(bs, ptr->cfg_mha->mha_pl_indication);"
    },
    {
        "line": 287,
        "fullcodeline": "gf_bs_write_u8(bs, ptr->cfg_mha->reference_channel_layout);"
    },
    {
        "line": 288,
        "fullcodeline": "gf_bs_write_u16(bs, ptr->cfg_mha->mha_config ? ptr->cfg_mha->mha_config_size : 0);"
    },
    {
        "line": 292,
        "fullcodeline": "gf_bs_get_content(bs, &esd->decoderConfig->decoderSpecificInfo->data, &esd->decoderConfig->decoderSpecificInfo->dataLength);"
    },
    {
        "line": 293,
        "fullcodeline": "gf_bs_del(bs);"
    },
    {
        "line": 115,
        "fullcodeline": "Bool make_mp4a = GF_FALSE;"
    },
    {
        "line": 116,
        "fullcodeline": "sinf = (GF_ProtectionSchemeInfoBox *) gf_isom_box_find_child(entry->child_boxes, GF_ISOM_BOX_TYPE_SINF);"
    },
    {
        "line": 281,
        "fullcodeline": "esd->decoderConfig->objectTypeIndication = GF_CODECID_MHAS;"
    },
    {
        "line": 118,
        "fullcodeline": "if (sinf && sinf->original_format) {"
    },
    {
        "line": 290,
        "fullcodeline": "gf_bs_write_data(bs, ptr->cfg_mha->mha_config, ptr->cfg_mha->mha_config_size);"
    },
    {
        "line": 129,
        "fullcodeline": "memset(&aacinfo, 0, sizeof(GF_M4ADecSpecInfo));"
    },
    {
        "line": 130,
        "fullcodeline": "aacinfo.nb_chan = ase->channel_count;"
    },
    {
        "line": 131,
        "fullcodeline": "aacinfo.base_object_type = GF_M4A_AAC_LC;"
    },
    {
        "line": 132,
        "fullcodeline": "aacinfo.base_sr = ase->samplerate_hi;"
    },
    {
        "line": 133,
        "fullcodeline": "*out_esd = gf_odf_desc_esd_new(0);"
    },
    {
        "line": 134,
        "fullcodeline": "(*out_esd)->decoderConfig->streamType = GF_STREAM_AUDIO;"
    },
    {
        "line": 135,
        "fullcodeline": "(*out_esd)->decoderConfig->objectTypeIndication = GF_CODECID_AAC_MPEG4;"
    },
    {
        "line": 136,
        "fullcodeline": "gf_m4a_write_config(&aacinfo, &(*out_esd)->decoderConfig->decoderSpecificInfo->data, &(*out_esd)->decoderConfig->decoderSpecificInfo->dataLength);"
    },
    {
        "line": 119,
        "fullcodeline": "if (sinf->original_format->data_format==GF_ISOM_BOX_TYPE_MP4A) {"
    },
    {
        "line": 124,
        "fullcodeline": "make_mp4a = GF_TRUE;"
    },
    {
        "line": 120,
        "fullcodeline": "make_mp4a = GF_TRUE;"
    }
]