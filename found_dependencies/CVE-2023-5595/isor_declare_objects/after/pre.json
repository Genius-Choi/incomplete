[
    {
        "line": 7,
        "fullcodeline": "Bool single_media_found = GF_FALSE;"
    },
    {
        "line": 8,
        "fullcodeline": "Bool use_iod = GF_FALSE;"
    },
    {
        "line": 9,
        "fullcodeline": "Bool tk_found = GF_FALSE;"
    },
    {
        "line": 11,
        "fullcodeline": "Bool isom_contains_video = GF_FALSE;"
    },
    {
        "line": 12,
        "fullcodeline": "GF_Descriptor *od = gf_isom_get_root_od(read->mov);"
    },
    {
        "line": 21,
        "fullcodeline": "count = gf_isom_get_track_count(read->mov);"
    },
    {
        "line": 13,
        "fullcodeline": "if (od && gf_list_count(((GF_ObjectDescriptor*)od)->ESDescriptors)) {"
    },
    {
        "line": 22,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 153,
        "fullcodeline": "if (!read->tkid) {"
    },
    {
        "line": 174,
        "fullcodeline": "if (gf_isom_apple_get_tag(read->mov, GF_ISOM_ITUNE_COVER_ART, &tag, &tlen)==GF_OK) {"
    },
    {
        "line": 14,
        "fullcodeline": "use_iod = GF_TRUE;"
    },
    {
        "line": 16,
        "fullcodeline": "if (od) gf_odf_desc_del(od);"
    },
    {
        "line": 25,
        "fullcodeline": "mtype = gf_isom_get_media_type(read->mov, i+1);"
    },
    {
        "line": 108,
        "fullcodeline": "stsd_idx = read->stsd ? read->stsd : 1;"
    },
    {
        "line": 110,
        "fullcodeline": "m_subtype = gf_isom_get_media_subtype(read->mov, i+1, stsd_idx);"
    },
    {
        "line": 122,
        "fullcodeline": "highest_stream = GF_TRUE;"
    },
    {
        "line": 123,
        "fullcodeline": "track_id = gf_isom_get_track_id(read->mov, i+1);"
    },
    {
        "line": 147,
        "fullcodeline": "isor_declare_track(read, NULL, i+1, stsd_idx, streamtype, use_iod);"
    },
    {
        "line": 155,
        "fullcodeline": "count = gf_isom_get_meta_item_count(read->mov, GF_TRUE, 0);"
    },
    {
        "line": 168,
        "fullcodeline": "if (! gf_list_count(read->channels)) {"
    },
    {
        "line": 178,
        "fullcodeline": "tlen &= 0x7FFFFFFF;"
    },
    {
        "line": 91,
        "fullcodeline": "if (!read->alltk && !read->tkid && !gf_isom_is_track_enabled(read->mov, i+1)) {"
    },
    {
        "line": 124,
        "fullcodeline": "if (read->play_only_track_id && (read->play_only_track_id != track_id)) continue;"
    },
    {
        "line": 132,
        "fullcodeline": "for (j = 0; j < count; j++) {"
    },
    {
        "line": 143,
        "fullcodeline": "if ((read->smode==MP4DMX_SINGLE) && (gf_isom_get_media_type(read->mov, i+1) == GF_ISOM_MEDIA_VISUAL) && !highest_stream)"
    },
    {
        "line": 156,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 177,
        "fullcodeline": "assert(!(tlen & 0x80000000));"
    },
    {
        "line": 28,
        "fullcodeline": "u32 for_id=0;"
    },
    {
        "line": 45,
        "fullcodeline": "tk_found = GF_TRUE;"
    },
    {
        "line": 50,
        "fullcodeline": "streamtype = GF_STREAM_AUDIO;"
    },
    {
        "line": 56,
        "fullcodeline": "streamtype = GF_STREAM_VISUAL;"
    },
    {
        "line": 57,
        "fullcodeline": "isom_contains_video = GF_TRUE;"
    },
    {
        "line": 64,
        "fullcodeline": "streamtype = GF_STREAM_TEXT;"
    },
    {
        "line": 65,
        "fullcodeline": "mtype = GF_ISOM_MEDIA_TEXT;"
    },
    {
        "line": 70,
        "fullcodeline": "streamtype = GF_STREAM_SCENE;"
    },
    {
        "line": 73,
        "fullcodeline": "streamtype = GF_STREAM_OD;"
    },
    {
        "line": 77,
        "fullcodeline": "streamtype = GF_STREAM_METADATA;"
    },
    {
        "line": 87,
        "fullcodeline": "streamtype = GF_STREAM_UNKNOWN;"
    },
    {
        "line": 129,
        "fullcodeline": "single_media_found = GF_TRUE;"
    },
    {
        "line": 180,
        "fullcodeline": "if (read->expart && !isom_contains_video) {"
    },
    {
        "line": 181,
        "fullcodeline": "GF_FilterPid *cover_pid=NULL;"
    },
    {
        "line": 182,
        "fullcodeline": "e = gf_filter_pid_raw_new(read->filter, NULL, NULL, NULL, NULL, (char *) tag, tlen, GF_FALSE, &cover_pid);"
    },
    {
        "line": 29,
        "fullcodeline": "if (sscanf(read->tkid, \"%d\", &for_id)) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (!read->allt) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (count>1) {"
    },
    {
        "line": 113,
        "fullcodeline": "if (read->smode == MP4DMX_SINGLE)"
    },
    {
        "line": 127,
        "fullcodeline": "if (read->play_only_first_media != mtype) continue;"
    },
    {
        "line": 133,
        "fullcodeline": "if (gf_isom_has_track_reference(read->mov, j+1, GF_ISOM_REF_SCAL, track_id) > 0) {"
    },
    {
        "line": 137,
        "fullcodeline": "if (gf_isom_has_track_reference(read->mov, j+1, GF_ISOM_REF_BASE, track_id) > 0) {"
    },
    {
        "line": 30,
        "fullcodeline": "u32 id = gf_isom_get_track_id(read->mov, i+1);"
    },
    {
        "line": 84,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[IsoMedia] Track %d type %s not supported, ignoring track - you may retry by specifying allt option\\n\", i+1, gf_4cc_to_str(mtype) ));"
    },
    {
        "line": 93,
        "fullcodeline": "u32 type = gf_isom_get_media_type(read->mov, i+1);"
    },
    {
        "line": 101,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[IsoMedia] Track %d is disabled, ignoring track - you may retry by specifying alltk option\\n\", i+1));"
    },
    {
        "line": 134,
        "fullcodeline": "highest_stream = GF_FALSE;"
    },
    {
        "line": 138,
        "fullcodeline": "highest_stream = GF_FALSE;"
    },
    {
        "line": 157,
        "fullcodeline": "if (! isor_declare_item_properties(read, NULL, i+1))"
    },
    {
        "line": 164,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[IsoMedia] TrackID %s not found in file\\n\", read->tkid ));"
    },
    {
        "line": 189,
        "fullcodeline": "gf_filter_pid_set_property(cover_pid, GF_PROP_PID_STREAM_TYPE, &PROP_UINT(GF_STREAM_FILE) );"
    },
    {
        "line": 190,
        "fullcodeline": "gf_filter_pid_set_name(cover_pid, \"CoverArt\");"
    },
    {
        "line": 191,
        "fullcodeline": "dst_pck = gf_filter_pck_new_alloc(cover_pid, tlen, &out_buffer);"
    },
    {
        "line": 31,
        "fullcodeline": "if (id != for_id) continue;"
    },
    {
        "line": 96,
        "fullcodeline": "if ((type==GF_ISOM_SUBTYPE_TEXT) || (type==GF_ISOM_MEDIA_SUBT))"
    },
    {
        "line": 99,
        "fullcodeline": "if (gf_isom_is_track_referenced(read->mov, i+1, GF_ISOM_REF_CHAP)) continue;"
    },
    {
        "line": 104,
        "fullcodeline": "GF_LOG(GF_LOG_WARNING, GF_LOG_CONTAINER, (\"[IsoMedia] Track %d is disabled but single track in file, considering it enabled\\n\", i+1 ));"
    },
    {
        "line": 184,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[IsoMedia] error setting up video pid for cover art: %s\\n\", gf_error_to_string(e) ));"
    },
    {
        "line": 32,
        "fullcodeline": "} else if (!strcmp(read->tkid, \"audio\")) {"
    },
    {
        "line": 193,
        "fullcodeline": "gf_filter_pck_set_framing(dst_pck, GF_TRUE, GF_TRUE);"
    },
    {
        "line": 33,
        "fullcodeline": "if (mtype!=GF_ISOM_MEDIA_AUDIO) continue;"
    },
    {
        "line": 34,
        "fullcodeline": "} else if (!strcmp(read->tkid, \"video\")) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (mtype!=GF_ISOM_MEDIA_VISUAL) continue;"
    },
    {
        "line": 36,
        "fullcodeline": "} else if (!strcmp(read->tkid, \"text\")) {"
    },
    {
        "line": 37,
        "fullcodeline": "if ((mtype!=GF_ISOM_MEDIA_TEXT) && (mtype!=GF_ISOM_MEDIA_SUBT) && (mtype!=GF_ISOM_MEDIA_MPEG_SUBT)) continue;"
    },
    {
        "line": 38,
        "fullcodeline": "} else if (strlen(read->tkid)==4) {"
    },
    {
        "line": 39,
        "fullcodeline": "u32 t = GF_4CC(read->tkid[0], read->tkid[1], read->tkid[2], read->tkid[3]);"
    },
    {
        "line": 40,
        "fullcodeline": "if (mtype!=t) continue;"
    },
    {
        "line": 42,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[IsoMedia] Bad format for tkid option %s, no match\\n\", read->tkid));"
    }
]