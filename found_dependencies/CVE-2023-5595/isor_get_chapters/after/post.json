[
    {
        "line": 7,
        "fullcodeline": "count = gf_isom_get_chapter_count(file, 0);"
    },
    {
        "line": 32,
        "fullcodeline": "u32 chap_tk=0;"
    },
    {
        "line": 33,
        "fullcodeline": "count = gf_isom_get_track_count(file);"
    },
    {
        "line": 47,
        "fullcodeline": "times.vals = gf_malloc(sizeof(u32)*count);"
    },
    {
        "line": 48,
        "fullcodeline": "names.vals = gf_malloc(sizeof(char *)*count);"
    },
    {
        "line": 49,
        "fullcodeline": "times.nb_items = names.nb_items = count;"
    },
    {
        "line": 65,
        "fullcodeline": "p.type = GF_PROP_UINT_LIST;"
    },
    {
        "line": 66,
        "fullcodeline": "p.value.uint_list = times;"
    },
    {
        "line": 67,
        "fullcodeline": "gf_filter_pid_set_property(opid, GF_PROP_PID_CHAP_TIMES, &p);"
    },
    {
        "line": 68,
        "fullcodeline": "gf_free(times.vals);"
    },
    {
        "line": 70,
        "fullcodeline": "p.type = GF_PROP_STRING_LIST;"
    },
    {
        "line": 71,
        "fullcodeline": "p.value.string_list = names;"
    },
    {
        "line": 72,
        "fullcodeline": "gf_filter_pid_set_property(opid, GF_PROP_PID_CHAP_NAMES, &p);"
    },
    {
        "line": 34,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (!chap_tk) return;"
    },
    {
        "line": 51,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 9,
        "fullcodeline": "times.vals = gf_malloc(sizeof(u32)*count);"
    },
    {
        "line": 10,
        "fullcodeline": "names.vals = gf_malloc(sizeof(char *)*count);"
    },
    {
        "line": 11,
        "fullcodeline": "times.nb_items = names.nb_items = count;"
    },
    {
        "line": 20,
        "fullcodeline": "p.type = GF_PROP_UINT_LIST;"
    },
    {
        "line": 21,
        "fullcodeline": "p.value.uint_list = times;"
    },
    {
        "line": 22,
        "fullcodeline": "gf_filter_pid_set_property(opid, GF_PROP_PID_CHAP_TIMES, &p);"
    },
    {
        "line": 23,
        "fullcodeline": "gf_free(times.vals);"
    },
    {
        "line": 25,
        "fullcodeline": "p.type = GF_PROP_STRING_LIST;"
    },
    {
        "line": 26,
        "fullcodeline": "p.value.string_list = names;"
    },
    {
        "line": 27,
        "fullcodeline": "gf_filter_pid_set_property(opid, GF_PROP_PID_CHAP_NAMES, &p);"
    },
    {
        "line": 35,
        "fullcodeline": "u32 nb_ref = gf_isom_get_reference_count(file, i+1, GF_ISOM_REF_CHAP);"
    },
    {
        "line": 42,
        "fullcodeline": "count = gf_isom_get_sample_count(file, chap_tk);"
    },
    {
        "line": 53,
        "fullcodeline": "GF_ISOSample *s = gf_isom_get_sample(file, chap_tk, i+1, &di);"
    },
    {
        "line": 55,
        "fullcodeline": "GF_BitStream *bs = gf_bs_new(s->data, s->dataLength, GF_BITSTREAM_READ);"
    },
    {
        "line": 56,
        "fullcodeline": "GF_TextSample *txt = gf_isom_parse_text_sample(bs);"
    },
    {
        "line": 62,
        "fullcodeline": "gf_bs_del(bs);"
    },
    {
        "line": 63,
        "fullcodeline": "gf_isom_sample_del(&s);"
    },
    {
        "line": 13,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (!count) chap_tk=0;"
    },
    {
        "line": 54,
        "fullcodeline": "if (!s) continue;"
    },
    {
        "line": 16,
        "fullcodeline": "gf_isom_get_chapter(file, 0, i+1, &start, &name);"
    },
    {
        "line": 17,
        "fullcodeline": "times.vals[i] = (u32) start;"
    },
    {
        "line": 18,
        "fullcodeline": "names.vals[i] = gf_strdup(name);"
    },
    {
        "line": 37,
        "fullcodeline": "gf_isom_get_reference(file, i+1, GF_ISOM_REF_CHAP, 1, &chap_tk);"
    },
    {
        "line": 58,
        "fullcodeline": "times.vals[i] = (u32) s->DTS;"
    },
    {
        "line": 59,
        "fullcodeline": "names.vals[i] = gf_strdup(txt->text ? txt->text : \"\");"
    },
    {
        "line": 60,
        "fullcodeline": "gf_isom_delete_text_sample(txt);"
    }
]