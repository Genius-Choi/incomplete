[
    {
        "line": 6,
        "fullcodeline": "u32 IV_size=0;"
    },
    {
        "line": 7,
        "fullcodeline": "u8 *fake_sai = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "u8 *sai = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "u32 sai_size = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "Bool needs_seig = GF_FALSE;"
    },
    {
        "line": 125,
        "fullcodeline": "pck_is_encrypted = GF_FALSE;"
    },
    {
        "line": 189,
        "fullcodeline": "p = gf_filter_pck_get_property(pck, GF_PROP_PID_CENC_PSSH);"
    },
    {
        "line": 13,
        "fullcodeline": "if (tkw->cenc_state == CENC_SETUP_ERROR)"
    },
    {
        "line": 27,
        "fullcodeline": "if (tkw->cenc_state==CENC_NEED_SETUP) {"
    },
    {
        "line": 123,
        "fullcodeline": "if (act_type==CENC_CONFIG) return GF_OK;"
    },
    {
        "line": 130,
        "fullcodeline": "if (act_type == CENC_ADD_FRAG) {"
    },
    {
        "line": 146,
        "fullcodeline": "if (!pck_is_encrypted) {"
    },
    {
        "line": 190,
        "fullcodeline": "if (p && (p->type == GF_PROP_DATA) && p->value.data.ptr) {"
    },
    {
        "line": 198,
        "fullcodeline": "if (!sai) {"
    },
    {
        "line": 28,
        "fullcodeline": "u32 scheme_type=0;"
    },
    {
        "line": 29,
        "fullcodeline": "u32 scheme_version=0;"
    },
    {
        "line": 30,
        "fullcodeline": "u32 cenc_stsd_mode=0;"
    },
    {
        "line": 31,
        "fullcodeline": "u32 container_type = GF_ISOM_BOX_TYPE_SENC;"
    },
    {
        "line": 46,
        "fullcodeline": "p = gf_filter_pid_get_property(tkw->ipid, GF_PROP_PID_CENC_STORE);"
    },
    {
        "line": 49,
        "fullcodeline": "tkw->clear_stsd_idx = 0;"
    },
    {
        "line": 72,
        "fullcodeline": "tkw->def_crypt_byte_block = tkw->crypt_byte_block;"
    },
    {
        "line": 73,
        "fullcodeline": "tkw->def_skip_byte_block = tkw->skip_byte_block;"
    },
    {
        "line": 75,
        "fullcodeline": "tkw->cenc_state = CENC_SETUP_DONE;"
    },
    {
        "line": 76,
        "fullcodeline": "tkw->def_cenc_key_info_crc = tkw->cenc_key_info_crc;"
    },
    {
        "line": 91,
        "fullcodeline": "u32 k, nb_sdesc = gf_isom_get_sample_description_count(ctx->file, tkw->track_num);"
    },
    {
        "line": 127,
        "fullcodeline": "pck_is_encrypted = gf_filter_pck_get_crypt_flags(pck);"
    },
    {
        "line": 131,
        "fullcodeline": "sample_num = tkw->samples_in_frag + 1;"
    },
    {
        "line": 18,
        "fullcodeline": "p = gf_filter_pck_get_property(pck, GF_PROP_PCK_CENC_SAI);"
    },
    {
        "line": 33,
        "fullcodeline": "p = gf_filter_pid_get_property(tkw->ipid, GF_PROP_PID_PROTECTION_SCHEME_TYPE);"
    },
    {
        "line": 35,
        "fullcodeline": "p = gf_filter_pid_get_property(tkw->ipid, GF_PROP_PID_PROTECTION_SCHEME_VERSION);"
    },
    {
        "line": 38,
        "fullcodeline": "p = gf_filter_pid_get_property(tkw->ipid, GF_PROP_PID_CENC_STSD_MODE);"
    },
    {
        "line": 41,
        "fullcodeline": "p = gf_filter_pid_get_property(tkw->ipid, GF_PROP_PID_ENCRYPTED);"
    },
    {
        "line": 47,
        "fullcodeline": "if (p && p->value.uint) container_type = p->value.uint;"
    },
    {
        "line": 92,
        "fullcodeline": "if (nb_sdesc>2) {"
    },
    {
        "line": 144,
        "fullcodeline": "sample_num = tkw->nb_samples + 1;"
    },
    {
        "line": 166,
        "fullcodeline": "e = GF_OK;"
    },
    {
        "line": 185,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[MP4Mux] Failed to set sample encryption group entry: %s)\\n\", gf_error_to_string(e) ));"
    },
    {
        "line": 191,
        "fullcodeline": "if (ctx->store>=MP4MX_MODE_FRAG) {"
    },
    {
        "line": 20,
        "fullcodeline": "sai = p->value.data.ptr;"
    },
    {
        "line": 21,
        "fullcodeline": "sai_size = p->value.data.size;"
    },
    {
        "line": 34,
        "fullcodeline": "if (p) scheme_type = p->value.uint;"
    },
    {
        "line": 36,
        "fullcodeline": "if (p) scheme_version = p->value.uint;"
    },
    {
        "line": 39,
        "fullcodeline": "if (p) cenc_stsd_mode = p->value.uint;"
    },
    {
        "line": 42,
        "fullcodeline": "if (p) pck_is_encrypted = p->value.boolean;"
    },
    {
        "line": 52,
        "fullcodeline": "e = gf_isom_clone_sample_description(ctx->file, tkw->track_num, ctx->file, tkw->track_num, tkw->stsd_idx, NULL, NULL, &clone_stsd_idx);"
    },
    {
        "line": 78,
        "fullcodeline": "e = gf_isom_set_cenc_protection(ctx->file, tkw->track_num, tkw->stsd_idx, scheme_type, scheme_version, pck_is_encrypted, tkw->def_crypt_byte_block, tkw->def_skip_byte_block, tkw->cenc_ki->value.data.ptr, tkw->cenc_ki->value.data.size);"
    },
    {
        "line": 104,
        "fullcodeline": "if ((ctx->psshs == MP4MX_PSSH_MOOV) || (ctx->psshs == MP4MX_PSSH_BOTH))"
    },
    {
        "line": 105,
        "fullcodeline": "mp4_mux_cenc_insert_pssh(ctx, tkw, NULL, 0);"
    },
    {
        "line": 107,
        "fullcodeline": "if (!tkw->has_brands && (scheme_type==GF_ISOM_OMADRM_SCHEME))"
    },
    {
        "line": 108,
        "fullcodeline": "gf_isom_modify_alternate_brand(ctx->file, GF_ISOM_BRAND_OPF2, GF_TRUE);"
    },
    {
        "line": 192,
        "fullcodeline": "mp4_mux_cenc_insert_pssh(ctx, tkw, p, 0);"
    },
    {
        "line": 199,
        "fullcodeline": "if (tkw->constant_IV_size && !tkw->cenc_subsamples)"
    },
    {
        "line": 204,
        "fullcodeline": "u32 olen = pck_size;"
    },
    {
        "line": 205,
        "fullcodeline": "GF_BitStream *bs = gf_bs_new(NULL, 9, GF_BITSTREAM_WRITE);"
    },
    {
        "line": 236,
        "fullcodeline": "gf_bs_get_content(bs, &fake_sai, &sai_size);"
    },
    {
        "line": 238,
        "fullcodeline": "sai = fake_sai;"
    },
    {
        "line": 343,
        "fullcodeline": "e = gf_isom_fragment_set_cenc_sai(ctx->file, tkw->track_id, sai, sai_size, tkw->cenc_subsamples, ctx->saio32, tkw->cenc_multikey);"
    },
    {
        "line": 43,
        "fullcodeline": "else pck_is_encrypted = GF_FALSE;"
    },
    {
        "line": 85,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[MP4Mux] Failed to setup CENC information: %s\\n\", gf_error_to_string(e) ));"
    },
    {
        "line": 93,
        "fullcodeline": "for (k=0; k<nb_sdesc; k++) {"
    },
    {
        "line": 111,
        "fullcodeline": "if (container_type==GF_ISOM_BOX_UUID_PSEC) {"
    },
    {
        "line": 134,
        "fullcodeline": "if (!tkw->samples_in_frag) {"
    },
    {
        "line": 158,
        "fullcodeline": "char dumb_key[20];"
    },
    {
        "line": 159,
        "fullcodeline": "memset(dumb_key, 0, 20); //dumb key, IV size 0, not protected"
    },
    {
        "line": 160,
        "fullcodeline": "e = gf_isom_set_sample_cenc_group(ctx->file, tkw->track_num, sample_num, GF_FALSE, 0, 0, dumb_key, 20);"
    },
    {
        "line": 161,
        "fullcodeline": "IV_size = 0;"
    },
    {
        "line": 162,
        "fullcodeline": "tkw->has_seig = GF_TRUE;"
    },
    {
        "line": 178,
        "fullcodeline": "e = gf_isom_set_sample_cenc_group(ctx->file, tkw->track_num, sample_num, 1, tkw->crypt_byte_block, tkw->skip_byte_block, tkw->cenc_ki->value.data.ptr, tkw->cenc_ki->value.data.size);"
    },
    {
        "line": 179,
        "fullcodeline": "tkw->has_seig = GF_TRUE;"
    },
    {
        "line": 194,
        "fullcodeline": "gf_isom_set_sample_group_description(ctx->file, tkw->track_num, sample_num, GF_4CC('P','S','S','H'), 0, p->value.data.ptr, p->value.data.size, 0);"
    },
    {
        "line": 249,
        "fullcodeline": "assert(tkw->cenc_subsamples);"
    },
    {
        "line": 291,
        "fullcodeline": "offset += sub_count_size;"
    },
    {
        "line": 292,
        "fullcodeline": "sai_d = sai + offset;"
    },
    {
        "line": 293,
        "fullcodeline": "first_sub_clear = sai_d[0];"
    },
    {
        "line": 294,
        "fullcodeline": "first_sub_clear<<=8;"
    },
    {
        "line": 295,
        "fullcodeline": "first_sub_clear |= sai_d[1];"
    },
    {
        "line": 296,
        "fullcodeline": "first_sub_clear += injected_hdr_size;"
    },
    {
        "line": 345,
        "fullcodeline": "e = gf_isom_fragment_set_cenc_sai(ctx->file, tkw->track_id, NULL, 0, GF_FALSE, ctx->saio32, tkw->cenc_multikey);"
    },
    {
        "line": 352,
        "fullcodeline": "e = gf_isom_track_cenc_add_sample_info(ctx->file, tkw->track_num, GF_ISOM_BOX_TYPE_SENC, sai, sai_size, tkw->cenc_subsamples, ctx->saio32, tkw->cenc_multikey);"
    },
    {
        "line": 59,
        "fullcodeline": "tkw->clear_stsd_idx = tkw->stsd_idx;"
    },
    {
        "line": 60,
        "fullcodeline": "tkw->stsd_idx = clone_stsd_idx;"
    },
    {
        "line": 112,
        "fullcodeline": "e = gf_isom_piff_allocate_storage(ctx->file, tkw->track_num, 0, 0, NULL);"
    },
    {
        "line": 135,
        "fullcodeline": "tkw->cenc_frag_protected = pck_is_encrypted;"
    },
    {
        "line": 207,
        "fullcodeline": "gf_bs_write_u16(bs, 0);"
    },
    {
        "line": 214,
        "fullcodeline": "u32 subsample_count = 1;"
    },
    {
        "line": 219,
        "fullcodeline": "gf_bs_write_u16(bs, subsample_count);"
    },
    {
        "line": 220,
        "fullcodeline": "olen = pck_size;"
    },
    {
        "line": 286,
        "fullcodeline": "if (sai_size < offset + sub_count_size + 6) {"
    },
    {
        "line": 298,
        "fullcodeline": "if (first_sub_clear < 0xFFFF) {"
    },
    {
        "line": 54,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[MP4Mux] Failed to clone sample description: %s\\n\", gf_error_to_string(e) ));"
    },
    {
        "line": 94,
        "fullcodeline": "if (k+1 == tkw->stsd_idx) continue;"
    },
    {
        "line": 96,
        "fullcodeline": "if (gf_isom_is_same_sample_description(ctx->file, tkw->track_num, tkw->stsd_idx, ctx->file, tkw->track_num, k+1) ) {"
    },
    {
        "line": 114,
        "fullcodeline": "e = gf_isom_cenc_allocate_storage(ctx->file, tkw->track_num);"
    },
    {
        "line": 117,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[MP4Mux] Failed to setup CENC storage: %s\\n\", gf_error_to_string(e) ));"
    },
    {
        "line": 150,
        "fullcodeline": "return gf_isom_fragment_set_cenc_sai(ctx->file, tkw->track_id, NULL, 0, GF_FALSE, ctx->saio32, tkw->cenc_multikey);"
    },
    {
        "line": 170,
        "fullcodeline": "else if (tkw->def_crypt_byte_block != tkw->crypt_byte_block)"
    },
    {
        "line": 209,
        "fullcodeline": "gf_bs_write_long_int(bs, 0, IV_size*8);"
    },
    {
        "line": 215,
        "fullcodeline": "while (olen>0xFFFF) {"
    },
    {
        "line": 221,
        "fullcodeline": "for (i = 0; i < subsample_count; i++) {"
    },
    {
        "line": 254,
        "fullcodeline": "u32 j, nb_iv_init = sai[0];"
    },
    {
        "line": 255,
        "fullcodeline": "nb_iv_init <<= 8;"
    },
    {
        "line": 256,
        "fullcodeline": "nb_iv_init |= sai[1];"
    },
    {
        "line": 257,
        "fullcodeline": "u8 *sai_p = sai + 2;"
    },
    {
        "line": 258,
        "fullcodeline": "remain = sai_size-2;"
    },
    {
        "line": 279,
        "fullcodeline": "offset = (u32) (sai_p - sai);"
    },
    {
        "line": 280,
        "fullcodeline": "sub_count_size = 4; //32bit sub count"
    },
    {
        "line": 299,
        "fullcodeline": "fake_sai = gf_malloc(sizeof(u8) * sai_size);"
    },
    {
        "line": 301,
        "fullcodeline": "memcpy(fake_sai, sai, sizeof(u8) * sai_size);"
    },
    {
        "line": 305,
        "fullcodeline": "sai = fake_sai;"
    },
    {
        "line": 97,
        "fullcodeline": "gf_isom_remove_stream_description(ctx->file, tkw->track_num, tkw->stsd_idx);"
    },
    {
        "line": 98,
        "fullcodeline": "tkw->stsd_idx = k+1;"
    },
    {
        "line": 137,
        "fullcodeline": "if (tkw->cenc_frag_protected != pck_is_encrypted) {"
    },
    {
        "line": 155,
        "fullcodeline": "return gf_isom_track_cenc_add_sample_info(ctx->file, tkw->track_num, GF_ISOM_BOX_TYPE_SENC, NULL, 0, tkw->cenc_subsamples, ctx->saio32, tkw->cenc_multikey);"
    },
    {
        "line": 181,
        "fullcodeline": "e = gf_isom_set_sample_cenc_default_group(ctx->file, tkw->track_num, sample_num);"
    },
    {
        "line": 216,
        "fullcodeline": "olen -= 0xFFFF;"
    },
    {
        "line": 217,
        "fullcodeline": "subsample_count ++;"
    },
    {
        "line": 232,
        "fullcodeline": "gf_bs_write_u16(bs, clear_size);"
    },
    {
        "line": 233,
        "fullcodeline": "gf_bs_write_u32(bs, 0);"
    },
    {
        "line": 260,
        "fullcodeline": "for (j=0; j<nb_iv_init; j++) {"
    },
    {
        "line": 283,
        "fullcodeline": "offset = key_info_get_iv_size(tkw->cenc_ki->value.data.ptr, tkw->cenc_ki->value.data.size, 1, NULL, NULL);"
    },
    {
        "line": 284,
        "fullcodeline": "sub_count_size = 2; //16bit sub count"
    },
    {
        "line": 300,
        "fullcodeline": "if (!fake_sai) return GF_OUT_OF_MEM;"
    },
    {
        "line": 303,
        "fullcodeline": "sai_d[0] = (first_sub_clear>>8) & 0xFF;"
    },
    {
        "line": 304,
        "fullcodeline": "sai_d[1] = (first_sub_clear) & 0xFF;"
    },
    {
        "line": 309,
        "fullcodeline": "fake_sai = gf_malloc(sizeof(u8) * (sai_size+6));"
    },
    {
        "line": 312,
        "fullcodeline": "memcpy(fake_sai, sai, sizeof(u8) * offset);"
    },
    {
        "line": 317,
        "fullcodeline": "sai_d[0] = (injected_hdr_size>>8) & 0xFF;"
    },
    {
        "line": 318,
        "fullcodeline": "sai_d[1] = (injected_hdr_size) & 0xFF;"
    },
    {
        "line": 319,
        "fullcodeline": "sai_d[2] = sai_d[3] = sai_d[4] = sai_d[5] = 0;"
    },
    {
        "line": 321,
        "fullcodeline": "sai_d = fake_sai + offset - sub_count_size;"
    },
    {
        "line": 335,
        "fullcodeline": "sai = fake_sai;"
    },
    {
        "line": 336,
        "fullcodeline": "sai_size += 6;"
    },
    {
        "line": 354,
        "fullcodeline": "e = gf_isom_track_cenc_add_sample_info(ctx->file, tkw->track_num, GF_ISOM_BOX_TYPE_SENC, NULL, 0, tkw->cenc_subsamples, ctx->saio32, tkw->cenc_multikey);"
    },
    {
        "line": 64,
        "fullcodeline": "tkw->clear_stsd_idx = tkw->stsd_idx;"
    },
    {
        "line": 65,
        "fullcodeline": "tkw->stsd_idx = clone_stsd_idx;"
    },
    {
        "line": 223,
        "fullcodeline": "if (olen<0xFFFF) {"
    },
    {
        "line": 262,
        "fullcodeline": "u32 idx = sai_p[0];"
    },
    {
        "line": 263,
        "fullcodeline": "idx<<=8;"
    },
    {
        "line": 264,
        "fullcodeline": "idx |= sai_p[1];"
    },
    {
        "line": 266,
        "fullcodeline": "mk_iv_size = key_info_get_iv_size(tkw->cenc_ki->value.data.ptr, tkw->cenc_ki->value.data.size, idx, NULL, NULL);"
    },
    {
        "line": 267,
        "fullcodeline": "mk_iv_size += 2; //idx"
    },
    {
        "line": 272,
        "fullcodeline": "sai_p += mk_iv_size;"
    },
    {
        "line": 273,
        "fullcodeline": "remain -= mk_iv_size;"
    },
    {
        "line": 310,
        "fullcodeline": "if (!fake_sai) return GF_OUT_OF_MEM;"
    },
    {
        "line": 314,
        "fullcodeline": "memcpy(fake_sai+offset+6, sai+offset, sizeof(u8) * (sai_size - offset) );"
    },
    {
        "line": 69,
        "fullcodeline": "tkw->clear_stsd_idx = clone_stsd_idx;"
    },
    {
        "line": 172,
        "fullcodeline": "else if (tkw->def_skip_byte_block != tkw->skip_byte_block)"
    },
    {
        "line": 224,
        "fullcodeline": "clear_size = olen;"
    },
    {
        "line": 231,
        "fullcodeline": "gf_bs_write_u16(bs, 0);"
    },
    {
        "line": 268,
        "fullcodeline": "if (mk_iv_size > remain) {"
    },
    {
        "line": 274,
        "fullcodeline": "if (remain && (remain<=2)) {"
    },
    {
        "line": 323,
        "fullcodeline": "u32 cnt = ((u32) sai_d[0]) << 8 | (u32) sai_d[1];"
    },
    {
        "line": 324,
        "fullcodeline": "cnt++;"
    },
    {
        "line": 226,
        "fullcodeline": "clear_size = 0xFFFF;"
    },
    {
        "line": 227,
        "fullcodeline": "olen -= 0xFFFF;"
    },
    {
        "line": 325,
        "fullcodeline": "sai_d[0] = (cnt>>8) & 0xFF;"
    },
    {
        "line": 326,
        "fullcodeline": "sai_d[1] = (cnt) & 0xFF;"
    },
    {
        "line": 328,
        "fullcodeline": "u32 cnt = GF_4CC( sai_d[0], sai_d[1], sai_d[2], sai_d[3]);"
    },
    {
        "line": 329,
        "fullcodeline": "cnt++;"
    },
    {
        "line": 330,
        "fullcodeline": "sai_d[0] = (cnt>>24) & 0xFF;"
    },
    {
        "line": 331,
        "fullcodeline": "sai_d[1] = (cnt>>16) & 0xFF;"
    },
    {
        "line": 332,
        "fullcodeline": "sai_d[2] = (cnt>>8) & 0xFF;"
    },
    {
        "line": 333,
        "fullcodeline": "sai_d[3] = (cnt) & 0xFF;"
    },
    {
        "line": 174,
        "fullcodeline": "else if (tkw->def_cenc_key_info_crc != tkw->cenc_key_info_crc)"
    }
]