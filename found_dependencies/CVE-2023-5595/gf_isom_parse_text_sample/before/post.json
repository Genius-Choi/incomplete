[
    {
        "line": 3,
        "fullcodeline": "GF_TextSample *s = gf_isom_new_text_sample();"
    },
    {
        "line": 8,
        "fullcodeline": "s->len = gf_bs_read_u16(bs);"
    },
    {
        "line": 6,
        "fullcodeline": "if (!bs || !gf_bs_available(bs)) return s;"
    },
    {
        "line": 19,
        "fullcodeline": "while (gf_bs_available(bs)) {"
    },
    {
        "line": 12,
        "fullcodeline": "s->text = (char *) gf_malloc(sizeof(char)*(s->len+2) );"
    },
    {
        "line": 14,
        "fullcodeline": "s->text[s->len] = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "s->text[s->len+1] = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "gf_bs_read_data(bs, s->text, s->len);"
    },
    {
        "line": 21,
        "fullcodeline": "GF_Err e = gf_isom_box_parse(&a, bs);"
    },
    {
        "line": 13,
        "fullcodeline": "if (!s->text) return NULL;"
    },
    {
        "line": 42,
        "fullcodeline": "s->cur_karaoke = (GF_TextKaraokeBox*)a;"
    },
    {
        "line": 46,
        "fullcodeline": "gf_list_add(s->others, a);"
    },
    {
        "line": 65,
        "fullcodeline": "s->is_forced = GF_TRUE;"
    },
    {
        "line": 66,
        "fullcodeline": "gf_isom_box_del(a);"
    },
    {
        "line": 69,
        "fullcodeline": "gf_isom_box_del(a);"
    },
    {
        "line": 27,
        "fullcodeline": "GF_TextStyleBox *st2 = (GF_TextStyleBox *)a;"
    },
    {
        "line": 49,
        "fullcodeline": "if (s->highlight_color) gf_isom_box_del(a);"
    },
    {
        "line": 53,
        "fullcodeline": "if (s->scroll_delay) gf_isom_box_del(a);"
    },
    {
        "line": 57,
        "fullcodeline": "if (s->box) gf_isom_box_del(a);"
    },
    {
        "line": 61,
        "fullcodeline": "if (s->wrap) gf_isom_box_del(a);"
    },
    {
        "line": 28,
        "fullcodeline": "if (!s->styles->entry_count) {"
    },
    {
        "line": 38,
        "fullcodeline": "s->styles = (GF_TextStyleBox*)a;"
    },
    {
        "line": 50,
        "fullcodeline": "else s->highlight_color = (GF_TextHighlightColorBox *) a;"
    },
    {
        "line": 54,
        "fullcodeline": "else s->scroll_delay= (GF_TextScrollDelayBox*) a;"
    },
    {
        "line": 58,
        "fullcodeline": "else s->box= (GF_TextBoxBox *) a;"
    },
    {
        "line": 62,
        "fullcodeline": "else s->wrap= (GF_TextWrapBox*) a;"
    },
    {
        "line": 29,
        "fullcodeline": "gf_isom_box_del((GF_Box*)s->styles);"
    },
    {
        "line": 30,
        "fullcodeline": "s->styles = st2;"
    },
    {
        "line": 32,
        "fullcodeline": "s->styles->styles = (GF_StyleRecord*)gf_realloc(s->styles->styles, sizeof(GF_StyleRecord) * (s->styles->entry_count + st2->entry_count));"
    },
    {
        "line": 33,
        "fullcodeline": "memcpy(&s->styles->styles[s->styles->entry_count], st2->styles, sizeof(GF_StyleRecord) * st2->entry_count);"
    },
    {
        "line": 34,
        "fullcodeline": "s->styles->entry_count += st2->entry_count;"
    },
    {
        "line": 35,
        "fullcodeline": "gf_isom_box_del(a);"
    }
]