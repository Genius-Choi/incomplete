[
    {
        "line": 3,
        "fullcodeline": "auto device = ctx->eigen_device<CPUDevice>();"
    },
    {
        "line": 5,
        "fullcodeline": "auto input = Tensor(in).flat_inner_dims<ComplexT, FFTRank + 1>();"
    },
    {
        "line": 6,
        "fullcodeline": "auto output = out->flat_inner_dims<RealT, FFTRank + 1>();"
    },
    {
        "line": 7,
        "fullcodeline": "const auto input_dims = input.dimensions();"
    },
    {
        "line": 13,
        "fullcodeline": "Eigen::DSizes<Eigen::DenseIndex, FFTRank + 1> input_slice_sizes;"
    },
    {
        "line": 14,
        "fullcodeline": "input_slice_sizes[0] = input_dims[0];"
    },
    {
        "line": 16,
        "fullcodeline": "full_fft_shape.AddDim(input_dims[0]);"
    },
    {
        "line": 24,
        "fullcodeline": "OP_REQUIRES_OK(ctx, ctx->allocate_temp(DataTypeToEnum<ComplexT>::v(),"
    },
    {
        "line": 26,
        "fullcodeline": "auto full_fft = temp.flat_inner_dims<ComplexT, FFTRank + 1>();"
    },
    {
        "line": 30,
        "fullcodeline": "auto neg_sizes = input_slice_sizes;"
    },
    {
        "line": 31,
        "fullcodeline": "neg_sizes[FFTRank] = fft_shape[FFTRank - 1] - input_slice_sizes[FFTRank];"
    },
    {
        "line": 32,
        "fullcodeline": "Eigen::DSizes<Eigen::DenseIndex, FFTRank + 1> neg_target_indices;"
    },
    {
        "line": 33,
        "fullcodeline": "neg_target_indices[FFTRank] = input_slice_sizes[FFTRank];"
    },
    {
        "line": 36,
        "fullcodeline": "Eigen::DSizes<Eigen::DenseIndex, FFTRank + 1> neg_start_indices;"
    },
    {
        "line": 37,
        "fullcodeline": "neg_start_indices[FFTRank] = 1;"
    },
    {
        "line": 39,
        "fullcodeline": "full_fft.slice(start_indices, input_slice_sizes).device(device) ="
    },
    {
        "line": 67,
        "fullcodeline": "auto inner_axis = Eigen::array<int, 1>{FFTRank};"
    },
    {
        "line": 68,
        "fullcodeline": "output.device(device) ="
    },
    {
        "line": 17,
        "fullcodeline": "for (auto i = 1; i <= FFTRank; i++) {"
    },
    {
        "line": 40,
        "fullcodeline": "input.slice(start_indices, input_slice_sizes);"
    },
    {
        "line": 45,
        "fullcodeline": "if (FFTRank > 1) {"
    },
    {
        "line": 56,
        "fullcodeline": "for (auto i = 0; i <= FFTRank; i++) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (neg_sizes[FFTRank] != 0) {"
    },
    {
        "line": 69,
        "fullcodeline": "full_fft.template fft<Eigen::RealPart, Eigen::FFT_REVERSE>(inner_axis);"
    },
    {
        "line": 18,
        "fullcodeline": "input_slice_sizes[i] ="
    },
    {
        "line": 20,
        "fullcodeline": "full_fft_shape.AddDim(fft_shape[i - 1]);"
    },
    {
        "line": 46,
        "fullcodeline": "const auto outer_axes ="
    },
    {
        "line": 48,
        "fullcodeline": "full_fft.slice(start_indices, input_slice_sizes).device(device) ="
    },
    {
        "line": 57,
        "fullcodeline": "reverse_last_axis[i] = i == FFTRank;"
    },
    {
        "line": 61,
        "fullcodeline": "full_fft.slice(neg_target_indices, neg_sizes).device(device) ="
    },
    {
        "line": 19,
        "fullcodeline": "i == FFTRank ? fft_shape[i - 1] / 2 + 1 : fft_shape[i - 1];"
    },
    {
        "line": 47,
        "fullcodeline": "Eigen::ArrayXi::LinSpaced(FFTRank - 1, 1, FFTRank - 1);"
    },
    {
        "line": 49,
        "fullcodeline": "full_fft.slice(start_indices, input_slice_sizes)"
    },
    {
        "line": 62,
        "fullcodeline": "full_fft.slice(neg_start_indices, neg_sizes)"
    }
]