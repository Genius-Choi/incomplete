[
    {
        "line": 6,
        "fullcodeline": "bool is_dir = d_is_dir(old_dentry);"
    },
    {
        "line": 8,
        "fullcodeline": "struct inode *source = old_dentry->d_inode;"
    },
    {
        "line": 9,
        "fullcodeline": "struct inode *target = new_dentry->d_inode;"
    },
    {
        "line": 10,
        "fullcodeline": "bool new_is_dir = false;"
    },
    {
        "line": 20,
        "fullcodeline": "error = may_delete(old_dir, old_dentry, is_dir);"
    },
    {
        "line": 60,
        "fullcodeline": "error = security_inode_rename(old_dir, old_dentry, new_dir, new_dentry,"
    },
    {
        "line": 65,
        "fullcodeline": "old_name = fsnotify_oldname_init(old_dentry->d_name.name);"
    },
    {
        "line": 66,
        "fullcodeline": "dget(new_dentry);"
    },
    {
        "line": 72,
        "fullcodeline": "error = -EBUSY;"
    },
    {
        "line": 124,
        "fullcodeline": "dput(new_dentry);"
    },
    {
        "line": 133,
        "fullcodeline": "fsnotify_oldname_free(old_name);"
    },
    {
        "line": 17,
        "fullcodeline": "if (vfs_select_inode(old_dentry, 0) == vfs_select_inode(new_dentry, 0))"
    },
    {
        "line": 24,
        "fullcodeline": "if (!target) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (!old_dir->i_op->rename && !old_dir->i_op->rename2)"
    },
    {
        "line": 40,
        "fullcodeline": "if (flags && !old_dir->i_op->rename2)"
    },
    {
        "line": 47,
        "fullcodeline": "if (new_dir != old_dir) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (!is_dir || (flags & RENAME_EXCHANGE))"
    },
    {
        "line": 73,
        "fullcodeline": "if (is_local_mountpoint(old_dentry) || is_local_mountpoint(new_dentry))"
    },
    {
        "line": 76,
        "fullcodeline": "if (max_links && new_dir != old_dir) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (is_dir && !(flags & RENAME_EXCHANGE) && target)"
    },
    {
        "line": 86,
        "fullcodeline": "if (!is_dir) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (target && !new_is_dir) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (!old_dir->i_op->rename2) {"
    },
    {
        "line": 107,
        "fullcodeline": "if (!(flags & RENAME_EXCHANGE) && target) {"
    },
    {
        "line": 113,
        "fullcodeline": "if (!(old_dir->i_sb->s_type->fs_flags & FS_RENAME_DOES_D_MOVE)) {"
    },
    {
        "line": 120,
        "fullcodeline": "if (!is_dir || (flags & RENAME_EXCHANGE))"
    },
    {
        "line": 125,
        "fullcodeline": "if (!error) {"
    },
    {
        "line": 25,
        "fullcodeline": "error = may_create(new_dir, new_dentry);"
    },
    {
        "line": 68,
        "fullcodeline": "lock_two_nondirectories(source, target);"
    },
    {
        "line": 77,
        "fullcodeline": "error = -EMLINK;"
    },
    {
        "line": 85,
        "fullcodeline": "shrink_dcache_parent(new_dentry);"
    },
    {
        "line": 87,
        "fullcodeline": "error = try_break_deleg(source, delegated_inode);"
    },
    {
        "line": 92,
        "fullcodeline": "error = try_break_deleg(target, delegated_inode);"
    },
    {
        "line": 97,
        "fullcodeline": "error = old_dir->i_op->rename(old_dir, old_dentry,"
    },
    {
        "line": 110,
        "fullcodeline": "dont_mount(new_dentry);"
    },
    {
        "line": 111,
        "fullcodeline": "detach_mounts(new_dentry);"
    },
    {
        "line": 121,
        "fullcodeline": "unlock_two_nondirectories(source, target);"
    },
    {
        "line": 126,
        "fullcodeline": "fsnotify_move(old_dir, new_dir, old_name, is_dir,"
    },
    {
        "line": 27,
        "fullcodeline": "new_is_dir = d_is_dir(new_dentry);"
    },
    {
        "line": 38,
        "fullcodeline": "return -EPERM;"
    },
    {
        "line": 41,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 53,
        "fullcodeline": "if ((flags & RENAME_EXCHANGE) && new_is_dir) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (is_dir && !new_is_dir && new_dir->i_nlink >= max_links)"
    },
    {
        "line": 80,
        "fullcodeline": "if ((flags & RENAME_EXCHANGE) && !is_dir && new_is_dir &&"
    },
    {
        "line": 100,
        "fullcodeline": "WARN_ON(old_dir->i_op->rename != NULL);"
    },
    {
        "line": 101,
        "fullcodeline": "error = old_dir->i_op->rename2(old_dir, old_dentry,"
    },
    {
        "line": 114,
        "fullcodeline": "if (!(flags & RENAME_EXCHANGE))"
    },
    {
        "line": 127,
        "fullcodeline": "!(flags & RENAME_EXCHANGE) ? target : NULL, old_dentry);"
    },
    {
        "line": 128,
        "fullcodeline": "if (flags & RENAME_EXCHANGE) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (!(flags & RENAME_EXCHANGE))"
    },
    {
        "line": 49,
        "fullcodeline": "error = inode_permission(source, MAY_WRITE);"
    },
    {
        "line": 54,
        "fullcodeline": "error = inode_permission(target, MAY_WRITE);"
    },
    {
        "line": 81,
        "fullcodeline": "old_dir->i_nlink >= max_links)"
    },
    {
        "line": 109,
        "fullcodeline": "target->i_flags |= S_DEAD;"
    },
    {
        "line": 115,
        "fullcodeline": "d_move(old_dentry, new_dentry);"
    },
    {
        "line": 129,
        "fullcodeline": "fsnotify_move(new_dir, old_dir, old_dentry->d_name.name,"
    },
    {
        "line": 30,
        "fullcodeline": "error = may_delete(new_dir, new_dentry, is_dir);"
    },
    {
        "line": 70,
        "fullcodeline": "inode_lock(target);"
    },
    {
        "line": 117,
        "fullcodeline": "d_exchange(old_dentry, new_dentry);"
    },
    {
        "line": 123,
        "fullcodeline": "inode_unlock(target);"
    },
    {
        "line": 32,
        "fullcodeline": "error = may_delete(new_dir, new_dentry, new_is_dir);"
    }
]