[
    {
        "line": 6,
        "fullcodeline": "int chunkNum = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "char *chunkData = NULL;\t/* So we can gdFree it with impunity. */"
    },
    {
        "line": 8,
        "fullcodeline": "char *compData = NULL;\t/* So we can gdFree it with impunity. */"
    },
    {
        "line": 10,
        "fullcodeline": "int idxPos = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "t_chunk_info *chunkIdx = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "int bytesPerPixel = im->trueColor ? 4 : 1;"
    },
    {
        "line": 15,
        "fullcodeline": "int compMax = 0;"
    },
    {
        "line": 43,
        "fullcodeline": "ncx = (im->sx + cs - 1) / cs;"
    },
    {
        "line": 44,
        "fullcodeline": "ncy = (im->sy + cs - 1) / cs;"
    },
    {
        "line": 47,
        "fullcodeline": "_gd2PutHeader (im, out, cs, fmt, ncx, ncy);"
    },
    {
        "line": 86,
        "fullcodeline": "_gdPutColors (im, out);"
    },
    {
        "line": 88,
        "fullcodeline": "GD2_DBG (printf (\"Size: %dx%d\\n\", im->sx, im->sy));"
    },
    {
        "line": 89,
        "fullcodeline": "GD2_DBG (printf (\"Chunks: %dx%d\\n\", ncx, ncy));"
    },
    {
        "line": 184,
        "fullcodeline": "GD2_DBG (printf (\"Freeing memory\\n\"));"
    },
    {
        "line": 195,
        "fullcodeline": "GD2_DBG (printf (\"Done\\n\"));"
    },
    {
        "line": 22,
        "fullcodeline": "if ((fmt != GD2_FMT_RAW) && (fmt != GD2_FMT_COMPRESSED)) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (cs == 0) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (gd2_compressed (fmt)) {"
    },
    {
        "line": 91,
        "fullcodeline": "for (cy = 0; (cy < ncy); cy++) {"
    },
    {
        "line": 164,
        "fullcodeline": "if (gd2_compressed (fmt)) {"
    },
    {
        "line": 23,
        "fullcodeline": "fmt = GD2_FMT_COMPRESSED;"
    },
    {
        "line": 26,
        "fullcodeline": "fmt += 2;"
    },
    {
        "line": 35,
        "fullcodeline": "cs = GD2_CHUNKSIZE;"
    },
    {
        "line": 57,
        "fullcodeline": "compMax = cs * bytesPerPixel * cs * 1.02 + 12;"
    },
    {
        "line": 62,
        "fullcodeline": "chunkData = gdCalloc (cs * bytesPerPixel * cs, 1);"
    },
    {
        "line": 66,
        "fullcodeline": "compData = gdCalloc (compMax, 1);"
    },
    {
        "line": 75,
        "fullcodeline": "idxPos = gdTell (out);"
    },
    {
        "line": 76,
        "fullcodeline": "idxSize = ncx * ncy * sizeof (t_chunk_info);"
    },
    {
        "line": 77,
        "fullcodeline": "GD2_DBG (printf (\"Index size is %d\\n\", idxSize));"
    },
    {
        "line": 78,
        "fullcodeline": "gdSeek (out, idxPos + idxSize);"
    },
    {
        "line": 80,
        "fullcodeline": "chunkIdx = gdCalloc (idxSize * sizeof (t_chunk_info), 1);"
    },
    {
        "line": 166,
        "fullcodeline": "GD2_DBG (printf (\"Seeking %d to write index\\n\", idxPos));"
    },
    {
        "line": 167,
        "fullcodeline": "posSave = gdTell (out);"
    },
    {
        "line": 168,
        "fullcodeline": "gdSeek (out, idxPos);"
    },
    {
        "line": 169,
        "fullcodeline": "GD2_DBG (printf (\"Writing index\\n\"));"
    },
    {
        "line": 179,
        "fullcodeline": "gdSeek (out, posSave);"
    },
    {
        "line": 187,
        "fullcodeline": "gdFree (chunkData);"
    },
    {
        "line": 190,
        "fullcodeline": "gdFree (compData);"
    },
    {
        "line": 193,
        "fullcodeline": "gdFree (chunkIdx);"
    },
    {
        "line": 63,
        "fullcodeline": "if (!chunkData) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (!compData) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (!chunkIdx) {"
    },
    {
        "line": 92,
        "fullcodeline": "for (cx = 0; (cx < ncx); cx++) {"
    },
    {
        "line": 170,
        "fullcodeline": "for (x = 0; x < chunkNum; x++) {"
    },
    {
        "line": 36,
        "fullcodeline": "} else if (cs < GD2_CHUNKSIZE_MIN) {"
    },
    {
        "line": 94,
        "fullcodeline": "ylo = cy * cs;"
    },
    {
        "line": 95,
        "fullcodeline": "yhi = ylo + cs;"
    },
    {
        "line": 100,
        "fullcodeline": "GD2_DBG (printf"
    },
    {
        "line": 103,
        "fullcodeline": "chunkLen = 0;"
    },
    {
        "line": 171,
        "fullcodeline": "GD2_DBG (printf"
    },
    {
        "line": 174,
        "fullcodeline": "gdPutInt (chunkIdx[x].offset, out);"
    },
    {
        "line": 175,
        "fullcodeline": "gdPutInt (chunkIdx[x].size, out);"
    },
    {
        "line": 37,
        "fullcodeline": "cs = GD2_CHUNKSIZE_MIN;"
    },
    {
        "line": 96,
        "fullcodeline": "if (yhi > im->sy) {"
    },
    {
        "line": 104,
        "fullcodeline": "for (y = ylo; (y < yhi); y++) {"
    },
    {
        "line": 142,
        "fullcodeline": "if (gd2_compressed (fmt)) {"
    },
    {
        "line": 97,
        "fullcodeline": "yhi = im->sy;"
    },
    {
        "line": 108,
        "fullcodeline": "xlo = cx * cs;"
    },
    {
        "line": 109,
        "fullcodeline": "xhi = xlo + cs;"
    },
    {
        "line": 143,
        "fullcodeline": "compLen = compMax;"
    },
    {
        "line": 38,
        "fullcodeline": "} else if (cs > GD2_CHUNKSIZE_MAX) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (xhi > im->sx) {"
    },
    {
        "line": 114,
        "fullcodeline": "if (gd2_compressed (fmt)) {"
    },
    {
        "line": 144,
        "fullcodeline": "if (compress ((unsigned char *)"
    },
    {
        "line": 39,
        "fullcodeline": "cs = GD2_CHUNKSIZE_MAX;"
    },
    {
        "line": 111,
        "fullcodeline": "xhi = im->sx;"
    },
    {
        "line": 148,
        "fullcodeline": "printf (\"Error from compressing\\n\");"
    },
    {
        "line": 115,
        "fullcodeline": "for (x = xlo; x < xhi; x++) {"
    },
    {
        "line": 150,
        "fullcodeline": "chunkIdx[chunkNum].offset = gdTell (out);"
    },
    {
        "line": 151,
        "fullcodeline": "chunkIdx[chunkNum++].size = compLen;"
    },
    {
        "line": 152,
        "fullcodeline": "GD2_DBG (printf"
    },
    {
        "line": 130,
        "fullcodeline": "for (x = xlo; x < xhi; x++) {"
    },
    {
        "line": 157,
        "fullcodeline": "if (gdPutBuf (compData, compLen, out) <= 0) {"
    },
    {
        "line": 158,
        "fullcodeline": "gd_error(\"gd write error\\n\");"
    },
    {
        "line": 119,
        "fullcodeline": "int p = im->tpixels[y][x];"
    },
    {
        "line": 120,
        "fullcodeline": "chunkData[chunkLen++] = gdTrueColorGetAlpha (p);"
    },
    {
        "line": 121,
        "fullcodeline": "chunkData[chunkLen++] = gdTrueColorGetRed (p);"
    },
    {
        "line": 122,
        "fullcodeline": "chunkData[chunkLen++] = gdTrueColorGetGreen (p);"
    },
    {
        "line": 123,
        "fullcodeline": "chunkData[chunkLen++] = gdTrueColorGetBlue (p);"
    },
    {
        "line": 126,
        "fullcodeline": "chunkData[chunkLen++] = p;"
    },
    {
        "line": 134,
        "fullcodeline": "gdPutInt (im->tpixels[y][x], out);"
    },
    {
        "line": 154,
        "fullcodeline": "chunkIdx[chunkNum - 1].size,"
    },
    {
        "line": 155,
        "fullcodeline": "chunkIdx[chunkNum - 1].offset));"
    },
    {
        "line": 136,
        "fullcodeline": "gdPutC ((unsigned char) im->pixels[y][x], out);"
    }
]