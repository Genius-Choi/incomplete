[
    {
        "line": 3,
        "fullcodeline": "struct pipe_inode_info *pipe = i->pipe;"
    },
    {
        "line": 5,
        "fullcodeline": "int idx = i->idx;"
    },
    {
        "line": 6,
        "fullcodeline": "size_t off = i->iov_offset, orig_sz;"
    },
    {
        "line": 10,
        "fullcodeline": "orig_sz = size;"
    },
    {
        "line": 37,
        "fullcodeline": "i->count -= orig_sz;"
    },
    {
        "line": 8,
        "fullcodeline": "if (unlikely(i->count < size))"
    },
    {
        "line": 9,
        "fullcodeline": "size = i->count;"
    },
    {
        "line": 22,
        "fullcodeline": "buf->len = size;"
    },
    {
        "line": 23,
        "fullcodeline": "i->idx = idx;"
    },
    {
        "line": 24,
        "fullcodeline": "off = i->iov_offset = buf->offset + size;"
    },
    {
        "line": 27,
        "fullcodeline": "idx = next_idx(idx, pipe);"
    },
    {
        "line": 29,
        "fullcodeline": "int unused = (pipe->curbuf + pipe->nrbufs) & (pipe->buffers - 1);"
    },
    {
        "line": 31,
        "fullcodeline": "while (idx != unused) {"
    },
    {
        "line": 14,
        "fullcodeline": "size += off - pipe->bufs[idx].offset;"
    },
    {
        "line": 16,
        "fullcodeline": "buf = &pipe->bufs[idx];"
    },
    {
        "line": 19,
        "fullcodeline": "size -= buf->len;"
    },
    {
        "line": 20,
        "fullcodeline": "idx = next_idx(idx, pipe);"
    },
    {
        "line": 32,
        "fullcodeline": "pipe_buf_release(pipe, &pipe->bufs[idx]);"
    },
    {
        "line": 33,
        "fullcodeline": "idx = next_idx(idx, pipe);"
    },
    {
        "line": 34,
        "fullcodeline": "pipe->nrbufs--;"
    },
    {
        "line": 17,
        "fullcodeline": "if (size <= buf->len)"
    }
]