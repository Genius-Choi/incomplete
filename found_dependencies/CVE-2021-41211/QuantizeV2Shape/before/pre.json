[
    {
        "line": 2,
        "fullcodeline": "int axis = -1;"
    },
    {
        "line": 3,
        "fullcodeline": "Status s = c->GetAttr(\"axis\", &axis);"
    },
    {
        "line": 7,
        "fullcodeline": "const int minmax_rank = (axis == -1) ? 0 : 1;"
    },
    {
        "line": 19,
        "fullcodeline": "c->set_output(1, minmax);"
    },
    {
        "line": 4,
        "fullcodeline": "if (!s.ok() && s.code() != error::NOT_FOUND) {"
    },
    {
        "line": 8,
        "fullcodeline": "TF_RETURN_IF_ERROR(shape_inference::UnchangedShape(c));"
    },
    {
        "line": 10,
        "fullcodeline": "TF_RETURN_IF_ERROR(c->WithRank(c->input(1), minmax_rank, &minmax));"
    },
    {
        "line": 11,
        "fullcodeline": "TF_RETURN_IF_ERROR(c->WithRank(c->input(2), minmax_rank, &minmax));"
    },
    {
        "line": 12,
        "fullcodeline": "if (axis != -1) {"
    },
    {
        "line": 21,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 14,
        "fullcodeline": "TF_RETURN_IF_ERROR(c->WithRankAtLeast(c->input(0), axis + 1, &input));"
    },
    {
        "line": 17,
        "fullcodeline": "c->Merge(c->Dim(minmax, 0), c->Dim(input, axis), &depth));"
    }
]