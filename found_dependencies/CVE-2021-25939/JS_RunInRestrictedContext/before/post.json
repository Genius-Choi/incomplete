[
    {
        "line": 3,
        "fullcodeline": "v8::HandleScope scope(isolate);"
    },
    {
        "line": 10,
        "fullcodeline": "v8::Handle<v8::Function> action = v8::Local<v8::Function>::Cast(args[0]);"
    },
    {
        "line": 15,
        "fullcodeline": "TRI_GET_GLOBALS();"
    },
    {
        "line": 5,
        "fullcodeline": "if (args.Length() != 1 || !args[0]->IsFunction()) {"
    },
    {
        "line": 11,
        "fullcodeline": "if (action.IsEmpty()) {"
    },
    {
        "line": 22,
        "fullcodeline": "v8g->_securityContext = JavaScriptSecurityContext::createRestrictedContext();"
    },
    {
        "line": 25,
        "fullcodeline": "auto guard = scopeGuard([&oldContext, &v8g]() noexcept {"
    },
    {
        "line": 29,
        "fullcodeline": "v8::Handle<v8::Object> current = isolate->GetCurrentContext()->Global();"
    },
    {
        "line": 30,
        "fullcodeline": "v8::Handle<v8::Value> callArgs[] = {v8::Null(isolate)};"
    },
    {
        "line": 31,
        "fullcodeline": "v8::Handle<v8::Value> rv = action->Call(TRI_IGETC, current, 0, callArgs).FromMaybe(v8::Local<v8::Value>());"
    },
    {
        "line": 6,
        "fullcodeline": "TRI_V8_THROW_EXCEPTION_USAGE("
    },
    {
        "line": 12,
        "fullcodeline": "THROW_ARANGO_EXCEPTION_MESSAGE(TRI_ERROR_INTERNAL, \"cannot cannot function instance for runInRestrictedContext\");"
    }
]