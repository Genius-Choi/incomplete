[
    {
        "line": 3,
        "fullcodeline": "Device* cpu_device = ctx.HostCPU();"
    },
    {
        "line": 5,
        "fullcodeline": "if (tensor_handle->Type() != TensorHandle::LOCAL) {"
    },
    {
        "line": 41,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 6,
        "fullcodeline": "Device* device = tensor_handle->device();"
    },
    {
        "line": 7,
        "fullcodeline": "device_name = device != nullptr ? device->name() : cpu_device->name();"
    },
    {
        "line": 8,
        "fullcodeline": "*result = (device == nullptr ? cpu_device : device);"
    },
    {
        "line": 9,
        "fullcodeline": "} else if (tensor_handle->dtype == DT_RESOURCE) {"
    },
    {
        "line": 14,
        "fullcodeline": "TF_RETURN_IF_ERROR(tensor_handle->Tensor(&tensor));"
    },
    {
        "line": 15,
        "fullcodeline": "const ResourceHandle& handle = tensor->flat<ResourceHandle>()(0);"
    },
    {
        "line": 16,
        "fullcodeline": "device_name = handle.device();"
    },
    {
        "line": 19,
        "fullcodeline": "TF_RETURN_IF_ERROR("
    },
    {
        "line": 21,
        "fullcodeline": "*result = input_device;"
    },
    {
        "line": 20,
        "fullcodeline": "ctx.FindDeviceFromName(device_name.c_str(), &input_device));"
    },
    {
        "line": 23,
        "fullcodeline": "Device* device = tensor_handle->device();"
    },
    {
        "line": 24,
        "fullcodeline": "const bool is_tpu = device != nullptr && device->device_type() == \"TPU\";"
    },
    {
        "line": 26,
        "fullcodeline": "const bool use_host_memory ="
    },
    {
        "line": 27,
        "fullcodeline": "is_tpu ? MTypeFromDTypeIntsOnDevice(tensor_handle->dtype)"
    },
    {
        "line": 28,
        "fullcodeline": ": MTypeFromDType(tensor_handle->dtype);"
    },
    {
        "line": 30,
        "fullcodeline": "*result = cpu_device;"
    },
    {
        "line": 38,
        "fullcodeline": "*result = (device == nullptr ? cpu_device : device);"
    },
    {
        "line": 35,
        "fullcodeline": "if (!op.is_function() && device != nullptr && device != cpu_device) {"
    },
    {
        "line": 36,
        "fullcodeline": "device = absl::get<Device*>(op.Device());"
    }
]