[
    {
        "line": 18,
        "fullcodeline": "char *pos = strchr(cipher, character[0]);"
    },
    {
        "line": 29,
        "fullcodeline": "static int uncyphered_word_count = 0;"
    },
    {
        "line": 30,
        "fullcodeline": "static bool definitely_using_cipher = false;"
    },
    {
        "line": 31,
        "fullcodeline": "static CONFIDENTIAL char coded_word[12];"
    },
    {
        "line": 32,
        "fullcodeline": "static CONFIDENTIAL char decoded_word[12];"
    },
    {
        "line": 41,
        "fullcodeline": "char decoded_character[2] = \" \";"
    },
    {
        "line": 77,
        "fullcodeline": "strlcat(mnemonic, decoded_character, MNEMONIC_BUF);"
    },
    {
        "line": 79,
        "fullcodeline": "next_character();"
    },
    {
        "line": 3,
        "fullcodeline": "if (!awaiting_character) {"
    },
    {
        "line": 10,
        "fullcodeline": "if (strlen(mnemonic) + 1 > MNEMONIC_BUF - 1) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (character[0] != ' ' && pos == NULL) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (!mnemonic[0]) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (character[0] != ' ') {"
    },
    {
        "line": 4,
        "fullcodeline": "recovery_abort();"
    },
    {
        "line": 5,
        "fullcodeline": "fsm_sendFailure(FailureType_Failure_UnexpectedMessage, \"Not in Recovery mode\");"
    },
    {
        "line": 6,
        "fullcodeline": "layoutHome();"
    },
    {
        "line": 11,
        "fullcodeline": "recovery_abort();"
    },
    {
        "line": 12,
        "fullcodeline": "fsm_sendFailure(FailureType_Failure_UnexpectedMessage,"
    },
    {
        "line": 14,
        "fullcodeline": "layoutHome();"
    },
    {
        "line": 22,
        "fullcodeline": "recovery_abort();"
    },
    {
        "line": 23,
        "fullcodeline": "fsm_sendFailure(FailureType_Failure_SyntaxError, \"Character must be from a to z\");"
    },
    {
        "line": 24,
        "fullcodeline": "layoutHome();"
    },
    {
        "line": 35,
        "fullcodeline": "uncyphered_word_count = 0;"
    },
    {
        "line": 36,
        "fullcodeline": "definitely_using_cipher = false;"
    },
    {
        "line": 37,
        "fullcodeline": "memzero(coded_word, sizeof(coded_word));"
    },
    {
        "line": 38,
        "fullcodeline": "memzero(decoded_word, sizeof(decoded_word));"
    },
    {
        "line": 46,
        "fullcodeline": "strlcat(coded_word, character, sizeof(coded_word));"
    },
    {
        "line": 47,
        "fullcodeline": "strlcat(decoded_word, decoded_character, sizeof(decoded_word));"
    },
    {
        "line": 49,
        "fullcodeline": "if (enforce_wordlist && 4 <= strlen(coded_word)) {"
    },
    {
        "line": 72,
        "fullcodeline": "memzero(coded_word, sizeof(coded_word));"
    },
    {
        "line": 73,
        "fullcodeline": "memzero(decoded_word, sizeof(decoded_word));"
    },
    {
        "line": 44,
        "fullcodeline": "decoded_character[0] = english_alphabet[(int)(pos - cipher)];"
    },
    {
        "line": 54,
        "fullcodeline": "bool maybe_not_using_cipher = attempt_auto_complete(coded_word);"
    },
    {
        "line": 55,
        "fullcodeline": "bool maybe_using_cipher = attempt_auto_complete(decoded_word);"
    },
    {
        "line": 57,
        "fullcodeline": "if (!maybe_not_using_cipher && maybe_using_cipher) {"
    },
    {
        "line": 61,
        "fullcodeline": "definitely_using_cipher = true;"
    },
    {
        "line": 62,
        "fullcodeline": "} else if (maybe_not_using_cipher && !definitely_using_cipher &&"
    },
    {
        "line": 63,
        "fullcodeline": "MAX_UNCYPHERED_WORDS < uncyphered_word_count++) {"
    },
    {
        "line": 64,
        "fullcodeline": "recovery_abort();"
    },
    {
        "line": 65,
        "fullcodeline": "fsm_sendFailure(FailureType_Failure_SyntaxError,"
    },
    {
        "line": 67,
        "fullcodeline": "layoutHome();"
    }
]