[
    {
        "line": 10,
        "fullcodeline": "static char CONFIDENTIAL new_mnemonic[MNEMONIC_BUF] = \"\";"
    },
    {
        "line": 12,
        "fullcodeline": "volatile bool auto_completed = true;"
    },
    {
        "line": 15,
        "fullcodeline": "char *tok = strtok(mnemonic, \" \");"
    },
    {
        "line": 27,
        "fullcodeline": "memzero(temp_word, sizeof(temp_word));"
    },
    {
        "line": 41,
        "fullcodeline": "new_mnemonic[MAX(0u, strnlen(new_mnemonic, sizeof(new_mnemonic)) - 1)] = '\\0';"
    },
    {
        "line": 77,
        "fullcodeline": "memzero(new_mnemonic, sizeof(new_mnemonic));"
    },
    {
        "line": 78,
        "fullcodeline": "awaiting_character = false;"
    },
    {
        "line": 79,
        "fullcodeline": "memzero(mnemonic, sizeof(mnemonic));"
    },
    {
        "line": 80,
        "fullcodeline": "memzero(cipher, sizeof(cipher));"
    },
    {
        "line": 81,
        "fullcodeline": "layoutHome();"
    },
    {
        "line": 3,
        "fullcodeline": "if (!recovery_started) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (!auto_completed && !enforce_wordlist) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (!dry_run && (!enforce_wordlist || mnemonic_check(new_mnemonic))) {"
    },
    {
        "line": 4,
        "fullcodeline": "recovery_abort();"
    },
    {
        "line": 5,
        "fullcodeline": "fsm_sendFailure(FailureType_Failure_UnexpectedMessage, \"Not in Recovery mode\");"
    },
    {
        "line": 6,
        "fullcodeline": "layoutHome();"
    },
    {
        "line": 18,
        "fullcodeline": "strlcpy(temp_word, tok, CURRENT_WORD_BUF);"
    },
    {
        "line": 20,
        "fullcodeline": "auto_completed &= attempt_auto_complete(temp_word);"
    },
    {
        "line": 22,
        "fullcodeline": "strlcat(new_mnemonic, temp_word, MNEMONIC_BUF);"
    },
    {
        "line": 23,
        "fullcodeline": "strlcat(new_mnemonic, \" \", MNEMONIC_BUF);"
    },
    {
        "line": 25,
        "fullcodeline": "tok = strtok(NULL, \" \");"
    },
    {
        "line": 33,
        "fullcodeline": "fsm_sendFailure(FailureType_Failure_SyntaxError,"
    },
    {
        "line": 35,
        "fullcodeline": "awaiting_character = false;"
    },
    {
        "line": 36,
        "fullcodeline": "layoutHome();"
    },
    {
        "line": 44,
        "fullcodeline": "storage_setMnemonic(new_mnemonic);"
    },
    {
        "line": 45,
        "fullcodeline": "memzero(new_mnemonic, sizeof(new_mnemonic));"
    },
    {
        "line": 50,
        "fullcodeline": "storage_commit();"
    },
    {
        "line": 51,
        "fullcodeline": "fsm_sendSuccess(\"Device recovered\");"
    },
    {
        "line": 30,
        "fullcodeline": "if (!dry_run) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (!enforce_wordlist) {"
    },
    {
        "line": 31,
        "fullcodeline": "storage_reset();"
    },
    {
        "line": 48,
        "fullcodeline": "storage_setImported(true);"
    },
    {
        "line": 53,
        "fullcodeline": "bool match = storage_isInitialized() && storage_containsMnemonic(new_mnemonic);"
    },
    {
        "line": 69,
        "fullcodeline": "memzero(new_mnemonic, sizeof(new_mnemonic));"
    },
    {
        "line": 71,
        "fullcodeline": "session_clear(true);"
    },
    {
        "line": 72,
        "fullcodeline": "fsm_sendFailure(FailureType_Failure_SyntaxError,"
    },
    {
        "line": 74,
        "fullcodeline": "recovery_abort();"
    },
    {
        "line": 55,
        "fullcodeline": "review(ButtonRequestType_ButtonRequest_Other, \"Recovery Dry Run\","
    },
    {
        "line": 57,
        "fullcodeline": "fsm_sendSuccess(\"The seed is valid and matches the one in the device.\");"
    },
    {
        "line": 58,
        "fullcodeline": "} else if (mnemonic_check(new_mnemonic)) {"
    },
    {
        "line": 59,
        "fullcodeline": "review(ButtonRequestType_ButtonRequest_Other, \"Recovery Dry Run\","
    },
    {
        "line": 61,
        "fullcodeline": "fsm_sendFailure(FailureType_Failure_Other,"
    },
    {
        "line": 64,
        "fullcodeline": "review(ButtonRequestType_ButtonRequest_Other, \"Recovery Dry Run\","
    },
    {
        "line": 66,
        "fullcodeline": "fsm_sendFailure(FailureType_Failure_Other,"
    }
]