[
    {
        "line": 49,
        "fullcodeline": "timeout = kwargs.pop('timeout', None)"
    },
    {
        "line": 50,
        "fullcodeline": "if 'stdout' in kwargs:"
    },
    {
        "line": 52,
        "fullcodeline": "if 'check' in kwargs:"
    },
    {
        "line": 54,
        "fullcodeline": "if 'input' in kwargs:"
    },
    {
        "line": 62,
        "fullcodeline": "with Popen(*popenargs, stdout=PIPE, **kwargs) as process:"
    },
    {
        "line": 51,
        "fullcodeline": "raise ValueError('stdout argument not allowed, it will be overridden.')"
    },
    {
        "line": 53,
        "fullcodeline": "raise ValueError('check argument not allowed, it will be overridden.')"
    },
    {
        "line": 57,
        "fullcodeline": "inputdata = kwargs['input']"
    },
    {
        "line": 58,
        "fullcodeline": "del kwargs['input']"
    },
    {
        "line": 59,
        "fullcodeline": "kwargs['stdin'] = PIPE"
    },
    {
        "line": 61,
        "fullcodeline": "inputdata = None"
    },
    {
        "line": 55,
        "fullcodeline": "if 'stdin' in kwargs:"
    },
    {
        "line": 73,
        "fullcodeline": "retcode = process.poll()"
    },
    {
        "line": 56,
        "fullcodeline": "raise ValueError('stdin and input arguments may not both be used.')"
    },
    {
        "line": 76,
        "fullcodeline": "raise CalledProcessError(retcode, process.args, output=output)"
    },
    {
        "line": 64,
        "fullcodeline": "output, unused_err = process.communicate(inputdata, timeout=timeout)"
    },
    {
        "line": 66,
        "fullcodeline": "process.kill()"
    },
    {
        "line": 68,
        "fullcodeline": "raise TimeoutExpired(process.args, timeout, output=output)"
    },
    {
        "line": 70,
        "fullcodeline": "process.kill()"
    },
    {
        "line": 71,
        "fullcodeline": "process.wait()"
    },
    {
        "line": 72,
        "fullcodeline": "raise"
    },
    {
        "line": 67,
        "fullcodeline": "output, unused_err = process.communicate()"
    }
]