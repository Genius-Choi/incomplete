[
    {
        "line": 3,
        "fullcodeline": "int k, marker, error = 0 ;"
    },
    {
        "line": 5,
        "fullcodeline": "psf_use_rsrc (psf, SF_TRUE) ;"
    },
    {
        "line": 7,
        "fullcodeline": "memset (&rsrc, 0, sizeof (rsrc)) ;"
    },
    {
        "line": 9,
        "fullcodeline": "rsrc.rsrc_len = psf_get_filelen (psf) ;"
    },
    {
        "line": 10,
        "fullcodeline": "psf_log_printf (psf, \"Resource length : %d (0x%04X)\\n\", rsrc.rsrc_len, rsrc.rsrc_len) ;"
    },
    {
        "line": 23,
        "fullcodeline": "psf_fread (rsrc.rsrc_data, rsrc.rsrc_len, 1, psf) ;"
    },
    {
        "line": 26,
        "fullcodeline": "psf->headindex = psf->headend = rsrc.rsrc_len ;"
    },
    {
        "line": 28,
        "fullcodeline": "rsrc.data_offset = read_rsrc_int (&rsrc, 0) ;"
    },
    {
        "line": 29,
        "fullcodeline": "rsrc.map_offset = read_rsrc_int (&rsrc, 4) ;"
    },
    {
        "line": 30,
        "fullcodeline": "rsrc.data_length = read_rsrc_int (&rsrc, 8) ;"
    },
    {
        "line": 31,
        "fullcodeline": "rsrc.map_length = read_rsrc_int (&rsrc, 12) ;"
    },
    {
        "line": 41,
        "fullcodeline": "psf_log_printf (psf, \"  data offset : 0x%04X\\n  map  offset : 0x%04X\\n\""
    },
    {
        "line": 81,
        "fullcodeline": "rsrc.string_offset = rsrc.map_offset + read_rsrc_short (&rsrc, rsrc.map_offset + 26) ;"
    },
    {
        "line": 88,
        "fullcodeline": "rsrc.type_offset = rsrc.map_offset + 30 ;"
    },
    {
        "line": 95,
        "fullcodeline": "rsrc.type_count = read_rsrc_short (&rsrc, rsrc.map_offset + 28) + 1 ;"
    },
    {
        "line": 102,
        "fullcodeline": "rsrc.item_offset = rsrc.type_offset + rsrc.type_count * 8 ;"
    },
    {
        "line": 109,
        "fullcodeline": "rsrc.str_index = -1 ;"
    },
    {
        "line": 126,
        "fullcodeline": "psf_log_printf (psf, \"No 'STR ' resource.\\n\") ;"
    },
    {
        "line": 127,
        "fullcodeline": "error = SFE_SD2_BAD_RSRC ;"
    },
    {
        "line": 131,
        "fullcodeline": "psf_use_rsrc (psf, SF_FALSE) ;"
    },
    {
        "line": 12,
        "fullcodeline": "if (rsrc.rsrc_len > SIGNED_SIZEOF (psf->header))"
    },
    {
        "line": 33,
        "fullcodeline": "if (rsrc.data_offset == 0x51607 && rsrc.map_offset == 0x20000)"
    },
    {
        "line": 45,
        "fullcodeline": "if (rsrc.data_offset > rsrc.rsrc_len)"
    },
    {
        "line": 51,
        "fullcodeline": "if (rsrc.map_offset > rsrc.rsrc_len)"
    },
    {
        "line": 57,
        "fullcodeline": "if (rsrc.data_length > rsrc.rsrc_len)"
    },
    {
        "line": 63,
        "fullcodeline": "if (rsrc.map_length > rsrc.rsrc_len)"
    },
    {
        "line": 69,
        "fullcodeline": "if (rsrc.data_offset + rsrc.data_length != rsrc.map_offset || rsrc.map_offset + rsrc.map_length != rsrc.rsrc_len)"
    },
    {
        "line": 75,
        "fullcodeline": "if (rsrc.map_offset + 28 >= rsrc.rsrc_len)"
    },
    {
        "line": 82,
        "fullcodeline": "if (rsrc.string_offset > rsrc.rsrc_len)"
    },
    {
        "line": 90,
        "fullcodeline": "if (rsrc.map_offset + 28 > rsrc.rsrc_len)"
    },
    {
        "line": 96,
        "fullcodeline": "if (rsrc.type_count < 1)"
    },
    {
        "line": 103,
        "fullcodeline": "if (rsrc.item_offset < 0 || rsrc.item_offset > rsrc.rsrc_len)"
    },
    {
        "line": 110,
        "fullcodeline": "for (k = 0 ; k < rsrc.type_count ; k ++)"
    },
    {
        "line": 13,
        "fullcodeline": "{\trsrc.rsrc_data = calloc (1, rsrc.rsrc_len) ;"
    },
    {
        "line": 14,
        "fullcodeline": "rsrc.need_to_free_rsrc_data = SF_TRUE ;"
    },
    {
        "line": 34,
        "fullcodeline": "{\tpsf_log_printf (psf, \"Trying offset of 0x52 bytes.\\n\") ;"
    },
    {
        "line": 35,
        "fullcodeline": "rsrc.data_offset = read_rsrc_int (&rsrc, 0x52 + 0) + 0x52 ;"
    },
    {
        "line": 36,
        "fullcodeline": "rsrc.map_offset = read_rsrc_int (&rsrc, 0x52 + 4) + 0x52 ;"
    },
    {
        "line": 37,
        "fullcodeline": "rsrc.data_length = read_rsrc_int (&rsrc, 0x52 + 8) ;"
    },
    {
        "line": 38,
        "fullcodeline": "rsrc.map_length = read_rsrc_int (&rsrc, 0x52 + 12) ;"
    },
    {
        "line": 46,
        "fullcodeline": "{\tpsf_log_printf (psf, \"Error : rsrc.data_offset (%d, 0x%x) > len\\n\", rsrc.data_offset, rsrc.data_offset) ;"
    },
    {
        "line": 47,
        "fullcodeline": "error = SFE_SD2_BAD_DATA_OFFSET ;"
    },
    {
        "line": 52,
        "fullcodeline": "{\tpsf_log_printf (psf, \"Error : rsrc.map_offset > len\\n\") ;"
    },
    {
        "line": 53,
        "fullcodeline": "error = SFE_SD2_BAD_MAP_OFFSET ;"
    },
    {
        "line": 58,
        "fullcodeline": "{\tpsf_log_printf (psf, \"Error : rsrc.data_length > len\\n\") ;"
    },
    {
        "line": 59,
        "fullcodeline": "error = SFE_SD2_BAD_DATA_LENGTH ;"
    },
    {
        "line": 64,
        "fullcodeline": "{\tpsf_log_printf (psf, \"Error : rsrc.map_length > len\\n\") ;"
    },
    {
        "line": 65,
        "fullcodeline": "error = SFE_SD2_BAD_MAP_LENGTH ;"
    },
    {
        "line": 70,
        "fullcodeline": "{\tpsf_log_printf (psf, \"Error : This does not look like a MacOSX resource fork.\\n\") ;"
    },
    {
        "line": 71,
        "fullcodeline": "error = SFE_SD2_BAD_RSRC ;"
    },
    {
        "line": 76,
        "fullcodeline": "{\tpsf_log_printf (psf, \"Bad map offset (%d + 28 > %d).\\n\", rsrc.map_offset, rsrc.rsrc_len) ;"
    },
    {
        "line": 77,
        "fullcodeline": "error = SFE_SD2_BAD_RSRC ;"
    },
    {
        "line": 83,
        "fullcodeline": "{\tpsf_log_printf (psf, \"Bad string offset (%d).\\n\", rsrc.string_offset) ;"
    },
    {
        "line": 84,
        "fullcodeline": "error = SFE_SD2_BAD_RSRC ;"
    },
    {
        "line": 91,
        "fullcodeline": "{\tpsf_log_printf (psf, \"Bad map offset.\\n\") ;"
    },
    {
        "line": 97,
        "fullcodeline": "{\tpsf_log_printf (psf, \"Bad type count.\\n\") ;"
    },
    {
        "line": 98,
        "fullcodeline": "error = SFE_SD2_BAD_RSRC ;"
    },
    {
        "line": 104,
        "fullcodeline": "{\tpsf_log_printf (psf, \"Bad item offset (%d).\\n\", rsrc.item_offset) ;"
    },
    {
        "line": 105,
        "fullcodeline": "error = SFE_SD2_BAD_RSRC ;"
    },
    {
        "line": 116,
        "fullcodeline": "marker = read_rsrc_marker (&rsrc, rsrc.type_offset + k * 8) ;"
    },
    {
        "line": 134,
        "fullcodeline": "free (rsrc.rsrc_data) ;"
    },
    {
        "line": 18,
        "fullcodeline": "rsrc.rsrc_data = psf->header ;"
    },
    {
        "line": 19,
        "fullcodeline": "rsrc.need_to_free_rsrc_data = SF_FALSE ;"
    },
    {
        "line": 111,
        "fullcodeline": "{\tif (rsrc.type_offset + k * 8 > rsrc.rsrc_len)"
    },
    {
        "line": 118,
        "fullcodeline": "if (marker == STR_MARKER)"
    },
    {
        "line": 112,
        "fullcodeline": "{\tpsf_log_printf (psf, \"Bad rsrc marker.\\n\") ;"
    },
    {
        "line": 119,
        "fullcodeline": "{\trsrc.str_index = k ;"
    },
    {
        "line": 120,
        "fullcodeline": "rsrc.str_count = read_rsrc_short (&rsrc, rsrc.type_offset + k * 8 + 4) + 1 ;"
    },
    {
        "line": 121,
        "fullcodeline": "error = parse_str_rsrc (psf, &rsrc) ;"
    }
]