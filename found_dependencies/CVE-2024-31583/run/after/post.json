[
    {
        "line": 4,
        "fullcodeline": "auto& frame = frames_.back();"
    },
    {
        "line": 5,
        "fullcodeline": "const auto& code = frame.getCode();"
    },
    {
        "line": 6,
        "fullcodeline": "const auto pc = frame.getPC();"
    },
    {
        "line": 7,
        "fullcodeline": "auto inst = frame.getInstruction();"
    },
    {
        "line": 11,
        "fullcodeline": "DebugHandle debug_handle = pc;"
    },
    {
        "line": 34,
        "fullcodeline": "bool prev_value = isRecordFunctionEnabled();"
    },
    {
        "line": 35,
        "fullcodeline": "if (!prev_value) {"
    },
    {
        "line": 264,
        "fullcodeline": "if (!prev_value) {"
    },
    {
        "line": 269,
        "fullcodeline": "saveExceptionDebugHandles();"
    },
    {
        "line": 270,
        "fullcodeline": "TORCH_RETHROW(e);"
    },
    {
        "line": 274,
        "fullcodeline": "saveExceptionDebugHandles();"
    },
    {
        "line": 275,
        "fullcodeline": "TORCH_RETHROW(error);"
    },
    {
        "line": 277,
        "fullcodeline": "saveExceptionDebugHandles();"
    },
    {
        "line": 12,
        "fullcodeline": "if (auto handle = frame.getDebugHandle()) {"
    },
    {
        "line": 37,
        "fullcodeline": "enableRecordFunction(true);"
    },
    {
        "line": 79,
        "fullcodeline": "stack.emplace_back(reg(inst.X));"
    },
    {
        "line": 80,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 83,
        "fullcodeline": "stack.emplace_back(std::move(reg(inst.X)));"
    },
    {
        "line": 84,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 87,
        "fullcodeline": "reg(inst.X) = pop(stack);"
    },
    {
        "line": 88,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 94,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 97,
        "fullcodeline": "pop(stack);"
    },
    {
        "line": 98,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 101,
        "fullcodeline": "reg(inst.X) = IValue();"
    },
    {
        "line": 102,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 105,
        "fullcodeline": "stack.emplace_back(code.constants_[inst.X]);"
    },
    {
        "line": 106,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 128,
        "fullcodeline": "frame.jump(pop(stack).toBool() ? 1 : inst.X);"
    },
    {
        "line": 131,
        "fullcodeline": "frame.jump(inst.X);"
    },
    {
        "line": 153,
        "fullcodeline": "leaveFrame();"
    },
    {
        "line": 261,
        "fullcodeline": "AT_ERROR(toString(inst.op), \" is invalid.\");"
    },
    {
        "line": 265,
        "fullcodeline": "enableRecordFunction(false);"
    },
    {
        "line": 52,
        "fullcodeline": "RECORD_EDGE_SCOPE_WITH_DEBUG_HANDLE_AND_INPUTS("
    },
    {
        "line": 54,
        "fullcodeline": "code.operators_[inst.X](stack);"
    },
    {
        "line": 55,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 58,
        "fullcodeline": "stack.emplace_back(inst.N);"
    },
    {
        "line": 59,
        "fullcodeline": "RECORD_EDGE_SCOPE_WITH_DEBUG_HANDLE_AND_INPUTS("
    },
    {
        "line": 61,
        "fullcodeline": "code.operators_[inst.X](stack);"
    },
    {
        "line": 62,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 66,
        "fullcodeline": "callFunction(function, stack);"
    },
    {
        "line": 69,
        "fullcodeline": "torch::jit::Function& method ="
    },
    {
        "line": 74,
        "fullcodeline": "RECORD_EDGE_SCOPE_WITH_DEBUG_HANDLE_AND_INPUTS("
    },
    {
        "line": 76,
        "fullcodeline": "callFunction(method, stack);"
    },
    {
        "line": 91,
        "fullcodeline": "for (size_t i = inst.N; i > 0; --i) {"
    },
    {
        "line": 109,
        "fullcodeline": "auto userObj = pop(stack).toObject();"
    },
    {
        "line": 110,
        "fullcodeline": "auto value = userObj->getSlot(inst.X);"
    },
    {
        "line": 111,
        "fullcodeline": "push(stack, std::move(value));"
    },
    {
        "line": 112,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 115,
        "fullcodeline": "auto v = pop(stack);"
    },
    {
        "line": 116,
        "fullcodeline": "auto userObj = pop(stack).toObject();"
    },
    {
        "line": 124,
        "fullcodeline": "userObj->setSlot(inst.X, std::move(v));"
    },
    {
        "line": 125,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 135,
        "fullcodeline": "auto sframe = stack.end() - (inst.N + 1);"
    },
    {
        "line": 136,
        "fullcodeline": "int64_t trip_count = sframe[0].toInt();"
    },
    {
        "line": 137,
        "fullcodeline": "int64_t max_trip_count = sframe[1].toInt();"
    },
    {
        "line": 138,
        "fullcodeline": "bool cond = sframe[2].toBool();"
    },
    {
        "line": 154,
        "fullcodeline": "if (!frames_.empty()) {"
    },
    {
        "line": 159,
        "fullcodeline": "listConstruct(stack, *code.types_.at(inst.X), inst.N);"
    },
    {
        "line": 160,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 163,
        "fullcodeline": "listUnpack(stack, inst.X);"
    },
    {
        "line": 164,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 167,
        "fullcodeline": "tupleConstruct(stack, inst.X);"
    },
    {
        "line": 168,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 171,
        "fullcodeline": "tupleSlice(stack, inst.X, inst.X + inst.N);"
    },
    {
        "line": 172,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 175,
        "fullcodeline": "tupleIndex(stack);"
    },
    {
        "line": 176,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 179,
        "fullcodeline": "raiseExceptionWithMessage(stack);"
    },
    {
        "line": 180,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 183,
        "fullcodeline": "is(stack);"
    },
    {
        "line": 184,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 187,
        "fullcodeline": "unInitialized(stack);"
    },
    {
        "line": 188,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 191,
        "fullcodeline": "isNot(stack);"
    },
    {
        "line": 192,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 195,
        "fullcodeline": "format(stack, inst.X);"
    },
    {
        "line": 196,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 199,
        "fullcodeline": "device(stack);"
    },
    {
        "line": 200,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 203,
        "fullcodeline": "dtype(stack);"
    },
    {
        "line": 204,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 207,
        "fullcodeline": "dim(stack);"
    },
    {
        "line": 208,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 211,
        "fullcodeline": "_not(stack);"
    },
    {
        "line": 212,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 215,
        "fullcodeline": "dictIndex(stack);"
    },
    {
        "line": 216,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 219,
        "fullcodeline": "toList(stack);"
    },
    {
        "line": 220,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 223,
        "fullcodeline": "numToTensorScalar(stack);"
    },
    {
        "line": 224,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 227,
        "fullcodeline": "isCuda(stack);"
    },
    {
        "line": 228,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 231,
        "fullcodeline": "dictConstruct(stack, *code.types_.at(inst.X), inst.N);"
    },
    {
        "line": 232,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 235,
        "fullcodeline": "namedTupleConstruct(stack, code.types_.at(inst.X), inst.N);"
    },
    {
        "line": 236,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 239,
        "fullcodeline": "auto type = code.types_.at(inst.X)->expect<c10::ClassType>();"
    },
    {
        "line": 240,
        "fullcodeline": "createObject(stack, type);"
    },
    {
        "line": 241,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 244,
        "fullcodeline": "at::ArrayRef<TypePtr> types(&code.types_.at(inst.X), inst.N);"
    },
    {
        "line": 245,
        "fullcodeline": "isinstance(stack, types);"
    },
    {
        "line": 246,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 249,
        "fullcodeline": "drop(stack, 1);"
    },
    {
        "line": 255,
        "fullcodeline": "const auto& sref = stack.back().toStringRef();"
    },
    {
        "line": 256,
        "fullcodeline": "TORCH_WARN(sref);"
    },
    {
        "line": 257,
        "fullcodeline": "stack.pop_back();"
    },
    {
        "line": 258,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 41,
        "fullcodeline": "if (at::hasGlobalCallbacks()) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (inst.X < 0 ||"
    },
    {
        "line": 70,
        "fullcodeline": "peek(stack, 0, inst.N)"
    },
    {
        "line": 75,
        "fullcodeline": "method.name(), debug_handle, stack);"
    },
    {
        "line": 92,
        "fullcodeline": "reg(inst.X + i - 1) = pop(stack);"
    },
    {
        "line": 119,
        "fullcodeline": "while (static_cast<int>(userObj->type()->numAttributes()) <= inst.X) {"
    },
    {
        "line": 139,
        "fullcodeline": "if (trip_count < max_trip_count && cond) {"
    },
    {
        "line": 49,
        "fullcodeline": "static_cast<size_t>(inst.X) >= code.operators_.size()) {"
    },
    {
        "line": 65,
        "fullcodeline": "auto& function = *frame.getCode().functions_.at(inst.X);"
    },
    {
        "line": 121,
        "fullcodeline": "ss << userObj->type()->numAttributes();"
    },
    {
        "line": 122,
        "fullcodeline": "userObj->type()->addAttribute(ss.str(), c10::NoneType::get());"
    },
    {
        "line": 140,
        "fullcodeline": "sframe[2] = trip_count;"
    },
    {
        "line": 141,
        "fullcodeline": "sframe[0] = trip_count + 1;"
    },
    {
        "line": 142,
        "fullcodeline": "frame.step();"
    },
    {
        "line": 50,
        "fullcodeline": "throw JITException(\"Invalid OP Instruction\");"
    },
    {
        "line": 144,
        "fullcodeline": "size_t n_loop_carried = inst.N - 2;"
    },
    {
        "line": 148,
        "fullcodeline": "drop(stack, 3); // iteration_count, max_iter, cond"
    },
    {
        "line": 149,
        "fullcodeline": "frame.jump(inst.X);"
    },
    {
        "line": 42,
        "fullcodeline": "if (auto* mobile_debug_info = static_cast<MobileDebugInfo*>("
    },
    {
        "line": 45,
        "fullcodeline": "mobile_debug_info->setOpIdx(pc);"
    },
    {
        "line": 146,
        "fullcodeline": "sframe[i] = std::move(sframe[i + 3]);"
    }
]