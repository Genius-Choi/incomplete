[
    {
        "line": 4,
        "fullcodeline": "auto& frame = frames_.back();"
    },
    {
        "line": 5,
        "fullcodeline": "const auto& code = frame.getCode();"
    },
    {
        "line": 6,
        "fullcodeline": "const auto pc = frame.getPC();"
    },
    {
        "line": 7,
        "fullcodeline": "auto inst = frame.getInstruction();"
    },
    {
        "line": 11,
        "fullcodeline": "DebugHandle debug_handle = pc;"
    },
    {
        "line": 34,
        "fullcodeline": "bool prev_value = isRecordFunctionEnabled();"
    },
    {
        "line": 35,
        "fullcodeline": "if (!prev_value) {"
    },
    {
        "line": 267,
        "fullcodeline": "TORCH_RETHROW(e);"
    },
    {
        "line": 272,
        "fullcodeline": "TORCH_RETHROW(error);"
    },
    {
        "line": 12,
        "fullcodeline": "if (auto handle = frame.getDebugHandle()) {"
    },
    {
        "line": 13,
        "fullcodeline": "debug_handle = *handle;"
    },
    {
        "line": 37,
        "fullcodeline": "enableRecordFunction(true);"
    },
    {
        "line": 150,
        "fullcodeline": "leaveFrame();"
    },
    {
        "line": 49,
        "fullcodeline": "RECORD_EDGE_SCOPE_WITH_DEBUG_HANDLE_AND_INPUTS("
    },
    {
        "line": 55,
        "fullcodeline": "stack.emplace_back(inst.N);"
    },
    {
        "line": 56,
        "fullcodeline": "RECORD_EDGE_SCOPE_WITH_DEBUG_HANDLE_AND_INPUTS("
    },
    {
        "line": 62,
        "fullcodeline": "auto& function = *frame.getCode().functions_.at(inst.X);"
    },
    {
        "line": 66,
        "fullcodeline": "torch::jit::Function& method ="
    },
    {
        "line": 71,
        "fullcodeline": "RECORD_EDGE_SCOPE_WITH_DEBUG_HANDLE_AND_INPUTS("
    },
    {
        "line": 76,
        "fullcodeline": "stack.emplace_back(reg(inst.X));"
    },
    {
        "line": 80,
        "fullcodeline": "stack.emplace_back(std::move(reg(inst.X)));"
    },
    {
        "line": 84,
        "fullcodeline": "reg(inst.X) = pop(stack);"
    },
    {
        "line": 88,
        "fullcodeline": "for (size_t i = inst.N; i > 0; --i) {"
    },
    {
        "line": 106,
        "fullcodeline": "auto userObj = pop(stack).toObject();"
    },
    {
        "line": 107,
        "fullcodeline": "auto value = userObj->getSlot(inst.X);"
    },
    {
        "line": 112,
        "fullcodeline": "auto v = pop(stack);"
    },
    {
        "line": 113,
        "fullcodeline": "auto userObj = pop(stack).toObject();"
    },
    {
        "line": 132,
        "fullcodeline": "auto sframe = stack.end() - (inst.N + 1);"
    },
    {
        "line": 133,
        "fullcodeline": "int64_t trip_count = sframe[0].toInt();"
    },
    {
        "line": 134,
        "fullcodeline": "int64_t max_trip_count = sframe[1].toInt();"
    },
    {
        "line": 135,
        "fullcodeline": "bool cond = sframe[2].toBool();"
    },
    {
        "line": 151,
        "fullcodeline": "if (!frames_.empty()) {"
    },
    {
        "line": 236,
        "fullcodeline": "auto type = code.types_.at(inst.X)->expect<c10::ClassType>();"
    },
    {
        "line": 242,
        "fullcodeline": "isinstance(stack, types);"
    },
    {
        "line": 246,
        "fullcodeline": "drop(stack, 1);"
    },
    {
        "line": 252,
        "fullcodeline": "const auto& sref = stack.back().toStringRef();"
    },
    {
        "line": 258,
        "fullcodeline": "AT_ERROR(toString(inst.op), \" is invalid.\");"
    },
    {
        "line": 67,
        "fullcodeline": "peek(stack, 0, inst.N)"
    },
    {
        "line": 72,
        "fullcodeline": "method.name(), debug_handle, stack);"
    },
    {
        "line": 108,
        "fullcodeline": "push(stack, std::move(value));"
    },
    {
        "line": 116,
        "fullcodeline": "while (static_cast<int>(userObj->type()->numAttributes()) <= inst.X) {"
    },
    {
        "line": 121,
        "fullcodeline": "userObj->setSlot(inst.X, std::move(v));"
    },
    {
        "line": 232,
        "fullcodeline": "namedTupleConstruct(stack, code.types_.at(inst.X), inst.N);"
    },
    {
        "line": 241,
        "fullcodeline": "at::ArrayRef<TypePtr> types(&code.types_.at(inst.X), inst.N);"
    },
    {
        "line": 70,
        "fullcodeline": "->getMethod(code.constants_[inst.X].toStringRef());"
    },
    {
        "line": 89,
        "fullcodeline": "reg(inst.X + i - 1) = pop(stack);"
    },
    {
        "line": 118,
        "fullcodeline": "ss << userObj->type()->numAttributes();"
    },
    {
        "line": 125,
        "fullcodeline": "frame.jump(pop(stack).toBool() ? 1 : inst.X);"
    },
    {
        "line": 136,
        "fullcodeline": "if (trip_count < max_trip_count && cond) {"
    },
    {
        "line": 119,
        "fullcodeline": "userObj->type()->addAttribute(ss.str(), c10::NoneType::get());"
    },
    {
        "line": 42,
        "fullcodeline": "if (auto* mobile_debug_info = static_cast<MobileDebugInfo*>("
    },
    {
        "line": 141,
        "fullcodeline": "size_t n_loop_carried = inst.N - 2;"
    },
    {
        "line": 43,
        "fullcodeline": "c10::ThreadLocalDebugInfo::get("
    },
    {
        "line": 143,
        "fullcodeline": "sframe[i] = std::move(sframe[i + 3]);"
    }
]