[
    {
        "line": 15,
        "fullcodeline": "channels=1;"
    },
    {
        "line": 16,
        "fullcodeline": "packet_size=next_image->depth > 8UL ? 2UL : 1UL;"
    },
    {
        "line": 17,
        "fullcodeline": "compact_pixels=(unsigned char *) NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "if (next_image->compression == RLECompression)"
    },
    {
        "line": 25,
        "fullcodeline": "if (IsImageGray(next_image) != MagickFalse)"
    },
    {
        "line": 112,
        "fullcodeline": "if (next_image->compression == RLECompression)"
    },
    {
        "line": 20,
        "fullcodeline": "compact_pixels=(unsigned char *) AcquireQuantumMemory(2*channels*"
    },
    {
        "line": 39,
        "fullcodeline": "WriteOneChannel(psd_info,image_info,image,next_image,compact_pixels,"
    },
    {
        "line": 44,
        "fullcodeline": "(void) SetImageProgress(image,SaveImagesTag,0,1);"
    },
    {
        "line": 113,
        "fullcodeline": "compact_pixels=(unsigned char *) RelinquishMagickMemory(compact_pixels);"
    },
    {
        "line": 22,
        "fullcodeline": "if (compact_pixels == (unsigned char *) NULL)"
    },
    {
        "line": 27,
        "fullcodeline": "if (next_image->compression == RLECompression)"
    },
    {
        "line": 41,
        "fullcodeline": "if (next_image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 23,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 32,
        "fullcodeline": "(void) WriteBlobMSBShort(image,1);"
    },
    {
        "line": 33,
        "fullcodeline": "WritePackbitsLength(psd_info,image_info,image,next_image,"
    },
    {
        "line": 42,
        "fullcodeline": "WriteOneChannel(psd_info,image_info,image,next_image,compact_pixels,"
    },
    {
        "line": 47,
        "fullcodeline": "if (next_image->storage_class == PseudoClass)"
    },
    {
        "line": 21,
        "fullcodeline": "next_image->columns,packet_size*sizeof(*compact_pixels));"
    },
    {
        "line": 35,
        "fullcodeline": "if (next_image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 61,
        "fullcodeline": "WriteOneChannel(psd_info,image_info,image,next_image,compact_pixels,"
    },
    {
        "line": 66,
        "fullcodeline": "(void) SetImageProgress(image,SaveImagesTag,0,1);"
    },
    {
        "line": 36,
        "fullcodeline": "WritePackbitsLength(psd_info,image_info,image,next_image,"
    },
    {
        "line": 49,
        "fullcodeline": "if (next_image->compression == RLECompression)"
    },
    {
        "line": 63,
        "fullcodeline": "if (next_image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 91,
        "fullcodeline": "(void) SetImageProgress(image,SaveImagesTag,0,6);"
    },
    {
        "line": 92,
        "fullcodeline": "WriteOneChannel(psd_info,image_info,image,next_image,compact_pixels,"
    },
    {
        "line": 94,
        "fullcodeline": "(void) SetImageProgress(image,SaveImagesTag,1,6);"
    },
    {
        "line": 95,
        "fullcodeline": "WriteOneChannel(psd_info,image_info,image,next_image,compact_pixels,"
    },
    {
        "line": 97,
        "fullcodeline": "(void) SetImageProgress(image,SaveImagesTag,2,6);"
    },
    {
        "line": 98,
        "fullcodeline": "WriteOneChannel(psd_info,image_info,image,next_image,compact_pixels,"
    },
    {
        "line": 100,
        "fullcodeline": "(void) SetImageProgress(image,SaveImagesTag,3,6);"
    },
    {
        "line": 104,
        "fullcodeline": "(void) SetImageProgress(image,SaveImagesTag,4,6);"
    },
    {
        "line": 108,
        "fullcodeline": "(void) SetImageProgress(image,SaveImagesTag,5,6);"
    },
    {
        "line": 54,
        "fullcodeline": "(void) WriteBlobMSBShort(image,1);"
    },
    {
        "line": 55,
        "fullcodeline": "WritePackbitsLength(psd_info,image_info,image,next_image,"
    },
    {
        "line": 64,
        "fullcodeline": "WriteOneChannel(psd_info,image_info,image,next_image,compact_pixels,"
    },
    {
        "line": 70,
        "fullcodeline": "if (next_image->colorspace == CMYKColorspace)"
    },
    {
        "line": 72,
        "fullcodeline": "if (next_image->compression == RLECompression)"
    },
    {
        "line": 101,
        "fullcodeline": "if (next_image->colorspace == CMYKColorspace)"
    },
    {
        "line": 105,
        "fullcodeline": "if (next_image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 109,
        "fullcodeline": "if (next_image->colorspace == CMYKColorspace)"
    },
    {
        "line": 57,
        "fullcodeline": "if (next_image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 71,
        "fullcodeline": "(void) NegateCMYK(next_image,exception);"
    },
    {
        "line": 77,
        "fullcodeline": "(void) WriteBlobMSBShort(image,1);"
    },
    {
        "line": 78,
        "fullcodeline": "WritePackbitsLength(psd_info,image_info,image,next_image,"
    },
    {
        "line": 80,
        "fullcodeline": "WritePackbitsLength(psd_info,image_info,image,next_image,"
    },
    {
        "line": 82,
        "fullcodeline": "WritePackbitsLength(psd_info,image_info,image,next_image,"
    },
    {
        "line": 102,
        "fullcodeline": "WriteOneChannel(psd_info,image_info,image,next_image,compact_pixels,"
    },
    {
        "line": 106,
        "fullcodeline": "WriteOneChannel(psd_info,image_info,image,next_image,compact_pixels,"
    },
    {
        "line": 110,
        "fullcodeline": "(void) NegateCMYK(next_image,exception);"
    },
    {
        "line": 58,
        "fullcodeline": "WritePackbitsLength(psd_info,image_info,image,next_image,"
    },
    {
        "line": 84,
        "fullcodeline": "if (next_image->colorspace == CMYKColorspace)"
    },
    {
        "line": 87,
        "fullcodeline": "if (next_image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 85,
        "fullcodeline": "WritePackbitsLength(psd_info,image_info,image,next_image,"
    },
    {
        "line": 88,
        "fullcodeline": "WritePackbitsLength(psd_info,image_info,image,next_image,"
    }
]