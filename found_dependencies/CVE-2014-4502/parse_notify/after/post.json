[
    {
        "line": 4,
        "fullcodeline": "*ntime, header[228];"
    },
    {
        "line": 5,
        "fullcodeline": "unsigned char *cb1 = NULL, *cb2 = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "bool clean, ret = false;"
    },
    {
        "line": 11,
        "fullcodeline": "arr = json_array_get(val, 4);"
    },
    {
        "line": 15,
        "fullcodeline": "merkles = json_array_size(arr);"
    },
    {
        "line": 17,
        "fullcodeline": "job_id = json_array_string(val, 0);"
    },
    {
        "line": 18,
        "fullcodeline": "prev_hash = __json_array_string(val, 1);"
    },
    {
        "line": 19,
        "fullcodeline": "coinbase1 = json_array_string(val, 2);"
    },
    {
        "line": 20,
        "fullcodeline": "coinbase2 = json_array_string(val, 3);"
    },
    {
        "line": 21,
        "fullcodeline": "bbversion = __json_array_string(val, 5);"
    },
    {
        "line": 22,
        "fullcodeline": "nbit = __json_array_string(val, 6);"
    },
    {
        "line": 23,
        "fullcodeline": "ntime = __json_array_string(val, 7);"
    },
    {
        "line": 24,
        "fullcodeline": "clean = json_is_true(json_array_get(val, 8));"
    },
    {
        "line": 36,
        "fullcodeline": "cg_wlock(&pool->data_lock);"
    },
    {
        "line": 38,
        "fullcodeline": "pool->swork.job_id = job_id;"
    },
    {
        "line": 39,
        "fullcodeline": "snprintf(pool->prev_hash, 65, \"%s\", prev_hash);"
    },
    {
        "line": 40,
        "fullcodeline": "cb1_len = strlen(coinbase1) / 2;"
    },
    {
        "line": 41,
        "fullcodeline": "cb2_len = strlen(coinbase2) / 2;"
    },
    {
        "line": 42,
        "fullcodeline": "snprintf(pool->bbversion, 9, \"%s\", bbversion);"
    },
    {
        "line": 43,
        "fullcodeline": "snprintf(pool->nbit, 9, \"%s\", nbit);"
    },
    {
        "line": 44,
        "fullcodeline": "snprintf(pool->ntime, 9, \"%s\", ntime);"
    },
    {
        "line": 45,
        "fullcodeline": "pool->swork.clean = clean;"
    },
    {
        "line": 46,
        "fullcodeline": "alloc_len = pool->coinbase_len = cb1_len + pool->n1_len + pool->n2size + cb2_len;"
    },
    {
        "line": 47,
        "fullcodeline": "pool->nonce2_offset = cb1_len + pool->n1_len;"
    },
    {
        "line": 70,
        "fullcodeline": "pool->merkles = merkles;"
    },
    {
        "line": 82,
        "fullcodeline": "snprintf(header, 225,"
    },
    {
        "line": 91,
        "fullcodeline": "ret = hex2bin(pool->header_bin, header, 112);"
    },
    {
        "line": 97,
        "fullcodeline": "cb1 = alloca(cb1_len);"
    },
    {
        "line": 98,
        "fullcodeline": "ret = hex2bin(cb1, coinbase1, cb1_len);"
    },
    {
        "line": 103,
        "fullcodeline": "cb2 = alloca(cb2_len);"
    },
    {
        "line": 104,
        "fullcodeline": "ret = hex2bin(cb2, coinbase2, cb2_len);"
    },
    {
        "line": 109,
        "fullcodeline": "free(pool->coinbase);"
    },
    {
        "line": 110,
        "fullcodeline": "align_len(&alloc_len);"
    },
    {
        "line": 111,
        "fullcodeline": "pool->coinbase = calloc(alloc_len, 1);"
    },
    {
        "line": 114,
        "fullcodeline": "memcpy(pool->coinbase, cb1, cb1_len);"
    },
    {
        "line": 115,
        "fullcodeline": "memcpy(pool->coinbase + cb1_len, pool->nonce1bin, pool->n1_len);"
    },
    {
        "line": 116,
        "fullcodeline": "memcpy(pool->coinbase + cb1_len + pool->n1_len + pool->n2size, cb2, cb2_len);"
    },
    {
        "line": 124,
        "fullcodeline": "cg_wunlock(&pool->data_lock);"
    },
    {
        "line": 136,
        "fullcodeline": "free(coinbase1);"
    },
    {
        "line": 137,
        "fullcodeline": "free(coinbase2);"
    },
    {
        "line": 140,
        "fullcodeline": "pool->getwork_requested++;"
    },
    {
        "line": 141,
        "fullcodeline": "total_getworks++;"
    },
    {
        "line": 12,
        "fullcodeline": "if (!arr || !json_is_array(arr))"
    },
    {
        "line": 26,
        "fullcodeline": "if (!valid_hex(job_id) || !valid_hex(prev_hash) || !valid_hex(coinbase1) ||"
    },
    {
        "line": 49,
        "fullcodeline": "for (i = 0; i < pool->merkles; i++)"
    },
    {
        "line": 92,
        "fullcodeline": "if (unlikely(!ret)) {"
    },
    {
        "line": 99,
        "fullcodeline": "if (unlikely(!ret)) {"
    },
    {
        "line": 105,
        "fullcodeline": "if (unlikely(!ret)) {"
    },
    {
        "line": 112,
        "fullcodeline": "if (unlikely(!pool->coinbase))"
    },
    {
        "line": 142,
        "fullcodeline": "if (pool == current_pool())"
    },
    {
        "line": 28,
        "fullcodeline": "!valid_hex(ntime)) {"
    },
    {
        "line": 30,
        "fullcodeline": "free(job_id);"
    },
    {
        "line": 31,
        "fullcodeline": "free(coinbase1);"
    },
    {
        "line": 32,
        "fullcodeline": "free(coinbase2);"
    },
    {
        "line": 52,
        "fullcodeline": "pool->swork.merkle_bin = realloc(pool->swork.merkle_bin,"
    },
    {
        "line": 72,
        "fullcodeline": "pool->nonce2 = 0;"
    },
    {
        "line": 93,
        "fullcodeline": "applog(LOG_ERR, \"Failed to convert header to header_bin in parse_notify\");"
    },
    {
        "line": 100,
        "fullcodeline": "applog(LOG_ERR, \"Failed to convert cb1 to cb1_bin in parse_notify\");"
    },
    {
        "line": 106,
        "fullcodeline": "applog(LOG_ERR, \"Failed to convert cb2 to cb2_bin in parse_notify\");"
    },
    {
        "line": 113,
        "fullcodeline": "quit(1, \"Failed to calloc pool coinbase in parse_notify\");"
    },
    {
        "line": 118,
        "fullcodeline": "char *cb = bin2hex(pool->coinbase, pool->coinbase_len);"
    },
    {
        "line": 120,
        "fullcodeline": "applog(LOG_DEBUG, \"Pool %d coinbase %s\", pool->pool_no, cb);"
    },
    {
        "line": 121,
        "fullcodeline": "free(cb);"
    },
    {
        "line": 127,
        "fullcodeline": "applog(LOG_DEBUG, \"job_id: %s\", job_id);"
    },
    {
        "line": 128,
        "fullcodeline": "applog(LOG_DEBUG, \"prev_hash: %s\", prev_hash);"
    },
    {
        "line": 129,
        "fullcodeline": "applog(LOG_DEBUG, \"coinbase1: %s\", coinbase1);"
    },
    {
        "line": 130,
        "fullcodeline": "applog(LOG_DEBUG, \"coinbase2: %s\", coinbase2);"
    },
    {
        "line": 131,
        "fullcodeline": "applog(LOG_DEBUG, \"bbversion: %s\", bbversion);"
    },
    {
        "line": 132,
        "fullcodeline": "applog(LOG_DEBUG, \"nbit: %s\", nbit);"
    },
    {
        "line": 133,
        "fullcodeline": "applog(LOG_DEBUG, \"ntime: %s\", ntime);"
    },
    {
        "line": 134,
        "fullcodeline": "applog(LOG_DEBUG, \"clean: %s\", clean ? \"yes\" : \"no\");"
    },
    {
        "line": 143,
        "fullcodeline": "opt_work_update = true;"
    },
    {
        "line": 27,
        "fullcodeline": "!valid_hex(coinbase2) || !valid_hex(bbversion) || !valid_hex(nbit) ||"
    },
    {
        "line": 54,
        "fullcodeline": "for (i = 0; i < merkles; i++) {"
    },
    {
        "line": 53,
        "fullcodeline": "sizeof(char *) * merkles + 1);"
    },
    {
        "line": 55,
        "fullcodeline": "char *merkle = json_array_string(arr, i);"
    },
    {
        "line": 57,
        "fullcodeline": "pool->swork.merkle_bin[i] = malloc(32);"
    },
    {
        "line": 62,
        "fullcodeline": "ret = hex2bin(pool->swork.merkle_bin[i], merkle, 32);"
    },
    {
        "line": 63,
        "fullcodeline": "free(merkle);"
    },
    {
        "line": 58,
        "fullcodeline": "if (unlikely(!pool->swork.merkle_bin[i]))"
    },
    {
        "line": 64,
        "fullcodeline": "if (unlikely(!ret)) {"
    },
    {
        "line": 59,
        "fullcodeline": "quit(1, \"Failed to malloc pool swork merkle_bin\");"
    },
    {
        "line": 61,
        "fullcodeline": "applog(LOG_DEBUG, \"merkle %d: %s\", i, merkle);"
    },
    {
        "line": 65,
        "fullcodeline": "applog(LOG_ERR, \"Failed to convert merkle to merkle_bin in parse_notify\");"
    }
]