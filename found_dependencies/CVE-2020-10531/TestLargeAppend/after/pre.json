[
    {
        "line": 6,
        "fullcodeline": "int32_t len = 0xAFFFFFF;"
    },
    {
        "line": 8,
        "fullcodeline": "char16_t *buf = str.getBuffer(len);"
    },
    {
        "line": 12,
        "fullcodeline": "str.releaseBuffer(len);"
    },
    {
        "line": 17,
        "fullcodeline": "int64_t total = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "dest.remove();"
    },
    {
        "line": 28,
        "fullcodeline": "total = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "uprv_memset(buf, 0x4e, len * 2);"
    },
    {
        "line": 18,
        "fullcodeline": "for (int32_t i = 0; i < 16; i++) {"
    },
    {
        "line": 29,
        "fullcodeline": "for (int32_t i = 0; i < 16; i++) {"
    },
    {
        "line": 19,
        "fullcodeline": "dest.append(str);"
    },
    {
        "line": 20,
        "fullcodeline": "total += len;"
    },
    {
        "line": 30,
        "fullcodeline": "dest.append(str);"
    },
    {
        "line": 31,
        "fullcodeline": "total += len;"
    },
    {
        "line": 21,
        "fullcodeline": "if (total <= INT32_MAX) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (total + len <= INT32_MAX) {"
    },
    {
        "line": 22,
        "fullcodeline": "assertFalse(\"dest is not bogus\", dest.isBogus());"
    },
    {
        "line": 33,
        "fullcodeline": "assertFalse(\"dest is not bogus\", dest.isBogus());"
    },
    {
        "line": 24,
        "fullcodeline": "assertTrue(\"dest should be bogus\", dest.isBogus());"
    },
    {
        "line": 34,
        "fullcodeline": "} else if (total <= INT32_MAX) {"
    },
    {
        "line": 37,
        "fullcodeline": "int32_t remain = INT32_MAX - total;"
    },
    {
        "line": 38,
        "fullcodeline": "char16_t *buf2 = str2.getBuffer(remain);"
    },
    {
        "line": 44,
        "fullcodeline": "str2.releaseBuffer(remain);"
    },
    {
        "line": 45,
        "fullcodeline": "dest.append(str2);"
    },
    {
        "line": 46,
        "fullcodeline": "total += remain;"
    },
    {
        "line": 47,
        "fullcodeline": "assertEquals(\"When a string of exactly the maximum size works\", (int64_t)INT32_MAX, total);"
    },
    {
        "line": 48,
        "fullcodeline": "assertEquals(\"When a string of exactly the maximum size works\", INT32_MAX, dest.length());"
    },
    {
        "line": 52,
        "fullcodeline": "str2.truncate(1);"
    },
    {
        "line": 53,
        "fullcodeline": "dest.append(str2);"
    },
    {
        "line": 54,
        "fullcodeline": "total++;"
    },
    {
        "line": 39,
        "fullcodeline": "if (buf2 == nullptr) {"
    },
    {
        "line": 43,
        "fullcodeline": "uprv_memset(buf2, 0x4e, remain * 2);"
    },
    {
        "line": 49,
        "fullcodeline": "assertFalse(\"dest is not bogus\", dest.isBogus());"
    },
    {
        "line": 55,
        "fullcodeline": "assertTrue(\"dest should be bogus\", dest.isBogus());"
    },
    {
        "line": 57,
        "fullcodeline": "assertTrue(\"dest should be bogus\", dest.isBogus());"
    }
]