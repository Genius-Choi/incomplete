[
    {
        "line": 14,
        "fullcodeline": "geometry[MagickPathExtent],"
    },
    {
        "line": 15,
        "fullcodeline": "header_ole[4];"
    },
    {
        "line": 65,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 66,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 70,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 71,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 72,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 73,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 82,
        "fullcodeline": "read_info=(ImageInfo *) NULL;"
    },
    {
        "line": 83,
        "fullcodeline": "tile_image=(Image *) NULL;"
    },
    {
        "line": 84,
        "fullcodeline": "pixmap.bits_per_pixel=0;"
    },
    {
        "line": 85,
        "fullcodeline": "pixmap.component_count=0;"
    },
    {
        "line": 89,
        "fullcodeline": "header_ole[0]=ReadBlobByte(image);"
    },
    {
        "line": 90,
        "fullcodeline": "header_ole[1]=ReadBlobByte(image);"
    },
    {
        "line": 91,
        "fullcodeline": "header_ole[2]=ReadBlobByte(image);"
    },
    {
        "line": 92,
        "fullcodeline": "header_ole[3]=ReadBlobByte(image);"
    },
    {
        "line": 98,
        "fullcodeline": "(void) ReadBlobMSBShort(image);  /* skip picture size */"
    },
    {
        "line": 104,
        "fullcodeline": "version=(ssize_t) ReadBlobByte(image);"
    },
    {
        "line": 121,
        "fullcodeline": "flags=0;"
    },
    {
        "line": 122,
        "fullcodeline": "image->depth=8;"
    },
    {
        "line": 123,
        "fullcodeline": "image->columns=(size_t) (frame.right-frame.left);"
    },
    {
        "line": 124,
        "fullcodeline": "image->rows=(size_t) (frame.bottom-frame.top);"
    },
    {
        "line": 125,
        "fullcodeline": "image->resolution.x=DefaultResolution;"
    },
    {
        "line": 126,
        "fullcodeline": "image->resolution.y=DefaultResolution;"
    },
    {
        "line": 127,
        "fullcodeline": "image->units=UndefinedResolution;"
    },
    {
        "line": 134,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 142,
        "fullcodeline": "jpeg=MagickFalse;"
    },
    {
        "line": 713,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 67,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 74,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 93,
        "fullcodeline": "if (!((header_ole[0] == 0x50) && (header_ole[1] == 0x49) &&"
    },
    {
        "line": 99,
        "fullcodeline": "if (ReadRectangle(image,&frame) == MagickFalse)"
    },
    {
        "line": 101,
        "fullcodeline": "while ((c=ReadBlobByte(image)) == 0) ;"
    },
    {
        "line": 102,
        "fullcodeline": "if (c != 0x11)"
    },
    {
        "line": 105,
        "fullcodeline": "if (version == 2)"
    },
    {
        "line": 114,
        "fullcodeline": "if ((frame.left < 0) || (frame.right < 0) || (frame.top < 0) ||"
    },
    {
        "line": 128,
        "fullcodeline": "if ((image_info->ping != MagickFalse) && (image_info->number_scenes != 0))"
    },
    {
        "line": 135,
        "fullcodeline": "if (status != MagickFalse)"
    },
    {
        "line": 137,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 143,
        "fullcodeline": "for (code=0; EOFBlob(image) == MagickFalse; )"
    },
    {
        "line": 714,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 68,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 76,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 100,
        "fullcodeline": "ThrowPICTException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 103,
        "fullcodeline": "ThrowPICTException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 107,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 116,
        "fullcodeline": "(frame.top >= frame.bottom))"
    },
    {
        "line": 117,
        "fullcodeline": "ThrowPICTException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 136,
        "fullcodeline": "status=ResetImagePixels(image,exception);"
    },
    {
        "line": 77,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 94,
        "fullcodeline": "(header_ole[2] == 0x43) && (header_ole[3] == 0x54 )))"
    },
    {
        "line": 95,
        "fullcodeline": "for (i=0; i < 508; i++)"
    },
    {
        "line": 108,
        "fullcodeline": "if (c != 0xff)"
    },
    {
        "line": 115,
        "fullcodeline": "(frame.bottom < 0) || (frame.left >= frame.right) ||"
    },
    {
        "line": 129,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 138,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 145,
        "fullcodeline": "if ((image_info->ping != MagickFalse) && (image_info->number_scenes != 0))"
    },
    {
        "line": 148,
        "fullcodeline": "if ((version == 1) || ((TellBlob(image) % 2) != 0))"
    },
    {
        "line": 150,
        "fullcodeline": "if (version == 2)"
    },
    {
        "line": 152,
        "fullcodeline": "if (code < 0)"
    },
    {
        "line": 154,
        "fullcodeline": "if (code == 0)"
    },
    {
        "line": 156,
        "fullcodeline": "if (code > 0xa1)"
    },
    {
        "line": 602,
        "fullcodeline": "if (code == 0xc00)"
    },
    {
        "line": 612,
        "fullcodeline": "if (((code >= 0xb0) && (code <= 0xcf)) ||"
    },
    {
        "line": 615,
        "fullcodeline": "if (code == 0x8200)"
    },
    {
        "line": 687,
        "fullcodeline": "if ((code == 0xff) || (code == 0xffff))"
    },
    {
        "line": 689,
        "fullcodeline": "if (((code >= 0xd0) && (code <= 0xfe)) ||"
    },
    {
        "line": 701,
        "fullcodeline": "if ((code >= 0x100) && (code <= 0x7fff))"
    },
    {
        "line": 96,
        "fullcodeline": "if (ReadBlobByte(image) == EOF)"
    },
    {
        "line": 109,
        "fullcodeline": "ThrowPICTException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 112,
        "fullcodeline": "if (version != 1)"
    },
    {
        "line": 131,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 149,
        "fullcodeline": "code=ReadBlobByte(image);"
    },
    {
        "line": 151,
        "fullcodeline": "code=ReadBlobMSBSignedShort(image);"
    },
    {
        "line": 613,
        "fullcodeline": "((code >= 0x8000) && (code <= 0x80ff)))"
    },
    {
        "line": 618,
        "fullcodeline": "filename[MaxTextExtent];"
    },
    {
        "line": 629,
        "fullcodeline": "jpeg=MagickTrue;"
    },
    {
        "line": 630,
        "fullcodeline": "read_info=CloneImageInfo(image_info);"
    },
    {
        "line": 631,
        "fullcodeline": "SetImageInfoBlob(read_info,(void *) NULL,0);"
    },
    {
        "line": 632,
        "fullcodeline": "file=(FILE *) NULL;"
    },
    {
        "line": 633,
        "fullcodeline": "unique_file=AcquireUniqueFileResource(filename);"
    },
    {
        "line": 634,
        "fullcodeline": "(void) FormatLocaleString(read_info->filename,MaxTextExtent,\"jpeg:%s\","
    },
    {
        "line": 645,
        "fullcodeline": "length=ReadBlobMSBLong(image);"
    },
    {
        "line": 667,
        "fullcodeline": "(void) fclose(file);"
    },
    {
        "line": 668,
        "fullcodeline": "(void) close(unique_file);"
    },
    {
        "line": 669,
        "fullcodeline": "tile_image=ReadImage(read_info,exception);"
    },
    {
        "line": 670,
        "fullcodeline": "(void) RelinquishUniqueFileResource(filename);"
    },
    {
        "line": 671,
        "fullcodeline": "read_info=DestroyImageInfo(read_info);"
    },
    {
        "line": 674,
        "fullcodeline": "(void) FormatLocaleString(geometry,MagickPathExtent,\"%.20gx%.20g\","
    },
    {
        "line": 677,
        "fullcodeline": "(void) SetImageExtent(image,"
    },
    {
        "line": 680,
        "fullcodeline": "(void) TransformImageColorspace(image,tile_image->colorspace,exception);"
    },
    {
        "line": 681,
        "fullcodeline": "(void) CompositeImage(image,tile_image,CopyCompositeOp,MagickTrue,"
    },
    {
        "line": 683,
        "fullcodeline": "image->compression=tile_image->compression;"
    },
    {
        "line": 684,
        "fullcodeline": "tile_image=DestroyImage(tile_image);"
    },
    {
        "line": 690,
        "fullcodeline": "((code >= 0x8100) && (code <= 0xffff)))"
    },
    {
        "line": 695,
        "fullcodeline": "length=ReadBlobMSBShort(image);"
    },
    {
        "line": 706,
        "fullcodeline": "length=(size_t) ((code >> 7) & 0xff);"
    },
    {
        "line": 113,
        "fullcodeline": "ThrowPICTException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 132,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 146,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 158,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 607,
        "fullcodeline": "for (i=0; i < 24; i++)"
    },
    {
        "line": 636,
        "fullcodeline": "if (unique_file != -1)"
    },
    {
        "line": 638,
        "fullcodeline": "if ((unique_file == -1) || (file == (FILE *) NULL))"
    },
    {
        "line": 646,
        "fullcodeline": "if (length > 154)"
    },
    {
        "line": 672,
        "fullcodeline": "if (tile_image == (Image *) NULL)"
    },
    {
        "line": 696,
        "fullcodeline": "for (i=0; i < (ssize_t) length; i++)"
    },
    {
        "line": 707,
        "fullcodeline": "for (i=0; i < (ssize_t) length; i++)"
    },
    {
        "line": 159,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\"%04X:\",code);"
    },
    {
        "line": 163,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 608,
        "fullcodeline": "if (ReadBlobByte(image) == EOF)"
    },
    {
        "line": 637,
        "fullcodeline": "file=fdopen(unique_file,\"wb\");"
    },
    {
        "line": 640,
        "fullcodeline": "(void) RelinquishUniqueFileResource(read_info->filename);"
    },
    {
        "line": 641,
        "fullcodeline": "(void) CopyMagickString(image->filename,read_info->filename,"
    },
    {
        "line": 643,
        "fullcodeline": "ThrowPICTException(FileOpenError,\"UnableToCreateTemporaryFile\");"
    },
    {
        "line": 675,
        "fullcodeline": "(double) MagickMax(image->columns,tile_image->columns),"
    },
    {
        "line": 676,
        "fullcodeline": "(double) MagickMax(image->rows,tile_image->rows));"
    },
    {
        "line": 678,
        "fullcodeline": "MagickMax(image->columns,tile_image->columns),"
    },
    {
        "line": 679,
        "fullcodeline": "MagickMax(image->rows,tile_image->rows),exception);"
    },
    {
        "line": 682,
        "fullcodeline": "(ssize_t) frame.left,(ssize_t) frame.right,exception);"
    },
    {
        "line": 697,
        "fullcodeline": "if (ReadBlobByte(image) == EOF)"
    },
    {
        "line": 708,
        "fullcodeline": "if (ReadBlobByte(image) == EOF)"
    },
    {
        "line": 164,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 648,
        "fullcodeline": "for (i=0; i < 6; i++)"
    },
    {
        "line": 649,
        "fullcodeline": "(void) ReadBlobMSBLong(image);"
    },
    {
        "line": 650,
        "fullcodeline": "if (ReadRectangle(image,&frame) == MagickFalse)"
    },
    {
        "line": 656,
        "fullcodeline": "for (i=0; i < 122; i++)"
    },
    {
        "line": 659,
        "fullcodeline": "for (i=0; i < (ssize_t) (length-154); i++)"
    },
    {
        "line": 173,
        "fullcodeline": "length=ReadBlobMSBShort(image);"
    },
    {
        "line": 185,
        "fullcodeline": "image->columns=(size_t) (frame.right-frame.left);"
    },
    {
        "line": 186,
        "fullcodeline": "image->rows=(size_t) (frame.bottom-frame.top);"
    },
    {
        "line": 187,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 208,
        "fullcodeline": "pattern=(ssize_t) ReadBlobMSBShort(image);"
    },
    {
        "line": 221,
        "fullcodeline": "length=ReadBlobMSBShort(image);"
    },
    {
        "line": 226,
        "fullcodeline": "image->depth=(size_t) pixmap.component_size;"
    },
    {
        "line": 227,
        "fullcodeline": "image->resolution.x=1.0*pixmap.horizontal_resolution;"
    },
    {
        "line": 228,
        "fullcodeline": "image->resolution.y=1.0*pixmap.vertical_resolution;"
    },
    {
        "line": 229,
        "fullcodeline": "image->units=PixelsPerInchResolution;"
    },
    {
        "line": 230,
        "fullcodeline": "(void) ReadBlobMSBLong(image);"
    },
    {
        "line": 231,
        "fullcodeline": "flags=(ssize_t) ReadBlobMSBShort(image);"
    },
    {
        "line": 232,
        "fullcodeline": "length=ReadBlobMSBShort(image);"
    },
    {
        "line": 235,
        "fullcodeline": "width=(size_t) (frame.bottom-frame.top);"
    },
    {
        "line": 236,
        "fullcodeline": "height=(size_t) (frame.right-frame.left);"
    },
    {
        "line": 272,
        "fullcodeline": "image->background_color.red=(Quantum)"
    },
    {
        "line": 274,
        "fullcodeline": "image->background_color.green=(Quantum)"
    },
    {
        "line": 276,
        "fullcodeline": "image->background_color.blue=(Quantum)"
    },
    {
        "line": 292,
        "fullcodeline": "length=ReadBlobMSBShort(image);"
    },
    {
        "line": 324,
        "fullcodeline": "bytes_per_line=0;"
    },
    {
        "line": 338,
        "fullcodeline": "tile_image=CloneImage(image,(size_t) (frame.right-frame.left),"
    },
    {
        "line": 408,
        "fullcodeline": "(void) ReadBlobMSBShort(image);"
    },
    {
        "line": 431,
        "fullcodeline": "p=pixels;"
    },
    {
        "line": 514,
        "fullcodeline": "pixels=(unsigned char *) RelinquishMagickMemory(pixels);"
    },
    {
        "line": 521,
        "fullcodeline": "tile_image=DestroyImage(tile_image);"
    },
    {
        "line": 535,
        "fullcodeline": "type=ReadBlobMSBShort(image);"
    },
    {
        "line": 536,
        "fullcodeline": "length=ReadBlobMSBShort(image);"
    },
    {
        "line": 539,
        "fullcodeline": "(void) ReadBlobMSBLong(image);"
    },
    {
        "line": 540,
        "fullcodeline": "length-=MagickMin(length,4);"
    },
    {
        "line": 543,
        "fullcodeline": "info=(unsigned char *) AcquireQuantumMemory(length,sizeof(*info));"
    },
    {
        "line": 546,
        "fullcodeline": "count=ReadBlob(image,length,info);"
    },
    {
        "line": 585,
        "fullcodeline": "info=(unsigned char *) RelinquishMagickMemory(info);"
    },
    {
        "line": 652,
        "fullcodeline": "(void) fclose(file);"
    },
    {
        "line": 653,
        "fullcodeline": "(void) RelinquishUniqueFileResource(read_info->filename);"
    },
    {
        "line": 654,
        "fullcodeline": "ThrowPICTException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 657,
        "fullcodeline": "if (ReadBlobByte(image) == EOF)"
    },
    {
        "line": 661,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 664,
        "fullcodeline": "(void) fputc(c,file);"
    },
    {
        "line": 174,
        "fullcodeline": "if (length != 0x000a)"
    },
    {
        "line": 181,
        "fullcodeline": "if (ReadRectangle(image,&frame) == MagickFalse)"
    },
    {
        "line": 183,
        "fullcodeline": "if (((frame.left & 0x8000) != 0) || ((frame.top & 0x8000) != 0))"
    },
    {
        "line": 188,
        "fullcodeline": "if (status != MagickFalse)"
    },
    {
        "line": 190,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 209,
        "fullcodeline": "for (i=0; i < 8; i++)"
    },
    {
        "line": 212,
        "fullcodeline": "if (pattern == 2)"
    },
    {
        "line": 219,
        "fullcodeline": "if (pattern != 1)"
    },
    {
        "line": 222,
        "fullcodeline": "if (ReadRectangle(image,&frame) == MagickFalse)"
    },
    {
        "line": 224,
        "fullcodeline": "if (ReadPixmap(image,&pixmap) == MagickFalse)"
    },
    {
        "line": 233,
        "fullcodeline": "for (i=0; i <= (ssize_t) length; i++)"
    },
    {
        "line": 234,
        "fullcodeline": "(void) ReadBlobMSBLong(image);"
    },
    {
        "line": 237,
        "fullcodeline": "if (pixmap.bits_per_pixel <= 8)"
    },
    {
        "line": 239,
        "fullcodeline": "if (pixmap.bits_per_pixel == 16)"
    },
    {
        "line": 241,
        "fullcodeline": "if (length == 0)"
    },
    {
        "line": 243,
        "fullcodeline": "if (length < 8)"
    },
    {
        "line": 293,
        "fullcodeline": "for (i=0; i < (ssize_t) (length-2); i++)"
    },
    {
        "line": 325,
        "fullcodeline": "if ((code != 0x9a) && (code != 0x9b))"
    },
    {
        "line": 333,
        "fullcodeline": "if (ReadRectangle(image,&frame) == MagickFalse)"
    },
    {
        "line": 340,
        "fullcodeline": "if (tile_image == (Image *) NULL)"
    },
    {
        "line": 342,
        "fullcodeline": "if ((code == 0x9a) || (code == 0x9b) ||"
    },
    {
        "line": 356,
        "fullcodeline": "if ((code != 0x9a) && (code != 0x9b))"
    },
    {
        "line": 401,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 404,
        "fullcodeline": "if (ReadRectangle(image,&source) == MagickFalse)"
    },
    {
        "line": 406,
        "fullcodeline": "if (ReadRectangle(image,&destination) == MagickFalse)"
    },
    {
        "line": 409,
        "fullcodeline": "if ((code == 0x91) || (code == 0x99) || (code == 0x9b))"
    },
    {
        "line": 419,
        "fullcodeline": "if ((code != 0x9a) && (code != 0x9b) &&"
    },
    {
        "line": 426,
        "fullcodeline": "if (pixels == (unsigned char *) NULL)"
    },
    {
        "line": 432,
        "fullcodeline": "for (y=0; y < (ssize_t) tile_image->rows; y++)"
    },
    {
        "line": 515,
        "fullcodeline": "if ((jpeg == MagickFalse) && (EOFBlob(image) == MagickFalse))"
    },
    {
        "line": 537,
        "fullcodeline": "if (length == 0)"
    },
    {
        "line": 541,
        "fullcodeline": "if (length == 0)"
    },
    {
        "line": 544,
        "fullcodeline": "if (info == (unsigned char *) NULL)"
    },
    {
        "line": 547,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 593,
        "fullcodeline": "if (codes[code].length == -1)"
    },
    {
        "line": 662,
        "fullcodeline": "if (c == EOF)"
    },
    {
        "line": 182,
        "fullcodeline": "ThrowPICTException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 189,
        "fullcodeline": "status=ResetImagePixels(image,exception);"
    },
    {
        "line": 210,
        "fullcodeline": "if (ReadBlobByte(image) == EOF)"
    },
    {
        "line": 220,
        "fullcodeline": "ThrowPICTException(CorruptImageError,\"UnknownPatternType\");"
    },
    {
        "line": 223,
        "fullcodeline": "ThrowPICTException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 225,
        "fullcodeline": "ThrowPICTException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 238,
        "fullcodeline": "length&=0x7fff;"
    },
    {
        "line": 240,
        "fullcodeline": "width<<=1;"
    },
    {
        "line": 242,
        "fullcodeline": "length=width;"
    },
    {
        "line": 273,
        "fullcodeline": "ScaleShortToQuantum(ReadBlobMSBShort(image));"
    },
    {
        "line": 275,
        "fullcodeline": "ScaleShortToQuantum(ReadBlobMSBShort(image));"
    },
    {
        "line": 277,
        "fullcodeline": "ScaleShortToQuantum(ReadBlobMSBShort(image));"
    },
    {
        "line": 294,
        "fullcodeline": "if (ReadBlobByte(image) == EOF)"
    },
    {
        "line": 326,
        "fullcodeline": "bytes_per_line=(ssize_t) ReadBlobMSBShort(image);"
    },
    {
        "line": 334,
        "fullcodeline": "ThrowPICTException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 339,
        "fullcodeline": "(size_t) (frame.bottom-frame.top),MagickTrue,exception);"
    },
    {
        "line": 341,
        "fullcodeline": "ThrowPICTException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 343,
        "fullcodeline": "((bytes_per_line & 0x8000) != 0))"
    },
    {
        "line": 347,
        "fullcodeline": "tile_image->depth=(size_t) pixmap.component_size;"
    },
    {
        "line": 348,
        "fullcodeline": "tile_image->alpha_trait=pixmap.component_count == 4 ?"
    },
    {
        "line": 350,
        "fullcodeline": "tile_image->resolution.x=(double) pixmap.horizontal_resolution;"
    },
    {
        "line": 351,
        "fullcodeline": "tile_image->resolution.y=(double) pixmap.vertical_resolution;"
    },
    {
        "line": 352,
        "fullcodeline": "tile_image->units=PixelsPerInchResolution;"
    },
    {
        "line": 361,
        "fullcodeline": "tile_image->colors=2;"
    },
    {
        "line": 368,
        "fullcodeline": "status=AcquireImageColormap(tile_image,tile_image->colors,"
    },
    {
        "line": 402,
        "fullcodeline": "ThrowPICTException(CorruptImageError,"
    },
    {
        "line": 405,
        "fullcodeline": "ThrowPICTException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 407,
        "fullcodeline": "ThrowPICTException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 414,
        "fullcodeline": "length=ReadBlobMSBShort(image);"
    },
    {
        "line": 420,
        "fullcodeline": "(bytes_per_line & 0x8000) == 0)"
    },
    {
        "line": 421,
        "fullcodeline": "pixels=DecodeImage(image,tile_image,(size_t) bytes_per_line,1,"
    },
    {
        "line": 427,
        "fullcodeline": "ThrowPICTException(CorruptImageError,\"UnableToUncompressImage\");"
    },
    {
        "line": 439,
        "fullcodeline": "q=QueueAuthenticPixels(tile_image,0,y,tile_image->columns,1,"
    },
    {
        "line": 509,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 549,
        "fullcodeline": "info=(unsigned char *) RelinquishMagickMemory(info);"
    },
    {
        "line": 550,
        "fullcodeline": "ThrowPICTException(ResourceLimitError,\"UnableToReadImageData\");"
    },
    {
        "line": 594,
        "fullcodeline": "(void) ReadBlobMSBShort(image);"
    },
    {
        "line": 176,
        "fullcodeline": "for (i=0; i < (ssize_t) (length-2); i++)"
    },
    {
        "line": 191,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 214,
        "fullcodeline": "for (i=0; i < 5; i++)"
    },
    {
        "line": 245,
        "fullcodeline": "for (i=0; i < (ssize_t) (length*height); i++)"
    },
    {
        "line": 329,
        "fullcodeline": "(void) ReadBlobMSBShort(image);"
    },
    {
        "line": 330,
        "fullcodeline": "(void) ReadBlobMSBShort(image);"
    },
    {
        "line": 331,
        "fullcodeline": "(void) ReadBlobMSBShort(image);"
    },
    {
        "line": 345,
        "fullcodeline": "if (ReadPixmap(image,&pixmap) == MagickFalse)"
    },
    {
        "line": 353,
        "fullcodeline": "if (tile_image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 362,
        "fullcodeline": "if ((bytes_per_line & 0x8000) != 0)"
    },
    {
        "line": 370,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 373,
        "fullcodeline": "if ((bytes_per_line & 0x8000) != 0)"
    },
    {
        "line": 415,
        "fullcodeline": "for (i=0; i < (ssize_t) (length-2); i++)"
    },
    {
        "line": 424,
        "fullcodeline": "pixels=DecodeImage(image,tile_image,(size_t) bytes_per_line,"
    },
    {
        "line": 434,
        "fullcodeline": "if (p > (pixels+extent+image->columns))"
    },
    {
        "line": 441,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 443,
        "fullcodeline": "for (x=0; x < (ssize_t) tile_image->columns; x++)"
    },
    {
        "line": 500,
        "fullcodeline": "if (SyncAuthenticPixels(tile_image,exception) == MagickFalse)"
    },
    {
        "line": 502,
        "fullcodeline": "if ((tile_image->storage_class == DirectClass) &&"
    },
    {
        "line": 511,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 516,
        "fullcodeline": "if ((code == 0x9a) || (code == 0x9b) ||"
    },
    {
        "line": 556,
        "fullcodeline": "profile=BlobToStringInfo((const void *) NULL,length);"
    },
    {
        "line": 557,
        "fullcodeline": "SetStringInfoDatum(profile,info);"
    },
    {
        "line": 558,
        "fullcodeline": "status=SetImageProfile(image,\"icc\",profile,exception);"
    },
    {
        "line": 559,
        "fullcodeline": "profile=DestroyStringInfo(profile);"
    },
    {
        "line": 570,
        "fullcodeline": "profile=BlobToStringInfo((const void *) NULL,length);"
    },
    {
        "line": 571,
        "fullcodeline": "SetStringInfoDatum(profile,info);"
    },
    {
        "line": 572,
        "fullcodeline": "status=SetImageProfile(image,\"iptc\",profile,exception);"
    },
    {
        "line": 579,
        "fullcodeline": "profile=DestroyStringInfo(profile);"
    },
    {
        "line": 177,
        "fullcodeline": "if (ReadBlobByte(image) == EOF)"
    },
    {
        "line": 215,
        "fullcodeline": "if (ReadBlobByte(image) == EOF)"
    },
    {
        "line": 246,
        "fullcodeline": "if (ReadBlobByte(image) == EOF)"
    },
    {
        "line": 250,
        "fullcodeline": "for (i=0; i < (ssize_t) height; i++)"
    },
    {
        "line": 346,
        "fullcodeline": "ThrowPICTException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 354,
        "fullcodeline": "(void) SetImageAlpha(tile_image,OpaqueAlpha,exception);"
    },
    {
        "line": 364,
        "fullcodeline": "(void) ReadBlobMSBLong(image);"
    },
    {
        "line": 365,
        "fullcodeline": "flags=(ssize_t) ReadBlobMSBShort(image);"
    },
    {
        "line": 366,
        "fullcodeline": "tile_image->colors=1UL*ReadBlobMSBShort(image)+1;"
    },
    {
        "line": 371,
        "fullcodeline": "ThrowPICTException(ResourceLimitError,"
    },
    {
        "line": 416,
        "fullcodeline": "if (ReadBlobByte(image) == EOF)"
    },
    {
        "line": 436,
        "fullcodeline": "pixels=(unsigned char *) RelinquishMagickMemory(pixels);"
    },
    {
        "line": 437,
        "fullcodeline": "ThrowPICTException(CorruptImageError,\"NotEnoughPixelData\");"
    },
    {
        "line": 497,
        "fullcodeline": "p++;"
    },
    {
        "line": 498,
        "fullcodeline": "q+=GetPixelChannels(tile_image);"
    },
    {
        "line": 503,
        "fullcodeline": "(pixmap.bits_per_pixel != 16))"
    },
    {
        "line": 505,
        "fullcodeline": "p+=(pixmap.component_count-1)*tile_image->columns;"
    },
    {
        "line": 517,
        "fullcodeline": "((bytes_per_line & 0x8000) != 0))"
    },
    {
        "line": 518,
        "fullcodeline": "(void) CompositeImage(image,tile_image,CopyCompositeOp,"
    },
    {
        "line": 560,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 573,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 596,
        "fullcodeline": "for (i=0; i < (ssize_t) codes[code].length; i++)"
    },
    {
        "line": 375,
        "fullcodeline": "for (i=0; i < (ssize_t) tile_image->colors; i++)"
    },
    {
        "line": 425,
        "fullcodeline": "(unsigned int) pixmap.bits_per_pixel,&extent);"
    },
    {
        "line": 445,
        "fullcodeline": "if (tile_image->storage_class == PseudoClass)"
    },
    {
        "line": 506,
        "fullcodeline": "if (p < pixels)"
    },
    {
        "line": 562,
        "fullcodeline": "info=(unsigned char *) RelinquishMagickMemory(info);"
    },
    {
        "line": 563,
        "fullcodeline": "ThrowPICTException(ResourceLimitError,"
    },
    {
        "line": 575,
        "fullcodeline": "info=(unsigned char *) RelinquishMagickMemory(info);"
    },
    {
        "line": 576,
        "fullcodeline": "ThrowPICTException(ResourceLimitError,"
    },
    {
        "line": 597,
        "fullcodeline": "if (ReadBlobByte(image) == EOF)"
    },
    {
        "line": 252,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 254,
        "fullcodeline": "if (length > 200)"
    },
    {
        "line": 377,
        "fullcodeline": "j=ReadBlobMSBShort(image) % tile_image->colors;"
    },
    {
        "line": 380,
        "fullcodeline": "tile_image->colormap[j].red=(Quantum)"
    },
    {
        "line": 382,
        "fullcodeline": "tile_image->colormap[j].green=(Quantum)"
    },
    {
        "line": 384,
        "fullcodeline": "tile_image->colormap[j].blue=(Quantum)"
    },
    {
        "line": 390,
        "fullcodeline": "for (i=0; i < (ssize_t) tile_image->colors; i++)"
    },
    {
        "line": 447,
        "fullcodeline": "index=(Quantum) ConstrainColormapIndex(tile_image,(ssize_t)"
    },
    {
        "line": 449,
        "fullcodeline": "SetPixelIndex(tile_image,index,q);"
    },
    {
        "line": 450,
        "fullcodeline": "SetPixelRed(tile_image,"
    },
    {
        "line": 452,
        "fullcodeline": "SetPixelGreen(tile_image,"
    },
    {
        "line": 454,
        "fullcodeline": "SetPixelBlue(tile_image,"
    },
    {
        "line": 378,
        "fullcodeline": "if ((flags & 0x8000) != 0)"
    },
    {
        "line": 392,
        "fullcodeline": "tile_image->colormap[i].red=(Quantum) (QuantumRange-"
    },
    {
        "line": 394,
        "fullcodeline": "tile_image->colormap[i].green=(Quantum) (QuantumRange-"
    },
    {
        "line": 396,
        "fullcodeline": "tile_image->colormap[i].blue=(Quantum) (QuantumRange-"
    },
    {
        "line": 256,
        "fullcodeline": "for (j=0; j < (ssize_t) ReadBlobMSBShort(image); j++)"
    },
    {
        "line": 379,
        "fullcodeline": "j=(size_t) i;"
    },
    {
        "line": 381,
        "fullcodeline": "ScaleShortToQuantum(ReadBlobMSBShort(image));"
    },
    {
        "line": 383,
        "fullcodeline": "ScaleShortToQuantum(ReadBlobMSBShort(image));"
    },
    {
        "line": 385,
        "fullcodeline": "ScaleShortToQuantum(ReadBlobMSBShort(image));"
    },
    {
        "line": 459,
        "fullcodeline": "if (pixmap.bits_per_pixel == 16)"
    },
    {
        "line": 257,
        "fullcodeline": "if (ReadBlobByte(image) == EOF)"
    },
    {
        "line": 261,
        "fullcodeline": "for (j=0; j < (ssize_t) ReadBlobByte(image); j++)"
    },
    {
        "line": 451,
        "fullcodeline": "tile_image->colormap[(ssize_t) index].red,q);"
    },
    {
        "line": 453,
        "fullcodeline": "tile_image->colormap[(ssize_t) index].green,q);"
    },
    {
        "line": 455,
        "fullcodeline": "tile_image->colormap[(ssize_t) index].blue,q);"
    },
    {
        "line": 461,
        "fullcodeline": "i=(ssize_t) (*p++);"
    },
    {
        "line": 462,
        "fullcodeline": "j=(size_t) (*p);"
    },
    {
        "line": 463,
        "fullcodeline": "SetPixelRed(tile_image,ScaleCharToQuantum("
    },
    {
        "line": 465,
        "fullcodeline": "SetPixelGreen(tile_image,ScaleCharToQuantum("
    },
    {
        "line": 468,
        "fullcodeline": "SetPixelBlue(tile_image,ScaleCharToQuantum("
    },
    {
        "line": 262,
        "fullcodeline": "if (ReadBlobByte(image) == EOF)"
    },
    {
        "line": 464,
        "fullcodeline": "(unsigned char) ((i & 0x7c) << 1)),q);"
    },
    {
        "line": 466,
        "fullcodeline": "(unsigned char) (((i & 0x03) << 6) |"
    },
    {
        "line": 469,
        "fullcodeline": "(unsigned char) ((j & 0x1f) << 3)),q);"
    },
    {
        "line": 472,
        "fullcodeline": "if (tile_image->alpha_trait == UndefinedPixelTrait)"
    },
    {
        "line": 477,
        "fullcodeline": "SetPixelRed(tile_image,ScaleCharToQuantum(*p),q);"
    },
    {
        "line": 478,
        "fullcodeline": "SetPixelGreen(tile_image,ScaleCharToQuantum("
    },
    {
        "line": 480,
        "fullcodeline": "SetPixelBlue(tile_image,ScaleCharToQuantum("
    },
    {
        "line": 467,
        "fullcodeline": "((j & 0xe0) >> 2))),q);"
    },
    {
        "line": 474,
        "fullcodeline": "if (p > (pixels+extent+2*image->columns))"
    },
    {
        "line": 488,
        "fullcodeline": "SetPixelAlpha(tile_image,ScaleCharToQuantum(*p),q);"
    },
    {
        "line": 489,
        "fullcodeline": "SetPixelRed(tile_image,ScaleCharToQuantum("
    },
    {
        "line": 491,
        "fullcodeline": "SetPixelGreen(tile_image,ScaleCharToQuantum("
    },
    {
        "line": 493,
        "fullcodeline": "SetPixelBlue(tile_image,ScaleCharToQuantum("
    },
    {
        "line": 475,
        "fullcodeline": "ThrowPICTException(CorruptImageError,"
    },
    {
        "line": 485,
        "fullcodeline": "if (p > (pixels+extent+3*image->columns))"
    },
    {
        "line": 479,
        "fullcodeline": "*(p+tile_image->columns)),q);"
    },
    {
        "line": 481,
        "fullcodeline": "*(p+2*tile_image->columns)),q);"
    },
    {
        "line": 486,
        "fullcodeline": "ThrowPICTException(CorruptImageError,"
    },
    {
        "line": 490,
        "fullcodeline": "*(p+tile_image->columns)),q);"
    },
    {
        "line": 492,
        "fullcodeline": "*(p+2*tile_image->columns)),q);"
    },
    {
        "line": 494,
        "fullcodeline": "*(p+3*tile_image->columns)),q);"
    }
]