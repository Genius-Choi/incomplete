[
    {
        "line": 4,
        "fullcodeline": "for (int i = 0; i < rt_nested_splits.size(); ++i) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (rt_dense_values_in.dim_size(0) !="
    },
    {
        "line": 35,
        "fullcodeline": "return ::tensorflow::Status::OK();"
    },
    {
        "line": 30,
        "fullcodeline": "rt_nested_splits.back()(rt_nested_splits.back().size() - 1)) {"
    },
    {
        "line": 5,
        "fullcodeline": "if (rt_nested_splits[i].size() == 0) {"
    },
    {
        "line": 8,
        "fullcodeline": "if (rt_nested_splits[i](0) != 0) {"
    },
    {
        "line": 11,
        "fullcodeline": "for (int j = 1; j < rt_nested_splits[i].size(); ++j) {"
    },
    {
        "line": 19,
        "fullcodeline": "if (i > 0) {"
    },
    {
        "line": 31,
        "fullcodeline": "return InvalidArgument("
    },
    {
        "line": 20,
        "fullcodeline": "SPLITS_TYPE last_split ="
    },
    {
        "line": 6,
        "fullcodeline": "return InvalidArgument(\"ragged splits may not be empty.\");"
    },
    {
        "line": 9,
        "fullcodeline": "return InvalidArgument(\"First value of ragged splits must be 0.\");"
    },
    {
        "line": 12,
        "fullcodeline": "if (rt_nested_splits[i](j) < rt_nested_splits[i](j - 1)) {"
    },
    {
        "line": 21,
        "fullcodeline": "rt_nested_splits[i - 1](rt_nested_splits[i - 1].size() - 1);"
    },
    {
        "line": 22,
        "fullcodeline": "if (rt_nested_splits[i].size() != last_split + 1) {"
    },
    {
        "line": 13,
        "fullcodeline": "return InvalidArgument("
    },
    {
        "line": 23,
        "fullcodeline": "return InvalidArgument("
    },
    {
        "line": 15,
        "fullcodeline": "rt_nested_splits[i](j - 1), \" followed by \","
    },
    {
        "line": 16,
        "fullcodeline": "rt_nested_splits[i](j));"
    }
]