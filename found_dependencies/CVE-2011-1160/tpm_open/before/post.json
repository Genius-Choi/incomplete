[
    {
        "line": 3,
        "fullcodeline": "int minor = iminor(inode);"
    },
    {
        "line": 4,
        "fullcodeline": "struct tpm_chip *chip = NULL, *pos;"
    },
    {
        "line": 6,
        "fullcodeline": "rcu_read_lock();"
    },
    {
        "line": 7,
        "fullcodeline": "list_for_each_entry_rcu(pos, &tpm_chip_list, list) {"
    },
    {
        "line": 14,
        "fullcodeline": "rcu_read_unlock();"
    },
    {
        "line": 25,
        "fullcodeline": "chip->data_buffer = kmalloc(TPM_BUFSIZE * sizeof(u8), GFP_KERNEL);"
    },
    {
        "line": 32,
        "fullcodeline": "atomic_set(&chip->data_pending, 0);"
    },
    {
        "line": 34,
        "fullcodeline": "file->private_data = chip;"
    },
    {
        "line": 16,
        "fullcodeline": "if (!chip)"
    },
    {
        "line": 19,
        "fullcodeline": "if (test_and_set_bit(0, &chip->is_open)) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (chip->data_buffer == NULL) {"
    },
    {
        "line": 8,
        "fullcodeline": "if (pos->vendor.miscdev.minor == minor) {"
    },
    {
        "line": 20,
        "fullcodeline": "dev_dbg(chip->dev, \"Another process owns this TPM\\n\");"
    },
    {
        "line": 21,
        "fullcodeline": "put_device(chip->dev);"
    },
    {
        "line": 27,
        "fullcodeline": "clear_bit(0, &chip->is_open);"
    },
    {
        "line": 28,
        "fullcodeline": "put_device(chip->dev);"
    },
    {
        "line": 9,
        "fullcodeline": "chip = pos;"
    },
    {
        "line": 10,
        "fullcodeline": "get_device(chip->dev);"
    },
    {
        "line": 17,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 22,
        "fullcodeline": "return -EBUSY;"
    },
    {
        "line": 29,
        "fullcodeline": "return -ENOMEM;"
    }
]