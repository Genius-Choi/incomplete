[
    {
        "line": 6,
        "fullcodeline": "assert(m != NULL);"
    },
    {
        "line": 7,
        "fullcodeline": "assert(variable != NULL);"
    },
    {
        "line": 9,
        "fullcodeline": "len = strlen(variable);"
    },
    {
        "line": 11,
        "fullcodeline": "for(i = 0; i < m->numberOfArguments; i++) {"
    },
    {
        "line": 14,
        "fullcodeline": "ptr = messageGetArgument(m, i);"
    },
    {
        "line": 15,
        "fullcodeline": "if((ptr == NULL) || (*ptr == '\\0'))"
    },
    {
        "line": 21,
        "fullcodeline": "if(strncasecmp(ptr, variable, len) == 0) {"
    },
    {
        "line": 22,
        "fullcodeline": "ptr = &ptr[len];"
    },
    {
        "line": 23,
        "fullcodeline": "while(isspace(*ptr))"
    },
    {
        "line": 24,
        "fullcodeline": "ptr++;"
    },
    {
        "line": 25,
        "fullcodeline": "if(*ptr != '=') {"
    },
    {
        "line": 52,
        "fullcodeline": "return cli_strdup(ptr);"
    },
    {
        "line": 26,
        "fullcodeline": "cli_dbgmsg(\"messageFindArgument: no '=' sign found in MIME header '%s' (%s)\\n\", variable, messageGetArgument(m, i));"
    },
    {
        "line": 29,
        "fullcodeline": "if((*++ptr == '\"') && (strchr(&ptr[1], '\"') != NULL)) {"
    },
    {
        "line": 31,
        "fullcodeline": "char *ret = cli_strdup(++ptr);"
    },
    {
        "line": 34,
        "fullcodeline": "if(ret == NULL)"
    },
    {
        "line": 46,
        "fullcodeline": "if((p = strchr(ret, '\"')) != NULL) {"
    },
    {
        "line": 47,
        "fullcodeline": "ret[strlen(ret) - 1] = '\\0';"
    }
]