[
    {
        "line": 3,
        "fullcodeline": "int is_bundle = 0, is_local;"
    },
    {
        "line": 4,
        "fullcodeline": "int reject_shallow = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "char *path = NULL, *dir, *display_repo = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "int dest_exists, real_dest_exists = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "struct ref *remote_head_points_at = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "char *unborn_head = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "struct ref *mapped_refs = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "struct strbuf key = STRBUF_INIT;"
    },
    {
        "line": 15,
        "fullcodeline": "struct strbuf branch_top = STRBUF_INIT, reflog_msg = STRBUF_INIT;"
    },
    {
        "line": 16,
        "fullcodeline": "struct transport *transport = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "const char *src_ref_prefix = \"refs/heads/\";"
    },
    {
        "line": 19,
        "fullcodeline": "int err = 0, complete_refs_before_fetch = 1;"
    },
    {
        "line": 21,
        "fullcodeline": "int filter_submodules = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "struct transport_ls_refs_options transport_ls_refs_options ="
    },
    {
        "line": 26,
        "fullcodeline": "packet_trace_identity(\"clone\");"
    },
    {
        "line": 28,
        "fullcodeline": "git_config(git_clone_config, NULL);"
    },
    {
        "line": 30,
        "fullcodeline": "argc = parse_options(argc, argv, prefix, builtin_clone_options,"
    },
    {
        "line": 58,
        "fullcodeline": "repo_name = argv[0];"
    },
    {
        "line": 60,
        "fullcodeline": "path = get_repo_path(repo_name, &is_bundle);"
    },
    {
        "line": 78,
        "fullcodeline": "strip_dir_trailing_slashes(dir);"
    },
    {
        "line": 80,
        "fullcodeline": "dest_exists = path_exists(dir);"
    },
    {
        "line": 93,
        "fullcodeline": "strbuf_addf(&reflog_msg, \"clone: from %s\","
    },
    {
        "line": 95,
        "fullcodeline": "free(display_repo);"
    },
    {
        "line": 112,
        "fullcodeline": "atexit(remove_junk);"
    },
    {
        "line": 113,
        "fullcodeline": "sigchain_push_common(remove_junk_on_signal);"
    },
    {
        "line": 188,
        "fullcodeline": "init_db(git_dir, real_git_dir, option_template, GIT_HASH_UNKNOWN, NULL,"
    },
    {
        "line": 200,
        "fullcodeline": "write_config(&option_config);"
    },
    {
        "line": 206,
        "fullcodeline": "git_config(git_clone_config, NULL);"
    },
    {
        "line": 263,
        "fullcodeline": "strbuf_addf(&key, \"remote.%s.url\", remote_name);"
    },
    {
        "line": 264,
        "fullcodeline": "git_config_set(key.buf, repo);"
    },
    {
        "line": 265,
        "fullcodeline": "strbuf_reset(&key);"
    },
    {
        "line": 279,
        "fullcodeline": "remote = remote_get(remote_name);"
    },
    {
        "line": 281,
        "fullcodeline": "refspec_appendf(&remote->fetch, \"+%s*:%s*\", src_ref_prefix,"
    },
    {
        "line": 284,
        "fullcodeline": "transport = transport_get(remote, remote->url[0]);"
    },
    {
        "line": 285,
        "fullcodeline": "transport_set_verbosity(transport, option_verbosity, option_progress);"
    },
    {
        "line": 286,
        "fullcodeline": "transport->family = family;"
    },
    {
        "line": 288,
        "fullcodeline": "path = get_repo_path(remote->url[0], &is_bundle);"
    },
    {
        "line": 289,
        "fullcodeline": "is_local = option_local != 0 && path && !is_bundle;"
    },
    {
        "line": 309,
        "fullcodeline": "transport->cloning = 1;"
    },
    {
        "line": 323,
        "fullcodeline": "transport_set_option(transport, TRANS_OPT_KEEP, \"yes\");"
    },
    {
        "line": 370,
        "fullcodeline": "strvec_push(&transport_ls_refs_options.ref_prefixes, \"HEAD\");"
    },
    {
        "line": 371,
        "fullcodeline": "refspec_ref_prefixes(&remote->fetch,"
    },
    {
        "line": 380,
        "fullcodeline": "refs = transport_get_remote_refs(transport, &transport_ls_refs_options);"
    },
    {
        "line": 437,
        "fullcodeline": "remote_head = find_ref_by_name(refs, \"HEAD\");"
    },
    {
        "line": 438,
        "fullcodeline": "remote_head_points_at = guess_remote_head(remote_head, mapped_refs, 0);"
    },
    {
        "line": 480,
        "fullcodeline": "write_refspec_config(src_ref_prefix, our_head_points_at,"
    },
    {
        "line": 493,
        "fullcodeline": "update_remote_refs(refs, mapped_refs, remote_head_points_at,"
    },
    {
        "line": 497,
        "fullcodeline": "update_head(our_head_points_at, remote_head, unborn_head, reflog_msg.buf);"
    },
    {
        "line": 505,
        "fullcodeline": "submodule_progress = transport->progress;"
    },
    {
        "line": 507,
        "fullcodeline": "transport_unlock_pack(transport, 0);"
    },
    {
        "line": 515,
        "fullcodeline": "junk_mode = JUNK_LEAVE_REPO;"
    },
    {
        "line": 516,
        "fullcodeline": "err = checkout(submodule_progress, filter_submodules);"
    },
    {
        "line": 528,
        "fullcodeline": "junk_mode = JUNK_LEAVE_ALL;"
    },
    {
        "line": 33,
        "fullcodeline": "if (argc > 2)"
    },
    {
        "line": 37,
        "fullcodeline": "if (argc == 0)"
    },
    {
        "line": 41,
        "fullcodeline": "if (option_depth || option_since || option_not.nr)"
    },
    {
        "line": 43,
        "fullcodeline": "if (option_single_branch == -1)"
    },
    {
        "line": 55,
        "fullcodeline": "if (bundle_uri && deepen)"
    },
    {
        "line": 71,
        "fullcodeline": "if (option_depth && atoi(option_depth) < 1)"
    },
    {
        "line": 74,
        "fullcodeline": "if (argc == 2)"
    },
    {
        "line": 81,
        "fullcodeline": "if (dest_exists && !is_empty_dir(dir))"
    },
    {
        "line": 105,
        "fullcodeline": "if (option_bare || work_tree)"
    },
    {
        "line": 115,
        "fullcodeline": "if (!option_bare) {"
    },
    {
        "line": 137,
        "fullcodeline": "if (safe_create_leading_directories_const(git_dir) < 0)"
    },
    {
        "line": 140,
        "fullcodeline": "if (0 <= option_verbosity) {"
    },
    {
        "line": 147,
        "fullcodeline": "if (option_recurse_submodules.nr > 0) {"
    },
    {
        "line": 212,
        "fullcodeline": "if (config_reject_shallow != -1)"
    },
    {
        "line": 214,
        "fullcodeline": "if (option_reject_shallow != -1)"
    },
    {
        "line": 221,
        "fullcodeline": "if (config_filter_submodules != -1)"
    },
    {
        "line": 223,
        "fullcodeline": "if (option_filter_submodules != -1)"
    },
    {
        "line": 231,
        "fullcodeline": "if (option_filter_submodules > 0 && !filter_options.choice)"
    },
    {
        "line": 234,
        "fullcodeline": "if (option_filter_submodules > 0 && !option_recurse_submodules.nr)"
    },
    {
        "line": 247,
        "fullcodeline": "if (!remote_name)"
    },
    {
        "line": 250,
        "fullcodeline": "if (!valid_remote_name(remote_name))"
    },
    {
        "line": 273,
        "fullcodeline": "if (option_required_reference.nr || option_optional_reference.nr)"
    },
    {
        "line": 276,
        "fullcodeline": "if (option_sparse_checkout && git_sparse_checkout_init(dir))"
    },
    {
        "line": 376,
        "fullcodeline": "if (!option_no_tags)"
    },
    {
        "line": 495,
        "fullcodeline": "!is_local);"
    },
    {
        "line": 34,
        "fullcodeline": "usage_msg_opt(_(\"Too many arguments.\"),"
    },
    {
        "line": 38,
        "fullcodeline": "usage_msg_opt(_(\"You must specify a repository to clone.\"),"
    },
    {
        "line": 42,
        "fullcodeline": "deepen = 1;"
    },
    {
        "line": 44,
        "fullcodeline": "option_single_branch = deepen ? 1 : 0;"
    },
    {
        "line": 47,
        "fullcodeline": "option_bare = 1;"
    },
    {
        "line": 52,
        "fullcodeline": "option_no_checkout = 1;"
    },
    {
        "line": 56,
        "fullcodeline": "die(_(\"--bundle-uri is incompatible with --depth, --shallow-since, and --shallow-exclude\"));"
    },
    {
        "line": 62,
        "fullcodeline": "FREE_AND_NULL(path);"
    },
    {
        "line": 63,
        "fullcodeline": "repo = absolute_pathdup(repo_name);"
    },
    {
        "line": 72,
        "fullcodeline": "die(_(\"depth %s is not a positive number\"), option_depth);"
    },
    {
        "line": 75,
        "fullcodeline": "dir = xstrdup(argv[1]);"
    },
    {
        "line": 82,
        "fullcodeline": "die(_(\"destination path '%s' already exists and is not \""
    },
    {
        "line": 86,
        "fullcodeline": "real_dest_exists = path_exists(real_git_dir);"
    },
    {
        "line": 98,
        "fullcodeline": "work_tree = NULL;"
    },
    {
        "line": 106,
        "fullcodeline": "git_dir = xstrdup(dir);"
    },
    {
        "line": 124,
        "fullcodeline": "junk_work_tree = work_tree;"
    },
    {
        "line": 125,
        "fullcodeline": "set_git_work_tree(work_tree);"
    },
    {
        "line": 131,
        "fullcodeline": "junk_git_dir = real_git_dir;"
    },
    {
        "line": 138,
        "fullcodeline": "die(_(\"could not create leading directories of '%s'\"), git_dir);"
    },
    {
        "line": 149,
        "fullcodeline": "struct strbuf sb = STRBUF_INIT;"
    },
    {
        "line": 153,
        "fullcodeline": "string_list_sort(&option_recurse_submodules);"
    },
    {
        "line": 154,
        "fullcodeline": "string_list_remove_duplicates(&option_recurse_submodules, 0);"
    },
    {
        "line": 160,
        "fullcodeline": "for_each_string_list_item(item, &option_recurse_submodules) {"
    },
    {
        "line": 192,
        "fullcodeline": "free((char *)git_dir);"
    },
    {
        "line": 193,
        "fullcodeline": "git_dir = real_git_dir;"
    },
    {
        "line": 213,
        "fullcodeline": "reject_shallow = config_reject_shallow;"
    },
    {
        "line": 215,
        "fullcodeline": "reject_shallow = option_reject_shallow;"
    },
    {
        "line": 222,
        "fullcodeline": "filter_submodules = config_filter_submodules;"
    },
    {
        "line": 224,
        "fullcodeline": "filter_submodules = option_filter_submodules;"
    },
    {
        "line": 232,
        "fullcodeline": "die(_(\"the option '%s' requires '%s'\"),"
    },
    {
        "line": 235,
        "fullcodeline": "die(_(\"the option '%s' requires '%s'\"),"
    },
    {
        "line": 244,
        "fullcodeline": "remote_name = xstrdup(option_origin);"
    },
    {
        "line": 248,
        "fullcodeline": "remote_name = xstrdup(\"origin\");"
    },
    {
        "line": 251,
        "fullcodeline": "die(_(\"'%s' is not a valid remote name\"), remote_name);"
    },
    {
        "line": 256,
        "fullcodeline": "strbuf_addstr(&branch_top, src_ref_prefix);"
    },
    {
        "line": 258,
        "fullcodeline": "git_config_set(\"core.bare\", \"true\");"
    },
    {
        "line": 268,
        "fullcodeline": "strbuf_addf(&key, \"remote.%s.tagOpt\", remote_name);"
    },
    {
        "line": 269,
        "fullcodeline": "git_config_set(key.buf, \"--no-tags\");"
    },
    {
        "line": 270,
        "fullcodeline": "strbuf_reset(&key);"
    },
    {
        "line": 274,
        "fullcodeline": "setup_reference();"
    },
    {
        "line": 307,
        "fullcodeline": "if (option_local > 0 && !is_local)"
    },
    {
        "line": 312,
        "fullcodeline": "struct bundle_header header = BUNDLE_HEADER_INIT;"
    },
    {
        "line": 313,
        "fullcodeline": "int fd = read_bundle_header(path, &header);"
    },
    {
        "line": 326,
        "fullcodeline": "transport_set_option(transport, TRANS_OPT_REJECT_SHALLOW, \"1\");"
    },
    {
        "line": 328,
        "fullcodeline": "transport_set_option(transport, TRANS_OPT_DEPTH,"
    },
    {
        "line": 331,
        "fullcodeline": "transport_set_option(transport, TRANS_OPT_DEEPEN_SINCE,"
    },
    {
        "line": 334,
        "fullcodeline": "transport_set_option(transport, TRANS_OPT_DEEPEN_NOT,"
    },
    {
        "line": 337,
        "fullcodeline": "transport_set_option(transport, TRANS_OPT_FOLLOWTAGS, \"1\");"
    },
    {
        "line": 340,
        "fullcodeline": "transport_set_option(transport, TRANS_OPT_UPLOADPACK,"
    },
    {
        "line": 344,
        "fullcodeline": "transport->server_options = &server_options;"
    },
    {
        "line": 347,
        "fullcodeline": "const char *spec ="
    },
    {
        "line": 349,
        "fullcodeline": "transport_set_option(transport, TRANS_OPT_LIST_OBJECTS_FILTER,"
    },
    {
        "line": 351,
        "fullcodeline": "transport_set_option(transport, TRANS_OPT_FROM_PROMISOR, \"1\");"
    },
    {
        "line": 354,
        "fullcodeline": "if (transport->smart_options && !deepen && !filter_options.choice)"
    },
    {
        "line": 374,
        "fullcodeline": "expand_ref_prefix(&transport_ls_refs_options.ref_prefixes,"
    },
    {
        "line": 383,
        "fullcodeline": "mapped_refs = wanted_peer_refs(refs, &remote->fetch);"
    },
    {
        "line": 390,
        "fullcodeline": "transport_get_remote_bundle_uri(transport);"
    },
    {
        "line": 407,
        "fullcodeline": "int hash_algo = hash_algo_by_ptr(transport_get_hash_algo(transport));"
    },
    {
        "line": 413,
        "fullcodeline": "initialize_repository_version(hash_algo, 1);"
    },
    {
        "line": 414,
        "fullcodeline": "repo_set_hash_algo(the_repository, hash_algo);"
    },
    {
        "line": 441,
        "fullcodeline": "our_head_points_at = find_remote_branch(mapped_refs, option_branch);"
    },
    {
        "line": 484,
        "fullcodeline": "partial_clone_register(remote_name, &filter_options);"
    },
    {
        "line": 487,
        "fullcodeline": "clone_local(path, git_dir);"
    },
    {
        "line": 77,
        "fullcodeline": "dir = git_url_basename(repo_name, is_bundle, option_bare);"
    },
    {
        "line": 87,
        "fullcodeline": "if (real_dest_exists && !is_empty_dir(real_git_dir))"
    },
    {
        "line": 100,
        "fullcodeline": "work_tree = getenv(\"GIT_WORK_TREE\");"
    },
    {
        "line": 108,
        "fullcodeline": "work_tree = dir;"
    },
    {
        "line": 109,
        "fullcodeline": "git_dir = mkpathdup(\"%s/.git\", dir);"
    },
    {
        "line": 116,
        "fullcodeline": "if (safe_create_leading_directories_const(work_tree) < 0)"
    },
    {
        "line": 135,
        "fullcodeline": "junk_git_dir = git_dir;"
    },
    {
        "line": 161,
        "fullcodeline": "strbuf_addf(&sb, \"submodule.active=%s\","
    },
    {
        "line": 163,
        "fullcodeline": "string_list_append(&option_config,"
    },
    {
        "line": 167,
        "fullcodeline": "if (!git_config_get_bool(\"submodule.stickyRecursiveClone\", &val) &&"
    },
    {
        "line": 171,
        "fullcodeline": "if (option_required_reference.nr &&"
    },
    {
        "line": 260,
        "fullcodeline": "strbuf_addf(&branch_top, \"refs/remotes/%s/\", remote_name);"
    },
    {
        "line": 308,
        "fullcodeline": "warning(_(\"--local is ignored\"));"
    },
    {
        "line": 314,
        "fullcodeline": "int has_filter = header.filter.choice != LOFC_DISABLED;"
    },
    {
        "line": 316,
        "fullcodeline": "if (fd > 0)"
    },
    {
        "line": 348,
        "fullcodeline": "expand_list_objects_filter_spec(&filter_options);"
    },
    {
        "line": 363,
        "fullcodeline": "if (repo_init(the_repository, git_dir, work_tree))"
    },
    {
        "line": 392,
        "fullcodeline": "if (transport->bundles &&"
    },
    {
        "line": 425,
        "fullcodeline": "for (ref = refs; ref; ref = ref->next)"
    },
    {
        "line": 442,
        "fullcodeline": "if (!our_head_points_at)"
    },
    {
        "line": 51,
        "fullcodeline": "die(_(\"options '%s' and '%s' cannot be used together\"), \"--bare\", \"--separate-git-dir\");"
    },
    {
        "line": 64,
        "fullcodeline": "} else if (strchr(repo_name, ':')) {"
    },
    {
        "line": 88,
        "fullcodeline": "die(_(\"repository path '%s' already exists and is not \""
    },
    {
        "line": 101,
        "fullcodeline": "if (work_tree && path_exists(work_tree))"
    },
    {
        "line": 117,
        "fullcodeline": "die_errno(_(\"could not create leading directories of '%s'\"),"
    },
    {
        "line": 120,
        "fullcodeline": "junk_work_tree_flags |= REMOVE_DIR_KEEP_TOPLEVEL;"
    },
    {
        "line": 130,
        "fullcodeline": "junk_git_dir_flags |= REMOVE_DIR_KEEP_TOPLEVEL;"
    },
    {
        "line": 142,
        "fullcodeline": "fprintf(stderr, _(\"Cloning into bare repository '%s'...\\n\"), dir);"
    },
    {
        "line": 164,
        "fullcodeline": "strbuf_detach(&sb, NULL));"
    },
    {
        "line": 169,
        "fullcodeline": "string_list_append(&option_config, \"submodule.recurse=true\");"
    },
    {
        "line": 173,
        "fullcodeline": "die(_(\"clone --recursive is not compatible with \""
    },
    {
        "line": 255,
        "fullcodeline": "src_ref_prefix = \"refs/\";"
    },
    {
        "line": 299,
        "fullcodeline": "if (!access(mkpath(\"%s/shallow\", path), F_OK)) {"
    },
    {
        "line": 304,
        "fullcodeline": "is_local = 0;"
    },
    {
        "line": 393,
        "fullcodeline": "hashmap_get_size(&transport->bundles->bundles)) {"
    },
    {
        "line": 431,
        "fullcodeline": "if (!is_local && !complete_refs_before_fetch) {"
    },
    {
        "line": 443,
        "fullcodeline": "die(_(\"Remote branch %s not found in upstream %s\"),"
    },
    {
        "line": 488,
        "fullcodeline": "else if (mapped_refs && complete_refs_before_fetch) {"
    },
    {
        "line": 65,
        "fullcodeline": "repo = repo_name;"
    },
    {
        "line": 66,
        "fullcodeline": "display_repo = transport_anonymize_url(repo);"
    },
    {
        "line": 102,
        "fullcodeline": "die(_(\"working tree '%s' already exists.\"), work_tree);"
    },
    {
        "line": 134,
        "fullcodeline": "junk_git_dir_flags |= REMOVE_DIR_KEEP_TOPLEVEL;"
    },
    {
        "line": 144,
        "fullcodeline": "fprintf(stderr, _(\"Cloning into '%s'...\\n\"), dir);"
    },
    {
        "line": 292,
        "fullcodeline": "warning(_(\"--depth is ignored in local clones; use file:// instead.\"));"
    },
    {
        "line": 294,
        "fullcodeline": "warning(_(\"--shallow-since is ignored in local clones; use file:// instead.\"));"
    },
    {
        "line": 296,
        "fullcodeline": "warning(_(\"--shallow-exclude is ignored in local clones; use file:// instead.\"));"
    },
    {
        "line": 298,
        "fullcodeline": "warning(_(\"--filter is ignored in local clones; use file:// instead.\"));"
    },
    {
        "line": 302,
        "fullcodeline": "if (option_local > 0)"
    },
    {
        "line": 320,
        "fullcodeline": "die(_(\"cannot clone from filtered bundle\"));"
    },
    {
        "line": 364,
        "fullcodeline": "warning(_(\"failed to initialize the repo, skipping bundle URI\"));"
    },
    {
        "line": 395,
        "fullcodeline": "if (repo_init(the_repository, git_dir, work_tree))"
    },
    {
        "line": 401,
        "fullcodeline": "clear_bundle_list(transport->bundles);"
    },
    {
        "line": 402,
        "fullcodeline": "FREE_AND_NULL(transport->bundles);"
    },
    {
        "line": 427,
        "fullcodeline": "complete_refs_before_fetch = 0;"
    },
    {
        "line": 432,
        "fullcodeline": "if (transport_fetch_refs(transport, mapped_refs))"
    },
    {
        "line": 446,
        "fullcodeline": "our_head_points_at = remote_head_points_at;"
    },
    {
        "line": 68,
        "fullcodeline": "die(_(\"repository '%s' does not exist\"), repo_name);"
    },
    {
        "line": 121,
        "fullcodeline": "else if (mkdir(work_tree, 0777))"
    },
    {
        "line": 365,
        "fullcodeline": "else if (fetch_bundle_uri(the_repository, bundle_uri))"
    },
    {
        "line": 489,
        "fullcodeline": "if (transport_fetch_refs(transport, mapped_refs))"
    },
    {
        "line": 122,
        "fullcodeline": "die_errno(_(\"could not create work tree dir '%s'\"),"
    },
    {
        "line": 176,
        "fullcodeline": "string_list_append(&option_config,"
    },
    {
        "line": 178,
        "fullcodeline": "string_list_append(&option_config,"
    },
    {
        "line": 301,
        "fullcodeline": "die(_(\"source repository is shallow, reject to clone.\"));"
    },
    {
        "line": 303,
        "fullcodeline": "warning(_(\"source repository is shallow, ignoring --local\"));"
    },
    {
        "line": 366,
        "fullcodeline": "warning(_(\"failed to fetch objects from bundle URI '%s'\"),"
    },
    {
        "line": 396,
        "fullcodeline": "warning(_(\"failed to initialize the repo, skipping bundle URI\"));"
    },
    {
        "line": 433,
        "fullcodeline": "die(_(\"remote transport reported error\"));"
    },
    {
        "line": 397,
        "fullcodeline": "else if (fetch_bundle_list(the_repository,"
    },
    {
        "line": 448,
        "fullcodeline": "our_head_points_at = NULL;"
    },
    {
        "line": 490,
        "fullcodeline": "die(_(\"remote transport reported error\"));"
    },
    {
        "line": 477,
        "fullcodeline": "our_head_points_at = find_remote_branch(mapped_refs, branch);"
    },
    {
        "line": 181,
        "fullcodeline": "string_list_append(&option_config,"
    },
    {
        "line": 183,
        "fullcodeline": "string_list_append(&option_config,"
    },
    {
        "line": 399,
        "fullcodeline": "warning(_(\"failed to fetch advertised bundles\"));"
    },
    {
        "line": 452,
        "fullcodeline": "if (!mapped_refs) {"
    },
    {
        "line": 457,
        "fullcodeline": "if (transport_ls_refs_options.unborn_head_target &&"
    },
    {
        "line": 458,
        "fullcodeline": "skip_prefix(transport_ls_refs_options.unborn_head_target,"
    },
    {
        "line": 460,
        "fullcodeline": "unborn_head  = xstrdup(transport_ls_refs_options.unborn_head_target);"
    },
    {
        "line": 453,
        "fullcodeline": "warning(_(\"You appear to have cloned an empty repository.\"));"
    },
    {
        "line": 462,
        "fullcodeline": "branch = git_default_branch_name(0);"
    },
    {
        "line": 463,
        "fullcodeline": "unborn_head = xstrfmt(\"refs/heads/%s\", branch);"
    }
]