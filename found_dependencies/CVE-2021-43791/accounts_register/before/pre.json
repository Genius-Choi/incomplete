[
    {
        "line": 16,
        "fullcodeline": "prereg_user = confirmation.content_object"
    },
    {
        "line": 20,
        "fullcodeline": "email = prereg_user.email"
    },
    {
        "line": 21,
        "fullcodeline": "realm_creation = prereg_user.realm_creation"
    },
    {
        "line": 22,
        "fullcodeline": "password_required = prereg_user.password_required"
    },
    {
        "line": 24,
        "fullcodeline": "role = prereg_user.invited_as"
    },
    {
        "line": 79,
        "fullcodeline": "name_validated = False"
    },
    {
        "line": 80,
        "fullcodeline": "require_ldap_password = False"
    },
    {
        "line": 17,
        "fullcodeline": "assert prereg_user is not None"
    },
    {
        "line": 18,
        "fullcodeline": "if prereg_user.status == confirmation_settings.STATUS_REVOKED:"
    },
    {
        "line": 181,
        "fullcodeline": "if form.is_valid():"
    },
    {
        "line": 345,
        "fullcodeline": "return render("
    },
    {
        "line": 12,
        "fullcodeline": "confirmation = Confirmation.objects.get(confirmation_key=key)"
    },
    {
        "line": 26,
        "fullcodeline": "role = UserProfile.ROLE_REALM_OWNER"
    },
    {
        "line": 29,
        "fullcodeline": "validators.validate_email(email)"
    },
    {
        "line": 35,
        "fullcodeline": "realm = None"
    },
    {
        "line": 41,
        "fullcodeline": "realm = prereg_user.realm"
    },
    {
        "line": 88,
        "fullcodeline": "ldap_full_name = None"
    },
    {
        "line": 166,
        "fullcodeline": "postdata = request.POST.copy()"
    },
    {
        "line": 176,
        "fullcodeline": "form = RegistrationForm(postdata, realm_creation=realm_creation)"
    },
    {
        "line": 178,
        "fullcodeline": "if not (password_auth_enabled(realm) and password_required):"
    },
    {
        "line": 203,
        "fullcodeline": "full_name = form.cleaned_data[\"full_name\"]"
    },
    {
        "line": 204,
        "fullcodeline": "enable_marketing_emails = form.cleaned_data[\"enable_marketing_emails\"]"
    },
    {
        "line": 205,
        "fullcodeline": "default_stream_group_names = request.POST.getlist(\"default_stream_group\")"
    },
    {
        "line": 206,
        "fullcodeline": "default_stream_groups = lookup_default_stream_groups(default_stream_group_names, realm)"
    },
    {
        "line": 225,
        "fullcodeline": "user_profile: Optional[UserProfile] = None"
    },
    {
        "line": 226,
        "fullcodeline": "return_data: Dict[str, bool] = {}"
    },
    {
        "line": 328,
        "fullcodeline": "auth_result = authenticate("
    },
    {
        "line": 19,
        "fullcodeline": "return render(request, \"zerver/confirmation_link_expired_error.html\", status=404)"
    },
    {
        "line": 37,
        "fullcodeline": "if get_subdomain(request) != prereg_user.realm.string_id:"
    },
    {
        "line": 167,
        "fullcodeline": "if name_changes_disabled(realm):"
    },
    {
        "line": 201,
        "fullcodeline": "assert realm is not None"
    },
    {
        "line": 208,
        "fullcodeline": "if source_realm_id is not None:"
    },
    {
        "line": 215,
        "fullcodeline": "if not realm_creation:"
    },
    {
        "line": 227,
        "fullcodeline": "if ldap_auth_enabled(realm):"
    },
    {
        "line": 287,
        "fullcodeline": "if existing_user_profile is not None and existing_user_profile.is_mirror_dummy:"
    },
    {
        "line": 296,
        "fullcodeline": "if user_profile is None:"
    },
    {
        "line": 343,
        "fullcodeline": "return login_and_go_to_home(request, auth_result)"
    },
    {
        "line": 348,
        "fullcodeline": "context={"
    },
    {
        "line": 43,
        "fullcodeline": "email_allowed_for_realm(email, realm)"
    },
    {
        "line": 69,
        "fullcodeline": "validate_email_not_already_in_realm(realm, email)"
    },
    {
        "line": 84,
        "fullcodeline": "del request.session[\"authenticated_full_name\"]"
    },
    {
        "line": 133,
        "fullcodeline": "form = RegistrationForm({\"full_name\": ldap_full_name}, realm_creation=realm_creation)"
    },
    {
        "line": 134,
        "fullcodeline": "request.session[\"authenticated_full_name\"] = ldap_full_name"
    },
    {
        "line": 135,
        "fullcodeline": "name_validated = True"
    },
    {
        "line": 182,
        "fullcodeline": "if password_auth_enabled(realm) and form[\"password\"].field.required:"
    },
    {
        "line": 183,
        "fullcodeline": "password = form.cleaned_data[\"password\"]"
    },
    {
        "line": 190,
        "fullcodeline": "password = None"
    },
    {
        "line": 193,
        "fullcodeline": "string_id = form.cleaned_data[\"realm_subdomain\"]"
    },
    {
        "line": 194,
        "fullcodeline": "realm_name = form.cleaned_data[\"realm_name\"]"
    },
    {
        "line": 195,
        "fullcodeline": "realm_type = form.cleaned_data[\"realm_type\"]"
    },
    {
        "line": 196,
        "fullcodeline": "is_demo_org = form.cleaned_data[\"is_demo_organization\"]"
    },
    {
        "line": 197,
        "fullcodeline": "realm = do_create_realm("
    },
    {
        "line": 200,
        "fullcodeline": "setup_realm_internal_bots(realm)"
    },
    {
        "line": 211,
        "fullcodeline": "source_profile: Optional[UserProfile] = get_source_profile(email, source_realm_id)"
    },
    {
        "line": 213,
        "fullcodeline": "source_profile = None"
    },
    {
        "line": 223,
        "fullcodeline": "existing_user_profile = None"
    },
    {
        "line": 243,
        "fullcodeline": "user_profile = authenticate("
    },
    {
        "line": 288,
        "fullcodeline": "user_profile = existing_user_profile"
    },
    {
        "line": 289,
        "fullcodeline": "do_activate_mirror_dummy_user(user_profile, acting_user=user_profile)"
    },
    {
        "line": 290,
        "fullcodeline": "do_change_password(user_profile, password)"
    },
    {
        "line": 291,
        "fullcodeline": "do_change_full_name(user_profile, full_name, user_profile)"
    },
    {
        "line": 292,
        "fullcodeline": "do_change_user_setting(user_profile, \"timezone\", timezone, acting_user=user_profile)"
    },
    {
        "line": 297,
        "fullcodeline": "user_profile = do_create_user("
    },
    {
        "line": 314,
        "fullcodeline": "bulk_add_subscriptions("
    },
    {
        "line": 353,
        "fullcodeline": "\"lock_name\": name_validated and name_changes_disabled(realm),"
    },
    {
        "line": 358,
        "fullcodeline": "\"password_required\": password_auth_enabled(realm) and password_required,"
    },
    {
        "line": 360,
        "fullcodeline": "\"password_auth_enabled\": password_auth_enabled(realm),"
    },
    {
        "line": 363,
        "fullcodeline": "\"accounts\": get_accounts_for_email(email),"
    },
    {
        "line": 364,
        "fullcodeline": "\"MAX_REALM_NAME_LENGTH\": str(Realm.MAX_REALM_NAME_LENGTH),"
    },
    {
        "line": 365,
        "fullcodeline": "\"MAX_NAME_LENGTH\": str(UserProfile.MAX_NAME_LENGTH),"
    },
    {
        "line": 366,
        "fullcodeline": "\"MAX_PASSWORD_LENGTH\": str(form.MAX_PASSWORD_LENGTH),"
    },
    {
        "line": 367,
        "fullcodeline": "\"MAX_REALM_SUBDOMAIN_LENGTH\": str(Realm.MAX_REALM_SUBDOMAIN_LENGTH),"
    },
    {
        "line": 368,
        "fullcodeline": "\"sorted_realm_types\": sorted("
    },
    {
        "line": 14,
        "fullcodeline": "return render(request, \"zerver/confirmation_link_expired_error.html\", status=404)"
    },
    {
        "line": 31,
        "fullcodeline": "return render(request, \"zerver/invalid_email.html\", context={\"invalid_email\": True})"
    },
    {
        "line": 38,
        "fullcodeline": "return render_confirmation_key_error("
    },
    {
        "line": 66,
        "fullcodeline": "return redirect_to_deactivation_notice()"
    },
    {
        "line": 92,
        "fullcodeline": "for backend in get_backends():"
    },
    {
        "line": 136,
        "fullcodeline": "elif realm is not None and realm.is_zephyr_mirror_realm:"
    },
    {
        "line": 251,
        "fullcodeline": "if user_profile is None:"
    },
    {
        "line": 315,
        "fullcodeline": "realm, [realm.signup_notifications_stream], [user_profile], acting_user=None"
    },
    {
        "line": 322,
        "fullcodeline": "return redirect_and_log_into_subdomain("
    },
    {
        "line": 341,
        "fullcodeline": "return redirect(\"/\")"
    },
    {
        "line": 352,
        "fullcodeline": "\"full_name\": request.session.get(\"authenticated_full_name\", None),"
    },
    {
        "line": 362,
        "fullcodeline": "\"default_stream_groups\": [] if realm is None else get_default_stream_groups(realm),"
    },
    {
        "line": 39,
        "fullcodeline": "request, ConfirmationKeyException(ConfirmationKeyException.DOES_NOT_EXIST)"
    },
    {
        "line": 75,
        "fullcodeline": "check_spare_licenses_available_for_registering_new_user(realm, email)"
    },
    {
        "line": 141,
        "fullcodeline": "hesiod_name = compute_mit_user_fullname(email)"
    },
    {
        "line": 142,
        "fullcodeline": "form = RegistrationForm("
    },
    {
        "line": 146,
        "fullcodeline": "name_validated = True"
    },
    {
        "line": 172,
        "fullcodeline": "postdata.update(full_name=request.session[\"authenticated_full_name\"])"
    },
    {
        "line": 173,
        "fullcodeline": "name_validated = True"
    },
    {
        "line": 217,
        "fullcodeline": "existing_user_profile: Optional[UserProfile] = get_user_by_delivery_email("
    },
    {
        "line": 252,
        "fullcodeline": "can_use_different_backend = email_auth_enabled(realm) or ("
    },
    {
        "line": 323,
        "fullcodeline": "ExternalAuthResult(user_profile=user_profile, data_dict={\"is_realm_creation\": True})"
    },
    {
        "line": 369,
        "fullcodeline": "Realm.ORG_TYPES.values(), key=lambda d: d[\"display_order\"]"
    },
    {
        "line": 45,
        "fullcodeline": "return render("
    },
    {
        "line": 51,
        "fullcodeline": "return render("
    },
    {
        "line": 57,
        "fullcodeline": "return render("
    },
    {
        "line": 71,
        "fullcodeline": "return redirect_to_email_login_url(email)"
    },
    {
        "line": 279,
        "fullcodeline": "elif not realm_creation:"
    },
    {
        "line": 93,
        "fullcodeline": "if isinstance(backend, LDAPBackend):"
    },
    {
        "line": 221,
        "fullcodeline": "existing_user_profile = None"
    },
    {
        "line": 253,
        "fullcodeline": "len(get_external_method_dicts(realm)) > 0"
    },
    {
        "line": 258,
        "fullcodeline": "can_use_different_backend = can_use_different_backend and ("
    },
    {
        "line": 261,
        "fullcodeline": "if return_data.get(\"no_matching_ldap_user\") and can_use_different_backend:"
    },
    {
        "line": 275,
        "fullcodeline": "view_url = reverse(\"login\")"
    },
    {
        "line": 276,
        "fullcodeline": "query = urlencode({\"email\": email})"
    },
    {
        "line": 277,
        "fullcodeline": "redirect_url = append_url_query_string(view_url, query)"
    },
    {
        "line": 48,
        "fullcodeline": "context={\"realm_name\": realm.name, \"closed_domain\": True},"
    },
    {
        "line": 54,
        "fullcodeline": "context={\"realm_name\": realm.name, \"disposable_emails_not_allowed\": True},"
    },
    {
        "line": 60,
        "fullcodeline": "context={\"realm_name\": realm.name, \"email_contains_plus\": True},"
    },
    {
        "line": 77,
        "fullcodeline": "return render(request, \"zerver/no_spare_licenses.html\")"
    },
    {
        "line": 112,
        "fullcodeline": "ldap_user = _LDAPUser(backend, ldap_username)"
    },
    {
        "line": 124,
        "fullcodeline": "require_ldap_password = isinstance(backend, ZulipLDAPAuthBackend)"
    },
    {
        "line": 143,
        "fullcodeline": "initial={\"full_name\": hesiod_name if \"@\" not in hesiod_name else \"\"},"
    },
    {
        "line": 158,
        "fullcodeline": "elif form_full_name is not None:"
    },
    {
        "line": 278,
        "fullcodeline": "return HttpResponseRedirect(redirect_url)"
    },
    {
        "line": 281,
        "fullcodeline": "return login_and_go_to_home(request, user_profile)"
    },
    {
        "line": 149,
        "fullcodeline": "request.session[\"authenticated_full_name\"] = prereg_user.full_name"
    },
    {
        "line": 150,
        "fullcodeline": "name_validated = True"
    },
    {
        "line": 151,
        "fullcodeline": "form = RegistrationForm("
    },
    {
        "line": 155,
        "fullcodeline": "form = RegistrationForm("
    },
    {
        "line": 159,
        "fullcodeline": "form = RegistrationForm("
    },
    {
        "line": 164,
        "fullcodeline": "form = RegistrationForm(realm_creation=realm_creation)"
    },
    {
        "line": 259,
        "fullcodeline": "not email_belongs_to_ldap(realm, email)"
    },
    {
        "line": 95,
        "fullcodeline": "ldap_username = backend.django_to_ldap_username(email)"
    },
    {
        "line": 115,
        "fullcodeline": "ldap_full_name = backend.get_mapped_name(ldap_user)"
    },
    {
        "line": 97,
        "fullcodeline": "logging.warning(\"New account email %s could not be found in LDAP\", email)"
    },
    {
        "line": 152,
        "fullcodeline": "{\"full_name\": prereg_user.full_name}, realm_creation=realm_creation"
    },
    {
        "line": 156,
        "fullcodeline": "initial={\"full_name\": prereg_user.full_name}, realm_creation=realm_creation"
    },
    {
        "line": 160,
        "fullcodeline": "initial={\"full_name\": form_full_name},"
    }
]