[
    {
        "line": 4,
        "fullcodeline": "enum task_disposition res = TASK_IS_DONE;"
    },
    {
        "line": 6,
        "fullcodeline": "struct sas_internal *i = to_sas_internal(shost->transportt);"
    },
    {
        "line": 8,
        "fullcodeline": "struct sas_ha_struct *ha = SHOST_TO_SAS_HA(shost);"
    },
    {
        "line": 9,
        "fullcodeline": "LIST_HEAD(done);"
    },
    {
        "line": 12,
        "fullcodeline": "list_for_each_entry_safe(cmd, n, work_q, eh_entry) {"
    },
    {
        "line": 29,
        "fullcodeline": "list_for_each_entry_safe(cmd, n, work_q, eh_entry) {"
    },
    {
        "line": 126,
        "fullcodeline": "list_splice_tail(&done, work_q);"
    },
    {
        "line": 127,
        "fullcodeline": "list_splice_tail_init(&ha->eh_ata_q, work_q);"
    },
    {
        "line": 131,
        "fullcodeline": "SAS_DPRINTK(\"--- Exit %s -- clear_q\\n\", __func__);"
    },
    {
        "line": 132,
        "fullcodeline": "list_for_each_entry_safe(cmd, n, work_q, eh_entry)"
    },
    {
        "line": 133,
        "fullcodeline": "sas_eh_finish_cmd(cmd);"
    },
    {
        "line": 13,
        "fullcodeline": "struct domain_device *dev = cmd_to_domain_dev(cmd);"
    },
    {
        "line": 16,
        "fullcodeline": "spin_lock_irqsave(&dev->done_lock, flags);"
    },
    {
        "line": 21,
        "fullcodeline": "task = TO_SAS_TASK(cmd);"
    },
    {
        "line": 22,
        "fullcodeline": "spin_unlock_irqrestore(&dev->done_lock, flags);"
    },
    {
        "line": 30,
        "fullcodeline": "struct sas_task *task = TO_SAS_TASK(cmd);"
    },
    {
        "line": 32,
        "fullcodeline": "list_del_init(&cmd->eh_entry);"
    },
    {
        "line": 34,
        "fullcodeline": "spin_lock_irqsave(&task->task_state_lock, flags);"
    },
    {
        "line": 35,
        "fullcodeline": "need_reset = task->task_state_flags & SAS_TASK_NEED_DEV_RESET;"
    },
    {
        "line": 36,
        "fullcodeline": "spin_unlock_irqrestore(&task->task_state_lock, flags);"
    },
    {
        "line": 44,
        "fullcodeline": "SAS_DPRINTK(\"trying to find task 0x%p\\n\", task);"
    },
    {
        "line": 45,
        "fullcodeline": "res = sas_scsi_find_task(task);"
    },
    {
        "line": 24,
        "fullcodeline": "if (!task)"
    },
    {
        "line": 25,
        "fullcodeline": "list_move_tail(&cmd->eh_entry, &done);"
    },
    {
        "line": 39,
        "fullcodeline": "SAS_DPRINTK(\"%s: task 0x%p requests reset\\n\","
    },
    {
        "line": 49,
        "fullcodeline": "SAS_DPRINTK(\"%s: task 0x%p is done\\n\", __func__,"
    },
    {
        "line": 51,
        "fullcodeline": "sas_eh_defer_cmd(cmd);"
    },
    {
        "line": 54,
        "fullcodeline": "SAS_DPRINTK(\"%s: task 0x%p is aborted\\n\","
    },
    {
        "line": 56,
        "fullcodeline": "sas_eh_defer_cmd(cmd);"
    },
    {
        "line": 59,
        "fullcodeline": "SAS_DPRINTK(\"task 0x%p is at LU: lu recover\\n\", task);"
    },
    {
        "line": 61,
        "fullcodeline": "tmf_resp = sas_recover_lu(task->dev, cmd);"
    },
    {
        "line": 74,
        "fullcodeline": "SAS_DPRINTK(\"task 0x%p is not at LU: I_T recover\\n\","
    },
    {
        "line": 76,
        "fullcodeline": "tmf_resp = sas_recover_I_T(task->dev);"
    },
    {
        "line": 87,
        "fullcodeline": "try_to_reset_cmd_device(cmd);"
    },
    {
        "line": 116,
        "fullcodeline": "SAS_DPRINTK(\"error from  device %llx, LUN %llx \""
    },
    {
        "line": 121,
        "fullcodeline": "sas_eh_finish_cmd(cmd);"
    },
    {
        "line": 62,
        "fullcodeline": "if (tmf_resp == TMF_RESP_FUNC_COMPLETE) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (tmf_resp == TMF_RESP_FUNC_COMPLETE ||"
    },
    {
        "line": 63,
        "fullcodeline": "SAS_DPRINTK(\"dev %016llx LU %llx is \""
    },
    {
        "line": 67,
        "fullcodeline": "sas_eh_defer_cmd(cmd);"
    },
    {
        "line": 68,
        "fullcodeline": "sas_scsi_clear_queue_lu(work_q, cmd);"
    },
    {
        "line": 78,
        "fullcodeline": "tmf_resp == -ENODEV) {"
    },
    {
        "line": 79,
        "fullcodeline": "struct domain_device *dev = task->dev;"
    },
    {
        "line": 80,
        "fullcodeline": "SAS_DPRINTK(\"I_T %016llx recovered\\n\","
    },
    {
        "line": 82,
        "fullcodeline": "sas_eh_finish_cmd(cmd);"
    },
    {
        "line": 83,
        "fullcodeline": "sas_scsi_clear_queue_I_T(work_q, dev);"
    },
    {
        "line": 90,
        "fullcodeline": "SAS_DPRINTK(\"clearing nexus for port:%d\\n\","
    },
    {
        "line": 92,
        "fullcodeline": "res = i->dft->lldd_clear_nexus_port(port);"
    },
    {
        "line": 103,
        "fullcodeline": "SAS_DPRINTK(\"clear nexus ha\\n\");"
    },
    {
        "line": 104,
        "fullcodeline": "res = i->dft->lldd_clear_nexus_ha(ha);"
    },
    {
        "line": 65,
        "fullcodeline": "SAS_ADDR(task->dev),"
    },
    {
        "line": 93,
        "fullcodeline": "if (res == TMF_RESP_FUNC_COMPLETE) {"
    },
    {
        "line": 105,
        "fullcodeline": "if (res == TMF_RESP_FUNC_COMPLETE) {"
    },
    {
        "line": 94,
        "fullcodeline": "SAS_DPRINTK(\"clear nexus port:%d \""
    },
    {
        "line": 96,
        "fullcodeline": "sas_eh_finish_cmd(cmd);"
    },
    {
        "line": 97,
        "fullcodeline": "sas_scsi_clear_queue_port(work_q,"
    },
    {
        "line": 106,
        "fullcodeline": "SAS_DPRINTK(\"clear nexus ha \""
    },
    {
        "line": 108,
        "fullcodeline": "sas_eh_finish_cmd(cmd);"
    }
]