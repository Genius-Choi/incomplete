[
    {
        "line": 2,
        "fullcodeline": "r_return_val_if_fail (tree && data && cmp, false);"
    },
    {
        "line": 3,
        "fullcodeline": "bool inserted = false;"
    },
    {
        "line": 15,
        "fullcodeline": "memset (&head, 0, sizeof (RRBNode));"
    },
    {
        "line": 16,
        "fullcodeline": "RRBNode *g = NULL, *parent = &head; /* Grandparent & parent */"
    },
    {
        "line": 17,
        "fullcodeline": "RRBNode *p = NULL, *q = tree->root; /* Iterator & parent */"
    },
    {
        "line": 18,
        "fullcodeline": "int dir = 0, last = 0; /* Directions */"
    },
    {
        "line": 20,
        "fullcodeline": "_set_link (parent, q, 1);"
    },
    {
        "line": 75,
        "fullcodeline": "tree->root->red = 0;"
    },
    {
        "line": 76,
        "fullcodeline": "tree->root->parent = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "if (tree->root == NULL) {"
    },
    {
        "line": 6,
        "fullcodeline": "tree->root = _node_new (data, NULL);"
    },
    {
        "line": 10,
        "fullcodeline": "inserted = true;"
    },
    {
        "line": 58,
        "fullcodeline": "last = dir;"
    },
    {
        "line": 59,
        "fullcodeline": "dir = cmp (data, q->data, user) >= 0;"
    },
    {
        "line": 65,
        "fullcodeline": "g = p;"
    },
    {
        "line": 66,
        "fullcodeline": "p = q;"
    },
    {
        "line": 78,
        "fullcodeline": "tree->size++;"
    },
    {
        "line": 7,
        "fullcodeline": "if (tree->root == NULL) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (!q) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (IS_RED (q) && IS_RED (p)) {"
    },
    {
        "line": 25,
        "fullcodeline": "q = _node_new (data, p);"
    },
    {
        "line": 29,
        "fullcodeline": "p->link[dir] = q;"
    },
    {
        "line": 30,
        "fullcodeline": "inserted = true;"
    },
    {
        "line": 46,
        "fullcodeline": "int dir2 = parent->link[1] == g;"
    },
    {
        "line": 62,
        "fullcodeline": "parent = g;"
    },
    {
        "line": 26,
        "fullcodeline": "if (!q) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (q == p->link[last]) {"
    },
    {
        "line": 31,
        "fullcodeline": "} else if (IS_RED (q->link[0]) && IS_RED (q->link[1])) {"
    },
    {
        "line": 48,
        "fullcodeline": "_set_link (parent, _rot_once (g, !last), dir2);"
    },
    {
        "line": 33,
        "fullcodeline": "q->red = 1;"
    },
    {
        "line": 34,
        "fullcodeline": "q->link[0]->red = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "q->link[1]->red = 0;"
    },
    {
        "line": 50,
        "fullcodeline": "_set_link (parent, _rot_twice (g, !last), dir2);"
    }
]