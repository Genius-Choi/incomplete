[
    {
        "line": 5,
        "fullcodeline": "int err = -ENOMEM;"
    },
    {
        "line": 8,
        "fullcodeline": "sunkbd = kzalloc(sizeof(struct sunkbd), GFP_KERNEL);"
    },
    {
        "line": 9,
        "fullcodeline": "input_dev = input_allocate_device();"
    },
    {
        "line": 13,
        "fullcodeline": "sunkbd->serio = serio;"
    },
    {
        "line": 14,
        "fullcodeline": "sunkbd->dev = input_dev;"
    },
    {
        "line": 15,
        "fullcodeline": "init_waitqueue_head(&sunkbd->wait);"
    },
    {
        "line": 16,
        "fullcodeline": "INIT_WORK(&sunkbd->tq, sunkbd_reinit);"
    },
    {
        "line": 17,
        "fullcodeline": "snprintf(sunkbd->phys, sizeof(sunkbd->phys), \"%s/input0\", serio->phys);"
    },
    {
        "line": 19,
        "fullcodeline": "serio_set_drvdata(serio, sunkbd);"
    },
    {
        "line": 21,
        "fullcodeline": "err = serio_open(serio, drv);"
    },
    {
        "line": 30,
        "fullcodeline": "snprintf(sunkbd->name, sizeof(sunkbd->name),"
    },
    {
        "line": 32,
        "fullcodeline": "memcpy(sunkbd->keycode, sunkbd_keycode, sizeof(sunkbd->keycode));"
    },
    {
        "line": 34,
        "fullcodeline": "input_dev->name = sunkbd->name;"
    },
    {
        "line": 35,
        "fullcodeline": "input_dev->phys = sunkbd->phys;"
    },
    {
        "line": 36,
        "fullcodeline": "input_dev->id.bustype = BUS_RS232;"
    },
    {
        "line": 37,
        "fullcodeline": "input_dev->id.vendor  = SERIO_SUNKBD;"
    },
    {
        "line": 38,
        "fullcodeline": "input_dev->id.product = sunkbd->type;"
    },
    {
        "line": 39,
        "fullcodeline": "input_dev->id.version = 0x0100;"
    },
    {
        "line": 40,
        "fullcodeline": "input_dev->dev.parent = &serio->dev;"
    },
    {
        "line": 42,
        "fullcodeline": "input_set_drvdata(input_dev, sunkbd);"
    },
    {
        "line": 44,
        "fullcodeline": "input_dev->event = sunkbd_event;"
    },
    {
        "line": 46,
        "fullcodeline": "input_dev->evbit[0] = BIT_MASK(EV_KEY) | BIT_MASK(EV_LED) |"
    },
    {
        "line": 48,
        "fullcodeline": "input_dev->ledbit[0] = BIT_MASK(LED_CAPSL) | BIT_MASK(LED_COMPOSE) |"
    },
    {
        "line": 50,
        "fullcodeline": "input_dev->sndbit[0] = BIT_MASK(SND_CLICK) | BIT_MASK(SND_BELL);"
    },
    {
        "line": 52,
        "fullcodeline": "input_dev->keycode = sunkbd->keycode;"
    },
    {
        "line": 53,
        "fullcodeline": "input_dev->keycodesize = sizeof(unsigned char);"
    },
    {
        "line": 54,
        "fullcodeline": "input_dev->keycodemax = ARRAY_SIZE(sunkbd_keycode);"
    },
    {
        "line": 57,
        "fullcodeline": "__clear_bit(KEY_RESERVED, input_dev->keybit);"
    },
    {
        "line": 59,
        "fullcodeline": "sunkbd_enable(sunkbd, true);"
    },
    {
        "line": 61,
        "fullcodeline": "err = input_register_device(sunkbd->dev);"
    },
    {
        "line": 67,
        "fullcodeline": "fail4:\tsunkbd_enable(sunkbd, false);"
    },
    {
        "line": 68,
        "fullcodeline": "fail3:\tserio_close(serio);"
    },
    {
        "line": 69,
        "fullcodeline": "fail2:\tserio_set_drvdata(serio, NULL);"
    },
    {
        "line": 10,
        "fullcodeline": "if (!sunkbd || !input_dev)"
    },
    {
        "line": 25,
        "fullcodeline": "if (sunkbd_initialize(sunkbd) < 0) {"
    },
    {
        "line": 55,
        "fullcodeline": "for (i = 0; i < ARRAY_SIZE(sunkbd_keycode); i++)"
    },
    {
        "line": 56,
        "fullcodeline": "__set_bit(sunkbd->keycode[i], input_dev->keybit);"
    },
    {
        "line": 26,
        "fullcodeline": "err = -ENODEV;"
    },
    {
        "line": 47,
        "fullcodeline": "BIT_MASK(EV_SND) | BIT_MASK(EV_REP);"
    },
    {
        "line": 49,
        "fullcodeline": "BIT_MASK(LED_SCROLLL) | BIT_MASK(LED_NUML);"
    }
]