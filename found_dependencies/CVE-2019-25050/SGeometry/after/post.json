[
    {
        "line": 5,
        "fullcodeline": "char container_name[NC_MAX_NAME + 1];"
    },
    {
        "line": 6,
        "fullcodeline": "memset(container_name, 0, NC_MAX_NAME + 1);"
    },
    {
        "line": 15,
        "fullcodeline": "container_name_s = std::string(container_name);"
    },
    {
        "line": 18,
        "fullcodeline": "this->type = nccfdriver::getGeometryType(ncId, geoVarId);"
    },
    {
        "line": 26,
        "fullcodeline": "this->gm_varId = INVALID_VAR_ID;"
    },
    {
        "line": 41,
        "fullcodeline": "int pnc_vid = INVALID_VAR_ID;"
    },
    {
        "line": 42,
        "fullcodeline": "int nc_vid = INVALID_VAR_ID;"
    },
    {
        "line": 43,
        "fullcodeline": "int ir_vid = INVALID_VAR_ID;"
    },
    {
        "line": 45,
        "fullcodeline": "size_t bound = 0;"
    },
    {
        "line": 46,
        "fullcodeline": "size_t total_node_count = 0; // used in error checks later"
    },
    {
        "line": 127,
        "fullcodeline": "size_t rc = 0;"
    },
    {
        "line": 128,
        "fullcodeline": "bound_list.push_back(0);// start with 0"
    },
    {
        "line": 183,
        "fullcodeline": "int X = INVALID_VAR_ID;"
    },
    {
        "line": 184,
        "fullcodeline": "int Y = INVALID_VAR_ID;"
    },
    {
        "line": 185,
        "fullcodeline": "int Z = INVALID_VAR_ID;"
    },
    {
        "line": 187,
        "fullcodeline": "char cart[NC_MAX_NAME + 1];"
    },
    {
        "line": 188,
        "fullcodeline": "memset(cart, 0, NC_MAX_NAME + 1);"
    },
    {
        "line": 189,
        "fullcodeline": "strncpy(cart, cart_s.c_str(), NC_MAX_NAME);"
    },
    {
        "line": 191,
        "fullcodeline": "char * dim = strtok(cart,  \" \");"
    },
    {
        "line": 192,
        "fullcodeline": "int axis_id = 0;"
    },
    {
        "line": 254,
        "fullcodeline": "int all_dim = INVALID_VAR_ID; bool dim_set = false;"
    },
    {
        "line": 255,
        "fullcodeline": "int dimC = 0;"
    },
    {
        "line": 309,
        "fullcodeline": "size_t instance_dim_len = 0;"
    },
    {
        "line": 333,
        "fullcodeline": "nc_inq_dimlen(ncId, this->inst_dimId, &instance_dim_len);"
    },
    {
        "line": 339,
        "fullcodeline": "this->inst_dimLen = instance_dim_len;"
    },
    {
        "line": 340,
        "fullcodeline": "this->pt_buffer = std::unique_ptr<Point>(new Point(this->touple_order));"
    },
    {
        "line": 341,
        "fullcodeline": "this->gc_varId = geoVarId;"
    },
    {
        "line": 342,
        "fullcodeline": "this->current_vert_ind = 0;"
    },
    {
        "line": 343,
        "fullcodeline": "this->ncid = ncId;"
    },
    {
        "line": 9,
        "fullcodeline": "if(nc_inq_varname(ncId, geoVarId, container_name) != NC_NOERR)"
    },
    {
        "line": 20,
        "fullcodeline": "if(this->type == NONE)"
    },
    {
        "line": 27,
        "fullcodeline": "if(attrf(ncId, geoVarId, CF_GRD_MAPPING, gm_name_s) != \"\")"
    },
    {
        "line": 47,
        "fullcodeline": "if(attrf(ncId, geoVarId, CF_SG_NODE_COUNT, nc_name_s) != \"\")"
    },
    {
        "line": 60,
        "fullcodeline": "if(attrf(ncId, geoVarId, CF_SG_PART_NODE_COUNT, pnc_name_s) != \"\")"
    },
    {
        "line": 72,
        "fullcodeline": "if(attrf(ncId, geoVarId, CF_SG_INTERIOR_RING, ir_name_s) != \"\")"
    },
    {
        "line": 93,
        "fullcodeline": "if(pnode_counts.size() > 0 && node_counts.size() == 0)"
    },
    {
        "line": 99,
        "fullcodeline": "if(int_rings.size() > 0 && pnode_counts.size() == 0)"
    },
    {
        "line": 106,
        "fullcodeline": "if(int_rings.size() > 0)"
    },
    {
        "line": 115,
        "fullcodeline": "if(this->type == POLYGON || this->type == LINE)"
    },
    {
        "line": 130,
        "fullcodeline": "if(node_counts.size() > 0)"
    },
    {
        "line": 142,
        "fullcodeline": "if(attrf(ncId, geoVarId, CF_SG_NODE_COORDINATES, cart_s) == \"\")"
    },
    {
        "line": 148,
        "fullcodeline": "if(this->node_counts.size() > 0)"
    },
    {
        "line": 194,
        "fullcodeline": "while(dim != nullptr)"
    },
    {
        "line": 233,
        "fullcodeline": "if(X != INVALID_VAR_ID)"
    },
    {
        "line": 239,
        "fullcodeline": "if(Y != INVALID_VAR_ID)"
    },
    {
        "line": 245,
        "fullcodeline": "if(Z != INVALID_VAR_ID)"
    },
    {
        "line": 257,
        "fullcodeline": "for(size_t nvitr = 0; nvitr < nodec_varIds.size(); nvitr++)"
    },
    {
        "line": 287,
        "fullcodeline": "if(node_counts.size() > 0)"
    },
    {
        "line": 298,
        "fullcodeline": "if(this->touple_order < 2)"
    },
    {
        "line": 311,
        "fullcodeline": "if(node_counts.size() >= 1)"
    },
    {
        "line": 335,
        "fullcodeline": "if(instance_dim_len == 0)"
    },
    {
        "line": 29,
        "fullcodeline": "const char * gm_name = gm_name_s.c_str();"
    },
    {
        "line": 49,
        "fullcodeline": "const char * nc_name = nc_name_s.c_str();"
    },
    {
        "line": 50,
        "fullcodeline": "nc_inq_varid(ncId, nc_name, &nc_vid);"
    },
    {
        "line": 62,
        "fullcodeline": "const char * pnc_name = pnc_name_s.c_str();"
    },
    {
        "line": 63,
        "fullcodeline": "bound = 0;"
    },
    {
        "line": 64,
        "fullcodeline": "nc_inq_varid(ncId, pnc_name, &pnc_vid);"
    },
    {
        "line": 74,
        "fullcodeline": "const char * ir_name = ir_name_s.c_str();"
    },
    {
        "line": 75,
        "fullcodeline": "bound = 0;"
    },
    {
        "line": 76,
        "fullcodeline": "nc_inq_varid(ncId, ir_name, &ir_vid);"
    },
    {
        "line": 150,
        "fullcodeline": "int ind = 0;"
    },
    {
        "line": 151,
        "fullcodeline": "int parts = 0;"
    },
    {
        "line": 152,
        "fullcodeline": "int prog = 0;"
    },
    {
        "line": 153,
        "fullcodeline": "int c = 0;"
    },
    {
        "line": 228,
        "fullcodeline": "dim = strtok(nullptr, \" \");"
    },
    {
        "line": 234,
        "fullcodeline": "this->nodec_varIds.push_back(X);"
    },
    {
        "line": 240,
        "fullcodeline": "this->nodec_varIds.push_back(Y);"
    },
    {
        "line": 246,
        "fullcodeline": "this->nodec_varIds.push_back(Z);"
    },
    {
        "line": 259,
        "fullcodeline": "dimC = 0;"
    },
    {
        "line": 260,
        "fullcodeline": "nc_inq_varndims(ncId, nodec_varIds[nvitr], &dimC);"
    },
    {
        "line": 268,
        "fullcodeline": "int inter_dim[1];"
    },
    {
        "line": 289,
        "fullcodeline": "size_t diml = 0;"
    },
    {
        "line": 290,
        "fullcodeline": "nc_inq_dimlen(ncId, all_dim, &diml);"
    },
    {
        "line": 313,
        "fullcodeline": "int nc_dims = 0;"
    },
    {
        "line": 314,
        "fullcodeline": "nc_inq_varndims(ncId, nc_vid, &nc_dims);"
    },
    {
        "line": 318,
        "fullcodeline": "int nc_dim_id[1];"
    },
    {
        "line": 325,
        "fullcodeline": "this->inst_dimId = nc_dim_id[0];"
    },
    {
        "line": 11,
        "fullcodeline": "throw SG_Exception_Existential(\"new geometry container\", \"the variable of the given ID\");"
    },
    {
        "line": 22,
        "fullcodeline": "throw SG_Exception_Existential(static_cast<const char*>(container_name), CF_SG_GEOMETRY_TYPE);"
    },
    {
        "line": 31,
        "fullcodeline": "if(nc_inq_varid(ncId, gm_name, &gmVID) == NC_NOERR)"
    },
    {
        "line": 51,
        "fullcodeline": "while(nc_get_var1_int(ncId, nc_vid, &bound, &buf) == NC_NOERR)"
    },
    {
        "line": 65,
        "fullcodeline": "while(nc_get_var1_int(ncId, pnc_vid, &bound, &buf) == NC_NOERR)"
    },
    {
        "line": 77,
        "fullcodeline": "while(nc_get_var1_int(ncId, ir_vid, &bound, &buf) == NC_NOERR)"
    },
    {
        "line": 95,
        "fullcodeline": "throw SG_Exception_Dep(static_cast<const char *>(container_name), CF_SG_PART_NODE_COUNT, CF_SG_NODE_COUNT);"
    },
    {
        "line": 101,
        "fullcodeline": "throw SG_Exception_Dep(static_cast<const char *>(container_name), CF_SG_INTERIOR_RING, CF_SG_PART_NODE_COUNT);"
    },
    {
        "line": 108,
        "fullcodeline": "if(int_rings.size() != pnode_counts.size())"
    },
    {
        "line": 117,
        "fullcodeline": "if(node_counts.size() < 1)"
    },
    {
        "line": 132,
        "fullcodeline": "for(size_t i = 0; i < node_counts.size() - 1; i++)"
    },
    {
        "line": 144,
        "fullcodeline": "throw SG_Exception_Existential(container_name, CF_SG_NODE_COORDINATES);"
    },
    {
        "line": 155,
        "fullcodeline": "for(size_t pcnt = 0; pcnt < pnode_counts.size() ; pcnt++)"
    },
    {
        "line": 196,
        "fullcodeline": "if(nc_inq_varid(ncId, dim, &axis_id) == NC_NOERR)"
    },
    {
        "line": 262,
        "fullcodeline": "if(dimC != 1)"
    },
    {
        "line": 269,
        "fullcodeline": "if(nc_inq_vardimid(ncId, nodec_varIds[nvitr], inter_dim) != NC_NOERR)"
    },
    {
        "line": 274,
        "fullcodeline": "if(!dim_set)"
    },
    {
        "line": 292,
        "fullcodeline": "if(diml != total_node_count)"
    },
    {
        "line": 300,
        "fullcodeline": "throw SG_Exception_Existential(container_name, \"insufficent node coordinates must have at least two axis\");"
    },
    {
        "line": 316,
        "fullcodeline": "if(nc_dims != 1) throw SG_Exception_Not1D();"
    },
    {
        "line": 320,
        "fullcodeline": "if(nc_inq_vardimid(ncId, nc_vid, nc_dim_id) != NC_NOERR)"
    },
    {
        "line": 330,
        "fullcodeline": "this->inst_dimId = all_dim;"
    },
    {
        "line": 336,
        "fullcodeline": "throw SG_Exception_EmptyDim();"
    },
    {
        "line": 33,
        "fullcodeline": "this->gm_varId = gmVID;"
    },
    {
        "line": 53,
        "fullcodeline": "this->node_counts.push_back(buf);"
    },
    {
        "line": 54,
        "fullcodeline": "total_node_count += buf;"
    },
    {
        "line": 55,
        "fullcodeline": "bound++;"
    },
    {
        "line": 67,
        "fullcodeline": "this->pnode_counts.push_back(buf);"
    },
    {
        "line": 68,
        "fullcodeline": "bound++;"
    },
    {
        "line": 79,
        "fullcodeline": "bool store = buf == 0 ? false : true;"
    },
    {
        "line": 80,
        "fullcodeline": "this->int_rings.push_back(store);"
    },
    {
        "line": 81,
        "fullcodeline": "bound++;"
    },
    {
        "line": 134,
        "fullcodeline": "rc = rc + node_counts[i];"
    },
    {
        "line": 135,
        "fullcodeline": "bound_list.push_back(rc);"
    },
    {
        "line": 162,
        "fullcodeline": "prog = prog + pnode_counts[pcnt];"
    },
    {
        "line": 163,
        "fullcodeline": "parts++;"
    },
    {
        "line": 201,
        "fullcodeline": "attrf(ncId, axis_id, CF_AXIS, a_sig);"
    },
    {
        "line": 237,
        "fullcodeline": "throw SG_Exception_Existential(container_name, \"node_coordinates: X-axis\");"
    },
    {
        "line": 243,
        "fullcodeline": "throw SG_Exception_Existential(container_name, \"node_coordinates: Y-axis\");"
    },
    {
        "line": 276,
        "fullcodeline": "all_dim = inter_dim[0];"
    },
    {
        "line": 110,
        "fullcodeline": "throw SG_Exception_Dim_MM(static_cast<const char *>(container_name), CF_SG_INTERIOR_RING, CF_SG_PART_NODE_COUNT);"
    },
    {
        "line": 119,
        "fullcodeline": "throw SG_Exception_Existential(static_cast<const char*>(container_name), CF_SG_NODE_COUNT);"
    },
    {
        "line": 157,
        "fullcodeline": "if(prog == 0) pnc_bl.push_back(pcnt);"
    },
    {
        "line": 159,
        "fullcodeline": "if(int_rings.size() > 0 && !int_rings[pcnt])"
    },
    {
        "line": 165,
        "fullcodeline": "if(prog == node_counts[ind])"
    },
    {
        "line": 204,
        "fullcodeline": "if(a_sig == \"X\")"
    },
    {
        "line": 264,
        "fullcodeline": "throw SG_Exception_Not1D();"
    },
    {
        "line": 271,
        "fullcodeline": "throw SG_Exception_Existential(container_name, \"one or more node_coordinate dimensions\");"
    },
    {
        "line": 293,
        "fullcodeline": "throw SG_Exception_BadSum(container_name, \"node_count\", \"node coordinate dimension length\");"
    },
    {
        "line": 322,
        "fullcodeline": "throw SG_Exception_Existential(container_name, \"node_count dimension\");"
    },
    {
        "line": 160,
        "fullcodeline": "c++;"
    },
    {
        "line": 167,
        "fullcodeline": "ind++;"
    },
    {
        "line": 168,
        "fullcodeline": "this->parts_count.push_back(parts);"
    },
    {
        "line": 171,
        "fullcodeline": "c = 0;"
    },
    {
        "line": 172,
        "fullcodeline": "prog = 0; parts = 0;"
    },
    {
        "line": 206,
        "fullcodeline": "X = axis_id;"
    },
    {
        "line": 225,
        "fullcodeline": "throw SG_Exception_Existential(container_name, dim);"
    },
    {
        "line": 281,
        "fullcodeline": "if (inter_dim[0] != all_dim)"
    },
    {
        "line": 169,
        "fullcodeline": "if(int_rings.size() > 0)"
    },
    {
        "line": 170,
        "fullcodeline": "this->poly_count.push_back(c);"
    },
    {
        "line": 174,
        "fullcodeline": "else if(prog > node_counts[ind])"
    },
    {
        "line": 208,
        "fullcodeline": "else if(a_sig == \"Y\")"
    },
    {
        "line": 282,
        "fullcodeline": "throw SG_Exception_Dim_MM(container_name, \"X, Y\", \"in general all node coordinate axes\");"
    },
    {
        "line": 210,
        "fullcodeline": "Y = axis_id;"
    },
    {
        "line": 176,
        "fullcodeline": "throw SG_Exception_BadSum(container_name, CF_SG_PART_NODE_COUNT, CF_SG_NODE_COUNT);"
    },
    {
        "line": 212,
        "fullcodeline": "else if(a_sig == \"Z\")"
    },
    {
        "line": 214,
        "fullcodeline": "Z = axis_id;"
    },
    {
        "line": 218,
        "fullcodeline": "throw SG_Exception_Dep(container_name, \"A node_coordinates variable\", CF_AXIS);"
    }
]