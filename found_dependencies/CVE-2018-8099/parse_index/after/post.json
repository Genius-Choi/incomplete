[
    {
        "line": 3,
        "fullcodeline": "int error = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "struct index_header header = { 0 };"
    },
    {
        "line": 7,
        "fullcodeline": "const char *last = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "const char *empty = \"\";"
    },
    {
        "line": 23,
        "fullcodeline": "git_hash_buf(&checksum_calculated, buffer, buffer_size - INDEX_FOOTER_SIZE);"
    },
    {
        "line": 29,
        "fullcodeline": "index->version = header.version;"
    },
    {
        "line": 33,
        "fullcodeline": "seek_forward(INDEX_HEADER_SIZE);"
    },
    {
        "line": 35,
        "fullcodeline": "assert(!index->entries.length);"
    },
    {
        "line": 98,
        "fullcodeline": "git_oid_fromraw(&checksum_expected, (const unsigned char *)buffer);"
    },
    {
        "line": 106,
        "fullcodeline": "git_oid_cpy(&index->checksum, &checksum_calculated);"
    },
    {
        "line": 113,
        "fullcodeline": "git_vector_set_sorted(&index->entries, !index->ignore_case);"
    },
    {
        "line": 114,
        "fullcodeline": "git_vector_sort(&index->entries);"
    },
    {
        "line": 18,
        "fullcodeline": "if (buffer_size < INDEX_HEADER_SIZE + INDEX_FOOTER_SIZE)"
    },
    {
        "line": 26,
        "fullcodeline": "if ((error = read_header(&header, buffer)) < 0)"
    },
    {
        "line": 30,
        "fullcodeline": "if (index->version >= INDEX_VERSION_NUMBER_COMP)"
    },
    {
        "line": 43,
        "fullcodeline": "for (i = 0; i < header.entry_count && buffer_size > INDEX_FOOTER_SIZE; ++i) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (i != header.entry_count) {"
    },
    {
        "line": 77,
        "fullcodeline": "while (buffer_size > INDEX_FOOTER_SIZE) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (buffer_size != INDEX_FOOTER_SIZE) {"
    },
    {
        "line": 100,
        "fullcodeline": "if (git_oid__cmp(&checksum_calculated, &checksum_expected) != 0) {"
    },
    {
        "line": 31,
        "fullcodeline": "last = empty;"
    },
    {
        "line": 44,
        "fullcodeline": "git_index_entry *entry = NULL;"
    },
    {
        "line": 57,
        "fullcodeline": "INSERT_IN_MAP(index, entry, &error);"
    },
    {
        "line": 63,
        "fullcodeline": "error = 0;"
    },
    {
        "line": 68,
        "fullcodeline": "seek_forward(entry_size);"
    },
    {
        "line": 72,
        "fullcodeline": "error = index_error_invalid(\"header entries changed while parsing\");"
    },
    {
        "line": 80,
        "fullcodeline": "extension_size = read_extension(index, buffer, buffer_size);"
    },
    {
        "line": 88,
        "fullcodeline": "seek_forward(extension_size);"
    },
    {
        "line": 92,
        "fullcodeline": "error = index_error_invalid("
    },
    {
        "line": 101,
        "fullcodeline": "error = index_error_invalid("
    },
    {
        "line": 19,
        "fullcodeline": "return index_error_invalid(\"insufficient buffer space\");"
    },
    {
        "line": 47,
        "fullcodeline": "if ((error = read_entry(&entry, &entry_size, index, buffer, buffer_size, last)) < 0) {"
    },
    {
        "line": 52,
        "fullcodeline": "if ((error = git_vector_insert(&index->entries, entry)) < 0) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (error < 0) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (index->version >= INDEX_VERSION_NUMBER_COMP)"
    },
    {
        "line": 83,
        "fullcodeline": "if (extension_size == 0) {"
    },
    {
        "line": 48,
        "fullcodeline": "error = index_error_invalid(\"invalid entry\");"
    },
    {
        "line": 53,
        "fullcodeline": "index_entry_free(entry);"
    },
    {
        "line": 60,
        "fullcodeline": "index_entry_free(entry);"
    },
    {
        "line": 66,
        "fullcodeline": "last = entry->path;"
    },
    {
        "line": 84,
        "fullcodeline": "error = index_error_invalid(\"extension is truncated\");"
    }
]