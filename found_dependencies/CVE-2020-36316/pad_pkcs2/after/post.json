[
    {
        "line": 2,
        "fullcodeline": "uint8_t pad, h1[RLC_MD_LEN], h2[RLC_MD_LEN];"
    },
    {
        "line": 4,
        "fullcodeline": "uint8_t *mask = RLC_ALLOCA(uint8_t, k_len);"
    },
    {
        "line": 5,
        "fullcodeline": "int result = RLC_ERR;"
    },
    {
        "line": 8,
        "fullcodeline": "bn_null(t);"
    },
    {
        "line": 150,
        "fullcodeline": "RLC_FREE(mask);"
    },
    {
        "line": 11,
        "fullcodeline": "bn_new(t);"
    },
    {
        "line": 144,
        "fullcodeline": "result = RLC_ERR;"
    },
    {
        "line": 147,
        "fullcodeline": "bn_free(t);"
    },
    {
        "line": 16,
        "fullcodeline": "md_map(h1, NULL, 0);"
    },
    {
        "line": 17,
        "fullcodeline": "bn_read_bin(m, h1, RLC_MD_LEN);"
    },
    {
        "line": 18,
        "fullcodeline": "*p_len = k_len - 2 * RLC_MD_LEN - 2 - m_len;"
    },
    {
        "line": 19,
        "fullcodeline": "bn_lsh(m, m, *p_len * 8);"
    },
    {
        "line": 20,
        "fullcodeline": "bn_lsh(m, m, 8);"
    },
    {
        "line": 21,
        "fullcodeline": "bn_add_dig(m, m, 0x01);"
    },
    {
        "line": 23,
        "fullcodeline": "bn_lsh(m, m, m_len * 8);"
    },
    {
        "line": 24,
        "fullcodeline": "result = RLC_OK;"
    },
    {
        "line": 28,
        "fullcodeline": "rand_bytes(h1, RLC_MD_LEN);"
    },
    {
        "line": 29,
        "fullcodeline": "md_mgf(mask, k_len - RLC_MD_LEN - 1, h1, RLC_MD_LEN);"
    },
    {
        "line": 30,
        "fullcodeline": "bn_read_bin(t, mask, k_len - RLC_MD_LEN - 1);"
    },
    {
        "line": 34,
        "fullcodeline": "bn_write_bin(mask, k_len - RLC_MD_LEN - 1, m);"
    },
    {
        "line": 35,
        "fullcodeline": "md_mgf(h2, RLC_MD_LEN, mask, k_len - RLC_MD_LEN - 1);"
    },
    {
        "line": 39,
        "fullcodeline": "bn_read_bin(t, h1, RLC_MD_LEN);"
    },
    {
        "line": 40,
        "fullcodeline": "bn_lsh(t, t, 8 * (k_len - RLC_MD_LEN - 1));"
    },
    {
        "line": 41,
        "fullcodeline": "bn_add(t, t, m);"
    },
    {
        "line": 42,
        "fullcodeline": "bn_copy(m, t);"
    },
    {
        "line": 43,
        "fullcodeline": "result = RLC_OK;"
    },
    {
        "line": 46,
        "fullcodeline": "m_len = k_len - 1;"
    },
    {
        "line": 47,
        "fullcodeline": "bn_rsh(t, m, 8 * m_len);"
    },
    {
        "line": 85,
        "fullcodeline": "bn_zero(m);"
    },
    {
        "line": 86,
        "fullcodeline": "bn_lsh(m, m, 64);"
    },
    {
        "line": 88,
        "fullcodeline": "bn_lsh(m, m, RLC_MD_LEN * 8);"
    },
    {
        "line": 89,
        "fullcodeline": "result = RLC_OK;"
    },
    {
        "line": 92,
        "fullcodeline": "memset(mask, 0, 8);"
    },
    {
        "line": 93,
        "fullcodeline": "bn_write_bin(mask + 8, RLC_MD_LEN, m);"
    },
    {
        "line": 94,
        "fullcodeline": "md_map(h1, mask, RLC_MD_LEN + 8);"
    },
    {
        "line": 95,
        "fullcodeline": "bn_read_bin(m, h1, RLC_MD_LEN);"
    },
    {
        "line": 96,
        "fullcodeline": "md_mgf(mask, k_len - RLC_MD_LEN - 1, h1, RLC_MD_LEN);"
    },
    {
        "line": 97,
        "fullcodeline": "bn_read_bin(t, mask, k_len - RLC_MD_LEN - 1);"
    },
    {
        "line": 98,
        "fullcodeline": "t->dp[0] ^= 0x01;"
    },
    {
        "line": 100,
        "fullcodeline": "bn_lsh(t, t, 8 * RLC_MD_LEN);"
    },
    {
        "line": 101,
        "fullcodeline": "bn_add(m, t, m);"
    },
    {
        "line": 102,
        "fullcodeline": "bn_lsh(m, m, 8);"
    },
    {
        "line": 103,
        "fullcodeline": "bn_add_dig(m, m, RSA_PSS);"
    },
    {
        "line": 107,
        "fullcodeline": "result = RLC_OK;"
    },
    {
        "line": 111,
        "fullcodeline": "bn_mod_2b(t, m, 8);"
    },
    {
        "line": 31,
        "fullcodeline": "for (int i = 0; i < t->used; i++) {"
    },
    {
        "line": 36,
        "fullcodeline": "for (int i = 0; i < RLC_MD_LEN; i++) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (bn_is_zero(t)) {"
    },
    {
        "line": 104,
        "fullcodeline": "for (int i = m_len - 1; i < 8 * k_len; i++) {"
    },
    {
        "line": 113,
        "fullcodeline": "if (pad == RSA_PSS) {"
    },
    {
        "line": 37,
        "fullcodeline": "h1[i] ^= h2[i];"
    },
    {
        "line": 49,
        "fullcodeline": "m_len -= RLC_MD_LEN;"
    },
    {
        "line": 50,
        "fullcodeline": "bn_rsh(t, m, 8 * m_len);"
    },
    {
        "line": 51,
        "fullcodeline": "bn_write_bin(h1, RLC_MD_LEN, t);"
    },
    {
        "line": 52,
        "fullcodeline": "bn_mod_2b(m, m, 8 * m_len);"
    },
    {
        "line": 53,
        "fullcodeline": "bn_write_bin(mask, m_len, m);"
    },
    {
        "line": 54,
        "fullcodeline": "md_mgf(h2, RLC_MD_LEN, mask, m_len);"
    },
    {
        "line": 58,
        "fullcodeline": "md_mgf(mask, k_len - RLC_MD_LEN - 1, h1, RLC_MD_LEN);"
    },
    {
        "line": 59,
        "fullcodeline": "bn_read_bin(t, mask, k_len - RLC_MD_LEN - 1);"
    },
    {
        "line": 63,
        "fullcodeline": "m_len -= RLC_MD_LEN;"
    },
    {
        "line": 64,
        "fullcodeline": "bn_rsh(t, m, 8 * m_len);"
    },
    {
        "line": 65,
        "fullcodeline": "bn_write_bin(h2, RLC_MD_LEN, t);"
    },
    {
        "line": 66,
        "fullcodeline": "md_map(h1, NULL, 0);"
    },
    {
        "line": 67,
        "fullcodeline": "pad = 0;"
    },
    {
        "line": 71,
        "fullcodeline": "bn_mod_2b(m, m, 8 * m_len);"
    },
    {
        "line": 72,
        "fullcodeline": "*p_len = bn_size_bin(m);"
    },
    {
        "line": 73,
        "fullcodeline": "(*p_len)--;"
    },
    {
        "line": 74,
        "fullcodeline": "bn_rsh(t, m, *p_len * 8);"
    },
    {
        "line": 78,
        "fullcodeline": "bn_mod_2b(m, m, *p_len * 8);"
    },
    {
        "line": 79,
        "fullcodeline": "*p_len = k_len - *p_len;"
    },
    {
        "line": 105,
        "fullcodeline": "bn_set_bit(m, i, 0);"
    },
    {
        "line": 114,
        "fullcodeline": "int r = 1;"
    },
    {
        "line": 120,
        "fullcodeline": "bn_rsh(m, m, 8);"
    },
    {
        "line": 121,
        "fullcodeline": "bn_mod_2b(t, m, 8 * RLC_MD_LEN);"
    },
    {
        "line": 122,
        "fullcodeline": "bn_write_bin(h2, RLC_MD_LEN, t);"
    },
    {
        "line": 123,
        "fullcodeline": "bn_rsh(m, m, 8 * RLC_MD_LEN);"
    },
    {
        "line": 124,
        "fullcodeline": "bn_write_bin(h1, RLC_MD_LEN, t);"
    },
    {
        "line": 125,
        "fullcodeline": "md_mgf(mask, k_len - RLC_MD_LEN - 1, h1, RLC_MD_LEN);"
    },
    {
        "line": 126,
        "fullcodeline": "bn_read_bin(t, mask, k_len - RLC_MD_LEN - 1);"
    },
    {
        "line": 130,
        "fullcodeline": "m->dp[0] ^= 0x01;"
    },
    {
        "line": 137,
        "fullcodeline": "bn_read_bin(m, h2, RLC_MD_LEN);"
    },
    {
        "line": 138,
        "fullcodeline": "*p_len = k_len - RLC_MD_LEN;"
    },
    {
        "line": 55,
        "fullcodeline": "for (int i = 0; i < RLC_MD_LEN; i++) {"
    },
    {
        "line": 60,
        "fullcodeline": "for (int i = 0; i < t->used; i++) {"
    },
    {
        "line": 68,
        "fullcodeline": "for (int i = 0; i < RLC_MD_LEN; i++) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (pad == 0 && bn_cmp_dig(t, 1) == RLC_EQ) {"
    },
    {
        "line": 115,
        "fullcodeline": "for (int i = m_len; i < 8 * k_len; i++) {"
    },
    {
        "line": 127,
        "fullcodeline": "for (int i = 0; i < t->used; i++) {"
    },
    {
        "line": 131,
        "fullcodeline": "for (int i = m_len - 1; i < 8 * k_len; i++) {"
    },
    {
        "line": 134,
        "fullcodeline": "if (r == 1 && bn_is_zero(m)) {"
    },
    {
        "line": 56,
        "fullcodeline": "h1[i] ^= h2[i];"
    },
    {
        "line": 69,
        "fullcodeline": "pad |= h1[i] ^ h2[i];"
    },
    {
        "line": 76,
        "fullcodeline": "result = RLC_OK;"
    },
    {
        "line": 132,
        "fullcodeline": "bn_set_bit(m, i - ((RLC_MD_LEN + 1) * 8), 0);"
    },
    {
        "line": 135,
        "fullcodeline": "result = RLC_OK;"
    },
    {
        "line": 116,
        "fullcodeline": "if (bn_get_bit(m, i) != 0) {"
    },
    {
        "line": 117,
        "fullcodeline": "r = 0;"
    }
]