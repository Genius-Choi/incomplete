[
    {
        "line": 8,
        "fullcodeline": "int ipc_sockets[2];"
    },
    {
        "line": 14,
        "fullcodeline": "init_pid = lxc_cmd_get_init_pid(name, lxcpath);"
    },
    {
        "line": 20,
        "fullcodeline": "init_ctx = lxc_proc_get_context_info(init_pid);"
    },
    {
        "line": 26,
        "fullcodeline": "personality = get_personality(name, lxcpath);"
    },
    {
        "line": 32,
        "fullcodeline": "init_ctx->personality = personality;"
    },
    {
        "line": 34,
        "fullcodeline": "init_ctx->container = lxc_container_new(name, lxcpath);"
    },
    {
        "line": 44,
        "fullcodeline": "cwd = getcwd(NULL, 0);"
    },
    {
        "line": 93,
        "fullcodeline": "ret = socketpair(PF_LOCAL, SOCK_STREAM | SOCK_CLOEXEC, 0, ipc_sockets);"
    },
    {
        "line": 113,
        "fullcodeline": "pid = fork();"
    },
    {
        "line": 266,
        "fullcodeline": "expected = 0;"
    },
    {
        "line": 267,
        "fullcodeline": "status = -1;"
    },
    {
        "line": 268,
        "fullcodeline": "ret = lxc_read_nointr_expect(ipc_sockets[1], &status, sizeof(status), &expected);"
    },
    {
        "line": 281,
        "fullcodeline": "ret = lxc_attach_to_ns(init_pid, options->namespaces);"
    },
    {
        "line": 293,
        "fullcodeline": "ret = chdir(new_cwd);"
    },
    {
        "line": 322,
        "fullcodeline": "ret = lxc_write_nointr(ipc_sockets[1], &pid, sizeof(pid));"
    },
    {
        "line": 11,
        "fullcodeline": "if (!options)"
    },
    {
        "line": 15,
        "fullcodeline": "if (init_pid < 0) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (!init_ctx) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (init_ctx->personality < 0) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (!init_ctx->container)"
    },
    {
        "line": 49,
        "fullcodeline": "if (options->namespaces == -1) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (pid < 0) {"
    },
    {
        "line": 300,
        "fullcodeline": "struct attach_clone_payload payload = {"
    },
    {
        "line": 311,
        "fullcodeline": "pid = lxc_clone(attach_child_main, &payload, CLONE_PARENT);"
    },
    {
        "line": 315,
        "fullcodeline": "if (pid <= 0) {"
    },
    {
        "line": 12,
        "fullcodeline": "options = &attach_static_default_options;"
    },
    {
        "line": 16,
        "fullcodeline": "ERROR(\"failed to get the init pid\");"
    },
    {
        "line": 38,
        "fullcodeline": "if (!fetch_seccomp(init_ctx->container, options))"
    },
    {
        "line": 41,
        "fullcodeline": "if (!no_new_privs(init_ctx->container, options))"
    },
    {
        "line": 50,
        "fullcodeline": "options->namespaces = lxc_cmd_get_clone_flags(name, lxcpath);"
    },
    {
        "line": 123,
        "fullcodeline": "int procfd = -1;"
    },
    {
        "line": 124,
        "fullcodeline": "pid_t to_cleanup_pid = pid;"
    },
    {
        "line": 141,
        "fullcodeline": "procfd = open(\"/proc\", O_DIRECTORY | O_RDONLY | O_CLOEXEC);"
    },
    {
        "line": 148,
        "fullcodeline": "status = 0;"
    },
    {
        "line": 149,
        "fullcodeline": "ret = lxc_write_nointr(ipc_sockets[0], &status, sizeof(status));"
    },
    {
        "line": 156,
        "fullcodeline": "ret = lxc_read_nointr_expect(ipc_sockets[0], &attached_pid, sizeof(attached_pid), NULL);"
    },
    {
        "line": 170,
        "fullcodeline": "ret = wait_for_pid(pid);"
    },
    {
        "line": 175,
        "fullcodeline": "to_cleanup_pid = attached_pid;"
    },
    {
        "line": 178,
        "fullcodeline": "status = 0;"
    },
    {
        "line": 179,
        "fullcodeline": "ret = lxc_write_nointr(ipc_sockets[0], &status, sizeof(status));"
    },
    {
        "line": 186,
        "fullcodeline": "expected = 1;"
    },
    {
        "line": 187,
        "fullcodeline": "ret = lxc_read_nointr_expect(ipc_sockets[0], &status, sizeof(status), &expected);"
    },
    {
        "line": 196,
        "fullcodeline": "status = 2;"
    },
    {
        "line": 197,
        "fullcodeline": "ret = lxc_write_nointr(ipc_sockets[0], &status, sizeof(status));"
    },
    {
        "line": 207,
        "fullcodeline": "expected = 3;"
    },
    {
        "line": 208,
        "fullcodeline": "ret = lxc_read_nointr_expect(ipc_sockets[0], &status, sizeof(status), &expected);"
    },
    {
        "line": 234,
        "fullcodeline": "shutdown(ipc_sockets[0], SHUT_RDWR);"
    },
    {
        "line": 252,
        "fullcodeline": "shutdown(ipc_sockets[0], SHUT_RDWR);"
    },
    {
        "line": 271,
        "fullcodeline": "shutdown(ipc_sockets[1], SHUT_RDWR);"
    },
    {
        "line": 275,
        "fullcodeline": "if ((options->attach_flags & LXC_ATTACH_MOVE_TO_CGROUP) && cgns_supported())"
    },
    {
        "line": 276,
        "fullcodeline": "options->namespaces |= CLONE_NEWCGROUP;"
    },
    {
        "line": 284,
        "fullcodeline": "shutdown(ipc_sockets[1], SHUT_RDWR);"
    },
    {
        "line": 290,
        "fullcodeline": "new_cwd = options->initial_cwd;"
    },
    {
        "line": 317,
        "fullcodeline": "shutdown(ipc_sockets[1], SHUT_RDWR);"
    },
    {
        "line": 17,
        "fullcodeline": "return -1;"
    },
    {
        "line": 23,
        "fullcodeline": "return -1;"
    },
    {
        "line": 30,
        "fullcodeline": "return -1;"
    },
    {
        "line": 36,
        "fullcodeline": "return -1;"
    },
    {
        "line": 52,
        "fullcodeline": "if (options->namespaces == -1) {"
    },
    {
        "line": 98,
        "fullcodeline": "return -1;"
    },
    {
        "line": 119,
        "fullcodeline": "return -1;"
    },
    {
        "line": 133,
        "fullcodeline": "if (options->attach_flags & LXC_ATTACH_MOVE_TO_CGROUP) {"
    },
    {
        "line": 142,
        "fullcodeline": "if (procfd < 0) {"
    },
    {
        "line": 157,
        "fullcodeline": "if (ret <= 0) {"
    },
    {
        "line": 188,
        "fullcodeline": "if (ret <= 0) {"
    },
    {
        "line": 216,
        "fullcodeline": "if ((options->namespaces & CLONE_NEWNS) && (options->attach_flags & LXC_ATTACH_LSM) && init_ctx->lsm_label) {"
    },
    {
        "line": 250,
        "fullcodeline": "if (procfd >= 0)"
    },
    {
        "line": 257,
        "fullcodeline": "return -1;"
    },
    {
        "line": 272,
        "fullcodeline": "rexit(-1);"
    },
    {
        "line": 285,
        "fullcodeline": "rexit(-1);"
    },
    {
        "line": 292,
        "fullcodeline": "new_cwd = cwd;"
    },
    {
        "line": 318,
        "fullcodeline": "rexit(-1);"
    },
    {
        "line": 332,
        "fullcodeline": "rexit(-1);"
    },
    {
        "line": 165,
        "fullcodeline": "signal(SIGINT, SIG_IGN);"
    },
    {
        "line": 166,
        "fullcodeline": "signal(SIGQUIT, SIG_IGN);"
    },
    {
        "line": 218,
        "fullcodeline": "on_exec = options->attach_flags & LXC_ATTACH_LSM_EXEC ? 1 : 0;"
    },
    {
        "line": 220,
        "fullcodeline": "labelfd = lsm_openat(procfd, attached_pid, on_exec);"
    },
    {
        "line": 225,
        "fullcodeline": "ret = lxc_abstract_unix_send_fd(ipc_sockets[0], labelfd, NULL, 0);"
    },
    {
        "line": 301,
        "fullcodeline": ".ipc_socket = ipc_sockets[1],"
    },
    {
        "line": 302,
        "fullcodeline": ".options = options,"
    },
    {
        "line": 303,
        "fullcodeline": ".init_ctx = init_ctx,"
    },
    {
        "line": 304,
        "fullcodeline": ".exec_function = exec_function,"
    },
    {
        "line": 305,
        "fullcodeline": ".exec_payload = exec_payload,"
    },
    {
        "line": 57,
        "fullcodeline": "return -1;"
    },
    {
        "line": 200,
        "fullcodeline": "\"initialization (2): %s.\", strerror(errno));"
    },
    {
        "line": 211,
        "fullcodeline": "strerror(errno));"
    },
    {
        "line": 221,
        "fullcodeline": "if (labelfd < 0)"
    },
    {
        "line": 255,
        "fullcodeline": "(void) wait_for_pid(to_cleanup_pid);"
    },
    {
        "line": 134,
        "fullcodeline": "if (!cgroup_attach(name, lxcpath, pid))"
    },
    {
        "line": 228,
        "fullcodeline": "strerror(errno));"
    }
]