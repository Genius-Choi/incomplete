[
    {
        "line": 8,
        "fullcodeline": "int ipc_sockets[2];"
    },
    {
        "line": 15,
        "fullcodeline": "init_pid = lxc_cmd_get_init_pid(name, lxcpath);"
    },
    {
        "line": 21,
        "fullcodeline": "init_ctx = lxc_proc_get_context_info(init_pid);"
    },
    {
        "line": 27,
        "fullcodeline": "personality = get_personality(name, lxcpath);"
    },
    {
        "line": 33,
        "fullcodeline": "init_ctx->personality = personality;"
    },
    {
        "line": 38,
        "fullcodeline": "cwd = getcwd(NULL, 0);"
    },
    {
        "line": 82,
        "fullcodeline": "ret = socketpair(PF_LOCAL, SOCK_STREAM | SOCK_CLOEXEC, 0, ipc_sockets);"
    },
    {
        "line": 102,
        "fullcodeline": "pid = fork();"
    },
    {
        "line": 209,
        "fullcodeline": "close(ipc_sockets[0]);"
    },
    {
        "line": 212,
        "fullcodeline": "expected = 0;"
    },
    {
        "line": 213,
        "fullcodeline": "status = -1;"
    },
    {
        "line": 214,
        "fullcodeline": "ret = lxc_read_nointr_expect(ipc_sockets[1], &status, sizeof(status), &expected);"
    },
    {
        "line": 221,
        "fullcodeline": "procfd = open(\"/proc\", O_DIRECTORY | O_RDONLY);"
    },
    {
        "line": 231,
        "fullcodeline": "ret = lxc_attach_to_ns(init_pid, options->namespaces);"
    },
    {
        "line": 243,
        "fullcodeline": "ret = chdir(new_cwd);"
    },
    {
        "line": 246,
        "fullcodeline": "free(cwd);"
    },
    {
        "line": 273,
        "fullcodeline": "ret = lxc_write_nointr(ipc_sockets[1], &pid, sizeof(pid));"
    },
    {
        "line": 287,
        "fullcodeline": "rexit(0);"
    },
    {
        "line": 12,
        "fullcodeline": "if (!options)"
    },
    {
        "line": 16,
        "fullcodeline": "if (init_pid < 0) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (!init_ctx) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (init_ctx->personality < 0) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (!fetch_seccomp(name, lxcpath, init_ctx, options))"
    },
    {
        "line": 43,
        "fullcodeline": "if (options->namespaces == -1) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 104,
        "fullcodeline": "if (pid < 0) {"
    },
    {
        "line": 215,
        "fullcodeline": "if (ret <= 0) {"
    },
    {
        "line": 222,
        "fullcodeline": "if (procfd < 0) {"
    },
    {
        "line": 232,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 244,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 250,
        "fullcodeline": "struct attach_clone_payload payload = {"
    },
    {
        "line": 262,
        "fullcodeline": "pid = lxc_clone(attach_child_main, &payload, CLONE_PARENT);"
    },
    {
        "line": 266,
        "fullcodeline": "if (pid <= 0) {"
    },
    {
        "line": 274,
        "fullcodeline": "if (ret != sizeof(pid)) {"
    },
    {
        "line": 13,
        "fullcodeline": "options = &attach_static_default_options;"
    },
    {
        "line": 17,
        "fullcodeline": "ERROR(\"failed to get the init pid\");"
    },
    {
        "line": 23,
        "fullcodeline": "ERROR(\"failed to get context of the init process, pid = %ld\", (long)init_pid);"
    },
    {
        "line": 29,
        "fullcodeline": "ERROR(\"Failed to get personality of the container\");"
    },
    {
        "line": 30,
        "fullcodeline": "lxc_proc_put_context_info(init_ctx);"
    },
    {
        "line": 36,
        "fullcodeline": "WARN(\"Failed to get seccomp policy\");"
    },
    {
        "line": 44,
        "fullcodeline": "options->namespaces = lxc_cmd_get_clone_flags(name, lxcpath);"
    },
    {
        "line": 84,
        "fullcodeline": "SYSERROR(\"could not set up required IPC mechanism for attaching\");"
    },
    {
        "line": 85,
        "fullcodeline": "free(cwd);"
    },
    {
        "line": 86,
        "fullcodeline": "lxc_proc_put_context_info(init_ctx);"
    },
    {
        "line": 105,
        "fullcodeline": "SYSERROR(\"failed to create first subprocess\");"
    },
    {
        "line": 106,
        "fullcodeline": "free(cwd);"
    },
    {
        "line": 107,
        "fullcodeline": "lxc_proc_put_context_info(init_ctx);"
    },
    {
        "line": 112,
        "fullcodeline": "pid_t to_cleanup_pid = pid;"
    },
    {
        "line": 117,
        "fullcodeline": "close(ipc_sockets[1]);"
    },
    {
        "line": 118,
        "fullcodeline": "free(cwd);"
    },
    {
        "line": 127,
        "fullcodeline": "status = 0;"
    },
    {
        "line": 128,
        "fullcodeline": "ret = lxc_write_nointr(ipc_sockets[0], &status, sizeof(status));"
    },
    {
        "line": 135,
        "fullcodeline": "ret = lxc_read_nointr_expect(ipc_sockets[0], &attached_pid, sizeof(attached_pid), NULL);"
    },
    {
        "line": 149,
        "fullcodeline": "ret = wait_for_pid(pid);"
    },
    {
        "line": 154,
        "fullcodeline": "to_cleanup_pid = attached_pid;"
    },
    {
        "line": 157,
        "fullcodeline": "status = 0;"
    },
    {
        "line": 158,
        "fullcodeline": "ret = lxc_write_nointr(ipc_sockets[0], &status, sizeof(status));"
    },
    {
        "line": 165,
        "fullcodeline": "expected = 1;"
    },
    {
        "line": 166,
        "fullcodeline": "ret = lxc_read_nointr_expect(ipc_sockets[0], &status, sizeof(status), &expected);"
    },
    {
        "line": 174,
        "fullcodeline": "status = 2;"
    },
    {
        "line": 175,
        "fullcodeline": "ret = lxc_write_nointr(ipc_sockets[0], &status, sizeof(status));"
    },
    {
        "line": 182,
        "fullcodeline": "shutdown(ipc_sockets[0], SHUT_RDWR);"
    },
    {
        "line": 183,
        "fullcodeline": "close(ipc_sockets[0]);"
    },
    {
        "line": 184,
        "fullcodeline": "lxc_proc_put_context_info(init_ctx);"
    },
    {
        "line": 191,
        "fullcodeline": "*attached_process = attached_pid;"
    },
    {
        "line": 198,
        "fullcodeline": "shutdown(ipc_sockets[0], SHUT_RDWR);"
    },
    {
        "line": 199,
        "fullcodeline": "close(ipc_sockets[0]);"
    },
    {
        "line": 202,
        "fullcodeline": "lxc_proc_put_context_info(init_ctx);"
    },
    {
        "line": 216,
        "fullcodeline": "ERROR(\"error communicating with child process\");"
    },
    {
        "line": 217,
        "fullcodeline": "shutdown(ipc_sockets[1], SHUT_RDWR);"
    },
    {
        "line": 218,
        "fullcodeline": "rexit(-1);"
    },
    {
        "line": 223,
        "fullcodeline": "SYSERROR(\"Unable to open /proc\");"
    },
    {
        "line": 224,
        "fullcodeline": "shutdown(ipc_sockets[1], SHUT_RDWR);"
    },
    {
        "line": 225,
        "fullcodeline": "rexit(-1);"
    },
    {
        "line": 233,
        "fullcodeline": "ERROR(\"failed to enter the namespace\");"
    },
    {
        "line": 234,
        "fullcodeline": "shutdown(ipc_sockets[1], SHUT_RDWR);"
    },
    {
        "line": 235,
        "fullcodeline": "rexit(-1);"
    },
    {
        "line": 240,
        "fullcodeline": "new_cwd = options->initial_cwd;"
    },
    {
        "line": 245,
        "fullcodeline": "WARN(\"could not change directory to '%s'\", new_cwd);"
    },
    {
        "line": 267,
        "fullcodeline": "SYSERROR(\"failed to create subprocess\");"
    },
    {
        "line": 268,
        "fullcodeline": "shutdown(ipc_sockets[1], SHUT_RDWR);"
    },
    {
        "line": 269,
        "fullcodeline": "rexit(-1);"
    },
    {
        "line": 281,
        "fullcodeline": "ERROR(\"error using IPC to notify main process of pid of the attached process\");"
    },
    {
        "line": 282,
        "fullcodeline": "shutdown(ipc_sockets[1], SHUT_RDWR);"
    },
    {
        "line": 283,
        "fullcodeline": "rexit(-1);"
    },
    {
        "line": 18,
        "fullcodeline": "return -1;"
    },
    {
        "line": 24,
        "fullcodeline": "return -1;"
    },
    {
        "line": 31,
        "fullcodeline": "return -1;"
    },
    {
        "line": 46,
        "fullcodeline": "if (options->namespaces == -1) {"
    },
    {
        "line": 87,
        "fullcodeline": "return -1;"
    },
    {
        "line": 108,
        "fullcodeline": "return -1;"
    },
    {
        "line": 121,
        "fullcodeline": "if (options->attach_flags & LXC_ATTACH_MOVE_TO_CGROUP) {"
    },
    {
        "line": 129,
        "fullcodeline": "if (ret <= 0) {"
    },
    {
        "line": 136,
        "fullcodeline": "if (ret <= 0) {"
    },
    {
        "line": 143,
        "fullcodeline": "if (options->stdin_fd == 0) {"
    },
    {
        "line": 150,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 159,
        "fullcodeline": "if (ret <= 0) {"
    },
    {
        "line": 167,
        "fullcodeline": "if (ret <= 0) {"
    },
    {
        "line": 176,
        "fullcodeline": "if (ret <= 0) {"
    },
    {
        "line": 203,
        "fullcodeline": "return -1;"
    },
    {
        "line": 242,
        "fullcodeline": "new_cwd = cwd;"
    },
    {
        "line": 47,
        "fullcodeline": "ERROR(\"failed to automatically determine the \""
    },
    {
        "line": 49,
        "fullcodeline": "free(cwd);"
    },
    {
        "line": 50,
        "fullcodeline": "lxc_proc_put_context_info(init_ctx);"
    },
    {
        "line": 130,
        "fullcodeline": "ERROR(\"error using IPC to notify attached process for initialization (0)\");"
    },
    {
        "line": 144,
        "fullcodeline": "signal(SIGINT, SIG_IGN);"
    },
    {
        "line": 145,
        "fullcodeline": "signal(SIGQUIT, SIG_IGN);"
    },
    {
        "line": 160,
        "fullcodeline": "ERROR(\"error using IPC to notify attached process for initialization (0)\");"
    },
    {
        "line": 177,
        "fullcodeline": "ERROR(\"error using IPC to notify attached process for initialization (2)\");"
    },
    {
        "line": 201,
        "fullcodeline": "(void) wait_for_pid(to_cleanup_pid);"
    },
    {
        "line": 251,
        "fullcodeline": ".ipc_socket = ipc_sockets[1],"
    },
    {
        "line": 252,
        "fullcodeline": ".options = options,"
    },
    {
        "line": 253,
        "fullcodeline": ".init_ctx = init_ctx,"
    },
    {
        "line": 254,
        "fullcodeline": ".exec_function = exec_function,"
    },
    {
        "line": 255,
        "fullcodeline": ".exec_payload = exec_payload,"
    },
    {
        "line": 256,
        "fullcodeline": ".procfd = procfd"
    },
    {
        "line": 51,
        "fullcodeline": "return -1;"
    },
    {
        "line": 122,
        "fullcodeline": "if (!cgroup_attach(name, lxcpath, pid))"
    },
    {
        "line": 137,
        "fullcodeline": "if (ret != 0)"
    },
    {
        "line": 168,
        "fullcodeline": "if (ret != 0)"
    },
    {
        "line": 138,
        "fullcodeline": "ERROR(\"error using IPC to receive pid of attached process\");"
    },
    {
        "line": 169,
        "fullcodeline": "ERROR(\"error using IPC to receive notification from attached process (1)\");"
    }
]