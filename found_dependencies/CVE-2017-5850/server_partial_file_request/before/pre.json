[
    {
        "line": 4,
        "fullcodeline": "struct server_config\t*srv_conf = clt->clt_srv_conf;"
    },
    {
        "line": 5,
        "fullcodeline": "struct http_descriptor\t*resp = clt->clt_descresp;"
    },
    {
        "line": 6,
        "fullcodeline": "struct http_descriptor\t*desc = clt->clt_descreq;"
    },
    {
        "line": 9,
        "fullcodeline": "struct evbuffer\t\t*evb = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "int\t\t\t code = 500, fd = -1, i, nranges, ret;"
    },
    {
        "line": 13,
        "fullcodeline": "char\t\t\t content_range[64];"
    },
    {
        "line": 14,
        "fullcodeline": "const char\t\t*errstr = NULL;"
    },
    {
        "line": 32,
        "fullcodeline": "media = media_find_config(env, srv_conf, path);"
    },
    {
        "line": 95,
        "fullcodeline": "fd = -1;"
    },
    {
        "line": 112,
        "fullcodeline": "bufferevent_enable(clt->clt_bev, EV_READ|EV_WRITE);"
    },
    {
        "line": 117,
        "fullcodeline": "clt->clt_done = 0;"
    },
    {
        "line": 124,
        "fullcodeline": "bufferevent_disable(clt->clt_bev, EV_READ|EV_WRITE);"
    },
    {
        "line": 126,
        "fullcodeline": "clt->clt_bev = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "if (desc->http_method != HTTP_METHOD_GET)"
    },
    {
        "line": 20,
        "fullcodeline": "if ((range = parse_range(range_str, st->st_size, &nranges)) == NULL) {"
    },
    {
        "line": 33,
        "fullcodeline": "if ((evb = evbuffer_new()) == NULL) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (nranges == 1) {"
    },
    {
        "line": 97,
        "fullcodeline": "ret = server_response_http(clt, 206, media, content_length,"
    },
    {
        "line": 128,
        "fullcodeline": "if (evb != NULL)"
    },
    {
        "line": 130,
        "fullcodeline": "if (fd != -1)"
    },
    {
        "line": 132,
        "fullcodeline": "if (errstr == NULL)"
    },
    {
        "line": 135,
        "fullcodeline": "return (-1);"
    },
    {
        "line": 21,
        "fullcodeline": "code = 416;"
    },
    {
        "line": 24,
        "fullcodeline": "errstr = content_range;"
    },
    {
        "line": 29,
        "fullcodeline": "if ((fd = open(path, O_RDONLY)) == -1)"
    },
    {
        "line": 34,
        "fullcodeline": "errstr = \"failed to allocate file buffer\";"
    },
    {
        "line": 46,
        "fullcodeline": "content_length = range->end - range->start + 1;"
    },
    {
        "line": 98,
        "fullcodeline": "MINIMUM(time(NULL), st->st_mtim.tv_sec));"
    },
    {
        "line": 109,
        "fullcodeline": "if (server_bufferevent_write_buffer(clt, evb) == -1)"
    },
    {
        "line": 114,
        "fullcodeline": "clt->clt_toread = TOREAD_HTTP_HEADER;"
    },
    {
        "line": 133,
        "fullcodeline": "errstr = strerror(errno);"
    },
    {
        "line": 18,
        "fullcodeline": "return server_file_request(env, clt, path, st);"
    },
    {
        "line": 22,
        "fullcodeline": "(void)snprintf(content_range, sizeof(content_range),"
    },
    {
        "line": 39,
        "fullcodeline": "(void)snprintf(content_range, sizeof(content_range),"
    },
    {
        "line": 42,
        "fullcodeline": "if (kv_add(&resp->http_headers, \"Content-Range\","
    },
    {
        "line": 51,
        "fullcodeline": "content_length = 0;"
    },
    {
        "line": 52,
        "fullcodeline": "boundary = arc4random();"
    },
    {
        "line": 83,
        "fullcodeline": "content_length += i;"
    },
    {
        "line": 91,
        "fullcodeline": "media = &multipart_media;"
    },
    {
        "line": 116,
        "fullcodeline": "clt->clt_toread = TOREAD_HTTP_NONE;"
    },
    {
        "line": 47,
        "fullcodeline": "if (buffer_add_range(fd, evb, range) == 0)"
    },
    {
        "line": 86,
        "fullcodeline": "(void)strlcpy(multipart_media.media_type, \"multipart\","
    },
    {
        "line": 88,
        "fullcodeline": "(void)snprintf(multipart_media.media_subtype,"
    },
    {
        "line": 59,
        "fullcodeline": "content_length += i;"
    },
    {
        "line": 65,
        "fullcodeline": "content_length += i;"
    },
    {
        "line": 71,
        "fullcodeline": "content_length += i;"
    },
    {
        "line": 75,
        "fullcodeline": "content_length += range->end - range->start + 1;"
    },
    {
        "line": 76,
        "fullcodeline": "range++;"
    },
    {
        "line": 79,
        "fullcodeline": "if ((i = evbuffer_add_printf(evb, \"\\r\\n--%ud--\\r\\n\","
    },
    {
        "line": 80,
        "fullcodeline": "boundary)) == -1)"
    },
    {
        "line": 55,
        "fullcodeline": "if ((i = evbuffer_add_printf(evb, \"\\r\\n--%ud\\r\\n\","
    },
    {
        "line": 56,
        "fullcodeline": "boundary)) == -1)"
    },
    {
        "line": 60,
        "fullcodeline": "if ((i = evbuffer_add_printf(evb,"
    },
    {
        "line": 62,
        "fullcodeline": "media->media_type, media->media_subtype)) == -1)"
    },
    {
        "line": 66,
        "fullcodeline": "if ((i = evbuffer_add_printf(evb,"
    },
    {
        "line": 68,
        "fullcodeline": "range->start, range->end, st->st_size)) == -1)"
    },
    {
        "line": 72,
        "fullcodeline": "if (buffer_add_range(fd, evb, range) == 0)"
    }
]