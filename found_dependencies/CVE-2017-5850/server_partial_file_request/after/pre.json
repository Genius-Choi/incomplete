[
    {
        "line": 4,
        "fullcodeline": "struct server_config\t*srv_conf = clt->clt_srv_conf;"
    },
    {
        "line": 5,
        "fullcodeline": "struct http_descriptor\t*resp = clt->clt_descresp;"
    },
    {
        "line": 6,
        "fullcodeline": "struct http_descriptor\t*desc = clt->clt_descreq;"
    },
    {
        "line": 8,
        "fullcodeline": "struct range_data\t*r = &clt->clt_ranges;"
    },
    {
        "line": 10,
        "fullcodeline": "size_t\t\t\t content_length = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "int\t\t\t code = 500, fd = -1, i, nranges, ret;"
    },
    {
        "line": 12,
        "fullcodeline": "char\t\t\t content_range[64];"
    },
    {
        "line": 13,
        "fullcodeline": "const char\t\t*errstr = NULL;"
    },
    {
        "line": 31,
        "fullcodeline": "media = media_find_config(env, srv_conf, path);"
    },
    {
        "line": 82,
        "fullcodeline": "r->range_toread = TOREAD_HTTP_RANGE;"
    },
    {
        "line": 97,
        "fullcodeline": "clt->clt_fd = fd;"
    },
    {
        "line": 101,
        "fullcodeline": "clt->clt_srvbev_throttled = 0;"
    },
    {
        "line": 102,
        "fullcodeline": "clt->clt_srvbev = bufferevent_new(clt->clt_fd, server_read_httprange,"
    },
    {
        "line": 110,
        "fullcodeline": "bufferevent_setwatermark(clt->clt_srvbev, EV_READ, 0,"
    },
    {
        "line": 113,
        "fullcodeline": "bufferevent_settimeout(clt->clt_srvbev,"
    },
    {
        "line": 115,
        "fullcodeline": "bufferevent_enable(clt->clt_srvbev, EV_READ);"
    },
    {
        "line": 116,
        "fullcodeline": "bufferevent_disable(clt->clt_bev, EV_READ);"
    },
    {
        "line": 122,
        "fullcodeline": "bufferevent_disable(clt->clt_bev, EV_READ|EV_WRITE);"
    },
    {
        "line": 124,
        "fullcodeline": "clt->clt_bev = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "if (desc->http_method != HTTP_METHOD_GET)"
    },
    {
        "line": 34,
        "fullcodeline": "if (nranges == 1) {"
    },
    {
        "line": 84,
        "fullcodeline": "ret = server_response_http(clt, 206, media, content_length,"
    },
    {
        "line": 98,
        "fullcodeline": "if (clt->clt_srvbev != NULL)"
    },
    {
        "line": 104,
        "fullcodeline": "if (clt->clt_srvbev == NULL) {"
    },
    {
        "line": 126,
        "fullcodeline": "if (fd != -1)"
    },
    {
        "line": 128,
        "fullcodeline": "if (errstr == NULL)"
    },
    {
        "line": 131,
        "fullcodeline": "return (-1);"
    },
    {
        "line": 19,
        "fullcodeline": "if ((nranges = parse_ranges(clt, range_str, st->st_size)) < 1) {"
    },
    {
        "line": 20,
        "fullcodeline": "code = 416;"
    },
    {
        "line": 23,
        "fullcodeline": "errstr = content_range;"
    },
    {
        "line": 28,
        "fullcodeline": "if ((fd = open(path, O_RDONLY)) == -1)"
    },
    {
        "line": 35,
        "fullcodeline": "range = &r->range[0];"
    },
    {
        "line": 43,
        "fullcodeline": "range = &r->range[0];"
    },
    {
        "line": 44,
        "fullcodeline": "content_length += range->end - range->start + 1;"
    },
    {
        "line": 85,
        "fullcodeline": "MINIMUM(time(NULL), st->st_mtim.tv_sec));"
    },
    {
        "line": 99,
        "fullcodeline": "bufferevent_free(clt->clt_srvbev);"
    },
    {
        "line": 105,
        "fullcodeline": "errstr = \"failed to allocate file buffer event\";"
    },
    {
        "line": 129,
        "fullcodeline": "errstr = strerror(errno);"
    },
    {
        "line": 17,
        "fullcodeline": "return server_file_request(env, clt, path, st);"
    },
    {
        "line": 21,
        "fullcodeline": "(void)snprintf(content_range, sizeof(content_range),"
    },
    {
        "line": 36,
        "fullcodeline": "(void)snprintf(content_range, sizeof(content_range),"
    },
    {
        "line": 39,
        "fullcodeline": "if (kv_add(&resp->http_headers, \"Content-Range\","
    },
    {
        "line": 47,
        "fullcodeline": "arc4random_buf(&clt->clt_boundary, sizeof(clt->clt_boundary));"
    },
    {
        "line": 70,
        "fullcodeline": "content_length += ret;"
    },
    {
        "line": 78,
        "fullcodeline": "media = &multipart_media;"
    },
    {
        "line": 50,
        "fullcodeline": "for (i = 0; i < nranges; i++) {"
    },
    {
        "line": 73,
        "fullcodeline": "(void)strlcpy(multipart_media.media_type, \"multipart\","
    },
    {
        "line": 75,
        "fullcodeline": "(void)snprintf(multipart_media.media_subtype,"
    },
    {
        "line": 51,
        "fullcodeline": "range = &r->range[i];"
    },
    {
        "line": 64,
        "fullcodeline": "content_length += ret + range->end - range->start + 1;"
    },
    {
        "line": 67,
        "fullcodeline": "if ((ret = snprintf(NULL, 0, \"\\r\\n--%llu--\\r\\n\","
    },
    {
        "line": 54,
        "fullcodeline": "if ((ret = snprintf(NULL, 0,"
    }
]