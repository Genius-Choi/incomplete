[
    {
        "line": 3,
        "fullcodeline": "struct device *idev = &interface->dev;"
    },
    {
        "line": 4,
        "fullcodeline": "struct usb_device *udev = interface_to_usbdev(interface);"
    },
    {
        "line": 5,
        "fullcodeline": "struct lego_usb_tower *dev = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "int retval = -ENOMEM;"
    },
    {
        "line": 15,
        "fullcodeline": "dev = kmalloc (sizeof(struct lego_usb_tower), GFP_KERNEL);"
    },
    {
        "line": 20,
        "fullcodeline": "mutex_init(&dev->lock);"
    },
    {
        "line": 22,
        "fullcodeline": "dev->udev = udev;"
    },
    {
        "line": 23,
        "fullcodeline": "dev->open_count = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "dev->read_buffer = NULL;"
    },
    {
        "line": 26,
        "fullcodeline": "dev->read_buffer_length = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "dev->read_packet_length = 0;"
    },
    {
        "line": 28,
        "fullcodeline": "spin_lock_init (&dev->read_buffer_lock);"
    },
    {
        "line": 29,
        "fullcodeline": "dev->packet_timeout_jiffies = msecs_to_jiffies(packet_timeout);"
    },
    {
        "line": 30,
        "fullcodeline": "dev->read_last_arrival = jiffies;"
    },
    {
        "line": 32,
        "fullcodeline": "init_waitqueue_head (&dev->read_wait);"
    },
    {
        "line": 33,
        "fullcodeline": "init_waitqueue_head (&dev->write_wait);"
    },
    {
        "line": 35,
        "fullcodeline": "dev->interrupt_in_buffer = NULL;"
    },
    {
        "line": 36,
        "fullcodeline": "dev->interrupt_in_endpoint = NULL;"
    },
    {
        "line": 37,
        "fullcodeline": "dev->interrupt_in_urb = NULL;"
    },
    {
        "line": 38,
        "fullcodeline": "dev->interrupt_in_running = 0;"
    },
    {
        "line": 39,
        "fullcodeline": "dev->interrupt_in_done = 0;"
    },
    {
        "line": 41,
        "fullcodeline": "dev->interrupt_out_buffer = NULL;"
    },
    {
        "line": 42,
        "fullcodeline": "dev->interrupt_out_endpoint = NULL;"
    },
    {
        "line": 43,
        "fullcodeline": "dev->interrupt_out_urb = NULL;"
    },
    {
        "line": 44,
        "fullcodeline": "dev->interrupt_out_busy = 0;"
    },
    {
        "line": 46,
        "fullcodeline": "iface_desc = interface->cur_altsetting;"
    },
    {
        "line": 68,
        "fullcodeline": "dev->read_buffer = kmalloc (read_buffer_size, GFP_KERNEL);"
    },
    {
        "line": 71,
        "fullcodeline": "dev->interrupt_in_buffer = kmalloc (usb_endpoint_maxp(dev->interrupt_in_endpoint), GFP_KERNEL);"
    },
    {
        "line": 74,
        "fullcodeline": "dev->interrupt_in_urb = usb_alloc_urb(0, GFP_KERNEL);"
    },
    {
        "line": 77,
        "fullcodeline": "dev->interrupt_out_buffer = kmalloc (write_buffer_size, GFP_KERNEL);"
    },
    {
        "line": 80,
        "fullcodeline": "dev->interrupt_out_urb = usb_alloc_urb(0, GFP_KERNEL);"
    },
    {
        "line": 83,
        "fullcodeline": "dev->interrupt_in_interval = interrupt_in_interval ? interrupt_in_interval : dev->interrupt_in_endpoint->bInterval;"
    },
    {
        "line": 84,
        "fullcodeline": "dev->interrupt_out_interval = interrupt_out_interval ? interrupt_out_interval : dev->interrupt_out_endpoint->bInterval;"
    },
    {
        "line": 87,
        "fullcodeline": "result = usb_control_msg (udev,"
    },
    {
        "line": 101,
        "fullcodeline": "dev_info(&interface->dev, \"LEGO USB Tower firmware version is %d.%d \""
    },
    {
        "line": 107,
        "fullcodeline": "usb_set_intfdata (interface, dev);"
    },
    {
        "line": 109,
        "fullcodeline": "retval = usb_register_dev (interface, &tower_class);"
    },
    {
        "line": 117,
        "fullcodeline": "dev->minor = interface->minor;"
    },
    {
        "line": 120,
        "fullcodeline": "dev_info(&interface->dev, \"LEGO USB Tower #%d now attached to major \""
    },
    {
        "line": 128,
        "fullcodeline": "tower_delete(dev);"
    },
    {
        "line": 17,
        "fullcodeline": "if (!dev)"
    },
    {
        "line": 49,
        "fullcodeline": "for (i = 0; i < iface_desc->desc.bNumEndpoints; ++i) {"
    },
    {
        "line": 59,
        "fullcodeline": "if(dev->interrupt_in_endpoint == NULL) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (dev->interrupt_out_endpoint == NULL) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (!dev->read_buffer)"
    },
    {
        "line": 72,
        "fullcodeline": "if (!dev->interrupt_in_buffer)"
    },
    {
        "line": 75,
        "fullcodeline": "if (!dev->interrupt_in_urb)"
    },
    {
        "line": 78,
        "fullcodeline": "if (!dev->interrupt_out_buffer)"
    },
    {
        "line": 81,
        "fullcodeline": "if (!dev->interrupt_out_urb)"
    },
    {
        "line": 96,
        "fullcodeline": "if (result < 0) {"
    },
    {
        "line": 121,
        "fullcodeline": "\"%d minor %d\\n\", (dev->minor - LEGO_USB_TOWER_MINOR_BASE),"
    },
    {
        "line": 60,
        "fullcodeline": "dev_err(idev, \"interrupt in endpoint not found\\n\");"
    },
    {
        "line": 64,
        "fullcodeline": "dev_err(idev, \"interrupt out endpoint not found\\n\");"
    },
    {
        "line": 88,
        "fullcodeline": "usb_rcvctrlpipe(udev, 0),"
    },
    {
        "line": 90,
        "fullcodeline": "USB_TYPE_VENDOR | USB_DIR_IN | USB_RECIP_DEVICE,"
    },
    {
        "line": 97,
        "fullcodeline": "dev_err(idev, \"LEGO USB Tower get version control request failed\\n\");"
    },
    {
        "line": 98,
        "fullcodeline": "retval = result;"
    },
    {
        "line": 113,
        "fullcodeline": "dev_err(idev, \"Not able to get a minor for this device.\\n\");"
    },
    {
        "line": 114,
        "fullcodeline": "usb_set_intfdata (interface, NULL);"
    },
    {
        "line": 52,
        "fullcodeline": "if (usb_endpoint_xfer_int(endpoint)) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (usb_endpoint_dir_in(endpoint))"
    },
    {
        "line": 54,
        "fullcodeline": "dev->interrupt_in_endpoint = endpoint;"
    },
    {
        "line": 56,
        "fullcodeline": "dev->interrupt_out_endpoint = endpoint;"
    }
]