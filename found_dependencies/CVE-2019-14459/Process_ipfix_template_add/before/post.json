[
    {
        "line": 10,
        "fullcodeline": "uint32_t num_extensions = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "ipfix_template_record = (ipfix_template_record_t *)DataPtr;"
    },
    {
        "line": 21,
        "fullcodeline": "size_left \t\t-= 4;"
    },
    {
        "line": 23,
        "fullcodeline": "table_id = ntohs(ipfix_template_record->TemplateID);"
    },
    {
        "line": 24,
        "fullcodeline": "count\t = ntohs(ipfix_template_record->FieldCount);"
    },
    {
        "line": 26,
        "fullcodeline": "dbg_printf(\"\\n[%u] Template ID: %u\\n\", exporter->info.id, table_id);"
    },
    {
        "line": 27,
        "fullcodeline": "dbg_printf(\"FieldCount: %u buffersize: %u\\n\", count, size_left);"
    },
    {
        "line": 31,
        "fullcodeline": "memset((void *)cache.common_extensions, 0,  (Max_num_extensions+1)*sizeof(uint32_t));"
    },
    {
        "line": 32,
        "fullcodeline": "memset((void *)cache.lookup_info, 0, 65536 * sizeof(struct element_param_s));"
    },
    {
        "line": 40,
        "fullcodeline": "cache.input_order = calloc(count, sizeof(struct order_s));"
    },
    {
        "line": 47,
        "fullcodeline": "cache.input_count = count;"
    },
    {
        "line": 50,
        "fullcodeline": "size_required   = 4*count;"
    },
    {
        "line": 60,
        "fullcodeline": "NextElement \t = (ipfix_template_elements_std_t *)ipfix_template_record->elements;"
    },
    {
        "line": 104,
        "fullcodeline": "dbg_printf(\"Processed: %u\\n\", size_required);"
    },
    {
        "line": 171,
        "fullcodeline": "size_left -= size_required;"
    },
    {
        "line": 172,
        "fullcodeline": "DataPtr = DataPtr + size_required+4;\t// +4 for header"
    },
    {
        "line": 178,
        "fullcodeline": "free(cache.input_order);"
    },
    {
        "line": 179,
        "fullcodeline": "cache.input_order = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "if ( size_left && size_left < 4 ) {"
    },
    {
        "line": 33,
        "fullcodeline": "for (i=1; ipfix_element_map[i].id != 0; i++ ) {"
    },
    {
        "line": 41,
        "fullcodeline": "if ( !cache.input_order ) {"
    },
    {
        "line": 51,
        "fullcodeline": "if ( size_left < size_required ) {"
    },
    {
        "line": 61,
        "fullcodeline": "for ( i=0; i<count; i++ ) {"
    },
    {
        "line": 107,
        "fullcodeline": "if ( compact_input_order() ) {"
    },
    {
        "line": 173,
        "fullcodeline": "if ( size_left < 4 ) {"
    },
    {
        "line": 13,
        "fullcodeline": "LogError(\"Process_ipfix [%u] Template size error at %s line %u\" ,"
    },
    {
        "line": 15,
        "fullcodeline": "size_left = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "uint32_t Type = ipfix_element_map[i].id;"
    },
    {
        "line": 37,
        "fullcodeline": "cache.lookup_info[Type].index   = i;"
    },
    {
        "line": 42,
        "fullcodeline": "LogError(\"Process_ipfix: Panic! malloc(): %s line %d: %s\", __FILE__, __LINE__, strerror (errno));"
    },
    {
        "line": 43,
        "fullcodeline": "size_left = 0;"
    },
    {
        "line": 53,
        "fullcodeline": "LogError(\"Process_ipfix: [%u] Not enough data for template elements! required: %i, left: %u\","
    },
    {
        "line": 55,
        "fullcodeline": "dbg_printf(\"ERROR: Not enough data for template elements! required: %i, left: %u\", size_required, size_left);"
    },
    {
        "line": 66,
        "fullcodeline": "Type   = ntohs(NextElement->Type);"
    },
    {
        "line": 67,
        "fullcodeline": "Length = ntohs(NextElement->Length);"
    },
    {
        "line": 68,
        "fullcodeline": "Enterprise = Type & 0x8000 ? 1 : 0;"
    },
    {
        "line": 69,
        "fullcodeline": "Type = Type & 0x7FFF;"
    },
    {
        "line": 71,
        "fullcodeline": "ext_id = MapElement(Type, Length, i);"
    },
    {
        "line": 121,
        "fullcodeline": "extension_descriptor[EX_ROUTER_ID].enabled = 0;"
    },
    {
        "line": 153,
        "fullcodeline": "translation_table = setup_translation_table(exporter, table_id);"
    },
    {
        "line": 175,
        "fullcodeline": "dbg_printf(\"Skip %u bytes padding\\n\", size_left);"
    },
    {
        "line": 176,
        "fullcodeline": "size_left = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "exporter->info.id, __FILE__, __LINE__, strerror (errno));"
    },
    {
        "line": 75,
        "fullcodeline": "if ( ext_id && extension_descriptor[ext_id].enabled ) {"
    },
    {
        "line": 162,
        "fullcodeline": "if ( !reorder_sequencer(translation_table) ) {"
    },
    {
        "line": 168,
        "fullcodeline": "dbg_printf(\"Template does not contain any common fields - skip\\n\");"
    },
    {
        "line": 83,
        "fullcodeline": "ipfix_template_elements_e_t *e = (ipfix_template_elements_e_t *)NextElement;"
    },
    {
        "line": 84,
        "fullcodeline": "size_required += 4;\t// ad 4 for enterprise value"
    },
    {
        "line": 96,
        "fullcodeline": "e++;"
    },
    {
        "line": 97,
        "fullcodeline": "NextElement = (ipfix_template_elements_std_t *)e;"
    },
    {
        "line": 116,
        "fullcodeline": "dbg_printf(\"Add sending router IP address (%s) => Extension: %u\\n\","
    },
    {
        "line": 139,
        "fullcodeline": "dbg_printf(\"Force add packet received time, Extension: %u\\n\", EX_RECEIVED);"
    },
    {
        "line": 156,
        "fullcodeline": "dbg_printf(\"Translation Table changed! Add extension map ID: %i\\n\", translation_table->extension_info.map->map_id);"
    },
    {
        "line": 157,
        "fullcodeline": "AddExtensionMap(fs, translation_table->extension_info.map);"
    },
    {
        "line": 158,
        "fullcodeline": "translation_table->extension_map_changed = 0;"
    },
    {
        "line": 159,
        "fullcodeline": "dbg_printf(\"Translation Table added! map ID: %i\\n\", translation_table->extension_info.map->map_id);"
    },
    {
        "line": 163,
        "fullcodeline": "LogError(\"Process_ipfix: [%u] Failed to reorder sequencer. Remove table id: %u\","
    },
    {
        "line": 165,
        "fullcodeline": "remove_translation_table(fs, exporter, table_id);"
    },
    {
        "line": 76,
        "fullcodeline": "if ( cache.common_extensions[ext_id] == 0 ) {"
    },
    {
        "line": 85,
        "fullcodeline": "if ( size_left < size_required ) {"
    },
    {
        "line": 91,
        "fullcodeline": "if ( ntohl(e->EnterpriseNumber) == IPFIX_ReverseInformationElement ) {"
    },
    {
        "line": 99,
        "fullcodeline": "dbg_printf(\" [%i] Enterprise: 0, Type: %u, Length %u\\n\", i, Type, Length);"
    },
    {
        "line": 100,
        "fullcodeline": "NextElement++;"
    },
    {
        "line": 112,
        "fullcodeline": "if ( cache.common_extensions[EX_ROUTER_IP_v4] == 0 ) {"
    },
    {
        "line": 117,
        "fullcodeline": "fs->sa_family == PF_INET6 ? \"ipv6\" : \"ipv4\", EX_ROUTER_IP_v4);"
    },
    {
        "line": 135,
        "fullcodeline": "if ( cache.common_extensions[EX_RECEIVED] == 0 ) {"
    },
    {
        "line": 35,
        "fullcodeline": "if ( ipfix_element_map[i].id == ipfix_element_map[i-1].id )"
    },
    {
        "line": 77,
        "fullcodeline": "cache.common_extensions[ext_id] = 1;"
    },
    {
        "line": 78,
        "fullcodeline": "num_extensions++;"
    },
    {
        "line": 86,
        "fullcodeline": "LogError(\"Process_ipfix: [%u] Not enough data for template elements! required: %i, left: %u\","
    },
    {
        "line": 88,
        "fullcodeline": "dbg_printf(\"ERROR: Not enough data for template elements! required: %i, left: %u\", size_required, size_left);"
    },
    {
        "line": 92,
        "fullcodeline": "dbg_printf(\" [%i] Enterprise: 1, Type: %u, Length %u Reverse Information Element: %u\\n\", i, Type, Length, ntohl(e->EnterpriseNumber));"
    },
    {
        "line": 113,
        "fullcodeline": "cache.common_extensions[EX_ROUTER_IP_v4] = 1;"
    },
    {
        "line": 114,
        "fullcodeline": "num_extensions++;"
    },
    {
        "line": 136,
        "fullcodeline": "cache.common_extensions[EX_RECEIVED] = 1;"
    },
    {
        "line": 137,
        "fullcodeline": "num_extensions++;"
    },
    {
        "line": 94,
        "fullcodeline": "dbg_printf(\" [%i] Enterprise: 1, Type: %u, Length %u EnterpriseNumber: %u\\n\", i, Type, Length, ntohl(e->EnterpriseNumber));"
    }
]