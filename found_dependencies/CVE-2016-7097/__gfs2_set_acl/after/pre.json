[
    {
        "line": 6,
        "fullcodeline": "const char *name = gfs2_acl_name(type);"
    },
    {
        "line": 36,
        "fullcodeline": "error = __gfs2_xattr_set(inode, name, data, len, 0, GFS2_EATYPE_SYS);"
    },
    {
        "line": 8,
        "fullcodeline": "if (acl && acl->a_count > GFS2_ACL_MAX_ENTRIES(GFS2_SB(inode)))"
    },
    {
        "line": 11,
        "fullcodeline": "if (type == ACL_TYPE_ACCESS) {"
    },
    {
        "line": 12,
        "fullcodeline": "umode_t mode = inode->i_mode;"
    },
    {
        "line": 14,
        "fullcodeline": "error = posix_acl_update_mode(inode, &inode->i_mode, &acl);"
    },
    {
        "line": 22,
        "fullcodeline": "len = posix_acl_to_xattr(&init_user_ns, acl, NULL, 0);"
    },
    {
        "line": 25,
        "fullcodeline": "data = kmalloc(len, GFP_NOFS);"
    },
    {
        "line": 28,
        "fullcodeline": "error = posix_acl_to_xattr(&init_user_ns, acl, data, len);"
    },
    {
        "line": 9,
        "fullcodeline": "return -E2BIG;"
    },
    {
        "line": 17,
        "fullcodeline": "if (mode != inode->i_mode)"
    },
    {
        "line": 23,
        "fullcodeline": "if (len == 0)"
    },
    {
        "line": 26,
        "fullcodeline": "if (data == NULL)"
    },
    {
        "line": 29,
        "fullcodeline": "if (error < 0)"
    },
    {
        "line": 32,
        "fullcodeline": "data = NULL;"
    },
    {
        "line": 33,
        "fullcodeline": "len = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "mark_inode_dirty(inode);"
    },
    {
        "line": 27,
        "fullcodeline": "return -ENOMEM;"
    }
]