[
    {
        "line": 5,
        "fullcodeline": "posix_acl_xattr_header *header = (posix_acl_xattr_header *)value;"
    },
    {
        "line": 6,
        "fullcodeline": "posix_acl_xattr_entry *entry = (posix_acl_xattr_entry *)(header+1), *end;"
    },
    {
        "line": 18,
        "fullcodeline": "count = posix_acl_xattr_count(size);"
    },
    {
        "line": 11,
        "fullcodeline": "if (!value)"
    },
    {
        "line": 13,
        "fullcodeline": "if (size < sizeof(posix_acl_xattr_header))"
    },
    {
        "line": 15,
        "fullcodeline": "if (header->a_version != cpu_to_le32(POSIX_ACL_XATTR_VERSION))"
    },
    {
        "line": 19,
        "fullcodeline": "if (count < 0)"
    },
    {
        "line": 21,
        "fullcodeline": "if (count == 0)"
    },
    {
        "line": 24,
        "fullcodeline": "for (end = entry + count; entry != end; entry++) {"
    },
    {
        "line": 25,
        "fullcodeline": "switch(le16_to_cpu(entry->e_tag)) {"
    },
    {
        "line": 27,
        "fullcodeline": "uid = make_kuid(from, le32_to_cpu(entry->e_id));"
    },
    {
        "line": 28,
        "fullcodeline": "entry->e_id = cpu_to_le32(from_kuid(to, uid));"
    },
    {
        "line": 31,
        "fullcodeline": "gid = make_kgid(from, le32_to_cpu(entry->e_id));"
    },
    {
        "line": 32,
        "fullcodeline": "entry->e_id = cpu_to_le32(from_kgid(to, gid));"
    }
]