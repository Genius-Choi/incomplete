[
    {
        "line": 3,
        "fullcodeline": "png_structp  png_ptr = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "png_infop    info_ptr = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "png_ptr = png_create_read_struct(PNG_LIBPNG_VER_STRING, mainprog_ptr,"
    },
    {
        "line": 14,
        "fullcodeline": "info_ptr = png_create_info_struct(png_ptr);"
    },
    {
        "line": 36,
        "fullcodeline": "png_set_read_user_chunk_fn(png_ptr, &mainprog_ptr->chunks, read_chunk_callback);"
    },
    {
        "line": 38,
        "fullcodeline": "struct rwpng_read_data read_data = {infile, 0};"
    },
    {
        "line": 39,
        "fullcodeline": "png_set_read_fn(png_ptr, &read_data, user_read_data);"
    },
    {
        "line": 41,
        "fullcodeline": "png_read_info(png_ptr, info_ptr);  /* read all PNG info up to image data */"
    },
    {
        "line": 47,
        "fullcodeline": "png_get_IHDR(png_ptr, info_ptr, &mainprog_ptr->width, &mainprog_ptr->height,"
    },
    {
        "line": 83,
        "fullcodeline": "double gamma = 0.45455;"
    },
    {
        "line": 101,
        "fullcodeline": "png_set_interlace_handling(png_ptr);"
    },
    {
        "line": 106,
        "fullcodeline": "png_read_update_info(png_ptr, info_ptr);"
    },
    {
        "line": 108,
        "fullcodeline": "rowbytes = png_get_rowbytes(png_ptr, info_ptr);"
    },
    {
        "line": 116,
        "fullcodeline": "png_bytepp row_pointers = rwpng_create_row_pointers(info_ptr, png_ptr, mainprog_ptr->rgba_data, mainprog_ptr->height, 0);"
    },
    {
        "line": 120,
        "fullcodeline": "png_read_image(png_ptr, row_pointers);"
    },
    {
        "line": 125,
        "fullcodeline": "png_read_end(png_ptr, NULL);"
    },
    {
        "line": 10,
        "fullcodeline": "if (!png_ptr) {"
    },
    {
        "line": 15,
        "fullcodeline": "if (!info_ptr) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (png_get_valid(png_ptr, info_ptr, PNG_INFO_sRGB)) {"
    },
    {
        "line": 110,
        "fullcodeline": "if ((mainprog_ptr->rgba_data = malloc(rowbytes * mainprog_ptr->height)) == NULL) {"
    },
    {
        "line": 9,
        "fullcodeline": "rwpng_error_handler, verbose ? rwpng_warning_stderr_handler : rwpng_warning_silent_handler);"
    },
    {
        "line": 51,
        "fullcodeline": "if (mainprog_ptr->width > INT_MAX/mainprog_ptr->height) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (!(color_type & PNG_COLOR_MASK_ALPHA)) {"
    },
    {
        "line": 69,
        "fullcodeline": "mainprog_ptr->retval = WRONG_INPUT_COLOR_TYPE;"
    },
    {
        "line": 75,
        "fullcodeline": "png_set_strip_16(png_ptr);"
    },
    {
        "line": 78,
        "fullcodeline": "if (!(color_type & PNG_COLOR_MASK_COLOR)) {"
    },
    {
        "line": 79,
        "fullcodeline": "png_set_gray_to_rgb(png_ptr);"
    },
    {
        "line": 88,
        "fullcodeline": "png_get_gAMA(png_ptr, info_ptr, &gamma);"
    },
    {
        "line": 89,
        "fullcodeline": "if (gamma > 0 && gamma <= 1.0) {"
    },
    {
        "line": 93,
        "fullcodeline": "fprintf(stderr, \"pngquant readpng:  ignored out-of-range gamma %f\\n\", gamma);"
    },
    {
        "line": 96,
        "fullcodeline": "gamma = 0.45455;"
    }
]