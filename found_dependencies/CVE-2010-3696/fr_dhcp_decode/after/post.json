[
    {
        "line": 8,
        "fullcodeline": "char buffer[2048];"
    },
    {
        "line": 10,
        "fullcodeline": "head = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "tail = &head;"
    },
    {
        "line": 12,
        "fullcodeline": "p = packet->data;"
    },
    {
        "line": 107,
        "fullcodeline": "next = packet->data + 240;"
    },
    {
        "line": 218,
        "fullcodeline": "memcpy(&giaddr, packet->data + 24, sizeof(giaddr));"
    },
    {
        "line": 245,
        "fullcodeline": "packet->vps = head;"
    },
    {
        "line": 251,
        "fullcodeline": "maxms = pairfind(packet->vps, DHCP2ATTR(57));"
    },
    {
        "line": 252,
        "fullcodeline": "mtu = pairfind(packet->vps, DHCP2ATTR(26));"
    },
    {
        "line": 14,
        "fullcodeline": "if ((fr_debug_flag > 2) && fr_log_fp) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (packet->data[1] != 1) {"
    },
    {
        "line": 32,
        "fullcodeline": "for (i = 0; i < 14; i++) {"
    },
    {
        "line": 113,
        "fullcodeline": "while (next < (packet->data + packet->data_len)) {"
    },
    {
        "line": 219,
        "fullcodeline": "if (giaddr == htonl(INADDR_ANY)) {"
    },
    {
        "line": 254,
        "fullcodeline": "if (mtu && (mtu->vp_integer < DEFAULT_PACKET_SIZE)) {"
    },
    {
        "line": 259,
        "fullcodeline": "if (maxms && (maxms->vp_integer < DEFAULT_PACKET_SIZE)) {"
    },
    {
        "line": 264,
        "fullcodeline": "if (maxms && mtu && (maxms->vp_integer > mtu->vp_integer)) {"
    },
    {
        "line": 20,
        "fullcodeline": "fprintf(fr_log_fp, \"\\n\");"
    },
    {
        "line": 24,
        "fullcodeline": "fr_strerror_printf(\"Packet is not Ethernet: %u\","
    },
    {
        "line": 33,
        "fullcodeline": "vp = pairmake(dhcp_header_names[i], NULL, T_OP_EQ);"
    },
    {
        "line": 92,
        "fullcodeline": "p += dhcp_header_sizes[i];"
    },
    {
        "line": 100,
        "fullcodeline": "*tail = vp;"
    },
    {
        "line": 117,
        "fullcodeline": "p = next;"
    },
    {
        "line": 123,
        "fullcodeline": "next = p + 2 + p[1];"
    },
    {
        "line": 131,
        "fullcodeline": "da = dict_attrbyvalue(DHCP2ATTR(p[0]));"
    },
    {
        "line": 138,
        "fullcodeline": "vp = NULL;"
    },
    {
        "line": 139,
        "fullcodeline": "num_entries = 1;"
    },
    {
        "line": 140,
        "fullcodeline": "alen = p[1];"
    },
    {
        "line": 141,
        "fullcodeline": "p += 2;"
    },
    {
        "line": 223,
        "fullcodeline": "vp = pairfind(head, DHCP2ATTR(256));"
    },
    {
        "line": 255,
        "fullcodeline": "fr_strerror_printf(\"DHCP Fatal: Client says MTU is smaller than minimum permitted by the specification.\");"
    },
    {
        "line": 260,
        "fullcodeline": "fr_strerror_printf(\"DHCP WARNING: Client says maximum message size is smaller than minimum permitted by the specification: fixing it\");"
    },
    {
        "line": 261,
        "fullcodeline": "maxms->vp_integer = DEFAULT_PACKET_SIZE;"
    },
    {
        "line": 265,
        "fullcodeline": "fr_strerror_printf(\"DHCP WARNING: Client says MTU is smaller than maximum message size: fixing it\");"
    },
    {
        "line": 266,
        "fullcodeline": "maxms->vp_integer = mtu->vp_integer;"
    },
    {
        "line": 269,
        "fullcodeline": "if (fr_debug_flag) fflush(stdout);"
    },
    {
        "line": 15,
        "fullcodeline": "for (i = 0; i < packet->data_len; i++) {"
    },
    {
        "line": 26,
        "fullcodeline": "return -1;"
    },
    {
        "line": 34,
        "fullcodeline": "if (!vp) {"
    },
    {
        "line": 40,
        "fullcodeline": "if ((i == 11) &&"
    },
    {
        "line": 94,
        "fullcodeline": "if (!vp) continue;"
    },
    {
        "line": 96,
        "fullcodeline": "if (fr_debug_flag > 1) {"
    },
    {
        "line": 119,
        "fullcodeline": "if (*p == 0) break;"
    },
    {
        "line": 120,
        "fullcodeline": "if (*p == 255) break; /* end of options signifier */"
    },
    {
        "line": 121,
        "fullcodeline": "if ((p + 2) > (packet->data + packet->data_len)) break;"
    },
    {
        "line": 125,
        "fullcodeline": "if (p[1] >= 253) {"
    },
    {
        "line": 132,
        "fullcodeline": "if (!da) {"
    },
    {
        "line": 174,
        "fullcodeline": "for (i = 0; i < num_entries; i++) {"
    },
    {
        "line": 224,
        "fullcodeline": "if (vp && vp->lvalue == 3) {"
    },
    {
        "line": 256,
        "fullcodeline": "return -1;"
    },
    {
        "line": 17,
        "fullcodeline": "fprintf(fr_log_fp, \"%02x \", packet->data[i]);"
    },
    {
        "line": 35,
        "fullcodeline": "fr_strerror_printf(\"Parse error %s\", fr_strerror());"
    },
    {
        "line": 36,
        "fullcodeline": "pairfree(&head);"
    },
    {
        "line": 42,
        "fullcodeline": "(packet->data[2] == 6)) {"
    },
    {
        "line": 43,
        "fullcodeline": "vp->type = PW_TYPE_ETHERNET;"
    },
    {
        "line": 48,
        "fullcodeline": "vp->vp_integer = p[0];"
    },
    {
        "line": 49,
        "fullcodeline": "vp->length = 1;"
    },
    {
        "line": 53,
        "fullcodeline": "vp->vp_integer = (p[0] << 8) | p[1];"
    },
    {
        "line": 54,
        "fullcodeline": "vp->length = 2;"
    },
    {
        "line": 58,
        "fullcodeline": "memcpy(&vp->vp_integer, p, 4);"
    },
    {
        "line": 59,
        "fullcodeline": "vp->vp_integer = ntohl(vp->vp_integer);"
    },
    {
        "line": 60,
        "fullcodeline": "vp->length = 4;"
    },
    {
        "line": 64,
        "fullcodeline": "memcpy(&vp->vp_ipaddr, p, 4);"
    },
    {
        "line": 65,
        "fullcodeline": "vp->length = 4;"
    },
    {
        "line": 69,
        "fullcodeline": "memcpy(vp->vp_strvalue, p, dhcp_header_sizes[i]);"
    },
    {
        "line": 70,
        "fullcodeline": "vp->vp_strvalue[dhcp_header_sizes[i]] = '\\0';"
    },
    {
        "line": 71,
        "fullcodeline": "vp->length = strlen(vp->vp_strvalue);"
    },
    {
        "line": 78,
        "fullcodeline": "memcpy(vp->vp_octets, p, packet->data[2]);"
    },
    {
        "line": 79,
        "fullcodeline": "vp->length = packet->data[2];"
    },
    {
        "line": 83,
        "fullcodeline": "memcpy(vp->vp_ether, p, sizeof(vp->vp_ether));"
    },
    {
        "line": 88,
        "fullcodeline": "fr_strerror_printf(\"BAD TYPE %d\", vp->type);"
    },
    {
        "line": 89,
        "fullcodeline": "pairfree(&vp);"
    },
    {
        "line": 97,
        "fullcodeline": "vp_prints(buffer, sizeof(buffer), vp);"
    },
    {
        "line": 98,
        "fullcodeline": "fr_strerror_printf(\"\\t%s\", buffer);"
    },
    {
        "line": 126,
        "fullcodeline": "fr_strerror_printf(\"Attribute too long %u %u\","
    },
    {
        "line": 133,
        "fullcodeline": "fr_strerror_printf(\"Attribute not in our dictionary: %u\","
    },
    {
        "line": 175,
        "fullcodeline": "vp = pairmake(da->name, NULL, T_OP_EQ);"
    },
    {
        "line": 204,
        "fullcodeline": "*tail = vp;"
    },
    {
        "line": 206,
        "fullcodeline": "p += alen;"
    },
    {
        "line": 228,
        "fullcodeline": "vp = pairfind(head, DHCP2ATTR(63));"
    },
    {
        "line": 16,
        "fullcodeline": "if ((i & 0x0f) == 0x00) fr_strerror_printf(\"%d: \", i);"
    },
    {
        "line": 18,
        "fullcodeline": "if ((i & 0x0f) == 0x0f) fprintf(fr_log_fp, \"\\n\");"
    },
    {
        "line": 37,
        "fullcodeline": "return -1;"
    },
    {
        "line": 41,
        "fullcodeline": "(packet->data[1] == 1) &&"
    },
    {
        "line": 72,
        "fullcodeline": "if (vp->length == 0) {"
    },
    {
        "line": 176,
        "fullcodeline": "if (!vp) {"
    },
    {
        "line": 186,
        "fullcodeline": "if ((da->attr == DHCP2ATTR(0x3d)) &&"
    },
    {
        "line": 199,
        "fullcodeline": "if (fr_debug_flag > 1) {"
    },
    {
        "line": 229,
        "fullcodeline": "if (vp && (strcmp(vp->vp_strvalue, \"MSFT 98\") == 0)) {"
    },
    {
        "line": 73,
        "fullcodeline": "pairfree(&vp);"
    },
    {
        "line": 149,
        "fullcodeline": "num_entries = alen;"
    },
    {
        "line": 150,
        "fullcodeline": "alen = 1;"
    },
    {
        "line": 154,
        "fullcodeline": "num_entries = alen >> 1;"
    },
    {
        "line": 155,
        "fullcodeline": "alen = 2;"
    },
    {
        "line": 161,
        "fullcodeline": "num_entries = alen >> 2;"
    },
    {
        "line": 162,
        "fullcodeline": "alen = 4;"
    },
    {
        "line": 177,
        "fullcodeline": "fr_strerror_printf(\"Cannot build attribute %s\","
    },
    {
        "line": 179,
        "fullcodeline": "pairfree(&head);"
    },
    {
        "line": 188,
        "fullcodeline": "(alen == 7) && (*p == 1) && (num_entries == 1)) {"
    },
    {
        "line": 189,
        "fullcodeline": "vp->type = PW_TYPE_ETHERNET;"
    },
    {
        "line": 190,
        "fullcodeline": "memcpy(vp->vp_octets, p + 1, 6);"
    },
    {
        "line": 191,
        "fullcodeline": "vp->length = alen;"
    },
    {
        "line": 200,
        "fullcodeline": "vp_prints(buffer, sizeof(buffer), vp);"
    },
    {
        "line": 201,
        "fullcodeline": "fr_strerror_printf(\"\\t%s\", buffer);"
    },
    {
        "line": 230,
        "fullcodeline": "vp = pairfind(head, DHCP2ATTR(262));"
    },
    {
        "line": 236,
        "fullcodeline": "packet->data[10] |= 0x80;"
    },
    {
        "line": 180,
        "fullcodeline": "return -1;"
    },
    {
        "line": 193,
        "fullcodeline": "} else if (fr_dhcp_attr2vp(vp, p, alen) < 0) {"
    },
    {
        "line": 235,
        "fullcodeline": "if (vp) vp->lvalue |= 0x8000;"
    },
    {
        "line": 194,
        "fullcodeline": "pairfree(&vp);"
    },
    {
        "line": 195,
        "fullcodeline": "pairfree(&head);"
    },
    {
        "line": 196,
        "fullcodeline": "return -1;"
    }
]