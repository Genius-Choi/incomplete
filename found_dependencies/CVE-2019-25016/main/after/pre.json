[
    {
        "line": 3,
        "fullcodeline": "const char *safepath = \"/bin:/sbin:/usr/bin:/usr/sbin:\""
    },
    {
        "line": 5,
        "fullcodeline": "const char *confpath = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "char *shargv[] = { NULL, NULL };"
    },
    {
        "line": 9,
        "fullcodeline": "char cmdline[LINE_MAX];"
    },
    {
        "line": 13,
        "fullcodeline": "char *mypwbuf = NULL, *targpwbuf = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "uid_t target = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "gid_t groups[NGROUPS_MAX + 1];"
    },
    {
        "line": 23,
        "fullcodeline": "int sflag = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "int nflag = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "char cwdpath[PATH_MAX];"
    },
    {
        "line": 32,
        "fullcodeline": "setprogname(\"doas\");"
    },
    {
        "line": 34,
        "fullcodeline": "closefrom(STDERR_FILENO + 1);"
    },
    {
        "line": 36,
        "fullcodeline": "uid = getuid();"
    },
    {
        "line": 80,
        "fullcodeline": "argv += optind;"
    },
    {
        "line": 81,
        "fullcodeline": "argc -= optind;"
    },
    {
        "line": 107,
        "fullcodeline": "ngroups = getgroups(NGROUPS_MAX, groups);"
    },
    {
        "line": 110,
        "fullcodeline": "groups[ngroups++] = getgid();"
    },
    {
        "line": 131,
        "fullcodeline": "parseconfig(\"/etc/doas.conf\", 1);"
    },
    {
        "line": 134,
        "fullcodeline": "(void)strlcpy(cmdline, argv[0], sizeof(cmdline));"
    },
    {
        "line": 142,
        "fullcodeline": "cmd = argv[0];"
    },
    {
        "line": 168,
        "fullcodeline": "(void) nflag;"
    },
    {
        "line": 228,
        "fullcodeline": "syslog(LOG_AUTHPRIV | LOG_INFO, \"%s ran command %s as %s from %s\","
    },
    {
        "line": 231,
        "fullcodeline": "envp = prepenv(rule, mypw, targpw);"
    },
    {
        "line": 238,
        "fullcodeline": "execvpe(cmd, argv, envp);"
    },
    {
        "line": 241,
        "fullcodeline": "err(1, \"%s\", cmd);"
    },
    {
        "line": 44,
        "fullcodeline": "while ((ch = getopt(argc, argv, OPTSTRING)) != -1) {"
    },
    {
        "line": 94,
        "fullcodeline": "for (size_t sz = 1024; sz <= 16*1024; sz *= 2) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (rv != 0)"
    },
    {
        "line": 105,
        "fullcodeline": "if (mypw == NULL)"
    },
    {
        "line": 108,
        "fullcodeline": "if (ngroups == -1)"
    },
    {
        "line": 128,
        "fullcodeline": "if (geteuid())"
    },
    {
        "line": 135,
        "fullcodeline": "for (i = 1; i < argc; i++) {"
    },
    {
        "line": 143,
        "fullcodeline": "if (!permit(uid, groups, ngroups, &rule, target, cmd,"
    },
    {
        "line": 169,
        "fullcodeline": "if (!(rule->options & NOPASS)) {"
    },
    {
        "line": 179,
        "fullcodeline": "for (size_t sz = 1024; sz <= 16*1024; sz *= 2) {"
    },
    {
        "line": 187,
        "fullcodeline": "if (rv != 0)"
    },
    {
        "line": 190,
        "fullcodeline": "if (targpw == NULL)"
    },
    {
        "line": 205,
        "fullcodeline": "if (setresgid(targpw->pw_gid, targpw->pw_gid, targpw->pw_gid) != 0)"
    },
    {
        "line": 207,
        "fullcodeline": "if (initgroups(targpw->pw_name, targpw->pw_gid) != 0)"
    },
    {
        "line": 209,
        "fullcodeline": "if (setresuid(target, target, target) != 0)"
    },
    {
        "line": 218,
        "fullcodeline": "if (getcwd(cwdpath, sizeof(cwdpath)) == NULL)"
    },
    {
        "line": 239,
        "fullcodeline": "if (errno == ENOENT)"
    },
    {
        "line": 95,
        "fullcodeline": "mypwbuf = reallocarray(mypwbuf, sz, sizeof (char));"
    },
    {
        "line": 98,
        "fullcodeline": "rv = getpwuid_r(uid, &mypwstore, mypwbuf, sz, &mypw);"
    },
    {
        "line": 103,
        "fullcodeline": "err(1, \"getpwuid_r failed\");"
    },
    {
        "line": 106,
        "fullcodeline": "errx(1, \"no passwd entry for self\");"
    },
    {
        "line": 109,
        "fullcodeline": "err(1, \"can't get groups\");"
    },
    {
        "line": 113,
        "fullcodeline": "sh = getenv(\"SHELL\");"
    },
    {
        "line": 118,
        "fullcodeline": "argv = shargv;"
    },
    {
        "line": 119,
        "fullcodeline": "argc = 1;"
    },
    {
        "line": 123,
        "fullcodeline": "checkconfig(confpath, argc, argv, uid, groups, ngroups,"
    },
    {
        "line": 129,
        "fullcodeline": "errx(1, \"not installed setuid\");"
    },
    {
        "line": 145,
        "fullcodeline": "syslog(LOG_AUTHPRIV | LOG_NOTICE,"
    },
    {
        "line": 147,
        "fullcodeline": "errc(1, EPERM, NULL);"
    },
    {
        "line": 170,
        "fullcodeline": "errx(1, \"Authorization required\");"
    },
    {
        "line": 180,
        "fullcodeline": "targpwbuf = reallocarray(targpwbuf, sz, sizeof (char));"
    },
    {
        "line": 183,
        "fullcodeline": "rv = getpwuid_r(target, &targpwstore, targpwbuf, sz, &targpw);"
    },
    {
        "line": 188,
        "fullcodeline": "err(1, \"getpwuid_r failed\");"
    },
    {
        "line": 191,
        "fullcodeline": "err(1, \"getpwuid_r failed\");"
    },
    {
        "line": 206,
        "fullcodeline": "err(1, \"setresgid\");"
    },
    {
        "line": 208,
        "fullcodeline": "err(1, \"initgroups\");"
    },
    {
        "line": 210,
        "fullcodeline": "err(1, \"setresuid\");"
    },
    {
        "line": 219,
        "fullcodeline": "cwd = \"(failed)\";"
    },
    {
        "line": 240,
        "fullcodeline": "errx(1, \"%s: command not found\", cmd);"
    },
    {
        "line": 96,
        "fullcodeline": "if (mypwbuf == NULL)"
    },
    {
        "line": 99,
        "fullcodeline": "if (rv != ERANGE)"
    },
    {
        "line": 114,
        "fullcodeline": "if (sh == NULL || *sh == '\\0') {"
    },
    {
        "line": 136,
        "fullcodeline": "if (strlcat(cmdline, \" \", sizeof(cmdline)) >= sizeof(cmdline))"
    },
    {
        "line": 138,
        "fullcodeline": "if (strlcat(cmdline, argv[i], sizeof(cmdline)) >= sizeof(cmdline))"
    },
    {
        "line": 144,
        "fullcodeline": "(const char **)argv + 1)) {"
    },
    {
        "line": 181,
        "fullcodeline": "if (targpwbuf == NULL)"
    },
    {
        "line": 184,
        "fullcodeline": "if (rv != ERANGE)"
    },
    {
        "line": 221,
        "fullcodeline": "cwd = cwdpath;"
    },
    {
        "line": 235,
        "fullcodeline": "if (setenv(\"PATH\", safepath, 1) == -1)"
    },
    {
        "line": 52,
        "fullcodeline": "confpath = optarg;"
    },
    {
        "line": 70,
        "fullcodeline": "nflag = 1;"
    },
    {
        "line": 73,
        "fullcodeline": "sflag = 1;"
    },
    {
        "line": 76,
        "fullcodeline": "usage();"
    },
    {
        "line": 85,
        "fullcodeline": "usage();"
    },
    {
        "line": 86,
        "fullcodeline": "} else if ((!sflag && !argc) || (sflag && argc))"
    },
    {
        "line": 97,
        "fullcodeline": "errx(1, \"can't allocate mypwbuf\");"
    },
    {
        "line": 115,
        "fullcodeline": "shargv[0] = mypw->pw_shell;"
    },
    {
        "line": 182,
        "fullcodeline": "errx(1, \"can't allocate targpwbuf\");"
    },
    {
        "line": 236,
        "fullcodeline": "err(1, \"failed to set PATH '%s'\", safepath);"
    },
    {
        "line": 66,
        "fullcodeline": "if (parseuid(optarg, &target) != 0)"
    },
    {
        "line": 87,
        "fullcodeline": "usage();"
    },
    {
        "line": 117,
        "fullcodeline": "shargv[0] = sh;"
    },
    {
        "line": 67,
        "fullcodeline": "errx(1, \"unknown user\");"
    }
]