[
    {
        "line": 4,
        "fullcodeline": "Packet *p = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "p = SCCalloc(1, sizeof(*p) + default_packet_size);"
    },
    {
        "line": 12,
        "fullcodeline": "PacketInit(p);"
    },
    {
        "line": 15,
        "fullcodeline": "gettimeofday(&tval, NULL);"
    },
    {
        "line": 16,
        "fullcodeline": "p->ts = SCTIME_FROM_TIMEVAL(&tval);"
    },
    {
        "line": 18,
        "fullcodeline": "ip6h.s_ip6_nxt = 44;"
    },
    {
        "line": 19,
        "fullcodeline": "ip6h.s_ip6_hlim = 2;"
    },
    {
        "line": 22,
        "fullcodeline": "ip6h.s_ip6_src[0] = 0x01010101;"
    },
    {
        "line": 23,
        "fullcodeline": "ip6h.s_ip6_src[1] = 0x01010101;"
    },
    {
        "line": 24,
        "fullcodeline": "ip6h.s_ip6_src[2] = 0x01010101;"
    },
    {
        "line": 25,
        "fullcodeline": "ip6h.s_ip6_src[3] = 0x01010101;"
    },
    {
        "line": 26,
        "fullcodeline": "ip6h.s_ip6_dst[0] = 0x02020202;"
    },
    {
        "line": 27,
        "fullcodeline": "ip6h.s_ip6_dst[1] = 0x02020202;"
    },
    {
        "line": 28,
        "fullcodeline": "ip6h.s_ip6_dst[2] = 0x02020202;"
    },
    {
        "line": 29,
        "fullcodeline": "ip6h.s_ip6_dst[3] = 0x02020202;"
    },
    {
        "line": 32,
        "fullcodeline": "PacketCopyData(p, (uint8_t *)&ip6h, sizeof(IPV6Hdr));"
    },
    {
        "line": 34,
        "fullcodeline": "p->ip6h = (IPV6Hdr *)GET_PKT_DATA(p);"
    },
    {
        "line": 35,
        "fullcodeline": "IPV6_SET_RAW_VER(p->ip6h, 6);"
    },
    {
        "line": 37,
        "fullcodeline": "IPV6FragHdr *fh = (IPV6FragHdr *)(GET_PKT_DATA(p) + sizeof(IPV6Hdr));"
    },
    {
        "line": 38,
        "fullcodeline": "fh->ip6fh_nxt = proto;"
    },
    {
        "line": 39,
        "fullcodeline": "fh->ip6fh_ident = htonl(id);"
    },
    {
        "line": 40,
        "fullcodeline": "fh->ip6fh_offlg = htons((off << 3) | mf);"
    },
    {
        "line": 42,
        "fullcodeline": "DecodeIPV6FragHeader(p, (uint8_t *)fh, 8, 8 + content_len, 0);"
    },
    {
        "line": 44,
        "fullcodeline": "pcontent = SCCalloc(1, content_len);"
    },
    {
        "line": 47,
        "fullcodeline": "memset(pcontent, content, content_len);"
    },
    {
        "line": 48,
        "fullcodeline": "PacketCopyDataOffset(p, sizeof(IPV6Hdr) + sizeof(IPV6FragHdr), pcontent, content_len);"
    },
    {
        "line": 49,
        "fullcodeline": "SET_PKT_LEN(p, sizeof(IPV6Hdr) + sizeof(IPV6FragHdr) + content_len);"
    },
    {
        "line": 50,
        "fullcodeline": "SCFree(pcontent);"
    },
    {
        "line": 52,
        "fullcodeline": "p->ip6h->s_ip6_plen = htons(sizeof(IPV6FragHdr) + content_len);"
    },
    {
        "line": 54,
        "fullcodeline": "SET_IPV6_SRC_ADDR(p, &p->src);"
    },
    {
        "line": 55,
        "fullcodeline": "SET_IPV6_DST_ADDR(p, &p->dst);"
    },
    {
        "line": 9,
        "fullcodeline": "if (unlikely(p == NULL))"
    },
    {
        "line": 45,
        "fullcodeline": "if (unlikely(pcontent == NULL))"
    },
    {
        "line": 58,
        "fullcodeline": "if (IPV6_GET_VER(p) != 6)"
    },
    {
        "line": 60,
        "fullcodeline": "if (IPV6_GET_NH(p) != 44)"
    },
    {
        "line": 62,
        "fullcodeline": "if (IPV6_GET_PLEN(p) != sizeof(IPV6FragHdr) + content_len)"
    },
    {
        "line": 67,
        "fullcodeline": "if (p != NULL)"
    },
    {
        "line": 68,
        "fullcodeline": "SCFree(p);"
    }
]