[
    {
        "line": 3,
        "fullcodeline": "DefragInit();"
    },
    {
        "line": 4,
        "fullcodeline": "default_policy = DEFRAG_POLICY_BSD;"
    },
    {
        "line": 5,
        "fullcodeline": "Packet *packets[4];"
    },
    {
        "line": 7,
        "fullcodeline": "packets[0] = BuildIpv6TestPacket(IPPROTO_ICMP, 0x96, 24 >> 3, 0, 'A', 16);"
    },
    {
        "line": 8,
        "fullcodeline": "packets[1] = BuildIpv6TestPacket(IPPROTO_ICMP, 0x96, 8 >> 3, 1, 'B', 16);"
    },
    {
        "line": 9,
        "fullcodeline": "packets[2] = BuildIpv6TestPacket(IPPROTO_ICMP, 0x96, 16 >> 3, 1, 'C', 16);"
    },
    {
        "line": 10,
        "fullcodeline": "packets[3] = BuildIpv6TestPacket(IPPROTO_ICMP, 0x96, 0, 1, 'D', 8);"
    },
    {
        "line": 12,
        "fullcodeline": "Packet *r = Defrag(NULL, NULL, packets[0]);"
    },
    {
        "line": 15,
        "fullcodeline": "r = Defrag(NULL, NULL, packets[1]);"
    },
    {
        "line": 18,
        "fullcodeline": "r = Defrag(NULL, NULL, packets[2]);"
    },
    {
        "line": 19,
        "fullcodeline": "FAIL_IF_NOT_NULL(r);"
    },
    {
        "line": 21,
        "fullcodeline": "r = Defrag(NULL, NULL, packets[3]);"
    },
    {
        "line": 22,
        "fullcodeline": "FAIL_IF_NULL(r);"
    },
    {
        "line": 25,
        "fullcodeline": "uint8_t expected[] = {"
    },
    {
        "line": 42,
        "fullcodeline": "DefragDestroy();"
    },
    {
        "line": 34,
        "fullcodeline": "if (memcmp(expected, GET_PKT_DATA(r) + 40, sizeof(expected)) != 0) {"
    },
    {
        "line": 35,
        "fullcodeline": "printf(\"Expected:\\n\");"
    },
    {
        "line": 36,
        "fullcodeline": "PrintRawDataFp(stdout, expected, sizeof(expected));"
    },
    {
        "line": 37,
        "fullcodeline": "printf(\"Got:\\n\");"
    },
    {
        "line": 38,
        "fullcodeline": "PrintRawDataFp(stdout, GET_PKT_DATA(r) + 40, GET_PKT_LEN(r) - 40);"
    }
]