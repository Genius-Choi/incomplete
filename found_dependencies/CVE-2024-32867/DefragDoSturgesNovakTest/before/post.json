[
    {
        "line": 5,
        "fullcodeline": "DefragInit();"
    },
    {
        "line": 11,
        "fullcodeline": "int id = 1;"
    },
    {
        "line": 12,
        "fullcodeline": "Packet *packets[17];"
    },
    {
        "line": 13,
        "fullcodeline": "memset(packets, 0x00, sizeof(packets));"
    },
    {
        "line": 20,
        "fullcodeline": "packets[0] = BuildIpv4TestPacket(IPPROTO_ICMP, id, 0, 1, 'A', 24);"
    },
    {
        "line": 23,
        "fullcodeline": "packets[1] = BuildIpv4TestPacket(IPPROTO_ICMP, id, 32 >> 3, 1, 'B', 16);"
    },
    {
        "line": 26,
        "fullcodeline": "packets[2] = BuildIpv4TestPacket(IPPROTO_ICMP, id, 48 >> 3, 1, 'C', 24);"
    },
    {
        "line": 29,
        "fullcodeline": "packets[3] = BuildIpv4TestPacket(IPPROTO_ICMP, id, 80 >> 3, 1, 'D', 8);"
    },
    {
        "line": 32,
        "fullcodeline": "packets[4] = BuildIpv4TestPacket(IPPROTO_ICMP, id, 104 >> 3, 1, 'E', 16);"
    },
    {
        "line": 35,
        "fullcodeline": "packets[5] = BuildIpv4TestPacket(IPPROTO_ICMP, id, 120 >> 3, 1, 'F', 24);"
    },
    {
        "line": 38,
        "fullcodeline": "packets[6] = BuildIpv4TestPacket(IPPROTO_ICMP, id, 144 >> 3, 1, 'G', 16);"
    },
    {
        "line": 41,
        "fullcodeline": "packets[7] = BuildIpv4TestPacket(IPPROTO_ICMP, id, 160 >> 3, 1, 'H', 16);"
    },
    {
        "line": 44,
        "fullcodeline": "packets[8] = BuildIpv4TestPacket(IPPROTO_ICMP, id, 176 >> 3, 1, 'I', 8);"
    },
    {
        "line": 51,
        "fullcodeline": "packets[9] = BuildIpv4TestPacket(IPPROTO_ICMP, id, 8 >> 3, 1, 'J', 32);"
    },
    {
        "line": 54,
        "fullcodeline": "packets[10] = BuildIpv4TestPacket(IPPROTO_ICMP, id, 48 >> 3, 1, 'K', 24);"
    },
    {
        "line": 57,
        "fullcodeline": "packets[11] = BuildIpv4TestPacket(IPPROTO_ICMP, id, 72 >> 3, 1, 'L', 24);"
    },
    {
        "line": 60,
        "fullcodeline": "packets[12] = BuildIpv4TestPacket(IPPROTO_ICMP, id, 96 >> 3, 1, 'M', 24);"
    },
    {
        "line": 63,
        "fullcodeline": "packets[13] = BuildIpv4TestPacket(IPPROTO_ICMP, id, 128 >> 3, 1, 'N', 8);"
    },
    {
        "line": 66,
        "fullcodeline": "packets[14] = BuildIpv4TestPacket(IPPROTO_ICMP, id, 152 >> 3, 1, 'O', 8);"
    },
    {
        "line": 69,
        "fullcodeline": "packets[15] = BuildIpv4TestPacket(IPPROTO_ICMP, id, 160 >> 3, 1, 'P', 8);"
    },
    {
        "line": 72,
        "fullcodeline": "packets[16] = BuildIpv4TestPacket(IPPROTO_ICMP, id, 176 >> 3, 0, 'Q', 16);"
    },
    {
        "line": 74,
        "fullcodeline": "default_policy = policy;"
    },
    {
        "line": 82,
        "fullcodeline": "int overlap = 0;"
    },
    {
        "line": 90,
        "fullcodeline": "FAIL_IF_NOT(overlap);"
    },
    {
        "line": 93,
        "fullcodeline": "Packet *reassembled = Defrag(NULL, NULL, packets[16]);"
    },
    {
        "line": 94,
        "fullcodeline": "FAIL_IF_NULL(reassembled);"
    },
    {
        "line": 96,
        "fullcodeline": "FAIL_IF(IPV4_GET_HLEN(reassembled) != 20);"
    },
    {
        "line": 97,
        "fullcodeline": "FAIL_IF(IPV4_GET_IPLEN(reassembled) != 20 + 192);"
    },
    {
        "line": 98,
        "fullcodeline": "FAIL_IF(expected_len != 192);"
    },
    {
        "line": 100,
        "fullcodeline": "FAIL_IF(memcmp(GET_PKT_DATA(reassembled) + 20, expected, expected_len) != 0);"
    },
    {
        "line": 101,
        "fullcodeline": "SCFree(reassembled);"
    },
    {
        "line": 104,
        "fullcodeline": "FAIL_IF(defrag_context->frag_pool->outstanding != 0);"
    },
    {
        "line": 109,
        "fullcodeline": "DefragDestroy();"
    },
    {
        "line": 77,
        "fullcodeline": "for (i = 0; i < 9; i++) {"
    },
    {
        "line": 83,
        "fullcodeline": "for (; i < 16; i++) {"
    },
    {
        "line": 106,
        "fullcodeline": "for (i = 0; i < 17; i++) {"
    },
    {
        "line": 78,
        "fullcodeline": "Packet *tp = Defrag(NULL, NULL, packets[i]);"
    },
    {
        "line": 79,
        "fullcodeline": "FAIL_IF_NOT_NULL(tp);"
    },
    {
        "line": 80,
        "fullcodeline": "FAIL_IF(ENGINE_ISSET_EVENT(packets[i], IPV4_FRAG_OVERLAP));"
    },
    {
        "line": 84,
        "fullcodeline": "Packet *tp = Defrag(NULL, NULL, packets[i]);"
    },
    {
        "line": 85,
        "fullcodeline": "FAIL_IF_NOT_NULL(tp);"
    },
    {
        "line": 107,
        "fullcodeline": "SCFree(packets[i]);"
    },
    {
        "line": 86,
        "fullcodeline": "if (ENGINE_ISSET_EVENT(packets[i], IPV4_FRAG_OVERLAP)) {"
    },
    {
        "line": 87,
        "fullcodeline": "overlap++;"
    }
]