[
    {
        "line": 3,
        "fullcodeline": "if (dcfg == NULL) return;"
    },
    {
        "line": 5,
        "fullcodeline": "if (dcfg->is_enabled == NOT_SET) dcfg->is_enabled = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "if (dcfg->reqbody_access == NOT_SET) dcfg->reqbody_access = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "if (dcfg->reqintercept_oe == NOT_SET) dcfg->reqintercept_oe = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "if (dcfg->reqbody_buffering == NOT_SET) dcfg->reqbody_buffering = REQUEST_BODY_FORCEBUF_OFF;"
    },
    {
        "line": 10,
        "fullcodeline": "if (dcfg->reqbody_inmemory_limit == NOT_SET)"
    },
    {
        "line": 12,
        "fullcodeline": "if (dcfg->reqbody_limit == NOT_SET) dcfg->reqbody_limit = REQUEST_BODY_DEFAULT_LIMIT;"
    },
    {
        "line": 13,
        "fullcodeline": "if (dcfg->reqbody_no_files_limit == NOT_SET) dcfg->reqbody_no_files_limit = REQUEST_BODY_NO_FILES_DEFAULT_LIMIT;"
    },
    {
        "line": 14,
        "fullcodeline": "if (dcfg->resbody_access == NOT_SET) dcfg->resbody_access = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "if (dcfg->of_limit == NOT_SET) dcfg->of_limit = RESPONSE_BODY_DEFAULT_LIMIT;"
    },
    {
        "line": 16,
        "fullcodeline": "if (dcfg->if_limit_action == NOT_SET) dcfg->if_limit_action = REQUEST_BODY_LIMIT_ACTION_REJECT;"
    },
    {
        "line": 17,
        "fullcodeline": "if (dcfg->of_limit_action == NOT_SET) dcfg->of_limit_action = RESPONSE_BODY_LIMIT_ACTION_REJECT;"
    },
    {
        "line": 19,
        "fullcodeline": "if (dcfg->of_mime_types == NOT_SET_P) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (dcfg->debuglog_fd == NOT_SET_P) dcfg->debuglog_fd = NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "if (dcfg->debuglog_name == NOT_SET_P) dcfg->debuglog_name = NULL;"
    },
    {
        "line": 29,
        "fullcodeline": "if (dcfg->debuglog_level == NOT_SET) dcfg->debuglog_level = 0;"
    },
    {
        "line": 31,
        "fullcodeline": "if (dcfg->cookie_format == NOT_SET) dcfg->cookie_format = 0;"
    },
    {
        "line": 32,
        "fullcodeline": "if (dcfg->argument_separator == NOT_SET) dcfg->argument_separator = '&';"
    },
    {
        "line": 33,
        "fullcodeline": "if (dcfg->cookiev0_separator == NOT_SET_P) dcfg->cookiev0_separator = NULL;"
    },
    {
        "line": 35,
        "fullcodeline": "if (dcfg->rule_inheritance == NOT_SET) dcfg->rule_inheritance = 1;"
    },
    {
        "line": 38,
        "fullcodeline": "if (dcfg->auditlog_flag == NOT_SET) dcfg->auditlog_flag = 0;"
    },
    {
        "line": 39,
        "fullcodeline": "if (dcfg->auditlog_type == NOT_SET) dcfg->auditlog_type = AUDITLOG_SERIAL;"
    },
    {
        "line": 40,
        "fullcodeline": "if (dcfg->max_rule_time == NOT_SET) dcfg->max_rule_time = 0;"
    },
    {
        "line": 41,
        "fullcodeline": "if (dcfg->auditlog_dirperms == NOT_SET) dcfg->auditlog_dirperms = CREATEMODE_DIR;"
    },
    {
        "line": 42,
        "fullcodeline": "if (dcfg->auditlog_fileperms == NOT_SET) dcfg->auditlog_fileperms = CREATEMODE;"
    },
    {
        "line": 43,
        "fullcodeline": "if (dcfg->auditlog_fd == NOT_SET_P) dcfg->auditlog_fd = NULL;"
    },
    {
        "line": 44,
        "fullcodeline": "if (dcfg->auditlog2_fd == NOT_SET_P) dcfg->auditlog2_fd = NULL;"
    },
    {
        "line": 45,
        "fullcodeline": "if (dcfg->auditlog_name == NOT_SET_P) dcfg->auditlog_name = NULL;"
    },
    {
        "line": 46,
        "fullcodeline": "if (dcfg->auditlog2_name == NOT_SET_P) dcfg->auditlog2_name = NULL;"
    },
    {
        "line": 47,
        "fullcodeline": "if (dcfg->auditlog_storage_dir == NOT_SET_P) dcfg->auditlog_storage_dir = NULL;"
    },
    {
        "line": 48,
        "fullcodeline": "if (dcfg->auditlog_parts == NOT_SET_P) dcfg->auditlog_parts = \"ABCFHZ\";"
    },
    {
        "line": 49,
        "fullcodeline": "if (dcfg->auditlog_relevant_regex == NOT_SET_P) dcfg->auditlog_relevant_regex = NULL;"
    },
    {
        "line": 52,
        "fullcodeline": "if (dcfg->tmp_dir == NOT_SET_P) dcfg->tmp_dir = guess_tmp_dir(dcfg->mp);"
    },
    {
        "line": 53,
        "fullcodeline": "if (dcfg->upload_dir == NOT_SET_P) dcfg->upload_dir = NULL;"
    },
    {
        "line": 54,
        "fullcodeline": "if (dcfg->upload_keep_files == NOT_SET) dcfg->upload_keep_files = KEEP_FILES_OFF;"
    },
    {
        "line": 55,
        "fullcodeline": "if (dcfg->upload_validates_files == NOT_SET) dcfg->upload_validates_files = 0;"
    },
    {
        "line": 56,
        "fullcodeline": "if (dcfg->upload_filemode == NOT_SET) dcfg->upload_filemode = 0600;"
    },
    {
        "line": 57,
        "fullcodeline": "if (dcfg->upload_file_limit == NOT_SET) dcfg->upload_file_limit = 100;"
    },
    {
        "line": 60,
        "fullcodeline": "if (dcfg->data_dir == NOT_SET_P) dcfg->data_dir = NULL;"
    },
    {
        "line": 61,
        "fullcodeline": "if (dcfg->webappid == NOT_SET_P) dcfg->webappid = \"default\";"
    },
    {
        "line": 62,
        "fullcodeline": "if (dcfg->sensor_id == NOT_SET_P) dcfg->sensor_id = \"default\";"
    },
    {
        "line": 63,
        "fullcodeline": "if (dcfg->httpBlkey == NOT_SET_P) dcfg->httpBlkey = NULL;"
    },
    {
        "line": 66,
        "fullcodeline": "if (dcfg->content_injection_enabled == NOT_SET) dcfg->content_injection_enabled = 0;"
    },
    {
        "line": 69,
        "fullcodeline": "if (dcfg->stream_inbody_inspection == NOT_SET) dcfg->stream_inbody_inspection = 0;"
    },
    {
        "line": 70,
        "fullcodeline": "if (dcfg->stream_outbody_inspection == NOT_SET) dcfg->stream_outbody_inspection = 0;"
    },
    {
        "line": 73,
        "fullcodeline": "if (dcfg->geo == NOT_SET_P) dcfg->geo = NULL;"
    },
    {
        "line": 76,
        "fullcodeline": "if (dcfg->gsb == NOT_SET_P) dcfg->gsb = NULL;"
    },
    {
        "line": 79,
        "fullcodeline": "if (dcfg->u_map == NOT_SET_P) dcfg->u_map = NULL;"
    },
    {
        "line": 82,
        "fullcodeline": "if (dcfg->cache_trans == NOT_SET) dcfg->cache_trans = MODSEC_CACHE_DISABLED;"
    },
    {
        "line": 83,
        "fullcodeline": "if (dcfg->cache_trans_incremental == NOT_SET) dcfg->cache_trans_incremental = 0;"
    },
    {
        "line": 88,
        "fullcodeline": "if (dcfg->request_encoding == NOT_SET_P) dcfg->request_encoding = NULL;"
    },
    {
        "line": 90,
        "fullcodeline": "if (dcfg->disable_backend_compression == NOT_SET) dcfg->disable_backend_compression = 0;"
    },
    {
        "line": 92,
        "fullcodeline": "if (dcfg->col_timeout == NOT_SET) dcfg->col_timeout = 3600;"
    },
    {
        "line": 95,
        "fullcodeline": "if (dcfg->crypto_key == NOT_SET_P) dcfg->crypto_key = getkey(dcfg->mp);"
    },
    {
        "line": 96,
        "fullcodeline": "if (dcfg->crypto_key_len == NOT_SET) dcfg->crypto_key_len = strlen(dcfg->crypto_key);"
    },
    {
        "line": 97,
        "fullcodeline": "if (dcfg->crypto_key_add == NOT_SET) dcfg->crypto_key_add = HASH_KEYONLY;"
    },
    {
        "line": 99,
        "fullcodeline": "if (dcfg->hash_is_enabled == NOT_SET) dcfg->hash_is_enabled = HASH_DISABLED;"
    },
    {
        "line": 100,
        "fullcodeline": "if (dcfg->hash_enforcement == NOT_SET) dcfg->hash_enforcement = HASH_DISABLED;"
    },
    {
        "line": 101,
        "fullcodeline": "if (dcfg->crypto_hash_href_rx == NOT_SET) dcfg->crypto_hash_href_rx = 0;"
    },
    {
        "line": 102,
        "fullcodeline": "if (dcfg->crypto_hash_faction_rx == NOT_SET) dcfg->crypto_hash_faction_rx = 0;"
    },
    {
        "line": 103,
        "fullcodeline": "if (dcfg->crypto_hash_location_rx == NOT_SET) dcfg->crypto_hash_location_rx = 0;"
    },
    {
        "line": 104,
        "fullcodeline": "if (dcfg->crypto_hash_iframesrc_rx == NOT_SET) dcfg->crypto_hash_iframesrc_rx = 0;"
    },
    {
        "line": 105,
        "fullcodeline": "if (dcfg->crypto_hash_framesrc_rx == NOT_SET) dcfg->crypto_hash_framesrc_rx = 0;"
    },
    {
        "line": 106,
        "fullcodeline": "if (dcfg->crypto_hash_href_pm == NOT_SET) dcfg->crypto_hash_href_pm = 0;"
    },
    {
        "line": 107,
        "fullcodeline": "if (dcfg->crypto_hash_faction_pm == NOT_SET) dcfg->crypto_hash_faction_pm = 0;"
    },
    {
        "line": 108,
        "fullcodeline": "if (dcfg->crypto_hash_location_pm == NOT_SET) dcfg->crypto_hash_location_pm = 0;"
    },
    {
        "line": 109,
        "fullcodeline": "if (dcfg->crypto_hash_iframesrc_pm == NOT_SET) dcfg->crypto_hash_iframesrc_pm = 0;"
    },
    {
        "line": 110,
        "fullcodeline": "if (dcfg->crypto_hash_framesrc_pm == NOT_SET) dcfg->crypto_hash_framesrc_pm = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "dcfg->reqbody_inmemory_limit = REQUEST_BODY_DEFAULT_INMEMORY_LIMIT;"
    },
    {
        "line": 20,
        "fullcodeline": "dcfg->of_mime_types = apr_table_make(dcfg->mp, 3);"
    },
    {
        "line": 22,
        "fullcodeline": "apr_table_setn(dcfg->of_mime_types, \"text/plain\", \"1\");"
    }
]