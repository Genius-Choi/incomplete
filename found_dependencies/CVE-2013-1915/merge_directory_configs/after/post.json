[
    {
        "line": 3,
        "fullcodeline": "directory_config *parent = (directory_config *)_parent;"
    },
    {
        "line": 4,
        "fullcodeline": "directory_config *child = (directory_config *)_child;"
    },
    {
        "line": 5,
        "fullcodeline": "directory_config *merged = create_directory_config(mp, NULL);"
    },
    {
        "line": 17,
        "fullcodeline": "merged->is_enabled = (child->is_enabled == NOT_SET"
    },
    {
        "line": 21,
        "fullcodeline": "merged->reqbody_access = (child->reqbody_access == NOT_SET"
    },
    {
        "line": 23,
        "fullcodeline": "merged->reqbody_buffering = (child->reqbody_buffering == NOT_SET"
    },
    {
        "line": 25,
        "fullcodeline": "merged->reqbody_inmemory_limit = (child->reqbody_inmemory_limit == NOT_SET"
    },
    {
        "line": 27,
        "fullcodeline": "merged->reqbody_limit = (child->reqbody_limit == NOT_SET"
    },
    {
        "line": 29,
        "fullcodeline": "merged->reqbody_no_files_limit = (child->reqbody_no_files_limit == NOT_SET"
    },
    {
        "line": 31,
        "fullcodeline": "merged->resbody_access = (child->resbody_access == NOT_SET"
    },
    {
        "line": 34,
        "fullcodeline": "merged->of_limit = (child->of_limit == NOT_SET"
    },
    {
        "line": 36,
        "fullcodeline": "merged->if_limit_action = (child->if_limit_action == NOT_SET"
    },
    {
        "line": 38,
        "fullcodeline": "merged->of_limit_action = (child->of_limit_action == NOT_SET"
    },
    {
        "line": 40,
        "fullcodeline": "merged->reqintercept_oe = (child->reqintercept_oe == NOT_SET"
    },
    {
        "line": 86,
        "fullcodeline": "merged->debuglog_level = (child->debuglog_level == NOT_SET"
    },
    {
        "line": 89,
        "fullcodeline": "merged->cookie_format = (child->cookie_format == NOT_SET"
    },
    {
        "line": 91,
        "fullcodeline": "merged->argument_separator = (child->argument_separator == NOT_SET"
    },
    {
        "line": 93,
        "fullcodeline": "merged->cookiev0_separator = (child->cookiev0_separator == NOT_SET_P"
    },
    {
        "line": 172,
        "fullcodeline": "merged->rule_exceptions = apr_array_append(mp, parent->rule_exceptions,"
    },
    {
        "line": 175,
        "fullcodeline": "merged->hash_method = apr_array_append(mp, parent->hash_method,"
    },
    {
        "line": 179,
        "fullcodeline": "merged->auditlog_flag = (child->auditlog_flag == NOT_SET"
    },
    {
        "line": 181,
        "fullcodeline": "merged->auditlog_type = (child->auditlog_type == NOT_SET"
    },
    {
        "line": 183,
        "fullcodeline": "merged->max_rule_time = (child->max_rule_time == NOT_SET"
    },
    {
        "line": 185,
        "fullcodeline": "merged->auditlog_dirperms = (child->auditlog_dirperms == NOT_SET"
    },
    {
        "line": 187,
        "fullcodeline": "merged->auditlog_fileperms = (child->auditlog_fileperms == NOT_SET"
    },
    {
        "line": 203,
        "fullcodeline": "merged->auditlog_storage_dir = (child->auditlog_storage_dir == NOT_SET_P"
    },
    {
        "line": 205,
        "fullcodeline": "merged->auditlog_parts = (child->auditlog_parts == NOT_SET_P"
    },
    {
        "line": 207,
        "fullcodeline": "merged->auditlog_relevant_regex = (child->auditlog_relevant_regex == NOT_SET_P"
    },
    {
        "line": 211,
        "fullcodeline": "merged->tmp_dir = (child->tmp_dir == NOT_SET_P"
    },
    {
        "line": 213,
        "fullcodeline": "merged->upload_dir = (child->upload_dir == NOT_SET_P"
    },
    {
        "line": 215,
        "fullcodeline": "merged->upload_keep_files = (child->upload_keep_files == NOT_SET"
    },
    {
        "line": 217,
        "fullcodeline": "merged->upload_validates_files = (child->upload_validates_files == NOT_SET"
    },
    {
        "line": 219,
        "fullcodeline": "merged->upload_filemode = (child->upload_filemode == NOT_SET"
    },
    {
        "line": 221,
        "fullcodeline": "merged->upload_file_limit = (child->upload_file_limit == NOT_SET"
    },
    {
        "line": 225,
        "fullcodeline": "merged->data_dir = (child->data_dir == NOT_SET_P"
    },
    {
        "line": 227,
        "fullcodeline": "merged->webappid = (child->webappid == NOT_SET_P"
    },
    {
        "line": 229,
        "fullcodeline": "merged->sensor_id = (child->sensor_id == NOT_SET_P"
    },
    {
        "line": 231,
        "fullcodeline": "merged->httpBlkey = (child->httpBlkey == NOT_SET_P"
    },
    {
        "line": 235,
        "fullcodeline": "merged->content_injection_enabled = (child->content_injection_enabled == NOT_SET"
    },
    {
        "line": 239,
        "fullcodeline": "merged->stream_inbody_inspection = (child->stream_inbody_inspection == NOT_SET"
    },
    {
        "line": 241,
        "fullcodeline": "merged->stream_outbody_inspection = (child->stream_outbody_inspection == NOT_SET"
    },
    {
        "line": 245,
        "fullcodeline": "merged->geo = (child->geo == NOT_SET_P"
    },
    {
        "line": 249,
        "fullcodeline": "merged->gsb = (child->gsb == NOT_SET_P"
    },
    {
        "line": 253,
        "fullcodeline": "merged->u_map = (child->u_map == NOT_SET_P"
    },
    {
        "line": 257,
        "fullcodeline": "merged->cache_trans = (child->cache_trans == NOT_SET"
    },
    {
        "line": 259,
        "fullcodeline": "merged->cache_trans_incremental = (child->cache_trans_incremental == NOT_SET"
    },
    {
        "line": 261,
        "fullcodeline": "merged->cache_trans_min = (child->cache_trans_min == (apr_size_t)NOT_SET"
    },
    {
        "line": 263,
        "fullcodeline": "merged->cache_trans_max = (child->cache_trans_max == (apr_size_t)NOT_SET"
    },
    {
        "line": 265,
        "fullcodeline": "merged->cache_trans_maxitems = (child->cache_trans_maxitems == (apr_size_t)NOT_SET"
    },
    {
        "line": 269,
        "fullcodeline": "merged->component_signatures = apr_array_append(mp, parent->component_signatures,"
    },
    {
        "line": 272,
        "fullcodeline": "merged->request_encoding = (child->request_encoding == NOT_SET_P"
    },
    {
        "line": 275,
        "fullcodeline": "merged->disable_backend_compression = (child->disable_backend_compression == NOT_SET"
    },
    {
        "line": 278,
        "fullcodeline": "merged->col_timeout = (child->col_timeout == NOT_SET"
    },
    {
        "line": 282,
        "fullcodeline": "merged->crypto_key = (child->crypto_key == NOT_SET_P"
    },
    {
        "line": 284,
        "fullcodeline": "merged->crypto_key_len = (child->crypto_key_len == NOT_SET"
    },
    {
        "line": 286,
        "fullcodeline": "merged->crypto_key_add = (child->crypto_key_add == NOT_SET"
    },
    {
        "line": 288,
        "fullcodeline": "merged->crypto_param_name = (child->crypto_param_name == NOT_SET_P"
    },
    {
        "line": 290,
        "fullcodeline": "merged->hash_is_enabled = (child->hash_is_enabled == NOT_SET"
    },
    {
        "line": 292,
        "fullcodeline": "merged->hash_enforcement = (child->hash_enforcement == NOT_SET"
    },
    {
        "line": 294,
        "fullcodeline": "merged->crypto_hash_href_rx = (child->crypto_hash_href_rx == NOT_SET"
    },
    {
        "line": 296,
        "fullcodeline": "merged->crypto_hash_faction_rx = (child->crypto_hash_faction_rx == NOT_SET"
    },
    {
        "line": 298,
        "fullcodeline": "merged->crypto_hash_location_rx = (child->crypto_hash_location_rx == NOT_SET"
    },
    {
        "line": 300,
        "fullcodeline": "merged->crypto_hash_iframesrc_rx = (child->crypto_hash_iframesrc_rx == NOT_SET"
    },
    {
        "line": 302,
        "fullcodeline": "merged->crypto_hash_framesrc_rx = (child->crypto_hash_framesrc_rx == NOT_SET"
    },
    {
        "line": 304,
        "fullcodeline": "merged->crypto_hash_href_pm = (child->crypto_hash_href_pm == NOT_SET"
    },
    {
        "line": 306,
        "fullcodeline": "merged->crypto_hash_faction_pm = (child->crypto_hash_faction_pm == NOT_SET"
    },
    {
        "line": 308,
        "fullcodeline": "merged->crypto_hash_location_pm = (child->crypto_hash_location_pm == NOT_SET"
    },
    {
        "line": 310,
        "fullcodeline": "merged->crypto_hash_iframesrc_pm = (child->crypto_hash_iframesrc_pm == NOT_SET"
    },
    {
        "line": 312,
        "fullcodeline": "merged->crypto_hash_framesrc_pm = (child->crypto_hash_framesrc_pm == NOT_SET"
    },
    {
        "line": 316,
        "fullcodeline": "merged->xml_external_entity = (child->xml_external_entity == NOT_SET"
    },
    {
        "line": 11,
        "fullcodeline": "if (merged == NULL) return NULL;"
    },
    {
        "line": 43,
        "fullcodeline": "if (child->of_mime_types != NOT_SET_P) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (child->debuglog_fd == NOT_SET_P) {"
    },
    {
        "line": 98,
        "fullcodeline": "if ((child->rule_inheritance == NOT_SET)||(child->rule_inheritance == 1)) {"
    },
    {
        "line": 189,
        "fullcodeline": "if (child->auditlog_fd != NOT_SET_P) {"
    },
    {
        "line": 196,
        "fullcodeline": "if (child->auditlog2_fd != NOT_SET_P) {"
    },
    {
        "line": 79,
        "fullcodeline": "merged->debuglog_name = parent->debuglog_name;"
    },
    {
        "line": 80,
        "fullcodeline": "merged->debuglog_fd = parent->debuglog_fd;"
    },
    {
        "line": 99,
        "fullcodeline": "merged->rule_inheritance = parent->rule_inheritance;"
    },
    {
        "line": 190,
        "fullcodeline": "merged->auditlog_fd = child->auditlog_fd;"
    },
    {
        "line": 191,
        "fullcodeline": "merged->auditlog_name = child->auditlog_name;"
    },
    {
        "line": 197,
        "fullcodeline": "merged->auditlog2_fd = child->auditlog2_fd;"
    },
    {
        "line": 198,
        "fullcodeline": "merged->auditlog2_name = child->auditlog2_name;"
    },
    {
        "line": 46,
        "fullcodeline": "if (child->of_mime_types_cleared == 1) {"
    },
    {
        "line": 82,
        "fullcodeline": "merged->debuglog_name = child->debuglog_name;"
    },
    {
        "line": 83,
        "fullcodeline": "merged->debuglog_fd = child->debuglog_fd;"
    },
    {
        "line": 100,
        "fullcodeline": "if ((child->ruleset == NULL)&&(parent->ruleset == NULL)) {"
    },
    {
        "line": 154,
        "fullcodeline": "merged->rule_inheritance = 0;"
    },
    {
        "line": 193,
        "fullcodeline": "merged->auditlog_fd = parent->auditlog_fd;"
    },
    {
        "line": 194,
        "fullcodeline": "merged->auditlog_name = parent->auditlog_name;"
    },
    {
        "line": 200,
        "fullcodeline": "merged->auditlog2_fd = parent->auditlog2_fd;"
    },
    {
        "line": 201,
        "fullcodeline": "merged->auditlog2_name = parent->auditlog2_name;"
    },
    {
        "line": 51,
        "fullcodeline": "merged->of_mime_types = child->of_mime_types;"
    },
    {
        "line": 52,
        "fullcodeline": "merged->of_mime_types_cleared = 1;"
    },
    {
        "line": 69,
        "fullcodeline": "if (child->of_mime_types_cleared == 1) {"
    },
    {
        "line": 155,
        "fullcodeline": "if (child->ruleset != NULL) {"
    },
    {
        "line": 70,
        "fullcodeline": "merged->of_mime_types_cleared = 1;"
    },
    {
        "line": 157,
        "fullcodeline": "merged->ruleset = msre_ruleset_create(child->ruleset->engine, mp);"
    },
    {
        "line": 158,
        "fullcodeline": "merged->ruleset->phase_request_headers = apr_array_copy(mp,"
    },
    {
        "line": 160,
        "fullcodeline": "merged->ruleset->phase_request_body = apr_array_copy(mp,"
    },
    {
        "line": 162,
        "fullcodeline": "merged->ruleset->phase_response_headers = apr_array_copy(mp,"
    },
    {
        "line": 164,
        "fullcodeline": "merged->ruleset->phase_response_body = apr_array_copy(mp,"
    },
    {
        "line": 166,
        "fullcodeline": "merged->ruleset->phase_logging = apr_array_copy(mp,"
    },
    {
        "line": 57,
        "fullcodeline": "if (parent->of_mime_types == NOT_SET_P) {"
    },
    {
        "line": 72,
        "fullcodeline": "merged->of_mime_types = parent->of_mime_types;"
    },
    {
        "line": 73,
        "fullcodeline": "merged->of_mime_types_cleared = parent->of_mime_types_cleared;"
    },
    {
        "line": 107,
        "fullcodeline": "if (child->ruleset == NULL) {"
    },
    {
        "line": 58,
        "fullcodeline": "merged->of_mime_types = child->of_mime_types;"
    },
    {
        "line": 59,
        "fullcodeline": "merged->of_mime_types_cleared = NOT_SET;"
    },
    {
        "line": 113,
        "fullcodeline": "merged->ruleset = msre_ruleset_create(parent->ruleset->engine, mp);"
    },
    {
        "line": 114,
        "fullcodeline": "copy_rules(mp, parent->ruleset, merged->ruleset, child->rule_exceptions);"
    },
    {
        "line": 61,
        "fullcodeline": "merged->of_mime_types = apr_table_overlay(mp, parent->of_mime_types,"
    },
    {
        "line": 63,
        "fullcodeline": "if (merged->of_mime_types == NULL) return NULL;"
    },
    {
        "line": 116,
        "fullcodeline": "if (parent->ruleset == NULL) {"
    },
    {
        "line": 122,
        "fullcodeline": "merged->ruleset = msre_ruleset_create(child->ruleset->engine, mp);"
    },
    {
        "line": 123,
        "fullcodeline": "merged->ruleset->phase_request_headers = apr_array_copy(mp,"
    },
    {
        "line": 125,
        "fullcodeline": "merged->ruleset->phase_request_body = apr_array_copy(mp,"
    },
    {
        "line": 127,
        "fullcodeline": "merged->ruleset->phase_response_headers = apr_array_copy(mp,"
    },
    {
        "line": 129,
        "fullcodeline": "merged->ruleset->phase_response_body = apr_array_copy(mp,"
    },
    {
        "line": 131,
        "fullcodeline": "merged->ruleset->phase_logging = apr_array_copy(mp,"
    },
    {
        "line": 139,
        "fullcodeline": "merged->ruleset = msre_ruleset_create(parent->ruleset->engine, mp);"
    },
    {
        "line": 140,
        "fullcodeline": "copy_rules(mp, parent->ruleset, merged->ruleset, child->rule_exceptions);"
    }
]