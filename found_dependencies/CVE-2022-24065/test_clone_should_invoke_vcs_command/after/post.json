[
    {
        "line": 11,
        "fullcodeline": "mocker.patch('cookiecutter.vcs.is_vcs_installed', autospec=True, return_value=True)"
    },
    {
        "line": 13,
        "fullcodeline": "mock_subprocess = mocker.patch("
    },
    {
        "line": 17,
        "fullcodeline": "expected_repo_dir = os.path.normpath(os.path.join(clone_dir, repo_name))"
    },
    {
        "line": 19,
        "fullcodeline": "branch = 'foobar'"
    },
    {
        "line": 21,
        "fullcodeline": "repo_dir = vcs.clone("
    },
    {
        "line": 25,
        "fullcodeline": "assert repo_dir == expected_repo_dir"
    },
    {
        "line": 27,
        "fullcodeline": "mock_subprocess.assert_any_call("
    },
    {
        "line": 31,
        "fullcodeline": "branch_info = [branch]"
    },
    {
        "line": 36,
        "fullcodeline": "mock_subprocess.assert_any_call("
    },
    {
        "line": 28,
        "fullcodeline": "[repo_type, 'clone', repo_url], cwd=str(clone_dir), stderr=subprocess.STDOUT"
    },
    {
        "line": 33,
        "fullcodeline": "if repo_type == \"hg\":"
    },
    {
        "line": 37,
        "fullcodeline": "[repo_type, 'checkout', *branch_info],"
    },
    {
        "line": 22,
        "fullcodeline": "repo_url, checkout=branch, clone_to_dir=str(clone_dir), no_input=True"
    },
    {
        "line": 34,
        "fullcodeline": "branch_info.insert(0, \"--\")"
    }
]