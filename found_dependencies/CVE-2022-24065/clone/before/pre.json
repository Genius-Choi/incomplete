[
    {
        "line": 12,
        "fullcodeline": "clone_to_dir = os.path.expanduser(clone_to_dir)"
    },
    {
        "line": 13,
        "fullcodeline": "make_sure_path_exists(clone_to_dir)"
    },
    {
        "line": 23,
        "fullcodeline": "repo_url = repo_url.rstrip('/')"
    },
    {
        "line": 24,
        "fullcodeline": "repo_name = os.path.split(repo_url)[1]"
    },
    {
        "line": 30,
        "fullcodeline": "logger.debug(f'repo_dir is {repo_dir}')"
    },
    {
        "line": 16,
        "fullcodeline": "repo_type, repo_url = identify_repo(repo_url)"
    },
    {
        "line": 19,
        "fullcodeline": "if not is_vcs_installed(repo_type):"
    },
    {
        "line": 25,
        "fullcodeline": "if repo_type == 'git':"
    },
    {
        "line": 28,
        "fullcodeline": "if repo_type == 'hg':"
    },
    {
        "line": 20,
        "fullcodeline": "msg = f\"'{repo_type}' is not installed.\""
    },
    {
        "line": 21,
        "fullcodeline": "raise VCSNotInstalled(msg)"
    },
    {
        "line": 26,
        "fullcodeline": "repo_name = repo_name.split(':')[-1].rsplit('.git')[0]"
    },
    {
        "line": 27,
        "fullcodeline": "repo_dir = os.path.normpath(os.path.join(clone_to_dir, repo_name))"
    },
    {
        "line": 29,
        "fullcodeline": "repo_dir = os.path.normpath(os.path.join(clone_to_dir, repo_name))"
    },
    {
        "line": 32,
        "fullcodeline": "if os.path.isdir(repo_dir):"
    },
    {
        "line": 33,
        "fullcodeline": "clone = prompt_and_delete(repo_dir, no_input=no_input)"
    },
    {
        "line": 35,
        "fullcodeline": "clone = True"
    },
    {
        "line": 39,
        "fullcodeline": "subprocess.check_output(  # nosec"
    },
    {
        "line": 40,
        "fullcodeline": "[repo_type, 'clone', repo_url],"
    },
    {
        "line": 44,
        "fullcodeline": "if checkout is not None:"
    },
    {
        "line": 45,
        "fullcodeline": "subprocess.check_output(  # nosec"
    },
    {
        "line": 51,
        "fullcodeline": "output = clone_error.output.decode('utf-8')"
    },
    {
        "line": 62,
        "fullcodeline": "logger.error('git clone failed with error: %s', output)"
    },
    {
        "line": 63,
        "fullcodeline": "raise"
    },
    {
        "line": 46,
        "fullcodeline": "[repo_type, 'checkout', checkout],"
    },
    {
        "line": 52,
        "fullcodeline": "if 'not found' in output.lower():"
    },
    {
        "line": 57,
        "fullcodeline": "if any(error in output for error in BRANCH_ERRORS):"
    },
    {
        "line": 53,
        "fullcodeline": "raise RepositoryNotFound("
    },
    {
        "line": 58,
        "fullcodeline": "raise RepositoryCloneFailed("
    },
    {
        "line": 54,
        "fullcodeline": "'The repository {} could not be found, '"
    },
    {
        "line": 59,
        "fullcodeline": "'The {} branch of repository {} could not found, '"
    }
]