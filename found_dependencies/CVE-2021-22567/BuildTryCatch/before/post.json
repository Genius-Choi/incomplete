[
    {
        "line": 2,
        "fullcodeline": "ASSERT(block_expression_depth() == 0);  // no try-catch in block-expr"
    },
    {
        "line": 3,
        "fullcodeline": "InlineBailout(\"kernel::FlowgraphBuilder::VisitTryCatch\");"
    },
    {
        "line": 5,
        "fullcodeline": "intptr_t try_handler_index = AllocateTryIndex();"
    },
    {
        "line": 6,
        "fullcodeline": "Fragment try_body = TryCatch(try_handler_index);"
    },
    {
        "line": 7,
        "fullcodeline": "JoinEntryInstr* after_try = BuildJoinEntry();"
    },
    {
        "line": 10,
        "fullcodeline": "try_depth_inc();"
    },
    {
        "line": 16,
        "fullcodeline": "try_depth_dec();"
    },
    {
        "line": 18,
        "fullcodeline": "const int kNeedsStracktraceBit = 1 << 0;"
    },
    {
        "line": 19,
        "fullcodeline": "const int kIsSyntheticBit = 1 << 1;"
    },
    {
        "line": 21,
        "fullcodeline": "uint8_t flags = ReadByte();"
    },
    {
        "line": 22,
        "fullcodeline": "bool needs_stacktrace ="
    },
    {
        "line": 24,
        "fullcodeline": "bool is_synthetic = (flags & kIsSyntheticBit) == kIsSyntheticBit;"
    },
    {
        "line": 26,
        "fullcodeline": "catch_depth_inc();"
    },
    {
        "line": 27,
        "fullcodeline": "intptr_t catch_count = ReadListLength();  // read number of catches."
    },
    {
        "line": 28,
        "fullcodeline": "const Array& handler_types ="
    },
    {
        "line": 31,
        "fullcodeline": "Fragment catch_body = CatchBlockEntry(handler_types, try_handler_index,"
    },
    {
        "line": 117,
        "fullcodeline": "catch_depth_dec();"
    },
    {
        "line": 12,
        "fullcodeline": "TryCatchBlock block(flow_graph_builder_, try_handler_index);"
    },
    {
        "line": 13,
        "fullcodeline": "try_body += BuildStatement();  // read body."
    },
    {
        "line": 14,
        "fullcodeline": "try_body += Goto(after_try);"
    },
    {
        "line": 23,
        "fullcodeline": "(flags & kNeedsStracktraceBit) == kNeedsStracktraceBit;"
    },
    {
        "line": 29,
        "fullcodeline": "Array::ZoneHandle(Z, Array::New(catch_count, Heap::kOld));"
    },
    {
        "line": 34,
        "fullcodeline": "for (intptr_t i = 0; i < catch_count; ++i) {"
    },
    {
        "line": 111,
        "fullcodeline": "if (catch_body.is_open()) {"
    },
    {
        "line": 119,
        "fullcodeline": "return Fragment(try_body.entry, after_try);"
    },
    {
        "line": 35,
        "fullcodeline": "intptr_t catch_offset = ReaderOffset();          // Catch has no tag."
    },
    {
        "line": 36,
        "fullcodeline": "TokenPosition position = ReadPosition();         // read position."
    },
    {
        "line": 37,
        "fullcodeline": "const AbstractType& type_guard = T.BuildType();  // read guard."
    },
    {
        "line": 38,
        "fullcodeline": "handler_types.SetAt(i, type_guard);"
    },
    {
        "line": 40,
        "fullcodeline": "Fragment catch_handler_body = EnterScope(catch_offset);"
    },
    {
        "line": 42,
        "fullcodeline": "Tag tag = ReadTag();  // read first part of exception."
    },
    {
        "line": 52,
        "fullcodeline": "tag = ReadTag();  // read first part of stack trace."
    },
    {
        "line": 112,
        "fullcodeline": "catch_body += LoadLocal(CurrentException());"
    },
    {
        "line": 113,
        "fullcodeline": "catch_body += LoadLocal(CurrentStackTrace());"
    },
    {
        "line": 114,
        "fullcodeline": "catch_body += RethrowException(TokenPosition::kNoSource, try_handler_index);"
    },
    {
        "line": 115,
        "fullcodeline": "Drop();"
    },
    {
        "line": 43,
        "fullcodeline": "if (tag == kSomething) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (tag == kSomething) {"
    },
    {
        "line": 63,
        "fullcodeline": "CatchBlock block(flow_graph_builder_, CurrentException(),"
    },
    {
        "line": 66,
        "fullcodeline": "catch_handler_body += BuildStatement();  // read body."
    },
    {
        "line": 70,
        "fullcodeline": "catch_handler_body += ExitScope(catch_offset);"
    },
    {
        "line": 76,
        "fullcodeline": "if (!type_guard.IsCatchAllType()) {"
    },
    {
        "line": 44,
        "fullcodeline": "catch_handler_body += LoadLocal(CurrentException());"
    },
    {
        "line": 45,
        "fullcodeline": "catch_handler_body +="
    },
    {
        "line": 48,
        "fullcodeline": "catch_handler_body += Drop();"
    },
    {
        "line": 49,
        "fullcodeline": "SkipVariableDeclaration();  // read exception."
    },
    {
        "line": 54,
        "fullcodeline": "catch_handler_body += LoadLocal(CurrentStackTrace());"
    },
    {
        "line": 55,
        "fullcodeline": "catch_handler_body +="
    },
    {
        "line": 58,
        "fullcodeline": "catch_handler_body += Drop();"
    },
    {
        "line": 59,
        "fullcodeline": "SkipVariableDeclaration();  // read stack trace."
    },
    {
        "line": 71,
        "fullcodeline": "if (catch_handler_body.is_open()) {"
    },
    {
        "line": 77,
        "fullcodeline": "catch_body += LoadLocal(CurrentException());"
    },
    {
        "line": 91,
        "fullcodeline": "catch_body += Constant(type_guard);"
    },
    {
        "line": 93,
        "fullcodeline": "catch_body += InstanceCall("
    },
    {
        "line": 99,
        "fullcodeline": "catch_body += BranchIfTrue(&catch_entry, &next_catch_entry, false);"
    },
    {
        "line": 101,
        "fullcodeline": "Fragment(catch_entry) + catch_handler_body;"
    },
    {
        "line": 102,
        "fullcodeline": "catch_body = Fragment(next_catch_entry);"
    },
    {
        "line": 46,
        "fullcodeline": "StoreLocal(TokenPosition::kNoSource,"
    },
    {
        "line": 56,
        "fullcodeline": "StoreLocal(TokenPosition::kNoSource,"
    },
    {
        "line": 72,
        "fullcodeline": "catch_handler_body += Goto(after_try);"
    },
    {
        "line": 79,
        "fullcodeline": "if (!type_guard.IsInstantiated(kCurrentClass)) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (!type_guard.IsInstantiated(kFunctions)) {"
    },
    {
        "line": 104,
        "fullcodeline": "catch_body += catch_handler_body;"
    },
    {
        "line": 47,
        "fullcodeline": "LookupVariable(ReaderOffset() + data_program_offset_));"
    },
    {
        "line": 57,
        "fullcodeline": "LookupVariable(ReaderOffset() + data_program_offset_));"
    },
    {
        "line": 80,
        "fullcodeline": "catch_body += LoadInstantiatorTypeArguments();"
    },
    {
        "line": 86,
        "fullcodeline": "catch_body += LoadFunctionTypeArguments();"
    },
    {
        "line": 94,
        "fullcodeline": "position, Library::PrivateCoreLibName(Symbols::_instanceOf()),"
    },
    {
        "line": 82,
        "fullcodeline": "catch_body += NullConstant();"
    },
    {
        "line": 88,
        "fullcodeline": "catch_body += NullConstant();"
    }
]