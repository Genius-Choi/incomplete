[
    {
        "line": 2,
        "fullcodeline": "TokenPosition position = ReadPosition();  // read position."
    },
    {
        "line": 3,
        "fullcodeline": "Tag tag = ReadTag();                      // read first part of expression."
    },
    {
        "line": 5,
        "fullcodeline": "bool inside_try_finally = try_finally_block() != NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "Fragment instructions = tag == kNothing"
    },
    {
        "line": 11,
        "fullcodeline": "if (instructions.is_open()) {"
    },
    {
        "line": 29,
        "fullcodeline": "Pop();"
    },
    {
        "line": 13,
        "fullcodeline": "ASSERT(scopes()->finally_return_variable != NULL);"
    },
    {
        "line": 14,
        "fullcodeline": "const Function& function = parsed_function()->function();"
    },
    {
        "line": 18,
        "fullcodeline": "instructions += StoreLocal(position, scopes()->finally_return_variable);"
    },
    {
        "line": 19,
        "fullcodeline": "instructions += Drop();"
    },
    {
        "line": 20,
        "fullcodeline": "instructions += TranslateFinallyFinalizers(NULL, -1);"
    },
    {
        "line": 15,
        "fullcodeline": "if (NeedsDebugStepCheck(function, position)) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (instructions.is_open()) {"
    },
    {
        "line": 26,
        "fullcodeline": "instructions += Return(position);"
    },
    {
        "line": 16,
        "fullcodeline": "instructions += DebugStepCheck(position);"
    },
    {
        "line": 22,
        "fullcodeline": "instructions += LoadLocal(scopes()->finally_return_variable);"
    },
    {
        "line": 23,
        "fullcodeline": "instructions += Return(TokenPosition::kNoSource);"
    }
]