[
    {
        "line": 2,
        "fullcodeline": "assert(c != NULL);"
    },
    {
        "line": 3,
        "fullcodeline": "assert(c->rcurr <= (c->rbuf + c->rsize));"
    },
    {
        "line": 4,
        "fullcodeline": "assert(c->rbytes > 0);"
    },
    {
        "line": 6,
        "fullcodeline": "if (c->protocol == negotiating_prot || c->transport == udp_transport)  {"
    },
    {
        "line": 19,
        "fullcodeline": "if (c->protocol == binary_prot) {"
    },
    {
        "line": 7,
        "fullcodeline": "if ((unsigned char)c->rbuf[0] == (unsigned char)PROTOCOL_BINARY_REQ) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (settings.verbose > 1) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (c->rbytes < sizeof(c->binary_header)) {"
    },
    {
        "line": 90,
        "fullcodeline": "el = memchr(c->rcurr, '\\n', c->rbytes);"
    },
    {
        "line": 112,
        "fullcodeline": "cont = el + 1;"
    },
    {
        "line": 120,
        "fullcodeline": "process_command(c, c->rcurr);"
    },
    {
        "line": 123,
        "fullcodeline": "c->rcurr = cont;"
    },
    {
        "line": 8,
        "fullcodeline": "c->protocol = binary_prot;"
    },
    {
        "line": 14,
        "fullcodeline": "fprintf(stderr, \"%d: Client using the %s protocol\\n\", c->sfd,"
    },
    {
        "line": 87,
        "fullcodeline": "if (c->rbytes == 0)"
    },
    {
        "line": 91,
        "fullcodeline": "if (!el) {"
    },
    {
        "line": 118,
        "fullcodeline": "assert(cont <= (c->rcurr + c->rbytes));"
    },
    {
        "line": 122,
        "fullcodeline": "c->rbytes -= (cont - c->rcurr);"
    },
    {
        "line": 125,
        "fullcodeline": "assert(c->rcurr <= (c->rbuf + c->rsize));"
    },
    {
        "line": 10,
        "fullcodeline": "c->protocol = ascii_prot;"
    },
    {
        "line": 15,
        "fullcodeline": "prot_text(c->protocol));"
    },
    {
        "line": 51,
        "fullcodeline": "c->binary_header = *req;"
    },
    {
        "line": 65,
        "fullcodeline": "c->msgcurr = 0;"
    },
    {
        "line": 66,
        "fullcodeline": "c->msgused = 0;"
    },
    {
        "line": 67,
        "fullcodeline": "c->iovused = 0;"
    },
    {
        "line": 73,
        "fullcodeline": "c->cmd = c->binary_header.request.opcode;"
    },
    {
        "line": 74,
        "fullcodeline": "c->keylen = c->binary_header.request.keylen;"
    },
    {
        "line": 75,
        "fullcodeline": "c->opaque = c->binary_header.request.opaque;"
    },
    {
        "line": 77,
        "fullcodeline": "c->cas = 0;"
    },
    {
        "line": 79,
        "fullcodeline": "dispatch_bin_command(c);"
    },
    {
        "line": 113,
        "fullcodeline": "if ((el - c->rcurr) > 1 && *(el - 1) == '\\r') {"
    },
    {
        "line": 52,
        "fullcodeline": "c->binary_header.request.keylen = ntohs(req->request.keylen);"
    },
    {
        "line": 53,
        "fullcodeline": "c->binary_header.request.bodylen = ntohl(req->request.bodylen);"
    },
    {
        "line": 54,
        "fullcodeline": "c->binary_header.request.cas = ntohll(req->request.cas);"
    },
    {
        "line": 56,
        "fullcodeline": "if (c->binary_header.request.magic != PROTOCOL_BINARY_REQ) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (c->rbytes > 1024) {"
    },
    {
        "line": 41,
        "fullcodeline": "fprintf(stderr, \"<%d Read binary protocol data:\", c->sfd);"
    },
    {
        "line": 48,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 68,
        "fullcodeline": "if (add_msghdr(c) != 0) {"
    },
    {
        "line": 97,
        "fullcodeline": "char *ptr = c->rcurr;"
    },
    {
        "line": 42,
        "fullcodeline": "for (ii = 0; ii < sizeof(req->bytes); ++ii) {"
    },
    {
        "line": 62,
        "fullcodeline": "return -1;"
    },
    {
        "line": 98,
        "fullcodeline": "while (*ptr == ' ') { /* ignore leading whitespaces */"
    },
    {
        "line": 46,
        "fullcodeline": "fprintf(stderr, \" 0x%02x\", req->bytes[ii]);"
    },
    {
        "line": 99,
        "fullcodeline": "++ptr;"
    },
    {
        "line": 102,
        "fullcodeline": "if (ptr - c->rcurr > 100 ||"
    },
    {
        "line": 103,
        "fullcodeline": "(strncmp(ptr, \"get \", 4) && strncmp(ptr, \"gets \", 5))) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (ii % 4 == 0) {"
    },
    {
        "line": 44,
        "fullcodeline": "fprintf(stderr, \"\\n<%d   \", c->sfd);"
    }
]