[
    {
        "line": 6,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 49,
        "fullcodeline": "loop = here(J, F);"
    },
    {
        "line": 50,
        "fullcodeline": "cstm(J, F, stm->a);"
    },
    {
        "line": 51,
        "fullcodeline": "cont = here(J, F);"
    },
    {
        "line": 52,
        "fullcodeline": "cexp(J, F, stm->b);"
    },
    {
        "line": 53,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 54,
        "fullcodeline": "emitjumpto(J, F, OP_JTRUE, loop);"
    },
    {
        "line": 59,
        "fullcodeline": "loop = here(J, F);"
    },
    {
        "line": 60,
        "fullcodeline": "cexp(J, F, stm->a);"
    },
    {
        "line": 61,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 62,
        "fullcodeline": "end = emitjump(J, F, OP_JFALSE);"
    },
    {
        "line": 63,
        "fullcodeline": "cstm(J, F, stm->b);"
    },
    {
        "line": 64,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 65,
        "fullcodeline": "emitjumpto(J, F, OP_JUMP, loop);"
    },
    {
        "line": 66,
        "fullcodeline": "label(J, F, end);"
    },
    {
        "line": 80,
        "fullcodeline": "loop = here(J, F);"
    },
    {
        "line": 88,
        "fullcodeline": "cstm(J, F, stm->d);"
    },
    {
        "line": 89,
        "fullcodeline": "cont = here(J, F);"
    },
    {
        "line": 94,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 95,
        "fullcodeline": "emitjumpto(J, F, OP_JUMP, loop);"
    },
    {
        "line": 103,
        "fullcodeline": "cexp(J, F, stm->b);"
    },
    {
        "line": 104,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 105,
        "fullcodeline": "emit(J, F, OP_ITERATOR);"
    },
    {
        "line": 106,
        "fullcodeline": "loop = here(J, F);"
    },
    {
        "line": 122,
        "fullcodeline": "label(J, F, end);"
    },
    {
        "line": 127,
        "fullcodeline": "cswitch(J, F, stm->a, stm->b);"
    },
    {
        "line": 132,
        "fullcodeline": "cstm(J, F, stm->b);"
    },
    {
        "line": 152,
        "fullcodeline": "cexit(J, F, STM_BREAK, stm, target);"
    },
    {
        "line": 153,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 168,
        "fullcodeline": "cexit(J, F, STM_CONTINUE, stm, target);"
    },
    {
        "line": 169,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 178,
        "fullcodeline": "target = returntarget(J, F, stm->parent);"
    },
    {
        "line": 181,
        "fullcodeline": "cexit(J, F, STM_RETURN, stm, target);"
    },
    {
        "line": 182,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 183,
        "fullcodeline": "emit(J, F, OP_RETURN);"
    },
    {
        "line": 187,
        "fullcodeline": "cexp(J, F, stm->a);"
    },
    {
        "line": 188,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 189,
        "fullcodeline": "emit(J, F, OP_THROW);"
    },
    {
        "line": 193,
        "fullcodeline": "F->lightweight = 0;"
    },
    {
        "line": 196,
        "fullcodeline": "cexp(J, F, stm->a);"
    },
    {
        "line": 197,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 198,
        "fullcodeline": "emit(J, F, OP_WITH);"
    },
    {
        "line": 199,
        "fullcodeline": "cstm(J, F, stm->b);"
    },
    {
        "line": 200,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 201,
        "fullcodeline": "emit(J, F, OP_ENDWITH);"
    },
    {
        "line": 205,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 218,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 219,
        "fullcodeline": "emit(J, F, OP_DEBUGGER);"
    },
    {
        "line": 55,
        "fullcodeline": "labeljumps(J, F, stm->jumps, here(J,F), cont);"
    },
    {
        "line": 67,
        "fullcodeline": "labeljumps(J, F, stm->jumps, here(J,F), loop);"
    },
    {
        "line": 72,
        "fullcodeline": "if (stm->type == STM_FOR_VAR) {"
    },
    {
        "line": 98,
        "fullcodeline": "labeljumps(J, F, stm->jumps, here(J,F), cont);"
    },
    {
        "line": 108,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 109,
        "fullcodeline": "emit(J, F, OP_NEXTITER);"
    },
    {
        "line": 110,
        "fullcodeline": "end = emitjump(J, F, OP_JFALSE);"
    },
    {
        "line": 111,
        "fullcodeline": "cassignforin(J, F, stm);"
    },
    {
        "line": 119,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 120,
        "fullcodeline": "emitjumpto(J, F, OP_JUMP, loop);"
    },
    {
        "line": 123,
        "fullcodeline": "labeljumps(J, F, stm->jumps, here(J,F), loop);"
    },
    {
        "line": 128,
        "fullcodeline": "labeljumps(J, F, stm->jumps, here(J,F), 0);"
    },
    {
        "line": 134,
        "fullcodeline": "while (stm->type == STM_LABEL)"
    },
    {
        "line": 135,
        "fullcodeline": "stm = stm->b;"
    },
    {
        "line": 154,
        "fullcodeline": "addjump(J, F, STM_BREAK, target, emitjump(J, F, OP_JUMP));"
    },
    {
        "line": 170,
        "fullcodeline": "addjump(J, F, STM_CONTINUE, target, emitjump(J, F, OP_JUMP));"
    },
    {
        "line": 179,
        "fullcodeline": "if (!target)"
    },
    {
        "line": 206,
        "fullcodeline": "if (stm->b && stm->c) {"
    },
    {
        "line": 18,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 19,
        "fullcodeline": "emit(J, F, OP_POP);"
    },
    {
        "line": 30,
        "fullcodeline": "cexp(J, F, stm->a);"
    },
    {
        "line": 31,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 32,
        "fullcodeline": "then = emitjump(J, F, OP_JTRUE);"
    },
    {
        "line": 33,
        "fullcodeline": "cstm(J, F, stm->c);"
    },
    {
        "line": 34,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 35,
        "fullcodeline": "end = emitjump(J, F, OP_JUMP);"
    },
    {
        "line": 36,
        "fullcodeline": "label(J, F, then);"
    },
    {
        "line": 37,
        "fullcodeline": "cstm(J, F, stm->b);"
    },
    {
        "line": 73,
        "fullcodeline": "cvarinit(J, F, stm->a);"
    },
    {
        "line": 82,
        "fullcodeline": "cexp(J, F, stm->b);"
    },
    {
        "line": 83,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 84,
        "fullcodeline": "end = emitjump(J, F, OP_JFALSE);"
    },
    {
        "line": 91,
        "fullcodeline": "cexp(J, F, stm->c);"
    },
    {
        "line": 92,
        "fullcodeline": "emit(J, F, OP_POP);"
    },
    {
        "line": 97,
        "fullcodeline": "label(J, F, end);"
    },
    {
        "line": 137,
        "fullcodeline": "if (!isloop(stm->type) && stm->type != STM_SWITCH)"
    },
    {
        "line": 143,
        "fullcodeline": "checkfutureword(J, F, stm->a);"
    },
    {
        "line": 144,
        "fullcodeline": "target = breaktarget(J, F, stm->parent, stm->a->string);"
    },
    {
        "line": 159,
        "fullcodeline": "checkfutureword(J, F, stm->a);"
    },
    {
        "line": 160,
        "fullcodeline": "target = continuetarget(J, F, stm->parent, stm->a->string);"
    },
    {
        "line": 175,
        "fullcodeline": "cexp(J, F, stm->a);"
    },
    {
        "line": 180,
        "fullcodeline": "jsC_error(J, stm, \"return not in function\");"
    },
    {
        "line": 195,
        "fullcodeline": "jsC_error(J, stm->a, \"'with' statements are not allowed in strict mode\");"
    },
    {
        "line": 207,
        "fullcodeline": "F->lightweight = 0;"
    },
    {
        "line": 224,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 225,
        "fullcodeline": "emit(J, F, OP_POP);"
    },
    {
        "line": 40,
        "fullcodeline": "cexp(J, F, stm->a);"
    },
    {
        "line": 41,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 42,
        "fullcodeline": "end = emitjump(J, F, OP_JFALSE);"
    },
    {
        "line": 43,
        "fullcodeline": "cstm(J, F, stm->b);"
    },
    {
        "line": 86,
        "fullcodeline": "end = 0;"
    },
    {
        "line": 113,
        "fullcodeline": "emit(J, F, OP_ROT2);"
    },
    {
        "line": 114,
        "fullcodeline": "cstm(J, F, stm->c);"
    },
    {
        "line": 115,
        "fullcodeline": "emit(J, F, OP_ROT2);"
    },
    {
        "line": 138,
        "fullcodeline": "labeljumps(J, F, stm->jumps, here(J,F), 0);"
    },
    {
        "line": 145,
        "fullcodeline": "if (!target)"
    },
    {
        "line": 148,
        "fullcodeline": "target = breaktarget(J, F, stm->parent, NULL);"
    },
    {
        "line": 161,
        "fullcodeline": "if (!target)"
    },
    {
        "line": 164,
        "fullcodeline": "target = continuetarget(J, F, stm->parent, NULL);"
    },
    {
        "line": 177,
        "fullcodeline": "emit(J, F, OP_UNDEF);"
    },
    {
        "line": 228,
        "fullcodeline": "cexp(J, F, stm);"
    },
    {
        "line": 229,
        "fullcodeline": "emitline(J, F, stm);"
    },
    {
        "line": 117,
        "fullcodeline": "cstm(J, F, stm->c);"
    },
    {
        "line": 146,
        "fullcodeline": "jsC_error(J, stm, \"break label '%s' not found\", stm->a->string);"
    },
    {
        "line": 149,
        "fullcodeline": "if (!target)"
    },
    {
        "line": 162,
        "fullcodeline": "jsC_error(J, stm, \"continue label '%s' not found\", stm->a->string);"
    },
    {
        "line": 165,
        "fullcodeline": "if (!target)"
    },
    {
        "line": 76,
        "fullcodeline": "cexp(J, F, stm->a);"
    },
    {
        "line": 77,
        "fullcodeline": "emit(J, F, OP_POP);"
    },
    {
        "line": 150,
        "fullcodeline": "jsC_error(J, stm, \"unlabelled break must be inside loop or switch\");"
    },
    {
        "line": 166,
        "fullcodeline": "jsC_error(J, stm, \"continue must be inside loop\");"
    }
]