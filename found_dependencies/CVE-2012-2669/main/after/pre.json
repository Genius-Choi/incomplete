[
    {
        "line": 14,
        "fullcodeline": "daemon(1, 0);"
    },
    {
        "line": 15,
        "fullcodeline": "openlog(\"KVP\", 0, LOG_USER);"
    },
    {
        "line": 16,
        "fullcodeline": "syslog(LOG_INFO, \"KVP starting; pid is:%d\", getpid());"
    },
    {
        "line": 20,
        "fullcodeline": "kvp_get_os_info();"
    },
    {
        "line": 27,
        "fullcodeline": "fd = socket(AF_NETLINK, SOCK_DGRAM, NETLINK_CONNECTOR);"
    },
    {
        "line": 32,
        "fullcodeline": "addr.nl_family = AF_NETLINK;"
    },
    {
        "line": 33,
        "fullcodeline": "addr.nl_pad = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "addr.nl_pid = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "addr.nl_groups = CN_KVP_IDX;"
    },
    {
        "line": 38,
        "fullcodeline": "error = bind(fd, (struct sockaddr *)&addr, sizeof(addr));"
    },
    {
        "line": 44,
        "fullcodeline": "sock_opt = addr.nl_groups;"
    },
    {
        "line": 45,
        "fullcodeline": "setsockopt(fd, 270, 1, &sock_opt, sizeof(sock_opt));"
    },
    {
        "line": 49,
        "fullcodeline": "message = (struct cn_msg *)kvp_send_buffer;"
    },
    {
        "line": 50,
        "fullcodeline": "message->id.idx = CN_KVP_IDX;"
    },
    {
        "line": 51,
        "fullcodeline": "message->id.val = CN_KVP_VAL;"
    },
    {
        "line": 53,
        "fullcodeline": "hv_msg = (struct hv_kvp_msg *)message->data;"
    },
    {
        "line": 54,
        "fullcodeline": "hv_msg->kvp_hdr.operation = KVP_OP_REGISTER;"
    },
    {
        "line": 55,
        "fullcodeline": "message->ack = 0;"
    },
    {
        "line": 56,
        "fullcodeline": "message->len = sizeof(struct hv_kvp_msg);"
    },
    {
        "line": 58,
        "fullcodeline": "len = netlink_send(fd, message);"
    },
    {
        "line": 65,
        "fullcodeline": "pfd.fd = fd;"
    },
    {
        "line": 22,
        "fullcodeline": "if (kvp_file_init()) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (fd < 0) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (error < 0) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (len < 0) {"
    },
    {
        "line": 23,
        "fullcodeline": "syslog(LOG_ERR, \"Failed to initialize the pools\");"
    },
    {
        "line": 29,
        "fullcodeline": "syslog(LOG_ERR, \"netlink socket creation failed; error:%d\", fd);"
    },
    {
        "line": 40,
        "fullcodeline": "syslog(LOG_ERR, \"bind failed; error:%d\", error);"
    },
    {
        "line": 41,
        "fullcodeline": "close(fd);"
    },
    {
        "line": 60,
        "fullcodeline": "syslog(LOG_ERR, \"netlink_send failed; error:%d\", len);"
    },
    {
        "line": 61,
        "fullcodeline": "close(fd);"
    },
    {
        "line": 68,
        "fullcodeline": "struct sockaddr *addr_p = (struct sockaddr *) &addr;"
    },
    {
        "line": 69,
        "fullcodeline": "socklen_t addr_l = sizeof(addr);"
    },
    {
        "line": 70,
        "fullcodeline": "pfd.events = POLLIN;"
    },
    {
        "line": 71,
        "fullcodeline": "pfd.revents = 0;"
    },
    {
        "line": 72,
        "fullcodeline": "poll(&pfd, 1, -1);"
    },
    {
        "line": 74,
        "fullcodeline": "len = recvfrom(fd, kvp_recv_buffer, sizeof(kvp_recv_buffer), 0,"
    },
    {
        "line": 84,
        "fullcodeline": "incoming_msg = (struct nlmsghdr *)kvp_recv_buffer;"
    },
    {
        "line": 85,
        "fullcodeline": "incoming_cn_msg = (struct cn_msg *)NLMSG_DATA(incoming_msg);"
    },
    {
        "line": 86,
        "fullcodeline": "hv_msg = (struct hv_kvp_msg *)incoming_cn_msg->data;"
    },
    {
        "line": 159,
        "fullcodeline": "hv_msg = (struct hv_kvp_msg *)incoming_cn_msg->data;"
    },
    {
        "line": 160,
        "fullcodeline": "key_name = (char *)hv_msg->body.kvp_enum_data.data.key;"
    },
    {
        "line": 161,
        "fullcodeline": "key_value = (char *)hv_msg->body.kvp_enum_data.data.value;"
    },
    {
        "line": 222,
        "fullcodeline": "incoming_cn_msg->id.idx = CN_KVP_IDX;"
    },
    {
        "line": 223,
        "fullcodeline": "incoming_cn_msg->id.val = CN_KVP_VAL;"
    },
    {
        "line": 224,
        "fullcodeline": "incoming_cn_msg->ack = 0;"
    },
    {
        "line": 225,
        "fullcodeline": "incoming_cn_msg->len = sizeof(struct hv_kvp_msg);"
    },
    {
        "line": 227,
        "fullcodeline": "len = netlink_send(fd, incoming_cn_msg);"
    },
    {
        "line": 24,
        "fullcodeline": "exit(-1);"
    },
    {
        "line": 30,
        "fullcodeline": "exit(-1);"
    },
    {
        "line": 42,
        "fullcodeline": "exit(-1);"
    },
    {
        "line": 62,
        "fullcodeline": "exit(-1);"
    },
    {
        "line": 77,
        "fullcodeline": "if (len < 0 || addr.nl_pid) {"
    },
    {
        "line": 141,
        "fullcodeline": "if (hv_msg->kvp_hdr.operation != KVP_OP_ENUMERATE)"
    },
    {
        "line": 149,
        "fullcodeline": "if (hv_msg->kvp_hdr.pool != KVP_POOL_AUTO) {"
    },
    {
        "line": 228,
        "fullcodeline": "if (len < 0) {"
    },
    {
        "line": 78,
        "fullcodeline": "syslog(LOG_ERR, \"recvfrom failed; pid:%u error:%d %s\","
    },
    {
        "line": 80,
        "fullcodeline": "close(fd);"
    },
    {
        "line": 94,
        "fullcodeline": "p = (char *)hv_msg->body.kvp_register.version;"
    },
    {
        "line": 95,
        "fullcodeline": "lic_version = malloc(strlen(p) + 1);"
    },
    {
        "line": 150,
        "fullcodeline": "kvp_pool_enumerate(hv_msg->kvp_hdr.pool,"
    },
    {
        "line": 165,
        "fullcodeline": "kvp_get_domain_name(key_value,"
    },
    {
        "line": 167,
        "fullcodeline": "strcpy(key_name, \"FullyQualifiedDomainName\");"
    },
    {
        "line": 170,
        "fullcodeline": "strcpy(key_name, \"IntegrationServicesVersion\");"
    },
    {
        "line": 171,
        "fullcodeline": "strcpy(key_value, lic_version);"
    },
    {
        "line": 174,
        "fullcodeline": "kvp_get_ip_address(AF_INET, key_value,"
    },
    {
        "line": 176,
        "fullcodeline": "strcpy(key_name, \"NetworkAddressIPv4\");"
    },
    {
        "line": 179,
        "fullcodeline": "kvp_get_ip_address(AF_INET6, key_value,"
    },
    {
        "line": 181,
        "fullcodeline": "strcpy(key_name, \"NetworkAddressIPv6\");"
    },
    {
        "line": 184,
        "fullcodeline": "strcpy(key_value, os_build);"
    },
    {
        "line": 185,
        "fullcodeline": "strcpy(key_name, \"OSBuildNumber\");"
    },
    {
        "line": 188,
        "fullcodeline": "strcpy(key_value, os_name);"
    },
    {
        "line": 189,
        "fullcodeline": "strcpy(key_name, \"OSName\");"
    },
    {
        "line": 192,
        "fullcodeline": "strcpy(key_value, os_major);"
    },
    {
        "line": 193,
        "fullcodeline": "strcpy(key_name, \"OSMajorVersion\");"
    },
    {
        "line": 196,
        "fullcodeline": "strcpy(key_value, os_minor);"
    },
    {
        "line": 197,
        "fullcodeline": "strcpy(key_name, \"OSMinorVersion\");"
    },
    {
        "line": 200,
        "fullcodeline": "strcpy(key_value, os_build);"
    },
    {
        "line": 201,
        "fullcodeline": "strcpy(key_name, \"OSVersion\");"
    },
    {
        "line": 204,
        "fullcodeline": "strcpy(key_value, processor_arch);"
    },
    {
        "line": 205,
        "fullcodeline": "strcpy(key_name, \"ProcessorArchitecture\");"
    },
    {
        "line": 208,
        "fullcodeline": "strcpy(key_value, \"Unknown Key\");"
    },
    {
        "line": 212,
        "fullcodeline": "strcpy(key_name, \"\");"
    },
    {
        "line": 229,
        "fullcodeline": "syslog(LOG_ERR, \"net_link send failed; error:%d\", len);"
    },
    {
        "line": 79,
        "fullcodeline": "addr.nl_pid, errno, strerror(errno));"
    },
    {
        "line": 81,
        "fullcodeline": "return -1;"
    },
    {
        "line": 113,
        "fullcodeline": "if (kvp_key_add_or_modify(hv_msg->kvp_hdr.pool,"
    },
    {
        "line": 122,
        "fullcodeline": "if (kvp_get_value(hv_msg->kvp_hdr.pool,"
    },
    {
        "line": 131,
        "fullcodeline": "if (kvp_key_delete(hv_msg->kvp_hdr.pool,"
    },
    {
        "line": 230,
        "fullcodeline": "exit(-1);"
    },
    {
        "line": 97,
        "fullcodeline": "strcpy(lic_version, p);"
    },
    {
        "line": 98,
        "fullcodeline": "syslog(LOG_INFO, \"KVP LIC Version: %s\","
    },
    {
        "line": 118,
        "fullcodeline": "strcpy(hv_msg->body.kvp_set.data.key, \"\");"
    },
    {
        "line": 127,
        "fullcodeline": "strcpy(hv_msg->body.kvp_set.data.key, \"\");"
    },
    {
        "line": 134,
        "fullcodeline": "strcpy(hv_msg->body.kvp_delete.key, \"\");"
    },
    {
        "line": 101,
        "fullcodeline": "syslog(LOG_ERR, \"malloc failed\");"
    }
]