[
    {
        "line": 2,
        "fullcodeline": "account = Account.find_by_id_or_name(params[:account_name])"
    },
    {
        "line": 3,
        "fullcodeline": "channel = account.geopoll_channels.find_by_name(params[:channel_name])"
    },
    {
        "line": 6,
        "fullcodeline": "signature = Digest::MD5.hexdigest(auth_token + identifier)"
    },
    {
        "line": 12,
        "fullcodeline": "unknown_params = params.except("
    },
    {
        "line": 17,
        "fullcodeline": "msg = AtMessage.new"
    },
    {
        "line": 18,
        "fullcodeline": "msg.from = \"sms://#{params[:SourceAddress]}\""
    },
    {
        "line": 19,
        "fullcodeline": "msg.to   = \"sms://#{params[:TargetAddress]}\""
    },
    {
        "line": 22,
        "fullcodeline": "account.route_at msg, channel"
    },
    {
        "line": 8,
        "fullcodeline": "if !(ActiveSupport::SecurityUtils.secure_compare params[:Signature], signature)"
    },
    {
        "line": 24,
        "fullcodeline": "channel.logger.warning :channel_id => channel.id, :at_message_id => msg.id, :message => \"Received unknown parameters for AT #{msg.id}: #{unknown_params.to_json}\" unless unknown_params.empty?"
    },
    {
        "line": 26,
        "fullcodeline": "render text: \"Accepted\""
    },
    {
        "line": 4,
        "fullcodeline": "auth_token = channel.configuration[:auth_token].to_s.split(' ')[1]"
    },
    {
        "line": 9,
        "fullcodeline": "return render text: \"Error\", status: :unauthorized"
    }
]