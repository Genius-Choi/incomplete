[
    {
        "line": 8,
        "fullcodeline": "int tailen = esp->tailen;"
    },
    {
        "line": 19,
        "fullcodeline": "allocsz = ALIGN(skb->data_len + tailen, L1_CACHE_BYTES);"
    },
    {
        "line": 77,
        "fullcodeline": "esph_offset = (unsigned char *)esp->esph - skb_transport_header(skb);"
    },
    {
        "line": 79,
        "fullcodeline": "nfrags = skb_cow_data(skb, tailen, &trailer);"
    },
    {
        "line": 82,
        "fullcodeline": "tail = skb_tail_pointer(trailer);"
    },
    {
        "line": 83,
        "fullcodeline": "esp->esph = (struct ip_esp_hdr *)(skb_transport_header(skb) + esph_offset);"
    },
    {
        "line": 86,
        "fullcodeline": "esp_output_fill_trailer(tail, esp->tfclen, esp->plen, esp->proto);"
    },
    {
        "line": 87,
        "fullcodeline": "pskb_put(skb, trailer, tailen);"
    },
    {
        "line": 20,
        "fullcodeline": "if (allocsz > ESP_SKB_FRAG_MAXSIZE)"
    },
    {
        "line": 23,
        "fullcodeline": "if (!skb_cloned(skb)) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (nfrags < 0)"
    },
    {
        "line": 13,
        "fullcodeline": "int err = esp_output_encap(x, skb, esp);"
    },
    {
        "line": 15,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 24,
        "fullcodeline": "if (tailen <= skb_tailroom(skb)) {"
    },
    {
        "line": 25,
        "fullcodeline": "nfrags = 1;"
    },
    {
        "line": 26,
        "fullcodeline": "trailer = skb;"
    },
    {
        "line": 27,
        "fullcodeline": "tail = skb_tail_pointer(trailer);"
    },
    {
        "line": 30,
        "fullcodeline": "} else if ((skb_shinfo(skb)->nr_frags < MAX_SKB_FRAGS)"
    },
    {
        "line": 31,
        "fullcodeline": "&& !skb_has_frag_list(skb)) {"
    },
    {
        "line": 33,
        "fullcodeline": "struct sock *sk = skb->sk;"
    },
    {
        "line": 34,
        "fullcodeline": "struct page_frag *pfrag = &x->xfrag;"
    },
    {
        "line": 36,
        "fullcodeline": "esp->inplace = false;"
    },
    {
        "line": 38,
        "fullcodeline": "allocsize = ALIGN(tailen, L1_CACHE_BYTES);"
    },
    {
        "line": 40,
        "fullcodeline": "spin_lock_bh(&x->lock);"
    },
    {
        "line": 47,
        "fullcodeline": "page = pfrag->page;"
    },
    {
        "line": 48,
        "fullcodeline": "get_page(page);"
    },
    {
        "line": 50,
        "fullcodeline": "tail = page_address(page) + pfrag->offset;"
    },
    {
        "line": 52,
        "fullcodeline": "esp_output_fill_trailer(tail, esp->tfclen, esp->plen, esp->proto);"
    },
    {
        "line": 54,
        "fullcodeline": "nfrags = skb_shinfo(skb)->nr_frags;"
    },
    {
        "line": 56,
        "fullcodeline": "__skb_fill_page_desc(skb, nfrags, page, pfrag->offset,"
    },
    {
        "line": 58,
        "fullcodeline": "skb_shinfo(skb)->nr_frags = ++nfrags;"
    },
    {
        "line": 60,
        "fullcodeline": "pfrag->offset = pfrag->offset + allocsize;"
    },
    {
        "line": 62,
        "fullcodeline": "spin_unlock_bh(&x->lock);"
    },
    {
        "line": 64,
        "fullcodeline": "nfrags++;"
    },
    {
        "line": 66,
        "fullcodeline": "skb->len += tailen;"
    },
    {
        "line": 67,
        "fullcodeline": "skb->data_len += tailen;"
    },
    {
        "line": 68,
        "fullcodeline": "skb->truesize += tailen;"
    },
    {
        "line": 42,
        "fullcodeline": "if (unlikely(!skb_page_frag_refill(allocsize, pfrag, GFP_ATOMIC))) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (sk && sk_fullsock(sk))"
    },
    {
        "line": 43,
        "fullcodeline": "spin_unlock_bh(&x->lock);"
    },
    {
        "line": 70,
        "fullcodeline": "refcount_add(tailen, &sk->sk_wmem_alloc);"
    }
]