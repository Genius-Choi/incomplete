[
    {
        "line": 5,
        "fullcodeline": "int ret_val = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "u32 i, times[100], nb_times, dump_mode;"
    },
    {
        "line": 7,
        "fullcodeline": "u32 simulation_time_in_ms = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "u32 initial_service_id = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "Bool auto_exit = GF_FALSE;"
    },
    {
        "line": 10,
        "fullcodeline": "Bool logs_set = GF_FALSE;"
    },
    {
        "line": 11,
        "fullcodeline": "Bool start_fs = GF_FALSE;"
    },
    {
        "line": 12,
        "fullcodeline": "Bool use_rtix = GF_FALSE;"
    },
    {
        "line": 13,
        "fullcodeline": "Bool pause_at_first = GF_FALSE;"
    },
    {
        "line": 14,
        "fullcodeline": "Bool no_cfg_save = GF_FALSE;"
    },
    {
        "line": 15,
        "fullcodeline": "Bool is_cfg_only = GF_FALSE;"
    },
    {
        "line": 17,
        "fullcodeline": "Double play_from = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "Double fps = GF_IMPORT_DEFAULT_FPS;"
    },
    {
        "line": 24,
        "fullcodeline": "FILE *logfile = NULL;"
    },
    {
        "line": 25,
        "fullcodeline": "Float scale = 1;"
    },
    {
        "line": 27,
        "fullcodeline": "dlopen(NULL, RTLD_NOW|RTLD_GLOBAL);"
    },
    {
        "line": 31,
        "fullcodeline": "strcpy(the_url, \".\");"
    },
    {
        "line": 33,
        "fullcodeline": "memset(&user, 0, sizeof(GF_User));"
    },
    {
        "line": 35,
        "fullcodeline": "dump_mode = DUMP_NONE;"
    },
    {
        "line": 36,
        "fullcodeline": "fill_ar = visible = do_uncache = has_command = GF_FALSE;"
    },
    {
        "line": 37,
        "fullcodeline": "url_arg = out_arg = the_cfg = rti_file = views = mosaic = NULL;"
    },
    {
        "line": 38,
        "fullcodeline": "nb_times = 0;"
    },
    {
        "line": 39,
        "fullcodeline": "times[0] = 0;"
    },
    {
        "line": 67,
        "fullcodeline": "gf_sys_init(GF_MemTrackerNone);"
    },
    {
        "line": 69,
        "fullcodeline": "gf_sys_set_args(argc, (const char **) argv);"
    },
    {
        "line": 71,
        "fullcodeline": "cfg_file = gf_cfg_init(the_cfg, NULL);"
    },
    {
        "line": 371,
        "fullcodeline": "user.modules = gf_modules_new(NULL, cfg_file);"
    },
    {
        "line": 381,
        "fullcodeline": "fprintf(stderr, \"Modules Found : %d \\n\", i);"
    },
    {
        "line": 383,
        "fullcodeline": "str = gf_cfg_get_key(cfg_file, \"General\", \"GPACVersion\");"
    },
    {
        "line": 389,
        "fullcodeline": "user.config = cfg_file;"
    },
    {
        "line": 390,
        "fullcodeline": "user.EventProc = GPAC_EventProc;"
    },
    {
        "line": 392,
        "fullcodeline": "user.opaque = user.modules;"
    },
    {
        "line": 423,
        "fullcodeline": "fprintf(stderr, \"Loading GPAC Terminal\\n\");"
    },
    {
        "line": 424,
        "fullcodeline": "i = gf_sys_clock();"
    },
    {
        "line": 425,
        "fullcodeline": "term = gf_term_new(&user);"
    },
    {
        "line": 436,
        "fullcodeline": "fprintf(stderr, \"Terminal Loaded in %d ms\\n\", gf_sys_clock()-i);"
    },
    {
        "line": 459,
        "fullcodeline": "str = gf_cfg_get_key(cfg_file, \"HTTPProxy\", \"Enabled\");"
    },
    {
        "line": 1150,
        "fullcodeline": "i = gf_sys_clock();"
    },
    {
        "line": 1151,
        "fullcodeline": "gf_term_disconnect(term);"
    },
    {
        "line": 1154,
        "fullcodeline": "fprintf(stderr, \"Deleting terminal... \");"
    },
    {
        "line": 1162,
        "fullcodeline": "fprintf(stderr, \"done (in %d ms) - ran for %d ms\\n\", gf_sys_clock() - i, gf_sys_clock());"
    },
    {
        "line": 42,
        "fullcodeline": "for (i=1; i<(u32) argc; i++) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (!cfg_file) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (gf_log_set_tools_levels( gf_cfg_get_key(cfg_file, \"General\", \"Logs\") ) != GF_OK) {"
    },
    {
        "line": 81,
        "fullcodeline": "if( gf_cfg_get_key(cfg_file, \"General\", \"Logs\") != NULL ) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (!gui_mode) {"
    },
    {
        "line": 90,
        "fullcodeline": "for (i=1; i<(u32) argc; i++) {"
    },
    {
        "line": 290,
        "fullcodeline": "if (dump_mode && !url_arg ) {"
    },
    {
        "line": 324,
        "fullcodeline": "if (gui_mode==1) {"
    },
    {
        "line": 332,
        "fullcodeline": "if (!url_arg && simulation_time_in_ms)"
    },
    {
        "line": 416,
        "fullcodeline": "char dim[50];"
    },
    {
        "line": 417,
        "fullcodeline": "sprintf(dim, \"%d\", forced_width);"
    },
    {
        "line": 418,
        "fullcodeline": "gf_cfg_set_key(user.config, \"Compositor\", \"DefaultWidth\", forced_width ? dim : NULL);"
    },
    {
        "line": 419,
        "fullcodeline": "sprintf(dim, \"%d\", forced_height);"
    },
    {
        "line": 420,
        "fullcodeline": "gf_cfg_set_key(user.config, \"Compositor\", \"DefaultHeight\", forced_height ? dim : NULL);"
    },
    {
        "line": 426,
        "fullcodeline": "if (!term) {"
    },
    {
        "line": 532,
        "fullcodeline": "if (gui_mode==2) gui_mode=0;"
    },
    {
        "line": 43,
        "fullcodeline": "char *arg = argv[i];"
    },
    {
        "line": 82,
        "fullcodeline": "logs_set = GF_TRUE;"
    },
    {
        "line": 86,
        "fullcodeline": "str = gf_cfg_get_key(cfg_file, \"General\", \"ForceGUI\");"
    },
    {
        "line": 91,
        "fullcodeline": "char *arg = argv[i];"
    },
    {
        "line": 283,
        "fullcodeline": "const char *cache_dir = gf_cfg_get_key(cfg_file, \"General\", \"CacheDirectory\");"
    },
    {
        "line": 284,
        "fullcodeline": "do_flatten_cache(cache_dir);"
    },
    {
        "line": 292,
        "fullcodeline": "url_arg = (char *)gf_cfg_get_key(cfg_file, \"General\", \"StartupFile\");"
    },
    {
        "line": 293,
        "fullcodeline": "test = url_arg ? gf_fopen(url_arg, \"rt\") : NULL;"
    },
    {
        "line": 305,
        "fullcodeline": "if (!gui_mode && !url_arg && (gf_cfg_get_key(cfg_file, \"General\", \"StartupFile\") != NULL)) {"
    },
    {
        "line": 306,
        "fullcodeline": "gui_mode=1;"
    },
    {
        "line": 329,
        "fullcodeline": "gf_set_progress_callback(NULL, progress_quiet);"
    },
    {
        "line": 333,
        "fullcodeline": "simulation_time_in_ms += gf_sys_clock();"
    },
    {
        "line": 340,
        "fullcodeline": "if (dump_mode) rti_file = NULL;"
    },
    {
        "line": 343,
        "fullcodeline": "gf_log_set_tool_level(GF_LOG_ALL, GF_LOG_WARNING);"
    },
    {
        "line": 346,
        "fullcodeline": "if (rti_file || logfile || log_utc_time || log_time_start)"
    },
    {
        "line": 347,
        "fullcodeline": "gf_log_set_callback(NULL, on_gpac_log);"
    },
    {
        "line": 349,
        "fullcodeline": "if (rti_file) init_rti_logs(rti_file, url_arg, use_rtix);"
    },
    {
        "line": 353,
        "fullcodeline": "if (gf_sys_get_rti(0, &rti, 0))"
    },
    {
        "line": 360,
        "fullcodeline": "user.init_flags |= GF_TERM_NO_DECODER_THREAD | GF_TERM_NO_COMPOSITOR_THREAD | GF_TERM_NO_REGULATION;"
    },
    {
        "line": 364,
        "fullcodeline": "gf_cfg_set_key(cfg_file, \"Audio\", \"DriverName\", \"Raw Audio Output\");"
    },
    {
        "line": 372,
        "fullcodeline": "if (user.modules) i = gf_modules_get_count(user.modules);"
    },
    {
        "line": 373,
        "fullcodeline": "if (!i || !user.modules) {"
    },
    {
        "line": 384,
        "fullcodeline": "if (!str || strcmp(str, GPAC_FULL_VERSION)) {"
    },
    {
        "line": 385,
        "fullcodeline": "gf_cfg_del_section(cfg_file, \"PluginsCache\");"
    },
    {
        "line": 386,
        "fullcodeline": "gf_cfg_set_key(cfg_file, \"General\", \"GPACVersion\", GPAC_FULL_VERSION);"
    },
    {
        "line": 393,
        "fullcodeline": "if (threading_flags) user.init_flags |= threading_flags;"
    },
    {
        "line": 394,
        "fullcodeline": "if (no_audio) user.init_flags |= GF_TERM_NO_AUDIO;"
    },
    {
        "line": 395,
        "fullcodeline": "if (no_regulation) user.init_flags |= GF_TERM_NO_REGULATION;"
    },
    {
        "line": 397,
        "fullcodeline": "if (threading_flags & (GF_TERM_NO_DECODER_THREAD|GF_TERM_NO_COMPOSITOR_THREAD) ) term_step = GF_TRUE;"
    },
    {
        "line": 400,
        "fullcodeline": "if (dump_mode) user.init_flags |= GF_TERM_USE_AUDIO_HW_CLOCK;"
    },
    {
        "line": 403,
        "fullcodeline": "gf_cfg_discard_changes(user.config);"
    },
    {
        "line": 404,
        "fullcodeline": "auto_exit = GF_TRUE;"
    },
    {
        "line": 405,
        "fullcodeline": "gf_cfg_set_key(user.config, \"Audio\", \"DriverName\", \"Raw Audio Output\");"
    },
    {
        "line": 428,
        "fullcodeline": "list_modules(user.modules);"
    },
    {
        "line": 430,
        "fullcodeline": "gf_cfg_discard_changes(cfg_file);"
    },
    {
        "line": 439,
        "fullcodeline": "display_rti = 2;"
    },
    {
        "line": 440,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_VIDEO_BENCH, (bench_mode==3) ? 2 : 1);"
    },
    {
        "line": 460,
        "fullcodeline": "if (str && !strcmp(str, \"yes\")) {"
    },
    {
        "line": 461,
        "fullcodeline": "str = gf_cfg_get_key(cfg_file, \"HTTPProxy\", \"Name\");"
    },
    {
        "line": 466,
        "fullcodeline": "str = gf_cfg_get_key(cfg_file, \"General\", \"RTIRefreshPeriod\");"
    },
    {
        "line": 482,
        "fullcodeline": "ret_val = dump_file(url_arg, out_arg, dump_mode, fps, forced_width, forced_height, scale, times, nb_times);"
    },
    {
        "line": 534,
        "fullcodeline": "if (start_fs) gf_term_set_option(term, GF_OPT_FULLSCREEN, 1);"
    },
    {
        "line": 537,
        "fullcodeline": "char szTemp[4046];"
    },
    {
        "line": 538,
        "fullcodeline": "sprintf(szTemp, \"views://%s\", views);"
    },
    {
        "line": 539,
        "fullcodeline": "gf_term_connect(term, szTemp);"
    },
    {
        "line": 542,
        "fullcodeline": "char szTemp[4046];"
    },
    {
        "line": 543,
        "fullcodeline": "sprintf(szTemp, \"mosaic://%s\", mosaic);"
    },
    {
        "line": 544,
        "fullcodeline": "gf_term_connect(term, szTemp);"
    },
    {
        "line": 547,
        "fullcodeline": "rti_update_time_ms = 500;"
    },
    {
        "line": 548,
        "fullcodeline": "bench_mode_start = gf_sys_clock();"
    },
    {
        "line": 606,
        "fullcodeline": "c = gf_prompt_get_char();"
    },
    {
        "line": 1168,
        "fullcodeline": "gf_cfg_discard_changes(cfg_file);"
    },
    {
        "line": 1174,
        "fullcodeline": "if (rti_logs) gf_fclose(rti_logs);"
    },
    {
        "line": 44,
        "fullcodeline": "if (!strcmp(arg, \"-c\") || !strcmp(arg, \"-cfg\")) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (str && !strcmp(str, \"yes\")) gui_mode = 1;"
    },
    {
        "line": 218,
        "fullcodeline": "if (!gui_mode) {"
    },
    {
        "line": 294,
        "fullcodeline": "if (!test) url_arg = NULL;"
    },
    {
        "line": 297,
        "fullcodeline": "if (!url_arg) {"
    },
    {
        "line": 354,
        "fullcodeline": "fprintf(stderr, \"System info: %d MB RAM - %d cores\\n\", (u32) (rti.physical_memory/1024/1024), rti.nb_cores);"
    },
    {
        "line": 367,
        "fullcodeline": "init_w = forced_width;"
    },
    {
        "line": 368,
        "fullcodeline": "init_h = forced_height;"
    },
    {
        "line": 406,
        "fullcodeline": "if (bench_mode!=2) {"
    },
    {
        "line": 441,
        "fullcodeline": "if (bench_mode==1) bench_mode=2;"
    },
    {
        "line": 449,
        "fullcodeline": "str = gf_cfg_get_key(cfg_file, \"Video\", \"DriverName\");"
    },
    {
        "line": 452,
        "fullcodeline": "str = gf_cfg_get_key(cfg_file, \"Audio\", \"DriverName\");"
    },
    {
        "line": 455,
        "fullcodeline": "str = gf_cfg_get_key(cfg_file, \"General\", \"NoMIMETypeFetch\");"
    },
    {
        "line": 456,
        "fullcodeline": "no_mime_check = (str && !stricmp(str, \"yes\")) ? 1 : 0;"
    },
    {
        "line": 478,
        "fullcodeline": "if (!nb_times) {"
    },
    {
        "line": 45,
        "fullcodeline": "the_cfg = argv[i+1];"
    },
    {
        "line": 46,
        "fullcodeline": "i++;"
    },
    {
        "line": 93,
        "fullcodeline": "if (!strcmp(arg, \"-rti\")) {"
    },
    {
        "line": 94,
        "fullcodeline": "rti_file = argv[i+1];"
    },
    {
        "line": 95,
        "fullcodeline": "i++;"
    },
    {
        "line": 362,
        "fullcodeline": "user.init_flags |= GF_TERM_INIT_HIDE;"
    },
    {
        "line": 407,
        "fullcodeline": "gf_cfg_set_key(user.config, \"Video\", \"DriverName\", \"Raw Video Output\");"
    },
    {
        "line": 408,
        "fullcodeline": "gf_cfg_set_key(user.config, \"RAWVideo\", \"RawOutput\", \"null\");"
    },
    {
        "line": 409,
        "fullcodeline": "gf_cfg_set_key(user.config, \"Compositor\", \"OpenGLMode\", \"disable\");"
    },
    {
        "line": 446,
        "fullcodeline": "if (fill_ar) gf_term_set_option(term, GF_OPT_ASPECT_RATIO, GF_ASPECT_RATIO_FILL_SCREEN);"
    },
    {
        "line": 462,
        "fullcodeline": "if (str) fprintf(stderr, \"HTTP Proxy %s enabled\\n\", str);"
    },
    {
        "line": 468,
        "fullcodeline": "rti_update_time_ms = atoi(str);"
    },
    {
        "line": 479,
        "fullcodeline": "times[0] = 0;"
    },
    {
        "line": 480,
        "fullcodeline": "nb_times++;"
    },
    {
        "line": 555,
        "fullcodeline": "if ((gui_mode==1) || !gf_prompt_has_input()) {"
    },
    {
        "line": 626,
        "fullcodeline": "gf_term_disconnect(term);"
    },
    {
        "line": 627,
        "fullcodeline": "fprintf(stderr, \"Enter the absolute URL\\n\");"
    },
    {
        "line": 633,
        "fullcodeline": "gf_term_connect(term, the_url);"
    },
    {
        "line": 636,
        "fullcodeline": "gf_term_disconnect(term);"
    },
    {
        "line": 637,
        "fullcodeline": "fprintf(stderr, \"Enter the absolute URL to the playlist\\n\");"
    },
    {
        "line": 642,
        "fullcodeline": "playlist = gf_fopen(the_url, \"rt\");"
    },
    {
        "line": 815,
        "fullcodeline": "list_modules(user.modules);"
    },
    {
        "line": 886,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_ASPECT_RATIO, GF_ASPECT_RATIO_4_3);"
    },
    {
        "line": 889,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_ASPECT_RATIO, GF_ASPECT_RATIO_16_9);"
    },
    {
        "line": 892,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_ASPECT_RATIO, GF_ASPECT_RATIO_FILL_SCREEN);"
    },
    {
        "line": 895,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_ASPECT_RATIO, GF_ASPECT_RATIO_KEEP);"
    },
    {
        "line": 932,
        "fullcodeline": "display_rti = !display_rti;"
    },
    {
        "line": 1015,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_RELOAD_CONFIG, 1);"
    },
    {
        "line": 219,
        "fullcodeline": "if (arg[0] != '-') {"
    },
    {
        "line": 411,
        "fullcodeline": "gf_cfg_set_key(user.config, \"Video\", \"DisableVSync\", \"yes\");"
    },
    {
        "line": 450,
        "fullcodeline": "if (!bench_mode && !strcmp(str, \"Raw Video Output\")) fprintf(stderr, \"WARNING: using raw output video (memory only) - no display used\\n\");"
    },
    {
        "line": 453,
        "fullcodeline": "if (!str || !strcmp(str, \"No Audio Output Available\")) fprintf(stderr, \"WARNING: no audio output available - make sure no other program is locking the sound card\\n\");"
    },
    {
        "line": 470,
        "fullcodeline": "gf_cfg_set_key(cfg_file, \"General\", \"RTIRefreshPeriod\", \"200\");"
    },
    {
        "line": 561,
        "fullcodeline": "if (restart && gf_term_get_option(term, GF_OPT_IS_OVER)) {"
    },
    {
        "line": 571,
        "fullcodeline": "if (has_command && is_connected) {"
    },
    {
        "line": 580,
        "fullcodeline": "if (initial_service_id && is_connected) {"
    },
    {
        "line": 588,
        "fullcodeline": "if (!use_rtix || display_rti) UpdateRTInfo(NULL);"
    },
    {
        "line": 594,
        "fullcodeline": "if (auto_exit && eos_seen && gf_term_get_option(term, GF_OPT_IS_OVER)) {"
    },
    {
        "line": 599,
        "fullcodeline": "if (simulation_time_in_ms"
    },
    {
        "line": 613,
        "fullcodeline": "memset(&evt, 0, sizeof(GF_Event));"
    },
    {
        "line": 614,
        "fullcodeline": "evt.type = GF_EVENT_QUIT;"
    },
    {
        "line": 615,
        "fullcodeline": "gf_term_send_event(term, &evt);"
    },
    {
        "line": 871,
        "fullcodeline": "Bool use_3d = !gf_term_get_option(term, GF_OPT_USE_OPENGL);"
    },
    {
        "line": 879,
        "fullcodeline": "Bool opt = gf_term_get_option(term, GF_OPT_STRESS_MODE);"
    },
    {
        "line": 881,
        "fullcodeline": "fprintf(stderr, \"Turning stress mode %s\\n\", opt ? \"on\" : \"off\");"
    },
    {
        "line": 882,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_STRESS_MODE, opt);"
    },
    {
        "line": 899,
        "fullcodeline": "switch (gf_term_get_option(term, GF_OPT_MEDIA_CACHE)) {"
    },
    {
        "line": 910,
        "fullcodeline": "switch (gf_term_get_option(term, GF_OPT_MEDIA_CACHE)) {"
    },
    {
        "line": 924,
        "fullcodeline": "if (gf_term_get_option(term, GF_OPT_MEDIA_CACHE)==GF_MEDIA_CACHE_RUNNING) {"
    },
    {
        "line": 944,
        "fullcodeline": "char szCom[8192];"
    },
    {
        "line": 945,
        "fullcodeline": "fprintf(stderr, \"Enter command to send:\\n\");"
    },
    {
        "line": 946,
        "fullcodeline": "fflush(stdin);"
    },
    {
        "line": 947,
        "fullcodeline": "szCom[0] = 0;"
    },
    {
        "line": 952,
        "fullcodeline": "e = gf_term_scene_update(term, NULL, szCom);"
    },
    {
        "line": 959,
        "fullcodeline": "char jsCode[8192];"
    },
    {
        "line": 960,
        "fullcodeline": "fprintf(stderr, \"Enter JavaScript code to evaluate:\\n\");"
    },
    {
        "line": 961,
        "fullcodeline": "fflush(stdin);"
    },
    {
        "line": 962,
        "fullcodeline": "jsCode[0] = 0;"
    },
    {
        "line": 967,
        "fullcodeline": "e = gf_term_scene_update(term, \"application/ecmascript\", jsCode);"
    },
    {
        "line": 974,
        "fullcodeline": "char szLog[1024], *cur_logs;"
    },
    {
        "line": 975,
        "fullcodeline": "cur_logs = gf_log_get_tools_levels();"
    },
    {
        "line": 976,
        "fullcodeline": "fprintf(stderr, \"Enter new log level (current tools %s):\\n\", cur_logs);"
    },
    {
        "line": 989,
        "fullcodeline": "gf_sys_get_rti(rti_update_time_ms, &rti, 0);"
    },
    {
        "line": 999,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_VIDEO_CACHE_SIZE, size);"
    },
    {
        "line": 1005,
        "fullcodeline": "u32 http_bitrate = gf_term_get_option(term, GF_OPT_HTTP_MAX_RATE);"
    },
    {
        "line": 1010,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_HTTP_MAX_RATE, http_bitrate);"
    },
    {
        "line": 1019,
        "fullcodeline": "switch_bench(!bench_mode);"
    },
    {
        "line": 1024,
        "fullcodeline": "char szOpt[8192];"
    },
    {
        "line": 1025,
        "fullcodeline": "fprintf(stderr, \"Enter option to set (Section:Name=Value):\\n\");"
    },
    {
        "line": 1026,
        "fullcodeline": "fflush(stdin);"
    },
    {
        "line": 1027,
        "fullcodeline": "szOpt[0] = 0;"
    },
    {
        "line": 1039,
        "fullcodeline": "char szFileName[100];"
    },
    {
        "line": 1040,
        "fullcodeline": "u32 nb_pass, nb_views, offscreen_view = 0;"
    },
    {
        "line": 1043,
        "fullcodeline": "nb_pass = 1;"
    },
    {
        "line": 1044,
        "fullcodeline": "nb_views = gf_term_get_option(term, GF_OPT_NUM_STEREO_VIEWS);"
    },
    {
        "line": 1097,
        "fullcodeline": "fprintf(stderr, \"Done: %s\\n\", szFileName);"
    },
    {
        "line": 1105,
        "fullcodeline": "char szOpt[8192];"
    },
    {
        "line": 1106,
        "fullcodeline": "fprintf(stderr, \"Enter 0-based index of object to select or service ID:\\n\");"
    },
    {
        "line": 1107,
        "fullcodeline": "fflush(stdin);"
    },
    {
        "line": 1108,
        "fullcodeline": "szOpt[0] = 0;"
    },
    {
        "line": 1113,
        "fullcodeline": "index = atoi(szOpt);"
    },
    {
        "line": 1115,
        "fullcodeline": "root_od = gf_term_get_root_object(term);"
    },
    {
        "line": 48,
        "fullcodeline": "else if (!strcmp(arg, \"-mem-track\") || !strcmp(arg, \"-mem-track-stack\")) {"
    },
    {
        "line": 224,
        "fullcodeline": "url_arg = arg;"
    },
    {
        "line": 558,
        "fullcodeline": "gf_term_disconnect(term);"
    },
    {
        "line": 559,
        "fullcodeline": "gf_term_connect(term, startup_file ? gf_cfg_get_key(cfg_file, \"General\", \"StartupFile\") : the_url);"
    },
    {
        "line": 562,
        "fullcodeline": "restart = 0;"
    },
    {
        "line": 563,
        "fullcodeline": "gf_term_play_from_time(term, 0, 0);"
    },
    {
        "line": 566,
        "fullcodeline": "c = '\\n';"
    },
    {
        "line": 572,
        "fullcodeline": "has_command = GF_FALSE;"
    },
    {
        "line": 581,
        "fullcodeline": "GF_ObjectManager *root_od = gf_term_get_root_object(term);"
    },
    {
        "line": 590,
        "fullcodeline": "gf_term_process_step(term);"
    },
    {
        "line": 600,
        "fullcodeline": "&& ( (gf_term_get_elapsed_time_in_ms(term)>simulation_time_in_ms) || (!url_arg && gf_sys_clock()>simulation_time_in_ms))"
    },
    {
        "line": 628,
        "fullcodeline": "if (1 > scanf(\"%s\", the_url)) {"
    },
    {
        "line": 629,
        "fullcodeline": "fprintf(stderr, \"Cannot read absolute URL, aborting\\n\");"
    },
    {
        "line": 632,
        "fullcodeline": "if (rti_file) init_rti_logs(rti_file, the_url, use_rtix);"
    },
    {
        "line": 638,
        "fullcodeline": "if (1 > scanf(\"%s\", the_url)) {"
    },
    {
        "line": 639,
        "fullcodeline": "fprintf(stderr, \"Cannot read the absolute URL, aborting.\\n\");"
    },
    {
        "line": 649,
        "fullcodeline": "fprintf(stderr, \"Opening URL %s\\n\", the_url);"
    },
    {
        "line": 650,
        "fullcodeline": "gf_term_connect(term, the_url);"
    },
    {
        "line": 657,
        "fullcodeline": "gf_term_disconnect(term);"
    },
    {
        "line": 659,
        "fullcodeline": "res = fscanf(playlist, \"%s\", the_url);"
    },
    {
        "line": 678,
        "fullcodeline": "gf_term_disconnect(term);"
    },
    {
        "line": 690,
        "fullcodeline": "fprintf(stderr, \"Opening URL %s\\n\", the_url);"
    },
    {
        "line": 691,
        "fullcodeline": "gf_term_connect(term, the_url);"
    },
    {
        "line": 700,
        "fullcodeline": "if (is_connected) gf_term_disconnect(term);"
    },
    {
        "line": 706,
        "fullcodeline": "fprintf(stderr, \"[Status: %s]\\n\", is_pause ? \"Playing\" : \"Paused\");"
    },
    {
        "line": 707,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_PLAY_STATE, is_pause ? GF_STATE_PLAYING : GF_STATE_PAUSED);"
    },
    {
        "line": 712,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_PLAY_STATE, GF_STATE_STEP_PAUSE);"
    },
    {
        "line": 713,
        "fullcodeline": "fprintf(stderr, \"Step time: \");"
    },
    {
        "line": 715,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 721,
        "fullcodeline": "if (!CanSeek || (Duration<=2000)) {"
    },
    {
        "line": 722,
        "fullcodeline": "fprintf(stderr, \"scene not seekable\\n\");"
    },
    {
        "line": 777,
        "fullcodeline": "if (is_connected) PrintWorldInfo(term);"
    },
    {
        "line": 780,
        "fullcodeline": "if (is_connected) PrintODList(term, NULL, 0, 0, \"Root\");"
    },
    {
        "line": 785,
        "fullcodeline": "fprintf(stderr, \"Enter OD ID (0 for main OD): \");"
    },
    {
        "line": 786,
        "fullcodeline": "fflush(stderr);"
    },
    {
        "line": 803,
        "fullcodeline": "ViewOD(term, (u32)-1, num, NULL);"
    },
    {
        "line": 807,
        "fullcodeline": "if (is_connected) ViewODs(term, 1);"
    },
    {
        "line": 811,
        "fullcodeline": "if (is_connected) ViewODs(term, 0);"
    },
    {
        "line": 822,
        "fullcodeline": "if (is_connected) gf_term_set_option(term, GF_OPT_NAVIGATION_TYPE, 0);"
    },
    {
        "line": 827,
        "fullcodeline": "GF_ObjectManager *odm = NULL;"
    },
    {
        "line": 828,
        "fullcodeline": "char radname[GF_MAX_PATH], *sExt;"
    },
    {
        "line": 832,
        "fullcodeline": "radname[0] = 0;"
    },
    {
        "line": 854,
        "fullcodeline": "sExt = strrchr(radname, '.');"
    },
    {
        "line": 855,
        "fullcodeline": "xml_dump = 0;"
    },
    {
        "line": 861,
        "fullcodeline": "e = gf_term_dump_scene(term, std_out ? NULL : radname, NULL, xml_dump, 0, odm);"
    },
    {
        "line": 862,
        "fullcodeline": "fprintf(stderr, \"Dump done (%s)\\n\", gf_error_to_string(e));"
    },
    {
        "line": 872,
        "fullcodeline": "if (gf_term_set_option(term, GF_OPT_USE_OPENGL, use_3d)==GF_OK) {"
    },
    {
        "line": 880,
        "fullcodeline": "opt = !opt;"
    },
    {
        "line": 901,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_MEDIA_CACHE, GF_MEDIA_CACHE_ENABLED);"
    },
    {
        "line": 904,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_MEDIA_CACHE, GF_MEDIA_CACHE_DISABLED);"
    },
    {
        "line": 907,
        "fullcodeline": "fprintf(stderr, \"Streaming Cache is running - please stop it first\\n\");"
    },
    {
        "line": 912,
        "fullcodeline": "fprintf(stderr, \"Streaming Cache Enabled\\n\");"
    },
    {
        "line": 915,
        "fullcodeline": "fprintf(stderr, \"Streaming Cache Disabled\\n\");"
    },
    {
        "line": 918,
        "fullcodeline": "fprintf(stderr, \"Streaming Cache Running\\n\");"
    },
    {
        "line": 925,
        "fullcodeline": "gf_term_set_option(term, GF_OPT_MEDIA_CACHE, (c=='S') ? GF_MEDIA_CACHE_DISABLED : GF_MEDIA_CACHE_DISCARD);"
    },
    {
        "line": 926,
        "fullcodeline": "fprintf(stderr, \"Streaming Cache stopped\\n\");"
    },
    {
        "line": 936,
        "fullcodeline": "if (display_rti) display_rti = 0;"
    },
    {
        "line": 1045,
        "fullcodeline": "if (nb_views>1) {"
    },
    {
        "line": 52,
        "fullcodeline": "fprintf(stderr, \"WARNING - GPAC not compiled with Memory Tracker - ignoring \\\"%s\\\"\\n\", arg);"
    },
    {
        "line": 96,
        "fullcodeline": "} else if (!strcmp(arg, \"-rtix\")) {"
    },
    {
        "line": 97,
        "fullcodeline": "rti_file = argv[i+1];"
    },
    {
        "line": 98,
        "fullcodeline": "i++;"
    },
    {
        "line": 99,
        "fullcodeline": "use_rtix = GF_TRUE;"
    },
    {
        "line": 488,
        "fullcodeline": "else if (!gui_mode && url_arg) {"
    },
    {
        "line": 573,
        "fullcodeline": "for (i=0; i<(u32)argc; i++) {"
    },
    {
        "line": 592,
        "fullcodeline": "gf_sleep(rti_update_time_ms);"
    },
    {
        "line": 664,
        "fullcodeline": "if (res == EOF) {"
    },
    {
        "line": 705,
        "fullcodeline": "Bool is_pause = gf_term_get_option(term, GF_OPT_PLAY_STATE);"
    },
    {
        "line": 714,
        "fullcodeline": "PrintTime(gf_term_get_time_in_ms(term));"
    },
    {
        "line": 726,
        "fullcodeline": "fprintf(stderr, \"Duration: \");"
    },
    {
        "line": 727,
        "fullcodeline": "PrintTime(Duration);"
    },
    {
        "line": 728,
        "fullcodeline": "res = gf_term_get_time_in_ms(term);"
    },
    {
        "line": 768,
        "fullcodeline": "fprintf(stderr, \"Current Time: \");"
    },
    {
        "line": 770,
        "fullcodeline": "fprintf(stderr, \" - Duration: \");"
    },
    {
        "line": 771,
        "fullcodeline": "PrintTime(Duration);"
    },
    {
        "line": 772,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 873,
        "fullcodeline": "fprintf(stderr, \"Using %s for 2D drawing\\n\", use_3d ? \"OpenGL\" : \"2D rasterizer\");"
    },
    {
        "line": 928,
        "fullcodeline": "fprintf(stderr, \"Streaming Cache not running\\n\");"
    },
    {
        "line": 937,
        "fullcodeline": "else display_rti = 2;"
    },
    {
        "line": 948,
        "fullcodeline": "if (1 > scanf(\"%[^\\t\\n]\", szCom)) {"
    },
    {
        "line": 949,
        "fullcodeline": "fprintf(stderr, \"Cannot read command to send, aborting.\\n\");"
    },
    {
        "line": 953,
        "fullcodeline": "if (e) fprintf(stderr, \"Processing command failed: %s\\n\", gf_error_to_string(e));"
    },
    {
        "line": 963,
        "fullcodeline": "if (1 > scanf(\"%[^\\t\\n]\", jsCode)) {"
    },
    {
        "line": 964,
        "fullcodeline": "fprintf(stderr, \"Cannot read code to evaluate, aborting.\\n\");"
    },
    {
        "line": 968,
        "fullcodeline": "if (e) fprintf(stderr, \"Processing JS code failed: %s\\n\", gf_error_to_string(e));"
    },
    {
        "line": 978,
        "fullcodeline": "if (scanf(\"%s\", szLog) < 1) {"
    },
    {
        "line": 979,
        "fullcodeline": "fprintf(stderr, \"Cannot read new log level, aborting.\\n\");"
    },
    {
        "line": 997,
        "fullcodeline": "fprintf(stderr, \"Enter new video cache memory in kBytes (current %ud):\\n\", gf_term_get_option(term, GF_OPT_VIDEO_CACHE_SIZE));"
    },
    {
        "line": 998,
        "fullcodeline": "} while (1 > scanf(\"%ud\", &size));"
    },
    {
        "line": 1007,
        "fullcodeline": "fprintf(stderr, \"Enter new http bitrate in bps (0 for none) - current limit: %d\\n\", http_bitrate);"
    },
    {
        "line": 1008,
        "fullcodeline": "} while (1 > scanf(\"%ud\", &http_bitrate));"
    },
    {
        "line": 1028,
        "fullcodeline": "if (1 > scanf(\"%[^\\t\\n]\", szOpt)) {"
    },
    {
        "line": 1029,
        "fullcodeline": "fprintf(stderr, \"Cannot read option\\n\");"
    },
    {
        "line": 1046,
        "fullcodeline": "fprintf(stderr, \"Auto-stereo mode detected - type number of view to dump (0 is main output, 1 to %d offscreen view, %d for all offscreen, %d for all offscreen and main)\\n\", nb_views, nb_views+1, nb_views+2);"
    },
    {
        "line": 1068,
        "fullcodeline": "offscreen_view++;"
    },
    {
        "line": 1109,
        "fullcodeline": "if (1 > scanf(\"%[^\\t\\n]\", szOpt)) {"
    },
    {
        "line": 1110,
        "fullcodeline": "fprintf(stderr, \"Cannot read OD ID\\n\");"
    },
    {
        "line": 491,
        "fullcodeline": "strcpy(the_url, url_arg);"
    },
    {
        "line": 492,
        "fullcodeline": "ext = strrchr(the_url, '.');"
    },
    {
        "line": 583,
        "fullcodeline": "gf_term_select_service(term, root_od, initial_service_id);"
    },
    {
        "line": 584,
        "fullcodeline": "initial_service_id = 0;"
    },
    {
        "line": 644,
        "fullcodeline": "if (1 >\tfscanf(playlist, \"%s\", the_url)) {"
    },
    {
        "line": 645,
        "fullcodeline": "fprintf(stderr, \"Cannot read any URL from playlist, aborting.\\n\");"
    },
    {
        "line": 646,
        "fullcodeline": "gf_fclose( playlist);"
    },
    {
        "line": 660,
        "fullcodeline": "if ((res == EOF) && loop_at_end) {"
    },
    {
        "line": 661,
        "fullcodeline": "fseek(playlist, 0, SEEK_SET);"
    },
    {
        "line": 662,
        "fullcodeline": "res = fscanf(playlist, \"%s\", the_url);"
    },
    {
        "line": 665,
        "fullcodeline": "fprintf(stderr, \"No more items - exiting\\n\");"
    },
    {
        "line": 679,
        "fullcodeline": "if (1 > scanf(\"%u\", &count)) {"
    },
    {
        "line": 680,
        "fullcodeline": "fprintf(stderr, \"Cannot read number, aborting.\\n\");"
    },
    {
        "line": 688,
        "fullcodeline": "count--;"
    },
    {
        "line": 769,
        "fullcodeline": "PrintTime(gf_term_get_time_in_ms(term));"
    },
    {
        "line": 787,
        "fullcodeline": "if (scanf(\"%ud\", &ID) == 1) {"
    },
    {
        "line": 788,
        "fullcodeline": "ViewOD(term, ID, (u32)-1, NULL);"
    },
    {
        "line": 800,
        "fullcodeline": "fprintf(stderr, \"Enter OD number (0 for main OD): \");"
    },
    {
        "line": 801,
        "fullcodeline": "fflush(stderr);"
    },
    {
        "line": 802,
        "fullcodeline": "} while( 1 > scanf(\"%ud\", &num));"
    },
    {
        "line": 834,
        "fullcodeline": "fprintf(stderr, \"Enter Inline OD ID if any or 0 : \");"
    },
    {
        "line": 835,
        "fullcodeline": "fflush(stderr);"
    },
    {
        "line": 836,
        "fullcodeline": "} while( 1 >  scanf(\"%ud\", &odid));"
    },
    {
        "line": 838,
        "fullcodeline": "GF_ObjectManager *root_odm = gf_term_get_root_object(term);"
    },
    {
        "line": 840,
        "fullcodeline": "count = gf_term_get_object_count(term, root_odm);"
    },
    {
        "line": 851,
        "fullcodeline": "fprintf(stderr, \"Enter file radical name (+\\'.x\\' for XML dumping) - \\\"std\\\" for stderr: \");"
    },
    {
        "line": 852,
        "fullcodeline": "fflush(stderr);"
    },
    {
        "line": 853,
        "fullcodeline": "} while( 1 > scanf(\"%s\", radname));"
    },
    {
        "line": 858,
        "fullcodeline": "sExt[0] = 0;"
    },
    {
        "line": 860,
        "fullcodeline": "std_out = strnicmp(radname, \"std\", 3) ? 0 : 1;"
    },
    {
        "line": 1050,
        "fullcodeline": "if (offscreen_view==nb_views+1) {"
    },
    {
        "line": 1117,
        "fullcodeline": "if ( gf_term_find_service(term, root_od, index)) {"
    },
    {
        "line": 54,
        "fullcodeline": "} else if (!strcmp(arg, \"-gui\")) {"
    },
    {
        "line": 226,
        "fullcodeline": "else if (!strcmp(arg, \"-loop\")) loop_at_end = 1;"
    },
    {
        "line": 523,
        "fullcodeline": "fprintf(stderr, \"Hit 'h' for help\\n\\n\");"
    },
    {
        "line": 524,
        "fullcodeline": "str = gf_cfg_get_key(cfg_file, \"General\", \"StartupFile\");"
    },
    {
        "line": 684,
        "fullcodeline": "if (fscanf(playlist, \"%s\", the_url)) {"
    },
    {
        "line": 730,
        "fullcodeline": "res *= 100;"
    },
    {
        "line": 731,
        "fullcodeline": "res /= (s64)Duration;"
    },
    {
        "line": 732,
        "fullcodeline": "fprintf(stderr, \" (current %.2f %%)\\nEnter Seek percentage:\\n\", res);"
    },
    {
        "line": 790,
        "fullcodeline": "char str_url[GF_MAX_PATH];"
    },
    {
        "line": 839,
        "fullcodeline": "if (!root_odm) break;"
    },
    {
        "line": 841,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 1047,
        "fullcodeline": "if (scanf(\"%d\", &offscreen_view) != 1) {"
    },
    {
        "line": 1048,
        "fullcodeline": "offscreen_view = 0;"
    },
    {
        "line": 1051,
        "fullcodeline": "offscreen_view = 1;"
    },
    {
        "line": 1052,
        "fullcodeline": "nb_pass = nb_views;"
    },
    {
        "line": 1062,
        "fullcodeline": "sprintf(szFileName, \"view%d_dump.png\", offscreen_view);"
    },
    {
        "line": 1063,
        "fullcodeline": "e = gf_term_get_offscreen_buffer(term, &fb, offscreen_view-1, 0);"
    },
    {
        "line": 1070,
        "fullcodeline": "fprintf(stderr, \"Error dumping screen buffer %s\\n\", gf_error_to_string(e) );"
    },
    {
        "line": 1071,
        "fullcodeline": "nb_pass = 0;"
    },
    {
        "line": 1118,
        "fullcodeline": "gf_term_select_service(term, root_od, index);"
    },
    {
        "line": 55,
        "fullcodeline": "gui_mode = 1;"
    },
    {
        "line": 100,
        "fullcodeline": "} else if (!stricmp(arg, \"-size\")) {"
    },
    {
        "line": 105,
        "fullcodeline": "i++;"
    },
    {
        "line": 493,
        "fullcodeline": "if (ext && (!stricmp(ext, \".m3u\") || !stricmp(ext, \".pls\"))) {"
    },
    {
        "line": 494,
        "fullcodeline": "GF_Err e = GF_OK;"
    },
    {
        "line": 495,
        "fullcodeline": "fprintf(stderr, \"Opening Playlist %s\\n\", the_url);"
    },
    {
        "line": 497,
        "fullcodeline": "strcpy(pl_path, the_url);"
    },
    {
        "line": 508,
        "fullcodeline": "playlist = e ? NULL : gf_fopen(the_url, \"rt\");"
    },
    {
        "line": 509,
        "fullcodeline": "readonly_playlist = 1;"
    },
    {
        "line": 574,
        "fullcodeline": "if (!strcmp(argv[i], \"-com\")) {"
    },
    {
        "line": 575,
        "fullcodeline": "gf_term_scene_update(term, NULL, argv[i+1]);"
    },
    {
        "line": 576,
        "fullcodeline": "i++;"
    },
    {
        "line": 667,
        "fullcodeline": "} else if (the_url[0] == '#') {"
    },
    {
        "line": 685,
        "fullcodeline": "fprintf(stderr, \"Failed to read line, aborting\\n\");"
    },
    {
        "line": 742,
        "fullcodeline": "fprintf(stderr, \" - Current Time: \");"
    },
    {
        "line": 744,
        "fullcodeline": "fprintf(stderr, \"\\nEnter seek time (Format: s, m:s or h:m:s):\\n\");"
    },
    {
        "line": 745,
        "fullcodeline": "h = m = s = 0;"
    },
    {
        "line": 746,
        "fullcodeline": "r =scanf(\"%d:%d:%d\", &h, &m, &s);"
    },
    {
        "line": 843,
        "fullcodeline": "odm = gf_term_get_object(term, root_odm, i);"
    },
    {
        "line": 847,
        "fullcodeline": "odm = NULL;"
    },
    {
        "line": 857,
        "fullcodeline": "if (!stricmp(sExt, \".x\")) xml_dump = 1;"
    },
    {
        "line": 1066,
        "fullcodeline": "e = gf_term_get_screen_buffer(term, &fb);"
    },
    {
        "line": 1074,
        "fullcodeline": "u32 dst_size = fb.width*fb.height*4;"
    },
    {
        "line": 1075,
        "fullcodeline": "char *dst = (char*)gf_malloc(sizeof(char)*dst_size);"
    },
    {
        "line": 1077,
        "fullcodeline": "e = gf_img_png_enc(fb.video_buffer, fb.width, fb.height, fb.pitch_y, fb.pixel_format, dst, &dst_size);"
    },
    {
        "line": 1093,
        "fullcodeline": "gf_term_release_screen_buffer(term, &fb);"
    },
    {
        "line": 1120,
        "fullcodeline": "fprintf(stderr, \"Cannot find service %d - trying with object index\\n\", index);"
    },
    {
        "line": 1121,
        "fullcodeline": "odm = gf_term_get_object(term, root_od, index);"
    },
    {
        "line": 518,
        "fullcodeline": "fprintf(stderr, \"Opening URL %s\\n\", the_url);"
    },
    {
        "line": 520,
        "fullcodeline": "gf_term_connect_from_time(term, the_url, (u64) (play_from*1000), pause_at_first);"
    },
    {
        "line": 527,
        "fullcodeline": "gf_term_connect(term, str);"
    },
    {
        "line": 529,
        "fullcodeline": "is_connected = 1;"
    },
    {
        "line": 733,
        "fullcodeline": "if (scanf(\"%d\", &seekTo) == 1) {"
    },
    {
        "line": 735,
        "fullcodeline": "res = (Double)(s64)Duration;"
    },
    {
        "line": 736,
        "fullcodeline": "res /= 100;"
    },
    {
        "line": 737,
        "fullcodeline": "res *= seekTo;"
    },
    {
        "line": 738,
        "fullcodeline": "gf_term_play_from_time(term, (u64) (s64) res, 0);"
    },
    {
        "line": 747,
        "fullcodeline": "if (r==2) {"
    },
    {
        "line": 791,
        "fullcodeline": "if (scanf(\"%s\", str_url) == 1)"
    },
    {
        "line": 792,
        "fullcodeline": "ViewOD(term, 0, (u32)-1, str_url);"
    },
    {
        "line": 844,
        "fullcodeline": "if (gf_term_get_object_info(term, odm, &info) == GF_OK) {"
    },
    {
        "line": 1054,
        "fullcodeline": "else if (offscreen_view==nb_views+2) {"
    },
    {
        "line": 56,
        "fullcodeline": "} else if (!strcmp(arg, \"-guid\")) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (sscanf(argv[i+1], \"%dx%d\", &forced_width, &forced_height) != 2) {"
    },
    {
        "line": 103,
        "fullcodeline": "forced_width = forced_height = 0;"
    },
    {
        "line": 227,
        "fullcodeline": "else if (!strcmp(arg, \"-bench\")) bench_mode = 1;"
    },
    {
        "line": 499,
        "fullcodeline": "if (!strncmp(\"http:\", the_url, 5)) {"
    },
    {
        "line": 500,
        "fullcodeline": "GF_DownloadSession *sess = gf_dm_sess_new(term->downloader, the_url, GF_NETIO_SESSION_NOT_THREADED, NULL, NULL, &e);"
    },
    {
        "line": 670,
        "fullcodeline": "fprintf(stderr, \"Opening URL %s\\n\", the_url);"
    },
    {
        "line": 671,
        "fullcodeline": "gf_term_connect_with_path(term, the_url, pl_path);"
    },
    {
        "line": 734,
        "fullcodeline": "if (seekTo > 100) seekTo = 100;"
    },
    {
        "line": 748,
        "fullcodeline": "s = m;"
    },
    {
        "line": 749,
        "fullcodeline": "m = h;"
    },
    {
        "line": 750,
        "fullcodeline": "h = 0;"
    },
    {
        "line": 757,
        "fullcodeline": "if (r && (r<=3)) {"
    },
    {
        "line": 758,
        "fullcodeline": "u64 time = h*3600 + m*60 + s;"
    },
    {
        "line": 759,
        "fullcodeline": "gf_term_play_from_time(term, time*1000, 0);"
    },
    {
        "line": 1055,
        "fullcodeline": "offscreen_view = 0;"
    },
    {
        "line": 1056,
        "fullcodeline": "nb_pass = nb_views+1;"
    },
    {
        "line": 1079,
        "fullcodeline": "fprintf(stderr, \"Error encoding PNG %s\\n\", gf_error_to_string(e) );"
    },
    {
        "line": 1080,
        "fullcodeline": "nb_pass = 0;"
    },
    {
        "line": 1123,
        "fullcodeline": "gf_term_select_object(term, odm);"
    },
    {
        "line": 57,
        "fullcodeline": "gui_mode = 2;"
    },
    {
        "line": 106,
        "fullcodeline": "} else if (!strcmp(arg, \"-quiet\")) {"
    },
    {
        "line": 107,
        "fullcodeline": "be_quiet = 1;"
    },
    {
        "line": 515,
        "fullcodeline": "fprintf(stderr, \"Hit 'h' for help\\n\\n\");"
    },
    {
        "line": 519,
        "fullcodeline": "if (pause_at_first) fprintf(stderr, \"[Status: Paused]\\n\");"
    },
    {
        "line": 845,
        "fullcodeline": "if (info.od->objectDescriptorID==odid) break;"
    },
    {
        "line": 1082,
        "fullcodeline": "FILE *png = gf_fopen(szFileName, \"wb\");"
    },
    {
        "line": 1125,
        "fullcodeline": "fprintf(stderr, \"Cannot find object at index %d\\n\", index);"
    },
    {
        "line": 502,
        "fullcodeline": "e = gf_dm_sess_process(sess);"
    },
    {
        "line": 752,
        "fullcodeline": "else if (r==1) {"
    },
    {
        "line": 1083,
        "fullcodeline": "if (!png) {"
    },
    {
        "line": 58,
        "fullcodeline": "} else if (!strcmp(arg, \"-h\") || !strcmp(arg, \"-help\")) {"
    },
    {
        "line": 228,
        "fullcodeline": "else if (!strcmp(arg, \"-vbench\")) bench_mode = 2;"
    },
    {
        "line": 514,
        "fullcodeline": "fprintf(stderr, \"Failed to open playlist %s: %s\\n\", the_url, gf_error_to_string(e) );"
    },
    {
        "line": 753,
        "fullcodeline": "s = h;"
    },
    {
        "line": 754,
        "fullcodeline": "m = h = 0;"
    },
    {
        "line": 1084,
        "fullcodeline": "fprintf(stderr, \"Error writing file %s\\n\", szFileName);"
    },
    {
        "line": 1085,
        "fullcodeline": "nb_pass = 0;"
    },
    {
        "line": 59,
        "fullcodeline": "PrintUsage();"
    },
    {
        "line": 108,
        "fullcodeline": "} else if (!strcmp(arg, \"-strict-error\")) {"
    },
    {
        "line": 503,
        "fullcodeline": "if (!e) strcpy(the_url, gf_dm_sess_get_cache_name(sess));"
    },
    {
        "line": 1087,
        "fullcodeline": "gf_fwrite(dst, dst_size, 1, png);"
    },
    {
        "line": 1089,
        "fullcodeline": "fprintf(stderr, \"Dump to %s\\n\", szFileName);"
    },
    {
        "line": 229,
        "fullcodeline": "else if (!strcmp(arg, \"-sbench\")) bench_mode = 3;"
    },
    {
        "line": 110,
        "fullcodeline": "} else if (!strcmp(arg, \"-log-file\") || !strcmp(arg, \"-lf\")) {"
    },
    {
        "line": 111,
        "fullcodeline": "logfile = gf_fopen(argv[i+1], \"wt\");"
    },
    {
        "line": 112,
        "fullcodeline": "gf_log_set_callback(logfile, on_gpac_log);"
    },
    {
        "line": 113,
        "fullcodeline": "i++;"
    },
    {
        "line": 230,
        "fullcodeline": "else if (!strcmp(arg, \"-no-addon\")) enable_add_ons = GF_FALSE;"
    },
    {
        "line": 114,
        "fullcodeline": "} else if (!strcmp(arg, \"-logs\") ) {"
    },
    {
        "line": 118,
        "fullcodeline": "logs_set = GF_TRUE;"
    },
    {
        "line": 119,
        "fullcodeline": "i++;"
    },
    {
        "line": 115,
        "fullcodeline": "if (gf_log_set_tools_levels(argv[i+1]) != GF_OK) {"
    },
    {
        "line": 232,
        "fullcodeline": "else if (!strcmp(arg, \"-pause\")) pause_at_first = 1;"
    },
    {
        "line": 120,
        "fullcodeline": "} else if (!strcmp(arg, \"-log-clock\") || !strcmp(arg, \"-lc\")) {"
    },
    {
        "line": 121,
        "fullcodeline": "log_time_start = 1;"
    },
    {
        "line": 233,
        "fullcodeline": "else if (!strcmp(arg, \"-play-from\")) {"
    },
    {
        "line": 234,
        "fullcodeline": "play_from = atof((const char *) argv[i+1]);"
    },
    {
        "line": 235,
        "fullcodeline": "i++;"
    },
    {
        "line": 122,
        "fullcodeline": "} else if (!strcmp(arg, \"-log-utc\") || !strcmp(arg, \"-lu\")) {"
    },
    {
        "line": 123,
        "fullcodeline": "log_utc_time = 1;"
    },
    {
        "line": 237,
        "fullcodeline": "else if (!strcmp(arg, \"-speed\")) {"
    },
    {
        "line": 238,
        "fullcodeline": "playback_speed = FLT2FIX( atof((const char *) argv[i+1]) );"
    },
    {
        "line": 240,
        "fullcodeline": "i++;"
    },
    {
        "line": 128,
        "fullcodeline": "else if (!strcmp(arg, \"-no-thread\")) threading_flags = GF_TERM_NO_DECODER_THREAD | GF_TERM_NO_COMPOSITOR_THREAD | GF_TERM_WINDOW_NO_THREAD;"
    },
    {
        "line": 239,
        "fullcodeline": "if (playback_speed <= 0) playback_speed = FIX_ONE;"
    },
    {
        "line": 242,
        "fullcodeline": "else if (!strcmp(arg, \"-no-wnd\")) user.init_flags |= GF_TERM_WINDOWLESS;"
    },
    {
        "line": 130,
        "fullcodeline": "else if (!strcmp(arg, \"-no-cthread\") || !strcmp(arg, \"-no-compositor-thread\")) threading_flags |= GF_TERM_NO_COMPOSITOR_THREAD;"
    },
    {
        "line": 243,
        "fullcodeline": "else if (!strcmp(arg, \"-no-back\")) user.init_flags |= GF_TERM_WINDOW_TRANSPARENT;"
    },
    {
        "line": 131,
        "fullcodeline": "else if (!strcmp(arg, \"-no-audio\")) no_audio = 1;"
    },
    {
        "line": 244,
        "fullcodeline": "else if (!strcmp(arg, \"-align\")) {"
    },
    {
        "line": 247,
        "fullcodeline": "align_mode <<= 8;"
    },
    {
        "line": 250,
        "fullcodeline": "i++;"
    },
    {
        "line": 132,
        "fullcodeline": "else if (!strcmp(arg, \"-no-regulation\")) no_regulation = 1;"
    },
    {
        "line": 245,
        "fullcodeline": "if (argv[i+1][0]=='m') align_mode = 1;"
    },
    {
        "line": 248,
        "fullcodeline": "if (argv[i+1][1]=='m') align_mode |= 1;"
    },
    {
        "line": 251,
        "fullcodeline": "} else if (!strcmp(arg, \"-fill\")) {"
    },
    {
        "line": 133,
        "fullcodeline": "else if (!strcmp(arg, \"-fs\")) start_fs = 1;"
    },
    {
        "line": 246,
        "fullcodeline": "else if (argv[i+1][0]=='b') align_mode = 2;"
    },
    {
        "line": 249,
        "fullcodeline": "else if (argv[i+1][1]=='r') align_mode |= 2;"
    },
    {
        "line": 253,
        "fullcodeline": "} else if (!strcmp(arg, \"-show\")) {"
    },
    {
        "line": 254,
        "fullcodeline": "visible = 1;"
    },
    {
        "line": 135,
        "fullcodeline": "else if (!strcmp(arg, \"-opt\")) {"
    },
    {
        "line": 136,
        "fullcodeline": "set_cfg_option(argv[i+1]);"
    },
    {
        "line": 137,
        "fullcodeline": "i++;"
    },
    {
        "line": 255,
        "fullcodeline": "} else if (!strcmp(arg, \"-uncache\")) {"
    },
    {
        "line": 138,
        "fullcodeline": "} else if (!strcmp(arg, \"-conf\")) {"
    },
    {
        "line": 139,
        "fullcodeline": "set_cfg_option(argv[i+1]);"
    },
    {
        "line": 141,
        "fullcodeline": "i++;"
    },
    {
        "line": 258,
        "fullcodeline": "else if (!strcmp(arg, \"-exit\")) auto_exit = GF_TRUE;"
    },
    {
        "line": 143,
        "fullcodeline": "else if (!strcmp(arg, \"-ifce\")) {"
    },
    {
        "line": 144,
        "fullcodeline": "gf_cfg_set_key(cfg_file, \"Network\", \"DefaultMCastInterface\", argv[i+1]);"
    },
    {
        "line": 145,
        "fullcodeline": "i++;"
    },
    {
        "line": 259,
        "fullcodeline": "else if (!stricmp(arg, \"-views\")) {"
    },
    {
        "line": 260,
        "fullcodeline": "views = argv[i+1];"
    },
    {
        "line": 261,
        "fullcodeline": "i++;"
    },
    {
        "line": 147,
        "fullcodeline": "else if (!stricmp(arg, \"-help\")) {"
    },
    {
        "line": 263,
        "fullcodeline": "else if (!stricmp(arg, \"-mosaic\")) {"
    },
    {
        "line": 264,
        "fullcodeline": "mosaic = argv[i+1];"
    },
    {
        "line": 265,
        "fullcodeline": "i++;"
    },
    {
        "line": 151,
        "fullcodeline": "else if (!stricmp(arg, \"-noprog\")) {"
    },
    {
        "line": 153,
        "fullcodeline": "gf_set_progress_callback(NULL, progress_quiet);"
    },
    {
        "line": 267,
        "fullcodeline": "else if (!stricmp(arg, \"-com\")) {"
    },
    {
        "line": 268,
        "fullcodeline": "has_command = GF_TRUE;"
    },
    {
        "line": 269,
        "fullcodeline": "i++;"
    },
    {
        "line": 155,
        "fullcodeline": "else if (!stricmp(arg, \"-no-save\") || !stricmp(arg, \"--no-save\") /*old versions used --n-save ...*/) {"
    },
    {
        "line": 271,
        "fullcodeline": "else if (!stricmp(arg, \"-service\")) {"
    },
    {
        "line": 272,
        "fullcodeline": "initial_service_id = atoi(argv[i+1]);"
    },
    {
        "line": 273,
        "fullcodeline": "i++;"
    },
    {
        "line": 158,
        "fullcodeline": "else if (!stricmp(arg, \"-ntp-shift\")) {"
    },
    {
        "line": 159,
        "fullcodeline": "s32 shift = atoi(argv[i+1]);"
    },
    {
        "line": 160,
        "fullcodeline": "i++;"
    },
    {
        "line": 163,
        "fullcodeline": "else if (!stricmp(arg, \"-run-for\")) {"
    },
    {
        "line": 164,
        "fullcodeline": "simulation_time_in_ms = atoi(argv[i+1]) * 1000;"
    },
    {
        "line": 167,
        "fullcodeline": "i++;"
    },
    {
        "line": 165,
        "fullcodeline": "if (!simulation_time_in_ms)"
    },
    {
        "line": 166,
        "fullcodeline": "simulation_time_in_ms = 1; /*1ms*/"
    },
    {
        "line": 170,
        "fullcodeline": "else if (!strcmp(arg, \"-out\")) {"
    },
    {
        "line": 171,
        "fullcodeline": "out_arg = argv[i+1];"
    },
    {
        "line": 172,
        "fullcodeline": "i++;"
    },
    {
        "line": 174,
        "fullcodeline": "else if (!stricmp(arg, \"-fps\")) {"
    },
    {
        "line": 175,
        "fullcodeline": "fps = atof(argv[i+1]);"
    },
    {
        "line": 176,
        "fullcodeline": "i++;"
    },
    {
        "line": 177,
        "fullcodeline": "} else if (!strcmp(arg, \"-avi\") || !strcmp(arg, \"-sha\")) {"
    },
    {
        "line": 178,
        "fullcodeline": "dump_mode &= 0xFFFF0000;"
    },
    {
        "line": 180,
        "fullcodeline": "if (!strcmp(arg, \"-sha\")) dump_mode |= DUMP_SHA1;"
    },
    {
        "line": 183,
        "fullcodeline": "if ((url_arg || (i+2<(u32)argc)) && get_time_list(argv[i+1], times, &nb_times)) {"
    },
    {
        "line": 188,
        "fullcodeline": "i++;"
    },
    {
        "line": 181,
        "fullcodeline": "else dump_mode |= DUMP_AVI;"
    },
    {
        "line": 190,
        "fullcodeline": "} else if (!strcmp(arg, \"-rgbds\")) { /*get dump in rgbds pixel format*/"
    },
    {
        "line": 191,
        "fullcodeline": "dump_mode |= DUMP_RGB_DEPTH_SHAPE;"
    },
    {
        "line": 184,
        "fullcodeline": "if (!strcmp(arg, \"-avi\") && (nb_times!=2) ) {"
    },
    {
        "line": 192,
        "fullcodeline": "} else if (!strcmp(arg, \"-rgbd\")) { /*get dump in rgbd pixel format*/"
    },
    {
        "line": 193,
        "fullcodeline": "dump_mode |= DUMP_RGB_DEPTH;"
    },
    {
        "line": 194,
        "fullcodeline": "} else if (!strcmp(arg, \"-depth\")) {"
    },
    {
        "line": 195,
        "fullcodeline": "dump_mode |= DUMP_DEPTH_ONLY;"
    },
    {
        "line": 196,
        "fullcodeline": "} else if (!strcmp(arg, \"-bmp\")) {"
    },
    {
        "line": 197,
        "fullcodeline": "dump_mode &= 0xFFFF0000;"
    },
    {
        "line": 198,
        "fullcodeline": "dump_mode |= DUMP_BMP;"
    },
    {
        "line": 199,
        "fullcodeline": "if ((url_arg || (i+2<(u32)argc)) && get_time_list(argv[i+1], times, &nb_times)) i++;"
    },
    {
        "line": 200,
        "fullcodeline": "} else if (!strcmp(arg, \"-png\")) {"
    },
    {
        "line": 201,
        "fullcodeline": "dump_mode &= 0xFFFF0000;"
    },
    {
        "line": 202,
        "fullcodeline": "dump_mode |= DUMP_PNG;"
    },
    {
        "line": 203,
        "fullcodeline": "if ((url_arg || (i+2<(u32)argc)) && get_time_list(argv[i+1], times, &nb_times)) i++;"
    },
    {
        "line": 204,
        "fullcodeline": "} else if (!strcmp(arg, \"-raw\")) {"
    },
    {
        "line": 205,
        "fullcodeline": "dump_mode &= 0xFFFF0000;"
    },
    {
        "line": 206,
        "fullcodeline": "dump_mode |= DUMP_RAW;"
    },
    {
        "line": 207,
        "fullcodeline": "if ((url_arg || (i+2<(u32)argc)) && get_time_list(argv[i+1], times, &nb_times)) i++;"
    },
    {
        "line": 208,
        "fullcodeline": "} else if (!stricmp(arg, \"-scale\")) {"
    },
    {
        "line": 209,
        "fullcodeline": "sscanf(argv[i+1], \"%f\", &scale);"
    },
    {
        "line": 210,
        "fullcodeline": "i++;"
    },
    {
        "line": 212,
        "fullcodeline": "else if (!strcmp(arg, \"-c\") || !strcmp(arg, \"-cfg\")) {"
    },
    {
        "line": 214,
        "fullcodeline": "i++;"
    }
]