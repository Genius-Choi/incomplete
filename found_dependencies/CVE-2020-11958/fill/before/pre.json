[
    {
        "line": 8,
        "fullcodeline": "size_t free = static_cast<size_t>(tok - bot);"
    },
    {
        "line": 9,
        "fullcodeline": "size_t copy = static_cast<size_t>(lim - tok);"
    },
    {
        "line": 7,
        "fullcodeline": "DASSERT(bot <= tok && tok <= lim);"
    },
    {
        "line": 11,
        "fullcodeline": "if (free >= need) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (!read(free)) {"
    },
    {
        "line": 29,
        "fullcodeline": "eof = lim;"
    },
    {
        "line": 30,
        "fullcodeline": "memset(lim, 0, YYMAXFILL);"
    },
    {
        "line": 13,
        "fullcodeline": "shift_ptrs_and_fpos(-static_cast<ptrdiff_t>(free));"
    },
    {
        "line": 16,
        "fullcodeline": "BSIZE += std::max(BSIZE, need);"
    },
    {
        "line": 17,
        "fullcodeline": "char * buf = new char[BSIZE + YYMAXFILL];"
    },
    {
        "line": 20,
        "fullcodeline": "memmove(buf, tok, copy);"
    },
    {
        "line": 25,
        "fullcodeline": "free = BSIZE - copy;"
    },
    {
        "line": 18,
        "fullcodeline": "if (!buf) fatal(\"out of memory\");"
    },
    {
        "line": 21,
        "fullcodeline": "shift_ptrs_and_fpos(buf - bot);"
    }
]