[
    {
        "line": 3,
        "fullcodeline": "LOG.info(std::format(\"Extracting {} to {}\", archivePath.generic_string(),"
    },
    {
        "line": 5,
        "fullcodeline": "auto *archive = archive_read_new();"
    },
    {
        "line": 6,
        "fullcodeline": "archive_read_support_format_all(archive);"
    },
    {
        "line": 7,
        "fullcodeline": "archive_read_support_filter_all(archive);"
    },
    {
        "line": 8,
        "fullcodeline": "auto *ext = archive_write_disk_new();"
    },
    {
        "line": 9,
        "fullcodeline": "archive_write_disk_set_options("
    },
    {
        "line": 12,
        "fullcodeline": "archive_write_disk_set_standard_lookup(ext);"
    },
    {
        "line": 14,
        "fullcodeline": "const auto *filename = archivePath.c_str();"
    },
    {
        "line": 74,
        "fullcodeline": "archive_read_close(archive);"
    },
    {
        "line": 76,
        "fullcodeline": "archive_write_close(ext);"
    },
    {
        "line": 81,
        "fullcodeline": "archive_read_close(archive);"
    },
    {
        "line": 83,
        "fullcodeline": "archive_write_close(ext);"
    },
    {
        "line": 10,
        "fullcodeline": "ext, ARCHIVE_EXTRACT_TIME | ARCHIVE_EXTRACT_PERM | ARCHIVE_EXTRACT_ACL |"
    },
    {
        "line": 4,
        "fullcodeline": "outputDirectory.generic_string()));"
    },
    {
        "line": 16,
        "fullcodeline": "if (auto res ="
    },
    {
        "line": 18,
        "fullcodeline": "LOG.error(std::format(\"Unable to open archive: {} {}\", res,"
    },
    {
        "line": 24,
        "fullcodeline": "auto *entry = static_cast<struct archive_entry *>(nullptr);"
    },
    {
        "line": 25,
        "fullcodeline": "auto res = archive_read_next_header(archive, &entry);"
    },
    {
        "line": 34,
        "fullcodeline": "auto entryPath ="
    },
    {
        "line": 36,
        "fullcodeline": "archive_entry_set_pathname_utf8(entry, entryPath.string().c_str());"
    },
    {
        "line": 38,
        "fullcodeline": "const auto *originalHardlink = archive_entry_hardlink(entry);"
    },
    {
        "line": 17,
        "fullcodeline": "archive_read_open_filename(archive, filename, LIBARCHIVE_BLOCKSIZE)) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (res == ARCHIVE_EOF) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (res < ARCHIVE_OK) {"
    },
    {
        "line": 35,
        "fullcodeline": "outputDirectory / std::filesystem::path(archive_entry_pathname(entry));"
    },
    {
        "line": 39,
        "fullcodeline": "if (originalHardlink != nullptr) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (res = archive_write_header(ext, entry); res < ARCHIVE_OK) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (res = archive_write_finish_entry(ext); res < ARCHIVE_OK) {"
    },
    {
        "line": 19,
        "fullcodeline": "archive_error_string(archive)));"
    },
    {
        "line": 40,
        "fullcodeline": "auto newHardlink = outputDirectory / originalHardlink;"
    },
    {
        "line": 49,
        "fullcodeline": "archive_entry_set_hardlink(entry, newHardlink.c_str());"
    },
    {
        "line": 58,
        "fullcodeline": "if (archive_entry_size(entry) > 0) {"
    },
    {
        "line": 59,
        "fullcodeline": "auto copyResult = copyData(archive, ext);"
    },
    {
        "line": 30,
        "fullcodeline": "LOG.error(std::format(\"Error during reading archive: {}\","
    },
    {
        "line": 55,
        "fullcodeline": "std::format(\"Failed writing header: {}\", archive_error_string(ext)));"
    },
    {
        "line": 69,
        "fullcodeline": "std::format(\"Failed finishing entry: {}\", archive_error_string(ext)));"
    },
    {
        "line": 31,
        "fullcodeline": "archive_error_string(archive)));"
    },
    {
        "line": 60,
        "fullcodeline": "if (copyResult != ARCHIVE_OK && copyResult != ARCHIVE_EOF) {"
    },
    {
        "line": 61,
        "fullcodeline": "LOG.error(std::format(\"Failed writing result: {}\","
    },
    {
        "line": 62,
        "fullcodeline": "archive_error_string(ext)));"
    }
]