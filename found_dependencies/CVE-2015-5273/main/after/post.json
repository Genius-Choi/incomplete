[
    {
        "line": 4,
        "fullcodeline": "setlocale(LC_ALL, \"\");"
    },
    {
        "line": 10,
        "fullcodeline": "abrt_init(argv);"
    },
    {
        "line": 13,
        "fullcodeline": "const char *program_usage_string = _("
    },
    {
        "line": 30,
        "fullcodeline": "const char *build_ids = \"build_ids\";"
    },
    {
        "line": 31,
        "fullcodeline": "const char *exact = NULL;"
    },
    {
        "line": 32,
        "fullcodeline": "const char *repo = NULL;"
    },
    {
        "line": 33,
        "fullcodeline": "const char *size_mb = NULL;"
    },
    {
        "line": 35,
        "fullcodeline": "struct options program_options[] = {"
    },
    {
        "line": 44,
        "fullcodeline": "const unsigned opts = parse_opts(argc, argv, program_options, program_usage_string);"
    },
    {
        "line": 46,
        "fullcodeline": "const gid_t egid = getegid();"
    },
    {
        "line": 47,
        "fullcodeline": "const gid_t rgid = getgid();"
    },
    {
        "line": 48,
        "fullcodeline": "const uid_t euid = geteuid();"
    },
    {
        "line": 49,
        "fullcodeline": "const gid_t ruid = getuid();"
    },
    {
        "line": 58,
        "fullcodeline": "char *build_ids_self_fd = NULL;"
    },
    {
        "line": 82,
        "fullcodeline": "char tmp_directory[] = LARGE_DATA_TMP_DIR\"/abrt-tmp-debuginfo.XXXXXX\";"
    },
    {
        "line": 86,
        "fullcodeline": "log_info(\"Created working directory: %s\", tmp_directory);"
    },
    {
        "line": 89,
        "fullcodeline": "const char *args[13];"
    },
    {
        "line": 186,
        "fullcodeline": "pid_t pid = fork();"
    },
    {
        "line": 212,
        "fullcodeline": "error_msg_and_die(\"Child exit failed\");"
    },
    {
        "line": 59,
        "fullcodeline": "if (strcmp(\"-\", build_ids) != 0)"
    },
    {
        "line": 83,
        "fullcodeline": "if (mkdtemp(tmp_directory) == NULL)"
    },
    {
        "line": 91,
        "fullcodeline": "const char *verbs[] = { \"\", \"-v\", \"-vv\", \"-vvv\" };"
    },
    {
        "line": 92,
        "fullcodeline": "unsigned i = 0;"
    },
    {
        "line": 93,
        "fullcodeline": "args[i++] = EXECUTABLE;"
    },
    {
        "line": 94,
        "fullcodeline": "args[i++] = \"--ids\";"
    },
    {
        "line": 95,
        "fullcodeline": "args[i++] = (build_ids_self_fd != NULL) ? build_ids_self_fd : \"-\";"
    },
    {
        "line": 110,
        "fullcodeline": "args[i++] = \"--tmpdir\";"
    },
    {
        "line": 111,
        "fullcodeline": "args[i++] = tmp_directory;"
    },
    {
        "line": 112,
        "fullcodeline": "args[i++] = \"--\";"
    },
    {
        "line": 113,
        "fullcodeline": "args[i] = NULL;"
    },
    {
        "line": 120,
        "fullcodeline": "if (egid != rgid)"
    },
    {
        "line": 122,
        "fullcodeline": "if (euid != ruid)"
    },
    {
        "line": 187,
        "fullcodeline": "if (pid < 0)"
    },
    {
        "line": 190,
        "fullcodeline": "if (pid == 0)"
    },
    {
        "line": 197,
        "fullcodeline": "if (safe_waitpid(pid, &status, 0) < 0)"
    },
    {
        "line": 200,
        "fullcodeline": "if (rmdir(tmp_directory) >= 0)"
    },
    {
        "line": 206,
        "fullcodeline": "if (WIFEXITED(status))"
    },
    {
        "line": 209,
        "fullcodeline": "if (WIFSIGNALED(status))"
    },
    {
        "line": 36,
        "fullcodeline": "OPT__VERBOSE(&g_verbose),"
    },
    {
        "line": 37,
        "fullcodeline": "OPT_BOOL  ('y', \"yes\",         NULL,                   _(\"Noninteractive, assume 'Yes' to all questions\")),"
    },
    {
        "line": 38,
        "fullcodeline": "OPT_STRING('i', \"ids\",   &build_ids, \"BUILD_IDS_FILE\", _(\"- means STDIN, default: build_ids\")),"
    },
    {
        "line": 39,
        "fullcodeline": "OPT_STRING('e', \"exact\",     &exact, \"EXACT\",          _(\"Download only specified files\")),"
    },
    {
        "line": 40,
        "fullcodeline": "OPT_STRING('r', \"repo\",       &repo, \"REPO\",           _(\"Pattern to use when searching for repos, default: *debug*\")),"
    },
    {
        "line": 41,
        "fullcodeline": "OPT_STRING('s', \"size_mb\", &size_mb, \"SIZE_MB\",        _(\"Ignored option\")),"
    },
    {
        "line": 67,
        "fullcodeline": "const int build_ids_fd = open(build_ids, O_RDONLY);"
    },
    {
        "line": 79,
        "fullcodeline": "build_ids_self_fd = xasprintf(\"/proc/self/fd/%d\", build_ids_fd);"
    },
    {
        "line": 84,
        "fullcodeline": "perror_msg_and_die(\"Failed to create working directory\");"
    },
    {
        "line": 96,
        "fullcodeline": "if (g_verbose > 0)"
    },
    {
        "line": 98,
        "fullcodeline": "if ((opts & OPT_y))"
    },
    {
        "line": 100,
        "fullcodeline": "if ((opts & OPT_e))"
    },
    {
        "line": 105,
        "fullcodeline": "if ((opts & OPT_r))"
    },
    {
        "line": 121,
        "fullcodeline": "IGNORE_RESULT(setregid(egid, egid));"
    },
    {
        "line": 124,
        "fullcodeline": "IGNORE_RESULT(setreuid(euid, euid));"
    },
    {
        "line": 134,
        "fullcodeline": "static const char *whitelist[] = {"
    },
    {
        "line": 139,
        "fullcodeline": "char *setlist[sizeof(whitelist)/sizeof(char*)] = { 0 };"
    },
    {
        "line": 140,
        "fullcodeline": "char *p = NULL;"
    },
    {
        "line": 146,
        "fullcodeline": "clearenv();"
    },
    {
        "line": 177,
        "fullcodeline": "char path_env[] = \"PATH=/usr/sbin:/sbin:/usr/bin:/bin:\"BIN_DIR\":\"SBIN_DIR;"
    },
    {
        "line": 180,
        "fullcodeline": "putenv(path_env);"
    },
    {
        "line": 183,
        "fullcodeline": "umask(0022);"
    },
    {
        "line": 188,
        "fullcodeline": "perror_msg_and_die(\"fork\");"
    },
    {
        "line": 192,
        "fullcodeline": "execvp(EXECUTABLE, (char **)args);"
    },
    {
        "line": 193,
        "fullcodeline": "error_msg_and_die(\"Can't execute %s\", EXECUTABLE);"
    },
    {
        "line": 198,
        "fullcodeline": "perror_msg_and_die(\"waitpid\");"
    },
    {
        "line": 201,
        "fullcodeline": "log_info(\"Removed working directory: %s\", tmp_directory);"
    },
    {
        "line": 210,
        "fullcodeline": "error_msg_and_die(\"Child terminated with signal %d\", WTERMSIG(status));"
    },
    {
        "line": 61,
        "fullcodeline": "if (setregid(egid, rgid) < 0)"
    },
    {
        "line": 64,
        "fullcodeline": "if (setreuid(euid, ruid) < 0)"
    },
    {
        "line": 69,
        "fullcodeline": "if (setregid(rgid, egid) < 0)"
    },
    {
        "line": 72,
        "fullcodeline": "if (setreuid(ruid, euid) < 0 )"
    },
    {
        "line": 75,
        "fullcodeline": "if (build_ids_fd < 0)"
    },
    {
        "line": 97,
        "fullcodeline": "args[i++] = verbs[g_verbose <= 3 ? g_verbose : 3];"
    },
    {
        "line": 99,
        "fullcodeline": "args[i++] = \"-y\";"
    },
    {
        "line": 102,
        "fullcodeline": "args[i++] = \"--exact\";"
    },
    {
        "line": 103,
        "fullcodeline": "args[i++] = exact;"
    },
    {
        "line": 107,
        "fullcodeline": "args[i++] = \"--repo\";"
    },
    {
        "line": 108,
        "fullcodeline": "args[i++] = repo;"
    },
    {
        "line": 141,
        "fullcodeline": "for (size_t i = 0; i < wlsize; i++)"
    },
    {
        "line": 149,
        "fullcodeline": "for (size_t i = 0; i < wlsize; i++)"
    },
    {
        "line": 207,
        "fullcodeline": "return WEXITSTATUS(status);"
    },
    {
        "line": 62,
        "fullcodeline": "perror_msg_and_die(\"setregid(egid, rgid)\");"
    },
    {
        "line": 65,
        "fullcodeline": "perror_msg_and_die(\"setreuid(euid, ruid)\");"
    },
    {
        "line": 70,
        "fullcodeline": "perror_msg_and_die(\"setregid(rgid, egid)\");"
    },
    {
        "line": 73,
        "fullcodeline": "perror_msg_and_die(\"setreuid(ruid, euid)\");"
    },
    {
        "line": 76,
        "fullcodeline": "perror_msg_and_die(\"Failed to open file '%s'\", build_ids);"
    },
    {
        "line": 142,
        "fullcodeline": "if ((p = getenv(whitelist[i])) != NULL)"
    },
    {
        "line": 150,
        "fullcodeline": "if (setlist[i] != NULL)"
    },
    {
        "line": 202,
        "fullcodeline": "else if (errno != ENOENT)"
    },
    {
        "line": 143,
        "fullcodeline": "setlist[i] = xstrdup(p);"
    },
    {
        "line": 152,
        "fullcodeline": "xsetenv(whitelist[i], setlist[i]);"
    },
    {
        "line": 153,
        "fullcodeline": "free(setlist[i]);"
    },
    {
        "line": 203,
        "fullcodeline": "perror_msg(\"Failed to remove working directory\");"
    }
]