[
    {
        "line": 5,
        "fullcodeline": "pkey_size = backend._lib.EVP_PKEY_size(key._evp_pkey)"
    },
    {
        "line": 6,
        "fullcodeline": "backend.openssl_assert(pkey_size > 0)"
    },
    {
        "line": 2,
        "fullcodeline": "if not isinstance(padding, AsymmetricPadding):"
    },
    {
        "line": 8,
        "fullcodeline": "if isinstance(padding, PKCS1v15):"
    },
    {
        "line": 3,
        "fullcodeline": "raise TypeError(\"Expected provider of AsymmetricPadding.\")"
    },
    {
        "line": 10,
        "fullcodeline": "elif isinstance(padding, PSS):"
    },
    {
        "line": 27,
        "fullcodeline": "raise UnsupportedAlgorithm("
    },
    {
        "line": 11,
        "fullcodeline": "if not isinstance(padding._mgf, MGF1):"
    },
    {
        "line": 19,
        "fullcodeline": "if pkey_size - algorithm.digest_size - 2 < 0:"
    },
    {
        "line": 12,
        "fullcodeline": "raise UnsupportedAlgorithm("
    },
    {
        "line": 20,
        "fullcodeline": "raise ValueError("
    },
    {
        "line": 28,
        "fullcodeline": "\"{} is not supported by this backend.\".format(padding.name),"
    },
    {
        "line": 21,
        "fullcodeline": "\"Digest too large for key size. Use a larger \""
    }
]