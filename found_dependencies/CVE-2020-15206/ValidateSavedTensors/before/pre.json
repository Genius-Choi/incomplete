[
    {
        "line": 21,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 3,
        "fullcodeline": "const auto node_iterator = node.attr().find(\"value\");"
    },
    {
        "line": 4,
        "fullcodeline": "if (node_iterator != node.attr().end()) {"
    },
    {
        "line": 5,
        "fullcodeline": "AttrValue node_value = node_iterator->second;"
    },
    {
        "line": 6,
        "fullcodeline": "if (node_value.has_tensor()) {"
    },
    {
        "line": 7,
        "fullcodeline": "const PartialTensorShape node_shape(node_value.tensor().tensor_shape());"
    },
    {
        "line": 8,
        "fullcodeline": "if (node_shape.num_elements() < 0) {"
    },
    {
        "line": 15,
        "fullcodeline": "} else if (node.op() == \"Const\") {"
    },
    {
        "line": 16,
        "fullcodeline": "return errors::FailedPrecondition("
    },
    {
        "line": 9,
        "fullcodeline": "return errors::FailedPrecondition("
    },
    {
        "line": 17,
        "fullcodeline": "\"Saved model contains node \\\"\", node.name(),"
    },
    {
        "line": 10,
        "fullcodeline": "\"Saved model contains node \\\"\", node.name(), \"\\\" (op \\\"\","
    },
    {
        "line": 11,
        "fullcodeline": "node.op(), \"\\\") which initializes from a tensor with \","
    },
    {
        "line": 12,
        "fullcodeline": "node_shape.num_elements(), \" elements\");"
    }
]