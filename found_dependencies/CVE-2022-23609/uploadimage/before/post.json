[
    {
        "line": 8,
        "fullcodeline": "img_bytes = base64.b64decode(im_b64.encode(\"utf-8\"))"
    },
    {
        "line": 12,
        "fullcodeline": "img = Image.open(io.BytesIO(img_bytes))"
    },
    {
        "line": 14,
        "fullcodeline": "file_ending = img.format"
    },
    {
        "line": 15,
        "fullcodeline": "print(f\"File has filetype {file_ending}.\")"
    },
    {
        "line": 22,
        "fullcodeline": "one_hundred_million = 100000000"
    },
    {
        "line": 23,
        "fullcodeline": "lots_of_nine = 999999999"
    },
    {
        "line": 25,
        "fullcodeline": "file_name = None"
    },
    {
        "line": 27,
        "fullcodeline": "f = open(\"all_files\", \"r\")"
    },
    {
        "line": 28,
        "fullcodeline": "all_files = ast.literal_eval(f.read())"
    },
    {
        "line": 29,
        "fullcodeline": "f.close()"
    },
    {
        "line": 31,
        "fullcodeline": "attempt = 0"
    },
    {
        "line": 50,
        "fullcodeline": "print(f\"Successful file name: {file_name}\")"
    },
    {
        "line": 59,
        "fullcodeline": "file_db_entry = ["
    },
    {
        "line": 64,
        "fullcodeline": "print(f\"New db entry: {file_db_entry}\")"
    },
    {
        "line": 66,
        "fullcodeline": "all_files.append(file_db_entry)"
    },
    {
        "line": 76,
        "fullcodeline": "del x"
    },
    {
        "line": 77,
        "fullcodeline": "del y"
    },
    {
        "line": 79,
        "fullcodeline": "length = len(all_files)"
    },
    {
        "line": 89,
        "fullcodeline": "f = open(\"all_files\", \"w\")"
    },
    {
        "line": 90,
        "fullcodeline": "f.write(str(all_files))"
    },
    {
        "line": 91,
        "fullcodeline": "f.close()"
    },
    {
        "line": 93,
        "fullcodeline": "file_name = file_name + file_ending"
    },
    {
        "line": 95,
        "fullcodeline": "img.save(file_name)"
    },
    {
        "line": 97,
        "fullcodeline": "print(f\"Saved {file_name} from {file_db_entry}.\")"
    },
    {
        "line": 98,
        "fullcodeline": "print(f\"Returning {file_db_entry}.\")"
    },
    {
        "line": 3,
        "fullcodeline": "if not request.json or \"image\" not in request.json:"
    },
    {
        "line": 9,
        "fullcodeline": "img_bytes, valid = allowed_file(img_bytes)"
    },
    {
        "line": 10,
        "fullcodeline": "if not valid:"
    },
    {
        "line": 17,
        "fullcodeline": "if file_ending == \"JPEG\":"
    },
    {
        "line": 33,
        "fullcodeline": "while file_name is None or file_name in all_files:"
    },
    {
        "line": 53,
        "fullcodeline": "if title[:9] == \"[PAUSED] \":"
    },
    {
        "line": 75,
        "fullcodeline": "cache, x, y = get_config()"
    },
    {
        "line": 81,
        "fullcodeline": "length > cache"
    },
    {
        "line": 99,
        "fullcodeline": "return escape(str({\"entry\": file_db_entry}))"
    },
    {
        "line": 4,
        "fullcodeline": "print(\"No data sent or no image provided. Aborting with 400.\")"
    },
    {
        "line": 5,
        "fullcodeline": "abort(400)"
    },
    {
        "line": 18,
        "fullcodeline": "file_ending = \".jpg\""
    },
    {
        "line": 20,
        "fullcodeline": "file_ending = \".png\""
    },
    {
        "line": 54,
        "fullcodeline": "title = title[9::]"
    },
    {
        "line": 85,
        "fullcodeline": "remove(filename)"
    },
    {
        "line": 86,
        "fullcodeline": "del all_files[0]"
    },
    {
        "line": 87,
        "fullcodeline": "length = len(all_files)"
    },
    {
        "line": 11,
        "fullcodeline": "return escape({\"entry\": \"False\"})"
    },
    {
        "line": 34,
        "fullcodeline": "if attempt <= 1000:"
    },
    {
        "line": 60,
        "fullcodeline": "{\"title\": title, \"singer\": singer, \"album\": album},"
    },
    {
        "line": 35,
        "fullcodeline": "file_name = random.randint(one_hundred_million, lots_of_nine)"
    },
    {
        "line": 37,
        "fullcodeline": "file_name = base64.b64encode(str(file_name).encode(\"utf-8\")).decode(\"utf-8\")"
    },
    {
        "line": 39,
        "fullcodeline": "print(f\"Trying new file name: {file_name}\")"
    },
    {
        "line": 41,
        "fullcodeline": "attempt = 0"
    },
    {
        "line": 42,
        "fullcodeline": "one_hundred_million += 100000"
    },
    {
        "line": 43,
        "fullcodeline": "lots_of_nine += 1000000"
    },
    {
        "line": 48,
        "fullcodeline": "one_hundred_million -= 10000"
    },
    {
        "line": 45,
        "fullcodeline": "while one_hundred_million >= lots_of_nine:"
    },
    {
        "line": 46,
        "fullcodeline": "one_hundred_million -= 10000"
    }
]