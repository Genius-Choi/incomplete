[
    {
        "line": 16,
        "fullcodeline": "g_return_if_fail (table != NULL);"
    },
    {
        "line": 17,
        "fullcodeline": "g_return_if_fail (filename != NULL);"
    },
    {
        "line": 18,
        "fullcodeline": "g_return_if_fail (cancellable == NULL || G_IS_CANCELLABLE (cancellable));"
    },
    {
        "line": 20,
        "fullcodeline": "fb = file_builder_new (byteswap);"
    },
    {
        "line": 21,
        "fullcodeline": "file_builder_add_hash (fb, table, &root);"
    },
    {
        "line": 22,
        "fullcodeline": "str = file_builder_serialise (fb, root);"
    },
    {
        "line": 23,
        "fullcodeline": "bytes = g_string_free_to_bytes (str);"
    },
    {
        "line": 24,
        "fullcodeline": "file_builder_free (fb);"
    },
    {
        "line": 26,
        "fullcodeline": "file = g_file_new_for_path (filename);"
    },
    {
        "line": 27,
        "fullcodeline": "data = write_contents_data_new (bytes, file);"
    },
    {
        "line": 29,
        "fullcodeline": "task = g_task_new (NULL, cancellable, callback, user_data);"
    },
    {
        "line": 30,
        "fullcodeline": "g_task_set_task_data (task, data, (GDestroyNotify)write_contents_data_free);"
    },
    {
        "line": 31,
        "fullcodeline": "g_task_set_source_tag (task, gvdb_table_write_contents_async);"
    },
    {
        "line": 33,
        "fullcodeline": "g_file_replace_contents_async (file, str->str, str->len,"
    },
    {
        "line": 38,
        "fullcodeline": "g_bytes_unref (bytes);"
    },
    {
        "line": 39,
        "fullcodeline": "g_object_unref (file);"
    },
    {
        "line": 35,
        "fullcodeline": "G_FILE_CREATE_PRIVATE | G_FILE_CREATE_REPLACE_DESTINATION,"
    },
    {
        "line": 36,
        "fullcodeline": "cancellable, replace_contents_cb, g_steal_pointer (&task));"
    }
]