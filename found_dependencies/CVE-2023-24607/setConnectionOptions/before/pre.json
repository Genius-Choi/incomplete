[
    {
        "line": 4,
        "fullcodeline": "const QStringList opts(connOpts.split(u';', Qt::SkipEmptyParts));"
    },
    {
        "line": 5,
        "fullcodeline": "SQLRETURN r = SQL_SUCCESS;"
    },
    {
        "line": 6,
        "fullcodeline": "for (int i = 0; i < opts.count(); ++i) {"
    },
    {
        "line": 7,
        "fullcodeline": "const QString tmp(opts.at(i));"
    },
    {
        "line": 13,
        "fullcodeline": "const QString opt(tmp.left(idx));"
    },
    {
        "line": 14,
        "fullcodeline": "const QString val(tmp.mid(idx + 1).simplified());"
    },
    {
        "line": 15,
        "fullcodeline": "SQLUINTEGER v = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "r = SQL_SUCCESS;"
    },
    {
        "line": 9,
        "fullcodeline": "if ((idx = tmp.indexOf(u'=')) == -1) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (opt.toUpper() == \"SQL_ATTR_ACCESS_MODE\"_L1) {"
    },
    {
        "line": 99,
        "fullcodeline": "if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)"
    },
    {
        "line": 10,
        "fullcodeline": "qWarning() << \"QODBCDriver::open: Illegal connect option value '\" << tmp << '\\'';"
    },
    {
        "line": 27,
        "fullcodeline": "r = SQLSetConnectAttr(hDbc, SQL_ATTR_ACCESS_MODE, (SQLPOINTER) size_t(v), 0);"
    },
    {
        "line": 100,
        "fullcodeline": "qSqlWarning(QString::fromLatin1(\"QODBCDriver::open: Unable to set connection attribute'%1'\").arg("
    },
    {
        "line": 19,
        "fullcodeline": "if (val.toUpper() == \"SQL_MODE_READ_ONLY\"_L1) {"
    },
    {
        "line": 20,
        "fullcodeline": "v = SQL_MODE_READ_ONLY;"
    },
    {
        "line": 28,
        "fullcodeline": "} else if (opt.toUpper() == \"SQL_ATTR_CONNECTION_TIMEOUT\"_L1) {"
    },
    {
        "line": 29,
        "fullcodeline": "v = val.toUInt();"
    },
    {
        "line": 30,
        "fullcodeline": "r = SQLSetConnectAttr(hDbc, SQL_ATTR_CONNECTION_TIMEOUT, (SQLPOINTER) size_t(v), 0);"
    },
    {
        "line": 21,
        "fullcodeline": "} else if (val.toUpper() == \"SQL_MODE_READ_WRITE\"_L1) {"
    },
    {
        "line": 22,
        "fullcodeline": "v = SQL_MODE_READ_WRITE;"
    },
    {
        "line": 31,
        "fullcodeline": "} else if (opt.toUpper() == \"SQL_ATTR_LOGIN_TIMEOUT\"_L1) {"
    },
    {
        "line": 24,
        "fullcodeline": "qWarning() << \"QODBCDriver::open: Unknown option value '\" << val << '\\'';"
    },
    {
        "line": 32,
        "fullcodeline": "v = val.toUInt();"
    },
    {
        "line": 33,
        "fullcodeline": "r = SQLSetConnectAttr(hDbc, SQL_ATTR_LOGIN_TIMEOUT, (SQLPOINTER) size_t(v), 0);"
    },
    {
        "line": 34,
        "fullcodeline": "} else if (opt.toUpper() == \"SQL_ATTR_CURRENT_CATALOG\"_L1) {"
    },
    {
        "line": 35,
        "fullcodeline": "val.utf16(); // 0 terminate"
    },
    {
        "line": 36,
        "fullcodeline": "r = SQLSetConnectAttr(hDbc, SQL_ATTR_CURRENT_CATALOG,"
    },
    {
        "line": 37,
        "fullcodeline": "toSQLTCHAR(val).data(),"
    },
    {
        "line": 38,
        "fullcodeline": "SQLINTEGER(val.length() * sizeof(SQLTCHAR)));"
    },
    {
        "line": 39,
        "fullcodeline": "} else if (opt.toUpper() == \"SQL_ATTR_METADATA_ID\"_L1) {"
    },
    {
        "line": 48,
        "fullcodeline": "r = SQLSetConnectAttr(hDbc, SQL_ATTR_METADATA_ID, (SQLPOINTER) size_t(v), 0);"
    },
    {
        "line": 40,
        "fullcodeline": "if (val.toUpper() == \"SQL_TRUE\"_L1) {"
    },
    {
        "line": 41,
        "fullcodeline": "v = SQL_TRUE;"
    },
    {
        "line": 49,
        "fullcodeline": "} else if (opt.toUpper() == \"SQL_ATTR_PACKET_SIZE\"_L1) {"
    },
    {
        "line": 50,
        "fullcodeline": "v = val.toUInt();"
    },
    {
        "line": 51,
        "fullcodeline": "r = SQLSetConnectAttr(hDbc, SQL_ATTR_PACKET_SIZE, (SQLPOINTER) size_t(v), 0);"
    },
    {
        "line": 42,
        "fullcodeline": "} else if (val.toUpper() == \"SQL_FALSE\"_L1) {"
    },
    {
        "line": 43,
        "fullcodeline": "v = SQL_FALSE;"
    },
    {
        "line": 52,
        "fullcodeline": "} else if (opt.toUpper() == \"SQL_ATTR_TRACEFILE\"_L1) {"
    },
    {
        "line": 45,
        "fullcodeline": "qWarning() << \"QODBCDriver::open: Unknown option value '\" << val << '\\'';"
    },
    {
        "line": 53,
        "fullcodeline": "val.utf16(); // 0 terminate"
    },
    {
        "line": 54,
        "fullcodeline": "r = SQLSetConnectAttr(hDbc, SQL_ATTR_TRACEFILE,"
    },
    {
        "line": 55,
        "fullcodeline": "toSQLTCHAR(val).data(),"
    },
    {
        "line": 56,
        "fullcodeline": "SQLINTEGER(val.length() * sizeof(SQLTCHAR)));"
    },
    {
        "line": 57,
        "fullcodeline": "} else if (opt.toUpper() == \"SQL_ATTR_TRACE\"_L1) {"
    },
    {
        "line": 66,
        "fullcodeline": "r = SQLSetConnectAttr(hDbc, SQL_ATTR_TRACE, (SQLPOINTER) size_t(v), 0);"
    },
    {
        "line": 58,
        "fullcodeline": "if (val.toUpper() == \"SQL_OPT_TRACE_OFF\"_L1) {"
    },
    {
        "line": 59,
        "fullcodeline": "v = SQL_OPT_TRACE_OFF;"
    },
    {
        "line": 67,
        "fullcodeline": "} else if (opt.toUpper() == \"SQL_ATTR_CONNECTION_POOLING\"_L1) {"
    },
    {
        "line": 80,
        "fullcodeline": "r = SQLSetConnectAttr(hDbc, SQL_ATTR_CONNECTION_POOLING, (SQLPOINTER) size_t(v), 0);"
    },
    {
        "line": 60,
        "fullcodeline": "} else if (val.toUpper() == \"SQL_OPT_TRACE_ON\"_L1) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (val == \"SQL_CP_OFF\"_L1)"
    },
    {
        "line": 61,
        "fullcodeline": "v = SQL_OPT_TRACE_ON;"
    },
    {
        "line": 69,
        "fullcodeline": "v = SQL_CP_OFF;"
    },
    {
        "line": 81,
        "fullcodeline": "} else if (opt.toUpper() == \"SQL_ATTR_CP_MATCH\"_L1) {"
    },
    {
        "line": 63,
        "fullcodeline": "qWarning() << \"QODBCDriver::open: Unknown option value '\" << val << '\\'';"
    },
    {
        "line": 92,
        "fullcodeline": "r = SQLSetConnectAttr(hDbc, SQL_ATTR_CP_MATCH, (SQLPOINTER) size_t(v), 0);"
    },
    {
        "line": 70,
        "fullcodeline": "else if (val.toUpper() == \"SQL_CP_ONE_PER_DRIVER\"_L1)"
    },
    {
        "line": 82,
        "fullcodeline": "if (val.toUpper() == \"SQL_CP_STRICT_MATCH\"_L1)"
    },
    {
        "line": 71,
        "fullcodeline": "v = SQL_CP_ONE_PER_DRIVER;"
    },
    {
        "line": 83,
        "fullcodeline": "v = SQL_CP_STRICT_MATCH;"
    },
    {
        "line": 93,
        "fullcodeline": "} else if (opt.toUpper() == \"SQL_ATTR_ODBC_VERSION\"_L1) {"
    },
    {
        "line": 72,
        "fullcodeline": "else if (val.toUpper() == \"SQL_CP_ONE_PER_HENV\"_L1)"
    },
    {
        "line": 84,
        "fullcodeline": "else if (val.toUpper() == \"SQL_CP_RELAXED_MATCH\"_L1)"
    },
    {
        "line": 97,
        "fullcodeline": "qWarning() << \"QODBCDriver::open: Unknown connection attribute '\" << opt << '\\'';"
    },
    {
        "line": 73,
        "fullcodeline": "v = SQL_CP_ONE_PER_HENV;"
    },
    {
        "line": 85,
        "fullcodeline": "v = SQL_CP_RELAXED_MATCH;"
    },
    {
        "line": 74,
        "fullcodeline": "else if (val.toUpper() == \"SQL_CP_DEFAULT\"_L1)"
    },
    {
        "line": 86,
        "fullcodeline": "else if (val.toUpper() == \"SQL_CP_MATCH_DEFAULT\"_L1)"
    },
    {
        "line": 75,
        "fullcodeline": "v = SQL_CP_DEFAULT;"
    },
    {
        "line": 87,
        "fullcodeline": "v = SQL_CP_MATCH_DEFAULT;"
    },
    {
        "line": 77,
        "fullcodeline": "qWarning() << \"QODBCDriver::open: Unknown option value '\" << val << '\\'';"
    },
    {
        "line": 89,
        "fullcodeline": "qWarning() << \"QODBCDriver::open: Unknown option value '\" << val << '\\'';"
    }
]