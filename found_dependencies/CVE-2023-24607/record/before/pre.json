[
    {
        "line": 10,
        "fullcodeline": "const_cast<QODBCDriverPrivate*>(d)->splitTableQualifier(tablename, catalog, schema, table);"
    },
    {
        "line": 27,
        "fullcodeline": "SQLRETURN r = SQLAllocHandle(SQL_HANDLE_STMT,"
    },
    {
        "line": 38,
        "fullcodeline": "r =  SQLColumns(hStmt,"
    },
    {
        "line": 70,
        "fullcodeline": "r = SQLFreeHandle(SQL_HANDLE_STMT, hStmt);"
    },
    {
        "line": 5,
        "fullcodeline": "if (!isOpen())"
    },
    {
        "line": 12,
        "fullcodeline": "if (isIdentifierEscaped(catalog, QSqlDriver::TableName))"
    },
    {
        "line": 17,
        "fullcodeline": "if (isIdentifierEscaped(schema, QSqlDriver::TableName))"
    },
    {
        "line": 22,
        "fullcodeline": "if (isIdentifierEscaped(table, QSqlDriver::TableName))"
    },
    {
        "line": 30,
        "fullcodeline": "if (r != SQL_SUCCESS) {"
    },
    {
        "line": 34,
        "fullcodeline": "r = SQLSetStmtAttr(hStmt,"
    },
    {
        "line": 47,
        "fullcodeline": "if (r != SQL_SUCCESS)"
    },
    {
        "line": 58,
        "fullcodeline": "while (r == SQL_SUCCESS) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (r!= SQL_SUCCESS)"
    },
    {
        "line": 13,
        "fullcodeline": "catalog = stripDelimiters(catalog, QSqlDriver::TableName);"
    },
    {
        "line": 18,
        "fullcodeline": "schema = stripDelimiters(schema, QSqlDriver::TableName);"
    },
    {
        "line": 23,
        "fullcodeline": "table = stripDelimiters(table, QSqlDriver::TableName);"
    },
    {
        "line": 36,
        "fullcodeline": "(SQLPOINTER)SQL_CURSOR_FORWARD_ONLY,"
    },
    {
        "line": 40,
        "fullcodeline": "catalog.length(),"
    },
    {
        "line": 42,
        "fullcodeline": "schema.length(),"
    },
    {
        "line": 43,
        "fullcodeline": "toSQLTCHAR(table).data(),"
    },
    {
        "line": 44,
        "fullcodeline": "table.length(),"
    },
    {
        "line": 48,
        "fullcodeline": "qSqlWarning(\"QODBCDriver::record: Unable to execute column list\"_L1, d);"
    },
    {
        "line": 51,
        "fullcodeline": "r = SQLFetchScroll(hStmt,"
    },
    {
        "line": 60,
        "fullcodeline": "fil.append(qMakeFieldInfo(hStmt, d));"
    },
    {
        "line": 15,
        "fullcodeline": "catalog = d->adjustCase(catalog);"
    },
    {
        "line": 20,
        "fullcodeline": "schema = d->adjustCase(schema);"
    },
    {
        "line": 25,
        "fullcodeline": "table = d->adjustCase(table);"
    },
    {
        "line": 39,
        "fullcodeline": "catalog.length() == 0 ? NULL : toSQLTCHAR(catalog).data(),"
    },
    {
        "line": 41,
        "fullcodeline": "schema.length() == 0 ? NULL : toSQLTCHAR(schema).data(),"
    },
    {
        "line": 55,
        "fullcodeline": "r = SQLFetch(hStmt);"
    },
    {
        "line": 63,
        "fullcodeline": "r = SQLFetchScroll(hStmt,"
    },
    {
        "line": 72,
        "fullcodeline": "qSqlWarning(\"QODBCDriver: Unable to free statement handle \"_L1 + QString::number(r), d);"
    },
    {
        "line": 67,
        "fullcodeline": "r = SQLFetch(hStmt);"
    }
]