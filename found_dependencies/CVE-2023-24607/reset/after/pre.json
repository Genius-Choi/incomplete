[
    {
        "line": 4,
        "fullcodeline": "setActive(false);"
    },
    {
        "line": 5,
        "fullcodeline": "setAt(QSql::BeforeFirstRow);"
    },
    {
        "line": 6,
        "fullcodeline": "d->rInf.clear();"
    },
    {
        "line": 7,
        "fullcodeline": "d->fieldCache.clear();"
    },
    {
        "line": 8,
        "fullcodeline": "d->fieldCacheIdx = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "r  = SQLAllocHandle(SQL_HANDLE_STMT,"
    },
    {
        "line": 28,
        "fullcodeline": "d->updateStmtHandleState();"
    },
    {
        "line": 60,
        "fullcodeline": "SQLULEN isScrollable = 0;"
    },
    {
        "line": 61,
        "fullcodeline": "r = SQLGetStmtAttr(d->hStmt, SQL_ATTR_CURSOR_SCROLLABLE, &isScrollable, SQL_IS_INTEGER, 0);"
    },
    {
        "line": 65,
        "fullcodeline": "SQLSMALLINT count = 0;"
    },
    {
        "line": 66,
        "fullcodeline": "SQLNumResultCols(d->hStmt, &count);"
    },
    {
        "line": 13,
        "fullcodeline": "if (d->hStmt && d->isStmtHandleValid()) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (r != SQL_SUCCESS) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO) {"
    },
    {
        "line": 49,
        "fullcodeline": "auto encoded = toSQLTCHAR(query);"
    },
    {
        "line": 50,
        "fullcodeline": "r = SQLExecDirect(d->hStmt,"
    },
    {
        "line": 14,
        "fullcodeline": "r = SQLFreeHandle(SQL_HANDLE_STMT, d->hStmt);"
    },
    {
        "line": 21,
        "fullcodeline": "d->dpDbc(),"
    },
    {
        "line": 31,
        "fullcodeline": "r = SQLSetStmtAttr(d->hStmt,"
    },
    {
        "line": 54,
        "fullcodeline": "if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO && r!= SQL_NO_DATA) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (r == SQL_SUCCESS || r == SQL_SUCCESS_WITH_INFO)"
    },
    {
        "line": 15,
        "fullcodeline": "if (r != SQL_SUCCESS) {"
    },
    {
        "line": 36,
        "fullcodeline": "r = SQLSetStmtAttr(d->hStmt,"
    },
    {
        "line": 42,
        "fullcodeline": "setLastError(qMakeError(QCoreApplication::translate(\"QODBCResult\","
    },
    {
        "line": 51,
        "fullcodeline": "encoded.data(),"
    },
    {
        "line": 52,
        "fullcodeline": "SQLINTEGER(encoded.size()));"
    },
    {
        "line": 55,
        "fullcodeline": "setLastError(qMakeError(QCoreApplication::translate(\"QODBCResult\","
    },
    {
        "line": 63,
        "fullcodeline": "setForwardOnly(isScrollable == SQL_NONSCROLLABLE);"
    },
    {
        "line": 69,
        "fullcodeline": "for (int i = 0; i < count; ++i) {"
    },
    {
        "line": 16,
        "fullcodeline": "qSqlWarning(\"QODBCResult::reset: Unable to free statement handle\"_L1, d);"
    },
    {
        "line": 33,
        "fullcodeline": "(SQLPOINTER)SQL_CURSOR_FORWARD_ONLY,"
    },
    {
        "line": 70,
        "fullcodeline": "d->rInf.append(qMakeFieldInfo(d, i));"
    },
    {
        "line": 38,
        "fullcodeline": "(SQLPOINTER)SQL_CURSOR_STATIC,"
    }
]