[
    {
        "line": 12,
        "fullcodeline": "r = SQLAllocHandle(SQL_HANDLE_ENV,"
    },
    {
        "line": 20,
        "fullcodeline": "r = SQLSetEnvAttr(d->hEnv,"
    },
    {
        "line": 24,
        "fullcodeline": "r = SQLAllocHandle(SQL_HANDLE_DBC,"
    },
    {
        "line": 56,
        "fullcodeline": "QVarLengthArray<SQLTCHAR> connOut(1024);"
    },
    {
        "line": 57,
        "fullcodeline": "memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));"
    },
    {
        "line": 84,
        "fullcodeline": "d->checkUnicode();"
    },
    {
        "line": 85,
        "fullcodeline": "d->checkSchemaUsage();"
    },
    {
        "line": 86,
        "fullcodeline": "d->checkDBMS();"
    },
    {
        "line": 87,
        "fullcodeline": "d->checkHasSQLFetchScroll();"
    },
    {
        "line": 88,
        "fullcodeline": "d->checkHasMultiResults();"
    },
    {
        "line": 89,
        "fullcodeline": "d->checkDateTimePrecision();"
    },
    {
        "line": 90,
        "fullcodeline": "setOpen(true);"
    },
    {
        "line": 91,
        "fullcodeline": "setOpenError(false);"
    },
    {
        "line": 9,
        "fullcodeline": "if (isOpen())"
    },
    {
        "line": 15,
        "fullcodeline": "if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (!d->setConnectionOptions(connOpts)) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (db.contains(\".dsn\"_L1, Qt::CaseInsensitive))"
    },
    {
        "line": 50,
        "fullcodeline": "if (!user.isEmpty())"
    },
    {
        "line": 52,
        "fullcodeline": "if (!password.isEmpty())"
    },
    {
        "line": 59,
        "fullcodeline": "auto encoded = toSQLTCHAR(connQStr);"
    },
    {
        "line": 60,
        "fullcodeline": "r = SQLDriverConnect(d->hDbc,"
    },
    {
        "line": 69,
        "fullcodeline": "if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (!d->checkDriver()) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (d->dbmsType == MSSqlServer) {"
    },
    {
        "line": 10,
        "fullcodeline": "close();"
    },
    {
        "line": 16,
        "fullcodeline": "qSqlWarning(\"QODBCDriver::open: Unable to allocate environment\"_L1, d);"
    },
    {
        "line": 17,
        "fullcodeline": "setOpenError(true);"
    },
    {
        "line": 22,
        "fullcodeline": "(SQLPOINTER)qGetODBCVersion(connOpts),"
    },
    {
        "line": 28,
        "fullcodeline": "qSqlWarning(\"QODBCDriver::open: Unable to allocate connection\"_L1, d);"
    },
    {
        "line": 29,
        "fullcodeline": "setOpenError(true);"
    },
    {
        "line": 30,
        "fullcodeline": "cleanup();"
    },
    {
        "line": 35,
        "fullcodeline": "cleanup();"
    },
    {
        "line": 43,
        "fullcodeline": "connQStr = \"FILEDSN=\"_L1 + db;"
    },
    {
        "line": 51,
        "fullcodeline": "connQStr += \";UID=\"_L1 + user;"
    },
    {
        "line": 53,
        "fullcodeline": "connQStr += \";PWD=\"_L1 + password;"
    },
    {
        "line": 70,
        "fullcodeline": "setLastError(qMakeError(tr(\"Unable to connect\"), QSqlError::ConnectionError, d));"
    },
    {
        "line": 71,
        "fullcodeline": "setOpenError(true);"
    },
    {
        "line": 72,
        "fullcodeline": "cleanup();"
    },
    {
        "line": 77,
        "fullcodeline": "setLastError(qMakeError(tr(\"Unable to connect - Driver doesn't support all \""
    },
    {
        "line": 79,
        "fullcodeline": "setOpenError(true);"
    },
    {
        "line": 80,
        "fullcodeline": "cleanup();"
    },
    {
        "line": 93,
        "fullcodeline": "QSqlQuery i(createResult());"
    },
    {
        "line": 94,
        "fullcodeline": "i.exec(\"SET QUOTED_IDENTIFIER ON\"_L1);"
    },
    {
        "line": 62,
        "fullcodeline": "encoded.data(), SQLSMALLINT(encoded.size()),"
    },
    {
        "line": 63,
        "fullcodeline": "connOut.data(),"
    },
    {
        "line": 44,
        "fullcodeline": "else if (db.contains(\"DRIVER=\"_L1, Qt::CaseInsensitive)"
    },
    {
        "line": 45,
        "fullcodeline": "|| db.contains(\"SERVER=\"_L1, Qt::CaseInsensitive))"
    },
    {
        "line": 46,
        "fullcodeline": "connQStr = db;"
    },
    {
        "line": 48,
        "fullcodeline": "connQStr = \"DSN=\"_L1 + db;"
    }
]