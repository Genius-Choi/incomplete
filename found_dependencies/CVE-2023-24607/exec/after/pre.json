[
    {
        "line": 4,
        "fullcodeline": "setActive(false);"
    },
    {
        "line": 5,
        "fullcodeline": "setAt(QSql::BeforeFirstRow);"
    },
    {
        "line": 6,
        "fullcodeline": "d->rInf.clear();"
    },
    {
        "line": 7,
        "fullcodeline": "d->fieldCache.clear();"
    },
    {
        "line": 8,
        "fullcodeline": "d->fieldCacheIdx = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "QVariantList &values = boundValues();"
    },
    {
        "line": 312,
        "fullcodeline": "r = SQLExecute(d->hStmt);"
    },
    {
        "line": 320,
        "fullcodeline": "SQLULEN isScrollable = 0;"
    },
    {
        "line": 321,
        "fullcodeline": "r = SQLGetStmtAttr(d->hStmt, SQL_ATTR_CURSOR_SCROLLABLE, &isScrollable, SQL_IS_INTEGER, 0);"
    },
    {
        "line": 325,
        "fullcodeline": "SQLSMALLINT count = 0;"
    },
    {
        "line": 326,
        "fullcodeline": "SQLNumResultCols(d->hStmt, &count);"
    },
    {
        "line": 10,
        "fullcodeline": "if (!d->hStmt) {"
    },
    {
        "line": 19,
        "fullcodeline": "QByteArrayList tmpStorage(values.count(), QByteArray()); // targets for SQLBindParameter()"
    },
    {
        "line": 20,
        "fullcodeline": "QVarLengthArray<SQLLEN, 32> indicators(values.count());"
    },
    {
        "line": 21,
        "fullcodeline": "memset(indicators.data(), 0, indicators.size() * sizeof(SQLLEN));"
    },
    {
        "line": 26,
        "fullcodeline": "for (i = 0; i < values.count(); ++i) {"
    },
    {
        "line": 343,
        "fullcodeline": "for (i = 0; i < values.count(); ++i) {"
    },
    {
        "line": 11,
        "fullcodeline": "qSqlWarning(\"QODBCResult::exec: No statement handle available\"_L1, d);"
    },
    {
        "line": 16,
        "fullcodeline": "SQLCloseCursor(d->hStmt);"
    },
    {
        "line": 29,
        "fullcodeline": "const QVariant &val = values.at(i);"
    },
    {
        "line": 30,
        "fullcodeline": "SQLLEN *ind = &indicators[i];"
    },
    {
        "line": 313,
        "fullcodeline": "if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO && r != SQL_NO_DATA) {"
    },
    {
        "line": 322,
        "fullcodeline": "if (r == SQL_SUCCESS || r == SQL_SUCCESS_WITH_INFO)"
    },
    {
        "line": 27,
        "fullcodeline": "if (bindValueType(i) & QSql::Out)"
    },
    {
        "line": 31,
        "fullcodeline": "if (QSqlResultPrivate::isVariantNull(val))"
    },
    {
        "line": 33,
        "fullcodeline": "switch (val.typeId()) {"
    },
    {
        "line": 305,
        "fullcodeline": "if (r != SQL_SUCCESS) {"
    },
    {
        "line": 314,
        "fullcodeline": "qWarning() << \"QODBCResult::exec: Unable to execute statement:\" << qODBCWarn(d);"
    },
    {
        "line": 315,
        "fullcodeline": "setLastError(qMakeError(QCoreApplication::translate(\"QODBCResult\","
    },
    {
        "line": 323,
        "fullcodeline": "setForwardOnly(isScrollable == SQL_NONSCROLLABLE);"
    },
    {
        "line": 329,
        "fullcodeline": "for (int i = 0; i < count; ++i) {"
    },
    {
        "line": 28,
        "fullcodeline": "values[i].detach();"
    },
    {
        "line": 32,
        "fullcodeline": "*ind = SQL_NULL_DATA;"
    },
    {
        "line": 109,
        "fullcodeline": "r = SQLBindParameter(d->hStmt,"
    },
    {
        "line": 121,
        "fullcodeline": "r = SQLBindParameter(d->hStmt,"
    },
    {
        "line": 133,
        "fullcodeline": "r = SQLBindParameter(d->hStmt,"
    },
    {
        "line": 145,
        "fullcodeline": "r = SQLBindParameter(d->hStmt,"
    },
    {
        "line": 157,
        "fullcodeline": "r = SQLBindParameter(d->hStmt,"
    },
    {
        "line": 169,
        "fullcodeline": "r = SQLBindParameter(d->hStmt,"
    },
    {
        "line": 181,
        "fullcodeline": "r = SQLBindParameter(d->hStmt,"
    },
    {
        "line": 193,
        "fullcodeline": "r = SQLBindParameter(d->hStmt,"
    },
    {
        "line": 208,
        "fullcodeline": "r = SQLBindParameter(d->hStmt,"
    },
    {
        "line": 220,
        "fullcodeline": "r = SQLBindParameter(d->hStmt,"
    },
    {
        "line": 330,
        "fullcodeline": "d->rInf.append(qMakeFieldInfo(d, i));"
    },
    {
        "line": 344,
        "fullcodeline": "switch (values.at(i).typeId()) {"
    },
    {
        "line": 389,
        "fullcodeline": "values[i] = QVariant(values[i].metaType());"
    },
    {
        "line": 35,
        "fullcodeline": "QByteArray &ba = tmpStorage[i];"
    },
    {
        "line": 36,
        "fullcodeline": "ba.resize(sizeof(DATE_STRUCT));"
    },
    {
        "line": 37,
        "fullcodeline": "DATE_STRUCT *dt = (DATE_STRUCT *)const_cast<char *>(ba.constData());"
    },
    {
        "line": 38,
        "fullcodeline": "QDate qdt = val.toDate();"
    },
    {
        "line": 39,
        "fullcodeline": "dt->year = qdt.year();"
    },
    {
        "line": 40,
        "fullcodeline": "dt->month = qdt.month();"
    },
    {
        "line": 41,
        "fullcodeline": "dt->day = qdt.day();"
    },
    {
        "line": 42,
        "fullcodeline": "r = SQLBindParameter(d->hStmt,"
    },
    {
        "line": 54,
        "fullcodeline": "QByteArray &ba = tmpStorage[i];"
    },
    {
        "line": 55,
        "fullcodeline": "ba.resize(sizeof(TIME_STRUCT));"
    },
    {
        "line": 56,
        "fullcodeline": "TIME_STRUCT *dt = (TIME_STRUCT *)const_cast<char *>(ba.constData());"
    },
    {
        "line": 57,
        "fullcodeline": "QTime qdt = val.toTime();"
    },
    {
        "line": 58,
        "fullcodeline": "dt->hour = qdt.hour();"
    },
    {
        "line": 59,
        "fullcodeline": "dt->minute = qdt.minute();"
    },
    {
        "line": 60,
        "fullcodeline": "dt->second = qdt.second();"
    },
    {
        "line": 61,
        "fullcodeline": "r = SQLBindParameter(d->hStmt,"
    },
    {
        "line": 73,
        "fullcodeline": "QByteArray &ba = tmpStorage[i];"
    },
    {
        "line": 74,
        "fullcodeline": "ba.resize(sizeof(TIMESTAMP_STRUCT));"
    },
    {
        "line": 75,
        "fullcodeline": "TIMESTAMP_STRUCT *dt = reinterpret_cast<TIMESTAMP_STRUCT *>(const_cast<char *>(ba.constData()));"
    },
    {
        "line": 76,
        "fullcodeline": "const QDateTime qdt = val.toDateTime();"
    },
    {
        "line": 77,
        "fullcodeline": "const QDate qdate = qdt.date();"
    },
    {
        "line": 78,
        "fullcodeline": "const QTime qtime = qdt.time();"
    },
    {
        "line": 79,
        "fullcodeline": "dt->year = qdate.year();"
    },
    {
        "line": 80,
        "fullcodeline": "dt->month = qdate.month();"
    },
    {
        "line": 81,
        "fullcodeline": "dt->day = qdate.day();"
    },
    {
        "line": 82,
        "fullcodeline": "dt->hour = qtime.hour();"
    },
    {
        "line": 83,
        "fullcodeline": "dt->minute = qtime.minute();"
    },
    {
        "line": 84,
        "fullcodeline": "dt->second = qtime.second();"
    },
    {
        "line": 86,
        "fullcodeline": "const int precision = d->drv_d_func()->datetimePrecision - 20;"
    },
    {
        "line": 97,
        "fullcodeline": "r = SQLBindParameter(d->hStmt,"
    },
    {
        "line": 205,
        "fullcodeline": "if (*ind != SQL_NULL_DATA) {"
    },
    {
        "line": 290,
        "fullcodeline": "QByteArray &ba = tmpStorage[i];"
    },
    {
        "line": 293,
        "fullcodeline": "r = SQLBindParameter(d->hStmt,"
    },
    {
        "line": 306,
        "fullcodeline": "qWarning() << \"QODBCResult::exec: unable to bind variable:\" << qODBCWarn(d);"
    },
    {
        "line": 307,
        "fullcodeline": "setLastError(qMakeError(QCoreApplication::translate(\"QODBCResult\","
    },
    {
        "line": 346,
        "fullcodeline": "DATE_STRUCT ds = *((DATE_STRUCT *)const_cast<char *>(tmpStorage.at(i).constData()));"
    },
    {
        "line": 347,
        "fullcodeline": "values[i] = QVariant(QDate(ds.year, ds.month, ds.day));"
    },
    {
        "line": 350,
        "fullcodeline": "TIME_STRUCT dt = *((TIME_STRUCT *)const_cast<char *>(tmpStorage.at(i).constData()));"
    },
    {
        "line": 351,
        "fullcodeline": "values[i] = QVariant(QTime(dt.hour, dt.minute, dt.second));"
    },
    {
        "line": 354,
        "fullcodeline": "TIMESTAMP_STRUCT dt = *((TIMESTAMP_STRUCT*)"
    },
    {
        "line": 356,
        "fullcodeline": "values[i] = QVariant(QDateTime(QDate(dt.year, dt.month, dt.day),"
    },
    {
        "line": 87,
        "fullcodeline": "if (precision <= 0) {"
    },
    {
        "line": 206,
        "fullcodeline": "*ind = val.toByteArray().size();"
    },
    {
        "line": 213,
        "fullcodeline": "val.toByteArray().size(),"
    },
    {
        "line": 216,
        "fullcodeline": "val.toByteArray().size(),"
    },
    {
        "line": 256,
        "fullcodeline": "r = SQLBindParameter(d->hStmt,"
    },
    {
        "line": 291,
        "fullcodeline": "if (*ind != SQL_NULL_DATA)"
    },
    {
        "line": 384,
        "fullcodeline": "if (bindValueType(i) & QSql::Out)"
    },
    {
        "line": 88,
        "fullcodeline": "dt->fraction = 0;"
    },
    {
        "line": 111,
        "fullcodeline": "qParamType[bindValueType(i) & QSql::InOut],"
    },
    {
        "line": 116,
        "fullcodeline": "const_cast<void *>(val.constData()),"
    },
    {
        "line": 118,
        "fullcodeline": "*ind == SQL_NULL_DATA ? ind : NULL);"
    },
    {
        "line": 123,
        "fullcodeline": "qParamType[bindValueType(i) & QSql::InOut],"
    },
    {
        "line": 128,
        "fullcodeline": "const_cast<void *>(val.constData()),"
    },
    {
        "line": 130,
        "fullcodeline": "*ind == SQL_NULL_DATA ? ind : NULL);"
    },
    {
        "line": 135,
        "fullcodeline": "qParamType[bindValueType(i) & QSql::InOut],"
    },
    {
        "line": 140,
        "fullcodeline": "const_cast<void *>(val.constData()),"
    },
    {
        "line": 142,
        "fullcodeline": "*ind == SQL_NULL_DATA ? ind : NULL);"
    },
    {
        "line": 147,
        "fullcodeline": "qParamType[bindValueType(i) & QSql::InOut],"
    },
    {
        "line": 152,
        "fullcodeline": "const_cast<void *>(val.constData()),"
    },
    {
        "line": 154,
        "fullcodeline": "*ind == SQL_NULL_DATA ? ind : NULL);"
    },
    {
        "line": 159,
        "fullcodeline": "qParamType[bindValueType(i) & QSql::InOut],"
    },
    {
        "line": 164,
        "fullcodeline": "const_cast<void *>(val.constData()),"
    },
    {
        "line": 166,
        "fullcodeline": "*ind == SQL_NULL_DATA ? ind : NULL);"
    },
    {
        "line": 171,
        "fullcodeline": "qParamType[bindValueType(i) & QSql::InOut],"
    },
    {
        "line": 176,
        "fullcodeline": "const_cast<void *>(val.constData()),"
    },
    {
        "line": 178,
        "fullcodeline": "*ind == SQL_NULL_DATA ? ind : NULL);"
    },
    {
        "line": 183,
        "fullcodeline": "qParamType[bindValueType(i) & QSql::InOut],"
    },
    {
        "line": 188,
        "fullcodeline": "const_cast<void *>(val.constData()),"
    },
    {
        "line": 190,
        "fullcodeline": "*ind == SQL_NULL_DATA ? ind : NULL);"
    },
    {
        "line": 195,
        "fullcodeline": "qParamType[bindValueType(i) & QSql::InOut],"
    },
    {
        "line": 200,
        "fullcodeline": "const_cast<void *>(val.constData()),"
    },
    {
        "line": 202,
        "fullcodeline": "*ind == SQL_NULL_DATA ? ind : NULL);"
    },
    {
        "line": 210,
        "fullcodeline": "qParamType[bindValueType(i) & QSql::InOut],"
    },
    {
        "line": 215,
        "fullcodeline": "const_cast<char *>(val.toByteArray().constData()),"
    },
    {
        "line": 222,
        "fullcodeline": "qParamType[bindValueType(i) & QSql::InOut],"
    },
    {
        "line": 227,
        "fullcodeline": "const_cast<void *>(val.constData()),"
    },
    {
        "line": 229,
        "fullcodeline": "*ind == SQL_NULL_DATA ? ind : NULL);"
    },
    {
        "line": 235,
        "fullcodeline": "const auto encoded = toSQLTCHAR(val.toString());"
    },
    {
        "line": 236,
        "fullcodeline": "ba = QByteArray(reinterpret_cast<const char *>(encoded.data()),"
    },
    {
        "line": 240,
        "fullcodeline": "if (*ind != SQL_NULL_DATA)"
    },
    {
        "line": 243,
        "fullcodeline": "if (bindValueType(i) & QSql::Out) {"
    },
    {
        "line": 271,
        "fullcodeline": "str = val.toString().toUtf8();"
    },
    {
        "line": 274,
        "fullcodeline": "int strSize = str.length();"
    },
    {
        "line": 276,
        "fullcodeline": "r = SQLBindParameter(d->hStmt,"
    },
    {
        "line": 292,
        "fullcodeline": "*ind = ba.size();"
    },
    {
        "line": 373,
        "fullcodeline": "if (bindValueType(i) & QSql::Out) {"
    },
    {
        "line": 385,
        "fullcodeline": "values[i] = tmpStorage.at(i);"
    },
    {
        "line": 44,
        "fullcodeline": "qParamType[bindValueType(i) & QSql::InOut],"
    },
    {
        "line": 51,
        "fullcodeline": "*ind == SQL_NULL_DATA ? ind : NULL);"
    },
    {
        "line": 63,
        "fullcodeline": "qParamType[bindValueType(i) & QSql::InOut],"
    },
    {
        "line": 70,
        "fullcodeline": "*ind == SQL_NULL_DATA ? ind : NULL);"
    },
    {
        "line": 90,
        "fullcodeline": "dt->fraction = qtime.msec() * 1000000;"
    },
    {
        "line": 93,
        "fullcodeline": "int keep = (int)qPow(10.0, 9 - qMin(9, precision));"
    },
    {
        "line": 94,
        "fullcodeline": "dt->fraction = (dt->fraction / keep) * keep;"
    },
    {
        "line": 99,
        "fullcodeline": "qParamType[bindValueType(i) & QSql::InOut],"
    },
    {
        "line": 102,
        "fullcodeline": "d->drv_d_func()->datetimePrecision,"
    },
    {
        "line": 106,
        "fullcodeline": "*ind == SQL_NULL_DATA ? ind : NULL);"
    },
    {
        "line": 241,
        "fullcodeline": "*ind = ba.size();"
    },
    {
        "line": 244,
        "fullcodeline": "r = SQLBindParameter(d->hStmt,"
    },
    {
        "line": 261,
        "fullcodeline": "ba.size(),"
    },
    {
        "line": 264,
        "fullcodeline": "ba.size(),"
    },
    {
        "line": 272,
        "fullcodeline": "if (*ind != SQL_NULL_DATA)"
    },
    {
        "line": 295,
        "fullcodeline": "qParamType[bindValueType(i) & QSql::InOut],"
    },
    {
        "line": 298,
        "fullcodeline": "ba.length() + 1,"
    },
    {
        "line": 300,
        "fullcodeline": "const_cast<char *>(ba.constData()),"
    },
    {
        "line": 301,
        "fullcodeline": "ba.length() + 1,"
    },
    {
        "line": 357,
        "fullcodeline": "QTime(dt.hour, dt.minute, dt.second, dt.fraction / 1000000)));"
    },
    {
        "line": 374,
        "fullcodeline": "const QByteArray &bytes = tmpStorage.at(i);"
    },
    {
        "line": 375,
        "fullcodeline": "const auto strSize = bytes.size() / sizeof(SQLTCHAR);"
    },
    {
        "line": 378,
        "fullcodeline": "values[i] = fromSQLTCHAR(string);"
    },
    {
        "line": 237,
        "fullcodeline": "encoded.size() * sizeof(SQLTCHAR));"
    },
    {
        "line": 258,
        "fullcodeline": "qParamType[bindValueType(i) & QSql::InOut],"
    },
    {
        "line": 263,
        "fullcodeline": "const_cast<char *>(ba.constData()), // don't detach"
    },
    {
        "line": 273,
        "fullcodeline": "*ind = str.length();"
    },
    {
        "line": 280,
        "fullcodeline": "strSize > 254 ? SQL_LONGVARCHAR : SQL_VARCHAR,"
    },
    {
        "line": 355,
        "fullcodeline": "const_cast<char *>(tmpStorage.at(i).constData()));"
    },
    {
        "line": 376,
        "fullcodeline": "QVarLengthArray<SQLTCHAR> string(strSize);"
    },
    {
        "line": 377,
        "fullcodeline": "memcpy(string.data(), bytes.data(), strSize * sizeof(SQLTCHAR));"
    },
    {
        "line": 252,
        "fullcodeline": "ba.size(),"
    },
    {
        "line": 260,
        "fullcodeline": "ba.size() > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,"
    },
    {
        "line": 278,
        "fullcodeline": "qParamType[bindValueType(i) & QSql::InOut],"
    },
    {
        "line": 283,
        "fullcodeline": "const_cast<char *>(str.constData()),"
    },
    {
        "line": 246,
        "fullcodeline": "qParamType[bindValueType(i) & QSql::InOut],"
    },
    {
        "line": 251,
        "fullcodeline": "const_cast<char *>(ba.constData()), // don't detach"
    },
    {
        "line": 248,
        "fullcodeline": "ba.size() > 254 ? SQL_WLONGVARCHAR : SQL_WVARCHAR,"
    }
]