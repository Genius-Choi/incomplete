[
    {
        "line": 4,
        "fullcodeline": "QSqlIndex index(tablename);"
    },
    {
        "line": 7,
        "fullcodeline": "bool usingSpecialColumns = false;"
    },
    {
        "line": 8,
        "fullcodeline": "QSqlRecord rec = record(tablename);"
    },
    {
        "line": 11,
        "fullcodeline": "SQLRETURN r = SQLAllocHandle(SQL_HANDLE_STMT,"
    },
    {
        "line": 19,
        "fullcodeline": "const_cast<QODBCDriverPrivate*>(d)->splitTableQualifier(tablename, catalog, schema, table);"
    },
    {
        "line": 36,
        "fullcodeline": "r = SQLSetStmtAttr(hStmt,"
    },
    {
        "line": 79,
        "fullcodeline": "int fakeId = 0;"
    },
    {
        "line": 101,
        "fullcodeline": "r = SQLFreeHandle(SQL_HANDLE_STMT, hStmt);"
    },
    {
        "line": 5,
        "fullcodeline": "if (!isOpen())"
    },
    {
        "line": 14,
        "fullcodeline": "if (r != SQL_SUCCESS) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (isIdentifierEscaped(catalog, QSqlDriver::TableName))"
    },
    {
        "line": 26,
        "fullcodeline": "if (isIdentifierEscaped(schema, QSqlDriver::TableName))"
    },
    {
        "line": 31,
        "fullcodeline": "if (isIdentifierEscaped(table, QSqlDriver::TableName))"
    },
    {
        "line": 41,
        "fullcodeline": "auto c = toSQLTCHAR(catalog);"
    },
    {
        "line": 42,
        "fullcodeline": "auto s = toSQLTCHAR(schema);"
    },
    {
        "line": 43,
        "fullcodeline": "auto t = toSQLTCHAR(table);"
    },
    {
        "line": 44,
        "fullcodeline": "r = SQLPrimaryKeys(hStmt,"
    },
    {
        "line": 53,
        "fullcodeline": "if (r != SQL_SUCCESS) {"
    },
    {
        "line": 82,
        "fullcodeline": "while (r == SQL_SUCCESS) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (r!= SQL_SUCCESS)"
    },
    {
        "line": 15,
        "fullcodeline": "qSqlWarning(\"QODBCDriver::primaryIndex: Unable to list primary key\"_L1, d);"
    },
    {
        "line": 22,
        "fullcodeline": "catalog = stripDelimiters(catalog, QSqlDriver::TableName);"
    },
    {
        "line": 27,
        "fullcodeline": "schema = stripDelimiters(schema, QSqlDriver::TableName);"
    },
    {
        "line": 32,
        "fullcodeline": "table = stripDelimiters(table, QSqlDriver::TableName);"
    },
    {
        "line": 38,
        "fullcodeline": "(SQLPOINTER)SQL_CURSOR_FORWARD_ONLY,"
    },
    {
        "line": 54,
        "fullcodeline": "auto c = toSQLTCHAR(catalog);"
    },
    {
        "line": 55,
        "fullcodeline": "auto s = toSQLTCHAR(schema);"
    },
    {
        "line": 56,
        "fullcodeline": "auto t = toSQLTCHAR(table);"
    },
    {
        "line": 57,
        "fullcodeline": "r = SQLSpecialColumns(hStmt,"
    },
    {
        "line": 73,
        "fullcodeline": "r = SQLFetchScroll(hStmt,"
    },
    {
        "line": 90,
        "fullcodeline": "index.append(rec.field(cName));"
    },
    {
        "line": 91,
        "fullcodeline": "index.setName(idxName);"
    },
    {
        "line": 103,
        "fullcodeline": "qSqlWarning(\"QODBCDriver: Unable to free statement handle\"_L1 + QString::number(r), d);"
    },
    {
        "line": 24,
        "fullcodeline": "catalog = d->adjustCase(catalog);"
    },
    {
        "line": 29,
        "fullcodeline": "schema = d->adjustCase(schema);"
    },
    {
        "line": 34,
        "fullcodeline": "table = d->adjustCase(table);"
    },
    {
        "line": 45,
        "fullcodeline": "catalog.isEmpty() ? nullptr : c.data(), c.size(),"
    },
    {
        "line": 46,
        "fullcodeline": "schema.isEmpty()  ? nullptr : s.data(), s.size(),"
    },
    {
        "line": 47,
        "fullcodeline": "t.data(), t.size());"
    },
    {
        "line": 65,
        "fullcodeline": "if (r != SQL_SUCCESS) {"
    },
    {
        "line": 77,
        "fullcodeline": "r = SQLFetch(hStmt);"
    },
    {
        "line": 59,
        "fullcodeline": "catalog.isEmpty() ? nullptr : c.data(), c.size(),"
    },
    {
        "line": 60,
        "fullcodeline": "schema.isEmpty()  ? nullptr : s.data(), s.size(),"
    },
    {
        "line": 61,
        "fullcodeline": "t.data(), t.size(),"
    },
    {
        "line": 66,
        "fullcodeline": "qSqlWarning(\"QODBCDriver::primaryIndex: Unable to execute primary key list\"_L1, d);"
    },
    {
        "line": 84,
        "fullcodeline": "cName = qGetStringData(hStmt, 1, -1, d->unicode).toString(); // column name"
    },
    {
        "line": 85,
        "fullcodeline": "idxName = QString::number(fakeId++); // invent a fake index name"
    },
    {
        "line": 94,
        "fullcodeline": "r = SQLFetchScroll(hStmt,"
    },
    {
        "line": 68,
        "fullcodeline": "usingSpecialColumns = true;"
    },
    {
        "line": 87,
        "fullcodeline": "cName = qGetStringData(hStmt, 3, -1, d->unicode).toString(); // column name"
    },
    {
        "line": 88,
        "fullcodeline": "idxName = qGetStringData(hStmt, 5, -1, d->unicode).toString(); // pk index name"
    },
    {
        "line": 98,
        "fullcodeline": "r = SQLFetch(hStmt);"
    }
]