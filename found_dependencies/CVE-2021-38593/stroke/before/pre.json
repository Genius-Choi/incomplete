[
    {
        "line": 20,
        "fullcodeline": "QPen pen = inPen;"
    },
    {
        "line": 84,
        "fullcodeline": "const QPainterPath::ElementType *types = path.elements();"
    },
    {
        "line": 85,
        "fullcodeline": "const qreal *points = path.points();"
    },
    {
        "line": 86,
        "fullcodeline": "int pointCount = path.elementCount();"
    },
    {
        "line": 88,
        "fullcodeline": "const qreal *lastPoint = points + (pointCount<<1);"
    },
    {
        "line": 90,
        "fullcodeline": "d->strokeHandler->types.reset();"
    },
    {
        "line": 91,
        "fullcodeline": "d->strokeHandler->pts.reset();"
    },
    {
        "line": 94,
        "fullcodeline": "uint flags = QVectorPath::WindingFill;"
    },
    {
        "line": 9,
        "fullcodeline": "if (path.isEmpty())"
    },
    {
        "line": 12,
        "fullcodeline": "if (!d->strokeHandler) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (pen.style() > Qt::SolidLine) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (!d->activeStroker) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (d->activeStroker == &d->stroker)"
    },
    {
        "line": 13,
        "fullcodeline": "d->strokeHandler = new StrokeHandler(path.elementCount()+4);"
    },
    {
        "line": 14,
        "fullcodeline": "d->stroker.setMoveToHook(qpaintengineex_moveTo);"
    },
    {
        "line": 15,
        "fullcodeline": "d->stroker.setLineToHook(qpaintengineex_lineTo);"
    },
    {
        "line": 16,
        "fullcodeline": "d->stroker.setCubicToHook(qpaintengineex_cubicTo);"
    },
    {
        "line": 22,
        "fullcodeline": "QRectF cpRect = path.controlPointRect();"
    },
    {
        "line": 23,
        "fullcodeline": "const QTransform &xf = state()->matrix;"
    },
    {
        "line": 31,
        "fullcodeline": "QRectF extentRect = cpRect & clipRect;"
    },
    {
        "line": 32,
        "fullcodeline": "qreal extent = qMax(extentRect.width(), extentRect.height());"
    },
    {
        "line": 33,
        "fullcodeline": "qreal patternLength = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "const QList<qreal> pattern = pen.dashPattern();"
    },
    {
        "line": 35,
        "fullcodeline": "const int patternSize = qMin(pattern.size(), 32);"
    },
    {
        "line": 51,
        "fullcodeline": "if (!qpen_fast_equals(pen, d->strokerPen)) {"
    },
    {
        "line": 53,
        "fullcodeline": "d->stroker.setJoinStyle(pen.joinStyle());"
    },
    {
        "line": 54,
        "fullcodeline": "d->stroker.setCapStyle(pen.capStyle());"
    },
    {
        "line": 55,
        "fullcodeline": "d->stroker.setMiterLimit(pen.miterLimit());"
    },
    {
        "line": 56,
        "fullcodeline": "qreal penWidth = pen.widthF();"
    },
    {
        "line": 62,
        "fullcodeline": "Qt::PenStyle style = pen.style();"
    },
    {
        "line": 78,
        "fullcodeline": "if (!clipRect.isNull())"
    },
    {
        "line": 79,
        "fullcodeline": "d->activeStroker->setClipRect(clipRect);"
    },
    {
        "line": 82,
        "fullcodeline": "d->stroker.setForceOpen(path.hasExplicitOpen());"
    },
    {
        "line": 96,
        "fullcodeline": "if (path.elementCount() > 2)"
    },
    {
        "line": 97,
        "fullcodeline": "flags |= QVectorPath::NonConvexShapeMask;"
    },
    {
        "line": 99,
        "fullcodeline": "if (d->stroker.capStyle() == Qt::RoundCap || d->stroker.joinStyle() == Qt::RoundJoin)"
    },
    {
        "line": 100,
        "fullcodeline": "flags |= QVectorPath::CurvedShapeMask;"
    },
    {
        "line": 103,
        "fullcodeline": "if (!pen.isCosmetic()) {"
    },
    {
        "line": 108,
        "fullcodeline": "d->activeStroker->setCurveThresholdFromTransform(state()->matrix);"
    },
    {
        "line": 109,
        "fullcodeline": "d->activeStroker->begin(d->strokeHandler);"
    },
    {
        "line": 24,
        "fullcodeline": "if (pen.isCosmetic()) {"
    },
    {
        "line": 36,
        "fullcodeline": "for (int i = 0; i < patternSize; i++)"
    },
    {
        "line": 37,
        "fullcodeline": "patternLength += qMax(pattern.at(i), qreal(0));"
    },
    {
        "line": 38,
        "fullcodeline": "if (pen.widthF())"
    },
    {
        "line": 40,
        "fullcodeline": "if (qFuzzyIsNull(patternLength)) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (penWidth == 0)"
    },
    {
        "line": 63,
        "fullcodeline": "if (style == Qt::SolidLine) {"
    },
    {
        "line": 153,
        "fullcodeline": "QVectorPath strokePath(d->strokeHandler->pts.data(),"
    },
    {
        "line": 154,
        "fullcodeline": "d->strokeHandler->types.size(),"
    },
    {
        "line": 155,
        "fullcodeline": "d->strokeHandler->types.data(),"
    },
    {
        "line": 157,
        "fullcodeline": "fill(strokePath, pen.brush());"
    },
    {
        "line": 222,
        "fullcodeline": "QTransform xform = state()->matrix;"
    },
    {
        "line": 226,
        "fullcodeline": "QBrush brush = pen.brush();"
    },
    {
        "line": 25,
        "fullcodeline": "clipRect = d->exDeviceRect;"
    },
    {
        "line": 26,
        "fullcodeline": "cpRect.translate(xf.dx(), xf.dy());"
    },
    {
        "line": 39,
        "fullcodeline": "patternLength *= pen.widthF();"
    },
    {
        "line": 41,
        "fullcodeline": "pen.setStyle(Qt::NoPen);"
    },
    {
        "line": 58,
        "fullcodeline": "d->stroker.setStrokeWidth(1);"
    },
    {
        "line": 64,
        "fullcodeline": "d->activeStroker = &d->stroker;"
    },
    {
        "line": 150,
        "fullcodeline": "if (!d->strokeHandler->types.size()) // an empty path..."
    },
    {
        "line": 217,
        "fullcodeline": "QVectorPath strokePath(d->strokeHandler->pts.data(),"
    },
    {
        "line": 218,
        "fullcodeline": "d->strokeHandler->types.size(),"
    },
    {
        "line": 219,
        "fullcodeline": "d->strokeHandler->types.data(),"
    },
    {
        "line": 28,
        "fullcodeline": "clipRect = xf.inverted().mapRect(QRectF(d->exDeviceRect));"
    },
    {
        "line": 60,
        "fullcodeline": "d->stroker.setStrokeWidth(penWidth);"
    },
    {
        "line": 111,
        "fullcodeline": "while (points < lastPoint) {"
    },
    {
        "line": 135,
        "fullcodeline": "if (path.hasImplicitClose())"
    },
    {
        "line": 139,
        "fullcodeline": "d->activeStroker->moveTo(points[0], points[1]);"
    },
    {
        "line": 140,
        "fullcodeline": "points += 2;"
    },
    {
        "line": 160,
        "fullcodeline": "if (state()->matrix.type() >= QTransform::TxProject) {"
    },
    {
        "line": 161,
        "fullcodeline": "QPainterPath painterPath = state()->matrix.map(path.convertToPainterPath());"
    },
    {
        "line": 227,
        "fullcodeline": "if (qbrush_style(brush) != Qt::SolidPattern)"
    },
    {
        "line": 228,
        "fullcodeline": "brush.setTransform(brush.transform() * xform);"
    },
    {
        "line": 136,
        "fullcodeline": "d->activeStroker->lineTo(path.points()[0], path.points()[1]);"
    },
    {
        "line": 141,
        "fullcodeline": "while (points < lastPoint) {"
    },
    {
        "line": 145,
        "fullcodeline": "if (path.hasImplicitClose())"
    },
    {
        "line": 164,
        "fullcodeline": "d->activeStroker->setCurveThresholdFromTransform(QTransform());"
    },
    {
        "line": 165,
        "fullcodeline": "d->activeStroker->begin(d->strokeHandler);"
    },
    {
        "line": 42,
        "fullcodeline": "} else if (extent / patternLength > 10000) {"
    },
    {
        "line": 44,
        "fullcodeline": "pen.setStyle(Qt::SolidLine);"
    },
    {
        "line": 46,
        "fullcodeline": "color.setAlpha(color.alpha() / 2);"
    },
    {
        "line": 47,
        "fullcodeline": "pen.setColor(color);"
    },
    {
        "line": 66,
        "fullcodeline": "d->activeStroker = nullptr;"
    },
    {
        "line": 142,
        "fullcodeline": "d->activeStroker->lineTo(points[0], points[1]);"
    },
    {
        "line": 143,
        "fullcodeline": "points += 2;"
    },
    {
        "line": 146,
        "fullcodeline": "d->activeStroker->lineTo(path.points()[0], path.points()[1]);"
    },
    {
        "line": 45,
        "fullcodeline": "QColor color(pen.color());"
    },
    {
        "line": 68,
        "fullcodeline": "d->dasher.setDashPattern(pen.dashPattern());"
    },
    {
        "line": 69,
        "fullcodeline": "d->dasher.setDashOffset(pen.dashOffset());"
    },
    {
        "line": 70,
        "fullcodeline": "d->activeStroker = &d->dasher;"
    },
    {
        "line": 114,
        "fullcodeline": "d->activeStroker->moveTo(points[0], points[1]);"
    },
    {
        "line": 115,
        "fullcodeline": "points += 2;"
    },
    {
        "line": 116,
        "fullcodeline": "++types;"
    },
    {
        "line": 119,
        "fullcodeline": "d->activeStroker->lineTo(points[0], points[1]);"
    },
    {
        "line": 120,
        "fullcodeline": "points += 2;"
    },
    {
        "line": 121,
        "fullcodeline": "++types;"
    },
    {
        "line": 124,
        "fullcodeline": "d->activeStroker->cubicTo(points[0], points[1],"
    },
    {
        "line": 127,
        "fullcodeline": "points += 6;"
    },
    {
        "line": 128,
        "fullcodeline": "types += 3;"
    },
    {
        "line": 129,
        "fullcodeline": "flags |= QVectorPath::CurvedShapeMask;"
    },
    {
        "line": 167,
        "fullcodeline": "while (points < lastPoint) {"
    },
    {
        "line": 197,
        "fullcodeline": "if (path.hasImplicitClose()) {"
    },
    {
        "line": 203,
        "fullcodeline": "QPointF p = ((const QPointF *)points)[0] * state()->matrix;"
    },
    {
        "line": 204,
        "fullcodeline": "d->activeStroker->moveTo(p.x(), p.y());"
    },
    {
        "line": 205,
        "fullcodeline": "points += 2;"
    },
    {
        "line": 198,
        "fullcodeline": "QPointF pt = * ((const QPointF *) path.points()) * state()->matrix;"
    },
    {
        "line": 199,
        "fullcodeline": "d->activeStroker->lineTo(pt.x(), pt.y());"
    },
    {
        "line": 206,
        "fullcodeline": "while (points < lastPoint) {"
    },
    {
        "line": 207,
        "fullcodeline": "QPointF p = ((const QPointF *)points)[0] * state()->matrix;"
    },
    {
        "line": 208,
        "fullcodeline": "d->activeStroker->lineTo(p.x(), p.y());"
    },
    {
        "line": 209,
        "fullcodeline": "points += 2;"
    },
    {
        "line": 212,
        "fullcodeline": "d->activeStroker->lineTo(p.x(), p.y());"
    },
    {
        "line": 170,
        "fullcodeline": "QPointF pt = (*(const QPointF *) points) * state()->matrix;"
    },
    {
        "line": 171,
        "fullcodeline": "d->activeStroker->moveTo(pt.x(), pt.y());"
    },
    {
        "line": 172,
        "fullcodeline": "points += 2;"
    },
    {
        "line": 173,
        "fullcodeline": "++types;"
    },
    {
        "line": 177,
        "fullcodeline": "QPointF pt = (*(const QPointF *) points) * state()->matrix;"
    },
    {
        "line": 178,
        "fullcodeline": "d->activeStroker->lineTo(pt.x(), pt.y());"
    },
    {
        "line": 179,
        "fullcodeline": "points += 2;"
    },
    {
        "line": 180,
        "fullcodeline": "++types;"
    },
    {
        "line": 184,
        "fullcodeline": "QPointF c1 = ((const QPointF *) points)[0] * state()->matrix;"
    },
    {
        "line": 185,
        "fullcodeline": "QPointF c2 = ((const QPointF *) points)[1] * state()->matrix;"
    },
    {
        "line": 186,
        "fullcodeline": "QPointF e =  ((const QPointF *) points)[2] * state()->matrix;"
    },
    {
        "line": 187,
        "fullcodeline": "d->activeStroker->cubicTo(c1.x(), c1.y(), c2.x(), c2.y(), e.x(), e.y());"
    },
    {
        "line": 188,
        "fullcodeline": "points += 6;"
    },
    {
        "line": 189,
        "fullcodeline": "types += 3;"
    },
    {
        "line": 190,
        "fullcodeline": "flags |= QVectorPath::CurvedShapeMask;"
    }
]