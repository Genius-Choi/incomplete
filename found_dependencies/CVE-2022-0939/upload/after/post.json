[
    {
        "line": 4,
        "fullcodeline": "if request.method == 'POST' and 'btn-upload' in request.files:"
    },
    {
        "line": 3,
        "fullcodeline": "abort(404)"
    },
    {
        "line": 5,
        "fullcodeline": "for requested_file in request.files.getlist(\"btn-upload\"):"
    },
    {
        "line": 63,
        "fullcodeline": "return Response(json.dumps({\"location\": url_for(\"web.index\")}), mimetype='application/json')"
    },
    {
        "line": 7,
        "fullcodeline": "modify_date = False"
    },
    {
        "line": 9,
        "fullcodeline": "calibre_db.update_title_sort(config)"
    },
    {
        "line": 19,
        "fullcodeline": "modify_date |= edit_book_comments(Markup(meta.description).unescape(), db_book)"
    },
    {
        "line": 21,
        "fullcodeline": "book_id = db_book.id"
    },
    {
        "line": 22,
        "fullcodeline": "title = db_book.title"
    },
    {
        "line": 39,
        "fullcodeline": "move_coverfile(meta, db_book)"
    },
    {
        "line": 48,
        "fullcodeline": "link = '<a href=\"{}\">{}</a>'.format(url_for('web.show_book', book_id=book_id), escape(title))"
    },
    {
        "line": 49,
        "fullcodeline": "upload_text = _(u\"File %(file)s uploaded\", file=link)"
    },
    {
        "line": 50,
        "fullcodeline": "WorkerThread.add(current_user.name, TaskUpload(upload_text, escape(title)))"
    },
    {
        "line": 10,
        "fullcodeline": "calibre_db.session.connection().connection.connection.create_function('uuid4', 0, lambda: str(uuid4()))"
    },
    {
        "line": 12,
        "fullcodeline": "meta, error = file_handling_on_upload(requested_file)"
    },
    {
        "line": 16,
        "fullcodeline": "db_book, input_authors, title_dir, renamed_authors = create_book_on_upload(modify_date, meta)"
    },
    {
        "line": 42,
        "fullcodeline": "calibre_db.session.commit()"
    },
    {
        "line": 52,
        "fullcodeline": "if len(request.files.getlist(\"btn-upload\")) < 2:"
    },
    {
        "line": 24,
        "fullcodeline": "helper.upload_new_file_gdrive(book_id,"
    },
    {
        "line": 32,
        "fullcodeline": "error = helper.update_dir_structure(book_id,"
    },
    {
        "line": 45,
        "fullcodeline": "gdriveutils.updateGdriveCalibreFromLocal()"
    },
    {
        "line": 47,
        "fullcodeline": "flash(error, category=\"error\")"
    },
    {
        "line": 61,
        "fullcodeline": "log.error_or_exception(\"Database error: {}\".format(e))"
    },
    {
        "line": 62,
        "fullcodeline": "flash(_(u\"Database error: %(error)s.\", error=e.orig), category=\"error\")"
    },
    {
        "line": 53,
        "fullcodeline": "if current_user.role_edit() or current_user.role_admin():"
    },
    {
        "line": 60,
        "fullcodeline": "calibre_db.session.rollback()"
    },
    {
        "line": 30,
        "fullcodeline": "meta.extension.lower())"
    },
    {
        "line": 36,
        "fullcodeline": "title_dir + meta.extension.lower(),"
    },
    {
        "line": 54,
        "fullcodeline": "resp = {\"location\": url_for('edit-book.edit_book', book_id=book_id)}"
    },
    {
        "line": 57,
        "fullcodeline": "resp = {\"location\": url_for('web.show_book', book_id=book_id)}"
    },
    {
        "line": 55,
        "fullcodeline": "return Response(json.dumps(resp), mimetype='application/json')"
    },
    {
        "line": 58,
        "fullcodeline": "return Response(json.dumps(resp), mimetype='application/json')"
    }
]