[
    {
        "line": 2,
        "fullcodeline": "vals = request.form.to_dict()"
    },
    {
        "line": 3,
        "fullcodeline": "book = calibre_db.get_book(vals['pk'])"
    },
    {
        "line": 6,
        "fullcodeline": "if param == 'series_index':"
    },
    {
        "line": 81,
        "fullcodeline": "book.last_modified = datetime.utcnow()"
    },
    {
        "line": 83,
        "fullcodeline": "calibre_db.session.commit()"
    },
    {
        "line": 7,
        "fullcodeline": "edit_book_series_index(vals['value'], book)"
    },
    {
        "line": 8,
        "fullcodeline": "ret = Response(json.dumps({'success': True, 'newValue': book.series_index}), mimetype='application/json')"
    },
    {
        "line": 85,
        "fullcodeline": "if param == 'title' and vals.get('checkT') == \"false\":"
    },
    {
        "line": 91,
        "fullcodeline": "ret = Response(json.dumps({'success': False,"
    },
    {
        "line": 9,
        "fullcodeline": "elif param == 'tags':"
    },
    {
        "line": 87,
        "fullcodeline": "calibre_db.session.commit()"
    },
    {
        "line": 89,
        "fullcodeline": "calibre_db.session.rollback()"
    },
    {
        "line": 10,
        "fullcodeline": "edit_book_tags(vals['value'], book)"
    },
    {
        "line": 11,
        "fullcodeline": "ret = Response(json.dumps({'success': True, 'newValue': ', '.join([tag.name for tag in book.tags])}),"
    },
    {
        "line": 90,
        "fullcodeline": "log.error_or_exception(\"Database error: {}\".format(e))"
    },
    {
        "line": 13,
        "fullcodeline": "elif param == 'series':"
    },
    {
        "line": 14,
        "fullcodeline": "edit_book_series(vals['value'], book)"
    },
    {
        "line": 15,
        "fullcodeline": "ret = Response(json.dumps({'success': True, 'newValue':  ', '.join([serie.name for serie in book.series])}),"
    },
    {
        "line": 17,
        "fullcodeline": "elif param == 'publishers':"
    },
    {
        "line": 18,
        "fullcodeline": "edit_book_publisher(vals['value'], book)"
    },
    {
        "line": 19,
        "fullcodeline": "ret = Response(json.dumps({'success': True,"
    },
    {
        "line": 92,
        "fullcodeline": "'msg': 'Database error: {}'.format(e.orig)}),"
    },
    {
        "line": 22,
        "fullcodeline": "elif param == 'languages':"
    },
    {
        "line": 23,
        "fullcodeline": "invalid = list()"
    },
    {
        "line": 24,
        "fullcodeline": "edit_book_languages(vals['value'], book, invalid=invalid)"
    },
    {
        "line": 35,
        "fullcodeline": "elif param == 'author_sort':"
    },
    {
        "line": 26,
        "fullcodeline": "ret = Response(json.dumps({'success': False,"
    },
    {
        "line": 30,
        "fullcodeline": "lang_names = list()"
    },
    {
        "line": 33,
        "fullcodeline": "ret = Response(json.dumps({'success': True, 'newValue':  ', '.join(lang_names)}),"
    },
    {
        "line": 36,
        "fullcodeline": "book.author_sort = vals['value']"
    },
    {
        "line": 37,
        "fullcodeline": "ret = Response(json.dumps({'success': True, 'newValue':  book.author_sort}),"
    },
    {
        "line": 31,
        "fullcodeline": "for lang in book.languages:"
    },
    {
        "line": 39,
        "fullcodeline": "elif param == 'title':"
    },
    {
        "line": 20,
        "fullcodeline": "'newValue': ', '.join([publisher.name for publisher in book.publishers])}),"
    },
    {
        "line": 40,
        "fullcodeline": "sort = book.sort"
    },
    {
        "line": 41,
        "fullcodeline": "handle_title_on_edit(book, vals.get('value', \"\"))"
    },
    {
        "line": 43,
        "fullcodeline": "ret = Response(json.dumps({'success': True, 'newValue':  book.title}),"
    },
    {
        "line": 32,
        "fullcodeline": "lang_names.append(isoLanguages.get_language_name(get_locale(), lang.lang_code))"
    },
    {
        "line": 45,
        "fullcodeline": "elif param == 'sort':"
    },
    {
        "line": 46,
        "fullcodeline": "book.sort = vals['value']"
    },
    {
        "line": 47,
        "fullcodeline": "ret = Response(json.dumps({'success': True, 'newValue':  book.sort}),"
    },
    {
        "line": 49,
        "fullcodeline": "elif param == 'comments':"
    },
    {
        "line": 27,
        "fullcodeline": "'msg': 'Invalid languages in request: {}'.format(','.join(invalid))}),"
    },
    {
        "line": 50,
        "fullcodeline": "edit_book_comments(vals['value'], book)"
    },
    {
        "line": 51,
        "fullcodeline": "ret = Response(json.dumps({'success': True, 'newValue':  book.comments[0].text}),"
    },
    {
        "line": 53,
        "fullcodeline": "elif param == 'authors':"
    },
    {
        "line": 55,
        "fullcodeline": "helper.update_dir_structure(book.id, config.config_calibre_dir, input_authors[0], renamed_author=renamed)"
    },
    {
        "line": 56,
        "fullcodeline": "ret = Response(json.dumps({'success': True,"
    },
    {
        "line": 54,
        "fullcodeline": "input_authors, __, renamed = handle_author_on_edit(book, vals['value'], vals.get('checkA', None) == \"true\")"
    },
    {
        "line": 59,
        "fullcodeline": "elif param == 'is_archived':"
    },
    {
        "line": 60,
        "fullcodeline": "is_archived = change_archived_books(book.id, vals['value'] == \"True\","
    },
    {
        "line": 65,
        "fullcodeline": "elif param == 'read_status':"
    },
    {
        "line": 63,
        "fullcodeline": "kobo_sync_status.remove_synced_book(book.id)"
    },
    {
        "line": 66,
        "fullcodeline": "ret = helper.edit_book_read_status(book.id, vals['value'] == \"True\")"
    },
    {
        "line": 61,
        "fullcodeline": "message=\"Book {} archivebit set to: {}\".format(book.id, vals['value']))"
    },
    {
        "line": 69,
        "fullcodeline": "elif param.startswith(\"custom_column_\"):"
    },
    {
        "line": 57,
        "fullcodeline": "'newValue':  ' & '.join([author.replace('|',',') for author in input_authors])}),"
    },
    {
        "line": 70,
        "fullcodeline": "new_val = dict()"
    },
    {
        "line": 71,
        "fullcodeline": "new_val[param] = vals['value']"
    },
    {
        "line": 68,
        "fullcodeline": "return ret, 400"
    },
    {
        "line": 72,
        "fullcodeline": "edit_single_cc_data(book.id, book, param[14:], new_val)"
    },
    {
        "line": 74,
        "fullcodeline": "if vals['value'] in [\"True\", \"False\"]:"
    },
    {
        "line": 80,
        "fullcodeline": "return _(\"Parameter not found\"), 400"
    },
    {
        "line": 75,
        "fullcodeline": "ret = \"\""
    },
    {
        "line": 77,
        "fullcodeline": "ret = Response(json.dumps({'success': True, 'newValue': vals['value']}),"
    }
]