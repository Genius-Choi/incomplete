[
    {
        "line": 2,
        "fullcodeline": "if not config.config_read_column:"
    },
    {
        "line": 3,
        "fullcodeline": "book = ub.session.query(ub.ReadBook).filter(and_(ub.ReadBook.user_id == int(current_user.id),"
    },
    {
        "line": 17,
        "fullcodeline": "if not book.kobo_reading_state:"
    },
    {
        "line": 22,
        "fullcodeline": "ub.session.merge(book)"
    },
    {
        "line": 14,
        "fullcodeline": "read_book = ub.ReadBook(user_id=current_user.id, book_id=book_id)"
    },
    {
        "line": 15,
        "fullcodeline": "read_book.read_status = ub.ReadBook.STATUS_FINISHED"
    },
    {
        "line": 16,
        "fullcodeline": "book = read_book"
    },
    {
        "line": 18,
        "fullcodeline": "kobo_reading_state = ub.KoboReadingState(user_id=current_user.id, book_id=book_id)"
    },
    {
        "line": 19,
        "fullcodeline": "kobo_reading_state.current_bookmark = ub.KoboBookmark()"
    },
    {
        "line": 20,
        "fullcodeline": "kobo_reading_state.statistics = ub.KoboStatistics()"
    },
    {
        "line": 21,
        "fullcodeline": "book.kobo_reading_state = kobo_reading_state"
    },
    {
        "line": 23,
        "fullcodeline": "ub.session_commit(\"Book {} readbit toggled\".format(book_id))"
    },
    {
        "line": 26,
        "fullcodeline": "calibre_db.update_title_sort(config)"
    },
    {
        "line": 27,
        "fullcodeline": "book = calibre_db.get_filtered_book(book_id)"
    },
    {
        "line": 28,
        "fullcodeline": "read_status = getattr(book, 'custom_column_' + str(config.config_read_column))"
    },
    {
        "line": 29,
        "fullcodeline": "if len(read_status):"
    },
    {
        "line": 12,
        "fullcodeline": "book.read_status = ub.ReadBook.STATUS_FINISHED if read_status else ub.ReadBook.STATUS_UNREAD"
    },
    {
        "line": 36,
        "fullcodeline": "cc_class = db.cc_classes[config.config_read_column]"
    },
    {
        "line": 37,
        "fullcodeline": "new_cc = cc_class(value=read_status or 1, book=book_id)"
    },
    {
        "line": 41,
        "fullcodeline": "log.error(u\"Custom Column No.%d is not existing in calibre database\", config.config_read_column)"
    },
    {
        "line": 7,
        "fullcodeline": "if book.read_status == ub.ReadBook.STATUS_FINISHED:"
    },
    {
        "line": 30,
        "fullcodeline": "if read_status is None:"
    },
    {
        "line": 34,
        "fullcodeline": "calibre_db.session.commit()"
    },
    {
        "line": 38,
        "fullcodeline": "calibre_db.session.add(new_cc)"
    },
    {
        "line": 39,
        "fullcodeline": "calibre_db.session.commit()"
    },
    {
        "line": 44,
        "fullcodeline": "calibre_db.session.rollback()"
    },
    {
        "line": 46,
        "fullcodeline": "return _(\"Read status could not set: {}\".format(ex.orig))"
    },
    {
        "line": 4,
        "fullcodeline": "ub.ReadBook.book_id == book_id)).first()"
    },
    {
        "line": 8,
        "fullcodeline": "book.read_status = ub.ReadBook.STATUS_UNREAD"
    },
    {
        "line": 10,
        "fullcodeline": "book.read_status = ub.ReadBook.STATUS_FINISHED"
    },
    {
        "line": 31,
        "fullcodeline": "read_status[0].value = not read_status[0].value"
    },
    {
        "line": 33,
        "fullcodeline": "read_status[0].value = read_status is True"
    },
    {
        "line": 42,
        "fullcodeline": "return \"Custom Column No.{} is not existing in calibre database\".format(config.config_read_column)"
    },
    {
        "line": 45,
        "fullcodeline": "log.error(u\"Read status could not set: {}\".format(ex))"
    }
]