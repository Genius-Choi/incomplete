[
    {
        "line": 2,
        "fullcodeline": "off = int(request.args.get(\"offset\") or 0)"
    },
    {
        "line": 3,
        "fullcodeline": "limit = int(request.args.get(\"limit\") or config.config_books_per_page)"
    },
    {
        "line": 4,
        "fullcodeline": "search_param = request.args.get(\"search\")"
    },
    {
        "line": 5,
        "fullcodeline": "sort_param = request.args.get(\"sort\", \"id\")"
    },
    {
        "line": 6,
        "fullcodeline": "order = request.args.get(\"order\", \"\").lower()"
    },
    {
        "line": 7,
        "fullcodeline": "state = None"
    },
    {
        "line": 8,
        "fullcodeline": "join = tuple()"
    },
    {
        "line": 80,
        "fullcodeline": "result = list()"
    },
    {
        "line": 90,
        "fullcodeline": "table_entries = {'totalNotFiltered': total_count, 'total': filtered_count, \"rows\": result}"
    },
    {
        "line": 91,
        "fullcodeline": "js_list = json.dumps(table_entries, cls=db.AlchemyEncoder)"
    },
    {
        "line": 93,
        "fullcodeline": "response = make_response(js_list)"
    },
    {
        "line": 94,
        "fullcodeline": "response.headers[\"Content-Type\"] = \"application/json; charset=utf-8\""
    },
    {
        "line": 10,
        "fullcodeline": "if sort_param == \"state\":"
    },
    {
        "line": 34,
        "fullcodeline": "total_count = filtered_count = calibre_db.session.query(db.Books).filter("
    },
    {
        "line": 36,
        "fullcodeline": "if state is not None:"
    },
    {
        "line": 81,
        "fullcodeline": "for entry in entries:"
    },
    {
        "line": 11,
        "fullcodeline": "state = json.loads(request.args.get(\"state\", \"[]\"))"
    },
    {
        "line": 61,
        "fullcodeline": "entries = calibre_db.get_checkbox_sorted(books, state, off, limit, order, True)"
    },
    {
        "line": 12,
        "fullcodeline": "elif sort_param == \"tags\":"
    },
    {
        "line": 82,
        "fullcodeline": "val = entry[0]"
    },
    {
        "line": 83,
        "fullcodeline": "val.read_status = entry[1] == ub.ReadBook.STATUS_FINISHED"
    },
    {
        "line": 84,
        "fullcodeline": "val.is_archived = entry[2] is True"
    },
    {
        "line": 88,
        "fullcodeline": "result.append(val)"
    },
    {
        "line": 13,
        "fullcodeline": "order = [db.Tags.name.asc()] if order == \"asc\" else [db.Tags.name.desc()]"
    },
    {
        "line": 14,
        "fullcodeline": "join = db.books_tags_link, db.Books.id == db.books_tags_link.c.book, db.Tags"
    },
    {
        "line": 38,
        "fullcodeline": "books = calibre_db.search_query(search_param, config.config_read_column).all()"
    },
    {
        "line": 39,
        "fullcodeline": "filtered_count = len(books)"
    },
    {
        "line": 58,
        "fullcodeline": "books = (books.outerjoin(ub.ArchivedBook, and_(db.Books.id == ub.ArchivedBook.book_id,"
    },
    {
        "line": 85,
        "fullcodeline": "for lang_index in range(0, len(val.languages)):"
    },
    {
        "line": 15,
        "fullcodeline": "elif sort_param == \"series\":"
    },
    {
        "line": 63,
        "fullcodeline": "entries, filtered_count, __ = calibre_db.get_search_results(search_param,"
    },
    {
        "line": 70,
        "fullcodeline": "entries, __, __ = calibre_db.fill_indexpage_with_archived_books((int(off) / (int(limit)) + 1),"
    },
    {
        "line": 16,
        "fullcodeline": "order = [db.Series.name.asc()] if order == \"asc\" else [db.Series.name.desc()]"
    },
    {
        "line": 17,
        "fullcodeline": "join = db.books_series_link, db.Books.id == db.books_series_link.c.book, db.Series"
    },
    {
        "line": 35,
        "fullcodeline": "calibre_db.common_filters(allow_show_archived=True)).count()"
    },
    {
        "line": 42,
        "fullcodeline": "books = (calibre_db.session.query(db.Books, ub.ReadBook.read_status, ub.ArchivedBook.is_archived)"
    },
    {
        "line": 48,
        "fullcodeline": "read_column = \"\""
    },
    {
        "line": 86,
        "fullcodeline": "val.languages[lang_index].language_name = isoLanguages.get_language_name(get_locale(), val.languages["
    },
    {
        "line": 18,
        "fullcodeline": "elif sort_param == \"publishers\":"
    },
    {
        "line": 65,
        "fullcodeline": "[order, ''],"
    },
    {
        "line": 68,
        "fullcodeline": "*join)"
    },
    {
        "line": 78,
        "fullcodeline": "*join)"
    },
    {
        "line": 19,
        "fullcodeline": "order = [db.Publishers.name.asc()] if order == \"asc\" else [db.Publishers.name.desc()]"
    },
    {
        "line": 20,
        "fullcodeline": "join = db.books_publishers_link, db.Books.id == db.books_publishers_link.c.book, db.Publishers"
    },
    {
        "line": 51,
        "fullcodeline": "books = (calibre_db.session.query(db.Books, read_column.value, ub.ArchivedBook.is_archived)"
    },
    {
        "line": 21,
        "fullcodeline": "elif sort_param == \"authors\":"
    },
    {
        "line": 45,
        "fullcodeline": "and_(ub.ReadBook.user_id == int(current_user.id),"
    },
    {
        "line": 60,
        "fullcodeline": ".filter(calibre_db.common_filters(allow_show_archived=True)).all())"
    },
    {
        "line": 22,
        "fullcodeline": "order = [db.Authors.name.asc(), db.Series.name, db.Books.series_index] if order == \"asc\" \\"
    },
    {
        "line": 24,
        "fullcodeline": "join = db.books_authors_link, db.Books.id == db.books_authors_link.c.book, db.Authors, db.books_series_link, \\"
    },
    {
        "line": 46,
        "fullcodeline": "ub.ReadBook.book_id == db.Books.id)))"
    },
    {
        "line": 55,
        "fullcodeline": "log.error(\"Custom Column No.%d is not existing in calibre database\", read_column)"
    },
    {
        "line": 57,
        "fullcodeline": "books = calibre_db.session.query(db.Books, None, ub.ArchivedBook.is_archived)"
    },
    {
        "line": 26,
        "fullcodeline": "elif sort_param == \"languages\":"
    },
    {
        "line": 53,
        "fullcodeline": ".outerjoin(read_column, read_column.book == db.Books.id))"
    },
    {
        "line": 59,
        "fullcodeline": "int(current_user.id) == ub.ArchivedBook.user_id))"
    },
    {
        "line": 23,
        "fullcodeline": "else [db.Authors.name.desc(), db.Series.name.desc(), db.Books.series_index.desc()]"
    },
    {
        "line": 25,
        "fullcodeline": "db.Books.id == db.books_series_link.c.book, db.Series"
    },
    {
        "line": 27,
        "fullcodeline": "order = [db.Languages.lang_code.asc()] if order == \"asc\" else [db.Languages.lang_code.desc()]"
    },
    {
        "line": 28,
        "fullcodeline": "join = db.books_languages_link, db.Books.id == db.books_languages_link.c.book, db.Languages"
    },
    {
        "line": 29,
        "fullcodeline": "elif order and sort_param in [\"sort\", \"title\", \"authors_sort\", \"series_index\"]:"
    },
    {
        "line": 30,
        "fullcodeline": "order = [text(sort_param + \" \" + order)]"
    },
    {
        "line": 31,
        "fullcodeline": "elif not state:"
    },
    {
        "line": 32,
        "fullcodeline": "order = [db.Books.timestamp.desc()]"
    }
]