[
    {
        "line": 4,
        "fullcodeline": "u8 class = BPF_CLASS(insn->code);"
    },
    {
        "line": 6,
        "fullcodeline": "if (class == BPF_ALU || class == BPF_ALU64) {"
    },
    {
        "line": 7,
        "fullcodeline": "if (BPF_SRC(insn->code) == BPF_X)"
    },
    {
        "line": 21,
        "fullcodeline": "} else if (class == BPF_STX) {"
    },
    {
        "line": 9,
        "fullcodeline": "insn->code, class == BPF_ALU ? \"(u32) \" : \"\","
    },
    {
        "line": 11,
        "fullcodeline": "bpf_alu_string[BPF_OP(insn->code) >> 4],"
    },
    {
        "line": 16,
        "fullcodeline": "insn->code, class == BPF_ALU ? \"(u32) \" : \"\","
    },
    {
        "line": 22,
        "fullcodeline": "if (BPF_MODE(insn->code) == BPF_MEM)"
    },
    {
        "line": 36,
        "fullcodeline": "} else if (class == BPF_ST) {"
    },
    {
        "line": 18,
        "fullcodeline": "bpf_alu_string[BPF_OP(insn->code) >> 4],"
    },
    {
        "line": 28,
        "fullcodeline": "else if (BPF_MODE(insn->code) == BPF_XADD)"
    },
    {
        "line": 37,
        "fullcodeline": "if (BPF_MODE(insn->code) != BPF_MEM) {"
    },
    {
        "line": 25,
        "fullcodeline": "bpf_ldst_string[BPF_SIZE(insn->code) >> 3],"
    },
    {
        "line": 38,
        "fullcodeline": "verbose(\"BUG_st_%02x\\n\", insn->code);"
    },
    {
        "line": 46,
        "fullcodeline": "} else if (class == BPF_LDX) {"
    },
    {
        "line": 43,
        "fullcodeline": "bpf_ldst_string[BPF_SIZE(insn->code) >> 3],"
    },
    {
        "line": 31,
        "fullcodeline": "bpf_ldst_string[BPF_SIZE(insn->code) >> 3],"
    },
    {
        "line": 47,
        "fullcodeline": "if (BPF_MODE(insn->code) != BPF_MEM) {"
    },
    {
        "line": 55,
        "fullcodeline": "} else if (class == BPF_LD) {"
    },
    {
        "line": 53,
        "fullcodeline": "bpf_ldst_string[BPF_SIZE(insn->code) >> 3],"
    },
    {
        "line": 56,
        "fullcodeline": "if (BPF_MODE(insn->code) == BPF_ABS) {"
    },
    {
        "line": 83,
        "fullcodeline": "} else if (class == BPF_JMP) {"
    },
    {
        "line": 84,
        "fullcodeline": "u8 opcode = BPF_OP(insn->code);"
    },
    {
        "line": 61,
        "fullcodeline": "} else if (BPF_MODE(insn->code) == BPF_IND) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (opcode == BPF_CALL) {"
    },
    {
        "line": 59,
        "fullcodeline": "bpf_ldst_string[BPF_SIZE(insn->code) >> 3],"
    },
    {
        "line": 88,
        "fullcodeline": "func_id_name(insn->imm), insn->imm);"
    },
    {
        "line": 89,
        "fullcodeline": "} else if (insn->code == (BPF_JMP | BPF_JA)) {"
    },
    {
        "line": 64,
        "fullcodeline": "bpf_ldst_string[BPF_SIZE(insn->code) >> 3],"
    },
    {
        "line": 66,
        "fullcodeline": "} else if (BPF_MODE(insn->code) == BPF_IMM &&"
    },
    {
        "line": 67,
        "fullcodeline": "BPF_SIZE(insn->code) == BPF_DW) {"
    },
    {
        "line": 71,
        "fullcodeline": "u64 imm = ((u64)(insn + 1)->imm << 32) | (u32)insn->imm;"
    },
    {
        "line": 72,
        "fullcodeline": "bool map_ptr = insn->src_reg == BPF_PSEUDO_MAP_FD;"
    },
    {
        "line": 74,
        "fullcodeline": "if (map_ptr && !env->allow_ptr_leaks)"
    },
    {
        "line": 75,
        "fullcodeline": "imm = 0;"
    },
    {
        "line": 92,
        "fullcodeline": "} else if (insn->code == (BPF_JMP | BPF_EXIT)) {"
    },
    {
        "line": 94,
        "fullcodeline": "} else if (BPF_SRC(insn->code) == BPF_X) {"
    },
    {
        "line": 97,
        "fullcodeline": "bpf_jmp_string[BPF_OP(insn->code) >> 4],"
    },
    {
        "line": 102,
        "fullcodeline": "bpf_jmp_string[BPF_OP(insn->code) >> 4],"
    }
]