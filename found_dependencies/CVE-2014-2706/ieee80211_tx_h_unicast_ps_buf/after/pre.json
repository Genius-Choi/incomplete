[
    {
        "line": 3,
        "fullcodeline": "struct sta_info *sta = tx->sta;"
    },
    {
        "line": 4,
        "fullcodeline": "struct ieee80211_tx_info *info = IEEE80211_SKB_CB(tx->skb);"
    },
    {
        "line": 5,
        "fullcodeline": "struct ieee80211_local *local = tx->local;"
    },
    {
        "line": 7,
        "fullcodeline": "if (unlikely(!sta))"
    },
    {
        "line": 10,
        "fullcodeline": "if (unlikely((test_sta_flag(sta, WLAN_STA_PS_STA) ||"
    },
    {
        "line": 13,
        "fullcodeline": "int ac = skb_get_queue_mapping(tx->skb);"
    },
    {
        "line": 15,
        "fullcodeline": "ps_dbg(sta->sdata, \"STA %pM aid %d: PS buffer for AC %d\\n\","
    },
    {
        "line": 21,
        "fullcodeline": "spin_lock(&sta->ps_lock);"
    },
    {
        "line": 44,
        "fullcodeline": "info->flags |= IEEE80211_TX_INTFL_NEED_TXPROCESSING;"
    },
    {
        "line": 12,
        "fullcodeline": "!(info->flags & IEEE80211_TX_CTL_NO_PS_BUFFER))) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (tx->local->total_ps_buffered >= TOTAL_MAX_TX_BUFFER)"
    },
    {
        "line": 33,
        "fullcodeline": "if (skb_queue_len(&sta->ps_tx_buf[ac]) >= STA_MAX_TX_BUFFER) {"
    },
    {
        "line": 45,
        "fullcodeline": "info->flags &= ~IEEE80211_TX_TEMPORARY_FLAGS;"
    },
    {
        "line": 11,
        "fullcodeline": "test_sta_flag(sta, WLAN_STA_PS_DRIVER)) &&"
    },
    {
        "line": 27,
        "fullcodeline": "if (!test_sta_flag(sta, WLAN_STA_PS_STA) &&"
    },
    {
        "line": 28,
        "fullcodeline": "!test_sta_flag(sta, WLAN_STA_PS_DRIVER)) {"
    },
    {
        "line": 34,
        "fullcodeline": "struct sk_buff *old = skb_dequeue(&sta->ps_tx_buf[ac]);"
    },
    {
        "line": 49,
        "fullcodeline": "if (!timer_pending(&local->sta_cleanup))"
    },
    {
        "line": 51,
        "fullcodeline": "round_jiffies(jiffies +"
    },
    {
        "line": 61,
        "fullcodeline": "} else if (unlikely(test_sta_flag(sta, WLAN_STA_PS_STA))) {"
    }
]