[
    {
        "line": 4,
        "fullcodeline": "struct ieee80211_local *local = sdata->local;"
    },
    {
        "line": 10,
        "fullcodeline": "sta = kzalloc(sizeof(*sta) + local->hw.sta_data_size, gfp);"
    },
    {
        "line": 14,
        "fullcodeline": "rcu_read_lock();"
    },
    {
        "line": 15,
        "fullcodeline": "tx_latency = rcu_dereference(local->tx_latency);"
    },
    {
        "line": 41,
        "fullcodeline": "rcu_read_unlock();"
    },
    {
        "line": 43,
        "fullcodeline": "spin_lock_init(&sta->lock);"
    },
    {
        "line": 44,
        "fullcodeline": "INIT_WORK(&sta->drv_unblock_wk, sta_unblock);"
    },
    {
        "line": 45,
        "fullcodeline": "INIT_WORK(&sta->ampdu_mlme.work, ieee80211_ba_session_work);"
    },
    {
        "line": 54,
        "fullcodeline": "memcpy(sta->sta.addr, addr, ETH_ALEN);"
    },
    {
        "line": 55,
        "fullcodeline": "sta->local = local;"
    },
    {
        "line": 56,
        "fullcodeline": "sta->sdata = sdata;"
    },
    {
        "line": 57,
        "fullcodeline": "sta->last_rx = jiffies;"
    },
    {
        "line": 59,
        "fullcodeline": "sta->sta_state = IEEE80211_STA_NONE;"
    },
    {
        "line": 61,
        "fullcodeline": "do_posix_clock_monotonic_gettime(&uptime);"
    },
    {
        "line": 62,
        "fullcodeline": "sta->last_connected = uptime.tv_sec;"
    },
    {
        "line": 63,
        "fullcodeline": "ewma_init(&sta->avg_signal, 1024, 8);"
    },
    {
        "line": 86,
        "fullcodeline": "sta->sta.smps_mode = IEEE80211_SMPS_OFF;"
    },
    {
        "line": 112,
        "fullcodeline": "sta_dbg(sdata, \"Allocated STA %pM\\n\", sta->sta.addr);"
    },
    {
        "line": 121,
        "fullcodeline": "kfree(sta);"
    },
    {
        "line": 11,
        "fullcodeline": "if (!sta)"
    },
    {
        "line": 64,
        "fullcodeline": "for (i = 0; i < ARRAY_SIZE(sta->chain_signal_avg); i++)"
    },
    {
        "line": 65,
        "fullcodeline": "ewma_init(&sta->chain_signal_avg[i], 1024, 8);"
    },
    {
        "line": 67,
        "fullcodeline": "if (sta_prepare_rate_control(local, sta, gfp))"
    },
    {
        "line": 70,
        "fullcodeline": "for (i = 0; i < IEEE80211_NUM_TIDS; i++) {"
    },
    {
        "line": 78,
        "fullcodeline": "for (i = 0; i < IEEE80211_NUM_ACS; i++) {"
    },
    {
        "line": 83,
        "fullcodeline": "for (i = 0; i < IEEE80211_NUM_TIDS; i++)"
    },
    {
        "line": 84,
        "fullcodeline": "sta->last_seq_ctrl[i] = cpu_to_le16(USHRT_MAX);"
    },
    {
        "line": 87,
        "fullcodeline": "if (sdata->vif.type == NL80211_IFTYPE_AP ||"
    },
    {
        "line": 18,
        "fullcodeline": "sta->tx_lat = kzalloc(IEEE80211_NUM_TIDS *"
    },
    {
        "line": 76,
        "fullcodeline": "sta->timer_to_tid[i] = i;"
    },
    {
        "line": 88,
        "fullcodeline": "sdata->vif.type == NL80211_IFTYPE_AP_VLAN) {"
    },
    {
        "line": 91,
        "fullcodeline": "u8 smps = (sband->ht_cap.cap & IEEE80211_HT_CAP_SM_PS) >>"
    },
    {
        "line": 119,
        "fullcodeline": "kfree(sta->tx_lat);"
    },
    {
        "line": 21,
        "fullcodeline": "if (!sta->tx_lat) {"
    },
    {
        "line": 117,
        "fullcodeline": "for (i = 0; i < IEEE80211_NUM_TIDS; i++)"
    },
    {
        "line": 22,
        "fullcodeline": "rcu_read_unlock();"
    },
    {
        "line": 90,
        "fullcodeline": "local->hw.wiphy->bands[ieee80211_get_sdata_band(sdata)];"
    },
    {
        "line": 99,
        "fullcodeline": "sta->known_smps_mode = IEEE80211_SMPS_OFF;"
    },
    {
        "line": 102,
        "fullcodeline": "sta->known_smps_mode = IEEE80211_SMPS_STATIC;"
    },
    {
        "line": 105,
        "fullcodeline": "sta->known_smps_mode = IEEE80211_SMPS_DYNAMIC;"
    },
    {
        "line": 108,
        "fullcodeline": "WARN_ON(1);"
    },
    {
        "line": 27,
        "fullcodeline": "for (i = 0; i < IEEE80211_NUM_TIDS; i++) {"
    },
    {
        "line": 29,
        "fullcodeline": "sta->tx_lat[i].bin_count ="
    },
    {
        "line": 31,
        "fullcodeline": "sta->tx_lat[i].bins ="
    },
    {
        "line": 30,
        "fullcodeline": "tx_latency->n_ranges + 1;"
    },
    {
        "line": 32,
        "fullcodeline": "kcalloc(sta->tx_lat[i].bin_count,"
    },
    {
        "line": 34,
        "fullcodeline": "if (!sta->tx_lat[i].bins) {"
    },
    {
        "line": 35,
        "fullcodeline": "rcu_read_unlock();"
    }
]