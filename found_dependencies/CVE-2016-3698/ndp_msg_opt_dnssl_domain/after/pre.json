[
    {
        "line": 5,
        "fullcodeline": "static char buf[256];"
    },
    {
        "line": 6,
        "fullcodeline": "struct __nd_opt_dnssl *dnssl ="
    },
    {
        "line": 8,
        "fullcodeline": "size_t len = dnssl->nd_opt_dnssl_len << 3; /* convert to bytes */"
    },
    {
        "line": 12,
        "fullcodeline": "ptr = dnssl->nd_opt_dnssl_domains;"
    },
    {
        "line": 14,
        "fullcodeline": "i = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "ndp_msg_payload_opts_offset(msg, offset);"
    },
    {
        "line": 15,
        "fullcodeline": "while (len > 0) {"
    },
    {
        "line": 16,
        "fullcodeline": "size_t buf_len = 0;"
    },
    {
        "line": 39,
        "fullcodeline": "buf[buf_len - 1] = '\\0'; /* overwrite final '.' */"
    },
    {
        "line": 17,
        "fullcodeline": "while (len > 0) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (!buf_len)"
    },
    {
        "line": 40,
        "fullcodeline": "if (i++ == domain_index)"
    },
    {
        "line": 18,
        "fullcodeline": "uint8_t dom_len = *ptr;"
    },
    {
        "line": 20,
        "fullcodeline": "ptr++;"
    },
    {
        "line": 21,
        "fullcodeline": "len--;"
    },
    {
        "line": 31,
        "fullcodeline": "memcpy(buf + buf_len, ptr, dom_len);"
    },
    {
        "line": 32,
        "fullcodeline": "buf[buf_len + dom_len] = '.';"
    },
    {
        "line": 33,
        "fullcodeline": "ptr += dom_len;"
    },
    {
        "line": 34,
        "fullcodeline": "len -= dom_len;"
    },
    {
        "line": 35,
        "fullcodeline": "buf_len += dom_len + 1;"
    },
    {
        "line": 22,
        "fullcodeline": "if (!dom_len)"
    },
    {
        "line": 25,
        "fullcodeline": "if (dom_len > len)"
    },
    {
        "line": 28,
        "fullcodeline": "if (buf_len + dom_len + 1 > sizeof(buf))"
    }
]