[
    {
        "line": 2,
        "fullcodeline": "download = request.args.get(\"download\", type=bool)"
    },
    {
        "line": 4,
        "fullcodeline": "recordings = ("
    },
    {
        "line": 19,
        "fullcodeline": "playlist_lines = []"
    },
    {
        "line": 30,
        "fullcodeline": "file_name = secure_filename(f\"clip_{camera_name}_{start_ts}-{end_ts}.mp4\")"
    },
    {
        "line": 31,
        "fullcodeline": "path = os.path.join(CACHE_DIR, file_name)"
    },
    {
        "line": 75,
        "fullcodeline": "response = make_response()"
    },
    {
        "line": 21,
        "fullcodeline": "for clip in recordings:"
    },
    {
        "line": 33,
        "fullcodeline": "if not os.path.exists(path):"
    },
    {
        "line": 83,
        "fullcodeline": "f\"/cache/{file_name}\"  # nginx: https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ignore_headers"
    },
    {
        "line": 5,
        "fullcodeline": "Recordings.select("
    },
    {
        "line": 34,
        "fullcodeline": "ffmpeg_cmd = ["
    },
    {
        "line": 52,
        "fullcodeline": "p = sp.run("
    },
    {
        "line": 81,
        "fullcodeline": "response.headers[\"Content-Length\"] = os.path.getsize(path)"
    },
    {
        "line": 22,
        "fullcodeline": "playlist_lines.append(f\"file '{clip.path}'\")"
    },
    {
        "line": 59,
        "fullcodeline": "if p.returncode != 0:"
    },
    {
        "line": 72,
        "fullcodeline": "f\"Ignoring subsequent request for {path} as it already exists in the cache.\""
    },
    {
        "line": 80,
        "fullcodeline": "response.headers[\"Content-Disposition\"] = \"attachment; filename=%s\" % file_name"
    },
    {
        "line": 16,
        "fullcodeline": ".order_by(Recordings.start_time.asc())"
    },
    {
        "line": 24,
        "fullcodeline": "if clip.start_time < start_ts:"
    },
    {
        "line": 27,
        "fullcodeline": "if clip.end_time > end_ts:"
    },
    {
        "line": 60,
        "fullcodeline": "logger.error(p.stderr)"
    },
    {
        "line": 15,
        "fullcodeline": ".where(Recordings.camera == camera_name)"
    },
    {
        "line": 25,
        "fullcodeline": "playlist_lines.append(f\"inpoint {int(start_ts - clip.start_time)}\")"
    },
    {
        "line": 28,
        "fullcodeline": "playlist_lines.append(f\"outpoint {int(end_ts - clip.start_time)}\")"
    },
    {
        "line": 54,
        "fullcodeline": "input=\"\\n\".join(playlist_lines),"
    },
    {
        "line": 61,
        "fullcodeline": "return make_response("
    },
    {
        "line": 62,
        "fullcodeline": "jsonify("
    },
    {
        "line": 11,
        "fullcodeline": "(Recordings.start_time.between(start_ts, end_ts))"
    },
    {
        "line": 13,
        "fullcodeline": "| ((start_ts > Recordings.start_time) & (end_ts < Recordings.end_time))"
    },
    {
        "line": 63,
        "fullcodeline": "{"
    },
    {
        "line": 12,
        "fullcodeline": "| (Recordings.end_time.between(start_ts, end_ts))"
    }
]