[
    {
        "line": 2,
        "fullcodeline": "_cleanup_close_ int fd = -1;"
    },
    {
        "line": 6,
        "fullcodeline": "fd = open_terminal(src_vc, O_RDWR|O_CLOEXEC|O_NOCTTY);"
    },
    {
        "line": 10,
        "fullcodeline": "r = verify_vc_device(fd);"
    },
    {
        "line": 14,
        "fullcodeline": "r = verify_vc_allocation_byfd(fd);"
    },
    {
        "line": 18,
        "fullcodeline": "r = vt_verify_kbmode(fd);"
    },
    {
        "line": 22,
        "fullcodeline": "path = strdup(src_vc);"
    },
    {
        "line": 7,
        "fullcodeline": "if (fd < 0)"
    },
    {
        "line": 11,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 15,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 19,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 23,
        "fullcodeline": "if (!path)"
    },
    {
        "line": 27,
        "fullcodeline": "return TAKE_FD(fd);"
    },
    {
        "line": 8,
        "fullcodeline": "return log_error_errno(fd, \"Failed to open %s: %m\", src_vc);"
    },
    {
        "line": 12,
        "fullcodeline": "return log_error_errno(r, \"Device %s is not a virtual console: %m\", src_vc);"
    },
    {
        "line": 16,
        "fullcodeline": "return log_error_errno(r, \"Virtual console %s is not allocated: %m\", src_vc);"
    },
    {
        "line": 20,
        "fullcodeline": "return log_error_errno(r, \"Virtual console %s is not in K_XLATE or K_UNICODE: %m\", src_vc);"
    },
    {
        "line": 24,
        "fullcodeline": "return log_oom();"
    }
]