[
    {
        "line": 3,
        "fullcodeline": "x3f_t *x3f = x3f_new_from_file(libraw_internal_data.internal_data.input);"
    },
    {
        "line": 6,
        "fullcodeline": "_x3f_data = x3f;"
    },
    {
        "line": 8,
        "fullcodeline": "x3f_header_t *H = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "x3f_directory_section_t *DS = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "H = &x3f->header;"
    },
    {
        "line": 13,
        "fullcodeline": "x3f_directory_entry_t *DE = x3f_get_raw(x3f);"
    },
    {
        "line": 15,
        "fullcodeline": "imgdata.sizes.flip = H->rotation;"
    },
    {
        "line": 16,
        "fullcodeline": "x3f_directory_entry_header_t *DEH = &DE->header;"
    },
    {
        "line": 18,
        "fullcodeline": "imgdata.sizes.raw_width = ID->columns;"
    },
    {
        "line": 19,
        "fullcodeline": "imgdata.sizes.raw_height = ID->rows;"
    },
    {
        "line": 21,
        "fullcodeline": "DE = x3f_get_prop(x3f);"
    },
    {
        "line": 138,
        "fullcodeline": "LibRaw_thumbnail_formats format = LIBRAW_THUMBNAIL_UNKNOWN;"
    },
    {
        "line": 4,
        "fullcodeline": "if(!x3f)"
    },
    {
        "line": 14,
        "fullcodeline": "if(!DE) return;"
    },
    {
        "line": 22,
        "fullcodeline": "if((x3f_load_data(x3f,DE) == X3F_OK))"
    },
    {
        "line": 139,
        "fullcodeline": "if( (DE = x3f_get_thumb_jpeg(x3f)))"
    },
    {
        "line": 25,
        "fullcodeline": "DEH = &DE->header;"
    },
    {
        "line": 141,
        "fullcodeline": "format = LIBRAW_THUMBNAIL_JPEG;"
    },
    {
        "line": 149,
        "fullcodeline": "x3f_directory_entry_header_t *DEH = &DE->header;"
    },
    {
        "line": 151,
        "fullcodeline": "imgdata.thumbnail.twidth = ID->columns;"
    },
    {
        "line": 152,
        "fullcodeline": "imgdata.thumbnail.theight = ID->rows;"
    },
    {
        "line": 153,
        "fullcodeline": "imgdata.thumbnail.tcolors = 3;"
    },
    {
        "line": 154,
        "fullcodeline": "imgdata.thumbnail.tformat = format;"
    },
    {
        "line": 27,
        "fullcodeline": "if (PL->property_table.size != 0) {"
    },
    {
        "line": 86,
        "fullcodeline": "imgdata.idata.raw_count=1;"
    },
    {
        "line": 88,
        "fullcodeline": "imgdata.sizes.raw_pitch = imgdata.sizes.raw_width*6;"
    },
    {
        "line": 89,
        "fullcodeline": "imgdata.idata.is_foveon = 1;"
    },
    {
        "line": 90,
        "fullcodeline": "libraw_internal_data.internal_output_params.raw_color=1; // Force adobe coeff"
    },
    {
        "line": 91,
        "fullcodeline": "imgdata.color.maximum=0x3fff; // To be reset by color table"
    },
    {
        "line": 92,
        "fullcodeline": "libraw_internal_data.unpacker_data.order = 0x4949;"
    },
    {
        "line": 98,
        "fullcodeline": "if(imgdata.sizes.raw_width == 5888 ||imgdata.sizes.raw_width == 2944"
    },
    {
        "line": 143,
        "fullcodeline": "else if( (DE = x3f_get_thumb_plain(x3f)))"
    },
    {
        "line": 30,
        "fullcodeline": "for (i=0; i<PL->num_properties; i++) {"
    },
    {
        "line": 100,
        "fullcodeline": "|| imgdata.sizes.raw_width == 5504 ||imgdata.sizes.raw_width == 2752"
    },
    {
        "line": 103,
        "fullcodeline": "imgdata.idata.raw_count=1;"
    },
    {
        "line": 105,
        "fullcodeline": "imgdata.sizes.raw_pitch = imgdata.sizes.raw_width*6;"
    },
    {
        "line": 106,
        "fullcodeline": "imgdata.idata.is_foveon = 1;"
    },
    {
        "line": 107,
        "fullcodeline": "libraw_internal_data.internal_output_params.raw_color=1; // Force adobe coeff"
    },
    {
        "line": 108,
        "fullcodeline": "libraw_internal_data.unpacker_data.order = 0x4949;"
    },
    {
        "line": 109,
        "fullcodeline": "strcpy (imgdata.idata.make, \"SIGMA\");"
    },
    {
        "line": 112,
        "fullcodeline": "int pos = libraw_internal_data.internal_data.input->tell();"
    },
    {
        "line": 113,
        "fullcodeline": "libraw_internal_data.internal_data.input->seek(0,SEEK_SET);"
    },
    {
        "line": 114,
        "fullcodeline": "unsigned char buf[2048];"
    },
    {
        "line": 115,
        "fullcodeline": "libraw_internal_data.internal_data.input->read(buf,2048,1);"
    },
    {
        "line": 116,
        "fullcodeline": "libraw_internal_data.internal_data.input->seek(pos,SEEK_SET);"
    },
    {
        "line": 117,
        "fullcodeline": "unsigned char *fnd=(unsigned char*)lr_memmem(buf,2048,\"SIGMA dp\",8);"
    },
    {
        "line": 118,
        "fullcodeline": "unsigned char *fndsd=(unsigned char*)lr_memmem(buf,2048,\"sd Quatt\",8);"
    },
    {
        "line": 145,
        "fullcodeline": "format = LIBRAW_THUMBNAIL_BITMAP;"
    },
    {
        "line": 31,
        "fullcodeline": "char name[100], value[100];"
    },
    {
        "line": 32,
        "fullcodeline": "utf2char(P[i].name,name);"
    },
    {
        "line": 33,
        "fullcodeline": "utf2char(P[i].value,value);"
    },
    {
        "line": 34,
        "fullcodeline": "if (!strcmp (name, \"ISO\"))"
    },
    {
        "line": 36,
        "fullcodeline": "if (!strcmp (name, \"CAMMANUF\"))"
    },
    {
        "line": 38,
        "fullcodeline": "if (!strcmp (name, \"CAMMODEL\"))"
    },
    {
        "line": 40,
        "fullcodeline": "if (!strcmp (name, \"CAMSERIAL\"))"
    },
    {
        "line": 42,
        "fullcodeline": "if (!strcmp (name, \"WB_DESC\"))"
    },
    {
        "line": 44,
        "fullcodeline": "if (!strcmp (name, \"TIME\"))"
    },
    {
        "line": 46,
        "fullcodeline": "if (!strcmp (name, \"SHUTTER\"))"
    },
    {
        "line": 48,
        "fullcodeline": "if (!strcmp (name, \"APERTURE\"))"
    },
    {
        "line": 50,
        "fullcodeline": "if (!strcmp (name, \"FLENGTH\"))"
    },
    {
        "line": 52,
        "fullcodeline": "if (!strcmp (name, \"FLEQ35MM\"))"
    },
    {
        "line": 54,
        "fullcodeline": "if (!strcmp (name, \"LENSARANGE\"))"
    },
    {
        "line": 66,
        "fullcodeline": "if (!strcmp (name, \"LENSFRANGE\"))"
    },
    {
        "line": 78,
        "fullcodeline": "if (!strcmp (name, \"LENSMODEL\"))"
    },
    {
        "line": 99,
        "fullcodeline": "|| imgdata.sizes.raw_width == 6656 ||imgdata.sizes.raw_width == 3328"
    },
    {
        "line": 121,
        "fullcodeline": "unsigned char *nm = fnd+8;"
    },
    {
        "line": 122,
        "fullcodeline": "snprintf(imgdata.idata.model,64,\"dp%c Quattro\",*nm<='9' && *nm >='0' ? *nm: '2');"
    },
    {
        "line": 35,
        "fullcodeline": "imgdata.other.iso_speed = atoi(value);"
    },
    {
        "line": 37,
        "fullcodeline": "strcpy (imgdata.idata.make, value);"
    },
    {
        "line": 39,
        "fullcodeline": "strcpy (imgdata.idata.model, value);"
    },
    {
        "line": 41,
        "fullcodeline": "strcpy (imgdata.shootinginfo.BodySerial, value);"
    },
    {
        "line": 43,
        "fullcodeline": "strcpy (imgdata.color.model2, value);"
    },
    {
        "line": 45,
        "fullcodeline": "imgdata.other.timestamp = atoi(value);"
    },
    {
        "line": 47,
        "fullcodeline": "imgdata.other.shutter = atof(value);"
    },
    {
        "line": 49,
        "fullcodeline": "imgdata.other.aperture = atof(value);"
    },
    {
        "line": 51,
        "fullcodeline": "imgdata.other.focal_len = atof(value);"
    },
    {
        "line": 53,
        "fullcodeline": "imgdata.lens.makernotes.FocalLengthIn35mmFormat = atof(value);"
    },
    {
        "line": 57,
        "fullcodeline": "imgdata.lens.makernotes.MaxAp4CurFocal = imgdata.lens.makernotes.MinAp4CurFocal = atof(value);"
    },
    {
        "line": 58,
        "fullcodeline": "sp = strrchr (value, ' ');"
    },
    {
        "line": 69,
        "fullcodeline": "imgdata.lens.makernotes.MinFocal = imgdata.lens.makernotes.MaxFocal = atof(value);"
    },
    {
        "line": 70,
        "fullcodeline": "sp = strrchr (value, ' ');"
    },
    {
        "line": 81,
        "fullcodeline": "imgdata.lens.makernotes.LensID = strtol (value, &sp, 16); // atoi(value);"
    },
    {
        "line": 61,
        "fullcodeline": "imgdata.lens.makernotes.MinAp4CurFocal = atof(sp);"
    },
    {
        "line": 73,
        "fullcodeline": "imgdata.lens.makernotes.MaxFocal = atof(sp);"
    },
    {
        "line": 83,
        "fullcodeline": "imgdata.lens.makernotes.LensMount = Sigma_X3F;"
    },
    {
        "line": 126,
        "fullcodeline": "snprintf(imgdata.idata.model,64,\"%s\",fndsd);"
    },
    {
        "line": 130,
        "fullcodeline": "if(imgdata.sizes.raw_width == 6656 ||imgdata.sizes.raw_width == 3328 )"
    },
    {
        "line": 131,
        "fullcodeline": "strcpy (imgdata.idata.model, \"sd Quattro H\");"
    },
    {
        "line": 133,
        "fullcodeline": "strcpy (imgdata.idata.model, \"dp2 Quattro\");"
    }
]