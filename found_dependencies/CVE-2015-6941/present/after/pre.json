[
    {
        "line": 146,
        "fullcodeline": "fullname = salt.utils.sdecode(fullname) if fullname is not None else fullname"
    },
    {
        "line": 147,
        "fullcodeline": "roomnumber = salt.utils.sdecode(roomnumber) if roomnumber is not None else roomnumber"
    },
    {
        "line": 148,
        "fullcodeline": "workphone = salt.utils.sdecode(workphone) if workphone is not None else workphone"
    },
    {
        "line": 149,
        "fullcodeline": "homephone = salt.utils.sdecode(homephone) if homephone is not None else homephone"
    },
    {
        "line": 151,
        "fullcodeline": "ret = {'name': name,"
    },
    {
        "line": 187,
        "fullcodeline": "changes = _changes(name,"
    },
    {
        "line": 176,
        "fullcodeline": "if groups and optional_groups:"
    },
    {
        "line": 157,
        "fullcodeline": "missing_groups = [x for x in groups if not __salt__['group.info'](x)]"
    },
    {
        "line": 165,
        "fullcodeline": "present_optgroups = [x for x in optional_groups"
    },
    {
        "line": 172,
        "fullcodeline": "present_optgroups = None"
    },
    {
        "line": 182,
        "fullcodeline": "gid = __salt__['file.group_to_gid'](name)"
    },
    {
        "line": 185,
        "fullcodeline": "__salt__['shadow.del_password'](name)"
    },
    {
        "line": 223,
        "fullcodeline": "pre = __salt__['user.info'](name)"
    },
    {
        "line": 262,
        "fullcodeline": "post = __salt__['user.info'](name)"
    },
    {
        "line": 263,
        "fullcodeline": "spost = {}"
    },
    {
        "line": 277,
        "fullcodeline": "changes = _changes(name,"
    },
    {
        "line": 167,
        "fullcodeline": "for missing_optgroup in [x for x in optional_groups"
    },
    {
        "line": 177,
        "fullcodeline": "for isected in set(groups).intersection(optional_groups):"
    },
    {
        "line": 221,
        "fullcodeline": "if 'shadow.info' in __salt__:"
    },
    {
        "line": 224,
        "fullcodeline": "for key, val in changes.items():"
    },
    {
        "line": 264,
        "fullcodeline": "if 'shadow.info' in __salt__:"
    },
    {
        "line": 268,
        "fullcodeline": "for key in post:"
    },
    {
        "line": 313,
        "fullcodeline": "if groups and present_optgroups:"
    },
    {
        "line": 317,
        "fullcodeline": "if __salt__['user.add'](name,"
    },
    {
        "line": 152,
        "fullcodeline": "'changes': {},"
    },
    {
        "line": 154,
        "fullcodeline": "'comment': 'User {0} is present and up to date'.format(name)}"
    },
    {
        "line": 159,
        "fullcodeline": "ret['comment'] = 'The following group(s) are not present: ' \\"
    },
    {
        "line": 161,
        "fullcodeline": "ret['result'] = False"
    },
    {
        "line": 212,
        "fullcodeline": "ret['result'] = None"
    },
    {
        "line": 213,
        "fullcodeline": "ret['comment'] = ('The following user attributes are set to be '"
    },
    {
        "line": 222,
        "fullcodeline": "lshad = __salt__['shadow.info'](name)"
    },
    {
        "line": 276,
        "fullcodeline": "ret['comment'] = 'Updated user {0}'.format(name)"
    },
    {
        "line": 301,
        "fullcodeline": "ret['comment'] = 'These values could not be changed: {0}'.format("
    },
    {
        "line": 304,
        "fullcodeline": "ret['result'] = False"
    },
    {
        "line": 310,
        "fullcodeline": "ret['result'] = None"
    },
    {
        "line": 311,
        "fullcodeline": "ret['comment'] = 'User {0} set to be added'.format(name)"
    },
    {
        "line": 314,
        "fullcodeline": "groups.extend(present_optgroups)"
    },
    {
        "line": 330,
        "fullcodeline": "ret['comment'] = 'New user {0} created'.format(name)"
    },
    {
        "line": 331,
        "fullcodeline": "ret['changes'] = __salt__['user.info'](name)"
    },
    {
        "line": 405,
        "fullcodeline": "ret['comment'] = 'Failed to create new user {0}'.format(name)"
    },
    {
        "line": 406,
        "fullcodeline": "ret['result'] = False"
    },
    {
        "line": 169,
        "fullcodeline": "log.debug('Optional group \"{0}\" for user \"{1}\" is not '"
    },
    {
        "line": 215,
        "fullcodeline": "for key, val in changes.items():"
    },
    {
        "line": 265,
        "fullcodeline": "if lshad['passwd'] != password:"
    },
    {
        "line": 272,
        "fullcodeline": "for key in spost:"
    },
    {
        "line": 228,
        "fullcodeline": "if key == 'date':"
    },
    {
        "line": 235,
        "fullcodeline": "if key == 'homeDoesNotExist':"
    },
    {
        "line": 240,
        "fullcodeline": "if key == 'mindays':"
    },
    {
        "line": 243,
        "fullcodeline": "if key == 'maxdays':"
    },
    {
        "line": 246,
        "fullcodeline": "if key == 'inactdays':"
    },
    {
        "line": 249,
        "fullcodeline": "if key == 'warndays':"
    },
    {
        "line": 252,
        "fullcodeline": "if key == 'expire':"
    },
    {
        "line": 255,
        "fullcodeline": "if key == 'groups':"
    },
    {
        "line": 266,
        "fullcodeline": "spost = __salt__['shadow.info'](name)"
    },
    {
        "line": 269,
        "fullcodeline": "if post[key] != pre[key]:"
    },
    {
        "line": 316,
        "fullcodeline": "groups = present_optgroups[:]"
    },
    {
        "line": 332,
        "fullcodeline": "if 'shadow.info' in __salt__ and not salt.utils.is_windows():"
    },
    {
        "line": 178,
        "fullcodeline": "log.warning('Group \"{0}\" specified in both groups and '"
    },
    {
        "line": 218,
        "fullcodeline": "ret['comment'] += '{0}: {1}\\n'.format(key, val)"
    },
    {
        "line": 225,
        "fullcodeline": "if key == 'passwd' and not empty_password:"
    },
    {
        "line": 226,
        "fullcodeline": "__salt__['shadow.set_password'](name, password)"
    },
    {
        "line": 229,
        "fullcodeline": "__salt__['shadow.set_date'](name, date)"
    },
    {
        "line": 232,
        "fullcodeline": "if key == 'home' and 'homeDoesNotExist' not in changes:"
    },
    {
        "line": 233,
        "fullcodeline": "__salt__['user.chhome'](name, val, False)"
    },
    {
        "line": 236,
        "fullcodeline": "__salt__['user.chhome'](name, val, True)"
    },
    {
        "line": 241,
        "fullcodeline": "__salt__['shadow.set_mindays'](name, mindays)"
    },
    {
        "line": 244,
        "fullcodeline": "__salt__['shadow.set_maxdays'](name, maxdays)"
    },
    {
        "line": 247,
        "fullcodeline": "__salt__['shadow.set_inactdays'](name, inactdays)"
    },
    {
        "line": 250,
        "fullcodeline": "__salt__['shadow.set_warndays'](name, warndays)"
    },
    {
        "line": 253,
        "fullcodeline": "__salt__['shadow.set_expire'](name, expire)"
    },
    {
        "line": 256,
        "fullcodeline": "__salt__['user.ch{0}'.format(key)]("
    },
    {
        "line": 260,
        "fullcodeline": "__salt__['user.ch{0}'.format(key)](name, val)"
    },
    {
        "line": 333,
        "fullcodeline": "if password and not empty_password:"
    },
    {
        "line": 160,
        "fullcodeline": "'{0}'.format(','.join(missing_groups))"
    },
    {
        "line": 216,
        "fullcodeline": "if key == 'password':"
    },
    {
        "line": 257,
        "fullcodeline": "name, val, not remove_groups"
    },
    {
        "line": 273,
        "fullcodeline": "if lshad[key] != spost[key]:"
    },
    {
        "line": 334,
        "fullcodeline": "__salt__['shadow.set_password'](name, password)"
    },
    {
        "line": 335,
        "fullcodeline": "spost = __salt__['shadow.info'](name)"
    },
    {
        "line": 343,
        "fullcodeline": "__salt__['shadow.set_date'](name, date)"
    },
    {
        "line": 344,
        "fullcodeline": "spost = __salt__['shadow.info'](name)"
    },
    {
        "line": 352,
        "fullcodeline": "__salt__['shadow.set_mindays'](name, mindays)"
    },
    {
        "line": 353,
        "fullcodeline": "spost = __salt__['shadow.info'](name)"
    },
    {
        "line": 361,
        "fullcodeline": "__salt__['shadow.set_maxdays'](name, maxdays)"
    },
    {
        "line": 362,
        "fullcodeline": "spost = __salt__['shadow.info'](name)"
    },
    {
        "line": 370,
        "fullcodeline": "__salt__['shadow.set_inactdays'](name, inactdays)"
    },
    {
        "line": 371,
        "fullcodeline": "spost = __salt__['shadow.info'](name)"
    },
    {
        "line": 379,
        "fullcodeline": "__salt__['shadow.set_warndays'](name, warndays)"
    },
    {
        "line": 380,
        "fullcodeline": "spost = __salt__['shadow.info'](name)"
    },
    {
        "line": 388,
        "fullcodeline": "__salt__['shadow.set_expire'](name, expire)"
    },
    {
        "line": 389,
        "fullcodeline": "spost = __salt__['shadow.info'](name)"
    },
    {
        "line": 396,
        "fullcodeline": "elif salt.utils.is_windows():"
    },
    {
        "line": 166,
        "fullcodeline": "if __salt__['group.info'](x)]"
    },
    {
        "line": 217,
        "fullcodeline": "val = 'XXX-REDACTED-XXX'"
    },
    {
        "line": 345,
        "fullcodeline": "if spost['lstchg'] != date:"
    },
    {
        "line": 354,
        "fullcodeline": "if spost['min'] != mindays:"
    },
    {
        "line": 363,
        "fullcodeline": "if spost['max'] != maxdays:"
    },
    {
        "line": 372,
        "fullcodeline": "if spost['inact'] != inactdays:"
    },
    {
        "line": 381,
        "fullcodeline": "if spost['warn'] != warndays:"
    },
    {
        "line": 390,
        "fullcodeline": "if spost['expire'] != expire:"
    },
    {
        "line": 397,
        "fullcodeline": "if password and not empty_password:"
    },
    {
        "line": 237,
        "fullcodeline": "if not os.path.isdir(val):"
    },
    {
        "line": 337,
        "fullcodeline": "ret['comment'] = 'User {0} created but failed to set' \\"
    },
    {
        "line": 340,
        "fullcodeline": "ret['result'] = False"
    },
    {
        "line": 346,
        "fullcodeline": "ret['comment'] = 'User {0} created but failed to set' \\"
    },
    {
        "line": 349,
        "fullcodeline": "ret['result'] = False"
    },
    {
        "line": 355,
        "fullcodeline": "ret['comment'] = 'User {0} created but failed to set' \\"
    },
    {
        "line": 358,
        "fullcodeline": "ret['result'] = False"
    },
    {
        "line": 364,
        "fullcodeline": "ret['comment'] = 'User {0} created but failed to set' \\"
    },
    {
        "line": 367,
        "fullcodeline": "ret['result'] = False"
    },
    {
        "line": 373,
        "fullcodeline": "ret['comment'] = 'User {0} created but failed to set' \\"
    },
    {
        "line": 376,
        "fullcodeline": "ret['result'] = False"
    },
    {
        "line": 382,
        "fullcodeline": "ret['comment'] = 'User {0} created but failed to set' \\"
    },
    {
        "line": 385,
        "fullcodeline": "ret['result'] = False"
    },
    {
        "line": 391,
        "fullcodeline": "ret['comment'] = 'User {0} created but failed to set' \\"
    },
    {
        "line": 394,
        "fullcodeline": "ret['result'] = False"
    },
    {
        "line": 168,
        "fullcodeline": "if x not in present_optgroups]:"
    },
    {
        "line": 398,
        "fullcodeline": "if not __salt__['user.setpassword'](name, password):"
    },
    {
        "line": 399,
        "fullcodeline": "ret['comment'] = 'User {0} created but failed to set' \\"
    },
    {
        "line": 402,
        "fullcodeline": "ret['result'] = False"
    }
]