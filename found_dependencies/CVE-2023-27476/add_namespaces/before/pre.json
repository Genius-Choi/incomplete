[
    {
        "line": 5,
        "fullcodeline": "namespaces = Namespaces()"
    },
    {
        "line": 7,
        "fullcodeline": "ns_keys = [(x, namespaces.get_namespace(x)) for x in ns_keys]"
    },
    {
        "line": 2,
        "fullcodeline": "if isinstance(ns_keys, str):"
    },
    {
        "line": 9,
        "fullcodeline": "if etree.__name__ != 'lxml.etree':"
    },
    {
        "line": 3,
        "fullcodeline": "ns_keys = [ns_keys]"
    },
    {
        "line": 13,
        "fullcodeline": "existing_namespaces = set()"
    },
    {
        "line": 25,
        "fullcodeline": "new_map = root.nsmap"
    },
    {
        "line": 30,
        "fullcodeline": "new_root = etree.Element(root.tag, nsmap=new_map)"
    },
    {
        "line": 14,
        "fullcodeline": "for elem in root.iter():"
    },
    {
        "line": 18,
        "fullcodeline": "for key, link in ns_keys:"
    },
    {
        "line": 26,
        "fullcodeline": "for key, link in ns_keys:"
    },
    {
        "line": 32,
        "fullcodeline": "for a, v in list(root.items()):"
    },
    {
        "line": 35,
        "fullcodeline": "for child in root:"
    },
    {
        "line": 33,
        "fullcodeline": "new_root.set(a, v)"
    },
    {
        "line": 36,
        "fullcodeline": "new_root.append(deepcopy(child))"
    },
    {
        "line": 15,
        "fullcodeline": "if elem.tag[0] == \"{\":"
    },
    {
        "line": 19,
        "fullcodeline": "if link is not None and key not in existing_namespaces:"
    },
    {
        "line": 27,
        "fullcodeline": "if link is not None:"
    },
    {
        "line": 17,
        "fullcodeline": "existing_namespaces.add(namespaces.get_namespace_from_url(uri))"
    },
    {
        "line": 20,
        "fullcodeline": "root.set(\"xmlns:%s\" % key, link)"
    },
    {
        "line": 28,
        "fullcodeline": "new_map[key] = link"
    },
    {
        "line": 16,
        "fullcodeline": "uri, tag = elem.tag[1:].split(\"}\")"
    }
]