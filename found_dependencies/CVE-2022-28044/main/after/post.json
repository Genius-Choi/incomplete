[
    {
        "line": 3,
        "fullcodeline": "bool lrzcat = false, compat = false, recurse = false;"
    },
    {
        "line": 4,
        "fullcodeline": "bool options_file = false, conf_file_compression_set = false; /* for environment and tracking of compression setting */"
    },
    {
        "line": 8,
        "fullcodeline": "bool nice_set = false;"
    },
    {
        "line": 13,
        "fullcodeline": "char *endptr = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "control = &base_control;"
    },
    {
        "line": 17,
        "fullcodeline": "initialise_control(control);"
    },
    {
        "line": 19,
        "fullcodeline": "av = basename(argv[0]);"
    },
    {
        "line": 35,
        "fullcodeline": "CrcGenerateTable();"
    },
    {
        "line": 45,
        "fullcodeline": "eptr = getenv(\"LRZIP\");"
    },
    {
        "line": 251,
        "fullcodeline": "argc -= optind;"
    },
    {
        "line": 252,
        "fullcodeline": "argv += optind;"
    },
    {
        "line": 279,
        "fullcodeline": "setup_overhead(control);"
    },
    {
        "line": 283,
        "fullcodeline": "control->current_priority = getpriority(PRIO_PROCESS, 0);"
    },
    {
        "line": 20,
        "fullcodeline": "if (!strcmp(av, \"lrunzip\"))"
    },
    {
        "line": 46,
        "fullcodeline": "if (eptr == NULL)"
    },
    {
        "line": 50,
        "fullcodeline": "if (options_file && (control->flags & FLAG_NOT_LZMA))\t\t/* if some compression set in lrzip.conf    */"
    },
    {
        "line": 53,
        "fullcodeline": "while ((c = getopt_long(argc, argv, compat ? coptions : loptions, long_options, &i)) != -1) {"
    },
    {
        "line": 261,
        "fullcodeline": "if (VERBOSE && !SHOW_PROGRESS) {"
    },
    {
        "line": 266,
        "fullcodeline": "if (UNLIMITED && control->window) {"
    },
    {
        "line": 271,
        "fullcodeline": "if (argc < 1)"
    },
    {
        "line": 274,
        "fullcodeline": "if (UNLIMITED && STDIN) {"
    },
    {
        "line": 302,
        "fullcodeline": "for (i = 0; i <= argc; i++) {"
    },
    {
        "line": 21,
        "fullcodeline": "control->flags |= FLAG_DECOMPRESS;"
    },
    {
        "line": 47,
        "fullcodeline": "options_file = read_config(control);"
    },
    {
        "line": 51,
        "fullcodeline": "conf_file_compression_set = true;\t\t\t/* need this to allow command line override */"
    },
    {
        "line": 262,
        "fullcodeline": "print_err(\"Cannot have -v and -q options. -v wins.\\n\");"
    },
    {
        "line": 263,
        "fullcodeline": "control->flags |= FLAG_SHOW_PROGRESS;"
    },
    {
        "line": 267,
        "fullcodeline": "print_err(\"If -U used, cannot specify a window size with -w.\\n\");"
    },
    {
        "line": 268,
        "fullcodeline": "control->window = 0;"
    },
    {
        "line": 272,
        "fullcodeline": "control->flags |= FLAG_STDIN;"
    },
    {
        "line": 275,
        "fullcodeline": "print_err(\"Cannot have -U and stdin, unlimited mode disabled.\\n\");"
    },
    {
        "line": 276,
        "fullcodeline": "control->flags &= ~FLAG_UNLIMITED;"
    },
    {
        "line": 303,
        "fullcodeline": "char *dirlist = NULL, *infile = NULL;"
    },
    {
        "line": 304,
        "fullcodeline": "int direntries = 0, curentry = 0;"
    },
    {
        "line": 345,
        "fullcodeline": "control->infile = infile;"
    },
    {
        "line": 368,
        "fullcodeline": "sigemptyset(&handler.sa_mask);"
    },
    {
        "line": 369,
        "fullcodeline": "handler.sa_flags = 0;"
    },
    {
        "line": 370,
        "fullcodeline": "handler.sa_handler = &sighandler;"
    },
    {
        "line": 371,
        "fullcodeline": "sigaction(SIGTERM, &handler, 0);"
    },
    {
        "line": 372,
        "fullcodeline": "sigaction(SIGINT, &handler, 0);"
    },
    {
        "line": 397,
        "fullcodeline": "setup_ram(control);"
    },
    {
        "line": 398,
        "fullcodeline": "show_summary();"
    },
    {
        "line": 400,
        "fullcodeline": "gettimeofday(&start_time, NULL);"
    },
    {
        "line": 405,
        "fullcodeline": "memcpy(&local_control, &base_control, sizeof(rzip_control));"
    },
    {
        "line": 414,
        "fullcodeline": "gettimeofday(&end_time, NULL);"
    },
    {
        "line": 415,
        "fullcodeline": "total_time = (end_time.tv_sec + (double)end_time.tv_usec / 1000000) -"
    },
    {
        "line": 417,
        "fullcodeline": "hours = (int)total_time / 3600;"
    },
    {
        "line": 418,
        "fullcodeline": "minutes = (int)(total_time / 60) % 60;"
    },
    {
        "line": 419,
        "fullcodeline": "seconds = total_time - hours * 3600 - minutes * 60;"
    },
    {
        "line": 255,
        "fullcodeline": "if (argc > 1)"
    },
    {
        "line": 285,
        "fullcodeline": "if (!NO_COMPRESS) {"
    },
    {
        "line": 306,
        "fullcodeline": "if (i < argc)"
    },
    {
        "line": 335,
        "fullcodeline": "if (INFO && STDIN)"
    },
    {
        "line": 349,
        "fullcodeline": "if ((control->outname && (strcmp(control->outname, \"-\") == 0)) ||"
    },
    {
        "line": 359,
        "fullcodeline": "if (!STDOUT) {"
    },
    {
        "line": 374,
        "fullcodeline": "if (!FORCE_REPLACE) {"
    },
    {
        "line": 402,
        "fullcodeline": "if (unlikely((STDIN || STDOUT) && ENCRYPT))"
    },
    {
        "line": 406,
        "fullcodeline": "if (DECOMPRESS || TEST_ONLY)"
    },
    {
        "line": 420,
        "fullcodeline": "if (!INFO)"
    },
    {
        "line": 22,
        "fullcodeline": "else if (!strcmp(av, \"lrzcat\")) {"
    },
    {
        "line": 48,
        "fullcodeline": "else if (!strstr(eptr,\"NOCONFIG\"))"
    },
    {
        "line": 66,
        "fullcodeline": "control->flags &= ~FLAG_NOT_LZMA; /* must clear all compressions first */"
    },
    {
        "line": 78,
        "fullcodeline": "conf_file_compression_set = false;"
    },
    {
        "line": 81,
        "fullcodeline": "control->flags &= ~FLAG_NOT_LZMA;\t\t\t/* clear alternate compression flags */"
    },
    {
        "line": 91,
        "fullcodeline": "control->flags |= FLAG_CHECK;"
    },
    {
        "line": 92,
        "fullcodeline": "control->flags |= FLAG_HASH;"
    },
    {
        "line": 95,
        "fullcodeline": "control->flags |= FLAG_DECOMPRESS;"
    },
    {
        "line": 98,
        "fullcodeline": "control->flags &= ~FLAG_KEEP_FILES;"
    },
    {
        "line": 101,
        "fullcodeline": "control->flags |= FLAG_ENCRYPT;"
    },
    {
        "line": 102,
        "fullcodeline": "control->passphrase = optarg;"
    },
    {
        "line": 105,
        "fullcodeline": "control->flags |= FLAG_FORCE_REPLACE;"
    },
    {
        "line": 108,
        "fullcodeline": "usage(compat);"
    },
    {
        "line": 109,
        "fullcodeline": "exit(0);"
    },
    {
        "line": 112,
        "fullcodeline": "control->flags |= FLAG_HASH;"
    },
    {
        "line": 115,
        "fullcodeline": "control->flags |= FLAG_INFO;"
    },
    {
        "line": 116,
        "fullcodeline": "control->flags &= ~FLAG_DECOMPRESS;"
    },
    {
        "line": 125,
        "fullcodeline": "control->flags |= FLAG_KEEP_BROKEN;"
    },
    {
        "line": 132,
        "fullcodeline": "control->compression_level = strtol(optarg, &endptr, 10);"
    },
    {
        "line": 139,
        "fullcodeline": "control->ramsize = strtol(optarg, &endptr, 10) * 1024 * 1024 * 100;"
    },
    {
        "line": 144,
        "fullcodeline": "nice_set = true;"
    },
    {
        "line": 145,
        "fullcodeline": "control->nice_val = strtol(optarg, &endptr, 10);"
    },
    {
        "line": 156,
        "fullcodeline": "control->outname = optarg;"
    },
    {
        "line": 157,
        "fullcodeline": "dealloc(control->suffix);"
    },
    {
        "line": 158,
        "fullcodeline": "control->suffix = strdup(\"\");"
    },
    {
        "line": 165,
        "fullcodeline": "control->outdir = malloc(strlen(optarg) + 2);"
    },
    {
        "line": 168,
        "fullcodeline": "strcpy(control->outdir,optarg);"
    },
    {
        "line": 173,
        "fullcodeline": "control->threads = strtol(optarg, &endptr, 10);"
    },
    {
        "line": 180,
        "fullcodeline": "control->flags |= FLAG_SHOW_PROGRESS;"
    },
    {
        "line": 183,
        "fullcodeline": "control->flags &= ~FLAG_SHOW_PROGRESS;"
    },
    {
        "line": 186,
        "fullcodeline": "recurse = true;"
    },
    {
        "line": 193,
        "fullcodeline": "dealloc(control->suffix);"
    },
    {
        "line": 194,
        "fullcodeline": "control->suffix = strdup(optarg);"
    },
    {
        "line": 203,
        "fullcodeline": "control->flags |= FLAG_TEST_ONLY;"
    },
    {
        "line": 206,
        "fullcodeline": "control->flags &= ~FLAG_THRESHOLD;"
    },
    {
        "line": 209,
        "fullcodeline": "control->flags |= FLAG_UNLIMITED;"
    },
    {
        "line": 223,
        "fullcodeline": "control->msgout = stdout;"
    },
    {
        "line": 224,
        "fullcodeline": "print_output(\"lrzip version %s\\n\", PACKAGE_VERSION);"
    },
    {
        "line": 225,
        "fullcodeline": "exit(0);"
    },
    {
        "line": 228,
        "fullcodeline": "control->window = strtol(optarg, &endptr, 10);"
    },
    {
        "line": 243,
        "fullcodeline": "control->compression_level = c - '0';"
    },
    {
        "line": 246,
        "fullcodeline": "usage(compat);"
    },
    {
        "line": 256,
        "fullcodeline": "failure(\"Cannot specify output filename with more than 1 file\\n\");"
    },
    {
        "line": 258,
        "fullcodeline": "failure(\"Cannot specify output filename with recursive\\n\");"
    },
    {
        "line": 307,
        "fullcodeline": "infile = argv[i];"
    },
    {
        "line": 332,
        "fullcodeline": "recurse_dirlist(infile, &dirlist, &direntries);"
    },
    {
        "line": 336,
        "fullcodeline": "failure(\"Will not get file info from STDIN\\n\");"
    },
    {
        "line": 343,
        "fullcodeline": "infile = dirlist + MAX_PATH_LEN * curentry++;"
    },
    {
        "line": 351,
        "fullcodeline": "set_stdout(control);"
    },
    {
        "line": 354,
        "fullcodeline": "control->msgout = stderr;"
    },
    {
        "line": 355,
        "fullcodeline": "control->outFILE = stdout;"
    },
    {
        "line": 356,
        "fullcodeline": "register_outputfile(control, control->msgout);"
    },
    {
        "line": 360,
        "fullcodeline": "control->msgout = stdout;"
    },
    {
        "line": 361,
        "fullcodeline": "register_outputfile(control, control->msgout);"
    },
    {
        "line": 365,
        "fullcodeline": "control->inFILE = stdin;"
    },
    {
        "line": 403,
        "fullcodeline": "failure(\"Unable to work from STDIO while reading password\\n\");"
    },
    {
        "line": 407,
        "fullcodeline": "decompress_file(&local_control);"
    },
    {
        "line": 416,
        "fullcodeline": "(start_time.tv_sec + (double)start_time.tv_usec / 1000000);"
    },
    {
        "line": 421,
        "fullcodeline": "print_progress(\"Total time: %02d:%02d:%05.2f\\n\", hours, minutes, seconds);"
    },
    {
        "line": 23,
        "fullcodeline": "control->flags |= FLAG_DECOMPRESS | FLAG_STDOUT;"
    },
    {
        "line": 24,
        "fullcodeline": "lrzcat = true;"
    },
    {
        "line": 49,
        "fullcodeline": "options_file = read_config(control);"
    },
    {
        "line": 63,
        "fullcodeline": "if ((control->flags & FLAG_NOT_LZMA) && conf_file_compression_set == false)"
    },
    {
        "line": 67,
        "fullcodeline": "if (c == 'b')"
    },
    {
        "line": 133,
        "fullcodeline": "if (control->compression_level < 1 || control->compression_level > 9)"
    },
    {
        "line": 146,
        "fullcodeline": "if (control->nice_val < PRIO_MIN || control->nice_val > PRIO_MAX)"
    },
    {
        "line": 154,
        "fullcodeline": "if (unlikely(STDOUT))"
    },
    {
        "line": 163,
        "fullcodeline": "if (unlikely(STDOUT))"
    },
    {
        "line": 166,
        "fullcodeline": "if (control->outdir == NULL)"
    },
    {
        "line": 169,
        "fullcodeline": "if (strcmp(optarg+strlen(optarg) - 1, \"/\")) \t/* need a trailing slash */"
    },
    {
        "line": 174,
        "fullcodeline": "if (control->threads < 1)"
    },
    {
        "line": 191,
        "fullcodeline": "if (unlikely(STDOUT))"
    },
    {
        "line": 201,
        "fullcodeline": "if (!KEEP_FILES)"
    },
    {
        "line": 213,
        "fullcodeline": "if (!(control->flags & FLAG_SHOW_PROGRESS))"
    },
    {
        "line": 229,
        "fullcodeline": "if (control->window < 1)"
    },
    {
        "line": 287,
        "fullcodeline": "if (unlikely(setpriority(PRIO_PROCESS, 0, control->nice_val/2) == -1)) {"
    },
    {
        "line": 311,
        "fullcodeline": "if ((strcmp(infile, \"-\") == 0))"
    },
    {
        "line": 330,
        "fullcodeline": "if (unlikely(STDIN || STDOUT))"
    },
    {
        "line": 339,
        "fullcodeline": "if (curentry >= direntries) {"
    },
    {
        "line": 350,
        "fullcodeline": "(!control->outname && STDIN) || lrzcat)"
    },
    {
        "line": 375,
        "fullcodeline": "if (STDIN && isatty(fileno((FILE *)stdin))) {"
    },
    {
        "line": 380,
        "fullcodeline": "if (!TEST_ONLY && STDOUT && isatty(fileno((FILE *)stdout)) && !compat) {"
    },
    {
        "line": 388,
        "fullcodeline": "if (!DECOMPRESS) {"
    },
    {
        "line": 64,
        "fullcodeline": "failure(\"Can only use one of -l, -b, -g, -z or -n\\n\");"
    },
    {
        "line": 68,
        "fullcodeline": "control->flags |= FLAG_BZIP2_COMPRESS;"
    },
    {
        "line": 85,
        "fullcodeline": "control->flags |= FLAG_KEEP_FILES;"
    },
    {
        "line": 86,
        "fullcodeline": "set_stdout(control);"
    },
    {
        "line": 120,
        "fullcodeline": "control->flags |= FLAG_KEEP_FILES;"
    },
    {
        "line": 129,
        "fullcodeline": "license();"
    },
    {
        "line": 130,
        "fullcodeline": "exit(0);"
    },
    {
        "line": 134,
        "fullcodeline": "failure(\"Invalid compression level (must be 1-9)\\n\");"
    },
    {
        "line": 136,
        "fullcodeline": "failure(\"Extra characters after compression level: \\'%s\\'\\n\", endptr);"
    },
    {
        "line": 141,
        "fullcodeline": "failure(\"Extra characters after ramsize: \\'%s\\'\\n\", endptr);"
    },
    {
        "line": 147,
        "fullcodeline": "failure(\"Invalid nice value (must be %d...%d)\\n\", PRIO_MIN, PRIO_MAX);"
    },
    {
        "line": 149,
        "fullcodeline": "failure(\"Extra characters after nice level: \\'%s\\'\\n\", endptr);"
    },
    {
        "line": 153,
        "fullcodeline": "failure(\"Cannot have -o and -O together\\n\");"
    },
    {
        "line": 155,
        "fullcodeline": "failure(\"Cannot specify an output filename when outputting to stdout\\n\");"
    },
    {
        "line": 162,
        "fullcodeline": "failure(\"Cannot have options -o and -O together\\n\");"
    },
    {
        "line": 164,
        "fullcodeline": "failure(\"Cannot specify an output directory when outputting to stdout\\n\");"
    },
    {
        "line": 167,
        "fullcodeline": "fatal(\"Failed to allocate for outdir\\n\");"
    },
    {
        "line": 170,
        "fullcodeline": "strcat(control->outdir, \"/\");"
    },
    {
        "line": 175,
        "fullcodeline": "failure(\"Must have at least one thread\\n\");"
    },
    {
        "line": 177,
        "fullcodeline": "failure(\"Extra characters after number of threads: \\'%s\\'\\n\", endptr);"
    },
    {
        "line": 190,
        "fullcodeline": "failure(\"Specified output filename already, can't specify an extension.\\n\");"
    },
    {
        "line": 192,
        "fullcodeline": "failure(\"Cannot specify a filename suffix when outputting to stdout\\n\");"
    },
    {
        "line": 198,
        "fullcodeline": "failure(\"Cannot specify an output file name when just testing.\\n\");"
    },
    {
        "line": 200,
        "fullcodeline": "control->flags |= FLAG_KEEP_FILES;"
    },
    {
        "line": 202,
        "fullcodeline": "failure(\"Doubt that you want to delete a file when just testing.\\n\");"
    },
    {
        "line": 214,
        "fullcodeline": "control->flags |= FLAG_SHOW_PROGRESS;"
    },
    {
        "line": 230,
        "fullcodeline": "failure(\"Window must be positive\\n\");"
    },
    {
        "line": 232,
        "fullcodeline": "failure(\"Extra characters after window size: \\'%s\\'\\n\", endptr);"
    },
    {
        "line": 288,
        "fullcodeline": "print_err(\"Warning, unable to set nice value %d...Resetting to %d\\n\","
    },
    {
        "line": 290,
        "fullcodeline": "setpriority(PRIO_PROCESS, 0, (control->nice_val=control->current_priority));"
    },
    {
        "line": 293,
        "fullcodeline": "if (unlikely(setpriority(PRIO_PROCESS, 0, control->nice_val) == -1)) {"
    },
    {
        "line": 308,
        "fullcodeline": "else if (!(i == 0 && STDIN))"
    },
    {
        "line": 312,
        "fullcodeline": "control->flags |= FLAG_STDIN;"
    },
    {
        "line": 331,
        "fullcodeline": "failure(\"Cannot use -r recursive with STDIO\\n\");"
    },
    {
        "line": 340,
        "fullcodeline": "infile = NULL;"
    },
    {
        "line": 376,
        "fullcodeline": "print_err(\"Will not read stdin from a terminal. Use -f to override.\\n\");"
    },
    {
        "line": 377,
        "fullcodeline": "usage(compat);"
    },
    {
        "line": 378,
        "fullcodeline": "exit (1);"
    },
    {
        "line": 381,
        "fullcodeline": "print_err(\"Will not write stdout to a terminal. Use -f to override.\\n\");"
    },
    {
        "line": 382,
        "fullcodeline": "usage(compat);"
    },
    {
        "line": 383,
        "fullcodeline": "exit (1);"
    },
    {
        "line": 389,
        "fullcodeline": "print_err(\"Can only check file written on decompression.\\n\");"
    },
    {
        "line": 390,
        "fullcodeline": "control->flags &= ~FLAG_CHECK;"
    },
    {
        "line": 25,
        "fullcodeline": "} else if (!strcmp(av, \"lrz\")) {"
    },
    {
        "line": 294,
        "fullcodeline": "print_err(\"Warning, unable to set nice value %d...Resetting to %d\\n\","
    },
    {
        "line": 296,
        "fullcodeline": "setpriority(PRIO_PROCESS, 0, (control->nice_val=control->current_priority));"
    },
    {
        "line": 314,
        "fullcodeline": "bool isdir = false;"
    },
    {
        "line": 319,
        "fullcodeline": "isdir = S_ISDIR(istat.st_mode);"
    },
    {
        "line": 409,
        "fullcodeline": "get_fileinfo(&local_control);"
    },
    {
        "line": 27,
        "fullcodeline": "control->flags &= ~FLAG_SHOW_PROGRESS;"
    },
    {
        "line": 28,
        "fullcodeline": "control->flags &= ~FLAG_KEEP_FILES;"
    },
    {
        "line": 29,
        "fullcodeline": "compat = true;"
    },
    {
        "line": 30,
        "fullcodeline": "long_options[1].name = \"stdout\";"
    },
    {
        "line": 31,
        "fullcodeline": "long_options[11].name = \"keep\";"
    },
    {
        "line": 69,
        "fullcodeline": "else if (c == 'g')"
    },
    {
        "line": 215,
        "fullcodeline": "else if (!(control->flags & FLAG_VERBOSITY) && !(control->flags & FLAG_VERBOSITY_MAX))"
    },
    {
        "line": 317,
        "fullcodeline": "if (unlikely(stat(infile, &istat)))"
    },
    {
        "line": 320,
        "fullcodeline": "if (!recurse && (isdir || !S_ISREG(istat.st_mode))) {"
    },
    {
        "line": 324,
        "fullcodeline": "if (recurse && !isdir)"
    },
    {
        "line": 411,
        "fullcodeline": "compress_file(&local_control);"
    },
    {
        "line": 70,
        "fullcodeline": "control->flags |= FLAG_ZLIB_COMPRESS;"
    },
    {
        "line": 216,
        "fullcodeline": "control->flags |= FLAG_VERBOSITY;"
    },
    {
        "line": 318,
        "fullcodeline": "failure(\"Failed to stat %s\\n\", infile);"
    },
    {
        "line": 321,
        "fullcodeline": "failure(\"lrzip only works directly on regular FILES.\\n\""
    },
    {
        "line": 325,
        "fullcodeline": "failure(\"%s not a directory, -r recursive needs a directory\\n\", infile);"
    },
    {
        "line": 392,
        "fullcodeline": "print_err(\"Can't check file written when writing to stdout. Checking disabled.\\n\");"
    },
    {
        "line": 393,
        "fullcodeline": "control->flags &= ~FLAG_CHECK;"
    },
    {
        "line": 71,
        "fullcodeline": "else if (c == 'l')"
    },
    {
        "line": 217,
        "fullcodeline": "else if ((control->flags & FLAG_VERBOSITY)) {"
    },
    {
        "line": 72,
        "fullcodeline": "control->flags |= FLAG_LZO_COMPRESS;"
    },
    {
        "line": 218,
        "fullcodeline": "control->flags &= ~FLAG_VERBOSITY;"
    },
    {
        "line": 219,
        "fullcodeline": "control->flags |= FLAG_VERBOSITY_MAX;"
    },
    {
        "line": 73,
        "fullcodeline": "else if (c == 'n')"
    },
    {
        "line": 74,
        "fullcodeline": "control->flags |= FLAG_NO_COMPRESS;"
    },
    {
        "line": 75,
        "fullcodeline": "else if (c == 'z')"
    },
    {
        "line": 76,
        "fullcodeline": "control->flags |= FLAG_ZPAQ_COMPRESS;"
    }
]