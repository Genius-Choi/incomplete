[
    {
        "line": 5,
        "fullcodeline": "size_t r = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "curdir = string(extract_dir);"
    },
    {
        "line": 12,
        "fullcodeline": "r = aread(&c, 1);"
    },
    {
        "line": 13,
        "fullcodeline": "if (r == 0)"
    },
    {
        "line": 16,
        "fullcodeline": "if(c == 'D')"
    },
    {
        "line": 19,
        "fullcodeline": "chunk_size = fread32();"
    },
    {
        "line": 24,
        "fullcodeline": "try_aread(tmp, chunk_size + 1);"
    },
    {
        "line": 25,
        "fullcodeline": "curdir = curdir + DELIM_STR + tmp;"
    },
    {
        "line": 26,
        "fullcodeline": "PRINT(FILES_PROCESSED, \"%s%s%s\\n\", BLANK_LINE, remove_leading_curdir(curdir).c_str(), DELIM_STR);"
    },
    {
        "line": 20,
        "fullcodeline": "if(NAME_BUFFER_SIZE < chunk_size + 1)"
    },
    {
        "line": 30,
        "fullcodeline": "if(true == check_if_path_has_dir_traversal(tmp))"
    },
    {
        "line": 35,
        "fullcodeline": "if(!std_out)"
    },
    {
        "line": 22,
        "fullcodeline": "abort(\"File path string is bigger than buffer size\");"
    },
    {
        "line": 32,
        "fullcodeline": "abort(\"Directory path contains directory traversal which is not allowed.\");"
    },
    {
        "line": 40,
        "fullcodeline": "mkdir(curdir.c_str(), 509);"
    },
    {
        "line": 44,
        "fullcodeline": "else if(c == 'U')"
    },
    {
        "line": 45,
        "fullcodeline": "curdir = curdir.substr(0, curdir.find_last_of(DELIM_STR)); // remove last sub dir from current path"
    },
    {
        "line": 46,
        "fullcodeline": "else if(c == 'F')"
    },
    {
        "line": 48,
        "fullcodeline": "chunk_size = fread32(); // read length of file name"
    },
    {
        "line": 53,
        "fullcodeline": "try_aread(tmp, chunk_size + 1); // read file name to 'tmp' with size 'chunk_size + 1'"
    },
    {
        "line": 62,
        "fullcodeline": "string buf2 = curdir + DELIM_STR + tmp;"
    },
    {
        "line": 63,
        "fullcodeline": "PRINT(FILES_PROCESSED, \"%s    %s\\n\", BLANK_LINE, tmp);"
    },
    {
        "line": 49,
        "fullcodeline": "if(NAME_BUFFER_SIZE < chunk_size + 1)"
    },
    {
        "line": 57,
        "fullcodeline": "if(true == check_if_path_has_dir_traversal(tmp))"
    },
    {
        "line": 64,
        "fullcodeline": "if(!std_out)"
    },
    {
        "line": 75,
        "fullcodeline": "abort(\"Source file is corrupted - try the -R flag to recover\");"
    },
    {
        "line": 51,
        "fullcodeline": "abort(\"File path string is bigger than buffer size\");"
    },
    {
        "line": 59,
        "fullcodeline": "abort(\"File path contains directory traversal which is not allowed.\");"
    },
    {
        "line": 66,
        "fullcodeline": "if(exists(buf2) && !force_flag)"
    },
    {
        "line": 72,
        "fullcodeline": "decompress_file(\"<stdout>\");"
    },
    {
        "line": 67,
        "fullcodeline": "abort(\"Destination file '%s' already exists - aborted\", buf2.c_str());"
    },
    {
        "line": 69,
        "fullcodeline": "decompress_file(buf2);"
    }
]