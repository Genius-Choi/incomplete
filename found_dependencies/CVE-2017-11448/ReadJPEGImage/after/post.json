[
    {
        "line": 5,
        "fullcodeline": "value[MagickPathExtent];"
    },
    {
        "line": 20,
        "fullcodeline": "scanline[1];"
    },
    {
        "line": 56,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 57,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 61,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 62,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 63,
        "fullcodeline": "debug=IsEventLogging();"
    },
    {
        "line": 64,
        "fullcodeline": "(void) debug;"
    },
    {
        "line": 65,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 66,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 80,
        "fullcodeline": "(void) ResetMagickMemory(&error_manager,0,sizeof(error_manager));"
    },
    {
        "line": 81,
        "fullcodeline": "(void) ResetMagickMemory(&jpeg_info,0,sizeof(jpeg_info));"
    },
    {
        "line": 82,
        "fullcodeline": "(void) ResetMagickMemory(&jpeg_error,0,sizeof(jpeg_error));"
    },
    {
        "line": 83,
        "fullcodeline": "jpeg_info.err=jpeg_std_error(&jpeg_error);"
    },
    {
        "line": 84,
        "fullcodeline": "jpeg_info.err->emit_message=(void (*)(j_common_ptr,int)) JPEGWarningHandler;"
    },
    {
        "line": 85,
        "fullcodeline": "jpeg_info.err->error_exit=(void (*)(j_common_ptr)) JPEGErrorHandler;"
    },
    {
        "line": 86,
        "fullcodeline": "memory_info=(MemoryInfo *) NULL;"
    },
    {
        "line": 87,
        "fullcodeline": "error_manager.exception=exception;"
    },
    {
        "line": 88,
        "fullcodeline": "error_manager.image=image;"
    },
    {
        "line": 100,
        "fullcodeline": "jpeg_info.client_data=(void *) &error_manager;"
    },
    {
        "line": 101,
        "fullcodeline": "jpeg_create_decompress(&jpeg_info);"
    },
    {
        "line": 102,
        "fullcodeline": "JPEGSourceManager(&jpeg_info,image);"
    },
    {
        "line": 103,
        "fullcodeline": "jpeg_set_marker_processor(&jpeg_info,JPEG_COM,ReadComment);"
    },
    {
        "line": 104,
        "fullcodeline": "option=GetImageOption(image_info,\"profile:skip\");"
    },
    {
        "line": 113,
        "fullcodeline": "i=(ssize_t) jpeg_read_header(&jpeg_info,TRUE);"
    },
    {
        "line": 121,
        "fullcodeline": "units=0;"
    },
    {
        "line": 133,
        "fullcodeline": "number_pixels=(MagickSizeType) image->columns*image->rows;"
    },
    {
        "line": 134,
        "fullcodeline": "option=GetImageOption(image_info,\"jpeg:size\");"
    },
    {
        "line": 187,
        "fullcodeline": "image->compression=JPEGCompression;"
    },
    {
        "line": 188,
        "fullcodeline": "image->interlace=JPEGInterlace;"
    },
    {
        "line": 190,
        "fullcodeline": "option=GetImageOption(image_info,\"jpeg:colors\");"
    },
    {
        "line": 199,
        "fullcodeline": "option=GetImageOption(image_info,\"jpeg:block-smoothing\");"
    },
    {
        "line": 203,
        "fullcodeline": "jpeg_info.dct_method=JDCT_FLOAT;"
    },
    {
        "line": 204,
        "fullcodeline": "option=GetImageOption(image_info,\"jpeg:dct-method\");"
    },
    {
        "line": 234,
        "fullcodeline": "option=GetImageOption(image_info,\"jpeg:fancy-upsampling\");"
    },
    {
        "line": 238,
        "fullcodeline": "(void) jpeg_start_decompress(&jpeg_info);"
    },
    {
        "line": 239,
        "fullcodeline": "image->columns=jpeg_info.output_width;"
    },
    {
        "line": 240,
        "fullcodeline": "image->rows=jpeg_info.output_height;"
    },
    {
        "line": 241,
        "fullcodeline": "image->depth=(size_t) jpeg_info.data_precision;"
    },
    {
        "line": 271,
        "fullcodeline": "option=GetImageOption(image_info,\"jpeg:colors\");"
    },
    {
        "line": 298,
        "fullcodeline": "JPEGSetImageQuality(&jpeg_info,image);"
    },
    {
        "line": 299,
        "fullcodeline": "JPEGSetImageSamplingFactor(&jpeg_info,image,exception);"
    },
    {
        "line": 300,
        "fullcodeline": "(void) FormatLocaleString(value,MagickPathExtent,\"%.20g\",(double)"
    },
    {
        "line": 302,
        "fullcodeline": "(void) SetImageProperty(image,\"jpeg:colorspace\",value,exception);"
    },
    {
        "line": 309,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 321,
        "fullcodeline": "memory_info=AcquireVirtualMemory((size_t) image->columns,"
    },
    {
        "line": 328,
        "fullcodeline": "jpeg_pixels=(JSAMPLE *) GetVirtualMemoryBlob(memory_info);"
    },
    {
        "line": 329,
        "fullcodeline": "(void) ResetMagickMemory(jpeg_pixels,0,image->columns*"
    },
    {
        "line": 369,
        "fullcodeline": "scanline[0]=(JSAMPROW) jpeg_pixels;"
    },
    {
        "line": 493,
        "fullcodeline": "jpeg_destroy_decompress(&jpeg_info);"
    },
    {
        "line": 494,
        "fullcodeline": "memory_info=RelinquishVirtualMemory(memory_info);"
    },
    {
        "line": 495,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 58,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 67,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 75,
        "fullcodeline": "if (GetBlobSize(image) < 107)"
    },
    {
        "line": 89,
        "fullcodeline": "if (setjmp(error_manager.error_recovery) != 0)"
    },
    {
        "line": 105,
        "fullcodeline": "if (IsOptionMember(\"ICC\",option) == MagickFalse)"
    },
    {
        "line": 107,
        "fullcodeline": "if (IsOptionMember(\"IPTC\",option) == MagickFalse)"
    },
    {
        "line": 109,
        "fullcodeline": "for (i=1; i < 16; i++)"
    },
    {
        "line": 114,
        "fullcodeline": "if ((image_info->colorspace == YCbCrColorspace) ||"
    },
    {
        "line": 122,
        "fullcodeline": "if ((jpeg_info.saw_JFIF_marker != 0) && (jpeg_info.X_density != 1) &&"
    },
    {
        "line": 129,
        "fullcodeline": "if (units == 1)"
    },
    {
        "line": 131,
        "fullcodeline": "if (units == 2)"
    },
    {
        "line": 135,
        "fullcodeline": "if ((option != (const char *) NULL) &&"
    },
    {
        "line": 191,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 200,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 205,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 235,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 266,
        "fullcodeline": "if (IsITUFaxImage(image) != MagickFalse)"
    },
    {
        "line": 272,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 276,
        "fullcodeline": "if ((jpeg_info.output_components == 1) && (jpeg_info.quantize_colors == 0))"
    },
    {
        "line": 285,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 303,
        "fullcodeline": "if (image_info->ping != MagickFalse)"
    },
    {
        "line": 310,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 315,
        "fullcodeline": "if ((jpeg_info.output_components != 1) &&"
    },
    {
        "line": 323,
        "fullcodeline": "if (memory_info == (MemoryInfo *) NULL)"
    },
    {
        "line": 334,
        "fullcodeline": "if (setjmp(error_manager.error_recovery) != 0)"
    },
    {
        "line": 345,
        "fullcodeline": "if (jpeg_info.quantize_colors != 0)"
    },
    {
        "line": 370,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 484,
        "fullcodeline": "if (status != MagickFalse)"
    },
    {
        "line": 496,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 59,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 69,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 76,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"InsufficientImageDataInFile\");"
    },
    {
        "line": 91,
        "fullcodeline": "jpeg_destroy_decompress(&jpeg_info);"
    },
    {
        "line": 94,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 95,
        "fullcodeline": "number_pixels=(MagickSizeType) image->columns*image->rows;"
    },
    {
        "line": 106,
        "fullcodeline": "jpeg_set_marker_processor(&jpeg_info,ICC_MARKER,ReadICCProfile);"
    },
    {
        "line": 108,
        "fullcodeline": "jpeg_set_marker_processor(&jpeg_info,IPTC_MARKER,ReadIPTCProfile);"
    },
    {
        "line": 110,
        "fullcodeline": "if ((i != 2) && (i != 13) && (i != 14))"
    },
    {
        "line": 116,
        "fullcodeline": "(image_info->colorspace == Rec709YCbCrColorspace))"
    },
    {
        "line": 117,
        "fullcodeline": "jpeg_info.out_color_space=JCS_YCbCr;"
    },
    {
        "line": 123,
        "fullcodeline": "(jpeg_info.Y_density != 1))"
    },
    {
        "line": 125,
        "fullcodeline": "image->resolution.x=(double) jpeg_info.X_density;"
    },
    {
        "line": 126,
        "fullcodeline": "image->resolution.y=(double) jpeg_info.Y_density;"
    },
    {
        "line": 127,
        "fullcodeline": "units=(size_t) jpeg_info.density_unit;"
    },
    {
        "line": 130,
        "fullcodeline": "image->units=PixelsPerInchResolution;"
    },
    {
        "line": 132,
        "fullcodeline": "image->units=PixelsPerCentimeterResolution;"
    },
    {
        "line": 136,
        "fullcodeline": "(jpeg_info.out_color_space != JCS_YCbCr))"
    },
    {
        "line": 150,
        "fullcodeline": "flags=ParseGeometry(option,&geometry_info);"
    },
    {
        "line": 153,
        "fullcodeline": "jpeg_calc_output_dimensions(&jpeg_info);"
    },
    {
        "line": 154,
        "fullcodeline": "image->magick_columns=jpeg_info.output_width;"
    },
    {
        "line": 155,
        "fullcodeline": "image->magick_rows=jpeg_info.output_height;"
    },
    {
        "line": 156,
        "fullcodeline": "scale_factor=1.0;"
    },
    {
        "line": 162,
        "fullcodeline": "jpeg_info.scale_num=1U;"
    },
    {
        "line": 163,
        "fullcodeline": "jpeg_info.scale_denom=(unsigned int) scale_factor;"
    },
    {
        "line": 164,
        "fullcodeline": "jpeg_calc_output_dimensions(&jpeg_info);"
    },
    {
        "line": 196,
        "fullcodeline": "jpeg_info.quantize_colors=TRUE;"
    },
    {
        "line": 197,
        "fullcodeline": "jpeg_info.desired_number_of_colors=(int) StringToUnsignedLong(option);"
    },
    {
        "line": 201,
        "fullcodeline": "jpeg_info.do_block_smoothing=IsStringTrue(option) != MagickFalse ? TRUE :"
    },
    {
        "line": 236,
        "fullcodeline": "jpeg_info.do_fancy_upsampling=IsStringTrue(option) != MagickFalse ? TRUE :"
    },
    {
        "line": 268,
        "fullcodeline": "(void) SetImageColorspace(image,LabColorspace,exception);"
    },
    {
        "line": 269,
        "fullcodeline": "jpeg_info.out_color_space=JCS_YCbCr;"
    },
    {
        "line": 281,
        "fullcodeline": "colors=(size_t) GetQuantumRange(image->depth)+1;"
    },
    {
        "line": 293,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\"Data precision: %d\","
    },
    {
        "line": 295,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),\"Geometry: %dx%d\","
    },
    {
        "line": 305,
        "fullcodeline": "jpeg_destroy_decompress(&jpeg_info);"
    },
    {
        "line": 306,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 312,
        "fullcodeline": "jpeg_destroy_decompress(&jpeg_info);"
    },
    {
        "line": 316,
        "fullcodeline": "(jpeg_info.output_components != 3) && (jpeg_info.output_components != 4))"
    },
    {
        "line": 318,
        "fullcodeline": "jpeg_destroy_decompress(&jpeg_info);"
    },
    {
        "line": 319,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImageTypeNotSupported\");"
    },
    {
        "line": 322,
        "fullcodeline": "jpeg_info.output_components*sizeof(*jpeg_pixels));"
    },
    {
        "line": 325,
        "fullcodeline": "jpeg_destroy_decompress(&jpeg_info);"
    },
    {
        "line": 326,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 338,
        "fullcodeline": "jpeg_destroy_decompress(&jpeg_info);"
    },
    {
        "line": 339,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 340,
        "fullcodeline": "number_pixels=(MagickSizeType) image->columns*image->rows;"
    },
    {
        "line": 347,
        "fullcodeline": "image->colors=(size_t) jpeg_info.actual_number_of_colors;"
    },
    {
        "line": 384,
        "fullcodeline": "p=jpeg_pixels;"
    },
    {
        "line": 385,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 476,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 486,
        "fullcodeline": "error_manager.finished=MagickTrue;"
    },
    {
        "line": 70,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 92,
        "fullcodeline": "if (error_manager.profile != (StringInfo *) NULL)"
    },
    {
        "line": 96,
        "fullcodeline": "if (number_pixels != 0)"
    },
    {
        "line": 98,
        "fullcodeline": "return(DestroyImage(image));"
    },
    {
        "line": 115,
        "fullcodeline": "(image_info->colorspace == Rec601YCbCrColorspace) ||"
    },
    {
        "line": 151,
        "fullcodeline": "if ((flags & SigmaValue) == 0)"
    },
    {
        "line": 157,
        "fullcodeline": "if (geometry_info.rho != 0.0)"
    },
    {
        "line": 159,
        "fullcodeline": "if ((geometry_info.sigma != 0.0) &&"
    },
    {
        "line": 165,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 247,
        "fullcodeline": "(void) SetImageColorspace(image,sRGBColorspace,exception);"
    },
    {
        "line": 252,
        "fullcodeline": "(void) SetImageColorspace(image,GRAYColorspace,exception);"
    },
    {
        "line": 257,
        "fullcodeline": "(void) SetImageColorspace(image,YCbCrColorspace,exception);"
    },
    {
        "line": 262,
        "fullcodeline": "(void) SetImageColorspace(image,CMYKColorspace,exception);"
    },
    {
        "line": 273,
        "fullcodeline": "if (AcquireImageColormap(image,StringToUnsignedLong(option),exception)"
    },
    {
        "line": 282,
        "fullcodeline": "if (AcquireImageColormap(image,colors,exception) == MagickFalse)"
    },
    {
        "line": 287,
        "fullcodeline": "if (image->interlace != NoInterlace)"
    },
    {
        "line": 307,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 313,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 336,
        "fullcodeline": "if (memory_info != (MemoryInfo *) NULL)"
    },
    {
        "line": 341,
        "fullcodeline": "if (number_pixels != 0)"
    },
    {
        "line": 343,
        "fullcodeline": "return(DestroyImage(image));"
    },
    {
        "line": 348,
        "fullcodeline": "if (jpeg_info.out_color_space == JCS_GRAYSCALE)"
    },
    {
        "line": 378,
        "fullcodeline": "if (jpeg_read_scanlines(&jpeg_info,scanline,1) != 1)"
    },
    {
        "line": 386,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 388,
        "fullcodeline": "if (jpeg_info.data_precision > 8)"
    },
    {
        "line": 474,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 478,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 487,
        "fullcodeline": "if (setjmp(error_manager.error_recovery) == 0)"
    },
    {
        "line": 93,
        "fullcodeline": "error_manager.profile=DestroyStringInfo(error_manager.profile);"
    },
    {
        "line": 111,
        "fullcodeline": "if (IsOptionMember(\"APP\",option) == MagickFalse)"
    },
    {
        "line": 152,
        "fullcodeline": "geometry_info.sigma=geometry_info.rho;"
    },
    {
        "line": 158,
        "fullcodeline": "scale_factor=jpeg_info.output_width/geometry_info.rho;"
    },
    {
        "line": 160,
        "fullcodeline": "(scale_factor > (jpeg_info.output_height/geometry_info.sigma)))"
    },
    {
        "line": 161,
        "fullcodeline": "scale_factor=jpeg_info.output_height/geometry_info.sigma;"
    },
    {
        "line": 166,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 275,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 283,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 288,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 294,
        "fullcodeline": "(int) jpeg_info.data_precision);"
    },
    {
        "line": 296,
        "fullcodeline": "(int) jpeg_info.output_width,(int) jpeg_info.output_height);"
    },
    {
        "line": 337,
        "fullcodeline": "memory_info=RelinquishVirtualMemory(memory_info);"
    },
    {
        "line": 380,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),"
    },
    {
        "line": 393,
        "fullcodeline": "scale=65535/(unsigned short) GetQuantumRange((size_t)"
    },
    {
        "line": 480,
        "fullcodeline": "jpeg_abort_decompress(&jpeg_info);"
    },
    {
        "line": 488,
        "fullcodeline": "(void) jpeg_finish_decompress(&jpeg_info);"
    },
    {
        "line": 97,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 112,
        "fullcodeline": "jpeg_set_marker_processor(&jpeg_info,(int) (JPEG_APP0+i),ReadProfile);"
    },
    {
        "line": 291,
        "fullcodeline": "(void) LogMagickEvent(CoderEvent,GetMagickModule(),"
    },
    {
        "line": 342,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 349,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 395,
        "fullcodeline": "if (jpeg_info.output_components == 1)"
    },
    {
        "line": 167,
        "fullcodeline": "\"Scale factor: %.20g\",(double) scale_factor);"
    },
    {
        "line": 211,
        "fullcodeline": "if (LocaleCompare(option,\"default\") == 0)"
    },
    {
        "line": 218,
        "fullcodeline": "if (LocaleCompare(option,\"fastest\") == 0)"
    },
    {
        "line": 220,
        "fullcodeline": "if (LocaleCompare(option,\"float\") == 0)"
    },
    {
        "line": 227,
        "fullcodeline": "if (LocaleCompare(option,\"ifast\") == 0)"
    },
    {
        "line": 229,
        "fullcodeline": "if (LocaleCompare(option,\"islow\") == 0)"
    },
    {
        "line": 351,
        "fullcodeline": "image->colormap[i].red=(double) ScaleCharToQuantum("
    },
    {
        "line": 353,
        "fullcodeline": "image->colormap[i].green=image->colormap[i].red;"
    },
    {
        "line": 354,
        "fullcodeline": "image->colormap[i].blue=image->colormap[i].red;"
    },
    {
        "line": 355,
        "fullcodeline": "image->colormap[i].alpha=(MagickRealType) OpaqueAlpha;"
    },
    {
        "line": 358,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 437,
        "fullcodeline": "if (jpeg_info.output_components == 1)"
    },
    {
        "line": 212,
        "fullcodeline": "jpeg_info.dct_method=JDCT_DEFAULT;"
    },
    {
        "line": 219,
        "fullcodeline": "jpeg_info.dct_method=JDCT_FASTEST;"
    },
    {
        "line": 221,
        "fullcodeline": "jpeg_info.dct_method=JDCT_FLOAT;"
    },
    {
        "line": 228,
        "fullcodeline": "jpeg_info.dct_method=JDCT_IFAST;"
    },
    {
        "line": 230,
        "fullcodeline": "jpeg_info.dct_method=JDCT_ISLOW;"
    },
    {
        "line": 360,
        "fullcodeline": "image->colormap[i].red=(double) ScaleCharToQuantum("
    },
    {
        "line": 362,
        "fullcodeline": "image->colormap[i].green=(double) ScaleCharToQuantum("
    },
    {
        "line": 364,
        "fullcodeline": "image->colormap[i].blue=(double) ScaleCharToQuantum("
    },
    {
        "line": 366,
        "fullcodeline": "image->colormap[i].alpha=(MagickRealType) OpaqueAlpha;"
    },
    {
        "line": 396,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 401,
        "fullcodeline": "pixel=(ssize_t) (scale*GETJSAMPLE(*p));"
    },
    {
        "line": 402,
        "fullcodeline": "index=(Quantum) ConstrainColormapIndex(image,pixel,exception);"
    },
    {
        "line": 403,
        "fullcodeline": "SetPixelIndex(image,index,q);"
    },
    {
        "line": 404,
        "fullcodeline": "SetPixelViaPixelInfo(image,image->colormap+(ssize_t) index,q);"
    },
    {
        "line": 405,
        "fullcodeline": "p++;"
    },
    {
        "line": 406,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 409,
        "fullcodeline": "if (image->colorspace != CMYKColorspace)"
    },
    {
        "line": 438,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 440,
        "fullcodeline": "index=(Quantum) ConstrainColormapIndex(image,(ssize_t) GETJSAMPLE(*p),"
    },
    {
        "line": 442,
        "fullcodeline": "SetPixelIndex(image,index,q);"
    },
    {
        "line": 443,
        "fullcodeline": "SetPixelViaPixelInfo(image,image->colormap+(ssize_t) index,q);"
    },
    {
        "line": 444,
        "fullcodeline": "p++;"
    },
    {
        "line": 445,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 448,
        "fullcodeline": "if (image->colorspace != CMYKColorspace)"
    },
    {
        "line": 410,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 412,
        "fullcodeline": "SetPixelRed(image,ScaleShortToQuantum("
    },
    {
        "line": 414,
        "fullcodeline": "SetPixelGreen(image,ScaleShortToQuantum("
    },
    {
        "line": 416,
        "fullcodeline": "SetPixelBlue(image,ScaleShortToQuantum("
    },
    {
        "line": 418,
        "fullcodeline": "SetPixelAlpha(image,OpaqueAlpha,q);"
    },
    {
        "line": 419,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 422,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 449,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 424,
        "fullcodeline": "SetPixelCyan(image,QuantumRange-ScaleShortToQuantum("
    },
    {
        "line": 426,
        "fullcodeline": "SetPixelMagenta(image,QuantumRange-ScaleShortToQuantum("
    },
    {
        "line": 428,
        "fullcodeline": "SetPixelYellow(image,QuantumRange-ScaleShortToQuantum("
    },
    {
        "line": 430,
        "fullcodeline": "SetPixelBlack(image,QuantumRange-ScaleShortToQuantum("
    },
    {
        "line": 432,
        "fullcodeline": "SetPixelAlpha(image,OpaqueAlpha,q);"
    },
    {
        "line": 433,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 451,
        "fullcodeline": "SetPixelRed(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 453,
        "fullcodeline": "SetPixelGreen(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 455,
        "fullcodeline": "SetPixelBlue(image,ScaleCharToQuantum((unsigned char)"
    },
    {
        "line": 457,
        "fullcodeline": "SetPixelAlpha(image,OpaqueAlpha,q);"
    },
    {
        "line": 458,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 461,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 413,
        "fullcodeline": "(unsigned short) (scale*GETJSAMPLE(*p++))),q);"
    },
    {
        "line": 415,
        "fullcodeline": "(unsigned short) (scale*GETJSAMPLE(*p++))),q);"
    },
    {
        "line": 417,
        "fullcodeline": "(unsigned short) (scale*GETJSAMPLE(*p++))),q);"
    },
    {
        "line": 463,
        "fullcodeline": "SetPixelCyan(image,QuantumRange-ScaleCharToQuantum("
    },
    {
        "line": 465,
        "fullcodeline": "SetPixelMagenta(image,QuantumRange-ScaleCharToQuantum("
    },
    {
        "line": 467,
        "fullcodeline": "SetPixelYellow(image,QuantumRange-ScaleCharToQuantum("
    },
    {
        "line": 469,
        "fullcodeline": "SetPixelBlack(image,QuantumRange-ScaleCharToQuantum("
    },
    {
        "line": 471,
        "fullcodeline": "SetPixelAlpha(image,OpaqueAlpha,q);"
    },
    {
        "line": 472,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 425,
        "fullcodeline": "(unsigned short) (scale*GETJSAMPLE(*p++))),q);"
    },
    {
        "line": 427,
        "fullcodeline": "(unsigned short) (scale*GETJSAMPLE(*p++))),q);"
    },
    {
        "line": 429,
        "fullcodeline": "(unsigned short) (scale*GETJSAMPLE(*p++))),q);"
    },
    {
        "line": 431,
        "fullcodeline": "(unsigned short) (scale*GETJSAMPLE(*p++))),q);"
    },
    {
        "line": 464,
        "fullcodeline": "(unsigned char) GETJSAMPLE(*p++)),q);"
    },
    {
        "line": 466,
        "fullcodeline": "(unsigned char) GETJSAMPLE(*p++)),q);"
    },
    {
        "line": 468,
        "fullcodeline": "(unsigned char) GETJSAMPLE(*p++)),q);"
    },
    {
        "line": 470,
        "fullcodeline": "(unsigned char) GETJSAMPLE(*p++)),q);"
    },
    {
        "line": 452,
        "fullcodeline": "GETJSAMPLE(*p++)),q);"
    },
    {
        "line": 454,
        "fullcodeline": "GETJSAMPLE(*p++)),q);"
    },
    {
        "line": 456,
        "fullcodeline": "GETJSAMPLE(*p++)),q);"
    }
]