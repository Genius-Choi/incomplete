[
    {
        "line": 7,
        "fullcodeline": "param->dup_flag = flags & MQTT_HEADER_DUP_MASK;"
    },
    {
        "line": 8,
        "fullcodeline": "param->retain_flag = flags & MQTT_HEADER_RETAIN_MASK;"
    },
    {
        "line": 9,
        "fullcodeline": "param->message.topic.qos = ((flags & MQTT_HEADER_QOS_MASK) >> 1);"
    },
    {
        "line": 11,
        "fullcodeline": "err_code = unpack_utf8_str(buf, &param->message.topic.topic);"
    },
    {
        "line": 34,
        "fullcodeline": "param->message.payload.data = NULL;"
    },
    {
        "line": 35,
        "fullcodeline": "param->message.payload.len = var_length - var_header_length;"
    },
    {
        "line": 12,
        "fullcodeline": "if (err_code != 0) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (param->message.topic.qos > MQTT_QOS_0_AT_MOST_ONCE) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (var_length < var_header_length) {"
    },
    {
        "line": 19,
        "fullcodeline": "err_code = unpack_uint16(buf, &param->message_id);"
    },
    {
        "line": 24,
        "fullcodeline": "var_header_length += sizeof(u16_t);"
    },
    {
        "line": 28,
        "fullcodeline": "MQTT_ERR(\"Corrupted PUBLISH message, header length (%u) larger \""
    },
    {
        "line": 20,
        "fullcodeline": "if (err_code != 0) {"
    },
    {
        "line": 31,
        "fullcodeline": "return -EINVAL;"
    }
]