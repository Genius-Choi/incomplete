[
    {
        "line": 3,
        "fullcodeline": "struct mqtt_publish_param *param ="
    },
    {
        "line": 11,
        "fullcodeline": "memset(&dec_param, 0, sizeof(dec_param));"
    },
    {
        "line": 16,
        "fullcodeline": "rc = publish_encode(param, &buf);"
    },
    {
        "line": 19,
        "fullcodeline": "memcpy(buf.end, param->message.payload.data,"
    },
    {
        "line": 21,
        "fullcodeline": "buf.end += param->message.payload.len;"
    },
    {
        "line": 24,
        "fullcodeline": "zassert_false(rc, \"publish_encode failed\");"
    },
    {
        "line": 26,
        "fullcodeline": "rc = eval_buffers(&buf, mqtt_test->expected, mqtt_test->expected_len);"
    },
    {
        "line": 28,
        "fullcodeline": "zassert_false(rc, \"eval_buffers failed\");"
    },
    {
        "line": 30,
        "fullcodeline": "rc = fixed_header_decode(&buf, &type_and_flags, &length);"
    },
    {
        "line": 32,
        "fullcodeline": "zassert_false(rc, \"fixed_header_decode failed\");"
    },
    {
        "line": 34,
        "fullcodeline": "rc = publish_decode(type_and_flags, length, &buf, &dec_param);"
    },
    {
        "line": 37,
        "fullcodeline": "zassert_false(rc, \"publish_decode failed\");"
    },
    {
        "line": 39,
        "fullcodeline": "zassert_equal(dec_param.message_id, param->message_id,"
    },
    {
        "line": 41,
        "fullcodeline": "zassert_equal(dec_param.dup_flag, param->dup_flag,"
    },
    {
        "line": 43,
        "fullcodeline": "zassert_equal(dec_param.retain_flag, param->retain_flag,"
    },
    {
        "line": 45,
        "fullcodeline": "zassert_equal(dec_param.message.topic.qos, param->message.topic.qos,"
    },
    {
        "line": 47,
        "fullcodeline": "zassert_equal(dec_param.message.topic.topic.size,"
    },
    {
        "line": 55,
        "fullcodeline": "zassert_equal(dec_param.message.payload.len,"
    },
    {
        "line": 4,
        "fullcodeline": "(struct mqtt_publish_param *)mqtt_test->ctx;"
    },
    {
        "line": 50,
        "fullcodeline": "if (memcmp(dec_param.message.topic.topic.utf8,"
    },
    {
        "line": 53,
        "fullcodeline": "zassert_unreachable(\"topic content error\");"
    }
]