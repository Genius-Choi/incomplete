[
    {
        "line": 7,
        "fullcodeline": "READ((char *)&msg, 1)"
    },
    {
        "line": 13,
        "fullcodeline": "READ(((char *)&msg) + 1, sz_rfbSetPixelFormatMsg - 1)"
    },
    {
        "line": 17,
        "fullcodeline": "cl->format.bigEndian = (msg.spf.format.bigEndian ? 1 : 0);"
    },
    {
        "line": 18,
        "fullcodeline": "cl->format.trueColour = (msg.spf.format.trueColour ? 1 : 0);"
    },
    {
        "line": 19,
        "fullcodeline": "cl->format.redMax = Swap16IfLE(msg.spf.format.redMax);"
    },
    {
        "line": 20,
        "fullcodeline": "cl->format.greenMax = Swap16IfLE(msg.spf.format.greenMax);"
    },
    {
        "line": 21,
        "fullcodeline": "cl->format.blueMax = Swap16IfLE(msg.spf.format.blueMax);"
    },
    {
        "line": 26,
        "fullcodeline": "cl->readyForSetColourMapEntries = TRUE;"
    },
    {
        "line": 28,
        "fullcodeline": "rfbSetTranslateFunction(cl);"
    },
    {
        "line": 32,
        "fullcodeline": "READ(((char *)&msg) + 1, sz_rfbFixColourMapEntriesMsg - 1)"
    },
    {
        "line": 33,
        "fullcodeline": "rfbLog(\"rfbProcessClientNormalMessage: FixColourMapEntries unsupported\\n\");"
    },
    {
        "line": 34,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 332,
        "fullcodeline": "cl->rfbKeyEventsRcvd++;"
    },
    {
        "line": 334,
        "fullcodeline": "READ(((char *)&msg) + 1, sz_rfbKeyEventMsg - 1)"
    },
    {
        "line": 343,
        "fullcodeline": "cl->rfbPointerEventsRcvd++;"
    },
    {
        "line": 345,
        "fullcodeline": "READ(((char *)&msg) + 1, sz_rfbPointerEventMsg - 1)"
    },
    {
        "line": 881,
        "fullcodeline": "rfbLog(\"rfbProcessClientNormalMessage: unknown message type %d\\n\","
    },
    {
        "line": 883,
        "fullcodeline": "rfbLog(\" ... closing connection\\n\");"
    },
    {
        "line": 884,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 41,
        "fullcodeline": "Bool firstFence = !cl->enableFence;"
    },
    {
        "line": 42,
        "fullcodeline": "Bool firstCU = !cl->enableCU;"
    },
    {
        "line": 43,
        "fullcodeline": "Bool firstGII = !cl->enableGII;"
    },
    {
        "line": 44,
        "fullcodeline": "Bool logTightCompressLevel = FALSE;"
    },
    {
        "line": 46,
        "fullcodeline": "READ(((char *)&msg) + 1, sz_rfbSetEncodingsMsg - 1)"
    },
    {
        "line": 48,
        "fullcodeline": "msg.se.nEncodings = Swap16IfLE(msg.se.nEncodings);"
    },
    {
        "line": 50,
        "fullcodeline": "cl->preferredEncoding = -1;"
    },
    {
        "line": 51,
        "fullcodeline": "cl->useCopyRect = FALSE;"
    },
    {
        "line": 52,
        "fullcodeline": "cl->enableCursorShapeUpdates = FALSE;"
    },
    {
        "line": 53,
        "fullcodeline": "cl->enableCursorPosUpdates = FALSE;"
    },
    {
        "line": 54,
        "fullcodeline": "cl->enableLastRectEncoding = FALSE;"
    },
    {
        "line": 55,
        "fullcodeline": "cl->tightCompressLevel = TIGHT_DEFAULT_COMPRESSION;"
    },
    {
        "line": 56,
        "fullcodeline": "cl->tightSubsampLevel = TIGHT_DEFAULT_SUBSAMP;"
    },
    {
        "line": 57,
        "fullcodeline": "cl->tightQualityLevel = -1;"
    },
    {
        "line": 58,
        "fullcodeline": "cl->imageQualityLevel = -1;"
    },
    {
        "line": 287,
        "fullcodeline": "READ(((char *)&msg) + 1, sz_rfbFramebufferUpdateRequestMsg - 1)"
    },
    {
        "line": 289,
        "fullcodeline": "box.x1 = Swap16IfLE(msg.fur.x);"
    },
    {
        "line": 290,
        "fullcodeline": "box.y1 = Swap16IfLE(msg.fur.y);"
    },
    {
        "line": 291,
        "fullcodeline": "box.x2 = box.x1 + Swap16IfLE(msg.fur.w);"
    },
    {
        "line": 292,
        "fullcodeline": "box.y2 = box.y1 + Swap16IfLE(msg.fur.h);"
    },
    {
        "line": 293,
        "fullcodeline": "SAFE_REGION_INIT(pScreen, &tmpRegion, &box, 0);"
    },
    {
        "line": 326,
        "fullcodeline": "REGION_UNINIT(pScreen, &tmpRegion);"
    },
    {
        "line": 336,
        "fullcodeline": "if (!rfbViewOnly && !cl->viewOnly)"
    },
    {
        "line": 347,
        "fullcodeline": "if (pointerClient && (pointerClient != cl))"
    },
    {
        "line": 350,
        "fullcodeline": "if (msg.pe.buttonMask == 0)"
    },
    {
        "line": 355,
        "fullcodeline": "if (!rfbViewOnly && !cl->viewOnly) {"
    },
    {
        "line": 364,
        "fullcodeline": "int ignoredBytes = 0;"
    },
    {
        "line": 366,
        "fullcodeline": "READ(((char *)&msg) + 1, sz_rfbClientCutTextMsg - 1)"
    },
    {
        "line": 368,
        "fullcodeline": "msg.cct.length = Swap32IfLE(msg.cct.length);"
    },
    {
        "line": 377,
        "fullcodeline": "str = (char *)malloc(msg.cct.length);"
    },
    {
        "line": 408,
        "fullcodeline": "free(str);"
    },
    {
        "line": 416,
        "fullcodeline": "READ(((char *)&msg) + 1, sz_rfbEnableContinuousUpdatesMsg - 1)"
    },
    {
        "line": 424,
        "fullcodeline": "box.x1 = Swap16IfLE(msg.ecu.x);"
    },
    {
        "line": 425,
        "fullcodeline": "box.y1 = Swap16IfLE(msg.ecu.y);"
    },
    {
        "line": 426,
        "fullcodeline": "box.x2 = box.x1 + Swap16IfLE(msg.ecu.w);"
    },
    {
        "line": 427,
        "fullcodeline": "box.y2 = box.y1 + Swap16IfLE(msg.ecu.h);"
    },
    {
        "line": 428,
        "fullcodeline": "SAFE_REGION_INIT(pScreen, &cl->cuRegion, &box, 0);"
    },
    {
        "line": 440,
        "fullcodeline": "rfbLog(\"Continuous updates %s\\n\","
    },
    {
        "line": 448,
        "fullcodeline": "char data[64];"
    },
    {
        "line": 450,
        "fullcodeline": "READ(((char *)&msg) + 1, sz_rfbFenceMsg - 1)"
    },
    {
        "line": 452,
        "fullcodeline": "flags = Swap32IfLE(msg.f.flags);"
    },
    {
        "line": 477,
        "fullcodeline": "int result = rfbEDSResultSuccess;"
    },
    {
        "line": 478,
        "fullcodeline": "char errMsg[256] = \"\\0\";"
    },
    {
        "line": 481,
        "fullcodeline": "READ(((char *)&msg) + 1, sz_rfbSetDesktopSizeMsg - 1)"
    },
    {
        "line": 487,
        "fullcodeline": "msg.sds.w = Swap16IfLE(msg.sds.w);"
    },
    {
        "line": 488,
        "fullcodeline": "msg.sds.h = Swap16IfLE(msg.sds.h);"
    },
    {
        "line": 493,
        "fullcodeline": "xorg_list_init(&newScreens);"
    },
    {
        "line": 530,
        "fullcodeline": "rfbRemoveScreens(&newScreens);"
    },
    {
        "line": 552,
        "fullcodeline": "READ((char *)&endianAndSubType, 1);"
    },
    {
        "line": 553,
        "fullcodeline": "littleEndian = (endianAndSubType & rfbGIIBE) ? 0 : 1;"
    },
    {
        "line": 554,
        "fullcodeline": "subType = endianAndSubType & ~rfbGIIBE;"
    },
    {
        "line": 60,
        "fullcodeline": "for (i = 0; i < msg.se.nEncodings; i++) {"
    },
    {
        "line": 239,
        "fullcodeline": "if (cl->preferredEncoding == -1)"
    },
    {
        "line": 242,
        "fullcodeline": "if (cl->preferredEncoding == rfbEncodingTight && logTightCompressLevel)"
    },
    {
        "line": 246,
        "fullcodeline": "if (cl->enableCursorPosUpdates && !cl->enableCursorShapeUpdates) {"
    },
    {
        "line": 251,
        "fullcodeline": "if (cl->enableFence && firstFence) {"
    },
    {
        "line": 256,
        "fullcodeline": "if (cl->enableCU && cl->enableFence && firstCU) {"
    },
    {
        "line": 261,
        "fullcodeline": "if (cl->enableGII && firstGII) {"
    },
    {
        "line": 295,
        "fullcodeline": "if (!msg.fur.incremental || !cl->continuousUpdates)"
    },
    {
        "line": 299,
        "fullcodeline": "if (!cl->readyForSetColourMapEntries) {"
    },
    {
        "line": 310,
        "fullcodeline": "if (!msg.fur.incremental) {"
    },
    {
        "line": 318,
        "fullcodeline": "if (FB_UPDATE_PENDING(cl) &&"
    },
    {
        "line": 337,
        "fullcodeline": "KeyEvent((KeySym)Swap32IfLE(msg.ke.key), msg.ke.down);"
    },
    {
        "line": 351,
        "fullcodeline": "pointerClient = NULL;"
    },
    {
        "line": 356,
        "fullcodeline": "cl->cursorX = (int)Swap16IfLE(msg.pe.x);"
    },
    {
        "line": 357,
        "fullcodeline": "cl->cursorY = (int)Swap16IfLE(msg.pe.y);"
    },
    {
        "line": 358,
        "fullcodeline": "PtrAddEvent(msg.pe.buttonMask, cl->cursorX, cl->cursorY, cl);"
    },
    {
        "line": 369,
        "fullcodeline": "if (msg.cct.length > rfbMaxClipboard) {"
    },
    {
        "line": 376,
        "fullcodeline": "if (msg.cct.length <= 0) return;"
    },
    {
        "line": 378,
        "fullcodeline": "if (str == NULL) {"
    },
    {
        "line": 384,
        "fullcodeline": "if ((n = ReadExact(cl, str, msg.cct.length)) <= 0) {"
    },
    {
        "line": 392,
        "fullcodeline": "if (ignoredBytes > 0) {"
    },
    {
        "line": 403,
        "fullcodeline": "if (!rfbViewOnly && !cl->viewOnly && !rfbAuthDisableCBRecv) {"
    },
    {
        "line": 418,
        "fullcodeline": "if (!cl->enableFence || !cl->enableCU) {"
    },
    {
        "line": 441,
        "fullcodeline": "cl->continuousUpdates ? \"enabled\" : \"disabled\");"
    },
    {
        "line": 483,
        "fullcodeline": "if (msg.sds.numScreens < 1)"
    },
    {
        "line": 489,
        "fullcodeline": "if (msg.sds.w < 1 || msg.sds.h < 1)"
    },
    {
        "line": 494,
        "fullcodeline": "for (i = 0; i < msg.sds.numScreens; i++) {"
    },
    {
        "line": 535,
        "fullcodeline": "for (cl2 = rfbClientHead; cl2; cl2 = cl2->next) {"
    },
    {
        "line": 61,
        "fullcodeline": "READ((char *)&enc, 4)"
    },
    {
        "line": 62,
        "fullcodeline": "enc = Swap32IfLE(enc);"
    },
    {
        "line": 240,
        "fullcodeline": "cl->preferredEncoding = rfbEncodingTight;"
    },
    {
        "line": 243,
        "fullcodeline": "rfbLog(\"Using Tight compression level %d for client %s\\n\","
    },
    {
        "line": 247,
        "fullcodeline": "rfbLog(\"Disabling cursor position updates for client %s\\n\", cl->host);"
    },
    {
        "line": 248,
        "fullcodeline": "cl->enableCursorPosUpdates = FALSE;"
    },
    {
        "line": 265,
        "fullcodeline": "msg.type = rfbGIIServer;"
    },
    {
        "line": 268,
        "fullcodeline": "msg.endianAndSubType = rfbGIIVersion | rfbGIIBE;"
    },
    {
        "line": 269,
        "fullcodeline": "msg.length = Swap16IfLE(sz_rfbGIIServerVersionMsg - 4);"
    },
    {
        "line": 270,
        "fullcodeline": "msg.maximumVersion = msg.minimumVersion = Swap16IfLE(1);"
    },
    {
        "line": 296,
        "fullcodeline": "REGION_UNION(pScreen, &cl->requestedRegion, &cl->requestedRegion,"
    },
    {
        "line": 301,
        "fullcodeline": "cl->readyForSetColourMapEntries = TRUE;"
    },
    {
        "line": 311,
        "fullcodeline": "REGION_UNION(pScreen, &cl->modifiedRegion, &cl->modifiedRegion,"
    },
    {
        "line": 313,
        "fullcodeline": "REGION_SUBTRACT(pScreen, &cl->copyRegion, &cl->copyRegion, &tmpRegion);"
    },
    {
        "line": 314,
        "fullcodeline": "REGION_UNION(pScreen, &cl->ifRegion, &cl->ifRegion, &tmpRegion);"
    },
    {
        "line": 315,
        "fullcodeline": "cl->pendingExtDesktopResize = TRUE;"
    },
    {
        "line": 319,
        "fullcodeline": "(!cl->deferredUpdateScheduled || rfbDeferUpdateTime == 0 ||"
    },
    {
        "line": 353,
        "fullcodeline": "pointerClient = cl;"
    },
    {
        "line": 370,
        "fullcodeline": "rfbLog(\"Truncating %d-byte clipboard update to %d bytes.\\n\","
    },
    {
        "line": 372,
        "fullcodeline": "ignoredBytes = msg.cct.length - rfbMaxClipboard;"
    },
    {
        "line": 373,
        "fullcodeline": "msg.cct.length = rfbMaxClipboard;"
    },
    {
        "line": 379,
        "fullcodeline": "rfbLogPerror(\"rfbProcessClientNormalMessage: rfbClientCutText out of memory\");"
    },
    {
        "line": 380,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 387,
        "fullcodeline": "free(str);"
    },
    {
        "line": 388,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 404,
        "fullcodeline": "vncClientCutText(str, msg.cct.length);"
    },
    {
        "line": 419,
        "fullcodeline": "rfbLog(\"Ignoring request to enable continuous updates because the client does not\\n\");"
    },
    {
        "line": 420,
        "fullcodeline": "rfbLog(\"support the flow control extensions.\\n\");"
    },
    {
        "line": 432,
        "fullcodeline": "REGION_EMPTY(pScreen, &cl->requestedRegion);"
    },
    {
        "line": 455,
        "fullcodeline": "rfbLog(\"Ignoring fence.  Payload of %d bytes is too large.\\n\","
    },
    {
        "line": 457,
        "fullcodeline": "SKIP(msg.f.length)"
    },
    {
        "line": 484,
        "fullcodeline": "EDSERROR(\"Requested number of screens %d is invalid\","
    },
    {
        "line": 490,
        "fullcodeline": "EDSERROR(\"Requested framebuffer dimensions %dx%d are invalid\","
    },
    {
        "line": 495,
        "fullcodeline": "rfbScreenInfo *screen = rfbNewScreen(0, 0, 0, 0, 0, 0);"
    },
    {
        "line": 497,
        "fullcodeline": "READ((char *)&screen->s, sizeof(rfbScreenDesc))"
    },
    {
        "line": 498,
        "fullcodeline": "screen->s.id = Swap32IfLE(screen->s.id);"
    },
    {
        "line": 499,
        "fullcodeline": "screen->s.x = Swap16IfLE(screen->s.x);"
    },
    {
        "line": 500,
        "fullcodeline": "screen->s.y = Swap16IfLE(screen->s.y);"
    },
    {
        "line": 501,
        "fullcodeline": "screen->s.w = Swap16IfLE(screen->s.w);"
    },
    {
        "line": 502,
        "fullcodeline": "screen->s.h = Swap16IfLE(screen->s.h);"
    },
    {
        "line": 503,
        "fullcodeline": "screen->s.flags = Swap32IfLE(screen->s.flags);"
    },
    {
        "line": 521,
        "fullcodeline": "rfbLog(\"NOTICE: Ignoring remote desktop resize request from a view-only client.\\n\");"
    },
    {
        "line": 522,
        "fullcodeline": "result = rfbEDSResultProhibited;"
    },
    {
        "line": 560,
        "fullcodeline": "READ((char *)&msg.giicv.length, sz_rfbGIIClientVersionMsg - 2);"
    },
    {
        "line": 571,
        "fullcodeline": "rfbLog(\"Client supports GII version %d\\n\", msg.giicv.version);"
    },
    {
        "line": 701,
        "fullcodeline": "READ((char *)&msg.giidd.length, sz_rfbGIIDeviceDestroyMsg - 2);"
    },
    {
        "line": 712,
        "fullcodeline": "RemoveExtInputDevice(cl, msg.giidd.deviceOrigin - 1);"
    },
    {
        "line": 244,
        "fullcodeline": "rfbTightCompressLevel(cl), cl->host);"
    },
    {
        "line": 252,
        "fullcodeline": "if (!rfbSendFence(cl, rfbFenceFlagRequest, 0, NULL))"
    },
    {
        "line": 257,
        "fullcodeline": "if (!rfbSendEndOfCU(cl))"
    },
    {
        "line": 272,
        "fullcodeline": "if (WriteExact(cl, (char *)&msg, sz_rfbGIIServerVersionMsg) < 0) {"
    },
    {
        "line": 320,
        "fullcodeline": "gettime() - cl->deferredUpdateStart >="
    },
    {
        "line": 322,
        "fullcodeline": "if (rfbSendFramebufferUpdate(cl))"
    },
    {
        "line": 385,
        "fullcodeline": "if (n != 0)"
    },
    {
        "line": 393,
        "fullcodeline": "if ((n = SkipExact(cl, ignoredBytes)) <= 0) {"
    },
    {
        "line": 433,
        "fullcodeline": "if (!rfbSendFramebufferUpdate(cl))"
    },
    {
        "line": 459,
        "fullcodeline": "READ(data, msg.f.length)"
    },
    {
        "line": 460,
        "fullcodeline": "HandleFence(cl, flags, msg.f.length, data);"
    },
    {
        "line": 504,
        "fullcodeline": "if (screen->s.w < 1 || screen->s.h < 1)"
    },
    {
        "line": 507,
        "fullcodeline": "if (screen->s.x >= msg.sds.w || screen->s.y >= msg.sds.h ||"
    },
    {
        "line": 513,
        "fullcodeline": "if (rfbFindScreenID(&newScreens, screen->s.id)) {"
    },
    {
        "line": 536,
        "fullcodeline": "if (cl2 == cl) {"
    },
    {
        "line": 561,
        "fullcodeline": "if (littleEndian != *(const char *)&rfbEndianTest) {"
    },
    {
        "line": 565,
        "fullcodeline": "if (msg.giicv.length != sz_rfbGIIClientVersionMsg - 4 ||"
    },
    {
        "line": 580,
        "fullcodeline": "memset(&dev, 0, sizeof(dev));"
    },
    {
        "line": 581,
        "fullcodeline": "dcmsg.deviceOrigin = 0;"
    },
    {
        "line": 583,
        "fullcodeline": "READ((char *)&msg.giidc.length, sz_rfbGIIDeviceCreateMsg - 2);"
    },
    {
        "line": 594,
        "fullcodeline": "rfbLog(\"GII Device Create: %s\\n\", msg.giidc.deviceName);"
    },
    {
        "line": 624,
        "fullcodeline": "memcpy(&dev.name, msg.giidc.deviceName, 32);"
    },
    {
        "line": 625,
        "fullcodeline": "dev.numButtons = msg.giidc.numButtons;"
    },
    {
        "line": 626,
        "fullcodeline": "dev.numValuators = msg.giidc.numValuators;"
    },
    {
        "line": 627,
        "fullcodeline": "dev.eventMask = msg.giidc.canGenerate;"
    },
    {
        "line": 628,
        "fullcodeline": "dev.mode ="
    },
    {
        "line": 630,
        "fullcodeline": "dev.productID = msg.giidc.productID;"
    },
    {
        "line": 680,
        "fullcodeline": "rfbLog(\"GII device ID = %d\\n\", cl->numDevices);"
    },
    {
        "line": 684,
        "fullcodeline": "dcmsg.type = rfbGIIServer;"
    },
    {
        "line": 687,
        "fullcodeline": "dcmsg.endianAndSubType = rfbGIIDeviceCreate | rfbGIIBE;"
    },
    {
        "line": 688,
        "fullcodeline": "dcmsg.length = Swap16IfLE(sz_rfbGIIDeviceCreatedMsg - 4);"
    },
    {
        "line": 702,
        "fullcodeline": "if (littleEndian != *(const char *)&rfbEndianTest) {"
    },
    {
        "line": 706,
        "fullcodeline": "if (msg.giidd.length != sz_rfbGIIDeviceDestroyMsg - 4) {"
    },
    {
        "line": 720,
        "fullcodeline": "READ((char *)&length, sizeof(CARD16));"
    },
    {
        "line": 67,
        "fullcodeline": "cl->useCopyRect = TRUE;"
    },
    {
        "line": 273,
        "fullcodeline": "rfbLogPerror(\"rfbProcessClientNormalMessage: write\");"
    },
    {
        "line": 274,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 321,
        "fullcodeline": "(double)rfbDeferUpdateTime)) {"
    },
    {
        "line": 323,
        "fullcodeline": "cl->deferredUpdateScheduled = FALSE;"
    },
    {
        "line": 386,
        "fullcodeline": "rfbLogPerror(\"rfbProcessClientNormalMessage: read\");"
    },
    {
        "line": 396,
        "fullcodeline": "free(str);"
    },
    {
        "line": 397,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 405,
        "fullcodeline": "if (rfbSyncCutBuffer) rfbSetXCutText(str, msg.cct.length);"
    },
    {
        "line": 436,
        "fullcodeline": "if (!rfbSendEndOfCU(cl))"
    },
    {
        "line": 505,
        "fullcodeline": "EDSERROR(\"Screen 0x%.8x requested dimensions %dx%d are invalid\","
    },
    {
        "line": 509,
        "fullcodeline": "screen->s.y + screen->s.h > msg.sds.h)"
    },
    {
        "line": 510,
        "fullcodeline": "EDSERROR(\"Screen 0x%.8x requested geometry %dx%d+%d+%d exceeds requested framebuffer dimensions\","
    },
    {
        "line": 514,
        "fullcodeline": "EDSERROR(\"Screen 0x%.8x duplicate ID\", (unsigned int)screen->s.id);"
    },
    {
        "line": 515,
        "fullcodeline": "free(screen);"
    },
    {
        "line": 523,
        "fullcodeline": "} else if (result == rfbEDSResultSuccess) {"
    },
    {
        "line": 537,
        "fullcodeline": "cl2->pendingExtDesktopResize = TRUE;"
    },
    {
        "line": 538,
        "fullcodeline": "cl2->reason = rfbEDSReasonClient;"
    },
    {
        "line": 539,
        "fullcodeline": "cl2->result = result;"
    },
    {
        "line": 540,
        "fullcodeline": "rfbSendFramebufferUpdate(cl2);"
    },
    {
        "line": 562,
        "fullcodeline": "msg.giicv.length = Swap16(msg.giicv.length);"
    },
    {
        "line": 563,
        "fullcodeline": "msg.giicv.version = Swap16(msg.giicv.version);"
    },
    {
        "line": 566,
        "fullcodeline": "msg.giicv.version < 1) {"
    },
    {
        "line": 567,
        "fullcodeline": "rfbLog(\"ERROR: Malformed GII client version message\\n\");"
    },
    {
        "line": 568,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 584,
        "fullcodeline": "if (littleEndian != *(const char *)&rfbEndianTest) {"
    },
    {
        "line": 604,
        "fullcodeline": "if (msg.giidc.length != sz_rfbGIIDeviceCreateMsg - 4 +"
    },
    {
        "line": 611,
        "fullcodeline": "if (msg.giidc.numButtons > MAX_BUTTONS) {"
    },
    {
        "line": 617,
        "fullcodeline": "if (msg.giidc.numValuators > MAX_VALUATORS) {"
    },
    {
        "line": 629,
        "fullcodeline": "(dev.eventMask & rfbGIIValuatorAbsoluteMask) ? Absolute : Relative;"
    },
    {
        "line": 632,
        "fullcodeline": "if (dev.mode == Relative) {"
    },
    {
        "line": 638,
        "fullcodeline": "for (i = 0; i < dev.numValuators; i++) {"
    },
    {
        "line": 666,
        "fullcodeline": "for (i = 0; i < cl->numDevices; i++) {"
    },
    {
        "line": 675,
        "fullcodeline": "if (rfbVirtualTablet || AddExtInputDevice(&dev)) {"
    },
    {
        "line": 690,
        "fullcodeline": "if (WriteExact(cl, (char *)&dcmsg, sz_rfbGIIDeviceCreatedMsg) < 0) {"
    },
    {
        "line": 703,
        "fullcodeline": "msg.giidd.length = Swap16(msg.giidd.length);"
    },
    {
        "line": 704,
        "fullcodeline": "msg.giidd.deviceOrigin = Swap32(msg.giidd.deviceOrigin);"
    },
    {
        "line": 707,
        "fullcodeline": "rfbLog(\"ERROR: Malformed GII device create message\\n\");"
    },
    {
        "line": 708,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 721,
        "fullcodeline": "if (littleEndian != *(const char *)&rfbEndianTest)"
    },
    {
        "line": 724,
        "fullcodeline": "while (length > 0) {"
    },
    {
        "line": 868,
        "fullcodeline": "if (length != 0) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (cl->preferredEncoding == -1) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (cl->preferredEncoding == -1) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (cl->preferredEncoding == -1) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (cl->preferredEncoding == -1) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (cl->preferredEncoding == -1) {"
    },
    {
        "line": 100,
        "fullcodeline": "if (cl->preferredEncoding == -1) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (cl->preferredEncoding == -1) {"
    },
    {
        "line": 112,
        "fullcodeline": "if (cl->preferredEncoding == -1) {"
    },
    {
        "line": 118,
        "fullcodeline": "if (!cl->enableCursorShapeUpdates) {"
    },
    {
        "line": 127,
        "fullcodeline": "if (!cl->enableCursorShapeUpdates) {"
    },
    {
        "line": 136,
        "fullcodeline": "if (!cl->enableCursorPosUpdates) {"
    },
    {
        "line": 146,
        "fullcodeline": "if (!cl->enableLastRectEncoding) {"
    },
    {
        "line": 153,
        "fullcodeline": "if (!cl->enableFence) {"
    },
    {
        "line": 160,
        "fullcodeline": "if (!cl->enableCU) {"
    },
    {
        "line": 167,
        "fullcodeline": "if (!cl->enableDesktopSize) {"
    },
    {
        "line": 177,
        "fullcodeline": "if (!cl->enableExtDesktopSize) {"
    },
    {
        "line": 187,
        "fullcodeline": "if (!cl->enableGII) {"
    },
    {
        "line": 193,
        "fullcodeline": "if (enc >= (CARD32)rfbEncodingCompressLevel0 &&"
    },
    {
        "line": 303,
        "fullcodeline": "if (!rfbSetClientColourMap(cl, 0, 0)) {"
    },
    {
        "line": 394,
        "fullcodeline": "if (n != 0)"
    },
    {
        "line": 508,
        "fullcodeline": "screen->s.x + screen->s.w > msg.sds.w ||"
    },
    {
        "line": 517,
        "fullcodeline": "rfbAddScreen(&newScreens, screen);"
    },
    {
        "line": 524,
        "fullcodeline": "result = ResizeDesktop(pScreen, cl, msg.sds.w, msg.sds.h, &newScreens);"
    },
    {
        "line": 585,
        "fullcodeline": "msg.giidc.length = Swap16(msg.giidc.length);"
    },
    {
        "line": 586,
        "fullcodeline": "msg.giidc.vendorID = Swap32(msg.giidc.vendorID);"
    },
    {
        "line": 587,
        "fullcodeline": "msg.giidc.productID = Swap32(msg.giidc.productID);"
    },
    {
        "line": 588,
        "fullcodeline": "msg.giidc.canGenerate = Swap32(msg.giidc.canGenerate);"
    },
    {
        "line": 589,
        "fullcodeline": "msg.giidc.numRegisters = Swap32(msg.giidc.numRegisters);"
    },
    {
        "line": 590,
        "fullcodeline": "msg.giidc.numValuators = Swap32(msg.giidc.numValuators);"
    },
    {
        "line": 591,
        "fullcodeline": "msg.giidc.numButtons = Swap32(msg.giidc.numButtons);"
    },
    {
        "line": 606,
        "fullcodeline": "rfbLog(\"ERROR: Malformed GII device create message\\n\");"
    },
    {
        "line": 607,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 612,
        "fullcodeline": "rfbLog(\"GII device create ERROR: %d buttons exceeds max of %d\\n\","
    },
    {
        "line": 614,
        "fullcodeline": "SKIP(msg.giidc.numValuators * sz_rfbGIIValuator);"
    },
    {
        "line": 618,
        "fullcodeline": "rfbLog(\"GII device create ERROR: %d valuators exceeds max of %d\\n\","
    },
    {
        "line": 620,
        "fullcodeline": "SKIP(msg.giidc.numValuators * sz_rfbGIIValuator);"
    },
    {
        "line": 633,
        "fullcodeline": "rfbLog(\"GII device create ERROR: relative valuators not supported (yet)\\n\");"
    },
    {
        "line": 634,
        "fullcodeline": "SKIP(msg.giidc.numValuators * sz_rfbGIIValuator);"
    },
    {
        "line": 640,
        "fullcodeline": "READ((char *)v, sz_rfbGIIValuator);"
    },
    {
        "line": 676,
        "fullcodeline": "memcpy(&cl->devices[cl->numDevices], &dev, sizeof(dev));"
    },
    {
        "line": 677,
        "fullcodeline": "cl->numDevices++;"
    },
    {
        "line": 678,
        "fullcodeline": "dcmsg.deviceOrigin = Swap32IfLE(cl->numDevices);"
    },
    {
        "line": 691,
        "fullcodeline": "rfbLogPerror(\"rfbProcessClientNormalMessage: write\");"
    },
    {
        "line": 692,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 722,
        "fullcodeline": "length = Swap16(length);"
    },
    {
        "line": 727,
        "fullcodeline": "READ((char *)&eventSize, 1);"
    },
    {
        "line": 728,
        "fullcodeline": "READ((char *)&eventType, 1);"
    },
    {
        "line": 869,
        "fullcodeline": "rfbLog(\"ERROR: Malformed GII event message\\n\");"
    },
    {
        "line": 870,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 71,
        "fullcodeline": "cl->preferredEncoding = enc;"
    },
    {
        "line": 72,
        "fullcodeline": "rfbLog(\"Using raw encoding for client %s\\n\", cl->host);"
    },
    {
        "line": 77,
        "fullcodeline": "cl->preferredEncoding = enc;"
    },
    {
        "line": 78,
        "fullcodeline": "rfbLog(\"Using rre encoding for client %s\\n\", cl->host);"
    },
    {
        "line": 83,
        "fullcodeline": "cl->preferredEncoding = enc;"
    },
    {
        "line": 84,
        "fullcodeline": "rfbLog(\"Using CoRRE encoding for client %s\\n\", cl->host);"
    },
    {
        "line": 89,
        "fullcodeline": "cl->preferredEncoding = enc;"
    },
    {
        "line": 90,
        "fullcodeline": "rfbLog(\"Using hextile encoding for client %s\\n\", cl->host);"
    },
    {
        "line": 95,
        "fullcodeline": "cl->preferredEncoding = enc;"
    },
    {
        "line": 96,
        "fullcodeline": "rfbLog(\"Using zlib encoding for client %s\\n\", cl->host);"
    },
    {
        "line": 101,
        "fullcodeline": "cl->preferredEncoding = enc;"
    },
    {
        "line": 102,
        "fullcodeline": "rfbLog(\"Using ZRLE encoding for client %s\\n\", cl->host);"
    },
    {
        "line": 107,
        "fullcodeline": "cl->preferredEncoding = enc;"
    },
    {
        "line": 108,
        "fullcodeline": "rfbLog(\"Using ZYWRLE encoding for client %s\\n\", cl->host);"
    },
    {
        "line": 113,
        "fullcodeline": "cl->preferredEncoding = enc;"
    },
    {
        "line": 114,
        "fullcodeline": "rfbLog(\"Using tight encoding for client %s\\n\", cl->host);"
    },
    {
        "line": 119,
        "fullcodeline": "rfbLog(\"Enabling X-style cursor updates for client %s\\n\","
    },
    {
        "line": 121,
        "fullcodeline": "cl->enableCursorShapeUpdates = TRUE;"
    },
    {
        "line": 122,
        "fullcodeline": "cl->useRichCursorEncoding = FALSE;"
    },
    {
        "line": 123,
        "fullcodeline": "cl->cursorWasChanged = TRUE;"
    },
    {
        "line": 128,
        "fullcodeline": "rfbLog(\"Enabling full-color cursor updates for client %s\\n\","
    },
    {
        "line": 130,
        "fullcodeline": "cl->enableCursorShapeUpdates = TRUE;"
    },
    {
        "line": 131,
        "fullcodeline": "cl->useRichCursorEncoding = TRUE;"
    },
    {
        "line": 132,
        "fullcodeline": "cl->cursorWasChanged = TRUE;"
    },
    {
        "line": 137,
        "fullcodeline": "rfbLog(\"Enabling cursor position updates for client %s\\n\","
    },
    {
        "line": 139,
        "fullcodeline": "cl->enableCursorPosUpdates = TRUE;"
    },
    {
        "line": 140,
        "fullcodeline": "cl->cursorWasMoved = TRUE;"
    },
    {
        "line": 141,
        "fullcodeline": "cl->cursorX = -1;"
    },
    {
        "line": 142,
        "fullcodeline": "cl->cursorY = -1;"
    },
    {
        "line": 147,
        "fullcodeline": "rfbLog(\"Enabling LastRect protocol extension for client %s\\n\","
    },
    {
        "line": 149,
        "fullcodeline": "cl->enableLastRectEncoding = TRUE;"
    },
    {
        "line": 154,
        "fullcodeline": "rfbLog(\"Enabling Fence protocol extension for client %s\\n\","
    },
    {
        "line": 156,
        "fullcodeline": "cl->enableFence = TRUE;"
    },
    {
        "line": 161,
        "fullcodeline": "rfbLog(\"Enabling Continuous Updates protocol extension for client %s\\n\","
    },
    {
        "line": 163,
        "fullcodeline": "cl->enableCU = TRUE;"
    },
    {
        "line": 188,
        "fullcodeline": "rfbLog(\"Enabling GII extension for client %s\\n\", cl->host);"
    },
    {
        "line": 189,
        "fullcodeline": "cl->enableGII = TRUE;"
    },
    {
        "line": 194,
        "fullcodeline": "enc <= (CARD32)rfbEncodingCompressLevel9) {"
    },
    {
        "line": 195,
        "fullcodeline": "cl->zlibCompressLevel = enc & 0x0F;"
    },
    {
        "line": 196,
        "fullcodeline": "cl->tightCompressLevel = enc & 0x0F;"
    },
    {
        "line": 304,
        "fullcodeline": "REGION_UNINIT(pScreen, &tmpRegion);"
    },
    {
        "line": 395,
        "fullcodeline": "rfbLogPerror(\"rfbProcessClientNormalMessage: read\");"
    },
    {
        "line": 525,
        "fullcodeline": "if (result == rfbEDSResultSuccess)"
    },
    {
        "line": 528,
        "fullcodeline": "rfbLog(errMsg);"
    },
    {
        "line": 605,
        "fullcodeline": "msg.giidc.numValuators * sz_rfbGIIValuator) {"
    },
    {
        "line": 641,
        "fullcodeline": "if (littleEndian != *(const char *)&rfbEndianTest) {"
    },
    {
        "line": 667,
        "fullcodeline": "if (!strcmp(dev.name, cl->devices[i].name)) {"
    },
    {
        "line": 168,
        "fullcodeline": "if (!rfbAuthDisableRemoteResize) {"
    },
    {
        "line": 178,
        "fullcodeline": "if (!rfbAuthDisableRemoteResize) {"
    },
    {
        "line": 197,
        "fullcodeline": "if (cl->preferredEncoding == rfbEncodingTight)"
    },
    {
        "line": 202,
        "fullcodeline": "if (rfbInterframe == -1) {"
    },
    {
        "line": 642,
        "fullcodeline": "v->index = Swap32(v->index);"
    },
    {
        "line": 643,
        "fullcodeline": "v->rangeMin = Swap32((CARD32)v->rangeMin);"
    },
    {
        "line": 644,
        "fullcodeline": "v->rangeCenter = Swap32((CARD32)v->rangeCenter);"
    },
    {
        "line": 645,
        "fullcodeline": "v->rangeMax = Swap32((CARD32)v->rangeMax);"
    },
    {
        "line": 646,
        "fullcodeline": "v->siUnit = Swap32(v->siUnit);"
    },
    {
        "line": 647,
        "fullcodeline": "v->siAdd = Swap32((CARD32)v->siAdd);"
    },
    {
        "line": 648,
        "fullcodeline": "v->siMul = Swap32((CARD32)v->siMul);"
    },
    {
        "line": 649,
        "fullcodeline": "v->siDiv = Swap32((CARD32)v->siDiv);"
    },
    {
        "line": 650,
        "fullcodeline": "v->siShift = Swap32((CARD32)v->siShift);"
    },
    {
        "line": 668,
        "fullcodeline": "rfbLog(\"Device \\'%s\\' already exists with GII device ID %d\\n\","
    },
    {
        "line": 670,
        "fullcodeline": "dcmsg.deviceOrigin = Swap32IfLE(i + 1);"
    },
    {
        "line": 862,
        "fullcodeline": "rfbLog(\"ERROR: This server cannot handle GII event type %d\\n\","
    },
    {
        "line": 864,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 169,
        "fullcodeline": "rfbLog(\"Enabling Desktop Size protocol extension for client %s\\n\","
    },
    {
        "line": 171,
        "fullcodeline": "cl->enableDesktopSize = TRUE;"
    },
    {
        "line": 179,
        "fullcodeline": "rfbLog(\"Enabling Extended Desktop Size protocol extension for client %s\\n\","
    },
    {
        "line": 181,
        "fullcodeline": "cl->enableExtDesktopSize = TRUE;"
    },
    {
        "line": 198,
        "fullcodeline": "logTightCompressLevel = TRUE;"
    },
    {
        "line": 211,
        "fullcodeline": "} else if (enc >= (CARD32)rfbEncodingSubsamp1X &&"
    },
    {
        "line": 669,
        "fullcodeline": "dev.name, i + 1);"
    },
    {
        "line": 738,
        "fullcodeline": "READ((char *)&b.pad, sz_rfbGIIButtonEvent - 2);"
    },
    {
        "line": 754,
        "fullcodeline": "length -= eventSize;"
    },
    {
        "line": 783,
        "fullcodeline": "ExtInputAddEvent(dev, eventType == rfbGIIButtonPress ?"
    },
    {
        "line": 795,
        "fullcodeline": "READ((char *)&v.pad, sz_rfbGIIValuatorEvent - 2);"
    },
    {
        "line": 812,
        "fullcodeline": "length -= eventSize;"
    },
    {
        "line": 173,
        "fullcodeline": "rfbLog(\"WARNING: Remote desktop resizing disabled per system policy.\\n\");"
    },
    {
        "line": 183,
        "fullcodeline": "rfbLog(\"WARNING: Remote desktop resizing disabled per system policy.\\n\");"
    },
    {
        "line": 200,
        "fullcodeline": "rfbLog(\"Using compression level %d for client %s\\n\","
    },
    {
        "line": 203,
        "fullcodeline": "if (cl->tightCompressLevel >= 5) {"
    },
    {
        "line": 212,
        "fullcodeline": "enc <= (CARD32)rfbEncodingSubsampGray) {"
    },
    {
        "line": 213,
        "fullcodeline": "cl->tightSubsampLevel = enc & 0xFF;"
    },
    {
        "line": 214,
        "fullcodeline": "rfbLog(\"Using JPEG subsampling %d for client %s\\n\","
    },
    {
        "line": 739,
        "fullcodeline": "if (littleEndian != *(const char *)&rfbEndianTest) {"
    },
    {
        "line": 743,
        "fullcodeline": "if (eventSize != sz_rfbGIIButtonEvent || b.deviceOrigin <= 0 ||"
    },
    {
        "line": 749,
        "fullcodeline": "if (eventSize > length) {"
    },
    {
        "line": 755,
        "fullcodeline": "if (b.deviceOrigin < 1 || b.deviceOrigin > cl->numDevices) {"
    },
    {
        "line": 762,
        "fullcodeline": "if ((eventType == rfbGIIButtonPress &&"
    },
    {
        "line": 771,
        "fullcodeline": "if (b.buttonNumber > dev->numButtons) {"
    },
    {
        "line": 796,
        "fullcodeline": "if (littleEndian != *(const char *)&rfbEndianTest) {"
    },
    {
        "line": 801,
        "fullcodeline": "if (eventSize !="
    },
    {
        "line": 807,
        "fullcodeline": "if (eventSize > length) {"
    },
    {
        "line": 813,
        "fullcodeline": "if (v.deviceOrigin < 1 || v.deviceOrigin > cl->numDevices) {"
    },
    {
        "line": 820,
        "fullcodeline": "if ((eventType == rfbGIIValuatorRelative &&"
    },
    {
        "line": 829,
        "fullcodeline": "if (v.first + v.count > dev->numValuators) {"
    },
    {
        "line": 841,
        "fullcodeline": "for (i = v.first; i < v.first + v.count; i++) {"
    },
    {
        "line": 852,
        "fullcodeline": "if (v.count > 0) {"
    },
    {
        "line": 740,
        "fullcodeline": "b.deviceOrigin = Swap32(b.deviceOrigin);"
    },
    {
        "line": 741,
        "fullcodeline": "b.buttonNumber = Swap32(b.buttonNumber);"
    },
    {
        "line": 744,
        "fullcodeline": "b.buttonNumber < 1) {"
    },
    {
        "line": 745,
        "fullcodeline": "rfbLog(\"ERROR: Malformed GII button event\\n\");"
    },
    {
        "line": 746,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 750,
        "fullcodeline": "rfbLog(\"ERROR: Malformed GII event message\\n\");"
    },
    {
        "line": 751,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 756,
        "fullcodeline": "rfbLog(\"ERROR: GII button event from non-existent device %d\\n\","
    },
    {
        "line": 758,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 764,
        "fullcodeline": "(eventType == rfbGIIButtonRelease &&"
    },
    {
        "line": 766,
        "fullcodeline": "rfbLog(\"ERROR: Device %d can't generate GII button events\\n\","
    },
    {
        "line": 768,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 772,
        "fullcodeline": "rfbLog(\"ERROR: GII button %d event for device %d exceeds button count (%d)\\n\","
    },
    {
        "line": 774,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 797,
        "fullcodeline": "v.deviceOrigin = Swap32(v.deviceOrigin);"
    },
    {
        "line": 798,
        "fullcodeline": "v.first = Swap32(v.first);"
    },
    {
        "line": 799,
        "fullcodeline": "v.count = Swap32(v.count);"
    },
    {
        "line": 802,
        "fullcodeline": "sz_rfbGIIValuatorEvent + sizeof(int) * v.count) {"
    },
    {
        "line": 803,
        "fullcodeline": "rfbLog(\"ERROR: Malformed GII valuator event\\n\");"
    },
    {
        "line": 804,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 808,
        "fullcodeline": "rfbLog(\"ERROR: Malformed GII event message\\n\");"
    },
    {
        "line": 809,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 814,
        "fullcodeline": "rfbLog(\"ERROR: GII valuator event from non-existent device %d\\n\","
    },
    {
        "line": 816,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 822,
        "fullcodeline": "(eventType == rfbGIIValuatorAbsolute &&"
    },
    {
        "line": 824,
        "fullcodeline": "rfbLog(\"ERROR: Device %d cannot generate GII valuator events\\n\","
    },
    {
        "line": 826,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 830,
        "fullcodeline": "rfbLog(\"ERROR: GII valuator event for device %d exceeds valuator count (%d)\\n\","
    },
    {
        "line": 832,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 842,
        "fullcodeline": "READ((char *)&dev->values[i], sizeof(int));"
    },
    {
        "line": 854,
        "fullcodeline": "dev->valCount = v.count;"
    },
    {
        "line": 855,
        "fullcodeline": "dev->mode = eventType == rfbGIIValuatorAbsolute ?"
    },
    {
        "line": 857,
        "fullcodeline": "ExtInputAddEvent(dev, MotionNotify, 0);"
    },
    {
        "line": 204,
        "fullcodeline": "if (!InterframeOn(cl)) {"
    },
    {
        "line": 209,
        "fullcodeline": "InterframeOff(cl);"
    },
    {
        "line": 216,
        "fullcodeline": "} else if (enc >= (CARD32)rfbEncodingQualityLevel0 &&"
    },
    {
        "line": 761,
        "fullcodeline": "dev = &cl->devices[b.deviceOrigin - 1];"
    },
    {
        "line": 763,
        "fullcodeline": "(dev->eventMask & rfbGIIButtonPressMask) == 0) ||"
    },
    {
        "line": 765,
        "fullcodeline": "(dev->eventMask & rfbGIIButtonReleaseMask) == 0)) {"
    },
    {
        "line": 819,
        "fullcodeline": "dev = &cl->devices[v.deviceOrigin - 1];"
    },
    {
        "line": 821,
        "fullcodeline": "(dev->eventMask & rfbGIIValuatorRelativeMask) == 0) ||"
    },
    {
        "line": 823,
        "fullcodeline": "(dev->eventMask & rfbGIIValuatorAbsoluteMask) == 0)) {"
    },
    {
        "line": 843,
        "fullcodeline": "if (littleEndian != *(const char *)&rfbEndianTest)"
    },
    {
        "line": 205,
        "fullcodeline": "rfbCloseClient(cl);"
    },
    {
        "line": 217,
        "fullcodeline": "enc <= (CARD32)rfbEncodingQualityLevel9) {"
    },
    {
        "line": 220,
        "fullcodeline": "cl->imageQualityLevel = enc & 0x0F;"
    },
    {
        "line": 844,
        "fullcodeline": "dev->values[i] = Swap32((CARD32)dev->values[i]);"
    },
    {
        "line": 221,
        "fullcodeline": "if (cl->preferredEncoding == rfbEncodingTight)"
    },
    {
        "line": 218,
        "fullcodeline": "cl->tightQualityLevel = JPEG_QUAL[enc & 0x0F];"
    },
    {
        "line": 219,
        "fullcodeline": "cl->tightSubsampLevel = JPEG_SUBSAMP[enc & 0x0F];"
    },
    {
        "line": 222,
        "fullcodeline": "rfbLog(\"Using JPEG subsampling %d, Q%d for client %s\\n\","
    },
    {
        "line": 227,
        "fullcodeline": "} else if (enc >= (CARD32)rfbEncodingFineQualityLevel0 + 1 &&"
    },
    {
        "line": 225,
        "fullcodeline": "rfbLog(\"Using image quality level %d for client %s\\n\","
    },
    {
        "line": 228,
        "fullcodeline": "enc <= (CARD32)rfbEncodingFineQualityLevel100) {"
    },
    {
        "line": 229,
        "fullcodeline": "cl->tightQualityLevel = enc & 0xFF;"
    },
    {
        "line": 230,
        "fullcodeline": "rfbLog(\"Using JPEG quality %d for client %s\\n\","
    },
    {
        "line": 233,
        "fullcodeline": "rfbLog(\"rfbProcessClientNormalMessage: ignoring unknown encoding %d (%x)\\n\","
    },
    {
        "line": 234,
        "fullcodeline": "(int)enc, (int)enc);"
    }
]