[
    {
        "line": 2,
        "fullcodeline": "(void)argc;"
    },
    {
        "line": 4,
        "fullcodeline": "const char *usage = \"Usage: seatd-launch [options] [--] command\\n\""
    },
    {
        "line": 31,
        "fullcodeline": "char **command = &argv[optind];"
    },
    {
        "line": 33,
        "fullcodeline": "char sockpath[256];"
    },
    {
        "line": 34,
        "fullcodeline": "sprintf(sockpath, \"/tmp/seatd.%d.sock\", getpid());"
    },
    {
        "line": 36,
        "fullcodeline": "int fds[2];"
    },
    {
        "line": 42,
        "fullcodeline": "pid_t seatd_child = fork();"
    },
    {
        "line": 68,
        "fullcodeline": "char buf[1] = {0};"
    },
    {
        "line": 106,
        "fullcodeline": "uid_t uid = getuid();"
    },
    {
        "line": 107,
        "fullcodeline": "gid_t gid = getgid();"
    },
    {
        "line": 129,
        "fullcodeline": "pid_t child = fork();"
    },
    {
        "line": 140,
        "fullcodeline": "int status = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "while ((c = getopt(argc, argv, \"vh\")) != -1) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (seatd_child == -1) {"
    },
    {
        "line": 130,
        "fullcodeline": "if (child == -1) {"
    },
    {
        "line": 155,
        "fullcodeline": "if (WIFEXITED(status)) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (pipe(fds) == -1) {"
    },
    {
        "line": 70,
        "fullcodeline": "pid_t p = waitpid(seatd_child, NULL, WNOHANG);"
    },
    {
        "line": 79,
        "fullcodeline": "struct pollfd fd = {"
    },
    {
        "line": 110,
        "fullcodeline": "if (chown(sockpath, uid, gid) == -1) {"
    },
    {
        "line": 114,
        "fullcodeline": "if (chmod(sockpath, 0700) == -1) {"
    },
    {
        "line": 120,
        "fullcodeline": "if (setgid(gid) == -1) {"
    },
    {
        "line": 124,
        "fullcodeline": "if (setuid(uid) == -1) {"
    },
    {
        "line": 142,
        "fullcodeline": "pid_t p = waitpid(child, &status, 0);"
    },
    {
        "line": 151,
        "fullcodeline": "if (kill(seatd_child, SIGTERM) != 0) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (p == seatd_child) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (fd.revents & POLLIN) {"
    },
    {
        "line": 143,
        "fullcodeline": "if (p == child) {"
    },
    {
        "line": 156,
        "fullcodeline": "return WEXITSTATUS(status);"
    },
    {
        "line": 14,
        "fullcodeline": "printf(\"seatd-launch version %s\\n\", SEATD_VERSION);"
    },
    {
        "line": 46,
        "fullcodeline": "} else if (seatd_child == 0) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (poll(&fd, 1, 1000) == -1) {"
    },
    {
        "line": 95,
        "fullcodeline": "ssize_t n = read(fds[0], buf, 1);"
    },
    {
        "line": 133,
        "fullcodeline": "} else if (child == 0) {"
    },
    {
        "line": 157,
        "fullcodeline": "} else if (WIFSIGNALED(status)) {"
    },
    {
        "line": 47,
        "fullcodeline": "close(fds[0]);"
    },
    {
        "line": 50,
        "fullcodeline": "snprintf(pipebuf, sizeof pipebuf, \"%d\", fds[1]);"
    },
    {
        "line": 52,
        "fullcodeline": "char *env[2] = {NULL, NULL};"
    },
    {
        "line": 54,
        "fullcodeline": "char *cur_loglevel = getenv(\"SEATD_LOGLEVEL\");"
    },
    {
        "line": 60,
        "fullcodeline": "char *command[] = {\"seatd\", \"-n\", pipebuf, \"-s\", sockpath, NULL};"
    },
    {
        "line": 61,
        "fullcodeline": "execve(SEATD_INSTALLPATH, command, env);"
    },
    {
        "line": 80,
        "fullcodeline": ".fd = fds[0],"
    },
    {
        "line": 81,
        "fullcodeline": ".events = POLLIN,"
    },
    {
        "line": 96,
        "fullcodeline": "if (n == -1 && errno != EINTR) {"
    },
    {
        "line": 49,
        "fullcodeline": "char pipebuf[16] = {0};"
    },
    {
        "line": 53,
        "fullcodeline": "char loglevelbuf[32] = {0};"
    },
    {
        "line": 55,
        "fullcodeline": "if (cur_loglevel != NULL) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (errno == EAGAIN || errno == EINTR) {"
    },
    {
        "line": 158,
        "fullcodeline": "return 128 + WTERMSIG(status);"
    },
    {
        "line": 56,
        "fullcodeline": "snprintf(loglevelbuf, sizeof loglevelbuf, \"SEATD_LOGLEVEL=%s\", cur_loglevel);"
    },
    {
        "line": 57,
        "fullcodeline": "env[0] = loglevelbuf;"
    },
    {
        "line": 74,
        "fullcodeline": "} else if (p == -1 && (errno != EINTR && errno != ECHILD)) {"
    },
    {
        "line": 145,
        "fullcodeline": "} else if (p == -1 && errno != EINTR) {"
    }
]