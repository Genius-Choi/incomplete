[
    {
        "line": 3,
        "fullcodeline": "zip_uint8_t buf[CDENTRYSIZE];"
    },
    {
        "line": 8,
        "fullcodeline": "bool from_buffer = (buffer != NULL);"
    },
    {
        "line": 10,
        "fullcodeline": "size = local ? LENTRYSIZE : CDENTRYSIZE;"
    },
    {
        "line": 34,
        "fullcodeline": "_zip_dirent_init(zde);"
    },
    {
        "line": 39,
        "fullcodeline": "zde->version_needed = _zip_buffer_get_16(buffer);"
    },
    {
        "line": 40,
        "fullcodeline": "zde->bitflags = _zip_buffer_get_16(buffer);"
    },
    {
        "line": 41,
        "fullcodeline": "zde->comp_method = _zip_buffer_get_16(buffer);"
    },
    {
        "line": 44,
        "fullcodeline": "dostime = _zip_buffer_get_16(buffer);"
    },
    {
        "line": 45,
        "fullcodeline": "dosdate = _zip_buffer_get_16(buffer);"
    },
    {
        "line": 46,
        "fullcodeline": "zde->last_mod = _zip_d2u_time(dostime, dosdate);"
    },
    {
        "line": 48,
        "fullcodeline": "zde->crc = _zip_buffer_get_32(buffer);"
    },
    {
        "line": 49,
        "fullcodeline": "zde->comp_size = _zip_buffer_get_32(buffer);"
    },
    {
        "line": 50,
        "fullcodeline": "zde->uncomp_size = _zip_buffer_get_32(buffer);"
    },
    {
        "line": 52,
        "fullcodeline": "filename_len = _zip_buffer_get_16(buffer);"
    },
    {
        "line": 53,
        "fullcodeline": "ef_len = _zip_buffer_get_16(buffer);"
    },
    {
        "line": 90,
        "fullcodeline": "zde->filename = NULL;"
    },
    {
        "line": 91,
        "fullcodeline": "zde->extra_fields = NULL;"
    },
    {
        "line": 92,
        "fullcodeline": "zde->comment = NULL;"
    },
    {
        "line": 94,
        "fullcodeline": "variable_size = (zip_uint32_t)filename_len+(zip_uint32_t)ef_len+(zip_uint32_t)comment_len;"
    },
    {
        "line": 173,
        "fullcodeline": "zde->filename = _zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_NAME, zde->filename);"
    },
    {
        "line": 174,
        "fullcodeline": "zde->comment = _zip_dirent_process_ef_utf_8(zde, ZIP_EF_UTF_8_COMMENT, zde->comment);"
    },
    {
        "line": 77,
        "fullcodeline": "if (zde->bitflags & ZIP_GPBF_ENCRYPTED) {"
    },
    {
        "line": 232,
        "fullcodeline": "if (!from_buffer) {"
    },
    {
        "line": 237,
        "fullcodeline": "if (zde->offset > ZIP_INT64_MAX) {"
    },
    {
        "line": 249,
        "fullcodeline": "zde->extra_fields = _zip_ef_remove_internal(zde->extra_fields);"
    },
    {
        "line": 251,
        "fullcodeline": "return (zip_int64_t)(size + variable_size);"
    },
    {
        "line": 24,
        "fullcodeline": "if (memcmp(_zip_buffer_get(buffer, 4), (local ? LOCAL_MAGIC : CENTRAL_MAGIC), 4) != 0) {"
    },
    {
        "line": 36,
        "fullcodeline": "zde->version_madeby = _zip_buffer_get_16(buffer);"
    },
    {
        "line": 56,
        "fullcodeline": "comment_len = 0;"
    },
    {
        "line": 57,
        "fullcodeline": "zde->disk_number = 0;"
    },
    {
        "line": 58,
        "fullcodeline": "zde->int_attrib = 0;"
    },
    {
        "line": 59,
        "fullcodeline": "zde->ext_attrib = 0;"
    },
    {
        "line": 60,
        "fullcodeline": "zde->offset = 0;"
    },
    {
        "line": 69,
        "fullcodeline": "if (!_zip_buffer_ok(buffer)) {"
    },
    {
        "line": 111,
        "fullcodeline": "zde->filename = _zip_read_string(buffer, src, filename_len, 1, error);"
    },
    {
        "line": 134,
        "fullcodeline": "zip_uint8_t *ef = _zip_read_data(buffer, src, ef_len, 0, error);"
    },
    {
        "line": 155,
        "fullcodeline": "zde->comment = _zip_read_string(buffer, src, comment_len, 0, error);"
    },
    {
        "line": 178,
        "fullcodeline": "if (zde->uncomp_size == ZIP_UINT32_MAX || zde->comp_size == ZIP_UINT32_MAX || zde->offset == ZIP_UINT32_MAX) {"
    },
    {
        "line": 181,
        "fullcodeline": "const zip_uint8_t *ef = _zip_ef_get_by_id(zde->extra_fields, &got_len, ZIP_EF_ZIP64, 0, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, error);"
    },
    {
        "line": 225,
        "fullcodeline": "if (!_zip_buffer_ok(buffer)) {"
    },
    {
        "line": 233,
        "fullcodeline": "_zip_buffer_free(buffer);"
    },
    {
        "line": 238,
        "fullcodeline": "zip_error_set(error, ZIP_ER_SEEK, EFBIG);"
    },
    {
        "line": 242,
        "fullcodeline": "if (!_zip_dirent_process_winzip_aes(zde, error)) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (_zip_buffer_left(buffer) < size) {"
    },
    {
        "line": 29,
        "fullcodeline": "return -1;"
    },
    {
        "line": 38,
        "fullcodeline": "zde->version_madeby = 0;"
    },
    {
        "line": 62,
        "fullcodeline": "comment_len = _zip_buffer_get_16(buffer);"
    },
    {
        "line": 63,
        "fullcodeline": "zde->disk_number = _zip_buffer_get_16(buffer);"
    },
    {
        "line": 64,
        "fullcodeline": "zde->int_attrib = _zip_buffer_get_16(buffer);"
    },
    {
        "line": 65,
        "fullcodeline": "zde->ext_attrib = _zip_buffer_get_32(buffer);"
    },
    {
        "line": 66,
        "fullcodeline": "zde->offset = _zip_buffer_get_32(buffer);"
    },
    {
        "line": 74,
        "fullcodeline": "return -1;"
    },
    {
        "line": 78,
        "fullcodeline": "if (zde->bitflags & ZIP_GPBF_STRONG_ENCRYPTION) {"
    },
    {
        "line": 87,
        "fullcodeline": "zde->encryption_method = ZIP_EM_NONE;"
    },
    {
        "line": 97,
        "fullcodeline": "if (_zip_buffer_left(buffer) < variable_size) {"
    },
    {
        "line": 112,
        "fullcodeline": "if (!zde->filename) {"
    },
    {
        "line": 122,
        "fullcodeline": "if (zde->bitflags & ZIP_GPBF_ENCODING_UTF_8) {"
    },
    {
        "line": 136,
        "fullcodeline": "if (ef == NULL) {"
    },
    {
        "line": 156,
        "fullcodeline": "if (!zde->comment) {"
    },
    {
        "line": 162,
        "fullcodeline": "if (zde->bitflags & ZIP_GPBF_ENCODING_UTF_8) {"
    },
    {
        "line": 183,
        "fullcodeline": "if (ef == NULL) {"
    },
    {
        "line": 198,
        "fullcodeline": "if (zde->uncomp_size == ZIP_UINT32_MAX)"
    },
    {
        "line": 205,
        "fullcodeline": "if (zde->comp_size == ZIP_UINT32_MAX)"
    },
    {
        "line": 230,
        "fullcodeline": "return -1;"
    },
    {
        "line": 239,
        "fullcodeline": "return -1;"
    },
    {
        "line": 246,
        "fullcodeline": "return -1;"
    },
    {
        "line": 14,
        "fullcodeline": "zip_error_set(error, ZIP_ER_NOZIP, 0);"
    },
    {
        "line": 19,
        "fullcodeline": "if ((buffer = _zip_buffer_new_from_source(src, size, buf, error)) == NULL) {"
    },
    {
        "line": 80,
        "fullcodeline": "zde->encryption_method = ZIP_EM_UNKNOWN;"
    },
    {
        "line": 105,
        "fullcodeline": "if ((buffer = _zip_buffer_new_from_source(src, variable_size, NULL, error)) == NULL) {"
    },
    {
        "line": 142,
        "fullcodeline": "if (!_zip_ef_parse(ef, ef_len, local ? ZIP_EF_LOCAL : ZIP_EF_CENTRAL, &zde->extra_fields, error)) {"
    },
    {
        "line": 151,
        "fullcodeline": "zde->local_extra_fields_read = 1;"
    },
    {
        "line": 190,
        "fullcodeline": "if ((ef_buffer = _zip_buffer_new((zip_uint8_t *)ef, got_len)) == NULL) {"
    },
    {
        "line": 191,
        "fullcodeline": "zip_error_set(error, ZIP_ER_MEMORY, 0);"
    },
    {
        "line": 199,
        "fullcodeline": "zde->uncomp_size = _zip_buffer_get_64(ef_buffer);"
    },
    {
        "line": 206,
        "fullcodeline": "zde->comp_size = _zip_buffer_get_64(ef_buffer);"
    },
    {
        "line": 214,
        "fullcodeline": "if (!_zip_buffer_eof(ef_buffer)) {"
    },
    {
        "line": 15,
        "fullcodeline": "return -1;"
    },
    {
        "line": 83,
        "fullcodeline": "zde->encryption_method = ZIP_EM_TRAD_PKWARE;"
    },
    {
        "line": 99,
        "fullcodeline": "return -1;"
    },
    {
        "line": 113,
        "fullcodeline": "if (zip_error_code_zip(error) == ZIP_ER_EOF) {"
    },
    {
        "line": 119,
        "fullcodeline": "return -1;"
    },
    {
        "line": 123,
        "fullcodeline": "if (_zip_guess_encoding(zde->filename, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR) {"
    },
    {
        "line": 140,
        "fullcodeline": "return -1;"
    },
    {
        "line": 147,
        "fullcodeline": "return -1;"
    },
    {
        "line": 160,
        "fullcodeline": "return -1;"
    },
    {
        "line": 187,
        "fullcodeline": "return -1;"
    },
    {
        "line": 195,
        "fullcodeline": "return -1;"
    },
    {
        "line": 208,
        "fullcodeline": "if (zde->offset == ZIP_UINT32_MAX)"
    },
    {
        "line": 210,
        "fullcodeline": "if (zde->disk_number == ZIP_UINT16_MAX)"
    },
    {
        "line": 220,
        "fullcodeline": "return -1;"
    },
    {
        "line": 20,
        "fullcodeline": "return -1;"
    },
    {
        "line": 106,
        "fullcodeline": "return -1;"
    },
    {
        "line": 163,
        "fullcodeline": "if (_zip_guess_encoding(zde->comment, ZIP_ENCODING_UTF8_KNOWN) == ZIP_ENCODING_ERROR) {"
    },
    {
        "line": 209,
        "fullcodeline": "zde->offset = _zip_buffer_get_64(ef_buffer);"
    },
    {
        "line": 211,
        "fullcodeline": "zde->disk_number = _zip_buffer_get_32(buffer);"
    },
    {
        "line": 128,
        "fullcodeline": "return -1;"
    },
    {
        "line": 168,
        "fullcodeline": "return -1;"
    },
    {
        "line": 203,
        "fullcodeline": "(void)_zip_buffer_skip(ef_buffer, 8); /* error is caught by _zip_buffer_eof() call */"
    }
]