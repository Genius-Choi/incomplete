[
    {
        "line": 4,
        "fullcodeline": "if (values.dtype() != DT_INT64 && values.dtype() != DT_STRING) {"
    },
    {
        "line": 9,
        "fullcodeline": "if (splits.dtype() != DT_INT64 && splits.dtype() != DT_INT32) {"
    },
    {
        "line": 14,
        "fullcodeline": "if (values.dtype() == DT_INT64) {"
    },
    {
        "line": 31,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 5,
        "fullcodeline": "return errors::InvalidArgument(\"Unexpected dtype for input \","
    },
    {
        "line": 10,
        "fullcodeline": "return errors::InvalidArgument(\"Unexpected row_splits.dtype for input \","
    },
    {
        "line": 15,
        "fullcodeline": "if (splits.dtype() == DT_INT64) {"
    },
    {
        "line": 6,
        "fullcodeline": "(features->size() + 1), \": \","
    },
    {
        "line": 7,
        "fullcodeline": "values.dtype());"
    },
    {
        "line": 11,
        "fullcodeline": "(features->size() + 1), \": \","
    },
    {
        "line": 12,
        "fullcodeline": "values.dtype());"
    },
    {
        "line": 16,
        "fullcodeline": "features->emplace_back("
    },
    {
        "line": 23,
        "fullcodeline": "if (splits.dtype() == DT_INT64) {"
    },
    {
        "line": 17,
        "fullcodeline": "new RaggedFeatureReader<int64, int64>(values, splits));"
    },
    {
        "line": 19,
        "fullcodeline": "features->emplace_back("
    },
    {
        "line": 24,
        "fullcodeline": "features->emplace_back("
    },
    {
        "line": 20,
        "fullcodeline": "new RaggedFeatureReader<int64, int32>(values, splits));"
    },
    {
        "line": 25,
        "fullcodeline": "new RaggedFeatureReader<tstring, int64>(values, splits));"
    },
    {
        "line": 27,
        "fullcodeline": "features->emplace_back("
    },
    {
        "line": 28,
        "fullcodeline": "new RaggedFeatureReader<tstring, int32>(values, splits));"
    }
]