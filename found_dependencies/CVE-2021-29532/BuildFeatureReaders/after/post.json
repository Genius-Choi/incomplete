[
    {
        "line": 7,
        "fullcodeline": "features->reserve(input_order_.size());"
    },
    {
        "line": 9,
        "fullcodeline": "int next_ragged = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "int next_sparse = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "int next_dense = 0;"
    },
    {
        "line": 60,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 13,
        "fullcodeline": "if (c == 'R') {"
    },
    {
        "line": 26,
        "fullcodeline": "TF_RETURN_IF_ERROR(BuildRaggedFeatureReader("
    },
    {
        "line": 29,
        "fullcodeline": "next_ragged++;"
    },
    {
        "line": 14,
        "fullcodeline": "if (next_ragged >= ragged_values_list.size())"
    },
    {
        "line": 20,
        "fullcodeline": "if (next_ragged >= ragged_splits_list.size())"
    },
    {
        "line": 30,
        "fullcodeline": "} else if (c == 'S') {"
    },
    {
        "line": 15,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 21,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 43,
        "fullcodeline": "TF_RETURN_IF_ERROR(BuildSparseFeatureReader("
    },
    {
        "line": 46,
        "fullcodeline": "next_sparse++;"
    },
    {
        "line": 18,
        "fullcodeline": "next_ragged, \" from a list of \", ragged_values_list.size(),"
    },
    {
        "line": 24,
        "fullcodeline": "next_ragged, \" from a list of \", ragged_splits_list.size(),"
    },
    {
        "line": 31,
        "fullcodeline": "if (next_sparse >= sparse_values_list.size())"
    },
    {
        "line": 37,
        "fullcodeline": "if (next_sparse >= sparse_indices_list.size())"
    },
    {
        "line": 47,
        "fullcodeline": "} else if (c == 'D') {"
    },
    {
        "line": 32,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 38,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 53,
        "fullcodeline": "TF_RETURN_IF_ERROR("
    },
    {
        "line": 35,
        "fullcodeline": "next_sparse, \" from a list of \", sparse_values_list.size(),"
    },
    {
        "line": 41,
        "fullcodeline": "next_sparse, \" from a list of \", sparse_indices_list.size(),"
    },
    {
        "line": 48,
        "fullcodeline": "if (next_dense >= dense_list.size())"
    },
    {
        "line": 54,
        "fullcodeline": "BuildDenseFeatureReader(dense_list[next_dense++], features));"
    },
    {
        "line": 56,
        "fullcodeline": "return errors::InvalidArgument(\"Unexpected input_order value.\");"
    },
    {
        "line": 49,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 52,
        "fullcodeline": "\" from a list of \", dense_list.size(), \" tensors.\");"
    }
]