[
    {
        "line": 5,
        "fullcodeline": "buffer = loadfile(conffile);"
    },
    {
        "line": 30,
        "fullcodeline": "free(buffer);"
    },
    {
        "line": 6,
        "fullcodeline": "for (line = strtok(buffer, \"\\r\\n\"); line; line = strtok(NULL, \"\\r\\n\")) {"
    },
    {
        "line": 9,
        "fullcodeline": "val = strchr(line, '=');"
    },
    {
        "line": 14,
        "fullcodeline": "*val++ = '\\0';"
    },
    {
        "line": 7,
        "fullcodeline": "if (!strncmp(line, \"export \", 7))"
    },
    {
        "line": 10,
        "fullcodeline": "if (!val) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (!strcmp(line, \"JSON_INDENT\"))"
    },
    {
        "line": 18,
        "fullcodeline": "if (!strcmp(line, \"JSON_COMPACT\"))"
    },
    {
        "line": 20,
        "fullcodeline": "if (!strcmp(line, \"JSON_ENSURE_ASCII\"))"
    },
    {
        "line": 22,
        "fullcodeline": "if (!strcmp(line, \"JSON_PRESERVE_ORDER\"))"
    },
    {
        "line": 24,
        "fullcodeline": "if (!strcmp(line, \"JSON_SORT_KEYS\"))"
    },
    {
        "line": 26,
        "fullcodeline": "if (!strcmp(line, \"STRIP\"))"
    },
    {
        "line": 11,
        "fullcodeline": "printf(\"invalid configuration line\\n\");"
    },
    {
        "line": 17,
        "fullcodeline": "conf.indent = atoi(val);"
    },
    {
        "line": 19,
        "fullcodeline": "conf.compact = atoi(val);"
    },
    {
        "line": 21,
        "fullcodeline": "conf.ensure_ascii = atoi(val);"
    },
    {
        "line": 23,
        "fullcodeline": "conf.preserve_order = atoi(val);"
    },
    {
        "line": 25,
        "fullcodeline": "conf.sort_keys = atoi(val);"
    },
    {
        "line": 27,
        "fullcodeline": "conf.strip = atoi(val);"
    }
]