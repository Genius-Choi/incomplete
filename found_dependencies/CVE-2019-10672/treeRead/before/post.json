[
    {
        "line": 11,
        "fullcodeline": "uint64_t address_of_left_sibling, address_of_right_sibling, start[4],"
    },
    {
        "line": 14,
        "fullcodeline": "char buf[4];"
    },
    {
        "line": 16,
        "fullcodeline": "UNUSED(node_level);"
    },
    {
        "line": 17,
        "fullcodeline": "UNUSED(address_of_right_sibling);"
    },
    {
        "line": 18,
        "fullcodeline": "UNUSED(address_of_left_sibling);"
    },
    {
        "line": 19,
        "fullcodeline": "UNUSED(key);"
    },
    {
        "line": 30,
        "fullcodeline": "} log(\"%08lX %.4s\\n\", (uint64_t )ftell(reader->fhd) - 4, buf);"
    },
    {
        "line": 32,
        "fullcodeline": "node_type = (uint8_t)fgetc(reader->fhd);"
    },
    {
        "line": 33,
        "fullcodeline": "node_level = (uint8_t)fgetc(reader->fhd);"
    },
    {
        "line": 34,
        "fullcodeline": "entries_used = (uint16_t)readValue(reader, 2);"
    },
    {
        "line": 37,
        "fullcodeline": "address_of_left_sibling = readValue(reader,"
    },
    {
        "line": 39,
        "fullcodeline": "address_of_right_sibling = readValue(reader,"
    },
    {
        "line": 42,
        "fullcodeline": "elements = 1;"
    },
    {
        "line": 50,
        "fullcodeline": "dzy = dz * dy;"
    },
    {
        "line": 51,
        "fullcodeline": "szy = sz * sy;"
    },
    {
        "line": 54,
        "fullcodeline": "log(\"elements %d size %d\\n\",elements,size);"
    },
    {
        "line": 160,
        "fullcodeline": "free(output);"
    },
    {
        "line": 21,
        "fullcodeline": "if (data->ds.dimensionality > 3) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (fread(buf, 1, 4, reader->fhd) != 4 || strncmp(buf, \"TREE\", 4)) {"
    },
    {
        "line": 35,
        "fullcodeline": "if(entries_used>0x1000)"
    },
    {
        "line": 43,
        "fullcodeline": "for (j = 0; j < data->ds.dimensionality; j++)"
    },
    {
        "line": 44,
        "fullcodeline": "elements *= data->datalayout_chunk[j];"
    },
    {
        "line": 56,
        "fullcodeline": "if (!(output = malloc(elements * size))) {"
    },
    {
        "line": 60,
        "fullcodeline": "for (e = 0; e < entries_used * 2; e++) {"
    },
    {
        "line": 161,
        "fullcodeline": "if(fseek(reader->fhd, 4, SEEK_CUR)<0) /* skip checksum */"
    },
    {
        "line": 22,
        "fullcodeline": "log(\"TREE dimensions > 3\");"
    },
    {
        "line": 28,
        "fullcodeline": "log(\"cannot read signature of TREE\\n\");"
    },
    {
        "line": 61,
        "fullcodeline": "if (node_type == 0) {"
    },
    {
        "line": 62,
        "fullcodeline": "key = readValue(reader, reader->superblock.size_of_lengths);"
    },
    {
        "line": 64,
        "fullcodeline": "size_of_chunk = (uint32_t)readValue(reader, 4);"
    },
    {
        "line": 65,
        "fullcodeline": "filter_mask = (uint32_t)readValue(reader, 4);"
    },
    {
        "line": 81,
        "fullcodeline": "child_pointer = readValue(reader,"
    },
    {
        "line": 83,
        "fullcodeline": "log(\" data at %lX len %u\\n\", child_pointer, size_of_chunk);"
    },
    {
        "line": 86,
        "fullcodeline": "store = ftell(reader->fhd);"
    },
    {
        "line": 102,
        "fullcodeline": "olen = elements * size;"
    },
    {
        "line": 103,
        "fullcodeline": "err = gunzip(size_of_chunk, input, &olen, output);"
    },
    {
        "line": 104,
        "fullcodeline": "free(input);"
    },
    {
        "line": 106,
        "fullcodeline": "log(\"   gunzip %d %d %d\\n\",err, olen, elements*size);"
    },
    {
        "line": 72,
        "fullcodeline": "for (j = 0; j < data->ds.dimensionality; j++) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (readValue(reader, 8)) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (fseek(reader->fhd, child_pointer, SEEK_SET)<0) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (!(input = malloc(size_of_chunk))) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (fread(input, 1, size_of_chunk, reader->fhd) != size_of_chunk) {"
    },
    {
        "line": 107,
        "fullcodeline": "if (err || olen != elements * size) {"
    },
    {
        "line": 153,
        "fullcodeline": "if(fseek(reader->fhd, store, SEEK_SET)<0) {"
    },
    {
        "line": 67,
        "fullcodeline": "log(\"TREE all filters must be enabled\\n\");"
    },
    {
        "line": 68,
        "fullcodeline": "free(output);"
    },
    {
        "line": 73,
        "fullcodeline": "start[j] = readValue(reader, 8);"
    },
    {
        "line": 74,
        "fullcodeline": "log(\"start %d %lu\\n\",j,start[j]);"
    },
    {
        "line": 88,
        "fullcodeline": "free(output);"
    },
    {
        "line": 93,
        "fullcodeline": "free(output);"
    },
    {
        "line": 97,
        "fullcodeline": "free(output);"
    },
    {
        "line": 98,
        "fullcodeline": "free(input);"
    },
    {
        "line": 108,
        "fullcodeline": "free(output);"
    },
    {
        "line": 149,
        "fullcodeline": "log(\"invalid dim\\n\");"
    },
    {
        "line": 154,
        "fullcodeline": "free(output);"
    },
    {
        "line": 114,
        "fullcodeline": "for (i = 0; i < olen; i++) {"
    },
    {
        "line": 124,
        "fullcodeline": "for (i = 0; i < olen; i++) {"
    },
    {
        "line": 136,
        "fullcodeline": "for (i = 0; i < olen; i++) {"
    },
    {
        "line": 115,
        "fullcodeline": "b = i / elements;"
    },
    {
        "line": 116,
        "fullcodeline": "x = i % elements + start[0];"
    },
    {
        "line": 125,
        "fullcodeline": "b = i / elements;"
    },
    {
        "line": 126,
        "fullcodeline": "x = i % elements;"
    },
    {
        "line": 127,
        "fullcodeline": "y = x % dy + start[1];"
    },
    {
        "line": 128,
        "fullcodeline": "x = x / dy + start[0];"
    },
    {
        "line": 137,
        "fullcodeline": "b = i / elements;"
    },
    {
        "line": 138,
        "fullcodeline": "x = i % elements;"
    },
    {
        "line": 139,
        "fullcodeline": "z = x % dz + start[2];"
    },
    {
        "line": 140,
        "fullcodeline": "y = (x / dz) % dy + start[1];"
    },
    {
        "line": 141,
        "fullcodeline": "x = (x / dzy) + start[0];"
    },
    {
        "line": 117,
        "fullcodeline": "if (x < sx) {"
    },
    {
        "line": 129,
        "fullcodeline": "if (y < sy && x < sx) {"
    },
    {
        "line": 142,
        "fullcodeline": "if (z < sz && y < sy && x < sx) {"
    },
    {
        "line": 118,
        "fullcodeline": "j = x * size + b;"
    },
    {
        "line": 119,
        "fullcodeline": "((char*)data->data)[j] = output[i];"
    },
    {
        "line": 130,
        "fullcodeline": "j = ((x * sy + y) * size) + b;"
    },
    {
        "line": 131,
        "fullcodeline": "((char*)data->data)[j] = output[i];"
    },
    {
        "line": 143,
        "fullcodeline": "j = (x * szy + y * sz + z) * size + b;"
    },
    {
        "line": 144,
        "fullcodeline": "((char*)data->data)[j] = output[i];"
    }
]