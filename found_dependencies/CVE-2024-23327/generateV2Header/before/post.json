[
    {
        "line": 3,
        "fullcodeline": "uint64_t extension_length = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "ASSERT(extension_length <= std::numeric_limits<uint16_t>::max());"
    },
    {
        "line": 20,
        "fullcodeline": "generateV2Header(src.addressAsString(), dst.addressAsString(), src.port(), dst.port(),"
    },
    {
        "line": 21,
        "fullcodeline": "src.version(), static_cast<uint16_t>(extension_length), out);"
    },
    {
        "line": 8,
        "fullcodeline": "extension_length += PROXY_PROTO_V2_TLV_TYPE_LENGTH_LEN + tlv.value.size();"
    },
    {
        "line": 18,
        "fullcodeline": "const auto& src = *proxy_proto_data.src_addr_->ip();"
    },
    {
        "line": 19,
        "fullcodeline": "const auto& dst = *proxy_proto_data.dst_addr_->ip();"
    },
    {
        "line": 28,
        "fullcodeline": "out.add(&tlv.type, 1);"
    },
    {
        "line": 29,
        "fullcodeline": "uint16_t size = htons(static_cast<uint16_t>(tlv.value.size()));"
    },
    {
        "line": 30,
        "fullcodeline": "out.add(&size, sizeof(uint16_t));"
    },
    {
        "line": 31,
        "fullcodeline": "out.add(&tlv.value.front(), tlv.value.size());"
    },
    {
        "line": 5,
        "fullcodeline": "if (!pass_all_tlvs && !pass_through_tlvs.contains(tlv.type)) {"
    },
    {
        "line": 9,
        "fullcodeline": "if (extension_length > std::numeric_limits<uint16_t>::max()) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (!pass_all_tlvs && !pass_through_tlvs.contains(tlv.type)) {"
    },
    {
        "line": 10,
        "fullcodeline": "ENVOY_LOG_MISC("
    },
    {
        "line": 12,
        "fullcodeline": "std::numeric_limits<uint16_t>::max(), extension_length);"
    }
]