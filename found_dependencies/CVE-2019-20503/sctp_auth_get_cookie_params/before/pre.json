[
    {
        "line": 6,
        "fullcodeline": "uint8_t random_store[SCTP_PARAM_BUFFER_SIZE];"
    },
    {
        "line": 7,
        "fullcodeline": "struct sctp_auth_random *p_random = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "uint16_t random_len = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "uint8_t hmacs_store[SCTP_PARAM_BUFFER_SIZE];"
    },
    {
        "line": 10,
        "fullcodeline": "struct sctp_auth_hmac_algo *hmacs = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "uint16_t hmacs_len = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "uint8_t chunks_store[SCTP_PARAM_BUFFER_SIZE];"
    },
    {
        "line": 13,
        "fullcodeline": "struct sctp_auth_chunk_list *chunks = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "uint16_t num_chunks = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "length += offset;"
    },
    {
        "line": 21,
        "fullcodeline": "phdr = (struct sctp_paramhdr *)sctp_m_getptr(m, offset,"
    },
    {
        "line": 92,
        "fullcodeline": "keylen = sizeof(*p_random) + random_len + sizeof(*hmacs) + hmacs_len;"
    },
    {
        "line": 96,
        "fullcodeline": "new_key = sctp_alloc_key(keylen);"
    },
    {
        "line": 121,
        "fullcodeline": "sctp_clear_cachedkeys(stcb, stcb->asoc.authinfo.assoc_keyid);"
    },
    {
        "line": 23,
        "fullcodeline": "while (phdr != NULL) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (chunks != NULL) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (new_key != NULL) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (stcb->asoc.authinfo.random != NULL)"
    },
    {
        "line": 125,
        "fullcodeline": "stcb->asoc.peer_hmac_id = sctp_negotiate_hmacid(stcb->asoc.peer_hmacs,"
    },
    {
        "line": 132,
        "fullcodeline": "(void)sctp_copy_skeylist(&stcb->sctp_ep->sctp_ep.shared_keys,"
    },
    {
        "line": 24,
        "fullcodeline": "ptype = ntohs(phdr->param_type);"
    },
    {
        "line": 25,
        "fullcodeline": "plen = ntohs(phdr->param_length);"
    },
    {
        "line": 85,
        "fullcodeline": "offset += SCTP_SIZE32(plen);"
    },
    {
        "line": 88,
        "fullcodeline": "phdr = (struct sctp_paramhdr *)sctp_m_getptr(m, offset, sizeof(struct sctp_paramhdr),"
    },
    {
        "line": 94,
        "fullcodeline": "keylen += sizeof(*chunks) + num_chunks;"
    },
    {
        "line": 22,
        "fullcodeline": "sizeof(struct sctp_paramhdr), (uint8_t *)&tmp_param);"
    },
    {
        "line": 27,
        "fullcodeline": "if ((plen == 0) || (offset + plen > length))"
    },
    {
        "line": 30,
        "fullcodeline": "if (ptype == SCTP_RANDOM) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (offset + sizeof(struct sctp_paramhdr) > length)"
    },
    {
        "line": 99,
        "fullcodeline": "if (p_random != NULL) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (chunks != NULL) {"
    },
    {
        "line": 112,
        "fullcodeline": "if (hmacs != NULL) {"
    },
    {
        "line": 33,
        "fullcodeline": "phdr = sctp_get_next_param(m, offset,"
    },
    {
        "line": 38,
        "fullcodeline": "p_random = (struct sctp_auth_random *)phdr;"
    },
    {
        "line": 39,
        "fullcodeline": "random_len = plen - sizeof(*p_random);"
    },
    {
        "line": 100,
        "fullcodeline": "keylen = sizeof(*p_random) + random_len;"
    },
    {
        "line": 101,
        "fullcodeline": "memcpy(new_key->key, p_random, keylen);"
    },
    {
        "line": 109,
        "fullcodeline": "keylen += sizeof(*chunks) + num_chunks;"
    },
    {
        "line": 31,
        "fullcodeline": "if (plen > sizeof(random_store))"
    },
    {
        "line": 35,
        "fullcodeline": "if (phdr == NULL)"
    },
    {
        "line": 89,
        "fullcodeline": "(uint8_t *)&tmp_param);"
    },
    {
        "line": 103,
        "fullcodeline": "keylen = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "(struct sctp_paramhdr *)random_store, plen);"
    },
    {
        "line": 40,
        "fullcodeline": "} else if (ptype == SCTP_HMAC_LIST) {"
    },
    {
        "line": 46,
        "fullcodeline": "phdr = sctp_get_next_param(m, offset,"
    },
    {
        "line": 51,
        "fullcodeline": "hmacs = (struct sctp_auth_hmac_algo *)phdr;"
    },
    {
        "line": 52,
        "fullcodeline": "hmacs_len = plen - sizeof(*hmacs);"
    },
    {
        "line": 53,
        "fullcodeline": "num_hmacs = hmacs_len / sizeof(hmacs->hmac_ids[0]);"
    },
    {
        "line": 56,
        "fullcodeline": "stcb->asoc.local_hmacs = sctp_alloc_hmaclist(num_hmacs);"
    },
    {
        "line": 44,
        "fullcodeline": "if (plen > sizeof(hmacs_store))"
    },
    {
        "line": 48,
        "fullcodeline": "if (phdr == NULL)"
    },
    {
        "line": 54,
        "fullcodeline": "if (stcb->asoc.local_hmacs != NULL)"
    },
    {
        "line": 57,
        "fullcodeline": "if (stcb->asoc.local_hmacs != NULL) {"
    },
    {
        "line": 47,
        "fullcodeline": "(struct sctp_paramhdr *)hmacs_store, plen);"
    },
    {
        "line": 55,
        "fullcodeline": "sctp_free_hmaclist(stcb->asoc.local_hmacs);"
    },
    {
        "line": 63,
        "fullcodeline": "} else if (ptype == SCTP_CHUNK_LIST) {"
    },
    {
        "line": 58,
        "fullcodeline": "for (i = 0; i < num_hmacs; i++) {"
    },
    {
        "line": 68,
        "fullcodeline": "phdr = sctp_get_next_param(m, offset,"
    },
    {
        "line": 72,
        "fullcodeline": "chunks = (struct sctp_auth_chunk_list *)phdr;"
    },
    {
        "line": 73,
        "fullcodeline": "num_chunks = plen - sizeof(*chunks);"
    },
    {
        "line": 59,
        "fullcodeline": "(void)sctp_auth_add_hmacid(stcb->asoc.local_hmacs,"
    },
    {
        "line": 66,
        "fullcodeline": "if (plen > sizeof(chunks_store))"
    },
    {
        "line": 70,
        "fullcodeline": "if (phdr == NULL)"
    },
    {
        "line": 75,
        "fullcodeline": "if (stcb->asoc.local_auth_chunks != NULL)"
    },
    {
        "line": 79,
        "fullcodeline": "for (i = 0; i < num_chunks; i++) {"
    },
    {
        "line": 69,
        "fullcodeline": "(struct sctp_paramhdr *)chunks_store, plen);"
    },
    {
        "line": 76,
        "fullcodeline": "sctp_clear_chunklist(stcb->asoc.local_auth_chunks);"
    },
    {
        "line": 80,
        "fullcodeline": "(void)sctp_auth_add_chunk(chunks->chunk_types[i],"
    },
    {
        "line": 60,
        "fullcodeline": "ntohs(hmacs->hmac_ids[i]));"
    },
    {
        "line": 78,
        "fullcodeline": "stcb->asoc.local_auth_chunks = sctp_alloc_chunklist();"
    }
]