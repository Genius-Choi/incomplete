[
    {
        "line": 10,
        "fullcodeline": "free_before = array->start - array->data;"
    },
    {
        "line": 11,
        "fullcodeline": "free_after = array->size - array->length - free_before;"
    },
    {
        "line": 17,
        "fullcodeline": "size = (uint64_t) prepend + array->length + append;"
    },
    {
        "line": 30,
        "fullcodeline": "start = njs_mp_align(vm->mem_pool, sizeof(njs_value_t),"
    },
    {
        "line": 36,
        "fullcodeline": "array->size = size;"
    },
    {
        "line": 38,
        "fullcodeline": "old = array->data;"
    },
    {
        "line": 39,
        "fullcodeline": "array->data = start;"
    },
    {
        "line": 40,
        "fullcodeline": "start += prepend;"
    },
    {
        "line": 46,
        "fullcodeline": "array->start = start;"
    },
    {
        "line": 48,
        "fullcodeline": "njs_mp_free(vm->mem_pool, old);"
    },
    {
        "line": 54,
        "fullcodeline": "njs_memory_error(vm);"
    },
    {
        "line": 13,
        "fullcodeline": "if (njs_fast_path(free_before >= prepend && free_after >= append)) {"
    },
    {
        "line": 19,
        "fullcodeline": "if (size < 16) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (njs_slow_path(size > (UINT32_MAX / sizeof(njs_value_t)))) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (njs_slow_path(start == NULL)) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (array->length != 0) {"
    },
    {
        "line": 20,
        "fullcodeline": "size *= 2;"
    },
    {
        "line": 31,
        "fullcodeline": "size * sizeof(njs_value_t));"
    },
    {
        "line": 43,
        "fullcodeline": "memcpy(start, array->start, array->length * sizeof(njs_value_t));"
    },
    {
        "line": 23,
        "fullcodeline": "size += size / 2;"
    }
]