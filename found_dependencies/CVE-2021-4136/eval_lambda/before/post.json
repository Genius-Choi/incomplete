[
    {
        "line": 7,
        "fullcodeline": "int\t\tevaluate = evalarg != NULL"
    },
    {
        "line": 12,
        "fullcodeline": "rettv->v_type = VAR_UNKNOWN;"
    },
    {
        "line": 14,
        "fullcodeline": "if (**arg == '{')"
    },
    {
        "line": 32,
        "fullcodeline": "if (ret != OK)"
    },
    {
        "line": 8,
        "fullcodeline": "&& (evalarg->eval_flags & EVAL_EVALUATE);"
    },
    {
        "line": 17,
        "fullcodeline": "ret = get_lambda_tv(arg, rettv, FALSE, evalarg);"
    },
    {
        "line": 52,
        "fullcodeline": "clear_tv(&base);"
    },
    {
        "line": 22,
        "fullcodeline": "++*arg;"
    },
    {
        "line": 23,
        "fullcodeline": "ret = eval1(arg, rettv, evalarg);"
    },
    {
        "line": 24,
        "fullcodeline": "*arg = skipwhite_and_linebreak(*arg, evalarg);"
    },
    {
        "line": 30,
        "fullcodeline": "++*arg;"
    },
    {
        "line": 25,
        "fullcodeline": "if (**arg != ')')"
    },
    {
        "line": 34,
        "fullcodeline": "else if (**arg != '(')"
    },
    {
        "line": 27,
        "fullcodeline": "emsg(_(e_missing_closing_paren));"
    },
    {
        "line": 28,
        "fullcodeline": "ret = FAIL;"
    },
    {
        "line": 43,
        "fullcodeline": "clear_tv(rettv);"
    },
    {
        "line": 44,
        "fullcodeline": "ret = FAIL;"
    },
    {
        "line": 47,
        "fullcodeline": "ret = call_func_rettv(arg, evalarg, rettv, evaluate, NULL, &base);"
    },
    {
        "line": 38,
        "fullcodeline": "if (*skipwhite(*arg) == '(')"
    },
    {
        "line": 39,
        "fullcodeline": "emsg(_(e_nowhitespace));"
    },
    {
        "line": 41,
        "fullcodeline": "semsg(_(e_missing_parenthesis_str), \"lambda\");"
    }
]