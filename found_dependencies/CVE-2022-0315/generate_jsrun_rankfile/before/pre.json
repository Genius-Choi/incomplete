[
    {
        "line": 12,
        "fullcodeline": "cpu_per_gpu = (lsf.LSFUtils.get_num_cores() * lsf.LSFUtils.get_num_threads()) // lsf.LSFUtils.get_num_gpus()"
    },
    {
        "line": 13,
        "fullcodeline": "host_list = (x.split(':') for x in settings.hosts.split(','))"
    },
    {
        "line": 16,
        "fullcodeline": "validated_list = []"
    },
    {
        "line": 17,
        "fullcodeline": "remaining_slots = settings.num_proc"
    },
    {
        "line": 34,
        "fullcodeline": "path = tempfile.mktemp() if path is None else path"
    },
    {
        "line": 18,
        "fullcodeline": "for host, slots in host_list:"
    },
    {
        "line": 29,
        "fullcodeline": "if remaining_slots != 0:"
    },
    {
        "line": 35,
        "fullcodeline": "with open(path, 'w') as tmp:"
    },
    {
        "line": 30,
        "fullcodeline": "raise ValueError('Not enough slots on the hosts to fulfill the {slots} requested.'.format("
    },
    {
        "line": 19,
        "fullcodeline": "slots = int(slots)"
    },
    {
        "line": 24,
        "fullcodeline": "needed_slots = min(slots, remaining_slots)"
    },
    {
        "line": 25,
        "fullcodeline": "validated_list.append((host, needed_slots))"
    },
    {
        "line": 26,
        "fullcodeline": "remaining_slots -= needed_slots"
    },
    {
        "line": 36,
        "fullcodeline": "tmp.write('overlapping_rs: allow\\n')"
    },
    {
        "line": 37,
        "fullcodeline": "tmp.write('cpu_index_using: logical\\n')"
    },
    {
        "line": 38,
        "fullcodeline": "rank = 0"
    },
    {
        "line": 20,
        "fullcodeline": "if slots > lsf.LSFUtils.get_num_gpus():"
    },
    {
        "line": 27,
        "fullcodeline": "if remaining_slots == 0:"
    },
    {
        "line": 39,
        "fullcodeline": "for host, slots in validated_list:"
    },
    {
        "line": 21,
        "fullcodeline": "raise ValueError('Invalid host input, slot count for host \\'{host}:{slots}\\' is greater '"
    },
    {
        "line": 40,
        "fullcodeline": "cpu_val = 0"
    },
    {
        "line": 41,
        "fullcodeline": "tmp.write('\\n')"
    },
    {
        "line": 42,
        "fullcodeline": "for s in range(slots):"
    },
    {
        "line": 43,
        "fullcodeline": "tmp.write('rank: {rank}: {{ hostname: {host}; cpu: {{{scpu}-{ecpu}}} ; gpu: * ; mem: * }}\\n'.format("
    },
    {
        "line": 49,
        "fullcodeline": "rank += 1"
    },
    {
        "line": 50,
        "fullcodeline": "cpu_val += cpu_per_gpu"
    },
    {
        "line": 23,
        "fullcodeline": "host=host, slots=slots, gpus=lsf.LSFUtils.get_num_gpus()))"
    },
    {
        "line": 47,
        "fullcodeline": "ecpu=cpu_val + cpu_per_gpu - 1"
    }
]