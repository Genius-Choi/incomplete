[
    {
        "line": 2,
        "fullcodeline": "int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);"
    },
    {
        "line": 3,
        "fullcodeline": "const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL"
    },
    {
        "line": 6,
        "fullcodeline": "memset(hm, 0, sizeof(*hm));"
    },
    {
        "line": 16,
        "fullcodeline": "s = skip(s, end, \" \", &hm->method);"
    },
    {
        "line": 17,
        "fullcodeline": "s = skip(s, end, \" \", &hm->uri);"
    },
    {
        "line": 18,
        "fullcodeline": "s = skip(s, end, \"\\r\\n\", &hm->proto);"
    },
    {
        "line": 30,
        "fullcodeline": "mg_http_parse_headers(s, end, hm->headers,"
    },
    {
        "line": 49,
        "fullcodeline": "is_response = mg_ncasecmp(hm->method.ptr, \"HTTP/\", 5) == 0;"
    },
    {
        "line": 7,
        "fullcodeline": "if (req_len <= 0) return req_len;"
    },
    {
        "line": 9,
        "fullcodeline": "hm->message.ptr = hm->head.ptr = s;"
    },
    {
        "line": 13,
        "fullcodeline": "hm->message.len = hm->body.len = (size_t) ~0;  // Set body length to infinite"
    },
    {
        "line": 24,
        "fullcodeline": "if ((qs = (const char *) memchr(hm->uri.ptr, '?', hm->uri.len)) != NULL) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (hm->method.len == 0 || hm->uri.len == 0) return -1;"
    },
    {
        "line": 32,
        "fullcodeline": "if ((cl = mg_http_get_header(hm, \"Content-Length\")) != NULL) {"
    },
    {
        "line": 33,
        "fullcodeline": "hm->body.len = (size_t) mg_to64(*cl);"
    },
    {
        "line": 50,
        "fullcodeline": "if (hm->body.len == (size_t) ~0 && !is_response &&"
    },
    {
        "line": 52,
        "fullcodeline": "mg_vcasecmp(&hm->method, \"POST\") != 0) {"
    },
    {
        "line": 53,
        "fullcodeline": "hm->body.len = 0;"
    },
    {
        "line": 58,
        "fullcodeline": "if (hm->body.len == (size_t) ~0 && is_response &&"
    },
    {
        "line": 59,
        "fullcodeline": "mg_vcasecmp(&hm->uri, \"204\") == 0) {"
    },
    {
        "line": 26,
        "fullcodeline": "hm->query.len = (size_t) (&hm->uri.ptr[hm->uri.len] - (qs + 1));"
    },
    {
        "line": 27,
        "fullcodeline": "hm->uri.len = (size_t) (qs - hm->uri.ptr);"
    },
    {
        "line": 51,
        "fullcodeline": "mg_vcasecmp(&hm->method, \"PUT\") != 0 &&"
    }
]