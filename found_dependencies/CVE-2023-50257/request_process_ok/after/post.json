[
    {
        "line": 3,
        "fullcodeline": "initialization_ok();"
    },
    {
        "line": 6,
        "fullcodeline": "MockIdentityHandle* p_identity_handle = &identity_handle;"
    },
    {
        "line": 8,
        "fullcodeline": "MockHandshakeHandle* p_handshake_handle = &handshake_handle;"
    },
    {
        "line": 9,
        "fullcodeline": "HandshakeMessageToken* p_handshake_message = new HandshakeMessageToken();"
    },
    {
        "line": 10,
        "fullcodeline": "CacheChange_t* change = new CacheChange_t(200);"
    },
    {
        "line": 12,
        "fullcodeline": "EXPECT_CALL(*auth_plugin_, validate_remote_identity_rvr(_,_,_,_,_)).Times(1)."
    },
    {
        "line": 14,
        "fullcodeline": "EXPECT_CALL(*auth_plugin_, begin_handshake_request(_,_,_,_,_)).Times(1)."
    },
    {
        "line": 17,
        "fullcodeline": "EXPECT_CALL(*stateless_writer_, new_change(_,_,_)).Times(1)."
    },
    {
        "line": 19,
        "fullcodeline": "EXPECT_CALL(*stateless_writer_->history_, add_change(change)).Times(1)."
    },
    {
        "line": 23,
        "fullcodeline": "fill_participant_key(remote_participant_key);"
    },
    {
        "line": 24,
        "fullcodeline": "ASSERT_TRUE(manager_.discovered_participant(IdentityToken(), remote_participant_key));"
    },
    {
        "line": 26,
        "fullcodeline": "delete change;"
    },
    {
        "line": 13,
        "fullcodeline": "WillOnce(DoAll(SetArgPointee<0>(p_identity_handle), Return(ValidationResult_t::VALIDATION_PENDING_HANDSHAKE_REQUEST)));"
    },
    {
        "line": 15,
        "fullcodeline": "WillOnce(DoAll(SetArgPointee<0>(p_handshake_handle),"
    },
    {
        "line": 18,
        "fullcodeline": "WillOnce(Return(change));"
    },
    {
        "line": 20,
        "fullcodeline": "WillOnce(Return(true));"
    },
    {
        "line": 16,
        "fullcodeline": "SetArgPointee<1>(p_handshake_message), Return(ValidationResult_t::VALIDATION_PENDING_HANDSHAKE_MESSAGE)));"
    }
]