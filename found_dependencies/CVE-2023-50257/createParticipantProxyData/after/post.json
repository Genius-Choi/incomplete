[
    {
        "line": 5,
        "fullcodeline": "std::unique_lock<std::recursive_mutex> lock(*getMutex());"
    },
    {
        "line": 9,
        "fullcodeline": "const GUID_t& remote = participant_data.m_guid;"
    },
    {
        "line": 11,
        "fullcodeline": "bool is_same_host = local.is_on_same_host_as(remote);"
    },
    {
        "line": 12,
        "fullcodeline": "bool is_same_process = local.is_on_same_process_as(remote);"
    },
    {
        "line": 48,
        "fullcodeline": "ParticipantProxyData* pdata = add_participant_proxy_data(participant_data.m_guid, true, &participant_data);"
    },
    {
        "line": 15,
        "fullcodeline": "if (participant_data.metatraffic_locators.multicast.empty() &&"
    },
    {
        "line": 22,
        "fullcodeline": "if (flags != ParticipantFilteringFlags_t::NO_FILTER)"
    },
    {
        "line": 49,
        "fullcodeline": "if (pdata != nullptr)"
    },
    {
        "line": 17,
        "fullcodeline": "!is_same_process)"
    },
    {
        "line": 51,
        "fullcodeline": "pdata->lease_duration_event->update_interval(pdata->m_leaseDuration);"
    },
    {
        "line": 52,
        "fullcodeline": "pdata->lease_duration_event->restart_timer();"
    },
    {
        "line": 24,
        "fullcodeline": "if (!is_same_host)"
    },
    {
        "line": 26,
        "fullcodeline": "if (flags & ParticipantFilteringFlags::FILTER_DIFFERENT_HOST)"
    },
    {
        "line": 33,
        "fullcodeline": "bool filter_same = (flags& ParticipantFilteringFlags::FILTER_SAME_PROCESS) != 0;"
    },
    {
        "line": 34,
        "fullcodeline": "bool filter_different = (flags& ParticipantFilteringFlags::FILTER_DIFFERENT_PROCESS) != 0;"
    },
    {
        "line": 36,
        "fullcodeline": "if (filter_same && filter_different)"
    },
    {
        "line": 41,
        "fullcodeline": "if ((filter_same && is_same_process) || (filter_different && !is_same_process))"
    }
]