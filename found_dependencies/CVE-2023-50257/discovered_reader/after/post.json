[
    {
        "line": 8,
        "fullcodeline": "auto sentry = is_security_manager_initialized();"
    },
    {
        "line": 14,
        "fullcodeline": "std::unique_lock<shared_mutex> lock(mutex_);"
    },
    {
        "line": 16,
        "fullcodeline": "PermissionsHandle* remote_permissions = nullptr;"
    },
    {
        "line": 17,
        "fullcodeline": "std::shared_ptr<ParticipantCryptoHandle> remote_participant_crypto_handle;"
    },
    {
        "line": 18,
        "fullcodeline": "std::shared_ptr<SecretHandle> shared_secret_handle;"
    },
    {
        "line": 19,
        "fullcodeline": "AuthenticationStatus auth_status(AUTHENTICATION_INIT);"
    },
    {
        "line": 47,
        "fullcodeline": "bool relay_only = false;"
    },
    {
        "line": 48,
        "fullcodeline": "bool returned_value = true;"
    },
    {
        "line": 9,
        "fullcodeline": "if (!sentry)"
    },
    {
        "line": 21,
        "fullcodeline": "if (!security_attributes.match(remote_reader_data.security_attributes_,"
    },
    {
        "line": 27,
        "fullcodeline": "if (remote_participant_key == participant_->getGuid())"
    },
    {
        "line": 51,
        "fullcodeline": "if (!is_builtin)"
    },
    {
        "line": 73,
        "fullcodeline": "if (returned_value && crypto_plugin_ != nullptr && (security_attributes.is_submessage_protected ||"
    },
    {
        "line": 29,
        "fullcodeline": "remote_participant_crypto_handle = local_participant_crypto_handle_;"
    },
    {
        "line": 76,
        "fullcodeline": "bool is_key_exchange = (remote_reader_data.guid().entityId"
    },
    {
        "line": 78,
        "fullcodeline": "auto local_writer = writer_handles_.find(writer_guid);"
    },
    {
        "line": 79,
        "fullcodeline": "returned_value = false;"
    },
    {
        "line": 33,
        "fullcodeline": "auto dp_it = discovered_participants_.find(remote_participant_key);"
    },
    {
        "line": 54,
        "fullcodeline": "if (participant_->security_attributes().allow_unauthenticated_participants &&"
    },
    {
        "line": 62,
        "fullcodeline": "if (access_plugin_ != nullptr && remote_permissions != nullptr)"
    },
    {
        "line": 81,
        "fullcodeline": "if (local_writer != writer_handles_.end())"
    },
    {
        "line": 35,
        "fullcodeline": "if (dp_it != discovered_participants_.end())"
    },
    {
        "line": 56,
        "fullcodeline": "(security_attributes.is_write_protected || security_attributes.is_read_protected))"
    },
    {
        "line": 37,
        "fullcodeline": "remote_permissions = dp_it->second->get_permissions_handle();"
    },
    {
        "line": 38,
        "fullcodeline": "remote_participant_crypto_handle = dp_it->second->get_participant_crypto();"
    },
    {
        "line": 39,
        "fullcodeline": "shared_secret_handle = dp_it->second->get_shared_secret();"
    },
    {
        "line": 40,
        "fullcodeline": "auth_status = dp_it->second->get_auth_status();"
    },
    {
        "line": 55,
        "fullcodeline": "auth_status != AUTHENTICATION_NOT_AVAILABLE && auth_status != AUTHENTICATION_OK &&"
    },
    {
        "line": 64,
        "fullcodeline": "if ((returned_value = access_plugin_->check_remote_datareader("
    },
    {
        "line": 83,
        "fullcodeline": "if (remote_participant_crypto_handle != nullptr)"
    },
    {
        "line": 296,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Cannot find local writer \" << writer_guid << std::endl);"
    },
    {
        "line": 301,
        "fullcodeline": "lock.unlock();"
    },
    {
        "line": 302,
        "fullcodeline": "participant_->pairing_remote_reader_with_local_writer_after_security("
    },
    {
        "line": 67,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Error checking create remote reader \" << remote_reader_data.guid()"
    },
    {
        "line": 85,
        "fullcodeline": "DatareaderCryptoHandle* remote_reader_handle ="
    },
    {
        "line": 86,
        "fullcodeline": "crypto_plugin_->cryptokeyfactory()->register_matched_remote_datareader("
    },
    {
        "line": 90,
        "fullcodeline": "if (remote_reader_handle != nullptr && !remote_reader_handle->nil())"
    },
    {
        "line": 285,
        "fullcodeline": "EPROSIMA_LOG_INFO(SECURITY, \"Storing remote reader << \" << remote_reader_data.guid() <<"
    },
    {
        "line": 288,
        "fullcodeline": "remote_reader_pending_discovery_messages_.push_back(std::make_tuple(remote_reader_data,"
    },
    {
        "line": 291,
        "fullcodeline": "returned_value = true;"
    },
    {
        "line": 68,
        "fullcodeline": "<< \" (\" << exception.what() << \")\");"
    },
    {
        "line": 278,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY,"
    },
    {
        "line": 94,
        "fullcodeline": "EPROSIMA_LOG_INFO(SECURITY,"
    },
    {
        "line": 96,
        "fullcodeline": "local_writer->second.associated_readers.emplace(remote_reader_data.guid(),"
    },
    {
        "line": 98,
        "fullcodeline": "lock.unlock();"
    },
    {
        "line": 99,
        "fullcodeline": "participant_->pairing_remote_reader_with_local_writer_after_security("
    },
    {
        "line": 279,
        "fullcodeline": "\"Crypto plugin fails registering remote reader \" << remote_reader_data.guid() <<"
    },
    {
        "line": 95,
        "fullcodeline": "\"Process successful discovering local reader \" << remote_reader_data.guid());"
    },
    {
        "line": 97,
        "fullcodeline": "std::make_tuple(remote_reader_data, remote_reader_handle));"
    },
    {
        "line": 105,
        "fullcodeline": "auto pending = remote_reader_pending_messages_.find("
    },
    {
        "line": 107,
        "fullcodeline": "bool pairing_cause_pending_message = false;"
    },
    {
        "line": 129,
        "fullcodeline": "WriterProxyData* writer_data = nullptr;"
    },
    {
        "line": 109,
        "fullcodeline": "if (pending != remote_reader_pending_messages_.end())"
    },
    {
        "line": 133,
        "fullcodeline": "if (crypto_plugin_->cryptokeyexchange()->create_local_datawriter_crypto_tokens("
    },
    {
        "line": 261,
        "fullcodeline": "if (local_reader_guid != GUID_t::unknown())"
    },
    {
        "line": 106,
        "fullcodeline": "std::make_pair(remote_reader_data.guid(), writer_guid));"
    },
    {
        "line": 125,
        "fullcodeline": "remote_reader_pending_messages_.erase(pending);"
    },
    {
        "line": 256,
        "fullcodeline": "lock.unlock();"
    },
    {
        "line": 263,
        "fullcodeline": "participant_->pairing_remote_writer_with_local_reader_after_security("
    },
    {
        "line": 271,
        "fullcodeline": "participant_->pairing_remote_reader_with_local_writer_after_security("
    },
    {
        "line": 111,
        "fullcodeline": "if (crypto_plugin_->cryptokeyexchange()->set_remote_datareader_crypto_tokens("
    },
    {
        "line": 138,
        "fullcodeline": "if (remote_participant_key == participant_->getGuid())"
    },
    {
        "line": 250,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Error generating crypto token. (\" << exception.what() << \")\");"
    },
    {
        "line": 117,
        "fullcodeline": "pairing_cause_pending_message = true;"
    },
    {
        "line": 140,
        "fullcodeline": "EPROSIMA_LOG_INFO(SECURITY, \"Process successful discovering local reader \""
    },
    {
        "line": 142,
        "fullcodeline": "local_writer->second.associated_readers.emplace(remote_reader_data.guid(),"
    },
    {
        "line": 146,
        "fullcodeline": "auto local_reader = reader_handles_.find(remote_reader_data.guid());"
    },
    {
        "line": 121,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Cannot set remote reader crypto tokens (\""
    },
    {
        "line": 143,
        "fullcodeline": "std::make_tuple(remote_reader_data, remote_reader_handle));"
    },
    {
        "line": 148,
        "fullcodeline": "if (local_reader != reader_handles_.end())"
    },
    {
        "line": 186,
        "fullcodeline": "ParticipantGenericMessage message ="
    },
    {
        "line": 190,
        "fullcodeline": "local_writer->second.associated_readers.emplace(remote_reader_data.guid(),"
    },
    {
        "line": 192,
        "fullcodeline": "lock.unlock();"
    },
    {
        "line": 194,
        "fullcodeline": "CacheChange_t* change = participant_volatile_message_secure_writer_->new_change("
    },
    {
        "line": 141,
        "fullcodeline": "<< remote_reader_data.guid());"
    },
    {
        "line": 150,
        "fullcodeline": "returned_value = true;"
    },
    {
        "line": 151,
        "fullcodeline": "auto remote_writer = local_reader->second.associated_writers.find(writer_guid);"
    },
    {
        "line": 187,
        "fullcodeline": "generate_writer_crypto_token_message(remote_participant_key,"
    },
    {
        "line": 191,
        "fullcodeline": "std::make_tuple(remote_reader_data, remote_reader_handle));"
    },
    {
        "line": 203,
        "fullcodeline": "if (change != nullptr)"
    },
    {
        "line": 153,
        "fullcodeline": "if (remote_writer != local_reader->second.associated_writers.end())"
    },
    {
        "line": 180,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Cannot find local reader (\""
    },
    {
        "line": 188,
        "fullcodeline": "remote_reader_data.guid(), writer_guid, local_writer_crypto_tokens);"
    },
    {
        "line": 206,
        "fullcodeline": "CDRMessage_t aux_msg(0);"
    },
    {
        "line": 207,
        "fullcodeline": "aux_msg.wraps = true;"
    },
    {
        "line": 213,
        "fullcodeline": "CDRMessage::addOctet(&aux_msg, 0);"
    },
    {
        "line": 214,
        "fullcodeline": "aux_msg.msg_endian = DEFAULT_ENDIAN;"
    },
    {
        "line": 215,
        "fullcodeline": "change->serializedPayload.encapsulation = PL_DEFAULT_ENCAPSULATION;"
    },
    {
        "line": 216,
        "fullcodeline": "CDRMessage::addOctet(&aux_msg, DEFAULT_ENCAPSULATION);"
    },
    {
        "line": 217,
        "fullcodeline": "CDRMessage::addUInt16(&aux_msg, 0);"
    },
    {
        "line": 122,
        "fullcodeline": "<< remote_reader_data.guid() << \") - (\" << exception.what() << \")\");"
    },
    {
        "line": 219,
        "fullcodeline": "if (CDRMessage::addParticipantGenericMessage(&aux_msg, message))"
    },
    {
        "line": 244,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"WriterHistory cannot retrieve a CacheChange_t\");"
    },
    {
        "line": 155,
        "fullcodeline": "if (crypto_plugin_->cryptokeyexchange()->set_remote_datawriter_crypto_tokens("
    },
    {
        "line": 173,
        "fullcodeline": "remote_writer_pending_messages_.emplace("
    },
    {
        "line": 221,
        "fullcodeline": "change->serializedPayload.length = aux_msg.length;"
    },
    {
        "line": 157,
        "fullcodeline": "*std::get<1>(remote_writer->second),"
    },
    {
        "line": 161,
        "fullcodeline": "local_reader_guid = local_reader->first;"
    },
    {
        "line": 162,
        "fullcodeline": "writer_data = &(std::get<0>(remote_writer->second));"
    },
    {
        "line": 174,
        "fullcodeline": "std::make_pair(writer_guid, local_reader->first),"
    },
    {
        "line": 175,
        "fullcodeline": "std::move(local_writer_crypto_tokens));"
    },
    {
        "line": 181,
        "fullcodeline": "<< remote_reader_data.guid() << \") - (\" << exception.what() << \")\");"
    },
    {
        "line": 224,
        "fullcodeline": "if (participant_volatile_message_secure_writer_history_->add_change(change))"
    },
    {
        "line": 238,
        "fullcodeline": "participant_volatile_message_secure_writer_->release_change(change);"
    },
    {
        "line": 239,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Cannot serialize ParticipantGenericMessage\");"
    },
    {
        "line": 166,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Cannot set local reader crypto tokens (\""
    },
    {
        "line": 226,
        "fullcodeline": "EPROSIMA_LOG_INFO(SECURITY, \"Process successful discovering remote reader \""
    },
    {
        "line": 228,
        "fullcodeline": "returned_value = true;"
    },
    {
        "line": 232,
        "fullcodeline": "participant_volatile_message_secure_writer_->release_change(change);"
    },
    {
        "line": 233,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"WriterHistory cannot add the CacheChange_t\");"
    },
    {
        "line": 227,
        "fullcodeline": "<< remote_reader_data.guid());"
    },
    {
        "line": 167,
        "fullcodeline": "<< remote_reader_data.guid() << \") - (\" << exception.what() << \")\");"
    }
]