[
    {
        "line": 10,
        "fullcodeline": "assert(handshake_handle);"
    },
    {
        "line": 11,
        "fullcodeline": "assert(handshake_message_out);"
    },
    {
        "line": 12,
        "fullcodeline": "assert(initiator_identity_handle.nil() == false);"
    },
    {
        "line": 13,
        "fullcodeline": "assert(replier_identity_handle.nil() == false);"
    },
    {
        "line": 15,
        "fullcodeline": "const PKIIdentityHandle& lih = PKIIdentityHandle::narrow(replier_identity_handle);"
    },
    {
        "line": 16,
        "fullcodeline": "PKIIdentityHandle& rih = PKIIdentityHandle::narrow(initiator_identity_handle);"
    },
    {
        "line": 42,
        "fullcodeline": "const std::vector<uint8_t>* cid = DataHolderHelper::find_binary_property_value(handshake_message_in, \"c.id\");"
    },
    {
        "line": 49,
        "fullcodeline": "rih->cert_ = load_certificate(*cid);"
    },
    {
        "line": 57,
        "fullcodeline": "X509_NAME* cert_sn = X509_get_subject_name(rih->cert_);"
    },
    {
        "line": 59,
        "fullcodeline": "char* cert_sn_str = X509_NAME_oneline(cert_sn, 0, 0);"
    },
    {
        "line": 67,
        "fullcodeline": "rih->cert_sn_.assign(cert_sn_str);"
    },
    {
        "line": 69,
        "fullcodeline": "BIO* cert_sn_rfc2253_str = BIO_new(BIO_s_mem());"
    },
    {
        "line": 70,
        "fullcodeline": "X509_NAME_print_ex(cert_sn_rfc2253_str, cert_sn, 0, XN_FLAG_RFC2253 & ~ASN1_STRFLGS_ESC_MSB);"
    },
    {
        "line": 71,
        "fullcodeline": "const int bufsize = 1024;"
    },
    {
        "line": 72,
        "fullcodeline": "char buffer[bufsize];"
    },
    {
        "line": 73,
        "fullcodeline": "int str_length = BIO_read(cert_sn_rfc2253_str, buffer, bufsize);"
    },
    {
        "line": 75,
        "fullcodeline": "rih->cert_sn_rfc2253_.assign(buffer, str_length);"
    },
    {
        "line": 102,
        "fullcodeline": "const std::vector<uint8_t>* pdata = DataHolderHelper::find_binary_property_value(handshake_message_in, \"c.pdata\");"
    },
    {
        "line": 112,
        "fullcodeline": "cdr_pdata.wraps = true;"
    },
    {
        "line": 113,
        "fullcodeline": "cdr_pdata.msg_endian = BIGEND;"
    },
    {
        "line": 114,
        "fullcodeline": "cdr_pdata.length = (uint32_t)pdata->size();"
    },
    {
        "line": 115,
        "fullcodeline": "cdr_pdata.max_size = (uint32_t)pdata->size();"
    },
    {
        "line": 116,
        "fullcodeline": "cdr_pdata.buffer = (octet*)pdata->data();"
    },
    {
        "line": 130,
        "fullcodeline": "unsigned char md[SHA256_DIGEST_LENGTH];"
    },
    {
        "line": 131,
        "fullcodeline": "unsigned char hash_c1[SHA256_DIGEST_LENGTH];"
    },
    {
        "line": 132,
        "fullcodeline": "unsigned int length = 0;"
    },
    {
        "line": 140,
        "fullcodeline": "md[5] &= 0xFE;"
    },
    {
        "line": 141,
        "fullcodeline": "unsigned char bytes[6]{"
    },
    {
        "line": 162,
        "fullcodeline": "const std::vector<uint8_t>* dsign_algo = DataHolderHelper::find_binary_property_value(handshake_message_in,"
    },
    {
        "line": 179,
        "fullcodeline": "rih->sign_alg_ = std::move(s_dsign_algo);"
    },
    {
        "line": 182,
        "fullcodeline": "const std::vector<uint8_t>* kagree_algo = DataHolderHelper::find_binary_property_value(handshake_message_in,"
    },
    {
        "line": 199,
        "fullcodeline": "rih->kagree_alg_ = std::move(s_kagree_algo);"
    },
    {
        "line": 203,
        "fullcodeline": "cdrmessage.msg_endian = BIGEND;"
    },
    {
        "line": 246,
        "fullcodeline": "PKIHandshakeHandle* handshake_handle_aux = new PKIHandshakeHandle();"
    },
    {
        "line": 247,
        "fullcodeline": "(*handshake_handle_aux)->kagree_alg_ = rih->kagree_alg_;"
    },
    {
        "line": 248,
        "fullcodeline": "(*handshake_handle_aux)->handshake_message_.class_id(\"DDS:Auth:PKI-DH:1.0+Reply\");"
    },
    {
        "line": 250,
        "fullcodeline": "int kagree_kind = get_dh_type((*handshake_handle_aux)->kagree_alg_);"
    },
    {
        "line": 263,
        "fullcodeline": "bproperty.name(\"c.id\");"
    },
    {
        "line": 266,
        "fullcodeline": "bproperty.propagate(true);"
    },
    {
        "line": 291,
        "fullcodeline": "bproperty.name(\"c.pdata\");"
    },
    {
        "line": 294,
        "fullcodeline": "bproperty.propagate(true);"
    },
    {
        "line": 298,
        "fullcodeline": "bproperty.name(\"c.dsign_algo\");"
    },
    {
        "line": 301,
        "fullcodeline": "bproperty.propagate(true);"
    },
    {
        "line": 306,
        "fullcodeline": "bproperty.name(\"c.kagree_algo\");"
    },
    {
        "line": 309,
        "fullcodeline": "bproperty.propagate(true);"
    },
    {
        "line": 315,
        "fullcodeline": "message.msg_endian = BIGEND;"
    },
    {
        "line": 324,
        "fullcodeline": "bproperty.name(\"hash_c2\");"
    },
    {
        "line": 326,
        "fullcodeline": "bproperty.propagate(true);"
    },
    {
        "line": 18,
        "fullcodeline": "if (lih.nil() || rih.nil())"
    },
    {
        "line": 25,
        "fullcodeline": "if (cdr_participant_data.length == 0)"
    },
    {
        "line": 51,
        "fullcodeline": "if (rih->cert_ == nullptr)"
    },
    {
        "line": 58,
        "fullcodeline": "assert(cert_sn != nullptr);"
    },
    {
        "line": 60,
        "fullcodeline": "assert(cert_sn_str != nullptr);"
    },
    {
        "line": 104,
        "fullcodeline": "if (pdata == nullptr)"
    },
    {
        "line": 165,
        "fullcodeline": "if (dsign_algo == nullptr)"
    },
    {
        "line": 172,
        "fullcodeline": "std::string s_dsign_algo(dsign_algo->begin(), dsign_algo->end());"
    },
    {
        "line": 185,
        "fullcodeline": "if (kagree_algo == nullptr)"
    },
    {
        "line": 192,
        "fullcodeline": "std::string s_kagree_algo(kagree_algo->begin(), kagree_algo->end());"
    },
    {
        "line": 204,
        "fullcodeline": "CDRMessage::addBinaryPropertySeq(&cdrmessage, handshake_message_in.binary_properties(), \"c.\", false);"
    },
    {
        "line": 228,
        "fullcodeline": "std::vector<uint8_t>* dh1 = DataHolderHelper::find_binary_property_value(handshake_message_in, \"dh1\");"
    },
    {
        "line": 237,
        "fullcodeline": "std::vector<uint8_t>* challenge1 = DataHolderHelper::find_binary_property_value(handshake_message_in, \"challenge1\");"
    },
    {
        "line": 264,
        "fullcodeline": "bproperty.value().assign(lih->cert_content_->data,"
    },
    {
        "line": 267,
        "fullcodeline": "(*handshake_handle_aux)->handshake_message_.binary_properties().push_back(std::move(bproperty));"
    },
    {
        "line": 292,
        "fullcodeline": "bproperty.value().assign(cdr_participant_data.buffer,"
    },
    {
        "line": 295,
        "fullcodeline": "(*handshake_handle_aux)->handshake_message_.binary_properties().push_back(std::move(bproperty));"
    },
    {
        "line": 299,
        "fullcodeline": "bproperty.value().assign(lih->sign_alg_.begin(),"
    },
    {
        "line": 300,
        "fullcodeline": "lih->sign_alg_.end());"
    },
    {
        "line": 302,
        "fullcodeline": "(*handshake_handle_aux)->handshake_message_.binary_properties().push_back(std::move(bproperty));"
    },
    {
        "line": 307,
        "fullcodeline": "bproperty.value().assign((*handshake_handle_aux)->kagree_alg_.begin(),"
    },
    {
        "line": 308,
        "fullcodeline": "(*handshake_handle_aux)->kagree_alg_.end());"
    },
    {
        "line": 310,
        "fullcodeline": "(*handshake_handle_aux)->handshake_message_.binary_properties().push_back(std::move(bproperty));"
    },
    {
        "line": 316,
        "fullcodeline": "CDRMessage::addBinaryPropertySeq(&message, (*handshake_handle_aux)->handshake_message_.binary_properties(), false);"
    },
    {
        "line": 325,
        "fullcodeline": "bproperty.value().assign(md, md + SHA256_DIGEST_LENGTH);"
    },
    {
        "line": 327,
        "fullcodeline": "(*handshake_handle_aux)->handshake_message_.binary_properties().push_back(std::move(bproperty));"
    },
    {
        "line": 20,
        "fullcodeline": "exception = _SecurityException_(\"Bad precondition\");"
    },
    {
        "line": 21,
        "fullcodeline": "EMERGENCY_SECURITY_LOGGING(\"PKIDH\", exception.what());"
    },
    {
        "line": 27,
        "fullcodeline": "exception = _SecurityException_(\"Bad precondition\");"
    },
    {
        "line": 33,
        "fullcodeline": "if (handshake_message_in.class_id().compare(\"DDS:Auth:PKI-DH:1.0+Req\") != 0)"
    },
    {
        "line": 61,
        "fullcodeline": "if (!rih->cert_sn_.empty() && rih->cert_sn_.compare(cert_sn_str) != 0)"
    },
    {
        "line": 77,
        "fullcodeline": "if (!verify_certificate(lih->store_, rih->cert_, lih->there_are_crls_))"
    },
    {
        "line": 84,
        "fullcodeline": "if (lih->permissions_credential_token_.class_id().compare(\"DDS:Access:PermissionsCredential\") == 0)"
    },
    {
        "line": 86,
        "fullcodeline": "const std::vector<uint8_t>* perm = DataHolderHelper::find_binary_property_value(handshake_message_in,"
    },
    {
        "line": 95,
        "fullcodeline": "rih->permissions_credential_token_.class_id(\"DDS:Access:PermissionsCredential\");"
    },
    {
        "line": 97,
        "fullcodeline": "permission_file.name(\"dds.perm.cert\");"
    },
    {
        "line": 118,
        "fullcodeline": "if (!ParameterList::read_guid_from_cdr_msg(cdr_pdata, fastdds::dds::PID_PARTICIPANT_GUID, participant_guid))"
    },
    {
        "line": 124,
        "fullcodeline": "if ((participant_guid.guidPrefix.value[0] & 0x80) != 0x80)"
    },
    {
        "line": 134,
        "fullcodeline": "if (!X509_NAME_digest(cert_sn, EVP_sha256(), md, &length) || length != SHA256_DIGEST_LENGTH)"
    },
    {
        "line": 155,
        "fullcodeline": "if (memcmp(md, bytes, 6) != 0)"
    },
    {
        "line": 173,
        "fullcodeline": "if (strcmp(RSA_SHA256, s_dsign_algo.c_str()) != 0 &&"
    },
    {
        "line": 174,
        "fullcodeline": "strcmp(ECDSA_SHA256, s_dsign_algo.c_str()) != 0)"
    },
    {
        "line": 193,
        "fullcodeline": "if (strcmp(DH_2048_256, s_kagree_algo.c_str()) != 0 &&"
    },
    {
        "line": 194,
        "fullcodeline": "strcmp(ECDH_prime256v1, s_kagree_algo.c_str()) != 0)"
    },
    {
        "line": 201,
        "fullcodeline": "CDRMessage_t cdrmessage(static_cast<uint32_t>(BinaryPropertyHelper::serialized_size("
    },
    {
        "line": 206,
        "fullcodeline": "if (!EVP_Digest(cdrmessage.buffer, cdrmessage.length, hash_c1, NULL, EVP_sha256(), NULL))"
    },
    {
        "line": 253,
        "fullcodeline": "if (((*handshake_handle_aux)->peerkeys_ = generate_dh_peer_key(*dh1, exception, kagree_kind)) == nullptr)"
    },
    {
        "line": 270,
        "fullcodeline": "if (lih->permissions_credential_token_.class_id().compare(\"DDS:Access:PermissionsCredential\") == 0)"
    },
    {
        "line": 272,
        "fullcodeline": "const Property* permissions_file = DataHolderHelper::find_property(lih->permissions_credential_token_,"
    },
    {
        "line": 313,
        "fullcodeline": "CDRMessage_t message(static_cast<uint32_t>(BinaryPropertyHelper::serialized_size("
    },
    {
        "line": 317,
        "fullcodeline": "if (!EVP_Digest(message.buffer, message.length, md, NULL, EVP_sha256(), NULL))"
    },
    {
        "line": 319,
        "fullcodeline": "exception = _SecurityException_(\"OpenSSL library cannot hash sha256\");"
    },
    {
        "line": 330,
        "fullcodeline": "if (((*handshake_handle_aux)->dhkeys_ = generate_dh_key(kagree_kind, exception)) != nullptr)"
    },
    {
        "line": 332,
        "fullcodeline": "bproperty.name(\"dh2\");"
    },
    {
        "line": 333,
        "fullcodeline": "bproperty.propagate(true);"
    },
    {
        "line": 28,
        "fullcodeline": "EMERGENCY_SECURITY_LOGGING(\"PKIDH\", exception.what());"
    },
    {
        "line": 89,
        "fullcodeline": "if (perm == nullptr)"
    },
    {
        "line": 98,
        "fullcodeline": "permission_file.value().assign(perm->begin(), perm->end());"
    },
    {
        "line": 99,
        "fullcodeline": "rih->permissions_credential_token_.properties().push_back(std::move(permission_file));"
    },
    {
        "line": 142,
        "fullcodeline": "static_cast<unsigned char>((participant_guid.guidPrefix.value[0] << 1) |"
    },
    {
        "line": 144,
        "fullcodeline": "static_cast<unsigned char>((participant_guid.guidPrefix.value[1] << 1) |"
    },
    {
        "line": 146,
        "fullcodeline": "static_cast<unsigned char>((participant_guid.guidPrefix.value[2] << 1) |"
    },
    {
        "line": 148,
        "fullcodeline": "static_cast<unsigned char>((participant_guid.guidPrefix.value[3] << 1) |"
    },
    {
        "line": 150,
        "fullcodeline": "static_cast<unsigned char>((participant_guid.guidPrefix.value[4] << 1) |"
    },
    {
        "line": 152,
        "fullcodeline": "static_cast<unsigned char>(participant_guid.guidPrefix.value[5] << 1)"
    },
    {
        "line": 202,
        "fullcodeline": "handshake_message_in.binary_properties())));"
    },
    {
        "line": 275,
        "fullcodeline": "if (permissions_file != nullptr)"
    },
    {
        "line": 314,
        "fullcodeline": "(*handshake_handle_aux)->handshake_message_.binary_properties())));"
    },
    {
        "line": 320,
        "fullcodeline": "EMERGENCY_SECURITY_LOGGING(\"PKIDH\", exception.what());"
    },
    {
        "line": 335,
        "fullcodeline": "if (store_dh_public_key((*handshake_handle_aux)->dhkeys_, kagree_kind, bproperty.value(), exception))"
    },
    {
        "line": 143,
        "fullcodeline": "(participant_guid.guidPrefix.value[1] >> 7)),"
    },
    {
        "line": 145,
        "fullcodeline": "(participant_guid.guidPrefix.value[2] >> 7)),"
    },
    {
        "line": 147,
        "fullcodeline": "(participant_guid.guidPrefix.value[3] >> 7)),"
    },
    {
        "line": 149,
        "fullcodeline": "(participant_guid.guidPrefix.value[4] >> 7)),"
    },
    {
        "line": 151,
        "fullcodeline": "(participant_guid.guidPrefix.value[5] >> 7)),"
    },
    {
        "line": 214,
        "fullcodeline": "std::vector<uint8_t>* hash_c1_vec ="
    },
    {
        "line": 215,
        "fullcodeline": "DataHolderHelper::find_binary_property_value(handshake_message_in, \"hash_c1\");"
    },
    {
        "line": 217,
        "fullcodeline": "if (hash_c1_vec != nullptr)"
    },
    {
        "line": 277,
        "fullcodeline": "bproperty.name(\"c.perm\");"
    },
    {
        "line": 279,
        "fullcodeline": "bproperty.propagate(true);"
    },
    {
        "line": 340,
        "fullcodeline": "bproperty.name(\"hash_c1\");"
    },
    {
        "line": 342,
        "fullcodeline": "bproperty.propagate(true);"
    },
    {
        "line": 346,
        "fullcodeline": "bproperty.name(\"dh1\");"
    },
    {
        "line": 347,
        "fullcodeline": "bproperty.value(std::move(*dh1));"
    },
    {
        "line": 348,
        "fullcodeline": "bproperty.propagate(true);"
    },
    {
        "line": 352,
        "fullcodeline": "bproperty.name(\"challenge1\");"
    },
    {
        "line": 353,
        "fullcodeline": "bproperty.value(std::move(*challenge1));"
    },
    {
        "line": 354,
        "fullcodeline": "bproperty.propagate(true);"
    },
    {
        "line": 358,
        "fullcodeline": "bproperty.name(\"challenge2\");"
    },
    {
        "line": 359,
        "fullcodeline": "bproperty.propagate(true);"
    },
    {
        "line": 35,
        "fullcodeline": "WARNING_SECURITY_LOGGING(\"PKIDH\", std::string(\"Bad HandshakeMessageToken (\") +"
    },
    {
        "line": 36,
        "fullcodeline": "handshake_message_in.class_id() + \")\");"
    },
    {
        "line": 196,
        "fullcodeline": "WARNING_SECURITY_LOGGING(\"PKIDH\", std::string(\"Not supported key agreement algorithm (\") + s_kagree_algo + \")\");"
    },
    {
        "line": 278,
        "fullcodeline": "bproperty.value().assign(permissions_file->value().begin(), permissions_file->value().end());"
    },
    {
        "line": 280,
        "fullcodeline": "(*handshake_handle_aux)->handshake_message_.binary_properties().push_back(std::move(bproperty));"
    },
    {
        "line": 284,
        "fullcodeline": "exception = _SecurityException_(\"Cannot find permissions file in permissions credential token\");"
    },
    {
        "line": 337,
        "fullcodeline": "(*handshake_handle_aux)->handshake_message_.binary_properties().push_back(std::move(bproperty));"
    },
    {
        "line": 341,
        "fullcodeline": "bproperty.value().assign(hash_c1, hash_c1 + SHA256_DIGEST_LENGTH);"
    },
    {
        "line": 343,
        "fullcodeline": "(*handshake_handle_aux)->handshake_message_.binary_properties().push_back(std::move(bproperty));"
    },
    {
        "line": 349,
        "fullcodeline": "(*handshake_handle_aux)->handshake_message_.binary_properties().push_back(std::move(bproperty));"
    },
    {
        "line": 355,
        "fullcodeline": "(*handshake_handle_aux)->handshake_message_.binary_properties().push_back(std::move(bproperty));"
    },
    {
        "line": 360,
        "fullcodeline": "if (generate_challenge(bproperty.value(), exception))"
    },
    {
        "line": 285,
        "fullcodeline": "EMERGENCY_SECURITY_LOGGING(\"PKIDH\", exception.what());"
    },
    {
        "line": 367,
        "fullcodeline": "cdrmessage2.msg_endian = BIGEND;"
    },
    {
        "line": 369,
        "fullcodeline": "CDRMessage::addUInt32(&cdrmessage2, 6);"
    },
    {
        "line": 371,
        "fullcodeline": "CDRMessage::addBinaryProperty(&cdrmessage2,"
    },
    {
        "line": 375,
        "fullcodeline": "CDRMessage::addBinaryProperty(&cdrmessage2,"
    },
    {
        "line": 379,
        "fullcodeline": "CDRMessage::addBinaryProperty(&cdrmessage2,"
    },
    {
        "line": 382,
        "fullcodeline": "CDRMessage::addBinaryProperty(&cdrmessage2,"
    },
    {
        "line": 386,
        "fullcodeline": "CDRMessage::addBinaryProperty(&cdrmessage2,"
    },
    {
        "line": 393,
        "fullcodeline": "bproperty.name(\"signature\");"
    },
    {
        "line": 394,
        "fullcodeline": "bproperty.propagate(true);"
    },
    {
        "line": 219,
        "fullcodeline": "if ((hash_c1_vec->size() == SHA256_DIGEST_LENGTH) &&"
    },
    {
        "line": 220,
        "fullcodeline": "(memcmp(hash_c1, hash_c1_vec->data(), SHA256_DIGEST_LENGTH) != 0))"
    },
    {
        "line": 362,
        "fullcodeline": "(*handshake_handle_aux)->handshake_message_.binary_properties().push_back(std::move(bproperty));"
    },
    {
        "line": 395,
        "fullcodeline": "if (sign_sha256(lih->pkey_, cdrmessage2.buffer, cdrmessage2.length, bproperty.value(), exception))"
    },
    {
        "line": 365,
        "fullcodeline": "CDRMessage_t cdrmessage2(static_cast<uint32_t>(BinaryPropertyHelper::serialized_size("
    },
    {
        "line": 372,
        "fullcodeline": "*DataHolderHelper::find_binary_property((*handshake_handle_aux)->handshake_message_,"
    },
    {
        "line": 376,
        "fullcodeline": "*DataHolderHelper::find_binary_property((*handshake_handle_aux)->handshake_message_,"
    },
    {
        "line": 380,
        "fullcodeline": "*DataHolderHelper::find_binary_property((*handshake_handle_aux)->handshake_message_, \"dh2\"));"
    },
    {
        "line": 383,
        "fullcodeline": "*DataHolderHelper::find_binary_property((*handshake_handle_aux)->handshake_message_,"
    },
    {
        "line": 387,
        "fullcodeline": "*DataHolderHelper::find_binary_property((*handshake_handle_aux)->handshake_message_, \"dh1\"));"
    },
    {
        "line": 390,
        "fullcodeline": "*DataHolderHelper::find_binary_property((*handshake_handle_aux)->handshake_message_,"
    },
    {
        "line": 366,
        "fullcodeline": "(*handshake_handle_aux)->handshake_message_.binary_properties())));"
    },
    {
        "line": 397,
        "fullcodeline": "(*handshake_handle_aux)->handshake_message_.binary_properties().push_back(std::move(bproperty));"
    }
]