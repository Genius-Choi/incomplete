[
    {
        "line": 3,
        "fullcodeline": "initialization_ok();"
    },
    {
        "line": 6,
        "fullcodeline": "MockIdentityHandle* p_identity_handle = &identity_handle;"
    },
    {
        "line": 8,
        "fullcodeline": "EXPECT_CALL(*auth_plugin_, validate_remote_identity_rvr(_,_,_,_,_)).Times(1)."
    },
    {
        "line": 12,
        "fullcodeline": "fill_participant_key(remote_participant_key);"
    },
    {
        "line": 13,
        "fullcodeline": "ASSERT_TRUE(manager_.discovered_participant(IdentityToken(), remote_participant_key));"
    },
    {
        "line": 16,
        "fullcodeline": "message.message_identity().source_guid(remote_participant_key);"
    },
    {
        "line": 17,
        "fullcodeline": "message.destination_participant_key(remote_participant_key);"
    },
    {
        "line": 18,
        "fullcodeline": "message.message_class_id(\"dds.sec.auth\");"
    },
    {
        "line": 20,
        "fullcodeline": "message.message_data().push_back(token);"
    },
    {
        "line": 21,
        "fullcodeline": "CacheChange_t* change = new CacheChange_t(ParticipantGenericMessageHelper::serialized_size(message));"
    },
    {
        "line": 22,
        "fullcodeline": "CDRMessage_t aux_msg(0);"
    },
    {
        "line": 23,
        "fullcodeline": "aux_msg.wraps = true;"
    },
    {
        "line": 26,
        "fullcodeline": "aux_msg.msg_endian = change->serializedPayload.encapsulation == PL_CDR_BE ? BIGEND : LITTLEEND;"
    },
    {
        "line": 27,
        "fullcodeline": "ASSERT_TRUE(CDRMessage::addParticipantGenericMessage(&aux_msg, message));"
    },
    {
        "line": 28,
        "fullcodeline": "change->serializedPayload.length = aux_msg.length;"
    },
    {
        "line": 31,
        "fullcodeline": "MockHandshakeHandle* p_handshake_handle = &handshake_handle;"
    },
    {
        "line": 32,
        "fullcodeline": "HandshakeMessageToken* p_handshake_message = new HandshakeMessageToken();"
    },
    {
        "line": 33,
        "fullcodeline": "CacheChange_t* change2 = new CacheChange_t(200);"
    },
    {
        "line": 35,
        "fullcodeline": "EXPECT_CALL(*auth_plugin_, begin_handshake_reply_rvr(_,_,_,_,_,_)).Times(1)."
    },
    {
        "line": 38,
        "fullcodeline": "EXPECT_CALL(*stateless_writer_, new_change(_,_,_)).Times(1)."
    },
    {
        "line": 40,
        "fullcodeline": "EXPECT_CALL(*stateless_writer_->history_, add_change(change2)).Times(1)."
    },
    {
        "line": 42,
        "fullcodeline": "EXPECT_CALL(*stateless_reader_->history_, remove_change(change)).Times(1)."
    },
    {
        "line": 45,
        "fullcodeline": "stateless_reader_->listener_->onNewCacheChangeAdded(stateless_reader_, change);"
    },
    {
        "line": 47,
        "fullcodeline": "delete change2;"
    },
    {
        "line": 9,
        "fullcodeline": "WillOnce(DoAll(SetArgPointee<0>(p_identity_handle), Return(ValidationResult_t::VALIDATION_PENDING_HANDSHAKE_MESSAGE)));"
    },
    {
        "line": 36,
        "fullcodeline": "WillOnce(DoAll(SetArgPointee<0>(p_handshake_handle),"
    },
    {
        "line": 39,
        "fullcodeline": "WillOnce(Return(change2));"
    },
    {
        "line": 41,
        "fullcodeline": "WillOnce(Return(true));"
    },
    {
        "line": 43,
        "fullcodeline": "WillOnce(Return(true));"
    },
    {
        "line": 37,
        "fullcodeline": "SetArgPointee<1>(p_handshake_message), Return(ValidationResult_t::VALIDATION_PENDING_HANDSHAKE_MESSAGE)));"
    }
]