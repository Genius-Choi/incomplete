[
    {
        "line": 8,
        "fullcodeline": "auto sentry = is_security_manager_initialized();"
    },
    {
        "line": 14,
        "fullcodeline": "std::unique_lock<shared_mutex> lock(mutex_);"
    },
    {
        "line": 16,
        "fullcodeline": "PermissionsHandle* remote_permissions = nullptr;"
    },
    {
        "line": 17,
        "fullcodeline": "std::shared_ptr<ParticipantCryptoHandle> remote_participant_crypto_handle;"
    },
    {
        "line": 18,
        "fullcodeline": "std::shared_ptr<SecretHandle> shared_secret_handle;"
    },
    {
        "line": 45,
        "fullcodeline": "bool returned_value = true;"
    },
    {
        "line": 9,
        "fullcodeline": "if (!sentry)"
    },
    {
        "line": 20,
        "fullcodeline": "if (!security_attributes.match(remote_writer_data.security_attributes_,"
    },
    {
        "line": 26,
        "fullcodeline": "if (remote_participant_key == participant_->getGuid())"
    },
    {
        "line": 48,
        "fullcodeline": "if (!is_builtin && access_plugin_ != nullptr && remote_permissions != nullptr)"
    },
    {
        "line": 58,
        "fullcodeline": "if (returned_value && crypto_plugin_ != nullptr && (security_attributes.is_submessage_protected ||"
    },
    {
        "line": 28,
        "fullcodeline": "remote_participant_crypto_handle = local_participant_crypto_handle_;"
    },
    {
        "line": 61,
        "fullcodeline": "bool is_key_exchange = (remote_writer_data.guid().entityId"
    },
    {
        "line": 63,
        "fullcodeline": "auto local_reader = reader_handles_.find(reader_guid);"
    },
    {
        "line": 64,
        "fullcodeline": "returned_value = false;"
    },
    {
        "line": 32,
        "fullcodeline": "auto dp_it = discovered_participants_.find(remote_participant_key);"
    },
    {
        "line": 50,
        "fullcodeline": "if ((returned_value = access_plugin_->check_remote_datawriter("
    },
    {
        "line": 66,
        "fullcodeline": "if (local_reader != reader_handles_.end())"
    },
    {
        "line": 34,
        "fullcodeline": "if (dp_it != discovered_participants_.end())"
    },
    {
        "line": 53,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Error checking create remote writer \" << remote_writer_data.guid()"
    },
    {
        "line": 36,
        "fullcodeline": "remote_permissions = dp_it->second->get_permissions_handle();"
    },
    {
        "line": 37,
        "fullcodeline": "remote_participant_crypto_handle = dp_it->second->get_participant_crypto();"
    },
    {
        "line": 38,
        "fullcodeline": "shared_secret_handle = dp_it->second->get_shared_secret();"
    },
    {
        "line": 68,
        "fullcodeline": "if (remote_participant_crypto_handle != nullptr)"
    },
    {
        "line": 283,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Cannot find local reader \" << reader_guid << std::endl);"
    },
    {
        "line": 288,
        "fullcodeline": "lock.unlock();"
    },
    {
        "line": 289,
        "fullcodeline": "participant_->pairing_remote_writer_with_local_reader_after_security("
    },
    {
        "line": 70,
        "fullcodeline": "DatawriterCryptoHandle* remote_writer_handle ="
    },
    {
        "line": 54,
        "fullcodeline": "<< \" (\" << exception.what() << \")\");"
    },
    {
        "line": 71,
        "fullcodeline": "crypto_plugin_->cryptokeyfactory()->register_matched_remote_datawriter("
    },
    {
        "line": 75,
        "fullcodeline": "if (remote_writer_handle != nullptr && !remote_writer_handle->nil())"
    },
    {
        "line": 272,
        "fullcodeline": "EPROSIMA_LOG_INFO(SECURITY, \"Storing remote writer << \" << remote_writer_data.guid() <<"
    },
    {
        "line": 275,
        "fullcodeline": "remote_writer_pending_discovery_messages_.push_back(std::make_tuple(remote_writer_data,"
    },
    {
        "line": 278,
        "fullcodeline": "returned_value = true;"
    },
    {
        "line": 265,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY,"
    },
    {
        "line": 79,
        "fullcodeline": "EPROSIMA_LOG_INFO(SECURITY,"
    },
    {
        "line": 81,
        "fullcodeline": "local_reader->second.associated_writers.emplace(remote_writer_data.guid(),"
    },
    {
        "line": 83,
        "fullcodeline": "lock.unlock();"
    },
    {
        "line": 84,
        "fullcodeline": "participant_->pairing_remote_writer_with_local_reader_after_security("
    },
    {
        "line": 266,
        "fullcodeline": "\"Crypto plugin fails registering remote writer \" << remote_writer_data.guid() <<"
    },
    {
        "line": 80,
        "fullcodeline": "\"Process successful discovering local writer \" << remote_writer_data.guid());"
    },
    {
        "line": 82,
        "fullcodeline": "std::make_tuple(remote_writer_data, remote_writer_handle));"
    },
    {
        "line": 90,
        "fullcodeline": "auto pending = remote_writer_pending_messages_.find("
    },
    {
        "line": 92,
        "fullcodeline": "bool pairing_cause_pending_message = false;"
    },
    {
        "line": 114,
        "fullcodeline": "ReaderProxyData* reader_data = nullptr;"
    },
    {
        "line": 94,
        "fullcodeline": "if (pending != remote_writer_pending_messages_.end())"
    },
    {
        "line": 118,
        "fullcodeline": "if (crypto_plugin_->cryptokeyexchange()->create_local_datareader_crypto_tokens("
    },
    {
        "line": 248,
        "fullcodeline": "if (local_writer_guid != GUID_t::unknown())"
    },
    {
        "line": 91,
        "fullcodeline": "std::make_pair(remote_writer_data.guid(), reader_guid));"
    },
    {
        "line": 110,
        "fullcodeline": "remote_writer_pending_messages_.erase(pending);"
    },
    {
        "line": 243,
        "fullcodeline": "lock.unlock();"
    },
    {
        "line": 250,
        "fullcodeline": "participant_->pairing_remote_reader_with_local_writer_after_security("
    },
    {
        "line": 258,
        "fullcodeline": "participant_->pairing_remote_writer_with_local_reader_after_security("
    },
    {
        "line": 96,
        "fullcodeline": "if (crypto_plugin_->cryptokeyexchange()->set_remote_datawriter_crypto_tokens("
    },
    {
        "line": 124,
        "fullcodeline": "if (remote_participant_key == participant_->getGuid())"
    },
    {
        "line": 237,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Error generating crypto token. (\" << exception.what() << \")\");"
    },
    {
        "line": 102,
        "fullcodeline": "pairing_cause_pending_message = true;"
    },
    {
        "line": 126,
        "fullcodeline": "EPROSIMA_LOG_INFO(SECURITY, \"Process successful discovering local writer \""
    },
    {
        "line": 128,
        "fullcodeline": "local_reader->second.associated_writers.emplace(remote_writer_data.guid(),"
    },
    {
        "line": 132,
        "fullcodeline": "auto local_writer = writer_handles_.find(remote_writer_data.guid());"
    },
    {
        "line": 106,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Cannot set remote writer crypto tokens (\""
    },
    {
        "line": 129,
        "fullcodeline": "std::make_tuple(remote_writer_data, remote_writer_handle));"
    },
    {
        "line": 134,
        "fullcodeline": "if (local_writer != writer_handles_.end())"
    },
    {
        "line": 172,
        "fullcodeline": "ParticipantGenericMessage message ="
    },
    {
        "line": 176,
        "fullcodeline": "local_reader->second.associated_writers.emplace(remote_writer_data.guid(),"
    },
    {
        "line": 178,
        "fullcodeline": "lock.unlock();"
    },
    {
        "line": 180,
        "fullcodeline": "CacheChange_t* change = participant_volatile_message_secure_writer_->new_change("
    },
    {
        "line": 127,
        "fullcodeline": "<< remote_writer_data.guid());"
    },
    {
        "line": 136,
        "fullcodeline": "returned_value = true;"
    },
    {
        "line": 137,
        "fullcodeline": "auto remote_reader = local_writer->second.associated_readers.find(reader_guid);"
    },
    {
        "line": 173,
        "fullcodeline": "generate_reader_crypto_token_message(remote_participant_key,"
    },
    {
        "line": 177,
        "fullcodeline": "std::make_tuple(remote_writer_data, remote_writer_handle));"
    },
    {
        "line": 189,
        "fullcodeline": "if (change != nullptr)"
    },
    {
        "line": 139,
        "fullcodeline": "if (remote_reader != local_writer->second.associated_readers.end())"
    },
    {
        "line": 166,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Cannot find local writer (\""
    },
    {
        "line": 174,
        "fullcodeline": "remote_writer_data.guid(), reader_guid, local_reader_crypto_tokens);"
    },
    {
        "line": 192,
        "fullcodeline": "CDRMessage_t aux_msg(0);"
    },
    {
        "line": 193,
        "fullcodeline": "aux_msg.wraps = true;"
    },
    {
        "line": 199,
        "fullcodeline": "CDRMessage::addOctet(&aux_msg, 0);"
    },
    {
        "line": 200,
        "fullcodeline": "aux_msg.msg_endian = DEFAULT_ENDIAN;"
    },
    {
        "line": 201,
        "fullcodeline": "change->serializedPayload.encapsulation = PL_DEFAULT_ENCAPSULATION;"
    },
    {
        "line": 202,
        "fullcodeline": "CDRMessage::addOctet(&aux_msg, DEFAULT_ENCAPSULATION);"
    },
    {
        "line": 203,
        "fullcodeline": "CDRMessage::addUInt16(&aux_msg, 0);"
    },
    {
        "line": 107,
        "fullcodeline": "<< remote_writer_data.guid() << \") - (\" << exception.what() << \")\");"
    },
    {
        "line": 205,
        "fullcodeline": "if (CDRMessage::addParticipantGenericMessage(&aux_msg, message))"
    },
    {
        "line": 230,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"WriterHistory cannot retrieve a CacheChange_t\");"
    },
    {
        "line": 141,
        "fullcodeline": "if (crypto_plugin_->cryptokeyexchange()->set_remote_datareader_crypto_tokens("
    },
    {
        "line": 159,
        "fullcodeline": "remote_reader_pending_messages_.emplace("
    },
    {
        "line": 207,
        "fullcodeline": "change->serializedPayload.length = aux_msg.length;"
    },
    {
        "line": 143,
        "fullcodeline": "*std::get<1>(remote_reader->second),"
    },
    {
        "line": 147,
        "fullcodeline": "local_writer_guid = local_writer->first;"
    },
    {
        "line": 148,
        "fullcodeline": "reader_data = &(std::get<0>(remote_reader->second));"
    },
    {
        "line": 160,
        "fullcodeline": "std::make_pair(reader_guid, local_writer->first),"
    },
    {
        "line": 161,
        "fullcodeline": "std::move(local_reader_crypto_tokens));"
    },
    {
        "line": 167,
        "fullcodeline": "<< remote_writer_data.guid() << \") - (\" << exception.what() << \")\");"
    },
    {
        "line": 210,
        "fullcodeline": "if (participant_volatile_message_secure_writer_history_->add_change(change))"
    },
    {
        "line": 224,
        "fullcodeline": "participant_volatile_message_secure_writer_->release_change(change);"
    },
    {
        "line": 225,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Cannot serialize ParticipantGenericMessage\");"
    },
    {
        "line": 152,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Cannot set local writer crypto tokens (\""
    },
    {
        "line": 212,
        "fullcodeline": "EPROSIMA_LOG_INFO(SECURITY, \"Process successful discovering remote writer \""
    },
    {
        "line": 214,
        "fullcodeline": "returned_value = true;"
    },
    {
        "line": 218,
        "fullcodeline": "participant_volatile_message_secure_writer_->release_change(change);"
    },
    {
        "line": 219,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"WriterHistory cannot add the CacheChange_t\");"
    },
    {
        "line": 213,
        "fullcodeline": "<< remote_writer_data.guid());"
    },
    {
        "line": 153,
        "fullcodeline": "<< remote_writer_data.guid() << \") - (\" << exception.what() << \")\");"
    }
]