[
    {
        "line": 6,
        "fullcodeline": "EPROSIMA_LOG_INFO(RTPS_PDP, \"Beginning PDPClient Endpoints creation\");"
    },
    {
        "line": 8,
        "fullcodeline": "const RTPSParticipantAttributes& pattr = mp_RTPSParticipant->getRTPSParticipantAttributes();"
    },
    {
        "line": 15,
        "fullcodeline": "hatt.payloadMaxSize = mp_builtin->m_att.readerPayloadSize;"
    },
    {
        "line": 16,
        "fullcodeline": "hatt.initialReservedCaches = pdp_initial_reserved_caches;"
    },
    {
        "line": 17,
        "fullcodeline": "hatt.memoryPolicy = mp_builtin->m_att.readerHistoryMemoryPolicy;"
    },
    {
        "line": 18,
        "fullcodeline": "endpoints.reader.history_.reset(new ReaderHistory(hatt));"
    },
    {
        "line": 21,
        "fullcodeline": "ratt.expectsInlineQos = false;"
    },
    {
        "line": 22,
        "fullcodeline": "ratt.endpoint.endpointKind = READER;"
    },
    {
        "line": 23,
        "fullcodeline": "ratt.endpoint.multicastLocatorList = mp_builtin->m_metatrafficMulticastLocatorList;"
    },
    {
        "line": 24,
        "fullcodeline": "ratt.endpoint.unicastLocatorList = mp_builtin->m_metatrafficUnicastLocatorList;"
    },
    {
        "line": 25,
        "fullcodeline": "ratt.endpoint.external_unicast_locators = mp_builtin->m_att.metatraffic_external_unicast_locators;"
    },
    {
        "line": 26,
        "fullcodeline": "ratt.endpoint.ignore_non_matching_locators = pattr.ignore_non_matching_locators;"
    },
    {
        "line": 27,
        "fullcodeline": "ratt.endpoint.topicKind = WITH_KEY;"
    },
    {
        "line": 28,
        "fullcodeline": "ratt.endpoint.durabilityKind = TRANSIENT_LOCAL;"
    },
    {
        "line": 29,
        "fullcodeline": "ratt.endpoint.reliabilityKind = RELIABLE;"
    },
    {
        "line": 30,
        "fullcodeline": "ratt.times.heartbeatResponseDelay = pdp_heartbeat_response_delay;"
    },
    {
        "line": 40,
        "fullcodeline": "endpoints.reader.listener_.reset(new PDPListener(this));"
    },
    {
        "line": 42,
        "fullcodeline": "RTPSReader* reader = nullptr;"
    },
    {
        "line": 47,
        "fullcodeline": "EntityId_t reader_entity = c_EntityId_SPDPReader;"
    },
    {
        "line": 70,
        "fullcodeline": "hatt.payloadMaxSize = mp_builtin->m_att.writerPayloadSize;"
    },
    {
        "line": 71,
        "fullcodeline": "hatt.initialReservedCaches = pdp_initial_reserved_caches;"
    },
    {
        "line": 72,
        "fullcodeline": "hatt.memoryPolicy = mp_builtin->m_att.writerHistoryMemoryPolicy;"
    },
    {
        "line": 73,
        "fullcodeline": "endpoints.writer.history_.reset(new WriterHistory(hatt));"
    },
    {
        "line": 76,
        "fullcodeline": "watt.endpoint.endpointKind = WRITER;"
    },
    {
        "line": 84,
        "fullcodeline": "watt.times.heartbeatPeriod = pdp_heartbeat_period;"
    },
    {
        "line": 85,
        "fullcodeline": "watt.times.nackResponseDelay = pdp_nack_response_delay;"
    },
    {
        "line": 86,
        "fullcodeline": "watt.times.nackSupressionDuration = pdp_nack_supression_duration;"
    },
    {
        "line": 102,
        "fullcodeline": "RTPSWriter* wout = nullptr;"
    },
    {
        "line": 107,
        "fullcodeline": "EntityId_t writer_entity = c_EntityId_SPDPWriter;"
    },
    {
        "line": 49,
        "fullcodeline": "if (mp_RTPSParticipant->createReader(&reader, ratt, endpoints.reader.history_.get(),"
    },
    {
        "line": 109,
        "fullcodeline": "if (mp_RTPSParticipant->createWriter(&wout, watt, endpoints.writer.history_.get(), nullptr, writer_entity, true))"
    },
    {
        "line": 50,
        "fullcodeline": "endpoints.reader.listener_.get(),"
    },
    {
        "line": 97,
        "fullcodeline": "if (pattr.throughputController.bytesPerPeriod != UINT32_MAX && pattr.throughputController.periodMillisecs != 0)"
    },
    {
        "line": 99,
        "fullcodeline": "watt.mode = ASYNCHRONOUS_WRITER;"
    },
    {
        "line": 127,
        "fullcodeline": "eprosima::shared_lock<eprosima::shared_mutex> disc_lock(mp_builtin->getDiscoveryMutex());"
    },
    {
        "line": 61,
        "fullcodeline": "EPROSIMA_LOG_ERROR(RTPS_PDP, \"PDPClient Reader creation failed\");"
    },
    {
        "line": 62,
        "fullcodeline": "endpoints.reader.release();"
    },
    {
        "line": 131,
        "fullcodeline": "mp_RTPSParticipant->createSenderResources(it.metatrafficMulticastLocatorList);"
    },
    {
        "line": 132,
        "fullcodeline": "mp_RTPSParticipant->createSenderResources(it.metatrafficUnicastLocatorList);"
    },
    {
        "line": 147,
        "fullcodeline": "match_pdp_writer_nts_(it);"
    },
    {
        "line": 148,
        "fullcodeline": "match_pdp_reader_nts_(it);"
    }
]