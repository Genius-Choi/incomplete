[
    {
        "line": 8,
        "fullcodeline": "auto sentry = is_security_manager_initialized();"
    },
    {
        "line": 14,
        "fullcodeline": "HandshakeMessageToken* handshake_message = nullptr;"
    },
    {
        "line": 17,
        "fullcodeline": "ValidationResult_t ret = VALIDATION_FAILED;"
    },
    {
        "line": 19,
        "fullcodeline": "assert(remote_participant_info->identity_handle_ != nullptr);"
    },
    {
        "line": 21,
        "fullcodeline": "EPROSIMA_LOG_INFO(SECURITY, \"Processing handshake from participant \" << participant_data.m_guid);"
    },
    {
        "line": 77,
        "fullcodeline": "assert(remote_participant_info->handshake_handle_ != nullptr);"
    },
    {
        "line": 80,
        "fullcodeline": "remote_participant_info->event_->cancel_timer();"
    },
    {
        "line": 86,
        "fullcodeline": "int64_t expected_sequence_number = 0;"
    },
    {
        "line": 88,
        "fullcodeline": "bool handshake_message_send = true;"
    },
    {
        "line": 156,
        "fullcodeline": "bool returnedValue = false;"
    },
    {
        "line": 157,
        "fullcodeline": "AuthenticationStatus pre_auth_status = remote_participant_info->auth_status_;"
    },
    {
        "line": 9,
        "fullcodeline": "if (!sentry)"
    },
    {
        "line": 23,
        "fullcodeline": "if (remote_participant_info->auth_status_ == AUTHENTICATION_REQUEST_NOT_SEND)"
    },
    {
        "line": 57,
        "fullcodeline": "if (ret == VALIDATION_FAILED)"
    },
    {
        "line": 81,
        "fullcodeline": "if (remote_participant_info->change_sequence_number_ != SequenceNumber_t::unknown())"
    },
    {
        "line": 90,
        "fullcodeline": "if (ret == VALIDATION_PENDING_HANDSHAKE_MESSAGE ||"
    },
    {
        "line": 25,
        "fullcodeline": "ret = authentication_plugin_->begin_handshake_request(&remote_participant_info->handshake_handle_,"
    },
    {
        "line": 83,
        "fullcodeline": "participant_stateless_message_writer_history_->remove_change(remote_participant_info->change_sequence_number_);"
    },
    {
        "line": 84,
        "fullcodeline": "remote_participant_info->change_sequence_number_ = SequenceNumber_t::unknown();"
    },
    {
        "line": 91,
        "fullcodeline": "ret == VALIDATION_OK_WITH_FINAL_MESSAGE)"
    },
    {
        "line": 93,
        "fullcodeline": "handshake_message_send = false;"
    },
    {
        "line": 95,
        "fullcodeline": "assert(handshake_message);"
    },
    {
        "line": 100,
        "fullcodeline": "ParticipantGenericMessage message = generate_authentication_message(std::move(message_identity),"
    },
    {
        "line": 103,
        "fullcodeline": "CacheChange_t* change = participant_stateless_message_writer_->new_change([&message]() -> uint32_t"
    },
    {
        "line": 60,
        "fullcodeline": "if (participant_->getListener() != nullptr)"
    },
    {
        "line": 69,
        "fullcodeline": "if (strlen(exception.what()) > 0)"
    },
    {
        "line": 110,
        "fullcodeline": "if (change != nullptr)"
    },
    {
        "line": 29,
        "fullcodeline": "participant_->pdp()->get_participant_proxy_data_serialized(BIGEND),"
    },
    {
        "line": 32,
        "fullcodeline": "else if (remote_participant_info->auth_status_ == AUTHENTICATION_WAITING_REQUEST)"
    },
    {
        "line": 64,
        "fullcodeline": "info.guid = participant_data.m_guid;"
    },
    {
        "line": 65,
        "fullcodeline": "participant_->getListener()->onParticipantAuthentication("
    },
    {
        "line": 71,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY_AUTHENTICATION, exception.what());"
    },
    {
        "line": 113,
        "fullcodeline": "CDRMessage_t aux_msg(0);"
    },
    {
        "line": 114,
        "fullcodeline": "aux_msg.wraps = true;"
    },
    {
        "line": 120,
        "fullcodeline": "CDRMessage::addOctet(&aux_msg, 0);"
    },
    {
        "line": 121,
        "fullcodeline": "aux_msg.msg_endian = DEFAULT_ENDIAN;"
    },
    {
        "line": 122,
        "fullcodeline": "change->serializedPayload.encapsulation = PL_DEFAULT_ENCAPSULATION;"
    },
    {
        "line": 123,
        "fullcodeline": "CDRMessage::addOctet(&aux_msg, DEFAULT_ENCAPSULATION);"
    },
    {
        "line": 124,
        "fullcodeline": "CDRMessage::addUInt16(&aux_msg, 0);"
    },
    {
        "line": 34,
        "fullcodeline": "assert(!remote_participant_info->handshake_handle_);"
    },
    {
        "line": 35,
        "fullcodeline": "ret = authentication_plugin_->begin_handshake_reply(&remote_participant_info->handshake_handle_,"
    },
    {
        "line": 66,
        "fullcodeline": "participant_->getUserRTPSParticipant(), std::move(info));"
    },
    {
        "line": 126,
        "fullcodeline": "if (CDRMessage::addParticipantGenericMessage(&aux_msg, message))"
    },
    {
        "line": 152,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"WriterHistory cannot retrieve a CacheChange_t\");"
    },
    {
        "line": 167,
        "fullcodeline": "remote_participant_info->auth_status_ = AUTHENTICATION_OK;"
    },
    {
        "line": 206,
        "fullcodeline": "returnedValue = true;"
    },
    {
        "line": 128,
        "fullcodeline": "change->serializedPayload.length = aux_msg.length;"
    },
    {
        "line": 131,
        "fullcodeline": "EPROSIMA_LOG_INFO(SECURITY, \"Authentication handshake sent to participant \" <<"
    },
    {
        "line": 168,
        "fullcodeline": "if (ret == VALIDATION_PENDING_HANDSHAKE_MESSAGE)"
    },
    {
        "line": 181,
        "fullcodeline": "if (remote_participant_info->auth_status_ == AUTHENTICATION_OK)"
    },
    {
        "line": 197,
        "fullcodeline": "if (ret == VALIDATION_PENDING_HANDSHAKE_MESSAGE)"
    },
    {
        "line": 37,
        "fullcodeline": "std::move(message_in),"
    },
    {
        "line": 40,
        "fullcodeline": "participant_->pdp()->get_participant_proxy_data_serialized(BIGEND),"
    },
    {
        "line": 43,
        "fullcodeline": "else if (remote_participant_info->auth_status_ == AUTHENTICATION_WAITING_REPLY ||"
    },
    {
        "line": 133,
        "fullcodeline": "if (participant_stateless_message_writer_history_->add_change(change))"
    },
    {
        "line": 147,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Cannot serialize ParticipantGenericMessage\");"
    },
    {
        "line": 183,
        "fullcodeline": "std::shared_ptr<SecretHandle> shared_secret_handle = authentication_plugin_->get_shared_secret("
    },
    {
        "line": 199,
        "fullcodeline": "remote_participant_info->expected_sequence_number_ = expected_sequence_number;"
    },
    {
        "line": 201,
        "fullcodeline": "auto time_ms = remote_participant_info->event_->getIntervalMilliSec();"
    },
    {
        "line": 202,
        "fullcodeline": "remote_participant_info->event_->update_interval_millisec(time_ms * 2);"
    },
    {
        "line": 203,
        "fullcodeline": "remote_participant_info->event_->restart_timer();"
    },
    {
        "line": 44,
        "fullcodeline": "remote_participant_info->auth_status_ == AUTHENTICATION_WAITING_FINAL)"
    },
    {
        "line": 46,
        "fullcodeline": "assert(remote_participant_info->handshake_handle_);"
    },
    {
        "line": 47,
        "fullcodeline": "ret = authentication_plugin_->process_handshake(&handshake_message,"
    },
    {
        "line": 135,
        "fullcodeline": "handshake_message_send = true;"
    },
    {
        "line": 136,
        "fullcodeline": "expected_sequence_number = message.message_identity().sequence_number();"
    },
    {
        "line": 137,
        "fullcodeline": "remote_participant_info->change_sequence_number_ = change->sequenceNumber;"
    },
    {
        "line": 170,
        "fullcodeline": "if (pre_auth_status == AUTHENTICATION_REQUEST_NOT_SEND)"
    },
    {
        "line": 185,
        "fullcodeline": "if (!participant_authorized(participant_data, remote_participant_info,"
    },
    {
        "line": 141,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"WriterHistory cannot add the CacheChange_t\");"
    },
    {
        "line": 172,
        "fullcodeline": "remote_participant_info->auth_status_ = AUTHENTICATION_WAITING_REPLY;"
    },
    {
        "line": 188,
        "fullcodeline": "authentication_plugin_->return_sharedsecret_handle(shared_secret_handle, exception);"
    },
    {
        "line": 48,
        "fullcodeline": "std::move(message_in),"
    },
    {
        "line": 52,
        "fullcodeline": "else if (remote_participant_info->auth_status_ == AUTHENTICATION_OK)"
    },
    {
        "line": 192,
        "fullcodeline": "notify_part_authorized = true;"
    },
    {
        "line": 174,
        "fullcodeline": "else if (pre_auth_status == AUTHENTICATION_WAITING_REQUEST)"
    },
    {
        "line": 176,
        "fullcodeline": "remote_participant_info->auth_status_ = AUTHENTICATION_WAITING_FINAL;"
    }
]