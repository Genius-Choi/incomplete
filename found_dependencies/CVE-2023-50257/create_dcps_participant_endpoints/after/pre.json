[
    {
        "line": 3,
        "fullcodeline": "const RTPSParticipantAttributes& pattr = mp_RTPSParticipant->getRTPSParticipantAttributes();"
    },
    {
        "line": 4,
        "fullcodeline": "const RTPSParticipantAllocationAttributes& allocation = pattr.allocation;"
    },
    {
        "line": 5,
        "fullcodeline": "const BuiltinAttributes& builtin_att = mp_builtin->m_att;"
    },
    {
        "line": 6,
        "fullcodeline": "auto endpoints = dynamic_cast<fastdds::rtps::SimplePDPEndpoints*>(builtin_endpoints_.get());"
    },
    {
        "line": 7,
        "fullcodeline": "assert(nullptr != endpoints);"
    },
    {
        "line": 9,
        "fullcodeline": "constexpr const char* topic_name = \"DCPSParticipant\";"
    },
    {
        "line": 10,
        "fullcodeline": "const EntityId_t reader_entity_id = c_EntityId_SPDPReader;"
    },
    {
        "line": 11,
        "fullcodeline": "const EntityId_t writer_entity_id = c_EntityId_SPDPWriter;"
    },
    {
        "line": 14,
        "fullcodeline": "auto& reader = endpoints->reader;"
    },
    {
        "line": 16,
        "fullcodeline": "hatt = pdp_reader_history_attributes(builtin_att, allocation);"
    },
    {
        "line": 18,
        "fullcodeline": "PoolConfig reader_pool_cfg = PoolConfig::from_history_attributes(hatt);"
    },
    {
        "line": 19,
        "fullcodeline": "reader.payload_pool_ = TopicPayloadPoolRegistry::get(topic_name, reader_pool_cfg);"
    },
    {
        "line": 20,
        "fullcodeline": "reader.payload_pool_->reserve_history(reader_pool_cfg, true);"
    },
    {
        "line": 21,
        "fullcodeline": "reader.history_.reset(new ReaderHistory(hatt));"
    },
    {
        "line": 23,
        "fullcodeline": "ReaderAttributes ratt = create_builtin_reader_attributes();"
    },
    {
        "line": 24,
        "fullcodeline": "ratt.endpoint.reliabilityKind = BEST_EFFORT;"
    },
    {
        "line": 26,
        "fullcodeline": "RTPSReader* rtps_reader = nullptr;"
    },
    {
        "line": 45,
        "fullcodeline": "auto& writer = endpoints->writer;"
    },
    {
        "line": 46,
        "fullcodeline": "hatt = pdp_writer_history_attributes(builtin_att);"
    },
    {
        "line": 48,
        "fullcodeline": "PoolConfig writer_pool_cfg = PoolConfig::from_history_attributes(hatt);"
    },
    {
        "line": 49,
        "fullcodeline": "writer.payload_pool_ = TopicPayloadPoolRegistry::get(topic_name, writer_pool_cfg);"
    },
    {
        "line": 50,
        "fullcodeline": "writer.payload_pool_->reserve_history(writer_pool_cfg, false);"
    },
    {
        "line": 51,
        "fullcodeline": "writer.history_.reset(new WriterHistory(hatt));"
    },
    {
        "line": 53,
        "fullcodeline": "WriterAttributes watt = create_builtin_writer_attributes();"
    },
    {
        "line": 62,
        "fullcodeline": "RTPSWriter* rtps_writer = nullptr;"
    },
    {
        "line": 27,
        "fullcodeline": "if (mp_RTPSParticipant->createReader(&rtps_reader, ratt, reader.payload_pool_, reader.history_.get(),"
    },
    {
        "line": 63,
        "fullcodeline": "if (mp_RTPSParticipant->createWriter(&rtps_writer, watt, writer.payload_pool_, writer.history_.get(),"
    },
    {
        "line": 28,
        "fullcodeline": "reader.listener_.get(), reader_entity_id, true, false))"
    },
    {
        "line": 30,
        "fullcodeline": "reader.reader_ = dynamic_cast<StatelessReader*>(rtps_reader);"
    },
    {
        "line": 57,
        "fullcodeline": "if (pattr.throughputController.bytesPerPeriod != UINT32_MAX && pattr.throughputController.periodMillisecs != 0)"
    },
    {
        "line": 59,
        "fullcodeline": "watt.mode = ASYNCHRONOUS_WRITER;"
    },
    {
        "line": 66,
        "fullcodeline": "writer.writer_ = dynamic_cast<StatelessWriter*>(rtps_writer);"
    },
    {
        "line": 73,
        "fullcodeline": "const NetworkFactory& network = mp_RTPSParticipant->network_factory();"
    },
    {
        "line": 31,
        "fullcodeline": "assert(nullptr != reader.reader_);"
    },
    {
        "line": 39,
        "fullcodeline": "EPROSIMA_LOG_ERROR(RTPS_PDP, \"'\" << topic_name << \"' builtin reader creation failed\");"
    },
    {
        "line": 40,
        "fullcodeline": "reader.release();"
    },
    {
        "line": 67,
        "fullcodeline": "assert(nullptr != writer.writer_);"
    },
    {
        "line": 122,
        "fullcodeline": "EPROSIMA_LOG_ERROR(RTPS_PDP, \"'\" << topic_name << \"' builtin writer creation failed\");"
    },
    {
        "line": 77,
        "fullcodeline": "if (network.is_locator_remote_or_allowed(loc))"
    },
    {
        "line": 81,
        "fullcodeline": "fixed_locators.push_back(loc);"
    },
    {
        "line": 104,
        "fullcodeline": "network.transform_remote_locator(loc, local_locator,"
    },
    {
        "line": 106,
        "fullcodeline": "if (loc != local_locator"
    },
    {
        "line": 108,
        "fullcodeline": "&& network.is_locator_allowed(local_locator))"
    },
    {
        "line": 110,
        "fullcodeline": "fixed_locators.push_back(local_locator);"
    },
    {
        "line": 115,
        "fullcodeline": "EPROSIMA_LOG_WARNING(RTPS_PDP, \"Ignoring initial peers locator \" << loc << \" : not allowed.\");"
    },
    {
        "line": 107,
        "fullcodeline": "&& (loc.kind == LOCATOR_KIND_TCPv4 || loc.kind == LOCATOR_KIND_TCPv6)"
    }
]