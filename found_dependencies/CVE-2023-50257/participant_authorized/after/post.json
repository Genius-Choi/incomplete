[
    {
        "line": 6,
        "fullcodeline": "auto sentry = is_security_manager_initialized();"
    },
    {
        "line": 12,
        "fullcodeline": "EPROSIMA_LOG_INFO(SECURITY, \"Authorized participant \" << participant_data.m_guid);"
    },
    {
        "line": 15,
        "fullcodeline": "PermissionsHandle* remote_permissions = nullptr;"
    },
    {
        "line": 7,
        "fullcodeline": "if (!sentry)"
    },
    {
        "line": 17,
        "fullcodeline": "if (access_plugin_ != nullptr)"
    },
    {
        "line": 64,
        "fullcodeline": "if (access_plugin_ == nullptr || remote_permissions != nullptr)"
    },
    {
        "line": 19,
        "fullcodeline": "PermissionsCredentialToken* credential_token = nullptr;"
    },
    {
        "line": 20,
        "fullcodeline": "if (authentication_plugin_->get_authenticated_peer_credential_token(&credential_token,"
    },
    {
        "line": 70,
        "fullcodeline": "if (crypto_plugin_ != nullptr)"
    },
    {
        "line": 23,
        "fullcodeline": "remote_permissions ="
    },
    {
        "line": 54,
        "fullcodeline": "authentication_plugin_->return_authenticated_peer_credential_token(credential_token,"
    },
    {
        "line": 80,
        "fullcodeline": "std::shared_ptr<ParticipantCryptoHandle> participant_crypto_handle ="
    },
    {
        "line": 156,
        "fullcodeline": "match_builtin_key_exchange_endpoints(participant_data);"
    },
    {
        "line": 157,
        "fullcodeline": "exchange_participant_crypto(participant_crypto_handle, participant_data.m_guid);"
    },
    {
        "line": 179,
        "fullcodeline": "participant_->pdp()->getEDP()->pairing_reader_proxy_with_local_writer(remote_reader.second,"
    },
    {
        "line": 185,
        "fullcodeline": "participant_->pdp()->getEDP()->pairing_writer_proxy_with_local_reader(remote_writer.second,"
    },
    {
        "line": 24,
        "fullcodeline": "access_plugin_->validate_remote_permissions(*authentication_plugin_,"
    },
    {
        "line": 31,
        "fullcodeline": "if (remote_permissions != nullptr && !remote_permissions->nil())"
    },
    {
        "line": 59,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Not receive remote permissions of participant \" <<"
    },
    {
        "line": 73,
        "fullcodeline": "if (!shared_secret_handle)"
    },
    {
        "line": 81,
        "fullcodeline": "register_and_match_crypto_endpoint(*remote_participant_info->identity_handle_,"
    },
    {
        "line": 85,
        "fullcodeline": "if (participant_crypto_handle && !participant_crypto_handle->nil())"
    },
    {
        "line": 174,
        "fullcodeline": "match_builtin_key_exchange_endpoints(participant_data);"
    },
    {
        "line": 75,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Not shared secret for participant \" << participant_data.m_guid);"
    },
    {
        "line": 87,
        "fullcodeline": "std::lock_guard<shared_mutex> _(mutex_);"
    },
    {
        "line": 90,
        "fullcodeline": "auto pending = remote_participant_pending_messages_.find(participant_data.m_guid);"
    },
    {
        "line": 108,
        "fullcodeline": "auto rit = remote_reader_pending_discovery_messages_.begin();"
    },
    {
        "line": 121,
        "fullcodeline": "auto wit = remote_writer_pending_discovery_messages_.begin();"
    },
    {
        "line": 134,
        "fullcodeline": "auto dp_it = discovered_participants_.find(participant_data.m_guid);"
    },
    {
        "line": 162,
        "fullcodeline": "shared_lock<shared_mutex> _(mutex_);"
    },
    {
        "line": 165,
        "fullcodeline": "auto dp_it = discovered_participants_.find(participant_data.m_guid);"
    },
    {
        "line": 33,
        "fullcodeline": "if (!access_plugin_->check_remote_participant(*remote_permissions, domain_id_,"
    },
    {
        "line": 44,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Error validating remote permissions for \" <<"
    },
    {
        "line": 92,
        "fullcodeline": "if (pending != remote_participant_pending_messages_.end())"
    },
    {
        "line": 109,
        "fullcodeline": "while (rit != remote_reader_pending_discovery_messages_.end())"
    },
    {
        "line": 122,
        "fullcodeline": "while (wit != remote_writer_pending_discovery_messages_.end())"
    },
    {
        "line": 136,
        "fullcodeline": "if (dp_it != discovered_participants_.end())"
    },
    {
        "line": 151,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Cannot register remote participant in crypto plugin (\""
    },
    {
        "line": 167,
        "fullcodeline": "if (dp_it != discovered_participants_.end())"
    },
    {
        "line": 36,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Error checking remote participant  \" <<"
    },
    {
        "line": 38,
        "fullcodeline": "access_plugin_->return_permissions_handle(remote_permissions, exception);"
    },
    {
        "line": 39,
        "fullcodeline": "remote_permissions = nullptr;"
    },
    {
        "line": 47,
        "fullcodeline": "if (remote_permissions != nullptr)"
    },
    {
        "line": 60,
        "fullcodeline": "participant_data.m_guid << \" (\" << exception.what() << \").\");"
    },
    {
        "line": 104,
        "fullcodeline": "remote_participant_pending_messages_.erase(pending);"
    },
    {
        "line": 118,
        "fullcodeline": "++rit;"
    },
    {
        "line": 131,
        "fullcodeline": "++wit;"
    },
    {
        "line": 138,
        "fullcodeline": "dp_it->second->set_participant_crypto(participant_crypto_handle);"
    },
    {
        "line": 139,
        "fullcodeline": "dp_it->second->set_shared_secret(shared_secret_handle);"
    },
    {
        "line": 140,
        "fullcodeline": "dp_it->second->set_permissions_handle(remote_permissions);"
    },
    {
        "line": 169,
        "fullcodeline": "dp_it->second->set_shared_secret(shared_secret_handle);"
    },
    {
        "line": 170,
        "fullcodeline": "dp_it->second->set_permissions_handle(remote_permissions);"
    },
    {
        "line": 49,
        "fullcodeline": "access_plugin_->return_permissions_handle(remote_permissions, exception);"
    },
    {
        "line": 50,
        "fullcodeline": "remote_permissions = nullptr;"
    },
    {
        "line": 94,
        "fullcodeline": "if (!crypto_plugin_->cryptokeyexchange()->set_remote_participant_crypto_tokens("
    },
    {
        "line": 111,
        "fullcodeline": "if (std::get<1>(*rit) == participant_data.m_guid)"
    },
    {
        "line": 124,
        "fullcodeline": "if (std::get<1>(*wit) == participant_data.m_guid)"
    },
    {
        "line": 144,
        "fullcodeline": "crypto_plugin_->cryptokeyfactory()->unregister_participant(participant_crypto_handle, exception);"
    },
    {
        "line": 145,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Cannot find remote participant \" << participant_data.m_guid);"
    },
    {
        "line": 45,
        "fullcodeline": "participant_data.m_guid << \" (\" << exception.what() << \").\");"
    },
    {
        "line": 100,
        "fullcodeline": "EPROSIMA_LOG_ERROR(SECURITY, \"Cannot set remote participant crypto tokens (\""
    },
    {
        "line": 113,
        "fullcodeline": "temp_readers.push_back(std::make_pair(std::get<0>(*rit), std::get<2>(*rit)));"
    },
    {
        "line": 114,
        "fullcodeline": "rit = remote_reader_pending_discovery_messages_.erase(rit);"
    },
    {
        "line": 126,
        "fullcodeline": "temp_writers.push_back(std::make_pair(std::get<0>(*wit), std::get<2>(*wit)));"
    },
    {
        "line": 127,
        "fullcodeline": "wit = remote_writer_pending_discovery_messages_.erase(wit);"
    },
    {
        "line": 37,
        "fullcodeline": "participant_data.m_guid << \" (\" << exception.what() << \").\");"
    },
    {
        "line": 101,
        "fullcodeline": "<< participant_data.m_guid << \") - (\" << exception.what() << \")\");"
    }
]