[
    {
        "line": 27,
        "fullcodeline": "boost::lock_guard<boost::recursive_mutex> guard(*mp_mutex);"
    },
    {
        "line": 28,
        "fullcodeline": "mp_userParticipant->mp_impl = this;"
    },
    {
        "line": 30,
        "fullcodeline": "loc.port = PParam.defaultSendPort;"
    },
    {
        "line": 31,
        "fullcodeline": "mp_event_thr = new ResourceEvent();"
    },
    {
        "line": 32,
        "fullcodeline": "mp_event_thr->init_thread(this);"
    },
    {
        "line": 43,
        "fullcodeline": "bool hasLocatorsDefined = true;"
    },
    {
        "line": 90,
        "fullcodeline": "createReceiverResources(m_att.defaultUnicastLocatorList, true);"
    },
    {
        "line": 96,
        "fullcodeline": "createReceiverResources(m_att.defaultMulticastLocatorList, true);"
    },
    {
        "line": 99,
        "fullcodeline": "hasLocatorsDefined = true;"
    },
    {
        "line": 109,
        "fullcodeline": "std::vector<SenderResource > newSenders;"
    },
    {
        "line": 110,
        "fullcodeline": "std::vector<SenderResource > newSendersBuffer;"
    },
    {
        "line": 111,
        "fullcodeline": "LocatorList_t defcopy = m_att.defaultOutLocatorList;"
    },
    {
        "line": 132,
        "fullcodeline": "m_send_resources_mutex.lock();"
    },
    {
        "line": 136,
        "fullcodeline": "m_send_resources_mutex.unlock();"
    },
    {
        "line": 137,
        "fullcodeline": "m_att.defaultOutLocatorList = defcopy;"
    },
    {
        "line": 142,
        "fullcodeline": "logInfo(RTPS_PARTICIPANT,\"RTPSParticipant \\\"\" <<  m_att.getName() << \"\\\" with guidPrefix: \" <<m_guid.guidPrefix);"
    },
    {
        "line": 144,
        "fullcodeline": "mp_builtinProtocols = new BuiltinProtocols();"
    },
    {
        "line": 25,
        "fullcodeline": "m_network_Factory.RegisterTransport(transportDescriptor.get());"
    },
    {
        "line": 36,
        "fullcodeline": "if (PParam.throughputController.bytesPerPeriod != UINT32_MAX &&"
    },
    {
        "line": 51,
        "fullcodeline": "if(m_att.defaultUnicastLocatorList.empty() && m_att.defaultMulticastLocatorList.empty())"
    },
    {
        "line": 92,
        "fullcodeline": "if(!hasLocatorsDefined){"
    },
    {
        "line": 100,
        "fullcodeline": "if (m_att.defaultOutLocatorList.empty()){"
    },
    {
        "line": 112,
        "fullcodeline": "for (auto it = defcopy.begin(); it != defcopy.end(); ++it){"
    },
    {
        "line": 133,
        "fullcodeline": "for(auto mit=newSenders.begin(); mit!=newSenders.end();++mit){"
    },
    {
        "line": 139,
        "fullcodeline": "if (!hasLocatorsDefined){"
    },
    {
        "line": 145,
        "fullcodeline": "if(!mp_builtinProtocols->initBuiltinProtocols(this,m_att.builtin))"
    },
    {
        "line": 20,
        "fullcodeline": "m_network_Factory.RegisterTransport(&descriptor);"
    },
    {
        "line": 37,
        "fullcodeline": "PParam.throughputController.periodMillisecs != 0)"
    },
    {
        "line": 39,
        "fullcodeline": "std::unique_ptr<FlowController> controller(new ThroughputController(PParam.throughputController, this));"
    },
    {
        "line": 40,
        "fullcodeline": "m_controllers.push_back(std::move(controller));"
    },
    {
        "line": 55,
        "fullcodeline": "hasLocatorsDefined = false;"
    },
    {
        "line": 59,
        "fullcodeline": "IPFinder::getIP4Address(&loclist);"
    },
    {
        "line": 70,
        "fullcodeline": "loc2.port= m_att.port.portBase+"
    },
    {
        "line": 74,
        "fullcodeline": "loc2.set_IP4_address(239,255,1,4);"
    },
    {
        "line": 75,
        "fullcodeline": "m_att.defaultMulticastLocatorList.push_back(loc2);"
    },
    {
        "line": 93,
        "fullcodeline": "logInfo(RTPS_PARTICIPANT,m_att.getName()<<\" Created with NO default Unicast Locator List, adding Locators: \"<<m_att.defaultUnicastLocatorList);"
    },
    {
        "line": 101,
        "fullcodeline": "hasLocatorsDefined = false;"
    },
    {
        "line": 105,
        "fullcodeline": "SendLocator.kind = LOCATOR_KIND_UDPv4;"
    },
    {
        "line": 106,
        "fullcodeline": "m_att.defaultOutLocatorList.push_back(SendLocator);"
    },
    {
        "line": 114,
        "fullcodeline": "newSendersBuffer = m_network_Factory.BuildSenderResources((*it));"
    },
    {
        "line": 115,
        "fullcodeline": "uint32_t tries = 100;"
    },
    {
        "line": 129,
        "fullcodeline": "newSendersBuffer.clear();"
    },
    {
        "line": 134,
        "fullcodeline": "m_senderResource.push_back(std::move(*mit));"
    },
    {
        "line": 140,
        "fullcodeline": "logInfo(RTPS_PARTICIPANT, m_att.getName() << \" Created with NO default Send Locator List, adding Locators: \" << m_att.defaultOutLocatorList);"
    },
    {
        "line": 147,
        "fullcodeline": "logWarning(RTPS_PARTICIPANT, \"The builtin protocols were not corecctly initialized\");"
    },
    {
        "line": 60,
        "fullcodeline": "for(auto it=loclist.begin();it!=loclist.end();++it){"
    },
    {
        "line": 81,
        "fullcodeline": "m_network_Factory.NormalizeLocators(m_att.defaultUnicastLocatorList);"
    },
    {
        "line": 116,
        "fullcodeline": "while(newSendersBuffer.empty() && tries != 0)"
    },
    {
        "line": 124,
        "fullcodeline": "for(auto mit= newSendersBuffer.begin(); mit!= newSendersBuffer.end(); ++mit){"
    },
    {
        "line": 61,
        "fullcodeline": "(*it).port=m_att.port.portBase+"
    },
    {
        "line": 65,
        "fullcodeline": "(*it).kind = LOCATOR_KIND_UDPv4;"
    },
    {
        "line": 67,
        "fullcodeline": "m_att.defaultUnicastLocatorList.push_back((*it));"
    },
    {
        "line": 73,
        "fullcodeline": "m_att.port.participantIDGain*m_att.participantID;"
    },
    {
        "line": 119,
        "fullcodeline": "(*it) = applyLocatorAdaptRule(*it); //Mutate the Locator to find a suitable rule. Overwrite the old one as it is useless now."
    },
    {
        "line": 120,
        "fullcodeline": "newSendersBuffer = m_network_Factory.BuildSenderResources((*it));"
    },
    {
        "line": 121,
        "fullcodeline": "--tries;"
    },
    {
        "line": 125,
        "fullcodeline": "newSenders.push_back(std::move(*mit));"
    },
    {
        "line": 71,
        "fullcodeline": "m_att.port.domainIDGain*PParam.builtin.domainId+"
    }
]