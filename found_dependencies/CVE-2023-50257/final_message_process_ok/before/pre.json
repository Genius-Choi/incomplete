[
    {
        "line": 4,
        "fullcodeline": "request_process_ok();"
    },
    {
        "line": 6,
        "fullcodeline": "EXPECT_CALL(*stateless_writer_->history_, remove_change(SequenceNumber_t{ 0, 1 })).Times(1)."
    },
    {
        "line": 9,
        "fullcodeline": "GUID_t remote_participant_key(participant_data_.m_guid);"
    },
    {
        "line": 12,
        "fullcodeline": "message.message_identity().source_guid(remote_participant_key);"
    },
    {
        "line": 13,
        "fullcodeline": "message.related_message_identity().source_guid(stateless_writer_->getGuid());"
    },
    {
        "line": 14,
        "fullcodeline": "message.related_message_identity().sequence_number(1);"
    },
    {
        "line": 15,
        "fullcodeline": "message.destination_participant_key(remote_participant_key);"
    },
    {
        "line": 16,
        "fullcodeline": "message.message_class_id(\"dds.sec.auth\");"
    },
    {
        "line": 18,
        "fullcodeline": "message.message_data().push_back(token);"
    },
    {
        "line": 19,
        "fullcodeline": "CacheChange_t* change ="
    },
    {
        "line": 22,
        "fullcodeline": "CDRMessage_t aux_msg(0);"
    },
    {
        "line": 23,
        "fullcodeline": "aux_msg.wraps = true;"
    },
    {
        "line": 24,
        "fullcodeline": "aux_msg.buffer = change->serializedPayload.data;"
    },
    {
        "line": 25,
        "fullcodeline": "aux_msg.max_size = change->serializedPayload.max_size;"
    },
    {
        "line": 28,
        "fullcodeline": "CDRMessage::addOctet(&aux_msg, 0);"
    },
    {
        "line": 29,
        "fullcodeline": "aux_msg.msg_endian = DEFAULT_ENDIAN;"
    },
    {
        "line": 30,
        "fullcodeline": "change->serializedPayload.encapsulation = PL_DEFAULT_ENCAPSULATION;"
    },
    {
        "line": 31,
        "fullcodeline": "CDRMessage::addOctet(&aux_msg, DEFAULT_ENCAPSULATION);"
    },
    {
        "line": 32,
        "fullcodeline": "CDRMessage::addUInt16(&aux_msg, 0);"
    },
    {
        "line": 34,
        "fullcodeline": "ASSERT_TRUE(CDRMessage::addParticipantGenericMessage(&aux_msg, message));"
    },
    {
        "line": 35,
        "fullcodeline": "change->serializedPayload.length = aux_msg.length;"
    },
    {
        "line": 38,
        "fullcodeline": "CacheChange_t* change2 = new CacheChange_t(200);"
    },
    {
        "line": 39,
        "fullcodeline": "auto shared_secret_handle = auth_plugin_->get_dummy_shared_secret();"
    },
    {
        "line": 41,
        "fullcodeline": "auto mock_crypto_factory = dynamic_cast<MockCryptoKeyFactory*>(crypto_plugin_->cryptokeyfactory());"
    },
    {
        "line": 42,
        "fullcodeline": "assert(mock_crypto_factory != nullptr);"
    },
    {
        "line": 43,
        "fullcodeline": "auto participant_crypto_handle = mock_crypto_factory->get_dummy_participant_handle();"
    },
    {
        "line": 45,
        "fullcodeline": "EXPECT_CALL(*auth_plugin_, process_handshake_rvr(_, _, Ref(handshake_handle_), _)).Times(1)."
    },
    {
        "line": 48,
        "fullcodeline": "EXPECT_CALL(*stateless_writer_, new_change(_, _, _)).Times(1)."
    },
    {
        "line": 50,
        "fullcodeline": "EXPECT_CALL(*stateless_writer_->history_, add_change_mock(change2)).Times(1)."
    },
    {
        "line": 52,
        "fullcodeline": "EXPECT_CALL(*stateless_reader_->history_, remove_change_mock(change)).Times(1)."
    },
    {
        "line": 55,
        "fullcodeline": "EXPECT_CALL(participant_, pdp()).Times(1).WillOnce(Return(&pdp_));"
    },
    {
        "line": 56,
        "fullcodeline": "EXPECT_CALL(pdp_, notifyAboveRemoteEndpoints(_)).Times(1);"
    },
    {
        "line": 57,
        "fullcodeline": "EXPECT_CALL(*auth_plugin_, get_shared_secret(Ref(handshake_handle_), _)).Times(1)."
    },
    {
        "line": 59,
        "fullcodeline": "EXPECT_CALL(*auth_plugin_, return_sharedsecret_handle(shared_secret_handle, _)).Times(1)."
    },
    {
        "line": 61,
        "fullcodeline": "EXPECT_CALL(crypto_plugin_->cryptokeyfactory_,"
    },
    {
        "line": 65,
        "fullcodeline": "EXPECT_CALL(crypto_plugin_->cryptokeyexchange_, create_local_participant_crypto_tokens(_,"
    },
    {
        "line": 68,
        "fullcodeline": "EXPECT_CALL(crypto_plugin_->cryptokeyfactory_, unregister_participant(participant_crypto_handle, _)).Times(1)."
    },
    {
        "line": 72,
        "fullcodeline": "info.status = ParticipantAuthenticationInfo::AUTHORIZED_PARTICIPANT;"
    },
    {
        "line": 73,
        "fullcodeline": "info.guid = remote_participant_key;"
    },
    {
        "line": 74,
        "fullcodeline": "EXPECT_CALL(*participant_.getListener(), onParticipantAuthentication(_, info)).Times(1);"
    },
    {
        "line": 76,
        "fullcodeline": "stateless_reader_->listener_->onNewCacheChangeAdded(stateless_reader_, change);"
    },
    {
        "line": 7,
        "fullcodeline": "WillOnce(Return(true));"
    },
    {
        "line": 20,
        "fullcodeline": "new CacheChange_t(static_cast<uint32_t>(ParticipantGenericMessageHelper::serialized_size(message))"
    },
    {
        "line": 46,
        "fullcodeline": "WillOnce(DoAll(SetArgPointee<0>(&handshake_message),"
    },
    {
        "line": 49,
        "fullcodeline": "WillOnce(Return(change2));"
    },
    {
        "line": 51,
        "fullcodeline": "WillOnce(Return(true));"
    },
    {
        "line": 53,
        "fullcodeline": "WillOnce(Return(true));"
    },
    {
        "line": 58,
        "fullcodeline": "WillOnce(Return(shared_secret_handle));"
    },
    {
        "line": 60,
        "fullcodeline": "WillRepeatedly(Return(true));"
    },
    {
        "line": 64,
        "fullcodeline": "WillOnce(Return(participant_crypto_handle));"
    },
    {
        "line": 67,
        "fullcodeline": "WillOnce(Return(true));"
    },
    {
        "line": 69,
        "fullcodeline": "WillOnce(Return(true));"
    },
    {
        "line": 78,
        "fullcodeline": "if (final_message_change == nullptr)"
    },
    {
        "line": 47,
        "fullcodeline": "Return(ValidationResult_t::VALIDATION_OK_WITH_FINAL_MESSAGE)));"
    },
    {
        "line": 80,
        "fullcodeline": "delete change2;"
    },
    {
        "line": 62,
        "fullcodeline": "register_matched_remote_participant(Ref(*local_participant_crypto_handle_),"
    },
    {
        "line": 63,
        "fullcodeline": "Ref(remote_identity_handle_), _, Ref(*shared_secret_handle), _)).Times(1)."
    },
    {
        "line": 66,
        "fullcodeline": "Ref(*local_participant_crypto_handle_), Ref(*participant_crypto_handle), _)).Times(1)."
    }
]