[
    {
        "line": 9,
        "fullcodeline": "bool returned_value = false;"
    },
    {
        "line": 10,
        "fullcodeline": "const PKIIdentityHandle& lih = PKIIdentityHandle::narrow(ih);"
    },
    {
        "line": 12,
        "fullcodeline": "if (!lih.nil())"
    },
    {
        "line": 122,
        "fullcodeline": "exception = _SecurityException_(\"IdentityHandle is not of the type PKIIdentityHandle\");"
    },
    {
        "line": 114,
        "fullcodeline": "exception ="
    },
    {
        "line": 115,
        "fullcodeline": "_SecurityException_(std::string("
    },
    {
        "line": 18,
        "fullcodeline": "if (rfc2253_string_compare(grant.subject_name, lih->cert_sn_rfc2253_))"
    },
    {
        "line": 47,
        "fullcodeline": "if (is_domain_in_set(domain_id, rule.domains))"
    },
    {
        "line": 20,
        "fullcodeline": "ah->grant = std::move(grant);"
    },
    {
        "line": 21,
        "fullcodeline": "returned_value = true;"
    },
    {
        "line": 24,
        "fullcodeline": "auto iterator = grant.rules.begin();"
    },
    {
        "line": 68,
        "fullcodeline": "ah->governance_rule_.plugin_participant_attributes = plug_part_attr.mask();"
    },
    {
        "line": 25,
        "fullcodeline": "while (iterator != grant.rules.end())"
    },
    {
        "line": 81,
        "fullcodeline": "bool hasEncryption ="
    },
    {
        "line": 85,
        "fullcodeline": "bool hasOriginAuth ="
    },
    {
        "line": 90,
        "fullcodeline": "plugin_attributes.is_submessage_encrypted = hasEncryption;"
    },
    {
        "line": 91,
        "fullcodeline": "plugin_attributes.is_submessage_origin_authenticated = hasOriginAuth;"
    },
    {
        "line": 93,
        "fullcodeline": "security_attributes.is_submessage_protected ="
    },
    {
        "line": 96,
        "fullcodeline": "plugin_attributes.is_payload_encrypted ="
    },
    {
        "line": 99,
        "fullcodeline": "security_attributes.is_payload_protected ="
    },
    {
        "line": 102,
        "fullcodeline": "security_attributes.plugin_endpoint_attributes = plugin_attributes.mask();"
    },
    {
        "line": 104,
        "fullcodeline": "ah->governance_topic_rules_.push_back(std::pair<std::string, EndpointSecurityAttributes>("
    },
    {
        "line": 27,
        "fullcodeline": "if (!is_domain_in_set(domain_id, iterator->domains))"
    },
    {
        "line": 82,
        "fullcodeline": "(topic_rule.metadata_protection_kind == ProtectionKind::ENCRYPT) ||"
    },
    {
        "line": 86,
        "fullcodeline": "(topic_rule.metadata_protection_kind =="
    },
    {
        "line": 94,
        "fullcodeline": "(topic_rule.metadata_protection_kind != ProtectionKind::NONE);"
    },
    {
        "line": 97,
        "fullcodeline": "security_attributes.is_key_protected ="
    },
    {
        "line": 100,
        "fullcodeline": "(topic_rule.data_protection_kind != ProtectionKind::NONE);"
    },
    {
        "line": 29,
        "fullcodeline": "iterator = grant.rules.erase(iterator);"
    },
    {
        "line": 83,
        "fullcodeline": "(topic_rule.metadata_protection_kind =="
    },
    {
        "line": 88,
        "fullcodeline": "(topic_rule.metadata_protection_kind =="
    },
    {
        "line": 98,
        "fullcodeline": "(topic_rule.data_protection_kind == ProtectionKind::ENCRYPT);"
    },
    {
        "line": 105,
        "fullcodeline": "std::move(topic_expression), std::move(security_attributes)));"
    },
    {
        "line": 33,
        "fullcodeline": "++iterator;"
    }
]