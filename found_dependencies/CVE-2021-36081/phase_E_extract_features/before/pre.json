[
    {
        "line": 2,
        "fullcodeline": "log.info(f\"=== Phase E: Generating {ext} files ===\")"
    },
    {
        "line": 4,
        "fullcodeline": "img_files = list(pathlib.Path(ctx.training_dir).glob(\"*.exp*.tif\"))"
    },
    {
        "line": 5,
        "fullcodeline": "log.debug(img_files)"
    },
    {
        "line": 8,
        "fullcodeline": "config = \"\""
    },
    {
        "line": 9,
        "fullcodeline": "testconfig = pathlib.Path(ctx.langdata_dir) / ctx.lang_code / f\"{ctx.lang_code}.config\""
    },
    {
        "line": 14,
        "fullcodeline": "tessdata_environ = os.environ.copy()"
    },
    {
        "line": 15,
        "fullcodeline": "tessdata_environ[\"TESSDATA_PREFIX\"] = str(ctx.tessdata_dir)"
    },
    {
        "line": 17,
        "fullcodeline": "log.info(f\"Using TESSDATA_PREFIX={tessdata_environ['TESSDATA_PREFIX']}\")"
    },
    {
        "line": 10,
        "fullcodeline": "if testconfig.exists():"
    },
    {
        "line": 19,
        "fullcodeline": "with tqdm(total=len(img_files)) as pbar, concurrent.futures.ThreadPoolExecutor("
    },
    {
        "line": 43,
        "fullcodeline": "for img_file in img_files:"
    },
    {
        "line": 11,
        "fullcodeline": "config = testconfig"
    },
    {
        "line": 12,
        "fullcodeline": "log.info(f\"Using {ctx.lang_code}.config\")"
    },
    {
        "line": 44,
        "fullcodeline": "check_file_readable(pathlib.Path(img_file.with_suffix(\".\" + ext)))"
    },
    {
        "line": 22,
        "fullcodeline": "futures = []"
    },
    {
        "line": 23,
        "fullcodeline": "for img_file in img_files:"
    },
    {
        "line": 35,
        "fullcodeline": "for future in concurrent.futures.as_completed(futures):"
    },
    {
        "line": 24,
        "fullcodeline": "future = executor.submit("
    },
    {
        "line": 33,
        "fullcodeline": "futures.append(future)"
    },
    {
        "line": 29,
        "fullcodeline": "*box_config,"
    },
    {
        "line": 37,
        "fullcodeline": "future.result()"
    },
    {
        "line": 28,
        "fullcodeline": "pathlib.Path(img_file).with_suffix(\"\"),"
    },
    {
        "line": 41,
        "fullcodeline": "pbar.update(1)"
    },
    {
        "line": 39,
        "fullcodeline": "err_exit(\"Failed while extracting features: \" + str(exc))"
    }
]