[
    {
        "line": 5,
        "fullcodeline": "log.info(\"=== Phase I: Generating training images ===\")"
    },
    {
        "line": 6,
        "fullcodeline": "check_file_readable(ctx.training_text)"
    },
    {
        "line": 7,
        "fullcodeline": "char_spacing = 0.0"
    },
    {
        "line": 2,
        "fullcodeline": "if not par_factor or par_factor <= 0:"
    },
    {
        "line": 9,
        "fullcodeline": "for exposure in ctx.exposures:"
    },
    {
        "line": 3,
        "fullcodeline": "par_factor = 1"
    },
    {
        "line": 10,
        "fullcodeline": "if ctx.extract_font_properties and pathlib.Path(ctx.bigram_freqs_file).exists():"
    },
    {
        "line": 29,
        "fullcodeline": "with tqdm("
    },
    {
        "line": 45,
        "fullcodeline": "for font in ctx.fonts:"
    },
    {
        "line": 14,
        "fullcodeline": "lines = pathlib.Path(ctx.bigram_freqs_file).read_text(encoding=\"utf-8\").split(\"\\n\")"
    },
    {
        "line": 15,
        "fullcodeline": "records = (line.split() for line in lines)"
    },
    {
        "line": 16,
        "fullcodeline": "p = 0.99"
    },
    {
        "line": 17,
        "fullcodeline": "ngram_frac = p * sum(int(rec[1]) for rec in records if len(rec) >= 2)"
    },
    {
        "line": 27,
        "fullcodeline": "check_file_readable(ctx.train_ngrams_file)"
    },
    {
        "line": 19,
        "fullcodeline": "with pathlib.Path(ctx.train_ngrams_file).open(\"w\", encoding=\"utf-8\") as f:"
    },
    {
        "line": 30,
        "fullcodeline": "total=len(ctx.fonts)"
    },
    {
        "line": 46,
        "fullcodeline": "fontname = make_fontname(font)"
    },
    {
        "line": 47,
        "fullcodeline": "outbase = make_outbase(ctx, fontname, exposure)"
    },
    {
        "line": 48,
        "fullcodeline": "check_file_readable(str(outbase) + \".box\", str(outbase) + \".tif\")"
    },
    {
        "line": 31,
        "fullcodeline": ") as pbar, concurrent.futures.ThreadPoolExecutor(max_workers=par_factor) as executor:"
    },
    {
        "line": 20,
        "fullcodeline": "cumsum = 0"
    },
    {
        "line": 21,
        "fullcodeline": "for bigram, count in sorted(records, key=itemgetter(1), reverse=True):"
    },
    {
        "line": 32,
        "fullcodeline": "futures = ["
    },
    {
        "line": 36,
        "fullcodeline": "for future in concurrent.futures.as_completed(futures):"
    },
    {
        "line": 24,
        "fullcodeline": "f.write(bigram + \" \")"
    },
    {
        "line": 25,
        "fullcodeline": "cumsum += count"
    },
    {
        "line": 22,
        "fullcodeline": "if cumsum > ngram_frac:"
    },
    {
        "line": 38,
        "fullcodeline": "future.result()"
    },
    {
        "line": 33,
        "fullcodeline": "executor.submit(generate_font_image, ctx, font, exposure, char_spacing)"
    },
    {
        "line": 42,
        "fullcodeline": "pbar.update(1)"
    },
    {
        "line": 40,
        "fullcodeline": "err_exit(\"Failed while generating images \" + str(exc))"
    }
]