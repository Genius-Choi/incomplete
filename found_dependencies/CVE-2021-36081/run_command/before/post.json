[
    {
        "line": 10,
        "fullcodeline": "log.debug(f\"Running {cmd}\")"
    },
    {
        "line": 11,
        "fullcodeline": "args = list(args)"
    },
    {
        "line": 19,
        "fullcodeline": "proc = subprocess.run("
    },
    {
        "line": 22,
        "fullcodeline": "proclog = logging.getLogger(cmd)"
    },
    {
        "line": 2,
        "fullcodeline": "for d in (\"\", \"api/\", \"training/\"):"
    },
    {
        "line": 7,
        "fullcodeline": "if not shutil.which(cmd):"
    },
    {
        "line": 12,
        "fullcodeline": "for idx, arg in enumerate(args):"
    },
    {
        "line": 23,
        "fullcodeline": "if proc.returncode == 0:"
    },
    {
        "line": 8,
        "fullcodeline": "err_exit(f\"{cmd} not found\")"
    },
    {
        "line": 20,
        "fullcodeline": "[cmd, *args], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, env=env"
    },
    {
        "line": 24,
        "fullcodeline": "proclog.debug(proc.stdout.decode(\"utf-8\", errors=\"replace\"))"
    },
    {
        "line": 30,
        "fullcodeline": "err_exit(f\"Program {cmd} failed with return code {proc.returncode}. Abort.\")"
    },
    {
        "line": 3,
        "fullcodeline": "testcmd = shutil.which(f\"{d}{cmd}\")"
    },
    {
        "line": 13,
        "fullcodeline": "log.debug(arg)"
    },
    {
        "line": 4,
        "fullcodeline": "if shutil.which(testcmd):"
    },
    {
        "line": 16,
        "fullcodeline": "if isinstance(arg, pathlib.WindowsPath):"
    },
    {
        "line": 27,
        "fullcodeline": "proclog.error(proc.stdout.decode(\"utf-8\", errors=\"replace\"))"
    },
    {
        "line": 5,
        "fullcodeline": "cmd = testcmd"
    },
    {
        "line": 17,
        "fullcodeline": "args[idx] = str(arg)"
    },
    {
        "line": 29,
        "fullcodeline": "proclog.error(e)"
    }
]