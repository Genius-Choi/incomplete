[
    {
        "line": 3,
        "fullcodeline": "static const char module[] = \"PredictorEncodeTile\";"
    },
    {
        "line": 4,
        "fullcodeline": "TIFFPredictorState *sp = PredictorState(tif);"
    },
    {
        "line": 6,
        "fullcodeline": "tmsize_t cc = cc0, rowsize;"
    },
    {
        "line": 10,
        "fullcodeline": "assert(sp != NULL);"
    },
    {
        "line": 11,
        "fullcodeline": "assert(sp->encodepfunc != NULL);"
    },
    {
        "line": 12,
        "fullcodeline": "assert(sp->encodetile != NULL);"
    },
    {
        "line": 18,
        "fullcodeline": "working_copy = (uint8*) _TIFFmalloc(cc0);"
    },
    {
        "line": 26,
        "fullcodeline": "memcpy( working_copy, bp0, cc0 );"
    },
    {
        "line": 27,
        "fullcodeline": "bp = working_copy;"
    },
    {
        "line": 29,
        "fullcodeline": "rowsize = sp->rowsize;"
    },
    {
        "line": 30,
        "fullcodeline": "assert(rowsize > 0);"
    },
    {
        "line": 43,
        "fullcodeline": "result_code = (*sp->encodetile)(tif, working_copy, cc0, s);"
    },
    {
        "line": 45,
        "fullcodeline": "_TIFFfree( working_copy );"
    },
    {
        "line": 19,
        "fullcodeline": "if( working_copy == NULL )"
    },
    {
        "line": 31,
        "fullcodeline": "if((cc0%rowsize)!=0)"
    },
    {
        "line": 38,
        "fullcodeline": "while (cc > 0) {"
    },
    {
        "line": 33,
        "fullcodeline": "TIFFErrorExt(tif->tif_clientdata, \"PredictorEncodeTile\","
    },
    {
        "line": 35,
        "fullcodeline": "_TIFFfree( working_copy );"
    },
    {
        "line": 39,
        "fullcodeline": "(*sp->encodepfunc)(tif, bp, rowsize);"
    },
    {
        "line": 40,
        "fullcodeline": "cc -= rowsize;"
    },
    {
        "line": 41,
        "fullcodeline": "bp += rowsize;"
    }
]