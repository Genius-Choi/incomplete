[
    {
        "line": 3,
        "fullcodeline": "tmsize_t stride = PredictorState(tif)->stride;"
    },
    {
        "line": 4,
        "fullcodeline": "uint32 bps = tif->tif_dir.td_bitspersample / 8;"
    },
    {
        "line": 5,
        "fullcodeline": "tmsize_t wc = cc / bps;"
    },
    {
        "line": 7,
        "fullcodeline": "uint8 *cp = (uint8 *) cp0;"
    },
    {
        "line": 8,
        "fullcodeline": "uint8 *tmp = (uint8 *)_TIFFmalloc(cc);"
    },
    {
        "line": 10,
        "fullcodeline": "assert((cc%(bps*stride))==0);"
    },
    {
        "line": 15,
        "fullcodeline": "_TIFFmemcpy(tmp, cp0, cc);"
    },
    {
        "line": 29,
        "fullcodeline": "cp = (uint8 *) cp0;"
    },
    {
        "line": 30,
        "fullcodeline": "cp += cc - stride - 1;"
    },
    {
        "line": 12,
        "fullcodeline": "if (!tmp)"
    },
    {
        "line": 16,
        "fullcodeline": "for (count = 0; count < wc; count++) {"
    },
    {
        "line": 18,
        "fullcodeline": "for (byte = 0; byte < bps; byte++) {"
    },
    {
        "line": 22,
        "fullcodeline": "cp[(bps - byte - 1) * wc + count] ="
    },
    {
        "line": 23,
        "fullcodeline": "tmp[bps * count + byte];"
    }
]