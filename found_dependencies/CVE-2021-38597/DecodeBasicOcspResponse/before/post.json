[
    {
        "line": 10,
        "fullcodeline": "WOLFSSL_ENTER(\"DecodeBasicOcspResponse\");"
    },
    {
        "line": 11,
        "fullcodeline": "(void)heap;"
    },
    {
        "line": 18,
        "fullcodeline": "end_index = idx + length;"
    },
    {
        "line": 27,
        "fullcodeline": "ret = CheckBitString(source, &idx, &sigLength, size, 1, NULL);"
    },
    {
        "line": 31,
        "fullcodeline": "resp->sigSz = sigLength;"
    },
    {
        "line": 32,
        "fullcodeline": "resp->sig = source + idx;"
    },
    {
        "line": 33,
        "fullcodeline": "idx += sigLength;"
    },
    {
        "line": 118,
        "fullcodeline": "*ioIndex = idx;"
    },
    {
        "line": 13,
        "fullcodeline": "if (GetSequence(source, &idx, &length, size) < 0)"
    },
    {
        "line": 16,
        "fullcodeline": "if (idx + length > size)"
    },
    {
        "line": 20,
        "fullcodeline": "if ((ret = DecodeResponseData(source, &idx, resp, size)) < 0)"
    },
    {
        "line": 24,
        "fullcodeline": "if (GetAlgoId(source, &idx, &resp->sigOID, oidSigType, size) < 0)"
    },
    {
        "line": 28,
        "fullcodeline": "if (ret != 0)"
    },
    {
        "line": 40,
        "fullcodeline": "if (idx < end_index)"
    },
    {
        "line": 47,
        "fullcodeline": "InitDecodedCert(&cert, resp->cert, resp->certSz, heap);"
    },
    {
        "line": 50,
        "fullcodeline": "ret = ParseCertRelative(&cert, CERT_TYPE,"
    },
    {
        "line": 77,
        "fullcodeline": "ret = ConfirmSignature(&cert.sigCtx,"
    },
    {
        "line": 82,
        "fullcodeline": "FreeDecodedCert(&cert);"
    },
    {
        "line": 44,
        "fullcodeline": "if (DecodeCerts(source, &idx, resp, size) < 0)"
    },
    {
        "line": 52,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 59,
        "fullcodeline": "if ((cert.extExtKeyUsage & EXTKEYUSE_OCSP_SIGN) == 0) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (ret != 0) {"
    },
    {
        "line": 93,
        "fullcodeline": "int sigValid = -1;"
    },
    {
        "line": 96,
        "fullcodeline": "ca = GetCA(cm, resp->single->issuerKeyHash);"
    },
    {
        "line": 115,
        "fullcodeline": "(void)noVerify;"
    },
    {
        "line": 51,
        "fullcodeline": "noVerify ? NO_VERIFY : VERIFY_OCSP, cm);"
    },
    {
        "line": 53,
        "fullcodeline": "WOLFSSL_MSG(\"\\tOCSP Responder certificate parsing failed\");"
    },
    {
        "line": 54,
        "fullcodeline": "FreeDecodedCert(&cert);"
    },
    {
        "line": 85,
        "fullcodeline": "WOLFSSL_MSG(\"\\tOCSP Confirm signature failed\");"
    },
    {
        "line": 110,
        "fullcodeline": "if (ca == NULL || sigValid != 0) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (XMEMCMP(cert.subjectHash,"
    },
    {
        "line": 103,
        "fullcodeline": "InitSignatureCtx(&sigCtx, heap, INVALID_DEVID);"
    },
    {
        "line": 106,
        "fullcodeline": "sigValid = ConfirmSignature(&sigCtx, resp->response,"
    },
    {
        "line": 111,
        "fullcodeline": "WOLFSSL_MSG(\"\\tOCSP Confirm signature failed\");"
    },
    {
        "line": 62,
        "fullcodeline": "WOLFSSL_MSG(\"\\tOCSP Response signed by issuer\");"
    },
    {
        "line": 65,
        "fullcodeline": "WOLFSSL_MSG(\"\\tOCSP Responder key usage check failed\");"
    },
    {
        "line": 69,
        "fullcodeline": "FreeDecodedCert(&cert);"
    }
]