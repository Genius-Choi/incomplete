[
    {
        "line": 3,
        "fullcodeline": "size_t uncompressedLen = compressedBufSize * 2;  // just a starting point"
    },
    {
        "line": 5,
        "fullcodeline": "int dos = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "size_t available_in = compressedBufSize;"
    },
    {
        "line": 7,
        "fullcodeline": "const byte* next_in = compressedBuf;"
    },
    {
        "line": 10,
        "fullcodeline": "size_t total_out = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "} while (result != BROTLI_DECODER_RESULT_SUCCESS);"
    },
    {
        "line": 37,
        "fullcodeline": "if (result != BROTLI_DECODER_RESULT_SUCCESS) {"
    },
    {
        "line": 13,
        "fullcodeline": "arr.alloc(uncompressedLen);"
    },
    {
        "line": 14,
        "fullcodeline": "available_out = uncompressedLen - total_out;"
    },
    {
        "line": 15,
        "fullcodeline": "next_out = arr.data() + total_out;"
    },
    {
        "line": 16,
        "fullcodeline": "result ="
    },
    {
        "line": 17,
        "fullcodeline": "BrotliDecoderDecompressStream(decoder.get(), &available_in, &next_in, &available_out, &next_out, &total_out);"
    },
    {
        "line": 18,
        "fullcodeline": "if (result == BROTLI_DECODER_RESULT_SUCCESS) {"
    },
    {
        "line": 19,
        "fullcodeline": "arr.resize(total_out);"
    },
    {
        "line": 20,
        "fullcodeline": "} else if (result == BROTLI_DECODER_RESULT_NEEDS_MORE_OUTPUT) {"
    },
    {
        "line": 21,
        "fullcodeline": "uncompressedLen *= 2;"
    },
    {
        "line": 23,
        "fullcodeline": "if (uncompressedLen > 131072) {"
    },
    {
        "line": 26,
        "fullcodeline": "uncompressedLen = 131072;"
    },
    {
        "line": 28,
        "fullcodeline": "} else if (result == BROTLI_DECODER_RESULT_NEEDS_MORE_INPUT) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (++dos > 1 || total_out > 131072)"
    },
    {
        "line": 33,
        "fullcodeline": "throw Error(ErrorCode::kerErrorMessage, BrotliDecoderErrorString(BrotliDecoderGetErrorCode(decoder.get())));"
    }
]