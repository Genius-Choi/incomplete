[
    {
        "line": 3,
        "fullcodeline": "unsigned char * client_data = NULL, * challenge_b64 = NULL, * auth_data = NULL, rpid_hash[32] = {0}, * flags, cdata_hash[32] = {0},"
    },
    {
        "line": 4,
        "fullcodeline": "data_signed[128] = {0}, sig[128] = {0}, * counter;"
    },
    {
        "line": 5,
        "fullcodeline": "char * challenge_hash = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "const char * rpid = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "size_t client_data_len, challenge_b64_len, auth_data_len, rpid_hash_len = 32, cdata_hash_len = 32, sig_len = 128, counter_value = 0, rpid_len = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "json_t * j_client_data = NULL, * j_credential = NULL, * j_query;"
    },
    {
        "line": 9,
        "fullcodeline": "gnutls_pubkey_t pubkey = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "if (j_scheme_data != NULL && j_assertion != NULL) {"
    },
    {
        "line": 296,
        "fullcodeline": "o_free(client_data);"
    },
    {
        "line": 297,
        "fullcodeline": "o_free(challenge_b64);"
    },
    {
        "line": 298,
        "fullcodeline": "o_free(challenge_hash);"
    },
    {
        "line": 299,
        "fullcodeline": "o_free(auth_data);"
    },
    {
        "line": 300,
        "fullcodeline": "json_decref(j_client_data);"
    },
    {
        "line": 301,
        "fullcodeline": "json_decref(j_credential);"
    },
    {
        "line": 302,
        "fullcodeline": "gnutls_pubkey_deinit(pubkey);"
    },
    {
        "line": 217,
        "fullcodeline": "if (ret == G_OK) {"
    },
    {
        "line": 304,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 14,
        "fullcodeline": "ret = G_OK;"
    },
    {
        "line": 21,
        "fullcodeline": "j_credential = get_credential(config, j_params, username, json_string_value(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"rawId\")));"
    },
    {
        "line": 42,
        "fullcodeline": "client_data[client_data_len] = '\\0';"
    },
    {
        "line": 43,
        "fullcodeline": "j_client_data = json_loads((const char *)client_data, JSON_DECODE_ANY, NULL);"
    },
    {
        "line": 71,
        "fullcodeline": "challenge_b64[challenge_b64_len] = '\\0';"
    },
    {
        "line": 139,
        "fullcodeline": "flags = auth_data + FLAGS_OFFSET;"
    },
    {
        "line": 160,
        "fullcodeline": "counter = auth_data + COUNTER_OFFSET;"
    },
    {
        "line": 161,
        "fullcodeline": "counter_value = counter[3] | (counter[2] << 8) | (counter[1] << 16) | (counter[0] << 24);"
    },
    {
        "line": 168,
        "fullcodeline": "pubkey_dat.data = (unsigned char *)json_string_value(json_object_get(json_object_get(j_credential, \"credential\"), \"public_key\"));"
    },
    {
        "line": 169,
        "fullcodeline": "pubkey_dat.size = json_string_length(json_object_get(json_object_get(j_credential, \"credential\"), \"public_key\"));"
    },
    {
        "line": 194,
        "fullcodeline": "memcpy(data_signed, auth_data, auth_data_len);"
    },
    {
        "line": 195,
        "fullcodeline": "memcpy(data_signed+auth_data_len, cdata_hash, cdata_hash_len);"
    },
    {
        "line": 198,
        "fullcodeline": "data.data = data_signed;"
    },
    {
        "line": 199,
        "fullcodeline": "data.size = (auth_data_len+cdata_hash_len);"
    },
    {
        "line": 201,
        "fullcodeline": "signature.data = sig;"
    },
    {
        "line": 202,
        "fullcodeline": "signature.size = sig_len;"
    },
    {
        "line": 219,
        "fullcodeline": "j_query = json_pack(\"{sss{sisi}s{sO}}\","
    },
    {
        "line": 230,
        "fullcodeline": "res = h_update(config->conn, j_query, NULL);"
    },
    {
        "line": 231,
        "fullcodeline": "json_decref(j_query);"
    },
    {
        "line": 16,
        "fullcodeline": "if (!json_is_string(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"rawId\")) || !json_string_length(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"rawId\"))) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (check_result_value(j_credential, G_ERROR_NOT_FOUND)) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (!json_is_string(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"clientDataJSON\")) || !json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"clientDataJSON\"))) {"
    },
    {
        "line": 32,
        "fullcodeline": "if ((client_data = o_malloc(json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"clientDataJSON\"))+1)) == NULL) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (!o_base64_decode((const unsigned char *)json_string_value(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"clientDataJSON\")), json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"clientDataJSON\")), client_data, &client_data_len)) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (j_client_data == NULL) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (0 != o_strcmp(\"webauthn.get\", json_string_value(json_object_get(j_client_data, \"type\")))) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (!json_string_length(json_object_get(j_client_data, \"challenge\"))) {"
    },
    {
        "line": 61,
        "fullcodeline": "if ((challenge_b64 = o_malloc(json_string_length(json_object_get(j_client_data, \"challenge\"))+3)) == NULL) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (!o_base64url_2_base64((unsigned char *)json_string_value(json_object_get(j_client_data, \"challenge\")), json_string_length(json_object_get(j_client_data, \"challenge\")), challenge_b64, &challenge_b64_len)) {"
    },
    {
        "line": 72,
        "fullcodeline": "if ((challenge_hash = generate_hash(config->hash_algorithm, (const char *)challenge_b64)) == NULL) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (0 != o_strcmp(challenge_hash, json_string_value(json_object_get(j_assertion, \"challenge_hash\")))) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (!json_string_length(json_object_get(j_client_data, \"origin\"))) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (0 != o_strcmp(json_string_value(json_object_get(j_params, \"rp-origin\")), json_string_value(json_object_get(j_client_data, \"origin\")))) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (!json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"authenticatorData\"))) {"
    },
    {
        "line": 101,
        "fullcodeline": "if ((auth_data = o_malloc(json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"authenticatorData\"))+1)) == NULL) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (!o_base64_decode((const unsigned char *)json_string_value(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"authenticatorData\")), json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"authenticatorData\")), auth_data, &auth_data_len)) {"
    },
    {
        "line": 111,
        "fullcodeline": "if (auth_data_len < 37) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (o_strstr(json_string_value(json_object_get(j_params, \"rp-origin\")), \"://\") != NULL) {"
    },
    {
        "line": 122,
        "fullcodeline": "if (o_strchr(rpid, ':') != NULL) {"
    },
    {
        "line": 128,
        "fullcodeline": "if (!generate_digest_raw(digest_SHA256, (unsigned char *)rpid, rpid_len, rpid_hash, &rpid_hash_len)) {"
    },
    {
        "line": 134,
        "fullcodeline": "if (0 != memcmp(auth_data, rpid_hash, rpid_hash_len)) {"
    },
    {
        "line": 142,
        "fullcodeline": "if (!(*flags & FLAG_USER_PRESENT)) {"
    },
    {
        "line": 155,
        "fullcodeline": "if (!generate_digest_raw(digest_SHA256, client_data, client_data_len, cdata_hash, &cdata_hash_len)) {"
    },
    {
        "line": 163,
        "fullcodeline": "if (gnutls_pubkey_init(&pubkey) < 0) {"
    },
    {
        "line": 170,
        "fullcodeline": "if ((ret = gnutls_pubkey_import(pubkey, &pubkey_dat, GNUTLS_X509_FMT_PEM)) < 0) {"
    },
    {
        "line": 176,
        "fullcodeline": "if (!o_base64_decode((const unsigned char *)json_string_value(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), NULL, &sig_len)) {"
    },
    {
        "line": 182,
        "fullcodeline": "if (sig_len > 128) {"
    },
    {
        "line": 188,
        "fullcodeline": "if (!o_base64_decode((const unsigned char *)json_string_value(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), json_string_length(json_object_get(json_object_get(json_object_get(j_scheme_data, \"credential\"), \"response\"), \"signature\")), sig, &sig_len)) {"
    },
    {
        "line": 204,
        "fullcodeline": "if ((res = gnutls_pubkey_verify_data2(pubkey, GNUTLS_SIGN_ECDSA_SHA256, 0, &data, &signature)) < 0) {"
    },
    {
        "line": 210,
        "fullcodeline": "if ((json_integer_value(json_object_get(json_object_get(j_credential, \"credential\"), \"counter\")) || counter_value) && counter_value <= (size_t)json_integer_value(json_object_get(json_object_get(j_credential, \"credential\"), \"counter\"))) {"
    },
    {
        "line": 232,
        "fullcodeline": "if (res != H_OK) {"
    },
    {
        "line": 17,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - rawId missing\");"
    },
    {
        "line": 18,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 23,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - credential ID not found\");"
    },
    {
        "line": 24,
        "fullcodeline": "ret = G_ERROR_UNAUTHORIZED;"
    },
    {
        "line": 28,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - clientDataJSON mandatory\");"
    },
    {
        "line": 29,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 33,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"check_assertion - Error allocating resources for client_data\");"
    },
    {
        "line": 34,
        "fullcodeline": "ret = G_ERROR_MEMORY;"
    },
    {
        "line": 38,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Error o_base64_decode client_data\");"
    },
    {
        "line": 39,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 45,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Error parsing JSON client data %s\", client_data);"
    },
    {
        "line": 46,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 51,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - clientDataJSON.type invalid\");"
    },
    {
        "line": 52,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 57,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - clientDataJSON.challenge mandatory\");"
    },
    {
        "line": 58,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 62,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"register_new_attestation - Error allocating resources for challenge_b64\");"
    },
    {
        "line": 63,
        "fullcodeline": "ret = G_ERROR_MEMORY;"
    },
    {
        "line": 67,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - clientDataJSON.challenge invalid base64\");"
    },
    {
        "line": 68,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 73,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"register_new_attestation - Error generate_hash for challenge_b64\");"
    },
    {
        "line": 74,
        "fullcodeline": "ret = G_ERROR;"
    },
    {
        "line": 78,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - clientDataJSON.challenge invalid\");"
    },
    {
        "line": 79,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 84,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - clientDataJSON.origin mandatory\");"
    },
    {
        "line": 85,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 89,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - clientDataJSON.origin invalid - Client send %s, required %s\", json_string_value(json_object_get(j_client_data, \"origin\")), json_string_value(json_object_get(j_params, \"rp-origin\")));"
    },
    {
        "line": 90,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 97,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - authenticatorData mandatory\");"
    },
    {
        "line": 98,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 102,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Error allocating resources for auth_data\");"
    },
    {
        "line": 103,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 107,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Error o_base64_decode auth_data\");"
    },
    {
        "line": 108,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 112,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Error authenticatorData invalid\");"
    },
    {
        "line": 113,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 118,
        "fullcodeline": "rpid = o_strstr(json_string_value(json_object_get(j_params, \"rp-origin\")), \"://\")+3;"
    },
    {
        "line": 123,
        "fullcodeline": "rpid_len = o_strchr(rpid, ':') - rpid;"
    },
    {
        "line": 129,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Error generate_digest_raw for rpid_hash\");"
    },
    {
        "line": 130,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 135,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - authData.rpIdHash invalid\");"
    },
    {
        "line": 136,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 143,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - authData.userPresent not set\");"
    },
    {
        "line": 144,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 156,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"check_assertion - Error generate_digest_raw for cdata_hash\");"
    },
    {
        "line": 157,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 164,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"check_assertion - Error gnutls_pubkey_init\");"
    },
    {
        "line": 165,
        "fullcodeline": "ret = G_ERROR;"
    },
    {
        "line": 171,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Error gnutls_pubkey_import: %d\", ret);"
    },
    {
        "line": 172,
        "fullcodeline": "ret = G_ERROR;"
    },
    {
        "line": 177,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Invalid signature format\");"
    },
    {
        "line": 178,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 183,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Invalid signature\");"
    },
    {
        "line": 184,
        "fullcodeline": "ret = G_ERROR_PARAM;"
    },
    {
        "line": 189,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Error o_base64_decode signature\");"
    },
    {
        "line": 190,
        "fullcodeline": "ret = G_ERROR;"
    },
    {
        "line": 205,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - Invalid signature: %d\", res);"
    },
    {
        "line": 206,
        "fullcodeline": "ret = G_ERROR_UNAUTHORIZED;"
    },
    {
        "line": 211,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_assertion - counter invalid\");"
    },
    {
        "line": 212,
        "fullcodeline": "ret = G_ERROR_UNAUTHORIZED;"
    },
    {
        "line": 229,
        "fullcodeline": "json_object_get(j_assertion, \"gswa_id\"));"
    },
    {
        "line": 233,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"check_assertion - Error executing j_query (1)\");"
    },
    {
        "line": 234,
        "fullcodeline": "config->glewlwyd_module_callback_metrics_increment_counter(config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);"
    },
    {
        "line": 235,
        "fullcodeline": "ret = G_ERROR_DB;"
    },
    {
        "line": 257,
        "fullcodeline": "} else if (ret == G_ERROR_PARAM) {"
    },
    {
        "line": 120,
        "fullcodeline": "rpid = json_string_value(json_object_get(j_params, \"rp-origin\"));"
    },
    {
        "line": 125,
        "fullcodeline": "rpid_len = o_strlen(rpid);"
    },
    {
        "line": 258,
        "fullcodeline": "j_query = json_pack(\"{sss{sisi}s{sO}}\","
    },
    {
        "line": 269,
        "fullcodeline": "res = h_update(config->conn, j_query, NULL);"
    },
    {
        "line": 270,
        "fullcodeline": "json_decref(j_query);"
    },
    {
        "line": 271,
        "fullcodeline": "if (res != H_OK) {"
    },
    {
        "line": 277,
        "fullcodeline": "j_query = json_pack(\"{sss{sisi}s{sO}}\","
    },
    {
        "line": 288,
        "fullcodeline": "res = h_update(config->conn, j_query, NULL);"
    },
    {
        "line": 289,
        "fullcodeline": "json_decref(j_query);"
    },
    {
        "line": 239,
        "fullcodeline": "j_query = json_pack(\"{sss{si}s{sO}}\","
    },
    {
        "line": 248,
        "fullcodeline": "res = h_update(config->conn, j_query, NULL);"
    },
    {
        "line": 249,
        "fullcodeline": "json_decref(j_query);"
    },
    {
        "line": 268,
        "fullcodeline": "json_object_get(j_assertion, \"gswa_id\"));"
    },
    {
        "line": 272,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"check_assertion - Error executing j_query (3)\");"
    },
    {
        "line": 273,
        "fullcodeline": "config->glewlwyd_module_callback_metrics_increment_counter(config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);"
    },
    {
        "line": 274,
        "fullcodeline": "ret = G_ERROR_DB;"
    },
    {
        "line": 290,
        "fullcodeline": "if (res != H_OK) {"
    },
    {
        "line": 250,
        "fullcodeline": "if (res != H_OK) {"
    },
    {
        "line": 287,
        "fullcodeline": "json_object_get(j_assertion, \"gswa_id\"));"
    },
    {
        "line": 291,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"check_assertion - Error executing j_query (4)\");"
    },
    {
        "line": 292,
        "fullcodeline": "config->glewlwyd_module_callback_metrics_increment_counter(config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);"
    },
    {
        "line": 293,
        "fullcodeline": "ret = G_ERROR_DB;"
    },
    {
        "line": 247,
        "fullcodeline": "json_object_get(json_object_get(j_credential, \"credential\"), \"gswc_id\"));"
    },
    {
        "line": 251,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"check_assertion - Error executing j_query (2)\");"
    },
    {
        "line": 252,
        "fullcodeline": "config->glewlwyd_module_callback_metrics_increment_counter(config, GLWD_METRICS_DATABSE_ERROR, 1, NULL);"
    },
    {
        "line": 253,
        "fullcodeline": "ret = G_ERROR_DB;"
    }
]