[
    {
        "line": 20,
        "fullcodeline": "g_autoptr(FlatpakDeploy) runtime_deploy = NULL;"
    },
    {
        "line": 21,
        "fullcodeline": "g_autoptr(GBytes) runtime_deploy_data = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "g_autoptr(GBytes) app_deploy_data = NULL;"
    },
    {
        "line": 23,
        "fullcodeline": "g_autoptr(GFile) app_files = NULL;"
    },
    {
        "line": 24,
        "fullcodeline": "g_autoptr(GFile) original_app_files = NULL;"
    },
    {
        "line": 25,
        "fullcodeline": "g_autoptr(GFile) runtime_files = NULL;"
    },
    {
        "line": 26,
        "fullcodeline": "g_autoptr(GFile) original_runtime_files = NULL;"
    },
    {
        "line": 27,
        "fullcodeline": "g_autoptr(GFile) bin_ldconfig = NULL;"
    },
    {
        "line": 28,
        "fullcodeline": "g_autoptr(GFile) app_id_dir = NULL;"
    },
    {
        "line": 29,
        "fullcodeline": "g_autoptr(GFile) real_app_id_dir = NULL;"
    },
    {
        "line": 30,
        "fullcodeline": "g_autofree char *default_runtime_pref = NULL;"
    },
    {
        "line": 31,
        "fullcodeline": "g_autoptr(FlatpakDecomposed) default_runtime = NULL;"
    },
    {
        "line": 32,
        "fullcodeline": "g_autofree char *default_command = NULL;"
    },
    {
        "line": 33,
        "fullcodeline": "g_autoptr(GKeyFile) metakey = NULL;"
    },
    {
        "line": 34,
        "fullcodeline": "g_autoptr(GKeyFile) runtime_metakey = NULL;"
    },
    {
        "line": 35,
        "fullcodeline": "g_autoptr(FlatpakBwrap) bwrap = NULL;"
    },
    {
        "line": 36,
        "fullcodeline": "const char *command = \"/bin/sh\";"
    },
    {
        "line": 37,
        "fullcodeline": "g_autoptr(GError) my_error = NULL;"
    },
    {
        "line": 38,
        "fullcodeline": "g_autoptr(FlatpakDecomposed) runtime_ref = NULL;"
    },
    {
        "line": 40,
        "fullcodeline": "g_autoptr(GPtrArray) previous_app_id_dirs = NULL;"
    },
    {
        "line": 41,
        "fullcodeline": "g_autofree char *app_id = NULL;"
    },
    {
        "line": 42,
        "fullcodeline": "g_autofree char *app_arch = NULL;"
    },
    {
        "line": 43,
        "fullcodeline": "g_autofree char *app_info_path = NULL;"
    },
    {
        "line": 44,
        "fullcodeline": "g_autofree char *app_ld_path = NULL;"
    },
    {
        "line": 45,
        "fullcodeline": "g_autofree char *instance_id_host_dir = NULL;"
    },
    {
        "line": 46,
        "fullcodeline": "g_autoptr(FlatpakContext) app_context = NULL;"
    },
    {
        "line": 47,
        "fullcodeline": "g_autoptr(FlatpakContext) overrides = NULL;"
    },
    {
        "line": 48,
        "fullcodeline": "g_autoptr(FlatpakExports) exports = NULL;"
    },
    {
        "line": 49,
        "fullcodeline": "g_autofree char *commandline = NULL;"
    },
    {
        "line": 50,
        "fullcodeline": "g_autofree char *doc_mount_path = NULL;"
    },
    {
        "line": 51,
        "fullcodeline": "g_autofree char *app_extensions = NULL;"
    },
    {
        "line": 52,
        "fullcodeline": "g_autofree char *runtime_extensions = NULL;"
    },
    {
        "line": 53,
        "fullcodeline": "g_autofree char *runtime_ld_path = NULL;"
    },
    {
        "line": 54,
        "fullcodeline": "g_autofree char *checksum = NULL;"
    },
    {
        "line": 55,
        "fullcodeline": "glnx_autofd int per_app_dir_lock_fd = -1;"
    },
    {
        "line": 56,
        "fullcodeline": "g_autofree char *per_app_dir_lock_path = NULL;"
    },
    {
        "line": 57,
        "fullcodeline": "g_autofree char *shared_xdg_runtime_dir = NULL;"
    },
    {
        "line": 58,
        "fullcodeline": "int ld_so_fd = -1;"
    },
    {
        "line": 59,
        "fullcodeline": "g_autoptr(GFile) runtime_ld_so_conf = NULL;"
    },
    {
        "line": 60,
        "fullcodeline": "gboolean generate_ld_so_conf = TRUE;"
    },
    {
        "line": 61,
        "fullcodeline": "gboolean use_ld_so_cache = TRUE;"
    },
    {
        "line": 62,
        "fullcodeline": "gboolean sandboxed = (flags & FLATPAK_RUN_FLAG_SANDBOX) != 0;"
    },
    {
        "line": 63,
        "fullcodeline": "gboolean parent_expose_pids = (flags & FLATPAK_RUN_FLAG_PARENT_EXPOSE_PIDS) != 0;"
    },
    {
        "line": 64,
        "fullcodeline": "gboolean parent_share_pids = (flags & FLATPAK_RUN_FLAG_PARENT_SHARE_PIDS) != 0;"
    },
    {
        "line": 65,
        "fullcodeline": "const char *app_target_path = \"/app\";"
    },
    {
        "line": 66,
        "fullcodeline": "const char *runtime_target_path = \"/usr\";"
    },
    {
        "line": 69,
        "fullcodeline": "g_return_val_if_fail (app_ref != NULL, FALSE);"
    },
    {
        "line": 80,
        "fullcodeline": "app_id = flatpak_decomposed_dup_id (app_ref);"
    },
    {
        "line": 81,
        "fullcodeline": "g_return_val_if_fail (app_id != NULL, FALSE);"
    },
    {
        "line": 82,
        "fullcodeline": "app_arch = flatpak_decomposed_dup_arch (app_ref);"
    },
    {
        "line": 83,
        "fullcodeline": "g_return_val_if_fail (app_arch != NULL, FALSE);"
    },
    {
        "line": 90,
        "fullcodeline": "bwrap = flatpak_bwrap_new (NULL);"
    },
    {
        "line": 91,
        "fullcodeline": "flatpak_bwrap_add_arg (bwrap, flatpak_get_bwrap ());"
    },
    {
        "line": 122,
        "fullcodeline": "default_runtime = flatpak_decomposed_new_from_pref (FLATPAK_KINDS_RUNTIME, default_runtime_pref, error);"
    },
    {
        "line": 162,
        "fullcodeline": "runtime_deploy = flatpak_find_deploy_for_ref (flatpak_decomposed_get_ref (runtime_ref), custom_runtime_commit, NULL, cancellable, error);"
    },
    {
        "line": 166,
        "fullcodeline": "runtime_deploy_data = flatpak_deploy_get_deploy_data (runtime_deploy, FLATPAK_DEPLOY_VERSION_ANY, cancellable, error);"
    },
    {
        "line": 170,
        "fullcodeline": "runtime_metakey = flatpak_deploy_get_metadata (runtime_deploy);"
    },
    {
        "line": 172,
        "fullcodeline": "app_context = flatpak_app_compute_permissions (metakey, runtime_metakey, error);"
    },
    {
        "line": 188,
        "fullcodeline": "original_runtime_files = flatpak_deploy_get_files (runtime_deploy);"
    },
    {
        "line": 201,
        "fullcodeline": "bin_ldconfig = g_file_resolve_relative_path (runtime_files, \"bin/ldconfig\");"
    },
    {
        "line": 316,
        "fullcodeline": "flatpak_run_apply_env_default (bwrap, use_ld_so_cache);"
    },
    {
        "line": 317,
        "fullcodeline": "flatpak_run_apply_env_vars (bwrap, app_context);"
    },
    {
        "line": 318,
        "fullcodeline": "flatpak_run_apply_env_prompt (bwrap, app_id);"
    },
    {
        "line": 326,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 433,
        "fullcodeline": "runtime_ld_so_conf = g_file_resolve_relative_path (runtime_files, \"etc/ld.so.conf\");"
    },
    {
        "line": 455,
        "fullcodeline": "flags |= flatpak_context_get_run_flags (app_context);"
    },
    {
        "line": 528,
        "fullcodeline": "flatpak_run_add_journal_args (bwrap);"
    },
    {
        "line": 529,
        "fullcodeline": "add_font_path_args (bwrap);"
    },
    {
        "line": 530,
        "fullcodeline": "add_icon_path_args (bwrap);"
    },
    {
        "line": 532,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 570,
        "fullcodeline": "flatpak_bwrap_populate_runtime_dir (bwrap, shared_xdg_runtime_dir);"
    },
    {
        "line": 590,
        "fullcodeline": "flatpak_bwrap_sort_envp (bwrap);"
    },
    {
        "line": 591,
        "fullcodeline": "flatpak_bwrap_envp_to_args (bwrap);"
    },
    {
        "line": 596,
        "fullcodeline": "flatpak_bwrap_add_arg (bwrap, command);"
    },
    {
        "line": 605,
        "fullcodeline": "flatpak_bwrap_add_noinherit_fd (bwrap, glnx_steal_fd (&per_app_dir_lock_fd));"
    },
    {
        "line": 607,
        "fullcodeline": "flatpak_bwrap_finish (bwrap);"
    },
    {
        "line": 609,
        "fullcodeline": "commandline = flatpak_quote_argv ((const char **) bwrap->argv->pdata, -1);"
    },
    {
        "line": 610,
        "fullcodeline": "g_debug (\"Running '%s'\", commandline);"
    },
    {
        "line": 74,
        "fullcodeline": "if (running_under_sudo ())"
    },
    {
        "line": 86,
        "fullcodeline": "if (!check_parental_controls (app_ref, app_deploy, cancellable, error))"
    },
    {
        "line": 93,
        "fullcodeline": "if (app_deploy == NULL)"
    },
    {
        "line": 123,
        "fullcodeline": "if (default_runtime == NULL)"
    },
    {
        "line": 126,
        "fullcodeline": "if (custom_runtime != NULL || custom_runtime_version != NULL)"
    },
    {
        "line": 163,
        "fullcodeline": "if (runtime_deploy == NULL)"
    },
    {
        "line": 167,
        "fullcodeline": "if (runtime_deploy_data == NULL)"
    },
    {
        "line": 173,
        "fullcodeline": "if (app_context == NULL)"
    },
    {
        "line": 176,
        "fullcodeline": "if (app_deploy != NULL)"
    },
    {
        "line": 190,
        "fullcodeline": "if (custom_usr_path != NULL)"
    },
    {
        "line": 202,
        "fullcodeline": "if (!g_file_query_exists (bin_ldconfig, NULL))"
    },
    {
        "line": 210,
        "fullcodeline": "if (custom_usr_path != NULL || custom_app_path != NULL)"
    },
    {
        "line": 213,
        "fullcodeline": "if (app_deploy != NULL)"
    },
    {
        "line": 301,
        "fullcodeline": "if (custom_app_path != NULL)"
    },
    {
        "line": 327,
        "fullcodeline": "\"--ro-bind\", flatpak_file_get_path_cached (runtime_files), \"/usr\","
    },
    {
        "line": 330,
        "fullcodeline": "if (runtime_files == original_runtime_files)"
    },
    {
        "line": 370,
        "fullcodeline": "if (app_files != NULL)"
    },
    {
        "line": 403,
        "fullcodeline": "if (original_app_files != NULL && app_files != original_app_files)"
    },
    {
        "line": 414,
        "fullcodeline": "if (metakey != NULL &&"
    },
    {
        "line": 421,
        "fullcodeline": "if (!flatpak_run_add_extension_args (bwrap, runtime_metakey, runtime_ref,"
    },
    {
        "line": 427,
        "fullcodeline": "if (custom_usr_path == NULL)"
    },
    {
        "line": 430,
        "fullcodeline": "if (custom_app_path == NULL)"
    },
    {
        "line": 434,
        "fullcodeline": "if (lstat (flatpak_file_get_path_cached (runtime_ld_so_conf), &s) == 0)"
    },
    {
        "line": 457,
        "fullcodeline": "if (!flatpak_run_setup_base_argv (bwrap, runtime_files, app_id_dir, app_arch, flags, error))"
    },
    {
        "line": 466,
        "fullcodeline": "if (ld_so_fd != -1)"
    },
    {
        "line": 474,
        "fullcodeline": "if (!flatpak_run_add_app_info_args (bwrap,"
    },
    {
        "line": 484,
        "fullcodeline": "if (!sandboxed)"
    },
    {
        "line": 503,
        "fullcodeline": "if (!flatpak_run_add_dconf_args (bwrap, app_id, metakey, error))"
    },
    {
        "line": 506,
        "fullcodeline": "if (!sandboxed && !(flags & FLATPAK_RUN_FLAG_NO_DOCUMENTS_PORTAL))"
    },
    {
        "line": 509,
        "fullcodeline": "if (!flatpak_run_add_environment_args (bwrap, app_info_path, flags,"
    },
    {
        "line": 515,
        "fullcodeline": "if (per_app_dir_lock_path != NULL)"
    },
    {
        "line": 525,
        "fullcodeline": "if ((app_context->shares & FLATPAK_CONTEXT_SHARED_NETWORK) != 0)"
    },
    {
        "line": 541,
        "fullcodeline": "if (parent_expose_pids || parent_share_pids)"
    },
    {
        "line": 593,
        "fullcodeline": "if (!flatpak_bwrap_bundle_args (bwrap, 1, -1, FALSE, error))"
    },
    {
        "line": 598,
        "fullcodeline": "if (!add_rest_args (bwrap, app_id,"
    },
    {
        "line": 612,
        "fullcodeline": "if ((flags & (FLATPAK_RUN_FLAG_BACKGROUND)) != 0 ||"
    },
    {
        "line": 95,
        "fullcodeline": "g_assert (flatpak_decomposed_is_runtime (app_ref));"
    },
    {
        "line": 96,
        "fullcodeline": "default_runtime_pref = flatpak_decomposed_dup_pref (app_ref);"
    },
    {
        "line": 128,
        "fullcodeline": "g_auto(GStrv) custom_runtime_parts = NULL;"
    },
    {
        "line": 129,
        "fullcodeline": "const char *custom_runtime_id = NULL;"
    },
    {
        "line": 130,
        "fullcodeline": "const char *custom_runtime_arch = NULL;"
    },
    {
        "line": 150,
        "fullcodeline": "runtime_ref = flatpak_decomposed_new_from_decomposed (default_runtime,"
    },
    {
        "line": 178,
        "fullcodeline": "overrides = flatpak_deploy_get_overrides (app_deploy);"
    },
    {
        "line": 179,
        "fullcodeline": "flatpak_context_merge (app_context, overrides);"
    },
    {
        "line": 183,
        "fullcodeline": "flatpak_context_make_sandboxed (app_context);"
    },
    {
        "line": 186,
        "fullcodeline": "flatpak_context_merge (app_context, extra_context);"
    },
    {
        "line": 192,
        "fullcodeline": "runtime_files = g_file_new_for_path (custom_usr_path);"
    },
    {
        "line": 194,
        "fullcodeline": "runtime_target_path = \"/run/parent/usr\";"
    },
    {
        "line": 203,
        "fullcodeline": "use_ld_so_cache = FALSE;"
    },
    {
        "line": 211,
        "fullcodeline": "use_ld_so_cache = FALSE;"
    },
    {
        "line": 215,
        "fullcodeline": "g_autofree const char **previous_ids = NULL;"
    },
    {
        "line": 216,
        "fullcodeline": "gsize len = 0;"
    },
    {
        "line": 219,
        "fullcodeline": "real_app_id_dir = flatpak_get_data_dir (app_id);"
    },
    {
        "line": 220,
        "fullcodeline": "original_app_files = flatpak_deploy_get_files (app_deploy);"
    },
    {
        "line": 222,
        "fullcodeline": "previous_app_id_dirs = g_ptr_array_new_with_free_func (g_object_unref);"
    },
    {
        "line": 223,
        "fullcodeline": "previous_ids = flatpak_deploy_data_get_previous_ids (app_deploy_data, &len);"
    },
    {
        "line": 225,
        "fullcodeline": "do_migrate = !g_file_query_exists (real_app_id_dir, cancellable);"
    },
    {
        "line": 309,
        "fullcodeline": "app_target_path = \"/run/parent/app\";"
    },
    {
        "line": 322,
        "fullcodeline": "g_autoptr(GFile) sandbox_dir = g_file_get_child (real_app_id_dir, \"sandbox\");"
    },
    {
        "line": 323,
        "fullcodeline": "flatpak_bwrap_set_env (bwrap, \"FLATPAK_SANDBOX_DIR\", flatpak_file_get_path_cached (sandbox_dir), TRUE);"
    },
    {
        "line": 333,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 372,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 406,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 415,
        "fullcodeline": "!flatpak_run_add_extension_args (bwrap, metakey, app_ref,"
    },
    {
        "line": 428,
        "fullcodeline": "flatpak_run_extend_ld_path (bwrap, NULL, runtime_ld_path);"
    },
    {
        "line": 431,
        "fullcodeline": "flatpak_run_extend_ld_path (bwrap, app_ld_path, NULL);"
    },
    {
        "line": 435,
        "fullcodeline": "generate_ld_so_conf = S_ISREG (s.st_mode) && s.st_size == 0;"
    },
    {
        "line": 441,
        "fullcodeline": "checksum = calculate_ld_cache_checksum (app_deploy_data, runtime_deploy_data,"
    },
    {
        "line": 443,
        "fullcodeline": "ld_so_fd = regenerate_ld_cache (bwrap->argv,"
    },
    {
        "line": 452,
        "fullcodeline": "flatpak_bwrap_add_fd (bwrap, ld_so_fd);"
    },
    {
        "line": 469,
        "fullcodeline": "flatpak_bwrap_add_arg (bwrap, \"--ro-bind-data\");"
    },
    {
        "line": 470,
        "fullcodeline": "flatpak_bwrap_add_arg_printf (bwrap, \"%d\", ld_so_fd);"
    },
    {
        "line": 471,
        "fullcodeline": "flatpak_bwrap_add_arg (bwrap, \"/etc/ld.so.cache\");"
    },
    {
        "line": 498,
        "fullcodeline": "flatpak_bwrap_add_arg (bwrap, \"--bind\");"
    },
    {
        "line": 499,
        "fullcodeline": "flatpak_bwrap_add_arg (bwrap, shared_xdg_runtime_dir);"
    },
    {
        "line": 500,
        "fullcodeline": "flatpak_bwrap_add_arg_printf (bwrap, \"/run/user/%d\", getuid ());"
    },
    {
        "line": 507,
        "fullcodeline": "add_document_portal_args (bwrap, app_id, &doc_mount_path);"
    },
    {
        "line": 517,
        "fullcodeline": "static const char lock[] = \"/run/flatpak/per-app-dirs-ref\";"
    },
    {
        "line": 519,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 526,
        "fullcodeline": "flatpak_run_add_resolved_args (bwrap);"
    },
    {
        "line": 539,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap, \"--chdir\", cwd, NULL);"
    },
    {
        "line": 543,
        "fullcodeline": "g_autofree char *userns_path = NULL;"
    },
    {
        "line": 544,
        "fullcodeline": "g_autofree char *pidns_path = NULL;"
    },
    {
        "line": 545,
        "fullcodeline": "g_autofree char *userns2_path = NULL;"
    },
    {
        "line": 551,
        "fullcodeline": "userns_path = g_strdup_printf (\"/proc/%d/root/run/.userns\", parent_pid);"
    },
    {
        "line": 553,
        "fullcodeline": "userns_fd = open_namespace_fd_if_needed (userns_path, \"/proc/self/ns/user\");"
    },
    {
        "line": 564,
        "fullcodeline": "pidns_path = g_strdup_printf (\"/proc/%d/ns/pid\", parent_pid);"
    },
    {
        "line": 565,
        "fullcodeline": "pidns_fd = open (pidns_path, O_RDONLY|O_CLOEXEC);"
    },
    {
        "line": 574,
        "fullcodeline": "command = custom_command;"
    },
    {
        "line": 613,
        "fullcodeline": "g_getenv (\"FLATPAK_TEST_COVERAGE\") != NULL)"
    },
    {
        "line": 616,
        "fullcodeline": "char pid_str[64];"
    },
    {
        "line": 617,
        "fullcodeline": "g_autofree char *pid_path = NULL;"
    },
    {
        "line": 620,
        "fullcodeline": "spawn_flags = G_SPAWN_SEARCH_PATH;"
    },
    {
        "line": 626,
        "fullcodeline": "spawn_flags |= G_SPAWN_LEAVE_DESCRIPTORS_OPEN;"
    },
    {
        "line": 631,
        "fullcodeline": "g_assert (bwrap->envp != NULL);"
    },
    {
        "line": 632,
        "fullcodeline": "g_assert (bwrap->envp[0] == NULL);"
    },
    {
        "line": 643,
        "fullcodeline": "g_snprintf (pid_str, sizeof (pid_str), \"%d\", child_pid);"
    },
    {
        "line": 644,
        "fullcodeline": "pid_path = g_build_filename (instance_id_host_dir, \"pid\", NULL);"
    },
    {
        "line": 645,
        "fullcodeline": "g_file_set_contents (pid_path, pid_str, -1, NULL);"
    },
    {
        "line": 693,
        "fullcodeline": "*instance_dir_out = g_steal_pointer (&instance_id_host_dir);"
    },
    {
        "line": 75,
        "fullcodeline": "return flatpak_fail_error (error, FLATPAK_ERROR,"
    },
    {
        "line": 102,
        "fullcodeline": "app_deploy_data = flatpak_deploy_get_deploy_data (app_deploy, FLATPAK_DEPLOY_VERSION_ANY, cancellable, error);"
    },
    {
        "line": 111,
        "fullcodeline": "metakey = flatpak_deploy_get_metadata (app_deploy);"
    },
    {
        "line": 112,
        "fullcodeline": "default_runtime_pref = g_key_file_get_string (metakey,"
    },
    {
        "line": 156,
        "fullcodeline": "if (runtime_ref == NULL)"
    },
    {
        "line": 160,
        "fullcodeline": "runtime_ref = flatpak_decomposed_ref (default_runtime);"
    },
    {
        "line": 198,
        "fullcodeline": "runtime_files = g_object_ref (original_runtime_files);"
    },
    {
        "line": 241,
        "fullcodeline": "for (i = len - 1; i >= 0; i--)"
    },
    {
        "line": 294,
        "fullcodeline": "if (!flatpak_ensure_data_dir (real_app_id_dir, cancellable, error))"
    },
    {
        "line": 297,
        "fullcodeline": "if (!sandboxed)"
    },
    {
        "line": 303,
        "fullcodeline": "if (strcmp (custom_app_path, \"\") == 0)"
    },
    {
        "line": 339,
        "fullcodeline": "g_autoptr(GFile) runtime_child = NULL;"
    },
    {
        "line": 341,
        "fullcodeline": "runtime_child = g_file_get_child (runtime_files, \".ref\");"
    },
    {
        "line": 352,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 358,
        "fullcodeline": "flatpak_run_setup_usr_links (bwrap, original_runtime_files,"
    },
    {
        "line": 361,
        "fullcodeline": "g_clear_object (&runtime_child);"
    },
    {
        "line": 362,
        "fullcodeline": "runtime_child = g_file_get_child (original_runtime_files, \"etc\");"
    },
    {
        "line": 373,
        "fullcodeline": "\"--ro-bind\", flatpak_file_get_path_cached (app_files), \"/app\","
    },
    {
        "line": 376,
        "fullcodeline": "if (app_files == original_app_files)"
    },
    {
        "line": 398,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 408,
        "fullcodeline": "flatpak_file_get_path_cached (original_app_files),"
    },
    {
        "line": 450,
        "fullcodeline": "if (ld_so_fd == -1)"
    },
    {
        "line": 462,
        "fullcodeline": "if (!add_ld_so_conf (bwrap, error))"
    },
    {
        "line": 477,
        "fullcodeline": "app_id, flatpak_decomposed_get_branch (app_ref),"
    },
    {
        "line": 479,
        "fullcodeline": "sandboxed, FALSE, flags & FLATPAK_RUN_FLAG_DEVEL,"
    },
    {
        "line": 486,
        "fullcodeline": "if (!flatpak_instance_ensure_per_app_dir (app_id,"
    },
    {
        "line": 492,
        "fullcodeline": "if (!flatpak_instance_ensure_per_app_xdg_runtime_dir (app_id,"
    },
    {
        "line": 548,
        "fullcodeline": "if (parent_pid == 0)"
    },
    {
        "line": 554,
        "fullcodeline": "if (userns_fd != -1)"
    },
    {
        "line": 566,
        "fullcodeline": "if (pidns_fd != -1)"
    },
    {
        "line": 599,
        "fullcodeline": "exports, (flags & FLATPAK_RUN_FLAG_FILE_FORWARDING) != 0,"
    },
    {
        "line": 621,
        "fullcodeline": "if (flags & FLATPAK_RUN_FLAG_DO_NOT_REAP ||"
    },
    {
        "line": 634,
        "fullcodeline": "if (!g_spawn_async (NULL,"
    },
    {
        "line": 647,
        "fullcodeline": "if ((flags & (FLATPAK_RUN_FLAG_BACKGROUND)) == 0)"
    },
    {
        "line": 665,
        "fullcodeline": "char pid_str[64];"
    },
    {
        "line": 666,
        "fullcodeline": "g_autofree char *pid_path = NULL;"
    },
    {
        "line": 668,
        "fullcodeline": "g_snprintf (pid_str, sizeof (pid_str), \"%d\", getpid ());"
    },
    {
        "line": 669,
        "fullcodeline": "pid_path = g_build_filename (instance_id_host_dir, \"pid\", NULL);"
    },
    {
        "line": 670,
        "fullcodeline": "g_file_set_contents (pid_path, pid_str, -1, NULL);"
    },
    {
        "line": 675,
        "fullcodeline": "flatpak_bwrap_child_setup (bwrap->fds, FALSE);"
    },
    {
        "line": 680,
        "fullcodeline": "g_assert (bwrap->envp != NULL);"
    },
    {
        "line": 681,
        "fullcodeline": "g_assert (bwrap->envp[0] == NULL);"
    },
    {
        "line": 76,
        "fullcodeline": "_(\"\\\"flatpak run\\\" is not intended to be run as `sudo flatpak run`. \""
    },
    {
        "line": 103,
        "fullcodeline": "if (app_deploy_data == NULL)"
    },
    {
        "line": 106,
        "fullcodeline": "if ((flags & FLATPAK_RUN_FLAG_DEVEL) != 0)"
    },
    {
        "line": 134,
        "fullcodeline": "custom_runtime_parts = g_strsplit (custom_runtime, \"/\", 0);"
    },
    {
        "line": 243,
        "fullcodeline": "g_autoptr(GFile) previous_app_id_dir = NULL;"
    },
    {
        "line": 244,
        "fullcodeline": "g_autoptr(GFileInfo) previous_app_id_dir_info = NULL;"
    },
    {
        "line": 245,
        "fullcodeline": "g_autoptr(GError) local_error = NULL;"
    },
    {
        "line": 247,
        "fullcodeline": "previous_app_id_dir = flatpak_get_data_dir (previous_ids[i]);"
    },
    {
        "line": 291,
        "fullcodeline": "g_ptr_array_add (previous_app_id_dirs, g_steal_pointer (&previous_app_id_dir));"
    },
    {
        "line": 298,
        "fullcodeline": "app_id_dir = g_object_ref (real_app_id_dir);"
    },
    {
        "line": 304,
        "fullcodeline": "app_files = NULL;"
    },
    {
        "line": 311,
        "fullcodeline": "else if (original_app_files != NULL)"
    },
    {
        "line": 344,
        "fullcodeline": "if (g_file_query_exists (runtime_child, NULL))"
    },
    {
        "line": 354,
        "fullcodeline": "flatpak_file_get_path_cached (original_runtime_files),"
    },
    {
        "line": 364,
        "fullcodeline": "if (g_file_query_exists (runtime_child, NULL))"
    },
    {
        "line": 379,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 556,
        "fullcodeline": "flatpak_bwrap_add_args_data_fd (bwrap, \"--userns\", userns_fd, NULL);"
    },
    {
        "line": 558,
        "fullcodeline": "userns2_path = g_strdup_printf (\"/proc/%d/ns/user\", parent_pid);"
    },
    {
        "line": 559,
        "fullcodeline": "userns2_fd = open_namespace_fd_if_needed (userns2_path, userns_path);"
    },
    {
        "line": 567,
        "fullcodeline": "flatpak_bwrap_add_args_data_fd (bwrap, \"--pidns\", pidns_fd, NULL);"
    },
    {
        "line": 622,
        "fullcodeline": "(flags & FLATPAK_RUN_FLAG_BACKGROUND) == 0)"
    },
    {
        "line": 623,
        "fullcodeline": "spawn_flags |= G_SPAWN_DO_NOT_REAP_CHILD;"
    },
    {
        "line": 683,
        "fullcodeline": "if (execvpe (flatpak_get_bwrap (), (char **) bwrap->argv->pdata, bwrap->envp) == -1)"
    },
    {
        "line": 107,
        "fullcodeline": "key = FLATPAK_METADATA_KEY_SDK;"
    },
    {
        "line": 117,
        "fullcodeline": "g_propagate_error (error, g_steal_pointer (&my_error));"
    },
    {
        "line": 135,
        "fullcodeline": "for (i = 0; i < 3 && custom_runtime_parts[i] != NULL; i++)"
    },
    {
        "line": 255,
        "fullcodeline": "if (previous_app_id_dir_info == NULL)"
    },
    {
        "line": 306,
        "fullcodeline": "app_files = g_file_new_for_path (custom_app_path);"
    },
    {
        "line": 313,
        "fullcodeline": "app_files = g_object_ref (original_app_files);"
    },
    {
        "line": 345,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 365,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 385,
        "fullcodeline": "g_autoptr(GFile) app_child = NULL;"
    },
    {
        "line": 387,
        "fullcodeline": "app_child = g_file_get_child (app_files, \".ref\");"
    },
    {
        "line": 549,
        "fullcodeline": "return flatpak_fail (error, \"No parent pid specified\");"
    },
    {
        "line": 560,
        "fullcodeline": "if (userns2_fd != -1)"
    },
    {
        "line": 578,
        "fullcodeline": "default_command = g_key_file_get_string (metakey,"
    },
    {
        "line": 587,
        "fullcodeline": "command = default_command;"
    },
    {
        "line": 651,
        "fullcodeline": "if (waitpid (child_pid, &wait_status, 0) != child_pid)"
    },
    {
        "line": 654,
        "fullcodeline": "if (WIFEXITED (wait_status))"
    },
    {
        "line": 657,
        "fullcodeline": "if (WIFSIGNALED (wait_status))"
    },
    {
        "line": 660,
        "fullcodeline": "return glnx_throw (error, \"Unknown wait status from waitpid(): %d\", wait_status);"
    },
    {
        "line": 685,
        "fullcodeline": "g_set_error_literal (error, G_IO_ERROR, g_io_error_from_errno (errno),"
    },
    {
        "line": 109,
        "fullcodeline": "key = FLATPAK_METADATA_KEY_RUNTIME;"
    },
    {
        "line": 264,
        "fullcodeline": "g_clear_error (&local_error);"
    },
    {
        "line": 270,
        "fullcodeline": "do_migrate = FALSE; /* Don't migrate older things, they are likely symlinks to this dir */"
    },
    {
        "line": 390,
        "fullcodeline": "if (g_file_query_exists (app_child, NULL))"
    },
    {
        "line": 561,
        "fullcodeline": "flatpak_bwrap_add_args_data_fd (bwrap, \"--userns2\", userns2_fd, NULL);"
    },
    {
        "line": 655,
        "fullcodeline": "exit (WEXITSTATUS (wait_status));"
    },
    {
        "line": 658,
        "fullcodeline": "exit (128 + WTERMSIG (wait_status));"
    },
    {
        "line": 686,
        "fullcodeline": "_(\"Unable to start app\"));"
    },
    {
        "line": 137,
        "fullcodeline": "if (strlen (custom_runtime_parts[i]) > 0)"
    },
    {
        "line": 257,
        "fullcodeline": "if  (!g_error_matches (local_error, G_IO_ERROR, G_IO_ERROR_NOT_FOUND) && do_migrate)"
    },
    {
        "line": 272,
        "fullcodeline": "if (!flatpak_file_rename (previous_app_id_dir, real_app_id_dir, cancellable, &local_error))"
    },
    {
        "line": 391,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 584,
        "fullcodeline": "g_propagate_error (error, g_steal_pointer (&my_error));"
    },
    {
        "line": 652,
        "fullcodeline": "return glnx_throw_errno_prefix (error, \"Failed to wait for child process\");"
    },
    {
        "line": 259,
        "fullcodeline": "g_warning (_(\"Failed to migrate from %s: %s\"), flatpak_file_get_path_cached (previous_app_id_dir),"
    },
    {
        "line": 261,
        "fullcodeline": "do_migrate = FALSE; /* Don't migrate older things, they are likely symlinks to the thing that we failed on */"
    },
    {
        "line": 274,
        "fullcodeline": "g_warning (_(\"Failed to migrate old app data directory %s to new name %s: %s\"),"
    },
    {
        "line": 139,
        "fullcodeline": "if (i == 0)"
    },
    {
        "line": 141,
        "fullcodeline": "if (i == 1)"
    },
    {
        "line": 144,
        "fullcodeline": "if (i == 2 && custom_runtime_version == NULL)"
    },
    {
        "line": 275,
        "fullcodeline": "flatpak_file_get_path_cached (previous_app_id_dir), app_id,"
    },
    {
        "line": 140,
        "fullcodeline": "custom_runtime_id = custom_runtime_parts[i];"
    },
    {
        "line": 142,
        "fullcodeline": "custom_runtime_arch = custom_runtime_parts[i];"
    },
    {
        "line": 145,
        "fullcodeline": "custom_runtime_version = custom_runtime_parts[i];"
    },
    {
        "line": 281,
        "fullcodeline": "if (!g_file_make_symbolic_link (previous_app_id_dir, app_id, cancellable, &local_error))"
    },
    {
        "line": 283,
        "fullcodeline": "g_warning (_(\"Failed to create symlink while migrating %s: %s\"),"
    },
    {
        "line": 284,
        "fullcodeline": "flatpak_file_get_path_cached (previous_app_id_dir),"
    }
]