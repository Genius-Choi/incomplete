[
    {
        "line": 5,
        "fullcodeline": "gboolean ret = FALSE;"
    },
    {
        "line": 6,
        "fullcodeline": "g_autoptr(GFileEnumerator) dir_enum = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "g_autoptr(GFileInfo) child_info = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "g_autoptr(GFile) triggersdir = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "GError *temp_error = NULL;"
    },
    {
        "line": 26,
        "fullcodeline": "triggerspath = g_getenv (\"FLATPAK_TRIGGERSDIR\");"
    },
    {
        "line": 30,
        "fullcodeline": "g_debug (\"running triggers from %s\", triggerspath);"
    },
    {
        "line": 32,
        "fullcodeline": "triggersdir = g_file_new_for_path (triggerspath);"
    },
    {
        "line": 34,
        "fullcodeline": "dir_enum = g_file_enumerate_children (triggersdir, \"standard::type,standard::name\","
    },
    {
        "line": 109,
        "fullcodeline": "ret = TRUE;"
    },
    {
        "line": 12,
        "fullcodeline": "if (flatpak_dir_use_system_helper (self, NULL))"
    },
    {
        "line": 27,
        "fullcodeline": "if (triggerspath == NULL)"
    },
    {
        "line": 36,
        "fullcodeline": "if (!dir_enum)"
    },
    {
        "line": 39,
        "fullcodeline": "while ((child_info = g_file_enumerator_next_file (dir_enum, cancellable, &temp_error)) != NULL)"
    },
    {
        "line": 103,
        "fullcodeline": "if (temp_error != NULL)"
    },
    {
        "line": 14,
        "fullcodeline": "const char *installation = flatpak_dir_get_id (self);"
    },
    {
        "line": 28,
        "fullcodeline": "triggerspath = FLATPAK_TRIGGERDIR;"
    },
    {
        "line": 43,
        "fullcodeline": "GError *trigger_error = NULL;"
    },
    {
        "line": 45,
        "fullcodeline": "name = g_file_info_get_name (child_info);"
    },
    {
        "line": 47,
        "fullcodeline": "child = g_file_get_child (triggersdir, name);"
    },
    {
        "line": 100,
        "fullcodeline": "g_clear_object (&child_info);"
    },
    {
        "line": 16,
        "fullcodeline": "if (!flatpak_dir_system_helper_call_run_triggers (self,"
    },
    {
        "line": 49,
        "fullcodeline": "if (g_file_info_get_file_type (child_info) == G_FILE_TYPE_REGULAR &&"
    },
    {
        "line": 50,
        "fullcodeline": "g_str_has_suffix (name, \".trigger\"))"
    },
    {
        "line": 55,
        "fullcodeline": "g_autofree char *basedir_orig = g_file_get_path (self->basedir);"
    },
    {
        "line": 56,
        "fullcodeline": "g_autofree char *basedir = realpath (basedir_orig, NULL);"
    },
    {
        "line": 60,
        "fullcodeline": "g_debug (\"running trigger %s\", name);"
    },
    {
        "line": 62,
        "fullcodeline": "bwrap = flatpak_bwrap_new (NULL);"
    },
    {
        "line": 65,
        "fullcodeline": "flatpak_bwrap_add_arg (bwrap, flatpak_get_bwrap ());"
    },
    {
        "line": 66,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 77,
        "fullcodeline": "flatpak_bwrap_add_args (bwrap,"
    },
    {
        "line": 81,
        "fullcodeline": "flatpak_bwrap_finish (bwrap);"
    },
    {
        "line": 83,
        "fullcodeline": "commandline = flatpak_quote_argv ((const char **) bwrap->argv->pdata, -1);"
    },
    {
        "line": 18,
        "fullcodeline": "installation ? installation : \"\","
    },
    {
        "line": 78,
        "fullcodeline": "flatpak_file_get_path_cached (child),"
    },
    {
        "line": 87,
        "fullcodeline": "if (!g_spawn_sync (\"/\","
    },
    {
        "line": 95,
        "fullcodeline": "g_warning (\"Error running trigger %s: %s\", name, trigger_error->message);"
    },
    {
        "line": 96,
        "fullcodeline": "g_clear_error (&trigger_error);"
    },
    {
        "line": 90,
        "fullcodeline": "G_SPAWN_SEARCH_PATH | G_SPAWN_LEAVE_DESCRIPTORS_OPEN,"
    }
]