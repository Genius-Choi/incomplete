[
    {
        "line": 6,
        "fullcodeline": "asylo::system_call::SystemCallDescriptor descriptor{sysno};"
    },
    {
        "line": 12,
        "fullcodeline": "std::array<uint64_t, asylo::system_call::kParameterMax> parameters;"
    },
    {
        "line": 14,
        "fullcodeline": "va_start(args, sysno);"
    },
    {
        "line": 18,
        "fullcodeline": "va_end(args);"
    },
    {
        "line": 23,
        "fullcodeline": "status = asylo::system_call::SerializeRequest(sysno, parameters, &request);"
    },
    {
        "line": 30,
        "fullcodeline": "std::unique_ptr<uint8_t, MallocDeleter> request_owner(request.As<uint8_t>());"
    },
    {
        "line": 39,
        "fullcodeline": "status = global_syscall_callback(request.As<uint8_t>(), request.size(),"
    },
    {
        "line": 46,
        "fullcodeline": "std::unique_ptr<uint8_t, MallocDeleter> response_owner(response_buffer);"
    },
    {
        "line": 54,
        "fullcodeline": "auto response_reader ="
    },
    {
        "line": 59,
        "fullcodeline": "const asylo::primitives::PrimitiveStatus response_status ="
    },
    {
        "line": 2,
        "fullcodeline": "if (!enc_is_error_handler_set()) {"
    },
    {
        "line": 7,
        "fullcodeline": "if (!descriptor.is_valid()) {"
    },
    {
        "line": 15,
        "fullcodeline": "for (int i = 0; i < descriptor.parameter_count(); i++) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (!status.ok()) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (!enc_is_syscall_dispatcher_set()) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (!status.ok()) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (!response_buffer) {"
    },
    {
        "line": 55,
        "fullcodeline": "asylo::system_call::MessageReader({response_buffer, response_size});"
    },
    {
        "line": 56,
        "fullcodeline": "if (response_reader.sysno() != sysno) {"
    },
    {
        "line": 60,
        "fullcodeline": "response_reader.Validate();"
    },
    {
        "line": 61,
        "fullcodeline": "if (!response_status.ok()) {"
    },
    {
        "line": 67,
        "fullcodeline": "for (int i = 0; i < asylo::system_call::kParameterMax; i++) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (static_cast<int64_t>(result) == -1) {"
    },
    {
        "line": 8,
        "fullcodeline": "error_handler(\"system_call.cc: Invalid SystemCallDescriptor encountered.\");"
    },
    {
        "line": 16,
        "fullcodeline": "parameters[i] = va_arg(args, uint64_t);"
    },
    {
        "line": 25,
        "fullcodeline": "error_handler("
    },
    {
        "line": 37,
        "fullcodeline": "error_handler(\"system_.cc: system call dispatcher not set.\");"
    },
    {
        "line": 42,
        "fullcodeline": "error_handler("
    },
    {
        "line": 49,
        "fullcodeline": "error_handler("
    },
    {
        "line": 57,
        "fullcodeline": "error_handler(\"system_call.cc: Unexpected sysno in response\");"
    },
    {
        "line": 62,
        "fullcodeline": "error_handler("
    },
    {
        "line": 68,
        "fullcodeline": "asylo::system_call::ParameterDescriptor parameter = descriptor.parameter(i);"
    },
    {
        "line": 84,
        "fullcodeline": "uint64_t result = response_reader.header()->result;"
    },
    {
        "line": 69,
        "fullcodeline": "if (parameter.is_out()) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (klinux_errno != 0) {"
    },
    {
        "line": 76,
        "fullcodeline": "const void *src = response_reader.parameter_address(i);"
    },
    {
        "line": 77,
        "fullcodeline": "void *dst = reinterpret_cast<void *>(parameters[i]);"
    },
    {
        "line": 86,
        "fullcodeline": "int klinux_errno = response_reader.header()->error_number;"
    },
    {
        "line": 93,
        "fullcodeline": "errno = FromkLinuxErrno(klinux_errno);"
    },
    {
        "line": 71,
        "fullcodeline": "if (parameter.is_fixed()) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (dst != nullptr) {"
    },
    {
        "line": 72,
        "fullcodeline": "size = parameter.size();"
    },
    {
        "line": 79,
        "fullcodeline": "memcpy(dst, src, size);"
    },
    {
        "line": 74,
        "fullcodeline": "size = parameters[parameter.size()] * parameter.element_size();"
    }
]