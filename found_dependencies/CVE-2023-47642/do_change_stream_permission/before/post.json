[
    {
        "line": 9,
        "fullcodeline": "old_invite_only_value = stream.invite_only"
    },
    {
        "line": 10,
        "fullcodeline": "old_history_public_to_subscribers_value = stream.history_public_to_subscribers"
    },
    {
        "line": 11,
        "fullcodeline": "old_is_web_public_value = stream.is_web_public"
    },
    {
        "line": 13,
        "fullcodeline": "stream.is_web_public = is_web_public"
    },
    {
        "line": 14,
        "fullcodeline": "stream.invite_only = invite_only"
    },
    {
        "line": 15,
        "fullcodeline": "stream.history_public_to_subscribers = history_public_to_subscribers"
    },
    {
        "line": 93,
        "fullcodeline": "notify_stream_creation_ids = set()"
    },
    {
        "line": 131,
        "fullcodeline": "event = dict("
    },
    {
        "line": 143,
        "fullcodeline": "notify_stream_update_ids = can_access_stream_user_ids(stream) - notify_stream_creation_ids"
    },
    {
        "line": 144,
        "fullcodeline": "send_event(stream.realm, event, notify_stream_update_ids)"
    },
    {
        "line": 146,
        "fullcodeline": "old_policy_name = get_stream_permission_policy_name("
    },
    {
        "line": 151,
        "fullcodeline": "new_policy_name = get_stream_permission_policy_name("
    },
    {
        "line": 156,
        "fullcodeline": "send_change_stream_permission_notification("
    },
    {
        "line": 17,
        "fullcodeline": "with transaction.atomic():"
    },
    {
        "line": 94,
        "fullcodeline": "if old_invite_only_value and not stream.invite_only:"
    },
    {
        "line": 99,
        "fullcodeline": "assert stream.recipient_id is not None"
    },
    {
        "line": 100,
        "fullcodeline": "previously_subscribed_user_ids = Subscription.objects.filter("
    },
    {
        "line": 103,
        "fullcodeline": "stream_subscriber_user_ids = get_active_subscriptions_for_stream_id("
    },
    {
        "line": 107,
        "fullcodeline": "old_can_access_stream_user_ids = ("
    },
    {
        "line": 112,
        "fullcodeline": "non_guest_user_ids = set(active_non_guest_user_ids(stream.realm_id))"
    },
    {
        "line": 113,
        "fullcodeline": "notify_stream_creation_ids = non_guest_user_ids - old_can_access_stream_user_ids"
    },
    {
        "line": 114,
        "fullcodeline": "send_stream_creation_event(stream, list(notify_stream_creation_ids))"
    },
    {
        "line": 119,
        "fullcodeline": "old_subscribers_access_user_ids = set(stream_subscriber_user_ids) | {"
    },
    {
        "line": 122,
        "fullcodeline": "peer_notify_user_ids = non_guest_user_ids - old_subscribers_access_user_ids"
    },
    {
        "line": 123,
        "fullcodeline": "peer_add_event = dict("
    },
    {
        "line": 129,
        "fullcodeline": "send_event(stream.realm, peer_add_event, peer_notify_user_ids)"
    },
    {
        "line": 18,
        "fullcodeline": "stream.save(update_fields=[\"invite_only\", \"history_public_to_subscribers\", \"is_web_public\"])"
    },
    {
        "line": 20,
        "fullcodeline": "event_time = timezone_now()"
    },
    {
        "line": 108,
        "fullcodeline": "set(stream_subscriber_user_ids)"
    },
    {
        "line": 21,
        "fullcodeline": "if old_invite_only_value != stream.invite_only:"
    },
    {
        "line": 49,
        "fullcodeline": "if old_history_public_to_subscribers_value != stream.history_public_to_subscribers:"
    },
    {
        "line": 65,
        "fullcodeline": "if old_is_web_public_value != stream.is_web_public:"
    },
    {
        "line": 126,
        "fullcodeline": "stream_ids=[stream.id],"
    },
    {
        "line": 127,
        "fullcodeline": "user_ids=sorted(stream_subscriber_user_ids),"
    },
    {
        "line": 24,
        "fullcodeline": "assert stream.recipient_id is not None"
    },
    {
        "line": 68,
        "fullcodeline": "assert stream.recipient_id is not None"
    },
    {
        "line": 109,
        "fullcodeline": "| set(previously_subscribed_user_ids)"
    },
    {
        "line": 110,
        "fullcodeline": "| {user.id for user in stream.realm.get_admin_users_and_bots()}"
    },
    {
        "line": 25,
        "fullcodeline": "Attachment.objects.filter(messages__recipient_id=stream.recipient_id).update("
    },
    {
        "line": 30,
        "fullcodeline": "ArchivedAttachment.objects.filter(messages__recipient_id=stream.recipient_id).update("
    },
    {
        "line": 34,
        "fullcodeline": "RealmAuditLog.objects.create("
    },
    {
        "line": 50,
        "fullcodeline": "RealmAuditLog.objects.create("
    },
    {
        "line": 69,
        "fullcodeline": "Attachment.objects.filter(messages__recipient_id=stream.recipient_id).update("
    },
    {
        "line": 74,
        "fullcodeline": "ArchivedAttachment.objects.filter(messages__recipient_id=stream.recipient_id).update("
    },
    {
        "line": 78,
        "fullcodeline": "RealmAuditLog.objects.create("
    },
    {
        "line": 40,
        "fullcodeline": "extra_data=orjson.dumps("
    },
    {
        "line": 56,
        "fullcodeline": "extra_data=orjson.dumps("
    },
    {
        "line": 84,
        "fullcodeline": "extra_data=orjson.dumps("
    },
    {
        "line": 120,
        "fullcodeline": "user.id for user in stream.realm.get_admin_users_and_bots()"
    },
    {
        "line": 41,
        "fullcodeline": "{"
    },
    {
        "line": 57,
        "fullcodeline": "{"
    },
    {
        "line": 85,
        "fullcodeline": "{"
    }
]