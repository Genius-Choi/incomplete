[
    {
        "line": 11,
        "fullcodeline": "if event[\"type\"] == \"message\":"
    },
    {
        "line": 12,
        "fullcodeline": "state[\"max_message_id\"] = max(state[\"max_message_id\"], event[\"message\"][\"id\"])"
    },
    {
        "line": 13,
        "fullcodeline": "if \"raw_unread_msgs\" in state:"
    },
    {
        "line": 21,
        "fullcodeline": "if event[\"message\"][\"type\"] != \"stream\":"
    },
    {
        "line": 41,
        "fullcodeline": "for sub_dict in state.get(\"subscriptions\", []):"
    },
    {
        "line": 47,
        "fullcodeline": "for stream_dict in state.get(\"streams\", []):"
    },
    {
        "line": 54,
        "fullcodeline": "elif event[\"type\"] == \"heartbeat\":"
    },
    {
        "line": 14,
        "fullcodeline": "apply_unread_message_event("
    },
    {
        "line": 22,
        "fullcodeline": "if \"raw_recent_private_conversations\" in state:"
    },
    {
        "line": 59,
        "fullcodeline": "elif event[\"type\"] == \"drafts\":"
    },
    {
        "line": 24,
        "fullcodeline": "conversations = state[\"raw_recent_private_conversations\"]"
    },
    {
        "line": 25,
        "fullcodeline": "recipient_id = get_recent_conversations_recipient_id("
    },
    {
        "line": 37,
        "fullcodeline": "conversations[recipient_id][\"max_message_id\"] = event[\"message\"][\"id\"]"
    },
    {
        "line": 29,
        "fullcodeline": "if recipient_id not in conversations:"
    },
    {
        "line": 43,
        "fullcodeline": "event[\"message\"][\"stream_id\"] == sub_dict[\"stream_id\"]"
    },
    {
        "line": 44,
        "fullcodeline": "and sub_dict[\"first_message_id\"] is None"
    },
    {
        "line": 46,
        "fullcodeline": "sub_dict[\"first_message_id\"] = event[\"message\"][\"id\"]"
    },
    {
        "line": 49,
        "fullcodeline": "event[\"message\"][\"stream_id\"] == stream_dict[\"stream_id\"]"
    },
    {
        "line": 50,
        "fullcodeline": "and stream_dict[\"first_message_id\"] is None"
    },
    {
        "line": 52,
        "fullcodeline": "stream_dict[\"first_message_id\"] = event[\"message\"][\"id\"]"
    },
    {
        "line": 60,
        "fullcodeline": "if event[\"op\"] == \"add\":"
    },
    {
        "line": 86,
        "fullcodeline": "elif event[\"type\"] == \"scheduled_messages\":"
    },
    {
        "line": 30,
        "fullcodeline": "conversations[recipient_id] = dict("
    },
    {
        "line": 78,
        "fullcodeline": "state_draft_idx = None"
    },
    {
        "line": 61,
        "fullcodeline": "state[\"drafts\"].extend(event[\"drafts\"])"
    },
    {
        "line": 63,
        "fullcodeline": "if event[\"op\"] == \"update\":"
    },
    {
        "line": 79,
        "fullcodeline": "for idx, draft in enumerate(state[\"drafts\"]):"
    },
    {
        "line": 83,
        "fullcodeline": "assert state_draft_idx is not None"
    },
    {
        "line": 87,
        "fullcodeline": "if event[\"op\"] == \"add\":"
    },
    {
        "line": 97,
        "fullcodeline": "if event[\"op\"] == \"update\":"
    },
    {
        "line": 121,
        "fullcodeline": "elif event[\"type\"] == \"hotspots\":"
    },
    {
        "line": 31,
        "fullcodeline": "user_ids=sorted("
    },
    {
        "line": 64,
        "fullcodeline": "event_draft_idx = event[\"draft\"][\"id\"]"
    },
    {
        "line": 89,
        "fullcodeline": "assert len(event[\"scheduled_messages\"]) == 1"
    },
    {
        "line": 91,
        "fullcodeline": "state[\"scheduled_messages\"].append(event[\"scheduled_messages\"][0])"
    },
    {
        "line": 93,
        "fullcodeline": "state[\"scheduled_messages\"].sort("
    },
    {
        "line": 98,
        "fullcodeline": "for idx, scheduled_message in enumerate(state[\"scheduled_messages\"]):"
    },
    {
        "line": 117,
        "fullcodeline": "for idx, scheduled_message in enumerate(state[\"scheduled_messages\"]):"
    },
    {
        "line": 123,
        "fullcodeline": "elif event[\"type\"] == \"custom_profile_fields\":"
    },
    {
        "line": 32,
        "fullcodeline": "user_dict[\"id\"]"
    },
    {
        "line": 70,
        "fullcodeline": "event_draft_idx = event[\"draft_id\"]"
    },
    {
        "line": 124,
        "fullcodeline": "state[\"custom_profile_fields\"] = event[\"fields\"]"
    },
    {
        "line": 125,
        "fullcodeline": "custom_profile_field_ids = {field[\"id\"] for field in state[\"custom_profile_fields\"]}"
    },
    {
        "line": 81,
        "fullcodeline": "state_draft_idx = idx"
    },
    {
        "line": 127,
        "fullcodeline": "if \"raw_users\" in state:"
    },
    {
        "line": 135,
        "fullcodeline": "elif event[\"type\"] == \"realm_user\":"
    },
    {
        "line": 100,
        "fullcodeline": "scheduled_message[\"scheduled_message_id\"]"
    },
    {
        "line": 136,
        "fullcodeline": "person = event[\"person\"]"
    },
    {
        "line": 137,
        "fullcodeline": "person_user_id = person[\"user_id\"]"
    },
    {
        "line": 103,
        "fullcodeline": "state[\"scheduled_messages\"][idx] = event[\"scheduled_message\"]"
    },
    {
        "line": 128,
        "fullcodeline": "for user_dict in state[\"raw_users\"].values():"
    },
    {
        "line": 139,
        "fullcodeline": "if event[\"op\"] == \"add\":"
    },
    {
        "line": 286,
        "fullcodeline": "elif event[\"type\"] == \"realm_bot\":"
    },
    {
        "line": 34,
        "fullcodeline": "if user_dict[\"id\"] != user_profile.id"
    },
    {
        "line": 140,
        "fullcodeline": "person = copy.deepcopy(person)"
    },
    {
        "line": 151,
        "fullcodeline": "person[\"is_active\"] = True"
    },
    {
        "line": 131,
        "fullcodeline": "profile_data = user_dict[\"profile_data\"]"
    },
    {
        "line": 152,
        "fullcodeline": "if not person[\"is_bot\"]:"
    },
    {
        "line": 155,
        "fullcodeline": "elif event[\"op\"] == \"remove\":"
    },
    {
        "line": 287,
        "fullcodeline": "if event[\"op\"] == \"add\":"
    },
    {
        "line": 308,
        "fullcodeline": "elif event[\"type\"] == \"stream\":"
    },
    {
        "line": 109,
        "fullcodeline": "state[\"scheduled_messages\"].sort("
    },
    {
        "line": 129,
        "fullcodeline": "if \"profile_data\" not in user_dict:"
    },
    {
        "line": 132,
        "fullcodeline": "for field_id, field_data in list(profile_data.items()):"
    },
    {
        "line": 143,
        "fullcodeline": "email_address_visibility = UserProfile.objects.get("
    },
    {
        "line": 150,
        "fullcodeline": "person[\"avatar_url\"] = None"
    },
    {
        "line": 153,
        "fullcodeline": "person[\"profile_data\"] = {}"
    },
    {
        "line": 149,
        "fullcodeline": "if client_gravatar and person[\"avatar_url\"].startswith(\"https://secure.gravatar.com/\"):"
    },
    {
        "line": 288,
        "fullcodeline": "state[\"realm_bots\"].append(event[\"bot\"])"
    },
    {
        "line": 289,
        "fullcodeline": "elif event[\"op\"] == \"remove\":"
    },
    {
        "line": 309,
        "fullcodeline": "if event[\"op\"] == \"create\":"
    },
    {
        "line": 358,
        "fullcodeline": "if event[\"op\"] == \"delete\":"
    },
    {
        "line": 370,
        "fullcodeline": "if event[\"op\"] == \"update\":"
    },
    {
        "line": 405,
        "fullcodeline": "elif event[\"type\"] == \"default_streams\":"
    },
    {
        "line": 147,
        "fullcodeline": "client_gravatar = False"
    },
    {
        "line": 290,
        "fullcodeline": "user_id = event[\"bot\"][\"user_id\"]"
    },
    {
        "line": 359,
        "fullcodeline": "deleted_stream_ids = {stream[\"stream_id\"] for stream in event[\"streams\"]}"
    },
    {
        "line": 364,
        "fullcodeline": "state[\"never_subscribed\"] = ["
    },
    {
        "line": 158,
        "fullcodeline": "for sub in state[\"subscriptions\"]:"
    },
    {
        "line": 163,
        "fullcodeline": "is_me = person_user_id == user_profile.id"
    },
    {
        "line": 240,
        "fullcodeline": "if person_user_id in state[\"raw_users\"]:"
    },
    {
        "line": 285,
        "fullcodeline": "raise AssertionError(\"Unexpected event type {type}/{op}\".format(**event))"
    },
    {
        "line": 291,
        "fullcodeline": "for bot in state[\"realm_bots\"]:"
    },
    {
        "line": 294,
        "fullcodeline": "elif event[\"op\"] == \"delete\":"
    },
    {
        "line": 310,
        "fullcodeline": "for stream in event[\"streams\"]:"
    },
    {
        "line": 353,
        "fullcodeline": "state[\"unsubscribed\"].sort(key=lambda elt: elt[\"name\"])"
    },
    {
        "line": 354,
        "fullcodeline": "state[\"never_subscribed\"].sort(key=lambda elt: elt[\"name\"])"
    },
    {
        "line": 355,
        "fullcodeline": "if \"streams\" in state:"
    },
    {
        "line": 360,
        "fullcodeline": "if \"streams\" in state:"
    },
    {
        "line": 373,
        "fullcodeline": "for sub_list in ["
    },
    {
        "line": 390,
        "fullcodeline": "if \"streams\" in state:"
    },
    {
        "line": 407,
        "fullcodeline": "elif event[\"type\"] == \"default_stream_groups\":"
    },
    {
        "line": 133,
        "fullcodeline": "if int(field_id) not in custom_profile_field_ids:"
    },
    {
        "line": 134,
        "fullcodeline": "del profile_data[field_id]"
    },
    {
        "line": 241,
        "fullcodeline": "p = state[\"raw_users\"][person_user_id]"
    },
    {
        "line": 361,
        "fullcodeline": "state[\"streams\"] = ["
    },
    {
        "line": 159,
        "fullcodeline": "sub[\"subscribers\"] = ["
    },
    {
        "line": 171,
        "fullcodeline": "if \"role\" in person:"
    },
    {
        "line": 217,
        "fullcodeline": "for field in [\"delivery_email\", \"email\", \"full_name\", \"is_billing_admin\"]:"
    },
    {
        "line": 221,
        "fullcodeline": "if \"new_email\" in person:"
    },
    {
        "line": 243,
        "fullcodeline": "if \"avatar_url\" in person:"
    },
    {
        "line": 261,
        "fullcodeline": "for field in p:"
    },
    {
        "line": 311,
        "fullcodeline": "stream_data = copy.deepcopy(stream)"
    },
    {
        "line": 321,
        "fullcodeline": "unsubscribed_stream_sub = Subscription.objects.filter("
    },
    {
        "line": 356,
        "fullcodeline": "state[\"streams\"].sort(key=lambda elt: elt[\"name\"])"
    },
    {
        "line": 391,
        "fullcodeline": "for stream in state[\"streams\"]:"
    },
    {
        "line": 409,
        "fullcodeline": "elif event[\"type\"] == \"realm\":"
    },
    {
        "line": 166,
        "fullcodeline": "if \"avatar_url\" in person and \"avatar_url\" in state:"
    },
    {
        "line": 167,
        "fullcodeline": "state[\"avatar_source\"] = person[\"avatar_source\"]"
    },
    {
        "line": 168,
        "fullcodeline": "state[\"avatar_url\"] = person[\"avatar_url\"]"
    },
    {
        "line": 169,
        "fullcodeline": "state[\"avatar_url_medium\"] = person[\"avatar_url_medium\"]"
    },
    {
        "line": 172,
        "fullcodeline": "state[\"is_admin\"] = is_administrator_role(person[\"role\"])"
    },
    {
        "line": 173,
        "fullcodeline": "state[\"is_owner\"] = person[\"role\"] == UserProfile.ROLE_REALM_OWNER"
    },
    {
        "line": 174,
        "fullcodeline": "state[\"is_moderator\"] = person[\"role\"] == UserProfile.ROLE_MODERATOR"
    },
    {
        "line": 175,
        "fullcodeline": "state[\"is_guest\"] = person[\"role\"] == UserProfile.ROLE_GUEST"
    },
    {
        "line": 177,
        "fullcodeline": "state[\"can_create_private_streams\"] = user_profile.can_create_private_streams()"
    },
    {
        "line": 178,
        "fullcodeline": "state[\"can_create_public_streams\"] = user_profile.can_create_public_streams()"
    },
    {
        "line": 179,
        "fullcodeline": "state["
    },
    {
        "line": 182,
        "fullcodeline": "state[\"can_create_streams\"] = ("
    },
    {
        "line": 187,
        "fullcodeline": "state[\"can_subscribe_other_users\"] = user_profile.can_subscribe_other_users()"
    },
    {
        "line": 188,
        "fullcodeline": "state[\"can_invite_others_to_realm\"] = user_profile.can_invite_others_to_realm()"
    },
    {
        "line": 222,
        "fullcodeline": "state[\"email\"] = person[\"new_email\"]"
    },
    {
        "line": 230,
        "fullcodeline": "if \"role\" in person and \"realm_bots\" in state:"
    },
    {
        "line": 231,
        "fullcodeline": "prev_state = state[\"raw_users\"][user_profile.id]"
    },
    {
        "line": 232,
        "fullcodeline": "was_admin = prev_state[\"is_admin\"]"
    },
    {
        "line": 233,
        "fullcodeline": "now_admin = is_administrator_role(person[\"role\"])"
    },
    {
        "line": 295,
        "fullcodeline": "state[\"realm_bots\"] = ["
    },
    {
        "line": 350,
        "fullcodeline": "if \"streams\" in state:"
    },
    {
        "line": 378,
        "fullcodeline": "for obj in sub_list:"
    },
    {
        "line": 181,
        "fullcodeline": "] = user_profile.can_create_web_public_streams()"
    },
    {
        "line": 183,
        "fullcodeline": "state[\"can_create_private_streams\"]"
    },
    {
        "line": 194,
        "fullcodeline": "if \"never_subscribed\" in state:"
    },
    {
        "line": 203,
        "fullcodeline": "if \"streams\" in state:"
    },
    {
        "line": 235,
        "fullcodeline": "if was_admin and not now_admin:"
    },
    {
        "line": 299,
        "fullcodeline": "for bot in state[\"realm_bots\"]:"
    },
    {
        "line": 307,
        "fullcodeline": "raise AssertionError(\"Unexpected event type {type}/{op}\".format(**event))"
    },
    {
        "line": 313,
        "fullcodeline": "stream_data[\"subscribers\"] = []"
    },
    {
        "line": 331,
        "fullcodeline": "if len(unsubscribed_stream_sub) == 1:"
    },
    {
        "line": 332,
        "fullcodeline": "unsubscribed_stream_dict = build_unsubscribed_sub_from_stream_dict("
    },
    {
        "line": 343,
        "fullcodeline": "unsubscribed_stream_dict[\"stream_weekly_traffic\"] = None"
    },
    {
        "line": 347,
        "fullcodeline": "stream_data[\"stream_weekly_traffic\"] = None"
    },
    {
        "line": 410,
        "fullcodeline": "if event[\"op\"] == \"update\":"
    },
    {
        "line": 469,
        "fullcodeline": "elif event[\"type\"] == \"realm_user_settings_defaults\":"
    },
    {
        "line": 195,
        "fullcodeline": "sub_info = gather_subscriptions_helper("
    },
    {
        "line": 199,
        "fullcodeline": "state[\"subscriptions\"] = sub_info.subscriptions"
    },
    {
        "line": 200,
        "fullcodeline": "state[\"unsubscribed\"] = sub_info.unsubscribed"
    },
    {
        "line": 201,
        "fullcodeline": "state[\"never_subscribed\"] = sub_info.never_subscribed"
    },
    {
        "line": 204,
        "fullcodeline": "state[\"streams\"] = do_get_streams("
    },
    {
        "line": 211,
        "fullcodeline": "state[\"realm_default_streams\"] = []"
    },
    {
        "line": 213,
        "fullcodeline": "state[\"realm_default_streams\"] = streams_to_dicts_sorted("
    },
    {
        "line": 237,
        "fullcodeline": "if not was_admin and now_admin:"
    },
    {
        "line": 246,
        "fullcodeline": "email_address_visibility = UserProfile.objects.get("
    },
    {
        "line": 258,
        "fullcodeline": "person[\"avatar_url\"] = None"
    },
    {
        "line": 259,
        "fullcodeline": "person[\"avatar_url_medium\"] = None"
    },
    {
        "line": 262,
        "fullcodeline": "if field in person:"
    },
    {
        "line": 264,
        "fullcodeline": "if \"role\" in person:"
    },
    {
        "line": 268,
        "fullcodeline": "if \"is_billing_admin\" in person:"
    },
    {
        "line": 270,
        "fullcodeline": "if \"custom_profile_field\" in person:"
    },
    {
        "line": 282,
        "fullcodeline": "if \"new_email\" in person:"
    },
    {
        "line": 326,
        "fullcodeline": "*Subscription.API_FIELDS,"
    },
    {
        "line": 344,
        "fullcodeline": "state[\"unsubscribed\"].append(unsubscribed_stream_dict)"
    },
    {
        "line": 346,
        "fullcodeline": "assert len(unsubscribed_stream_sub) == 0"
    },
    {
        "line": 348,
        "fullcodeline": "state[\"never_subscribed\"].append(stream_data)"
    },
    {
        "line": 351,
        "fullcodeline": "state[\"streams\"].append(stream)"
    },
    {
        "line": 411,
        "fullcodeline": "field = \"realm_\" + event[\"property\"]"
    },
    {
        "line": 412,
        "fullcodeline": "state[field] = event[\"value\"]"
    },
    {
        "line": 419,
        "fullcodeline": "policy_permission_dict = {"
    },
    {
        "line": 218,
        "fullcodeline": "if field in person and field in state:"
    },
    {
        "line": 219,
        "fullcodeline": "state[field] = person[field]"
    },
    {
        "line": 238,
        "fullcodeline": "state[\"realm_bots\"] = get_owned_bot_dicts(user_profile)"
    },
    {
        "line": 255,
        "fullcodeline": "if client_gravatar and person[\"avatar_url\"].startswith("
    },
    {
        "line": 271,
        "fullcodeline": "custom_field_id = person[\"custom_profile_field\"][\"id\"]"
    },
    {
        "line": 272,
        "fullcodeline": "custom_field_new_value = person[\"custom_profile_field\"][\"value\"]"
    },
    {
        "line": 336,
        "fullcodeline": "unsubscribed_stream_dict[\"subscribers\"] = []"
    },
    {
        "line": 367,
        "fullcodeline": "if stream[\"stream_id\"] not in deleted_stream_ids"
    },
    {
        "line": 393,
        "fullcodeline": "prop = event[\"property\"]"
    },
    {
        "line": 414,
        "fullcodeline": "if event[\"property\"] == \"plan_type\":"
    },
    {
        "line": 445,
        "fullcodeline": "state[\"can_create_private_streams\"]"
    },
    {
        "line": 449,
        "fullcodeline": "elif event[\"op\"] == \"update_dict\":"
    },
    {
        "line": 474,
        "fullcodeline": "elif event[\"type\"] == \"subscription\":"
    },
    {
        "line": 214,
        "fullcodeline": "get_default_streams_for_realm(user_profile.realm_id)"
    },
    {
        "line": 253,
        "fullcodeline": "client_gravatar = False"
    },
    {
        "line": 265,
        "fullcodeline": "p[\"is_admin\"] = is_administrator_role(person[\"role\"])"
    },
    {
        "line": 266,
        "fullcodeline": "p[\"is_owner\"] = person[\"role\"] == UserProfile.ROLE_REALM_OWNER"
    },
    {
        "line": 267,
        "fullcodeline": "p[\"is_guest\"] = person[\"role\"] == UserProfile.ROLE_GUEST"
    },
    {
        "line": 273,
        "fullcodeline": "if \"rendered_value\" in person[\"custom_profile_field\"]:"
    },
    {
        "line": 300,
        "fullcodeline": "if bot[\"user_id\"] == event[\"bot\"][\"user_id\"]:"
    },
    {
        "line": 392,
        "fullcodeline": "if stream[\"name\"].lower() == event[\"name\"].lower():"
    },
    {
        "line": 394,
        "fullcodeline": "if prop in stream:"
    },
    {
        "line": 416,
        "fullcodeline": "state[\"zulip_plan_is_not_limited\"] = event[\"value\"] != Realm.PLAN_TYPE_LIMITED"
    },
    {
        "line": 417,
        "fullcodeline": "state[\"realm_upload_quota_mib\"] = event[\"extra_data\"][\"upload_quota\"]"
    },
    {
        "line": 436,
        "fullcodeline": "event[\"property\"] in policy_permission_dict"
    },
    {
        "line": 437,
        "fullcodeline": "and policy_permission_dict[event[\"property\"]] in state"
    },
    {
        "line": 296,
        "fullcodeline": "item for item in state[\"realm_bots\"] if item[\"user_id\"] != event[\"bot\"][\"user_id\"]"
    },
    {
        "line": 362,
        "fullcodeline": "s for s in state[\"streams\"] if s[\"stream_id\"] not in deleted_stream_ids"
    },
    {
        "line": 379,
        "fullcodeline": "if obj[\"name\"].lower() == event[\"name\"].lower():"
    },
    {
        "line": 381,
        "fullcodeline": "if event[\"property\"] == \"description\":"
    },
    {
        "line": 395,
        "fullcodeline": "stream[prop] = event[\"value\"]"
    },
    {
        "line": 431,
        "fullcodeline": "for policy, permission in policy_permission_dict.items():"
    },
    {
        "line": 439,
        "fullcodeline": "state[policy_permission_dict[event[\"property\"]]] = user_profile.has_permission("
    },
    {
        "line": 450,
        "fullcodeline": "for key, value in event[\"data\"].items():"
    },
    {
        "line": 473,
        "fullcodeline": "raise AssertionError(\"Unexpected event type {type}/{op}\".format(**event))"
    },
    {
        "line": 475,
        "fullcodeline": "if event[\"op\"] == \"add\":"
    },
    {
        "line": 546,
        "fullcodeline": "elif event[\"type\"] == \"presence\":"
    },
    {
        "line": 160,
        "fullcodeline": "user_id for user_id in sub[\"subscribers\"] if user_id != person_user_id"
    },
    {
        "line": 301,
        "fullcodeline": "if \"owner_id\" in event[\"bot\"]:"
    },
    {
        "line": 383,
        "fullcodeline": "if event.get(\"history_public_to_subscribers\") is not None:"
    },
    {
        "line": 387,
        "fullcodeline": "if event.get(\"is_web_public\") is not None:"
    },
    {
        "line": 479,
        "fullcodeline": "existing_stream_ids = {sub[\"stream_id\"] for sub in state[\"subscriptions\"]}"
    },
    {
        "line": 274,
        "fullcodeline": "p[\"profile_data\"][str(custom_field_id)] = {"
    },
    {
        "line": 279,
        "fullcodeline": "p[\"profile_data\"][str(custom_field_id)] = {"
    },
    {
        "line": 302,
        "fullcodeline": "bot_owner_id = event[\"bot\"][\"owner_id\"]"
    },
    {
        "line": 303,
        "fullcodeline": "bot[\"owner_id\"] = bot_owner_id"
    },
    {
        "line": 305,
        "fullcodeline": "bot.update(event[\"bot\"])"
    },
    {
        "line": 397,
        "fullcodeline": "stream[\"rendered_description\"] = event[\"rendered_description\"]"
    },
    {
        "line": 398,
        "fullcodeline": "if event.get(\"history_public_to_subscribers\") is not None:"
    },
    {
        "line": 399,
        "fullcodeline": "stream[\"history_public_to_subscribers\"] = event["
    },
    {
        "line": 402,
        "fullcodeline": "if event.get(\"is_web_public\") is not None:"
    },
    {
        "line": 403,
        "fullcodeline": "stream[\"is_web_public\"] = event[\"is_web_public\"]"
    },
    {
        "line": 468,
        "fullcodeline": "raise AssertionError(\"Unexpected event type {type}/{op}\".format(**event))"
    },
    {
        "line": 482,
        "fullcodeline": "for sub in event[\"subscriptions\"]:"
    },
    {
        "line": 495,
        "fullcodeline": "elif event[\"op\"] == \"remove\":"
    },
    {
        "line": 554,
        "fullcodeline": "elif event[\"type\"] == \"update_message\":"
    },
    {
        "line": 432,
        "fullcodeline": "if permission in state:"
    },
    {
        "line": 476,
        "fullcodeline": "added_stream_ids = {sub[\"stream_id\"] for sub in event[\"subscriptions\"]}"
    },
    {
        "line": 490,
        "fullcodeline": "state[\"unsubscribed\"] = [s for s in state[\"unsubscribed\"] if not was_added(s)]"
    },
    {
        "line": 493,
        "fullcodeline": "state[\"never_subscribed\"] = [s for s in state[\"never_subscribed\"] if not was_added(s)]"
    },
    {
        "line": 497,
        "fullcodeline": "was_removed = lambda s: s[\"stream_id\"] in removed_stream_ids"
    },
    {
        "line": 500,
        "fullcodeline": "removed_subs = list(filter(was_removed, state[\"subscriptions\"]))"
    },
    {
        "line": 433,
        "fullcodeline": "state[permission] = user_profile.has_permission(policy)"
    },
    {
        "line": 512,
        "fullcodeline": "elif event[\"op\"] == \"update\":"
    },
    {
        "line": 548,
        "fullcodeline": "user_key = str(event[\"user_id\"])"
    },
    {
        "line": 571,
        "fullcodeline": "elif event[\"type\"] == \"delete_message\":"
    },
    {
        "line": 456,
        "fullcodeline": "state[\"realm_password_auth_enabled\"] = value[\"Email\"] or value[\"LDAP\"]"
    },
    {
        "line": 483,
        "fullcodeline": "if sub[\"stream_id\"] not in existing_stream_ids:"
    },
    {
        "line": 496,
        "fullcodeline": "removed_stream_ids = {sub[\"stream_id\"] for sub in event[\"subscriptions\"]}"
    },
    {
        "line": 510,
        "fullcodeline": "state[\"subscriptions\"] = [s for s in state[\"subscriptions\"] if not was_removed(s)]"
    },
    {
        "line": 558,
        "fullcodeline": "if \"raw_unread_msgs\" in state and \"new_stream_id\" in event:"
    },
    {
        "line": 559,
        "fullcodeline": "stream_dict = state[\"raw_unread_msgs\"][\"stream_dict\"]"
    },
    {
        "line": 560,
        "fullcodeline": "stream_id = event[\"new_stream_id\"]"
    },
    {
        "line": 565,
        "fullcodeline": "if \"raw_unread_msgs\" in state and TOPIC_NAME in event:"
    },
    {
        "line": 566,
        "fullcodeline": "stream_dict = state[\"raw_unread_msgs\"][\"stream_dict\"]"
    },
    {
        "line": 567,
        "fullcodeline": "topic = event[TOPIC_NAME]"
    },
    {
        "line": 576,
        "fullcodeline": "max_message = ("
    },
    {
        "line": 504,
        "fullcodeline": "for sub in removed_subs:"
    },
    {
        "line": 513,
        "fullcodeline": "for sub in state[\"subscriptions\"]:"
    },
    {
        "line": 516,
        "fullcodeline": "elif event[\"op\"] == \"peer_add\":"
    },
    {
        "line": 561,
        "fullcodeline": "for message_id in event[\"message_ids\"]:"
    },
    {
        "line": 568,
        "fullcodeline": "for message_id in event[\"message_ids\"]:"
    },
    {
        "line": 572,
        "fullcodeline": "if \"message_id\" in event:"
    },
    {
        "line": 584,
        "fullcodeline": "if \"raw_unread_msgs\" in state:"
    },
    {
        "line": 596,
        "fullcodeline": "state[\"raw_recent_private_conversations\"] = get_recent_private_conversations(user_profile)"
    },
    {
        "line": 597,
        "fullcodeline": "elif event[\"type\"] == \"reaction\":"
    },
    {
        "line": 487,
        "fullcodeline": "state[\"subscriptions\"].append(sub)"
    },
    {
        "line": 573,
        "fullcodeline": "message_ids = [event[\"message_id\"]]"
    },
    {
        "line": 575,
        "fullcodeline": "message_ids = event[\"message_ids\"]  # nocoverage"
    },
    {
        "line": 577,
        "fullcodeline": "Message.objects.filter(usermessage__user_profile=user_profile).order_by(\"-id\").first()"
    },
    {
        "line": 580,
        "fullcodeline": "state[\"max_message_id\"] = max_message.id"
    },
    {
        "line": 582,
        "fullcodeline": "state[\"max_message_id\"] = -1"
    },
    {
        "line": 589,
        "fullcodeline": "if \"raw_recent_private_conversations\" not in state or event[\"message_type\"] != \"private\":"
    },
    {
        "line": 484,
        "fullcodeline": "if \"subscribers\" in sub and not include_subscribers:"
    },
    {
        "line": 485,
        "fullcodeline": "sub = copy.deepcopy(sub)"
    },
    {
        "line": 486,
        "fullcodeline": "del sub[\"subscribers\"]"
    },
    {
        "line": 585,
        "fullcodeline": "for remove_id in message_ids:"
    },
    {
        "line": 600,
        "fullcodeline": "elif event[\"type\"] == \"submessage\":"
    },
    {
        "line": 505,
        "fullcodeline": "sub[\"subscribers\"].remove(user_profile.id)"
    },
    {
        "line": 518,
        "fullcodeline": "stream_ids = set(event[\"stream_ids\"])"
    },
    {
        "line": 519,
        "fullcodeline": "user_ids = set(event[\"user_ids\"])"
    },
    {
        "line": 521,
        "fullcodeline": "for sub_dict in ["
    },
    {
        "line": 545,
        "fullcodeline": "raise AssertionError(\"Unexpected event type {type}/{op}\".format(**event))"
    },
    {
        "line": 586,
        "fullcodeline": "remove_message_id_from_unread_mgs(state[\"raw_unread_msgs\"], remove_id)"
    },
    {
        "line": 603,
        "fullcodeline": "elif event[\"type\"] == \"typing\":"
    },
    {
        "line": 532,
        "fullcodeline": "stream_ids = set(event[\"stream_ids\"])"
    },
    {
        "line": 533,
        "fullcodeline": "user_ids = set(event[\"user_ids\"])"
    },
    {
        "line": 535,
        "fullcodeline": "for sub_dict in ["
    },
    {
        "line": 606,
        "fullcodeline": "elif event[\"type\"] == \"attachment\":"
    },
    {
        "line": 526,
        "fullcodeline": "for sub in sub_dict:"
    },
    {
        "line": 610,
        "fullcodeline": "elif event[\"type\"] == \"update_message_flags\":"
    },
    {
        "line": 540,
        "fullcodeline": "for sub in sub_dict:"
    },
    {
        "line": 614,
        "fullcodeline": "if \"raw_unread_msgs\" in state and event[\"flag\"] == \"read\" and event[\"op\"] == \"add\":"
    },
    {
        "line": 634,
        "fullcodeline": "elif event[\"type\"] == \"realm_domains\":"
    },
    {
        "line": 528,
        "fullcodeline": "subscribers = set(sub[\"subscribers\"]) | user_ids"
    },
    {
        "line": 529,
        "fullcodeline": "sub[\"subscribers\"] = sorted(subscribers)"
    },
    {
        "line": 617,
        "fullcodeline": "if \"raw_unread_msgs\" in state and event[\"flag\"] == \"read\" and event[\"op\"] == \"remove\":"
    },
    {
        "line": 625,
        "fullcodeline": "if event[\"flag\"] == \"starred\" and \"starred_messages\" in state:"
    },
    {
        "line": 615,
        "fullcodeline": "for remove_id in event[\"messages\"]:"
    },
    {
        "line": 618,
        "fullcodeline": "for message_id_str, message_details in event[\"message_details\"].items():"
    },
    {
        "line": 626,
        "fullcodeline": "if event[\"op\"] == \"add\":"
    },
    {
        "line": 635,
        "fullcodeline": "if event[\"op\"] == \"add\":"
    },
    {
        "line": 649,
        "fullcodeline": "elif event[\"type\"] == \"realm_emoji\":"
    },
    {
        "line": 542,
        "fullcodeline": "subscribers = set(sub[\"subscribers\"]) - user_ids"
    },
    {
        "line": 543,
        "fullcodeline": "sub[\"subscribers\"] = sorted(subscribers)"
    },
    {
        "line": 627,
        "fullcodeline": "state[\"starred_messages\"] += event[\"messages\"]"
    },
    {
        "line": 616,
        "fullcodeline": "remove_message_id_from_unread_mgs(state[\"raw_unread_msgs\"], remove_id)"
    },
    {
        "line": 619,
        "fullcodeline": "add_message_to_unread_msgs("
    },
    {
        "line": 636,
        "fullcodeline": "state[\"realm_domains\"].append(event[\"realm_domain\"])"
    },
    {
        "line": 637,
        "fullcodeline": "elif event[\"op\"] == \"change\":"
    },
    {
        "line": 651,
        "fullcodeline": "elif event[\"type\"] == \"realm_export\":"
    },
    {
        "line": 622,
        "fullcodeline": "int(message_id_str),"
    },
    {
        "line": 629,
        "fullcodeline": "state[\"starred_messages\"] = ["
    },
    {
        "line": 638,
        "fullcodeline": "for realm_domain in state[\"realm_domains\"]:"
    },
    {
        "line": 655,
        "fullcodeline": "elif event[\"type\"] == \"alert_words\":"
    },
    {
        "line": 648,
        "fullcodeline": "raise AssertionError(\"Unexpected event type {type}/{op}\".format(**event))"
    },
    {
        "line": 657,
        "fullcodeline": "elif event[\"type\"] == \"muted_topics\":"
    },
    {
        "line": 642,
        "fullcodeline": "state[\"realm_domains\"] = ["
    },
    {
        "line": 632,
        "fullcodeline": "if message not in event[\"messages\"]"
    },
    {
        "line": 659,
        "fullcodeline": "elif event[\"type\"] == \"muted_users\":"
    },
    {
        "line": 661,
        "fullcodeline": "elif event[\"type\"] == \"realm_linkifiers\":"
    },
    {
        "line": 645,
        "fullcodeline": "if realm_domain[\"domain\"] != event[\"domain\"]"
    },
    {
        "line": 667,
        "fullcodeline": "elif event[\"type\"] == \"realm_playgrounds\":"
    },
    {
        "line": 669,
        "fullcodeline": "elif event[\"type\"] == \"update_display_settings\":"
    },
    {
        "line": 670,
        "fullcodeline": "if event[\"setting_name\"] != \"timezone\":"
    },
    {
        "line": 673,
        "fullcodeline": "elif event[\"type\"] == \"update_global_notifications\":"
    },
    {
        "line": 671,
        "fullcodeline": "assert event[\"setting_name\"] in UserProfile.display_settings_legacy"
    },
    {
        "line": 674,
        "fullcodeline": "assert event[\"notification_name\"] in UserProfile.notification_settings_legacy"
    },
    {
        "line": 676,
        "fullcodeline": "elif event[\"type\"] == \"user_settings\":"
    },
    {
        "line": 679,
        "fullcodeline": "if event[\"property\"] != \"timezone\":"
    },
    {
        "line": 687,
        "fullcodeline": "elif event[\"type\"] == \"invites_changed\":"
    },
    {
        "line": 680,
        "fullcodeline": "assert event[\"property\"] in UserProfile.property_types"
    },
    {
        "line": 681,
        "fullcodeline": "if event[\"property\"] in {"
    },
    {
        "line": 689,
        "fullcodeline": "elif event[\"type\"] == \"user_group\":"
    },
    {
        "line": 690,
        "fullcodeline": "if event[\"op\"] == \"add\":"
    },
    {
        "line": 727,
        "fullcodeline": "elif event[\"type\"] == \"user_status\":"
    },
    {
        "line": 728,
        "fullcodeline": "user_id_str = str(event[\"user_id\"])"
    },
    {
        "line": 729,
        "fullcodeline": "user_status = state[\"user_status\"]"
    },
    {
        "line": 730,
        "fullcodeline": "away = event.get(\"away\")"
    },
    {
        "line": 731,
        "fullcodeline": "status_text = event.get(\"status_text\")"
    },
    {
        "line": 732,
        "fullcodeline": "emoji_name = event.get(\"emoji_name\")"
    },
    {
        "line": 733,
        "fullcodeline": "emoji_code = event.get(\"emoji_code\")"
    },
    {
        "line": 734,
        "fullcodeline": "reaction_type = event.get(\"reaction_type\")"
    },
    {
        "line": 691,
        "fullcodeline": "state[\"realm_user_groups\"].append(event[\"group\"])"
    },
    {
        "line": 692,
        "fullcodeline": "state[\"realm_user_groups\"].sort(key=lambda group: group[\"id\"])"
    },
    {
        "line": 693,
        "fullcodeline": "elif event[\"op\"] == \"update\":"
    },
    {
        "line": 736,
        "fullcodeline": "if user_id_str not in user_status:"
    },
    {
        "line": 745,
        "fullcodeline": "if status_text is not None:"
    },
    {
        "line": 769,
        "fullcodeline": "if not user_status[user_id_str]:"
    },
    {
        "line": 773,
        "fullcodeline": "elif event[\"type\"] == \"user_topic\":"
    },
    {
        "line": 737,
        "fullcodeline": "user_status[user_id_str] = {}"
    },
    {
        "line": 770,
        "fullcodeline": "user_status.pop(user_id_str, None)"
    },
    {
        "line": 694,
        "fullcodeline": "for user_group in state[\"realm_user_groups\"]:"
    },
    {
        "line": 697,
        "fullcodeline": "elif event[\"op\"] == \"add_members\":"
    },
    {
        "line": 746,
        "fullcodeline": "if status_text == \"\":"
    },
    {
        "line": 751,
        "fullcodeline": "if emoji_name is not None:"
    },
    {
        "line": 786,
        "fullcodeline": "elif event[\"type\"] == \"has_zoom_token\":"
    },
    {
        "line": 741,
        "fullcodeline": "user_status[user_id_str][\"away\"] = True"
    },
    {
        "line": 749,
        "fullcodeline": "user_status[user_id_str][\"status_text\"] = status_text"
    },
    {
        "line": 775,
        "fullcodeline": "user_topics_state = state[\"user_topics\"]"
    },
    {
        "line": 784,
        "fullcodeline": "fields = [\"stream_id\", \"topic_name\", \"visibility_policy\", \"last_updated\"]"
    },
    {
        "line": 698,
        "fullcodeline": "for user_group in state[\"realm_user_groups\"]:"
    },
    {
        "line": 702,
        "fullcodeline": "elif event[\"op\"] == \"remove_members\":"
    },
    {
        "line": 743,
        "fullcodeline": "user_status[user_id_str].pop(\"away\", None)"
    },
    {
        "line": 747,
        "fullcodeline": "user_status[user_id_str].pop(\"status_text\", None)"
    },
    {
        "line": 752,
        "fullcodeline": "if emoji_name == \"\":"
    },
    {
        "line": 757,
        "fullcodeline": "if emoji_code is not None:"
    },
    {
        "line": 763,
        "fullcodeline": "if reaction_type is not None:"
    },
    {
        "line": 776,
        "fullcodeline": "for i in range(len(user_topics_state)):"
    },
    {
        "line": 785,
        "fullcodeline": "state[\"user_topics\"].append({x: event[x] for x in fields})"
    },
    {
        "line": 789,
        "fullcodeline": "raise AssertionError(\"Unexpected event type {}\".format(event[\"type\"]))"
    },
    {
        "line": 695,
        "fullcodeline": "if user_group[\"id\"] == event[\"group_id\"]:"
    },
    {
        "line": 755,
        "fullcodeline": "user_status[user_id_str][\"emoji_name\"] = emoji_name"
    },
    {
        "line": 703,
        "fullcodeline": "for user_group in state[\"realm_user_groups\"]:"
    },
    {
        "line": 708,
        "fullcodeline": "elif event[\"op\"] == \"add_subgroups\":"
    },
    {
        "line": 753,
        "fullcodeline": "user_status[user_id_str].pop(\"emoji_name\", None)"
    },
    {
        "line": 758,
        "fullcodeline": "if emoji_code == \"\":"
    },
    {
        "line": 761,
        "fullcodeline": "user_status[user_id_str][\"emoji_code\"] = emoji_code"
    },
    {
        "line": 764,
        "fullcodeline": "if reaction_type == UserStatus.UNICODE_EMOJI and emoji_name == \"\":"
    },
    {
        "line": 767,
        "fullcodeline": "user_status[user_id_str][\"reaction_type\"] = reaction_type"
    },
    {
        "line": 709,
        "fullcodeline": "for user_group in state[\"realm_user_groups\"]:"
    },
    {
        "line": 713,
        "fullcodeline": "elif event[\"op\"] == \"remove_subgroups\":"
    },
    {
        "line": 759,
        "fullcodeline": "user_status[user_id_str].pop(\"emoji_code\", None)"
    },
    {
        "line": 765,
        "fullcodeline": "user_status[user_id_str].pop(\"reaction_type\", None)"
    },
    {
        "line": 778,
        "fullcodeline": "user_topics_state[i][\"stream_id\"] == event[\"stream_id\"]"
    },
    {
        "line": 779,
        "fullcodeline": "and user_topics_state[i][\"topic_name\"] == event[\"topic_name\"]"
    },
    {
        "line": 700,
        "fullcodeline": "user_group[\"members\"].extend(event[\"user_ids\"])"
    },
    {
        "line": 701,
        "fullcodeline": "user_group[\"members\"].sort()"
    },
    {
        "line": 705,
        "fullcodeline": "members = set(user_group[\"members\"])"
    },
    {
        "line": 706,
        "fullcodeline": "user_group[\"members\"] = list(members - set(event[\"user_ids\"]))"
    },
    {
        "line": 714,
        "fullcodeline": "for user_group in state[\"realm_user_groups\"]:"
    },
    {
        "line": 707,
        "fullcodeline": "user_group[\"members\"].sort()"
    },
    {
        "line": 726,
        "fullcodeline": "raise AssertionError(\"Unexpected event type {type}/{op}\".format(**event))"
    },
    {
        "line": 711,
        "fullcodeline": "user_group[\"direct_subgroup_ids\"].extend(event[\"direct_subgroup_ids\"])"
    },
    {
        "line": 712,
        "fullcodeline": "user_group[\"direct_subgroup_ids\"].sort()"
    },
    {
        "line": 722,
        "fullcodeline": "state[\"realm_user_groups\"] = ["
    },
    {
        "line": 716,
        "fullcodeline": "subgroups = set(user_group[\"direct_subgroup_ids\"])"
    },
    {
        "line": 717,
        "fullcodeline": "user_group[\"direct_subgroup_ids\"] = list("
    },
    {
        "line": 720,
        "fullcodeline": "user_group[\"direct_subgroup_ids\"].sort()"
    },
    {
        "line": 718,
        "fullcodeline": "subgroups - set(event[\"direct_subgroup_ids\"])"
    },
    {
        "line": 723,
        "fullcodeline": "ug for ug in state[\"realm_user_groups\"] if ug[\"id\"] != event[\"group_id\"]"
    }
]