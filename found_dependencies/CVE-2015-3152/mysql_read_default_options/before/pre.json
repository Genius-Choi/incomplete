[
    {
        "line": 5,
        "fullcodeline": "char *argv_buff[1],**argv;"
    },
    {
        "line": 6,
        "fullcodeline": "const char *groups[3];"
    },
    {
        "line": 7,
        "fullcodeline": "DBUG_ENTER(\"mysql_read_default_options\");"
    },
    {
        "line": 8,
        "fullcodeline": "DBUG_PRINT(\"enter\",(\"file: %s  group: %s\",filename,group ? group :\"NULL\"));"
    },
    {
        "line": 10,
        "fullcodeline": "compile_time_assert(OPT_keep_this_one_last =="
    },
    {
        "line": 13,
        "fullcodeline": "argc=1; argv=argv_buff; argv_buff[0]= (char*) \"client\";"
    },
    {
        "line": 14,
        "fullcodeline": "groups[0]= (char*) \"client\"; groups[1]= (char*) group; groups[2]=0;"
    },
    {
        "line": 16,
        "fullcodeline": "my_load_defaults(filename, groups, &argc, &argv, NULL);"
    },
    {
        "line": 237,
        "fullcodeline": "free_defaults(argv);"
    },
    {
        "line": 17,
        "fullcodeline": "if (argc != 1)\t\t\t\t/* If some default option */"
    },
    {
        "line": 11,
        "fullcodeline": "array_elements(default_options));"
    },
    {
        "line": 19,
        "fullcodeline": "char **option=argv;"
    },
    {
        "line": 20,
        "fullcodeline": "while (*++option)"
    },
    {
        "line": 22,
        "fullcodeline": "if (my_getopt_is_args_separator(option[0]))          /* skip arguments separator */"
    },
    {
        "line": 25,
        "fullcodeline": "if (option[0][0] == '-' && option[0][1] == '-')"
    },
    {
        "line": 27,
        "fullcodeline": "char *end=strcend(*option,'=');"
    },
    {
        "line": 28,
        "fullcodeline": "char *opt_arg=0;"
    },
    {
        "line": 36,
        "fullcodeline": "*end= '-';"
    },
    {
        "line": 37,
        "fullcodeline": "switch (find_type(*option + 2, &option_types, FIND_TYPE_BASIC)) {"
    },
    {
        "line": 31,
        "fullcodeline": "opt_arg=end+1;"
    },
    {
        "line": 32,
        "fullcodeline": "*end=0;\t\t\t\t/* Remove '=' */"
    },
    {
        "line": 35,
        "fullcodeline": "for (end= *option ; *(end= strcend(end,'_')) ; )"
    },
    {
        "line": 51,
        "fullcodeline": "options->compress=1;"
    },
    {
        "line": 52,
        "fullcodeline": "options->client_flag|= CLIENT_COMPRESS;"
    },
    {
        "line": 63,
        "fullcodeline": "options->protocol = MYSQL_PROTOCOL_PIPE;"
    },
    {
        "line": 78,
        "fullcodeline": "add_init_command(options,opt_arg);"
    },
    {
        "line": 102,
        "fullcodeline": "options->client_flag|=CLIENT_FOUND_ROWS;"
    },
    {
        "line": 147,
        "fullcodeline": "my_free(options->charset_dir);"
    },
    {
        "line": 148,
        "fullcodeline": "options->charset_dir = my_strdup(key_memory_mysql_options,"
    },
    {
        "line": 152,
        "fullcodeline": "my_free(options->charset_name);"
    },
    {
        "line": 153,
        "fullcodeline": "options->charset_name = my_strdup(key_memory_mysql_options,"
    },
    {
        "line": 157,
        "fullcodeline": "options->client_flag|= CLIENT_INTERACTIVE;"
    },
    {
        "line": 166,
        "fullcodeline": "options->client_flag&= ~CLIENT_LOCAL_FILES;"
    },
    {
        "line": 190,
        "fullcodeline": "options->client_flag|= CLIENT_MULTI_RESULTS;"
    },
    {
        "line": 194,
        "fullcodeline": "options->client_flag|= CLIENT_MULTI_STATEMENTS | CLIENT_MULTI_RESULTS;"
    },
    {
        "line": 197,
        "fullcodeline": "options->secure_auth= TRUE;"
    },
    {
        "line": 200,
        "fullcodeline": "options->report_data_truncation= opt_arg ? test(atoi(opt_arg)) : 1;"
    },
    {
        "line": 218,
        "fullcodeline": "EXTENSION_SET_STRING(options, default_auth, opt_arg);"
    },
    {
        "line": 221,
        "fullcodeline": "my_free(options->ci.bind_address);"
    },
    {
        "line": 222,
        "fullcodeline": "options->ci.bind_address= my_strdup(key_memory_mysql_options,"
    },
    {
        "line": 226,
        "fullcodeline": "ENSURE_EXTENSIONS_PRESENT(options);"
    },
    {
        "line": 227,
        "fullcodeline": "options->extension->enable_cleartext_plugin="
    },
    {
        "line": 232,
        "fullcodeline": "DBUG_PRINT(\"warning\",(\"unknown option: %s\",option[0]));"
    },
    {
        "line": 160,
        "fullcodeline": "if (!opt_arg || atoi(opt_arg) != 0)"
    },
    {
        "line": 173,
        "fullcodeline": "if ((options->protocol= find_type(opt_arg, &sql_protocol_typelib,"
    },
    {
        "line": 204,
        "fullcodeline": "char buff[FN_REFLEN], buff2[FN_REFLEN];"
    },
    {
        "line": 213,
        "fullcodeline": "convert_dirname(buff2, buff, NULL);"
    },
    {
        "line": 214,
        "fullcodeline": "EXTENSION_SET_STRING(options, plugin_dir, buff2);"
    },
    {
        "line": 228,
        "fullcodeline": "(!opt_arg || atoi(opt_arg) != 0) ? TRUE : FALSE;"
    },
    {
        "line": 40,
        "fullcodeline": "options->port=atoi(opt_arg);"
    },
    {
        "line": 45,
        "fullcodeline": "my_free(options->unix_socket);"
    },
    {
        "line": 46,
        "fullcodeline": "options->unix_socket=my_strdup(key_memory_mysql_options,"
    },
    {
        "line": 57,
        "fullcodeline": "my_free(options->password);"
    },
    {
        "line": 58,
        "fullcodeline": "options->password=my_strdup(key_memory_mysql_options,"
    },
    {
        "line": 67,
        "fullcodeline": "options->connect_timeout=atoi(opt_arg);"
    },
    {
        "line": 72,
        "fullcodeline": "my_free(options->user);"
    },
    {
        "line": 73,
        "fullcodeline": "options->user=my_strdup(key_memory_mysql_options,"
    },
    {
        "line": 83,
        "fullcodeline": "my_free(options->host);"
    },
    {
        "line": 84,
        "fullcodeline": "options->host=my_strdup(key_memory_mysql_options,"
    },
    {
        "line": 91,
        "fullcodeline": "my_free(options->db);"
    },
    {
        "line": 92,
        "fullcodeline": "options->db=my_strdup(key_memory_mysql_options,"
    },
    {
        "line": 149,
        "fullcodeline": "opt_arg, MYF(MY_WME));"
    },
    {
        "line": 154,
        "fullcodeline": "opt_arg, MYF(MY_WME));"
    },
    {
        "line": 161,
        "fullcodeline": "options->client_flag|= CLIENT_LOCAL_FILES;"
    },
    {
        "line": 170,
        "fullcodeline": "options->max_allowed_packet= atoi(opt_arg);"
    },
    {
        "line": 176,
        "fullcodeline": "my_message_local(ERROR_LEVEL,"
    },
    {
        "line": 205,
        "fullcodeline": "if (strlen(opt_arg) >= FN_REFLEN)"
    },
    {
        "line": 207,
        "fullcodeline": "if (my_realpath(buff, opt_arg, 0))"
    },
    {
        "line": 223,
        "fullcodeline": "opt_arg, MYF(MY_WME));"
    },
    {
        "line": 163,
        "fullcodeline": "options->client_flag&= ~CLIENT_LOCAL_FILES;"
    },
    {
        "line": 206,
        "fullcodeline": "opt_arg[FN_REFLEN]= '\\0';"
    },
    {
        "line": 209,
        "fullcodeline": "DBUG_PRINT(\"warning\",(\"failed to normalize the plugin path: %s\","
    },
    {
        "line": 47,
        "fullcodeline": "opt_arg,MYF(MY_WME));"
    },
    {
        "line": 59,
        "fullcodeline": "opt_arg,MYF(MY_WME));"
    },
    {
        "line": 74,
        "fullcodeline": "opt_arg,MYF(MY_WME));"
    },
    {
        "line": 85,
        "fullcodeline": "opt_arg,MYF(MY_WME));"
    },
    {
        "line": 93,
        "fullcodeline": "opt_arg,MYF(MY_WME));"
    }
]