[
    {
        "line": 2,
        "fullcodeline": "DCHECK(object);"
    },
    {
        "line": 3,
        "fullcodeline": "ProtocolReaderStructReadState<Protocol_> readState;"
    },
    {
        "line": 4,
        "fullcodeline": "readState.readStructBegin(iprot);"
    },
    {
        "line": 37,
        "fullcodeline": "FieldID prevFieldId = 0;"
    },
    {
        "line": 40,
        "fullcodeline": "std::int16_t index = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "if (UNLIKELY(structInfo.unionExt != nullptr)) {"
    },
    {
        "line": 49,
        "fullcodeline": "for (;; ++index) {"
    },
    {
        "line": 7,
        "fullcodeline": "readState.fieldId = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "readState.readFieldBegin(iprot);"
    },
    {
        "line": 14,
        "fullcodeline": "const auto* fieldInfo = findFieldInfo(iprot, readState, structInfo);"
    },
    {
        "line": 27,
        "fullcodeline": "readState.readFieldEnd(iprot);"
    },
    {
        "line": 28,
        "fullcodeline": "readState.readFieldBegin(iprot);"
    },
    {
        "line": 50,
        "fullcodeline": "auto* fieldInfo = index < structInfo.numFields"
    },
    {
        "line": 79,
        "fullcodeline": "prevFieldId = fieldInfo->id;"
    },
    {
        "line": 80,
        "fullcodeline": "read(iprot, *fieldInfo->typeInfo, readState, getMember(*fieldInfo, object));"
    },
    {
        "line": 9,
        "fullcodeline": "if (readState.atStop()) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (fieldInfo->issetOffset > 0) {"
    },
    {
        "line": 10,
        "fullcodeline": "structInfo.unionExt->clear(object);"
    },
    {
        "line": 11,
        "fullcodeline": "readState.readStructEnd(iprot);"
    },
    {
        "line": 17,
        "fullcodeline": "void* unionVal = getMember(*fieldInfo, object);"
    },
    {
        "line": 19,
        "fullcodeline": "structInfo.unionExt->initMember[fieldInfo - structInfo.fieldInfos]("
    },
    {
        "line": 21,
        "fullcodeline": "read(iprot, *fieldInfo->typeInfo, readState, unionVal);"
    },
    {
        "line": 29,
        "fullcodeline": "if (UNLIKELY(!readState.atStop())) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (UNLIKELY(!readState.advanceToNextField("
    },
    {
        "line": 25,
        "fullcodeline": "skip(iprot, readState);"
    },
    {
        "line": 22,
        "fullcodeline": "const_cast<FieldID&>(activeUnionMemberId("
    },
    {
        "line": 58,
        "fullcodeline": "readState.afterAdvanceFailure(iprot);"
    },
    {
        "line": 64,
        "fullcodeline": "fieldInfo = findFieldInfo(iprot, readState, structInfo);"
    },
    {
        "line": 71,
        "fullcodeline": "skip(iprot, readState);"
    },
    {
        "line": 82,
        "fullcodeline": "const_cast<bool&>(fieldIsSet(object, fieldInfo->issetOffset)) = true;"
    },
    {
        "line": 59,
        "fullcodeline": "if (readState.atStop()) {"
    },
    {
        "line": 73,
        "fullcodeline": "} else if (UNLIKELY(index >= structInfo.numFields)) {"
    },
    {
        "line": 68,
        "fullcodeline": "index = fieldInfo - structInfo.fieldInfos;"
    }
]