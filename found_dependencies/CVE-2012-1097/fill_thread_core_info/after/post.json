[
    {
        "line": 13,
        "fullcodeline": "fill_prstatus(&t->prstatus, t->task, signr);"
    },
    {
        "line": 14,
        "fullcodeline": "(void) view->regsets[0].get(t->task, &view->regsets[0],"
    },
    {
        "line": 18,
        "fullcodeline": "fill_note(&t->notes[0], \"CORE\", NT_PRSTATUS,"
    },
    {
        "line": 20,
        "fullcodeline": "*total += notesize(&t->notes[0]);"
    },
    {
        "line": 22,
        "fullcodeline": "do_thread_regset_writeback(t->task, &view->regsets[0]);"
    },
    {
        "line": 29,
        "fullcodeline": "for (i = 1; i < view->n; ++i) {"
    },
    {
        "line": 30,
        "fullcodeline": "const struct user_regset *regset = &view->regsets[i];"
    },
    {
        "line": 31,
        "fullcodeline": "do_thread_regset_writeback(t->task, regset);"
    },
    {
        "line": 32,
        "fullcodeline": "if (regset->core_note_type && regset->get &&"
    },
    {
        "line": 33,
        "fullcodeline": "(!regset->active || regset->active(t->task, regset))) {"
    },
    {
        "line": 35,
        "fullcodeline": "size_t size = regset->n * regset->size;"
    },
    {
        "line": 36,
        "fullcodeline": "void *data = kmalloc(size, GFP_KERNEL);"
    },
    {
        "line": 39,
        "fullcodeline": "ret = regset->get(t->task, regset,"
    },
    {
        "line": 37,
        "fullcodeline": "if (unlikely(!data))"
    },
    {
        "line": 41,
        "fullcodeline": "if (unlikely(ret))"
    },
    {
        "line": 42,
        "fullcodeline": "kfree(data);"
    },
    {
        "line": 53,
        "fullcodeline": "*total += notesize(&t->notes[i]);"
    },
    {
        "line": 44,
        "fullcodeline": "if (regset->core_note_type != NT_PRFPREG)"
    },
    {
        "line": 45,
        "fullcodeline": "fill_note(&t->notes[i], \"LINUX\","
    },
    {
        "line": 49,
        "fullcodeline": "t->prstatus.pr_fpvalid = 1;"
    },
    {
        "line": 50,
        "fullcodeline": "fill_note(&t->notes[i], \"CORE\","
    }
]