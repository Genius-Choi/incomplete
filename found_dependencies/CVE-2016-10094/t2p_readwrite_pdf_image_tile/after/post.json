[
    {
        "line": 3,
        "fullcodeline": "uint16 edge=0;"
    },
    {
        "line": 4,
        "fullcodeline": "tsize_t written=0;"
    },
    {
        "line": 5,
        "fullcodeline": "unsigned char* buffer=NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "tsize_t bufferoffset=0;"
    },
    {
        "line": 7,
        "fullcodeline": "unsigned char* samplebuffer=NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "tsize_t samplebufferoffset=0;"
    },
    {
        "line": 9,
        "fullcodeline": "tsize_t read=0;"
    },
    {
        "line": 10,
        "fullcodeline": "uint16 i=0;"
    },
    {
        "line": 11,
        "fullcodeline": "ttile_t tilecount=0;"
    },
    {
        "line": 13,
        "fullcodeline": "ttile_t septilecount=0;"
    },
    {
        "line": 14,
        "fullcodeline": "tsize_t septilesize=0;"
    },
    {
        "line": 25,
        "fullcodeline": "edge |= t2p_tile_is_right_edge(t2p->tiff_tiles[t2p->pdf_page], tile);"
    },
    {
        "line": 26,
        "fullcodeline": "edge |= t2p_tile_is_bottom_edge(t2p->tiff_tiles[t2p->pdf_page], tile);"
    },
    {
        "line": 324,
        "fullcodeline": "t2p_disable(output);"
    },
    {
        "line": 325,
        "fullcodeline": "TIFFSetField(output, TIFFTAG_PHOTOMETRIC, t2p->tiff_photometric);"
    },
    {
        "line": 326,
        "fullcodeline": "TIFFSetField(output, TIFFTAG_BITSPERSAMPLE, t2p->tiff_bitspersample);"
    },
    {
        "line": 327,
        "fullcodeline": "TIFFSetField(output, TIFFTAG_SAMPLESPERPIXEL, t2p->tiff_samplesperpixel);"
    },
    {
        "line": 358,
        "fullcodeline": "TIFFSetField(output, TIFFTAG_PLANARCONFIG, PLANARCONFIG_CONTIG);"
    },
    {
        "line": 359,
        "fullcodeline": "TIFFSetField(output, TIFFTAG_FILLORDER, FILLORDER_MSB2LSB);"
    },
    {
        "line": 425,
        "fullcodeline": "t2p_enable(output);"
    },
    {
        "line": 426,
        "fullcodeline": "t2p->outputwritten = 0;"
    },
    {
        "line": 427,
        "fullcodeline": "bufferoffset = TIFFWriteEncodedStrip(output, (tstrip_t) 0, buffer,"
    },
    {
        "line": 441,
        "fullcodeline": "written = t2p->outputwritten;"
    },
    {
        "line": 22,
        "fullcodeline": "if (t2p->t2p_error != T2P_ERR_OK)"
    },
    {
        "line": 28,
        "fullcodeline": "if( (t2p->pdf_transcode == T2P_TRANSCODE_RAW) && ((edge == 0)"
    },
    {
        "line": 174,
        "fullcodeline": "if(t2p->pdf_sample==T2P_SAMPLE_NOTHING){"
    },
    {
        "line": 314,
        "fullcodeline": "if(t2p_tile_is_right_edge(t2p->tiff_tiles[t2p->pdf_page], tile) != 0){"
    },
    {
        "line": 328,
        "fullcodeline": "if(t2p_tile_is_right_edge(t2p->tiff_tiles[t2p->pdf_page], tile) == 0){"
    },
    {
        "line": 339,
        "fullcodeline": "if(t2p_tile_is_bottom_edge(t2p->tiff_tiles[t2p->pdf_page], tile) == 0){"
    },
    {
        "line": 429,
        "fullcodeline": "if (buffer != NULL) {"
    },
    {
        "line": 433,
        "fullcodeline": "if (bufferoffset == -1) {"
    },
    {
        "line": 171,
        "fullcodeline": "(void)0;"
    },
    {
        "line": 175,
        "fullcodeline": "buffer = (unsigned char*) _TIFFmalloc(t2p->tiff_datasize);"
    },
    {
        "line": 186,
        "fullcodeline": "read = TIFFReadEncodedTile("
    },
    {
        "line": 315,
        "fullcodeline": "t2p_tile_collapse_left("
    },
    {
        "line": 329,
        "fullcodeline": "TIFFSetField("
    },
    {
        "line": 340,
        "fullcodeline": "TIFFSetField("
    },
    {
        "line": 344,
        "fullcodeline": "TIFFSetField("
    },
    {
        "line": 363,
        "fullcodeline": "TIFFSetField(output, TIFFTAG_COMPRESSION, COMPRESSION_NONE);"
    },
    {
        "line": 428,
        "fullcodeline": "TIFFStripSize(output));"
    },
    {
        "line": 430,
        "fullcodeline": "_TIFFfree(buffer);"
    },
    {
        "line": 431,
        "fullcodeline": "buffer = NULL;"
    },
    {
        "line": 434,
        "fullcodeline": "TIFFError(TIFF2PDF_MODULE,"
    },
    {
        "line": 437,
        "fullcodeline": "t2p->t2p_error = T2P_ERR_ERROR;"
    },
    {
        "line": 176,
        "fullcodeline": "if(buffer==NULL){"
    },
    {
        "line": 191,
        "fullcodeline": "if(read==-1){"
    },
    {
        "line": 317,
        "fullcodeline": "TIFFTileRowSize(input),"
    },
    {
        "line": 334,
        "fullcodeline": "TIFFSetField("
    },
    {
        "line": 349,
        "fullcodeline": "TIFFSetField("
    },
    {
        "line": 353,
        "fullcodeline": "TIFFSetField("
    },
    {
        "line": 436,
        "fullcodeline": "TIFFFileName(output));"
    },
    {
        "line": 177,
        "fullcodeline": "TIFFError(TIFF2PDF_MODULE,"
    },
    {
        "line": 182,
        "fullcodeline": "t2p->t2p_error = T2P_ERR_ERROR;"
    },
    {
        "line": 189,
        "fullcodeline": "(tdata_t) &buffer[bufferoffset],"
    },
    {
        "line": 192,
        "fullcodeline": "TIFFError(TIFF2PDF_MODULE,"
    },
    {
        "line": 196,
        "fullcodeline": "_TIFFfree(buffer);"
    },
    {
        "line": 197,
        "fullcodeline": "t2p->t2p_error=T2P_ERR_ERROR;"
    },
    {
        "line": 203,
        "fullcodeline": "if(t2p->pdf_sample == T2P_SAMPLE_PLANAR_SEPARATE_TO_CONTIG){"
    },
    {
        "line": 256,
        "fullcodeline": "if(buffer==NULL){"
    },
    {
        "line": 283,
        "fullcodeline": "if(t2p->pdf_sample & T2P_SAMPLE_RGBA_TO_RGB){"
    },
    {
        "line": 290,
        "fullcodeline": "if(t2p->pdf_sample & T2P_SAMPLE_RGBAA_TO_RGB){"
    },
    {
        "line": 297,
        "fullcodeline": "if(t2p->pdf_sample & T2P_SAMPLE_YCBCR_TO_RGB){"
    },
    {
        "line": 306,
        "fullcodeline": "if(t2p->pdf_sample & T2P_SAMPLE_LAB_SIGNED_TO_UNSIGNED){"
    },
    {
        "line": 180,
        "fullcodeline": "(unsigned long) t2p->tiff_datasize,"
    },
    {
        "line": 181,
        "fullcodeline": "TIFFFileName(input));"
    },
    {
        "line": 195,
        "fullcodeline": "TIFFFileName(input));"
    },
    {
        "line": 204,
        "fullcodeline": "septilesize=TIFFTileSize(input);"
    },
    {
        "line": 205,
        "fullcodeline": "septilecount=TIFFNumberOfTiles(input);"
    },
    {
        "line": 207,
        "fullcodeline": "tilecount=septilecount/t2p->tiff_samplesperpixel;"
    },
    {
        "line": 208,
        "fullcodeline": "buffer = (unsigned char*) _TIFFmalloc(t2p->tiff_datasize);"
    },
    {
        "line": 218,
        "fullcodeline": "samplebuffer = (unsigned char*) _TIFFmalloc(t2p->tiff_datasize);"
    },
    {
        "line": 228,
        "fullcodeline": "samplebufferoffset=0;"
    },
    {
        "line": 247,
        "fullcodeline": "t2p_sample_planar_separate_to_contig("
    },
    {
        "line": 252,
        "fullcodeline": "bufferoffset+=samplebufferoffset;"
    },
    {
        "line": 253,
        "fullcodeline": "_TIFFfree(samplebuffer);"
    },
    {
        "line": 257,
        "fullcodeline": "buffer = (unsigned char*) _TIFFmalloc(t2p->tiff_datasize);"
    },
    {
        "line": 267,
        "fullcodeline": "read = TIFFReadEncodedTile("
    },
    {
        "line": 284,
        "fullcodeline": "t2p->tiff_datasize=t2p_sample_rgba_to_rgb("
    },
    {
        "line": 291,
        "fullcodeline": "t2p->tiff_datasize=t2p_sample_rgbaa_to_rgb("
    },
    {
        "line": 298,
        "fullcodeline": "TIFFError(TIFF2PDF_MODULE,"
    },
    {
        "line": 301,
        "fullcodeline": "_TIFFfree(buffer);"
    },
    {
        "line": 302,
        "fullcodeline": "t2p->t2p_error = T2P_ERR_ERROR;"
    },
    {
        "line": 307,
        "fullcodeline": "t2p->tiff_datasize=t2p_sample_lab_signed_to_unsigned("
    },
    {
        "line": 209,
        "fullcodeline": "if(buffer==NULL){"
    },
    {
        "line": 219,
        "fullcodeline": "if(samplebuffer==NULL){"
    },
    {
        "line": 229,
        "fullcodeline": "for(i=0;i<t2p->tiff_samplesperpixel;i++){"
    },
    {
        "line": 258,
        "fullcodeline": "if(buffer==NULL){"
    },
    {
        "line": 272,
        "fullcodeline": "if(read==-1){"
    },
    {
        "line": 300,
        "fullcodeline": "TIFFFileName(input));"
    },
    {
        "line": 210,
        "fullcodeline": "TIFFError(TIFF2PDF_MODULE,"
    },
    {
        "line": 215,
        "fullcodeline": "t2p->t2p_error = T2P_ERR_ERROR;"
    },
    {
        "line": 220,
        "fullcodeline": "TIFFError(TIFF2PDF_MODULE,"
    },
    {
        "line": 225,
        "fullcodeline": "t2p->t2p_error = T2P_ERR_ERROR;"
    },
    {
        "line": 230,
        "fullcodeline": "read ="
    },
    {
        "line": 245,
        "fullcodeline": "samplebufferoffset+=read;"
    },
    {
        "line": 259,
        "fullcodeline": "TIFFError(TIFF2PDF_MODULE,"
    },
    {
        "line": 264,
        "fullcodeline": "t2p->t2p_error = T2P_ERR_ERROR;"
    },
    {
        "line": 270,
        "fullcodeline": "(tdata_t) &buffer[bufferoffset],"
    },
    {
        "line": 273,
        "fullcodeline": "TIFFError(TIFF2PDF_MODULE,"
    },
    {
        "line": 277,
        "fullcodeline": "_TIFFfree(buffer);"
    },
    {
        "line": 278,
        "fullcodeline": "t2p->t2p_error=T2P_ERR_ERROR;"
    },
    {
        "line": 285,
        "fullcodeline": "(tdata_t)buffer,"
    },
    {
        "line": 292,
        "fullcodeline": "(tdata_t)buffer,"
    },
    {
        "line": 293,
        "fullcodeline": "t2p->tiff_tiles[t2p->pdf_page].tiles_tilewidth"
    },
    {
        "line": 308,
        "fullcodeline": "(tdata_t)buffer,"
    },
    {
        "line": 309,
        "fullcodeline": "t2p->tiff_tiles[t2p->pdf_page].tiles_tilewidth"
    },
    {
        "line": 213,
        "fullcodeline": "(unsigned long) t2p->tiff_datasize,"
    },
    {
        "line": 214,
        "fullcodeline": "TIFFFileName(input));"
    },
    {
        "line": 223,
        "fullcodeline": "(unsigned long) t2p->tiff_datasize,"
    },
    {
        "line": 224,
        "fullcodeline": "TIFFFileName(input));"
    },
    {
        "line": 231,
        "fullcodeline": "TIFFReadEncodedTile(input,"
    },
    {
        "line": 235,
        "fullcodeline": "if(read==-1){"
    },
    {
        "line": 262,
        "fullcodeline": "(unsigned long) t2p->tiff_datasize,"
    },
    {
        "line": 263,
        "fullcodeline": "TIFFFileName(input));"
    },
    {
        "line": 276,
        "fullcodeline": "TIFFFileName(input));"
    },
    {
        "line": 232,
        "fullcodeline": "tile + i*tilecount,"
    },
    {
        "line": 233,
        "fullcodeline": "(tdata_t) &(samplebuffer[samplebufferoffset]),"
    },
    {
        "line": 236,
        "fullcodeline": "TIFFError(TIFF2PDF_MODULE,"
    },
    {
        "line": 240,
        "fullcodeline": "_TIFFfree(samplebuffer);"
    },
    {
        "line": 241,
        "fullcodeline": "_TIFFfree(buffer);"
    },
    {
        "line": 242,
        "fullcodeline": "t2p->t2p_error=T2P_ERR_ERROR;"
    },
    {
        "line": 238,
        "fullcodeline": "tile + i*tilecount,"
    },
    {
        "line": 239,
        "fullcodeline": "TIFFFileName(input));"
    }
]