[
    {
        "line": 5,
        "fullcodeline": "char buffer[LINE_MAX];"
    },
    {
        "line": 6,
        "fullcodeline": "char *ep = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "char *kind = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "char *qid = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "char *response = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "char *parameter = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "(void)strlcpy(buffer, line, sizeof buffer);"
    },
    {
        "line": 17,
        "fullcodeline": "ep[0] = '\\0';"
    },
    {
        "line": 19,
        "fullcodeline": "kind = buffer;"
    },
    {
        "line": 21,
        "fullcodeline": "qid = ep+1;"
    },
    {
        "line": 24,
        "fullcodeline": "ep[0] = '\\0';"
    },
    {
        "line": 26,
        "fullcodeline": "reqid = strtoull(qid, &ep, 16);"
    },
    {
        "line": 32,
        "fullcodeline": "qid = ep+1;"
    },
    {
        "line": 35,
        "fullcodeline": "ep[0] = '\\0';"
    },
    {
        "line": 37,
        "fullcodeline": "token = strtoull(qid, &ep, 16);"
    },
    {
        "line": 43,
        "fullcodeline": "response = ep+1;"
    },
    {
        "line": 15,
        "fullcodeline": "if ((ep = strchr(buffer, '|')) == NULL)"
    },
    {
        "line": 22,
        "fullcodeline": "if ((ep = strchr(qid, '|')) == NULL)"
    },
    {
        "line": 27,
        "fullcodeline": "if (qid[0] == '\\0' || *ep != '\\0')"
    },
    {
        "line": 29,
        "fullcodeline": "if (errno == ERANGE && reqid == ULLONG_MAX)"
    },
    {
        "line": 33,
        "fullcodeline": "if ((ep = strchr(qid, '|')) == NULL)"
    },
    {
        "line": 38,
        "fullcodeline": "if (qid[0] == '\\0' || *ep != '\\0')"
    },
    {
        "line": 40,
        "fullcodeline": "if (errno == ERANGE && token == ULLONG_MAX)"
    },
    {
        "line": 46,
        "fullcodeline": "if ((fs = tree_get(&sessions, reqid)) == NULL)"
    },
    {
        "line": 49,
        "fullcodeline": "if (strcmp(kind, \"filter-dataline\") == 0) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (fs->phase == FILTER_DATA_LINE)"
    },
    {
        "line": 58,
        "fullcodeline": "if ((ep = strchr(response, '|'))) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (strcmp(response, \"proceed\") == 0) {"
    },
    {
        "line": 16,
        "fullcodeline": "fatalx(\"Missing token: %s\", line);"
    },
    {
        "line": 23,
        "fullcodeline": "fatalx(\"Missing reqid: %s\", line);"
    },
    {
        "line": 28,
        "fullcodeline": "fatalx(\"Invalid reqid: %s\", line);"
    },
    {
        "line": 30,
        "fullcodeline": "fatal(\"Invalid reqid: %s\", line);"
    },
    {
        "line": 34,
        "fullcodeline": "fatal(\"Missing directive: %s\", line);"
    },
    {
        "line": 39,
        "fullcodeline": "fatalx(\"Invalid token: %s\", line);"
    },
    {
        "line": 41,
        "fullcodeline": "fatal(\"Invalid token: %s\", line);"
    },
    {
        "line": 52,
        "fullcodeline": "filter_data_next(token, reqid, response);"
    },
    {
        "line": 56,
        "fullcodeline": "fatalx(\"filter-result in dataline phase\");"
    },
    {
        "line": 59,
        "fullcodeline": "parameter = ep + 1;"
    },
    {
        "line": 60,
        "fullcodeline": "ep[0] = '\\0';"
    },
    {
        "line": 66,
        "fullcodeline": "filter_protocol_next(token, reqid, 0);"
    },
    {
        "line": 50,
        "fullcodeline": "if (fs->phase != FILTER_DATA_LINE)"
    },
    {
        "line": 64,
        "fullcodeline": "if (parameter != NULL)"
    },
    {
        "line": 51,
        "fullcodeline": "fatalx(\"filter-dataline out of dataline phase\");"
    },
    {
        "line": 65,
        "fullcodeline": "fatalx(\"Unexpected parameter after proceed: %s\", line);"
    },
    {
        "line": 68,
        "fullcodeline": "} else if (strcmp(response, \"junk\") == 0) {"
    },
    {
        "line": 73,
        "fullcodeline": "filter_result_junk(reqid);"
    },
    {
        "line": 69,
        "fullcodeline": "if (parameter != NULL)"
    },
    {
        "line": 71,
        "fullcodeline": "if (fs->phase == FILTER_COMMIT)"
    },
    {
        "line": 70,
        "fullcodeline": "fatalx(\"Unexpected parameter after junk: %s\", line);"
    },
    {
        "line": 72,
        "fullcodeline": "fatalx(\"filter-reponse junk after DATA\");"
    },
    {
        "line": 76,
        "fullcodeline": "if (parameter == NULL)"
    },
    {
        "line": 79,
        "fullcodeline": "if (strcmp(response, \"rewrite\") == 0)"
    },
    {
        "line": 77,
        "fullcodeline": "fatalx(\"Missing parameter: %s\", line);"
    },
    {
        "line": 80,
        "fullcodeline": "filter_result_rewrite(reqid, parameter);"
    },
    {
        "line": 81,
        "fullcodeline": "else if (strcmp(response, \"reject\") == 0)"
    },
    {
        "line": 82,
        "fullcodeline": "filter_result_reject(reqid, parameter);"
    },
    {
        "line": 83,
        "fullcodeline": "else if (strcmp(response, \"disconnect\") == 0)"
    },
    {
        "line": 84,
        "fullcodeline": "filter_result_disconnect(reqid, parameter);"
    },
    {
        "line": 86,
        "fullcodeline": "fatalx(\"Invalid directive: %s\", line);"
    }
]