[
    {
        "line": 2,
        "fullcodeline": "Vdbe *v = pParse->pVdbe;  /* The VM under construction */"
    },
    {
        "line": 4,
        "fullcodeline": "int inReg = target;       /* Results stored in register inReg */"
    },
    {
        "line": 5,
        "fullcodeline": "int regFree1 = 0;         /* If non-zero free this temporary register */"
    },
    {
        "line": 6,
        "fullcodeline": "int regFree2 = 0;         /* If non-zero free this temporary register */"
    },
    {
        "line": 9,
        "fullcodeline": "int p5 = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "assert( target>0 && target<=pParse->nMem );"
    },
    {
        "line": 736,
        "fullcodeline": "sqlite3ReleaseTempReg(pParse, regFree1);"
    },
    {
        "line": 737,
        "fullcodeline": "sqlite3ReleaseTempReg(pParse, regFree2);"
    },
    {
        "line": 12,
        "fullcodeline": "if( v==0 ){"
    },
    {
        "line": 18,
        "fullcodeline": "if( pExpr==0 ){"
    },
    {
        "line": 19,
        "fullcodeline": "op = TK_NULL;"
    },
    {
        "line": 185,
        "fullcodeline": "op = (op==TK_IS) ? TK_EQ : TK_NE;"
    },
    {
        "line": 186,
        "fullcodeline": "p5 = SQLITE_NULLEQ;"
    },
    {
        "line": 645,
        "fullcodeline": "default: assert( op==TK_CASE ); {"
    },
    {
        "line": 21,
        "fullcodeline": "op = pExpr->op;"
    },
    {
        "line": 25,
        "fullcodeline": "AggInfo *pAggInfo = pExpr->pAggInfo;"
    },
    {
        "line": 38,
        "fullcodeline": "int iTab = pExpr->iTable;"
    },
    {
        "line": 115,
        "fullcodeline": "codeInteger(pParse, pExpr, 0, target);"
    },
    {
        "line": 119,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Integer, sqlite3ExprTruthValue(pExpr), target);"
    },
    {
        "line": 124,
        "fullcodeline": "assert( !ExprHasProperty(pExpr, EP_IntValue) );"
    },
    {
        "line": 125,
        "fullcodeline": "codeReal(v, pExpr->u.zToken, 0, target);"
    },
    {
        "line": 130,
        "fullcodeline": "assert( !ExprHasProperty(pExpr, EP_IntValue) );"
    },
    {
        "line": 131,
        "fullcodeline": "sqlite3VdbeLoadString(v, target, pExpr->u.zToken);"
    },
    {
        "line": 135,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Null, 0, target);"
    },
    {
        "line": 143,
        "fullcodeline": "assert( !ExprHasProperty(pExpr, EP_IntValue) );"
    },
    {
        "line": 144,
        "fullcodeline": "assert( pExpr->u.zToken[0]=='x' || pExpr->u.zToken[0]=='X' );"
    },
    {
        "line": 145,
        "fullcodeline": "assert( pExpr->u.zToken[1]=='\\'' );"
    },
    {
        "line": 147,
        "fullcodeline": "n = sqlite3Strlen30(z) - 1;"
    },
    {
        "line": 148,
        "fullcodeline": "assert( z[n]=='\\'' );"
    },
    {
        "line": 149,
        "fullcodeline": "zBlob = sqlite3HexToBlob(sqlite3VdbeDb(v), z, n);"
    },
    {
        "line": 150,
        "fullcodeline": "sqlite3VdbeAddOp4(v, OP_Blob, n/2, target, 0, zBlob, P4_DYNAMIC);"
    },
    {
        "line": 155,
        "fullcodeline": "assert( !ExprHasProperty(pExpr, EP_IntValue) );"
    },
    {
        "line": 156,
        "fullcodeline": "assert( pExpr->u.zToken!=0 );"
    },
    {
        "line": 157,
        "fullcodeline": "assert( pExpr->u.zToken[0]!=0 );"
    },
    {
        "line": 158,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Variable, pExpr->iColumn, target);"
    },
    {
        "line": 173,
        "fullcodeline": "inReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft, target);"
    },
    {
        "line": 178,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Cast, target,"
    },
    {
        "line": 194,
        "fullcodeline": "Expr *pLeft = pExpr->pLeft;"
    },
    {
        "line": 226,
        "fullcodeline": "assert( TK_AND==OP_And );            testcase( op==TK_AND );"
    },
    {
        "line": 227,
        "fullcodeline": "assert( TK_OR==OP_Or );              testcase( op==TK_OR );"
    },
    {
        "line": 228,
        "fullcodeline": "assert( TK_PLUS==OP_Add );           testcase( op==TK_PLUS );"
    },
    {
        "line": 229,
        "fullcodeline": "assert( TK_MINUS==OP_Subtract );     testcase( op==TK_MINUS );"
    },
    {
        "line": 230,
        "fullcodeline": "assert( TK_REM==OP_Remainder );      testcase( op==TK_REM );"
    },
    {
        "line": 231,
        "fullcodeline": "assert( TK_BITAND==OP_BitAnd );      testcase( op==TK_BITAND );"
    },
    {
        "line": 232,
        "fullcodeline": "assert( TK_BITOR==OP_BitOr );        testcase( op==TK_BITOR );"
    },
    {
        "line": 233,
        "fullcodeline": "assert( TK_SLASH==OP_Divide );       testcase( op==TK_SLASH );"
    },
    {
        "line": 234,
        "fullcodeline": "assert( TK_LSHIFT==OP_ShiftLeft );   testcase( op==TK_LSHIFT );"
    },
    {
        "line": 235,
        "fullcodeline": "assert( TK_RSHIFT==OP_ShiftRight );  testcase( op==TK_RSHIFT );"
    },
    {
        "line": 236,
        "fullcodeline": "assert( TK_CONCAT==OP_Concat );      testcase( op==TK_CONCAT );"
    },
    {
        "line": 237,
        "fullcodeline": "r1 = sqlite3ExprCodeTemp(pParse, pExpr->pLeft, &regFree1);"
    },
    {
        "line": 238,
        "fullcodeline": "r2 = sqlite3ExprCodeTemp(pParse, pExpr->pRight, &regFree2);"
    },
    {
        "line": 239,
        "fullcodeline": "sqlite3VdbeAddOp3(v, op, r2, r1, target);"
    },
    {
        "line": 240,
        "fullcodeline": "testcase( regFree1==0 );"
    },
    {
        "line": 241,
        "fullcodeline": "testcase( regFree2==0 );"
    },
    {
        "line": 245,
        "fullcodeline": "Expr *pLeft = pExpr->pLeft;"
    },
    {
        "line": 246,
        "fullcodeline": "assert( pLeft );"
    },
    {
        "line": 269,
        "fullcodeline": "assert( TK_BITNOT==OP_BitNot );   testcase( op==TK_BITNOT );"
    },
    {
        "line": 270,
        "fullcodeline": "assert( TK_NOT==OP_Not );         testcase( op==TK_NOT );"
    },
    {
        "line": 271,
        "fullcodeline": "r1 = sqlite3ExprCodeTemp(pParse, pExpr->pLeft, &regFree1);"
    },
    {
        "line": 272,
        "fullcodeline": "testcase( regFree1==0 );"
    },
    {
        "line": 273,
        "fullcodeline": "sqlite3VdbeAddOp2(v, op, r1, inReg);"
    },
    {
        "line": 279,
        "fullcodeline": "r1 = sqlite3ExprCodeTemp(pParse, pExpr->pLeft, &regFree1);"
    },
    {
        "line": 280,
        "fullcodeline": "testcase( regFree1==0 );"
    },
    {
        "line": 281,
        "fullcodeline": "isTrue = sqlite3ExprTruthValue(pExpr->pRight);"
    },
    {
        "line": 282,
        "fullcodeline": "bNormal = pExpr->op2==TK_IS;"
    },
    {
        "line": 283,
        "fullcodeline": "testcase( isTrue && bNormal);"
    },
    {
        "line": 284,
        "fullcodeline": "testcase( !isTrue && bNormal);"
    },
    {
        "line": 285,
        "fullcodeline": "sqlite3VdbeAddOp4Int(v, OP_IsTrue, r1, inReg, !isTrue, isTrue ^ bNormal);"
    },
    {
        "line": 291,
        "fullcodeline": "assert( TK_ISNULL==OP_IsNull );   testcase( op==TK_ISNULL );"
    },
    {
        "line": 292,
        "fullcodeline": "assert( TK_NOTNULL==OP_NotNull ); testcase( op==TK_NOTNULL );"
    },
    {
        "line": 293,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Integer, 1, target);"
    },
    {
        "line": 294,
        "fullcodeline": "r1 = sqlite3ExprCodeTemp(pParse, pExpr->pLeft, &regFree1);"
    },
    {
        "line": 295,
        "fullcodeline": "testcase( regFree1==0 );"
    },
    {
        "line": 296,
        "fullcodeline": "addr = sqlite3VdbeAddOp1(v, op, r1);"
    },
    {
        "line": 297,
        "fullcodeline": "VdbeCoverageIf(v, op==TK_ISNULL);"
    },
    {
        "line": 298,
        "fullcodeline": "VdbeCoverageIf(v, op==TK_NOTNULL);"
    },
    {
        "line": 299,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Integer, 0, target);"
    },
    {
        "line": 300,
        "fullcodeline": "sqlite3VdbeJumpHere(v, addr);"
    },
    {
        "line": 304,
        "fullcodeline": "AggInfo *pInfo = pExpr->pAggInfo;"
    },
    {
        "line": 318,
        "fullcodeline": "u32 constMask = 0;     /* Mask of function arguments that are constant */"
    },
    {
        "line": 320,
        "fullcodeline": "sqlite3 *db = pParse->db;  /* The database connection */"
    },
    {
        "line": 321,
        "fullcodeline": "u8 enc = ENC(db);      /* The text encoding used by this database */"
    },
    {
        "line": 322,
        "fullcodeline": "CollSeq *pColl = 0;    /* A collating sequence */"
    },
    {
        "line": 335,
        "fullcodeline": "assert( !ExprHasProperty(pExpr, EP_xIsSelect) );"
    },
    {
        "line": 341,
        "fullcodeline": "nFarg = pFarg ? pFarg->nExpr : 0;"
    },
    {
        "line": 342,
        "fullcodeline": "assert( !ExprHasProperty(pExpr, EP_IntValue) );"
    },
    {
        "line": 344,
        "fullcodeline": "pDef = sqlite3FindFunction(db, zId, nFarg, enc, 0);"
    },
    {
        "line": 483,
        "fullcodeline": "testcase( op==TK_EXISTS );"
    },
    {
        "line": 484,
        "fullcodeline": "testcase( op==TK_SELECT );"
    },
    {
        "line": 497,
        "fullcodeline": "assert( pExpr->iTable==0 || pExpr->pLeft->op==TK_SELECT );"
    },
    {
        "line": 507,
        "fullcodeline": "int destIfFalse = sqlite3VdbeMakeLabel(pParse);"
    },
    {
        "line": 508,
        "fullcodeline": "int destIfNull = sqlite3VdbeMakeLabel(pParse);"
    },
    {
        "line": 509,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Null, 0, target);"
    },
    {
        "line": 510,
        "fullcodeline": "sqlite3ExprCodeIN(pParse, pExpr, destIfFalse, destIfNull);"
    },
    {
        "line": 511,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Integer, 1, target);"
    },
    {
        "line": 512,
        "fullcodeline": "sqlite3VdbeResolveLabel(v, destIfFalse);"
    },
    {
        "line": 513,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_AddImm, target, 0);"
    },
    {
        "line": 514,
        "fullcodeline": "sqlite3VdbeResolveLabel(v, destIfNull);"
    },
    {
        "line": 532,
        "fullcodeline": "exprCodeBetween(pParse, pExpr, target, 0, 0);"
    },
    {
        "line": 538,
        "fullcodeline": "pExpr = pExpr->pLeft;"
    },
    {
        "line": 569,
        "fullcodeline": "int iCol = pExpr->iColumn;"
    },
    {
        "line": 570,
        "fullcodeline": "int p1 = pExpr->iTable * (pTab->nCol+1) + 1"
    },
    {
        "line": 573,
        "fullcodeline": "assert( pExpr->iTable==0 || pExpr->iTable==1 );"
    },
    {
        "line": 574,
        "fullcodeline": "assert( iCol>=-1 && iCol<pTab->nCol );"
    },
    {
        "line": 575,
        "fullcodeline": "assert( pTab->iPKey<0 || iCol!=pTab->iPKey );"
    },
    {
        "line": 576,
        "fullcodeline": "assert( p1>=0 && p1<(pTab->nCol*2+2) );"
    },
    {
        "line": 578,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Param, p1, target);"
    },
    {
        "line": 579,
        "fullcodeline": "VdbeComment((v, \"r[%d]=%s.%s\", target,"
    },
    {
        "line": 598,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"row value misused\");"
    },
    {
        "line": 610,
        "fullcodeline": "u8 okConstFactor = pParse->okConstFactor;"
    },
    {
        "line": 611,
        "fullcodeline": "addrINR = sqlite3VdbeAddOp1(v, OP_IfNullRow, pExpr->iTable);"
    },
    {
        "line": 616,
        "fullcodeline": "pParse->okConstFactor = 0;"
    },
    {
        "line": 617,
        "fullcodeline": "inReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft, target);"
    },
    {
        "line": 618,
        "fullcodeline": "pParse->okConstFactor = okConstFactor;"
    },
    {
        "line": 619,
        "fullcodeline": "sqlite3VdbeJumpHere(v, addrINR);"
    },
    {
        "line": 620,
        "fullcodeline": "sqlite3VdbeChangeP3(v, addrINR, inReg);"
    },
    {
        "line": 654,
        "fullcodeline": "Expr *pTest = 0;                  /* X==Ei (form A) or just Ei (form B) */"
    },
    {
        "line": 655,
        "fullcodeline": "Expr *pDel = 0;"
    },
    {
        "line": 656,
        "fullcodeline": "sqlite3 *db = pParse->db;"
    },
    {
        "line": 658,
        "fullcodeline": "assert( !ExprHasProperty(pExpr, EP_xIsSelect) && pExpr->x.pList );"
    },
    {
        "line": 659,
        "fullcodeline": "assert(pExpr->x.pList->nExpr > 0);"
    },
    {
        "line": 660,
        "fullcodeline": "pEList = pExpr->x.pList;"
    },
    {
        "line": 661,
        "fullcodeline": "aListelem = pEList->a;"
    },
    {
        "line": 662,
        "fullcodeline": "nExpr = pEList->nExpr;"
    },
    {
        "line": 663,
        "fullcodeline": "endLabel = sqlite3VdbeMakeLabel(pParse);"
    },
    {
        "line": 703,
        "fullcodeline": "sqlite3ExprDelete(db, pDel);"
    },
    {
        "line": 704,
        "fullcodeline": "sqlite3VdbeResolveLabel(v, endLabel);"
    },
    {
        "line": 709,
        "fullcodeline": "assert( pExpr->affExpr==OE_Rollback"
    },
    {
        "line": 722,
        "fullcodeline": "assert( !ExprHasProperty(pExpr, EP_IntValue) );"
    },
    {
        "line": 27,
        "fullcodeline": "if( !pAggInfo->directMode ){"
    },
    {
        "line": 39,
        "fullcodeline": "if( ExprHasProperty(pExpr, EP_FixedCol) ){"
    },
    {
        "line": 61,
        "fullcodeline": "if( iTab<0 ){"
    },
    {
        "line": 110,
        "fullcodeline": "return sqlite3ExprCodeGetColumn(pParse, pExpr->y.pTab,"
    },
    {
        "line": 159,
        "fullcodeline": "if( pExpr->u.zToken[1]!=0 ){"
    },
    {
        "line": 174,
        "fullcodeline": "if( inReg!=target ){"
    },
    {
        "line": 179,
        "fullcodeline": "sqlite3AffinityType(pExpr->u.zToken, 0));"
    },
    {
        "line": 195,
        "fullcodeline": "if( sqlite3ExprIsVector(pLeft) ){"
    },
    {
        "line": 247,
        "fullcodeline": "if( pLeft->op==TK_INTEGER ){"
    },
    {
        "line": 305,
        "fullcodeline": "if( pInfo==0 ){"
    },
    {
        "line": 325,
        "fullcodeline": "if( ExprHasProperty(pExpr, EP_WinFunc) ){"
    },
    {
        "line": 330,
        "fullcodeline": "if( ConstFactorOk(pParse) && sqlite3ExprIsConstantNotJoin(pExpr) ){"
    },
    {
        "line": 336,
        "fullcodeline": "if( ExprHasProperty(pExpr, EP_TokenOnly) ){"
    },
    {
        "line": 350,
        "fullcodeline": "if( pDef==0 || pDef->xFinalize!=0 ){"
    },
    {
        "line": 359,
        "fullcodeline": "if( pDef->funcFlags & SQLITE_FUNC_COALESCE ){"
    },
    {
        "line": 375,
        "fullcodeline": "if( pDef->funcFlags & SQLITE_FUNC_UNLIKELY ){"
    },
    {
        "line": 396,
        "fullcodeline": "for(i=0; i<nFarg; i++){"
    },
    {
        "line": 450,
        "fullcodeline": "if( nFarg>=2 && ExprHasProperty(pExpr, EP_InfixFunc) ){"
    },
    {
        "line": 456,
        "fullcodeline": "if( pDef->funcFlags & SQLITE_FUNC_NEEDCOLL ){"
    },
    {
        "line": 471,
        "fullcodeline": "sqlite3VdbeAddFunctionCall(pParse, constMask, r1, target, nFarg,"
    },
    {
        "line": 474,
        "fullcodeline": "if( nFarg && constMask==0 ){"
    },
    {
        "line": 485,
        "fullcodeline": "if( op==TK_SELECT && (nCol = pExpr->x.pSelect->pEList->nExpr)!=1 ){"
    },
    {
        "line": 494,
        "fullcodeline": "if( pExpr->pLeft->iTable==0 ){"
    },
    {
        "line": 498,
        "fullcodeline": "if( pExpr->iTable!=0"
    },
    {
        "line": 504,
        "fullcodeline": "return pExpr->pLeft->iTable + pExpr->iColumn;"
    },
    {
        "line": 590,
        "fullcodeline": "if( iCol>=0 && pTab->aCol[iCol].affinity==SQLITE_AFF_REAL ){"
    },
    {
        "line": 664,
        "fullcodeline": "if( (pX = pExpr->pLeft)!=0 ){"
    },
    {
        "line": 683,
        "fullcodeline": "for(i=0; i<nExpr-1; i=i+2){"
    },
    {
        "line": 698,
        "fullcodeline": "if( (nExpr&1)!=0 ){"
    },
    {
        "line": 714,
        "fullcodeline": "if( !pParse->pTriggerTab ){"
    },
    {
        "line": 719,
        "fullcodeline": "if( pExpr->affExpr==OE_Abort ){"
    },
    {
        "line": 723,
        "fullcodeline": "if( pExpr->affExpr==OE_Ignore ){"
    },
    {
        "line": 28,
        "fullcodeline": "assert( pCol->iMem>0 );"
    },
    {
        "line": 46,
        "fullcodeline": "int iReg = sqlite3ExprCodeTarget(pParse, pExpr->pLeft,target);"
    },
    {
        "line": 47,
        "fullcodeline": "int aff = sqlite3TableColumnAffinity(pExpr->y.pTab, pExpr->iColumn);"
    },
    {
        "line": 160,
        "fullcodeline": "const char *z = sqlite3VListNumToName(pParse->pVList, pExpr->iColumn);"
    },
    {
        "line": 161,
        "fullcodeline": "assert( pExpr->u.zToken[0]=='?' || strcmp(pExpr->u.zToken, z)==0 );"
    },
    {
        "line": 162,
        "fullcodeline": "pParse->pVList[0] = 0; /* Indicate VList may no longer be enlarged */"
    },
    {
        "line": 163,
        "fullcodeline": "sqlite3VdbeAppendP4(v, (char*)z, P4_STATIC);"
    },
    {
        "line": 175,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_SCopy, inReg, target);"
    },
    {
        "line": 176,
        "fullcodeline": "inReg = target;"
    },
    {
        "line": 196,
        "fullcodeline": "codeVectorCompare(pParse, pExpr, target, op, p5);"
    },
    {
        "line": 248,
        "fullcodeline": "codeInteger(pParse, pLeft, 1, target);"
    },
    {
        "line": 306,
        "fullcodeline": "assert( !ExprHasProperty(pExpr, EP_IntValue) );"
    },
    {
        "line": 307,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"misuse of aggregate: %s()\", pExpr->u.zToken);"
    },
    {
        "line": 337,
        "fullcodeline": "pFarg = 0;"
    },
    {
        "line": 351,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"unknown function: %s()\", zId);"
    },
    {
        "line": 360,
        "fullcodeline": "int endCoalesce = sqlite3VdbeMakeLabel(pParse);"
    },
    {
        "line": 361,
        "fullcodeline": "assert( nFarg>=2 );"
    },
    {
        "line": 362,
        "fullcodeline": "sqlite3ExprCode(pParse, pFarg->a[0].pExpr, target);"
    },
    {
        "line": 368,
        "fullcodeline": "sqlite3VdbeResolveLabel(v, endCoalesce);"
    },
    {
        "line": 376,
        "fullcodeline": "assert( nFarg>=1 );"
    },
    {
        "line": 432,
        "fullcodeline": "sqlite3ExprCodeExprList(pParse, pFarg, r1, 0,"
    },
    {
        "line": 451,
        "fullcodeline": "pDef = sqlite3VtabOverloadFunction(db, pDef, nFarg, pFarg->a[1].pExpr);"
    },
    {
        "line": 458,
        "fullcodeline": "sqlite3VdbeAddOp4(v, OP_CollSeq, 0, 0, 0, (char *)pColl, P4_COLLSEQ);"
    },
    {
        "line": 475,
        "fullcodeline": "sqlite3ReleaseTempRange(pParse, r1, nFarg);"
    },
    {
        "line": 486,
        "fullcodeline": "sqlite3SubselectError(pParse, nCol, 1);"
    },
    {
        "line": 495,
        "fullcodeline": "pExpr->pLeft->iTable = sqlite3CodeSubselect(pParse, pExpr->pLeft);"
    },
    {
        "line": 499,
        "fullcodeline": "&& pExpr->iTable!=(n = sqlite3ExprVectorSize(pExpr->pLeft))"
    },
    {
        "line": 501,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"%d columns assigned %d values\","
    },
    {
        "line": 571,
        "fullcodeline": "+ (iCol>=0 ? sqlite3TableColumnToStorage(pTab, iCol) : -1);"
    },
    {
        "line": 591,
        "fullcodeline": "sqlite3VdbeAddOp1(v, OP_RealAffinity, target);"
    },
    {
        "line": 665,
        "fullcodeline": "pDel = sqlite3ExprDup(db, pX, 0);"
    },
    {
        "line": 670,
        "fullcodeline": "testcase( pX->op==TK_COLUMN );"
    },
    {
        "line": 671,
        "fullcodeline": "exprToRegister(pDel, exprCodeVector(pParse, pDel, &regFree1));"
    },
    {
        "line": 672,
        "fullcodeline": "testcase( regFree1==0 );"
    },
    {
        "line": 673,
        "fullcodeline": "memset(&opCompare, 0, sizeof(opCompare));"
    },
    {
        "line": 674,
        "fullcodeline": "opCompare.op = TK_EQ;"
    },
    {
        "line": 675,
        "fullcodeline": "opCompare.pLeft = pDel;"
    },
    {
        "line": 676,
        "fullcodeline": "pTest = &opCompare;"
    },
    {
        "line": 681,
        "fullcodeline": "regFree1 = 0;"
    },
    {
        "line": 690,
        "fullcodeline": "nextCase = sqlite3VdbeMakeLabel(pParse);"
    },
    {
        "line": 691,
        "fullcodeline": "testcase( pTest->op==TK_COLUMN );"
    },
    {
        "line": 692,
        "fullcodeline": "sqlite3ExprIfFalse(pParse, pTest, nextCase, SQLITE_JUMPIFNULL);"
    },
    {
        "line": 693,
        "fullcodeline": "testcase( aListelem[i+1].pExpr->op==TK_COLUMN );"
    },
    {
        "line": 694,
        "fullcodeline": "sqlite3ExprCode(pParse, aListelem[i+1].pExpr, target);"
    },
    {
        "line": 695,
        "fullcodeline": "sqlite3VdbeGoto(v, endLabel);"
    },
    {
        "line": 696,
        "fullcodeline": "sqlite3VdbeResolveLabel(v, nextCase);"
    },
    {
        "line": 699,
        "fullcodeline": "sqlite3ExprCode(pParse, pEList->a[nExpr-1].pExpr, target);"
    },
    {
        "line": 712,
        "fullcodeline": "|| pExpr->affExpr==OE_Ignore"
    },
    {
        "line": 715,
        "fullcodeline": "sqlite3ErrorMsg(pParse,"
    },
    {
        "line": 720,
        "fullcodeline": "sqlite3MayAbort(pParse);"
    },
    {
        "line": 724,
        "fullcodeline": "sqlite3VdbeAddOp4("
    },
    {
        "line": 726,
        "fullcodeline": "VdbeCoverage(v);"
    },
    {
        "line": 48,
        "fullcodeline": "if( aff>SQLITE_AFF_BLOB ){"
    },
    {
        "line": 62,
        "fullcodeline": "if( pParse->iSelfTab<0 ){"
    },
    {
        "line": 198,
        "fullcodeline": "r1 = sqlite3ExprCodeTemp(pParse, pLeft, &regFree1);"
    },
    {
        "line": 199,
        "fullcodeline": "r2 = sqlite3ExprCodeTemp(pParse, pExpr->pRight, &regFree2);"
    },
    {
        "line": 200,
        "fullcodeline": "codeCompare(pParse, pLeft, pExpr->pRight, op,"
    },
    {
        "line": 203,
        "fullcodeline": "assert(TK_LT==OP_Lt); testcase(op==OP_Lt); VdbeCoverageIf(v,op==OP_Lt);"
    },
    {
        "line": 204,
        "fullcodeline": "assert(TK_LE==OP_Le); testcase(op==OP_Le); VdbeCoverageIf(v,op==OP_Le);"
    },
    {
        "line": 205,
        "fullcodeline": "assert(TK_GT==OP_Gt); testcase(op==OP_Gt); VdbeCoverageIf(v,op==OP_Gt);"
    },
    {
        "line": 206,
        "fullcodeline": "assert(TK_GE==OP_Ge); testcase(op==OP_Ge); VdbeCoverageIf(v,op==OP_Ge);"
    },
    {
        "line": 207,
        "fullcodeline": "assert(TK_EQ==OP_Eq); testcase(op==OP_Eq); VdbeCoverageIf(v,op==OP_Eq);"
    },
    {
        "line": 208,
        "fullcodeline": "assert(TK_NE==OP_Ne); testcase(op==OP_Ne); VdbeCoverageIf(v,op==OP_Ne);"
    },
    {
        "line": 209,
        "fullcodeline": "testcase( regFree1==0 );"
    },
    {
        "line": 210,
        "fullcodeline": "testcase( regFree2==0 );"
    },
    {
        "line": 333,
        "fullcodeline": "return sqlite3ExprCodeAtInit(pParse, pExpr, -1);"
    },
    {
        "line": 363,
        "fullcodeline": "for(i=1; i<nFarg; i++){"
    },
    {
        "line": 377,
        "fullcodeline": "return sqlite3ExprCodeTarget(pParse, pFarg->a[0].pExpr, target);"
    },
    {
        "line": 397,
        "fullcodeline": "if( i<32 && sqlite3ExprIsConstant(pFarg->a[i].pExpr) ){"
    },
    {
        "line": 401,
        "fullcodeline": "if( (pDef->funcFlags & SQLITE_FUNC_NEEDCOLL)!=0 && !pColl ){"
    },
    {
        "line": 418,
        "fullcodeline": "if( (pDef->funcFlags & (SQLITE_FUNC_LENGTH|SQLITE_FUNC_TYPEOF))!=0 ){"
    },
    {
        "line": 433,
        "fullcodeline": "SQLITE_ECEL_DUP|SQLITE_ECEL_FACTOR);"
    },
    {
        "line": 435,
        "fullcodeline": "r1 = 0;"
    },
    {
        "line": 457,
        "fullcodeline": "if( !pColl ) pColl = db->pDfltColl;"
    },
    {
        "line": 580,
        "fullcodeline": "(pExpr->iTable ? \"new\" : \"old\"),"
    },
    {
        "line": 581,
        "fullcodeline": "(pExpr->iColumn<0 ? \"rowid\" : pExpr->y.pTab->aCol[iCol].zName)"
    },
    {
        "line": 701,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_Null, 0, target);"
    },
    {
        "line": 711,
        "fullcodeline": "|| pExpr->affExpr==OE_Fail"
    },
    {
        "line": 728,
        "fullcodeline": "sqlite3HaltConstraint(pParse, SQLITE_CONSTRAINT_TRIGGER,"
    },
    {
        "line": 49,
        "fullcodeline": "static const char zAff[] = \"B\\000C\\000D\\000E\";"
    },
    {
        "line": 50,
        "fullcodeline": "assert( SQLITE_AFF_BLOB=='A' );"
    },
    {
        "line": 51,
        "fullcodeline": "assert( SQLITE_AFF_TEXT=='B' );"
    },
    {
        "line": 56,
        "fullcodeline": "sqlite3VdbeAddOp4(v, OP_Affinity, iReg, 1, 0,"
    },
    {
        "line": 72,
        "fullcodeline": "int iCol = pExpr->iColumn;"
    },
    {
        "line": 73,
        "fullcodeline": "assert( pTab!=0 );"
    },
    {
        "line": 74,
        "fullcodeline": "assert( iCol>=XN_ROWID );"
    },
    {
        "line": 75,
        "fullcodeline": "assert( iCol<pExpr->y.pTab->nCol );"
    },
    {
        "line": 79,
        "fullcodeline": "pCol = pTab->aCol + iCol;"
    },
    {
        "line": 80,
        "fullcodeline": "testcase( iCol!=sqlite3TableColumnToStorage(pTab,iCol) );"
    },
    {
        "line": 81,
        "fullcodeline": "iSrc = sqlite3TableColumnToStorage(pTab, iCol) - pParse->iSelfTab;"
    },
    {
        "line": 201,
        "fullcodeline": "r1, r2, inReg, SQLITE_STOREP2 | p5,"
    },
    {
        "line": 202,
        "fullcodeline": "ExprHasProperty(pExpr,EP_Commuted));"
    },
    {
        "line": 251,
        "fullcodeline": "}else if( pLeft->op==TK_FLOAT ){"
    },
    {
        "line": 364,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_NotNull, target, endCoalesce);"
    },
    {
        "line": 365,
        "fullcodeline": "VdbeCoverage(v);"
    },
    {
        "line": 366,
        "fullcodeline": "sqlite3ExprCode(pParse, pFarg->a[i].pExpr, target);"
    },
    {
        "line": 398,
        "fullcodeline": "testcase( i==31 );"
    },
    {
        "line": 399,
        "fullcodeline": "constMask |= MASKBIT32(i);"
    },
    {
        "line": 402,
        "fullcodeline": "pColl = sqlite3ExprCollSeq(pParse, pFarg->a[i].pExpr);"
    },
    {
        "line": 407,
        "fullcodeline": "r1 = pParse->nMem+1;"
    },
    {
        "line": 408,
        "fullcodeline": "pParse->nMem += nFarg;"
    },
    {
        "line": 420,
        "fullcodeline": "assert( nFarg==1 );"
    },
    {
        "line": 421,
        "fullcodeline": "assert( pFarg->a[0].pExpr!=0 );"
    },
    {
        "line": 452,
        "fullcodeline": "}else if( nFarg>0 ){"
    },
    {
        "line": 488,
        "fullcodeline": "return sqlite3CodeSubselect(pParse, pExpr);"
    },
    {
        "line": 667,
        "fullcodeline": "sqlite3ExprDelete(db, pDel);"
    },
    {
        "line": 685,
        "fullcodeline": "assert( pTest!=0 );"
    },
    {
        "line": 710,
        "fullcodeline": "|| pExpr->affExpr==OE_Abort"
    },
    {
        "line": 31,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_Column, pAggInfo->sortingIdxPTab,"
    },
    {
        "line": 52,
        "fullcodeline": "if( iReg!=target ){"
    },
    {
        "line": 76,
        "fullcodeline": "if( iCol<0 ){"
    },
    {
        "line": 83,
        "fullcodeline": "if( pCol->colFlags & COLFLAG_GENERATED ){"
    },
    {
        "line": 107,
        "fullcodeline": "iTab = pParse->iSelfTab - 1;"
    },
    {
        "line": 252,
        "fullcodeline": "assert( !ExprHasProperty(pExpr, EP_IntValue) );"
    },
    {
        "line": 253,
        "fullcodeline": "codeReal(v, pLeft->u.zToken, 1, target);"
    },
    {
        "line": 410,
        "fullcodeline": "r1 = sqlite3GetTempRange(pParse, nFarg);"
    },
    {
        "line": 423,
        "fullcodeline": "if( exprOp==TK_COLUMN || exprOp==TK_AGG_COLUMN ){"
    },
    {
        "line": 453,
        "fullcodeline": "pDef = sqlite3VtabOverloadFunction(db, pDef, nFarg, pFarg->a[0].pExpr);"
    },
    {
        "line": 53,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_SCopy, iReg, target);"
    },
    {
        "line": 54,
        "fullcodeline": "iReg = target;"
    },
    {
        "line": 89,
        "fullcodeline": "pCol->colFlags |= COLFLAG_BUSY;"
    },
    {
        "line": 93,
        "fullcodeline": "pCol->colFlags &= ~(COLFLAG_BUSY|COLFLAG_NOTAVAIL);"
    },
    {
        "line": 257,
        "fullcodeline": "tempX.op = TK_INTEGER;"
    },
    {
        "line": 258,
        "fullcodeline": "tempX.flags = EP_IntValue|EP_TokenOnly;"
    },
    {
        "line": 259,
        "fullcodeline": "tempX.u.iValue = 0;"
    },
    {
        "line": 260,
        "fullcodeline": "r1 = sqlite3ExprCodeTemp(pParse, &tempX, &regFree1);"
    },
    {
        "line": 261,
        "fullcodeline": "r2 = sqlite3ExprCodeTemp(pParse, pExpr->pLeft, &regFree2);"
    },
    {
        "line": 262,
        "fullcodeline": "sqlite3VdbeAddOp3(v, OP_Subtract, r2, r1, target);"
    },
    {
        "line": 263,
        "fullcodeline": "testcase( regFree2==0 );"
    },
    {
        "line": 424,
        "fullcodeline": "assert( SQLITE_FUNC_LENGTH==OPFLAG_LENGTHARG );"
    },
    {
        "line": 425,
        "fullcodeline": "assert( SQLITE_FUNC_TYPEOF==OPFLAG_TYPEOFARG );"
    },
    {
        "line": 426,
        "fullcodeline": "testcase( pDef->funcFlags & OPFLAG_LENGTHARG );"
    },
    {
        "line": 427,
        "fullcodeline": "pFarg->a[0].pExpr->op2 ="
    },
    {
        "line": 57,
        "fullcodeline": "&zAff[(aff-'B')*2], P4_STATIC);"
    },
    {
        "line": 77,
        "fullcodeline": "return -1-pParse->iSelfTab;"
    },
    {
        "line": 84,
        "fullcodeline": "if( pCol->colFlags & COLFLAG_BUSY ){"
    },
    {
        "line": 90,
        "fullcodeline": "if( pCol->colFlags & COLFLAG_NOTAVAIL ){"
    },
    {
        "line": 428,
        "fullcodeline": "pDef->funcFlags & (OPFLAG_LENGTHARG|OPFLAG_TYPEOFARG);"
    },
    {
        "line": 85,
        "fullcodeline": "sqlite3ErrorMsg(pParse, \"generated column loop on \\\"%s\\\"\","
    },
    {
        "line": 91,
        "fullcodeline": "sqlite3ExprCodeGeneratedColumn(pParse, pCol, iSrc);"
    },
    {
        "line": 97,
        "fullcodeline": "if( pCol->affinity==SQLITE_AFF_REAL ){"
    },
    {
        "line": 98,
        "fullcodeline": "sqlite3VdbeAddOp2(v, OP_SCopy, iSrc, target);"
    },
    {
        "line": 99,
        "fullcodeline": "sqlite3VdbeAddOp1(v, OP_RealAffinity, target);"
    }
]