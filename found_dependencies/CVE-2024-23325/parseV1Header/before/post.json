[
    {
        "line": 3,
        "fullcodeline": "proxy_line.assign(buf, len);"
    },
    {
        "line": 4,
        "fullcodeline": "const auto trimmed_proxy_line = StringUtil::rtrim(proxy_line);"
    },
    {
        "line": 8,
        "fullcodeline": "const auto line_parts = StringUtil::splitToken(trimmed_proxy_line, \" \", true);"
    },
    {
        "line": 59,
        "fullcodeline": "proxy_protocol_header_.emplace(WireHeader{len, 0, 0, 0});"
    },
    {
        "line": 9,
        "fullcodeline": "if (line_parts.size() < 2 || line_parts[0] != \"PROXY\") {"
    },
    {
        "line": 17,
        "fullcodeline": "if (line_parts[1] != \"UNKNOWN\") {"
    },
    {
        "line": 10,
        "fullcodeline": "ENVOY_LOG(debug, \"failed to read proxy protocol\");"
    },
    {
        "line": 19,
        "fullcodeline": "if (line_parts.size() != 6) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (line_parts[1] == \"TCP4\") {"
    },
    {
        "line": 20,
        "fullcodeline": "ENVOY_LOG(debug, \"failed to read proxy protocol\");"
    },
    {
        "line": 27,
        "fullcodeline": "const Network::Address::InstanceConstSharedPtr remote_address ="
    },
    {
        "line": 30,
        "fullcodeline": "const Network::Address::InstanceConstSharedPtr local_address ="
    },
    {
        "line": 37,
        "fullcodeline": "proxy_protocol_header_.emplace("
    },
    {
        "line": 28,
        "fullcodeline": "Network::Utility::parseInternetAddressAndPortNoThrow(std::string{line_parts[2]} + \":\" +"
    },
    {
        "line": 31,
        "fullcodeline": "Network::Utility::parseInternetAddressAndPortNoThrow(std::string{line_parts[3]} + \":\" +"
    },
    {
        "line": 34,
        "fullcodeline": "if (remote_address == nullptr || local_address == nullptr) {"
    },
    {
        "line": 38,
        "fullcodeline": "WireHeader{len, 0, 0, 0, Network::Address::IpVersion::v4, remote_address, local_address});"
    },
    {
        "line": 40,
        "fullcodeline": "} else if (line_parts[1] == \"TCP6\") {"
    },
    {
        "line": 29,
        "fullcodeline": "std::string{line_parts[4]});"
    },
    {
        "line": 32,
        "fullcodeline": "std::string{line_parts[5]});"
    },
    {
        "line": 41,
        "fullcodeline": "const Network::Address::InstanceConstSharedPtr remote_address ="
    },
    {
        "line": 44,
        "fullcodeline": "const Network::Address::InstanceConstSharedPtr local_address ="
    },
    {
        "line": 51,
        "fullcodeline": "proxy_protocol_header_.emplace("
    },
    {
        "line": 42,
        "fullcodeline": "Network::Utility::parseInternetAddressAndPortNoThrow(\"[\" + std::string{line_parts[2]} +"
    },
    {
        "line": 45,
        "fullcodeline": "Network::Utility::parseInternetAddressAndPortNoThrow(\"[\" + std::string{line_parts[3]} +"
    },
    {
        "line": 48,
        "fullcodeline": "if (remote_address == nullptr || local_address == nullptr) {"
    },
    {
        "line": 52,
        "fullcodeline": "WireHeader{len, 0, 0, 0, Network::Address::IpVersion::v6, remote_address, local_address});"
    },
    {
        "line": 55,
        "fullcodeline": "ENVOY_LOG(debug, \"failed to read proxy protocol\");"
    },
    {
        "line": 43,
        "fullcodeline": "\"]:\" + std::string{line_parts[4]});"
    },
    {
        "line": 46,
        "fullcodeline": "\"]:\" + std::string{line_parts[5]});"
    }
]