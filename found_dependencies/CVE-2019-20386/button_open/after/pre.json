[
    {
        "line": 2,
        "fullcodeline": "char *p, name[256];"
    },
    {
        "line": 5,
        "fullcodeline": "assert(b);"
    },
    {
        "line": 7,
        "fullcodeline": "b->fd = safe_close(b->fd);"
    },
    {
        "line": 9,
        "fullcodeline": "p = strjoina(\"/dev/input/\", b->name);"
    },
    {
        "line": 11,
        "fullcodeline": "b->fd = open(p, O_RDWR|O_CLOEXEC|O_NOCTTY|O_NONBLOCK);"
    },
    {
        "line": 15,
        "fullcodeline": "r = button_suitable(b);"
    },
    {
        "line": 30,
        "fullcodeline": "b->io_event_source = sd_event_source_unref(b->io_event_source);"
    },
    {
        "line": 31,
        "fullcodeline": "r = sd_event_add_io(b->manager->event, &b->io_event_source, b->fd, EPOLLIN, button_dispatch, b);"
    },
    {
        "line": 12,
        "fullcodeline": "if (b->fd < 0)"
    },
    {
        "line": 16,
        "fullcodeline": "if (r < 0)"
    },
    {
        "line": 28,
        "fullcodeline": "(void) button_set_mask(b);"
    },
    {
        "line": 32,
        "fullcodeline": "if (r < 0) {"
    },
    {
        "line": 42,
        "fullcodeline": "b->fd = safe_close(b->fd);"
    },
    {
        "line": 23,
        "fullcodeline": "if (ioctl(b->fd, EVIOCGNAME(sizeof(name)), name) < 0) {"
    },
    {
        "line": 24,
        "fullcodeline": "r = log_error_errno(errno, \"Failed to get input name: %m\");"
    },
    {
        "line": 33,
        "fullcodeline": "log_error_errno(r, \"Failed to add button event: %m\");"
    },
    {
        "line": 13,
        "fullcodeline": "return log_warning_errno(errno, \"Failed to open %s: %m\", p);"
    },
    {
        "line": 17,
        "fullcodeline": "return log_warning_errno(r, \"Failed to determine whether input device is relevant to us: %m\");"
    },
    {
        "line": 19,
        "fullcodeline": "return log_debug_errno(SYNTHETIC_ERRNO(EADDRNOTAVAIL),"
    }
]