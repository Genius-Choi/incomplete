[
    {
        "line": 11,
        "fullcodeline": "chunks = []"
    },
    {
        "line": 12,
        "fullcodeline": "_append = chunks.append"
    },
    {
        "line": 13,
        "fullcodeline": "begin = end - 1"
    },
    {
        "line": 10,
        "fullcodeline": "if encoding is None: encoding = DEFAULT_ENCODING"
    },
    {
        "line": 81,
        "fullcodeline": "return u''.join(chunks), end"
    },
    {
        "line": 16,
        "fullcodeline": "chunk = _m(s, end)"
    },
    {
        "line": 21,
        "fullcodeline": "end = chunk.end()"
    },
    {
        "line": 79,
        "fullcodeline": "_append(char)"
    },
    {
        "line": 17,
        "fullcodeline": "if chunk is None:"
    },
    {
        "line": 22,
        "fullcodeline": "content, terminator = chunk.groups()"
    },
    {
        "line": 32,
        "fullcodeline": "if terminator == '\"': break"
    },
    {
        "line": 47,
        "fullcodeline": "if esc != 'u' and esc != 'x':"
    },
    {
        "line": 18,
        "fullcodeline": "raise ValueError("
    },
    {
        "line": 28,
        "fullcodeline": "_append(content)"
    },
    {
        "line": 42,
        "fullcodeline": "esc = s[end]"
    },
    {
        "line": 53,
        "fullcodeline": "end += 1"
    },
    {
        "line": 26,
        "fullcodeline": "if not isinstance(content, unicode):"
    },
    {
        "line": 33,
        "fullcodeline": "elif terminator != '\\\\':"
    },
    {
        "line": 55,
        "fullcodeline": "elif esc == 'x':"
    },
    {
        "line": 19,
        "fullcodeline": "errmsg(\"Unterminated string starting at\", s, begin))"
    },
    {
        "line": 27,
        "fullcodeline": "content = unicode(content, encoding)"
    },
    {
        "line": 44,
        "fullcodeline": "raise ValueError(errmsg(\"Unterminated string starting at\", s, begin))"
    },
    {
        "line": 49,
        "fullcodeline": "char = _b[esc]"
    },
    {
        "line": 63,
        "fullcodeline": "end += 3"
    },
    {
        "line": 67,
        "fullcodeline": "uni = _decode_uXXXX(s, end)"
    },
    {
        "line": 68,
        "fullcodeline": "end += 5"
    },
    {
        "line": 76,
        "fullcodeline": "char = unichr(uni)"
    },
    {
        "line": 70,
        "fullcodeline": "if sys.maxunicode > 65535 and \\"
    },
    {
        "line": 35,
        "fullcodeline": "msg = \"Invalid control character {0!r} at\".format(terminator)"
    },
    {
        "line": 36,
        "fullcodeline": "raise ValueError(errmsg(msg, s, end))"
    },
    {
        "line": 38,
        "fullcodeline": "_append(terminator)"
    },
    {
        "line": 51,
        "fullcodeline": "msg = \"Invalid \\\\escape: \" + repr(esc)"
    },
    {
        "line": 52,
        "fullcodeline": "raise ValueError(errmsg(msg, s, end))"
    },
    {
        "line": 58,
        "fullcodeline": "code = s[end + 1: end + 3]"
    },
    {
        "line": 59,
        "fullcodeline": "char = code.decode('hex')"
    },
    {
        "line": 72,
        "fullcodeline": "uni2 = _decode_uXXXX(s, end + 1)"
    },
    {
        "line": 71,
        "fullcodeline": "0xd800 <= uni <= 0xdbff and s[end:end + 2] == '\\\\u':"
    },
    {
        "line": 61,
        "fullcodeline": "raise ValueError(errmsg('Invalid \\\\escape: ' + repr(code), s, end))"
    },
    {
        "line": 73,
        "fullcodeline": "if 0xdc00 <= uni2 <= 0xdfff:"
    },
    {
        "line": 74,
        "fullcodeline": "uni = 0x10000 + (((uni - 0xd800) << 10) | (uni2 - 0xdc00))"
    },
    {
        "line": 75,
        "fullcodeline": "end += 6"
    }
]