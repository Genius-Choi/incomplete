[
    {
        "line": 5,
        "fullcodeline": "Status status = ctx->input(\"inputs\", inputs);"
    },
    {
        "line": 7,
        "fullcodeline": "status = ctx->input(\"sequence_length\", seq_len);"
    },
    {
        "line": 10,
        "fullcodeline": "const TensorShape& inputs_shape = (*inputs)->shape();"
    },
    {
        "line": 16,
        "fullcodeline": "const int64 max_time = inputs_shape.dim_size(0);"
    },
    {
        "line": 17,
        "fullcodeline": "const int64 batch_size = inputs_shape.dim_size(1);"
    },
    {
        "line": 33,
        "fullcodeline": "auto seq_len_t = (*seq_len)->vec<int32>();"
    },
    {
        "line": 42,
        "fullcodeline": "Status s = ctx->allocate_output("
    },
    {
        "line": 46,
        "fullcodeline": "s = ctx->output_list(\"decoded_indices\", decoded_indices);"
    },
    {
        "line": 48,
        "fullcodeline": "s = ctx->output_list(\"decoded_values\", decoded_values);"
    },
    {
        "line": 50,
        "fullcodeline": "s = ctx->output_list(\"decoded_shape\", decoded_shape);"
    },
    {
        "line": 6,
        "fullcodeline": "if (!status.ok()) return status;"
    },
    {
        "line": 8,
        "fullcodeline": "if (!status.ok()) return status;"
    },
    {
        "line": 12,
        "fullcodeline": "if (inputs_shape.dims() != 3) {"
    },
    {
        "line": 19,
        "fullcodeline": "if (max_time == 0) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (!TensorShapeUtils::IsVector((*seq_len)->shape())) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (!(batch_size == (*seq_len)->dim_size(0))) {"
    },
    {
        "line": 35,
        "fullcodeline": "for (int b = 0; b < batch_size; ++b) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (!s.ok()) return s;"
    },
    {
        "line": 47,
        "fullcodeline": "if (!s.ok()) return s;"
    },
    {
        "line": 49,
        "fullcodeline": "if (!s.ok()) return s;"
    },
    {
        "line": 51,
        "fullcodeline": "if (!s.ok()) return s;"
    },
    {
        "line": 53,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 43,
        "fullcodeline": "\"log_probability\", TensorShape({batch_size, top_paths_}), log_prob);"
    },
    {
        "line": 13,
        "fullcodeline": "return errors::InvalidArgument(\"inputs is not a 3-Tensor\");"
    },
    {
        "line": 20,
        "fullcodeline": "return errors::InvalidArgument(\"max_time is 0\");"
    },
    {
        "line": 23,
        "fullcodeline": "return errors::InvalidArgument(\"sequence_length is not a vector\");"
    },
    {
        "line": 27,
        "fullcodeline": "return errors::FailedPrecondition("
    },
    {
        "line": 36,
        "fullcodeline": "if (!(seq_len_t(b) <= max_time)) {"
    },
    {
        "line": 29,
        "fullcodeline": "\"len(sequence_length):  \", (*seq_len)->dim_size(0),"
    },
    {
        "line": 37,
        "fullcodeline": "return errors::FailedPrecondition(\"sequence_length(\", b,"
    }
]