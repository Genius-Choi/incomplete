[
    {
        "line": 5,
        "fullcodeline": "struct v4l2loopback_private *vdev_priv = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "int err = -ENOMEM;"
    },
    {
        "line": 13,
        "fullcodeline": "bool _announce_all_caps = (conf && conf->announce_all_caps >= 0) ?"
    },
    {
        "line": 19,
        "fullcodeline": "int nr = -1;"
    },
    {
        "line": 21,
        "fullcodeline": "_announce_all_caps = (!!_announce_all_caps);"
    },
    {
        "line": 46,
        "fullcodeline": "dprintk(\"creating v4l2loopback-device #%d\\n\", nr);"
    },
    {
        "line": 47,
        "fullcodeline": "dev = kzalloc(sizeof(*dev), GFP_KERNEL);"
    },
    {
        "line": 62,
        "fullcodeline": "nr = err;"
    },
    {
        "line": 63,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 72,
        "fullcodeline": "snprintf(dev->v4l2_dev.name, sizeof(dev->v4l2_dev.name),"
    },
    {
        "line": 75,
        "fullcodeline": "err = v4l2_device_register(NULL, &dev->v4l2_dev);"
    },
    {
        "line": 78,
        "fullcodeline": "MARK();"
    },
    {
        "line": 80,
        "fullcodeline": "dev->vdev = video_device_alloc();"
    },
    {
        "line": 86,
        "fullcodeline": "vdev_priv = kzalloc(sizeof(struct v4l2loopback_private), GFP_KERNEL);"
    },
    {
        "line": 92,
        "fullcodeline": "video_set_drvdata(dev->vdev, vdev_priv);"
    },
    {
        "line": 98,
        "fullcodeline": "MARK();"
    },
    {
        "line": 99,
        "fullcodeline": "snprintf(dev->vdev->name, sizeof(dev->vdev->name), \"%s\", dev->card_label);"
    },
    {
        "line": 101,
        "fullcodeline": "vdev_priv->device_nr = nr;"
    },
    {
        "line": 103,
        "fullcodeline": "init_vdev(dev->vdev, nr);"
    },
    {
        "line": 104,
        "fullcodeline": "dev->vdev->v4l2_dev = &dev->v4l2_dev;"
    },
    {
        "line": 105,
        "fullcodeline": "init_capture_param(&dev->capture_param);"
    },
    {
        "line": 106,
        "fullcodeline": "err = set_timeperframe(dev, &dev->capture_param.timeperframe);"
    },
    {
        "line": 109,
        "fullcodeline": "dev->keep_format = 0;"
    },
    {
        "line": 110,
        "fullcodeline": "dev->sustain_framerate = 0;"
    },
    {
        "line": 112,
        "fullcodeline": "dev->announce_all_caps = _announce_all_caps;"
    },
    {
        "line": 113,
        "fullcodeline": "dev->max_width = _max_width;"
    },
    {
        "line": 114,
        "fullcodeline": "dev->max_height = _max_height;"
    },
    {
        "line": 115,
        "fullcodeline": "dev->max_openers = _max_openers;"
    },
    {
        "line": 116,
        "fullcodeline": "dev->buffers_number = dev->used_buffers = _max_buffers;"
    },
    {
        "line": 118,
        "fullcodeline": "dev->write_position = 0;"
    },
    {
        "line": 120,
        "fullcodeline": "MARK();"
    },
    {
        "line": 121,
        "fullcodeline": "spin_lock_init(&dev->lock);"
    },
    {
        "line": 122,
        "fullcodeline": "INIT_LIST_HEAD(&dev->outbufs_list);"
    },
    {
        "line": 130,
        "fullcodeline": "memset(dev->bufpos2index, 0, sizeof(dev->bufpos2index));"
    },
    {
        "line": 131,
        "fullcodeline": "atomic_set(&dev->open_count, 0);"
    },
    {
        "line": 132,
        "fullcodeline": "dev->ready_for_capture = 0;"
    },
    {
        "line": 133,
        "fullcodeline": "dev->ready_for_output = 1;"
    },
    {
        "line": 135,
        "fullcodeline": "dev->buffer_size = 0;"
    },
    {
        "line": 136,
        "fullcodeline": "dev->image = NULL;"
    },
    {
        "line": 137,
        "fullcodeline": "dev->imagesize = 0;"
    },
    {
        "line": 142,
        "fullcodeline": "setup_timer(&dev->sustain_timer, sustain_timer_clb, nr);"
    },
    {
        "line": 143,
        "fullcodeline": "setup_timer(&dev->timeout_timer, timeout_timer_clb, nr);"
    },
    {
        "line": 145,
        "fullcodeline": "dev->reread_count = 0;"
    },
    {
        "line": 146,
        "fullcodeline": "dev->timeout_jiffies = 0;"
    },
    {
        "line": 147,
        "fullcodeline": "dev->timeout_image = NULL;"
    },
    {
        "line": 148,
        "fullcodeline": "dev->timeout_happened = 0;"
    },
    {
        "line": 150,
        "fullcodeline": "hdl = &dev->ctrl_handler;"
    },
    {
        "line": 151,
        "fullcodeline": "err = v4l2_ctrl_handler_init(hdl, 4);"
    },
    {
        "line": 154,
        "fullcodeline": "v4l2_ctrl_new_custom(hdl, &v4l2loopback_ctrl_keepformat, NULL);"
    },
    {
        "line": 155,
        "fullcodeline": "v4l2_ctrl_new_custom(hdl, &v4l2loopback_ctrl_sustainframerate, NULL);"
    },
    {
        "line": 156,
        "fullcodeline": "v4l2_ctrl_new_custom(hdl, &v4l2loopback_ctrl_timeout, NULL);"
    },
    {
        "line": 157,
        "fullcodeline": "v4l2_ctrl_new_custom(hdl, &v4l2loopback_ctrl_timeoutimageio, NULL);"
    },
    {
        "line": 162,
        "fullcodeline": "dev->v4l2_dev.ctrl_handler = hdl;"
    },
    {
        "line": 164,
        "fullcodeline": "err = v4l2_ctrl_handler_setup(hdl);"
    },
    {
        "line": 171,
        "fullcodeline": "dev->pix_format.width = 0; /* V4L2LOOPBACK_SIZE_DEFAULT_WIDTH; */"
    },
    {
        "line": 172,
        "fullcodeline": "dev->pix_format.height = 0; /* V4L2LOOPBACK_SIZE_DEFAULT_HEIGHT; */"
    },
    {
        "line": 174,
        "fullcodeline": "dev->pix_format.colorspace ="
    },
    {
        "line": 176,
        "fullcodeline": "dev->pix_format.field = V4L2_FIELD_NONE;"
    },
    {
        "line": 178,
        "fullcodeline": "dev->buffer_size = PAGE_ALIGN(dev->pix_format.sizeimage);"
    },
    {
        "line": 179,
        "fullcodeline": "dprintk(\"buffer_size = %ld (=%d)\\n\", dev->buffer_size,"
    },
    {
        "line": 185,
        "fullcodeline": "init_waitqueue_head(&dev->read_event);"
    },
    {
        "line": 194,
        "fullcodeline": "v4l2loopback_create_sysfs(dev->vdev);"
    },
    {
        "line": 196,
        "fullcodeline": "MARK();"
    },
    {
        "line": 202,
        "fullcodeline": "video_device_release(dev->vdev);"
    },
    {
        "line": 204,
        "fullcodeline": "v4l2_ctrl_handler_free(&dev->ctrl_handler);"
    },
    {
        "line": 206,
        "fullcodeline": "video_set_drvdata(dev->vdev, NULL);"
    },
    {
        "line": 209,
        "fullcodeline": "v4l2_device_unregister(&dev->v4l2_dev);"
    },
    {
        "line": 211,
        "fullcodeline": "idr_remove(&v4l2loopback_index_idr, nr);"
    },
    {
        "line": 213,
        "fullcodeline": "kfree(dev);"
    },
    {
        "line": 43,
        "fullcodeline": "if (idr_find(&v4l2loopback_index_idr, nr))"
    },
    {
        "line": 48,
        "fullcodeline": "if (!dev)"
    },
    {
        "line": 52,
        "fullcodeline": "if (nr >= 0) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 65,
        "fullcodeline": "if (conf && conf->card_label && *(conf->card_label)) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (dev->vdev == NULL) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (vdev_priv == NULL) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (video_get_drvdata(dev->vdev) == NULL) {"
    },
    {
        "line": 123,
        "fullcodeline": "if (list_empty(&dev->outbufs_list)) {"
    },
    {
        "line": 182,
        "fullcodeline": "if (dev->buffer_size && ((err = allocate_buffers(dev)) < 0))"
    },
    {
        "line": 188,
        "fullcodeline": "if (video_register_device(dev->vdev, VFL_TYPE_VIDEO, nr) < 0) {"
    },
    {
        "line": 207,
        "fullcodeline": "if (vdev_priv != NULL)"
    },
    {
        "line": 53,
        "fullcodeline": "err = idr_alloc(&v4l2loopback_index_idr, dev, nr, nr + 1,"
    },
    {
        "line": 66,
        "fullcodeline": "snprintf(dev->card_label, sizeof(dev->card_label), \"%s\","
    },
    {
        "line": 82,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 88,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 94,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 159,
        "fullcodeline": "err = hdl->error;"
    },
    {
        "line": 191,
        "fullcodeline": "err = -EFAULT;"
    },
    {
        "line": 208,
        "fullcodeline": "kfree(vdev_priv);"
    },
    {
        "line": 24,
        "fullcodeline": "if (conf->capture_nr >= 0 &&"
    },
    {
        "line": 44,
        "fullcodeline": "return -EEXIST;"
    },
    {
        "line": 49,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 55,
        "fullcodeline": "if (err == -ENOSPC)"
    },
    {
        "line": 58,
        "fullcodeline": "err = idr_alloc(&v4l2loopback_index_idr, dev, 0, 0, GFP_KERNEL);"
    },
    {
        "line": 69,
        "fullcodeline": "snprintf(dev->card_label, sizeof(dev->card_label),"
    },
    {
        "line": 126,
        "fullcodeline": "for (i = 0; i < dev->used_buffers; ++i)"
    },
    {
        "line": 127,
        "fullcodeline": "list_add_tail(&dev->buffers[i].list_head,"
    },
    {
        "line": 25,
        "fullcodeline": "conf->output_nr == conf->capture_nr) {"
    },
    {
        "line": 26,
        "fullcodeline": "nr = conf->capture_nr;"
    },
    {
        "line": 56,
        "fullcodeline": "err = -EEXIST;"
    },
    {
        "line": 27,
        "fullcodeline": "} else if (conf->capture_nr < 0 && conf->output_nr < 0) {"
    },
    {
        "line": 28,
        "fullcodeline": "nr = -1;"
    },
    {
        "line": 29,
        "fullcodeline": "} else if (conf->capture_nr < 0) {"
    },
    {
        "line": 30,
        "fullcodeline": "nr = conf->output_nr;"
    },
    {
        "line": 31,
        "fullcodeline": "} else if (conf->output_nr < 0) {"
    },
    {
        "line": 32,
        "fullcodeline": "nr = conf->capture_nr;"
    },
    {
        "line": 39,
        "fullcodeline": "return -EINVAL;"
    }
]