[
    {
        "line": 5,
        "fullcodeline": "PF_ASSERT_UNLOCKED();"
    },
    {
        "line": 7,
        "fullcodeline": "PF_LOCK();"
    },
    {
        "line": 8,
        "fullcodeline": "PF_STATE_ENTER_WRITE();"
    },
    {
        "line": 9,
        "fullcodeline": "TAILQ_FOREACH(si, &sk->sk_states, si_entry) {"
    },
    {
        "line": 35,
        "fullcodeline": "PF_STATE_EXIT_WRITE();"
    },
    {
        "line": 36,
        "fullcodeline": "PF_UNLOCK();"
    },
    {
        "line": 10,
        "fullcodeline": "struct pf_state *sist = si->si_st;"
    },
    {
        "line": 11,
        "fullcodeline": "if (sk == sist->key[PF_SK_STACK] && sist->rule.ptr &&"
    },
    {
        "line": 12,
        "fullcodeline": "(sist->rule.ptr->divert.type == PF_DIVERT_TO ||"
    },
    {
        "line": 13,
        "fullcodeline": "sist->rule.ptr->divert.type == PF_DIVERT_REPLY)) {"
    },
    {
        "line": 14,
        "fullcodeline": "if (sist->key[PF_SK_STACK]->proto == IPPROTO_TCP &&"
    },
    {
        "line": 15,
        "fullcodeline": "sist->key[PF_SK_WIRE] != sist->key[PF_SK_STACK]) {"
    },
    {
        "line": 29,
        "fullcodeline": "sist->state_flags |= PFSTATE_INP_UNLINKED;"
    },
    {
        "line": 21,
        "fullcodeline": "if (sist->src.state < TCPS_FIN_WAIT_2 ||"
    },
    {
        "line": 31,
        "fullcodeline": "pf_remove_state(sist);"
    },
    {
        "line": 22,
        "fullcodeline": "sist->dst.state < TCPS_FIN_WAIT_2) {"
    },
    {
        "line": 23,
        "fullcodeline": "pf_set_protostate(sist, PF_PEER_BOTH,"
    },
    {
        "line": 25,
        "fullcodeline": "pf_update_state_timeout(sist,"
    },
    {
        "line": 27,
        "fullcodeline": "sist->expire = getuptime();"
    }
]