[
    {
        "line": 4,
        "fullcodeline": "XPMDecContext *x = avctx->priv_data;"
    },
    {
        "line": 5,
        "fullcodeline": "AVFrame *p=data;"
    },
    {
        "line": 6,
        "fullcodeline": "const uint8_t *end, *ptr = avpkt->data;"
    },
    {
        "line": 11,
        "fullcodeline": "avctx->pix_fmt = AV_PIX_FMT_BGRA;"
    },
    {
        "line": 13,
        "fullcodeline": "end = avpkt->data + avpkt->size;"
    },
    {
        "line": 22,
        "fullcodeline": "ptr += mod_strcspn(ptr, \"\\\"\");"
    },
    {
        "line": 40,
        "fullcodeline": "size = 1;"
    },
    {
        "line": 49,
        "fullcodeline": "size *= 4;"
    },
    {
        "line": 51,
        "fullcodeline": "av_fast_padded_malloc(&x->pixels, &x->pixels_size, size);"
    },
    {
        "line": 55,
        "fullcodeline": "ptr += mod_strcspn(ptr, \",\") + 1;"
    },
    {
        "line": 100,
        "fullcodeline": "p->pict_type = AV_PICTURE_TYPE_I;"
    },
    {
        "line": 14,
        "fullcodeline": "while (memcmp(ptr, \"/* XPM */\", 9) && ptr < end - 9)"
    },
    {
        "line": 15,
        "fullcodeline": "ptr++;"
    },
    {
        "line": 17,
        "fullcodeline": "if (ptr >= end) {"
    },
    {
        "line": 41,
        "fullcodeline": "for (i = 0; i < cpp; i++)"
    },
    {
        "line": 42,
        "fullcodeline": "size *= 94;"
    },
    {
        "line": 56,
        "fullcodeline": "for (i = 0; i < ncolors; i++) {"
    },
    {
        "line": 82,
        "fullcodeline": "for (i = 0; i < avctx->height; i++) {"
    },
    {
        "line": 18,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"missing signature\\n\");"
    },
    {
        "line": 23,
        "fullcodeline": "if (sscanf(ptr, \"\\\"%u %u %u %u\\\",\","
    },
    {
        "line": 29,
        "fullcodeline": "if ((ret = ff_set_dimensions(avctx, avctx->width, avctx->height)) < 0)"
    },
    {
        "line": 32,
        "fullcodeline": "if ((ret = ff_get_buffer(avctx, p, 0)) < 0)"
    },
    {
        "line": 35,
        "fullcodeline": "if (cpp <= 0 || cpp >= 5) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (ncolors <= 0 || ncolors > size) {"
    },
    {
        "line": 60,
        "fullcodeline": "ptr += mod_strcspn(ptr, \"\\\"\") + 1;"
    },
    {
        "line": 63,
        "fullcodeline": "index = ptr;"
    },
    {
        "line": 64,
        "fullcodeline": "ptr += cpp;"
    },
    {
        "line": 66,
        "fullcodeline": "ptr = strstr(ptr, \"c \");"
    },
    {
        "line": 73,
        "fullcodeline": "len = strcspn(ptr, \"\\\" \");"
    },
    {
        "line": 78,
        "fullcodeline": "x->pixels[ret] = color_string_to_rgba(ptr, len);"
    },
    {
        "line": 79,
        "fullcodeline": "ptr += mod_strcspn(ptr, \",\") + 1;"
    },
    {
        "line": 83,
        "fullcodeline": "dst = (uint32_t *)(p->data[0] + i * p->linesize[0]);"
    },
    {
        "line": 84,
        "fullcodeline": "ptr += mod_strcspn(ptr, \"\\\"\") + 1;"
    },
    {
        "line": 96,
        "fullcodeline": "ptr += mod_strcspn(ptr, \",\") + 1;"
    },
    {
        "line": 53,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 61,
        "fullcodeline": "if (ptr + cpp > end)"
    },
    {
        "line": 86,
        "fullcodeline": "for (j = 0; j < avctx->width; j++) {"
    },
    {
        "line": 68,
        "fullcodeline": "ptr += 2;"
    },
    {
        "line": 75,
        "fullcodeline": "if ((ret = ascii2index(index, cpp)) < 0)"
    },
    {
        "line": 94,
        "fullcodeline": "ptr += cpp;"
    },
    {
        "line": 90,
        "fullcodeline": "if ((ret = ascii2index(ptr, cpp)) < 0)"
    }
]