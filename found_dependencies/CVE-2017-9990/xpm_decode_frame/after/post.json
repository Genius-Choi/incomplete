[
    {
        "line": 4,
        "fullcodeline": "XPMDecContext *x = avctx->priv_data;"
    },
    {
        "line": 5,
        "fullcodeline": "AVFrame *p=data;"
    },
    {
        "line": 11,
        "fullcodeline": "avctx->pix_fmt = AV_PIX_FMT_BGRA;"
    },
    {
        "line": 13,
        "fullcodeline": "av_fast_padded_malloc(&x->buf, &x->buf_size, avpkt->size);"
    },
    {
        "line": 16,
        "fullcodeline": "memcpy(x->buf, avpkt->data, avpkt->size);"
    },
    {
        "line": 17,
        "fullcodeline": "x->buf[avpkt->size] = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "ptr = x->buf;"
    },
    {
        "line": 20,
        "fullcodeline": "end = x->buf + avpkt->size;"
    },
    {
        "line": 29,
        "fullcodeline": "ptr += mod_strcspn(ptr, \"\\\"\");"
    },
    {
        "line": 47,
        "fullcodeline": "size = 1;"
    },
    {
        "line": 56,
        "fullcodeline": "size *= 4;"
    },
    {
        "line": 58,
        "fullcodeline": "av_fast_padded_malloc(&x->pixels, &x->pixels_size, size);"
    },
    {
        "line": 62,
        "fullcodeline": "ptr += mod_strcspn(ptr, \",\") + 1;"
    },
    {
        "line": 115,
        "fullcodeline": "p->key_frame = 1;"
    },
    {
        "line": 116,
        "fullcodeline": "p->pict_type = AV_PICTURE_TYPE_I;"
    },
    {
        "line": 118,
        "fullcodeline": "*got_frame = 1;"
    },
    {
        "line": 14,
        "fullcodeline": "if (!x->buf)"
    },
    {
        "line": 21,
        "fullcodeline": "while (end - ptr > 9 && memcmp(ptr, \"/* XPM */\", 9))"
    },
    {
        "line": 22,
        "fullcodeline": "ptr++;"
    },
    {
        "line": 24,
        "fullcodeline": "if (end - ptr <= 9) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (sscanf(ptr, \"\\\"%u %u %u %u\\\",\","
    },
    {
        "line": 36,
        "fullcodeline": "if ((ret = ff_set_dimensions(avctx, avctx->width, avctx->height)) < 0)"
    },
    {
        "line": 39,
        "fullcodeline": "if ((ret = ff_get_buffer(avctx, p, 0)) < 0)"
    },
    {
        "line": 42,
        "fullcodeline": "if (cpp <= 0 || cpp >= 5) {"
    },
    {
        "line": 48,
        "fullcodeline": "for (i = 0; i < cpp; i++)"
    },
    {
        "line": 49,
        "fullcodeline": "size *= 95;"
    },
    {
        "line": 51,
        "fullcodeline": "if (ncolors <= 0 || ncolors > size) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (!x->pixels)"
    },
    {
        "line": 63,
        "fullcodeline": "if (end - ptr < 1)"
    },
    {
        "line": 66,
        "fullcodeline": "for (i = 0; i < ncolors; i++) {"
    },
    {
        "line": 94,
        "fullcodeline": "for (i = 0; i < avctx->height; i++) {"
    },
    {
        "line": 25,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"missing signature\\n\");"
    },
    {
        "line": 32,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"missing image parameters\\n\");"
    },
    {
        "line": 43,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"unsupported/invalid number of chars per pixel: %d\\n\", cpp);"
    },
    {
        "line": 52,
        "fullcodeline": "av_log(avctx, AV_LOG_ERROR, \"invalid number of colors: %d\\n\", ncolors);"
    },
    {
        "line": 70,
        "fullcodeline": "ptr += mod_strcspn(ptr, \"\\\"\") + 1;"
    },
    {
        "line": 73,
        "fullcodeline": "index = ptr;"
    },
    {
        "line": 74,
        "fullcodeline": "ptr += cpp;"
    },
    {
        "line": 76,
        "fullcodeline": "ptr = strstr(ptr, \"c \");"
    },
    {
        "line": 83,
        "fullcodeline": "len = strcspn(ptr, \"\\\" \");"
    },
    {
        "line": 88,
        "fullcodeline": "x->pixels[ret] = color_string_to_rgba(ptr, len);"
    },
    {
        "line": 89,
        "fullcodeline": "ptr += mod_strcspn(ptr, \",\") + 1;"
    },
    {
        "line": 95,
        "fullcodeline": "dst = (uint32_t *)(p->data[0] + i * p->linesize[0]);"
    },
    {
        "line": 98,
        "fullcodeline": "ptr += mod_strcspn(ptr, \"\\\"\") + 1;"
    },
    {
        "line": 112,
        "fullcodeline": "ptr += mod_strcspn(ptr, \",\") + 1;"
    },
    {
        "line": 15,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 60,
        "fullcodeline": "return AVERROR(ENOMEM);"
    },
    {
        "line": 71,
        "fullcodeline": "if (end - ptr < cpp)"
    },
    {
        "line": 85,
        "fullcodeline": "if ((ret = ascii2index(index, cpp)) < 0)"
    },
    {
        "line": 90,
        "fullcodeline": "if (end - ptr < 1)"
    },
    {
        "line": 96,
        "fullcodeline": "if (end - ptr < 1)"
    },
    {
        "line": 99,
        "fullcodeline": "if (end - ptr < 1)"
    },
    {
        "line": 102,
        "fullcodeline": "for (j = 0; j < avctx->width; j++) {"
    },
    {
        "line": 78,
        "fullcodeline": "ptr += 2;"
    },
    {
        "line": 109,
        "fullcodeline": "*dst++ = x->pixels[ret];"
    },
    {
        "line": 110,
        "fullcodeline": "ptr += cpp;"
    },
    {
        "line": 103,
        "fullcodeline": "if (end - ptr < cpp)"
    },
    {
        "line": 106,
        "fullcodeline": "if ((ret = ascii2index(ptr, cpp)) < 0)"
    }
]