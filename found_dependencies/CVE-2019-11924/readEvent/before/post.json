[
    {
        "line": 3,
        "fullcodeline": "if (!unparsedHandshakeData_.empty()) {"
    },
    {
        "line": 4,
        "fullcodeline": "auto param = decodeHandshakeMessage(unparsedHandshakeData_);"
    },
    {
        "line": 15,
        "fullcodeline": "auto message = read(socketBuf);"
    },
    {
        "line": 16,
        "fullcodeline": "if (!message) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (!unparsedHandshakeData_.empty() &&"
    },
    {
        "line": 6,
        "fullcodeline": "VLOG(8) << \"Received handshake message \""
    },
    {
        "line": 21,
        "fullcodeline": "message->type != ContentType::handshake) {"
    },
    {
        "line": 7,
        "fullcodeline": "<< toString(boost::apply_visitor(EventVisitor(), *param));"
    },
    {
        "line": 22,
        "fullcodeline": "throw std::runtime_error(\"spliced handshake data\");"
    },
    {
        "line": 27,
        "fullcodeline": "auto alert = decode<Alert>(std::move(message->fragment));"
    },
    {
        "line": 35,
        "fullcodeline": "unparsedHandshakeData_.append(std::move(message->fragment));"
    },
    {
        "line": 36,
        "fullcodeline": "auto param = decodeHandshakeMessage(unparsedHandshakeData_);"
    },
    {
        "line": 49,
        "fullcodeline": "return Param(AppData(std::move(message->fragment)));"
    },
    {
        "line": 51,
        "fullcodeline": "throw std::runtime_error(\"unknown content type\");"
    },
    {
        "line": 28,
        "fullcodeline": "if (alert.description == AlertDescription::close_notify) {"
    },
    {
        "line": 38,
        "fullcodeline": "VLOG(8) << \"Received handshake message \""
    },
    {
        "line": 29,
        "fullcodeline": "return Param(CloseNotify(socketBuf.move()));"
    },
    {
        "line": 39,
        "fullcodeline": "<< toString(boost::apply_visitor(EventVisitor(), *param));"
    },
    {
        "line": 31,
        "fullcodeline": "return Param(std::move(alert));"
    }
]