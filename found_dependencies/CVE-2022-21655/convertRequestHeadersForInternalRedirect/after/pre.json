[
    {
        "line": 9,
        "fullcodeline": "absl::string_view redirect_url = internal_redirect.value().getStringView();"
    },
    {
        "line": 24,
        "fullcodeline": "const auto& policy = route_entry_->internalRedirectPolicy();"
    },
    {
        "line": 26,
        "fullcodeline": "const bool scheme_is_http = schemeIsHttp(downstream_headers, *callbacks_->connection());"
    },
    {
        "line": 27,
        "fullcodeline": "const bool target_is_http = absolute_url.scheme() == Http::Headers::get().SchemeValues.Http;"
    },
    {
        "line": 35,
        "fullcodeline": "const StreamInfo::FilterStateSharedPtr& filter_state = callbacks_->streamInfo().filterState();"
    },
    {
        "line": 38,
        "fullcodeline": "StreamInfo::UInt32Accessor* num_internal_redirect{};"
    },
    {
        "line": 71,
        "fullcodeline": "downstream_headers.setScheme(absolute_url.scheme());"
    },
    {
        "line": 72,
        "fullcodeline": "downstream_headers.setHost(absolute_url.hostAndPort());"
    },
    {
        "line": 74,
        "fullcodeline": "auto path_and_query = absolute_url.pathAndQueryParams();"
    },
    {
        "line": 83,
        "fullcodeline": "downstream_headers.setPath(path_and_query);"
    },
    {
        "line": 85,
        "fullcodeline": "callbacks_->clearRouteCache();"
    },
    {
        "line": 86,
        "fullcodeline": "const auto route = callbacks_->route();"
    },
    {
        "line": 94,
        "fullcodeline": "const auto& route_name = route->directResponseEntry() ? route->directResponseEntry()->routeName()"
    },
    {
        "line": 4,
        "fullcodeline": "if (!downstream_headers.Path()) {"
    },
    {
        "line": 11,
        "fullcodeline": "if (redirect_url.empty()) {"
    },
    {
        "line": 42,
        "fullcodeline": "num_internal_redirect == nullptr) {"
    },
    {
        "line": 57,
        "fullcodeline": "const std::string original_host(downstream_headers.getHostValue());"
    },
    {
        "line": 58,
        "fullcodeline": "const std::string original_path(downstream_headers.getPathValue());"
    },
    {
        "line": 59,
        "fullcodeline": "const bool scheme_is_set = (downstream_headers.Scheme() != nullptr);"
    },
    {
        "line": 88,
        "fullcodeline": "if (!route) {"
    },
    {
        "line": 119,
        "fullcodeline": "downstream_headers.setEnvoyOriginalUrl(absl::StrCat(scheme_is_http"
    },
    {
        "line": 5,
        "fullcodeline": "ENVOY_STREAM_LOG(trace, \"Internal redirect failed: no path in downstream_headers\", *callbacks_);"
    },
    {
        "line": 17,
        "fullcodeline": "if (!absolute_url.initialize(redirect_url, false)) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (!policy.isCrossSchemeRedirectAllowed() && scheme_is_http != target_is_http) {"
    },
    {
        "line": 43,
        "fullcodeline": "auto state = std::make_shared<StreamInfo::UInt32AccessorImpl>(0);"
    },
    {
        "line": 44,
        "fullcodeline": "num_internal_redirect = state.get();"
    },
    {
        "line": 46,
        "fullcodeline": "filter_state->setData(NumInternalRedirectsFilterStateName, std::move(state),"
    },
    {
        "line": 51,
        "fullcodeline": "if (num_internal_redirect->value() >= policy.maxInternalRedirects()) {"
    },
    {
        "line": 80,
        "fullcodeline": "auto fragment_pos = path_and_query.find('#');"
    },
    {
        "line": 81,
        "fullcodeline": "path_and_query = path_and_query.substr(0, fragment_pos);"
    },
    {
        "line": 95,
        "fullcodeline": ": route->routeEntry()->routeName();"
    },
    {
        "line": 108,
        "fullcodeline": "if (status_code == enumToInt(Http::Code::SeeOther) &&"
    },
    {
        "line": 110,
        "fullcodeline": "downstream_headers.getMethodValue() != Http::Headers::get().MethodValues.Head) {"
    },
    {
        "line": 111,
        "fullcodeline": "downstream_headers.setMethod(Http::Headers::get().MethodValues.Get);"
    },
    {
        "line": 112,
        "fullcodeline": "downstream_headers.remove(Http::Headers::get().ContentLength);"
    },
    {
        "line": 109,
        "fullcodeline": "downstream_headers.getMethodValue() != Http::Headers::get().MethodValues.Get &&"
    },
    {
        "line": 97,
        "fullcodeline": "if (!predicate->acceptTargetRoute(*filter_state, route_name, !scheme_is_http,"
    },
    {
        "line": 98,
        "fullcodeline": "!target_is_http)) {"
    },
    {
        "line": 102,
        "fullcodeline": "*callbacks_, route_name, predicate->name());"
    }
]