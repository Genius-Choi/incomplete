[
    {
        "line": 5,
        "fullcodeline": "header[MagickPathExtent];"
    },
    {
        "line": 28,
        "fullcodeline": "pixel[4],"
    },
    {
        "line": 34,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 35,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 36,
        "fullcodeline": "assert(image != (Image *) NULL);"
    },
    {
        "line": 37,
        "fullcodeline": "assert(image->signature == MagickCoreSignature);"
    },
    {
        "line": 40,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 41,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 42,
        "fullcodeline": "status=OpenBlob(image_info,image,WriteBinaryBlobMode,exception);"
    },
    {
        "line": 50,
        "fullcodeline": "(void) ResetMagickMemory(header,' ',MagickPathExtent);"
    },
    {
        "line": 51,
        "fullcodeline": "length=CopyMagickString(header,\"#?RGBE\\n\",MagickPathExtent);"
    },
    {
        "line": 52,
        "fullcodeline": "(void) WriteBlob(image,length,(unsigned char *) header);"
    },
    {
        "line": 53,
        "fullcodeline": "property=GetImageProperty(image,\"comment\",exception);"
    },
    {
        "line": 60,
        "fullcodeline": "property=GetImageProperty(image,\"hdr:exposure\",exception);"
    },
    {
        "line": 72,
        "fullcodeline": "count=FormatLocaleString(header,MagickPathExtent,"
    },
    {
        "line": 78,
        "fullcodeline": "(void) WriteBlob(image,(size_t) count,(unsigned char *) header);"
    },
    {
        "line": 79,
        "fullcodeline": "length=CopyMagickString(header,\"FORMAT=32-bit_rle_rgbe\\n\\n\",MagickPathExtent);"
    },
    {
        "line": 80,
        "fullcodeline": "(void) WriteBlob(image,length,(unsigned char *) header);"
    },
    {
        "line": 81,
        "fullcodeline": "count=FormatLocaleString(header,MagickPathExtent,\"-Y %.20g +X %.20g\\n\","
    },
    {
        "line": 83,
        "fullcodeline": "(void) WriteBlob(image,(size_t) count,(unsigned char *) header);"
    },
    {
        "line": 87,
        "fullcodeline": "pixels=(unsigned char *) AcquireQuantumMemory(image->columns,4*"
    },
    {
        "line": 164,
        "fullcodeline": "pixels=(unsigned char *) RelinquishMagickMemory(pixels);"
    },
    {
        "line": 165,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 38,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 43,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 45,
        "fullcodeline": "if (IsRGBColorspace(image->colorspace) == MagickFalse)"
    },
    {
        "line": 54,
        "fullcodeline": "if ((property != (const char *) NULL) &&"
    },
    {
        "line": 61,
        "fullcodeline": "if (property != (const char *) NULL)"
    },
    {
        "line": 67,
        "fullcodeline": "if (image->gamma != 0.0)"
    },
    {
        "line": 89,
        "fullcodeline": "if (pixels == (unsigned char *) NULL)"
    },
    {
        "line": 91,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 39,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 46,
        "fullcodeline": "(void) TransformImageColorspace(image,RGBColorspace,exception);"
    },
    {
        "line": 55,
        "fullcodeline": "(strchr(property,'\\n') == (char *) NULL))"
    },
    {
        "line": 57,
        "fullcodeline": "count=FormatLocaleString(header,MagickPathExtent,\"#%s\\n\",property);"
    },
    {
        "line": 58,
        "fullcodeline": "(void) WriteBlob(image,(size_t) count,(unsigned char *) header);"
    },
    {
        "line": 63,
        "fullcodeline": "count=FormatLocaleString(header,MagickPathExtent,\"EXPOSURE=%g\\n\","
    },
    {
        "line": 65,
        "fullcodeline": "(void) WriteBlob(image,(size_t) count,(unsigned char *) header);"
    },
    {
        "line": 69,
        "fullcodeline": "count=FormatLocaleString(header,MagickPathExtent,\"GAMMA=%g\\n\",image->gamma);"
    },
    {
        "line": 70,
        "fullcodeline": "(void) WriteBlob(image,(size_t) count,(unsigned char *) header);"
    },
    {
        "line": 82,
        "fullcodeline": "(double) image->rows,(double) image->columns);"
    },
    {
        "line": 90,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 93,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 106,
        "fullcodeline": "i=0;"
    },
    {
        "line": 159,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 94,
        "fullcodeline": "if (p == (const Quantum *) NULL)"
    },
    {
        "line": 96,
        "fullcodeline": "if ((image->columns >= 8) && (image->columns <= 0x7ffff))"
    },
    {
        "line": 107,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 148,
        "fullcodeline": "if ((image->columns >= 8) && (image->columns <= 0x7ffff))"
    },
    {
        "line": 161,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 64,
        "fullcodeline": "strtod(property,(char **) NULL));"
    },
    {
        "line": 98,
        "fullcodeline": "pixel[0]=2;"
    },
    {
        "line": 99,
        "fullcodeline": "pixel[1]=2;"
    },
    {
        "line": 100,
        "fullcodeline": "pixel[2]=(unsigned char) (image->columns >> 8);"
    },
    {
        "line": 101,
        "fullcodeline": "pixel[3]=(unsigned char) (image->columns & 0xff);"
    },
    {
        "line": 102,
        "fullcodeline": "count=WriteBlob(image,4*sizeof(*pixel),pixel);"
    },
    {
        "line": 112,
        "fullcodeline": "pixel[0]=0;"
    },
    {
        "line": 113,
        "fullcodeline": "pixel[1]=0;"
    },
    {
        "line": 114,
        "fullcodeline": "pixel[2]=0;"
    },
    {
        "line": 115,
        "fullcodeline": "pixel[3]=0;"
    },
    {
        "line": 116,
        "fullcodeline": "gamma=QuantumScale*GetPixelRed(image,p);"
    },
    {
        "line": 146,
        "fullcodeline": "p+=GetPixelChannels(image);"
    },
    {
        "line": 103,
        "fullcodeline": "if (count != (ssize_t) (4*sizeof(*pixel)))"
    },
    {
        "line": 117,
        "fullcodeline": "if ((QuantumScale*GetPixelGreen(image,p)) > gamma)"
    },
    {
        "line": 119,
        "fullcodeline": "if ((QuantumScale*GetPixelBlue(image,p)) > gamma)"
    },
    {
        "line": 121,
        "fullcodeline": "if (gamma > MagickEpsilon)"
    },
    {
        "line": 132,
        "fullcodeline": "if ((image->columns >= 8) && (image->columns <= 0x7ffff))"
    },
    {
        "line": 150,
        "fullcodeline": "for (i=0; i < 4; i++)"
    },
    {
        "line": 151,
        "fullcodeline": "length=HDRWriteRunlengthPixels(image,&pixels[i*image->columns]);"
    },
    {
        "line": 155,
        "fullcodeline": "count=WriteBlob(image,4*image->columns*sizeof(*pixels),pixels);"
    },
    {
        "line": 118,
        "fullcodeline": "gamma=QuantumScale*GetPixelGreen(image,p);"
    },
    {
        "line": 120,
        "fullcodeline": "gamma=QuantumScale*GetPixelBlue(image,p);"
    },
    {
        "line": 126,
        "fullcodeline": "gamma=frexp(gamma,&exponent)*256.0/gamma;"
    },
    {
        "line": 127,
        "fullcodeline": "pixel[0]=(unsigned char) (gamma*QuantumScale*GetPixelRed(image,p));"
    },
    {
        "line": 128,
        "fullcodeline": "pixel[1]=(unsigned char) (gamma*QuantumScale*GetPixelGreen(image,p));"
    },
    {
        "line": 129,
        "fullcodeline": "pixel[2]=(unsigned char) (gamma*QuantumScale*GetPixelBlue(image,p));"
    },
    {
        "line": 130,
        "fullcodeline": "pixel[3]=(unsigned char) (exponent+128);"
    },
    {
        "line": 134,
        "fullcodeline": "pixels[x]=pixel[0];"
    },
    {
        "line": 135,
        "fullcodeline": "pixels[x+image->columns]=pixel[1];"
    },
    {
        "line": 136,
        "fullcodeline": "pixels[x+2*image->columns]=pixel[2];"
    },
    {
        "line": 137,
        "fullcodeline": "pixels[x+3*image->columns]=pixel[3];"
    },
    {
        "line": 156,
        "fullcodeline": "if (count != (ssize_t) (4*image->columns*sizeof(*pixels)))"
    },
    {
        "line": 141,
        "fullcodeline": "pixels[i++]=pixel[0];"
    },
    {
        "line": 142,
        "fullcodeline": "pixels[i++]=pixel[1];"
    },
    {
        "line": 143,
        "fullcodeline": "pixels[i++]=pixel[2];"
    },
    {
        "line": 144,
        "fullcodeline": "pixels[i++]=pixel[3];"
    }
]