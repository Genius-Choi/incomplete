[
    {
        "line": 3,
        "fullcodeline": "u32 crc32 = read_neutral_s32(buffer);"
    },
    {
        "line": 4,
        "fullcodeline": "s32 bwt_idx = read_neutral_s32(buffer + 4);"
    },
    {
        "line": 27,
        "fullcodeline": "s8 model = buffer[8];"
    },
    {
        "line": 28,
        "fullcodeline": "s32 lzp_size = -1, rle_size = -1, p = 0;"
    },
    {
        "line": 33,
        "fullcodeline": "p += 2;"
    },
    {
        "line": 35,
        "fullcodeline": "data_size -= p * 4 + 1;"
    },
    {
        "line": 49,
        "fullcodeline": "u8 *b1 = buffer, *b2 = state->swap_buffer;"
    },
    {
        "line": 51,
        "fullcodeline": "begin(state->cm_state);"
    },
    {
        "line": 52,
        "fullcodeline": "state->cm_state->in_queue = b1 + p * 4 + 1;"
    },
    {
        "line": 53,
        "fullcodeline": "state->cm_state->input_ptr = 0;"
    },
    {
        "line": 54,
        "fullcodeline": "state->cm_state->input_max = data_size;"
    },
    {
        "line": 65,
        "fullcodeline": "decode_bytes(state->cm_state, b2, size_src);"
    },
    {
        "line": 66,
        "fullcodeline": "swap(b1, b2);"
    },
    {
        "line": 78,
        "fullcodeline": "swap(b1, b2);"
    },
    {
        "line": 100,
        "fullcodeline": "state->last_error = BZ3_OK;"
    },
    {
        "line": 6,
        "fullcodeline": "if (data_size > bz3_bound(state->block_size) || data_size < 0) {"
    },
    {
        "line": 11,
        "fullcodeline": "if (bwt_idx == -1) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (model & 2) lzp_size = read_neutral_s32(buffer + 9 + 4 * p++);"
    },
    {
        "line": 31,
        "fullcodeline": "if (model & 4) rle_size = read_neutral_s32(buffer + 9 + 4 * p++);"
    },
    {
        "line": 58,
        "fullcodeline": "if (model & 2)"
    },
    {
        "line": 68,
        "fullcodeline": "if (bwt_idx >= size_src) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (model & 2) {"
    },
    {
        "line": 107,
        "fullcodeline": "if (b1 != buffer) memcpy(buffer, b1, size_src);"
    },
    {
        "line": 7,
        "fullcodeline": "state->last_error = BZ3_ERR_MALFORMED_HEADER;"
    },
    {
        "line": 17,
        "fullcodeline": "memmove(buffer, buffer + 8, data_size - 8);"
    },
    {
        "line": 37,
        "fullcodeline": "if (((model & 2) && (lzp_size > bz3_bound(state->block_size) || lzp_size < 0)) ||"
    },
    {
        "line": 38,
        "fullcodeline": "((model & 4) && (rle_size > bz3_bound(state->block_size) || rle_size < 0))) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (orig_size > bz3_bound(state->block_size) || orig_size < 0) {"
    },
    {
        "line": 59,
        "fullcodeline": "size_src = lzp_size;"
    },
    {
        "line": 74,
        "fullcodeline": "if (libsais_unbwt(b1, b2, state->sais_array, size_src, NULL, bwt_idx) < 0) {"
    },
    {
        "line": 75,
        "fullcodeline": "state->last_error = BZ3_ERR_BWT;"
    },
    {
        "line": 82,
        "fullcodeline": "size_src = lzp_decompress(b1, b2, lzp_size, bz3_bound(state->block_size), state->lzp_lut);"
    },
    {
        "line": 87,
        "fullcodeline": "swap(b1, b2);"
    },
    {
        "line": 96,
        "fullcodeline": "size_src = orig_size;"
    },
    {
        "line": 97,
        "fullcodeline": "swap(b1, b2);"
    },
    {
        "line": 102,
        "fullcodeline": "if (size_src > state->block_size || size_src < 0) {"
    },
    {
        "line": 109,
        "fullcodeline": "if (crc32 != crc32sum(1, buffer, size_src)) {"
    },
    {
        "line": 8,
        "fullcodeline": "return -1;"
    },
    {
        "line": 24,
        "fullcodeline": "return data_size - 8;"
    },
    {
        "line": 40,
        "fullcodeline": "return -1;"
    },
    {
        "line": 45,
        "fullcodeline": "return -1;"
    },
    {
        "line": 70,
        "fullcodeline": "return -1;"
    },
    {
        "line": 76,
        "fullcodeline": "return -1;"
    },
    {
        "line": 83,
        "fullcodeline": "if (size_src == -1) {"
    },
    {
        "line": 91,
        "fullcodeline": "int err = mrled(b1, b2, orig_size, size_src);"
    },
    {
        "line": 104,
        "fullcodeline": "return -1;"
    },
    {
        "line": 111,
        "fullcodeline": "return -1;"
    },
    {
        "line": 12,
        "fullcodeline": "if (data_size - 8 > 64 || data_size < 8) {"
    },
    {
        "line": 19,
        "fullcodeline": "if (crc32sum(1, buffer, data_size - 8) != crc32) {"
    },
    {
        "line": 60,
        "fullcodeline": "else if (model & 4)"
    },
    {
        "line": 14,
        "fullcodeline": "return -1;"
    },
    {
        "line": 21,
        "fullcodeline": "return -1;"
    },
    {
        "line": 61,
        "fullcodeline": "size_src = rle_size;"
    },
    {
        "line": 85,
        "fullcodeline": "return -1;"
    },
    {
        "line": 94,
        "fullcodeline": "return -1;"
    },
    {
        "line": 63,
        "fullcodeline": "size_src = orig_size;"
    }
]