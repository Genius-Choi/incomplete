[
    {
        "line": 5,
        "fullcodeline": "struct smb2_tree_connect_rsp *rsp = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "struct kvec iov[2];"
    },
    {
        "line": 7,
        "fullcodeline": "int rc = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "__le16 *unc_path = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "cifs_dbg(FYI, \"TCON\\n\");"
    },
    {
        "line": 23,
        "fullcodeline": "unc_path = kmalloc(MAX_SHARENAME_LENGTH * 2, GFP_KERNEL);"
    },
    {
        "line": 27,
        "fullcodeline": "unc_path_len = cifs_strtoUTF16(unc_path, tree, strlen(tree), cp) + 1;"
    },
    {
        "line": 28,
        "fullcodeline": "unc_path_len *= 2;"
    },
    {
        "line": 34,
        "fullcodeline": "rc = small_smb2_init(SMB2_TREE_CONNECT, tcon, (void **) &req);"
    },
    {
        "line": 47,
        "fullcodeline": "iov[0].iov_base = (char *)req;"
    },
    {
        "line": 49,
        "fullcodeline": "iov[0].iov_len = get_rfc1002_length(req) + 4 - 1;"
    },
    {
        "line": 52,
        "fullcodeline": "req->PathOffset = cpu_to_le16(sizeof(struct smb2_tree_connect_req)"
    },
    {
        "line": 54,
        "fullcodeline": "req->PathLength = cpu_to_le16(unc_path_len - 2);"
    },
    {
        "line": 55,
        "fullcodeline": "iov[1].iov_base = unc_path;"
    },
    {
        "line": 56,
        "fullcodeline": "iov[1].iov_len = unc_path_len;"
    },
    {
        "line": 58,
        "fullcodeline": "inc_rfc1001_len(req, unc_path_len - 1 /* pad */);"
    },
    {
        "line": 60,
        "fullcodeline": "rc = SendReceive2(xid, ses, iov, 2, &resp_buftype, 0);"
    },
    {
        "line": 90,
        "fullcodeline": "tcon->share_flags = le32_to_cpu(rsp->ShareFlags);"
    },
    {
        "line": 91,
        "fullcodeline": "tcon->capabilities = rsp->Capabilities; /* we keep caps little endian */"
    },
    {
        "line": 92,
        "fullcodeline": "tcon->maximal_access = le32_to_cpu(rsp->MaximalAccess);"
    },
    {
        "line": 93,
        "fullcodeline": "tcon->tidStatus = CifsGood;"
    },
    {
        "line": 94,
        "fullcodeline": "tcon->need_reconnect = false;"
    },
    {
        "line": 96,
        "fullcodeline": "strlcpy(tcon->treeName, tree, sizeof(tcon->treeName));"
    },
    {
        "line": 101,
        "fullcodeline": "init_copy_chunk_defaults(tcon);"
    },
    {
        "line": 105,
        "fullcodeline": "free_rsp_buf(resp_buftype, rsp);"
    },
    {
        "line": 106,
        "fullcodeline": "kfree(unc_path);"
    },
    {
        "line": 15,
        "fullcodeline": "if ((ses->server) && tree)"
    },
    {
        "line": 20,
        "fullcodeline": "if (tcon && tcon->bad_network_name)"
    },
    {
        "line": 24,
        "fullcodeline": "if (unc_path == NULL)"
    },
    {
        "line": 29,
        "fullcodeline": "if (unc_path_len < 2) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (tcon == NULL) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (rc != 0) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (tcon == NULL) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (rsp->ShareType & SMB2_SHARE_TYPE_DISK)"
    },
    {
        "line": 98,
        "fullcodeline": "if ((rsp->Capabilities & SMB2_SHARE_CAP_DFS) &&"
    },
    {
        "line": 110,
        "fullcodeline": "if (rsp->hdr.Status == STATUS_BAD_NETWORK_NAME) {"
    },
    {
        "line": 16,
        "fullcodeline": "server = ses->server;"
    },
    {
        "line": 30,
        "fullcodeline": "kfree(unc_path);"
    },
    {
        "line": 36,
        "fullcodeline": "kfree(unc_path);"
    },
    {
        "line": 42,
        "fullcodeline": "req->hdr.SessionId = ses->Suid;"
    },
    {
        "line": 77,
        "fullcodeline": "cifs_dbg(FYI, \"connection to disk share\\n\");"
    },
    {
        "line": 99,
        "fullcodeline": "((tcon->share_flags & SHI1005_FLAGS_DFS) == 0))"
    },
    {
        "line": 100,
        "fullcodeline": "cifs_dbg(VFS, \"DFS capability contradicts DFS flag\\n\");"
    },
    {
        "line": 103,
        "fullcodeline": "rc = tcon->ses->server->ops->validate_negotiate(xid, tcon);"
    },
    {
        "line": 111,
        "fullcodeline": "cifs_dbg(VFS, \"BAD_NETWORK_NAME: %s\\n\", tree);"
    },
    {
        "line": 112,
        "fullcodeline": "tcon->bad_network_name = true;"
    },
    {
        "line": 21,
        "fullcodeline": "return -ENOENT;"
    },
    {
        "line": 25,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 31,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 18,
        "fullcodeline": "return -EIO;"
    },
    {
        "line": 65,
        "fullcodeline": "cifs_stats_fail_inc(tcon, SMB2_TREE_CONNECT_HE);"
    },
    {
        "line": 66,
        "fullcodeline": "tcon->need_reconnect = true;"
    },
    {
        "line": 78,
        "fullcodeline": "else if (rsp->ShareType & SMB2_SHARE_TYPE_PIPE) {"
    },
    {
        "line": 79,
        "fullcodeline": "tcon->ipc = true;"
    },
    {
        "line": 80,
        "fullcodeline": "cifs_dbg(FYI, \"connection to pipe share\\n\");"
    },
    {
        "line": 81,
        "fullcodeline": "} else if (rsp->ShareType & SMB2_SHARE_TYPE_PRINT) {"
    },
    {
        "line": 82,
        "fullcodeline": "tcon->print = true;"
    },
    {
        "line": 83,
        "fullcodeline": "cifs_dbg(FYI, \"connection to printer\\n\");"
    },
    {
        "line": 85,
        "fullcodeline": "cifs_dbg(VFS, \"unknown share type %d\\n\", rsp->ShareType);"
    },
    {
        "line": 86,
        "fullcodeline": "rc = -EOPNOTSUPP;"
    }
]