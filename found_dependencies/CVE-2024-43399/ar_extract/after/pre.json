[
    {
        "line": 3,
        "fullcodeline": "msg = 'Extracting static library archive'"
    },
    {
        "line": 4,
        "fullcodeline": "logger.info(msg)"
    },
    {
        "line": 5,
        "fullcodeline": "append_scan_status(checksum, msg)"
    },
    {
        "line": 7,
        "fullcodeline": "ar = arpy.Archive(src)"
    },
    {
        "line": 8,
        "fullcodeline": "ar.read_all_headers()"
    },
    {
        "line": 9,
        "fullcodeline": "for a, val in ar.archived_files.items():"
    },
    {
        "line": 21,
        "fullcodeline": "msg = 'Failed to extract .a archive'"
    },
    {
        "line": 22,
        "fullcodeline": "logger.warning(msg)"
    },
    {
        "line": 23,
        "fullcodeline": "append_scan_status(checksum, msg)"
    },
    {
        "line": 25,
        "fullcodeline": "plat = platform.system()"
    },
    {
        "line": 26,
        "fullcodeline": "os_err = 'Possibly a Fat binary. Requires MacOS for Analysis'"
    },
    {
        "line": 31,
        "fullcodeline": "msg = 'Using OS ar utility to handle archive'"
    },
    {
        "line": 32,
        "fullcodeline": "logger.info(msg)"
    },
    {
        "line": 33,
        "fullcodeline": "append_scan_status(checksum, msg)"
    },
    {
        "line": 34,
        "fullcodeline": "exp = ar_os(src, dst)"
    },
    {
        "line": 11,
        "fullcodeline": "filtered = a.decode('utf-8', 'ignore')"
    },
    {
        "line": 17,
        "fullcodeline": "out = Path(dst) / filtered"
    },
    {
        "line": 18,
        "fullcodeline": "out.write_bytes(val.read())"
    },
    {
        "line": 27,
        "fullcodeline": "if plat == 'Windows':"
    },
    {
        "line": 40,
        "fullcodeline": "if b'lipo(1)' in exp:"
    },
    {
        "line": 12,
        "fullcodeline": "if is_path_traversal(filtered):"
    },
    {
        "line": 28,
        "fullcodeline": "logger.warning(os_err)"
    },
    {
        "line": 29,
        "fullcodeline": "append_scan_status(checksum, os_err)"
    },
    {
        "line": 35,
        "fullcodeline": "if len(exp) > 3 and plat == 'Linux':"
    },
    {
        "line": 37,
        "fullcodeline": "logger.warning(os_err)"
    },
    {
        "line": 41,
        "fullcodeline": "msg = 'Fat binary archive identified'"
    },
    {
        "line": 42,
        "fullcodeline": "logger.info(msg)"
    },
    {
        "line": 43,
        "fullcodeline": "append_scan_status(checksum, msg)"
    },
    {
        "line": 13,
        "fullcodeline": "msg = f'Zip slip detected. skipped extracting {filtered}'"
    },
    {
        "line": 14,
        "fullcodeline": "logger.warning(msg)"
    },
    {
        "line": 15,
        "fullcodeline": "append_scan_status(checksum, msg)"
    },
    {
        "line": 46,
        "fullcodeline": "nw_src = lipo_thin(checksum, src, dst)"
    },
    {
        "line": 50,
        "fullcodeline": "msg = 'Failed to thin fat archive'"
    },
    {
        "line": 51,
        "fullcodeline": "logger.exception(msg)"
    },
    {
        "line": 52,
        "fullcodeline": "append_scan_status(checksum, msg, repr(exp))"
    }
]