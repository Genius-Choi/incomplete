[
    {
        "line": 5,
        "fullcodeline": "int r, success = 0, allocated_listen_port = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "struct sshbuf *resp = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "rtype = packet_get_string(NULL);"
    },
    {
        "line": 9,
        "fullcodeline": "want_reply = packet_get_char();"
    },
    {
        "line": 10,
        "fullcodeline": "debug(\"server_input_global_request: rtype %s want_reply %d\", rtype, want_reply);"
    },
    {
        "line": 101,
        "fullcodeline": "free(rtype);"
    },
    {
        "line": 102,
        "fullcodeline": "sshbuf_free(resp);"
    },
    {
        "line": 13,
        "fullcodeline": "if (strcmp(rtype, \"tcpip-forward\") == 0) {"
    },
    {
        "line": 17,
        "fullcodeline": "pw = the_authctxt->pw;"
    },
    {
        "line": 20,
        "fullcodeline": "memset(&fwd, 0, sizeof(fwd));"
    },
    {
        "line": 21,
        "fullcodeline": "fwd.listen_host = packet_get_string(NULL);"
    },
    {
        "line": 22,
        "fullcodeline": "fwd.listen_port = (u_short)packet_get_int();"
    },
    {
        "line": 23,
        "fullcodeline": "debug(\"server_input_global_request: tcpip-forward listen %s port %d\","
    },
    {
        "line": 39,
        "fullcodeline": "free(fwd.listen_host);"
    },
    {
        "line": 93,
        "fullcodeline": "packet_start(success ?"
    },
    {
        "line": 98,
        "fullcodeline": "packet_send();"
    },
    {
        "line": 99,
        "fullcodeline": "packet_write_wait();"
    },
    {
        "line": 18,
        "fullcodeline": "if (pw == NULL || !the_authctxt->valid)"
    },
    {
        "line": 27,
        "fullcodeline": "if ((options.allow_tcp_forwarding & FORWARD_REMOTE) == 0 ||"
    },
    {
        "line": 40,
        "fullcodeline": "if ((resp = sshbuf_new()) == NULL)"
    },
    {
        "line": 42,
        "fullcodeline": "if (allocated_listen_port != 0 &&"
    },
    {
        "line": 95,
        "fullcodeline": "if (success && resp != NULL)"
    },
    {
        "line": 19,
        "fullcodeline": "fatal(\"server_input_global_request: no/invalid user\");"
    },
    {
        "line": 30,
        "fullcodeline": "(fwd.listen_port != 0 &&"
    },
    {
        "line": 32,
        "fullcodeline": "success = 0;"
    },
    {
        "line": 33,
        "fullcodeline": "packet_send_debug(\"Server has disabled port forwarding.\");"
    },
    {
        "line": 41,
        "fullcodeline": "fatal(\"%s: sshbuf_new\", __func__);"
    },
    {
        "line": 43,
        "fullcodeline": "(r = sshbuf_put_u32(resp, allocated_listen_port)) != 0)"
    },
    {
        "line": 44,
        "fullcodeline": "fatal(\"%s: sshbuf_put_u32: %s\", __func__, ssh_err(r));"
    },
    {
        "line": 45,
        "fullcodeline": "} else if (strcmp(rtype, \"cancel-tcpip-forward\") == 0) {"
    },
    {
        "line": 96,
        "fullcodeline": "ssh_packet_put_raw(active_state, sshbuf_ptr(resp),"
    },
    {
        "line": 29,
        "fullcodeline": "(!want_reply && fwd.listen_port == 0) ||"
    },
    {
        "line": 31,
        "fullcodeline": "!bind_permitted(fwd.listen_port, pw->pw_uid))) {"
    },
    {
        "line": 36,
        "fullcodeline": "success = channel_setup_remote_fwd_listener(&fwd,"
    },
    {
        "line": 48,
        "fullcodeline": "memset(&fwd, 0, sizeof(fwd));"
    },
    {
        "line": 49,
        "fullcodeline": "fwd.listen_host = packet_get_string(NULL);"
    },
    {
        "line": 50,
        "fullcodeline": "fwd.listen_port = (u_short)packet_get_int();"
    },
    {
        "line": 51,
        "fullcodeline": "debug(\"%s: cancel-tcpip-forward addr %s port %d\", __func__,"
    },
    {
        "line": 54,
        "fullcodeline": "success = channel_cancel_rport_listener(&fwd);"
    },
    {
        "line": 55,
        "fullcodeline": "free(fwd.listen_host);"
    },
    {
        "line": 97,
        "fullcodeline": "sshbuf_len(resp));"
    },
    {
        "line": 56,
        "fullcodeline": "} else if (strcmp(rtype, \"streamlocal-forward@openssh.com\") == 0) {"
    },
    {
        "line": 59,
        "fullcodeline": "memset(&fwd, 0, sizeof(fwd));"
    },
    {
        "line": 60,
        "fullcodeline": "fwd.listen_path = packet_get_string(NULL);"
    },
    {
        "line": 61,
        "fullcodeline": "debug(\"server_input_global_request: streamlocal-forward listen path %s\","
    },
    {
        "line": 75,
        "fullcodeline": "free(fwd.listen_path);"
    },
    {
        "line": 65,
        "fullcodeline": "if ((options.allow_streamlocal_forwarding & FORWARD_REMOTE) == 0"
    },
    {
        "line": 67,
        "fullcodeline": "!use_privsep) {"
    },
    {
        "line": 68,
        "fullcodeline": "success = 0;"
    },
    {
        "line": 69,
        "fullcodeline": "packet_send_debug(\"Server has disabled port forwarding.\");"
    },
    {
        "line": 76,
        "fullcodeline": "} else if (strcmp(rtype, \"cancel-streamlocal-forward@openssh.com\") == 0) {"
    },
    {
        "line": 72,
        "fullcodeline": "success = channel_setup_remote_fwd_listener("
    },
    {
        "line": 79,
        "fullcodeline": "memset(&fwd, 0, sizeof(fwd));"
    },
    {
        "line": 80,
        "fullcodeline": "fwd.listen_path = packet_get_string(NULL);"
    },
    {
        "line": 81,
        "fullcodeline": "debug(\"%s: cancel-streamlocal-forward path %s\", __func__,"
    },
    {
        "line": 84,
        "fullcodeline": "success = channel_cancel_rport_listener(&fwd);"
    },
    {
        "line": 85,
        "fullcodeline": "free(fwd.listen_path);"
    },
    {
        "line": 86,
        "fullcodeline": "} else if (strcmp(rtype, \"no-more-sessions@openssh.com\") == 0) {"
    },
    {
        "line": 87,
        "fullcodeline": "no_more_sessions = 1;"
    },
    {
        "line": 88,
        "fullcodeline": "success = 1;"
    },
    {
        "line": 89,
        "fullcodeline": "} else if (strcmp(rtype, \"hostkeys-prove-00@openssh.com\") == 0) {"
    },
    {
        "line": 90,
        "fullcodeline": "success = server_input_hostkeys_prove(&resp);"
    }
]