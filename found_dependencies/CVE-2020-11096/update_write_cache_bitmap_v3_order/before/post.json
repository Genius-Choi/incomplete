[
    {
        "line": 11,
        "fullcodeline": "bitmapData = &cache_bitmap_v3->bitmapData;"
    },
    {
        "line": 13,
        "fullcodeline": "*flags = (cache_bitmap_v3->cacheId & 0x00000003) |"
    },
    {
        "line": 15,
        "fullcodeline": "Stream_Write_UINT16(s, cache_bitmap_v3->cacheIndex); /* cacheIndex (2 bytes) */"
    },
    {
        "line": 16,
        "fullcodeline": "Stream_Write_UINT32(s, cache_bitmap_v3->key1);       /* key1 (4 bytes) */"
    },
    {
        "line": 17,
        "fullcodeline": "Stream_Write_UINT32(s, cache_bitmap_v3->key2);       /* key2 (4 bytes) */"
    },
    {
        "line": 18,
        "fullcodeline": "Stream_Write_UINT8(s, bitmapData->bpp);"
    },
    {
        "line": 19,
        "fullcodeline": "Stream_Write_UINT8(s, 0);                   /* reserved1 (1 byte) */"
    },
    {
        "line": 20,
        "fullcodeline": "Stream_Write_UINT8(s, 0);                   /* reserved2 (1 byte) */"
    },
    {
        "line": 21,
        "fullcodeline": "Stream_Write_UINT8(s, bitmapData->codecID); /* codecID (1 byte) */"
    },
    {
        "line": 22,
        "fullcodeline": "Stream_Write_UINT16(s, bitmapData->width);  /* width (2 bytes) */"
    },
    {
        "line": 23,
        "fullcodeline": "Stream_Write_UINT16(s, bitmapData->height); /* height (2 bytes) */"
    },
    {
        "line": 24,
        "fullcodeline": "Stream_Write_UINT32(s, bitmapData->length); /* length (4 bytes) */"
    },
    {
        "line": 25,
        "fullcodeline": "Stream_Write(s, bitmapData->data, bitmapData->length);"
    },
    {
        "line": 7,
        "fullcodeline": "if (!Stream_EnsureRemainingCapacity("
    },
    {
        "line": 14,
        "fullcodeline": "((cache_bitmap_v3->flags << 7) & 0x0000FF80) | ((bitsPerPixelId << 3) & 0x00000078);"
    },
    {
        "line": 8,
        "fullcodeline": "s, update_approximate_cache_bitmap_v3_order(cache_bitmap_v3, flags)))"
    }
]