[
    {
        "line": 19,
        "fullcodeline": "*codestream_index = (opj_codestream_index_t *) NULL;"
    },
    {
        "line": 37,
        "fullcodeline": "sans[4];"
    },
    {
        "line": 42,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 43,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 47,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 48,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 49,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 50,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 72,
        "fullcodeline": "opj_set_warning_handler(jp2_codec,JP2WarningHandler,exception);"
    },
    {
        "line": 73,
        "fullcodeline": "opj_set_error_handler(jp2_codec,JP2ErrorHandler,exception);"
    },
    {
        "line": 74,
        "fullcodeline": "opj_set_default_decoder_parameters(&parameters);"
    },
    {
        "line": 75,
        "fullcodeline": "option=GetImageOption(image_info,\"jp2:reduce-factor\");"
    },
    {
        "line": 78,
        "fullcodeline": "option=GetImageOption(image_info,\"jp2:quality-layers\");"
    },
    {
        "line": 86,
        "fullcodeline": "jp2_stream=opj_stream_create(OPJ_J2K_STREAM_CHUNK_SIZE,1);"
    },
    {
        "line": 87,
        "fullcodeline": "opj_stream_set_read_function(jp2_stream,JP2ReadHandler);"
    },
    {
        "line": 88,
        "fullcodeline": "opj_stream_set_write_function(jp2_stream,JP2WriteHandler);"
    },
    {
        "line": 89,
        "fullcodeline": "opj_stream_set_seek_function(jp2_stream,JP2SeekHandler);"
    },
    {
        "line": 90,
        "fullcodeline": "opj_stream_set_skip_function(jp2_stream,JP2SkipHandler);"
    },
    {
        "line": 91,
        "fullcodeline": "opj_stream_set_user_data(jp2_stream,image,NULL);"
    },
    {
        "line": 92,
        "fullcodeline": "opj_stream_set_user_data_length(jp2_stream,GetBlobSize(image));"
    },
    {
        "line": 99,
        "fullcodeline": "jp2_status=1;"
    },
    {
        "line": 152,
        "fullcodeline": "image->columns=(size_t) jp2_image->comps[0].w;"
    },
    {
        "line": 153,
        "fullcodeline": "image->rows=(size_t) jp2_image->comps[0].h;"
    },
    {
        "line": 154,
        "fullcodeline": "image->depth=jp2_image->comps[0].prec;"
    },
    {
        "line": 155,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 158,
        "fullcodeline": "image->compression=JPEG2000Compression;"
    },
    {
        "line": 44,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 51,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 64,
        "fullcodeline": "(void) SeekBlob(image,SEEK_SET,0);"
    },
    {
        "line": 76,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 79,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 135,
        "fullcodeline": "for (i=0; i < (ssize_t) jp2_image->numcomps; i++)"
    },
    {
        "line": 156,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 159,
        "fullcodeline": "if (jp2_image->color_space == 2)"
    },
    {
        "line": 168,
        "fullcodeline": "if (jp2_image->numcomps > 3)"
    },
    {
        "line": 170,
        "fullcodeline": "if (jp2_image->icc_profile_buf != (unsigned char *) NULL)"
    },
    {
        "line": 180,
        "fullcodeline": "if (image->ping != MagickFalse)"
    },
    {
        "line": 187,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 260,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 261,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 45,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 53,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 59,
        "fullcodeline": "if (ReadBlob(image,4,sans) != 4)"
    },
    {
        "line": 65,
        "fullcodeline": "if (LocaleCompare(image_info->magick,\"JPT\") == 0)"
    },
    {
        "line": 66,
        "fullcodeline": "jp2_codec=opj_create_decompress(OPJ_CODEC_JPT);"
    },
    {
        "line": 77,
        "fullcodeline": "parameters.cp_reduce=StringToInteger(option);"
    },
    {
        "line": 80,
        "fullcodeline": "parameters.cp_layer=StringToInteger(option);"
    },
    {
        "line": 81,
        "fullcodeline": "if (opj_setup_decoder(jp2_codec,&parameters) == 0)"
    },
    {
        "line": 83,
        "fullcodeline": "opj_destroy_codec(jp2_codec);"
    },
    {
        "line": 84,
        "fullcodeline": "ThrowReaderException(DelegateError,\"UnableToManageJP2Stream\");"
    },
    {
        "line": 93,
        "fullcodeline": "if (opj_read_header(jp2_stream,jp2_codec,&jp2_image) == 0)"
    },
    {
        "line": 95,
        "fullcodeline": "opj_stream_destroy(jp2_stream);"
    },
    {
        "line": 96,
        "fullcodeline": "opj_destroy_codec(jp2_codec);"
    },
    {
        "line": 97,
        "fullcodeline": "ThrowReaderException(DelegateError,\"UnableToDecodeImageFile\");"
    },
    {
        "line": 100,
        "fullcodeline": "if ((image->columns != 0) && (image->rows != 0))"
    },
    {
        "line": 105,
        "fullcodeline": "jp2_status=opj_set_decode_area(jp2_codec,jp2_image,"
    },
    {
        "line": 117,
        "fullcodeline": "if ((image_info->number_scenes != 0) && (image_info->scene != 0))"
    },
    {
        "line": 118,
        "fullcodeline": "jp2_status=opj_get_decoded_tile(jp2_codec,jp2_stream,jp2_image,"
    },
    {
        "line": 129,
        "fullcodeline": "opj_stream_destroy(jp2_stream);"
    },
    {
        "line": 130,
        "fullcodeline": "opj_destroy_codec(jp2_codec);"
    },
    {
        "line": 131,
        "fullcodeline": "opj_image_destroy(jp2_image);"
    },
    {
        "line": 161,
        "fullcodeline": "SetImageColorspace(image,GRAYColorspace,exception);"
    },
    {
        "line": 169,
        "fullcodeline": "image->alpha_trait=BlendPixelTrait;"
    },
    {
        "line": 175,
        "fullcodeline": "profile=BlobToStringInfo(jp2_image->icc_profile_buf,"
    },
    {
        "line": 195,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 249,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 54,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 61,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 62,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 109,
        "fullcodeline": "if (jp2_status == 0)"
    },
    {
        "line": 157,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 162,
        "fullcodeline": "if (jp2_image->numcomps > 1)"
    },
    {
        "line": 177,
        "fullcodeline": "if (profile != (StringInfo *) NULL)"
    },
    {
        "line": 185,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 196,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 198,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 247,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 251,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 68,
        "fullcodeline": "if (IsJ2K(sans,4) != MagickFalse)"
    },
    {
        "line": 107,
        "fullcodeline": "(OPJ_INT32) (image->extract_info.x+(ssize_t) image->columns),"
    },
    {
        "line": 108,
        "fullcodeline": "(OPJ_INT32) (image->extract_info.y+(ssize_t) image->rows));"
    },
    {
        "line": 111,
        "fullcodeline": "opj_stream_destroy(jp2_stream);"
    },
    {
        "line": 112,
        "fullcodeline": "opj_destroy_codec(jp2_codec);"
    },
    {
        "line": 113,
        "fullcodeline": "opj_image_destroy(jp2_image);"
    },
    {
        "line": 114,
        "fullcodeline": "ThrowReaderException(DelegateError,\"UnableToDecodeImageFile\");"
    },
    {
        "line": 119,
        "fullcodeline": "(unsigned int) image_info->scene-1);"
    },
    {
        "line": 121,
        "fullcodeline": "if (image->ping == MagickFalse)"
    },
    {
        "line": 137,
        "fullcodeline": "if ((jp2_image->comps[0].dx == 0) || (jp2_image->comps[0].dy == 0) ||"
    },
    {
        "line": 142,
        "fullcodeline": "((image->ping == MagickFalse) && (jp2_image->comps[i].data == NULL)))"
    },
    {
        "line": 144,
        "fullcodeline": "opj_destroy_codec(jp2_codec);"
    },
    {
        "line": 145,
        "fullcodeline": "opj_image_destroy(jp2_image);"
    },
    {
        "line": 146,
        "fullcodeline": "ThrowReaderException(CoderError,\"IrregularChannelGeometryNotSupported\")"
    },
    {
        "line": 163,
        "fullcodeline": "image->alpha_trait=BlendPixelTrait;"
    },
    {
        "line": 166,
        "fullcodeline": "if (jp2_image->color_space == 3)"
    },
    {
        "line": 178,
        "fullcodeline": "SetImageProfile(image,\"icc\",profile,exception);"
    },
    {
        "line": 245,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 69,
        "fullcodeline": "jp2_codec=opj_create_decompress(OPJ_CODEC_J2K);"
    },
    {
        "line": 123,
        "fullcodeline": "jp2_status=opj_decode(jp2_codec,jp2_stream,jp2_image);"
    },
    {
        "line": 141,
        "fullcodeline": "(jp2_image->comps[0].sgnd != jp2_image->comps[i].sgnd) ||"
    },
    {
        "line": 167,
        "fullcodeline": "SetImageColorspace(image,Rec601YCbCrColorspace,exception);"
    },
    {
        "line": 203,
        "fullcodeline": "for (i=0; i < (ssize_t) jp2_image->numcomps; i++)"
    },
    {
        "line": 71,
        "fullcodeline": "jp2_codec=opj_create_decompress(OPJ_CODEC_JP2);"
    },
    {
        "line": 124,
        "fullcodeline": "if (jp2_status != 0)"
    },
    {
        "line": 140,
        "fullcodeline": "(jp2_image->comps[0].prec != jp2_image->comps[i].prec) ||"
    },
    {
        "line": 209,
        "fullcodeline": "scale=QuantumRange/(double) ((1UL << jp2_image->comps[i].prec)-1);"
    },
    {
        "line": 210,
        "fullcodeline": "pixel=scale*(jp2_image->comps[i].data[y/jp2_image->comps[i].dy*"
    },
    {
        "line": 125,
        "fullcodeline": "jp2_status=opj_end_decompress(jp2_codec,jp2_stream);"
    },
    {
        "line": 139,
        "fullcodeline": "(jp2_image->comps[0].dy != jp2_image->comps[i].dy) ||"
    },
    {
        "line": 138,
        "fullcodeline": "(jp2_image->comps[0].dx != jp2_image->comps[i].dx) ||"
    },
    {
        "line": 217,
        "fullcodeline": "SetPixelRed(image,ClampToQuantum(pixel),q);"
    },
    {
        "line": 218,
        "fullcodeline": "SetPixelGreen(image,ClampToQuantum(pixel),q);"
    },
    {
        "line": 219,
        "fullcodeline": "SetPixelBlue(image,ClampToQuantum(pixel),q);"
    },
    {
        "line": 220,
        "fullcodeline": "SetPixelAlpha(image,OpaqueAlpha,q);"
    },
    {
        "line": 230,
        "fullcodeline": "SetPixelGreen(image,ClampToQuantum(pixel),q);"
    },
    {
        "line": 235,
        "fullcodeline": "SetPixelBlue(image,ClampToQuantum(pixel),q);"
    },
    {
        "line": 240,
        "fullcodeline": "SetPixelAlpha(image,ClampToQuantum(pixel),q);"
    },
    {
        "line": 212,
        "fullcodeline": "(jp2_image->comps[i].sgnd ? 1UL << (jp2_image->comps[i].prec-1) : 0));"
    },
    {
        "line": 225,
        "fullcodeline": "if (jp2_image->numcomps == 2)"
    },
    {
        "line": 211,
        "fullcodeline": "image->columns/jp2_image->comps[i].dx+x/jp2_image->comps[i].dx]+"
    },
    {
        "line": 227,
        "fullcodeline": "SetPixelAlpha(image,ClampToQuantum(pixel),q);"
    }
]