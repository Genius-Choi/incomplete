[
    {
        "line": 8,
        "fullcodeline": "char name[MAXHOSTNAMELEN];"
    },
    {
        "line": 9,
        "fullcodeline": "int have_v6_break = 0, in_v6_break = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "*subarray = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, sizeof(name) - 2);"
    },
    {
        "line": 17,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 19,
        "fullcodeline": "GETSHORT(type, cp);"
    },
    {
        "line": 20,
        "fullcodeline": "GETSHORT(class, cp);"
    },
    {
        "line": 21,
        "fullcodeline": "GETLONG(ttl, cp);"
    },
    {
        "line": 22,
        "fullcodeline": "GETSHORT(dlen, cp);"
    },
    {
        "line": 33,
        "fullcodeline": "ALLOC_INIT_ZVAL(*subarray);"
    },
    {
        "line": 34,
        "fullcodeline": "array_init(*subarray);"
    },
    {
        "line": 36,
        "fullcodeline": "add_assoc_string(*subarray, \"host\", name, 1);"
    },
    {
        "line": 37,
        "fullcodeline": "add_assoc_string(*subarray, \"class\", \"IN\", 1);"
    },
    {
        "line": 38,
        "fullcodeline": "add_assoc_long(*subarray, \"ttl\", ttl);"
    },
    {
        "line": 14,
        "fullcodeline": "if (n < 0) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (type_to_fetch != T_ANY && type != type_to_fetch) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (!store) {"
    },
    {
        "line": 24,
        "fullcodeline": "cp += dlen;"
    },
    {
        "line": 29,
        "fullcodeline": "cp += dlen;"
    },
    {
        "line": 41,
        "fullcodeline": "add_assoc_long(*subarray, \"type\", type);"
    },
    {
        "line": 42,
        "fullcodeline": "add_assoc_stringl(*subarray, \"data\", (char*) cp, (uint) dlen, 1);"
    },
    {
        "line": 43,
        "fullcodeline": "cp += dlen;"
    },
    {
        "line": 49,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"A\", 1);"
    },
    {
        "line": 50,
        "fullcodeline": "snprintf(name, sizeof(name), \"%d.%d.%d.%d\", cp[0], cp[1], cp[2], cp[3]);"
    },
    {
        "line": 51,
        "fullcodeline": "add_assoc_string(*subarray, \"ip\", name, 1);"
    },
    {
        "line": 52,
        "fullcodeline": "cp += dlen;"
    },
    {
        "line": 55,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"MX\", 1);"
    },
    {
        "line": 56,
        "fullcodeline": "GETSHORT(n, cp);"
    },
    {
        "line": 57,
        "fullcodeline": "add_assoc_long(*subarray, \"pri\", n);"
    },
    {
        "line": 73,
        "fullcodeline": "n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);"
    },
    {
        "line": 77,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 78,
        "fullcodeline": "add_assoc_string(*subarray, \"target\", name, 1);"
    },
    {
        "line": 82,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"HINFO\", 1);"
    },
    {
        "line": 83,
        "fullcodeline": "n = *cp & 0xFF;"
    },
    {
        "line": 84,
        "fullcodeline": "cp++;"
    },
    {
        "line": 85,
        "fullcodeline": "add_assoc_stringl(*subarray, \"cpu\", (char*)cp, n, 1);"
    },
    {
        "line": 86,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 87,
        "fullcodeline": "n = *cp & 0xFF;"
    },
    {
        "line": 88,
        "fullcodeline": "cp++;"
    },
    {
        "line": 89,
        "fullcodeline": "add_assoc_stringl(*subarray, \"os\", (char*)cp, n, 1);"
    },
    {
        "line": 90,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 117,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"SOA\", 1);"
    },
    {
        "line": 118,
        "fullcodeline": "n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) -2);"
    },
    {
        "line": 122,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 123,
        "fullcodeline": "add_assoc_string(*subarray, \"mname\", name, 1);"
    },
    {
        "line": 124,
        "fullcodeline": "n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) -2);"
    },
    {
        "line": 128,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 129,
        "fullcodeline": "add_assoc_string(*subarray, \"rname\", name, 1);"
    },
    {
        "line": 130,
        "fullcodeline": "GETLONG(n, cp);"
    },
    {
        "line": 131,
        "fullcodeline": "add_assoc_long(*subarray, \"serial\", n);"
    },
    {
        "line": 132,
        "fullcodeline": "GETLONG(n, cp);"
    },
    {
        "line": 133,
        "fullcodeline": "add_assoc_long(*subarray, \"refresh\", n);"
    },
    {
        "line": 134,
        "fullcodeline": "GETLONG(n, cp);"
    },
    {
        "line": 135,
        "fullcodeline": "add_assoc_long(*subarray, \"retry\", n);"
    },
    {
        "line": 136,
        "fullcodeline": "GETLONG(n, cp);"
    },
    {
        "line": 137,
        "fullcodeline": "add_assoc_long(*subarray, \"expire\", n);"
    },
    {
        "line": 138,
        "fullcodeline": "GETLONG(n, cp);"
    },
    {
        "line": 139,
        "fullcodeline": "add_assoc_long(*subarray, \"minimum-ttl\", n);"
    },
    {
        "line": 142,
        "fullcodeline": "tp = (u_char*)name;"
    },
    {
        "line": 170,
        "fullcodeline": "tp[0] = '\\0';"
    },
    {
        "line": 171,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"AAAA\", 1);"
    },
    {
        "line": 172,
        "fullcodeline": "add_assoc_string(*subarray, \"ipv6\", name, 1);"
    },
    {
        "line": 175,
        "fullcodeline": "p = cp;"
    },
    {
        "line": 176,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"A6\", 1);"
    },
    {
        "line": 177,
        "fullcodeline": "n = ((int)cp[0]) & 0xFF;"
    },
    {
        "line": 178,
        "fullcodeline": "cp++;"
    },
    {
        "line": 179,
        "fullcodeline": "add_assoc_long(*subarray, \"masklen\", n);"
    },
    {
        "line": 180,
        "fullcodeline": "tp = (u_char*)name;"
    },
    {
        "line": 238,
        "fullcodeline": "tp[0] = '\\0';"
    },
    {
        "line": 239,
        "fullcodeline": "add_assoc_string(*subarray, \"ipv6\", name, 1);"
    },
    {
        "line": 250,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"SRV\", 1);"
    },
    {
        "line": 251,
        "fullcodeline": "GETSHORT(n, cp);"
    },
    {
        "line": 252,
        "fullcodeline": "add_assoc_long(*subarray, \"pri\", n);"
    },
    {
        "line": 253,
        "fullcodeline": "GETSHORT(n, cp);"
    },
    {
        "line": 254,
        "fullcodeline": "add_assoc_long(*subarray, \"weight\", n);"
    },
    {
        "line": 255,
        "fullcodeline": "GETSHORT(n, cp);"
    },
    {
        "line": 256,
        "fullcodeline": "add_assoc_long(*subarray, \"port\", n);"
    },
    {
        "line": 257,
        "fullcodeline": "n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);"
    },
    {
        "line": 261,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 262,
        "fullcodeline": "add_assoc_string(*subarray, \"target\", name, 1);"
    },
    {
        "line": 265,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"NAPTR\", 1);"
    },
    {
        "line": 266,
        "fullcodeline": "GETSHORT(n, cp);"
    },
    {
        "line": 267,
        "fullcodeline": "add_assoc_long(*subarray, \"order\", n);"
    },
    {
        "line": 268,
        "fullcodeline": "GETSHORT(n, cp);"
    },
    {
        "line": 269,
        "fullcodeline": "add_assoc_long(*subarray, \"pref\", n);"
    },
    {
        "line": 270,
        "fullcodeline": "n = (cp[0] & 0xFF);"
    },
    {
        "line": 271,
        "fullcodeline": "add_assoc_stringl(*subarray, \"flags\", (char*)++cp, n, 1);"
    },
    {
        "line": 272,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 273,
        "fullcodeline": "n = (cp[0] & 0xFF);"
    },
    {
        "line": 274,
        "fullcodeline": "add_assoc_stringl(*subarray, \"services\", (char*)++cp, n, 1);"
    },
    {
        "line": 275,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 276,
        "fullcodeline": "n = (cp[0] & 0xFF);"
    },
    {
        "line": 277,
        "fullcodeline": "add_assoc_stringl(*subarray, \"regex\", (char*)++cp, n, 1);"
    },
    {
        "line": 278,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 279,
        "fullcodeline": "n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);"
    },
    {
        "line": 283,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 284,
        "fullcodeline": "add_assoc_string(*subarray, \"replacement\", name, 1);"
    },
    {
        "line": 287,
        "fullcodeline": "zval_ptr_dtor(subarray);"
    },
    {
        "line": 288,
        "fullcodeline": "*subarray = NULL;"
    },
    {
        "line": 289,
        "fullcodeline": "cp += dlen;"
    },
    {
        "line": 60,
        "fullcodeline": "if (type == DNS_T_CNAME) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (type == DNS_T_NS) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (type == DNS_T_PTR) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (n < 0) {"
    },
    {
        "line": 94,
        "fullcodeline": "int ll = 0;"
    },
    {
        "line": 95,
        "fullcodeline": "zval *entries = NULL;"
    },
    {
        "line": 97,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"TXT\", 1);"
    },
    {
        "line": 98,
        "fullcodeline": "tp = emalloc(dlen + 1);"
    },
    {
        "line": 100,
        "fullcodeline": "MAKE_STD_ZVAL(entries);"
    },
    {
        "line": 101,
        "fullcodeline": "array_init(entries);"
    },
    {
        "line": 109,
        "fullcodeline": "tp[dlen] = '\\0';"
    },
    {
        "line": 110,
        "fullcodeline": "cp += dlen;"
    },
    {
        "line": 112,
        "fullcodeline": "add_assoc_stringl(*subarray, \"txt\", tp, (dlen>0)?dlen - 1:0, 0);"
    },
    {
        "line": 113,
        "fullcodeline": "add_assoc_zval(*subarray, \"entries\", entries);"
    },
    {
        "line": 119,
        "fullcodeline": "if (n < 0) {"
    },
    {
        "line": 125,
        "fullcodeline": "if (n < 0) {"
    },
    {
        "line": 143,
        "fullcodeline": "for(i=0; i < 8; i++) {"
    },
    {
        "line": 166,
        "fullcodeline": "if (have_v6_break && in_v6_break) {"
    },
    {
        "line": 181,
        "fullcodeline": "if (n > 15) {"
    },
    {
        "line": 187,
        "fullcodeline": "if (n % 16 > 8) {"
    },
    {
        "line": 211,
        "fullcodeline": "for (i = (n + 8) / 16; i < 8; i++) {"
    },
    {
        "line": 234,
        "fullcodeline": "if (have_v6_break && in_v6_break) {"
    },
    {
        "line": 240,
        "fullcodeline": "if (cp < p + dlen) {"
    },
    {
        "line": 258,
        "fullcodeline": "if (n < 0) {"
    },
    {
        "line": 280,
        "fullcodeline": "if (n < 0) {"
    },
    {
        "line": 61,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"CNAME\", 1);"
    },
    {
        "line": 66,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"NS\", 1);"
    },
    {
        "line": 71,
        "fullcodeline": "add_assoc_string(*subarray, \"type\", \"PTR\", 1);"
    },
    {
        "line": 103,
        "fullcodeline": "while (ll < dlen) {"
    },
    {
        "line": 144,
        "fullcodeline": "GETSHORT(s, cp);"
    },
    {
        "line": 167,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 168,
        "fullcodeline": "tp++;"
    },
    {
        "line": 182,
        "fullcodeline": "have_v6_break = 1;"
    },
    {
        "line": 183,
        "fullcodeline": "in_v6_break = 1;"
    },
    {
        "line": 184,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 185,
        "fullcodeline": "tp++;"
    },
    {
        "line": 209,
        "fullcodeline": "cp++;"
    },
    {
        "line": 212,
        "fullcodeline": "GETSHORT(s, cp);"
    },
    {
        "line": 235,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 236,
        "fullcodeline": "tp++;"
    },
    {
        "line": 241,
        "fullcodeline": "n = dn_expand(answer->qb2, answer->qb2+65536, cp, name, (sizeof name) - 2);"
    },
    {
        "line": 245,
        "fullcodeline": "cp += n;"
    },
    {
        "line": 246,
        "fullcodeline": "add_assoc_string(*subarray, \"chain\", name, 1);"
    },
    {
        "line": 104,
        "fullcodeline": "n = cp[ll];"
    },
    {
        "line": 105,
        "fullcodeline": "memcpy(tp + ll , cp + ll + 1, n);"
    },
    {
        "line": 106,
        "fullcodeline": "add_next_index_stringl(entries, cp + ll + 1, n, 1);"
    },
    {
        "line": 107,
        "fullcodeline": "ll = ll + n + 1;"
    },
    {
        "line": 145,
        "fullcodeline": "if (s != 0) {"
    },
    {
        "line": 189,
        "fullcodeline": "if (cp[0] != 0) {"
    },
    {
        "line": 213,
        "fullcodeline": "if (s != 0) {"
    },
    {
        "line": 242,
        "fullcodeline": "if (n < 0) {"
    },
    {
        "line": 151,
        "fullcodeline": "tp += sprintf((char*)tp,\"%x\",s);"
    },
    {
        "line": 195,
        "fullcodeline": "sprintf((char*)tp, \"%x\", cp[0] & 0xFF);"
    },
    {
        "line": 219,
        "fullcodeline": "tp += sprintf((char*)tp,\"%x\",s);"
    },
    {
        "line": 146,
        "fullcodeline": "if (tp > (u_char *)name) {"
    },
    {
        "line": 190,
        "fullcodeline": "if (tp > (u_char *)name) {"
    },
    {
        "line": 214,
        "fullcodeline": "if (tp > (u_char *)name) {"
    },
    {
        "line": 147,
        "fullcodeline": "in_v6_break = 0;"
    },
    {
        "line": 148,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 149,
        "fullcodeline": "tp++;"
    },
    {
        "line": 153,
        "fullcodeline": "if (!have_v6_break) {"
    },
    {
        "line": 191,
        "fullcodeline": "in_v6_break = 0;"
    },
    {
        "line": 192,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 193,
        "fullcodeline": "tp++;"
    },
    {
        "line": 197,
        "fullcodeline": "if (!have_v6_break) {"
    },
    {
        "line": 215,
        "fullcodeline": "in_v6_break = 0;"
    },
    {
        "line": 216,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 217,
        "fullcodeline": "tp++;"
    },
    {
        "line": 221,
        "fullcodeline": "if (!have_v6_break) {"
    },
    {
        "line": 154,
        "fullcodeline": "have_v6_break = 1;"
    },
    {
        "line": 155,
        "fullcodeline": "in_v6_break = 1;"
    },
    {
        "line": 156,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 157,
        "fullcodeline": "tp++;"
    },
    {
        "line": 198,
        "fullcodeline": "have_v6_break = 1;"
    },
    {
        "line": 199,
        "fullcodeline": "in_v6_break = 1;"
    },
    {
        "line": 200,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 201,
        "fullcodeline": "tp++;"
    },
    {
        "line": 222,
        "fullcodeline": "have_v6_break = 1;"
    },
    {
        "line": 223,
        "fullcodeline": "in_v6_break = 1;"
    },
    {
        "line": 224,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 225,
        "fullcodeline": "tp++;"
    },
    {
        "line": 158,
        "fullcodeline": "} else if (!in_v6_break) {"
    },
    {
        "line": 202,
        "fullcodeline": "} else if (!in_v6_break) {"
    },
    {
        "line": 226,
        "fullcodeline": "} else if (!in_v6_break) {"
    },
    {
        "line": 159,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 160,
        "fullcodeline": "tp++;"
    },
    {
        "line": 161,
        "fullcodeline": "tp[0] = '0';"
    },
    {
        "line": 162,
        "fullcodeline": "tp++;"
    },
    {
        "line": 203,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 204,
        "fullcodeline": "tp++;"
    },
    {
        "line": 205,
        "fullcodeline": "tp[0] = '0';"
    },
    {
        "line": 206,
        "fullcodeline": "tp++;"
    },
    {
        "line": 227,
        "fullcodeline": "tp[0] = ':';"
    },
    {
        "line": 228,
        "fullcodeline": "tp++;"
    },
    {
        "line": 229,
        "fullcodeline": "tp[0] = '0';"
    },
    {
        "line": 230,
        "fullcodeline": "tp++;"
    }
]