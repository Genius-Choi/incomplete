[
    {
        "line": 4,
        "fullcodeline": "long\ti = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "static subflags_T subflags = {FALSE, FALSE, FALSE, TRUE, FALSE,"
    },
    {
        "line": 13,
        "fullcodeline": "char_u\t*pat = NULL, *sub = NULL;\t// init for GCC"
    },
    {
        "line": 16,
        "fullcodeline": "int\t\tgot_quit = FALSE;"
    },
    {
        "line": 17,
        "fullcodeline": "int\t\tgot_match = FALSE;"
    },
    {
        "line": 22,
        "fullcodeline": "linenr_T\tfirst_line = 0;\t\t// first changed line"
    },
    {
        "line": 23,
        "fullcodeline": "linenr_T\tlast_line= 0;\t\t// below last changed line AFTER the"
    },
    {
        "line": 29,
        "fullcodeline": "int\t\tendcolumn = FALSE;\t// cursor in last column when done"
    },
    {
        "line": 36,
        "fullcodeline": "cmd = eap->arg;"
    },
    {
        "line": 42,
        "fullcodeline": "start_nsubs = sub_nsubs;"
    },
    {
        "line": 246,
        "fullcodeline": "save_do_all = subflags.do_all;"
    },
    {
        "line": 247,
        "fullcodeline": "save_do_ask = subflags.do_ask;"
    },
    {
        "line": 252,
        "fullcodeline": "cmd = skipwhite(cmd);"
    },
    {
        "line": 270,
        "fullcodeline": "cmd = skipwhite(cmd);"
    },
    {
        "line": 304,
        "fullcodeline": "sub_firstline = NULL;"
    },
    {
        "line": 317,
        "fullcodeline": "line2 = eap->line2;"
    },
    {
        "line": 1065,
        "fullcodeline": "vim_free(sub_firstline); // may have to free allocated copy of the line"
    },
    {
        "line": 1116,
        "fullcodeline": "vim_regfree(regmatch.regprog);"
    },
    {
        "line": 1119,
        "fullcodeline": "subflags.do_all = save_do_all;"
    },
    {
        "line": 1120,
        "fullcodeline": "subflags.do_ask = save_do_ask;"
    },
    {
        "line": 37,
        "fullcodeline": "if (!global_busy)"
    },
    {
        "line": 44,
        "fullcodeline": "if (eap->cmdidx == CMD_tilde)"
    },
    {
        "line": 50,
        "fullcodeline": "if (eap->cmd[0] == 's' && *cmd != NUL && !VIM_ISWHITE(*cmd)"
    },
    {
        "line": 137,
        "fullcodeline": "if (pat != NULL && STRCMP(pat, \"\\\\n\") == 0"
    },
    {
        "line": 179,
        "fullcodeline": "if (*cmd == '&')"
    },
    {
        "line": 253,
        "fullcodeline": "if (VIM_ISDIGIT(*cmd))"
    },
    {
        "line": 271,
        "fullcodeline": "if (*cmd && *cmd != '\"')\t    // if not end-of-line or comment"
    },
    {
        "line": 284,
        "fullcodeline": "if (!subflags.do_count && !curbuf->b_p_ma)"
    },
    {
        "line": 291,
        "fullcodeline": "if (search_regcomp(pat, RE_SUBST, which_pat, SEARCH_HIS, &regmatch) == FAIL)"
    },
    {
        "line": 299,
        "fullcodeline": "if (subflags.do_ic == 'i')"
    },
    {
        "line": 311,
        "fullcodeline": "if (!(sub[0] == '\\\\' && sub[1] == '='))"
    },
    {
        "line": 318,
        "fullcodeline": "for (lnum = eap->line1; lnum <= line2 && !(got_quit"
    },
    {
        "line": 322,
        "fullcodeline": "); ++lnum)"
    },
    {
        "line": 1055,
        "fullcodeline": "if (first_line != 0)"
    },
    {
        "line": 1071,
        "fullcodeline": "if (sub_nsubs > start_nsubs)"
    },
    {
        "line": 39,
        "fullcodeline": "sub_nsubs = 0;"
    },
    {
        "line": 40,
        "fullcodeline": "sub_nlines = 0;"
    },
    {
        "line": 45,
        "fullcodeline": "which_pat = RE_LAST;\t// use last used regexp"
    },
    {
        "line": 51,
        "fullcodeline": "&& vim_strchr((char_u *)\"0123456789cegriIp|\\\"\", *cmd) == NULL)"
    },
    {
        "line": 95,
        "fullcodeline": "sub = cmd;\t    // remember the start of the substitution"
    },
    {
        "line": 96,
        "fullcodeline": "cmd = skip_substitute(cmd, delimiter);"
    },
    {
        "line": 139,
        "fullcodeline": "&& (*cmd == NUL || (cmd[1] == NUL && (*cmd == 'g' || *cmd == 'l'"
    },
    {
        "line": 146,
        "fullcodeline": "curwin->w_cursor.lnum = eap->line1;"
    },
    {
        "line": 156,
        "fullcodeline": "joined_lines_count = eap->line2 - eap->line1 + 1;"
    },
    {
        "line": 171,
        "fullcodeline": "add_to_history(HIST_SEARCH, pat, TRUE, NUL);"
    },
    {
        "line": 180,
        "fullcodeline": "++cmd;"
    },
    {
        "line": 241,
        "fullcodeline": "++cmd;"
    },
    {
        "line": 244,
        "fullcodeline": "subflags.do_ask = FALSE;"
    },
    {
        "line": 255,
        "fullcodeline": "i = getdigits(&cmd);"
    },
    {
        "line": 261,
        "fullcodeline": "eap->line1 = eap->line2;"
    },
    {
        "line": 262,
        "fullcodeline": "eap->line2 += i - 1;"
    },
    {
        "line": 273,
        "fullcodeline": "set_nextcmd(eap, cmd);"
    },
    {
        "line": 287,
        "fullcodeline": "emsg(_(e_cannot_make_changes_modifiable_is_off));"
    },
    {
        "line": 300,
        "fullcodeline": "regmatch.rmm_ic = TRUE;"
    },
    {
        "line": 312,
        "fullcodeline": "sub = regtilde(sub, magic_isset());"
    },
    {
        "line": 324,
        "fullcodeline": "nmatch = vim_regexec_multi(&regmatch, curwin, curbuf, lnum,"
    },
    {
        "line": 1052,
        "fullcodeline": "line_breakcheck();"
    },
    {
        "line": 1060,
        "fullcodeline": "i = curbuf->b_ml.ml_line_count - old_line_count;"
    },
    {
        "line": 1061,
        "fullcodeline": "changed_lines(first_line, 0, last_line - i, i);"
    },
    {
        "line": 1069,
        "fullcodeline": "curwin->w_cursor = old_cursor;"
    },
    {
        "line": 47,
        "fullcodeline": "which_pat = RE_SUBST;\t// use last substitute regexp"
    },
    {
        "line": 54,
        "fullcodeline": "if (check_regexp_delim(*cmd) == FAIL)"
    },
    {
        "line": 67,
        "fullcodeline": "if (*cmd == '\\\\')"
    },
    {
        "line": 98,
        "fullcodeline": "if (!eap->skip)"
    },
    {
        "line": 138,
        "fullcodeline": "&& *sub == NUL"
    },
    {
        "line": 147,
        "fullcodeline": "if (*cmd == 'l')"
    },
    {
        "line": 157,
        "fullcodeline": "if (eap->line2 < curbuf->b_ml.ml_line_count)"
    },
    {
        "line": 159,
        "fullcodeline": "if (joined_lines_count > 1)"
    },
    {
        "line": 168,
        "fullcodeline": "if ((cmdmod.cmod_flags & CMOD_KEEPPATTERNS) == 0)"
    },
    {
        "line": 200,
        "fullcodeline": "subflags.do_error = TRUE;"
    },
    {
        "line": 201,
        "fullcodeline": "subflags.do_print = FALSE;"
    },
    {
        "line": 202,
        "fullcodeline": "subflags.do_list = FALSE;"
    },
    {
        "line": 203,
        "fullcodeline": "subflags.do_count = FALSE;"
    },
    {
        "line": 204,
        "fullcodeline": "subflags.do_number = FALSE;"
    },
    {
        "line": 205,
        "fullcodeline": "subflags.do_ic = 0;"
    },
    {
        "line": 213,
        "fullcodeline": "if (*cmd == 'g')"
    },
    {
        "line": 256,
        "fullcodeline": "if (i <= 0 && !eap->skip && subflags.do_error)"
    },
    {
        "line": 263,
        "fullcodeline": "if (eap->line2 > curbuf->b_ml.ml_line_count)"
    },
    {
        "line": 274,
        "fullcodeline": "if (eap->nextcmd == NULL)"
    },
    {
        "line": 1073,
        "fullcodeline": "if ((cmdmod.cmod_flags & CMOD_LOCKMARKS) == 0)"
    },
    {
        "line": 1081,
        "fullcodeline": "if (!global_busy)"
    },
    {
        "line": 69,
        "fullcodeline": "++cmd;"
    },
    {
        "line": 77,
        "fullcodeline": "pat = (char_u *)\"\";\t\t    // empty search pattern"
    },
    {
        "line": 118,
        "fullcodeline": "else if (!eap->skip)\t// use previous pattern and substitution"
    },
    {
        "line": 148,
        "fullcodeline": "eap->flags = EXFLAG_LIST;"
    },
    {
        "line": 158,
        "fullcodeline": "++joined_lines_count;"
    },
    {
        "line": 161,
        "fullcodeline": "(void)do_join(joined_lines_count, FALSE, TRUE, FALSE, TRUE);"
    },
    {
        "line": 162,
        "fullcodeline": "sub_nsubs = joined_lines_count - 1;"
    },
    {
        "line": 163,
        "fullcodeline": "sub_nlines = 1;"
    },
    {
        "line": 164,
        "fullcodeline": "(void)do_sub_msg(FALSE);"
    },
    {
        "line": 165,
        "fullcodeline": "ex_may_print(eap);"
    },
    {
        "line": 169,
        "fullcodeline": "save_re_pat(RE_SUBST, pat, magic_isset());"
    },
    {
        "line": 192,
        "fullcodeline": "if (!p_ed)"
    },
    {
        "line": 214,
        "fullcodeline": "subflags.do_all = !subflags.do_all;"
    },
    {
        "line": 258,
        "fullcodeline": "emsg(_(e_positive_count_required));"
    },
    {
        "line": 264,
        "fullcodeline": "eap->line2 = curbuf->b_ml.ml_line_count;"
    },
    {
        "line": 276,
        "fullcodeline": "semsg(_(e_trailing_characters_str), cmd);"
    },
    {
        "line": 294,
        "fullcodeline": "emsg(_(e_invalid_command));"
    },
    {
        "line": 301,
        "fullcodeline": "else if (subflags.do_ic == 'I')"
    },
    {
        "line": 325,
        "fullcodeline": "(colnr_T)0, NULL, NULL);"
    },
    {
        "line": 330,
        "fullcodeline": "colnr_T\tprev_matchcol = MAXCOL;"
    },
    {
        "line": 331,
        "fullcodeline": "char_u\t*new_end, *new_start = NULL;"
    },
    {
        "line": 332,
        "fullcodeline": "unsigned\tnew_start_len = 0;"
    },
    {
        "line": 334,
        "fullcodeline": "int\t\tdid_sub = FALSE;"
    },
    {
        "line": 337,
        "fullcodeline": "long\tnmatch_tl = 0;\t// nr of lines matched below lnum"
    },
    {
        "line": 339,
        "fullcodeline": "int\t\tskip_match = FALSE;"
    },
    {
        "line": 391,
        "fullcodeline": "sub_firstlnum = lnum;"
    },
    {
        "line": 392,
        "fullcodeline": "copycol = 0;"
    },
    {
        "line": 393,
        "fullcodeline": "matchcol = 0;"
    },
    {
        "line": 1048,
        "fullcodeline": "vim_free(new_start);\t// for when substitute was cancelled"
    },
    {
        "line": 1049,
        "fullcodeline": "VIM_CLEAR(sub_firstline);\t// free the copy of the original line"
    },
    {
        "line": 1076,
        "fullcodeline": "curbuf->b_op_start.lnum = eap->line1;"
    },
    {
        "line": 1077,
        "fullcodeline": "curbuf->b_op_end.lnum = line2;"
    },
    {
        "line": 1078,
        "fullcodeline": "curbuf->b_op_start.col = curbuf->b_op_end.col = 0;"
    },
    {
        "line": 1097,
        "fullcodeline": "print_line(curwin->w_cursor.lnum,"
    },
    {
        "line": 1100,
        "fullcodeline": "else if (!global_busy)"
    },
    {
        "line": 70,
        "fullcodeline": "if (vim_strchr((char_u *)\"/?&\", *cmd) == NULL)"
    },
    {
        "line": 75,
        "fullcodeline": "if (*cmd != '&')"
    },
    {
        "line": 82,
        "fullcodeline": "which_pat = RE_LAST;\t    // use last used regexp"
    },
    {
        "line": 84,
        "fullcodeline": "pat = cmd;\t\t\t    // remember start of search pat"
    },
    {
        "line": 85,
        "fullcodeline": "cmd = skip_regexp_ex(cmd, delimiter, magic_isset(),"
    },
    {
        "line": 101,
        "fullcodeline": "if (STRCMP(sub, \"%\") == 0"
    },
    {
        "line": 125,
        "fullcodeline": "pat = NULL;\t\t// search_regcomp() will use previous pattern"
    },
    {
        "line": 126,
        "fullcodeline": "sub = old_sub;"
    },
    {
        "line": 130,
        "fullcodeline": "endcolumn = (curwin->w_curswant == MAXCOL);"
    },
    {
        "line": 140,
        "fullcodeline": "|| *cmd == 'p' || *cmd == '#'))))"
    },
    {
        "line": 198,
        "fullcodeline": "subflags.do_ask = FALSE;"
    },
    {
        "line": 302,
        "fullcodeline": "regmatch.rmm_ic = FALSE;"
    },
    {
        "line": 396,
        "fullcodeline": "if (!got_match)"
    },
    {
        "line": 1084,
        "fullcodeline": "if (!subflags.do_ask)"
    },
    {
        "line": 1091,
        "fullcodeline": "if (!do_sub_msg(subflags.do_count) && subflags.do_ask)"
    },
    {
        "line": 1095,
        "fullcodeline": "global_need_beginline = TRUE;"
    },
    {
        "line": 72,
        "fullcodeline": "emsg(_(e_backslash_should_be_followed_by));"
    },
    {
        "line": 76,
        "fullcodeline": "which_pat = RE_SEARCH;\t    // use last '/' pattern"
    },
    {
        "line": 78,
        "fullcodeline": "delimiter = *cmd++;\t\t    // remember delimiter character"
    },
    {
        "line": 87,
        "fullcodeline": "if (cmd[0] == delimiter)\t    // end delimiter found"
    },
    {
        "line": 102,
        "fullcodeline": "&& vim_strchr(p_cpo, CPO_SUBPERCENT) != NULL)"
    },
    {
        "line": 109,
        "fullcodeline": "sub = old_sub;"
    },
    {
        "line": 120,
        "fullcodeline": "if (old_sub == NULL)\t// there is no previous command"
    },
    {
        "line": 149,
        "fullcodeline": "else if (*cmd == '#')"
    },
    {
        "line": 215,
        "fullcodeline": "else if (*cmd == 'c')"
    },
    {
        "line": 398,
        "fullcodeline": "setpcmark();"
    },
    {
        "line": 399,
        "fullcodeline": "got_match = TRUE;"
    },
    {
        "line": 440,
        "fullcodeline": "curwin->w_cursor.lnum = lnum;"
    },
    {
        "line": 441,
        "fullcodeline": "do_again = FALSE;"
    },
    {
        "line": 469,
        "fullcodeline": "matchcol = regmatch.endpos[0].col;"
    },
    {
        "line": 470,
        "fullcodeline": "prev_matchcol = matchcol;"
    },
    {
        "line": 710,
        "fullcodeline": "curwin->w_cursor.col = regmatch.startpos[0].col;"
    },
    {
        "line": 728,
        "fullcodeline": "sublen = vim_regsub_multi(&regmatch,"
    },
    {
        "line": 786,
        "fullcodeline": "copy_len = regmatch.startpos[0].col - copycol;"
    },
    {
        "line": 787,
        "fullcodeline": "needed_len = copy_len + ((unsigned)STRLEN(p1)"
    },
    {
        "line": 829,
        "fullcodeline": "mch_memmove(new_end, sub_firstline + copycol, (size_t)copy_len);"
    },
    {
        "line": 830,
        "fullcodeline": "new_end += copy_len;"
    },
    {
        "line": 832,
        "fullcodeline": "(void)vim_regsub_multi(&regmatch,"
    },
    {
        "line": 835,
        "fullcodeline": "sub_nsubs++;"
    },
    {
        "line": 836,
        "fullcodeline": "did_sub = TRUE;"
    },
    {
        "line": 840,
        "fullcodeline": "curwin->w_cursor.col = 0;"
    },
    {
        "line": 857,
        "fullcodeline": "copycol = regmatch.endpos[0].col;"
    },
    {
        "line": 940,
        "fullcodeline": "lastone = (skip_match"
    },
    {
        "line": 947,
        "fullcodeline": "nmatch = -1;"
    },
    {
        "line": 1043,
        "fullcodeline": "line_breakcheck();"
    },
    {
        "line": 1047,
        "fullcodeline": "++sub_nlines;"
    },
    {
        "line": 1092,
        "fullcodeline": "msg(\"\");"
    },
    {
        "line": 83,
        "fullcodeline": "delimiter = *cmd++;\t\t    // remember delimiter character"
    },
    {
        "line": 88,
        "fullcodeline": "*cmd++ = NUL;\t\t    // replace it with a NUL"
    },
    {
        "line": 104,
        "fullcodeline": "if (old_sub == NULL)\t// there is no previous command"
    },
    {
        "line": 113,
        "fullcodeline": "vim_free(old_sub);"
    },
    {
        "line": 114,
        "fullcodeline": "old_sub = vim_strsave(sub);"
    },
    {
        "line": 122,
        "fullcodeline": "emsg(_(e_no_previous_substitute_regular_expression));"
    },
    {
        "line": 150,
        "fullcodeline": "eap->flags = EXFLAG_NR;"
    },
    {
        "line": 195,
        "fullcodeline": "subflags.do_all = TRUE;"
    },
    {
        "line": 216,
        "fullcodeline": "subflags.do_ask = !subflags.do_ask;"
    },
    {
        "line": 415,
        "fullcodeline": "if (regmatch.startpos[0].lnum > 0)"
    },
    {
        "line": 425,
        "fullcodeline": "if (lnum > curbuf->b_ml.ml_line_count)"
    },
    {
        "line": 428,
        "fullcodeline": "if (sub_firstline == NULL)"
    },
    {
        "line": 448,
        "fullcodeline": "if (matchcol == prev_matchcol"
    },
    {
        "line": 747,
        "fullcodeline": "if (nmatch > curbuf->b_ml.ml_line_count - sub_firstlnum + 1)"
    },
    {
        "line": 760,
        "fullcodeline": "if (nmatch == 1)"
    },
    {
        "line": 789,
        "fullcodeline": "if (new_start == NULL)"
    },
    {
        "line": 844,
        "fullcodeline": "if (nmatch > 1)"
    },
    {
        "line": 876,
        "fullcodeline": "for (p1 = new_end; *p1; ++p1)"
    },
    {
        "line": 958,
        "fullcodeline": "if (lastone"
    },
    {
        "line": 1103,
        "fullcodeline": "emsg(_(e_interrupted));"
    },
    {
        "line": 106,
        "fullcodeline": "emsg(_(e_no_previous_substitute_regular_expression));"
    },
    {
        "line": 197,
        "fullcodeline": "subflags.do_all = FALSE;"
    },
    {
        "line": 417,
        "fullcodeline": "lnum += regmatch.startpos[0].lnum;"
    },
    {
        "line": 418,
        "fullcodeline": "sub_firstlnum += regmatch.startpos[0].lnum;"
    },
    {
        "line": 419,
        "fullcodeline": "nmatch -= regmatch.startpos[0].lnum;"
    },
    {
        "line": 420,
        "fullcodeline": "VIM_CLEAR(sub_firstline);"
    },
    {
        "line": 430,
        "fullcodeline": "sub_firstline = vim_strsave(ml_get(sub_firstlnum));"
    },
    {
        "line": 450,
        "fullcodeline": "&& matchcol == regmatch.endpos[0].col)"
    },
    {
        "line": 488,
        "fullcodeline": "sub_nsubs++;"
    },
    {
        "line": 489,
        "fullcodeline": "did_sub = TRUE;"
    },
    {
        "line": 500,
        "fullcodeline": "int typed = 0;"
    },
    {
        "line": 504,
        "fullcodeline": "save_State = State;"
    },
    {
        "line": 505,
        "fullcodeline": "State = CONFIRM;"
    },
    {
        "line": 506,
        "fullcodeline": "setmouse();\t\t// disable mouse in xterm"
    },
    {
        "line": 507,
        "fullcodeline": "curwin->w_cursor.col = regmatch.startpos[0].col;"
    },
    {
        "line": 685,
        "fullcodeline": "State = save_State;"
    },
    {
        "line": 686,
        "fullcodeline": "setmouse();"
    },
    {
        "line": 729,
        "fullcodeline": "sub_firstlnum - regmatch.startpos[0].lnum,"
    },
    {
        "line": 749,
        "fullcodeline": "nmatch = curbuf->b_ml.ml_line_count - sub_firstlnum + 1;"
    },
    {
        "line": 750,
        "fullcodeline": "skip_match = TRUE;"
    },
    {
        "line": 762,
        "fullcodeline": "p1 = sub_firstline;"
    },
    {
        "line": 796,
        "fullcodeline": "new_start_len = needed_len + 50;"
    },
    {
        "line": 799,
        "fullcodeline": "*new_start = NUL;"
    },
    {
        "line": 800,
        "fullcodeline": "new_end = new_start;"
    },
    {
        "line": 833,
        "fullcodeline": "sub_firstlnum - regmatch.startpos[0].lnum,"
    },
    {
        "line": 846,
        "fullcodeline": "sub_firstlnum += nmatch - 1;"
    },
    {
        "line": 847,
        "fullcodeline": "vim_free(sub_firstline);"
    },
    {
        "line": 848,
        "fullcodeline": "sub_firstline = vim_strsave(ml_get(sub_firstlnum));"
    },
    {
        "line": 863,
        "fullcodeline": "vim_free(sub_firstline);"
    },
    {
        "line": 864,
        "fullcodeline": "sub_firstline = vim_strsave((char_u *)\"\");"
    },
    {
        "line": 865,
        "fullcodeline": "copycol = 0;"
    },
    {
        "line": 945,
        "fullcodeline": "|| (sub_firstline[matchcol] == NUL && nmatch <= 1"
    },
    {
        "line": 963,
        "fullcodeline": "|| regmatch.startpos[0].lnum > 0)"
    },
    {
        "line": 1087,
        "fullcodeline": "coladvance((colnr_T)MAXCOL);"
    },
    {
        "line": 151,
        "fullcodeline": "else if (*cmd == 'p')"
    },
    {
        "line": 217,
        "fullcodeline": "else if (*cmd == 'n')"
    },
    {
        "line": 431,
        "fullcodeline": "if (sub_firstline == NULL)"
    },
    {
        "line": 449,
        "fullcodeline": "&& regmatch.endpos[0].lnum == 0"
    },
    {
        "line": 452,
        "fullcodeline": "if (sub_firstline[matchcol] == NUL)"
    },
    {
        "line": 482,
        "fullcodeline": "if (nmatch > 1)"
    },
    {
        "line": 513,
        "fullcodeline": "if (vim_strchr(p_cpo, CPO_UNDO) != NULL)"
    },
    {
        "line": 687,
        "fullcodeline": "if (vim_strchr(p_cpo, CPO_UNDO) != NULL)"
    },
    {
        "line": 690,
        "fullcodeline": "if (typed == 'n')"
    },
    {
        "line": 783,
        "fullcodeline": "p1 = ml_get(sub_firstlnum + nmatch - 1);"
    },
    {
        "line": 784,
        "fullcodeline": "nmatch_tl += nmatch - 1;"
    },
    {
        "line": 797,
        "fullcodeline": "if ((new_start = alloc(new_start_len)) == NULL)"
    },
    {
        "line": 809,
        "fullcodeline": "len = (unsigned)STRLEN(new_start);"
    },
    {
        "line": 810,
        "fullcodeline": "needed_len += len;"
    },
    {
        "line": 823,
        "fullcodeline": "new_end = new_start + len;"
    },
    {
        "line": 850,
        "fullcodeline": "if (sub_firstlnum <= line2)"
    },
    {
        "line": 878,
        "fullcodeline": "if (p1[0] == '\\\\' && p1[1] != NUL)  // remove backslash"
    },
    {
        "line": 944,
        "fullcodeline": "|| !(subflags.do_all || do_again)"
    },
    {
        "line": 946,
        "fullcodeline": "&& !re_multiline(regmatch.regprog)));"
    },
    {
        "line": 960,
        "fullcodeline": "|| (nmatch = vim_regexec_multi(&regmatch, curwin,"
    },
    {
        "line": 965,
        "fullcodeline": "if (new_start != NULL)"
    },
    {
        "line": 1025,
        "fullcodeline": "if (nmatch == -1 && !lastone)"
    },
    {
        "line": 1032,
        "fullcodeline": "if (nmatch <= 0)"
    },
    {
        "line": 1089,
        "fullcodeline": "beginline(BL_WHITE | BL_FIX);"
    },
    {
        "line": 152,
        "fullcodeline": "eap->flags = EXFLAG_PRINT;"
    },
    {
        "line": 218,
        "fullcodeline": "subflags.do_count = TRUE;"
    },
    {
        "line": 433,
        "fullcodeline": "vim_free(new_start);"
    },
    {
        "line": 455,
        "fullcodeline": "skip_match = TRUE;"
    },
    {
        "line": 484,
        "fullcodeline": "matchcol = (colnr_T)STRLEN(sub_firstline);"
    },
    {
        "line": 485,
        "fullcodeline": "nmatch = 1;"
    },
    {
        "line": 486,
        "fullcodeline": "skip_match = TRUE;"
    },
    {
        "line": 509,
        "fullcodeline": "do_check_cursorbind();"
    },
    {
        "line": 514,
        "fullcodeline": "++no_u_sync;"
    },
    {
        "line": 654,
        "fullcodeline": "need_wait_return = FALSE; // no hit-return prompt"
    },
    {
        "line": 688,
        "fullcodeline": "--no_u_sync;"
    },
    {
        "line": 811,
        "fullcodeline": "if (needed_len > (int)new_start_len)"
    },
    {
        "line": 851,
        "fullcodeline": "do_again = TRUE;"
    },
    {
        "line": 880,
        "fullcodeline": "STRMOVE(p1, p1 + 1);"
    },
    {
        "line": 943,
        "fullcodeline": "|| lnum > line2"
    },
    {
        "line": 959,
        "fullcodeline": "|| nmatch_tl > 0"
    },
    {
        "line": 974,
        "fullcodeline": "STRCAT(new_start, sub_firstline + copycol);"
    },
    {
        "line": 975,
        "fullcodeline": "matchcol = (colnr_T)STRLEN(sub_firstline) - matchcol;"
    },
    {
        "line": 976,
        "fullcodeline": "prev_matchcol = (colnr_T)STRLEN(sub_firstline)"
    },
    {
        "line": 981,
        "fullcodeline": "ml_replace(lnum, new_start, TRUE);"
    },
    {
        "line": 1016,
        "fullcodeline": "sub_firstlnum = lnum;"
    },
    {
        "line": 1017,
        "fullcodeline": "vim_free(sub_firstline);    // free the temp buffer"
    },
    {
        "line": 1018,
        "fullcodeline": "sub_firstline = new_start;"
    },
    {
        "line": 1019,
        "fullcodeline": "new_start = NULL;"
    },
    {
        "line": 1020,
        "fullcodeline": "matchcol = (colnr_T)STRLEN(sub_firstline) - matchcol;"
    },
    {
        "line": 1021,
        "fullcodeline": "prev_matchcol = (colnr_T)STRLEN(sub_firstline)"
    },
    {
        "line": 1023,
        "fullcodeline": "copycol = 0;"
    },
    {
        "line": 1026,
        "fullcodeline": "nmatch = vim_regexec_multi(&regmatch, curwin, curbuf,"
    },
    {
        "line": 1105,
        "fullcodeline": "msg(\"\");"
    },
    {
        "line": 655,
        "fullcodeline": "if (typed == 'q' || typed == ESC || typed == Ctrl_C"
    },
    {
        "line": 664,
        "fullcodeline": "if (typed == 'n')"
    },
    {
        "line": 666,
        "fullcodeline": "if (typed == 'y')"
    },
    {
        "line": 668,
        "fullcodeline": "if (typed == 'l')"
    },
    {
        "line": 675,
        "fullcodeline": "if (typed == 'a')"
    },
    {
        "line": 680,
        "fullcodeline": "if (typed == Ctrl_E)"
    },
    {
        "line": 697,
        "fullcodeline": "if (nmatch > 1)"
    },
    {
        "line": 813,
        "fullcodeline": "new_start_len = needed_len + 50;"
    },
    {
        "line": 819,
        "fullcodeline": "mch_memmove(p1, new_start, (size_t)(len + 1));"
    },
    {
        "line": 820,
        "fullcodeline": "vim_free(new_start);"
    },
    {
        "line": 821,
        "fullcodeline": "new_start = p1;"
    },
    {
        "line": 853,
        "fullcodeline": "subflags.do_all = FALSE;"
    },
    {
        "line": 979,
        "fullcodeline": "if (u_savesub(lnum) != OK)"
    },
    {
        "line": 983,
        "fullcodeline": "if (nmatch_tl > 0)"
    },
    {
        "line": 1037,
        "fullcodeline": "if (nmatch == -1)"
    },
    {
        "line": 219,
        "fullcodeline": "else if (*cmd == 'e')"
    },
    {
        "line": 526,
        "fullcodeline": "print_line_no_prefix(lnum,"
    },
    {
        "line": 529,
        "fullcodeline": "getvcol(curwin, &curwin->w_cursor, &sc, NULL, NULL);"
    },
    {
        "line": 530,
        "fullcodeline": "curwin->w_cursor.col = regmatch.endpos[0].col - 1;"
    },
    {
        "line": 533,
        "fullcodeline": "getvcol(curwin, &curwin->w_cursor, NULL, NULL, &ec);"
    },
    {
        "line": 541,
        "fullcodeline": "msg_start();"
    },
    {
        "line": 547,
        "fullcodeline": "resp = getexmodeline('?', NULL, 0, TRUE);"
    },
    {
        "line": 661,
        "fullcodeline": "got_quit = TRUE;"
    },
    {
        "line": 671,
        "fullcodeline": "subflags.do_all = FALSE;"
    },
    {
        "line": 672,
        "fullcodeline": "line2 = lnum;"
    },
    {
        "line": 677,
        "fullcodeline": "subflags.do_ask = FALSE;"
    },
    {
        "line": 681,
        "fullcodeline": "scrollup_clamp();"
    },
    {
        "line": 699,
        "fullcodeline": "matchcol = (colnr_T)STRLEN(sub_firstline);"
    },
    {
        "line": 700,
        "fullcodeline": "skip_match = TRUE;"
    },
    {
        "line": 814,
        "fullcodeline": "if ((p1 = alloc(new_start_len)) == NULL)"
    },
    {
        "line": 893,
        "fullcodeline": "else if (*p1 == CAR)"
    },
    {
        "line": 991,
        "fullcodeline": "++lnum;"
    },
    {
        "line": 996,
        "fullcodeline": "mark_adjust(lnum, lnum + nmatch_tl - 1,"
    },
    {
        "line": 1000,
        "fullcodeline": "--lnum;"
    },
    {
        "line": 1001,
        "fullcodeline": "line2 -= nmatch_tl; // nr of lines decreases"
    },
    {
        "line": 1002,
        "fullcodeline": "nmatch_tl = 0;"
    },
    {
        "line": 1008,
        "fullcodeline": "changed_bytes(lnum, 0);"
    },
    {
        "line": 1038,
        "fullcodeline": "lnum -= regmatch.startpos[0].lnum;"
    },
    {
        "line": 220,
        "fullcodeline": "subflags.do_error = !subflags.do_error;"
    },
    {
        "line": 460,
        "fullcodeline": "matchcol += mb_ptr2len(sub_firstline + matchcol);"
    },
    {
        "line": 531,
        "fullcodeline": "if (curwin->w_cursor.col < 0)"
    },
    {
        "line": 535,
        "fullcodeline": "if (subflags.do_number || curwin->w_p_nu)"
    },
    {
        "line": 542,
        "fullcodeline": "for (i = 0; i < (long)sc; ++i)"
    },
    {
        "line": 543,
        "fullcodeline": "msg_putchar(' ');"
    },
    {
        "line": 544,
        "fullcodeline": "for ( ; i <= (long)ec; ++i)"
    },
    {
        "line": 545,
        "fullcodeline": "msg_putchar('^');"
    },
    {
        "line": 548,
        "fullcodeline": "if (resp != NULL)"
    },
    {
        "line": 556,
        "fullcodeline": "char_u *orig_line = NULL;"
    },
    {
        "line": 557,
        "fullcodeline": "int    len_change = 0;"
    },
    {
        "line": 558,
        "fullcodeline": "int\t   save_p_lz = p_lz;"
    },
    {
        "line": 566,
        "fullcodeline": "temp = RedrawingDisabled;"
    },
    {
        "line": 567,
        "fullcodeline": "RedrawingDisabled = 0;"
    },
    {
        "line": 570,
        "fullcodeline": "p_lz = FALSE;"
    },
    {
        "line": 602,
        "fullcodeline": "search_match_lines = regmatch.endpos[0].lnum"
    },
    {
        "line": 604,
        "fullcodeline": "search_match_endcol = regmatch.endpos[0].col"
    },
    {
        "line": 606,
        "fullcodeline": "highlight_match = TRUE;"
    },
    {
        "line": 608,
        "fullcodeline": "update_topline();"
    },
    {
        "line": 609,
        "fullcodeline": "validate_cursor();"
    },
    {
        "line": 610,
        "fullcodeline": "update_screen(SOME_VALID);"
    },
    {
        "line": 611,
        "fullcodeline": "highlight_match = FALSE;"
    },
    {
        "line": 612,
        "fullcodeline": "redraw_later(SOME_VALID);"
    },
    {
        "line": 619,
        "fullcodeline": "msg_starthere();"
    },
    {
        "line": 620,
        "fullcodeline": "i = msg_scroll;"
    },
    {
        "line": 621,
        "fullcodeline": "msg_scroll = 0;\t\t// truncate msg when"
    },
    {
        "line": 623,
        "fullcodeline": "msg_no_more = TRUE;"
    },
    {
        "line": 626,
        "fullcodeline": "smsg_attr(HL_ATTR(HLF_R),"
    },
    {
        "line": 628,
        "fullcodeline": "msg_no_more = FALSE;"
    },
    {
        "line": 629,
        "fullcodeline": "msg_scroll = i;"
    },
    {
        "line": 630,
        "fullcodeline": "showruler(TRUE);"
    },
    {
        "line": 631,
        "fullcodeline": "windgoto(msg_row, msg_col);"
    },
    {
        "line": 632,
        "fullcodeline": "RedrawingDisabled = temp;"
    },
    {
        "line": 637,
        "fullcodeline": "++no_mapping;\t// don't map this key"
    },
    {
        "line": 638,
        "fullcodeline": "++allow_keys;\t// allow special keys"
    },
    {
        "line": 639,
        "fullcodeline": "typed = plain_vgetc();"
    },
    {
        "line": 640,
        "fullcodeline": "--allow_keys;"
    },
    {
        "line": 641,
        "fullcodeline": "--no_mapping;"
    },
    {
        "line": 644,
        "fullcodeline": "msg_didout = FALSE;\t// don't scroll up"
    },
    {
        "line": 645,
        "fullcodeline": "msg_col = 0;"
    },
    {
        "line": 646,
        "fullcodeline": "gotocmdline(TRUE);"
    },
    {
        "line": 647,
        "fullcodeline": "p_lz = save_p_lz;"
    },
    {
        "line": 816,
        "fullcodeline": "vim_free(new_start);"
    },
    {
        "line": 992,
        "fullcodeline": "if (u_savedel(lnum, nmatch_tl) != OK)"
    },
    {
        "line": 994,
        "fullcodeline": "for (i = 0; i < nmatch_tl; ++i)"
    },
    {
        "line": 995,
        "fullcodeline": "ml_delete(lnum);"
    },
    {
        "line": 997,
        "fullcodeline": "(long)MAXLNUM, -nmatch_tl);"
    },
    {
        "line": 1013,
        "fullcodeline": "last_line = lnum + 1;"
    },
    {
        "line": 1107,
        "fullcodeline": "semsg(_(e_pattern_not_found_str), get_search_pat());"
    },
    {
        "line": 462,
        "fullcodeline": "++matchcol;"
    },
    {
        "line": 532,
        "fullcodeline": "curwin->w_cursor.col = 0;"
    },
    {
        "line": 537,
        "fullcodeline": "int numw = number_width(curwin) + 1;"
    },
    {
        "line": 538,
        "fullcodeline": "sc += numw;"
    },
    {
        "line": 539,
        "fullcodeline": "ec += numw;"
    },
    {
        "line": 551,
        "fullcodeline": "vim_free(resp);"
    },
    {
        "line": 572,
        "fullcodeline": "if (new_start != NULL)"
    },
    {
        "line": 617,
        "fullcodeline": "if (msg_row == Rows - 1)"
    },
    {
        "line": 627,
        "fullcodeline": "_(\"replace with %s (y/n/a/q/l/^E/^Y)?\"), sub);"
    },
    {
        "line": 650,
        "fullcodeline": "if (orig_line != NULL)"
    },
    {
        "line": 682,
        "fullcodeline": "else if (typed == Ctrl_Y)"
    },
    {
        "line": 895,
        "fullcodeline": "if (u_inssub(lnum) == OK)   // prepare for undo"
    },
    {
        "line": 999,
        "fullcodeline": "deleted_lines(lnum, nmatch_tl);"
    },
    {
        "line": 1011,
        "fullcodeline": "if (first_line == 0)"
    },
    {
        "line": 221,
        "fullcodeline": "else if (*cmd == 'r')\t    // use last used regexp"
    },
    {
        "line": 579,
        "fullcodeline": "orig_line = vim_strsave(ml_get(lnum));"
    },
    {
        "line": 618,
        "fullcodeline": "msg_didout = FALSE;\t// avoid a scroll-up"
    },
    {
        "line": 651,
        "fullcodeline": "ml_replace(lnum, orig_line, FALSE);"
    },
    {
        "line": 683,
        "fullcodeline": "scrolldown_clamp();"
    },
    {
        "line": 897,
        "fullcodeline": "colnr_T\tplen = (colnr_T)(p1 - new_start + 1);"
    },
    {
        "line": 899,
        "fullcodeline": "*p1 = NUL;\t\t    // truncate up to the CR"
    },
    {
        "line": 900,
        "fullcodeline": "ml_append(lnum - 1, new_start, plen, FALSE);"
    },
    {
        "line": 901,
        "fullcodeline": "mark_adjust(lnum + 1, (linenr_T)MAXLNUM, 1L, 0L);"
    },
    {
        "line": 914,
        "fullcodeline": "++sub_firstlnum;"
    },
    {
        "line": 915,
        "fullcodeline": "++lnum;"
    },
    {
        "line": 916,
        "fullcodeline": "++line2;"
    },
    {
        "line": 918,
        "fullcodeline": "++curwin->w_cursor.lnum;"
    },
    {
        "line": 920,
        "fullcodeline": "STRMOVE(new_start, p1 + 1);"
    },
    {
        "line": 921,
        "fullcodeline": "p1 = new_start - 1;"
    },
    {
        "line": 1012,
        "fullcodeline": "first_line = lnum;"
    },
    {
        "line": 222,
        "fullcodeline": "which_pat = RE_LAST;"
    },
    {
        "line": 580,
        "fullcodeline": "if (orig_line != NULL)"
    },
    {
        "line": 925,
        "fullcodeline": "p1 += (*mb_ptr2len)(p1) - 1;"
    },
    {
        "line": 582,
        "fullcodeline": "char_u *new_line = concat_str(new_start,"
    },
    {
        "line": 903,
        "fullcodeline": "appended_lines(lnum - 1, 1L);"
    },
    {
        "line": 223,
        "fullcodeline": "else if (*cmd == 'p')"
    },
    {
        "line": 585,
        "fullcodeline": "if (new_line == NULL)"
    },
    {
        "line": 908,
        "fullcodeline": "last_line = lnum + 1;"
    },
    {
        "line": 224,
        "fullcodeline": "subflags.do_print = TRUE;"
    },
    {
        "line": 583,
        "fullcodeline": "sub_firstline + copycol);"
    },
    {
        "line": 586,
        "fullcodeline": "VIM_CLEAR(orig_line);"
    },
    {
        "line": 906,
        "fullcodeline": "if (first_line == 0)"
    },
    {
        "line": 594,
        "fullcodeline": "len_change = (int)STRLEN(new_line)"
    },
    {
        "line": 596,
        "fullcodeline": "curwin->w_cursor.col += len_change;"
    },
    {
        "line": 597,
        "fullcodeline": "ml_replace(lnum, new_line, FALSE);"
    },
    {
        "line": 907,
        "fullcodeline": "first_line = lnum;"
    },
    {
        "line": 225,
        "fullcodeline": "else if (*cmd == '#')"
    },
    {
        "line": 227,
        "fullcodeline": "subflags.do_print = TRUE;"
    },
    {
        "line": 228,
        "fullcodeline": "subflags.do_number = TRUE;"
    },
    {
        "line": 595,
        "fullcodeline": "- (int)STRLEN(orig_line);"
    },
    {
        "line": 230,
        "fullcodeline": "else if (*cmd == 'l')"
    },
    {
        "line": 232,
        "fullcodeline": "subflags.do_print = TRUE;"
    },
    {
        "line": 233,
        "fullcodeline": "subflags.do_list = TRUE;"
    },
    {
        "line": 235,
        "fullcodeline": "else if (*cmd == 'i')\t    // ignore case"
    },
    {
        "line": 236,
        "fullcodeline": "subflags.do_ic = 'i';"
    },
    {
        "line": 237,
        "fullcodeline": "else if (*cmd == 'I')\t    // don't ignore case"
    },
    {
        "line": 238,
        "fullcodeline": "subflags.do_ic = 'I';"
    }
]