[
    {
        "line": 4,
        "fullcodeline": "struct msghdr msg = { };"
    },
    {
        "line": 6,
        "fullcodeline": "struct iovec iov = { };"
    },
    {
        "line": 7,
        "fullcodeline": "char null_byte = '\\0';"
    },
    {
        "line": 12,
        "fullcodeline": "iov.iov_base = &null_byte;"
    },
    {
        "line": 13,
        "fullcodeline": "iov.iov_len = 1;"
    },
    {
        "line": 15,
        "fullcodeline": "msg.msg_iov = &iov;"
    },
    {
        "line": 16,
        "fullcodeline": "msg.msg_iovlen = 1;"
    },
    {
        "line": 19,
        "fullcodeline": "msg.msg_control = malloc(msg.msg_controllen);"
    },
    {
        "line": 24,
        "fullcodeline": "memset(msg.msg_control, 0, msg.msg_controllen);"
    },
    {
        "line": 26,
        "fullcodeline": "bytes_read = recvmsg(sockfd, &msg, 0);"
    },
    {
        "line": 32,
        "fullcodeline": "cmsg = CMSG_FIRSTHDR(&msg);"
    },
    {
        "line": 42,
        "fullcodeline": "fd_count = (cmsg->cmsg_len - CMSG_LEN(0)) / sizeof(int);"
    },
    {
        "line": 46,
        "fullcodeline": "fd_payload = (int *)CMSG_DATA(cmsg);"
    },
    {
        "line": 47,
        "fullcodeline": "ret = dup3(*fd_payload, new_fd, O_CLOEXEC);"
    },
    {
        "line": 51,
        "fullcodeline": "free(msg.msg_control);"
    },
    {
        "line": 53,
        "fullcodeline": "ret = close(*fd_payload);"
    },
    {
        "line": 20,
        "fullcodeline": "if (msg.msg_control == NULL) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (bytes_read != 1)"
    },
    {
        "line": 29,
        "fullcodeline": "if (msg.msg_flags & MSG_CTRUNC)"
    },
    {
        "line": 33,
        "fullcodeline": "if (!cmsg)"
    },
    {
        "line": 36,
        "fullcodeline": "if (cmsg->cmsg_level != SOL_SOCKET)"
    },
    {
        "line": 39,
        "fullcodeline": "if (cmsg->cmsg_type != SCM_RIGHTS)"
    },
    {
        "line": 43,
        "fullcodeline": "if (fd_count != 1)"
    },
    {
        "line": 48,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 54,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 21,
        "fullcodeline": "bail(\"Can't allocate memory to receive fd.\");"
    },
    {
        "line": 28,
        "fullcodeline": "bail(\"failed to receive fd from unix socket %d\", sockfd);"
    },
    {
        "line": 30,
        "fullcodeline": "bail(\"received truncated control message from unix socket %d\", sockfd);"
    },
    {
        "line": 34,
        "fullcodeline": "bail(\"received message from unix socket %d without control message\", sockfd);"
    },
    {
        "line": 37,
        "fullcodeline": "bail(\"received unknown control message from unix socket %d: cmsg_level=%d\", sockfd, cmsg->cmsg_level);"
    },
    {
        "line": 40,
        "fullcodeline": "bail(\"received unknown control message from unix socket %d: cmsg_type=%d\", sockfd, cmsg->cmsg_type);"
    },
    {
        "line": 44,
        "fullcodeline": "bail(\"received control message from unix socket %d with too many fds: %d\", sockfd, fd_count);"
    },
    {
        "line": 49,
        "fullcodeline": "bail(\"cannot dup3 fd %d to %d\", *fd_payload, new_fd);"
    },
    {
        "line": 55,
        "fullcodeline": "bail(\"cannot close fd %d\", *fd_payload);"
    }
]