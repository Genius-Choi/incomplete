[
    {
        "line": 5,
        "fullcodeline": "int sync_child_pipe[2], sync_grandchild_pipe[2];"
    },
    {
        "line": 6,
        "fullcodeline": "struct nlconfig_t config = { 0 };"
    },
    {
        "line": 12,
        "fullcodeline": "setup_logpipe();"
    },
    {
        "line": 19,
        "fullcodeline": "pipenum = getenv_int(\"_LIBCONTAINER_INITPIPE\");"
    },
    {
        "line": 40,
        "fullcodeline": "write_log(DEBUG, \"=> nsexec container setup\");"
    },
    {
        "line": 43,
        "fullcodeline": "nl_parse(pipenum, &config);"
    },
    {
        "line": 51,
        "fullcodeline": "update_oom_score_adj(config.oom_score_adj, config.oom_score_adj_len);"
    },
    {
        "line": 129,
        "fullcodeline": "current_stage = setjmp(env);"
    },
    {
        "line": 540,
        "fullcodeline": "bail(\"should never be reached\");"
    },
    {
        "line": 20,
        "fullcodeline": "if (pipenum < 0) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (ensure_cloned_binary() < 0)"
    },
    {
        "line": 37,
        "fullcodeline": "if (write(pipenum, \"\", 1) != 1)"
    },
    {
        "line": 70,
        "fullcodeline": "if (socketpair(AF_LOCAL, SOCK_STREAM, 0, sync_child_pipe) < 0)"
    },
    {
        "line": 77,
        "fullcodeline": "if (socketpair(AF_LOCAL, SOCK_STREAM, 0, sync_grandchild_pipe) < 0)"
    },
    {
        "line": 31,
        "fullcodeline": "bail(\"could not ensure we are a cloned binary\");"
    },
    {
        "line": 38,
        "fullcodeline": "bail(\"could not inform the parent we are past initial setup\");"
    },
    {
        "line": 64,
        "fullcodeline": "write_log(DEBUG, \"set process as non-dumpable\");"
    },
    {
        "line": 71,
        "fullcodeline": "bail(\"failed to setup sync pipe between parent and child\");"
    },
    {
        "line": 78,
        "fullcodeline": "bail(\"failed to setup sync pipe between parent and grandchild\");"
    },
    {
        "line": 536,
        "fullcodeline": "bail(\"unknown stage '%d' for jump value\", current_stage);"
    },
    {
        "line": 65,
        "fullcodeline": "if (prctl(PR_SET_DUMPABLE, 0, 0, 0, 0) < 0)"
    },
    {
        "line": 140,
        "fullcodeline": "pid_t stage1_pid = -1, stage2_pid = -1;"
    },
    {
        "line": 144,
        "fullcodeline": "prctl(PR_SET_NAME, (unsigned long)\"runc:[0:PARENT]\", 0, 0, 0);"
    },
    {
        "line": 145,
        "fullcodeline": "write_log(DEBUG, \"~> nsexec stage-0\");"
    },
    {
        "line": 148,
        "fullcodeline": "write_log(DEBUG, \"spawn stage-1\");"
    },
    {
        "line": 149,
        "fullcodeline": "stage1_pid = clone_parent(&env, STAGE_CHILD);"
    },
    {
        "line": 153,
        "fullcodeline": "syncfd = sync_child_pipe[1];"
    },
    {
        "line": 161,
        "fullcodeline": "write_log(DEBUG, \"-> stage-1 synchronisation loop\");"
    },
    {
        "line": 162,
        "fullcodeline": "stage1_complete = false;"
    },
    {
        "line": 251,
        "fullcodeline": "write_log(DEBUG, \"<- stage-1 synchronisation loop\");"
    },
    {
        "line": 254,
        "fullcodeline": "syncfd = sync_grandchild_pipe[1];"
    },
    {
        "line": 258,
        "fullcodeline": "write_log(DEBUG, \"-> stage-2 synchronisation loop\");"
    },
    {
        "line": 259,
        "fullcodeline": "stage2_complete = false;"
    },
    {
        "line": 282,
        "fullcodeline": "write_log(DEBUG, \"<- stage-2 synchronisation loop\");"
    },
    {
        "line": 283,
        "fullcodeline": "write_log(DEBUG, \"<~ nsexec stage-0\");"
    },
    {
        "line": 284,
        "fullcodeline": "exit(0);"
    },
    {
        "line": 298,
        "fullcodeline": "pid_t stage2_pid = -1;"
    },
    {
        "line": 302,
        "fullcodeline": "syncfd = sync_child_pipe[0];"
    },
    {
        "line": 307,
        "fullcodeline": "prctl(PR_SET_NAME, (unsigned long)\"runc:[1:CHILD]\", 0, 0, 0);"
    },
    {
        "line": 308,
        "fullcodeline": "write_log(DEBUG, \"~> nsexec stage-1\");"
    },
    {
        "line": 393,
        "fullcodeline": "write_log(DEBUG, \"unshare remaining namespace (except cgroupns)\");"
    },
    {
        "line": 428,
        "fullcodeline": "write_log(DEBUG, \"spawn stage-2\");"
    },
    {
        "line": 429,
        "fullcodeline": "stage2_pid = clone_parent(&env, STAGE_INIT);"
    },
    {
        "line": 434,
        "fullcodeline": "write_log(DEBUG, \"request stage-0 to forward stage-2 pid (%d)\", stage2_pid);"
    },
    {
        "line": 435,
        "fullcodeline": "s = SYNC_RECVPID_PLS;"
    },
    {
        "line": 455,
        "fullcodeline": "write_log(DEBUG, \"signal completion to stage-0\");"
    },
    {
        "line": 456,
        "fullcodeline": "s = SYNC_CHILD_FINISH;"
    },
    {
        "line": 463,
        "fullcodeline": "write_log(DEBUG, \"<~ nsexec stage-1\");"
    },
    {
        "line": 464,
        "fullcodeline": "exit(0);"
    },
    {
        "line": 482,
        "fullcodeline": "syncfd = sync_grandchild_pipe[0];"
    },
    {
        "line": 490,
        "fullcodeline": "prctl(PR_SET_NAME, (unsigned long)\"runc:[2:INIT]\", 0, 0, 0);"
    },
    {
        "line": 491,
        "fullcodeline": "write_log(DEBUG, \"~> nsexec stage-2\");"
    },
    {
        "line": 517,
        "fullcodeline": "write_log(DEBUG, \"signal completion to stage-0\");"
    },
    {
        "line": 518,
        "fullcodeline": "s = SYNC_CHILD_FINISH;"
    },
    {
        "line": 527,
        "fullcodeline": "nl_free(&config);"
    },
    {
        "line": 530,
        "fullcodeline": "write_log(DEBUG, \"<= nsexec container setup\");"
    },
    {
        "line": 531,
        "fullcodeline": "write_log(DEBUG, \"booting up go runtime ...\");"
    },
    {
        "line": 66,
        "fullcodeline": "bail(\"failed to set process as non-dumpable\");"
    },
    {
        "line": 150,
        "fullcodeline": "if (stage1_pid < 0)"
    },
    {
        "line": 154,
        "fullcodeline": "if (close(sync_child_pipe[0]) < 0)"
    },
    {
        "line": 163,
        "fullcodeline": "while (!stage1_complete) {"
    },
    {
        "line": 255,
        "fullcodeline": "if (close(sync_grandchild_pipe[0]) < 0)"
    },
    {
        "line": 260,
        "fullcodeline": "while (!stage2_complete) {"
    },
    {
        "line": 303,
        "fullcodeline": "if (close(sync_child_pipe[1]) < 0)"
    },
    {
        "line": 338,
        "fullcodeline": "if (config.cloneflags & CLONE_NEWUSER) {"
    },
    {
        "line": 394,
        "fullcodeline": "if (unshare(config.cloneflags & ~CLONE_NEWCGROUP) < 0)"
    },
    {
        "line": 430,
        "fullcodeline": "if (stage2_pid < 0)"
    },
    {
        "line": 436,
        "fullcodeline": "if (write(syncfd, &s, sizeof(s)) != sizeof(s)) {"
    },
    {
        "line": 440,
        "fullcodeline": "if (write(syncfd, &stage2_pid, sizeof(stage2_pid)) != sizeof(stage2_pid)) {"
    },
    {
        "line": 446,
        "fullcodeline": "if (read(syncfd, &s, sizeof(s)) != sizeof(s)) {"
    },
    {
        "line": 450,
        "fullcodeline": "if (s != SYNC_RECVPID_ACK) {"
    },
    {
        "line": 457,
        "fullcodeline": "if (write(syncfd, &s, sizeof(s)) != sizeof(s)) {"
    },
    {
        "line": 483,
        "fullcodeline": "if (close(sync_grandchild_pipe[1]) < 0)"
    },
    {
        "line": 486,
        "fullcodeline": "if (close(sync_child_pipe[0]) < 0)"
    },
    {
        "line": 493,
        "fullcodeline": "if (read(syncfd, &s, sizeof(s)) != sizeof(s))"
    },
    {
        "line": 495,
        "fullcodeline": "if (s != SYNC_GRANDCHILD)"
    },
    {
        "line": 498,
        "fullcodeline": "if (setsid() < 0)"
    },
    {
        "line": 501,
        "fullcodeline": "if (setuid(0) < 0)"
    },
    {
        "line": 504,
        "fullcodeline": "if (setgid(0) < 0)"
    },
    {
        "line": 507,
        "fullcodeline": "if (!config.is_rootless_euid && config.is_setgroup) {"
    },
    {
        "line": 512,
        "fullcodeline": "if (config.cloneflags & CLONE_NEWCGROUP) {"
    },
    {
        "line": 519,
        "fullcodeline": "if (write(syncfd, &s, sizeof(s)) != sizeof(s))"
    },
    {
        "line": 523,
        "fullcodeline": "if (close(sync_grandchild_pipe[0]) < 0)"
    },
    {
        "line": 151,
        "fullcodeline": "bail(\"unable to spawn stage-1\");"
    },
    {
        "line": 155,
        "fullcodeline": "bail(\"failed to close sync_child_pipe[0] fd\");"
    },
    {
        "line": 256,
        "fullcodeline": "bail(\"failed to close sync_grandchild_pipe[0] fd\");"
    },
    {
        "line": 263,
        "fullcodeline": "write_log(DEBUG, \"signalling stage-2 to run\");"
    },
    {
        "line": 264,
        "fullcodeline": "s = SYNC_GRANDCHILD;"
    },
    {
        "line": 304,
        "fullcodeline": "bail(\"failed to close sync_child_pipe[1] fd\");"
    },
    {
        "line": 317,
        "fullcodeline": "join_namespaces(config.namespaces);"
    },
    {
        "line": 339,
        "fullcodeline": "write_log(DEBUG, \"unshare user namespace\");"
    },
    {
        "line": 342,
        "fullcodeline": "config.cloneflags &= ~CLONE_NEWUSER;"
    },
    {
        "line": 359,
        "fullcodeline": "write_log(DEBUG, \"request stage-0 to map user namespace\");"
    },
    {
        "line": 360,
        "fullcodeline": "s = SYNC_USERMAP_PLS;"
    },
    {
        "line": 365,
        "fullcodeline": "write_log(DEBUG, \"request stage-0 to map user namespace\");"
    },
    {
        "line": 395,
        "fullcodeline": "bail(\"failed to unshare remaining namespaces (except cgroupns)\");"
    },
    {
        "line": 399,
        "fullcodeline": "s = SYNC_MOUNTSOURCES_PLS;"
    },
    {
        "line": 406,
        "fullcodeline": "receive_mountsources(syncfd);"
    },
    {
        "line": 431,
        "fullcodeline": "bail(\"unable to spawn stage-2\");"
    },
    {
        "line": 437,
        "fullcodeline": "sane_kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 438,
        "fullcodeline": "bail(\"failed to sync with parent: write(SYNC_RECVPID_PLS)\");"
    },
    {
        "line": 441,
        "fullcodeline": "sane_kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 442,
        "fullcodeline": "bail(\"failed to sync with parent: write(stage2_pid)\");"
    },
    {
        "line": 447,
        "fullcodeline": "sane_kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 448,
        "fullcodeline": "bail(\"failed to sync with parent: read(SYNC_RECVPID_ACK)\");"
    },
    {
        "line": 451,
        "fullcodeline": "sane_kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 452,
        "fullcodeline": "bail(\"failed to sync with parent: SYNC_RECVPID_ACK: got %u\", s);"
    },
    {
        "line": 458,
        "fullcodeline": "sane_kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 459,
        "fullcodeline": "bail(\"failed to sync with parent: write(SYNC_CHILD_FINISH)\");"
    },
    {
        "line": 484,
        "fullcodeline": "bail(\"failed to close sync_grandchild_pipe[1] fd\");"
    },
    {
        "line": 487,
        "fullcodeline": "bail(\"failed to close sync_child_pipe[0] fd\");"
    },
    {
        "line": 494,
        "fullcodeline": "bail(\"failed to sync with parent: read(SYNC_GRANDCHILD)\");"
    },
    {
        "line": 496,
        "fullcodeline": "bail(\"failed to sync with parent: SYNC_GRANDCHILD: got %u\", s);"
    },
    {
        "line": 499,
        "fullcodeline": "bail(\"setsid failed\");"
    },
    {
        "line": 502,
        "fullcodeline": "bail(\"setuid failed\");"
    },
    {
        "line": 505,
        "fullcodeline": "bail(\"setgid failed\");"
    },
    {
        "line": 520,
        "fullcodeline": "bail(\"failed to sync with parent: write(SYNC_CHILD_FINISH)\");"
    },
    {
        "line": 524,
        "fullcodeline": "bail(\"failed to close sync_grandchild_pipe[0] fd\");"
    },
    {
        "line": 166,
        "fullcodeline": "if (read(syncfd, &s, sizeof(s)) != sizeof(s))"
    },
    {
        "line": 265,
        "fullcodeline": "if (write(syncfd, &s, sizeof(s)) != sizeof(s)) {"
    },
    {
        "line": 270,
        "fullcodeline": "if (read(syncfd, &s, sizeof(s)) != sizeof(s))"
    },
    {
        "line": 340,
        "fullcodeline": "if (unshare(CLONE_NEWUSER) < 0)"
    },
    {
        "line": 361,
        "fullcodeline": "if (write(syncfd, &s, sizeof(s)) != sizeof(s))"
    },
    {
        "line": 366,
        "fullcodeline": "if (read(syncfd, &s, sizeof(s)) != sizeof(s))"
    },
    {
        "line": 368,
        "fullcodeline": "if (s != SYNC_USERMAP_ACK)"
    },
    {
        "line": 379,
        "fullcodeline": "if (setresuid(0, 0, 0) < 0)"
    },
    {
        "line": 400,
        "fullcodeline": "if (write(syncfd, &s, sizeof(s)) != sizeof(s)) {"
    },
    {
        "line": 409,
        "fullcodeline": "if (read(syncfd, &s, sizeof(s)) != sizeof(s)) {"
    },
    {
        "line": 413,
        "fullcodeline": "if (s != SYNC_MOUNTSOURCES_ACK) {"
    },
    {
        "line": 508,
        "fullcodeline": "if (setgroups(0, NULL) < 0)"
    },
    {
        "line": 513,
        "fullcodeline": "if (unshare(CLONE_NEWCGROUP) < 0)"
    },
    {
        "line": 167,
        "fullcodeline": "bail(\"failed to sync with stage-1: next state\");"
    },
    {
        "line": 171,
        "fullcodeline": "write_log(DEBUG, \"stage-1 requested userns mappings\");"
    },
    {
        "line": 187,
        "fullcodeline": "update_uidmap(config.uidmappath, stage1_pid, config.uidmap, config.uidmap_len);"
    },
    {
        "line": 188,
        "fullcodeline": "update_gidmap(config.gidmappath, stage1_pid, config.gidmap, config.gidmap_len);"
    },
    {
        "line": 190,
        "fullcodeline": "s = SYNC_USERMAP_ACK;"
    },
    {
        "line": 198,
        "fullcodeline": "write_log(DEBUG, \"stage-1 requested pid to be forwarded\");"
    },
    {
        "line": 208,
        "fullcodeline": "s = SYNC_RECVPID_ACK;"
    },
    {
        "line": 222,
        "fullcodeline": "write_log(DEBUG, \"forward stage-1 (%d) and stage-2 (%d) pids to runc\","
    },
    {
        "line": 224,
        "fullcodeline": "len ="
    },
    {
        "line": 234,
        "fullcodeline": "send_mountsources(syncfd, stage1_pid, config.mountsources,"
    },
    {
        "line": 237,
        "fullcodeline": "s = SYNC_MOUNTSOURCES_ACK;"
    },
    {
        "line": 244,
        "fullcodeline": "write_log(DEBUG, \"stage-1 complete\");"
    },
    {
        "line": 245,
        "fullcodeline": "stage1_complete = true;"
    },
    {
        "line": 248,
        "fullcodeline": "bail(\"unexpected sync value: %u\", s);"
    },
    {
        "line": 266,
        "fullcodeline": "sane_kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 267,
        "fullcodeline": "bail(\"failed to sync with child: write(SYNC_GRANDCHILD)\");"
    },
    {
        "line": 271,
        "fullcodeline": "bail(\"failed to sync with child: next state\");"
    },
    {
        "line": 275,
        "fullcodeline": "write_log(DEBUG, \"stage-2 complete\");"
    },
    {
        "line": 276,
        "fullcodeline": "stage2_complete = true;"
    },
    {
        "line": 279,
        "fullcodeline": "bail(\"unexpected sync value: %u\", s);"
    },
    {
        "line": 341,
        "fullcodeline": "bail(\"failed to unshare user namespace\");"
    },
    {
        "line": 349,
        "fullcodeline": "write_log(DEBUG, \"temporarily set process as dumpable\");"
    },
    {
        "line": 362,
        "fullcodeline": "bail(\"failed to sync with parent: write(SYNC_USERMAP_PLS)\");"
    },
    {
        "line": 367,
        "fullcodeline": "bail(\"failed to sync with parent: read(SYNC_USERMAP_ACK)\");"
    },
    {
        "line": 369,
        "fullcodeline": "bail(\"failed to sync with parent: SYNC_USERMAP_ACK: got %u\", s);"
    },
    {
        "line": 373,
        "fullcodeline": "write_log(DEBUG, \"re-set process as non-dumpable\");"
    },
    {
        "line": 380,
        "fullcodeline": "bail(\"failed to become root in user namespace\");"
    },
    {
        "line": 401,
        "fullcodeline": "kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 402,
        "fullcodeline": "bail(\"failed to sync with parent: write(SYNC_MOUNTSOURCES_PLS)\");"
    },
    {
        "line": 410,
        "fullcodeline": "kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 411,
        "fullcodeline": "bail(\"failed to sync with parent: read(SYNC_MOUNTSOURCES_ACK)\");"
    },
    {
        "line": 414,
        "fullcodeline": "kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 415,
        "fullcodeline": "bail(\"failed to sync with parent: SYNC_MOUNTSOURCES_ACK: got %u\", s);"
    },
    {
        "line": 509,
        "fullcodeline": "bail(\"setgroups failed\");"
    },
    {
        "line": 514,
        "fullcodeline": "bail(\"failed to unshare cgroup namespace\");"
    },
    {
        "line": 183,
        "fullcodeline": "if (config.is_rootless_euid && !config.is_setgroup)"
    },
    {
        "line": 191,
        "fullcodeline": "if (write(syncfd, &s, sizeof(s)) != sizeof(s)) {"
    },
    {
        "line": 201,
        "fullcodeline": "if (read(syncfd, &stage2_pid, sizeof(stage2_pid)) != sizeof(stage2_pid)) {"
    },
    {
        "line": 209,
        "fullcodeline": "if (write(syncfd, &s, sizeof(s)) != sizeof(s)) {"
    },
    {
        "line": 225,
        "fullcodeline": "dprintf(pipenum, \"{\\\"stage1_pid\\\":%d,\\\"stage2_pid\\\":%d}\\n\", stage1_pid,"
    },
    {
        "line": 227,
        "fullcodeline": "if (len < 0) {"
    },
    {
        "line": 238,
        "fullcodeline": "if (write(syncfd, &s, sizeof(s)) != sizeof(s)) {"
    },
    {
        "line": 350,
        "fullcodeline": "if (prctl(PR_SET_DUMPABLE, 1, 0, 0, 0) < 0)"
    },
    {
        "line": 374,
        "fullcodeline": "if (prctl(PR_SET_DUMPABLE, 0, 0, 0, 0) < 0)"
    },
    {
        "line": 184,
        "fullcodeline": "update_setgroups(stage1_pid, SETGROUPS_DENY);"
    },
    {
        "line": 192,
        "fullcodeline": "sane_kill(stage1_pid, SIGKILL);"
    },
    {
        "line": 193,
        "fullcodeline": "sane_kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 194,
        "fullcodeline": "bail(\"failed to sync with stage-1: write(SYNC_USERMAP_ACK)\");"
    },
    {
        "line": 202,
        "fullcodeline": "sane_kill(stage1_pid, SIGKILL);"
    },
    {
        "line": 203,
        "fullcodeline": "sane_kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 204,
        "fullcodeline": "bail(\"failed to sync with stage-1: read(stage2_pid)\");"
    },
    {
        "line": 210,
        "fullcodeline": "sane_kill(stage1_pid, SIGKILL);"
    },
    {
        "line": 211,
        "fullcodeline": "sane_kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 212,
        "fullcodeline": "bail(\"failed to sync with stage-1: write(SYNC_RECVPID_ACK)\");"
    },
    {
        "line": 228,
        "fullcodeline": "sane_kill(stage1_pid, SIGKILL);"
    },
    {
        "line": 229,
        "fullcodeline": "sane_kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 230,
        "fullcodeline": "bail(\"failed to sync with runc: write(pid-JSON)\");"
    },
    {
        "line": 239,
        "fullcodeline": "kill(stage1_pid, SIGKILL);"
    },
    {
        "line": 240,
        "fullcodeline": "bail(\"failed to sync with child: write(SYNC_MOUNTSOURCES_ACK)\");"
    },
    {
        "line": 351,
        "fullcodeline": "bail(\"failed to temporarily set process as dumpable\");"
    },
    {
        "line": 375,
        "fullcodeline": "bail(\"failed to re-set process as non-dumpable\");"
    }
]