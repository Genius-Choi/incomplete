[
    {
        "line": 5,
        "fullcodeline": "int sync_child_pipe[2], sync_grandchild_pipe[2];"
    },
    {
        "line": 6,
        "fullcodeline": "struct nlconfig_t config = { 0 };"
    },
    {
        "line": 12,
        "fullcodeline": "setup_logpipe();"
    },
    {
        "line": 19,
        "fullcodeline": "pipenum = getenv_int(\"_LIBCONTAINER_INITPIPE\");"
    },
    {
        "line": 40,
        "fullcodeline": "write_log(DEBUG, \"=> nsexec container setup\");"
    },
    {
        "line": 43,
        "fullcodeline": "nl_parse(pipenum, &config);"
    },
    {
        "line": 51,
        "fullcodeline": "update_oom_score_adj(config.oom_score_adj, config.oom_score_adj_len);"
    },
    {
        "line": 129,
        "fullcodeline": "current_stage = setjmp(env);"
    },
    {
        "line": 20,
        "fullcodeline": "if (pipenum < 0) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (write(pipenum, \"\", 1) != 1)"
    },
    {
        "line": 64,
        "fullcodeline": "write_log(DEBUG, \"set process as non-dumpable\");"
    },
    {
        "line": 70,
        "fullcodeline": "if (socketpair(AF_LOCAL, SOCK_STREAM, 0, sync_child_pipe) < 0)"
    },
    {
        "line": 77,
        "fullcodeline": "if (socketpair(AF_LOCAL, SOCK_STREAM, 0, sync_grandchild_pipe) < 0)"
    },
    {
        "line": 140,
        "fullcodeline": "pid_t stage1_pid = -1, stage2_pid = -1;"
    },
    {
        "line": 145,
        "fullcodeline": "write_log(DEBUG, \"~> nsexec stage-0\");"
    },
    {
        "line": 148,
        "fullcodeline": "write_log(DEBUG, \"spawn stage-1\");"
    },
    {
        "line": 149,
        "fullcodeline": "stage1_pid = clone_parent(&env, STAGE_CHILD);"
    },
    {
        "line": 153,
        "fullcodeline": "syncfd = sync_child_pipe[1];"
    },
    {
        "line": 161,
        "fullcodeline": "write_log(DEBUG, \"-> stage-1 synchronisation loop\");"
    },
    {
        "line": 162,
        "fullcodeline": "stage1_complete = false;"
    },
    {
        "line": 241,
        "fullcodeline": "write_log(DEBUG, \"<- stage-1 synchronisation loop\");"
    },
    {
        "line": 244,
        "fullcodeline": "syncfd = sync_grandchild_pipe[1];"
    },
    {
        "line": 248,
        "fullcodeline": "write_log(DEBUG, \"-> stage-2 synchronisation loop\");"
    },
    {
        "line": 249,
        "fullcodeline": "stage2_complete = false;"
    },
    {
        "line": 272,
        "fullcodeline": "write_log(DEBUG, \"<- stage-2 synchronisation loop\");"
    },
    {
        "line": 292,
        "fullcodeline": "syncfd = sync_child_pipe[0];"
    },
    {
        "line": 298,
        "fullcodeline": "write_log(DEBUG, \"~> nsexec stage-1\");"
    },
    {
        "line": 383,
        "fullcodeline": "write_log(DEBUG, \"unshare remaining namespace (except cgroupns)\");"
    },
    {
        "line": 396,
        "fullcodeline": "write_log(DEBUG, \"spawn stage-2\");"
    },
    {
        "line": 397,
        "fullcodeline": "stage2_pid = clone_parent(&env, STAGE_INIT);"
    },
    {
        "line": 402,
        "fullcodeline": "write_log(DEBUG, \"request stage-0 to forward stage-2 pid (%d)\", stage2_pid);"
    },
    {
        "line": 403,
        "fullcodeline": "s = SYNC_RECVPID_PLS;"
    },
    {
        "line": 423,
        "fullcodeline": "write_log(DEBUG, \"signal completion to stage-0\");"
    },
    {
        "line": 424,
        "fullcodeline": "s = SYNC_CHILD_FINISH;"
    },
    {
        "line": 450,
        "fullcodeline": "syncfd = sync_grandchild_pipe[0];"
    },
    {
        "line": 459,
        "fullcodeline": "write_log(DEBUG, \"~> nsexec stage-2\");"
    },
    {
        "line": 485,
        "fullcodeline": "write_log(DEBUG, \"signal completion to stage-0\");"
    },
    {
        "line": 486,
        "fullcodeline": "s = SYNC_CHILD_FINISH;"
    },
    {
        "line": 498,
        "fullcodeline": "write_log(DEBUG, \"<= nsexec container setup\");"
    },
    {
        "line": 65,
        "fullcodeline": "if (prctl(PR_SET_DUMPABLE, 0, 0, 0, 0) < 0)"
    },
    {
        "line": 150,
        "fullcodeline": "if (stage1_pid < 0)"
    },
    {
        "line": 288,
        "fullcodeline": "pid_t stage2_pid = -1;"
    },
    {
        "line": 328,
        "fullcodeline": "if (config.cloneflags & CLONE_NEWUSER) {"
    },
    {
        "line": 398,
        "fullcodeline": "if (stage2_pid < 0)"
    },
    {
        "line": 418,
        "fullcodeline": "if (s != SYNC_RECVPID_ACK) {"
    },
    {
        "line": 463,
        "fullcodeline": "if (s != SYNC_GRANDCHILD)"
    },
    {
        "line": 475,
        "fullcodeline": "if (!config.is_rootless_euid && config.is_setgroup) {"
    },
    {
        "line": 480,
        "fullcodeline": "if (config.cloneflags & CLONE_NEWCGROUP) {"
    },
    {
        "line": 154,
        "fullcodeline": "if (close(sync_child_pipe[0]) < 0)"
    },
    {
        "line": 245,
        "fullcodeline": "if (close(sync_grandchild_pipe[0]) < 0)"
    },
    {
        "line": 253,
        "fullcodeline": "write_log(DEBUG, \"signalling stage-2 to run\");"
    },
    {
        "line": 254,
        "fullcodeline": "s = SYNC_GRANDCHILD;"
    },
    {
        "line": 293,
        "fullcodeline": "if (close(sync_child_pipe[1]) < 0)"
    },
    {
        "line": 329,
        "fullcodeline": "write_log(DEBUG, \"unshare user namespace\");"
    },
    {
        "line": 332,
        "fullcodeline": "config.cloneflags &= ~CLONE_NEWUSER;"
    },
    {
        "line": 349,
        "fullcodeline": "write_log(DEBUG, \"request stage-0 to map user namespace\");"
    },
    {
        "line": 350,
        "fullcodeline": "s = SYNC_USERMAP_PLS;"
    },
    {
        "line": 355,
        "fullcodeline": "write_log(DEBUG, \"request stage-0 to map user namespace\");"
    },
    {
        "line": 384,
        "fullcodeline": "if (unshare(config.cloneflags & ~CLONE_NEWCGROUP) < 0)"
    },
    {
        "line": 404,
        "fullcodeline": "if (write(syncfd, &s, sizeof(s)) != sizeof(s)) {"
    },
    {
        "line": 405,
        "fullcodeline": "sane_kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 408,
        "fullcodeline": "if (write(syncfd, &stage2_pid, sizeof(stage2_pid)) != sizeof(stage2_pid)) {"
    },
    {
        "line": 409,
        "fullcodeline": "sane_kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 414,
        "fullcodeline": "if (read(syncfd, &s, sizeof(s)) != sizeof(s)) {"
    },
    {
        "line": 415,
        "fullcodeline": "sane_kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 419,
        "fullcodeline": "sane_kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 425,
        "fullcodeline": "if (write(syncfd, &s, sizeof(s)) != sizeof(s)) {"
    },
    {
        "line": 451,
        "fullcodeline": "if (close(sync_grandchild_pipe[1]) < 0)"
    },
    {
        "line": 454,
        "fullcodeline": "if (close(sync_child_pipe[0]) < 0)"
    },
    {
        "line": 461,
        "fullcodeline": "if (read(syncfd, &s, sizeof(s)) != sizeof(s))"
    },
    {
        "line": 469,
        "fullcodeline": "if (setuid(0) < 0)"
    },
    {
        "line": 472,
        "fullcodeline": "if (setgid(0) < 0)"
    },
    {
        "line": 487,
        "fullcodeline": "if (write(syncfd, &s, sizeof(s)) != sizeof(s))"
    },
    {
        "line": 491,
        "fullcodeline": "if (close(sync_grandchild_pipe[0]) < 0)"
    },
    {
        "line": 358,
        "fullcodeline": "if (s != SYNC_USERMAP_ACK)"
    },
    {
        "line": 166,
        "fullcodeline": "if (read(syncfd, &s, sizeof(s)) != sizeof(s))"
    },
    {
        "line": 171,
        "fullcodeline": "write_log(DEBUG, \"stage-1 requested userns mappings\");"
    },
    {
        "line": 187,
        "fullcodeline": "update_uidmap(config.uidmappath, stage1_pid, config.uidmap, config.uidmap_len);"
    },
    {
        "line": 188,
        "fullcodeline": "update_gidmap(config.gidmappath, stage1_pid, config.gidmap, config.gidmap_len);"
    },
    {
        "line": 190,
        "fullcodeline": "s = SYNC_USERMAP_ACK;"
    },
    {
        "line": 198,
        "fullcodeline": "write_log(DEBUG, \"stage-1 requested pid to be forwarded\");"
    },
    {
        "line": 208,
        "fullcodeline": "s = SYNC_RECVPID_ACK;"
    },
    {
        "line": 222,
        "fullcodeline": "write_log(DEBUG, \"forward stage-1 (%d) and stage-2 (%d) pids to runc\","
    },
    {
        "line": 224,
        "fullcodeline": "len ="
    },
    {
        "line": 234,
        "fullcodeline": "write_log(DEBUG, \"stage-1 complete\");"
    },
    {
        "line": 235,
        "fullcodeline": "stage1_complete = true;"
    },
    {
        "line": 238,
        "fullcodeline": "bail(\"unexpected sync value: %u\", s);"
    },
    {
        "line": 255,
        "fullcodeline": "if (write(syncfd, &s, sizeof(s)) != sizeof(s)) {"
    },
    {
        "line": 260,
        "fullcodeline": "if (read(syncfd, &s, sizeof(s)) != sizeof(s))"
    },
    {
        "line": 265,
        "fullcodeline": "write_log(DEBUG, \"stage-2 complete\");"
    },
    {
        "line": 266,
        "fullcodeline": "stage2_complete = true;"
    },
    {
        "line": 330,
        "fullcodeline": "if (unshare(CLONE_NEWUSER) < 0)"
    },
    {
        "line": 339,
        "fullcodeline": "write_log(DEBUG, \"temporarily set process as dumpable\");"
    },
    {
        "line": 351,
        "fullcodeline": "if (write(syncfd, &s, sizeof(s)) != sizeof(s))"
    },
    {
        "line": 356,
        "fullcodeline": "if (read(syncfd, &s, sizeof(s)) != sizeof(s))"
    },
    {
        "line": 363,
        "fullcodeline": "write_log(DEBUG, \"re-set process as non-dumpable\");"
    },
    {
        "line": 369,
        "fullcodeline": "if (setresuid(0, 0, 0) < 0)"
    },
    {
        "line": 476,
        "fullcodeline": "if (setgroups(0, NULL) < 0)"
    },
    {
        "line": 481,
        "fullcodeline": "if (unshare(CLONE_NEWCGROUP) < 0)"
    },
    {
        "line": 225,
        "fullcodeline": "dprintf(pipenum, \"{\\\"stage1_pid\\\":%d,\\\"stage2_pid\\\":%d}\\n\", stage1_pid,"
    },
    {
        "line": 183,
        "fullcodeline": "if (config.is_rootless_euid && !config.is_setgroup)"
    },
    {
        "line": 184,
        "fullcodeline": "update_setgroups(stage1_pid, SETGROUPS_DENY);"
    },
    {
        "line": 191,
        "fullcodeline": "if (write(syncfd, &s, sizeof(s)) != sizeof(s)) {"
    },
    {
        "line": 192,
        "fullcodeline": "sane_kill(stage1_pid, SIGKILL);"
    },
    {
        "line": 193,
        "fullcodeline": "sane_kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 201,
        "fullcodeline": "if (read(syncfd, &stage2_pid, sizeof(stage2_pid)) != sizeof(stage2_pid)) {"
    },
    {
        "line": 202,
        "fullcodeline": "sane_kill(stage1_pid, SIGKILL);"
    },
    {
        "line": 203,
        "fullcodeline": "sane_kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 209,
        "fullcodeline": "if (write(syncfd, &s, sizeof(s)) != sizeof(s)) {"
    },
    {
        "line": 210,
        "fullcodeline": "sane_kill(stage1_pid, SIGKILL);"
    },
    {
        "line": 211,
        "fullcodeline": "sane_kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 228,
        "fullcodeline": "sane_kill(stage1_pid, SIGKILL);"
    },
    {
        "line": 229,
        "fullcodeline": "sane_kill(stage2_pid, SIGKILL);"
    },
    {
        "line": 340,
        "fullcodeline": "if (prctl(PR_SET_DUMPABLE, 1, 0, 0, 0) < 0)"
    },
    {
        "line": 364,
        "fullcodeline": "if (prctl(PR_SET_DUMPABLE, 0, 0, 0, 0) < 0)"
    }
]