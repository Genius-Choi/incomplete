[
    {
        "line": 8,
        "fullcodeline": "len = read(fd, &hdr, NLMSG_HDRLEN);"
    },
    {
        "line": 19,
        "fullcodeline": "size = NLMSG_PAYLOAD(&hdr, 0);"
    },
    {
        "line": 20,
        "fullcodeline": "current = data = malloc(size);"
    },
    {
        "line": 24,
        "fullcodeline": "len = read(fd, data, size);"
    },
    {
        "line": 29,
        "fullcodeline": "config->data = data;"
    },
    {
        "line": 9,
        "fullcodeline": "if (len != NLMSG_HDRLEN)"
    },
    {
        "line": 12,
        "fullcodeline": "if (hdr.nlmsg_type == NLMSG_ERROR)"
    },
    {
        "line": 15,
        "fullcodeline": "if (hdr.nlmsg_type != INIT_MSG)"
    },
    {
        "line": 21,
        "fullcodeline": "if (!data)"
    },
    {
        "line": 25,
        "fullcodeline": "if (len != size)"
    },
    {
        "line": 30,
        "fullcodeline": "while (current < data + size) {"
    },
    {
        "line": 10,
        "fullcodeline": "bail(\"invalid netlink header length %zu\", len);"
    },
    {
        "line": 13,
        "fullcodeline": "bail(\"failed to read netlink message\");"
    },
    {
        "line": 16,
        "fullcodeline": "bail(\"unexpected msg type %d\", hdr.nlmsg_type);"
    },
    {
        "line": 22,
        "fullcodeline": "bail(\"failed to allocate %zu bytes of memory for nl_payload\", size);"
    },
    {
        "line": 26,
        "fullcodeline": "bail(\"failed to read netlink payload, %zu != %zu\", len, size);"
    },
    {
        "line": 31,
        "fullcodeline": "struct nlattr *nlattr = (struct nlattr *)current;"
    },
    {
        "line": 32,
        "fullcodeline": "size_t payload_len = nlattr->nla_len - NLA_HDRLEN;"
    },
    {
        "line": 35,
        "fullcodeline": "current += NLA_HDRLEN;"
    },
    {
        "line": 76,
        "fullcodeline": "current += NLA_ALIGN(payload_len);"
    },
    {
        "line": 40,
        "fullcodeline": "config->cloneflags = readint32(current);"
    },
    {
        "line": 43,
        "fullcodeline": "config->is_rootless_euid = readint8(current);\t/* boolean */"
    },
    {
        "line": 46,
        "fullcodeline": "config->oom_score_adj = current;"
    },
    {
        "line": 47,
        "fullcodeline": "config->oom_score_adj_len = payload_len;"
    },
    {
        "line": 50,
        "fullcodeline": "config->namespaces = current;"
    },
    {
        "line": 51,
        "fullcodeline": "config->namespaces_len = payload_len;"
    },
    {
        "line": 54,
        "fullcodeline": "config->uidmap = current;"
    },
    {
        "line": 55,
        "fullcodeline": "config->uidmap_len = payload_len;"
    },
    {
        "line": 58,
        "fullcodeline": "config->gidmap = current;"
    },
    {
        "line": 59,
        "fullcodeline": "config->gidmap_len = payload_len;"
    },
    {
        "line": 62,
        "fullcodeline": "config->uidmappath = current;"
    },
    {
        "line": 63,
        "fullcodeline": "config->uidmappath_len = payload_len;"
    },
    {
        "line": 66,
        "fullcodeline": "config->gidmappath = current;"
    },
    {
        "line": 67,
        "fullcodeline": "config->gidmappath_len = payload_len;"
    },
    {
        "line": 70,
        "fullcodeline": "config->is_setgroup = readint8(current);"
    },
    {
        "line": 73,
        "fullcodeline": "bail(\"unknown netlink message type %d\", nlattr->nla_type);"
    }
]