[
    {
        "line": 5,
        "fullcodeline": "struct ts_session *sess = ts_get_current_session();"
    },
    {
        "line": 6,
        "fullcodeline": "struct user_ta_ctx *utc = to_user_ta_ctx(sess->ctx);"
    },
    {
        "line": 7,
        "fullcodeline": "TEE_Result res = TEE_ERROR_NOT_SUPPORTED;"
    },
    {
        "line": 8,
        "fullcodeline": "struct tee_obj *ko = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "struct tee_obj *so = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "struct tee_cryp_state *cs = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "struct tee_cryp_obj_secret *sk = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "const struct tee_cryp_obj_type_props *type_props = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "TEE_Attribute *params = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "size_t alloc_size = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "res = tee_svc_cryp_get_state(sess, uref_to_vaddr(state), &cs);"
    },
    {
        "line": 23,
        "fullcodeline": "params = malloc(alloc_size);"
    },
    {
        "line": 26,
        "fullcodeline": "res = copy_in_attrs(utc, usr_params, param_count, params);"
    },
    {
        "line": 31,
        "fullcodeline": "res = tee_obj_get(utc, cs->key1, &ko);"
    },
    {
        "line": 35,
        "fullcodeline": "res = tee_obj_get(utc, uref_to_vaddr(derived_key), &so);"
    },
    {
        "line": 40,
        "fullcodeline": "sk = so->attr;"
    },
    {
        "line": 43,
        "fullcodeline": "type_props = tee_svc_find_type_props(so->info.objectType);"
    },
    {
        "line": 17,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 20,
        "fullcodeline": "if (MUL_OVERFLOW(sizeof(TEE_Attribute), param_count, &alloc_size))"
    },
    {
        "line": 24,
        "fullcodeline": "if (!params)"
    },
    {
        "line": 27,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 32,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 36,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 44,
        "fullcodeline": "if (!type_props) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (cs->algo == TEE_ALG_DH_DERIVE_SHARED_SECRET) {"
    },
    {
        "line": 45,
        "fullcodeline": "res = TEE_ERROR_NOT_SUPPORTED;"
    },
    {
        "line": 60,
        "fullcodeline": "bin_size = params[0].content.ref.length;"
    },
    {
        "line": 67,
        "fullcodeline": "pub = crypto_bignum_allocate(alloc_size);"
    },
    {
        "line": 68,
        "fullcodeline": "ss = crypto_bignum_allocate(alloc_size);"
    },
    {
        "line": 62,
        "fullcodeline": "if (MUL_OVERFLOW(bin_size, 8, &alloc_size)) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (pub && ss) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (param_count != 1 ||"
    },
    {
        "line": 55,
        "fullcodeline": "params[0].attributeID != TEE_ATTR_DH_PUBLIC_VALUE) {"
    },
    {
        "line": 56,
        "fullcodeline": "res = TEE_ERROR_BAD_PARAMETERS;"
    },
    {
        "line": 63,
        "fullcodeline": "res = TEE_ERROR_OVERFLOW;"
    },
    {
        "line": 70,
        "fullcodeline": "crypto_bignum_bin2bn(params[0].content.ref.buffer,"
    },
    {
        "line": 72,
        "fullcodeline": "res = crypto_acipher_dh_shared_secret(ko->attr,"
    },
    {
        "line": 87,
        "fullcodeline": "} else if (cs->algo == TEE_ALG_ECDH_DERIVE_SHARED_SECRET) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (res == TEE_SUCCESS) {"
    },
    {
        "line": 83,
        "fullcodeline": "res = TEE_ERROR_OUT_OF_MEMORY;"
    },
    {
        "line": 88,
        "fullcodeline": "uint32_t curve = ((struct ecc_keypair *)ko->attr)->curve;"
    },
    {
        "line": 89,
        "fullcodeline": "struct ecc_public_key key_public = { };"
    },
    {
        "line": 92,
        "fullcodeline": "uint32_t key_type = TEE_TYPE_ECDH_PUBLIC_KEY;"
    },
    {
        "line": 123,
        "fullcodeline": "res = crypto_acipher_alloc_ecc_public_key(&key_public, key_type,"
    },
    {
        "line": 127,
        "fullcodeline": "key_public.curve = curve;"
    },
    {
        "line": 128,
        "fullcodeline": "crypto_bignum_bin2bn(params[0].content.ref.buffer,"
    },
    {
        "line": 131,
        "fullcodeline": "crypto_bignum_bin2bn(params[1].content.ref.buffer,"
    },
    {
        "line": 135,
        "fullcodeline": "pt_secret = (uint8_t *)(sk + 1);"
    },
    {
        "line": 136,
        "fullcodeline": "pt_secret_len = sk->alloc_size;"
    },
    {
        "line": 137,
        "fullcodeline": "res = crypto_acipher_ecc_shared_secret(ko->attr, &key_public,"
    },
    {
        "line": 75,
        "fullcodeline": "sk->key_size = crypto_bignum_num_bytes(ss);"
    },
    {
        "line": 76,
        "fullcodeline": "crypto_bignum_bn2bin(ss, (uint8_t *)(sk + 1));"
    },
    {
        "line": 125,
        "fullcodeline": "if (res != TEE_SUCCESS)"
    },
    {
        "line": 141,
        "fullcodeline": "if (res == TEE_SUCCESS) {"
    },
    {
        "line": 310,
        "fullcodeline": "res = TEE_ERROR_NOT_SUPPORTED;"
    },
    {
        "line": 94,
        "fullcodeline": "if (param_count != 2 ||"
    },
    {
        "line": 96,
        "fullcodeline": "params[1].attributeID != TEE_ATTR_ECC_PUBLIC_VALUE_Y) {"
    },
    {
        "line": 97,
        "fullcodeline": "res = TEE_ERROR_BAD_PARAMETERS;"
    },
    {
        "line": 103,
        "fullcodeline": "alloc_size = 192;"
    },
    {
        "line": 106,
        "fullcodeline": "alloc_size = 224;"
    },
    {
        "line": 109,
        "fullcodeline": "alloc_size = 256;"
    },
    {
        "line": 112,
        "fullcodeline": "alloc_size = 384;"
    },
    {
        "line": 115,
        "fullcodeline": "alloc_size = 521;"
    },
    {
        "line": 118,
        "fullcodeline": "res = TEE_ERROR_NOT_IMPLEMENTED;"
    },
    {
        "line": 95,
        "fullcodeline": "params[0].attributeID != TEE_ATTR_ECC_PUBLIC_VALUE_X ||"
    }
]