[
    {
        "line": 5,
        "fullcodeline": "struct versal_ecc_sign_param *cmd = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "struct versal_mbox_mem cmd_buf = { };"
    },
    {
        "line": 7,
        "fullcodeline": "struct ecc_keypair ephemeral = { };"
    },
    {
        "line": 8,
        "fullcodeline": "struct versal_cmd_args arg = { };"
    },
    {
        "line": 9,
        "fullcodeline": "struct versal_mbox_mem p = { };"
    },
    {
        "line": 10,
        "fullcodeline": "struct versal_mbox_mem k = { };"
    },
    {
        "line": 11,
        "fullcodeline": "struct versal_mbox_mem d = { };"
    },
    {
        "line": 12,
        "fullcodeline": "struct versal_mbox_mem s = { };"
    },
    {
        "line": 13,
        "fullcodeline": "TEE_Result ret = TEE_SUCCESS;"
    },
    {
        "line": 14,
        "fullcodeline": "uint32_t err = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "size_t bytes = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "size_t bits = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "ret = ecc_get_key_size(key->curve, &bytes, &bits);"
    },
    {
        "line": 28,
        "fullcodeline": "ret = ecc_prepare_msg(algo, msg, msg_len, &p);"
    },
    {
        "line": 33,
        "fullcodeline": "ret = drvcrypt_asym_alloc_ecc_keypair(&ephemeral,"
    },
    {
        "line": 40,
        "fullcodeline": "ephemeral.curve = key->curve;"
    },
    {
        "line": 41,
        "fullcodeline": "ret = crypto_acipher_gen_ecc_key(&ephemeral, bits);"
    },
    {
        "line": 47,
        "fullcodeline": "versal_mbox_alloc(bytes, NULL, &k);"
    },
    {
        "line": 48,
        "fullcodeline": "crypto_bignum_bn2bin_eswap(key->curve, ephemeral.d, k.buf);"
    },
    {
        "line": 49,
        "fullcodeline": "crypto_bignum_free(ephemeral.d);"
    },
    {
        "line": 50,
        "fullcodeline": "crypto_bignum_free(ephemeral.x);"
    },
    {
        "line": 51,
        "fullcodeline": "crypto_bignum_free(ephemeral.y);"
    },
    {
        "line": 54,
        "fullcodeline": "versal_mbox_alloc(bytes, NULL, &d);"
    },
    {
        "line": 55,
        "fullcodeline": "crypto_bignum_bn2bin_eswap(key->curve, key->d, d.buf);"
    },
    {
        "line": 58,
        "fullcodeline": "versal_mbox_alloc(*sig_len, NULL, &s);"
    },
    {
        "line": 61,
        "fullcodeline": "versal_mbox_alloc(sizeof(*cmd), NULL, &cmd_buf);"
    },
    {
        "line": 63,
        "fullcodeline": "cmd = cmd_buf.buf;"
    },
    {
        "line": 64,
        "fullcodeline": "cmd->priv_key_addr = virt_to_phys(d.buf);"
    },
    {
        "line": 65,
        "fullcodeline": "cmd->epriv_key_addr = virt_to_phys(k.buf);"
    },
    {
        "line": 66,
        "fullcodeline": "cmd->hash_addr = virt_to_phys(p.buf);"
    },
    {
        "line": 67,
        "fullcodeline": "cmd->hash_len = p.len;"
    },
    {
        "line": 68,
        "fullcodeline": "cmd->curve = key->curve;"
    },
    {
        "line": 70,
        "fullcodeline": "arg.ibuf[0].mem = cmd_buf;"
    },
    {
        "line": 71,
        "fullcodeline": "arg.ibuf[1].mem = s;"
    },
    {
        "line": 72,
        "fullcodeline": "arg.ibuf[2].mem = k;"
    },
    {
        "line": 73,
        "fullcodeline": "arg.ibuf[3].mem = d;"
    },
    {
        "line": 74,
        "fullcodeline": "arg.ibuf[4].mem = p;"
    },
    {
        "line": 82,
        "fullcodeline": "*sig_len = 2 * bytes;"
    },
    {
        "line": 85,
        "fullcodeline": "memcpy_swp(sig, s.buf, *sig_len / 2);"
    },
    {
        "line": 86,
        "fullcodeline": "memcpy_swp(sig + *sig_len / 2, (uint8_t *)s.buf + *sig_len / 2,"
    },
    {
        "line": 89,
        "fullcodeline": "free(cmd);"
    },
    {
        "line": 90,
        "fullcodeline": "free(k.buf);"
    },
    {
        "line": 91,
        "fullcodeline": "free(p.buf);"
    },
    {
        "line": 92,
        "fullcodeline": "free(s.buf);"
    },
    {
        "line": 93,
        "fullcodeline": "free(d.buf);"
    },
    {
        "line": 19,
        "fullcodeline": "if (ret != TEE_SUCCESS) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (versal_crypto_request(VERSAL_ELLIPTIC_GENERATE_SIGN, &arg, &err)) {"
    },
    {
        "line": 87,
        "fullcodeline": "*sig_len / 2);"
    },
    {
        "line": 36,
        "fullcodeline": "EMSG(\"Versal, can't allocate the ephemeral key\");"
    },
    {
        "line": 43,
        "fullcodeline": "EMSG(\"Versal, can't generate the ephemeral key\");"
    },
    {
        "line": 77,
        "fullcodeline": "EMSG(\"Versal ECC: %s\", versal_ecc_error(err));"
    },
    {
        "line": 78,
        "fullcodeline": "ret = TEE_ERROR_GENERIC;"
    },
    {
        "line": 20,
        "fullcodeline": "if (ret != TEE_ERROR_NOT_SUPPORTED)"
    },
    {
        "line": 24,
        "fullcodeline": "return pair_ops->sign(algo, key, msg, msg_len, sig, sig_len);"
    }
]