[
    {
        "line": 25,
        "fullcodeline": "prev = f->previous_length;"
    },
    {
        "line": 28,
        "fullcodeline": "f->previous_length = len - right;"
    },
    {
        "line": 49,
        "fullcodeline": "f->samples_output += right-left;"
    },
    {
        "line": 36,
        "fullcodeline": "for (i=0; i < f->channels; ++i)"
    },
    {
        "line": 40,
        "fullcodeline": "if (!prev)"
    },
    {
        "line": 47,
        "fullcodeline": "if (len < right) right = len;"
    },
    {
        "line": 51,
        "fullcodeline": "return right - left;"
    },
    {
        "line": 14,
        "fullcodeline": "int i,j, n = f->previous_length;"
    },
    {
        "line": 15,
        "fullcodeline": "float *w = get_window(f, n);"
    },
    {
        "line": 37,
        "fullcodeline": "for (j=0; right+j < len; ++j)"
    },
    {
        "line": 16,
        "fullcodeline": "if (w == NULL) return 0;"
    },
    {
        "line": 17,
        "fullcodeline": "for (i=0; i < f->channels; ++i) {"
    },
    {
        "line": 38,
        "fullcodeline": "f->previous_window[i][j] = f->channel_buffers[i][right+j];"
    },
    {
        "line": 18,
        "fullcodeline": "for (j=0; j < n; ++j)"
    },
    {
        "line": 19,
        "fullcodeline": "f->channel_buffers[i][left+j] ="
    },
    {
        "line": 20,
        "fullcodeline": "f->channel_buffers[i][left+j]*w[    j] +"
    },
    {
        "line": 21,
        "fullcodeline": "f->previous_window[i][     j]*w[n-1-j];"
    }
]