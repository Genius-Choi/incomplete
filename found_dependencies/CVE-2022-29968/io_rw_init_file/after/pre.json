[
    {
        "line": 3,
        "fullcodeline": "struct kiocb *kiocb = &req->rw.kiocb;"
    },
    {
        "line": 4,
        "fullcodeline": "struct io_ring_ctx *ctx = req->ctx;"
    },
    {
        "line": 5,
        "fullcodeline": "struct file *file = req->file;"
    },
    {
        "line": 14,
        "fullcodeline": "kiocb->ki_flags = iocb_flags(file);"
    },
    {
        "line": 15,
        "fullcodeline": "ret = kiocb_set_rw_flags(kiocb, req->rw.flags);"
    },
    {
        "line": 8,
        "fullcodeline": "if (unlikely(!file || !(file->f_mode & mode)))"
    },
    {
        "line": 16,
        "fullcodeline": "if (unlikely(ret))"
    },
    {
        "line": 28,
        "fullcodeline": "if (ctx->flags & IORING_SETUP_IOPOLL) {"
    },
    {
        "line": 11,
        "fullcodeline": "if (!io_req_ffs_set(req))"
    },
    {
        "line": 12,
        "fullcodeline": "req->flags |= io_file_get_flags(file) << REQ_F_SUPPORT_NOWAIT_BIT;"
    },
    {
        "line": 24,
        "fullcodeline": "if ((kiocb->ki_flags & IOCB_NOWAIT) ||"
    },
    {
        "line": 25,
        "fullcodeline": "((file->f_flags & O_NONBLOCK) && !io_file_supports_nowait(req)))"
    },
    {
        "line": 26,
        "fullcodeline": "req->flags |= REQ_F_NOWAIT;"
    },
    {
        "line": 32,
        "fullcodeline": "kiocb->private = NULL;"
    },
    {
        "line": 34,
        "fullcodeline": "kiocb->ki_complete = io_complete_rw_iopoll;"
    },
    {
        "line": 9,
        "fullcodeline": "return -EBADF;"
    },
    {
        "line": 33,
        "fullcodeline": "kiocb->ki_flags |= IOCB_HIPRI | IOCB_ALLOC_CACHE;"
    },
    {
        "line": 39,
        "fullcodeline": "kiocb->ki_complete = io_complete_rw;"
    },
    {
        "line": 29,
        "fullcodeline": "if (!(kiocb->ki_flags & IOCB_DIRECT) || !file->f_op->iopoll)"
    },
    {
        "line": 30,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 38,
        "fullcodeline": "return -EINVAL;"
    }
]