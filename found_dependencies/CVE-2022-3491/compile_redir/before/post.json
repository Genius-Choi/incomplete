[
    {
        "line": 3,
        "fullcodeline": "char_u  *arg = eap->arg;"
    },
    {
        "line": 4,
        "fullcodeline": "lhs_T   *lhs = &cctx->ctx_redir_lhs;"
    },
    {
        "line": 6,
        "fullcodeline": "if (lhs->lhs_name != NULL)"
    },
    {
        "line": 44,
        "fullcodeline": "if (arg[0] == '=' && arg[1] == '>')"
    },
    {
        "line": 76,
        "fullcodeline": "return compile_exec(line, eap, cctx);"
    },
    {
        "line": 40,
        "fullcodeline": "emsg(_(e_cannot_nest_redir));"
    },
    {
        "line": 46,
        "fullcodeline": "int\t    append = FALSE;"
    },
    {
        "line": 49,
        "fullcodeline": "arg += 2;"
    },
    {
        "line": 55,
        "fullcodeline": "arg = skipwhite(arg);"
    },
    {
        "line": 63,
        "fullcodeline": "generate_instr(cctx, ISN_REDIRSTART);"
    },
    {
        "line": 64,
        "fullcodeline": "lhs->lhs_append = append;"
    },
    {
        "line": 8,
        "fullcodeline": "if (STRNCMP(arg, \"END\", 3) == 0)"
    },
    {
        "line": 50,
        "fullcodeline": "if (*arg == '>')"
    },
    {
        "line": 57,
        "fullcodeline": "if (compile_assign_lhs(arg, lhs, CMD_redir,"
    },
    {
        "line": 60,
        "fullcodeline": "if (need_type(&t_string, lhs->lhs_member_type,"
    },
    {
        "line": 72,
        "fullcodeline": "return arg + lhs->lhs_varlen_total;"
    },
    {
        "line": 20,
        "fullcodeline": "generate_instr_type(cctx, ISN_REDIREND, &t_string);"
    },
    {
        "line": 36,
        "fullcodeline": "VIM_CLEAR(lhs->lhs_name);"
    },
    {
        "line": 37,
        "fullcodeline": "VIM_CLEAR(lhs->lhs_whole);"
    },
    {
        "line": 52,
        "fullcodeline": "++arg;"
    },
    {
        "line": 53,
        "fullcodeline": "append = TRUE;"
    },
    {
        "line": 67,
        "fullcodeline": "lhs->lhs_whole = vim_strnsave(arg, lhs->lhs_varlen_total);"
    },
    {
        "line": 38,
        "fullcodeline": "return arg + 3;"
    },
    {
        "line": 61,
        "fullcodeline": "-1, 0, cctx, FALSE, FALSE) == FAIL)"
    },
    {
        "line": 68,
        "fullcodeline": "if (lhs->lhs_whole == NULL)"
    },
    {
        "line": 23,
        "fullcodeline": "generate_CONCAT(cctx, 2);"
    },
    {
        "line": 13,
        "fullcodeline": "if (compile_load_lhs_with_index(lhs, lhs->lhs_whole,"
    },
    {
        "line": 29,
        "fullcodeline": "if (compile_assign_unlet(lhs->lhs_whole, lhs, TRUE,"
    },
    {
        "line": 33,
        "fullcodeline": "else if (generate_store_lhs(cctx, lhs, -1, FALSE) == FAIL)"
    }
]