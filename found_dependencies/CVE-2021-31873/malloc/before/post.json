[
    {
        "line": 11,
        "fullcodeline": "size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;"
    },
    {
        "line": 22,
        "fullcodeline": "fsize = (size + MALLOC_CHUNK_MASK) & ~MALLOC_CHUNK_MASK;"
    },
    {
        "line": 27,
        "fullcodeline": "fp = (struct free_arena_header *)"
    },
    {
        "line": 40,
        "fullcodeline": "fp->a.type = ARENA_TYPE_FREE;"
    },
    {
        "line": 41,
        "fullcodeline": "fp->a.size = fsize;"
    },
    {
        "line": 56,
        "fullcodeline": "fp->a.prev = pah;"
    },
    {
        "line": 57,
        "fullcodeline": "pah->a.next = fp;"
    },
    {
        "line": 58,
        "fullcodeline": "fp->a.next->a.prev = fp;"
    },
    {
        "line": 61,
        "fullcodeline": "fp = __free_block(fp);"
    },
    {
        "line": 7,
        "fullcodeline": "if (size == 0)"
    },
    {
        "line": 13,
        "fullcodeline": "for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;"
    },
    {
        "line": 14,
        "fullcodeline": "fp = fp->next_free) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (fp == (struct free_arena_header *)MAP_FAILED) {"
    },
    {
        "line": 47,
        "fullcodeline": "for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;"
    },
    {
        "line": 64,
        "fullcodeline": "return __malloc_from_block(fp, size);"
    },
    {
        "line": 28,
        "fullcodeline": "mmap(NULL, fsize, PROT_READ | PROT_WRITE,"
    },
    {
        "line": 33,
        "fullcodeline": "errno = ENOMEM;"
    },
    {
        "line": 15,
        "fullcodeline": "if (fp->a.size >= size) {"
    },
    {
        "line": 29,
        "fullcodeline": "MAP_PRIVATE | MAP_ANONYMOUS, 0, 0);"
    },
    {
        "line": 49,
        "fullcodeline": "if (pah < fp)"
    },
    {
        "line": 17,
        "fullcodeline": "return __malloc_from_block(fp, size);"
    }
]