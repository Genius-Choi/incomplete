[
    {
        "line": 2,
        "fullcodeline": "urls = args.URL"
    },
    {
        "line": 57,
        "fullcodeline": "kwargs = {"
    },
    {
        "line": 61,
        "fullcodeline": "limit_items = None"
    },
    {
        "line": 193,
        "fullcodeline": "kwargs.update({"
    },
    {
        "line": 203,
        "fullcodeline": "result = _create_prompt_choices(**kwargs)"
    },
    {
        "line": 205,
        "fullcodeline": "args.URL = validate_url(result.id)"
    },
    {
        "line": 5,
        "fullcodeline": "not args.search and"
    },
    {
        "line": 6,
        "fullcodeline": "not args.fetch_library_manga and"
    },
    {
        "line": 63,
        "fullcodeline": "def iter_random_manga():"
    },
    {
        "line": 93,
        "fullcodeline": "iterator = iter_random_manga()"
    },
    {
        "line": 94,
        "fullcodeline": "text = f\"Found random manga\""
    },
    {
        "line": 95,
        "fullcodeline": "on_empty_err = f\"Unknown Error\" # This should never happened"
    },
    {
        "line": 96,
        "fullcodeline": "on_preview = preview_cover_manga"
    },
    {
        "line": 97,
        "fullcodeline": "limit_items = 5"
    },
    {
        "line": 201,
        "fullcodeline": "kwargs.update(limit=limit_items)"
    },
    {
        "line": 14,
        "fullcodeline": "result = urls.split(':')"
    },
    {
        "line": 15,
        "fullcodeline": "file = result[1:]"
    },
    {
        "line": 16,
        "fullcodeline": "file_path = \"\""
    },
    {
        "line": 17,
        "fullcodeline": "err_file = False"
    },
    {
        "line": 50,
        "fullcodeline": "file_path = urls"
    },
    {
        "line": 52,
        "fullcodeline": "args.URL = validate_url(file_path)"
    },
    {
        "line": 104,
        "fullcodeline": "group_id = __validate(group_id)"
    },
    {
        "line": 105,
        "fullcodeline": "group = Group(group_id)"
    },
    {
        "line": 107,
        "fullcodeline": "iterator = search(None, args.unsafe, group=group.id)"
    },
    {
        "line": 108,
        "fullcodeline": "text = f'List manga from group \"{group.name}\"'"
    },
    {
        "line": 109,
        "fullcodeline": "on_empty_err = f'Group \"{group.name}\" has no uploaded mangas'"
    },
    {
        "line": 110,
        "fullcodeline": "on_preview = preview_cover_manga"
    },
    {
        "line": 24,
        "fullcodeline": "if not file_path:"
    },
    {
        "line": 32,
        "fullcodeline": "for f in file:"
    },
    {
        "line": 36,
        "fullcodeline": "if file_path.startswith('http://') or file_path.startswith('https://'):"
    },
    {
        "line": 100,
        "fullcodeline": "_, group_id = get_key_value(urls, sep=':')"
    },
    {
        "line": 101,
        "fullcodeline": "if not group_id:"
    },
    {
        "line": 20,
        "fullcodeline": "file_path += file.pop(0)"
    },
    {
        "line": 25,
        "fullcodeline": "err_file = True"
    },
    {
        "line": 28,
        "fullcodeline": "parser.error(\"Syntax error: file path argument is empty\")"
    },
    {
        "line": 37,
        "fullcodeline": "r = Net.requests.get(file_path)"
    },
    {
        "line": 43,
        "fullcodeline": "file_path = r.text"
    },
    {
        "line": 54,
        "fullcodeline": "parser.error(str(e))"
    },
    {
        "line": 102,
        "fullcodeline": "parser.error(\"group id or url are required\")"
    },
    {
        "line": 112,
        "fullcodeline": "filter_kwargs = {}"
    },
    {
        "line": 113,
        "fullcodeline": "filters = args.search_filter or []"
    },
    {
        "line": 132,
        "fullcodeline": "iterator = search(urls, args.unsafe, **filter_kwargs)"
    },
    {
        "line": 133,
        "fullcodeline": "text = f\"Search results for \\\"{urls}\\\"\""
    },
    {
        "line": 134,
        "fullcodeline": "on_empty_err = f\"Search results \\\"{urls}\\\" are empty\""
    },
    {
        "line": 135,
        "fullcodeline": "on_preview = preview_cover_manga"
    },
    {
        "line": 33,
        "fullcodeline": "file_path += ':' + f"
    },
    {
        "line": 47,
        "fullcodeline": "elif not os.path.exists(file_path):"
    },
    {
        "line": 114,
        "fullcodeline": "for f in filters:"
    },
    {
        "line": 22,
        "fullcodeline": "err_file = True"
    },
    {
        "line": 39,
        "fullcodeline": "r.raise_for_status()"
    },
    {
        "line": 48,
        "fullcodeline": "parser.error(f\"File \\\"{file_path}\\\" is not exist\")"
    },
    {
        "line": 137,
        "fullcodeline": "result = urls.split(':')"
    },
    {
        "line": 151,
        "fullcodeline": "text = f\"Manga library from user \\\"{user.name}\\\"\""
    },
    {
        "line": 152,
        "fullcodeline": "on_empty_err = f\"User \\\"{user.name}\\\" has no saved mangas\""
    },
    {
        "line": 153,
        "fullcodeline": "on_preview = preview_cover_manga"
    },
    {
        "line": 41,
        "fullcodeline": "raise MangaDexException(f\"Failed to connect '{file_path}', status code = {r.status_code}\")"
    },
    {
        "line": 115,
        "fullcodeline": "key, value  = get_key_value(f)"
    },
    {
        "line": 141,
        "fullcodeline": "status = result[1]"
    },
    {
        "line": 146,
        "fullcodeline": "iterator = get_manga_from_user_library(status, args.unsafe)"
    },
    {
        "line": 158,
        "fullcodeline": "user_id = None"
    },
    {
        "line": 179,
        "fullcodeline": "text = f\"MangaDex List library from user \\\"{user.name}\\\"\""
    },
    {
        "line": 180,
        "fullcodeline": "on_empty_err = f\"User \\\"{user.name}\\\" has no saved lists\""
    },
    {
        "line": 181,
        "fullcodeline": "on_preview = lambda x: preview_list(args, x)"
    },
    {
        "line": 117,
        "fullcodeline": "value_filter_kwargs = filter_kwargs[key]"
    },
    {
        "line": 156,
        "fullcodeline": "_, user = get_key_value(urls, sep=':')"
    },
    {
        "line": 127,
        "fullcodeline": "values = split_comma_separated(value, single_value_to_list=True)"
    },
    {
        "line": 128,
        "fullcodeline": "new_values.extend(values)"
    },
    {
        "line": 130,
        "fullcodeline": "filter_kwargs[key] = new_values"
    },
    {
        "line": 143,
        "fullcodeline": "status = None"
    },
    {
        "line": 148,
        "fullcodeline": "parser.error(str(e))"
    },
    {
        "line": 174,
        "fullcodeline": "user = iterator.user"
    },
    {
        "line": 189,
        "fullcodeline": "text = f\"MangaDex followed List from user \\\"{user.name}\\\"\""
    },
    {
        "line": 190,
        "fullcodeline": "on_empty_err = f\"User \\\"{user.name}\\\" has no followed lists\""
    },
    {
        "line": 191,
        "fullcodeline": "on_preview = lambda x: preview_list(args, x)"
    },
    {
        "line": 119,
        "fullcodeline": "filter_kwargs[key] = split_comma_separated(value)"
    },
    {
        "line": 122,
        "fullcodeline": "if isinstance(value_filter_kwargs, str):"
    },
    {
        "line": 123,
        "fullcodeline": "new_values = [value_filter_kwargs]"
    },
    {
        "line": 125,
        "fullcodeline": "new_values = value_filter_kwargs"
    },
    {
        "line": 161,
        "fullcodeline": "user_id = __validate(user)"
    },
    {
        "line": 167,
        "fullcodeline": "iterator = get_list_from_user(user_id)"
    },
    {
        "line": 169,
        "fullcodeline": "iterator = get_list_from_user_library()"
    },
    {
        "line": 171,
        "fullcodeline": "parser.error(str(e))"
    },
    {
        "line": 184,
        "fullcodeline": "iterator = get_followed_list_from_user_library()"
    },
    {
        "line": 163,
        "fullcodeline": "parser.error(f\"\\\"{user}\\\" is not a valid user\")"
    },
    {
        "line": 186,
        "fullcodeline": "parser.error(str(e))"
    }
]