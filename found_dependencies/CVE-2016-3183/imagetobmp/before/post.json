[
    {
        "line": 4,
        "fullcodeline": "FILE *fdest = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "if (image->comps[0].prec < 8) {"
    },
    {
        "line": 11,
        "fullcodeline": "if (image->numcomps >= 3 && image->comps[0].dx == image->comps[1].dx"
    },
    {
        "line": 8,
        "fullcodeline": "fprintf(stderr, \"Unsupported number of components: %d\\n\", image->comps[0].prec);"
    },
    {
        "line": 16,
        "fullcodeline": "&& image->comps[1].prec == image->comps[2].prec) {"
    },
    {
        "line": 22,
        "fullcodeline": "fdest = fopen(outfile, \"wb\");"
    },
    {
        "line": 31,
        "fullcodeline": "fprintf(fdest, \"BM\");"
    },
    {
        "line": 35,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\","
    },
    {
        "line": 40,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff, ((0) >> 24) & 0xff);"
    },
    {
        "line": 41,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (54) & 0xff, ((54) >> 8) & 0xff,((54) >> 16) & 0xff, ((54) >> 24) & 0xff);"
    },
    {
        "line": 45,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff,\t((40) >> 16) & 0xff, ((40) >> 24) & 0xff);"
    },
    {
        "line": 46,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8) ((w) & 0xff),"
    },
    {
        "line": 50,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8) ((h) & 0xff),"
    },
    {
        "line": 54,
        "fullcodeline": "fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);"
    },
    {
        "line": 55,
        "fullcodeline": "fprintf(fdest, \"%c%c\", (24) & 0xff, ((24) >> 8) & 0xff);"
    },
    {
        "line": 56,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff, ((0) >> 24) & 0xff);"
    },
    {
        "line": 57,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8) (3 * h * w + 3 * h * (w % 2)) & 0xff,"
    },
    {
        "line": 61,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff, ((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);"
    },
    {
        "line": 62,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\t((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);"
    },
    {
        "line": 63,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff, ((0) >> 24) & 0xff);"
    },
    {
        "line": 64,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff, ((0) >> 24) & 0xff);"
    },
    {
        "line": 114,
        "fullcodeline": "fclose(fdest);"
    },
    {
        "line": 15,
        "fullcodeline": "&& image->comps[0].prec == image->comps[1].prec"
    },
    {
        "line": 23,
        "fullcodeline": "if (!fdest) {"
    },
    {
        "line": 36,
        "fullcodeline": "(OPJ_UINT8) (h * w * 3 + 3 * h * (w % 2) + 54) & 0xff,"
    },
    {
        "line": 37,
        "fullcodeline": "(OPJ_UINT8) ((h * w * 3 + 3 * h * (w % 2) + 54)\t>> 8) & 0xff,"
    },
    {
        "line": 38,
        "fullcodeline": "(OPJ_UINT8) ((h * w * 3 + 3 * h * (w % 2) + 54)\t>> 16) & 0xff,"
    },
    {
        "line": 39,
        "fullcodeline": "(OPJ_UINT8) ((h * w * 3 + 3 * h * (w % 2) + 54)\t>> 24) & 0xff);"
    },
    {
        "line": 47,
        "fullcodeline": "(OPJ_UINT8) ((w) >> 8) & 0xff,"
    },
    {
        "line": 48,
        "fullcodeline": "(OPJ_UINT8) ((w) >> 16) & 0xff,"
    },
    {
        "line": 49,
        "fullcodeline": "(OPJ_UINT8) ((w) >> 24) & 0xff);"
    },
    {
        "line": 51,
        "fullcodeline": "(OPJ_UINT8) ((h) >> 8) & 0xff,"
    },
    {
        "line": 52,
        "fullcodeline": "(OPJ_UINT8) ((h) >> 16) & 0xff,"
    },
    {
        "line": 53,
        "fullcodeline": "(OPJ_UINT8) ((h) >> 24) & 0xff);"
    },
    {
        "line": 58,
        "fullcodeline": "(OPJ_UINT8) ((h * w * 3 + 3 * h * (w % 2)) >> 8) & 0xff,"
    },
    {
        "line": 59,
        "fullcodeline": "(OPJ_UINT8) ((h * w * 3 + 3 * h * (w % 2)) >> 16) & 0xff,"
    },
    {
        "line": 60,
        "fullcodeline": "(OPJ_UINT8) ((h * w * 3 + 3 * h * (w % 2)) >> 24) & 0xff);"
    },
    {
        "line": 66,
        "fullcodeline": "if (image->comps[0].prec > 8) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (image->comps[1].prec > 8) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (image->comps[2].prec > 8) {"
    },
    {
        "line": 85,
        "fullcodeline": "for (i = 0; i < w * h; i++) {"
    },
    {
        "line": 121,
        "fullcodeline": "fdest = fopen(outfile, \"wb\");"
    },
    {
        "line": 129,
        "fullcodeline": "fprintf(fdest, \"BM\");"
    },
    {
        "line": 133,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8) (h * w + 54 + 1024 + h * (w % 2)) & 0xff,"
    },
    {
        "line": 137,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff, ((0) >> 24) & 0xff);"
    },
    {
        "line": 138,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (54 + 1024) & 0xff, ((54 + 1024) >> 8) & 0xff,"
    },
    {
        "line": 144,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (40) & 0xff, ((40) >> 8) & 0xff,\t((40) >> 16) & 0xff, ((40) >> 24) & 0xff);"
    },
    {
        "line": 145,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8) ((w) & 0xff),"
    },
    {
        "line": 149,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8) ((h) & 0xff),"
    },
    {
        "line": 153,
        "fullcodeline": "fprintf(fdest, \"%c%c\", (1) & 0xff, ((1) >> 8) & 0xff);"
    },
    {
        "line": 154,
        "fullcodeline": "fprintf(fdest, \"%c%c\", (8) & 0xff, ((8) >> 8) & 0xff);"
    },
    {
        "line": 155,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (0) & 0xff, ((0) >> 8) & 0xff, ((0) >> 16) & 0xff, ((0) >> 24) & 0xff);"
    },
    {
        "line": 156,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (OPJ_UINT8) (h * w + h * (w % 2)) & 0xff,"
    },
    {
        "line": 160,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\t((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);"
    },
    {
        "line": 161,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (7834) & 0xff, ((7834) >> 8) & 0xff,\t((7834) >> 16) & 0xff, ((7834) >> 24) & 0xff);"
    },
    {
        "line": 162,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff, ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);"
    },
    {
        "line": 163,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", (256) & 0xff, ((256) >> 8) & 0xff, ((256) >> 16) & 0xff, ((256) >> 24) & 0xff);"
    },
    {
        "line": 190,
        "fullcodeline": "fclose(fdest);"
    },
    {
        "line": 14,
        "fullcodeline": "&& image->comps[1].dy == image->comps[2].dy"
    },
    {
        "line": 24,
        "fullcodeline": "fprintf(stderr, \"ERROR -> failed to open %s for writing\\n\", outfile);"
    },
    {
        "line": 67,
        "fullcodeline": "adjustR = (int)image->comps[0].prec - 8;"
    },
    {
        "line": 68,
        "fullcodeline": "printf(\"BMP CONVERSION: Truncating component 0 from %d bits to 8 bits\\n\", image->comps[0].prec);"
    },
    {
        "line": 73,
        "fullcodeline": "adjustG = (int)image->comps[1].prec - 8;"
    },
    {
        "line": 74,
        "fullcodeline": "printf(\"BMP CONVERSION: Truncating component 1 from %d bits to 8 bits\\n\", image->comps[1].prec);"
    },
    {
        "line": 79,
        "fullcodeline": "adjustB = (int)image->comps[2].prec - 8;"
    },
    {
        "line": 80,
        "fullcodeline": "printf(\"BMP CONVERSION: Truncating component 2 from %d bits to 8 bits\\n\", image->comps[2].prec);"
    },
    {
        "line": 90,
        "fullcodeline": "r += (image->comps[0].sgnd ? 1 << (image->comps[0].prec - 1) : 0);"
    },
    {
        "line": 91,
        "fullcodeline": "r = ((r >> adjustR)+((r >> (adjustR-1))%2));"
    },
    {
        "line": 93,
        "fullcodeline": "rc = (OPJ_UINT8)r;"
    },
    {
        "line": 96,
        "fullcodeline": "g += (image->comps[1].sgnd ? 1 << (image->comps[1].prec - 1) : 0);"
    },
    {
        "line": 97,
        "fullcodeline": "g = ((g >> adjustG)+((g >> (adjustG-1))%2));"
    },
    {
        "line": 99,
        "fullcodeline": "gc = (OPJ_UINT8)g;"
    },
    {
        "line": 102,
        "fullcodeline": "b += (image->comps[2].sgnd ? 1 << (image->comps[2].prec - 1) : 0);"
    },
    {
        "line": 103,
        "fullcodeline": "b = ((b >> adjustB)+((b >> (adjustB-1))%2));"
    },
    {
        "line": 105,
        "fullcodeline": "bc = (OPJ_UINT8)b;"
    },
    {
        "line": 107,
        "fullcodeline": "fprintf(fdest, \"%c%c%c\", bc, gc, rc);"
    },
    {
        "line": 122,
        "fullcodeline": "if (!fdest) {"
    },
    {
        "line": 134,
        "fullcodeline": "(OPJ_UINT8) ((h * w + 54 + 1024 + h * (w % 2)) >> 8) & 0xff,"
    },
    {
        "line": 135,
        "fullcodeline": "(OPJ_UINT8) ((h * w + 54 + 1024 + h * (w % 2)) >> 16) & 0xff,"
    },
    {
        "line": 136,
        "fullcodeline": "(OPJ_UINT8) ((h * w + 54 + 1024 + w * (w % 2)) >> 24) & 0xff);"
    },
    {
        "line": 139,
        "fullcodeline": "((54 + 1024) >> 16) & 0xff,"
    },
    {
        "line": 140,
        "fullcodeline": "((54 + 1024) >> 24) & 0xff);"
    },
    {
        "line": 146,
        "fullcodeline": "(OPJ_UINT8) ((w) >> 8) & 0xff,"
    },
    {
        "line": 147,
        "fullcodeline": "(OPJ_UINT8) ((w) >> 16) & 0xff,"
    },
    {
        "line": 148,
        "fullcodeline": "(OPJ_UINT8) ((w) >> 24) & 0xff);"
    },
    {
        "line": 150,
        "fullcodeline": "(OPJ_UINT8) ((h) >> 8) & 0xff,"
    },
    {
        "line": 151,
        "fullcodeline": "(OPJ_UINT8) ((h) >> 16) & 0xff,"
    },
    {
        "line": 152,
        "fullcodeline": "(OPJ_UINT8) ((h) >> 24) & 0xff);"
    },
    {
        "line": 157,
        "fullcodeline": "(OPJ_UINT8) ((h * w + h * (w % 2)) >> 8) &\t0xff,"
    },
    {
        "line": 158,
        "fullcodeline": "(OPJ_UINT8) ((h * w + h * (w % 2)) >> 16) &\t0xff,"
    },
    {
        "line": 159,
        "fullcodeline": "(OPJ_UINT8) ((h * w + h * (w % 2)) >> 24) & 0xff);"
    },
    {
        "line": 165,
        "fullcodeline": "if (image->comps[0].prec > 8) {"
    },
    {
        "line": 171,
        "fullcodeline": "for (i = 0; i < 256; i++) {"
    },
    {
        "line": 175,
        "fullcodeline": "for (i = 0; i < w * h; i++) {"
    },
    {
        "line": 71,
        "fullcodeline": "adjustR = 0;"
    },
    {
        "line": 77,
        "fullcodeline": "adjustG = 0;"
    },
    {
        "line": 83,
        "fullcodeline": "adjustB = 0;"
    },
    {
        "line": 92,
        "fullcodeline": "if(r > 255) r = 255; else if(r < 0) r = 0;"
    },
    {
        "line": 98,
        "fullcodeline": "if(g > 255) g = 255; else if(g < 0) g = 0;"
    },
    {
        "line": 104,
        "fullcodeline": "if(b > 255) b = 255; else if(b < 0) b = 0;"
    },
    {
        "line": 109,
        "fullcodeline": "if ((i + 1) % w == 0) {"
    },
    {
        "line": 123,
        "fullcodeline": "fprintf(stderr, \"ERROR -> failed to open %s for writing\\n\", outfile);"
    },
    {
        "line": 166,
        "fullcodeline": "adjustR = (int)image->comps[0].prec - 8;"
    },
    {
        "line": 167,
        "fullcodeline": "printf(\"BMP CONVERSION: Truncating component 0 from %d bits to 8 bits\\n\", image->comps[0].prec);"
    },
    {
        "line": 172,
        "fullcodeline": "fprintf(fdest, \"%c%c%c%c\", i, i, i, 0);"
    },
    {
        "line": 179,
        "fullcodeline": "r += (image->comps[0].sgnd ? 1 << (image->comps[0].prec - 1) : 0);"
    },
    {
        "line": 180,
        "fullcodeline": "r = ((r >> adjustR)+((r >> (adjustR-1))%2));"
    },
    {
        "line": 183,
        "fullcodeline": "fprintf(fdest, \"%c\", (OPJ_UINT8)r);"
    },
    {
        "line": 12,
        "fullcodeline": "&& image->comps[1].dx == image->comps[2].dx"
    },
    {
        "line": 89,
        "fullcodeline": "r = image->comps[0].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];"
    },
    {
        "line": 95,
        "fullcodeline": "g = image->comps[1].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];"
    },
    {
        "line": 101,
        "fullcodeline": "b = image->comps[2].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];"
    },
    {
        "line": 169,
        "fullcodeline": "adjustR = 0;"
    },
    {
        "line": 181,
        "fullcodeline": "if(r > 255) r = 255; else if(r < 0) r = 0;"
    },
    {
        "line": 185,
        "fullcodeline": "if ((i + 1) % w == 0) {"
    },
    {
        "line": 110,
        "fullcodeline": "for (pad = ((3 * w) % 4) ? (4 - (3 * w) % 4) : 0; pad > 0; pad--)\t/* ADD */"
    },
    {
        "line": 111,
        "fullcodeline": "fprintf(fdest, \"%c\", 0);"
    },
    {
        "line": 178,
        "fullcodeline": "r = image->comps[0].data[w * h - ((i) / (w) + 1) * w + (i) % (w)];"
    },
    {
        "line": 186,
        "fullcodeline": "for ((pad = w % 4) ? (4 - w % 4) : 0; pad > 0; pad--)\t/* ADD */"
    },
    {
        "line": 187,
        "fullcodeline": "fprintf(fdest, \"%c\", 0);"
    }
]