[
    {
        "line": 5,
        "fullcodeline": "Fixed tang[4], delta;"
    },
    {
        "line": 11,
        "fullcodeline": "dir = 1;"
    },
    {
        "line": 14,
        "fullcodeline": "orient = gf_bs_read_int(bs, 2);"
    },
    {
        "line": 22,
        "fullcodeline": "delta = 1;"
    },
    {
        "line": 27,
        "fullcodeline": "delta = gf_divfix(INT2FIX(dir), gf_sqrt(delta) );"
    },
    {
        "line": 28,
        "fullcodeline": "m_ft[orient] = delta;"
    },
    {
        "line": 7,
        "fullcodeline": "if (NbBits>32) return GF_NON_COMPLIANT_BITSTREAM;"
    },
    {
        "line": 8,
        "fullcodeline": "if (NbComp != 2 && NbComp != 3) return GF_BAD_PARAM;"
    },
    {
        "line": 12,
        "fullcodeline": "if(NbComp == 2) dir -= 2 * gf_bs_read_int(bs, 1);"
    },
    {
        "line": 15,
        "fullcodeline": "if ((orient==3) && (NbComp==2)) return GF_NON_COMPLIANT_BITSTREAM;"
    },
    {
        "line": 17,
        "fullcodeline": "for(i=0; i<NbComp; i++) {"
    },
    {
        "line": 23,
        "fullcodeline": "for (i=0; i<NbComp; i++) {"
    },
    {
        "line": 30,
        "fullcodeline": "for (i=0; i<NbComp; i++) {"
    },
    {
        "line": 18,
        "fullcodeline": "value = gf_bs_read_int(bs, NbBits) - (1 << (NbBits-1) );"
    },
    {
        "line": 19,
        "fullcodeline": "sign = (value >= 0) ? 1 : -1;"
    },
    {
        "line": 20,
        "fullcodeline": "m_ft[i] = sign * Q_InverseQuantize(0, 1, NbBits-1, sign*value);"
    },
    {
        "line": 24,
        "fullcodeline": "tang[i] = gf_tan(gf_mulfix(GF_PI/4, m_ft[i]) );"
    },
    {
        "line": 25,
        "fullcodeline": "delta += gf_mulfix(tang[i], tang[i]);"
    },
    {
        "line": 31,
        "fullcodeline": "m_ft[ (orient + i+1) % (NbComp+1) ] = gf_mulfix(tang[i], delta);"
    }
]