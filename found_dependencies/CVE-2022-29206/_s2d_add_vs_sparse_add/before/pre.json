[
    {
        "line": 2,
        "fullcodeline": "np.random.seed(1618)"
    },
    {
        "line": 4,
        "fullcodeline": "with session.Session(graph=ops.Graph()) as sess:"
    },
    {
        "line": 20,
        "fullcodeline": "return s2d_total * 1e3 / num_iters, sa_total * 1e3 / num_iters"
    },
    {
        "line": 5,
        "fullcodeline": "sp_vals = np.random.rand(n, m).astype(np.float32)"
    },
    {
        "line": 7,
        "fullcodeline": "vals = np.random.rand(n, m).astype(np.float32)"
    },
    {
        "line": 9,
        "fullcodeline": "s2d = math_ops.add("
    },
    {
        "line": 11,
        "fullcodeline": "sa = sparse_ops.sparse_add(sp_t, constant_op.constant(vals))"
    },
    {
        "line": 13,
        "fullcodeline": "timeit.timeit(lambda: sess.run(s2d), number=3)"
    },
    {
        "line": 14,
        "fullcodeline": "timeit.timeit(lambda: sess.run(sa), number=3)"
    },
    {
        "line": 16,
        "fullcodeline": "s2d_total = timeit.timeit(lambda: sess.run(s2d), number=num_iters)"
    },
    {
        "line": 17,
        "fullcodeline": "sa_total = timeit.timeit(lambda: sess.run(sa), number=num_iters)"
    },
    {
        "line": 6,
        "fullcodeline": "sp_t, unused_nnz = _sparsify(sp_vals, thresh=sparsity, index_dtype=np.int32)"
    },
    {
        "line": 10,
        "fullcodeline": "sparse_ops.sparse_tensor_to_dense(sp_t), constant_op.constant(vals))"
    }
]