[
    {
        "line": 20,
        "fullcodeline": "def _build_data_ranges(data, col, dtype):"
    },
    {
        "line": 28,
        "fullcodeline": "data = global_state.get_data(data_id)"
    },
    {
        "line": 29,
        "fullcodeline": "name = get_str_arg(request, \"name\")"
    },
    {
        "line": 34,
        "fullcodeline": "col = get_str_arg(request, \"col\")"
    },
    {
        "line": 35,
        "fullcodeline": "replacement_type = get_str_arg(request, \"type\")"
    },
    {
        "line": 36,
        "fullcodeline": "cfg = json.loads(get_str_arg(request, \"cfg\"))"
    },
    {
        "line": 38,
        "fullcodeline": "builder = ColumnReplacement(data_id, col, replacement_type, cfg, name)"
    },
    {
        "line": 39,
        "fullcodeline": "output = builder.build_replacements()"
    },
    {
        "line": 40,
        "fullcodeline": "dtype = find_dtype(output)"
    },
    {
        "line": 41,
        "fullcodeline": "curr_dtypes = global_state.get_dtypes(data_id)"
    },
    {
        "line": 60,
        "fullcodeline": "global_state.set_data(data_id, data)"
    },
    {
        "line": 61,
        "fullcodeline": "global_state.set_dtypes(data_id, curr_dtypes)"
    },
    {
        "line": 62,
        "fullcodeline": "curr_history = global_state.get_history(data_id) or []"
    },
    {
        "line": 63,
        "fullcodeline": "curr_history += [builder.build_code()]"
    },
    {
        "line": 64,
        "fullcodeline": "global_state.set_history(data_id, curr_history)"
    },
    {
        "line": 30,
        "fullcodeline": "if name is not None:"
    },
    {
        "line": 43,
        "fullcodeline": "if name is not None:"
    },
    {
        "line": 65,
        "fullcodeline": "return jsonify(success=True)"
    },
    {
        "line": 31,
        "fullcodeline": "name = str(name)"
    },
    {
        "line": 44,
        "fullcodeline": "data.loc[:, name] = output"
    },
    {
        "line": 45,
        "fullcodeline": "dtype_f = dtype_formatter("
    },
    {
        "line": 48,
        "fullcodeline": "curr_dtypes.append(dtype_f(len(curr_dtypes), name))"
    },
    {
        "line": 50,
        "fullcodeline": "data.loc[:, col] = output"
    },
    {
        "line": 51,
        "fullcodeline": "dtype_f = dtype_formatter("
    },
    {
        "line": 54,
        "fullcodeline": "col_index = next("
    },
    {
        "line": 57,
        "fullcodeline": "curr_col_dtype = dtype_f(col_index, col)"
    },
    {
        "line": 58,
        "fullcodeline": "curr_dtypes = [curr_col_dtype if d[\"name\"] == col else d for d in curr_dtypes]"
    },
    {
        "line": 32,
        "fullcodeline": "if name in data.columns:"
    },
    {
        "line": 33,
        "fullcodeline": "raise Exception(\"A column named '{}' already exists!\".format(name))"
    },
    {
        "line": 46,
        "fullcodeline": "data, {name: dtype}, _build_data_ranges(data, name, dtype)"
    },
    {
        "line": 52,
        "fullcodeline": "data, {col: dtype}, _build_data_ranges(data, col, dtype)"
    },
    {
        "line": 55,
        "fullcodeline": "(i for i, d in enumerate(curr_dtypes) if d[\"name\"] == col), None"
    }
]