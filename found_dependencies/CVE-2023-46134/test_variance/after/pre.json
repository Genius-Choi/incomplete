[
    {
        "line": 4,
        "fullcodeline": "global_state.clear_store()"
    },
    {
        "line": 11,
        "fullcodeline": "def _df():"
    },
    {
        "line": 15,
        "fullcodeline": "df = pd.DataFrame(list(_df()))"
    },
    {
        "line": 16,
        "fullcodeline": "df.loc[:, \"low_var\"] = 2500"
    },
    {
        "line": 17,
        "fullcodeline": "df.loc[0, \"low_var\"] = 1"
    },
    {
        "line": 2,
        "fullcodeline": "from dtale.views import build_dtypes_state, format_data"
    },
    {
        "line": 5,
        "fullcodeline": "with open("
    },
    {
        "line": 18,
        "fullcodeline": "df, _ = format_data(df)"
    },
    {
        "line": 20,
        "fullcodeline": "with app.test_client() as c:"
    },
    {
        "line": 8,
        "fullcodeline": "expected = f.read()"
    },
    {
        "line": 9,
        "fullcodeline": "expected = json.loads(expected)"
    },
    {
        "line": 21,
        "fullcodeline": "build_data_inst({c.port: df})"
    },
    {
        "line": 22,
        "fullcodeline": "dtypes = build_dtypes_state(df)"
    },
    {
        "line": 23,
        "fullcodeline": "assert next((dt for dt in dtypes if dt[\"name\"] == \"low_var\"), None)["
    },
    {
        "line": 26,
        "fullcodeline": "build_dtypes({c.port: dtypes})"
    },
    {
        "line": 27,
        "fullcodeline": "response = c.get("
    },
    {
        "line": 33,
        "fullcodeline": "response_data = response.get_json()"
    },
    {
        "line": 34,
        "fullcodeline": "del response_data[\"code\"]"
    },
    {
        "line": 35,
        "fullcodeline": "response_data[\"jarqueBera\"][\"pvalue\"] = round("
    },
    {
        "line": 38,
        "fullcodeline": "response_data[\"jarqueBera\"][\"statistic\"] = round("
    },
    {
        "line": 41,
        "fullcodeline": "unittest.assertEqual(response_data, expected[\"x\"])"
    },
    {
        "line": 43,
        "fullcodeline": "response = c.get("
    },
    {
        "line": 46,
        "fullcodeline": "response_data = response.get_json()"
    },
    {
        "line": 47,
        "fullcodeline": "del response_data[\"code\"]"
    },
    {
        "line": 48,
        "fullcodeline": "response_data[\"shapiroWilk\"][\"statistic\"] = round("
    },
    {
        "line": 51,
        "fullcodeline": "response_data[\"jarqueBera\"][\"statistic\"] = round("
    },
    {
        "line": 54,
        "fullcodeline": "unittest.assertEqual(response_data, expected[\"low_var\"])"
    },
    {
        "line": 6,
        "fullcodeline": "os.path.join(os.path.dirname(__file__), \"..\", \"data/test_variance.json\"), \"r\""
    },
    {
        "line": 30,
        "fullcodeline": "if parse_version(pd.__version__) >= parse_version(\"1.3.0\"):"
    },
    {
        "line": 28,
        "fullcodeline": "\"/dtale/variance/{}\".format(c.port), query_string=dict(col=\"x\")"
    },
    {
        "line": 31,
        "fullcodeline": "expected[\"x\"][\"check2\"][\"val1\"][\"val\"] = 0"
    },
    {
        "line": 32,
        "fullcodeline": "expected[\"x\"][\"check2\"][\"val2\"][\"val\"] = 1"
    },
    {
        "line": 44,
        "fullcodeline": "\"/dtale/variance/{}\".format(c.port), query_string=dict(col=\"low_var\")"
    }
]