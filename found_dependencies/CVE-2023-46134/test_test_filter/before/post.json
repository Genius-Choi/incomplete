[
    {
        "line": 2,
        "fullcodeline": "with app.test_client() as c:"
    },
    {
        "line": 51,
        "fullcodeline": "df = pd.DataFrame([dict(a=1)])"
    },
    {
        "line": 52,
        "fullcodeline": "df[\"a.b\"] = 2"
    },
    {
        "line": 3,
        "fullcodeline": "build_data_inst({c.port: test_data})"
    },
    {
        "line": 4,
        "fullcodeline": "response = c.get("
    },
    {
        "line": 8,
        "fullcodeline": "response_data = response.get_json()"
    },
    {
        "line": 9,
        "fullcodeline": "assert response_data[\"success\"]"
    },
    {
        "line": 11,
        "fullcodeline": "response = c.get("
    },
    {
        "line": 14,
        "fullcodeline": "response_data = response.get_json()"
    },
    {
        "line": 15,
        "fullcodeline": "assert response_data[\"success\"]"
    },
    {
        "line": 17,
        "fullcodeline": "response = c.get("
    },
    {
        "line": 21,
        "fullcodeline": "response_data = response.get_json()"
    },
    {
        "line": 22,
        "fullcodeline": "assert response_data[\"success\"]"
    },
    {
        "line": 24,
        "fullcodeline": "response = c.get("
    },
    {
        "line": 28,
        "fullcodeline": "response_data = response.get_json()"
    },
    {
        "line": 29,
        "fullcodeline": "assert response_data[\"success\"]"
    },
    {
        "line": 31,
        "fullcodeline": "response = c.get("
    },
    {
        "line": 34,
        "fullcodeline": "response_data = response.get_json()"
    },
    {
        "line": 35,
        "fullcodeline": "assert not response_data[\"success\"]"
    },
    {
        "line": 36,
        "fullcodeline": "assert response_data[\"error\"] == 'query \"bar > 1.5\" found no data, please alter'"
    },
    {
        "line": 38,
        "fullcodeline": "response = c.get("
    },
    {
        "line": 41,
        "fullcodeline": "response_data = response.get_json()"
    },
    {
        "line": 42,
        "fullcodeline": "assert \"error\" in response_data"
    },
    {
        "line": 44,
        "fullcodeline": "response = c.get("
    },
    {
        "line": 48,
        "fullcodeline": "response_data = response.get_json()"
    },
    {
        "line": 49,
        "fullcodeline": "assert response_data[\"success\"]"
    },
    {
        "line": 53,
        "fullcodeline": "with app.test_client() as c:"
    },
    {
        "line": 6,
        "fullcodeline": "query_string=dict(query=\"date == date\"),"
    },
    {
        "line": 12,
        "fullcodeline": "\"/dtale/test-filter/{}\".format(c.port), query_string=dict(query=\"foo == 1\")"
    },
    {
        "line": 19,
        "fullcodeline": "query_string=dict(query=\"date == '20000101'\"),"
    },
    {
        "line": 26,
        "fullcodeline": "query_string=dict(query=\"baz == 'baz'\"),"
    },
    {
        "line": 32,
        "fullcodeline": "\"/dtale/test-filter/{}\".format(c.port), query_string=dict(query=\"bar > 1.5\")"
    },
    {
        "line": 39,
        "fullcodeline": "\"/dtale/test-filter/{}\".format(c.port), query_string=dict(query=\"foo2 == 1\")"
    },
    {
        "line": 46,
        "fullcodeline": "query_string=dict(query=None, save=\"true\"),"
    },
    {
        "line": 54,
        "fullcodeline": "build_data_inst({c.port: df})"
    },
    {
        "line": 55,
        "fullcodeline": "response = c.get("
    },
    {
        "line": 59,
        "fullcodeline": "response_data = response.get_json()"
    },
    {
        "line": 60,
        "fullcodeline": "assert not response_data[\"success\"]"
    },
    {
        "line": 5,
        "fullcodeline": "\"/dtale/test-filter/{}\".format(c.port),"
    },
    {
        "line": 18,
        "fullcodeline": "\"/dtale/test-filter/{}\".format(c.port),"
    },
    {
        "line": 25,
        "fullcodeline": "\"/dtale/test-filter/{}\".format(c.port),"
    },
    {
        "line": 45,
        "fullcodeline": "\"/dtale/test-filter/{}\".format(c.port),"
    },
    {
        "line": 57,
        "fullcodeline": "query_string=dict(query=\"a.b == 2\"),"
    },
    {
        "line": 56,
        "fullcodeline": "\"/dtale/test-filter/{}\".format(c.port),"
    }
]