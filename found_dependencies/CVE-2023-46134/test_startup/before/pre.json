[
    {
        "line": 2,
        "fullcodeline": "import dtale.views as views"
    },
    {
        "line": 3,
        "fullcodeline": "import dtale.global_state as global_state"
    },
    {
        "line": 5,
        "fullcodeline": "global_state.clear_store()"
    },
    {
        "line": 7,
        "fullcodeline": "instance = views.startup(URL)"
    },
    {
        "line": 8,
        "fullcodeline": "assert instance._data_id == \"1\""
    },
    {
        "line": 12,
        "fullcodeline": "assert \"No data has been loaded into this D-Tale session!\" in str("
    },
    {
        "line": 18,
        "fullcodeline": "assert ("
    },
    {
        "line": 23,
        "fullcodeline": "test_data = pd.DataFrame([dict(date=pd.Timestamp(\"now\"), security_id=1, foo=1.5)])"
    },
    {
        "line": 24,
        "fullcodeline": "test_data = test_data.set_index([\"date\", \"security_id\"])"
    },
    {
        "line": 25,
        "fullcodeline": "instance = views.startup("
    },
    {
        "line": 37,
        "fullcodeline": "pdt.assert_frame_equal(instance.data, test_data.reset_index())"
    },
    {
        "line": 38,
        "fullcodeline": "unittest.assertEqual("
    },
    {
        "line": 61,
        "fullcodeline": "global_state.set_app_settings(dict(hide_header_editor=False))"
    },
    {
        "line": 62,
        "fullcodeline": "unittest.assertEqual("
    },
    {
        "line": 85,
        "fullcodeline": "test_data = test_data.reset_index()"
    },
    {
        "line": 89,
        "fullcodeline": "range_highlights = {"
    },
    {
        "line": 109,
        "fullcodeline": "instance = views.startup("
    },
    {
        "line": 117,
        "fullcodeline": "pdt.assert_frame_equal(instance.data, test_data)"
    },
    {
        "line": 118,
        "fullcodeline": "unittest.assertEqual("
    },
    {
        "line": 134,
        "fullcodeline": "test_data = pd.DataFrame([dict(date=pd.Timestamp(\"now\"), security_id=1)])"
    },
    {
        "line": 135,
        "fullcodeline": "test_data = test_data.set_index(\"security_id\").date"
    },
    {
        "line": 136,
        "fullcodeline": "instance = views.startup(URL, data_loader=lambda: test_data)"
    },
    {
        "line": 137,
        "fullcodeline": "pdt.assert_frame_equal(instance.data, test_data.reset_index())"
    },
    {
        "line": 138,
        "fullcodeline": "unittest.assertEqual("
    },
    {
        "line": 154,
        "fullcodeline": "test_data = pd.DatetimeIndex([pd.Timestamp(\"now\")], name=\"date\")"
    },
    {
        "line": 155,
        "fullcodeline": "instance = views.startup(URL, data_loader=lambda: test_data)"
    },
    {
        "line": 156,
        "fullcodeline": "pdt.assert_frame_equal(instance.data, test_data.to_frame(index=False))"
    },
    {
        "line": 157,
        "fullcodeline": "unittest.assertEqual("
    },
    {
        "line": 173,
        "fullcodeline": "test_data = pd.MultiIndex.from_arrays([[1, 2], [3, 4]], names=(\"a\", \"b\"))"
    },
    {
        "line": 174,
        "fullcodeline": "instance = views.startup(URL, data_loader=lambda: test_data)"
    },
    {
        "line": 175,
        "fullcodeline": "pdt.assert_frame_equal(instance.data, test_data.to_frame(index=False))"
    },
    {
        "line": 176,
        "fullcodeline": "unittest.assertEqual("
    },
    {
        "line": 192,
        "fullcodeline": "test_data = pd.DataFrame("
    },
    {
        "line": 201,
        "fullcodeline": "instance = views.startup("
    },
    {
        "line": 204,
        "fullcodeline": "unittest.assertEqual("
    },
    {
        "line": 228,
        "fullcodeline": "non_visible = ["
    },
    {
        "line": 233,
        "fullcodeline": "unittest.assertEqual(non_visible, [\"baz\"])"
    },
    {
        "line": 235,
        "fullcodeline": "test_data = pd.DataFrame([dict(a=1, b=2)])"
    },
    {
        "line": 236,
        "fullcodeline": "test_data = test_data.rename(columns={\"b\": \"a\"})"
    },
    {
        "line": 239,
        "fullcodeline": "assert \"data contains duplicated column names: a\" in str(error)"
    },
    {
        "line": 241,
        "fullcodeline": "test_data = pd.DataFrame([dict(a=1, b=2)])"
    },
    {
        "line": 242,
        "fullcodeline": "test_data = test_data.set_index(\"a\")"
    },
    {
        "line": 243,
        "fullcodeline": "views.startup(URL, data=test_data, inplace=True, drop_index=True)"
    },
    {
        "line": 244,
        "fullcodeline": "assert \"a\" not in test_data.columns"
    },
    {
        "line": 246,
        "fullcodeline": "test_data = np.array([1, 2, 3])"
    },
    {
        "line": 247,
        "fullcodeline": "instance = views.startup(URL, data_loader=lambda: test_data)"
    },
    {
        "line": 248,
        "fullcodeline": "unittest.assertEqual(list(instance.data.iloc[:, 0].tolist()), test_data.tolist())"
    },
    {
        "line": 250,
        "fullcodeline": "test_data = np.ndarray(shape=(2, 2), dtype=float, order=\"F\")"
    },
    {
        "line": 251,
        "fullcodeline": "instance = views.startup(URL, data_loader=lambda: test_data)"
    },
    {
        "line": 254,
        "fullcodeline": "test_data = [1, 2, 3]"
    },
    {
        "line": 255,
        "fullcodeline": "instance = views.startup(URL, data_loader=lambda: test_data, ignore_duplicate=True)"
    },
    {
        "line": 256,
        "fullcodeline": "unittest.assertEqual(instance.data.iloc[:, 0].tolist(), test_data)"
    },
    {
        "line": 258,
        "fullcodeline": "test_data = dict(a=[1, 2, 3], b=[4, 5, 6])"
    },
    {
        "line": 259,
        "fullcodeline": "instance = views.startup(URL, data_loader=lambda: test_data, ignore_duplicate=True)"
    },
    {
        "line": 260,
        "fullcodeline": "unittest.assertEqual(instance.data[\"a\"].values.tolist(), test_data[\"a\"])"
    },
    {
        "line": 261,
        "fullcodeline": "unittest.assertEqual(instance.data[\"b\"].values.tolist(), test_data[\"b\"])"
    },
    {
        "line": 263,
        "fullcodeline": "test_data = dict(a=1, b=2, c=3)"
    },
    {
        "line": 264,
        "fullcodeline": "instance = views.startup(URL, data_loader=lambda: test_data, ignore_duplicate=True)"
    },
    {
        "line": 265,
        "fullcodeline": "unittest.assertEqual("
    },
    {
        "line": 268,
        "fullcodeline": "unittest.assertEqual("
    },
    {
        "line": 272,
        "fullcodeline": "test_data = pd.DataFrame("
    },
    {
        "line": 278,
        "fullcodeline": "instance = views.startup("
    },
    {
        "line": 284,
        "fullcodeline": "unittest.assertEqual("
    },
    {
        "line": 289,
        "fullcodeline": "many_cols = pd.DataFrame({\"sec{}\".format(v): [1] for v in range(500)})"
    },
    {
        "line": 290,
        "fullcodeline": "instance = views.startup(URL, data=many_cols)"
    },
    {
        "line": 291,
        "fullcodeline": "unittest.assertEqual("
    },
    {
        "line": 10,
        "fullcodeline": "with pytest.raises(views.NoDataLoadedException) as error:"
    },
    {
        "line": 16,
        "fullcodeline": "with pytest.raises(BaseException) as error:"
    },
    {
        "line": 19,
        "fullcodeline": "\"data loaded must be one of the following types: pandas.DataFrame, pandas.Series, pandas.DatetimeIndex\""
    },
    {
        "line": 39,
        "fullcodeline": "global_state.get_settings(instance._data_id),"
    },
    {
        "line": 40,
        "fullcodeline": "dict("
    },
    {
        "line": 63,
        "fullcodeline": "global_state.get_settings(instance._data_id),"
    },
    {
        "line": 64,
        "fullcodeline": "dict("
    },
    {
        "line": 86,
        "fullcodeline": "with pytest.raises(DuplicateDataError):"
    },
    {
        "line": 119,
        "fullcodeline": "global_state.get_settings(instance._data_id),"
    },
    {
        "line": 120,
        "fullcodeline": "dict("
    },
    {
        "line": 139,
        "fullcodeline": "global_state.get_settings(instance._data_id),"
    },
    {
        "line": 140,
        "fullcodeline": "dict("
    },
    {
        "line": 158,
        "fullcodeline": "global_state.get_settings(instance._data_id),"
    },
    {
        "line": 159,
        "fullcodeline": "dict("
    },
    {
        "line": 177,
        "fullcodeline": "global_state.get_settings(instance._data_id),"
    },
    {
        "line": 178,
        "fullcodeline": "dict("
    },
    {
        "line": 218,
        "fullcodeline": "next("
    },
    {
        "line": 237,
        "fullcodeline": "with pytest.raises(Exception) as error:"
    },
    {
        "line": 252,
        "fullcodeline": "np.testing.assert_almost_equal(instance.data.values, test_data)"
    },
    {
        "line": 266,
        "fullcodeline": "sorted(instance.data[\"index\"].values.tolist()), sorted(test_data.keys())"
    },
    {
        "line": 269,
        "fullcodeline": "sorted(instance.data[\"0\"].values.tolist()), sorted(test_data.values())"
    },
    {
        "line": 285,
        "fullcodeline": "list(instance.data.dtypes.apply(lambda x: x.name).values),"
    },
    {
        "line": 286,
        "fullcodeline": "[\"object\", \"category\"],"
    },
    {
        "line": 292,
        "fullcodeline": "len([v for v in global_state.get_dtypes(instance._data_id) if v[\"visible\"]]),"
    },
    {
        "line": 296,
        "fullcodeline": "if PY3 and check_pandas_version(\"0.25.0\"):"
    },
    {
        "line": 20,
        "fullcodeline": "in str(error.value)"
    },
    {
        "line": 28,
        "fullcodeline": "sort=[(\"security_id\", \"ASC\")],"
    },
    {
        "line": 49,
        "fullcodeline": "locked=[\"date\", \"security_id\"],"
    },
    {
        "line": 50,
        "fullcodeline": "indexes=[\"date\", \"security_id\"],"
    },
    {
        "line": 52,
        "fullcodeline": "sortInfo=[(\"security_id\", \"ASC\")],"
    },
    {
        "line": 73,
        "fullcodeline": "locked=[\"date\", \"security_id\"],"
    },
    {
        "line": 74,
        "fullcodeline": "indexes=[\"date\", \"security_id\"],"
    },
    {
        "line": 76,
        "fullcodeline": "sortInfo=[(\"security_id\", \"ASC\")],"
    },
    {
        "line": 143,
        "fullcodeline": "locked=[\"security_id\"],"
    },
    {
        "line": 144,
        "fullcodeline": "indexes=[\"security_id\"],"
    },
    {
        "line": 193,
        "fullcodeline": "["
    },
    {
        "line": 199,
        "fullcodeline": "columns=[\"date\", \"security_id\", \"foo\", \"bar\", \"baz\"],"
    },
    {
        "line": 205,
        "fullcodeline": "{"
    },
    {
        "line": 273,
        "fullcodeline": "dict("
    },
    {
        "line": 297,
        "fullcodeline": "s_int = pd.Series([1, 2, 3, 4, 5], index=list(\"abcde\"), dtype=pd.Int64Dtype())"
    },
    {
        "line": 298,
        "fullcodeline": "s2_int = s_int.reindex([\"a\", \"b\", \"c\", \"f\", \"u\"])"
    },
    {
        "line": 299,
        "fullcodeline": "ints = pd.Series([1, 2, 3, 4, 5], index=list(\"abcfu\"))"
    },
    {
        "line": 300,
        "fullcodeline": "test_data = pd.DataFrame(dict(na=s2_int, int=ints))"
    },
    {
        "line": 301,
        "fullcodeline": "test_data.loc[:, \"unsigned_int\"] = pd.to_numeric("
    },
    {
        "line": 304,
        "fullcodeline": "instance = views.startup("
    },
    {
        "line": 308,
        "fullcodeline": "unittest.assertEqual("
    },
    {
        "line": 328,
        "fullcodeline": "unittest.assertEqual("
    },
    {
        "line": 11,
        "fullcodeline": "views.startup(URL, data_loader=lambda: None)"
    },
    {
        "line": 17,
        "fullcodeline": "views.startup(URL, \"bad type\")"
    },
    {
        "line": 42,
        "fullcodeline": "columnFormats={},"
    },
    {
        "line": 66,
        "fullcodeline": "columnFormats={},"
    },
    {
        "line": 87,
        "fullcodeline": "views.startup(URL, data=test_data, ignore_duplicate=False)"
    },
    {
        "line": 122,
        "fullcodeline": "columnFormats={},"
    },
    {
        "line": 142,
        "fullcodeline": "columnFormats={},"
    },
    {
        "line": 164,
        "fullcodeline": "columnFormats={},"
    },
    {
        "line": 183,
        "fullcodeline": "columnFormats={},"
    },
    {
        "line": 194,
        "fullcodeline": "dict(date=pd.Timestamp(\"now\"), security_id=1, foo=1.0, bar=2.0, baz=np.nan),"
    },
    {
        "line": 195,
        "fullcodeline": "dict("
    },
    {
        "line": 219,
        "fullcodeline": "("
    },
    {
        "line": 238,
        "fullcodeline": "views.startup(URL, data_loader=lambda: test_data)"
    },
    {
        "line": 90,
        "fullcodeline": "\"foo\": {"
    },
    {
        "line": 196,
        "fullcodeline": "date=pd.Timestamp(\"now\"), security_id=1, foo=2.0, bar=np.inf, baz=np.nan"
    },
    {
        "line": 274,
        "fullcodeline": "a=[\"{}\".format(i) for i in range(10)],"
    },
    {
        "line": 275,
        "fullcodeline": "b=[\"{}\".format(i % 2) for i in range(10)],"
    },
    {
        "line": 309,
        "fullcodeline": "{"
    },
    {
        "line": 325,
        "fullcodeline": "global_state.get_dtypes(instance._data_id)[1],"
    },
    {
        "line": 329,
        "fullcodeline": "{"
    },
    {
        "line": 338,
        "fullcodeline": "global_state.get_dtypes(instance._data_id)[-1],"
    },
    {
        "line": 92,
        "fullcodeline": "\"equals\": {"
    },
    {
        "line": 97,
        "fullcodeline": "\"greaterThan\": {"
    },
    {
        "line": 102,
        "fullcodeline": "\"lessThan\": {"
    },
    {
        "line": 230,
        "fullcodeline": "for dt in global_state.get_dtypes(instance._data_id)"
    },
    {
        "line": 231,
        "fullcodeline": "if not dt[\"visible\"]"
    },
    {
        "line": 323,
        "fullcodeline": "\"outlierRange\": {\"lower\": 0.0, \"upper\": 4.0},"
    },
    {
        "line": 221,
        "fullcodeline": "for dt in global_state.get_dtypes(instance._data_id)"
    },
    {
        "line": 222,
        "fullcodeline": "if dt[\"name\"] == \"bar\""
    },
    {
        "line": 95,
        "fullcodeline": "\"color\": {\"r\": 255, \"g\": 245, \"b\": 157, \"a\": 1},"
    },
    {
        "line": 100,
        "fullcodeline": "\"color\": {\"r\": 80, \"g\": 227, \"b\": 194, \"a\": 1},"
    },
    {
        "line": 105,
        "fullcodeline": "\"color\": {\"r\": 245, \"g\": 166, \"b\": 35, \"a\": 1},"
    }
]