[
    {
        "line": 5,
        "fullcodeline": "char buf[20];"
    },
    {
        "line": 7,
        "fullcodeline": "CHECK_OBJ_NOTNULL(hp, HTTP_MAGIC);"
    },
    {
        "line": 16,
        "fullcodeline": "n = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "p = hp->rxbuf;"
    },
    {
        "line": 26,
        "fullcodeline": "*p++ = '\\0';"
    },
    {
        "line": 31,
        "fullcodeline": "assert(!vct_iscrlf(*p));"
    },
    {
        "line": 32,
        "fullcodeline": "hh[n++] = p;"
    },
    {
        "line": 52,
        "fullcodeline": "assert(n == 3);"
    },
    {
        "line": 65,
        "fullcodeline": "p += vct_skipcrlf(p);"
    },
    {
        "line": 66,
        "fullcodeline": "assert(*p == '\\0');"
    },
    {
        "line": 20,
        "fullcodeline": "while (vct_islws(*p))"
    },
    {
        "line": 21,
        "fullcodeline": "p++;"
    },
    {
        "line": 24,
        "fullcodeline": "p++;"
    },
    {
        "line": 25,
        "fullcodeline": "assert(!vct_iscrlf(*p));"
    },
    {
        "line": 29,
        "fullcodeline": "while (vct_issp(*p))\t\t/* XXX: H space only */"
    },
    {
        "line": 30,
        "fullcodeline": "p++;"
    },
    {
        "line": 33,
        "fullcodeline": "while (!vct_islws(*p))"
    },
    {
        "line": 34,
        "fullcodeline": "p++;"
    },
    {
        "line": 35,
        "fullcodeline": "if (vct_iscrlf(*p)) {"
    },
    {
        "line": 54,
        "fullcodeline": "while (*p != '\\0') {"
    },
    {
        "line": 68,
        "fullcodeline": "for (n = 0; n < 3 || hh[n] != NULL; n++) {"
    },
    {
        "line": 9,
        "fullcodeline": "memset(hp->req, 0, sizeof hp->req);"
    },
    {
        "line": 10,
        "fullcodeline": "hh = hp->req;"
    },
    {
        "line": 22,
        "fullcodeline": "hh[n++] = p;"
    },
    {
        "line": 23,
        "fullcodeline": "while (!vct_islws(*p))"
    },
    {
        "line": 36,
        "fullcodeline": "hh[n++] = NULL;"
    },
    {
        "line": 37,
        "fullcodeline": "q = p;"
    },
    {
        "line": 38,
        "fullcodeline": "p += vct_skipcrlf(p);"
    },
    {
        "line": 39,
        "fullcodeline": "*q = '\\0';"
    },
    {
        "line": 55,
        "fullcodeline": "assert(n < MAX_HDR);"
    },
    {
        "line": 62,
        "fullcodeline": "p += vct_skipcrlf(p);"
    },
    {
        "line": 63,
        "fullcodeline": "*q = '\\0';"
    },
    {
        "line": 69,
        "fullcodeline": "sprintf(buf, \"http[%2d] \", n);"
    },
    {
        "line": 70,
        "fullcodeline": "vtc_dump(hp->vl, 4, buf, hh[n], -1);"
    },
    {
        "line": 12,
        "fullcodeline": "memset(hp->resp, 0, sizeof hp->resp);"
    },
    {
        "line": 13,
        "fullcodeline": "hh = hp->resp;"
    },
    {
        "line": 41,
        "fullcodeline": "*p++ = '\\0';"
    },
    {
        "line": 45,
        "fullcodeline": "hh[n++] = p;"
    },
    {
        "line": 48,
        "fullcodeline": "q = p;"
    },
    {
        "line": 49,
        "fullcodeline": "p += vct_skipcrlf(p);"
    },
    {
        "line": 50,
        "fullcodeline": "*q = '\\0';"
    },
    {
        "line": 56,
        "fullcodeline": "if (vct_iscrlf(*p))"
    },
    {
        "line": 58,
        "fullcodeline": "hh[n++] = p++;"
    },
    {
        "line": 60,
        "fullcodeline": "p++;"
    },
    {
        "line": 43,
        "fullcodeline": "while (vct_issp(*p))\t\t/* XXX: H space only */"
    },
    {
        "line": 44,
        "fullcodeline": "p++;"
    },
    {
        "line": 46,
        "fullcodeline": "while (!vct_iscrlf(*p))"
    },
    {
        "line": 47,
        "fullcodeline": "p++;"
    },
    {
        "line": 59,
        "fullcodeline": "while (*p != '\\0' && !vct_iscrlf(*p))"
    }
]