[
    {
        "line": 16,
        "fullcodeline": "NodeDef* mul_left_child = node_map_->GetNode(node->input(0));"
    },
    {
        "line": 17,
        "fullcodeline": "NodeDef* mul_right_child = node_map_->GetNode(node->input(1));"
    },
    {
        "line": 22,
        "fullcodeline": "const bool left_child_is_constant = IsReallyConstant(*mul_left_child);"
    },
    {
        "line": 23,
        "fullcodeline": "const bool right_child_is_constant = IsReallyConstant(*mul_right_child);"
    },
    {
        "line": 27,
        "fullcodeline": "NodeDef* conv_node ="
    },
    {
        "line": 46,
        "fullcodeline": "NodeDef* conv_left_child = node_map_->GetNode(conv_node->input(0));"
    },
    {
        "line": 47,
        "fullcodeline": "NodeDef* conv_right_child = node_map_->GetNode(conv_node->input(1));"
    },
    {
        "line": 48,
        "fullcodeline": "const bool conv_left_is_constant = IsReallyConstant(*conv_left_child);"
    },
    {
        "line": 49,
        "fullcodeline": "const bool conv_right_is_constant = IsReallyConstant(*conv_right_child);"
    },
    {
        "line": 58,
        "fullcodeline": "const auto& mul_props = properties.GetOutputProperties(node->name());"
    },
    {
        "line": 59,
        "fullcodeline": "const auto& conv_props = properties.GetOutputProperties(conv_node->name());"
    },
    {
        "line": 63,
        "fullcodeline": "const auto& mul_shape = mul_props[0].shape();"
    },
    {
        "line": 64,
        "fullcodeline": "const auto& conv_shape = conv_props[0].shape();"
    },
    {
        "line": 69,
        "fullcodeline": "const auto& input_props = properties.GetInputProperties(conv_node->name());"
    },
    {
        "line": 73,
        "fullcodeline": "const auto& filter_shape = input_props[1].shape();"
    },
    {
        "line": 75,
        "fullcodeline": "NodeDef* const_node ="
    },
    {
        "line": 77,
        "fullcodeline": "const auto& const_props = properties.GetOutputProperties(const_node->name());"
    },
    {
        "line": 81,
        "fullcodeline": "const auto& const_shape = const_props[0].shape();"
    },
    {
        "line": 87,
        "fullcodeline": "string mul_new_name = AddPrefixToNodeName(\"merged_input\", conv_node->name());"
    },
    {
        "line": 93,
        "fullcodeline": "string conv_const_input ="
    },
    {
        "line": 102,
        "fullcodeline": "conv_node->set_name(node->name());"
    },
    {
        "line": 103,
        "fullcodeline": "node->set_name(mul_new_name);"
    },
    {
        "line": 111,
        "fullcodeline": "NodeDef* conv_const_node ="
    },
    {
        "line": 14,
        "fullcodeline": "if (!IsAnyMul(*node) || NumNonControlInputs(*node) != 2) return false;"
    },
    {
        "line": 78,
        "fullcodeline": "if (const_props.empty()) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (node_map_->NodeExists(mul_new_name)) {"
    },
    {
        "line": 95,
        "fullcodeline": "if (MaybeRemoveControlInput(conv_node->name(), const_node, optimized_graph,"
    },
    {
        "line": 18,
        "fullcodeline": "if (mul_left_child == nullptr || mul_right_child == nullptr) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (!left_child_is_constant && !right_child_is_constant) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (!IsConv2D(*conv_node) && !IsConv3D(*conv_node)) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (node->device() != mul_left_child->device() ||"
    },
    {
        "line": 33,
        "fullcodeline": "node->device() != mul_right_child->device()) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (conv_node->input_size() < 2 ||"
    },
    {
        "line": 41,
        "fullcodeline": "nodes_to_preserve_.find(conv_node->name()) != nodes_to_preserve_.end()) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (!conv_left_is_constant && !conv_right_is_constant) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (mul_props.empty() || conv_props.empty()) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (!ShapesSymbolicallyEqual(mul_shape, conv_shape)) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (input_props.size() < 2) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (!IsValidConstShapeForMulConvPushDown("
    },
    {
        "line": 94,
        "fullcodeline": "conv_left_is_constant ? conv_node->input(0) : conv_node->input(1);"
    },
    {
        "line": 96,
        "fullcodeline": "node_map_.get())) {"
    },
    {
        "line": 105,
        "fullcodeline": "node_map_->UpdateInput(conv_node->name(), node->input(0), mul_new_name);"
    },
    {
        "line": 106,
        "fullcodeline": "conv_node->set_input(0, mul_new_name);"
    },
    {
        "line": 114,
        "fullcodeline": "node->set_input(1, conv_const_node->name());"
    },
    {
        "line": 40,
        "fullcodeline": "NumNonControlOutputs(*conv_node, *node_map_) > 1 ||"
    },
    {
        "line": 83,
        "fullcodeline": "conv_node->attr().at(\"data_format\").s(), filter_shape, const_shape)) {"
    },
    {
        "line": 99,
        "fullcodeline": "node_map_.get());"
    },
    {
        "line": 108,
        "fullcodeline": "node_map_->UpdateInput(conv_node->name(), node->input(1), mul_new_name);"
    },
    {
        "line": 109,
        "fullcodeline": "conv_node->set_input(1, mul_new_name);"
    },
    {
        "line": 116,
        "fullcodeline": "node->set_input(0, conv_const_node->name());"
    }
]