[
    {
        "line": 3,
        "fullcodeline": "unsigned t = get_te32(&phdr->p_offset), s = sizeof(Elf32_Dyn) + t;"
    },
    {
        "line": 4,
        "fullcodeline": "unsigned vaddr = get_te32(&phdr->p_vaddr);"
    },
    {
        "line": 5,
        "fullcodeline": "unsigned filesz = get_te32(&phdr->p_filesz), memsz = get_te32(&phdr->p_memsz);"
    },
    {
        "line": 6,
        "fullcodeline": "unsigned align = get_te32(&phdr->p_align);"
    },
    {
        "line": 17,
        "fullcodeline": "sz_dynseg = memsz;"
    },
    {
        "line": 7,
        "fullcodeline": "if (s < t || (u32_t)file_size < s"
    },
    {
        "line": 12,
        "fullcodeline": "||  filesz < memsz) {"
    },
    {
        "line": 13,
        "fullcodeline": "char msg[50]; snprintf(msg, sizeof(msg), \"bad PT_DYNAMIC phdr[%u]\","
    },
    {
        "line": 15,
        "fullcodeline": "throwCantPack(msg);"
    },
    {
        "line": 11,
        "fullcodeline": "||  memsz  < sizeof(Elf32_Dyn)"
    },
    {
        "line": 14,
        "fullcodeline": "(unsigned)(phdr - phdri));"
    },
    {
        "line": 10,
        "fullcodeline": "||  filesz < sizeof(Elf32_Dyn)"
    },
    {
        "line": 9,
        "fullcodeline": "||  (-1+ align) & (t ^ vaddr)"
    },
    {
        "line": 8,
        "fullcodeline": "||  (3 & t) || (7 & (filesz | memsz))  // .balign 4; 8==sizeof(Elf32_Dyn)"
    }
]