[
    {
        "line": 3,
        "fullcodeline": "unsigned char buffer[0x11] = { 0 };"
    },
    {
        "line": 10,
        "fullcodeline": "const int NOT_EXIST = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "const int INVALID = 1;"
    },
    {
        "line": 12,
        "fullcodeline": "const int VALID = 2;"
    },
    {
        "line": 13,
        "fullcodeline": "int v2_signing_status = NOT_EXIST;"
    },
    {
        "line": 14,
        "fullcodeline": "int v3_signing_status = NOT_EXIST;"
    },
    {
        "line": 17,
        "fullcodeline": "struct file *fp = ksu_filp_open_compat(path, O_RDONLY, 0);"
    },
    {
        "line": 24,
        "fullcodeline": "fp->f_mode |= FMODE_NONOTIFY;"
    },
    {
        "line": 44,
        "fullcodeline": "pos += 12;"
    },
    {
        "line": 46,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size4, 0x4, &pos);"
    },
    {
        "line": 47,
        "fullcodeline": "pos = size4 - 0x18;"
    },
    {
        "line": 49,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size8, 0x8, &pos);"
    },
    {
        "line": 50,
        "fullcodeline": "ksu_kernel_read_compat(fp, buffer, 0x10, &pos);"
    },
    {
        "line": 55,
        "fullcodeline": "pos = size4 - (size8 + 0x8);"
    },
    {
        "line": 56,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size_of_block, 0x8, &pos);"
    },
    {
        "line": 85,
        "fullcodeline": "filp_close(fp, 0);"
    },
    {
        "line": 18,
        "fullcodeline": "if (IS_ERR(fp)) {"
    },
    {
        "line": 27,
        "fullcodeline": "for (i = 0;; ++i) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (strcmp((char *)buffer, \"APK Sig Block 42\")) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (size_of_block != size8) {"
    },
    {
        "line": 87,
        "fullcodeline": "return (v2_signing_status == NOT_EXIST && v3_signing_status == VALID) ||"
    },
    {
        "line": 19,
        "fullcodeline": "pr_err(\"open %s error.\\n\", path);"
    },
    {
        "line": 29,
        "fullcodeline": "pos = generic_file_llseek(fp, -i - 2, SEEK_END);"
    },
    {
        "line": 30,
        "fullcodeline": "ksu_kernel_read_compat(fp, &n, 2, &pos);"
    },
    {
        "line": 64,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size8, 0x8,"
    },
    {
        "line": 69,
        "fullcodeline": "ksu_kernel_read_compat(fp, &id, 0x4, &pos); // id"
    },
    {
        "line": 70,
        "fullcodeline": "offset = 4;"
    },
    {
        "line": 71,
        "fullcodeline": "pr_info(\"id: 0x%08x\\n\", id);"
    },
    {
        "line": 81,
        "fullcodeline": "pos += (size8 - offset);"
    },
    {
        "line": 89,
        "fullcodeline": "(v2_signing_status == VALID && v3_signing_status == VALID);"
    },
    {
        "line": 20,
        "fullcodeline": "return PTR_ERR(fp);"
    },
    {
        "line": 31,
        "fullcodeline": "if (n == i) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (i == 0xffff) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (size8 == size_of_block) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (id == 0x7109871au) {"
    },
    {
        "line": 88,
        "fullcodeline": "(v2_signing_status == VALID && v3_signing_status == NOT_EXIST) ||"
    },
    {
        "line": 32,
        "fullcodeline": "pos -= 22;"
    },
    {
        "line": 33,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size4, 4, &pos);"
    },
    {
        "line": 39,
        "fullcodeline": "pr_info(\"error: cannot find eocd\\n\");"
    },
    {
        "line": 73,
        "fullcodeline": "block_valid = check_block(fp, &size4, &pos, &offset,"
    },
    {
        "line": 75,
        "fullcodeline": "v2_signing_status = block_valid ? VALID : INVALID;"
    },
    {
        "line": 34,
        "fullcodeline": "if ((size4 ^ 0xcafebabeu) == 0xccfbf1eeu) {"
    },
    {
        "line": 76,
        "fullcodeline": "} else if (id == 0xf05368c0u) {"
    },
    {
        "line": 77,
        "fullcodeline": "block_valid = check_block(fp, &size4, &pos, &offset,"
    },
    {
        "line": 79,
        "fullcodeline": "v3_signing_status = block_valid ? VALID : INVALID;"
    }
]