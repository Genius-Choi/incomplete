[
    {
        "line": 3,
        "fullcodeline": "unsigned char buffer[0x11] = { 0 };"
    },
    {
        "line": 9,
        "fullcodeline": "int sign = -1;"
    },
    {
        "line": 11,
        "fullcodeline": "struct file *fp = ksu_filp_open_compat(path, O_RDONLY, 0);"
    },
    {
        "line": 18,
        "fullcodeline": "fp->f_mode |= FMODE_NONOTIFY;"
    },
    {
        "line": 20,
        "fullcodeline": "sign = 1;"
    },
    {
        "line": 39,
        "fullcodeline": "pos += 12;"
    },
    {
        "line": 41,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size4, 0x4, &pos);"
    },
    {
        "line": 42,
        "fullcodeline": "pos = size4 - 0x18;"
    },
    {
        "line": 44,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size8, 0x8, &pos);"
    },
    {
        "line": 45,
        "fullcodeline": "ksu_kernel_read_compat(fp, buffer, 0x10, &pos);"
    },
    {
        "line": 50,
        "fullcodeline": "pos = size4 - (size8 + 0x8);"
    },
    {
        "line": 51,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size_of_block, 0x8, &pos);"
    },
    {
        "line": 117,
        "fullcodeline": "filp_close(fp, 0);"
    },
    {
        "line": 12,
        "fullcodeline": "if (IS_ERR(fp)) {"
    },
    {
        "line": 22,
        "fullcodeline": "for (i = 0;; ++i) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (strcmp((char *)buffer, \"APK Sig Block 42\")) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (size_of_block != size8) {"
    },
    {
        "line": 13,
        "fullcodeline": "pr_err(\"open %s error.\\n\", path);"
    },
    {
        "line": 24,
        "fullcodeline": "pos = generic_file_llseek(fp, -i - 2, SEEK_END);"
    },
    {
        "line": 25,
        "fullcodeline": "ksu_kernel_read_compat(fp, &n, 2, &pos);"
    },
    {
        "line": 59,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size8, 0x8, &pos); // sequence length"
    },
    {
        "line": 63,
        "fullcodeline": "ksu_kernel_read_compat(fp, &id, 0x4, &pos); // id"
    },
    {
        "line": 64,
        "fullcodeline": "offset = 4;"
    },
    {
        "line": 65,
        "fullcodeline": "pr_info(\"id: 0x%08x\\n\", id);"
    },
    {
        "line": 113,
        "fullcodeline": "pos += (size8 - offset);"
    },
    {
        "line": 14,
        "fullcodeline": "return PTR_ERR(fp);"
    },
    {
        "line": 26,
        "fullcodeline": "if (n == i) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (i == 0xffff) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (size8 == size_of_block) {"
    },
    {
        "line": 66,
        "fullcodeline": "if ((id ^ 0xdeadbeefu) == 0xafa439f5u ||"
    },
    {
        "line": 27,
        "fullcodeline": "pos -= 22;"
    },
    {
        "line": 28,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size4, 4, &pos);"
    },
    {
        "line": 34,
        "fullcodeline": "pr_info(\"error: cannot find eocd\\n\");"
    },
    {
        "line": 67,
        "fullcodeline": "(id ^ 0xdeadbeefu) == 0x2efed62f) {"
    },
    {
        "line": 68,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size4, 0x4,"
    },
    {
        "line": 70,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size4, 0x4, &pos); // signer length"
    },
    {
        "line": 71,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size4, 0x4,"
    },
    {
        "line": 73,
        "fullcodeline": "offset += 0x4 * 3;"
    },
    {
        "line": 75,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size4, 0x4,"
    },
    {
        "line": 77,
        "fullcodeline": "pos += size4;"
    },
    {
        "line": 78,
        "fullcodeline": "offset += 0x4 + size4;"
    },
    {
        "line": 80,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size4, 0x4,"
    },
    {
        "line": 82,
        "fullcodeline": "ksu_kernel_read_compat(fp, &size4, 0x4,"
    },
    {
        "line": 84,
        "fullcodeline": "offset += 0x4 * 2;"
    },
    {
        "line": 29,
        "fullcodeline": "if ((size4 ^ 0xcafebabeu) == 0xccfbf1eeu) {"
    },
    {
        "line": 95,
        "fullcodeline": "if (size4 == expected_size) {"
    },
    {
        "line": 96,
        "fullcodeline": "int hash = 1;"
    },
    {
        "line": 102,
        "fullcodeline": "offset += size4;"
    },
    {
        "line": 98,
        "fullcodeline": "for (i = 0; i < size4; ++i) {"
    },
    {
        "line": 103,
        "fullcodeline": "if ((((unsigned)hash) ^ 0x14131211u) =="
    },
    {
        "line": 99,
        "fullcodeline": "ksu_kernel_read_compat(fp, &c, 0x1, &pos);"
    },
    {
        "line": 100,
        "fullcodeline": "hash = 31 * hash + c;"
    },
    {
        "line": 105,
        "fullcodeline": "sign = 0;"
    }
]