[
    {
        "line": 3,
        "fullcodeline": "struct sock *sk = sock->sk;"
    },
    {
        "line": 4,
        "fullcodeline": "struct net *net = sock_net(sk);"
    },
    {
        "line": 5,
        "fullcodeline": "struct tipc_sock *tsk = tipc_sk(sk);"
    },
    {
        "line": 6,
        "fullcodeline": "struct tipc_uaddr *ua = (struct tipc_uaddr *)m->msg_name;"
    },
    {
        "line": 7,
        "fullcodeline": "long timeout = sock_sndtimeo(sk, m->msg_flags & MSG_DONTWAIT);"
    },
    {
        "line": 8,
        "fullcodeline": "struct list_head *clinks = &tsk->cong_links;"
    },
    {
        "line": 9,
        "fullcodeline": "bool syn = !tipc_sk_type_connectionless(sk);"
    },
    {
        "line": 10,
        "fullcodeline": "struct tipc_group *grp = tsk->group;"
    },
    {
        "line": 11,
        "fullcodeline": "struct tipc_msg *hdr = &tsk->phdr;"
    },
    {
        "line": 57,
        "fullcodeline": "memset(&skaddr, 0, sizeof(skaddr));"
    },
    {
        "line": 74,
        "fullcodeline": "rc = tipc_wait_for_cond(sock, &timeout,"
    },
    {
        "line": 80,
        "fullcodeline": "msg_set_destnode(hdr, skaddr.node);"
    },
    {
        "line": 81,
        "fullcodeline": "msg_set_destport(hdr, skaddr.ref);"
    },
    {
        "line": 95,
        "fullcodeline": "__skb_queue_head_init(&pkts);"
    },
    {
        "line": 96,
        "fullcodeline": "mtu = tipc_node_get_mtu(net, skaddr.node, tsk->portid, true);"
    },
    {
        "line": 97,
        "fullcodeline": "rc = tipc_msg_build(hdr, m, 0, dlen, mtu, &pkts);"
    },
    {
        "line": 106,
        "fullcodeline": "trace_tipc_sk_sendmsg(sk, skb_peek(&pkts), TIPC_DUMP_SK_SNDQ, \" \");"
    },
    {
        "line": 107,
        "fullcodeline": "rc = tipc_node_xmit(net, &pkts, skaddr.node, tsk->portid);"
    },
    {
        "line": 16,
        "fullcodeline": "if (unlikely(dlen > TIPC_MAX_USER_MSG_SIZE))"
    },
    {
        "line": 38,
        "fullcodeline": "if (!ua) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (unlikely(syn)) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (atype == TIPC_SERVICE_RANGE) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (unlikely(rc))"
    },
    {
        "line": 82,
        "fullcodeline": "if (atype == TIPC_SERVICE_ADDR) {"
    },
    {
        "line": 98,
        "fullcodeline": "if (unlikely(rc != dlen))"
    },
    {
        "line": 100,
        "fullcodeline": "if (unlikely(syn && !tipc_msg_skb_clone(&pkts, &sk->sk_write_queue))) {"
    },
    {
        "line": 108,
        "fullcodeline": "if (unlikely(rc == -ELINKCONG)) {"
    },
    {
        "line": 114,
        "fullcodeline": "if (unlikely(syn && !rc)) {"
    },
    {
        "line": 122,
        "fullcodeline": "return rc ? rc : dlen;"
    },
    {
        "line": 22,
        "fullcodeline": "atype = ua->addrtype;"
    },
    {
        "line": 39,
        "fullcodeline": "ua = (struct tipc_uaddr *)&tsk->peer;"
    },
    {
        "line": 42,
        "fullcodeline": "atype = ua->addrtype;"
    },
    {
        "line": 54,
        "fullcodeline": "msg_set_syn(hdr, 1);"
    },
    {
        "line": 75,
        "fullcodeline": "!tipc_dest_find(clinks, skaddr.node, 0));"
    },
    {
        "line": 83,
        "fullcodeline": "msg_set_type(hdr, TIPC_NAMED_MSG);"
    },
    {
        "line": 84,
        "fullcodeline": "msg_set_hdr_sz(hdr, NAMED_H_SIZE);"
    },
    {
        "line": 85,
        "fullcodeline": "msg_set_nametype(hdr, ua->sa.type);"
    },
    {
        "line": 86,
        "fullcodeline": "msg_set_nameinst(hdr, ua->sa.instance);"
    },
    {
        "line": 87,
        "fullcodeline": "msg_set_lookup_scope(hdr, ua->scope);"
    },
    {
        "line": 101,
        "fullcodeline": "__skb_queue_purge(&pkts);"
    },
    {
        "line": 109,
        "fullcodeline": "tipc_dest_push(clinks, skaddr.node, 0);"
    },
    {
        "line": 110,
        "fullcodeline": "tsk->cong_link_cnt++;"
    },
    {
        "line": 111,
        "fullcodeline": "rc = 0;"
    },
    {
        "line": 115,
        "fullcodeline": "tipc_set_sk_state(sk, TIPC_CONNECTING);"
    },
    {
        "line": 17,
        "fullcodeline": "return -EMSGSIZE;"
    },
    {
        "line": 20,
        "fullcodeline": "if (!tipc_uaddr_valid(ua, m->msg_namelen))"
    },
    {
        "line": 27,
        "fullcodeline": "if (!ua)"
    },
    {
        "line": 29,
        "fullcodeline": "if (atype == TIPC_SERVICE_ADDR)"
    },
    {
        "line": 31,
        "fullcodeline": "if (atype == TIPC_SOCKET_ADDR)"
    },
    {
        "line": 33,
        "fullcodeline": "if (atype == TIPC_SERVICE_RANGE)"
    },
    {
        "line": 35,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 40,
        "fullcodeline": "if (!syn && ua->family != AF_TIPC)"
    },
    {
        "line": 46,
        "fullcodeline": "if (sk->sk_state == TIPC_LISTEN)"
    },
    {
        "line": 48,
        "fullcodeline": "if (sk->sk_state != TIPC_OPEN)"
    },
    {
        "line": 52,
        "fullcodeline": "if (atype == TIPC_SERVICE_ADDR)"
    },
    {
        "line": 61,
        "fullcodeline": "return tipc_sendmcast(sock, ua, m, dlen, timeout);"
    },
    {
        "line": 89,
        "fullcodeline": "msg_set_type(hdr, TIPC_DIRECT_MSG);"
    },
    {
        "line": 90,
        "fullcodeline": "msg_set_lookup_scope(hdr, 0);"
    },
    {
        "line": 91,
        "fullcodeline": "msg_set_hdr_sz(hdr, BASIC_H_SIZE);"
    },
    {
        "line": 102,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 116,
        "fullcodeline": "if (dlen && timeout) {"
    },
    {
        "line": 53,
        "fullcodeline": "tsk->conn_addrtype = atype;"
    },
    {
        "line": 62,
        "fullcodeline": "} else if (atype == TIPC_SERVICE_ADDR) {"
    },
    {
        "line": 117,
        "fullcodeline": "timeout = msecs_to_jiffies(timeout);"
    },
    {
        "line": 118,
        "fullcodeline": "tipc_wait_for_connect(sock, &timeout);"
    },
    {
        "line": 21,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 28,
        "fullcodeline": "return tipc_send_group_bcast(sock, m, dlen, timeout);"
    },
    {
        "line": 30,
        "fullcodeline": "return tipc_send_group_anycast(sock, m, dlen, timeout);"
    },
    {
        "line": 32,
        "fullcodeline": "return tipc_send_group_unicast(sock, m, dlen, timeout);"
    },
    {
        "line": 34,
        "fullcodeline": "return tipc_send_group_mcast(sock, m, dlen, timeout);"
    },
    {
        "line": 41,
        "fullcodeline": "return -EDESTADDRREQ;"
    },
    {
        "line": 47,
        "fullcodeline": "return -EPIPE;"
    },
    {
        "line": 49,
        "fullcodeline": "return -EISCONN;"
    },
    {
        "line": 51,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 63,
        "fullcodeline": "skaddr.node = ua->lookup_node;"
    },
    {
        "line": 64,
        "fullcodeline": "ua->scope = tipc_node2scope(skaddr.node);"
    },
    {
        "line": 65,
        "fullcodeline": "if (!tipc_nametbl_lookup_anycast(net, ua, &skaddr))"
    },
    {
        "line": 67,
        "fullcodeline": "} else if (atype == TIPC_SOCKET_ADDR) {"
    },
    {
        "line": 66,
        "fullcodeline": "return -EHOSTUNREACH;"
    },
    {
        "line": 68,
        "fullcodeline": "skaddr = ua->sk;"
    },
    {
        "line": 70,
        "fullcodeline": "return -EINVAL;"
    }
]