[
    {
        "line": 4,
        "fullcodeline": "struct mm_struct *mm = vma->vm_mm;"
    },
    {
        "line": 5,
        "fullcodeline": "struct dev_pagemap *pgmap = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "ptep = pte_offset_map_lock(mm, pmd, address, &ptl);"
    },
    {
        "line": 15,
        "fullcodeline": "pte = *ptep;"
    },
    {
        "line": 41,
        "fullcodeline": "page = vm_normal_page(vma, address, pte);"
    },
    {
        "line": 11,
        "fullcodeline": "if (unlikely(pmd_bad(*pmd)))"
    },
    {
        "line": 16,
        "fullcodeline": "if (!pte_present(pte)) {"
    },
    {
        "line": 34,
        "fullcodeline": "if ((flags & FOLL_NUMA) && pte_protnone(pte))"
    },
    {
        "line": 36,
        "fullcodeline": "if ((flags & FOLL_WRITE) && !pte_write(pte)) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (!page && pte_devmap(pte) && (flags & FOLL_GET)) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (flags & FOLL_SPLIT && PageTransCompound(page)) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (flags & FOLL_GET) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (flags & FOLL_TOUCH) {"
    },
    {
        "line": 136,
        "fullcodeline": "return no_page_table(vma, flags);"
    },
    {
        "line": 27,
        "fullcodeline": "entry = pte_to_swp_entry(pte);"
    },
    {
        "line": 30,
        "fullcodeline": "pte_unmap_unlock(ptep, ptl);"
    },
    {
        "line": 31,
        "fullcodeline": "migration_entry_wait(mm, pmd, address);"
    },
    {
        "line": 47,
        "fullcodeline": "pgmap = get_dev_pagemap(pte_pfn(pte), NULL);"
    },
    {
        "line": 72,
        "fullcodeline": "get_page(page);"
    },
    {
        "line": 73,
        "fullcodeline": "pte_unmap_unlock(ptep, ptl);"
    },
    {
        "line": 74,
        "fullcodeline": "lock_page(page);"
    },
    {
        "line": 75,
        "fullcodeline": "ret = split_huge_page(page);"
    },
    {
        "line": 76,
        "fullcodeline": "unlock_page(page);"
    },
    {
        "line": 77,
        "fullcodeline": "put_page(page);"
    },
    {
        "line": 84,
        "fullcodeline": "get_page(page);"
    },
    {
        "line": 101,
        "fullcodeline": "mark_page_accessed(page);"
    },
    {
        "line": 103,
        "fullcodeline": "if ((flags & FOLL_MLOCK) && (vma->vm_flags & VM_LOCKED)) {"
    },
    {
        "line": 134,
        "fullcodeline": "if (!pte_none(pte))"
    },
    {
        "line": 12,
        "fullcodeline": "return no_page_table(vma, flags);"
    },
    {
        "line": 23,
        "fullcodeline": "if (likely(!(flags & FOLL_MIGRATION)))"
    },
    {
        "line": 25,
        "fullcodeline": "if (pte_none(pte))"
    },
    {
        "line": 28,
        "fullcodeline": "if (!is_migration_entry(entry))"
    },
    {
        "line": 105,
        "fullcodeline": "if (PageTransCompound(page))"
    },
    {
        "line": 117,
        "fullcodeline": "if (page->mapping && trylock_page(page)) {"
    },
    {
        "line": 49,
        "fullcodeline": "page = pte_page(pte);"
    },
    {
        "line": 52,
        "fullcodeline": "} else if (unlikely(!page)) {"
    },
    {
        "line": 93,
        "fullcodeline": "if ((flags & FOLL_WRITE) &&"
    },
    {
        "line": 94,
        "fullcodeline": "!pte_dirty(pte) && !PageDirty(page))"
    },
    {
        "line": 95,
        "fullcodeline": "set_page_dirty(page);"
    },
    {
        "line": 125,
        "fullcodeline": "mlock_vma_page(page);"
    },
    {
        "line": 126,
        "fullcodeline": "unlock_page(page);"
    },
    {
        "line": 79,
        "fullcodeline": "return ERR_PTR(ret);"
    },
    {
        "line": 53,
        "fullcodeline": "if (flags & FOLL_DUMP) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (is_zero_pfn(pte_pfn(pte))) {"
    },
    {
        "line": 55,
        "fullcodeline": "page = ERR_PTR(-EFAULT);"
    },
    {
        "line": 60,
        "fullcodeline": "page = pte_page(pte);"
    },
    {
        "line": 64,
        "fullcodeline": "ret = follow_pfn_pte(vma, address, ptep, flags);"
    },
    {
        "line": 65,
        "fullcodeline": "page = ERR_PTR(ret);"
    }
]