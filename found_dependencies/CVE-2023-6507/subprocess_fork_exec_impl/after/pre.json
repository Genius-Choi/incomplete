[
    {
        "line": 14,
        "fullcodeline": "PyObject *converted_args = NULL, *fast_args = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "PyObject *preexec_fn_args_tuple = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "gid_t *extra_groups = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "PyObject *cwd_obj2 = NULL;"
    },
    {
        "line": 18,
        "fullcodeline": "const char *cwd = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "pid_t pid = -1;"
    },
    {
        "line": 20,
        "fullcodeline": "int need_to_reenable_gc = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "char *const *argv = NULL, *const *envp = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "int need_after_fork = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "int saved_errno = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "int *c_fds_to_keep = NULL;"
    },
    {
        "line": 25,
        "fullcodeline": "Py_ssize_t fds_to_keep_len = PyTuple_GET_SIZE(py_fds_to_keep);"
    },
    {
        "line": 27,
        "fullcodeline": "PyInterpreterState *interp = PyInterpreterState_Get();"
    },
    {
        "line": 53,
        "fullcodeline": "char *const *exec_array = _PySequence_BytesToCharpArray(executable_list);"
    },
    {
        "line": 107,
        "fullcodeline": "Py_ssize_t extra_group_size = -2;"
    },
    {
        "line": 164,
        "fullcodeline": "gid_t gid = (gid_t)-1;"
    },
    {
        "line": 176,
        "fullcodeline": "uid_t uid = (uid_t)-1;"
    },
    {
        "line": 188,
        "fullcodeline": "c_fds_to_keep = PyMem_Malloc(fds_to_keep_len * sizeof(int));"
    },
    {
        "line": 209,
        "fullcodeline": "const void *old_sigmask = NULL;"
    },
    {
        "line": 233,
        "fullcodeline": "pid = do_fork_exec(exec_array, argv, envp, cwd,"
    },
    {
        "line": 28,
        "fullcodeline": "if ((preexec_fn != Py_None) && interp->finalizing) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (close_fds && errpipe_write < 3) {  /* precondition */"
    },
    {
        "line": 43,
        "fullcodeline": "if (_sanity_check_python_fd_sequence(py_fds_to_keep)) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (preexec_fn != Py_None) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (!exec_array)"
    },
    {
        "line": 60,
        "fullcodeline": "if (process_args != Py_None) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (env_list != Py_None) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (cwd_obj != Py_None) {"
    },
    {
        "line": 109,
        "fullcodeline": "if (extra_groups_packed != Py_None) {"
    },
    {
        "line": 165,
        "fullcodeline": "if (gid_object != Py_None) {"
    },
    {
        "line": 177,
        "fullcodeline": "if (uid_object != Py_None) {"
    },
    {
        "line": 189,
        "fullcodeline": "if (c_fds_to_keep == NULL) {"
    },
    {
        "line": 200,
        "fullcodeline": "if (preexec_fn != Py_None) {"
    },
    {
        "line": 243,
        "fullcodeline": "if (pid == (pid_t)-1) {"
    },
    {
        "line": 270,
        "fullcodeline": "if (c_fds_to_keep != NULL) {"
    },
    {
        "line": 274,
        "fullcodeline": "if (saved_errno != 0) {"
    },
    {
        "line": 297,
        "fullcodeline": "return pid == -1 ? NULL : PyLong_FromPid(pid);"
    },
    {
        "line": 29,
        "fullcodeline": "PyErr_SetString(PyExc_RuntimeError,"
    },
    {
        "line": 33,
        "fullcodeline": "if ((preexec_fn != Py_None) && (interp != PyInterpreterState_Main())) {"
    },
    {
        "line": 64,
        "fullcodeline": "fast_args = PySequence_Fast(process_args, \"argv must be a tuple\");"
    },
    {
        "line": 67,
        "fullcodeline": "num_args = PySequence_Fast_GET_SIZE(fast_args);"
    },
    {
        "line": 68,
        "fullcodeline": "converted_args = PyTuple_New(num_args);"
    },
    {
        "line": 83,
        "fullcodeline": "argv = _PySequence_BytesToCharpArray(converted_args);"
    },
    {
        "line": 84,
        "fullcodeline": "Py_CLEAR(converted_args);"
    },
    {
        "line": 85,
        "fullcodeline": "Py_CLEAR(fast_args);"
    },
    {
        "line": 91,
        "fullcodeline": "envp = _PySequence_BytesToCharpArray(env_list);"
    },
    {
        "line": 99,
        "fullcodeline": "cwd = PyBytes_AsString(cwd_obj2);"
    },
    {
        "line": 190,
        "fullcodeline": "PyErr_SetString(PyExc_MemoryError, \"failed to malloc c_fds_to_keep\");"
    },
    {
        "line": 193,
        "fullcodeline": "if (convert_fds_to_keep_to_c(py_fds_to_keep, c_fds_to_keep) < 0) {"
    },
    {
        "line": 201,
        "fullcodeline": "preexec_fn_args_tuple = PyTuple_New(0);"
    },
    {
        "line": 245,
        "fullcodeline": "saved_errno = errno;"
    },
    {
        "line": 278,
        "fullcodeline": "PyErr_SetFromErrno(PyExc_OSError);"
    },
    {
        "line": 65,
        "fullcodeline": "if (fast_args == NULL)"
    },
    {
        "line": 69,
        "fullcodeline": "if (converted_args == NULL)"
    },
    {
        "line": 71,
        "fullcodeline": "for (Py_ssize_t arg_num = 0; arg_num < num_args; ++arg_num) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (!argv)"
    },
    {
        "line": 92,
        "fullcodeline": "if (!envp)"
    },
    {
        "line": 202,
        "fullcodeline": "if (!preexec_fn_args_tuple)"
    },
    {
        "line": 77,
        "fullcodeline": "borrowed_arg = PySequence_Fast_GET_ITEM(fast_args, arg_num);"
    },
    {
        "line": 80,
        "fullcodeline": "PyTuple_SET_ITEM(converted_args, arg_num, converted_arg);"
    },
    {
        "line": 97,
        "fullcodeline": "if (PyUnicode_FSConverter(cwd_obj, &cwd_obj2) == 0)"
    },
    {
        "line": 73,
        "fullcodeline": "if (PySequence_Fast_GET_SIZE(fast_args) != num_args) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (PyUnicode_FSConverter(borrowed_arg, &converted_arg) == 0)"
    }
]