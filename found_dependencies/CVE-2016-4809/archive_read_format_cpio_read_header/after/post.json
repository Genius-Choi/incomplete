[
    {
        "line": 12,
        "fullcodeline": "sconv = cpio->opt_sconv;"
    },
    {
        "line": 23,
        "fullcodeline": "r = (cpio->read_header(a, cpio, entry, &namelength, &name_pad));"
    },
    {
        "line": 29,
        "fullcodeline": "h = __archive_read_ahead(a, namelength + name_pad, NULL);"
    },
    {
        "line": 44,
        "fullcodeline": "cpio->entry_offset = 0;"
    },
    {
        "line": 46,
        "fullcodeline": "__archive_read_consume(a, namelength + name_pad);"
    },
    {
        "line": 13,
        "fullcodeline": "if (sconv == NULL) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (r < ARCHIVE_WARN)"
    },
    {
        "line": 30,
        "fullcodeline": "if (h == NULL)"
    },
    {
        "line": 32,
        "fullcodeline": "if (archive_entry_copy_pathname_l(entry,"
    },
    {
        "line": 49,
        "fullcodeline": "if (archive_entry_filetype(entry) == AE_IFLNK) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (namelength == 11 && strcmp((const char *)h, \"TRAILER!!!\") == 0) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (record_hardlink(a, cpio, entry) != ARCHIVE_OK) {"
    },
    {
        "line": 20,
        "fullcodeline": "sconv = cpio->sconv_default;"
    },
    {
        "line": 39,
        "fullcodeline": "archive_set_error(&a->archive, ARCHIVE_ERRNO_FILE_FORMAT,"
    },
    {
        "line": 42,
        "fullcodeline": "r = ARCHIVE_WARN;"
    },
    {
        "line": 55,
        "fullcodeline": "h = __archive_read_ahead(a,"
    },
    {
        "line": 73,
        "fullcodeline": "__archive_read_consume(a, cpio->entry_bytes_remaining);"
    },
    {
        "line": 74,
        "fullcodeline": "cpio->entry_bytes_remaining = 0;"
    },
    {
        "line": 85,
        "fullcodeline": "archive_clear_error(&a->archive);"
    },
    {
        "line": 14,
        "fullcodeline": "if (!cpio->init_default_conversion) {"
    },
    {
        "line": 33,
        "fullcodeline": "(const char *)h, namelength, sconv) != 0) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (errno == ENOMEM) {"
    },
    {
        "line": 41,
        "fullcodeline": "archive_string_conversion_charset_name(sconv));"
    },
    {
        "line": 50,
        "fullcodeline": "if (cpio->entry_bytes_remaining > 1024 * 1024) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (h == NULL)"
    },
    {
        "line": 59,
        "fullcodeline": "if (archive_entry_copy_symlink_l(entry, (const char *)h,"
    },
    {
        "line": 15,
        "fullcodeline": "cpio->sconv_default ="
    },
    {
        "line": 18,
        "fullcodeline": "cpio->init_default_conversion = 1;"
    },
    {
        "line": 35,
        "fullcodeline": "archive_set_error(&a->archive, ENOMEM,"
    },
    {
        "line": 51,
        "fullcodeline": "archive_set_error(&a->archive, ENOMEM,"
    },
    {
        "line": 56,
        "fullcodeline": "(size_t)cpio->entry_bytes_remaining, NULL);"
    },
    {
        "line": 66,
        "fullcodeline": "archive_set_error(&a->archive,"
    },
    {
        "line": 71,
        "fullcodeline": "r = ARCHIVE_WARN;"
    },
    {
        "line": 16,
        "fullcodeline": "archive_string_default_conversion_for_read("
    },
    {
        "line": 60,
        "fullcodeline": "(size_t)cpio->entry_bytes_remaining, sconv) != 0) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (errno == ENOMEM) {"
    },
    {
        "line": 70,
        "fullcodeline": "archive_string_conversion_charset_name(sconv));"
    },
    {
        "line": 62,
        "fullcodeline": "archive_set_error(&a->archive, ENOMEM,"
    }
]