[
    {
        "line": 9,
        "fullcodeline": "spin_lock(&qp->q.lock);"
    },
    {
        "line": 14,
        "fullcodeline": "ipq_kill(qp);"
    },
    {
        "line": 16,
        "fullcodeline": "IP_INC_STATS_BH(net, IPSTATS_MIB_REASMTIMEOUT);"
    },
    {
        "line": 17,
        "fullcodeline": "IP_INC_STATS_BH(net, IPSTATS_MIB_REASMFAILS);"
    },
    {
        "line": 52,
        "fullcodeline": "spin_unlock(&qp->q.lock);"
    },
    {
        "line": 53,
        "fullcodeline": "ipq_put(qp);"
    },
    {
        "line": 11,
        "fullcodeline": "if (qp->q.last_in & INET_FRAG_COMPLETE)"
    },
    {
        "line": 19,
        "fullcodeline": "if ((qp->q.last_in & INET_FRAG_FIRST_IN) && qp->q.fragments != NULL) {"
    },
    {
        "line": 20,
        "fullcodeline": "struct sk_buff *head = qp->q.fragments;"
    },
    {
        "line": 24,
        "fullcodeline": "rcu_read_lock();"
    },
    {
        "line": 25,
        "fullcodeline": "head->dev = dev_get_by_index_rcu(net, qp->iif);"
    },
    {
        "line": 30,
        "fullcodeline": "skb_dst_drop(head);"
    },
    {
        "line": 31,
        "fullcodeline": "iph = ip_hdr(head);"
    },
    {
        "line": 32,
        "fullcodeline": "err = ip_route_input_noref(head, iph->daddr, iph->saddr,"
    },
    {
        "line": 47,
        "fullcodeline": "icmp_send(head, ICMP_TIME_EXCEEDED, ICMP_EXC_FRAGTIME, 0);"
    },
    {
        "line": 49,
        "fullcodeline": "rcu_read_unlock();"
    },
    {
        "line": 26,
        "fullcodeline": "if (!head->dev)"
    },
    {
        "line": 41,
        "fullcodeline": "if (qp->user == IP_DEFRAG_CONNTRACK_IN &&"
    },
    {
        "line": 42,
        "fullcodeline": "skb_rtable(head)->rt_type != RTN_LOCAL)"
    }
]