[
    {
        "line": 4,
        "fullcodeline": "int error = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "unsigned long end_address = address + obj->size;"
    },
    {
        "line": 8,
        "fullcodeline": "oldpos = bit_position (dat);"
    },
    {
        "line": 9,
        "fullcodeline": "assert (address);"
    },
    {
        "line": 10,
        "fullcodeline": "dat->byte = address;"
    },
    {
        "line": 11,
        "fullcodeline": "dat->bit = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "LOG_INFO (\"Object number: %lu\", (unsigned long)obj->index);"
    },
    {
        "line": 24,
        "fullcodeline": "bit_write_MS (dat, obj->size);"
    },
    {
        "line": 25,
        "fullcodeline": "obj->address = dat->byte;"
    },
    {
        "line": 26,
        "fullcodeline": "PRE (R_2010) {"
    },
    {
        "line": 398,
        "fullcodeline": "LOG_TRACE (\"padding: +%d [*B]\\n\", 8 - dat->bit)"
    },
    {
        "line": 401,
        "fullcodeline": "end_address = obj->address + obj->size;"
    },
    {
        "line": 409,
        "fullcodeline": "assert (!dat->bit);"
    },
    {
        "line": 410,
        "fullcodeline": "bit_write_CRC (dat, address, 0xC0C1);"
    },
    {
        "line": 14,
        "fullcodeline": "if (obj->size > 0x100000)"
    },
    {
        "line": 19,
        "fullcodeline": "while (dat->byte + obj->size >= dat->size)"
    },
    {
        "line": 20,
        "fullcodeline": "bit_chain_alloc (dat);"
    },
    {
        "line": 27,
        "fullcodeline": "bit_write_BS (dat, obj->type);"
    },
    {
        "line": 28,
        "fullcodeline": "LOG_INFO (\", Size: %d [MS], Type: %d [BS]\\n\", obj->size, obj->type)"
    },
    {
        "line": 34,
        "fullcodeline": "bit_write_UMC (dat, obj->handlestream_size);"
    },
    {
        "line": 35,
        "fullcodeline": "obj->address = dat->byte;"
    },
    {
        "line": 36,
        "fullcodeline": "bit_write_BOT (dat, obj->type);"
    },
    {
        "line": 37,
        "fullcodeline": "LOG_INFO (\", Size: %d [MS], Hdlsize: %lu [UMC], Type: %d [BOT]\\n\","
    },
    {
        "line": 346,
        "fullcodeline": "if (!obj->size)"
    },
    {
        "line": 400,
        "fullcodeline": "bit_write_B (dat, 1);"
    },
    {
        "line": 402,
        "fullcodeline": "if (end_address != dat->byte)"
    },
    {
        "line": 16,
        "fullcodeline": "LOG_ERROR (\"Object size %u overflow\", obj->size);"
    },
    {
        "line": 32,
        "fullcodeline": "if (!obj->handlestream_size && obj->bitsize)"
    },
    {
        "line": 38,
        "fullcodeline": "obj->size, (unsigned long)obj->handlestream_size, obj->type)"
    },
    {
        "line": 45,
        "fullcodeline": "error = dwg_encode_TEXT (dat, obj);"
    },
    {
        "line": 48,
        "fullcodeline": "error = dwg_encode_ATTRIB (dat, obj);"
    },
    {
        "line": 51,
        "fullcodeline": "error = dwg_encode_ATTDEF (dat, obj);"
    },
    {
        "line": 54,
        "fullcodeline": "error = dwg_encode_BLOCK (dat, obj);"
    },
    {
        "line": 57,
        "fullcodeline": "error = dwg_encode_ENDBLK (dat, obj);"
    },
    {
        "line": 60,
        "fullcodeline": "error = dwg_encode_SEQEND (dat, obj);"
    },
    {
        "line": 63,
        "fullcodeline": "error = dwg_encode_INSERT (dat, obj);"
    },
    {
        "line": 66,
        "fullcodeline": "error = dwg_encode_MINSERT (dat, obj);"
    },
    {
        "line": 69,
        "fullcodeline": "error = dwg_encode_VERTEX_2D (dat, obj);"
    },
    {
        "line": 72,
        "fullcodeline": "error = dwg_encode_VERTEX_3D (dat, obj);"
    },
    {
        "line": 75,
        "fullcodeline": "error = dwg_encode_VERTEX_MESH (dat, obj);"
    },
    {
        "line": 78,
        "fullcodeline": "error = dwg_encode_VERTEX_PFACE (dat, obj);"
    },
    {
        "line": 81,
        "fullcodeline": "error = dwg_encode_VERTEX_PFACE_FACE (dat, obj);"
    },
    {
        "line": 84,
        "fullcodeline": "error = dwg_encode_POLYLINE_2D (dat, obj);"
    },
    {
        "line": 87,
        "fullcodeline": "error = dwg_encode_POLYLINE_3D (dat, obj);"
    },
    {
        "line": 90,
        "fullcodeline": "error = dwg_encode_ARC (dat, obj);"
    },
    {
        "line": 93,
        "fullcodeline": "error = dwg_encode_CIRCLE (dat, obj);"
    },
    {
        "line": 96,
        "fullcodeline": "error = dwg_encode_LINE (dat, obj);"
    },
    {
        "line": 99,
        "fullcodeline": "error = dwg_encode_DIMENSION_ORDINATE (dat, obj);"
    },
    {
        "line": 102,
        "fullcodeline": "error = dwg_encode_DIMENSION_LINEAR (dat, obj);"
    },
    {
        "line": 105,
        "fullcodeline": "error = dwg_encode_DIMENSION_ALIGNED (dat, obj);"
    },
    {
        "line": 108,
        "fullcodeline": "error = dwg_encode_DIMENSION_ANG3PT (dat, obj);"
    },
    {
        "line": 111,
        "fullcodeline": "error = dwg_encode_DIMENSION_ANG2LN (dat, obj);"
    },
    {
        "line": 114,
        "fullcodeline": "error = dwg_encode_DIMENSION_RADIUS (dat, obj);"
    },
    {
        "line": 117,
        "fullcodeline": "error = dwg_encode_DIMENSION_DIAMETER (dat, obj);"
    },
    {
        "line": 120,
        "fullcodeline": "error = dwg_encode_POINT (dat, obj);"
    },
    {
        "line": 123,
        "fullcodeline": "error = dwg_encode__3DFACE (dat, obj);"
    },
    {
        "line": 126,
        "fullcodeline": "error = dwg_encode_POLYLINE_PFACE (dat, obj);"
    },
    {
        "line": 129,
        "fullcodeline": "error = dwg_encode_POLYLINE_MESH (dat, obj);"
    },
    {
        "line": 132,
        "fullcodeline": "error = dwg_encode_SOLID (dat, obj);"
    },
    {
        "line": 135,
        "fullcodeline": "error = dwg_encode_TRACE (dat, obj);"
    },
    {
        "line": 138,
        "fullcodeline": "error = dwg_encode_SHAPE (dat, obj);"
    },
    {
        "line": 141,
        "fullcodeline": "error = dwg_encode_VIEWPORT (dat, obj);"
    },
    {
        "line": 144,
        "fullcodeline": "error = dwg_encode_ELLIPSE (dat, obj);"
    },
    {
        "line": 147,
        "fullcodeline": "error = dwg_encode_SPLINE (dat, obj);"
    },
    {
        "line": 150,
        "fullcodeline": "error = dwg_encode_REGION (dat, obj);"
    },
    {
        "line": 153,
        "fullcodeline": "error = dwg_encode__3DSOLID (dat, obj);"
    },
    {
        "line": 156,
        "fullcodeline": "error = dwg_encode_BODY (dat, obj);"
    },
    {
        "line": 159,
        "fullcodeline": "error = dwg_encode_RAY (dat, obj);"
    },
    {
        "line": 162,
        "fullcodeline": "error = dwg_encode_XLINE (dat, obj);"
    },
    {
        "line": 165,
        "fullcodeline": "error = dwg_encode_DICTIONARY (dat, obj);"
    },
    {
        "line": 168,
        "fullcodeline": "error = dwg_encode_MTEXT (dat, obj);"
    },
    {
        "line": 171,
        "fullcodeline": "error = dwg_encode_LEADER (dat, obj);"
    },
    {
        "line": 174,
        "fullcodeline": "error = dwg_encode_TOLERANCE (dat, obj);"
    },
    {
        "line": 177,
        "fullcodeline": "error = dwg_encode_MLINE (dat, obj);"
    },
    {
        "line": 180,
        "fullcodeline": "error = dwg_encode_BLOCK_CONTROL (dat, obj);"
    },
    {
        "line": 183,
        "fullcodeline": "error = dwg_encode_BLOCK_HEADER (dat, obj);"
    },
    {
        "line": 186,
        "fullcodeline": "error = dwg_encode_LAYER_CONTROL (dat, obj);"
    },
    {
        "line": 189,
        "fullcodeline": "error = dwg_encode_LAYER (dat, obj);"
    },
    {
        "line": 192,
        "fullcodeline": "error = dwg_encode_STYLE_CONTROL (dat, obj);"
    },
    {
        "line": 195,
        "fullcodeline": "error = dwg_encode_STYLE (dat, obj);"
    },
    {
        "line": 198,
        "fullcodeline": "error = dwg_encode_LTYPE_CONTROL (dat, obj);"
    },
    {
        "line": 201,
        "fullcodeline": "error = dwg_encode_LTYPE (dat, obj);"
    },
    {
        "line": 204,
        "fullcodeline": "error = dwg_encode_VIEW_CONTROL (dat, obj);"
    },
    {
        "line": 207,
        "fullcodeline": "error = dwg_encode_VIEW (dat, obj);"
    },
    {
        "line": 210,
        "fullcodeline": "error = dwg_encode_UCS_CONTROL (dat, obj);"
    },
    {
        "line": 213,
        "fullcodeline": "error = dwg_encode_UCS (dat, obj);"
    },
    {
        "line": 216,
        "fullcodeline": "error = dwg_encode_VPORT_CONTROL (dat, obj);"
    },
    {
        "line": 219,
        "fullcodeline": "error = dwg_encode_VPORT (dat, obj);"
    },
    {
        "line": 222,
        "fullcodeline": "error = dwg_encode_APPID_CONTROL (dat, obj);"
    },
    {
        "line": 225,
        "fullcodeline": "error = dwg_encode_APPID (dat, obj);"
    },
    {
        "line": 228,
        "fullcodeline": "error = dwg_encode_DIMSTYLE_CONTROL (dat, obj);"
    },
    {
        "line": 231,
        "fullcodeline": "error = dwg_encode_DIMSTYLE (dat, obj);"
    },
    {
        "line": 234,
        "fullcodeline": "error = dwg_encode_VPORT_ENTITY_CONTROL (dat, obj);"
    },
    {
        "line": 237,
        "fullcodeline": "error = dwg_encode_VPORT_ENTITY_HEADER (dat, obj);"
    },
    {
        "line": 240,
        "fullcodeline": "error = dwg_encode_GROUP (dat, obj);"
    },
    {
        "line": 243,
        "fullcodeline": "error = dwg_encode_MLINESTYLE (dat, obj);"
    },
    {
        "line": 244,
        "fullcodeline": "(void)dwg_encode_get_class (obj->parent, obj);"
    },
    {
        "line": 247,
        "fullcodeline": "error = dwg_encode_OLE2FRAME (dat, obj);"
    },
    {
        "line": 248,
        "fullcodeline": "(void)dwg_encode_get_class (obj->parent, obj);"
    },
    {
        "line": 251,
        "fullcodeline": "error = dwg_encode_DUMMY (dat, obj);"
    },
    {
        "line": 254,
        "fullcodeline": "error = dwg_encode_LONG_TRANSACTION (dat, obj);"
    },
    {
        "line": 257,
        "fullcodeline": "error = dwg_encode_LWPOLYLINE (dat, obj);"
    },
    {
        "line": 258,
        "fullcodeline": "(void)dwg_encode_get_class (obj->parent, obj);"
    },
    {
        "line": 261,
        "fullcodeline": "error = dwg_encode_HATCH (dat, obj);"
    },
    {
        "line": 262,
        "fullcodeline": "(void)dwg_encode_get_class (obj->parent, obj);"
    },
    {
        "line": 265,
        "fullcodeline": "error = dwg_encode_XRECORD (dat, obj);"
    },
    {
        "line": 266,
        "fullcodeline": "(void)dwg_encode_get_class (obj->parent, obj);"
    },
    {
        "line": 269,
        "fullcodeline": "error = dwg_encode_PLACEHOLDER (dat, obj);"
    },
    {
        "line": 270,
        "fullcodeline": "(void)dwg_encode_get_class (obj->parent, obj);"
    },
    {
        "line": 273,
        "fullcodeline": "error = dwg_encode_OLEFRAME (dat, obj);"
    },
    {
        "line": 274,
        "fullcodeline": "(void)dwg_encode_get_class (obj->parent, obj);"
    },
    {
        "line": 277,
        "fullcodeline": "LOG_ERROR (\"Unhandled Object VBA_PROJECT. Has its own section\");"
    },
    {
        "line": 281,
        "fullcodeline": "error |= dwg_encode_LAYOUT (dat, obj);"
    },
    {
        "line": 282,
        "fullcodeline": "(void)dwg_encode_get_class (obj->parent, obj);"
    },
    {
        "line": 285,
        "fullcodeline": "error = dwg_encode_PROXY_ENTITY (dat, obj);"
    },
    {
        "line": 288,
        "fullcodeline": "error = dwg_encode_PROXY_OBJECT (dat, obj);"
    },
    {
        "line": 348,
        "fullcodeline": "BITCODE_BL pos = bit_position (dat);"
    },
    {
        "line": 349,
        "fullcodeline": "assert (address);"
    },
    {
        "line": 350,
        "fullcodeline": "obj->size = dat->byte - address - 2; // excludes the CRC"
    },
    {
        "line": 360,
        "fullcodeline": "bit_set_position (dat, address * 8);"
    },
    {
        "line": 364,
        "fullcodeline": "bit_write_MS (dat, obj->size);"
    },
    {
        "line": 365,
        "fullcodeline": "LOG_TRACE (\"-size: %u [MS] @%lu\\n\", obj->size, address);"
    },
    {
        "line": 366,
        "fullcodeline": "SINCE (R_2013)"
    },
    {
        "line": 373,
        "fullcodeline": "SINCE (R_2000)"
    },
    {
        "line": 383,
        "fullcodeline": "bit_set_position (dat, pos);"
    },
    {
        "line": 407,
        "fullcodeline": "dat->byte = end_address;"
    },
    {
        "line": 33,
        "fullcodeline": "obj->handlestream_size = obj->size * 8 - obj->bitsize;"
    },
    {
        "line": 291,
        "fullcodeline": "if (obj->type == obj->parent->layout_type"
    },
    {
        "line": 354,
        "fullcodeline": "if (!obj->bitsize)"
    },
    {
        "line": 361,
        "fullcodeline": "if (obj->size > 0x7fff)"
    },
    {
        "line": 370,
        "fullcodeline": "bit_write_UMC (dat, obj->handlestream_size);"
    },
    {
        "line": 371,
        "fullcodeline": "LOG_TRACE (\"-handlestream_size: %lu [UMC]\\n\", obj->handlestream_size);"
    },
    {
        "line": 292,
        "fullcodeline": "&& obj->fixedtype == DWG_TYPE_LAYOUT)"
    },
    {
        "line": 294,
        "fullcodeline": "error = dwg_encode_LAYOUT (dat, obj);"
    },
    {
        "line": 295,
        "fullcodeline": "(void)dwg_encode_get_class (obj->parent, obj);"
    },
    {
        "line": 352,
        "fullcodeline": "obj->size++;"
    },
    {
        "line": 356,
        "fullcodeline": "LOG_TRACE (\"-bitsize calc from address (no handle) @%lu.%u\\n\","
    },
    {
        "line": 358,
        "fullcodeline": "obj->bitsize = pos - (obj->address * 8);"
    },
    {
        "line": 363,
        "fullcodeline": "LOG_ERROR (\"Unhandled size %u > 0x7fff\", (unsigned)obj->size);"
    },
    {
        "line": 368,
        "fullcodeline": "if (!obj->handlestream_size && obj->bitsize)"
    },
    {
        "line": 375,
        "fullcodeline": "if (obj->bitsize_pos && obj->bitsize)"
    },
    {
        "line": 405,
        "fullcodeline": "LOG_WARN (\"Wrong object size: %lu + %u = %lu != %lu: %ld off\", obj->address,"
    },
    {
        "line": 369,
        "fullcodeline": "obj->handlestream_size = obj->size * 8 - obj->bitsize;"
    },
    {
        "line": 377,
        "fullcodeline": "bit_set_position (dat, obj->bitsize_pos);"
    },
    {
        "line": 378,
        "fullcodeline": "bit_write_RL (dat, obj->bitsize);"
    },
    {
        "line": 379,
        "fullcodeline": "LOG_TRACE (\"-bitsize: %u [RL] @%lu.%lu\\n\", obj->bitsize,"
    },
    {
        "line": 406,
        "fullcodeline": "obj->size, end_address, dat->byte, (long)(end_address - dat->byte));"
    },
    {
        "line": 297,
        "fullcodeline": "else if ((error = dwg_encode_variable_type (obj->parent, dat, obj))"
    },
    {
        "line": 380,
        "fullcodeline": "obj->bitsize_pos / 8, obj->bitsize_pos % 8);"
    },
    {
        "line": 300,
        "fullcodeline": "Dwg_Data *dwg = obj->parent;"
    },
    {
        "line": 302,
        "fullcodeline": "int i = obj->type - 500;"
    },
    {
        "line": 303,
        "fullcodeline": "Dwg_Class *klass = dwg_encode_get_class (dwg, obj);"
    },
    {
        "line": 305,
        "fullcodeline": "assert (address);"
    },
    {
        "line": 306,
        "fullcodeline": "dat->byte = address; // restart and write into the UNKNOWN_OBJ object"
    },
    {
        "line": 307,
        "fullcodeline": "dat->bit = 0;"
    },
    {
        "line": 308,
        "fullcodeline": "bit_write_MS (dat, obj->size); // unknown blobs have a known size"
    },
    {
        "line": 309,
        "fullcodeline": "if (dat->version >= R_2010)"
    },
    {
        "line": 317,
        "fullcodeline": "if (klass && obj->supertype == DWG_SUPERTYPE_UNKNOWN)"
    },
    {
        "line": 322,
        "fullcodeline": "if (klass && !is_entity)"
    },
    {
        "line": 311,
        "fullcodeline": "bit_write_UMC (dat, obj->handlestream_size);"
    },
    {
        "line": 312,
        "fullcodeline": "bit_write_BOT (dat, obj->type);"
    },
    {
        "line": 318,
        "fullcodeline": "is_entity = dwg_class_is_entity (klass);"
    },
    {
        "line": 323,
        "fullcodeline": "error = dwg_encode_UNKNOWN_OBJ (dat, obj);"
    },
    {
        "line": 315,
        "fullcodeline": "bit_write_BS (dat, obj->type);"
    },
    {
        "line": 320,
        "fullcodeline": "is_entity = obj->supertype == DWG_SUPERTYPE_ENTITY;"
    },
    {
        "line": 325,
        "fullcodeline": "error = dwg_encode_UNKNOWN_ENT (dat, obj);"
    },
    {
        "line": 328,
        "fullcodeline": "LOG_WARN (\"Unknown object, skipping eed/reactors/xdic\");"
    },
    {
        "line": 329,
        "fullcodeline": "error = DWG_ERR_UNHANDLEDCLASS;"
    },
    {
        "line": 330,
        "fullcodeline": "SINCE (R_2000)"
    },
    {
        "line": 336,
        "fullcodeline": "bit_write_H (dat, &obj->handle);"
    },
    {
        "line": 340,
        "fullcodeline": "bit_write_TF (dat, obj->tio.unknown, obj->size);"
    },
    {
        "line": 332,
        "fullcodeline": "bit_write_RL (dat, obj->bitsize);"
    }
]