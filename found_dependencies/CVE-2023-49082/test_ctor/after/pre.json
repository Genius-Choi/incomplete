[
    {
        "line": 2,
        "fullcodeline": "req = make_mocked_request(\"GET\", \"/path/to?a=1&b=2\")"
    },
    {
        "line": 4,
        "fullcodeline": "assert \"GET\" == req.method"
    },
    {
        "line": 5,
        "fullcodeline": "assert HttpVersion(1, 1) == req.version"
    },
    {
        "line": 9,
        "fullcodeline": "assert req.host.lower() in socket.getfqdn().lower()"
    },
    {
        "line": 10,
        "fullcodeline": "assert \"/path/to?a=1&b=2\" == req.path_qs"
    },
    {
        "line": 11,
        "fullcodeline": "assert \"/path/to\" == req.path"
    },
    {
        "line": 12,
        "fullcodeline": "assert \"a=1&b=2\" == req.query_string"
    },
    {
        "line": 13,
        "fullcodeline": "assert CIMultiDict() == req.headers"
    },
    {
        "line": 14,
        "fullcodeline": "assert () == req.raw_headers"
    },
    {
        "line": 16,
        "fullcodeline": "get = req.query"
    },
    {
        "line": 17,
        "fullcodeline": "assert MultiDict([(\"a\", \"1\"), (\"b\", \"2\")]) == get"
    },
    {
        "line": 19,
        "fullcodeline": "assert get is req.query"
    },
    {
        "line": 21,
        "fullcodeline": "assert req.keep_alive"
    },
    {
        "line": 24,
        "fullcodeline": "headers = CIMultiDict(FOO=\"bar\")"
    },
    {
        "line": 25,
        "fullcodeline": "payload = mock.Mock()"
    },
    {
        "line": 26,
        "fullcodeline": "protocol = mock.Mock()"
    },
    {
        "line": 27,
        "fullcodeline": "app = mock.Mock()"
    },
    {
        "line": 28,
        "fullcodeline": "req = make_mocked_request("
    },
    {
        "line": 36,
        "fullcodeline": "assert req.app is app"
    },
    {
        "line": 37,
        "fullcodeline": "assert req.content is payload"
    },
    {
        "line": 38,
        "fullcodeline": "assert req.protocol is protocol"
    },
    {
        "line": 39,
        "fullcodeline": "assert req.transport is protocol.transport"
    },
    {
        "line": 40,
        "fullcodeline": "assert req.headers == headers"
    },
    {
        "line": 41,
        "fullcodeline": "assert req.raw_headers == ((b\"FOO\", b\"bar\"),)"
    },
    {
        "line": 42,
        "fullcodeline": "assert req.task is req._task"
    }
]