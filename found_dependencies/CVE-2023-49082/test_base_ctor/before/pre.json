[
    {
        "line": 2,
        "fullcodeline": "message = RawRequestMessage("
    },
    {
        "line": 15,
        "fullcodeline": "req = BaseRequest("
    },
    {
        "line": 19,
        "fullcodeline": "assert \"GET\" == req.method"
    },
    {
        "line": 20,
        "fullcodeline": "assert HttpVersion(1, 1) == req.version"
    },
    {
        "line": 21,
        "fullcodeline": "assert req.host == socket.getfqdn()"
    },
    {
        "line": 22,
        "fullcodeline": "assert \"/path/to?a=1&b=2\" == req.path_qs"
    },
    {
        "line": 23,
        "fullcodeline": "assert \"/path/to\" == req.path"
    },
    {
        "line": 24,
        "fullcodeline": "assert \"a=1&b=2\" == req.query_string"
    },
    {
        "line": 25,
        "fullcodeline": "assert CIMultiDict() == req.headers"
    },
    {
        "line": 26,
        "fullcodeline": "assert () == req.raw_headers"
    },
    {
        "line": 28,
        "fullcodeline": "get = req.query"
    },
    {
        "line": 29,
        "fullcodeline": "assert MultiDict([(\"a\", \"1\"), (\"b\", \"2\")]) == get"
    },
    {
        "line": 31,
        "fullcodeline": "assert get is req.query"
    },
    {
        "line": 33,
        "fullcodeline": "assert req.keep_alive"
    },
    {
        "line": 35,
        "fullcodeline": "assert req"
    },
    {
        "line": 5,
        "fullcodeline": "HttpVersion(1, 1),"
    },
    {
        "line": 6,
        "fullcodeline": "CIMultiDictProxy(CIMultiDict()),"
    },
    {
        "line": 12,
        "fullcodeline": "URL(\"/path/to?a=1&b=2\"),"
    },
    {
        "line": 16,
        "fullcodeline": "message, mock.Mock(), mock.Mock(), mock.Mock(), mock.Mock(), mock.Mock()"
    }
]