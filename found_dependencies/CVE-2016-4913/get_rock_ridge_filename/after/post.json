[
    {
        "line": 7,
        "fullcodeline": "int retnamlen = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "int truncate = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "int ret = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "*retname = 0;"
    },
    {
        "line": 17,
        "fullcodeline": "init_rock_state(&rs, inode);"
    },
    {
        "line": 18,
        "fullcodeline": "setup_rock_ridge(de, inode, &rs);"
    },
    {
        "line": 95,
        "fullcodeline": "ret = rock_continue(&rs);"
    },
    {
        "line": 101,
        "fullcodeline": "kfree(rs.buffer);"
    },
    {
        "line": 104,
        "fullcodeline": "ret = -EIO;"
    },
    {
        "line": 21,
        "fullcodeline": "while (rs.len > 2) { /* There may be one byte for padding somewhere */"
    },
    {
        "line": 96,
        "fullcodeline": "if (ret == 0)"
    },
    {
        "line": 98,
        "fullcodeline": "if (ret == 1)"
    },
    {
        "line": 22,
        "fullcodeline": "rr = (struct rock_ridge *)rs.chr;"
    },
    {
        "line": 30,
        "fullcodeline": "sig = isonum_721(rs.chr);"
    },
    {
        "line": 33,
        "fullcodeline": "rs.chr += rr->len;"
    },
    {
        "line": 34,
        "fullcodeline": "rs.len -= rr->len;"
    },
    {
        "line": 13,
        "fullcodeline": "if (!ISOFS_SB(inode->i_sb)->s_rock)"
    },
    {
        "line": 28,
        "fullcodeline": "if (rr->len < 3)"
    },
    {
        "line": 31,
        "fullcodeline": "if (rock_check_overflow(&rs, sig))"
    },
    {
        "line": 39,
        "fullcodeline": "if (rs.len < 0)"
    },
    {
        "line": 43,
        "fullcodeline": "case SIG('R', 'R'):"
    },
    {
        "line": 47,
        "fullcodeline": "case SIG('S', 'P'):"
    },
    {
        "line": 51,
        "fullcodeline": "case SIG('C', 'E'):"
    },
    {
        "line": 52,
        "fullcodeline": "rs.cont_extent = isonum_733(rr->u.CE.extent);"
    },
    {
        "line": 53,
        "fullcodeline": "rs.cont_offset = isonum_733(rr->u.CE.offset);"
    },
    {
        "line": 54,
        "fullcodeline": "rs.cont_size = isonum_733(rr->u.CE.size);"
    },
    {
        "line": 56,
        "fullcodeline": "case SIG('N', 'M'):"
    },
    {
        "line": 76,
        "fullcodeline": "len = rr->len - 5;"
    },
    {
        "line": 81,
        "fullcodeline": "p = memchr(rr->u.NM.name, '\\0', len);"
    },
    {
        "line": 84,
        "fullcodeline": "memcpy(retname + retnamlen, rr->u.NM.name, len);"
    },
    {
        "line": 85,
        "fullcodeline": "retnamlen += len;"
    },
    {
        "line": 86,
        "fullcodeline": "retname[retnamlen] = '\\0';"
    },
    {
        "line": 88,
        "fullcodeline": "case SIG('R', 'E'):"
    },
    {
        "line": 89,
        "fullcodeline": "kfree(rs.buffer);"
    },
    {
        "line": 44,
        "fullcodeline": "if ((rr->u.RR.flags[0] & RR_NM) == 0)"
    },
    {
        "line": 48,
        "fullcodeline": "if (check_sp(rr, inode))"
    },
    {
        "line": 59,
        "fullcodeline": "if (rr->len < 5)"
    },
    {
        "line": 68,
        "fullcodeline": "if (rr->u.NM.flags & 6)"
    },
    {
        "line": 71,
        "fullcodeline": "if (rr->u.NM.flags & ~1) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (retnamlen + len >= 254) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (unlikely(p))"
    },
    {
        "line": 90,
        "fullcodeline": "return -1;"
    },
    {
        "line": 72,
        "fullcodeline": "printk(\"Unsupported NM flag settings (%d)\\n\","
    },
    {
        "line": 78,
        "fullcodeline": "truncate = 1;"
    },
    {
        "line": 83,
        "fullcodeline": "len = p - rr->u.NM.name;"
    }
]