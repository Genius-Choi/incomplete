[
    {
        "line": 3,
        "fullcodeline": "ai_assert(nullptr != pcElement);"
    },
    {
        "line": 4,
        "fullcodeline": "ai_assert(nullptr != instElement);"
    },
    {
        "line": 13,
        "fullcodeline": "unsigned int iProperty = 0xFFFFFFFF;"
    },
    {
        "line": 14,
        "fullcodeline": "PLY::EDataType eType = EDT_Char;"
    },
    {
        "line": 15,
        "fullcodeline": "bool bIsTriStrip = false;"
    },
    {
        "line": 22,
        "fullcodeline": "unsigned int iTextureCoord = 0xFFFFFFFF;"
    },
    {
        "line": 23,
        "fullcodeline": "PLY::EDataType eType3 = EDT_Char;"
    },
    {
        "line": 6,
        "fullcodeline": "if (mGeneratedMesh == nullptr) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (PLY::EEST_Face == pcElement->eSemantic) {"
    },
    {
        "line": 27,
        "fullcodeline": "unsigned int _a = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "throw DeadlyImportError(\"Invalid .ply file: Vertices should be declared before faces\");"
    },
    {
        "line": 29,
        "fullcodeline": "a != pcElement->alProperties.end(); ++a, ++_a) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (mGeneratedMesh->mFaces == nullptr) {"
    },
    {
        "line": 28,
        "fullcodeline": "for (std::vector<PLY::Property>::const_iterator a = pcElement->alProperties.begin();"
    },
    {
        "line": 72,
        "fullcodeline": "mGeneratedMesh->mFaces = new aiFace[mGeneratedMesh->mNumFaces];"
    },
    {
        "line": 30,
        "fullcodeline": "if (PLY::EST_VertexIndex == (*a).Semantic) {"
    },
    {
        "line": 53,
        "fullcodeline": "unsigned int _a = 0;"
    },
    {
        "line": 81,
        "fullcodeline": "if (0xFFFFFFFF != iProperty) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (0xFFFFFFFF != iTextureCoord) {"
    },
    {
        "line": 133,
        "fullcodeline": "bool flip = false;"
    },
    {
        "line": 134,
        "fullcodeline": "const std::vector<PLY::PropertyInstance::ValueUnion> &quak = GetProperty(instElement->alProperties, iProperty).avList;"
    },
    {
        "line": 137,
        "fullcodeline": "int aiTable[2] = { -1, -1 };"
    },
    {
        "line": 36,
        "fullcodeline": "iProperty = _a;"
    },
    {
        "line": 38,
        "fullcodeline": "eType = (*a).eType;"
    },
    {
        "line": 55,
        "fullcodeline": "a != pcElement->alProperties.end(); ++a, ++_a) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (mGeneratedMesh->mNumFaces < pcElement->NumOccur) {"
    },
    {
        "line": 82,
        "fullcodeline": "const unsigned int iNum = (unsigned int)GetProperty(instElement->alProperties, iProperty).avList.size();"
    },
    {
        "line": 86,
        "fullcodeline": "std::vector<PLY::PropertyInstance::ValueUnion>::const_iterator p ="
    },
    {
        "line": 103,
        "fullcodeline": "const unsigned int iNum = (unsigned int)GetProperty(instElement->alProperties, iTextureCoord).avList.size();"
    },
    {
        "line": 106,
        "fullcodeline": "std::vector<PLY::PropertyInstance::ValueUnion>::const_iterator p ="
    },
    {
        "line": 138,
        "fullcodeline": "for (std::vector<PLY::PropertyInstance::ValueUnion>::const_iterator a = quak.begin(); a != quak.end(); ++a) {"
    },
    {
        "line": 54,
        "fullcodeline": "for (std::vector<PLY::Property>::const_iterator a = pcElement->alProperties.begin();"
    },
    {
        "line": 60,
        "fullcodeline": "iProperty = _a;"
    },
    {
        "line": 62,
        "fullcodeline": "bIsTriStrip = true;"
    },
    {
        "line": 63,
        "fullcodeline": "eType = (*a).eType;"
    },
    {
        "line": 84,
        "fullcodeline": "mGeneratedMesh->mFaces[pos].mIndices = new unsigned int[iNum];"
    },
    {
        "line": 87,
        "fullcodeline": "GetProperty(instElement->alProperties, iProperty).avList.begin();"
    },
    {
        "line": 89,
        "fullcodeline": "for (unsigned int a = 0; a < iNum; ++a, ++p) {"
    },
    {
        "line": 107,
        "fullcodeline": "GetProperty(instElement->alProperties, iTextureCoord).avList.begin();"
    },
    {
        "line": 139,
        "fullcodeline": "const int p = PLY::PropertyInstance::ConvertTo<int>(*a, eType);"
    },
    {
        "line": 163,
        "fullcodeline": "mGeneratedMesh->mFaces[pos].mIndices[0] = aiTable[0];"
    },
    {
        "line": 164,
        "fullcodeline": "mGeneratedMesh->mFaces[pos].mIndices[1] = aiTable[1];"
    },
    {
        "line": 168,
        "fullcodeline": "flip = !flip;"
    },
    {
        "line": 173,
        "fullcodeline": "aiTable[0] = aiTable[1];"
    },
    {
        "line": 174,
        "fullcodeline": "aiTable[1] = p;"
    },
    {
        "line": 109,
        "fullcodeline": "if ((iNum / 3) == 2) // X Y coord"
    },
    {
        "line": 141,
        "fullcodeline": "if (-1 == p) {"
    },
    {
        "line": 147,
        "fullcodeline": "if (-1 == aiTable[0]) {"
    },
    {
        "line": 151,
        "fullcodeline": "if (-1 == aiTable[1]) {"
    },
    {
        "line": 162,
        "fullcodeline": "mGeneratedMesh->mFaces[pos].mIndices = new unsigned int[3];"
    },
    {
        "line": 44,
        "fullcodeline": "iTextureCoord = _a;"
    },
    {
        "line": 46,
        "fullcodeline": "eType3 = (*a).eType;"
    },
    {
        "line": 90,
        "fullcodeline": "mGeneratedMesh->mFaces[pos].mIndices[a] = PLY::PropertyInstance::ConvertTo<unsigned int>(*p, eType);"
    },
    {
        "line": 111,
        "fullcodeline": "for (unsigned int a = 0; a < iNum; ++a, ++p) {"
    },
    {
        "line": 143,
        "fullcodeline": "aiTable[0] = aiTable[1] = -1;"
    },
    {
        "line": 144,
        "fullcodeline": "flip = false;"
    },
    {
        "line": 148,
        "fullcodeline": "aiTable[0] = p;"
    },
    {
        "line": 152,
        "fullcodeline": "aiTable[1] = p;"
    },
    {
        "line": 158,
        "fullcodeline": "mGeneratedMesh->mFaces = new aiFace[mGeneratedMesh->mNumFaces];"
    },
    {
        "line": 112,
        "fullcodeline": "unsigned int vindex = mGeneratedMesh->mFaces[pos].mIndices[a / 2];"
    },
    {
        "line": 116,
        "fullcodeline": "mGeneratedMesh->mTextureCoords[0] = new aiVector3D[mGeneratedMesh->mNumVertices];"
    },
    {
        "line": 119,
        "fullcodeline": "if (a % 2 == 0) {"
    },
    {
        "line": 120,
        "fullcodeline": "mGeneratedMesh->mTextureCoords[0][vindex].x = PLY::PropertyInstance::ConvertTo<ai_real>(*p, eType3);"
    },
    {
        "line": 122,
        "fullcodeline": "mGeneratedMesh->mTextureCoords[0][vindex].y = PLY::PropertyInstance::ConvertTo<ai_real>(*p, eType3);"
    }
]