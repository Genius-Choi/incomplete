[
    {
        "line": 6,
        "fullcodeline": "const OpDef& signature = func.signature();"
    },
    {
        "line": 22,
        "fullcodeline": "std::unique_ptr<FunctionBody> fbody;"
    },
    {
        "line": 27,
        "fullcodeline": "fbody->graph->ToGraphDef(&function_body);"
    },
    {
        "line": 39,
        "fullcodeline": "const int num_instantiated_inputs = fbody->arg_types.size();"
    },
    {
        "line": 40,
        "fullcodeline": "const int num_instantiated_outputs = fbody->ret_types.size();"
    },
    {
        "line": 42,
        "fullcodeline": "std::vector<InputArgInstantiation> inputs;"
    },
    {
        "line": 43,
        "fullcodeline": "inputs.reserve(num_instantiated_inputs);"
    },
    {
        "line": 51,
        "fullcodeline": "std::vector<OutputArgInstantiation> outputs;"
    },
    {
        "line": 52,
        "fullcodeline": "outputs.reserve(num_instantiated_outputs);"
    },
    {
        "line": 62,
        "fullcodeline": "std::vector<ControlOutput> control_outputs;"
    },
    {
        "line": 63,
        "fullcodeline": "control_outputs.reserve(func.control_ret_size());"
    },
    {
        "line": 8,
        "fullcodeline": "if (signature.name().empty()) {"
    },
    {
        "line": 24,
        "fullcodeline": "FunctionDefToBodyHelper(func, func_instantiation_attr, &flib, &fbody));"
    },
    {
        "line": 31,
        "fullcodeline": "*function_body.mutable_library() = flib.ReachableDefinitions(func).ToProto();"
    },
    {
        "line": 33,
        "fullcodeline": "VLOG(3) << absl::Substitute("
    },
    {
        "line": 45,
        "fullcodeline": "for (int in_id = 0; in_id < num_instantiated_inputs; ++in_id) {"
    },
    {
        "line": 54,
        "fullcodeline": "for (int out_id = 0; out_id < num_instantiated_outputs; ++out_id) {"
    },
    {
        "line": 70,
        "fullcodeline": "std::sort(control_outputs.begin(), control_outputs.end());"
    },
    {
        "line": 72,
        "fullcodeline": "std::vector<const FunctionDef::ArgAttrs*> arg_attr(inputs.size(), nullptr);"
    },
    {
        "line": 77,
        "fullcodeline": "*item = GrapplerFunctionItem("
    },
    {
        "line": 83,
        "fullcodeline": "return OkStatus();"
    },
    {
        "line": 36,
        "fullcodeline": "flib.num_functions() - function_body.library().function_size(),"
    },
    {
        "line": 37,
        "fullcodeline": "signature.name(), function_body.library().function_size());"
    },
    {
        "line": 46,
        "fullcodeline": "const Node* node = fbody->arg_nodes[in_id];"
    },
    {
        "line": 47,
        "fullcodeline": "const DataType& dtype = fbody->arg_types[in_id];"
    },
    {
        "line": 48,
        "fullcodeline": "inputs.emplace_back(node->name(), dtype);"
    },
    {
        "line": 55,
        "fullcodeline": "const Node* node = fbody->ret_nodes[out_id];"
    },
    {
        "line": 56,
        "fullcodeline": "const DataType& dtype = fbody->ret_types[out_id];"
    },
    {
        "line": 57,
        "fullcodeline": "outputs.emplace_back(node->name(), dtype);"
    },
    {
        "line": 65,
        "fullcodeline": "control_outputs.push_back({control_ret.first, control_ret.second});"
    },
    {
        "line": 78,
        "fullcodeline": "/*func_name=*/signature.name(),"
    },
    {
        "line": 79,
        "fullcodeline": "/*description=*/signature.description(),"
    },
    {
        "line": 80,
        "fullcodeline": "/*func_attr=*/AttrSlice(&func.attr()), std::move(arg_attr),"
    },
    {
        "line": 81,
        "fullcodeline": "std::move(inputs), std::move(outputs), std::move(control_outputs),"
    },
    {
        "line": 82,
        "fullcodeline": "graph_def_version, signature.is_stateful(), std::move(function_body));"
    },
    {
        "line": 9,
        "fullcodeline": "return errors::InvalidArgument(\"Function name must be specified\");"
    },
    {
        "line": 74,
        "fullcodeline": "arg_attr.at(attr.first) = &attr.second;"
    },
    {
        "line": 15,
        "fullcodeline": "if (attr.type() != \"type\") {"
    },
    {
        "line": 16,
        "fullcodeline": "return errors::InvalidArgument("
    }
]