[
    {
        "line": 18,
        "fullcodeline": "ggml_backend_t backend = create_backend();"
    },
    {
        "line": 23,
        "fullcodeline": "std::string endpoint = params.host + \":\" + std::to_string(params.port);"
    },
    {
        "line": 31,
        "fullcodeline": "printf(\"Starting RPC server on %s, backend memory: %zu MB\\n\", endpoint.c_str(), free_mem / (1024 * 1024));"
    },
    {
        "line": 32,
        "fullcodeline": "start_rpc_server(backend, endpoint.c_str(), free_mem, total_mem);"
    },
    {
        "line": 33,
        "fullcodeline": "ggml_backend_free(backend);"
    },
    {
        "line": 3,
        "fullcodeline": "if (!rpc_server_params_parse(argc, argv, params)) {"
    },
    {
        "line": 8,
        "fullcodeline": "if (params.host != \"127.0.0.1\") {"
    },
    {
        "line": 19,
        "fullcodeline": "if (!backend) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (params.backend_mem > 0) {"
    },
    {
        "line": 4,
        "fullcodeline": "fprintf(stderr, \"Invalid parameters\\n\");"
    },
    {
        "line": 9,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 10,
        "fullcodeline": "fprintf(stderr, \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n\");"
    },
    {
        "line": 11,
        "fullcodeline": "fprintf(stderr, \"WARNING: Host ('%s') is != '127.0.0.1'\\n\", params.host.c_str());"
    },
    {
        "line": 12,
        "fullcodeline": "fprintf(stderr, \"         Never expose the RPC server to an open network!\\n\");"
    },
    {
        "line": 13,
        "fullcodeline": "fprintf(stderr, \"         This is an experimental feature and is not secure!\\n\");"
    },
    {
        "line": 14,
        "fullcodeline": "fprintf(stderr, \"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\\n\");"
    },
    {
        "line": 15,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 20,
        "fullcodeline": "fprintf(stderr, \"Failed to create backend\\n\");"
    },
    {
        "line": 26,
        "fullcodeline": "free_mem = params.backend_mem;"
    },
    {
        "line": 27,
        "fullcodeline": "total_mem = params.backend_mem;"
    },
    {
        "line": 29,
        "fullcodeline": "get_backend_memory(&free_mem, &total_mem);"
    }
]