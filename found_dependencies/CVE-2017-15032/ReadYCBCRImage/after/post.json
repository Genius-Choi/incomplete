[
    {
        "line": 43,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 44,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 48,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 49,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 50,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 53,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 56,
        "fullcodeline": "SetImageColorspace(image,YCbCrColorspace,exception);"
    },
    {
        "line": 72,
        "fullcodeline": "canvas_image=CloneImage(image,image->extract_info.width,1,MagickFalse,"
    },
    {
        "line": 74,
        "fullcodeline": "(void) SetImageVirtualPixelMethod(canvas_image,BlackVirtualPixelMethod,"
    },
    {
        "line": 76,
        "fullcodeline": "quantum_info=AcquireQuantumInfo(image_info,canvas_image);"
    },
    {
        "line": 79,
        "fullcodeline": "quantum_type=RGBQuantum;"
    },
    {
        "line": 85,
        "fullcodeline": "pixels=(const unsigned char *) NULL;"
    },
    {
        "line": 102,
        "fullcodeline": "count=0;"
    },
    {
        "line": 103,
        "fullcodeline": "length=0;"
    },
    {
        "line": 104,
        "fullcodeline": "scene=0;"
    },
    {
        "line": 798,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 799,
        "fullcodeline": "canvas_image=DestroyImage(canvas_image);"
    },
    {
        "line": 800,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 45,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 51,
        "fullcodeline": "if ((image->columns == 0) || (image->rows == 0))"
    },
    {
        "line": 54,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 57,
        "fullcodeline": "if (image_info->interlace != PartitionInterlace)"
    },
    {
        "line": 77,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 80,
        "fullcodeline": "if (LocaleCompare(image_info->magick,\"YCbCrA\") == 0)"
    },
    {
        "line": 86,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 797,
        "fullcodeline": "} while (count == (ssize_t) length);"
    },
    {
        "line": 801,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 46,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 52,
        "fullcodeline": "ThrowReaderException(OptionError,\"MustSpecifyImageSize\");"
    },
    {
        "line": 59,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 78,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 82,
        "fullcodeline": "quantum_type=RGBAQuantum;"
    },
    {
        "line": 83,
        "fullcodeline": "image->alpha_trait=BlendPixelTrait;"
    },
    {
        "line": 113,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 120,
        "fullcodeline": "SetImageColorspace(image,YCbCrColorspace,exception);"
    },
    {
        "line": 772,
        "fullcodeline": "SetQuantumImageType(image,quantum_type);"
    },
    {
        "line": 796,
        "fullcodeline": "scene++;"
    },
    {
        "line": 55,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 60,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 65,
        "fullcodeline": "if (DiscardBlobBytes(image,image->offset) == MagickFalse)"
    },
    {
        "line": 87,
        "fullcodeline": "while (image->scene < image_info->scene)"
    },
    {
        "line": 110,
        "fullcodeline": "if ((image_info->ping != MagickFalse) && (image_info->number_scenes != 0))"
    },
    {
        "line": 114,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 776,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 779,
        "fullcodeline": "if (count == (ssize_t) length)"
    },
    {
        "line": 62,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 66,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 92,
        "fullcodeline": "image->scene++;"
    },
    {
        "line": 93,
        "fullcodeline": "length=GetQuantumExtent(canvas_image,quantum_info,quantum_type);"
    },
    {
        "line": 116,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 117,
        "fullcodeline": "canvas_image=DestroyImage(canvas_image);"
    },
    {
        "line": 784,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 790,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 791,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 63,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 94,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 111,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 118,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 189,
        "fullcodeline": "quantum_types[4] ="
    },
    {
        "line": 485,
        "fullcodeline": "AppendImageFormat(\"Y\",image->filename);"
    },
    {
        "line": 486,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 496,
        "fullcodeline": "length=GetQuantumExtent(canvas_image,quantum_info,RedQuantum);"
    },
    {
        "line": 509,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 555,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 556,
        "fullcodeline": "AppendImageFormat(\"Cb\",image->filename);"
    },
    {
        "line": 557,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 564,
        "fullcodeline": "length=GetQuantumExtent(canvas_image,quantum_info,GreenQuantum);"
    },
    {
        "line": 577,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 623,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 624,
        "fullcodeline": "AppendImageFormat(\"Cr\",image->filename);"
    },
    {
        "line": 625,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 632,
        "fullcodeline": "length=GetQuantumExtent(canvas_image,quantum_info,BlueQuantum);"
    },
    {
        "line": 645,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 777,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 785,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 793,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 96,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 129,
        "fullcodeline": "if (scene == 0)"
    },
    {
        "line": 135,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 190,
        "fullcodeline": "{"
    },
    {
        "line": 200,
        "fullcodeline": "if (scene == 0)"
    },
    {
        "line": 206,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 286,
        "fullcodeline": "if (scene == 0)"
    },
    {
        "line": 292,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 330,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 336,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 374,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 380,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 418,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 424,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 472,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 487,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 493,
        "fullcodeline": "if (DiscardBlobBytes(image,image->offset) == MagickFalse)"
    },
    {
        "line": 497,
        "fullcodeline": "for (i=0; i < (ssize_t) scene; i++)"
    },
    {
        "line": 511,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 549,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 558,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 565,
        "fullcodeline": "for (i=0; i < (ssize_t) scene; i++)"
    },
    {
        "line": 579,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 617,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 626,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 633,
        "fullcodeline": "for (i=0; i < (ssize_t) scene; i++)"
    },
    {
        "line": 647,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 685,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 691,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 763,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 787,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 792,
        "fullcodeline": "GetBlobSize(image));"
    },
    {
        "line": 98,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 131,
        "fullcodeline": "length=GetQuantumExtent(canvas_image,quantum_info,quantum_type);"
    },
    {
        "line": 132,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 143,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 147,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 181,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 202,
        "fullcodeline": "length=GetQuantumExtent(canvas_image,quantum_info,RedQuantum);"
    },
    {
        "line": 203,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 288,
        "fullcodeline": "length=GetQuantumExtent(canvas_image,quantum_info,RedQuantum);"
    },
    {
        "line": 289,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 300,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 304,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 327,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 332,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,1,5);"
    },
    {
        "line": 344,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 348,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 371,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 376,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,2,5);"
    },
    {
        "line": 388,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 392,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 415,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 420,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,3,5);"
    },
    {
        "line": 474,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,5,5);"
    },
    {
        "line": 489,
        "fullcodeline": "canvas_image=DestroyImageList(canvas_image);"
    },
    {
        "line": 490,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 494,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 498,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 519,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 523,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 546,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 551,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,1,5);"
    },
    {
        "line": 560,
        "fullcodeline": "canvas_image=DestroyImageList(canvas_image);"
    },
    {
        "line": 561,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 566,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 587,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 591,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 614,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 619,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,2,5);"
    },
    {
        "line": 628,
        "fullcodeline": "canvas_image=DestroyImageList(canvas_image);"
    },
    {
        "line": 629,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 634,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 655,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 659,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 682,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 687,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,3,5);"
    },
    {
        "line": 693,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 694,
        "fullcodeline": "AppendImageFormat(\"A\",image->filename);"
    },
    {
        "line": 695,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 702,
        "fullcodeline": "length=GetQuantumExtent(canvas_image,quantum_info,AlphaQuantum);"
    },
    {
        "line": 715,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 765,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,5,5);"
    },
    {
        "line": 788,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 137,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 145,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 149,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 151,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 174,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 208,
        "fullcodeline": "for (i=0; i < (image->alpha_trait != UndefinedPixelTrait ? 4 : 3); i++)"
    },
    {
        "line": 271,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 294,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 302,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 306,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 308,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 333,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 338,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 346,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 350,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 352,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 377,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 382,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 390,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 394,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 396,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 421,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 426,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 465,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 475,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 491,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 500,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 510,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 513,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 521,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 525,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 527,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 552,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 562,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 568,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 578,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 581,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 589,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 593,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 595,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 620,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 630,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 636,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 646,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 649,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 657,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 661,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 663,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 688,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 696,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 703,
        "fullcodeline": "for (i=0; i < (ssize_t) scene; i++)"
    },
    {
        "line": 717,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 756,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 766,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 97,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 139,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 152,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 154,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,canvas_image->extract_info.x,0,"
    },
    {
        "line": 156,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 176,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 216,
        "fullcodeline": "quantum_type=quantum_types[i];"
    },
    {
        "line": 217,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 221,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 268,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 273,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 296,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 309,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 311,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,canvas_image->extract_info.x,0,"
    },
    {
        "line": 313,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 340,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 353,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 355,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,canvas_image->extract_info.x,0,"
    },
    {
        "line": 357,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 384,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 397,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 399,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,canvas_image->extract_info.x,0,"
    },
    {
        "line": 401,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 434,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 438,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 462,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 467,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,4,5);"
    },
    {
        "line": 502,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 515,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 528,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 530,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,canvas_image->extract_info.x,0,"
    },
    {
        "line": 532,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 570,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 583,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 596,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 598,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,canvas_image->extract_info.x,0,"
    },
    {
        "line": 600,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 638,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 651,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 664,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 666,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,canvas_image->extract_info.x,0,"
    },
    {
        "line": 668,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 698,
        "fullcodeline": "canvas_image=DestroyImageList(canvas_image);"
    },
    {
        "line": 699,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 704,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 725,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 729,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 753,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 758,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,4,5);"
    },
    {
        "line": 133,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 158,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 161,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 171,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 178,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 182,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 204,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 210,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 219,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 223,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 225,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 275,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 290,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 315,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 318,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 324,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 328,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 359,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 362,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 368,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 372,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 403,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 406,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 412,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 416,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 428,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 436,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 440,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 442,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 468,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 504,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 534,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 537,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 543,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 547,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 572,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 602,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 605,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 611,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 615,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 640,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 670,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 673,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 679,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 683,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 700,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 706,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 716,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 719,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 727,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 731,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 733,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 759,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 159,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 163,
        "fullcodeline": "SetPixelRed(image,GetPixelRed(canvas_image,p),q);"
    },
    {
        "line": 164,
        "fullcodeline": "SetPixelGreen(image,GetPixelGreen(canvas_image,p),q);"
    },
    {
        "line": 165,
        "fullcodeline": "SetPixelBlue(image,GetPixelBlue(canvas_image,p),q);"
    },
    {
        "line": 168,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 169,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 212,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 226,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 228,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,canvas_image->extract_info.x,"
    },
    {
        "line": 230,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 316,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 320,
        "fullcodeline": "SetPixelRed(image,GetPixelRed(canvas_image,p),q);"
    },
    {
        "line": 321,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 322,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 360,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 364,
        "fullcodeline": "SetPixelGreen(image,GetPixelGreen(canvas_image,p),q);"
    },
    {
        "line": 365,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 366,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 404,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 408,
        "fullcodeline": "SetPixelBlue(image,GetPixelBlue(canvas_image,p),q);"
    },
    {
        "line": 409,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 410,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 430,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 443,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 445,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,"
    },
    {
        "line": 448,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 501,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 535,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 539,
        "fullcodeline": "SetPixelRed(image,GetPixelRed(canvas_image,p),q);"
    },
    {
        "line": 540,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 541,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 569,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 603,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 607,
        "fullcodeline": "SetPixelGreen(image,GetPixelGreen(canvas_image,p),q);"
    },
    {
        "line": 608,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 609,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 637,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 671,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 675,
        "fullcodeline": "SetPixelBlue(image,GetPixelBlue(canvas_image,p),q);"
    },
    {
        "line": 676,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 677,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 708,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 721,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 734,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 736,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,"
    },
    {
        "line": 739,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 166,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 232,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 235,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 265,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 269,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 450,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 453,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 459,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 463,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 710,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 741,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 744,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 750,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 754,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 167,
        "fullcodeline": "SetPixelAlpha(image,GetPixelAlpha(canvas_image,p),q);"
    },
    {
        "line": 233,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 262,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 263,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 451,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 455,
        "fullcodeline": "SetPixelAlpha(image,GetPixelAlpha(canvas_image,p),q);"
    },
    {
        "line": 456,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 457,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 707,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 742,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 746,
        "fullcodeline": "SetPixelAlpha(image,GetPixelAlpha(canvas_image,p),q);"
    },
    {
        "line": 747,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 748,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 241,
        "fullcodeline": "SetPixelRed(image,GetPixelRed(canvas_image,p),q);"
    },
    {
        "line": 246,
        "fullcodeline": "SetPixelGreen(image,GetPixelGreen(canvas_image,p),q);"
    },
    {
        "line": 251,
        "fullcodeline": "SetPixelBlue(image,GetPixelBlue(canvas_image,p),q);"
    },
    {
        "line": 256,
        "fullcodeline": "SetPixelAlpha(image,GetPixelAlpha(canvas_image,p),q);"
    }
]