[
    {
        "line": 43,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 44,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 48,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 49,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 50,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 53,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 56,
        "fullcodeline": "SetImageColorspace(image,YCbCrColorspace,exception);"
    },
    {
        "line": 72,
        "fullcodeline": "canvas_image=CloneImage(image,image->extract_info.width,1,MagickFalse,"
    },
    {
        "line": 74,
        "fullcodeline": "(void) SetImageVirtualPixelMethod(canvas_image,BlackVirtualPixelMethod,"
    },
    {
        "line": 76,
        "fullcodeline": "quantum_info=AcquireQuantumInfo(image_info,canvas_image);"
    },
    {
        "line": 79,
        "fullcodeline": "quantum_type=RGBQuantum;"
    },
    {
        "line": 85,
        "fullcodeline": "pixels=(const unsigned char *) NULL;"
    },
    {
        "line": 102,
        "fullcodeline": "count=0;"
    },
    {
        "line": 103,
        "fullcodeline": "length=0;"
    },
    {
        "line": 104,
        "fullcodeline": "scene=0;"
    },
    {
        "line": 797,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 798,
        "fullcodeline": "canvas_image=DestroyImage(canvas_image);"
    },
    {
        "line": 799,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 45,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 51,
        "fullcodeline": "if ((image->columns == 0) || (image->rows == 0))"
    },
    {
        "line": 54,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 57,
        "fullcodeline": "if (image_info->interlace != PartitionInterlace)"
    },
    {
        "line": 77,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 80,
        "fullcodeline": "if (LocaleCompare(image_info->magick,\"YCbCrA\") == 0)"
    },
    {
        "line": 86,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 796,
        "fullcodeline": "} while (count == (ssize_t) length);"
    },
    {
        "line": 800,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 46,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 52,
        "fullcodeline": "ThrowReaderException(OptionError,\"MustSpecifyImageSize\");"
    },
    {
        "line": 59,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 78,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 82,
        "fullcodeline": "quantum_type=RGBAQuantum;"
    },
    {
        "line": 83,
        "fullcodeline": "image->alpha_trait=BlendPixelTrait;"
    },
    {
        "line": 113,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 119,
        "fullcodeline": "SetImageColorspace(image,YCbCrColorspace,exception);"
    },
    {
        "line": 771,
        "fullcodeline": "SetQuantumImageType(image,quantum_type);"
    },
    {
        "line": 795,
        "fullcodeline": "scene++;"
    },
    {
        "line": 55,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 60,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 65,
        "fullcodeline": "if (DiscardBlobBytes(image,image->offset) == MagickFalse)"
    },
    {
        "line": 87,
        "fullcodeline": "while (image->scene < image_info->scene)"
    },
    {
        "line": 110,
        "fullcodeline": "if ((image_info->ping != MagickFalse) && (image_info->number_scenes != 0))"
    },
    {
        "line": 114,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 775,
        "fullcodeline": "if (image_info->number_scenes != 0)"
    },
    {
        "line": 778,
        "fullcodeline": "if (count == (ssize_t) length)"
    },
    {
        "line": 62,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 66,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 92,
        "fullcodeline": "image->scene++;"
    },
    {
        "line": 93,
        "fullcodeline": "length=GetQuantumExtent(canvas_image,quantum_info,quantum_type);"
    },
    {
        "line": 116,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 783,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 789,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 790,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 63,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 94,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 111,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 117,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 188,
        "fullcodeline": "quantum_types[4] ="
    },
    {
        "line": 484,
        "fullcodeline": "AppendImageFormat(\"Y\",image->filename);"
    },
    {
        "line": 485,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 495,
        "fullcodeline": "length=GetQuantumExtent(canvas_image,quantum_info,RedQuantum);"
    },
    {
        "line": 508,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 554,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 555,
        "fullcodeline": "AppendImageFormat(\"Cb\",image->filename);"
    },
    {
        "line": 556,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 563,
        "fullcodeline": "length=GetQuantumExtent(canvas_image,quantum_info,GreenQuantum);"
    },
    {
        "line": 576,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 622,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 623,
        "fullcodeline": "AppendImageFormat(\"Cr\",image->filename);"
    },
    {
        "line": 624,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 631,
        "fullcodeline": "length=GetQuantumExtent(canvas_image,quantum_info,BlueQuantum);"
    },
    {
        "line": 644,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 776,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 784,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 792,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 96,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 128,
        "fullcodeline": "if (scene == 0)"
    },
    {
        "line": 134,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 189,
        "fullcodeline": "{"
    },
    {
        "line": 199,
        "fullcodeline": "if (scene == 0)"
    },
    {
        "line": 205,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 285,
        "fullcodeline": "if (scene == 0)"
    },
    {
        "line": 291,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 329,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 335,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 373,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 379,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 417,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 423,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 471,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 486,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 492,
        "fullcodeline": "if (DiscardBlobBytes(image,image->offset) == MagickFalse)"
    },
    {
        "line": 496,
        "fullcodeline": "for (i=0; i < (ssize_t) scene; i++)"
    },
    {
        "line": 510,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 548,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 557,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 564,
        "fullcodeline": "for (i=0; i < (ssize_t) scene; i++)"
    },
    {
        "line": 578,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 616,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 625,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 632,
        "fullcodeline": "for (i=0; i < (ssize_t) scene; i++)"
    },
    {
        "line": 646,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 684,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 690,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 762,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 786,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 791,
        "fullcodeline": "GetBlobSize(image));"
    },
    {
        "line": 98,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 130,
        "fullcodeline": "length=GetQuantumExtent(canvas_image,quantum_info,quantum_type);"
    },
    {
        "line": 131,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 142,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 146,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 180,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 201,
        "fullcodeline": "length=GetQuantumExtent(canvas_image,quantum_info,RedQuantum);"
    },
    {
        "line": 202,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 287,
        "fullcodeline": "length=GetQuantumExtent(canvas_image,quantum_info,RedQuantum);"
    },
    {
        "line": 288,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 299,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 303,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 326,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 331,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,1,5);"
    },
    {
        "line": 343,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 347,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 370,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 375,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,2,5);"
    },
    {
        "line": 387,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 391,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 414,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 419,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,3,5);"
    },
    {
        "line": 473,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,5,5);"
    },
    {
        "line": 488,
        "fullcodeline": "canvas_image=DestroyImageList(canvas_image);"
    },
    {
        "line": 489,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 493,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 497,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 518,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 522,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 545,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 550,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,1,5);"
    },
    {
        "line": 559,
        "fullcodeline": "canvas_image=DestroyImageList(canvas_image);"
    },
    {
        "line": 560,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 565,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 586,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 590,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 613,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 618,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,2,5);"
    },
    {
        "line": 627,
        "fullcodeline": "canvas_image=DestroyImageList(canvas_image);"
    },
    {
        "line": 628,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 633,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 654,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 658,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 681,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 686,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,3,5);"
    },
    {
        "line": 692,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 693,
        "fullcodeline": "AppendImageFormat(\"A\",image->filename);"
    },
    {
        "line": 694,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 701,
        "fullcodeline": "length=GetQuantumExtent(canvas_image,quantum_info,AlphaQuantum);"
    },
    {
        "line": 714,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 764,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,5,5);"
    },
    {
        "line": 787,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 136,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 144,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 148,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 150,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 173,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 207,
        "fullcodeline": "for (i=0; i < (image->alpha_trait != UndefinedPixelTrait ? 4 : 3); i++)"
    },
    {
        "line": 270,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 293,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 301,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 305,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 307,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 332,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 337,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 345,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 349,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 351,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 376,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 381,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 389,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 393,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 395,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 420,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 425,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 464,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 474,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 490,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 499,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 509,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 512,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 520,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 524,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 526,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 551,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 561,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 567,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 577,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 580,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 588,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 592,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 594,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 619,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 629,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 635,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 645,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 648,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 656,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 660,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 662,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 687,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 695,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 702,
        "fullcodeline": "for (i=0; i < (ssize_t) scene; i++)"
    },
    {
        "line": 716,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 755,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 765,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 97,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 138,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 151,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 153,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,canvas_image->extract_info.x,0,"
    },
    {
        "line": 155,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 175,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 215,
        "fullcodeline": "quantum_type=quantum_types[i];"
    },
    {
        "line": 216,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 220,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 267,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 272,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 295,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 308,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 310,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,canvas_image->extract_info.x,0,"
    },
    {
        "line": 312,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 339,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 352,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 354,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,canvas_image->extract_info.x,0,"
    },
    {
        "line": 356,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 383,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 396,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 398,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,canvas_image->extract_info.x,0,"
    },
    {
        "line": 400,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 433,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 437,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 461,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 466,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,4,5);"
    },
    {
        "line": 501,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 514,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 527,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 529,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,canvas_image->extract_info.x,0,"
    },
    {
        "line": 531,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 569,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 582,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 595,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 597,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,canvas_image->extract_info.x,0,"
    },
    {
        "line": 599,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 637,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 650,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 663,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 665,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,canvas_image->extract_info.x,0,"
    },
    {
        "line": 667,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 697,
        "fullcodeline": "canvas_image=DestroyImageList(canvas_image);"
    },
    {
        "line": 698,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 703,
        "fullcodeline": "for (y=0; y < (ssize_t) image->extract_info.height; y++)"
    },
    {
        "line": 724,
        "fullcodeline": "q=GetAuthenticPixels(canvas_image,0,0,canvas_image->columns,1,"
    },
    {
        "line": 728,
        "fullcodeline": "length=ImportQuantumPixels(canvas_image,(CacheView *) NULL,"
    },
    {
        "line": 752,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 757,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,4,5);"
    },
    {
        "line": 132,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 157,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 160,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 170,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 177,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 181,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 203,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 209,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 218,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 222,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 224,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 274,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 289,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 314,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 317,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 323,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 327,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 358,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 361,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 367,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 371,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 402,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 405,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 411,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 415,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 427,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 435,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 439,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 441,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 467,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 503,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 533,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 536,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 542,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 546,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 571,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 601,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 604,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 610,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 614,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 639,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 669,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 672,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 678,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 682,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 699,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 705,
        "fullcodeline": "pixels=(const unsigned char *) ReadBlobStream(image,length,"
    },
    {
        "line": 715,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 718,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 726,
        "fullcodeline": "if (q == (Quantum *) NULL)"
    },
    {
        "line": 730,
        "fullcodeline": "if (SyncAuthenticPixels(canvas_image,exception) == MagickFalse)"
    },
    {
        "line": 732,
        "fullcodeline": "if (((y-image->extract_info.y) >= 0) &&"
    },
    {
        "line": 758,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 158,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 162,
        "fullcodeline": "SetPixelRed(image,GetPixelRed(canvas_image,p),q);"
    },
    {
        "line": 163,
        "fullcodeline": "SetPixelGreen(image,GetPixelGreen(canvas_image,p),q);"
    },
    {
        "line": 164,
        "fullcodeline": "SetPixelBlue(image,GetPixelBlue(canvas_image,p),q);"
    },
    {
        "line": 167,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 168,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 211,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 225,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 227,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,canvas_image->extract_info.x,"
    },
    {
        "line": 229,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 315,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 319,
        "fullcodeline": "SetPixelRed(image,GetPixelRed(canvas_image,p),q);"
    },
    {
        "line": 320,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 321,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 359,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 363,
        "fullcodeline": "SetPixelGreen(image,GetPixelGreen(canvas_image,p),q);"
    },
    {
        "line": 364,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 365,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 403,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 407,
        "fullcodeline": "SetPixelBlue(image,GetPixelBlue(canvas_image,p),q);"
    },
    {
        "line": 408,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 409,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 429,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 442,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 444,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,"
    },
    {
        "line": 447,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 500,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 534,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 538,
        "fullcodeline": "SetPixelRed(image,GetPixelRed(canvas_image,p),q);"
    },
    {
        "line": 539,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 540,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 568,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 602,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 606,
        "fullcodeline": "SetPixelGreen(image,GetPixelGreen(canvas_image,p),q);"
    },
    {
        "line": 607,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 608,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 636,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 670,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 674,
        "fullcodeline": "SetPixelBlue(image,GetPixelBlue(canvas_image,p),q);"
    },
    {
        "line": 675,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 676,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 707,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 720,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 733,
        "fullcodeline": "((y-image->extract_info.y) < (ssize_t) image->rows))"
    },
    {
        "line": 735,
        "fullcodeline": "p=GetVirtualPixels(canvas_image,"
    },
    {
        "line": 738,
        "fullcodeline": "q=GetAuthenticPixels(image,0,y-image->extract_info.y,"
    },
    {
        "line": 165,
        "fullcodeline": "if (image->alpha_trait != UndefinedPixelTrait)"
    },
    {
        "line": 231,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 234,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 264,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 268,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 449,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 452,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 458,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 462,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 709,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,"
    },
    {
        "line": 740,
        "fullcodeline": "if ((p == (const Quantum *) NULL) ||"
    },
    {
        "line": 743,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 749,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 753,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 166,
        "fullcodeline": "SetPixelAlpha(image,GetPixelAlpha(canvas_image,p),q);"
    },
    {
        "line": 232,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 261,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 262,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 450,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 454,
        "fullcodeline": "SetPixelAlpha(image,GetPixelAlpha(canvas_image,p),q);"
    },
    {
        "line": 455,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 456,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 706,
        "fullcodeline": "GetQuantumPixels(quantum_info),&count);"
    },
    {
        "line": 741,
        "fullcodeline": "(q == (Quantum *) NULL))"
    },
    {
        "line": 745,
        "fullcodeline": "SetPixelAlpha(image,GetPixelAlpha(canvas_image,p),q);"
    },
    {
        "line": 746,
        "fullcodeline": "p+=GetPixelChannels(canvas_image);"
    },
    {
        "line": 747,
        "fullcodeline": "q+=GetPixelChannels(image);"
    },
    {
        "line": 240,
        "fullcodeline": "SetPixelRed(image,GetPixelRed(canvas_image,p),q);"
    },
    {
        "line": 245,
        "fullcodeline": "SetPixelGreen(image,GetPixelGreen(canvas_image,p),q);"
    },
    {
        "line": 250,
        "fullcodeline": "SetPixelBlue(image,GetPixelBlue(canvas_image,p),q);"
    },
    {
        "line": 255,
        "fullcodeline": "SetPixelAlpha(image,GetPixelAlpha(canvas_image,p),q);"
    }
]