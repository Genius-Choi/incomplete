[
    {
        "line": 6,
        "fullcodeline": "struct vm_area_struct *vma = NULL;"
    },
    {
        "line": 73,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 85,
        "fullcodeline": "mpol_cond_put(pol);"
    },
    {
        "line": 9,
        "fullcodeline": "if (flags &"
    },
    {
        "line": 13,
        "fullcodeline": "if (flags & MPOL_F_MEMS_ALLOWED) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (flags & MPOL_F_ADDR) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (!pol)"
    },
    {
        "line": 45,
        "fullcodeline": "if (flags & MPOL_F_NODE) {"
    },
    {
        "line": 10,
        "fullcodeline": "~(unsigned long)(MPOL_F_NODE|MPOL_F_ADDR|MPOL_F_MEMS_ALLOWED))"
    },
    {
        "line": 16,
        "fullcodeline": "*policy = 0;\t/* just so it's initialized */"
    },
    {
        "line": 17,
        "fullcodeline": "task_lock(current);"
    },
    {
        "line": 18,
        "fullcodeline": "*nmask  = cpuset_current_mems_allowed;"
    },
    {
        "line": 19,
        "fullcodeline": "task_unlock(current);"
    },
    {
        "line": 29,
        "fullcodeline": "down_read(&mm->mmap_sem);"
    },
    {
        "line": 30,
        "fullcodeline": "vma = find_vma_intersection(mm, addr, addr+1);"
    },
    {
        "line": 43,
        "fullcodeline": "pol = &default_policy;\t/* indicates default behavior */"
    },
    {
        "line": 70,
        "fullcodeline": "vma = NULL;"
    },
    {
        "line": 87,
        "fullcodeline": "up_read(&current->mm->mmap_sem);"
    },
    {
        "line": 11,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 14,
        "fullcodeline": "if (flags & (MPOL_F_NODE|MPOL_F_ADDR))"
    },
    {
        "line": 31,
        "fullcodeline": "if (!vma) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (vma->vm_ops && vma->vm_ops->get_policy)"
    },
    {
        "line": 46,
        "fullcodeline": "if (flags & MPOL_F_ADDR) {"
    },
    {
        "line": 59,
        "fullcodeline": "*policy = pol == &default_policy ? MPOL_DEFAULT :"
    },
    {
        "line": 65,
        "fullcodeline": "*policy |= (pol->flags & MPOL_MODE_FLAGS);"
    },
    {
        "line": 75,
        "fullcodeline": "if (mpol_store_user_nodemask(pol)) {"
    },
    {
        "line": 32,
        "fullcodeline": "up_read(&mm->mmap_sem);"
    },
    {
        "line": 36,
        "fullcodeline": "pol = vma->vm_ops->get_policy(vma, addr);"
    },
    {
        "line": 47,
        "fullcodeline": "err = lookup_node(addr);"
    },
    {
        "line": 50,
        "fullcodeline": "*policy = err;"
    },
    {
        "line": 15,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 33,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 38,
        "fullcodeline": "pol = vma->vm_policy;"
    },
    {
        "line": 48,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 78,
        "fullcodeline": "task_lock(current);"
    },
    {
        "line": 79,
        "fullcodeline": "get_policy_nodemask(pol, nmask);"
    },
    {
        "line": 80,
        "fullcodeline": "task_unlock(current);"
    },
    {
        "line": 40,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 51,
        "fullcodeline": "} else if (pol == current->mempolicy &&"
    },
    {
        "line": 52,
        "fullcodeline": "pol->mode == MPOL_INTERLEAVE) {"
    },
    {
        "line": 53,
        "fullcodeline": "*policy = next_node_in(current->il_prev, pol->v.nodes);"
    },
    {
        "line": 55,
        "fullcodeline": "err = -EINVAL;"
    }
]