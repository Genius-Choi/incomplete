[
    {
        "line": 2,
        "fullcodeline": "auto nid = checksum_type_to_nid(kind);"
    },
    {
        "line": 11,
        "fullcodeline": "auto pe_checksum_offset = pe->peHeader.dos.e_lfanew + 24 + 64;"
    },
    {
        "line": 16,
        "fullcodeline": "std::size_t cert_table_offset = pe->peHeader.dos.e_lfanew + 24;"
    },
    {
        "line": 17,
        "fullcodeline": "std::uint32_t size_of_headers = 0;"
    },
    {
        "line": 45,
        "fullcodeline": "auto *header_buf = peparse::splitBuffer(pe->fileBuffer, 0, size_of_headers);"
    },
    {
        "line": 52,
        "fullcodeline": "std::vector<std::uint8_t> pe_bits;"
    },
    {
        "line": 53,
        "fullcodeline": "pe_bits.reserve(size_of_headers);"
    },
    {
        "line": 55,
        "fullcodeline": "pe_bits.insert(pe_bits.begin(), header_buf->buf, header_buf->buf + header_buf->bufLen);"
    },
    {
        "line": 56,
        "fullcodeline": "delete header_buf;"
    },
    {
        "line": 69,
        "fullcodeline": "pe_bits.erase(pe_bits.begin() + cert_table_offset, pe_bits.begin() + cert_table_offset + 8);"
    },
    {
        "line": 70,
        "fullcodeline": "pe_bits.erase(pe_bits.begin() + pe_checksum_offset, pe_bits.begin() + pe_checksum_offset + 4);"
    },
    {
        "line": 74,
        "fullcodeline": "const auto *md = EVP_get_digestbynid(nid);"
    },
    {
        "line": 75,
        "fullcodeline": "auto *md_ctx = EVP_MD_CTX_new();"
    },
    {
        "line": 76,
        "fullcodeline": "EVP_DigestInit(md_ctx, md);"
    },
    {
        "line": 77,
        "fullcodeline": "EVP_DigestUpdate(md_ctx, pe_bits.data(), pe_bits.size());"
    },
    {
        "line": 101,
        "fullcodeline": "std::array<std::uint8_t, EVP_MAX_MD_SIZE> md_buf;"
    },
    {
        "line": 102,
        "fullcodeline": "EVP_DigestFinal(md_ctx, md_buf.data(), nullptr);"
    },
    {
        "line": 103,
        "fullcodeline": "EVP_MD_CTX_free(md_ctx);"
    },
    {
        "line": 3,
        "fullcodeline": "if (nid == NID_undef) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (security_dir.VirtualAddress + security_dir.Size > pe->fileBuffer->bufLen ||"
    },
    {
        "line": 46,
        "fullcodeline": "if (header_buf == nullptr) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (pe_bits.size() <= cert_table_offset + 8) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (security_dir.VirtualAddress > 0) {"
    },
    {
        "line": 105,
        "fullcodeline": "return tohex(md_buf.data(), EVP_MD_size(md));"
    },
    {
        "line": 22,
        "fullcodeline": "cert_table_offset += 128;"
    },
    {
        "line": 38,
        "fullcodeline": "cert_table_offset + 8 > size_of_headers) {"
    },
    {
        "line": 82,
        "fullcodeline": "EVP_DigestUpdate(md_ctx,"
    },
    {
        "line": 89,
        "fullcodeline": "EVP_DigestUpdate(md_ctx,"
    },
    {
        "line": 83,
        "fullcodeline": "pe->fileBuffer->buf + size_of_headers,"
    },
    {
        "line": 84,
        "fullcodeline": "security_dir.VirtualAddress - size_of_headers);"
    },
    {
        "line": 90,
        "fullcodeline": "pe->fileBuffer->buf + security_dir.VirtualAddress + security_dir.Size,"
    },
    {
        "line": 91,
        "fullcodeline": "pe->fileBuffer->bufLen - (security_dir.VirtualAddress + security_dir.Size));"
    },
    {
        "line": 95,
        "fullcodeline": "EVP_DigestUpdate("
    },
    {
        "line": 23,
        "fullcodeline": "} else if (pe->peHeader.nt.OptionalMagic == peparse::NT_OPTIONAL_64_MAGIC) {"
    },
    {
        "line": 96,
        "fullcodeline": "md_ctx, pe->fileBuffer->buf + size_of_headers, pe->fileBuffer->bufLen - size_of_headers);"
    },
    {
        "line": 26,
        "fullcodeline": "cert_table_offset += 144;"
    }
]