[
    {
        "line": 2,
        "fullcodeline": "auto nid = checksum_type_to_nid(kind);"
    },
    {
        "line": 11,
        "fullcodeline": "std::vector<std::uint8_t> pe_bits;"
    },
    {
        "line": 12,
        "fullcodeline": "pe_bits.reserve(pe->fileBuffer->bufLen);"
    },
    {
        "line": 18,
        "fullcodeline": "auto pe_checksum_offset = pe->peHeader.dos.e_lfanew + 24 + 64;"
    },
    {
        "line": 23,
        "fullcodeline": "std::size_t cert_table_offset = pe->peHeader.dos.e_lfanew + 24;"
    },
    {
        "line": 24,
        "fullcodeline": "std::uint32_t size_of_headers = 0;"
    },
    {
        "line": 60,
        "fullcodeline": "auto *header_buf = peparse::splitBuffer(pe->fileBuffer, 0, size_of_headers);"
    },
    {
        "line": 65,
        "fullcodeline": "pe_bits.insert(pe_bits.begin(), header_buf->buf, header_buf->buf + header_buf->bufLen);"
    },
    {
        "line": 66,
        "fullcodeline": "delete header_buf;"
    },
    {
        "line": 79,
        "fullcodeline": "pe_bits.erase(pe_bits.begin() + cert_table_offset, pe_bits.begin() + cert_table_offset + 8);"
    },
    {
        "line": 80,
        "fullcodeline": "pe_bits.erase(pe_bits.begin() + pe_checksum_offset, pe_bits.begin() + pe_checksum_offset + 4);"
    },
    {
        "line": 88,
        "fullcodeline": "uint32_t total_bytes_hashed = size_of_headers;"
    },
    {
        "line": 89,
        "fullcodeline": "iter_sec_ctx ctx = {sections, total_bytes_hashed};"
    },
    {
        "line": 97,
        "fullcodeline": "peparse::IterSec("
    },
    {
        "line": 121,
        "fullcodeline": "auto file_size = pe->fileBuffer->bufLen;"
    },
    {
        "line": 122,
        "fullcodeline": "auto extra_data_size = file_size - (security_dir.Size + total_bytes_hashed);"
    },
    {
        "line": 123,
        "fullcodeline": "auto *trailer_buf = peparse::splitBuffer("
    },
    {
        "line": 128,
        "fullcodeline": "pe_bits.insert(pe_bits.end(), trailer_buf->buf, trailer_buf->buf + trailer_buf->bufLen);"
    },
    {
        "line": 129,
        "fullcodeline": "delete trailer_buf;"
    },
    {
        "line": 138,
        "fullcodeline": "std::array<std::uint8_t, EVP_MAX_MD_SIZE> md_buf;"
    },
    {
        "line": 139,
        "fullcodeline": "const auto *md = EVP_get_digestbynid(nid);"
    },
    {
        "line": 140,
        "fullcodeline": "auto *md_ctx = EVP_MD_CTX_new();"
    },
    {
        "line": 142,
        "fullcodeline": "EVP_DigestInit(md_ctx, md);"
    },
    {
        "line": 143,
        "fullcodeline": "EVP_DigestUpdate(md_ctx, pe_bits.data(), pe_bits.size());"
    },
    {
        "line": 144,
        "fullcodeline": "EVP_DigestFinal(md_ctx, md_buf.data(), nullptr);"
    },
    {
        "line": 145,
        "fullcodeline": "EVP_MD_CTX_free(md_ctx);"
    },
    {
        "line": 3,
        "fullcodeline": "if (nid == NID_undef) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (security_dir.VirtualAddress == 0) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (security_dir.VirtualAddress + security_dir.Size > pe->fileBuffer->bufLen ||"
    },
    {
        "line": 61,
        "fullcodeline": "if (header_buf == nullptr) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (pe_bits.size() <= cert_table_offset + 8) {"
    },
    {
        "line": 125,
        "fullcodeline": "if (trailer_buf == nullptr) {"
    },
    {
        "line": 147,
        "fullcodeline": "return tohex(md_buf.data(), EVP_MD_size(md));"
    },
    {
        "line": 29,
        "fullcodeline": "cert_table_offset += 128;"
    },
    {
        "line": 53,
        "fullcodeline": "cert_table_offset + 8 > size_of_headers) {"
    },
    {
        "line": 114,
        "fullcodeline": "pe_bits.insert(pe_bits.end(), section->buf, section->buf + section->bufLen);"
    },
    {
        "line": 124,
        "fullcodeline": "pe->fileBuffer, total_bytes_hashed, total_bytes_hashed + extra_data_size);"
    },
    {
        "line": 30,
        "fullcodeline": "} else if (pe->peHeader.nt.OptionalMagic == peparse::NT_OPTIONAL_64_MAGIC) {"
    },
    {
        "line": 33,
        "fullcodeline": "cert_table_offset += 144;"
    }
]