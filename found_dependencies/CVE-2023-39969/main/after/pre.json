[
    {
        "line": 2,
        "fullcodeline": "argh::parser cmdl(argv);"
    },
    {
        "line": 17,
        "fullcodeline": "auto *pe = peparse::ParsePEFromFile(cmdl[1].c_str());"
    },
    {
        "line": 25,
        "fullcodeline": "const auto &certs = uthenticode::read_certs(pe);"
    },
    {
        "line": 34,
        "fullcodeline": "std::cout << \"Calculated checksums:\\n\";"
    },
    {
        "line": 45,
        "fullcodeline": "std::cout << '\\n';"
    },
    {
        "line": 18,
        "fullcodeline": "if (pe == nullptr) {"
    },
    {
        "line": 23,
        "fullcodeline": "std::cout << \"This PE is \" << (uthenticode::verify(pe) ? \"\" : \"NOT \") << \"verified!\\n\\n\";"
    },
    {
        "line": 27,
        "fullcodeline": "if (certs.empty()) {"
    },
    {
        "line": 32,
        "fullcodeline": "std::cout << cmdl[1] << \" has \" << certs.size() << \" certificate entries\\n\\n\";"
    },
    {
        "line": 35,
        "fullcodeline": "std::array<checksum_kind, 3> kinds = {"
    },
    {
        "line": 5,
        "fullcodeline": "std::cout << \"svcli (uthenticode) version \" << UTHENTICODE_VERSION << '\\n';"
    },
    {
        "line": 38,
        "fullcodeline": "auto cksum = uthenticode::calculate_checksum(pe, kind);"
    },
    {
        "line": 48,
        "fullcodeline": "const auto signed_data = cert.as_signed_data();"
    },
    {
        "line": 58,
        "fullcodeline": "std::cout << \"\\tSigners:\\n\";"
    },
    {
        "line": 66,
        "fullcodeline": "std::cout << \"\\tCertificates:\\n\";"
    },
    {
        "line": 77,
        "fullcodeline": "const auto nested_signed_data = signed_data->get_nested_signed_data();"
    },
    {
        "line": 86,
        "fullcodeline": "std::cout << \"\\tSigners:\\n\";"
    },
    {
        "line": 94,
        "fullcodeline": "std::cout << \"\\tCertificates:\\n\";"
    },
    {
        "line": 19,
        "fullcodeline": "std::cerr << \"pe-parse failure: \" << cmdl[1] << \": \" << peparse::GetPEErrString() << '\\n';"
    },
    {
        "line": 39,
        "fullcodeline": "if (cksum.has_value()) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (!signed_data) {"
    },
    {
        "line": 54,
        "fullcodeline": "std::cout << \"SignedData entry:\\n\""
    },
    {
        "line": 55,
        "fullcodeline": "<< \"\\tEmbedded checksum: \" << std::get<std::string>(signed_data->get_checksum())"
    },
    {
        "line": 74,
        "fullcodeline": "std::cout << \"\\tThis SignedData is \" << (signed_data->verify_signature() ? \"valid\" : \"invalid\")"
    },
    {
        "line": 78,
        "fullcodeline": "if (!nested_signed_data) {"
    },
    {
        "line": 82,
        "fullcodeline": "std::cout << \"\\nNested SignedData entry:\\n\""
    },
    {
        "line": 84,
        "fullcodeline": "<< std::get<std::string>(nested_signed_data->get_checksum()) << \"\\n\\n\";"
    },
    {
        "line": 102,
        "fullcodeline": "std::cout << \"\\tThis SignedData is \""
    },
    {
        "line": 7,
        "fullcodeline": "} else if (cmdl[{\"-h\", \"--help\"}] || argc != 2) {"
    },
    {
        "line": 40,
        "fullcodeline": "std::cout << std::setw(6) << kind << \": \" << cksum.value() << '\\n';"
    },
    {
        "line": 60,
        "fullcodeline": "std::cout << \"\\t\\tSubject: \" << signer.get_subject() << '\\n'"
    },
    {
        "line": 68,
        "fullcodeline": "std::cout << \"\\t\\tSubject: \" << cert.get_subject() << '\\n'"
    },
    {
        "line": 88,
        "fullcodeline": "std::cout << \"\\t\\tSubject: \" << signer.get_subject() << '\\n'"
    },
    {
        "line": 96,
        "fullcodeline": "std::cout << \"\\t\\tSubject: \" << cert.get_subject() << '\\n'"
    },
    {
        "line": 8,
        "fullcodeline": "std::cout << \"Usage: svcli [options] <file>\\n\\n\""
    },
    {
        "line": 42,
        "fullcodeline": "std::cout << std::setw(6) << kind << \": NONE (not signed)\\n\";"
    },
    {
        "line": 62,
        "fullcodeline": "<< \"\\t\\tSerial: \" << signer.get_serial_number() << '\\n'"
    },
    {
        "line": 70,
        "fullcodeline": "<< \"\\t\\tSerial: \" << cert.get_serial_number() << '\\n'"
    },
    {
        "line": 90,
        "fullcodeline": "<< \"\\t\\tSerial: \" << signer.get_serial_number() << '\\n'"
    },
    {
        "line": 98,
        "fullcodeline": "<< \"\\t\\tSerial: \" << cert.get_serial_number() << '\\n'"
    },
    {
        "line": 61,
        "fullcodeline": "<< \"\\t\\tIssuer: \" << signer.get_issuer() << '\\n'"
    },
    {
        "line": 69,
        "fullcodeline": "<< \"\\t\\tIssuer: \" << cert.get_issuer() << '\\n'"
    },
    {
        "line": 89,
        "fullcodeline": "<< \"\\t\\tIssuer: \" << signer.get_issuer() << '\\n'"
    },
    {
        "line": 97,
        "fullcodeline": "<< \"\\t\\tIssuer: \" << cert.get_issuer() << '\\n'"
    }
]