[
    {
        "line": 4,
        "fullcodeline": "if (ssn == NULL)"
    },
    {
        "line": 7,
        "fullcodeline": "if (p->tcph->th_flags & TH_RST) {"
    },
    {
        "line": 11,
        "fullcodeline": "StreamTcpPacketSetState(p, ssn, TCP_CLOSED);"
    },
    {
        "line": 12,
        "fullcodeline": "SCLogDebug(\"ssn %p: Reset received state changed to TCP_CLOSED\","
    },
    {
        "line": 5,
        "fullcodeline": "return -1;"
    },
    {
        "line": 8,
        "fullcodeline": "if (!StreamTcpValidateRst(ssn, p))"
    },
    {
        "line": 15,
        "fullcodeline": "if (PKT_IS_TOSERVER(p)) {"
    },
    {
        "line": 20,
        "fullcodeline": "StreamTcpUpdateLastAck(ssn, &ssn->client,"
    },
    {
        "line": 27,
        "fullcodeline": "StreamTcpReassembleHandleSegment(tv, stt->ra_ctx, ssn,"
    },
    {
        "line": 45,
        "fullcodeline": "} else if (p->tcph->th_flags & TH_FIN) {"
    },
    {
        "line": 9,
        "fullcodeline": "return -1;"
    },
    {
        "line": 16,
        "fullcodeline": "if ((p->tcph->th_flags & TH_ACK) && StreamTcpValidateAck(ssn, &ssn->server, p) == 0)"
    },
    {
        "line": 21,
        "fullcodeline": "StreamTcpResetGetMaxAck(&ssn->client, TCP_GET_SEQ(p)));"
    },
    {
        "line": 23,
        "fullcodeline": "if (ssn->flags & STREAMTCP_FLAG_TIMESTAMP) {"
    },
    {
        "line": 34,
        "fullcodeline": "StreamTcpUpdateLastAck(ssn, &ssn->server,"
    },
    {
        "line": 41,
        "fullcodeline": "StreamTcpReassembleHandleSegment(tv, stt->ra_ctx, ssn,"
    },
    {
        "line": 17,
        "fullcodeline": "StreamTcpUpdateLastAck(ssn, &ssn->server,"
    },
    {
        "line": 24,
        "fullcodeline": "StreamTcpHandleTimestamp(ssn, p);"
    },
    {
        "line": 30,
        "fullcodeline": "if ((p->tcph->th_flags & TH_ACK) && StreamTcpValidateAck(ssn, &ssn->client, p) == 0)"
    },
    {
        "line": 35,
        "fullcodeline": "StreamTcpResetGetMaxAck(&ssn->server, TCP_GET_SEQ(p)));"
    },
    {
        "line": 37,
        "fullcodeline": "if (ssn->flags & STREAMTCP_FLAG_TIMESTAMP) {"
    },
    {
        "line": 18,
        "fullcodeline": "StreamTcpResetGetMaxAck(&ssn->server, TCP_GET_ACK(p)));"
    },
    {
        "line": 31,
        "fullcodeline": "StreamTcpUpdateLastAck(ssn, &ssn->client,"
    },
    {
        "line": 38,
        "fullcodeline": "StreamTcpHandleTimestamp(ssn, p);"
    },
    {
        "line": 48,
        "fullcodeline": "} else if (p->tcph->th_flags & TH_SYN) {"
    },
    {
        "line": 32,
        "fullcodeline": "StreamTcpResetGetMaxAck(&ssn->client, TCP_GET_ACK(p)));"
    },
    {
        "line": 49,
        "fullcodeline": "SCLogDebug(\"ssn (%p): SYN pkt on TimeWait\", ssn);"
    },
    {
        "line": 50,
        "fullcodeline": "StreamTcpSetEvent(p, STREAM_SHUTDOWN_SYN_RESEND);"
    },
    {
        "line": 51,
        "fullcodeline": "return -1;"
    },
    {
        "line": 53,
        "fullcodeline": "} else if (p->tcph->th_flags & TH_ACK) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (ssn->flags & STREAMTCP_FLAG_TIMESTAMP) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (PKT_IS_TOSERVER(p)) {"
    },
    {
        "line": 158,
        "fullcodeline": "SCLogDebug(\"ssn %p: default case\", ssn);"
    },
    {
        "line": 63,
        "fullcodeline": "int retransmission = 0;"
    },
    {
        "line": 89,
        "fullcodeline": "StreamTcpUpdateLastAck(ssn, &ssn->server, TCP_GET_ACK(p));"
    },
    {
        "line": 100,
        "fullcodeline": "StreamTcpReassembleHandleSegment(tv, stt->ra_ctx, ssn,"
    },
    {
        "line": 55,
        "fullcodeline": "if (!StreamTcpValidateTimestamp(ssn, p))"
    },
    {
        "line": 64,
        "fullcodeline": "if (StreamTcpPacketIsRetransmission(&ssn->client, p)) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (StreamTcpValidateAck(ssn, &ssn->server, p) == -1) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (!retransmission) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (ssn->flags & STREAMTCP_FLAG_TIMESTAMP) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (SEQ_LT(ssn->server.next_seq, TCP_GET_ACK(p)))"
    },
    {
        "line": 109,
        "fullcodeline": "int retransmission = 0;"
    },
    {
        "line": 139,
        "fullcodeline": "StreamTcpUpdateLastAck(ssn, &ssn->client, TCP_GET_ACK(p));"
    },
    {
        "line": 150,
        "fullcodeline": "StreamTcpReassembleHandleSegment(tv, stt->ra_ctx, ssn,"
    },
    {
        "line": 65,
        "fullcodeline": "SCLogDebug(\"ssn %p: packet is retransmission\", ssn);"
    },
    {
        "line": 66,
        "fullcodeline": "retransmission = 1;"
    },
    {
        "line": 77,
        "fullcodeline": "SCLogDebug(\"ssn %p: rejecting because of invalid ack value\", ssn);"
    },
    {
        "line": 78,
        "fullcodeline": "StreamTcpSetEvent(p, STREAM_TIMEWAIT_INVALID_ACK);"
    },
    {
        "line": 79,
        "fullcodeline": "SCReturnInt(-1);"
    },
    {
        "line": 83,
        "fullcodeline": "StreamTcpPacketSetState(p, ssn, TCP_CLOSED);"
    },
    {
        "line": 84,
        "fullcodeline": "SCLogDebug(\"ssn %p: state changed to TCP_CLOSED\", ssn);"
    },
    {
        "line": 86,
        "fullcodeline": "ssn->server.window = TCP_GET_WINDOW(p) << ssn->server.wscale;"
    },
    {
        "line": 92,
        "fullcodeline": "StreamTcpHandleTimestamp(ssn, p);"
    },
    {
        "line": 98,
        "fullcodeline": "ssn->server.next_seq = TCP_GET_ACK(p);"
    },
    {
        "line": 110,
        "fullcodeline": "if (StreamTcpPacketIsRetransmission(&ssn->server, p)) {"
    },
    {
        "line": 126,
        "fullcodeline": "if (StreamTcpValidateAck(ssn, &ssn->client, p) == -1) {"
    },
    {
        "line": 132,
        "fullcodeline": "if (!retransmission) {"
    },
    {
        "line": 141,
        "fullcodeline": "if (ssn->flags & STREAMTCP_FLAG_TIMESTAMP) {"
    },
    {
        "line": 147,
        "fullcodeline": "if (SEQ_LT(ssn->client.next_seq, TCP_GET_ACK(p)))"
    },
    {
        "line": 56,
        "fullcodeline": "return -1;"
    },
    {
        "line": 111,
        "fullcodeline": "SCLogDebug(\"ssn %p: packet is retransmission\", ssn);"
    },
    {
        "line": 112,
        "fullcodeline": "retransmission = 1;"
    },
    {
        "line": 127,
        "fullcodeline": "SCLogDebug(\"ssn %p: rejecting because of invalid ack value\", ssn);"
    },
    {
        "line": 128,
        "fullcodeline": "StreamTcpSetEvent(p, STREAM_TIMEWAIT_INVALID_ACK);"
    },
    {
        "line": 129,
        "fullcodeline": "SCReturnInt(-1);"
    },
    {
        "line": 133,
        "fullcodeline": "StreamTcpPacketSetState(p, ssn, TCP_CLOSED);"
    },
    {
        "line": 134,
        "fullcodeline": "SCLogDebug(\"ssn %p: state changed to TCP_CLOSED\", ssn);"
    },
    {
        "line": 136,
        "fullcodeline": "ssn->client.window = TCP_GET_WINDOW(p) << ssn->client.wscale;"
    },
    {
        "line": 142,
        "fullcodeline": "StreamTcpHandleTimestamp(ssn, p);"
    },
    {
        "line": 148,
        "fullcodeline": "ssn->client.next_seq = TCP_GET_ACK(p);"
    },
    {
        "line": 68,
        "fullcodeline": "} else if (TCP_GET_SEQ(p) != ssn->client.next_seq && TCP_GET_SEQ(p) != ssn->client.next_seq+1) {"
    },
    {
        "line": 72,
        "fullcodeline": "StreamTcpSetEvent(p, STREAM_TIMEWAIT_ACK_WRONG_SEQ);"
    },
    {
        "line": 113,
        "fullcodeline": "} else if (TCP_GET_SEQ(p) != ssn->server.next_seq && TCP_GET_SEQ(p) != ssn->server.next_seq+1) {"
    },
    {
        "line": 73,
        "fullcodeline": "return -1;"
    },
    {
        "line": 114,
        "fullcodeline": "if (p->payload_len > 0 && TCP_GET_SEQ(p) == ssn->server.last_ack) {"
    },
    {
        "line": 115,
        "fullcodeline": "SCLogDebug(\"ssn %p: -> retransmission\", ssn);"
    },
    {
        "line": 116,
        "fullcodeline": "SCReturnInt(0);"
    },
    {
        "line": 121,
        "fullcodeline": "StreamTcpSetEvent(p, STREAM_TIMEWAIT_ACK_WRONG_SEQ);"
    },
    {
        "line": 122,
        "fullcodeline": "return -1;"
    }
]