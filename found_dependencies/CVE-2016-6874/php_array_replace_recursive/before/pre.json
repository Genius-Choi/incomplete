[
    {
        "line": 11,
        "fullcodeline": "for (ArrayIter iter(arr2); iter; ++iter) {"
    },
    {
        "line": 8,
        "fullcodeline": "seen.insert((void*)arr1.get());"
    },
    {
        "line": 12,
        "fullcodeline": "Variant key = iter.first();"
    },
    {
        "line": 13,
        "fullcodeline": "const Variant& value = iter.secondRef();"
    },
    {
        "line": 4,
        "fullcodeline": "if (seen.find((void*)arr1.get()) != seen.end()) {"
    },
    {
        "line": 5,
        "fullcodeline": "raise_warning(\"array_replace_recursive(): recursion detected\");"
    },
    {
        "line": 14,
        "fullcodeline": "if (arr1.exists(key, true) && value.isArray()) {"
    },
    {
        "line": 15,
        "fullcodeline": "Variant &v = arr1.lvalAt(key, AccessFlags::Key);"
    },
    {
        "line": 31,
        "fullcodeline": "seen.erase((void*)arr1.get());"
    },
    {
        "line": 16,
        "fullcodeline": "if (v.isArray()) {"
    },
    {
        "line": 26,
        "fullcodeline": "arr1.setWithRef(key, value, true);"
    },
    {
        "line": 17,
        "fullcodeline": "Array subarr1 = v.toArray();"
    },
    {
        "line": 18,
        "fullcodeline": "const ArrNR& arr_value = value.toArrNR();"
    },
    {
        "line": 19,
        "fullcodeline": "php_array_replace_recursive(seen, v.isReferenced(), subarr1,"
    },
    {
        "line": 23,
        "fullcodeline": "arr1.set(key, value, true);"
    }
]