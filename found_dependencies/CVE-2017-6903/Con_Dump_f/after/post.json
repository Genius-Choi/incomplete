[
    {
        "line": 8,
        "fullcodeline": "char\tfilename[MAX_QPATH];"
    },
    {
        "line": 16,
        "fullcodeline": "Q_strncpyz( filename, Cmd_Argv( 1 ), sizeof( filename ) );"
    },
    {
        "line": 17,
        "fullcodeline": "COM_DefaultExtension( filename, sizeof( filename ), \".txt\" );"
    },
    {
        "line": 25,
        "fullcodeline": "f = FS_FOpenFileWrite( filename );"
    },
    {
        "line": 32,
        "fullcodeline": "Com_Printf (\"Dumped console text to %s.\\n\", filename );"
    },
    {
        "line": 48,
        "fullcodeline": "bufferlen = con.linewidth + 2 * sizeof ( char );"
    },
    {
        "line": 51,
        "fullcodeline": "buffer = Hunk_AllocateTempMemory( bufferlen );"
    },
    {
        "line": 54,
        "fullcodeline": "buffer[bufferlen-1] = 0;"
    },
    {
        "line": 75,
        "fullcodeline": "Hunk_FreeTempMemory( buffer );"
    },
    {
        "line": 76,
        "fullcodeline": "FS_FCloseFile( f );"
    },
    {
        "line": 10,
        "fullcodeline": "if (Cmd_Argc() != 2)"
    },
    {
        "line": 19,
        "fullcodeline": "if (!COM_CompareExtension(filename, \".txt\"))"
    },
    {
        "line": 26,
        "fullcodeline": "if (!f)"
    },
    {
        "line": 35,
        "fullcodeline": "for (l = con.current - con.totallines + 1 ; l <= con.current ; l++)"
    },
    {
        "line": 55,
        "fullcodeline": "for ( ; l <= con.current ; l++)"
    },
    {
        "line": 12,
        "fullcodeline": "Com_Printf (\"usage: condump <filename>\\n\");"
    },
    {
        "line": 21,
        "fullcodeline": "Com_Printf(\"Con_Dump_f: Only the \\\".txt\\\" extension is supported by this command!\\n\");"
    },
    {
        "line": 28,
        "fullcodeline": "Com_Printf (\"ERROR: couldn't open %s.\\n\", filename);"
    },
    {
        "line": 37,
        "fullcodeline": "line = con.text + (l%con.totallines)*con.linewidth;"
    },
    {
        "line": 57,
        "fullcodeline": "line = con.text + (l%con.totallines)*con.linewidth;"
    },
    {
        "line": 70,
        "fullcodeline": "Q_strcat(buffer, bufferlen, \"\\n\");"
    },
    {
        "line": 72,
        "fullcodeline": "FS_Write(buffer, strlen(buffer), f);"
    },
    {
        "line": 38,
        "fullcodeline": "for (x=0 ; x<con.linewidth ; x++)"
    },
    {
        "line": 41,
        "fullcodeline": "if (x != con.linewidth)"
    },
    {
        "line": 58,
        "fullcodeline": "for(i=0; i<con.linewidth; i++)"
    },
    {
        "line": 59,
        "fullcodeline": "buffer[i] = line[i] & 0xff;"
    },
    {
        "line": 60,
        "fullcodeline": "for (x=con.linewidth-1 ; x>=0 ; x--)"
    },
    {
        "line": 39,
        "fullcodeline": "if ((line[x] & 0xff) != ' ')"
    },
    {
        "line": 62,
        "fullcodeline": "if (buffer[x] == ' ')"
    },
    {
        "line": 63,
        "fullcodeline": "buffer[x] = 0;"
    }
]