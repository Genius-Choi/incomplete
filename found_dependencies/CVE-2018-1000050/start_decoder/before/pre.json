[
    {
        "line": 3,
        "fullcodeline": "uint8 header[6], x,y;"
    },
    {
        "line": 4,
        "fullcodeline": "int len,i,j,k, max_submaps = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "int longest_floorlist=0;"
    },
    {
        "line": 24,
        "fullcodeline": "f->channels = get8(f); if (!f->channels)         return error(f, VORBIS_invalid_first_page);"
    },
    {
        "line": 26,
        "fullcodeline": "f->sample_rate = get32(f); if (!f->sample_rate)  return error(f, VORBIS_invalid_first_page);"
    },
    {
        "line": 27,
        "fullcodeline": "get32(f); // bitrate_maximum"
    },
    {
        "line": 28,
        "fullcodeline": "get32(f); // bitrate_nominal"
    },
    {
        "line": 29,
        "fullcodeline": "get32(f); // bitrate_minimum"
    },
    {
        "line": 30,
        "fullcodeline": "x = get8(f);"
    },
    {
        "line": 43,
        "fullcodeline": "x = get8(f);"
    },
    {
        "line": 78,
        "fullcodeline": "f->codebook_count = get_bits(f,8) + 1;"
    },
    {
        "line": 79,
        "fullcodeline": "f->codebooks = (Codebook *) setup_malloc(f, sizeof(*f->codebooks) * f->codebook_count);"
    },
    {
        "line": 81,
        "fullcodeline": "memset(f->codebooks, 0, sizeof(*f->codebooks) * f->codebook_count);"
    },
    {
        "line": 290,
        "fullcodeline": "x = get_bits(f, 6) + 1;"
    },
    {
        "line": 297,
        "fullcodeline": "f->floor_count = get_bits(f, 6)+1;"
    },
    {
        "line": 298,
        "fullcodeline": "f->floor_config = (Floor *)  setup_malloc(f, f->floor_count * sizeof(*f->floor_config));"
    },
    {
        "line": 370,
        "fullcodeline": "f->residue_count = get_bits(f, 6)+1;"
    },
    {
        "line": 371,
        "fullcodeline": "f->residue_config = (Residue *) setup_malloc(f, f->residue_count * sizeof(f->residue_config[0]));"
    },
    {
        "line": 373,
        "fullcodeline": "memset(f->residue_config, 0, f->residue_count * sizeof(f->residue_config[0]));"
    },
    {
        "line": 422,
        "fullcodeline": "f->mapping_count = get_bits(f,6)+1;"
    },
    {
        "line": 423,
        "fullcodeline": "f->mapping = (Mapping *) setup_malloc(f, f->mapping_count * sizeof(*f->mapping));"
    },
    {
        "line": 425,
        "fullcodeline": "memset(f->mapping, 0, f->mapping_count * sizeof(*f->mapping));"
    },
    {
        "line": 472,
        "fullcodeline": "f->mode_count = get_bits(f, 6)+1;"
    },
    {
        "line": 484,
        "fullcodeline": "flush_packet(f);"
    },
    {
        "line": 486,
        "fullcodeline": "f->previous_length = 0;"
    },
    {
        "line": 536,
        "fullcodeline": "f->first_decode = TRUE;"
    },
    {
        "line": 9,
        "fullcodeline": "if (!start_page(f))                              return FALSE;"
    },
    {
        "line": 12,
        "fullcodeline": "if (f->page_flag & PAGEFLAG_last_page)           return error(f, VORBIS_invalid_first_page);"
    },
    {
        "line": 13,
        "fullcodeline": "if (f->page_flag & PAGEFLAG_continued_packet)    return error(f, VORBIS_invalid_first_page);"
    },
    {
        "line": 15,
        "fullcodeline": "if (f->segment_count != 1)                       return error(f, VORBIS_invalid_first_page);"
    },
    {
        "line": 19,
        "fullcodeline": "if (get8(f) != VORBIS_packet_id)                 return error(f, VORBIS_invalid_first_page);"
    },
    {
        "line": 25,
        "fullcodeline": "if (f->channels > STB_VORBIS_MAX_CHANNELS)       return error(f, VORBIS_too_many_channels);"
    },
    {
        "line": 33,
        "fullcodeline": "log0 = x & 15;"
    },
    {
        "line": 34,
        "fullcodeline": "log1 = x >> 4;"
    },
    {
        "line": 35,
        "fullcodeline": "f->blocksize_0 = 1 << log0;"
    },
    {
        "line": 36,
        "fullcodeline": "f->blocksize_1 = 1 << log1;"
    },
    {
        "line": 60,
        "fullcodeline": "if (IS_PUSH_MODE(f)) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (get8_packet(f) != VORBIS_packet_setup)       return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 73,
        "fullcodeline": "for (i=0; i < 6; ++i) header[i] = get8_packet(f);"
    },
    {
        "line": 80,
        "fullcodeline": "if (f->codebooks == NULL)                        return error(f, VORBIS_outofmem);"
    },
    {
        "line": 82,
        "fullcodeline": "for (i=0; i < f->codebook_count; ++i) {"
    },
    {
        "line": 291,
        "fullcodeline": "for (i=0; i < x; ++i) {"
    },
    {
        "line": 299,
        "fullcodeline": "if (f->floor_config == NULL) return error(f, VORBIS_outofmem);"
    },
    {
        "line": 300,
        "fullcodeline": "for (i=0; i < f->floor_count; ++i) {"
    },
    {
        "line": 372,
        "fullcodeline": "if (f->residue_config == NULL) return error(f, VORBIS_outofmem);"
    },
    {
        "line": 374,
        "fullcodeline": "for (i=0; i < f->residue_count; ++i) {"
    },
    {
        "line": 424,
        "fullcodeline": "if (f->mapping == NULL) return error(f, VORBIS_outofmem);"
    },
    {
        "line": 426,
        "fullcodeline": "for (i=0; i < f->mapping_count; ++i) {"
    },
    {
        "line": 473,
        "fullcodeline": "for (i=0; i < f->mode_count; ++i) {"
    },
    {
        "line": 488,
        "fullcodeline": "for (i=0; i < f->channels; ++i) {"
    },
    {
        "line": 515,
        "fullcodeline": "uint32 imdct_mem = (f->blocksize_1 * sizeof(float) >> 1);"
    },
    {
        "line": 517,
        "fullcodeline": "int i,max_part_read=0;"
    },
    {
        "line": 526,
        "fullcodeline": "classify_mem = f->channels * (sizeof(void*) + max_part_read * sizeof(uint8 *));"
    },
    {
        "line": 531,
        "fullcodeline": "f->temp_memory_required = classify_mem;"
    },
    {
        "line": 545,
        "fullcodeline": "f->first_audio_page_offset = stb_vorbis_get_file_offset(f);"
    },
    {
        "line": 11,
        "fullcodeline": "if (!(f->page_flag & PAGEFLAG_first_page))       return error(f, VORBIS_invalid_first_page);"
    },
    {
        "line": 20,
        "fullcodeline": "if (!getn(f, header, 6))                         return error(f, VORBIS_unexpected_eof);"
    },
    {
        "line": 21,
        "fullcodeline": "if (!vorbis_validate(header))                    return error(f, VORBIS_invalid_first_page);"
    },
    {
        "line": 23,
        "fullcodeline": "if (get32(f) != 0)                               return error(f, VORBIS_invalid_first_page);"
    },
    {
        "line": 44,
        "fullcodeline": "if (!(x & 1))                                    return error(f, VORBIS_invalid_first_page);"
    },
    {
        "line": 47,
        "fullcodeline": "if (!start_page(f))                              return FALSE;"
    },
    {
        "line": 49,
        "fullcodeline": "if (!start_packet(f))                            return FALSE;"
    },
    {
        "line": 51,
        "fullcodeline": "len = next_segment(f);"
    },
    {
        "line": 52,
        "fullcodeline": "skip(f, len);"
    },
    {
        "line": 53,
        "fullcodeline": "f->bytes_in_seg = 0;"
    },
    {
        "line": 57,
        "fullcodeline": "if (!start_packet(f))                            return FALSE;"
    },
    {
        "line": 74,
        "fullcodeline": "if (!vorbis_validate(header))                    return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 85,
        "fullcodeline": "int total=0;"
    },
    {
        "line": 87,
        "fullcodeline": "Codebook *c = f->codebooks+i;"
    },
    {
        "line": 88,
        "fullcodeline": "CHECK(f);"
    },
    {
        "line": 89,
        "fullcodeline": "x = get_bits(f, 8); if (x != 0x42)            return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 90,
        "fullcodeline": "x = get_bits(f, 8); if (x != 0x43)            return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 91,
        "fullcodeline": "x = get_bits(f, 8); if (x != 0x56)            return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 92,
        "fullcodeline": "x = get_bits(f, 8);"
    },
    {
        "line": 93,
        "fullcodeline": "c->dimensions = (get_bits(f, 8)<<8) + x;"
    },
    {
        "line": 94,
        "fullcodeline": "x = get_bits(f, 8);"
    },
    {
        "line": 95,
        "fullcodeline": "y = get_bits(f, 8);"
    },
    {
        "line": 96,
        "fullcodeline": "c->entries = (get_bits(f, 8)<<16) + (y<<8) + x;"
    },
    {
        "line": 98,
        "fullcodeline": "c->sparse = ordered ? 0 : get_bits(f,1);"
    },
    {
        "line": 159,
        "fullcodeline": "c->sorted_entries = sorted_count;"
    },
    {
        "line": 160,
        "fullcodeline": "values = NULL;"
    },
    {
        "line": 162,
        "fullcodeline": "CHECK(f);"
    },
    {
        "line": 206,
        "fullcodeline": "compute_accelerated_huffman(c);"
    },
    {
        "line": 208,
        "fullcodeline": "CHECK(f);"
    },
    {
        "line": 209,
        "fullcodeline": "c->lookup_type = get_bits(f, 4);"
    },
    {
        "line": 285,
        "fullcodeline": "CHECK(f);"
    },
    {
        "line": 292,
        "fullcodeline": "uint32 z = get_bits(f, 16);"
    },
    {
        "line": 301,
        "fullcodeline": "f->floor_types[i] = get_bits(f, 16);"
    },
    {
        "line": 375,
        "fullcodeline": "uint8 residue_cascade[64];"
    },
    {
        "line": 376,
        "fullcodeline": "Residue *r = f->residue_config+i;"
    },
    {
        "line": 377,
        "fullcodeline": "f->residue_types[i] = get_bits(f, 16);"
    },
    {
        "line": 379,
        "fullcodeline": "r->begin = get_bits(f, 24);"
    },
    {
        "line": 380,
        "fullcodeline": "r->end = get_bits(f, 24);"
    },
    {
        "line": 382,
        "fullcodeline": "r->part_size = get_bits(f,24)+1;"
    },
    {
        "line": 383,
        "fullcodeline": "r->classifications = get_bits(f,6)+1;"
    },
    {
        "line": 384,
        "fullcodeline": "r->classbook = get_bits(f,8);"
    },
    {
        "line": 393,
        "fullcodeline": "r->residue_books = (short (*)[8]) setup_malloc(f, sizeof(r->residue_books[0]) * r->classifications);"
    },
    {
        "line": 407,
        "fullcodeline": "r->classdata = (uint8 **) setup_malloc(f, sizeof(*r->classdata) * f->codebooks[r->classbook].entries);"
    },
    {
        "line": 427,
        "fullcodeline": "Mapping *m = f->mapping + i;"
    },
    {
        "line": 428,
        "fullcodeline": "int mapping_type = get_bits(f,16);"
    },
    {
        "line": 430,
        "fullcodeline": "m->chan = (MappingChannel *) setup_malloc(f, f->channels * sizeof(*m->chan));"
    },
    {
        "line": 474,
        "fullcodeline": "Mode *m = f->mode_config+i;"
    },
    {
        "line": 476,
        "fullcodeline": "m->windowtype = get_bits(f,16);"
    },
    {
        "line": 477,
        "fullcodeline": "m->transformtype = get_bits(f,16);"
    },
    {
        "line": 478,
        "fullcodeline": "m->mapping = get_bits(f,8);"
    },
    {
        "line": 489,
        "fullcodeline": "f->channel_buffers[i] = (float *) setup_malloc(f, sizeof(float) * f->blocksize_1);"
    },
    {
        "line": 490,
        "fullcodeline": "f->previous_window[i] = (float *) setup_malloc(f, sizeof(float) * f->blocksize_1/2);"
    },
    {
        "line": 491,
        "fullcodeline": "f->finalY[i]          = (int16 *) setup_malloc(f, sizeof(int16) * longest_floorlist);"
    },
    {
        "line": 499,
        "fullcodeline": "if (!init_blocksize(f, 0, f->blocksize_0)) return FALSE;"
    },
    {
        "line": 500,
        "fullcodeline": "if (!init_blocksize(f, 1, f->blocksize_1)) return FALSE;"
    },
    {
        "line": 518,
        "fullcodeline": "for (i=0; i < f->residue_count; ++i) {"
    },
    {
        "line": 532,
        "fullcodeline": "if (imdct_mem > f->temp_memory_required)"
    },
    {
        "line": 16,
        "fullcodeline": "if (f->segments[0] != 30)                        return error(f, VORBIS_invalid_first_page);"
    },
    {
        "line": 37,
        "fullcodeline": "if (log0 < 6 || log0 > 13)                       return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 38,
        "fullcodeline": "if (log1 < 6 || log1 > 13)                       return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 97,
        "fullcodeline": "ordered = get_bits(f,1);"
    },
    {
        "line": 107,
        "fullcodeline": "if (!lengths) return error(f, VORBIS_outofmem);"
    },
    {
        "line": 134,
        "fullcodeline": "if (c->sparse && total >= c->entries >> 2) {"
    },
    {
        "line": 163,
        "fullcodeline": "if (!c->sparse) {"
    },
    {
        "line": 210,
        "fullcodeline": "if (c->lookup_type > 2) return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 211,
        "fullcodeline": "if (c->lookup_type > 0) {"
    },
    {
        "line": 302,
        "fullcodeline": "if (f->floor_types[i] > 1) return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 381,
        "fullcodeline": "if (r->end < r->begin) return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 385,
        "fullcodeline": "if (r->classbook >= f->codebook_count) return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 386,
        "fullcodeline": "for (j=0; j < r->classifications; ++j) {"
    },
    {
        "line": 394,
        "fullcodeline": "if (r->residue_books == NULL) return error(f, VORBIS_outofmem);"
    },
    {
        "line": 395,
        "fullcodeline": "for (j=0; j < r->classifications; ++j) {"
    },
    {
        "line": 408,
        "fullcodeline": "if (!r->classdata) return error(f, VORBIS_outofmem);"
    },
    {
        "line": 409,
        "fullcodeline": "memset(r->classdata, 0, sizeof(*r->classdata) * f->codebooks[r->classbook].entries);"
    },
    {
        "line": 410,
        "fullcodeline": "for (j=0; j < f->codebooks[r->classbook].entries; ++j) {"
    },
    {
        "line": 431,
        "fullcodeline": "if (m->chan == NULL) return error(f, VORBIS_outofmem);"
    },
    {
        "line": 432,
        "fullcodeline": "if (get_bits(f,1))"
    },
    {
        "line": 436,
        "fullcodeline": "if (m->submaps > max_submaps)"
    },
    {
        "line": 438,
        "fullcodeline": "if (get_bits(f,1)) {"
    },
    {
        "line": 451,
        "fullcodeline": "if (get_bits(f,2)) return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 452,
        "fullcodeline": "if (m->submaps > 1) {"
    },
    {
        "line": 462,
        "fullcodeline": "for (j=0; j < m->submaps; ++j) {"
    },
    {
        "line": 475,
        "fullcodeline": "m->blockflag = get_bits(f,1);"
    },
    {
        "line": 481,
        "fullcodeline": "if (m->mapping >= f->mapping_count)     return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 519,
        "fullcodeline": "Residue *r = f->residue_config + i;"
    },
    {
        "line": 520,
        "fullcodeline": "int n_read = r->end - r->begin;"
    },
    {
        "line": 521,
        "fullcodeline": "int part_read = n_read / r->part_size;"
    },
    {
        "line": 533,
        "fullcodeline": "f->temp_memory_required = imdct_mem;"
    },
    {
        "line": 539,
        "fullcodeline": "assert(f->temp_offset == f->alloc.alloc_buffer_length_in_bytes);"
    },
    {
        "line": 39,
        "fullcodeline": "if (log0 > log1)                                 return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 61,
        "fullcodeline": "if (!is_whole_packet_present(f, TRUE)) {"
    },
    {
        "line": 100,
        "fullcodeline": "if (c->dimensions == 0 && c->entries != 0)    return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 103,
        "fullcodeline": "lengths = (uint8 *) setup_temp_malloc(f, c->entries);"
    },
    {
        "line": 110,
        "fullcodeline": "int current_entry = 0;"
    },
    {
        "line": 111,
        "fullcodeline": "int current_length = get_bits(f,5) + 1;"
    },
    {
        "line": 139,
        "fullcodeline": "c->codeword_lengths = (uint8 *) setup_malloc(f, c->entries);"
    },
    {
        "line": 141,
        "fullcodeline": "memcpy(c->codeword_lengths, lengths, c->entries);"
    },
    {
        "line": 142,
        "fullcodeline": "setup_temp_free(f, lengths, c->entries); // note this is only safe if there have been no intervening temp mallocs!"
    },
    {
        "line": 143,
        "fullcodeline": "lengths = c->codeword_lengths;"
    },
    {
        "line": 144,
        "fullcodeline": "c->sparse = 0;"
    },
    {
        "line": 149,
        "fullcodeline": "sorted_count = total;"
    },
    {
        "line": 164,
        "fullcodeline": "c->codewords = (uint32 *) setup_malloc(f, sizeof(c->codewords[0]) * c->entries);"
    },
    {
        "line": 181,
        "fullcodeline": "if (!compute_codewords(c, lengths, c->entries, values)) {"
    },
    {
        "line": 188,
        "fullcodeline": "c->sorted_codewords = (uint32 *) setup_malloc(f, sizeof(*c->sorted_codewords) * (c->sorted_entries+1));"
    },
    {
        "line": 192,
        "fullcodeline": "c->sorted_values    = ( int   *) setup_malloc(f, sizeof(*c->sorted_values   ) * (c->sorted_entries+1));"
    },
    {
        "line": 194,
        "fullcodeline": "++c->sorted_values;"
    },
    {
        "line": 195,
        "fullcodeline": "c->sorted_values[-1] = -1;"
    },
    {
        "line": 196,
        "fullcodeline": "compute_sorted_huffman(c, lengths, values);"
    },
    {
        "line": 200,
        "fullcodeline": "setup_temp_free(f, values, sizeof(*values)*c->sorted_entries);"
    },
    {
        "line": 201,
        "fullcodeline": "setup_temp_free(f, c->codewords, sizeof(*c->codewords)*c->sorted_entries);"
    },
    {
        "line": 202,
        "fullcodeline": "setup_temp_free(f, lengths, c->entries);"
    },
    {
        "line": 203,
        "fullcodeline": "c->codewords = NULL;"
    },
    {
        "line": 213,
        "fullcodeline": "c->minimum_value = float32_unpack(get_bits(f, 32));"
    },
    {
        "line": 214,
        "fullcodeline": "c->delta_value = float32_unpack(get_bits(f, 32));"
    },
    {
        "line": 215,
        "fullcodeline": "c->value_bits = get_bits(f, 4)+1;"
    },
    {
        "line": 216,
        "fullcodeline": "c->sequence_p = get_bits(f,1);"
    },
    {
        "line": 223,
        "fullcodeline": "mults = (uint16 *) setup_temp_malloc(f, sizeof(mults[0]) * c->lookup_values);"
    },
    {
        "line": 281,
        "fullcodeline": "setup_temp_free(f, mults, sizeof(mults[0])*c->lookup_values);"
    },
    {
        "line": 283,
        "fullcodeline": "CHECK(f);"
    },
    {
        "line": 304,
        "fullcodeline": "Floor0 *g = &f->floor_config[i].floor0;"
    },
    {
        "line": 310,
        "fullcodeline": "g->number_of_books = get_bits(f,4) + 1;"
    },
    {
        "line": 387,
        "fullcodeline": "uint8 high_bits=0;"
    },
    {
        "line": 388,
        "fullcodeline": "uint8 low_bits=get_bits(f,3);"
    },
    {
        "line": 391,
        "fullcodeline": "residue_cascade[j] = high_bits*8 + low_bits;"
    },
    {
        "line": 411,
        "fullcodeline": "int classwords = f->codebooks[r->classbook].dimensions;"
    },
    {
        "line": 412,
        "fullcodeline": "int temp = j;"
    },
    {
        "line": 413,
        "fullcodeline": "r->classdata[j] = (uint8 *) setup_malloc(f, sizeof(r->classdata[j][0]) * classwords);"
    },
    {
        "line": 433,
        "fullcodeline": "m->submaps = get_bits(f,4)+1;"
    },
    {
        "line": 437,
        "fullcodeline": "max_submaps = m->submaps;"
    },
    {
        "line": 439,
        "fullcodeline": "m->coupling_steps = get_bits(f,8)+1;"
    },
    {
        "line": 463,
        "fullcodeline": "get_bits(f,8); // discard"
    },
    {
        "line": 464,
        "fullcodeline": "m->submap_floor[j] = get_bits(f,8);"
    },
    {
        "line": 465,
        "fullcodeline": "m->submap_residue[j] = get_bits(f,8);"
    },
    {
        "line": 492,
        "fullcodeline": "if (f->channel_buffers[i] == NULL || f->previous_window[i] == NULL || f->finalY[i] == NULL) return error(f, VORBIS_outofmem);"
    },
    {
        "line": 522,
        "fullcodeline": "if (part_read > max_part_read)"
    },
    {
        "line": 63,
        "fullcodeline": "if (f->error == VORBIS_invalid_stream)"
    },
    {
        "line": 105,
        "fullcodeline": "lengths = c->codeword_lengths = (uint8 *) setup_malloc(f, c->entries);"
    },
    {
        "line": 112,
        "fullcodeline": "while (current_entry < c->entries) {"
    },
    {
        "line": 136,
        "fullcodeline": "if (c->entries > (int) f->setup_temp_memory_required)"
    },
    {
        "line": 140,
        "fullcodeline": "if (c->codeword_lengths == NULL) return error(f, VORBIS_outofmem);"
    },
    {
        "line": 151,
        "fullcodeline": "sorted_count = 0;"
    },
    {
        "line": 165,
        "fullcodeline": "if (!c->codewords)                  return error(f, VORBIS_outofmem);"
    },
    {
        "line": 176,
        "fullcodeline": "size = c->entries + (sizeof(*c->codewords) + sizeof(*values)) * c->sorted_entries;"
    },
    {
        "line": 183,
        "fullcodeline": "return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 189,
        "fullcodeline": "if (c->sorted_codewords == NULL) return error(f, VORBIS_outofmem);"
    },
    {
        "line": 193,
        "fullcodeline": "if (c->sorted_values == NULL) return error(f, VORBIS_outofmem);"
    },
    {
        "line": 217,
        "fullcodeline": "if (c->lookup_type == 1) {"
    },
    {
        "line": 222,
        "fullcodeline": "if (c->lookup_values == 0) return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 224,
        "fullcodeline": "if (mults == NULL) return error(f, VORBIS_outofmem);"
    },
    {
        "line": 225,
        "fullcodeline": "for (j=0; j < (int) c->lookup_values; ++j) {"
    },
    {
        "line": 232,
        "fullcodeline": "if (c->lookup_type == 1) {"
    },
    {
        "line": 293,
        "fullcodeline": "if (z != 0) return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 305,
        "fullcodeline": "g->order = get_bits(f,8);"
    },
    {
        "line": 306,
        "fullcodeline": "g->rate = get_bits(f,16);"
    },
    {
        "line": 307,
        "fullcodeline": "g->bark_map_size = get_bits(f,16);"
    },
    {
        "line": 308,
        "fullcodeline": "g->amplitude_bits = get_bits(f,6);"
    },
    {
        "line": 309,
        "fullcodeline": "g->amplitude_offset = get_bits(f,8);"
    },
    {
        "line": 311,
        "fullcodeline": "for (j=0; j < g->number_of_books; ++j)"
    },
    {
        "line": 313,
        "fullcodeline": "return error(f, VORBIS_feature_not_supported);"
    },
    {
        "line": 315,
        "fullcodeline": "stbv__floor_ordering p[31*8+2];"
    },
    {
        "line": 316,
        "fullcodeline": "Floor1 *g = &f->floor_config[i].floor1;"
    },
    {
        "line": 317,
        "fullcodeline": "int max_class = -1;"
    },
    {
        "line": 318,
        "fullcodeline": "g->partitions = get_bits(f, 5);"
    },
    {
        "line": 337,
        "fullcodeline": "g->rangebits = get_bits(f,4);"
    },
    {
        "line": 338,
        "fullcodeline": "g->Xlist[0] = 0;"
    },
    {
        "line": 339,
        "fullcodeline": "g->Xlist[1] = 1 << g->rangebits;"
    },
    {
        "line": 340,
        "fullcodeline": "g->values = 2;"
    },
    {
        "line": 353,
        "fullcodeline": "qsort(p, g->values, sizeof(p[0]), point_compare);"
    },
    {
        "line": 378,
        "fullcodeline": "if (f->residue_types[i] > 2) return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 389,
        "fullcodeline": "if (get_bits(f,1))"
    },
    {
        "line": 396,
        "fullcodeline": "for (k=0; k < 8; ++k) {"
    },
    {
        "line": 414,
        "fullcodeline": "if (r->classdata[j] == NULL) return error(f, VORBIS_outofmem);"
    },
    {
        "line": 415,
        "fullcodeline": "for (k=classwords-1; k >= 0; --k) {"
    },
    {
        "line": 429,
        "fullcodeline": "if (mapping_type != 0) return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 435,
        "fullcodeline": "m->submaps = 1;"
    },
    {
        "line": 440,
        "fullcodeline": "for (k=0; k < m->coupling_steps; ++k) {"
    },
    {
        "line": 453,
        "fullcodeline": "for (j=0; j < f->channels; ++j) {"
    },
    {
        "line": 466,
        "fullcodeline": "if (m->submap_floor[j] >= f->floor_count)      return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 467,
        "fullcodeline": "if (m->submap_residue[j] >= f->residue_count)  return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 479,
        "fullcodeline": "if (m->windowtype != 0)                 return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 480,
        "fullcodeline": "if (m->transformtype != 0)              return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 523,
        "fullcodeline": "max_part_read = part_read;"
    },
    {
        "line": 542,
        "fullcodeline": "return error(f, VORBIS_outofmem);"
    },
    {
        "line": 113,
        "fullcodeline": "int limit = c->entries - current_entry;"
    },
    {
        "line": 114,
        "fullcodeline": "int n = get_bits(f, ilog(limit));"
    },
    {
        "line": 116,
        "fullcodeline": "memset(lengths + current_entry, current_length, n);"
    },
    {
        "line": 117,
        "fullcodeline": "current_entry += n;"
    },
    {
        "line": 118,
        "fullcodeline": "++current_length;"
    },
    {
        "line": 121,
        "fullcodeline": "for (j=0; j < c->entries; ++j) {"
    },
    {
        "line": 137,
        "fullcodeline": "f->setup_temp_memory_required = c->entries;"
    },
    {
        "line": 153,
        "fullcodeline": "for (j=0; j < c->entries; ++j)"
    },
    {
        "line": 177,
        "fullcodeline": "if (size > f->setup_temp_memory_required)"
    },
    {
        "line": 182,
        "fullcodeline": "if (c->sparse) setup_temp_free(f, values, 0);"
    },
    {
        "line": 218,
        "fullcodeline": "c->lookup_values = lookup1_values(c->entries, c->dimensions);"
    },
    {
        "line": 226,
        "fullcodeline": "int q = get_bits(f, c->value_bits);"
    },
    {
        "line": 228,
        "fullcodeline": "mults[j] = q;"
    },
    {
        "line": 234,
        "fullcodeline": "float last=0;"
    },
    {
        "line": 242,
        "fullcodeline": "len = sparse ? c->sorted_entries : c->entries;"
    },
    {
        "line": 262,
        "fullcodeline": "c->lookup_type = 2;"
    },
    {
        "line": 312,
        "fullcodeline": "g->book_list[j] = get_bits(f,8);"
    },
    {
        "line": 319,
        "fullcodeline": "for (j=0; j < g->partitions; ++j) {"
    },
    {
        "line": 324,
        "fullcodeline": "for (j=0; j <= max_class; ++j) {"
    },
    {
        "line": 341,
        "fullcodeline": "for (j=0; j < g->partitions; ++j) {"
    },
    {
        "line": 349,
        "fullcodeline": "for (j=0; j < g->values; ++j) {"
    },
    {
        "line": 354,
        "fullcodeline": "for (j=0; j < g->values; ++j)"
    },
    {
        "line": 357,
        "fullcodeline": "for (j=2; j < g->values; ++j) {"
    },
    {
        "line": 364,
        "fullcodeline": "if (g->values > longest_floorlist)"
    },
    {
        "line": 390,
        "fullcodeline": "high_bits = get_bits(f,5);"
    },
    {
        "line": 416,
        "fullcodeline": "r->classdata[j][k] = temp % r->classifications;"
    },
    {
        "line": 417,
        "fullcodeline": "temp /= r->classifications;"
    },
    {
        "line": 441,
        "fullcodeline": "m->chan[k].magnitude = get_bits(f, ilog(f->channels-1));"
    },
    {
        "line": 442,
        "fullcodeline": "m->chan[k].angle = get_bits(f, ilog(f->channels-1));"
    },
    {
        "line": 454,
        "fullcodeline": "m->chan[j].mux = get_bits(f, 4);"
    },
    {
        "line": 459,
        "fullcodeline": "for (j=0; j < f->channels; ++j)"
    },
    {
        "line": 169,
        "fullcodeline": "c->codeword_lengths = (uint8 *) setup_malloc(f, c->sorted_entries);"
    },
    {
        "line": 171,
        "fullcodeline": "c->codewords = (uint32 *) setup_temp_malloc(f, sizeof(*c->codewords) * c->sorted_entries);"
    },
    {
        "line": 173,
        "fullcodeline": "values = (uint32 *) setup_temp_malloc(f, sizeof(*values) * c->sorted_entries);"
    },
    {
        "line": 178,
        "fullcodeline": "f->setup_temp_memory_required = size;"
    },
    {
        "line": 220,
        "fullcodeline": "c->lookup_values = c->entries * c->dimensions;"
    },
    {
        "line": 227,
        "fullcodeline": "if (q == EOP) { setup_temp_free(f,mults,sizeof(mults[0])*c->lookup_values); return error(f, VORBIS_invalid_setup); }"
    },
    {
        "line": 241,
        "fullcodeline": "if (c->multiplicands == NULL) { setup_temp_free(f,mults,sizeof(mults[0])*c->lookup_values); return error(f, VORBIS_outofmem); }"
    },
    {
        "line": 243,
        "fullcodeline": "for (j=0; j < len; ++j) {"
    },
    {
        "line": 267,
        "fullcodeline": "float last=0;"
    },
    {
        "line": 268,
        "fullcodeline": "CHECK(f);"
    },
    {
        "line": 269,
        "fullcodeline": "c->multiplicands = (codetype *) setup_malloc(f, sizeof(c->multiplicands[0]) * c->lookup_values);"
    },
    {
        "line": 320,
        "fullcodeline": "g->partition_class_list[j] = get_bits(f, 4);"
    },
    {
        "line": 326,
        "fullcodeline": "g->class_subclasses[j] = get_bits(f, 2);"
    },
    {
        "line": 336,
        "fullcodeline": "g->floor1_multiplier = get_bits(f,2)+1;"
    },
    {
        "line": 359,
        "fullcodeline": "neighbors(g->Xlist, j, &low,&hi);"
    },
    {
        "line": 365,
        "fullcodeline": "longest_floorlist = g->values;"
    },
    {
        "line": 443,
        "fullcodeline": "if (m->chan[k].magnitude >= f->channels)        return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 444,
        "fullcodeline": "if (m->chan[k].angle     >= f->channels)        return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 455,
        "fullcodeline": "if (m->chan[j].mux >= m->submaps)                return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 154,
        "fullcodeline": "if (lengths[j] > STB_VORBIS_FAST_HUFFMAN_LENGTH && lengths[j] != NO_CODE)"
    },
    {
        "line": 155,
        "fullcodeline": "++sorted_count;"
    },
    {
        "line": 170,
        "fullcodeline": "if (!c->codeword_lengths)           return error(f, VORBIS_outofmem);"
    },
    {
        "line": 172,
        "fullcodeline": "if (!c->codewords)                  return error(f, VORBIS_outofmem);"
    },
    {
        "line": 174,
        "fullcodeline": "if (!values)                        return error(f, VORBIS_outofmem);"
    },
    {
        "line": 238,
        "fullcodeline": "c->multiplicands = (codetype *) setup_malloc(f, sizeof(c->multiplicands[0]) * c->sorted_entries * c->dimensions);"
    },
    {
        "line": 244,
        "fullcodeline": "unsigned int z = sparse ? c->sorted_values[j] : j;"
    },
    {
        "line": 245,
        "fullcodeline": "unsigned int div=1;"
    },
    {
        "line": 270,
        "fullcodeline": "if (c->multiplicands == NULL) { setup_temp_free(f, mults,sizeof(mults[0])*c->lookup_values); return error(f, VORBIS_outofmem); }"
    },
    {
        "line": 271,
        "fullcodeline": "for (j=0; j < (int) c->lookup_values; ++j) {"
    },
    {
        "line": 321,
        "fullcodeline": "if (g->partition_class_list[j] > max_class)"
    },
    {
        "line": 331,
        "fullcodeline": "for (k=0; k < 1 << g->class_subclasses[j]; ++k) {"
    },
    {
        "line": 343,
        "fullcodeline": "for (k=0; k < g->class_dimensions[c]; ++k) {"
    },
    {
        "line": 397,
        "fullcodeline": "if (residue_cascade[j] & (1 << k)) {"
    },
    {
        "line": 398,
        "fullcodeline": "r->residue_books[j][k] = get_bits(f, 8);"
    },
    {
        "line": 115,
        "fullcodeline": "if (current_entry + n > (int) c->entries) { return error(f, VORBIS_invalid_setup); }"
    },
    {
        "line": 122,
        "fullcodeline": "int present = c->sparse ? get_bits(f,1) : 1;"
    },
    {
        "line": 124,
        "fullcodeline": "lengths[j] = get_bits(f, 5) + 1;"
    },
    {
        "line": 125,
        "fullcodeline": "++total;"
    },
    {
        "line": 237,
        "fullcodeline": "if (c->sorted_entries == 0) goto skip;"
    },
    {
        "line": 240,
        "fullcodeline": "c->multiplicands = (codetype *) setup_malloc(f, sizeof(c->multiplicands[0]) * c->entries        * c->dimensions);"
    },
    {
        "line": 246,
        "fullcodeline": "for (k=0; k < c->dimensions; ++k) {"
    },
    {
        "line": 272,
        "fullcodeline": "float val = mults[j] * c->delta_value + c->minimum_value + last;"
    },
    {
        "line": 273,
        "fullcodeline": "c->multiplicands[j] = val;"
    },
    {
        "line": 322,
        "fullcodeline": "max_class = g->partition_class_list[j];"
    },
    {
        "line": 325,
        "fullcodeline": "g->class_dimensions[j] = get_bits(f, 3)+1;"
    },
    {
        "line": 328,
        "fullcodeline": "g->class_masterbooks[j] = get_bits(f, 8);"
    },
    {
        "line": 332,
        "fullcodeline": "g->subclass_books[j][k] = get_bits(f,8)-1;"
    },
    {
        "line": 344,
        "fullcodeline": "g->Xlist[g->values] = get_bits(f, g->rangebits);"
    },
    {
        "line": 345,
        "fullcodeline": "++g->values;"
    },
    {
        "line": 399,
        "fullcodeline": "if (r->residue_books[j][k] >= f->codebook_count) return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 445,
        "fullcodeline": "if (m->chan[k].magnitude == m->chan[k].angle)   return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 126,
        "fullcodeline": "if (lengths[j] == 32)"
    },
    {
        "line": 129,
        "fullcodeline": "lengths[j] = NO_CODE;"
    },
    {
        "line": 249,
        "fullcodeline": "val = mults[off]*c->delta_value + c->minimum_value + last;"
    },
    {
        "line": 250,
        "fullcodeline": "c->multiplicands[j*c->dimensions + k] = val;"
    },
    {
        "line": 329,
        "fullcodeline": "if (g->class_masterbooks[j] >= f->codebook_count) return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 333,
        "fullcodeline": "if (g->subclass_books[j][k] >= f->codebook_count) return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 401,
        "fullcodeline": "r->residue_books[j][k] = -1;"
    },
    {
        "line": 247,
        "fullcodeline": "int off = (z / div) % c->lookup_values;"
    },
    {
        "line": 253,
        "fullcodeline": "if (k+1 < c->dimensions) {"
    },
    {
        "line": 275,
        "fullcodeline": "last = val;"
    },
    {
        "line": 127,
        "fullcodeline": "return error(f, VORBIS_invalid_setup);"
    },
    {
        "line": 252,
        "fullcodeline": "last = val;"
    },
    {
        "line": 258,
        "fullcodeline": "div *= c->lookup_values;"
    },
    {
        "line": 254,
        "fullcodeline": "if (div > UINT_MAX / (unsigned int) c->lookup_values) {"
    },
    {
        "line": 255,
        "fullcodeline": "setup_temp_free(f, mults,sizeof(mults[0])*c->lookup_values);"
    },
    {
        "line": 256,
        "fullcodeline": "return error(f, VORBIS_invalid_setup);"
    }
]