[
    {
        "line": 4,
        "fullcodeline": "Residue *r = f->residue_config + rn;"
    },
    {
        "line": 6,
        "fullcodeline": "int c = r->classbook;"
    },
    {
        "line": 8,
        "fullcodeline": "unsigned int actual_size = rtype == 2 ? n*2 : n;"
    },
    {
        "line": 9,
        "fullcodeline": "unsigned int limit_r_begin = (r->begin < actual_size ? r->begin : actual_size);"
    },
    {
        "line": 10,
        "fullcodeline": "unsigned int limit_r_end   = (r->end   < actual_size ? r->end   : actual_size);"
    },
    {
        "line": 11,
        "fullcodeline": "int n_read = limit_r_end - limit_r_begin;"
    },
    {
        "line": 12,
        "fullcodeline": "int part_read = n_read / r->part_size;"
    },
    {
        "line": 13,
        "fullcodeline": "int temp_alloc_point = temp_alloc_save(f);"
    },
    {
        "line": 15,
        "fullcodeline": "uint8 ***part_classdata = (uint8 ***) temp_block_array(f,f->channels, part_read * sizeof(**part_classdata));"
    },
    {
        "line": 20,
        "fullcodeline": "CHECK(f);"
    },
    {
        "line": 165,
        "fullcodeline": "CHECK(f);"
    },
    {
        "line": 214,
        "fullcodeline": "CHECK(f);"
    },
    {
        "line": 216,
        "fullcodeline": "temp_free(f,part_classdata);"
    },
    {
        "line": 220,
        "fullcodeline": "temp_alloc_restore(f,temp_alloc_point);"
    },
    {
        "line": 22,
        "fullcodeline": "for (i=0; i < ch; ++i)"
    },
    {
        "line": 26,
        "fullcodeline": "if (rtype == 2 && ch != 1) {"
    },
    {
        "line": 167,
        "fullcodeline": "for (pass=0; pass < 8; ++pass) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (!do_not_decode[i])"
    },
    {
        "line": 168,
        "fullcodeline": "int pcount = 0, class_set=0;"
    },
    {
        "line": 24,
        "fullcodeline": "memset(residue_buffers[i], 0, sizeof(float) * n);"
    },
    {
        "line": 27,
        "fullcodeline": "for (j=0; j < ch; ++j)"
    },
    {
        "line": 30,
        "fullcodeline": "if (j == ch)"
    },
    {
        "line": 33,
        "fullcodeline": "for (pass=0; pass < 8; ++pass) {"
    },
    {
        "line": 169,
        "fullcodeline": "while (pcount < part_read) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (!do_not_decode[j])"
    },
    {
        "line": 34,
        "fullcodeline": "int pcount = 0, class_set = 0;"
    },
    {
        "line": 209,
        "fullcodeline": "++class_set;"
    },
    {
        "line": 35,
        "fullcodeline": "if (ch == 2) {"
    },
    {
        "line": 170,
        "fullcodeline": "if (pass == 0) {"
    },
    {
        "line": 188,
        "fullcodeline": "for (i=0; i < classwords && pcount < part_read; ++i, ++pcount) {"
    },
    {
        "line": 36,
        "fullcodeline": "while (pcount < part_read) {"
    },
    {
        "line": 171,
        "fullcodeline": "for (j=0; j < ch; ++j) {"
    },
    {
        "line": 189,
        "fullcodeline": "for (j=0; j < ch; ++j) {"
    },
    {
        "line": 37,
        "fullcodeline": "int z = r->begin + pcount*r->part_size;"
    },
    {
        "line": 38,
        "fullcodeline": "int c_inter = (z & 1), p_inter = z>>1;"
    },
    {
        "line": 78,
        "fullcodeline": "++class_set;"
    },
    {
        "line": 81,
        "fullcodeline": "} else if (ch == 1) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (pass == 0) {"
    },
    {
        "line": 53,
        "fullcodeline": "for (i=0; i < classwords && pcount < part_read; ++i, ++pcount) {"
    },
    {
        "line": 172,
        "fullcodeline": "if (!do_not_decode[j]) {"
    },
    {
        "line": 190,
        "fullcodeline": "if (!do_not_decode[j]) {"
    },
    {
        "line": 40,
        "fullcodeline": "Codebook *c = f->codebooks+r->classbook;"
    },
    {
        "line": 42,
        "fullcodeline": "DECODE(q,f,c);"
    },
    {
        "line": 54,
        "fullcodeline": "int z = r->begin + pcount*r->part_size;"
    },
    {
        "line": 82,
        "fullcodeline": "while (pcount < part_read) {"
    },
    {
        "line": 173,
        "fullcodeline": "Codebook *c = f->codebooks+r->classbook;"
    },
    {
        "line": 175,
        "fullcodeline": "DECODE(temp,f,c);"
    },
    {
        "line": 43,
        "fullcodeline": "if (q == EOP) goto done;"
    },
    {
        "line": 61,
        "fullcodeline": "if (b >= 0) {"
    },
    {
        "line": 83,
        "fullcodeline": "int z = r->begin + pcount*r->part_size;"
    },
    {
        "line": 84,
        "fullcodeline": "int c_inter = 0, p_inter = z;"
    },
    {
        "line": 118,
        "fullcodeline": "++class_set;"
    },
    {
        "line": 122,
        "fullcodeline": "while (pcount < part_read) {"
    },
    {
        "line": 176,
        "fullcodeline": "if (temp == EOP) goto done;"
    },
    {
        "line": 197,
        "fullcodeline": "if (b >= 0) {"
    },
    {
        "line": 62,
        "fullcodeline": "Codebook *book = f->codebooks + b;"
    },
    {
        "line": 85,
        "fullcodeline": "if (pass == 0) {"
    },
    {
        "line": 99,
        "fullcodeline": "for (i=0; i < classwords && pcount < part_read; ++i, ++pcount) {"
    },
    {
        "line": 123,
        "fullcodeline": "int z = r->begin + pcount*r->part_size;"
    },
    {
        "line": 124,
        "fullcodeline": "int c_inter = z % ch, p_inter = z/ch;"
    },
    {
        "line": 158,
        "fullcodeline": "++class_set;"
    },
    {
        "line": 198,
        "fullcodeline": "float *target = residue_buffers[j];"
    },
    {
        "line": 199,
        "fullcodeline": "int offset = r->begin + pcount * r->part_size;"
    },
    {
        "line": 200,
        "fullcodeline": "int n = r->part_size;"
    },
    {
        "line": 201,
        "fullcodeline": "Codebook *book = f->codebooks + b;"
    },
    {
        "line": 68,
        "fullcodeline": "if (!codebook_decode_deinterleave_repeat(f, book, residue_buffers, ch, &c_inter, &p_inter, n, r->part_size))"
    },
    {
        "line": 72,
        "fullcodeline": "z += r->part_size;"
    },
    {
        "line": 73,
        "fullcodeline": "c_inter = z & 1;"
    },
    {
        "line": 74,
        "fullcodeline": "p_inter = z >> 1;"
    },
    {
        "line": 86,
        "fullcodeline": "Codebook *c = f->codebooks+r->classbook;"
    },
    {
        "line": 88,
        "fullcodeline": "DECODE(q,f,c);"
    },
    {
        "line": 100,
        "fullcodeline": "int z = r->begin + pcount*r->part_size;"
    },
    {
        "line": 125,
        "fullcodeline": "if (pass == 0) {"
    },
    {
        "line": 139,
        "fullcodeline": "for (i=0; i < classwords && pcount < part_read; ++i, ++pcount) {"
    },
    {
        "line": 202,
        "fullcodeline": "if (!residue_decode(f, book, target, offset, n, rtype))"
    },
    {
        "line": 89,
        "fullcodeline": "if (q == EOP) goto done;"
    },
    {
        "line": 107,
        "fullcodeline": "if (b >= 0) {"
    },
    {
        "line": 126,
        "fullcodeline": "Codebook *c = f->codebooks+r->classbook;"
    },
    {
        "line": 128,
        "fullcodeline": "DECODE(q,f,c);"
    },
    {
        "line": 140,
        "fullcodeline": "int z = r->begin + pcount*r->part_size;"
    },
    {
        "line": 108,
        "fullcodeline": "Codebook *book = f->codebooks + b;"
    },
    {
        "line": 129,
        "fullcodeline": "if (q == EOP) goto done;"
    },
    {
        "line": 147,
        "fullcodeline": "if (b >= 0) {"
    },
    {
        "line": 109,
        "fullcodeline": "if (!codebook_decode_deinterleave_repeat(f, book, residue_buffers, ch, &c_inter, &p_inter, n, r->part_size))"
    },
    {
        "line": 112,
        "fullcodeline": "z += r->part_size;"
    },
    {
        "line": 113,
        "fullcodeline": "c_inter = 0;"
    },
    {
        "line": 114,
        "fullcodeline": "p_inter = z;"
    },
    {
        "line": 148,
        "fullcodeline": "Codebook *book = f->codebooks + b;"
    },
    {
        "line": 149,
        "fullcodeline": "if (!codebook_decode_deinterleave_repeat(f, book, residue_buffers, ch, &c_inter, &p_inter, n, r->part_size))"
    },
    {
        "line": 152,
        "fullcodeline": "z += r->part_size;"
    },
    {
        "line": 153,
        "fullcodeline": "c_inter = z % ch;"
    },
    {
        "line": 154,
        "fullcodeline": "p_inter = z / ch;"
    }
]