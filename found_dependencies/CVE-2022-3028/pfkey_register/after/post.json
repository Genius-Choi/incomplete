[
    {
        "line": 3,
        "fullcodeline": "struct pfkey_sock *pfk = pfkey_sk(sk);"
    },
    {
        "line": 15,
        "fullcodeline": "mutex_lock(&pfkey_mutex);"
    },
    {
        "line": 16,
        "fullcodeline": "xfrm_probe_algs();"
    },
    {
        "line": 18,
        "fullcodeline": "supp_skb = compose_sadb_supported(hdr, GFP_KERNEL | __GFP_ZERO);"
    },
    {
        "line": 19,
        "fullcodeline": "mutex_unlock(&pfkey_mutex);"
    },
    {
        "line": 28,
        "fullcodeline": "pfkey_broadcast(supp_skb, GFP_KERNEL, BROADCAST_REGISTERED, sk,"
    },
    {
        "line": 6,
        "fullcodeline": "if (hdr->sadb_msg_satype > SADB_SATYPE_MAX)"
    },
    {
        "line": 9,
        "fullcodeline": "if (hdr->sadb_msg_satype != SADB_SATYPE_UNSPEC) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (!supp_skb) {"
    },
    {
        "line": 29,
        "fullcodeline": "sock_net(sk));"
    },
    {
        "line": 12,
        "fullcodeline": "pfk->registered |= (1<<hdr->sadb_msg_satype);"
    },
    {
        "line": 7,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 10,
        "fullcodeline": "if (pfk->registered&(1<<hdr->sadb_msg_satype))"
    },
    {
        "line": 22,
        "fullcodeline": "if (hdr->sadb_msg_satype != SADB_SATYPE_UNSPEC)"
    },
    {
        "line": 25,
        "fullcodeline": "return -ENOBUFS;"
    },
    {
        "line": 23,
        "fullcodeline": "pfk->registered &= ~(1<<hdr->sadb_msg_satype);"
    },
    {
        "line": 11,
        "fullcodeline": "return -EEXIST;"
    }
]