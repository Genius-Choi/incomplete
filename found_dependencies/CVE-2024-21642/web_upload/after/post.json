[
    {
        "line": 2,
        "fullcodeline": "from dtale.cli.loaders.csv_loader import loader_func as load_csv"
    },
    {
        "line": 3,
        "fullcodeline": "from dtale.cli.loaders.json_loader import loader_func as load_json"
    },
    {
        "line": 4,
        "fullcodeline": "from dtale.cli.loaders.excel_loader import load_file as load_excel"
    },
    {
        "line": 5,
        "fullcodeline": "from dtale.cli.loaders.parquet_loader import loader_func as load_parquet"
    },
    {
        "line": 18,
        "fullcodeline": "data_type = get_str_arg(request, \"type\")"
    },
    {
        "line": 19,
        "fullcodeline": "url = get_str_arg(request, \"url\")"
    },
    {
        "line": 20,
        "fullcodeline": "proxy = get_str_arg(request, \"proxy\")"
    },
    {
        "line": 7,
        "fullcodeline": "if not global_state.get_app_settings().get(\"enable_web_uploads\", False):"
    },
    {
        "line": 21,
        "fullcodeline": "if data_type == \"csv\":"
    },
    {
        "line": 63,
        "fullcodeline": "return load_new_data(df, startup_code)"
    },
    {
        "line": 22,
        "fullcodeline": "df = load_csv(path=url, proxy=proxy)"
    },
    {
        "line": 23,
        "fullcodeline": "startup_code = ("
    },
    {
        "line": 8,
        "fullcodeline": "return jsonify("
    },
    {
        "line": 27,
        "fullcodeline": "elif data_type == \"tsv\":"
    },
    {
        "line": 9,
        "fullcodeline": "dict("
    },
    {
        "line": 24,
        "fullcodeline": "\"from dtale.cli.loaders.csv_loader import loader_func as load_csv\\n\\n\""
    },
    {
        "line": 28,
        "fullcodeline": "df = load_csv(path=url, proxy=proxy, delimiter=\"\\t\")"
    },
    {
        "line": 29,
        "fullcodeline": "startup_code = ("
    },
    {
        "line": 12,
        "fullcodeline": "\"Web uploads not enabled! Web uploads are vulnerable to blind server side request forgery, please \""
    },
    {
        "line": 26,
        "fullcodeline": ").format(url=url, proxy=\", '{}'\".format(proxy) if proxy else \"\")"
    },
    {
        "line": 33,
        "fullcodeline": "elif data_type == \"json\":"
    },
    {
        "line": 30,
        "fullcodeline": "\"from dtale.cli.loaders.csv_loader import loader_func as load_csv\\n\\n\""
    },
    {
        "line": 34,
        "fullcodeline": "df = load_json(path=url, proxy=proxy)"
    },
    {
        "line": 35,
        "fullcodeline": "startup_code = ("
    },
    {
        "line": 32,
        "fullcodeline": ").format(url=url, proxy=\", '{}'\".format(proxy) if proxy else \"\")"
    },
    {
        "line": 39,
        "fullcodeline": "elif data_type == \"excel\":"
    },
    {
        "line": 36,
        "fullcodeline": "\"from dtale.cli.loaders.json_loader import loader_func as load_json\\n\\n\""
    },
    {
        "line": 40,
        "fullcodeline": "dfs = load_excel(path=url, proxy=proxy)"
    },
    {
        "line": 42,
        "fullcodeline": "def build_xls_code(sheet_name):"
    },
    {
        "line": 52,
        "fullcodeline": "dfs = {"
    },
    {
        "line": 38,
        "fullcodeline": ").format(url=url, proxy=\", '{}'\".format(proxy) if proxy else \"\")"
    },
    {
        "line": 56,
        "fullcodeline": "return handle_excel_upload(dfs)"
    },
    {
        "line": 57,
        "fullcodeline": "elif data_type == \"parquet\":"
    },
    {
        "line": 58,
        "fullcodeline": "df = load_parquet(path=url)"
    },
    {
        "line": 59,
        "fullcodeline": "startup_code = ("
    },
    {
        "line": 60,
        "fullcodeline": "\"from dtale.cli.loaders.parquet_loader import loader_func as load_parquet\\n\\n\""
    },
    {
        "line": 62,
        "fullcodeline": ").format(url=url, proxy=\", '{}'\".format(proxy) if proxy else \"\")"
    },
    {
        "line": 54,
        "fullcodeline": "for sheet_name, df in dfs.items()"
    },
    {
        "line": 53,
        "fullcodeline": "sheet_name: (df, build_xls_code(sheet_name))"
    }
]