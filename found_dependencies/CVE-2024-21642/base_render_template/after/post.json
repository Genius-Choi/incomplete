[
    {
        "line": 10,
        "fullcodeline": "curr_settings = global_state.get_settings(data_id) or {}"
    },
    {
        "line": 11,
        "fullcodeline": "curr_app_settings = global_state.get_app_settings()"
    },
    {
        "line": 13,
        "fullcodeline": "hide_shutdown = global_state.load_flag(data_id, \"hide_shutdown\", False)"
    },
    {
        "line": 14,
        "fullcodeline": "allow_cell_edits = global_state.load_flag(data_id, \"allow_cell_edits\", True)"
    },
    {
        "line": 15,
        "fullcodeline": "github_fork = global_state.load_flag(data_id, \"github_fork\", False)"
    },
    {
        "line": 16,
        "fullcodeline": "hide_header_editor = global_state.load_flag(data_id, \"hide_header_editor\", False)"
    },
    {
        "line": 17,
        "fullcodeline": "lock_header_menu = global_state.load_flag(data_id, \"lock_header_menu\", False)"
    },
    {
        "line": 18,
        "fullcodeline": "hide_header_menu = global_state.load_flag(data_id, \"hide_header_menu\", False)"
    },
    {
        "line": 19,
        "fullcodeline": "hide_main_menu = global_state.load_flag(data_id, \"hide_main_menu\", False)"
    },
    {
        "line": 20,
        "fullcodeline": "hide_column_menus = global_state.load_flag(data_id, \"hide_column_menus\", False)"
    },
    {
        "line": 21,
        "fullcodeline": "enable_custom_filters = global_state.load_flag("
    },
    {
        "line": 24,
        "fullcodeline": "enable_web_uploads = global_state.load_flag(data_id, \"enable_web_uploads\", False)"
    },
    {
        "line": 25,
        "fullcodeline": "app_overrides = dict("
    },
    {
        "line": 37,
        "fullcodeline": "is_arcticdb = 0"
    },
    {
        "line": 38,
        "fullcodeline": "arctic_conn = \"\""
    },
    {
        "line": 8,
        "fullcodeline": "if not len(os.listdir(\"{}/static/dist\".format(os.path.dirname(__file__)))):"
    },
    {
        "line": 12,
        "fullcodeline": "_, version = retrieve_meta_info_and_version(\"dtale\")"
    },
    {
        "line": 43,
        "fullcodeline": "return render_template("
    },
    {
        "line": 26,
        "fullcodeline": "allow_cell_edits=json.dumps(allow_cell_edits),"
    },
    {
        "line": 40,
        "fullcodeline": "instance = global_state.store.get(data_id)"
    },
    {
        "line": 41,
        "fullcodeline": "is_arcticdb = instance.rows()"
    },
    {
        "line": 45,
        "fullcodeline": "data_id=get_url_quote()(get_url_quote()(data_id, safe=\"\"))"
    },
    {
        "line": 49,
        "fullcodeline": "xarray_dim=json.dumps(global_state.get_dataset_dim(data_id)),"
    },
    {
        "line": 50,
        "fullcodeline": "settings=json.dumps(curr_settings),"
    },
    {
        "line": 51,
        "fullcodeline": "version=str(version),"
    },
    {
        "line": 52,
        "fullcodeline": "processes=global_state.size(),"
    },
    {
        "line": 53,
        "fullcodeline": "python_version=platform.python_version(),"
    },
    {
        "line": 54,
        "fullcodeline": "predefined_filters=json.dumps("
    },
    {
        "line": 60,
        "fullcodeline": "column_count=len(global_state.get_dtypes(data_id) or []),"
    },
    {
        "line": 9,
        "fullcodeline": "return redirect(current_app.url_for(\"missing_js\"))"
    },
    {
        "line": 46,
        "fullcodeline": "if data_id is not None"
    },
    {
        "line": 48,
        "fullcodeline": "xarray=global_state.get_data_inst(data_id).is_xarray_dataset,"
    },
    {
        "line": 55,
        "fullcodeline": "[f.asdict() for f in predefined_filters.get_filters()]"
    }
]