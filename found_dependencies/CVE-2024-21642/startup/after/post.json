[
    {
        "line": 105,
        "fullcodeline": "data_loader is None and data is None"
    },
    {
        "line": 109,
        "fullcodeline": "if data_loader is not None:"
    },
    {
        "line": 118,
        "fullcodeline": "if global_state.is_arcticdb and isinstance(data, string_types):"
    },
    {
        "line": 185,
        "fullcodeline": "if data is not None:"
    },
    {
        "line": 110,
        "fullcodeline": "data = data_loader()"
    },
    {
        "line": 119,
        "fullcodeline": "data_id = data"
    },
    {
        "line": 120,
        "fullcodeline": "data_id_segs = data_id.split(\"|\")"
    },
    {
        "line": 130,
        "fullcodeline": "global_state.new_data_inst(data_id)"
    },
    {
        "line": 131,
        "fullcodeline": "instance = global_state.store.get(data_id)"
    },
    {
        "line": 132,
        "fullcodeline": "data = instance.base_df"
    },
    {
        "line": 133,
        "fullcodeline": "ret_data = startup("
    },
    {
        "line": 166,
        "fullcodeline": "startup_code = ("
    },
    {
        "line": 179,
        "fullcodeline": "curr_settings = global_state.get_settings(data_id)"
    },
    {
        "line": 180,
        "fullcodeline": "global_state.set_settings("
    },
    {
        "line": 186,
        "fullcodeline": "data = handle_koalas(data)"
    },
    {
        "line": 187,
        "fullcodeline": "valid_types = ("
    },
    {
        "line": 249,
        "fullcodeline": "logger.debug("
    },
    {
        "line": 272,
        "fullcodeline": "global_state.set_name(data_id, name)"
    },
    {
        "line": 274,
        "fullcodeline": "base_settings = dict("
    },
    {
        "line": 285,
        "fullcodeline": "base_predefined = predefined_filters.init_filters()"
    },
    {
        "line": 311,
        "fullcodeline": "global_state.set_settings(data_id, base_settings)"
    },
    {
        "line": 319,
        "fullcodeline": "dtypes_data = data"
    },
    {
        "line": 320,
        "fullcodeline": "ranges = None"
    },
    {
        "line": 333,
        "fullcodeline": "dtypes_state = build_dtypes_state("
    },
    {
        "line": 352,
        "fullcodeline": "global_state.set_dtypes(data_id, dtypes_state)"
    },
    {
        "line": 353,
        "fullcodeline": "global_state.set_context_variables("
    },
    {
        "line": 372,
        "fullcodeline": "raise NoDataLoadedException(\"No data has been loaded into this D-Tale session!\")"
    },
    {
        "line": 107,
        "fullcodeline": "return DtaleData(\"1\", url, is_proxy=is_proxy, app_root=app_root)"
    },
    {
        "line": 111,
        "fullcodeline": "if isinstance(data, string_types) and global_state.contains(data):"
    },
    {
        "line": 121,
        "fullcodeline": "if len(data_id_segs) < 2:"
    },
    {
        "line": 181,
        "fullcodeline": "data_id, dict_merge(curr_settings, dict(startup_code=startup_code))"
    },
    {
        "line": 197,
        "fullcodeline": "if not isinstance(data, valid_types):"
    },
    {
        "line": 205,
        "fullcodeline": "if isinstance(data, xr.Dataset):"
    },
    {
        "line": 244,
        "fullcodeline": "data, curr_index = format_data(data, inplace=inplace, drop_index=drop_index)"
    },
    {
        "line": 246,
        "fullcodeline": "if data_id is None and not ignore_duplicate and not global_state.is_arcticdb:"
    },
    {
        "line": 255,
        "fullcodeline": "if data_id is None:"
    },
    {
        "line": 257,
        "fullcodeline": "if global_state.get_settings(data_id) is not None:"
    },
    {
        "line": 291,
        "fullcodeline": "if nan_display is not None:"
    },
    {
        "line": 293,
        "fullcodeline": "if hide_shutdown is not None:"
    },
    {
        "line": 295,
        "fullcodeline": "if hide_header_editor is not None:"
    },
    {
        "line": 297,
        "fullcodeline": "if lock_header_menu is not None:"
    },
    {
        "line": 299,
        "fullcodeline": "if hide_header_menu is not None:"
    },
    {
        "line": 301,
        "fullcodeline": "if hide_main_menu is not None:"
    },
    {
        "line": 303,
        "fullcodeline": "if hide_column_menus is not None:"
    },
    {
        "line": 305,
        "fullcodeline": "if enable_custom_filters is not None:"
    },
    {
        "line": 307,
        "fullcodeline": "if enable_web_uploads is not None:"
    },
    {
        "line": 309,
        "fullcodeline": "if column_edit_options is not None:"
    },
    {
        "line": 312,
        "fullcodeline": "if optimize_dataframe and not global_state.is_arcticdb:"
    },
    {
        "line": 314,
        "fullcodeline": "if force_save or ("
    },
    {
        "line": 337,
        "fullcodeline": "for col in dtypes_state:"
    },
    {
        "line": 346,
        "fullcodeline": "if auto_hide_empty_columns and not global_state.is_arcticdb:"
    },
    {
        "line": 354,
        "fullcodeline": "data_id, build_context_variables(data_id, context_vars)"
    },
    {
        "line": 356,
        "fullcodeline": "if global_state.load_flag(data_id, \"enable_custom_filters\", False):"
    },
    {
        "line": 363,
        "fullcodeline": "if global_state.load_flag(data_id, \"enable_web_uploads\", False):"
    },
    {
        "line": 370,
        "fullcodeline": "return DtaleData(data_id, url, is_proxy=is_proxy, app_root=app_root)"
    },
    {
        "line": 129,
        "fullcodeline": "data_id = \"{}|{}\".format(global_state.store.lib.name, data_id)"
    },
    {
        "line": 167,
        "fullcodeline": "\"from arcticdb import Arctic\\n\""
    },
    {
        "line": 198,
        "fullcodeline": "raise Exception("
    },
    {
        "line": 206,
        "fullcodeline": "df = convert_xarray_to_dataset(data)"
    },
    {
        "line": 207,
        "fullcodeline": "instance = startup("
    },
    {
        "line": 240,
        "fullcodeline": "global_state.set_dataset(instance._data_id, data)"
    },
    {
        "line": 241,
        "fullcodeline": "global_state.set_dataset_dim(instance._data_id, {})"
    },
    {
        "line": 247,
        "fullcodeline": "check_duplicate_data(data)"
    },
    {
        "line": 250,
        "fullcodeline": "\"pytest: {}, flask-debug: {}\".format("
    },
    {
        "line": 256,
        "fullcodeline": "data_id = global_state.new_data_inst()"
    },
    {
        "line": 258,
        "fullcodeline": "curr_settings = global_state.get_settings(data_id)"
    },
    {
        "line": 259,
        "fullcodeline": "curr_locked = curr_settings.get(\"locked\", [])"
    },
    {
        "line": 261,
        "fullcodeline": "curr_locked = [c for c in curr_locked if c in data.columns]"
    },
    {
        "line": 263,
        "fullcodeline": "curr_locked += [c for c in curr_index if c not in curr_locked]"
    },
    {
        "line": 265,
        "fullcodeline": "logger.debug("
    },
    {
        "line": 270,
        "fullcodeline": "curr_locked = locked or curr_index"
    },
    {
        "line": 271,
        "fullcodeline": "global_state.set_metadata(data_id, dict(start=pd.Timestamp(\"now\")))"
    },
    {
        "line": 277,
        "fullcodeline": "allow_cell_edits=True if allow_cell_edits is None else allow_cell_edits,"
    },
    {
        "line": 279,
        "fullcodeline": "columnFormats=column_formats or {},"
    },
    {
        "line": 287,
        "fullcodeline": "base_settings[\"predefinedFilters\"] = base_predefined"
    },
    {
        "line": 289,
        "fullcodeline": "base_settings[\"sortInfo\"] = sort"
    },
    {
        "line": 290,
        "fullcodeline": "data = sort_df_for_grid(data, dict(sort=sort))"
    },
    {
        "line": 292,
        "fullcodeline": "base_settings[\"nanDisplay\"] = nan_display"
    },
    {
        "line": 294,
        "fullcodeline": "base_settings[\"hide_shutdown\"] = hide_shutdown"
    },
    {
        "line": 296,
        "fullcodeline": "base_settings[\"hide_header_editor\"] = hide_header_editor"
    },
    {
        "line": 298,
        "fullcodeline": "base_settings[\"lock_header_menu\"] = lock_header_menu"
    },
    {
        "line": 300,
        "fullcodeline": "base_settings[\"hide_header_menu\"] = hide_header_menu"
    },
    {
        "line": 302,
        "fullcodeline": "base_settings[\"hide_main_menu\"] = hide_main_menu"
    },
    {
        "line": 304,
        "fullcodeline": "base_settings[\"hide_column_menus\"] = hide_column_menus"
    },
    {
        "line": 306,
        "fullcodeline": "base_settings[\"enable_custom_filters\"] = enable_custom_filters"
    },
    {
        "line": 308,
        "fullcodeline": "base_settings[\"enable_web_uploads\"] = enable_web_uploads"
    },
    {
        "line": 310,
        "fullcodeline": "base_settings[\"column_edit_options\"] = column_edit_options"
    },
    {
        "line": 313,
        "fullcodeline": "data = optimize_df(data)"
    },
    {
        "line": 315,
        "fullcodeline": "global_state.is_arcticdb and not global_state.contains(data_id)"
    },
    {
        "line": 317,
        "fullcodeline": "data = data[curr_locked + [c for c in data.columns if c not in curr_locked]]"
    },
    {
        "line": 318,
        "fullcodeline": "global_state.set_data(data_id, data)"
    },
    {
        "line": 322,
        "fullcodeline": "instance = global_state.store.get(data_id)"
    },
    {
        "line": 334,
        "fullcodeline": "dtypes_data, global_state.get_dtypes(data_id) or [], ranges=ranges"
    },
    {
        "line": 347,
        "fullcodeline": "is_empty = data.isnull().all()"
    },
    {
        "line": 348,
        "fullcodeline": "is_empty = list(is_empty[is_empty].index.values)"
    },
    {
        "line": 357,
        "fullcodeline": "logger.warning("
    },
    {
        "line": 364,
        "fullcodeline": "logger.warning("
    },
    {
        "line": 112,
        "fullcodeline": "return DtaleData(data, url, is_proxy=is_proxy, app_root=app_root)"
    },
    {
        "line": 114,
        "fullcodeline": "data is None and global_state.is_arcticdb"
    },
    {
        "line": 323,
        "fullcodeline": "if not instance.is_large:"
    },
    {
        "line": 349,
        "fullcodeline": "for col in dtypes_state:"
    },
    {
        "line": 359,
        "fullcodeline": "\"Custom filtering enabled. Custom filters are vulnerable to code injection attacks, please only \""
    },
    {
        "line": 366,
        "fullcodeline": "\"Web uploads enabled. Web uploads are vulnerable to blind server side request forgery, please \""
    },
    {
        "line": 123,
        "fullcodeline": "raise ValueError("
    },
    {
        "line": 200,
        "fullcodeline": "\"data loaded must be one of the following types: pandas.DataFrame, pandas.Series, \""
    },
    {
        "line": 266,
        "fullcodeline": "\"pre-locking index columns ({}) to settings[{}]\".format("
    },
    {
        "line": 324,
        "fullcodeline": "dtypes_data = instance.load_data()"
    },
    {
        "line": 328,
        "fullcodeline": "ranges = calc_data_ranges(dtypes_data)"
    },
    {
        "line": 329,
        "fullcodeline": "dtypes_data = dtypes_data["
    },
    {
        "line": 338,
        "fullcodeline": "if show_columns and col[\"name\"] not in show_columns:"
    },
    {
        "line": 341,
        "fullcodeline": "if hide_columns and col[\"name\"] in hide_columns:"
    },
    {
        "line": 344,
        "fullcodeline": "if col[\"index\"] >= 100:"
    },
    {
        "line": 116,
        "fullcodeline": "return DtaleData(None, url, is_proxy=is_proxy, app_root=app_root)"
    },
    {
        "line": 325,
        "fullcodeline": "dtypes_data, _ = format_data("
    },
    {
        "line": 339,
        "fullcodeline": "col[\"visible\"] = False"
    },
    {
        "line": 342,
        "fullcodeline": "col[\"visible\"] = False"
    },
    {
        "line": 345,
        "fullcodeline": "col[\"visible\"] = False"
    },
    {
        "line": 125,
        "fullcodeline": "\"When specifying a data identifier for ArcticDB it must be comprised of a library and a symbol.\""
    },
    {
        "line": 330,
        "fullcodeline": "curr_locked"
    },
    {
        "line": 350,
        "fullcodeline": "if col[\"name\"] in is_empty:"
    },
    {
        "line": 351,
        "fullcodeline": "col[\"visible\"] = False"
    },
    {
        "line": 331,
        "fullcodeline": "+ [c for c in dtypes_data.columns if c not in curr_locked]"
    }
]