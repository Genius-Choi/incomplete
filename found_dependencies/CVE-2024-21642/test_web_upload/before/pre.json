[
    {
        "line": 2,
        "fullcodeline": "import dtale.global_state as global_state"
    },
    {
        "line": 4,
        "fullcodeline": "global_state.clear_store()"
    },
    {
        "line": 5,
        "fullcodeline": "with build_app(url=URL).test_client() as c:"
    },
    {
        "line": 6,
        "fullcodeline": "with ExitStack() as stack:"
    },
    {
        "line": 7,
        "fullcodeline": "load_csv = stack.enter_context("
    },
    {
        "line": 13,
        "fullcodeline": "load_excel = stack.enter_context("
    },
    {
        "line": 21,
        "fullcodeline": "load_json = stack.enter_context("
    },
    {
        "line": 27,
        "fullcodeline": "params = {\"type\": \"csv\", \"url\": \"http://test.com\"}"
    },
    {
        "line": 28,
        "fullcodeline": "c.get(\"/dtale/web-upload\", query_string=params)"
    },
    {
        "line": 29,
        "fullcodeline": "load_csv.assert_called_once()"
    },
    {
        "line": 30,
        "fullcodeline": "unittest.assertEqual("
    },
    {
        "line": 33,
        "fullcodeline": "assert global_state.size() == 1"
    },
    {
        "line": 34,
        "fullcodeline": "load_csv.reset_mock()"
    },
    {
        "line": 36,
        "fullcodeline": "params = {\"type\": \"tsv\", \"url\": \"http://test.com\"}"
    },
    {
        "line": 37,
        "fullcodeline": "c.get(\"/dtale/web-upload\", query_string=params)"
    },
    {
        "line": 38,
        "fullcodeline": "load_csv.assert_called_once()"
    },
    {
        "line": 39,
        "fullcodeline": "unittest.assertEqual("
    },
    {
        "line": 43,
        "fullcodeline": "assert global_state.size() == 2"
    },
    {
        "line": 45,
        "fullcodeline": "params = {"
    },
    {
        "line": 50,
        "fullcodeline": "c.get(\"/dtale/web-upload\", query_string=params)"
    },
    {
        "line": 51,
        "fullcodeline": "load_json.assert_called_once()"
    },
    {
        "line": 52,
        "fullcodeline": "unittest.assertEqual("
    },
    {
        "line": 56,
        "fullcodeline": "assert global_state.size() == 3"
    },
    {
        "line": 58,
        "fullcodeline": "params = {\"type\": \"excel\", \"url\": \"http://test.com\"}"
    },
    {
        "line": 59,
        "fullcodeline": "c.get(\"/dtale/web-upload\", query_string=params)"
    },
    {
        "line": 60,
        "fullcodeline": "load_excel.assert_called_once()"
    },
    {
        "line": 61,
        "fullcodeline": "unittest.assertEqual("
    },
    {
        "line": 64,
        "fullcodeline": "assert global_state.size() == 4"
    },
    {
        "line": 65,
        "fullcodeline": "global_state.clear_store()"
    },
    {
        "line": 66,
        "fullcodeline": "load_excel.reset_mock()"
    },
    {
        "line": 67,
        "fullcodeline": "load_excel.return_value = {"
    },
    {
        "line": 71,
        "fullcodeline": "resp = c.get(\"/dtale/web-upload\", query_string=params)"
    },
    {
        "line": 72,
        "fullcodeline": "sheets = resp.json[\"sheets\"]"
    },
    {
        "line": 73,
        "fullcodeline": "assert len(sheets) == 2"
    },
    {
        "line": 74,
        "fullcodeline": "unittest.assertEqual("
    },
    {
        "line": 75,
        "fullcodeline": "sorted([s[\"name\"] for s in sheets]), [\"Sheet 1\", \"Sheet 2\"]"
    },
    {
        "line": 8,
        "fullcodeline": "mock.patch("
    },
    {
        "line": 14,
        "fullcodeline": "mock.patch("
    },
    {
        "line": 22,
        "fullcodeline": "mock.patch("
    },
    {
        "line": 31,
        "fullcodeline": "load_csv.call_args[1], {\"path\": \"http://test.com\", \"proxy\": None}"
    },
    {
        "line": 41,
        "fullcodeline": "{\"path\": \"http://test.com\", \"proxy\": None, \"delimiter\": \"\\t\"},"
    },
    {
        "line": 54,
        "fullcodeline": "{\"path\": \"http://test.com\", \"proxy\": \"http://testproxy.com\"},"
    },
    {
        "line": 62,
        "fullcodeline": "load_excel.call_args[1], {\"path\": \"http://test.com\", \"proxy\": None}"
    },
    {
        "line": 10,
        "fullcodeline": "mock.Mock(return_value=pd.DataFrame(dict(a=[1], b=[2]))),"
    },
    {
        "line": 16,
        "fullcodeline": "mock.Mock("
    },
    {
        "line": 24,
        "fullcodeline": "mock.Mock(return_value=pd.DataFrame(dict(a=[1], b=[2]))),"
    },
    {
        "line": 68,
        "fullcodeline": "\"Sheet 1\": pd.DataFrame(dict(a=[1], b=[2])),"
    },
    {
        "line": 69,
        "fullcodeline": "\"Sheet 2\": pd.DataFrame(dict(c=[1], d=[2])),"
    },
    {
        "line": 17,
        "fullcodeline": "return_value={\"Sheet 1\": pd.DataFrame(dict(a=[1], b=[2]))}"
    }
]