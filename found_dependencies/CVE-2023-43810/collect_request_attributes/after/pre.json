[
    {
        "line": 6,
        "fullcodeline": "result = {"
    },
    {
        "line": 12,
        "fullcodeline": "host_port = environ.get(\"SERVER_PORT\")"
    },
    {
        "line": 16,
        "fullcodeline": "setifnotnone(result, SpanAttributes.HTTP_HOST, environ.get(\"HTTP_HOST\"))"
    },
    {
        "line": 17,
        "fullcodeline": "target = environ.get(\"RAW_URI\")"
    },
    {
        "line": 27,
        "fullcodeline": "remote_addr = environ.get(\"REMOTE_ADDR\")"
    },
    {
        "line": 30,
        "fullcodeline": "remote_host = environ.get(\"REMOTE_HOST\")"
    },
    {
        "line": 34,
        "fullcodeline": "user_agent = environ.get(\"HTTP_USER_AGENT\")"
    },
    {
        "line": 38,
        "fullcodeline": "setifnotnone("
    },
    {
        "line": 41,
        "fullcodeline": "flavor = environ.get(\"SERVER_PROTOCOL\", \"\")"
    },
    {
        "line": 13,
        "fullcodeline": "if host_port is not None and not host_port == \"\":"
    },
    {
        "line": 18,
        "fullcodeline": "if target is None:  # Note: `\"\" or None is None`"
    },
    {
        "line": 20,
        "fullcodeline": "if target is not None:"
    },
    {
        "line": 31,
        "fullcodeline": "if remote_host and remote_host != remote_addr:"
    },
    {
        "line": 35,
        "fullcodeline": "if user_agent is not None and len(user_agent) > 0:"
    },
    {
        "line": 39,
        "fullcodeline": "result, SpanAttributes.NET_PEER_PORT, environ.get(\"REMOTE_PORT\")"
    },
    {
        "line": 14,
        "fullcodeline": "result.update({SpanAttributes.NET_HOST_PORT: int(host_port)})"
    },
    {
        "line": 19,
        "fullcodeline": "target = environ.get(\"REQUEST_URI\")"
    },
    {
        "line": 21,
        "fullcodeline": "result[SpanAttributes.HTTP_TARGET] = target"
    },
    {
        "line": 23,
        "fullcodeline": "result[SpanAttributes.HTTP_URL] = remove_url_credentials("
    },
    {
        "line": 29,
        "fullcodeline": "result[SpanAttributes.NET_PEER_IP] = remote_addr"
    },
    {
        "line": 32,
        "fullcodeline": "result[SpanAttributes.NET_PEER_NAME] = remote_host"
    },
    {
        "line": 36,
        "fullcodeline": "result[SpanAttributes.HTTP_USER_AGENT] = user_agent"
    },
    {
        "line": 42,
        "fullcodeline": "if flavor.upper().startswith(_HTTP_VERSION_PREFIX):"
    },
    {
        "line": 43,
        "fullcodeline": "flavor = flavor[len(_HTTP_VERSION_PREFIX) :]"
    },
    {
        "line": 45,
        "fullcodeline": "result[SpanAttributes.HTTP_FLAVOR] = flavor"
    },
    {
        "line": 7,
        "fullcodeline": "SpanAttributes.HTTP_METHOD: sanitize_method(environ.get(\"REQUEST_METHOD\")),"
    },
    {
        "line": 8,
        "fullcodeline": "SpanAttributes.HTTP_SERVER_NAME: environ.get(\"SERVER_NAME\"),"
    },
    {
        "line": 9,
        "fullcodeline": "SpanAttributes.HTTP_SCHEME: environ.get(\"wsgi.url_scheme\"),"
    },
    {
        "line": 24,
        "fullcodeline": "wsgiref_util.request_uri(environ)"
    }
]