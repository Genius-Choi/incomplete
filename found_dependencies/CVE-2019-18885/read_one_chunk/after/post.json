[
    {
        "line": 5,
        "fullcodeline": "struct btrfs_mapping_tree *map_tree = &fs_info->mapping_tree;"
    },
    {
        "line": 11,
        "fullcodeline": "u8 uuid[BTRFS_UUID_SIZE];"
    },
    {
        "line": 16,
        "fullcodeline": "logical = key->offset;"
    },
    {
        "line": 17,
        "fullcodeline": "length = btrfs_chunk_length(leaf, chunk);"
    },
    {
        "line": 18,
        "fullcodeline": "num_stripes = btrfs_chunk_num_stripes(leaf, chunk);"
    },
    {
        "line": 20,
        "fullcodeline": "ret = btrfs_check_chunk_valid(fs_info, leaf, chunk, logical);"
    },
    {
        "line": 25,
        "fullcodeline": "em = lookup_extent_mapping(&map_tree->map_tree, logical, 1);"
    },
    {
        "line": 26,
        "fullcodeline": "read_unlock(&map_tree->map_tree.lock);"
    },
    {
        "line": 36,
        "fullcodeline": "em = alloc_extent_map();"
    },
    {
        "line": 39,
        "fullcodeline": "map = kmalloc(map_lookup_size(num_stripes), GFP_NOFS);"
    },
    {
        "line": 45,
        "fullcodeline": "set_bit(EXTENT_FLAG_FS_MAPPING, &em->flags);"
    },
    {
        "line": 46,
        "fullcodeline": "em->map_lookup = map;"
    },
    {
        "line": 47,
        "fullcodeline": "em->start = logical;"
    },
    {
        "line": 48,
        "fullcodeline": "em->len = length;"
    },
    {
        "line": 49,
        "fullcodeline": "em->orig_start = 0;"
    },
    {
        "line": 50,
        "fullcodeline": "em->block_start = 0;"
    },
    {
        "line": 51,
        "fullcodeline": "em->block_len = em->len;"
    },
    {
        "line": 53,
        "fullcodeline": "map->num_stripes = num_stripes;"
    },
    {
        "line": 54,
        "fullcodeline": "map->io_width = btrfs_chunk_io_width(leaf, chunk);"
    },
    {
        "line": 55,
        "fullcodeline": "map->io_align = btrfs_chunk_io_align(leaf, chunk);"
    },
    {
        "line": 56,
        "fullcodeline": "map->stripe_len = btrfs_chunk_stripe_len(leaf, chunk);"
    },
    {
        "line": 57,
        "fullcodeline": "map->type = btrfs_chunk_type(leaf, chunk);"
    },
    {
        "line": 58,
        "fullcodeline": "map->sub_stripes = btrfs_chunk_sub_stripes(leaf, chunk);"
    },
    {
        "line": 59,
        "fullcodeline": "map->verified_stripes = 0;"
    },
    {
        "line": 93,
        "fullcodeline": "write_lock(&map_tree->map_tree.lock);"
    },
    {
        "line": 94,
        "fullcodeline": "ret = add_extent_mapping(&map_tree->map_tree, em, 0);"
    },
    {
        "line": 95,
        "fullcodeline": "write_unlock(&map_tree->map_tree.lock);"
    },
    {
        "line": 101,
        "fullcodeline": "free_extent_map(em);"
    },
    {
        "line": 29,
        "fullcodeline": "if (em && em->start <= logical && em->start + em->len > logical) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (!em)"
    },
    {
        "line": 40,
        "fullcodeline": "if (!map) {"
    },
    {
        "line": 60,
        "fullcodeline": "for (i = 0; i < num_stripes; i++) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 30,
        "fullcodeline": "free_extent_map(em);"
    },
    {
        "line": 41,
        "fullcodeline": "free_extent_map(em);"
    },
    {
        "line": 61,
        "fullcodeline": "map->stripes[i].physical ="
    },
    {
        "line": 63,
        "fullcodeline": "devid = btrfs_stripe_devid_nr(leaf, chunk, i);"
    },
    {
        "line": 64,
        "fullcodeline": "read_extent_buffer(leaf, uuid, (unsigned long)"
    },
    {
        "line": 67,
        "fullcodeline": "map->stripes[i].dev = btrfs_find_device(fs_info->fs_devices,"
    },
    {
        "line": 88,
        "fullcodeline": "set_bit(BTRFS_DEV_STATE_IN_FS_METADATA,"
    },
    {
        "line": 97,
        "fullcodeline": "btrfs_err(fs_info,"
    },
    {
        "line": 38,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 42,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 62,
        "fullcodeline": "btrfs_stripe_offset_nr(leaf, chunk, i);"
    },
    {
        "line": 69,
        "fullcodeline": "if (!map->stripes[i].dev &&"
    },
    {
        "line": 75,
        "fullcodeline": "if (!map->stripes[i].dev) {"
    },
    {
        "line": 65,
        "fullcodeline": "btrfs_stripe_dev_uuid_nr(chunk, i),"
    },
    {
        "line": 70,
        "fullcodeline": "!btrfs_test_opt(fs_info, DEGRADED)) {"
    },
    {
        "line": 71,
        "fullcodeline": "free_extent_map(em);"
    },
    {
        "line": 72,
        "fullcodeline": "btrfs_report_missing_device(fs_info, devid, uuid, true);"
    },
    {
        "line": 76,
        "fullcodeline": "map->stripes[i].dev ="
    },
    {
        "line": 86,
        "fullcodeline": "btrfs_report_missing_device(fs_info, devid, uuid, false);"
    },
    {
        "line": 33,
        "fullcodeline": "free_extent_map(em);"
    },
    {
        "line": 73,
        "fullcodeline": "return -ENOENT;"
    },
    {
        "line": 77,
        "fullcodeline": "add_missing_dev(fs_info->fs_devices, devid,"
    },
    {
        "line": 79,
        "fullcodeline": "if (IS_ERR(map->stripes[i].dev)) {"
    },
    {
        "line": 80,
        "fullcodeline": "free_extent_map(em);"
    },
    {
        "line": 81,
        "fullcodeline": "btrfs_err(fs_info,"
    },
    {
        "line": 83,
        "fullcodeline": "devid, PTR_ERR(map->stripes[i].dev));"
    },
    {
        "line": 84,
        "fullcodeline": "return PTR_ERR(map->stripes[i].dev);"
    }
]