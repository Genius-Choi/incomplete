[
    {
        "line": 3,
        "fullcodeline": "s32 vps_id, sps_id = -1;"
    },
    {
        "line": 14,
        "fullcodeline": "vps_id = gf_bs_read_int_log(bs, 4, \"vps_id\");"
    },
    {
        "line": 18,
        "fullcodeline": "memset(&ptl, 0, sizeof(ptl));"
    },
    {
        "line": 19,
        "fullcodeline": "max_sub_layers_minus1 = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "sps_ext_or_max_sub_layers_minus1 = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "multiLayerExtSpsFlag = (layer_id != 0) && (sps_ext_or_max_sub_layers_minus1 == 7);"
    },
    {
        "line": 31,
        "fullcodeline": "sps_id = gf_bs_read_ue_log(bs, \"sps_id\");"
    },
    {
        "line": 42,
        "fullcodeline": "sps->ptl = ptl;"
    },
    {
        "line": 44,
        "fullcodeline": "sps->max_sub_layers_minus1 = 0;"
    },
    {
        "line": 45,
        "fullcodeline": "sps->sps_ext_or_max_sub_layers_minus1 = 0;"
    },
    {
        "line": 48,
        "fullcodeline": "sps->colour_primaries = 2;"
    },
    {
        "line": 49,
        "fullcodeline": "sps->transfer_characteristic = 2;"
    },
    {
        "line": 50,
        "fullcodeline": "sps->matrix_coeffs = 2;"
    },
    {
        "line": 103,
        "fullcodeline": "sps->log2_max_pic_order_cnt_lsb = 4 + gf_bs_read_ue_log(bs, \"log2_max_pic_order_cnt_lsb_minus4\");"
    },
    {
        "line": 114,
        "fullcodeline": "sps->log2_min_luma_coding_block_size = 3 + gf_bs_read_ue_log(bs, \"log2_min_luma_coding_block_size_minus3\");"
    },
    {
        "line": 115,
        "fullcodeline": "sps->log2_diff_max_min_luma_coding_block_size = gf_bs_read_ue_log(bs, \"log2_diff_max_min_luma_coding_block_size\");"
    },
    {
        "line": 116,
        "fullcodeline": "sps->max_CU_width = (1 << (sps->log2_min_luma_coding_block_size + sps->log2_diff_max_min_luma_coding_block_size));"
    },
    {
        "line": 117,
        "fullcodeline": "sps->max_CU_height = (1 << (sps->log2_min_luma_coding_block_size + sps->log2_diff_max_min_luma_coding_block_size));"
    },
    {
        "line": 119,
        "fullcodeline": "sps->log2_min_transform_block_size = 2 + gf_bs_read_ue_log(bs, \"log2_min_transform_block_size_minus2\");"
    },
    {
        "line": 120,
        "fullcodeline": "sps->log2_max_transform_block_size = sps->log2_min_transform_block_size  + gf_bs_read_ue_log(bs, \"log2_max_transform_block_size\");"
    },
    {
        "line": 122,
        "fullcodeline": "depth = 0;"
    },
    {
        "line": 123,
        "fullcodeline": "sps->max_transform_hierarchy_depth_inter = gf_bs_read_ue_log(bs, \"max_transform_hierarchy_depth_inter\");"
    },
    {
        "line": 124,
        "fullcodeline": "sps->max_transform_hierarchy_depth_intra = gf_bs_read_ue_log(bs, \"max_transform_hierarchy_depth_intra\");"
    },
    {
        "line": 129,
        "fullcodeline": "sps->max_CU_depth = sps->log2_diff_max_min_luma_coding_block_size + depth;"
    },
    {
        "line": 131,
        "fullcodeline": "nb_CTUs = ((sps->width + sps->max_CU_width - 1) / sps->max_CU_width) * ((sps->height + sps->max_CU_height - 1) / sps->max_CU_height);"
    },
    {
        "line": 132,
        "fullcodeline": "sps->bitsSliceSegmentAddress = 0;"
    },
    {
        "line": 137,
        "fullcodeline": "sps->scaling_list_enable_flag = gf_bs_read_int_log(bs, 1, \"scaling_list_enable_flag\");"
    },
    {
        "line": 154,
        "fullcodeline": "sps->asymmetric_motion_partitions_enabled_flag = gf_bs_read_int_log(bs, 1, \"asymmetric_motion_partitions_enabled_flag\");"
    },
    {
        "line": 155,
        "fullcodeline": "sps->sample_adaptive_offset_enabled_flag = gf_bs_read_int_log(bs, 1, \"sample_adaptive_offset_enabled_flag\");"
    },
    {
        "line": 163,
        "fullcodeline": "sps->num_short_term_ref_pic_sets = gf_bs_read_ue_log(bs, \"num_short_term_ref_pic_sets\");"
    },
    {
        "line": 177,
        "fullcodeline": "sps->long_term_ref_pics_present_flag = gf_bs_read_int_log(bs, 1, \"long_term_ref_pics_present_flag\");"
    },
    {
        "line": 185,
        "fullcodeline": "sps->temporal_mvp_enable_flag = gf_bs_read_int_log(bs, 1, \"temporal_mvp_enable_flag\");"
    },
    {
        "line": 186,
        "fullcodeline": "sps->strong_intra_smoothing_enable_flag = gf_bs_read_int_log(bs, 1, \"strong_intra_smoothing_enable_flag\");"
    },
    {
        "line": 15,
        "fullcodeline": "if (vps_id >= 16) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (layer_id == 0)"
    },
    {
        "line": 26,
        "fullcodeline": "if (!multiLayerExtSpsFlag) {"
    },
    {
        "line": 32,
        "fullcodeline": "if ((sps_id < 0) || (sps_id >= 16)) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (!sps->state) {"
    },
    {
        "line": 105,
        "fullcodeline": "if (!multiLayerExtSpsFlag) {"
    },
    {
        "line": 125,
        "fullcodeline": "while ((u32)(sps->max_CU_width >> sps->log2_diff_max_min_luma_coding_block_size) > (u32)(1 << (sps->log2_min_transform_block_size + depth)))"
    },
    {
        "line": 133,
        "fullcodeline": "while (nb_CTUs > (u32)(1 << sps->bitsSliceSegmentAddress)) {"
    },
    {
        "line": 156,
        "fullcodeline": "if ( (sps->pcm_enabled_flag = gf_bs_read_int_log(bs, 1, \"pcm_enabled_flag\")) ) {"
    },
    {
        "line": 164,
        "fullcodeline": "if (sps->num_short_term_ref_pic_sets > 64) {"
    },
    {
        "line": 169,
        "fullcodeline": "for (i = 0; i < sps->num_short_term_ref_pic_sets; i++) {"
    },
    {
        "line": 191,
        "fullcodeline": "if ((sps->vui_parameters_present_flag = gf_bs_read_int_log(bs, 1, \"vui_parameters_present_flag\")) ) {"
    },
    {
        "line": 260,
        "fullcodeline": "if (gf_bs_read_int_log(bs, 1, \"sps_extension_flag\")) {"
    },
    {
        "line": 11,
        "fullcodeline": "if (vui_flag_pos) *vui_flag_pos = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "max_sub_layers_minus1 = gf_bs_read_int_log(bs, 3, \"max_sub_layers_minus1\");"
    },
    {
        "line": 27,
        "fullcodeline": "gf_bs_read_int_log(bs, 1, \"temporal_id_nesting_flag\");"
    },
    {
        "line": 28,
        "fullcodeline": "hevc_profile_tier_level(bs, 1, max_sub_layers_minus1, &ptl, 0);"
    },
    {
        "line": 38,
        "fullcodeline": "sps->state = 1;"
    },
    {
        "line": 39,
        "fullcodeline": "sps->id = sps_id;"
    },
    {
        "line": 40,
        "fullcodeline": "sps->vps_id = vps_id;"
    },
    {
        "line": 54,
        "fullcodeline": "sps->update_rep_format_flag = gf_bs_read_int_log(bs, 1, \"update_rep_format_flag\");"
    },
    {
        "line": 106,
        "fullcodeline": "sps->sub_layer_ordering_info_present_flag = gf_bs_read_int_log(bs, 1, \"sub_layer_ordering_info_present_flag\");"
    },
    {
        "line": 127,
        "fullcodeline": "depth++;"
    },
    {
        "line": 134,
        "fullcodeline": "sps->bitsSliceSegmentAddress++;"
    },
    {
        "line": 139,
        "fullcodeline": "sps->infer_scaling_list_flag = 0;"
    },
    {
        "line": 140,
        "fullcodeline": "sps->scaling_list_ref_layer_id = 0;"
    },
    {
        "line": 157,
        "fullcodeline": "sps->pcm_sample_bit_depth_luma_minus1 = gf_bs_read_int_log(bs, 4, \"pcm_sample_bit_depth_luma_minus1\");"
    },
    {
        "line": 158,
        "fullcodeline": "sps->pcm_sample_bit_depth_chroma_minus1 = gf_bs_read_int_log(bs, 4, \"pcm_sample_bit_depth_chroma_minus1\");"
    },
    {
        "line": 159,
        "fullcodeline": "sps->log2_min_pcm_luma_coding_block_size_minus3 = gf_bs_read_ue_log(bs, \"log2_min_pcm_luma_coding_block_size_minus3\");"
    },
    {
        "line": 160,
        "fullcodeline": "sps->log2_diff_max_min_pcm_luma_coding_block_size = gf_bs_read_ue_log(bs, \"log2_diff_max_min_pcm_luma_coding_block_size\");"
    },
    {
        "line": 161,
        "fullcodeline": "sps->pcm_loop_filter_disable_flag = gf_bs_read_int_log(bs, 1, \"pcm_loop_filter_disable_flag\");"
    },
    {
        "line": 165,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] Invalid number of short term reference picture sets %d\\n\", sps->num_short_term_ref_pic_sets));"
    },
    {
        "line": 170,
        "fullcodeline": "Bool ret = hevc_parse_short_term_ref_pic_set(bs, sps, i);"
    },
    {
        "line": 179,
        "fullcodeline": "sps->num_long_term_ref_pic_sps = gf_bs_read_ue_log(bs, \"num_long_term_ref_pic_sps\");"
    },
    {
        "line": 189,
        "fullcodeline": "*vui_flag_pos = (u32)gf_bs_get_bit_offset(bs);"
    },
    {
        "line": 192,
        "fullcodeline": "sps->aspect_ratio_info_present_flag = gf_bs_read_int_log(bs, 1, \"aspect_ratio_info_present_flag\");"
    },
    {
        "line": 208,
        "fullcodeline": "sps->video_signal_type_present_flag = gf_bs_read_int_log(bs, 1, \"video_signal_type_present_flag\");"
    },
    {
        "line": 224,
        "fullcodeline": "sps->neutra_chroma_indication_flag = gf_bs_read_int_log(bs, 1, \"neutra_chroma_indication_flag\");"
    },
    {
        "line": 225,
        "fullcodeline": "sps->field_seq_flag = gf_bs_read_int_log(bs, 1, \"field_seq_flag\");"
    },
    {
        "line": 226,
        "fullcodeline": "sps->frame_field_info_present_flag = gf_bs_read_int_log(bs, 1, \"frame_field_info_present_flag\");"
    },
    {
        "line": 235,
        "fullcodeline": "sps->has_timing_info = gf_bs_read_int_log(bs, 1, \"has_timing_info\");"
    },
    {
        "line": 16,
        "fullcodeline": "return -1;"
    },
    {
        "line": 24,
        "fullcodeline": "sps_ext_or_max_sub_layers_minus1 = gf_bs_read_int_log(bs, 3, \"sps_ext_or_max_sub_layers_minus1\");"
    },
    {
        "line": 33,
        "fullcodeline": "return -1;"
    },
    {
        "line": 72,
        "fullcodeline": "sps->chroma_format_idc = gf_bs_read_ue_log(bs, \"chroma_format_idc\");"
    },
    {
        "line": 75,
        "fullcodeline": "sps->width = gf_bs_read_ue_log(bs, \"width\");"
    },
    {
        "line": 76,
        "fullcodeline": "sps->height = gf_bs_read_ue_log(bs, \"height\");"
    },
    {
        "line": 99,
        "fullcodeline": "sps->bit_depth_luma = 8 + gf_bs_read_ue_log(bs, \"bit_depth_luma_minus8\");"
    },
    {
        "line": 100,
        "fullcodeline": "sps->bit_depth_chroma = 8 + gf_bs_read_ue_log(bs, \"bit_depth_chroma_minus8\");"
    },
    {
        "line": 107,
        "fullcodeline": "for (i = sps->sub_layer_ordering_info_present_flag ? 0 : sps->max_sub_layers_minus1; i <= sps->max_sub_layers_minus1; i++) {"
    },
    {
        "line": 166,
        "fullcodeline": "return -1;"
    },
    {
        "line": 172,
        "fullcodeline": "if (!ret) {"
    },
    {
        "line": 180,
        "fullcodeline": "for (i = 0; i < sps->num_long_term_ref_pic_sps; i++) {"
    },
    {
        "line": 205,
        "fullcodeline": "if ((sps->overscan_info_present = gf_bs_read_int_log(bs, 1, \"overscan_info_present\")))"
    },
    {
        "line": 219,
        "fullcodeline": "if ((sps->chroma_loc_info_present_flag = gf_bs_read_int_log(bs, 1, \"chroma_loc_info_present_flag\"))) {"
    },
    {
        "line": 228,
        "fullcodeline": "if ((sps->default_display_window_flag = gf_bs_read_int_log(bs, 1, \"default_display_window_flag\"))) {"
    },
    {
        "line": 248,
        "fullcodeline": "if (gf_bs_read_int_log(bs, 1, \"bitstream_restriction_flag\")) {"
    },
    {
        "line": 56,
        "fullcodeline": "sps->rep_format_idx = gf_bs_read_int_log(bs, 8, \"rep_format_idx\");"
    },
    {
        "line": 73,
        "fullcodeline": "if (sps->chroma_format_idc == 3)"
    },
    {
        "line": 77,
        "fullcodeline": "if ((sps->cw_flag = gf_bs_read_int_log(bs, 1, \"conformance_window_flag\"))) {"
    },
    {
        "line": 108,
        "fullcodeline": "gf_bs_read_ue_log_idx(bs, \"max_dec_pic_buffering\", i);"
    },
    {
        "line": 109,
        "fullcodeline": "gf_bs_read_ue_log_idx(bs, \"num_reorder_pics\", i);"
    },
    {
        "line": 110,
        "fullcodeline": "gf_bs_read_ue_log_idx(bs, \"max_latency_increase\", i);"
    },
    {
        "line": 142,
        "fullcodeline": "sps->infer_scaling_list_flag = gf_bs_read_int_log(bs, 1, \"infer_scaling_list_flag\");"
    },
    {
        "line": 145,
        "fullcodeline": "sps->scaling_list_ref_layer_id = gf_bs_read_int_log(bs, 6, \"scaling_list_ref_layer_id\");"
    },
    {
        "line": 173,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CODING, (\"[HEVC] Invalid short_term_ref_pic_set\\n\"));"
    },
    {
        "line": 181,
        "fullcodeline": "gf_bs_read_int_log_idx(bs, sps->log2_max_pic_order_cnt_lsb, \"lt_ref_pic_poc_lsb_sps\", i);"
    },
    {
        "line": 182,
        "fullcodeline": "gf_bs_read_int_log_idx(bs, 1, \"used_by_curr_pic_lt_sps_flag\", i);"
    },
    {
        "line": 194,
        "fullcodeline": "sps->sar_idc = gf_bs_read_int_log(bs, 8, \"aspect_ratio_idc\");"
    },
    {
        "line": 206,
        "fullcodeline": "sps->overscan_appropriate = gf_bs_read_int_log(bs, 1, \"overscan_appropriate\");"
    },
    {
        "line": 210,
        "fullcodeline": "sps->video_format = gf_bs_read_int_log(bs, 3, \"video_format\");"
    },
    {
        "line": 211,
        "fullcodeline": "sps->video_full_range_flag = gf_bs_read_int_log(bs, 1, \"video_full_range_flag\");"
    },
    {
        "line": 220,
        "fullcodeline": "sps->chroma_sample_loc_type_top_field = gf_bs_read_ue_log(bs, \"chroma_sample_loc_type_top_field\");"
    },
    {
        "line": 221,
        "fullcodeline": "sps->chroma_sample_loc_type_bottom_field = gf_bs_read_ue_log(bs, \"chroma_sample_loc_type_bottom_field\");"
    },
    {
        "line": 229,
        "fullcodeline": "sps->left_offset = gf_bs_read_ue_log(bs, \"display_window_left_offset\");"
    },
    {
        "line": 230,
        "fullcodeline": "sps->right_offset = gf_bs_read_ue_log(bs, \"display_window_right_offset\");"
    },
    {
        "line": 231,
        "fullcodeline": "sps->top_offset = gf_bs_read_ue_log(bs, \"display_window_top_offset\");"
    },
    {
        "line": 232,
        "fullcodeline": "sps->bottom_offset = gf_bs_read_ue_log(bs, \"display_window_bottom_offset\");"
    },
    {
        "line": 237,
        "fullcodeline": "sps->num_units_in_tick = gf_bs_read_int_log(bs, 32, \"num_units_in_tick\");"
    },
    {
        "line": 238,
        "fullcodeline": "sps->time_scale = gf_bs_read_int_log(bs, 32, \"time_scale\");"
    },
    {
        "line": 239,
        "fullcodeline": "sps->poc_proportional_to_timing_flag = gf_bs_read_int_log(bs, 1, \"poc_proportional_to_timing_flag\");"
    },
    {
        "line": 249,
        "fullcodeline": "gf_bs_read_int_log(bs, 1, \"tiles_fixed_structure_flag\");"
    },
    {
        "line": 250,
        "fullcodeline": "gf_bs_read_int_log(bs, 1, \"motion_vectors_over_pic_boundaries_flag\");"
    },
    {
        "line": 251,
        "fullcodeline": "gf_bs_read_int_log(bs, 1, \"restricted_ref_pic_lists_flag\");"
    },
    {
        "line": 252,
        "fullcodeline": "gf_bs_read_ue_log(bs, \"min_spatial_segmentation_idc\");"
    },
    {
        "line": 253,
        "fullcodeline": "gf_bs_read_ue_log(bs, \"max_bytes_per_pic_denom\");"
    },
    {
        "line": 254,
        "fullcodeline": "gf_bs_read_ue_log(bs, \"max_bits_per_min_cu_denom\");"
    },
    {
        "line": 255,
        "fullcodeline": "gf_bs_read_ue_log(bs, \"log2_max_mv_length_horizontal\");"
    },
    {
        "line": 256,
        "fullcodeline": "gf_bs_read_ue_log(bs, \"log2_max_mv_length_vertical\");"
    },
    {
        "line": 74,
        "fullcodeline": "sps->separate_colour_plane_flag = gf_bs_read_int_log(bs, 1, \"separate_colour_plane_flag\");"
    },
    {
        "line": 91,
        "fullcodeline": "sps->cw_left = gf_bs_read_ue_log(bs, \"conformance_window_left\");"
    },
    {
        "line": 92,
        "fullcodeline": "sps->cw_right = gf_bs_read_ue_log(bs, \"conformance_window_right\");"
    },
    {
        "line": 93,
        "fullcodeline": "sps->cw_top = gf_bs_read_ue_log(bs, \"conformance_window_top\");"
    },
    {
        "line": 94,
        "fullcodeline": "sps->cw_bottom = gf_bs_read_ue_log(bs, \"conformance_window_bottom\");"
    },
    {
        "line": 96,
        "fullcodeline": "sps->width -= SubWidthC * (sps->cw_left + sps->cw_right);"
    },
    {
        "line": 97,
        "fullcodeline": "sps->height -= SubHeightC * (sps->cw_top + sps->cw_bottom);"
    },
    {
        "line": 148,
        "fullcodeline": "sps->scaling_list_data_present_flag = gf_bs_read_int_log(bs, 1, \"scaling_list_data_present_flag\");"
    },
    {
        "line": 174,
        "fullcodeline": "return -1;"
    },
    {
        "line": 195,
        "fullcodeline": "if (sps->sar_idc == 255) {"
    },
    {
        "line": 212,
        "fullcodeline": "if ((sps->colour_description_present_flag = gf_bs_read_int_log(bs, 1, \"colour_description_present_flag\"))) {"
    },
    {
        "line": 242,
        "fullcodeline": "if ((sps->hrd_parameters_present_flag = gf_bs_read_int_log(bs, 1, \"hrd_parameters_present_flag\"))) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (sps->chroma_format_idc == 1) {"
    },
    {
        "line": 196,
        "fullcodeline": "sps->sar_width = gf_bs_read_int_log(bs, 16, \"aspect_ratio_width\");"
    },
    {
        "line": 197,
        "fullcodeline": "sps->sar_height = gf_bs_read_int_log(bs, 16, \"aspect_ratio_height\");"
    },
    {
        "line": 213,
        "fullcodeline": "sps->colour_primaries = gf_bs_read_int_log(bs, 8, \"colour_primaries\");"
    },
    {
        "line": 214,
        "fullcodeline": "sps->transfer_characteristic = gf_bs_read_int_log(bs, 8, \"transfer_characteristic\");"
    },
    {
        "line": 215,
        "fullcodeline": "sps->matrix_coeffs = gf_bs_read_int_log(bs, 8, \"matrix_coefficients\");"
    },
    {
        "line": 241,
        "fullcodeline": "sps->num_ticks_poc_diff_one_minus1 = gf_bs_read_ue_log(bs, \"num_ticks_poc_diff_one_minus1\");"
    },
    {
        "line": 81,
        "fullcodeline": "SubWidthC = SubHeightC = 2;"
    },
    {
        "line": 150,
        "fullcodeline": "hevc_scaling_list_data(bs);"
    },
    {
        "line": 199,
        "fullcodeline": "else if (sps->sar_idc < 17) {"
    },
    {
        "line": 83,
        "fullcodeline": "else if (sps->chroma_format_idc == 2) {"
    },
    {
        "line": 84,
        "fullcodeline": "SubWidthC = 2;"
    },
    {
        "line": 85,
        "fullcodeline": "SubHeightC = 1;"
    },
    {
        "line": 88,
        "fullcodeline": "SubWidthC = SubHeightC = 1;"
    }
]