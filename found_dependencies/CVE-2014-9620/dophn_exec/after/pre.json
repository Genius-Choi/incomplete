[
    {
        "line": 7,
        "fullcodeline": "const char *linking_style = \"statically\";"
    },
    {
        "line": 8,
        "fullcodeline": "const char *interp = \"\";"
    },
    {
        "line": 9,
        "fullcodeline": "unsigned char nbuf[BUFSIZ];"
    },
    {
        "line": 10,
        "fullcodeline": "char ibuf[BUFSIZ];"
    },
    {
        "line": 14,
        "fullcodeline": "if (size != xph_sizeof) {"
    },
    {
        "line": 26,
        "fullcodeline": "off += size;"
    },
    {
        "line": 27,
        "fullcodeline": "bufsize = 0;"
    },
    {
        "line": 28,
        "fullcodeline": "align = 4;"
    },
    {
        "line": 93,
        "fullcodeline": "if (file_printf(ms, \", %s linked\", linking_style)"
    },
    {
        "line": 94,
        "fullcodeline": "== -1)"
    },
    {
        "line": 15,
        "fullcodeline": "if (file_printf(ms, \", corrupted program header size\") == -1)"
    },
    {
        "line": 95,
        "fullcodeline": "return -1;"
    },
    {
        "line": 21,
        "fullcodeline": "if (pread(fd, xph_addr, xph_sizeof, off) < (ssize_t)xph_sizeof) {"
    },
    {
        "line": 33,
        "fullcodeline": "linking_style = \"dynamically\";"
    },
    {
        "line": 48,
        "fullcodeline": "len = xph_filesz < sizeof(nbuf) ? xph_filesz"
    },
    {
        "line": 50,
        "fullcodeline": "bufsize = pread(fd, nbuf, len, xph_offset);"
    },
    {
        "line": 78,
        "fullcodeline": "offset = 0;"
    },
    {
        "line": 97,
        "fullcodeline": "if (file_printf(ms, \", interpreter %s\","
    },
    {
        "line": 98,
        "fullcodeline": "file_printable(ibuf, sizeof(ibuf), interp)) == -1)"
    },
    {
        "line": 16,
        "fullcodeline": "return -1;"
    },
    {
        "line": 23,
        "fullcodeline": "return -1;"
    },
    {
        "line": 51,
        "fullcodeline": "if (bufsize == -1) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (bufsize && nbuf[0]) {"
    },
    {
        "line": 99,
        "fullcodeline": "return -1;"
    },
    {
        "line": 38,
        "fullcodeline": "if (((align = xph_align) & 0x80000000UL) != 0 ||"
    },
    {
        "line": 39,
        "fullcodeline": "align < 4) {"
    },
    {
        "line": 44,
        "fullcodeline": "align = 4;"
    },
    {
        "line": 57,
        "fullcodeline": "if (fsize != SIZE_UNKNOWN && xph_offset > fsize) {"
    },
    {
        "line": 68,
        "fullcodeline": "nbuf[bufsize - 1] = '\\0';"
    },
    {
        "line": 69,
        "fullcodeline": "interp = (const char *)nbuf;"
    },
    {
        "line": 82,
        "fullcodeline": "offset = donote(ms, nbuf, offset,"
    },
    {
        "line": 53,
        "fullcodeline": "return -1;"
    },
    {
        "line": 71,
        "fullcodeline": "interp = \"*empty*\";"
    },
    {
        "line": 80,
        "fullcodeline": "if (offset >= (size_t)bufsize)"
    },
    {
        "line": 85,
        "fullcodeline": "if (offset == 0)"
    },
    {
        "line": 40,
        "fullcodeline": "if (file_printf(ms,"
    },
    {
        "line": 42,
        "fullcodeline": "(unsigned long)align) == -1)"
    },
    {
        "line": 43,
        "fullcodeline": "return -1;"
    }
]