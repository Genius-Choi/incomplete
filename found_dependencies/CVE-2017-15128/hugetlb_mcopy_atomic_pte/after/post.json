[
    {
        "line": 11,
        "fullcodeline": "int vm_shared = dst_vma->vm_flags & VM_SHARED;"
    },
    {
        "line": 12,
        "fullcodeline": "struct hstate *h = hstate_vma(dst_vma);"
    },
    {
        "line": 45,
        "fullcodeline": "__SetPageUptodate(page);"
    },
    {
        "line": 46,
        "fullcodeline": "set_page_huge_active(page);"
    },
    {
        "line": 49,
        "fullcodeline": "idx = vma_hugecache_offset(h, dst_vma, dst_addr);"
    },
    {
        "line": 71,
        "fullcodeline": "ptl = huge_pte_lockptr(h, dst_mm, dst_pte);"
    },
    {
        "line": 72,
        "fullcodeline": "spin_lock(ptl);"
    },
    {
        "line": 83,
        "fullcodeline": "size = i_size_read(mapping->host) >> huge_page_shift(h);"
    },
    {
        "line": 84,
        "fullcodeline": "ret = -EFAULT;"
    },
    {
        "line": 88,
        "fullcodeline": "ret = -EEXIST;"
    },
    {
        "line": 99,
        "fullcodeline": "_dst_pte = make_huge_pte(dst_vma, page, dst_vma->vm_flags & VM_WRITE);"
    },
    {
        "line": 102,
        "fullcodeline": "_dst_pte = pte_mkyoung(_dst_pte);"
    },
    {
        "line": 104,
        "fullcodeline": "set_huge_pte_at(dst_mm, dst_addr, dst_pte, _dst_pte);"
    },
    {
        "line": 106,
        "fullcodeline": "(void)huge_ptep_set_access_flags(dst_vma, dst_addr, dst_pte, _dst_pte,"
    },
    {
        "line": 108,
        "fullcodeline": "hugetlb_count_add(pages_per_huge_page(h), dst_mm);"
    },
    {
        "line": 111,
        "fullcodeline": "update_mmu_cache(dst_vma, dst_addr, dst_pte);"
    },
    {
        "line": 113,
        "fullcodeline": "spin_unlock(ptl);"
    },
    {
        "line": 116,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 120,
        "fullcodeline": "spin_unlock(ptl);"
    },
    {
        "line": 124,
        "fullcodeline": "put_page(page);"
    },
    {
        "line": 85,
        "fullcodeline": "if (idx >= size)"
    },
    {
        "line": 89,
        "fullcodeline": "if (!huge_pte_none(huge_ptep_get(dst_pte)))"
    },
    {
        "line": 100,
        "fullcodeline": "if (dst_vma->vm_flags & VM_WRITE)"
    },
    {
        "line": 19,
        "fullcodeline": "ret = -ENOMEM;"
    },
    {
        "line": 20,
        "fullcodeline": "page = alloc_huge_page(dst_vma, dst_addr, 0);"
    },
    {
        "line": 55,
        "fullcodeline": "size = i_size_read(mapping->host) >> huge_page_shift(h);"
    },
    {
        "line": 56,
        "fullcodeline": "ret = -EFAULT;"
    },
    {
        "line": 66,
        "fullcodeline": "ret = huge_add_to_page_cache(page, mapping, idx);"
    },
    {
        "line": 93,
        "fullcodeline": "page_dup_rmap(page, true);"
    },
    {
        "line": 101,
        "fullcodeline": "_dst_pte = huge_pte_mkdirty(_dst_pte);"
    },
    {
        "line": 107,
        "fullcodeline": "dst_vma->vm_flags & VM_WRITE);"
    },
    {
        "line": 115,
        "fullcodeline": "unlock_page(page);"
    },
    {
        "line": 122,
        "fullcodeline": "unlock_page(page);"
    },
    {
        "line": 21,
        "fullcodeline": "if (IS_ERR(page))"
    },
    {
        "line": 29,
        "fullcodeline": "if (unlikely(ret)) {"
    },
    {
        "line": 36,
        "fullcodeline": "page = *pagep;"
    },
    {
        "line": 37,
        "fullcodeline": "*pagep = NULL;"
    },
    {
        "line": 57,
        "fullcodeline": "if (idx >= size)"
    },
    {
        "line": 95,
        "fullcodeline": "ClearPagePrivate(page);"
    },
    {
        "line": 96,
        "fullcodeline": "hugepage_add_new_anon_rmap(page, dst_vma, dst_addr);"
    },
    {
        "line": 30,
        "fullcodeline": "ret = -EFAULT;"
    },
    {
        "line": 31,
        "fullcodeline": "*pagep = page;"
    }
]