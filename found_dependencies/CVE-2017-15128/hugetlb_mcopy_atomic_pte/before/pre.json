[
    {
        "line": 8,
        "fullcodeline": "int vm_shared = dst_vma->vm_flags & VM_SHARED;"
    },
    {
        "line": 9,
        "fullcodeline": "struct hstate *h = hstate_vma(dst_vma);"
    },
    {
        "line": 42,
        "fullcodeline": "__SetPageUptodate(page);"
    },
    {
        "line": 43,
        "fullcodeline": "set_page_huge_active(page);"
    },
    {
        "line": 57,
        "fullcodeline": "ptl = huge_pte_lockptr(h, dst_mm, dst_pte);"
    },
    {
        "line": 58,
        "fullcodeline": "spin_lock(ptl);"
    },
    {
        "line": 60,
        "fullcodeline": "ret = -EEXIST;"
    },
    {
        "line": 71,
        "fullcodeline": "_dst_pte = make_huge_pte(dst_vma, page, dst_vma->vm_flags & VM_WRITE);"
    },
    {
        "line": 74,
        "fullcodeline": "_dst_pte = pte_mkyoung(_dst_pte);"
    },
    {
        "line": 76,
        "fullcodeline": "set_huge_pte_at(dst_mm, dst_addr, dst_pte, _dst_pte);"
    },
    {
        "line": 78,
        "fullcodeline": "(void)huge_ptep_set_access_flags(dst_vma, dst_addr, dst_pte, _dst_pte,"
    },
    {
        "line": 80,
        "fullcodeline": "hugetlb_count_add(pages_per_huge_page(h), dst_mm);"
    },
    {
        "line": 83,
        "fullcodeline": "update_mmu_cache(dst_vma, dst_addr, dst_pte);"
    },
    {
        "line": 85,
        "fullcodeline": "spin_unlock(ptl);"
    },
    {
        "line": 88,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 92,
        "fullcodeline": "spin_unlock(ptl);"
    },
    {
        "line": 96,
        "fullcodeline": "put_page(page);"
    },
    {
        "line": 15,
        "fullcodeline": "if (!*pagep) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (!huge_pte_none(huge_ptep_get(dst_pte)))"
    },
    {
        "line": 72,
        "fullcodeline": "if (dst_vma->vm_flags & VM_WRITE)"
    },
    {
        "line": 16,
        "fullcodeline": "ret = -ENOMEM;"
    },
    {
        "line": 17,
        "fullcodeline": "page = alloc_huge_page(dst_vma, dst_addr, 0);"
    },
    {
        "line": 49,
        "fullcodeline": "struct address_space *mapping = dst_vma->vm_file->f_mapping;"
    },
    {
        "line": 50,
        "fullcodeline": "pgoff_t idx = vma_hugecache_offset(h, dst_vma, dst_addr);"
    },
    {
        "line": 52,
        "fullcodeline": "ret = huge_add_to_page_cache(page, mapping, idx);"
    },
    {
        "line": 65,
        "fullcodeline": "page_dup_rmap(page, true);"
    },
    {
        "line": 73,
        "fullcodeline": "_dst_pte = huge_pte_mkdirty(_dst_pte);"
    },
    {
        "line": 79,
        "fullcodeline": "dst_vma->vm_flags & VM_WRITE);"
    },
    {
        "line": 87,
        "fullcodeline": "unlock_page(page);"
    },
    {
        "line": 94,
        "fullcodeline": "unlock_page(page);"
    },
    {
        "line": 18,
        "fullcodeline": "if (IS_ERR(page))"
    },
    {
        "line": 26,
        "fullcodeline": "if (unlikely(ret)) {"
    },
    {
        "line": 33,
        "fullcodeline": "page = *pagep;"
    },
    {
        "line": 34,
        "fullcodeline": "*pagep = NULL;"
    },
    {
        "line": 67,
        "fullcodeline": "ClearPagePrivate(page);"
    },
    {
        "line": 68,
        "fullcodeline": "hugepage_add_new_anon_rmap(page, dst_vma, dst_addr);"
    },
    {
        "line": 27,
        "fullcodeline": "ret = -EFAULT;"
    },
    {
        "line": 28,
        "fullcodeline": "*pagep = page;"
    }
]