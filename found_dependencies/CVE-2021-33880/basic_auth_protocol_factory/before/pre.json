[
    {
        "line": 45,
        "fullcodeline": "if (credentials is None) == (check_credentials is None):"
    },
    {
        "line": 48,
        "fullcodeline": "if credentials is not None:"
    },
    {
        "line": 68,
        "fullcodeline": "if create_protocol is None:"
    },
    {
        "line": 75,
        "fullcodeline": "return functools.partial("
    },
    {
        "line": 46,
        "fullcodeline": "raise TypeError(\"provide either credentials or check_credentials\")"
    },
    {
        "line": 70,
        "fullcodeline": "create_protocol = cast("
    },
    {
        "line": 49,
        "fullcodeline": "if is_credentials(credentials):"
    },
    {
        "line": 51,
        "fullcodeline": "async def check_credentials(username: str, password: str) -> bool:"
    },
    {
        "line": 54,
        "fullcodeline": "elif isinstance(credentials, Iterable):"
    },
    {
        "line": 71,
        "fullcodeline": "Callable[[Any], BasicAuthWebSocketServerProtocol],"
    },
    {
        "line": 55,
        "fullcodeline": "credentials_list = list(credentials)"
    },
    {
        "line": 66,
        "fullcodeline": "raise TypeError(f\"invalid credentials argument: {credentials}\")"
    },
    {
        "line": 56,
        "fullcodeline": "if all(is_credentials(item) for item in credentials_list):"
    },
    {
        "line": 57,
        "fullcodeline": "credentials_dict = dict(credentials_list)"
    },
    {
        "line": 59,
        "fullcodeline": "async def check_credentials(username: str, password: str) -> bool:"
    },
    {
        "line": 63,
        "fullcodeline": "raise TypeError(f\"invalid credentials argument: {credentials}\")"
    }
]