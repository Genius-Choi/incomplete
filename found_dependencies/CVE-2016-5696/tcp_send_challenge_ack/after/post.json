[
    {
        "line": 6,
        "fullcodeline": "struct tcp_sock *tp = tcp_sk(sk);"
    },
    {
        "line": 16,
        "fullcodeline": "now = jiffies / HZ;"
    },
    {
        "line": 24,
        "fullcodeline": "count = READ_ONCE(challenge_count);"
    },
    {
        "line": 10,
        "fullcodeline": "if (tcp_oow_rate_limited(sock_net(sk), skb,"
    },
    {
        "line": 17,
        "fullcodeline": "if (now != challenge_timestamp) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (count > 0) {"
    },
    {
        "line": 18,
        "fullcodeline": "u32 half = (sysctl_tcp_challenge_ack_limit + 1) >> 1;"
    },
    {
        "line": 20,
        "fullcodeline": "challenge_timestamp = now;"
    },
    {
        "line": 21,
        "fullcodeline": "WRITE_ONCE(challenge_count, half +"
    },
    {
        "line": 26,
        "fullcodeline": "WRITE_ONCE(challenge_count, count - 1);"
    },
    {
        "line": 27,
        "fullcodeline": "NET_INC_STATS(sock_net(sk), LINUX_MIB_TCPCHALLENGEACK);"
    },
    {
        "line": 28,
        "fullcodeline": "tcp_send_ack(sk);"
    },
    {
        "line": 22,
        "fullcodeline": "prandom_u32_max(sysctl_tcp_challenge_ack_limit));"
    }
]