[
    {
        "line": 4,
        "fullcodeline": "const char*    WAYLAND_DISPLAY             = getenv(\"WAYLAND_DISPLAY\");"
    },
    {
        "line": 5,
        "fullcodeline": "const char*    XCURSOR_SIZE                = getenv(\"XCURSOR_SIZE\");"
    },
    {
        "line": 6,
        "fullcodeline": "const char*    HYPRLAND_INSTANCE_SIGNATURE = getenv(\"HYPRLAND_INSTANCE_SIGNATURE\");"
    },
    {
        "line": 10,
        "fullcodeline": "std::string cmd ="
    },
    {
        "line": 14,
        "fullcodeline": "const auto RETVAL = execAndGet(cmd.c_str());"
    },
    {
        "line": 27,
        "fullcodeline": "const auto SELECTION = RETVAL.substr(RETVAL.find(\"[SELECTION]\") + 11);"
    },
    {
        "line": 29,
        "fullcodeline": "Debug::log(LOG, \"[sc] Selection: {}\", SELECTION);"
    },
    {
        "line": 31,
        "fullcodeline": "const auto FLAGS = SELECTION.substr(0, SELECTION.find_first_of('/'));"
    },
    {
        "line": 32,
        "fullcodeline": "const auto SEL   = SELECTION.substr(SELECTION.find_first_of('/') + 1);"
    },
    {
        "line": 11,
        "fullcodeline": "std::format(\"WAYLAND_DISPLAY='{}' QT_QPA_PLATFORM='wayland' XCURSOR_SIZE='{}' HYPRLAND_INSTANCE_SIGNATURE='{}' XDPH_WINDOW_SHARING_LIST='{}' hyprland-share-picker 2>&1\","
    },
    {
        "line": 16,
        "fullcodeline": "if (!RETVAL.contains(\"[SELECTION]\")) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (SEL.find(\"screen:\") == 0) {"
    },
    {
        "line": 12,
        "fullcodeline": "WAYLAND_DISPLAY ? WAYLAND_DISPLAY : \"\", XCURSOR_SIZE ? XCURSOR_SIZE : \"24\", HYPRLAND_INSTANCE_SIGNATURE ? HYPRLAND_INSTANCE_SIGNATURE : \"0\", buildWindowList());"
    },
    {
        "line": 43,
        "fullcodeline": "data.type   = TYPE_OUTPUT;"
    },
    {
        "line": 44,
        "fullcodeline": "data.output = SEL.substr(7);"
    },
    {
        "line": 46,
        "fullcodeline": "data.output.pop_back();"
    },
    {
        "line": 19,
        "fullcodeline": "if (RETVAL.contains(\"qt.qpa.plugin: Could not find the Qt platform plugin\")) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (flag == 'r') {"
    },
    {
        "line": 21,
        "fullcodeline": "addHyprlandNotification(\"3\", 7000, \"0\", \"[xdph] Could not open the picker: qt5-wayland or qt6-wayland doesn't seem to be installed.\");"
    },
    {
        "line": 36,
        "fullcodeline": "data.allowToken = true;"
    },
    {
        "line": 47,
        "fullcodeline": "} else if (SEL.find(\"window:\") == 0) {"
    },
    {
        "line": 38,
        "fullcodeline": "Debug::log(LOG, \"[screencopy] unknown flag from share-picker: {}\", flag);"
    },
    {
        "line": 48,
        "fullcodeline": "data.type         = TYPE_WINDOW;"
    },
    {
        "line": 49,
        "fullcodeline": "uint32_t handleLo = std::stoull(SEL.substr(7));"
    },
    {
        "line": 50,
        "fullcodeline": "data.windowHandle = nullptr;"
    },
    {
        "line": 53,
        "fullcodeline": "uint32_t handleLoE = (uint32_t)(((uint64_t)e->handle) & 0xFFFFFFFF);"
    },
    {
        "line": 61,
        "fullcodeline": "} else if (SEL.find(\"region:\") == 0) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (handleLoE == handleLo) {"
    },
    {
        "line": 62,
        "fullcodeline": "std::string running = SEL;"
    },
    {
        "line": 63,
        "fullcodeline": "running             = running.substr(7);"
    },
    {
        "line": 64,
        "fullcodeline": "data.type           = TYPE_GEOMETRY;"
    },
    {
        "line": 65,
        "fullcodeline": "data.output         = running.substr(0, running.find_first_of('@'));"
    },
    {
        "line": 66,
        "fullcodeline": "running             = running.substr(running.find_first_of('@') + 1);"
    },
    {
        "line": 68,
        "fullcodeline": "data.x  = std::stoi(running.substr(0, running.find_first_of(',')));"
    },
    {
        "line": 69,
        "fullcodeline": "running = running.substr(running.find_first_of(',') + 1);"
    },
    {
        "line": 70,
        "fullcodeline": "data.y  = std::stoi(running.substr(0, running.find_first_of(',')));"
    },
    {
        "line": 71,
        "fullcodeline": "running = running.substr(running.find_first_of(',') + 1);"
    },
    {
        "line": 72,
        "fullcodeline": "data.w  = std::stoi(running.substr(0, running.find_first_of(',')));"
    },
    {
        "line": 73,
        "fullcodeline": "running = running.substr(running.find_first_of(',') + 1);"
    },
    {
        "line": 74,
        "fullcodeline": "data.h  = std::stoi(running);"
    }
]