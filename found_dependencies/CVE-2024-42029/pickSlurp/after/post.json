[
    {
        "line": 2,
        "fullcodeline": "const std::string PICK_COLOR_CMD = \"grim -g \\\"$(slurp -p)\\\" -t ppm -\";"
    },
    {
        "line": 3,
        "fullcodeline": "std::string       ppmColor       = execAndGet(PICK_COLOR_CMD.c_str());"
    },
    {
        "line": 6,
        "fullcodeline": "ppmColor = std::regex_replace(ppmColor, std::regex(\"\\\\s+\"), std::string(\" \"));"
    },
    {
        "line": 9,
        "fullcodeline": "if (!ppmColor.starts_with(\"P6 1 1 \")) {"
    },
    {
        "line": 10,
        "fullcodeline": "Debug::log(ERR, \"grim did not return a PPM Image for us.\");"
    },
    {
        "line": 11,
        "fullcodeline": "sendEmptyDbusMethodReply(call, 1);"
    },
    {
        "line": 17,
        "fullcodeline": "std::string maxValString = ppmColor.substr(7, ppmColor.size());"
    },
    {
        "line": 18,
        "fullcodeline": "maxValString             = maxValString.substr(0, maxValString.find(' '));"
    },
    {
        "line": 19,
        "fullcodeline": "uint32_t maxVal          = std::stoi(maxValString);"
    },
    {
        "line": 39,
        "fullcodeline": "auto                                            reply = call.createReply();"
    },
    {
        "line": 41,
        "fullcodeline": "std::unordered_map<std::string, sdbus::Variant> results;"
    },
    {
        "line": 42,
        "fullcodeline": "results[\"color\"] = sdbus::Struct(std::tuple{r, g, b});"
    },
    {
        "line": 44,
        "fullcodeline": "reply << (uint32_t)0;"
    },
    {
        "line": 45,
        "fullcodeline": "reply << results;"
    },
    {
        "line": 46,
        "fullcodeline": "reply.send();"
    },
    {
        "line": 24,
        "fullcodeline": "if (maxVal < 256) {"
    },
    {
        "line": 48,
        "fullcodeline": "Debug::log(ERR, \"Converting PPM to RGB failed. This is likely a string to integer error.\");"
    },
    {
        "line": 49,
        "fullcodeline": "sendEmptyDbusMethodReply(call, 1);"
    },
    {
        "line": 25,
        "fullcodeline": "std::string byteString = ppmColor.substr(11, 14);"
    },
    {
        "line": 27,
        "fullcodeline": "r = (uint8_t)byteString[0] / (maxVal * 1.0);"
    },
    {
        "line": 28,
        "fullcodeline": "g = (uint8_t)byteString[1] / (maxVal * 1.0);"
    },
    {
        "line": 29,
        "fullcodeline": "b = (uint8_t)byteString[2] / (maxVal * 1.0);"
    },
    {
        "line": 32,
        "fullcodeline": "std::string byteString = ppmColor.substr(11, 17);"
    },
    {
        "line": 34,
        "fullcodeline": "r = ((byteString[0] << 8) | byteString[1]) / (maxVal * 1.0);"
    },
    {
        "line": 35,
        "fullcodeline": "g = ((byteString[2] << 8) | byteString[3]) / (maxVal * 1.0);"
    },
    {
        "line": 36,
        "fullcodeline": "b = ((byteString[4] << 8) | byteString[5]) / (maxVal * 1.0);"
    }
]