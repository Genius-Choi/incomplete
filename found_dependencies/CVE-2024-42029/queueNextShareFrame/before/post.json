[
    {
        "line": 2,
        "fullcodeline": "const auto PSTREAM = m_pPipewire->streamFromSession(pSession);"
    },
    {
        "line": 8,
        "fullcodeline": "const auto FRAMETOOKMS           = std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now() - pSession->sharingData.begunFrame).count() / 1000.0;"
    },
    {
        "line": 9,
        "fullcodeline": "const auto MSTILNEXTREFRESH      = 1000.0 / (pSession->sharingData.framerate) - FRAMETOOKMS;"
    },
    {
        "line": 10,
        "fullcodeline": "pSession->sharingData.begunFrame = std::chrono::system_clock::now();"
    },
    {
        "line": 12,
        "fullcodeline": "Debug::log(TRACE, \"[screencopy] set fps {}, frame took {:.2f}ms, ms till next refresh {:.2f}, estimated actual fps: {:.2f}\", pSession->sharingData.framerate, FRAMETOOKMS,"
    },
    {
        "line": 15,
        "fullcodeline": "g_pPortalManager->addTimer({std::clamp(MSTILNEXTREFRESH - 1.0 /* safezone */, 6.0, 1000.0), [pSession]() { g_pPortalManager->m_sPortals.screencopy->startFrameCopy(pSession); }});"
    },
    {
        "line": 4,
        "fullcodeline": "if (PSTREAM && !PSTREAM->streamState)"
    },
    {
        "line": 13,
        "fullcodeline": "MSTILNEXTREFRESH, std::clamp(1000.0 / FRAMETOOKMS, 1.0, (double)pSession->sharingData.framerate));"
    }
]