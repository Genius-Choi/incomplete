[
    {
        "line": 3,
        "fullcodeline": "call >> requestHandle;"
    },
    {
        "line": 6,
        "fullcodeline": "call >> appID;"
    },
    {
        "line": 9,
        "fullcodeline": "call >> parentWindow;"
    },
    {
        "line": 11,
        "fullcodeline": "std::unordered_map<std::string, sdbus::Variant> options;"
    },
    {
        "line": 12,
        "fullcodeline": "call >> options;"
    },
    {
        "line": 14,
        "fullcodeline": "Debug::log(LOG, \"[screenshot] New screenshot request:\");"
    },
    {
        "line": 15,
        "fullcodeline": "Debug::log(LOG, \"[screenshot]  | {}\", requestHandle.c_str());"
    },
    {
        "line": 16,
        "fullcodeline": "Debug::log(LOG, \"[screenshot]  | appid: {}\", appID);"
    },
    {
        "line": 18,
        "fullcodeline": "bool isInteractive = options.count(\"interactive\") && options[\"interactive\"].get<bool>() && inShellPath(\"slurp\");"
    },
    {
        "line": 22,
        "fullcodeline": "const auto RUNTIME_DIR = getenv(\"XDG_RUNTIME_DIR\");"
    },
    {
        "line": 23,
        "fullcodeline": "srand(time(nullptr));"
    },
    {
        "line": 25,
        "fullcodeline": "const std::string                               HYPR_DIR             = RUNTIME_DIR ? std::string{RUNTIME_DIR} + \"/hypr/\" : \"/tmp/hypr/\";"
    },
    {
        "line": 26,
        "fullcodeline": "const std::string                               SNAP_FILE            = std::format(\"xdph_screenshot_{:x}.png\", rand()); // rand() is good enough"
    },
    {
        "line": 27,
        "fullcodeline": "const std::string                               FILE_PATH            = HYPR_DIR + SNAP_FILE;"
    },
    {
        "line": 28,
        "fullcodeline": "const std::string                               SNAP_CMD             = \"grim '\" + FILE_PATH + \"'\";"
    },
    {
        "line": 29,
        "fullcodeline": "const std::string                               SNAP_INTERACTIVE_CMD = \"grim -g \\\"$(slurp)\\\" '\" + FILE_PATH + \"'\";"
    },
    {
        "line": 31,
        "fullcodeline": "std::unordered_map<std::string, sdbus::Variant> results;"
    },
    {
        "line": 32,
        "fullcodeline": "results[\"uri\"] = \"file://\" + FILE_PATH;"
    },
    {
        "line": 34,
        "fullcodeline": "std::filesystem::remove(FILE_PATH);"
    },
    {
        "line": 35,
        "fullcodeline": "std::filesystem::create_directory(HYPR_DIR);"
    },
    {
        "line": 40,
        "fullcodeline": "lastScreenshot = FILE_PATH;"
    },
    {
        "line": 47,
        "fullcodeline": "uint32_t responseCode = std::filesystem::exists(FILE_PATH) ? 0 : 1;"
    },
    {
        "line": 49,
        "fullcodeline": "auto     reply = call.createReply();"
    },
    {
        "line": 50,
        "fullcodeline": "reply << responseCode;"
    },
    {
        "line": 51,
        "fullcodeline": "reply << results;"
    },
    {
        "line": 52,
        "fullcodeline": "reply.send();"
    },
    {
        "line": 38,
        "fullcodeline": "if (!lastScreenshot.empty())"
    },
    {
        "line": 43,
        "fullcodeline": "execAndGet(SNAP_INTERACTIVE_CMD.c_str());"
    },
    {
        "line": 45,
        "fullcodeline": "execAndGet(SNAP_CMD.c_str());"
    }
]