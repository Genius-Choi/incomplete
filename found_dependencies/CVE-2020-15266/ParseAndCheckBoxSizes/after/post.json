[
    {
        "line": 13,
        "fullcodeline": "*num_boxes = boxes.dim_size(0);"
    },
    {
        "line": 4,
        "fullcodeline": "if (boxes.NumElements() == 0 && box_index.NumElements() == 0) {"
    },
    {
        "line": 9,
        "fullcodeline": "if (boxes.dims() != 2) {"
    },
    {
        "line": 14,
        "fullcodeline": "if (boxes.dim_size(1) != 4) {"
    },
    {
        "line": 17,
        "fullcodeline": "for (int64 i = 0; i < *num_boxes; i++) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (box_index.dims() != 1) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (box_index.dim_size(0) != *num_boxes) {"
    },
    {
        "line": 37,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 5,
        "fullcodeline": "*num_boxes = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 10,
        "fullcodeline": "return errors::InvalidArgument(\"boxes must be 2-D\","
    },
    {
        "line": 15,
        "fullcodeline": "return errors::InvalidArgument(\"boxes must have 4 columns\");"
    },
    {
        "line": 18,
        "fullcodeline": "for (int64 j = 0; j < 4; j++) {"
    },
    {
        "line": 31,
        "fullcodeline": "return errors::InvalidArgument(\"box_index must be 1-D\","
    },
    {
        "line": 35,
        "fullcodeline": "return errors::InvalidArgument(\"box_index has incompatible shape\");"
    },
    {
        "line": 11,
        "fullcodeline": "boxes.shape().DebugString());"
    },
    {
        "line": 32,
        "fullcodeline": "box_index.shape().DebugString());"
    },
    {
        "line": 19,
        "fullcodeline": "if (!isfinite(boxes.tensor<float, 2>()(i, j))) {"
    },
    {
        "line": 20,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 22,
        "fullcodeline": "boxes.tensor<float, 2>()(i, 0), \", \","
    },
    {
        "line": 23,
        "fullcodeline": "boxes.tensor<float, 2>()(i, 1), \", \","
    },
    {
        "line": 24,
        "fullcodeline": "boxes.tensor<float, 2>()(i, 2), \", \","
    },
    {
        "line": 25,
        "fullcodeline": "boxes.tensor<float, 2>()(i, 3));"
    }
]