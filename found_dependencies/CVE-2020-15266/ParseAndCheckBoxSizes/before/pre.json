[
    {
        "line": 13,
        "fullcodeline": "*num_boxes = boxes.dim_size(0);"
    },
    {
        "line": 4,
        "fullcodeline": "if (boxes.NumElements() == 0 && box_index.NumElements() == 0) {"
    },
    {
        "line": 25,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 5,
        "fullcodeline": "*num_boxes = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "if (boxes.dims() != 2) {"
    },
    {
        "line": 14,
        "fullcodeline": "if (boxes.dim_size(1) != 4) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (box_index.dims() != 1) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (box_index.dim_size(0) != *num_boxes) {"
    },
    {
        "line": 6,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 10,
        "fullcodeline": "return errors::InvalidArgument(\"boxes must be 2-D\","
    },
    {
        "line": 15,
        "fullcodeline": "return errors::InvalidArgument(\"boxes must have 4 columns\");"
    },
    {
        "line": 19,
        "fullcodeline": "return errors::InvalidArgument(\"box_index must be 1-D\","
    },
    {
        "line": 23,
        "fullcodeline": "return errors::InvalidArgument(\"box_index has incompatible shape\");"
    },
    {
        "line": 11,
        "fullcodeline": "boxes.shape().DebugString());"
    },
    {
        "line": 20,
        "fullcodeline": "box_index.shape().DebugString());"
    }
]