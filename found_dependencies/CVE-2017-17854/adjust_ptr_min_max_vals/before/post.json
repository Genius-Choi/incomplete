[
    {
        "line": 6,
        "fullcodeline": "struct bpf_reg_state *regs = cur_regs(env), *dst_reg;"
    },
    {
        "line": 7,
        "fullcodeline": "bool known = tnum_is_const(off_reg->var_off);"
    },
    {
        "line": 8,
        "fullcodeline": "s64 smin_val = off_reg->smin_value, smax_val = off_reg->smax_value,"
    },
    {
        "line": 9,
        "fullcodeline": "smin_ptr = ptr_reg->smin_value, smax_ptr = ptr_reg->smax_value;"
    },
    {
        "line": 10,
        "fullcodeline": "u64 umin_val = off_reg->umin_value, umax_val = off_reg->umax_value,"
    },
    {
        "line": 11,
        "fullcodeline": "umin_ptr = ptr_reg->umin_value, umax_ptr = ptr_reg->umax_value;"
    },
    {
        "line": 12,
        "fullcodeline": "u8 opcode = BPF_OP(insn->code);"
    },
    {
        "line": 13,
        "fullcodeline": "u32 dst = insn->dst_reg;"
    },
    {
        "line": 15,
        "fullcodeline": "dst_reg = &regs[dst];"
    },
    {
        "line": 61,
        "fullcodeline": "dst_reg->type = ptr_reg->type;"
    },
    {
        "line": 62,
        "fullcodeline": "dst_reg->id = ptr_reg->id;"
    },
    {
        "line": 194,
        "fullcodeline": "__update_reg_bounds(dst_reg);"
    },
    {
        "line": 195,
        "fullcodeline": "__reg_deduce_bounds(dst_reg);"
    },
    {
        "line": 196,
        "fullcodeline": "__reg_bound_offset(dst_reg);"
    },
    {
        "line": 17,
        "fullcodeline": "if (WARN_ON_ONCE(known && (smin_val != smax_val))) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (WARN_ON_ONCE(known && (umin_val != umax_val))) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (BPF_CLASS(insn->code) != BPF_ALU64) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (ptr_reg->type == PTR_TO_MAP_VALUE_OR_NULL) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (ptr_reg->type == CONST_PTR_TO_MAP) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (ptr_reg->type == PTR_TO_PACKET_END) {"
    },
    {
        "line": 18,
        "fullcodeline": "print_verifier_state(env, env->cur_state);"
    },
    {
        "line": 19,
        "fullcodeline": "verbose(env,"
    },
    {
        "line": 24,
        "fullcodeline": "print_verifier_state(env, env->cur_state);"
    },
    {
        "line": 25,
        "fullcodeline": "verbose(env,"
    },
    {
        "line": 106,
        "fullcodeline": "dst_reg->var_off = tnum_add(ptr_reg->var_off, off_reg->var_off);"
    },
    {
        "line": 107,
        "fullcodeline": "dst_reg->off = ptr_reg->off;"
    },
    {
        "line": 166,
        "fullcodeline": "dst_reg->var_off = tnum_sub(ptr_reg->var_off, off_reg->var_off);"
    },
    {
        "line": 167,
        "fullcodeline": "dst_reg->off = ptr_reg->off;"
    },
    {
        "line": 21,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 27,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 32,
        "fullcodeline": "if (!env->allow_ptr_leaks)"
    },
    {
        "line": 36,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 40,
        "fullcodeline": "if (!env->allow_ptr_leaks)"
    },
    {
        "line": 43,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 46,
        "fullcodeline": "if (!env->allow_ptr_leaks)"
    },
    {
        "line": 49,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 52,
        "fullcodeline": "if (!env->allow_ptr_leaks)"
    },
    {
        "line": 55,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 69,
        "fullcodeline": "if (known && (ptr_reg->off + smin_val =="
    },
    {
        "line": 90,
        "fullcodeline": "if (signed_add_overflows(smin_ptr, smin_val) ||"
    },
    {
        "line": 98,
        "fullcodeline": "if (umin_ptr + umin_val < umin_ptr ||"
    },
    {
        "line": 108,
        "fullcodeline": "if (reg_is_pkt_pointer(ptr_reg)) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (dst_reg == off_reg) {"
    },
    {
        "line": 126,
        "fullcodeline": "if (ptr_reg->type == PTR_TO_STACK) {"
    },
    {
        "line": 132,
        "fullcodeline": "if (known && (ptr_reg->off - smin_val =="
    },
    {
        "line": 148,
        "fullcodeline": "if (signed_sub_overflows(smin_ptr, smax_val) ||"
    },
    {
        "line": 157,
        "fullcodeline": "if (umin_ptr < umax_val) {"
    },
    {
        "line": 168,
        "fullcodeline": "if (reg_is_pkt_pointer(ptr_reg)) {"
    },
    {
        "line": 182,
        "fullcodeline": "if (!env->allow_ptr_leaks)"
    },
    {
        "line": 185,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 188,
        "fullcodeline": "if (!env->allow_ptr_leaks)"
    },
    {
        "line": 191,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 33,
        "fullcodeline": "verbose(env,"
    },
    {
        "line": 41,
        "fullcodeline": "verbose(env, \"R%d pointer arithmetic on PTR_TO_MAP_VALUE_OR_NULL prohibited, null-check it first\\n\","
    },
    {
        "line": 47,
        "fullcodeline": "verbose(env, \"R%d pointer arithmetic on CONST_PTR_TO_MAP prohibited\\n\","
    },
    {
        "line": 53,
        "fullcodeline": "verbose(env, \"R%d pointer arithmetic on PTR_TO_PACKET_END prohibited\\n\","
    },
    {
        "line": 72,
        "fullcodeline": "dst_reg->smin_value = smin_ptr;"
    },
    {
        "line": 73,
        "fullcodeline": "dst_reg->smax_value = smax_ptr;"
    },
    {
        "line": 74,
        "fullcodeline": "dst_reg->umin_value = umin_ptr;"
    },
    {
        "line": 75,
        "fullcodeline": "dst_reg->umax_value = umax_ptr;"
    },
    {
        "line": 76,
        "fullcodeline": "dst_reg->var_off = ptr_reg->var_off;"
    },
    {
        "line": 77,
        "fullcodeline": "dst_reg->off = ptr_reg->off + smin_val;"
    },
    {
        "line": 78,
        "fullcodeline": "dst_reg->range = ptr_reg->range;"
    },
    {
        "line": 91,
        "fullcodeline": "signed_add_overflows(smax_ptr, smax_val)) {"
    },
    {
        "line": 92,
        "fullcodeline": "dst_reg->smin_value = S64_MIN;"
    },
    {
        "line": 93,
        "fullcodeline": "dst_reg->smax_value = S64_MAX;"
    },
    {
        "line": 99,
        "fullcodeline": "umax_ptr + umax_val < umax_ptr) {"
    },
    {
        "line": 100,
        "fullcodeline": "dst_reg->umin_value = 0;"
    },
    {
        "line": 101,
        "fullcodeline": "dst_reg->umax_value = U64_MAX;"
    },
    {
        "line": 109,
        "fullcodeline": "dst_reg->id = ++env->id_gen;"
    },
    {
        "line": 111,
        "fullcodeline": "dst_reg->range = 0;"
    },
    {
        "line": 135,
        "fullcodeline": "dst_reg->smin_value = smin_ptr;"
    },
    {
        "line": 136,
        "fullcodeline": "dst_reg->smax_value = smax_ptr;"
    },
    {
        "line": 137,
        "fullcodeline": "dst_reg->umin_value = umin_ptr;"
    },
    {
        "line": 138,
        "fullcodeline": "dst_reg->umax_value = umax_ptr;"
    },
    {
        "line": 139,
        "fullcodeline": "dst_reg->var_off = ptr_reg->var_off;"
    },
    {
        "line": 140,
        "fullcodeline": "dst_reg->id = ptr_reg->id;"
    },
    {
        "line": 141,
        "fullcodeline": "dst_reg->off = ptr_reg->off - smin_val;"
    },
    {
        "line": 142,
        "fullcodeline": "dst_reg->range = ptr_reg->range;"
    },
    {
        "line": 149,
        "fullcodeline": "signed_sub_overflows(smax_ptr, smin_val)) {"
    },
    {
        "line": 151,
        "fullcodeline": "dst_reg->smin_value = S64_MIN;"
    },
    {
        "line": 152,
        "fullcodeline": "dst_reg->smax_value = S64_MAX;"
    },
    {
        "line": 159,
        "fullcodeline": "dst_reg->umin_value = 0;"
    },
    {
        "line": 160,
        "fullcodeline": "dst_reg->umax_value = U64_MAX;"
    },
    {
        "line": 169,
        "fullcodeline": "dst_reg->id = ++env->id_gen;"
    },
    {
        "line": 183,
        "fullcodeline": "verbose(env, \"R%d bitwise operator %s on pointer prohibited\\n\","
    },
    {
        "line": 189,
        "fullcodeline": "verbose(env, \"R%d pointer arithmetic with %s operator prohibited\\n\","
    },
    {
        "line": 70,
        "fullcodeline": "(s64)(s32)(ptr_reg->off + smin_val))) {"
    },
    {
        "line": 95,
        "fullcodeline": "dst_reg->smin_value = smin_ptr + smin_val;"
    },
    {
        "line": 96,
        "fullcodeline": "dst_reg->smax_value = smax_ptr + smax_val;"
    },
    {
        "line": 103,
        "fullcodeline": "dst_reg->umin_value = umin_ptr + umin_val;"
    },
    {
        "line": 104,
        "fullcodeline": "dst_reg->umax_value = umax_ptr + umax_val;"
    },
    {
        "line": 117,
        "fullcodeline": "if (!env->allow_ptr_leaks)"
    },
    {
        "line": 120,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 127,
        "fullcodeline": "if (!env->allow_ptr_leaks)"
    },
    {
        "line": 130,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 133,
        "fullcodeline": "(s64)(s32)(ptr_reg->off - smin_val))) {"
    },
    {
        "line": 154,
        "fullcodeline": "dst_reg->smin_value = smin_ptr - smax_val;"
    },
    {
        "line": 155,
        "fullcodeline": "dst_reg->smax_value = smax_ptr - smin_val;"
    },
    {
        "line": 163,
        "fullcodeline": "dst_reg->umin_value = umin_ptr - umax_val;"
    },
    {
        "line": 164,
        "fullcodeline": "dst_reg->umax_value = umax_ptr - umin_val;"
    },
    {
        "line": 171,
        "fullcodeline": "if (smin_val < 0)"
    },
    {
        "line": 118,
        "fullcodeline": "verbose(env, \"R%d tried to subtract pointer from scalar\\n\","
    },
    {
        "line": 128,
        "fullcodeline": "verbose(env, \"R%d subtraction from stack pointer prohibited\\n\","
    },
    {
        "line": 172,
        "fullcodeline": "dst_reg->range = 0;"
    },
    {
        "line": 184,
        "fullcodeline": "dst, bpf_alu_string[opcode >> 4]);"
    },
    {
        "line": 190,
        "fullcodeline": "dst, bpf_alu_string[opcode >> 4]);"
    }
]