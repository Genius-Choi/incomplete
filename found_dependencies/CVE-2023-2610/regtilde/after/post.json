[
    {
        "line": 3,
        "fullcodeline": "char_u\t*newsub = source;"
    },
    {
        "line": 61,
        "fullcodeline": "vim_free(reg_prev_sub);"
    },
    {
        "line": 62,
        "fullcodeline": "reg_prev_sub = vim_strsave(newsub);"
    },
    {
        "line": 6,
        "fullcodeline": "for (p = newsub; *p; ++p)"
    },
    {
        "line": 8,
        "fullcodeline": "if ((*p == '~' && magic) || (*p == '\\\\' && *(p + 1) == '~' && !magic))"
    },
    {
        "line": 48,
        "fullcodeline": "--p;"
    },
    {
        "line": 10,
        "fullcodeline": "if (reg_prev_sub != NULL)"
    },
    {
        "line": 15,
        "fullcodeline": "size_t\tprevsublen = STRLEN(reg_prev_sub);"
    },
    {
        "line": 16,
        "fullcodeline": "size_t  newsublen = STRLEN(newsub);"
    },
    {
        "line": 24,
        "fullcodeline": "char_u *tmpsub = alloc(newsublen + prevsublen);"
    },
    {
        "line": 52,
        "fullcodeline": "if (*p == '\\\\' && p[1])\t\t// skip escaped characters"
    },
    {
        "line": 17,
        "fullcodeline": "if (prevsublen > MAXCOL || newsublen > MAXCOL"
    },
    {
        "line": 25,
        "fullcodeline": "if (tmpsub != NULL)"
    },
    {
        "line": 53,
        "fullcodeline": "++p;"
    },
    {
        "line": 55,
        "fullcodeline": "p += (*mb_ptr2len)(p) - 1;"
    },
    {
        "line": 18,
        "fullcodeline": "|| newsublen + prevsublen > MAXCOL)"
    },
    {
        "line": 20,
        "fullcodeline": "emsg(_(e_resulting_text_too_long));"
    },
    {
        "line": 28,
        "fullcodeline": "size_t prefixlen = p - newsub;\t// not including ~"
    },
    {
        "line": 29,
        "fullcodeline": "mch_memmove(tmpsub, newsub, prefixlen);"
    },
    {
        "line": 31,
        "fullcodeline": "mch_memmove(tmpsub + prefixlen, reg_prev_sub,"
    },
    {
        "line": 36,
        "fullcodeline": "STRCPY(tmpsub + prefixlen + prevsublen, p + 1);"
    },
    {
        "line": 40,
        "fullcodeline": "newsub = tmpsub;"
    },
    {
        "line": 41,
        "fullcodeline": "p = newsub + prefixlen + prevsublen;"
    },
    {
        "line": 34,
        "fullcodeline": "if (!magic)"
    },
    {
        "line": 38,
        "fullcodeline": "if (newsub != source)\t// allocated newsub before"
    },
    {
        "line": 45,
        "fullcodeline": "STRMOVE(p, p + 1);\t// remove '~'"
    },
    {
        "line": 35,
        "fullcodeline": "++p;\t\t\t// back off backslash"
    },
    {
        "line": 39,
        "fullcodeline": "vim_free(newsub);"
    },
    {
        "line": 47,
        "fullcodeline": "STRMOVE(p, p + 2);\t// remove '\\~'"
    }
]