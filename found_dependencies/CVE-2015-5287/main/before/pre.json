[
    {
        "line": 8,
        "fullcodeline": "int fd = xopen(\"/dev/null\", O_RDWR);"
    },
    {
        "line": 14,
        "fullcodeline": "int err = 1;"
    },
    {
        "line": 15,
        "fullcodeline": "logmode = LOGMODE_JOURNAL;"
    },
    {
        "line": 18,
        "fullcodeline": "load_abrt_conf();"
    },
    {
        "line": 83,
        "fullcodeline": "errno = 0;"
    },
    {
        "line": 84,
        "fullcodeline": "const char* signal_str = argv[1];"
    },
    {
        "line": 85,
        "fullcodeline": "int signal_no = xatoi_positive(signal_str);"
    },
    {
        "line": 86,
        "fullcodeline": "off_t ulimit_c = strtoull(argv[2], NULL, 10);"
    },
    {
        "line": 92,
        "fullcodeline": "const char *pid_str = argv[3];"
    },
    {
        "line": 93,
        "fullcodeline": "pid_t local_pid = xatoi_positive(argv[3]);"
    },
    {
        "line": 94,
        "fullcodeline": "uid_t uid = xatoi_positive(argv[4]);"
    },
    {
        "line": 108,
        "fullcodeline": "const char *global_pid_str = argv[8];"
    },
    {
        "line": 109,
        "fullcodeline": "pid_t pid = xatoi_positive(argv[8]);"
    },
    {
        "line": 111,
        "fullcodeline": "pid_t tid = -1;"
    },
    {
        "line": 112,
        "fullcodeline": "const char *tid_str = argv[9];"
    },
    {
        "line": 118,
        "fullcodeline": "char path[PATH_MAX];"
    },
    {
        "line": 120,
        "fullcodeline": "char *executable = get_executable(pid);"
    },
    {
        "line": 127,
        "fullcodeline": "user_pwd = get_cwd(pid); /* may be NULL on error */"
    },
    {
        "line": 128,
        "fullcodeline": "log_notice(\"user_pwd:'%s'\", user_pwd);"
    },
    {
        "line": 130,
        "fullcodeline": "sprintf(path, \"/proc/%lu/status\", (long)pid);"
    },
    {
        "line": 131,
        "fullcodeline": "char *proc_pid_status = xmalloc_xopen_read_close(path, /*maxsz:*/ NULL);"
    },
    {
        "line": 133,
        "fullcodeline": "uid_t fsuid = uid;"
    },
    {
        "line": 134,
        "fullcodeline": "uid_t tmp_fsuid = get_fsuid(proc_pid_status);"
    },
    {
        "line": 138,
        "fullcodeline": "const int fsgid = get_fsgid(proc_pid_status);"
    },
    {
        "line": 142,
        "fullcodeline": "int suid_policy = dump_suid_policy();"
    },
    {
        "line": 157,
        "fullcodeline": "int user_core_fd = -1;"
    },
    {
        "line": 169,
        "fullcodeline": "const char *signame = NULL;"
    },
    {
        "line": 173,
        "fullcodeline": "const int abrtd_running = daemon_is_ok();"
    },
    {
        "line": 197,
        "fullcodeline": "snprintf(path, sizeof(path), \"%s/last-ccpp\", g_settings_dump_location);"
    },
    {
        "line": 204,
        "fullcodeline": "const char *last_slash = strrchr(executable, '/');"
    },
    {
        "line": 236,
        "fullcodeline": "unsigned path_len = snprintf(path, sizeof(path), \"%s/ccpp-%s-%lu.new\","
    },
    {
        "line": 253,
        "fullcodeline": "dd = dd_create(path, /*fs owner*/0, DEFAULT_DUMP_DIR_MODE);"
    },
    {
        "line": 9,
        "fullcodeline": "while (fd < 2)"
    },
    {
        "line": 10,
        "fullcodeline": "fd = xdup(fd);"
    },
    {
        "line": 11,
        "fullcodeline": "if (fd > 2)"
    },
    {
        "line": 27,
        "fullcodeline": "map_string_t *settings = new_map_string();"
    },
    {
        "line": 28,
        "fullcodeline": "load_abrt_plugin_conf_file(\"CCpp.conf\", settings);"
    },
    {
        "line": 30,
        "fullcodeline": "value = get_map_string_item_or_NULL(settings, \"MakeCompatCore\");"
    },
    {
        "line": 31,
        "fullcodeline": "setting_MakeCompatCore = value && string_to_bool(value);"
    },
    {
        "line": 32,
        "fullcodeline": "value = get_map_string_item_or_NULL(settings, \"SaveBinaryImage\");"
    },
    {
        "line": 33,
        "fullcodeline": "setting_SaveBinaryImage = value && string_to_bool(value);"
    },
    {
        "line": 34,
        "fullcodeline": "value = get_map_string_item_or_NULL(settings, \"SaveFullCore\");"
    },
    {
        "line": 35,
        "fullcodeline": "setting_SaveFullCore = value ? string_to_bool(value) : true;"
    },
    {
        "line": 36,
        "fullcodeline": "value = get_map_string_item_or_NULL(settings, \"CreateCoreBacktrace\");"
    },
    {
        "line": 37,
        "fullcodeline": "setting_CreateCoreBacktrace = value ? string_to_bool(value) : true;"
    },
    {
        "line": 39,
        "fullcodeline": "value = get_map_string_item_or_NULL(settings, \"SaveContainerizedPackageData\");"
    },
    {
        "line": 40,
        "fullcodeline": "setting_SaveContainerizedPackageData = value && string_to_bool(value);"
    },
    {
        "line": 50,
        "fullcodeline": "value = get_map_string_item_or_NULL(settings, \"StandaloneHook\");"
    },
    {
        "line": 51,
        "fullcodeline": "setting_StandaloneHook = value && string_to_bool(value);"
    },
    {
        "line": 52,
        "fullcodeline": "value = get_map_string_item_or_NULL(settings, \"VerboseLog\");"
    },
    {
        "line": 55,
        "fullcodeline": "free_map_string(settings);"
    },
    {
        "line": 58,
        "fullcodeline": "if (argc == 2 && strcmp(argv[1], \"--config-test\"))"
    },
    {
        "line": 74,
        "fullcodeline": "if (strchr(argv[1], ' '))"
    },
    {
        "line": 87,
        "fullcodeline": "if (ulimit_c < 0) /* unlimited? */"
    },
    {
        "line": 121,
        "fullcodeline": "if (executable && strstr(executable, \"/abrt-hook-ccpp\"))"
    },
    {
        "line": 135,
        "fullcodeline": "if (tmp_fsuid < 0)"
    },
    {
        "line": 139,
        "fullcodeline": "if (fsgid < 0)"
    },
    {
        "line": 143,
        "fullcodeline": "if (tmp_fsuid != uid)"
    },
    {
        "line": 162,
        "fullcodeline": "if (executable == NULL)"
    },
    {
        "line": 187,
        "fullcodeline": "if (g_settings_nMaxCrashReportsSize > 0)"
    },
    {
        "line": 198,
        "fullcodeline": "if (check_recent_crash_file(path, executable))"
    },
    {
        "line": 205,
        "fullcodeline": "if (last_slash && strncmp(++last_slash, \"abrt\", 4) == 0)"
    },
    {
        "line": 559,
        "fullcodeline": "if (proc_cwd != NULL)"
    },
    {
        "line": 12,
        "fullcodeline": "close(fd);"
    },
    {
        "line": 43,
        "fullcodeline": "if (!g_settings_explorechroots)"
    },
    {
        "line": 90,
        "fullcodeline": "ulimit_c = ~((off_t)1 << (sizeof(off_t)*8-1));"
    },
    {
        "line": 95,
        "fullcodeline": "if (errno || local_pid <= 0)"
    },
    {
        "line": 103,
        "fullcodeline": "if (s && s[0] != '|')"
    },
    {
        "line": 115,
        "fullcodeline": "tid = xatoi_positive(tid_str);"
    },
    {
        "line": 123,
        "fullcodeline": "error_msg_and_die(\"PID %lu is '%s', not dumping it to avoid recursion\","
    },
    {
        "line": 146,
        "fullcodeline": "fsuid = 0;"
    },
    {
        "line": 158,
        "fullcodeline": "if (setting_MakeCompatCore && ulimit_c != 0)"
    },
    {
        "line": 160,
        "fullcodeline": "user_core_fd = open_user_core(uid, fsuid, fsgid, pid, &argv[1]);"
    },
    {
        "line": 170,
        "fullcodeline": "if (!signal_is_fatal(signal_no, &signame))"
    },
    {
        "line": 174,
        "fullcodeline": "if (!setting_StandaloneHook && !abrtd_running)"
    },
    {
        "line": 185,
        "fullcodeline": "ensure_writable_dir(g_settings_dump_location, DEFAULT_DUMP_LOCATION_MODE, \"abrt\");"
    },
    {
        "line": 222,
        "fullcodeline": "int abrt_core_fd = xopen3(path, O_WRONLY | O_CREAT | O_TRUNC, 0600);"
    },
    {
        "line": 223,
        "fullcodeline": "off_t core_size = copyfd_eof(STDIN_FILENO, abrt_core_fd, COPYFD_SPARSE);"
    },
    {
        "line": 232,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 237,
        "fullcodeline": "g_settings_dump_location, iso_date_string(NULL), (long)pid);"
    },
    {
        "line": 256,
        "fullcodeline": "char source_filename[sizeof(\"/proc/%lu/somewhat_long_name\") + sizeof(long)*3];"
    },
    {
        "line": 257,
        "fullcodeline": "int source_base_ofs = sprintf(source_filename, \"/proc/%lu/root\", (long)pid);"
    },
    {
        "line": 258,
        "fullcodeline": "source_base_ofs -= strlen(\"root\");"
    },
    {
        "line": 262,
        "fullcodeline": "char *rootdir = process_has_own_root(pid) ? get_rootdir(pid) : NULL;"
    },
    {
        "line": 276,
        "fullcodeline": "char *dest_filename = concat_path_file(dd->dd_dirname, \"also_somewhat_longish_name\");"
    },
    {
        "line": 277,
        "fullcodeline": "char *dest_base = strrchr(dest_filename, '/') + 1;"
    },
    {
        "line": 284,
        "fullcodeline": "dd_copy_file(dd, FILENAME_MAPS, source_filename);"
    },
    {
        "line": 287,
        "fullcodeline": "dd_copy_file(dd, FILENAME_LIMITS, source_filename);"
    },
    {
        "line": 290,
        "fullcodeline": "dd_copy_file(dd, FILENAME_CGROUP, source_filename);"
    },
    {
        "line": 293,
        "fullcodeline": "dd_copy_file(dd, FILENAME_MOUNTINFO, source_filename);"
    },
    {
        "line": 295,
        "fullcodeline": "strcpy(dest_base, FILENAME_OPEN_FDS);"
    },
    {
        "line": 297,
        "fullcodeline": "dump_fd_info_ext(dest_filename, source_filename, dd->dd_uid, dd->dd_gid);"
    },
    {
        "line": 299,
        "fullcodeline": "strcpy(dest_base, FILENAME_NAMESPACES);"
    },
    {
        "line": 300,
        "fullcodeline": "dump_namespace_diff_ext(dest_filename, 1, pid, dd->dd_uid, dd->dd_gid);"
    },
    {
        "line": 304,
        "fullcodeline": "char *tmp = NULL;"
    },
    {
        "line": 305,
        "fullcodeline": "get_env_variable(pid, \"container\", &tmp);"
    },
    {
        "line": 313,
        "fullcodeline": "get_env_variable(pid, \"container_uuid\", &tmp);"
    },
    {
        "line": 325,
        "fullcodeline": "const int containerized = (rootdir != NULL && strcmp(rootdir, \"/\") == 0);"
    },
    {
        "line": 338,
        "fullcodeline": "dd_save_text(dd, FILENAME_ANALYZER, \"abrt-ccpp\");"
    },
    {
        "line": 339,
        "fullcodeline": "dd_save_text(dd, FILENAME_TYPE, \"CCpp\");"
    },
    {
        "line": 340,
        "fullcodeline": "dd_save_text(dd, FILENAME_EXECUTABLE, executable);"
    },
    {
        "line": 341,
        "fullcodeline": "dd_save_text(dd, FILENAME_PID, pid_str);"
    },
    {
        "line": 342,
        "fullcodeline": "dd_save_text(dd, FILENAME_GLOBAL_PID, global_pid_str);"
    },
    {
        "line": 343,
        "fullcodeline": "dd_save_text(dd, FILENAME_PROC_PID_STATUS, proc_pid_status);"
    },
    {
        "line": 356,
        "fullcodeline": "char *reason = xasprintf(\"%s killed by SIG%s\","
    },
    {
        "line": 358,
        "fullcodeline": "dd_save_text(dd, FILENAME_REASON, reason);"
    },
    {
        "line": 362,
        "fullcodeline": "dd_save_text(dd, FILENAME_CMDLINE, cmdline ? : \"\");"
    },
    {
        "line": 366,
        "fullcodeline": "dd_save_text(dd, FILENAME_ENVIRON, environ ? : \"\");"
    },
    {
        "line": 369,
        "fullcodeline": "char *fips_enabled = xmalloc_fopen_fgetline_fclose(\"/proc/sys/crypto/fips_enabled\");"
    },
    {
        "line": 377,
        "fullcodeline": "dd_save_text(dd, FILENAME_ABRT_VERSION, VERSION);"
    },
    {
        "line": 380,
        "fullcodeline": "long unsigned lck_bytes = ULONG_MAX;"
    },
    {
        "line": 381,
        "fullcodeline": "const char *vmlck = strstr(proc_pid_status, \"VmLck:\");"
    },
    {
        "line": 410,
        "fullcodeline": "off_t core_size = 0;"
    },
    {
        "line": 446,
        "fullcodeline": "user_core_fd = -1;"
    },
    {
        "line": 500,
        "fullcodeline": "dd = NULL;"
    },
    {
        "line": 502,
        "fullcodeline": "path[path_len] = '\\0'; /* path now contains only directory name */"
    },
    {
        "line": 521,
        "fullcodeline": "char *newpath = xstrndup(path, path_len - (sizeof(\".new\")-1));"
    },
    {
        "line": 544,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 47,
        "fullcodeline": "setting_SaveContainerizedPackageData = false;"
    },
    {
        "line": 54,
        "fullcodeline": "g_verbose = xatoi_positive(value);"
    },
    {
        "line": 59,
        "fullcodeline": "return test_configuration(setting_SaveFullCore, setting_CreateCoreBacktrace);"
    },
    {
        "line": 104,
        "fullcodeline": "core_basename = s;"
    },
    {
        "line": 147,
        "fullcodeline": "if (suid_policy == DUMP_SUID_UNSAFE)"
    },
    {
        "line": 166,
        "fullcodeline": "return create_user_core(user_core_fd, pid, ulimit_c);"
    },
    {
        "line": 171,
        "fullcodeline": "return create_user_core(user_core_fd, pid, ulimit_c); // not a signal we care about"
    },
    {
        "line": 181,
        "fullcodeline": "return create_user_core(user_core_fd, pid, ulimit_c);"
    },
    {
        "line": 190,
        "fullcodeline": "if (low_free_space(g_settings_nMaxCrashReportsSize, g_settings_dump_location))"
    },
    {
        "line": 201,
        "fullcodeline": "return create_user_core(user_core_fd, pid, ulimit_c);"
    },
    {
        "line": 207,
        "fullcodeline": "if (g_settings_debug_level == 0)"
    },
    {
        "line": 240,
        "fullcodeline": "return create_user_core(user_core_fd, pid, ulimit_c);"
    },
    {
        "line": 306,
        "fullcodeline": "if (tmp != NULL)"
    },
    {
        "line": 314,
        "fullcodeline": "if (tmp != NULL)"
    },
    {
        "line": 361,
        "fullcodeline": "char *cmdline = get_cmdline(pid);"
    },
    {
        "line": 365,
        "fullcodeline": "char *environ = get_environ(pid);"
    },
    {
        "line": 382,
        "fullcodeline": "if (vmlck == NULL)"
    },
    {
        "line": 526,
        "fullcodeline": "if (core_size > 0)"
    },
    {
        "line": 534,
        "fullcodeline": "if (g_settings_nMaxCrashReportsSize > 0)"
    },
    {
        "line": 557,
        "fullcodeline": "unlinkat(dirfd(proc_cwd), core_basename, /*only files*/0);"
    },
    {
        "line": 77,
        "fullcodeline": "for (i = 1; argv[i]; i++)"
    },
    {
        "line": 148,
        "fullcodeline": "fsuid = tmp_fsuid;"
    },
    {
        "line": 219,
        "fullcodeline": "if (snprintf(path, sizeof(path), \"%s/%s-coredump\", g_settings_dump_location, last_slash) >= sizeof(path))"
    },
    {
        "line": 220,
        "fullcodeline": "error_msg_and_die(\"Error saving '%s': truncated long file path\", path);"
    },
    {
        "line": 224,
        "fullcodeline": "if (core_size < 0 || fsync(abrt_core_fd) != 0)"
    },
    {
        "line": 226,
        "fullcodeline": "unlink(path);"
    },
    {
        "line": 229,
        "fullcodeline": "error_msg_and_die(\"Error saving '%s'\", path);"
    },
    {
        "line": 269,
        "fullcodeline": "dd_create_basic_files(dd, fsuid, (rootdir != NULL) ? source_filename : NULL);"
    },
    {
        "line": 308,
        "fullcodeline": "dd_save_text(dd, FILENAME_CONTAINER, tmp);"
    },
    {
        "line": 310,
        "fullcodeline": "tmp = NULL;"
    },
    {
        "line": 316,
        "fullcodeline": "dd_save_text(dd, FILENAME_CONTAINER_UUID, tmp);"
    },
    {
        "line": 328,
        "fullcodeline": "log_debug(\"Process %d is considered to be containerized\", pid);"
    },
    {
        "line": 345,
        "fullcodeline": "dd_save_text(dd, FILENAME_PWD, user_pwd);"
    },
    {
        "line": 347,
        "fullcodeline": "dd_save_text(dd, FILENAME_TID, tid_str);"
    },
    {
        "line": 383,
        "fullcodeline": "error_msg(\"/proc/%s/status does not contain 'VmLck:' line\", pid_str);"
    },
    {
        "line": 392,
        "fullcodeline": "dd_mark_as_notreportable(dd, \"The process had locked memory \""
    },
    {
        "line": 414,
        "fullcodeline": "int abrt_core_fd = create_or_die(path, user_core_fd);"
    },
    {
        "line": 426,
        "fullcodeline": "core_size = copyfd_sparse(STDIN_FILENO, abrt_core_fd, user_core_fd, ulimit_c);"
    },
    {
        "line": 427,
        "fullcodeline": "close_user_core(user_core_fd, core_size);"
    },
    {
        "line": 490,
        "fullcodeline": "if (tid > 0 && setting_CreateCoreBacktrace)"
    },
    {
        "line": 491,
        "fullcodeline": "create_core_backtrace(tid, executable, signal_no, dd);"
    },
    {
        "line": 504,
        "fullcodeline": "if (abrtd_running && setting_SaveContainerizedPackageData && containerized)"
    },
    {
        "line": 506,
        "fullcodeline": "sprintf(source_filename, \"/proc/%lu/root\", (long)pid);"
    },
    {
        "line": 508,
        "fullcodeline": "const char *cmd_args[6];"
    },
    {
        "line": 509,
        "fullcodeline": "cmd_args[0] = BIN_DIR\"/abrt-action-save-package-data\";"
    },
    {
        "line": 510,
        "fullcodeline": "cmd_args[1] = \"-d\";"
    },
    {
        "line": 511,
        "fullcodeline": "cmd_args[2] = path;"
    },
    {
        "line": 512,
        "fullcodeline": "cmd_args[3] = \"-r\";"
    },
    {
        "line": 513,
        "fullcodeline": "cmd_args[4] = source_filename;"
    },
    {
        "line": 514,
        "fullcodeline": "cmd_args[5] = NULL;"
    },
    {
        "line": 516,
        "fullcodeline": "pid_t pid = fork_execv_on_steroids(0, (char **)cmd_args, NULL, NULL, path, 0);"
    },
    {
        "line": 518,
        "fullcodeline": "safe_waitpid(pid, &stat, 0);"
    },
    {
        "line": 522,
        "fullcodeline": "if (rename(path, newpath) == 0)"
    },
    {
        "line": 523,
        "fullcodeline": "strcpy(path, newpath);"
    },
    {
        "line": 527,
        "fullcodeline": "log_notice(\"Saved core dump of pid %lu (%s) to %s (%llu bytes)\","
    },
    {
        "line": 531,
        "fullcodeline": "notify_new_path(path);"
    },
    {
        "line": 539,
        "fullcodeline": "unsigned maxsize = g_settings_nMaxCrashReportsSize + g_settings_nMaxCrashReportsSize / 4;"
    },
    {
        "line": 540,
        "fullcodeline": "maxsize |= 63;"
    },
    {
        "line": 549,
        "fullcodeline": "return create_user_core(user_core_fd, pid, ulimit_c);"
    },
    {
        "line": 46,
        "fullcodeline": "log_warning(\"Ignoring SaveContainerizedPackageData because ExploreChroots is disabled\");"
    },
    {
        "line": 151,
        "fullcodeline": "g_user_core_flags = O_EXCL;"
    },
    {
        "line": 152,
        "fullcodeline": "g_need_nonrelative = 1;"
    },
    {
        "line": 191,
        "fullcodeline": "return create_user_core(user_core_fd, pid, ulimit_c);"
    },
    {
        "line": 273,
        "fullcodeline": "dd_create_basic_files(dd, fsuid, NULL);"
    },
    {
        "line": 402,
        "fullcodeline": "if (save_crashing_binary(pid, dd))"
    },
    {
        "line": 442,
        "fullcodeline": "create_user_core(user_core_fd, pid, ulimit_c);"
    },
    {
        "line": 541,
        "fullcodeline": "trim_problem_dirs(g_settings_dump_location, maxsize * (double)(1024*1024), path);"
    },
    {
        "line": 330,
        "fullcodeline": "if (get_pid_of_container(pid, &container_pid) == 0)"
    },
    {
        "line": 332,
        "fullcodeline": "char *container_cmdline = get_cmdline(container_pid);"
    },
    {
        "line": 333,
        "fullcodeline": "dd_save_text(dd, FILENAME_CONTAINER_CMDLINE, container_cmdline);"
    },
    {
        "line": 351,
        "fullcodeline": "if (strcmp(rootdir, \"/\") != 0)"
    },
    {
        "line": 352,
        "fullcodeline": "dd_save_text(dd, FILENAME_ROOTDIR, rootdir);"
    },
    {
        "line": 372,
        "fullcodeline": "if (strcmp(fips_enabled, \"0\") != 0)"
    },
    {
        "line": 373,
        "fullcodeline": "dd_save_text(dd, \"fips_enabled\", fips_enabled);"
    },
    {
        "line": 428,
        "fullcodeline": "if (fsync(abrt_core_fd) != 0 || close(abrt_core_fd) != 0 || core_size < 0)"
    },
    {
        "line": 430,
        "fullcodeline": "unlink(path);"
    },
    {
        "line": 384,
        "fullcodeline": "else if (1 != sscanf(vmlck + 6, \"%lu kB\\n\", &lck_bytes))"
    },
    {
        "line": 385,
        "fullcodeline": "error_msg(\"Failed to parse 'VmLck:' line in /proc/%s/status\", pid_str);"
    }
]