[
    {
        "line": 4,
        "fullcodeline": "assert(sixlo != NULL);"
    },
    {
        "line": 8,
        "fullcodeline": "uint8_t *iphc_hdr = sixlo->data;"
    },
    {
        "line": 10,
        "fullcodeline": "size_t uncomp_hdr_len = sizeof(ipv6_hdr_t);"
    },
    {
        "line": 11,
        "fullcodeline": "gnrc_sixlowpan_frag_rb_t *rbuf = rbuf_ptr;"
    },
    {
        "line": 45,
        "fullcodeline": "netif = gnrc_pktsnip_search_type(sixlo, GNRC_NETTYPE_NETIF);"
    },
    {
        "line": 47,
        "fullcodeline": "iface = gnrc_netif_hdr_get_netif(netif->data);"
    },
    {
        "line": 48,
        "fullcodeline": "payload_offset = _iphc_ipv6_decode(iphc_hdr, netif->data, iface,"
    },
    {
        "line": 16,
        "fullcodeline": "if (sixlo->size < 2U) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (rbuf != NULL) {"
    },
    {
        "line": 43,
        "fullcodeline": "assert(ipv6->size >= sizeof(ipv6_hdr_t));"
    },
    {
        "line": 46,
        "fullcodeline": "assert(netif != NULL);"
    },
    {
        "line": 107,
        "fullcodeline": "if (rbuf != NULL) {"
    },
    {
        "line": 173,
        "fullcodeline": "if (rbuf == NULL) {"
    },
    {
        "line": 192,
        "fullcodeline": "ipv6_hdr->len = byteorder_htons(payload_len);"
    },
    {
        "line": 193,
        "fullcodeline": "if (sixlo->size > payload_offset) {"
    },
    {
        "line": 198,
        "fullcodeline": "if (rbuf != NULL) {"
    },
    {
        "line": 17,
        "fullcodeline": "DEBUG(\"6lo iphc: IPHC header truncated\\n\");"
    },
    {
        "line": 21,
        "fullcodeline": "gnrc_pktbuf_release(sixlo);"
    },
    {
        "line": 25,
        "fullcodeline": "ipv6 = rbuf->pkt;"
    },
    {
        "line": 50,
        "fullcodeline": "if ((payload_offset == 0) || (payload_offset > sixlo->size)) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (rbuf != NULL) {"
    },
    {
        "line": 26,
        "fullcodeline": "assert(ipv6 != NULL);"
    },
    {
        "line": 35,
        "fullcodeline": "ipv6 = gnrc_pktbuf_add(NULL, NULL, sizeof(ipv6_hdr_t),"
    },
    {
        "line": 109,
        "fullcodeline": "if (_is_rfrag(sixlo)) {"
    },
    {
        "line": 170,
        "fullcodeline": "payload_len = (sixlo->size + uncomp_hdr_len -"
    },
    {
        "line": 196,
        "fullcodeline": "sixlo->size - payload_offset);"
    },
    {
        "line": 199,
        "fullcodeline": "rbuf->super.current_size += (uncomp_hdr_len - payload_offset);"
    },
    {
        "line": 242,
        "fullcodeline": "sixlo = gnrc_pkt_delete(sixlo, netif);"
    },
    {
        "line": 243,
        "fullcodeline": "ipv6 = gnrc_pkt_append(ipv6, netif);"
    },
    {
        "line": 19,
        "fullcodeline": "gnrc_sixlowpan_frag_rb_remove(rbuf);"
    },
    {
        "line": 27,
        "fullcodeline": "if ((ipv6->size < sizeof(ipv6_hdr_t)) &&"
    },
    {
        "line": 28,
        "fullcodeline": "(gnrc_pktbuf_realloc_data(ipv6, sizeof(ipv6_hdr_t)) != 0)) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (ipv6 == NULL) {"
    },
    {
        "line": 111,
        "fullcodeline": "DEBUG(\" - rbuf->super.datagram_size: %u\\n\","
    },
    {
        "line": 118,
        "fullcodeline": "payload_len = (rbuf->super.datagram_size - payload_offset) +"
    },
    {
        "line": 120,
        "fullcodeline": "DEBUG(\"   => %u\\n\", payload_len);"
    },
    {
        "line": 175,
        "fullcodeline": "if (gnrc_pktbuf_realloc_data(ipv6, uncomp_hdr_len + payload_len) != 0) {"
    },
    {
        "line": 182,
        "fullcodeline": "if (ipv6->size < (uncomp_hdr_len + (sixlo->size - payload_offset))) {"
    },
    {
        "line": 130,
        "fullcodeline": "payload_len = (uint16_t)(rbuf->super.datagram_size - sizeof(ipv6_hdr_t));"
    },
    {
        "line": 119,
        "fullcodeline": "(uncomp_hdr_len - sizeof(ipv6_hdr_t));"
    }
]