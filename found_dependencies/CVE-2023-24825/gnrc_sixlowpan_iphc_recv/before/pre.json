[
    {
        "line": 4,
        "fullcodeline": "assert(sixlo != NULL);"
    },
    {
        "line": 8,
        "fullcodeline": "uint8_t *iphc_hdr = sixlo->data;"
    },
    {
        "line": 10,
        "fullcodeline": "size_t uncomp_hdr_len = sizeof(ipv6_hdr_t);"
    },
    {
        "line": 11,
        "fullcodeline": "gnrc_sixlowpan_frag_rb_t *rbuf = rbuf_ptr;"
    },
    {
        "line": 37,
        "fullcodeline": "netif = gnrc_pktsnip_search_type(sixlo, GNRC_NETTYPE_NETIF);"
    },
    {
        "line": 39,
        "fullcodeline": "iface = gnrc_netif_hdr_get_netif(netif->data);"
    },
    {
        "line": 40,
        "fullcodeline": "payload_offset = _iphc_ipv6_decode(iphc_hdr, netif->data, iface,"
    },
    {
        "line": 16,
        "fullcodeline": "if (rbuf != NULL) {"
    },
    {
        "line": 35,
        "fullcodeline": "assert(ipv6->size >= sizeof(ipv6_hdr_t));"
    },
    {
        "line": 38,
        "fullcodeline": "assert(netif != NULL);"
    },
    {
        "line": 99,
        "fullcodeline": "if (rbuf != NULL) {"
    },
    {
        "line": 165,
        "fullcodeline": "if (rbuf == NULL) {"
    },
    {
        "line": 184,
        "fullcodeline": "ipv6_hdr->len = byteorder_htons(payload_len);"
    },
    {
        "line": 185,
        "fullcodeline": "if (sixlo->size > payload_offset) {"
    },
    {
        "line": 190,
        "fullcodeline": "if (rbuf != NULL) {"
    },
    {
        "line": 17,
        "fullcodeline": "ipv6 = rbuf->pkt;"
    },
    {
        "line": 18,
        "fullcodeline": "assert(ipv6 != NULL);"
    },
    {
        "line": 42,
        "fullcodeline": "if ((payload_offset == 0) || (payload_offset > sixlo->size)) {"
    },
    {
        "line": 19,
        "fullcodeline": "if ((ipv6->size < sizeof(ipv6_hdr_t)) &&"
    },
    {
        "line": 27,
        "fullcodeline": "ipv6 = gnrc_pktbuf_add(NULL, NULL, sizeof(ipv6_hdr_t),"
    },
    {
        "line": 101,
        "fullcodeline": "if (_is_rfrag(sixlo)) {"
    },
    {
        "line": 162,
        "fullcodeline": "payload_len = (sixlo->size + uncomp_hdr_len -"
    },
    {
        "line": 188,
        "fullcodeline": "sixlo->size - payload_offset);"
    },
    {
        "line": 191,
        "fullcodeline": "rbuf->super.current_size += (uncomp_hdr_len - payload_offset);"
    },
    {
        "line": 234,
        "fullcodeline": "sixlo = gnrc_pkt_delete(sixlo, netif);"
    },
    {
        "line": 235,
        "fullcodeline": "ipv6 = gnrc_pkt_append(ipv6, netif);"
    },
    {
        "line": 20,
        "fullcodeline": "(gnrc_pktbuf_realloc_data(ipv6, sizeof(ipv6_hdr_t)) != 0)) {"
    },
    {
        "line": 21,
        "fullcodeline": "DEBUG(\"6lo iphc: no space to decompress IPHC\\n\");"
    },
    {
        "line": 22,
        "fullcodeline": "_recv_error_release(sixlo, ipv6, rbuf);"
    },
    {
        "line": 29,
        "fullcodeline": "if (ipv6 == NULL) {"
    },
    {
        "line": 103,
        "fullcodeline": "DEBUG(\" - rbuf->super.datagram_size: %u\\n\","
    },
    {
        "line": 110,
        "fullcodeline": "payload_len = (rbuf->super.datagram_size - payload_offset) +"
    },
    {
        "line": 112,
        "fullcodeline": "DEBUG(\"   => %u\\n\", payload_len);"
    },
    {
        "line": 167,
        "fullcodeline": "if (gnrc_pktbuf_realloc_data(ipv6, uncomp_hdr_len + payload_len) != 0) {"
    },
    {
        "line": 174,
        "fullcodeline": "if (ipv6->size < (uncomp_hdr_len + (sixlo->size - payload_offset))) {"
    },
    {
        "line": 122,
        "fullcodeline": "payload_len = (uint16_t)(rbuf->super.datagram_size - sizeof(ipv6_hdr_t));"
    },
    {
        "line": 111,
        "fullcodeline": "(uncomp_hdr_len - sizeof(ipv6_hdr_t));"
    }
]