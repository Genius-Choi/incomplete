[
    {
        "line": 33,
        "fullcodeline": "assert(image != (const Image *) NULL);"
    },
    {
        "line": 34,
        "fullcodeline": "assert(image->signature == MagickCoreSignature);"
    },
    {
        "line": 37,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 38,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 39,
        "fullcodeline": "assert(method == OptimizeLayer ||"
    },
    {
        "line": 45,
        "fullcodeline": "add_frames=method == OptimizePlusLayer ? MagickTrue : MagickFalse;"
    },
    {
        "line": 49,
        "fullcodeline": "curr=GetFirstImageInList(image);"
    },
    {
        "line": 63,
        "fullcodeline": "curr=GetFirstImageInList(image);"
    },
    {
        "line": 64,
        "fullcodeline": "bounds=(RectangleInfo *) AcquireQuantumMemory((size_t)"
    },
    {
        "line": 69,
        "fullcodeline": "disposals=(DisposeType *) AcquireQuantumMemory((size_t)"
    },
    {
        "line": 80,
        "fullcodeline": "prev_image=CloneImage(curr,curr->columns,curr->rows,MagickTrue,exception);"
    },
    {
        "line": 87,
        "fullcodeline": "prev_image->page=curr->page;  /* ERROR: <-- should not be need, but is! */"
    },
    {
        "line": 88,
        "fullcodeline": "prev_image->page.x=0;"
    },
    {
        "line": 89,
        "fullcodeline": "prev_image->page.y=0;"
    },
    {
        "line": 90,
        "fullcodeline": "prev_image->dispose=NoneDispose;"
    },
    {
        "line": 91,
        "fullcodeline": "prev_image->background_color.alpha_trait=BlendPixelTrait;"
    },
    {
        "line": 92,
        "fullcodeline": "prev_image->background_color.alpha=(MagickRealType) TransparentAlpha;"
    },
    {
        "line": 93,
        "fullcodeline": "(void) SetImageBackgroundColor(prev_image,exception);"
    },
    {
        "line": 102,
        "fullcodeline": "disposals[0]=NoneDispose;"
    },
    {
        "line": 103,
        "fullcodeline": "bounds[0]=CompareImagesBounds(prev_image,curr,CompareAnyLayer,exception);"
    },
    {
        "line": 112,
        "fullcodeline": "i=1;"
    },
    {
        "line": 113,
        "fullcodeline": "bgnd_image=(Image *) NULL;"
    },
    {
        "line": 114,
        "fullcodeline": "dup_image=(Image *) NULL;"
    },
    {
        "line": 115,
        "fullcodeline": "dup_bounds.width=0;"
    },
    {
        "line": 116,
        "fullcodeline": "dup_bounds.height=0;"
    },
    {
        "line": 117,
        "fullcodeline": "dup_bounds.x=0;"
    },
    {
        "line": 118,
        "fullcodeline": "dup_bounds.y=0;"
    },
    {
        "line": 119,
        "fullcodeline": "curr=GetNextImageInList(curr);"
    },
    {
        "line": 401,
        "fullcodeline": "prev_image=DestroyImage(prev_image);"
    },
    {
        "line": 405,
        "fullcodeline": "sans_exception=AcquireExceptionInfo();"
    },
    {
        "line": 406,
        "fullcodeline": "i=0;"
    },
    {
        "line": 407,
        "fullcodeline": "curr=GetFirstImageInList(image);"
    },
    {
        "line": 408,
        "fullcodeline": "optimized_image=NewImageList();"
    },
    {
        "line": 440,
        "fullcodeline": "sans_exception=DestroyExceptionInfo(sans_exception);"
    },
    {
        "line": 441,
        "fullcodeline": "bounds=(RectangleInfo *) RelinquishMagickMemory(bounds);"
    },
    {
        "line": 442,
        "fullcodeline": "disposals=(DisposeType *) RelinquishMagickMemory(disposals);"
    },
    {
        "line": 35,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 50,
        "fullcodeline": "for (; curr != (Image *) NULL; curr=GetNextImageInList(curr))"
    },
    {
        "line": 67,
        "fullcodeline": "if (bounds == (RectangleInfo *) NULL)"
    },
    {
        "line": 72,
        "fullcodeline": "if (disposals == (DisposeType *) NULL)"
    },
    {
        "line": 81,
        "fullcodeline": "if (prev_image == (Image *) NULL)"
    },
    {
        "line": 120,
        "fullcodeline": "for ( ; curr != (const Image *) NULL; curr=GetNextImageInList(curr))"
    },
    {
        "line": 409,
        "fullcodeline": "while ( curr != (const Image *) NULL )"
    },
    {
        "line": 443,
        "fullcodeline": "if (curr != (Image *) NULL)"
    },
    {
        "line": 448,
        "fullcodeline": "return(GetFirstImageInList(optimized_image));"
    },
    {
        "line": 36,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 41,
        "fullcodeline": "method == OptimizePlusLayer);"
    },
    {
        "line": 68,
        "fullcodeline": "ThrowImageException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 74,
        "fullcodeline": "bounds=(RectangleInfo *) RelinquishMagickMemory(bounds);"
    },
    {
        "line": 75,
        "fullcodeline": "ThrowImageException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 83,
        "fullcodeline": "bounds=(RectangleInfo *) RelinquishMagickMemory(bounds);"
    },
    {
        "line": 84,
        "fullcodeline": "disposals=(DisposeType *) RelinquishMagickMemory(disposals);"
    },
    {
        "line": 128,
        "fullcodeline": "bounds[i]=CompareImagesBounds(curr->previous,curr,CompareAnyLayer,exception);"
    },
    {
        "line": 129,
        "fullcodeline": "cleared=IsBoundsCleared(curr->previous,curr,&bounds[i],exception);"
    },
    {
        "line": 130,
        "fullcodeline": "disposals[i-1]=NoneDispose;"
    },
    {
        "line": 382,
        "fullcodeline": "assert(prev_image != (Image *) NULL);"
    },
    {
        "line": 383,
        "fullcodeline": "disposals[i]=disposals[i-1];"
    },
    {
        "line": 399,
        "fullcodeline": "i++;"
    },
    {
        "line": 411,
        "fullcodeline": "prev_image=CloneImage(curr,0,0,MagickTrue,exception);"
    },
    {
        "line": 414,
        "fullcodeline": "prev_image->background_color.alpha_trait=BlendPixelTrait;"
    },
    {
        "line": 426,
        "fullcodeline": "bgnd_image=CropImage(prev_image,&bounds[i],sans_exception);"
    },
    {
        "line": 427,
        "fullcodeline": "prev_image=DestroyImage(prev_image);"
    },
    {
        "line": 430,
        "fullcodeline": "bgnd_image->dispose=disposals[i];"
    },
    {
        "line": 437,
        "fullcodeline": "AppendImageToList(&optimized_image,bgnd_image);"
    },
    {
        "line": 438,
        "fullcodeline": "i++;"
    },
    {
        "line": 445,
        "fullcodeline": "optimized_image=DestroyImageList(optimized_image);"
    },
    {
        "line": 40,
        "fullcodeline": "method == OptimizeImageLayer ||"
    },
    {
        "line": 52,
        "fullcodeline": "if ((curr->columns != image->columns) || (curr->rows != image->rows))"
    },
    {
        "line": 55,
        "fullcodeline": "if ((curr->page.x != 0) || (curr->page.y != 0) ||"
    },
    {
        "line": 65,
        "fullcodeline": "GetImageListLength(curr),(add_frames != MagickFalse ? 2UL : 1UL)*"
    },
    {
        "line": 70,
        "fullcodeline": "GetImageListLength(image),(add_frames != MagickFalse ? 2UL : 1UL)*"
    },
    {
        "line": 85,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 138,
        "fullcodeline": "if ( bounds[i].x < 0 ) {"
    },
    {
        "line": 348,
        "fullcodeline": "if ( disposals[i-1] == DupDispose )"
    },
    {
        "line": 412,
        "fullcodeline": "if (prev_image == (Image *) NULL)"
    },
    {
        "line": 415,
        "fullcodeline": "if ( disposals[i] == DelDispose ) {"
    },
    {
        "line": 428,
        "fullcodeline": "if (bgnd_image == (Image *) NULL)"
    },
    {
        "line": 431,
        "fullcodeline": "if ( disposals[i] == DupDispose ) {"
    },
    {
        "line": 446,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 53,
        "fullcodeline": "ThrowImageException(OptionError,\"ImagesAreNotTheSameSize\");"
    },
    {
        "line": 58,
        "fullcodeline": "ThrowImageException(OptionError,\"ImagePagesAreNotCoalesced\");"
    },
    {
        "line": 352,
        "fullcodeline": "prev_image=DestroyImage(prev_image);"
    },
    {
        "line": 353,
        "fullcodeline": "prev_image=dup_image, dup_image=(Image *) NULL;"
    },
    {
        "line": 354,
        "fullcodeline": "bounds[i+1]=bounds[i];"
    },
    {
        "line": 355,
        "fullcodeline": "bounds[i]=dup_bounds;"
    },
    {
        "line": 356,
        "fullcodeline": "disposals[i-1]=DupDispose;"
    },
    {
        "line": 357,
        "fullcodeline": "disposals[i]=BackgroundDispose;"
    },
    {
        "line": 358,
        "fullcodeline": "i++;"
    },
    {
        "line": 416,
        "fullcodeline": "size_t time = 0;"
    },
    {
        "line": 422,
        "fullcodeline": "time += curr->delay*1000/curr->ticks_per_second;"
    },
    {
        "line": 423,
        "fullcodeline": "prev_image->ticks_per_second = 100L;"
    },
    {
        "line": 424,
        "fullcodeline": "prev_image->delay = time*prev_image->ticks_per_second/1000;"
    },
    {
        "line": 432,
        "fullcodeline": "bgnd_image->delay=0;"
    },
    {
        "line": 433,
        "fullcodeline": "bgnd_image->dispose=NoneDispose;"
    },
    {
        "line": 145,
        "fullcodeline": "if ( add_frames && i>=2 ) {"
    },
    {
        "line": 158,
        "fullcodeline": "try_bounds=CompareImagesBounds(prev_image,curr,CompareAnyLayer,exception);"
    },
    {
        "line": 159,
        "fullcodeline": "try_cleared=IsBoundsCleared(prev_image,curr,&try_bounds,exception);"
    },
    {
        "line": 185,
        "fullcodeline": "dup_bounds.width=dup_bounds.height=0; /* no dup, no pixel added */"
    },
    {
        "line": 216,
        "fullcodeline": "bgnd_image=CloneImage(curr->previous,0,0,MagickTrue,exception);"
    },
    {
        "line": 226,
        "fullcodeline": "bgnd_image->background_color.alpha_trait=BlendPixelTrait;"
    },
    {
        "line": 227,
        "fullcodeline": "bgnd_bounds=bounds[i-1]; /* interum bounds of the previous image */"
    },
    {
        "line": 228,
        "fullcodeline": "ClearBounds(bgnd_image,&bgnd_bounds,exception);"
    },
    {
        "line": 229,
        "fullcodeline": "try_bounds=CompareImagesBounds(bgnd_image,curr,CompareAnyLayer,exception);"
    },
    {
        "line": 230,
        "fullcodeline": "try_cleared=IsBoundsCleared(bgnd_image,curr,&try_bounds,exception);"
    },
    {
        "line": 350,
        "fullcodeline": "if (bgnd_image != (Image *) NULL)"
    },
    {
        "line": 417,
        "fullcodeline": "while ( disposals[i] == DelDispose ) {"
    },
    {
        "line": 436,
        "fullcodeline": "curr=GetNextImageInList(curr);"
    },
    {
        "line": 146,
        "fullcodeline": "disposals[i-1]=DelDispose;"
    },
    {
        "line": 147,
        "fullcodeline": "disposals[i]=NoneDispose;"
    },
    {
        "line": 148,
        "fullcodeline": "bounds[i]=bounds[i-1];"
    },
    {
        "line": 149,
        "fullcodeline": "i++;"
    },
    {
        "line": 166,
        "fullcodeline": "if ( (!try_cleared && cleared ) ||"
    },
    {
        "line": 217,
        "fullcodeline": "if (bgnd_image == (Image *) NULL)"
    },
    {
        "line": 324,
        "fullcodeline": "if ( cleared ||"
    },
    {
        "line": 351,
        "fullcodeline": "bgnd_image=DestroyImage(bgnd_image);"
    },
    {
        "line": 362,
        "fullcodeline": "if ( dup_image != (Image *) NULL)"
    },
    {
        "line": 364,
        "fullcodeline": "if ( disposals[i-1] != PreviousDispose )"
    },
    {
        "line": 366,
        "fullcodeline": "if ( disposals[i-1] == BackgroundDispose )"
    },
    {
        "line": 368,
        "fullcodeline": "if (bgnd_image != (Image *) NULL)"
    },
    {
        "line": 370,
        "fullcodeline": "if ( disposals[i-1] == NoneDispose )"
    },
    {
        "line": 418,
        "fullcodeline": "time += curr->delay*1000/curr->ticks_per_second;"
    },
    {
        "line": 419,
        "fullcodeline": "curr=GetNextImageInList(curr);"
    },
    {
        "line": 420,
        "fullcodeline": "i++;"
    },
    {
        "line": 167,
        "fullcodeline": "try_bounds.width * try_bounds.height"
    },
    {
        "line": 170,
        "fullcodeline": "cleared=try_cleared;"
    },
    {
        "line": 171,
        "fullcodeline": "bounds[i]=try_bounds;"
    },
    {
        "line": 172,
        "fullcodeline": "disposals[i-1]=PreviousDispose;"
    },
    {
        "line": 188,
        "fullcodeline": "dup_image=CloneImage(curr->previous,0,0,MagickTrue,exception);"
    },
    {
        "line": 196,
        "fullcodeline": "dup_image->background_color.alpha_trait=BlendPixelTrait;"
    },
    {
        "line": 197,
        "fullcodeline": "dup_bounds=CompareImagesBounds(dup_image,curr,CompareClearLayer,exception);"
    },
    {
        "line": 198,
        "fullcodeline": "ClearBounds(dup_image,&dup_bounds,exception);"
    },
    {
        "line": 199,
        "fullcodeline": "try_bounds=CompareImagesBounds(dup_image,curr,CompareAnyLayer,exception);"
    },
    {
        "line": 219,
        "fullcodeline": "bounds=(RectangleInfo *) RelinquishMagickMemory(bounds);"
    },
    {
        "line": 220,
        "fullcodeline": "disposals=(DisposeType *) RelinquishMagickMemory(disposals);"
    },
    {
        "line": 221,
        "fullcodeline": "prev_image=DestroyImage(prev_image);"
    },
    {
        "line": 243,
        "fullcodeline": "try_bounds=CompareImagesBounds(curr->previous,curr,CompareClearLayer,exception);"
    },
    {
        "line": 291,
        "fullcodeline": "ClearBounds(bgnd_image,&bgnd_bounds,exception);"
    },
    {
        "line": 311,
        "fullcodeline": "try_bounds=CompareImagesBounds(bgnd_image,curr,CompareOverlayLayer,exception);"
    },
    {
        "line": 325,
        "fullcodeline": "bgnd_bounds.width*bgnd_bounds.height"
    },
    {
        "line": 331,
        "fullcodeline": "cleared=MagickFalse;"
    },
    {
        "line": 332,
        "fullcodeline": "bounds[i-1]=bgnd_bounds;"
    },
    {
        "line": 333,
        "fullcodeline": "bounds[i]=try_bounds;"
    },
    {
        "line": 336,
        "fullcodeline": "disposals[i-1]=BackgroundDispose;"
    },
    {
        "line": 363,
        "fullcodeline": "dup_image=DestroyImage(dup_image);"
    },
    {
        "line": 365,
        "fullcodeline": "prev_image=DestroyImage(prev_image);"
    },
    {
        "line": 367,
        "fullcodeline": "prev_image=bgnd_image, bgnd_image=(Image *) NULL;"
    },
    {
        "line": 369,
        "fullcodeline": "bgnd_image=DestroyImage(bgnd_image);"
    },
    {
        "line": 372,
        "fullcodeline": "prev_image=ReferenceImage(curr->previous);"
    },
    {
        "line": 189,
        "fullcodeline": "if (dup_image == (Image *) NULL)"
    },
    {
        "line": 200,
        "fullcodeline": "if ( cleared ||"
    },
    {
        "line": 222,
        "fullcodeline": "if ( dup_image != (Image *) NULL)"
    },
    {
        "line": 224,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 250,
        "fullcodeline": "if ( bgnd_bounds.x < 0 )"
    },
    {
        "line": 327,
        "fullcodeline": "< bounds[i-1].width*bounds[i-1].height"
    },
    {
        "line": 334,
        "fullcodeline": "if ( disposals[i-1] == DupDispose )"
    },
    {
        "line": 373,
        "fullcodeline": "if (prev_image == (Image *) NULL)"
    },
    {
        "line": 191,
        "fullcodeline": "bounds=(RectangleInfo *) RelinquishMagickMemory(bounds);"
    },
    {
        "line": 192,
        "fullcodeline": "disposals=(DisposeType *) RelinquishMagickMemory(disposals);"
    },
    {
        "line": 193,
        "fullcodeline": "prev_image=DestroyImage(prev_image);"
    },
    {
        "line": 201,
        "fullcodeline": "dup_bounds.width*dup_bounds.height"
    },
    {
        "line": 205,
        "fullcodeline": "cleared=MagickFalse;"
    },
    {
        "line": 206,
        "fullcodeline": "bounds[i]=try_bounds;"
    },
    {
        "line": 207,
        "fullcodeline": "disposals[i-1]=DupDispose;"
    },
    {
        "line": 223,
        "fullcodeline": "dup_image=DestroyImage(dup_image);"
    },
    {
        "line": 251,
        "fullcodeline": "bgnd_bounds = try_bounds;"
    },
    {
        "line": 326,
        "fullcodeline": "+try_bounds.width*try_bounds.height"
    },
    {
        "line": 335,
        "fullcodeline": "dup_image=DestroyImage(dup_image);"
    },
    {
        "line": 375,
        "fullcodeline": "bounds=(RectangleInfo *) RelinquishMagickMemory(bounds);"
    },
    {
        "line": 376,
        "fullcodeline": "disposals=(DisposeType *) RelinquishMagickMemory(disposals);"
    },
    {
        "line": 194,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 203,
        "fullcodeline": "< bounds[i].width * bounds[i].height )"
    },
    {
        "line": 211,
        "fullcodeline": "dup_bounds.width=dup_bounds.height=0;"
    },
    {
        "line": 328,
        "fullcodeline": "+dup_bounds.width*dup_bounds.height"
    },
    {
        "line": 377,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 202,
        "fullcodeline": "+try_bounds.width*try_bounds.height"
    },
    {
        "line": 259,
        "fullcodeline": "if ( try_bounds.x < bgnd_bounds.x )"
    },
    {
        "line": 272,
        "fullcodeline": "if ( try_bounds.y < bgnd_bounds.y )"
    },
    {
        "line": 261,
        "fullcodeline": "bgnd_bounds.width+= bgnd_bounds.x-try_bounds.x;"
    },
    {
        "line": 264,
        "fullcodeline": "bgnd_bounds.x = try_bounds.x;"
    },
    {
        "line": 274,
        "fullcodeline": "bgnd_bounds.height += bgnd_bounds.y - try_bounds.y;"
    },
    {
        "line": 277,
        "fullcodeline": "bgnd_bounds.y = try_bounds.y;"
    },
    {
        "line": 262,
        "fullcodeline": "if ( bgnd_bounds.width < try_bounds.width )"
    },
    {
        "line": 268,
        "fullcodeline": "try_bounds.width += try_bounds.x - bgnd_bounds.x;"
    },
    {
        "line": 275,
        "fullcodeline": "if ( bgnd_bounds.height < try_bounds.height )"
    },
    {
        "line": 281,
        "fullcodeline": "try_bounds.height += try_bounds.y - bgnd_bounds.y;"
    },
    {
        "line": 263,
        "fullcodeline": "bgnd_bounds.width = try_bounds.width;"
    },
    {
        "line": 269,
        "fullcodeline": "if ( bgnd_bounds.width < try_bounds.width )"
    },
    {
        "line": 276,
        "fullcodeline": "bgnd_bounds.height = try_bounds.height;"
    },
    {
        "line": 282,
        "fullcodeline": "if ( bgnd_bounds.height < try_bounds.height )"
    },
    {
        "line": 270,
        "fullcodeline": "bgnd_bounds.width = try_bounds.width;"
    },
    {
        "line": 283,
        "fullcodeline": "bgnd_bounds.height = try_bounds.height;"
    }
]