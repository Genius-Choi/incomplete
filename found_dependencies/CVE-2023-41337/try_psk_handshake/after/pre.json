[
    {
        "line": 6,
        "fullcodeline": "uint64_t issue_at, now = tls->ctx->get_time->cb(tls->ctx->get_time);"
    },
    {
        "line": 9,
        "fullcodeline": "uint8_t binder_key[PTLS_MAX_DIGEST_SIZE];"
    },
    {
        "line": 12,
        "fullcodeline": "ptls_buffer_init(&decbuf, \"\", 0);"
    },
    {
        "line": 91,
        "fullcodeline": "*psk_index = SIZE_MAX;"
    },
    {
        "line": 92,
        "fullcodeline": "*accept_early_data = 0;"
    },
    {
        "line": 93,
        "fullcodeline": "tls->key_share = NULL;"
    },
    {
        "line": 94,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 102,
        "fullcodeline": "ptls__key_schedule_update_hash(tls->key_schedule, ch_trunc.base, ch_trunc.len, 0);"
    },
    {
        "line": 111,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 114,
        "fullcodeline": "ptls_buffer_dispose(&decbuf);"
    },
    {
        "line": 115,
        "fullcodeline": "ptls_clear_memory(binder_key, sizeof(binder_key));"
    },
    {
        "line": 14,
        "fullcodeline": "for (*psk_index = 0; *psk_index < ch->psk.identities.count; ++*psk_index) {"
    },
    {
        "line": 98,
        "fullcodeline": "if ((ret = key_schedule_extract(tls->key_schedule, ticket_psk)) != 0)"
    },
    {
        "line": 100,
        "fullcodeline": "if ((ret = derive_secret(tls->key_schedule, binder_key, \"res binder\")) != 0)"
    },
    {
        "line": 103,
        "fullcodeline": "if ((ret = calc_verify_data(binder_key /* to conserve space, reuse binder_key for storing verify_data */, tls->key_schedule,"
    },
    {
        "line": 106,
        "fullcodeline": "if (!ptls_mem_equal(ch->psk.identities.list[*psk_index].binder.base, binder_key,"
    },
    {
        "line": 15,
        "fullcodeline": "struct st_ptls_client_hello_psk_t *identity = ch->psk.identities.list + *psk_index;"
    },
    {
        "line": 17,
        "fullcodeline": "int can_accept_early_data = 1;"
    },
    {
        "line": 18,
        "fullcodeline": "decbuf.off = 0;"
    },
    {
        "line": 36,
        "fullcodeline": "*accept_early_data = 0;"
    },
    {
        "line": 108,
        "fullcodeline": "ret = PTLS_ALERT_DECRYPT_ERROR;"
    },
    {
        "line": 19,
        "fullcodeline": "switch (tls->ctx->encrypt_ticket->cb(tls->ctx->encrypt_ticket, tls, 0, &decbuf, identity->identity)) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (decode_session_identifier(&issue_at, &ticket_psk, &age_add, &ticket_ctx, &ticket_key_exchange_id, &ticket_csid,"
    },
    {
        "line": 32,
        "fullcodeline": "if (now < issue_at)"
    },
    {
        "line": 34,
        "fullcodeline": "if (now - issue_at > (uint64_t)tls->ctx->ticket_lifetime * 1000)"
    },
    {
        "line": 37,
        "fullcodeline": "if (ch->psk.early_data_indication && can_accept_early_data) {"
    },
    {
        "line": 68,
        "fullcodeline": "tls->key_share = *a;"
    },
    {
        "line": 71,
        "fullcodeline": "if (ticket_csid != tls->cipher_suite->id)"
    },
    {
        "line": 74,
        "fullcodeline": "if (ticket_negotiated_protocol.len != 0) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (ticket_psk.len != tls->key_schedule->hashes[0].algo->digest_size)"
    },
    {
        "line": 83,
        "fullcodeline": "if (ch->psk.identities.list[*psk_index].binder.len != tls->key_schedule->hashes[0].algo->digest_size)"
    },
    {
        "line": 23,
        "fullcodeline": "can_accept_early_data = 0;"
    },
    {
        "line": 39,
        "fullcodeline": "int64_t delta = (now - issue_at) - (identity->obfuscated_ticket_age - age_add);"
    },
    {
        "line": 64,
        "fullcodeline": "for (a = tls->ctx->key_exchanges; *a != NULL && (*a)->id != ticket_key_exchange_id; ++a)"
    },
    {
        "line": 66,
        "fullcodeline": "if (*a == NULL)"
    },
    {
        "line": 29,
        "fullcodeline": "&ticket_negotiated_protocol, decbuf.base, decbuf.base + decbuf.off) != 0)"
    },
    {
        "line": 40,
        "fullcodeline": "if (delta < 0)"
    },
    {
        "line": 42,
        "fullcodeline": "if (tls->ctx->max_early_data_size != 0 && delta <= PTLS_EARLY_DATA_MAX_DELAY)"
    },
    {
        "line": 47,
        "fullcodeline": "if (!(ticket_ctx.len == sizeof(tls->ctx->ticket_context.bytes) &&"
    },
    {
        "line": 75,
        "fullcodeline": "if (tls->negotiated_protocol == NULL)"
    },
    {
        "line": 77,
        "fullcodeline": "if (!vec_is_string(ticket_negotiated_protocol, tls->negotiated_protocol))"
    },
    {
        "line": 41,
        "fullcodeline": "delta = -delta;"
    },
    {
        "line": 43,
        "fullcodeline": "*accept_early_data = 1;"
    },
    {
        "line": 52,
        "fullcodeline": "if (ticket_ctx.len != 0) {"
    },
    {
        "line": 48,
        "fullcodeline": "memcmp(ticket_ctx.base, tls->ctx->ticket_context.bytes, ticket_ctx.len) == 0))"
    },
    {
        "line": 53,
        "fullcodeline": "if (tls->server_name == NULL)"
    },
    {
        "line": 55,
        "fullcodeline": "if (!vec_is_string(ticket_ctx, tls->server_name))"
    },
    {
        "line": 58,
        "fullcodeline": "if (tls->server_name != NULL)"
    }
]