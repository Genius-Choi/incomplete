[
    {
        "line": 6,
        "fullcodeline": "static const ptls_key_exchange_algorithm_t *key_exchanges[] = {"
    },
    {
        "line": 22,
        "fullcodeline": "} *pctx = h2o_mem_alloc(sizeof(*pctx));"
    },
    {
        "line": 25,
        "fullcodeline": "STACK_OF(X509) * cert_chain;"
    },
    {
        "line": 27,
        "fullcodeline": "int use_client_verify = 0;"
    },
    {
        "line": 31,
        "fullcodeline": "*pctx = (struct st_fat_context_t){"
    },
    {
        "line": 28,
        "fullcodeline": "if (cipher_suites == NULL)"
    },
    {
        "line": 80,
        "fullcodeline": "SSL *fakeconn = SSL_new(identity->ossl);"
    },
    {
        "line": 81,
        "fullcodeline": "assert(fakeconn != NULL);"
    },
    {
        "line": 82,
        "fullcodeline": "key = SSL_get_privatekey(fakeconn);"
    },
    {
        "line": 83,
        "fullcodeline": "assert(key != NULL);"
    },
    {
        "line": 87,
        "fullcodeline": "use_client_verify = (SSL_get_verify_mode(fakeconn) & SSL_VERIFY_PEER) ? 1 : 0;"
    },
    {
        "line": 88,
        "fullcodeline": "SSL_free(fakeconn);"
    },
    {
        "line": 123,
        "fullcodeline": "if (raw_public_key.base == NULL) {"
    },
    {
        "line": 139,
        "fullcodeline": "assert(sizeof(pctx->ctx.ticket_context.bytes) == PTLS_SHA256_DIGEST_SIZE);"
    },
    {
        "line": 144,
        "fullcodeline": "if (listener->quic.ctx != NULL) {"
    },
    {
        "line": 29,
        "fullcodeline": "cipher_suites = ptls_openssl_cipher_suites;"
    },
    {
        "line": 84,
        "fullcodeline": "if ((cert = SSL_get_certificate(fakeconn)) != NULL)"
    },
    {
        "line": 92,
        "fullcodeline": "pctx->ctx.require_client_authentication = 1;"
    },
    {
        "line": 94,
        "fullcodeline": "X509_STORE *ca_store = SSL_CTX_get_cert_store(identity->ossl);"
    },
    {
        "line": 99,
        "fullcodeline": "pctx->ctx.verify_certificate = &pctx->vc.super;"
    },
    {
        "line": 112,
        "fullcodeline": "pctx->ctx.sign_certificate = &pctx->sc.async_digestsign.super;"
    },
    {
        "line": 126,
        "fullcodeline": "SSL_CTX_get_extra_chain_certs(identity->ossl, &cert_chain);"
    },
    {
        "line": 127,
        "fullcodeline": "ret = ptls_openssl_load_certificates(&pctx->ctx, cert, cert_chain);"
    },
    {
        "line": 156,
        "fullcodeline": "quicly_amend_ptls_context(&pctx->ctx);"
    },
    {
        "line": 85,
        "fullcodeline": "X509_up_ref(cert); /* boringssl calls the destructor when SSL_free is called */"
    },
    {
        "line": 95,
        "fullcodeline": "if (ptls_openssl_init_verify_certificate(&pctx->vc, ca_store) != 0) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (pctx->sc.async_digestsign.schemes == NULL)"
    },
    {
        "line": 119,
        "fullcodeline": "pctx->ctx.sign_certificate = &pctx->sc.ossl.super;"
    },
    {
        "line": 125,
        "fullcodeline": "assert(cert != NULL);"
    },
    {
        "line": 128,
        "fullcodeline": "assert(ret == 0);"
    },
    {
        "line": 134,
        "fullcodeline": "pctx->ctx.use_raw_public_keys = 1;"
    },
    {
        "line": 135,
        "fullcodeline": "pctx->ctx.emit_certificate = NULL;"
    },
    {
        "line": 32,
        "fullcodeline": ".ctx ="
    },
    {
        "line": 62,
        "fullcodeline": ".ch ="
    },
    {
        "line": 70,
        "fullcodeline": ".ec ="
    },
    {
        "line": 96,
        "fullcodeline": "free(pctx);"
    },
    {
        "line": 104,
        "fullcodeline": "pctx->sc.async_digestsign = (struct async_nb_picotls_context_t){"
    },
    {
        "line": 33,
        "fullcodeline": "{"
    },
    {
        "line": 63,
        "fullcodeline": "{"
    },
    {
        "line": 71,
        "fullcodeline": "{"
    },
    {
        "line": 115,
        "fullcodeline": "if (ptls_openssl_init_sign_certificate(&pctx->sc.ossl, key) != 0) {"
    },
    {
        "line": 105,
        "fullcodeline": ".super = {async_nb_picotls_sign},"
    },
    {
        "line": 106,
        "fullcodeline": ".key = key,"
    },
    {
        "line": 107,
        "fullcodeline": ".schemes = ptls_openssl_lookup_signature_schemes(key),"
    },
    {
        "line": 34,
        "fullcodeline": ".random_bytes = ptls_openssl_random_bytes,"
    },
    {
        "line": 35,
        "fullcodeline": ".get_time = &ptls_get_time,"
    },
    {
        "line": 36,
        "fullcodeline": ".key_exchanges = key_exchanges,"
    },
    {
        "line": 37,
        "fullcodeline": ".cipher_suites = cipher_suites,"
    },
    {
        "line": 38,
        "fullcodeline": ".tls12_cipher_suites = ptls_openssl_tls12_cipher_suites,"
    },
    {
        "line": 39,
        "fullcodeline": ".certificates = {0}, /* fill later */"
    },
    {
        "line": 40,
        "fullcodeline": ".ech.server = {ech_create_opener, ech_retry_configs},"
    },
    {
        "line": 41,
        "fullcodeline": ".on_client_hello = &pctx->ch.super,"
    },
    {
        "line": 42,
        "fullcodeline": ".emit_certificate = &pctx->ec.super,"
    },
    {
        "line": 43,
        "fullcodeline": ".sign_certificate = NULL, /* initailized below */"
    },
    {
        "line": 44,
        "fullcodeline": ".verify_certificate = NULL,"
    },
    {
        "line": 45,
        "fullcodeline": ".ticket_lifetime = 0, /* initialized alongside encrypt_ticket */"
    },
    {
        "line": 46,
        "fullcodeline": ".max_early_data_size = 8192,"
    },
    {
        "line": 47,
        "fullcodeline": ".hkdf_label_prefix__obsolete = NULL,"
    },
    {
        "line": 48,
        "fullcodeline": ".require_dhe_on_psk = 1,"
    },
    {
        "line": 49,
        "fullcodeline": ".use_exporter = 0,"
    },
    {
        "line": 50,
        "fullcodeline": ".send_change_cipher_spec = 0, /* is a client-only flag. As a server, this flag can be of any value. */"
    },
    {
        "line": 51,
        "fullcodeline": ".require_client_authentication = 0,"
    },
    {
        "line": 52,
        "fullcodeline": ".omit_end_of_early_data = 0,"
    },
    {
        "line": 53,
        "fullcodeline": ".server_cipher_preference = server_cipher_preference,"
    },
    {
        "line": 54,
        "fullcodeline": ".encrypt_ticket = NULL, /* initialized later */"
    },
    {
        "line": 55,
        "fullcodeline": ".save_ticket = NULL,    /* initialized later */"
    },
    {
        "line": 56,
        "fullcodeline": ".log_event = NULL,"
    },
    {
        "line": 57,
        "fullcodeline": ".update_open_count = NULL,"
    },
    {
        "line": 58,
        "fullcodeline": ".update_traffic_key = NULL,"
    },
    {
        "line": 59,
        "fullcodeline": ".decompress_certificate = NULL,"
    },
    {
        "line": 60,
        "fullcodeline": ".on_extension = NULL,"
    },
    {
        "line": 64,
        "fullcodeline": ".listener = listener,"
    },
    {
        "line": 65,
        "fullcodeline": ".super ="
    },
    {
        "line": 72,
        "fullcodeline": ".conf = identity,"
    },
    {
        "line": 73,
        "fullcodeline": ".super ="
    },
    {
        "line": 66,
        "fullcodeline": "{"
    },
    {
        "line": 74,
        "fullcodeline": "{"
    },
    {
        "line": 67,
        "fullcodeline": ".cb = on_client_hello_ptls,"
    },
    {
        "line": 75,
        "fullcodeline": ".cb = on_emit_certificate_ptls,"
    }
]