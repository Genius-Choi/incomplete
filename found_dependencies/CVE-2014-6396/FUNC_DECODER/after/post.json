[
    {
        "line": 3,
        "fullcodeline": "DECLARE_DISP_PTR(ptr);"
    },
    {
        "line": 4,
        "fullcodeline": "struct ec_session *s = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "void *ident = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "char tmp[MAX_ASCII_ADDR_LEN];"
    },
    {
        "line": 10,
        "fullcodeline": "(void) DECODE_DATA;"
    },
    {
        "line": 11,
        "fullcodeline": "(void) DECODE_DATALEN;"
    },
    {
        "line": 12,
        "fullcodeline": "(void) DECODED_LEN;"
    },
    {
        "line": 108,
        "fullcodeline": "SAFE_FREE(ident);"
    },
    {
        "line": 14,
        "fullcodeline": "if (FROM_CLIENT(\"postgresql\", PACKET)) {"
    },
    {
        "line": 18,
        "fullcodeline": "dissect_create_ident(&ident, PACKET, DISSECT_CODE(dissector_postgresql));"
    },
    {
        "line": 15,
        "fullcodeline": "if (PACKET->DATA.len < 4)"
    },
    {
        "line": 21,
        "fullcodeline": "if (session_get(&s, ident, DISSECT_IDENT_LEN) == -ENOTFOUND) {"
    },
    {
        "line": 84,
        "fullcodeline": "dissect_create_ident(&ident, PACKET, DISSECT_CODE(dissector_postgresql));"
    },
    {
        "line": 23,
        "fullcodeline": "unsigned char *u = memmem(ptr, PACKET->DATA.len, \"user\", 4);"
    },
    {
        "line": 24,
        "fullcodeline": "unsigned char *d = memmem(ptr, PACKET->DATA.len, \"database\", 8);"
    },
    {
        "line": 82,
        "fullcodeline": "if (PACKET->DATA.len < 9)"
    },
    {
        "line": 86,
        "fullcodeline": "if (session_get(&s, ident, DISSECT_IDENT_LEN) == ESUCCESS) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (!memcmp(ptr + 4, \"\\x00\\x03\\x00\\x00\", 4) && u && d) {"
    },
    {
        "line": 47,
        "fullcodeline": "conn_status = (struct postgresql_status *) s->data;"
    },
    {
        "line": 87,
        "fullcodeline": "conn_status = (struct postgresql_status *) s->data;"
    },
    {
        "line": 27,
        "fullcodeline": "dissect_create_session(&s, PACKET, DISSECT_CODE(dissector_postgresql));"
    },
    {
        "line": 30,
        "fullcodeline": "SAFE_CALLOC(s->data, 1, sizeof(struct postgresql_status));"
    },
    {
        "line": 32,
        "fullcodeline": "conn_status = (struct postgresql_status *) s->data;"
    },
    {
        "line": 33,
        "fullcodeline": "conn_status->status = WAIT_AUTH;"
    },
    {
        "line": 36,
        "fullcodeline": "strncpy((char*)conn_status->user, (char*)(u + 5), 65);"
    },
    {
        "line": 37,
        "fullcodeline": "conn_status->user[64] = 0;"
    },
    {
        "line": 40,
        "fullcodeline": "strncpy((char*)conn_status->database, (char*)(d + 9), 65);"
    },
    {
        "line": 41,
        "fullcodeline": "conn_status->database[64] = 0;"
    },
    {
        "line": 44,
        "fullcodeline": "session_put(s);"
    },
    {
        "line": 48,
        "fullcodeline": "if (conn_status->status == WAIT_RESPONSE) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (conn_status->status == WAIT_AUTH &&"
    },
    {
        "line": 90,
        "fullcodeline": "!memcmp(ptr + 5, \"\\x00\\x00\\x00\\x05\", 4)) {"
    },
    {
        "line": 92,
        "fullcodeline": "conn_status->status = WAIT_RESPONSE;"
    },
    {
        "line": 94,
        "fullcodeline": "conn_status->type = MD5;"
    },
    {
        "line": 95,
        "fullcodeline": "DEBUG_MSG(\"\\tDissector_postgresql AUTH type is MD5\");"
    },
    {
        "line": 96,
        "fullcodeline": "hex_encode(ptr + 9, 4, conn_status->salt); /* save salt */"
    },
    {
        "line": 51,
        "fullcodeline": "if (ptr[0] == 'p' && conn_status->type == MD5) {"
    },
    {
        "line": 89,
        "fullcodeline": "ptr[0] == 'R' && !memcmp(ptr + 1, \"\\x00\\x00\\x00\\x0c\", 4)  &&"
    },
    {
        "line": 52,
        "fullcodeline": "DEBUG_MSG(\"\\tDissector_postgresql RESPONSE type is MD5\");"
    },
    {
        "line": 61,
        "fullcodeline": "memcpy(conn_status->hash, ptr + 5 + 3, 32);"
    },
    {
        "line": 62,
        "fullcodeline": "conn_status->hash[32] = 0;"
    },
    {
        "line": 63,
        "fullcodeline": "DISSECT_MSG(\"%s:$postgres$%s*%s*%s:%s:%d\\n\", conn_status->user, conn_status->user, conn_status->salt, conn_status->hash, ip_addr_ntoa(&PACKET->L3.dst, tmp), ntohs(PACKET->L4.dst));"
    },
    {
        "line": 64,
        "fullcodeline": "dissect_wipe_session(PACKET, DISSECT_CODE(dissector_postgresql));"
    },
    {
        "line": 98,
        "fullcodeline": "else if (conn_status->status == WAIT_AUTH &&"
    },
    {
        "line": 53,
        "fullcodeline": "if(memcmp(ptr + 1, \"\\x00\\x00\\x00\\x28\", 4)) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (PACKET->DATA.len < 40) {"
    },
    {
        "line": 100,
        "fullcodeline": "!memcmp(ptr + 5, \"\\x00\\x00\\x00\\x03\", 4)) {"
    },
    {
        "line": 101,
        "fullcodeline": "conn_status->status = WAIT_RESPONSE;"
    },
    {
        "line": 102,
        "fullcodeline": "conn_status->type = CT;"
    },
    {
        "line": 103,
        "fullcodeline": "DEBUG_MSG(\"\\tDissector_postgresql AUTH type is clear-text!\");"
    },
    {
        "line": 54,
        "fullcodeline": "DEBUG_MSG(\"\\tDissector_postgresql BUG, expected length is 40\");"
    },
    {
        "line": 58,
        "fullcodeline": "DEBUG_MSG(\"\\tDissector_postgresql BUG, expected length is 40\");"
    },
    {
        "line": 66,
        "fullcodeline": "else if (ptr[0] == 'p' && conn_status->type == CT) {"
    },
    {
        "line": 99,
        "fullcodeline": "ptr[0] == 'R' && !memcmp(ptr + 1, \"\\x00\\x00\\x00\\x08\", 4)  &&"
    },
    {
        "line": 68,
        "fullcodeline": "DEBUG_MSG(\"\\tDissector_postgresql RESPONSE type is clear-text!\");"
    },
    {
        "line": 69,
        "fullcodeline": "GET_ULONG_BE(length, ptr, 1);"
    },
    {
        "line": 70,
        "fullcodeline": "length -= 4;"
    },
    {
        "line": 75,
        "fullcodeline": "snprintf((char*)conn_status->password, length+1, \"%s\", (char*)(ptr + 5));"
    },
    {
        "line": 76,
        "fullcodeline": "DISSECT_MSG(\"PostgreSQL credentials:%s-%d:%s:%s\\n\", ip_addr_ntoa(&PACKET->L3.dst, tmp), ntohs(PACKET->L4.dst), conn_status->user, conn_status->password);"
    },
    {
        "line": 77,
        "fullcodeline": "dissect_wipe_session(PACKET, DISSECT_CODE(dissector_postgresql));"
    },
    {
        "line": 71,
        "fullcodeline": "if (length < 0 || length > 65 || PACKET->DATA.len < length+5) {"
    },
    {
        "line": 72,
        "fullcodeline": "dissect_wipe_session(PACKET, DISSECT_CODE(dissector_postgresql));"
    }
]