[
    {
        "line": 5,
        "fullcodeline": "char *s = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "struct ly_ctx *ctx = list->module->ctx;"
    },
    {
        "line": 8,
        "fullcodeline": "for (i = 0; i < list->keys_size; ++i) {"
    },
    {
        "line": 9,
        "fullcodeline": "assert(keys_str);"
    },
    {
        "line": 26,
        "fullcodeline": "rc = lys_getnext_data(lys_node_module((struct lys_node *)list), (struct lys_node *)list, keys_str, len, LYS_LEAF,"
    },
    {
        "line": 62,
        "fullcodeline": "keys_str = value;"
    },
    {
        "line": 11,
        "fullcodeline": "if (!list->child) {"
    },
    {
        "line": 17,
        "fullcodeline": "if ((value = strpbrk(keys_str, \" \\t\\n\"))) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (check_key(list, i, keys_str, len)) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (lyp_check_status(list->flags, list->module, list->name,"
    },
    {
        "line": 59,
        "fullcodeline": "while (value && isspace(value[0])) {"
    },
    {
        "line": 13,
        "fullcodeline": "LOGVAL(ctx, LYE_INRESOLV, LY_VLOG_LYS, list, \"list keys\", keys_str);"
    },
    {
        "line": 18,
        "fullcodeline": "len = value - keys_str;"
    },
    {
        "line": 27,
        "fullcodeline": "(const struct lys_node **)&list->keys[i]);"
    },
    {
        "line": 41,
        "fullcodeline": "(struct lys_node *)list->keys[i])) {"
    },
    {
        "line": 50,
        "fullcodeline": "assert(log_opt == ILO_STORE);"
    },
    {
        "line": 51,
        "fullcodeline": "log_opt = ILO_LOG;"
    },
    {
        "line": 52,
        "fullcodeline": "LOGWRN(ctx, \"Default value \\\"%s\\\" in the list key \\\"%s\\\" is ignored. (%s)\", list->keys[i]->dflt,"
    },
    {
        "line": 54,
        "fullcodeline": "log_opt = ILO_STORE;"
    },
    {
        "line": 55,
        "fullcodeline": "free(s);"
    },
    {
        "line": 60,
        "fullcodeline": "value++;"
    },
    {
        "line": 19,
        "fullcodeline": "while (isspace(value[0])) {"
    },
    {
        "line": 23,
        "fullcodeline": "len = strlen(keys_str);"
    },
    {
        "line": 35,
        "fullcodeline": "return -1;"
    },
    {
        "line": 42,
        "fullcodeline": "return -1;"
    },
    {
        "line": 53,
        "fullcodeline": "list->keys[i]->name, s = lys_path((struct lys_node*)list, LYS_PATH_FIRST_PREFIX));"
    },
    {
        "line": 20,
        "fullcodeline": "value++;"
    }
]