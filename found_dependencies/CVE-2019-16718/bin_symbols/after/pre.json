[
    {
        "line": 2,
        "fullcodeline": "RBinInfo *info = r_bin_get_info (r->bin);"
    },
    {
        "line": 3,
        "fullcodeline": "RList *entries = r_bin_get_entries (r->bin);"
    },
    {
        "line": 7,
        "fullcodeline": "bool firstexp = true;"
    },
    {
        "line": 8,
        "fullcodeline": "bool printHere = false;"
    },
    {
        "line": 9,
        "fullcodeline": "int i = 0, lastfs = 's';"
    },
    {
        "line": 10,
        "fullcodeline": "bool bin_demangle = r_config_get_i (r->config, \"bin.demangle\");"
    },
    {
        "line": 20,
        "fullcodeline": "const char *lang = bin_demangle ? r_config_get (r->config, \"bin.lang\") : NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "RList *symbols = r_bin_get_symbols (r->bin);"
    },
    {
        "line": 23,
        "fullcodeline": "r_spaces_push (&r->anal->meta_spaces, \"bin\");"
    },
    {
        "line": 47,
        "fullcodeline": "size_t count = 0;"
    },
    {
        "line": 48,
        "fullcodeline": "r_list_foreach (symbols, iter, symbol) {"
    },
    {
        "line": 11,
        "fullcodeline": "if (!info) {"
    },
    {
        "line": 19,
        "fullcodeline": "bool is_arm = info && info->arch && !strncmp (info->arch, \"arm\", 3);"
    },
    {
        "line": 25,
        "fullcodeline": "if (IS_MODE_JSON (mode) && !printHere) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (IS_MODE_NORMAL (mode)) {"
    },
    {
        "line": 52,
        "fullcodeline": "char *r_symbol_name = r_str_escape_utf8 (symbol->name, false, true);"
    },
    {
        "line": 53,
        "fullcodeline": "ut64 addr = compute_addr (r->bin, symbol->paddr, symbol->vaddr, va);"
    },
    {
        "line": 54,
        "fullcodeline": "int len = symbol->size ? symbol->size : 32;"
    },
    {
        "line": 55,
        "fullcodeline": "SymName sn = {0};"
    },
    {
        "line": 74,
        "fullcodeline": "count ++;"
    },
    {
        "line": 75,
        "fullcodeline": "snInit (r, &sn, symbol, lang);"
    },
    {
        "line": 15,
        "fullcodeline": "if (args && *args == '.') {"
    },
    {
        "line": 16,
        "fullcodeline": "printHere = true;"
    },
    {
        "line": 49,
        "fullcodeline": "if (!symbol->name) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (exponly && !isAnExport (symbol)) {"
    },
    {
        "line": 248,
        "fullcodeline": "if (count == 0 && IS_MODE_JSON (mode)) {"
    },
    {
        "line": 255,
        "fullcodeline": "r_list_foreach (entries, iter, entry) {"
    },
    {
        "line": 261,
        "fullcodeline": "if (IS_MODE_JSON (mode) && !printHere) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (name && strcmp (r_symbol_name, name)) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (at && (!symbol->size || !is_in_range (at, addr, symbol->size))) {"
    },
    {
        "line": 69,
        "fullcodeline": "if ((printHere && !is_in_range (r->offset, symbol->paddr, len))"
    },
    {
        "line": 70,
        "fullcodeline": "&& (printHere && !is_in_range (r->offset, addr, len))) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (IS_MODE_SET (mode) && (is_section_symbol (symbol) || is_file_symbol (symbol))) {"
    },
    {
        "line": 27,
        "fullcodeline": "} else if (IS_MODE_SET (mode)) {"
    },
    {
        "line": 256,
        "fullcodeline": "if (IS_MODE_SET (mode)) {"
    },
    {
        "line": 28,
        "fullcodeline": "r_flag_space_set (r->flags, R_FLAGS_FS_SYMBOLS);"
    },
    {
        "line": 82,
        "fullcodeline": "} else if (IS_MODE_SET (mode) && is_special_symbol (symbol)) {"
    },
    {
        "line": 29,
        "fullcodeline": "} else if (!at && exponly) {"
    },
    {
        "line": 84,
        "fullcodeline": "handle_arm_special_symbol (r, symbol, va);"
    },
    {
        "line": 86,
        "fullcodeline": "} else if (IS_MODE_SET (mode)) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (IS_MODE_RAD (mode)) {"
    },
    {
        "line": 91,
        "fullcodeline": "select_flag_space (r, symbol);"
    },
    {
        "line": 136,
        "fullcodeline": "r_flag_space_pop (r->flags);"
    },
    {
        "line": 35,
        "fullcodeline": "} else if (!at && !exponly) {"
    },
    {
        "line": 89,
        "fullcodeline": "handle_arm_symbol (r, symbol, info, va);"
    },
    {
        "line": 94,
        "fullcodeline": "RFlagItem *fi = r_flag_get (r->flags, sn.methflag);"
    },
    {
        "line": 133,
        "fullcodeline": "r_meta_add (r->anal, R_META_TYPE_COMMENT,"
    },
    {
        "line": 137,
        "fullcodeline": "} else if (IS_MODE_JSON (mode)) {"
    },
    {
        "line": 32,
        "fullcodeline": "} else if (IS_MODE_NORMAL (mode)) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (IS_MODE_RAD (mode)) {"
    },
    {
        "line": 116,
        "fullcodeline": "const char *n = sn.demname ? sn.demname : sn.name;"
    },
    {
        "line": 117,
        "fullcodeline": "const char *fn = sn.demflag ? sn.demflag : sn.nameflag;"
    },
    {
        "line": 118,
        "fullcodeline": "char *fnp = (r->bin->prefix) ?"
    },
    {
        "line": 121,
        "fullcodeline": "RFlagItem *fi = r_flag_set (r->flags, fnp, addr, symbol->size);"
    },
    {
        "line": 138,
        "fullcodeline": "char *str = r_str_escape_utf8_for_json (r_symbol_name, -1);"
    },
    {
        "line": 96,
        "fullcodeline": "char *prname = r_str_newf (\"%s.%s\", r->bin->prefix, sn.methflag);"
    },
    {
        "line": 97,
        "fullcodeline": "r_name_filter (sn.methflag, -1);"
    },
    {
        "line": 99,
        "fullcodeline": "sn.methflag = prname;"
    },
    {
        "line": 102,
        "fullcodeline": "r_flag_item_set_realname (fi, sn.methname);"
    },
    {
        "line": 103,
        "fullcodeline": "if ((fi->offset - r->flags->base) == addr) {"
    },
    {
        "line": 108,
        "fullcodeline": "fi = r_flag_set (r->flags, sn.methflag, addr, symbol->size);"
    },
    {
        "line": 109,
        "fullcodeline": "char *comment = fi->comment ? strdup (fi->comment) : NULL;"
    },
    {
        "line": 119,
        "fullcodeline": "r_str_newf (\"%s.%s\", r->bin->prefix, fn):"
    },
    {
        "line": 120,
        "fullcodeline": "strdup (fn);"
    },
    {
        "line": 159,
        "fullcodeline": "} else if (IS_MODE_SIMPLE (mode)) {"
    },
    {
        "line": 38,
        "fullcodeline": "} else if (IS_MODE_NORMAL (mode)) {"
    },
    {
        "line": 105,
        "fullcodeline": "r_flag_unset (r->flags, fi);"
    },
    {
        "line": 111,
        "fullcodeline": "r_flag_item_set_comment (fi, comment);"
    },
    {
        "line": 163,
        "fullcodeline": "} else if (IS_MODE_SIMPLEST (mode)) {"
    },
    {
        "line": 164,
        "fullcodeline": "const char *name = sn.demname? sn.demname: r_symbol_name;"
    },
    {
        "line": 166,
        "fullcodeline": "} else if (IS_MODE_RAD (mode)) {"
    },
    {
        "line": 174,
        "fullcodeline": "const char *name = sn.demname? sn.demname: r_symbol_name;"
    },
    {
        "line": 200,
        "fullcodeline": "binfile = r_bin_cur (r->bin);"
    },
    {
        "line": 201,
        "fullcodeline": "plugin = r_bin_file_cur_plugin (binfile);"
    },
    {
        "line": 169,
        "fullcodeline": "if (is_special_symbol (symbol)) {"
    },
    {
        "line": 175,
        "fullcodeline": "if (!name) {"
    },
    {
        "line": 190,
        "fullcodeline": "if (r->bin->prefix || *name) { // we don't want unnamed symbol flags"
    },
    {
        "line": 202,
        "fullcodeline": "if (plugin && plugin->name) {"
    },
    {
        "line": 178,
        "fullcodeline": "if (!strncmp (name, \"imp.\", 4)) {"
    },
    {
        "line": 191,
        "fullcodeline": "char *flagname = construct_symbol_flagname (\"sym\", name, MAXFLAG_LEN_DEFAULT);"
    },
    {
        "line": 226,
        "fullcodeline": "const char *name = r_str_get (sn.demname? sn.demname: r_symbol_name);"
    },
    {
        "line": 229,
        "fullcodeline": "if (symbol->paddr == UT64_MAX) {"
    },
    {
        "line": 192,
        "fullcodeline": "if (!flagname) {"
    },
    {
        "line": 204,
        "fullcodeline": "char *module = strdup (r_symbol_name);"
    },
    {
        "line": 205,
        "fullcodeline": "char *p = strstr (module, \".dll_\");"
    },
    {
        "line": 185,
        "fullcodeline": "const char *fs = exponly? \"exports\": \"symbols\";"
    },
    {
        "line": 206,
        "fullcodeline": "if (p && strstr (module, \"imp.\")) {"
    },
    {
        "line": 207,
        "fullcodeline": "char *symname = __filterShell (p + 5);"
    },
    {
        "line": 208,
        "fullcodeline": "char *m = __filterShell (module);"
    },
    {
        "line": 211,
        "fullcodeline": "r_cons_printf (\"\\\"k bin/pe/%s/%d=%s.%s\\\"\\n\","
    },
    {
        "line": 214,
        "fullcodeline": "r_cons_printf (\"\\\"k bin/pe/%s/%d=%s\\\"\\n\","
    }
]