[
    {
        "line": 6,
        "fullcodeline": "for(i=1; i<argc; i++){"
    },
    {
        "line": 130,
        "fullcodeline": "if(!config->user){"
    },
    {
        "line": 136,
        "fullcodeline": "return config__check(config);"
    },
    {
        "line": 51,
        "fullcodeline": "if(config->listener_count == 0"
    },
    {
        "line": 74,
        "fullcodeline": "|| config->default_listener.security_options.allow_anonymous != -1"
    },
    {
        "line": 77,
        "fullcodeline": "config->listener_count++;"
    },
    {
        "line": 78,
        "fullcodeline": "config->listeners = mosquitto__realloc(config->listeners, sizeof(struct mosquitto__listener)*config->listener_count);"
    },
    {
        "line": 131,
        "fullcodeline": "config->user = \"mosquitto\";"
    },
    {
        "line": 134,
        "fullcodeline": "config->log_type = INT_MAX;"
    },
    {
        "line": 7,
        "fullcodeline": "if(!strcmp(argv[i], \"-c\") || !strcmp(argv[i], \"--config-file\")){"
    },
    {
        "line": 79,
        "fullcodeline": "if(!config->listeners){"
    },
    {
        "line": 19,
        "fullcodeline": "i++;"
    },
    {
        "line": 8,
        "fullcodeline": "if(i<argc-1){"
    },
    {
        "line": 83,
        "fullcodeline": "memset(&config->listeners[config->listener_count-1], 0, sizeof(struct mosquitto__listener));"
    },
    {
        "line": 99,
        "fullcodeline": "config->listeners[config->listener_count-1].max_connections = config->default_listener.max_connections;"
    },
    {
        "line": 100,
        "fullcodeline": "config->listeners[config->listener_count-1].protocol = config->default_listener.protocol;"
    },
    {
        "line": 101,
        "fullcodeline": "config->listeners[config->listener_count-1].socket_domain = config->default_listener.socket_domain;"
    },
    {
        "line": 102,
        "fullcodeline": "config->listeners[config->listener_count-1].client_count = 0;"
    },
    {
        "line": 103,
        "fullcodeline": "config->listeners[config->listener_count-1].socks = NULL;"
    },
    {
        "line": 104,
        "fullcodeline": "config->listeners[config->listener_count-1].sock_count = 0;"
    },
    {
        "line": 105,
        "fullcodeline": "config->listeners[config->listener_count-1].client_count = 0;"
    },
    {
        "line": 106,
        "fullcodeline": "config->listeners[config->listener_count-1].use_username_as_clientid = config->default_listener.use_username_as_clientid;"
    },
    {
        "line": 9,
        "fullcodeline": "db->config_file = argv[i+1];"
    },
    {
        "line": 20,
        "fullcodeline": "}else if(!strcmp(argv[i], \"-d\") || !strcmp(argv[i], \"--daemon\")){"
    },
    {
        "line": 121,
        "fullcodeline": "config->listeners[config->listener_count-1].security_options.acl_file = config->default_listener.security_options.acl_file;"
    },
    {
        "line": 122,
        "fullcodeline": "config->listeners[config->listener_count-1].security_options.password_file = config->default_listener.security_options.password_file;"
    },
    {
        "line": 123,
        "fullcodeline": "config->listeners[config->listener_count-1].security_options.psk_file = config->default_listener.security_options.psk_file;"
    },
    {
        "line": 124,
        "fullcodeline": "config->listeners[config->listener_count-1].security_options.auth_plugin_configs = config->default_listener.security_options.auth_plugin_configs;"
    },
    {
        "line": 125,
        "fullcodeline": "config->listeners[config->listener_count-1].security_options.auth_plugin_config_count = config->default_listener.security_options.auth_plugin_config_count;"
    },
    {
        "line": 126,
        "fullcodeline": "config->listeners[config->listener_count-1].security_options.allow_anonymous = config->default_listener.security_options.allow_anonymous;"
    },
    {
        "line": 11,
        "fullcodeline": "if(config__read(db, config, false)){"
    },
    {
        "line": 21,
        "fullcodeline": "config->daemon = true;"
    },
    {
        "line": 69,
        "fullcodeline": "|| config->default_listener.protocol != mp_mqtt"
    },
    {
        "line": 85,
        "fullcodeline": "config->listeners[config->listener_count-1].port = config->default_listener.port;"
    },
    {
        "line": 90,
        "fullcodeline": "config->listeners[config->listener_count-1].host = config->default_listener.host;"
    },
    {
        "line": 95,
        "fullcodeline": "config->listeners[config->listener_count-1].mount_point = config->default_listener.mount_point;"
    },
    {
        "line": 12,
        "fullcodeline": "log__printf(NULL, MOSQ_LOG_ERR, \"Error: Unable to open configuration file.\");"
    },
    {
        "line": 87,
        "fullcodeline": "config->listeners[config->listener_count-1].port = 1883;"
    },
    {
        "line": 92,
        "fullcodeline": "config->listeners[config->listener_count-1].host = NULL;"
    },
    {
        "line": 97,
        "fullcodeline": "config->listeners[config->listener_count-1].mount_point = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "}else if(!strcmp(argv[i], \"-h\") || !strcmp(argv[i], \"--help\")){"
    },
    {
        "line": 67,
        "fullcodeline": "|| config->default_listener.max_connections != -1"
    },
    {
        "line": 25,
        "fullcodeline": "}else if(!strcmp(argv[i], \"-p\") || !strcmp(argv[i], \"--port\")){"
    },
    {
        "line": 41,
        "fullcodeline": "i++;"
    },
    {
        "line": 26,
        "fullcodeline": "if(i<argc-1){"
    },
    {
        "line": 27,
        "fullcodeline": "port_tmp = atoi(argv[i+1]);"
    },
    {
        "line": 42,
        "fullcodeline": "}else if(!strcmp(argv[i], \"-v\") || !strcmp(argv[i], \"--verbose\")){"
    },
    {
        "line": 28,
        "fullcodeline": "if(port_tmp<1 || port_tmp>65535){"
    },
    {
        "line": 43,
        "fullcodeline": "db->verbose = true;"
    },
    {
        "line": 45,
        "fullcodeline": "fprintf(stderr, \"Error: Unknown option '%s'.\\n\",argv[i]);"
    },
    {
        "line": 35,
        "fullcodeline": "config->default_listener.port = port_tmp;"
    },
    {
        "line": 33,
        "fullcodeline": "log__printf(NULL, MOSQ_LOG_WARNING, \"Warning: Default listener port specified multiple times. Only the latest will be used.\");"
    }
]