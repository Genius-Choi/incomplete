[
    {
        "line": 2,
        "fullcodeline": "json_t * j_error = json_array(), * j_return;"
    },
    {
        "line": 3,
        "fullcodeline": "cbor_item_t * key = NULL, * x5c = NULL, * sig = NULL, * att_cert = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "char * message = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "gnutls_pubkey_t pubkey = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "gnutls_x509_crt_t cert = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "unsigned char * data_signed = NULL, client_data_hash[32], cert_export[32], cert_export_b64[64];"
    },
    {
        "line": 10,
        "fullcodeline": "size_t data_signed_offset = 0, client_data_hash_len = 32, cert_export_len = 32, cert_export_b64_len = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "if (j_error != NULL) {"
    },
    {
        "line": 138,
        "fullcodeline": "o_free(data_signed);"
    },
    {
        "line": 145,
        "fullcodeline": "json_decref(j_error);"
    },
    {
        "line": 146,
        "fullcodeline": "gnutls_pubkey_deinit(pubkey);"
    },
    {
        "line": 147,
        "fullcodeline": "gnutls_x509_crt_deinit(cert);"
    },
    {
        "line": 140,
        "fullcodeline": "if (json_array_size(j_error)) {"
    },
    {
        "line": 148,
        "fullcodeline": "if (att_cert != NULL) {"
    },
    {
        "line": 153,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"check_attestation_fido_u2f - Error allocating resources for j_error\");"
    },
    {
        "line": 154,
        "fullcodeline": "j_return = json_pack(\"{si}\", \"result\", G_ERROR);"
    },
    {
        "line": 52,
        "fullcodeline": "att_cert = cbor_array_get(x5c, 0);"
    },
    {
        "line": 53,
        "fullcodeline": "cert_dat.data = cbor_bytestring_handle(att_cert);"
    },
    {
        "line": 54,
        "fullcodeline": "cert_dat.size = cbor_bytestring_length(att_cert);"
    },
    {
        "line": 105,
        "fullcodeline": "data_signed[0] = 0x0;"
    },
    {
        "line": 106,
        "fullcodeline": "data_signed_offset = 1;"
    },
    {
        "line": 108,
        "fullcodeline": "memcpy(data_signed+data_signed_offset, rpid_hash, rpid_hash_len);"
    },
    {
        "line": 109,
        "fullcodeline": "data_signed_offset += rpid_hash_len;"
    },
    {
        "line": 111,
        "fullcodeline": "memcpy(data_signed+data_signed_offset, client_data_hash, client_data_hash_len);"
    },
    {
        "line": 112,
        "fullcodeline": "data_signed_offset+=client_data_hash_len;"
    },
    {
        "line": 114,
        "fullcodeline": "memcpy(data_signed+data_signed_offset, credential_id, credential_id_len);"
    },
    {
        "line": 115,
        "fullcodeline": "data_signed_offset+=credential_id_len;"
    },
    {
        "line": 117,
        "fullcodeline": "data_signed[data_signed_offset] = 0x04;"
    },
    {
        "line": 118,
        "fullcodeline": "data_signed_offset++;"
    },
    {
        "line": 120,
        "fullcodeline": "memcpy(data_signed+data_signed_offset, cert_x, cert_x_len);"
    },
    {
        "line": 121,
        "fullcodeline": "data_signed_offset+=cert_x_len;"
    },
    {
        "line": 123,
        "fullcodeline": "memcpy(data_signed+data_signed_offset, cert_y, cert_y_len);"
    },
    {
        "line": 124,
        "fullcodeline": "data_signed_offset+=cert_y_len;"
    },
    {
        "line": 127,
        "fullcodeline": "data.data = data_signed;"
    },
    {
        "line": 128,
        "fullcodeline": "data.size = data_signed_offset;"
    },
    {
        "line": 130,
        "fullcodeline": "signature.data = cbor_bytestring_handle(sig);"
    },
    {
        "line": 131,
        "fullcodeline": "signature.size = cbor_bytestring_length(sig);"
    },
    {
        "line": 141,
        "fullcodeline": "j_return = json_pack(\"{sisO}\", \"result\", G_ERROR_PARAM, \"error\", j_error);"
    },
    {
        "line": 149,
        "fullcodeline": "cbor_decref(&att_cert);"
    },
    {
        "line": 14,
        "fullcodeline": "if (gnutls_x509_crt_init(&cert)) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (gnutls_pubkey_init(&pubkey)) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (att_stmt == NULL || !cbor_isa_map(att_stmt) || cbor_map_size(att_stmt) != 2) {"
    },
    {
        "line": 28,
        "fullcodeline": "for (i=0; i<2; i++) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (x5c == NULL || !cbor_isa_array(x5c) || cbor_array_size(x5c) != 1) {"
    },
    {
        "line": 55,
        "fullcodeline": "if ((ret = gnutls_x509_crt_import(cert, &cert_dat, GNUTLS_X509_FMT_DER)) < 0) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (json_object_get(j_params, \"root-ca-list\") != json_null() && validate_certificate_from_root(j_params, cert, x5c) != G_OK) {"
    },
    {
        "line": 72,
        "fullcodeline": "if ((ret = gnutls_pubkey_import_x509(pubkey, cert, 0)) < 0) {"
    },
    {
        "line": 77,
        "fullcodeline": "if ((ret = gnutls_x509_crt_get_key_id(cert, GNUTLS_KEYID_USE_SHA256, cert_export, &cert_export_len)) < 0) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (!o_base64_encode(cert_export, cert_export_len, cert_export_b64, &cert_export_b64_len)) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (!generate_digest_raw(digest_SHA256, client_data, o_strlen((char *)client_data), client_data_hash, &client_data_hash_len)) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (sig == NULL || !cbor_isa_bytestring(sig)) {"
    },
    {
        "line": 98,
        "fullcodeline": "if ((data_signed = o_malloc(rpid_hash_len+client_data_hash_len+credential_id_len+cert_x_len+cert_y_len+2)) == NULL) {"
    },
    {
        "line": 133,
        "fullcodeline": "if (gnutls_pubkey_verify_data2(pubkey, GNUTLS_SIGN_ECDSA_SHA256, 0, &data, &signature)) {"
    },
    {
        "line": 143,
        "fullcodeline": "j_return = json_pack(\"{sis{ss%}}\", \"result\", G_OK, \"data\", \"certificate\", cert_export_b64, cert_export_b64_len);"
    },
    {
        "line": 15,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"check_attestation_fido_u2f - Error gnutls_x509_crt_init\"));"
    },
    {
        "line": 19,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"check_attestation_fido_u2f - Error gnutls_pubkey_init\"));"
    },
    {
        "line": 25,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"CBOR map value 'attStmt' invalid format\"));"
    },
    {
        "line": 49,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"CBOR map value 'x5c' invalid format\"));"
    },
    {
        "line": 56,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Error importing x509 certificate\"));"
    },
    {
        "line": 57,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_attestation_fido_u2f - Error gnutls_pcert_import_x509_raw: %d\", ret);"
    },
    {
        "line": 61,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Unrecognized certificate authority\"));"
    },
    {
        "line": 73,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Error importing x509 certificate\"));"
    },
    {
        "line": 74,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_attestation_fido_u2f - Error gnutls_pubkey_import_x509: %d\", ret);"
    },
    {
        "line": 78,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Error exporting x509 certificate\"));"
    },
    {
        "line": 79,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_attestation_fido_u2f - Error gnutls_x509_crt_get_key_id: %d\", ret);"
    },
    {
        "line": 83,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Internal error\"));"
    },
    {
        "line": 84,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_attestation_fido_u2f - Error o_base64_encode cert_export\");"
    },
    {
        "line": 88,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Internal error\"));"
    },
    {
        "line": 89,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_ERROR, \"check_attestation_fido_u2f - Error generate_digest_raw client_data\");"
    },
    {
        "line": 94,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Error sig is not a bytestring\"));"
    },
    {
        "line": 99,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_attestation_fido_u2f - Error allocating data_signed\");"
    },
    {
        "line": 100,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Internal error\"));"
    },
    {
        "line": 134,
        "fullcodeline": "json_array_append_new(j_error, json_string(\"Invalid signature\"));"
    },
    {
        "line": 30,
        "fullcodeline": "if (cbor_isa_string(key)) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (gnutls_x509_crt_get_issuer_dn2(cert, &cert_issued_by) >= 0) {"
    },
    {
        "line": 63,
        "fullcodeline": "message = msprintf(\"Unrecognized certificate autohority: %.*s\", cert_issued_by.size, cert_issued_by.data);"
    },
    {
        "line": 64,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_attestation_fido_u2f - %s\", message);"
    },
    {
        "line": 65,
        "fullcodeline": "o_free(message);"
    },
    {
        "line": 66,
        "fullcodeline": "gnutls_free(cert_issued_by.data);"
    },
    {
        "line": 29,
        "fullcodeline": "key = cbor_map_handle(att_stmt)[i].key;"
    },
    {
        "line": 31,
        "fullcodeline": "if (0 == o_strncmp((const char *)cbor_string_handle(key), \"x5c\", MIN(o_strlen(\"x5c\"), cbor_string_length(key)))) {"
    },
    {
        "line": 42,
        "fullcodeline": "message = msprintf(\"attStmt map element %d key is not a string\", i);"
    },
    {
        "line": 43,
        "fullcodeline": "json_array_append_new(j_error, json_string(message));"
    },
    {
        "line": 44,
        "fullcodeline": "o_free(message);"
    },
    {
        "line": 68,
        "fullcodeline": "y_log_message(Y_LOG_LEVEL_DEBUG, \"check_attestation_fido_u2f - Unrecognized certificate autohority (unable to get issuer dn)\");"
    },
    {
        "line": 33,
        "fullcodeline": "} else if (0 == o_strncmp((const char *)cbor_string_handle(key), \"sig\", MIN(o_strlen(\"sig\"), cbor_string_length(key)))) {"
    },
    {
        "line": 32,
        "fullcodeline": "x5c = cbor_map_handle(att_stmt)[i].value;"
    },
    {
        "line": 36,
        "fullcodeline": "message = msprintf(\"attStmt map element %d key is not valid: '%.*s'\", i, cbor_string_length(key), cbor_string_handle(key));"
    },
    {
        "line": 37,
        "fullcodeline": "json_array_append_new(j_error, json_string(message));"
    },
    {
        "line": 38,
        "fullcodeline": "o_free(message);"
    },
    {
        "line": 34,
        "fullcodeline": "sig = cbor_map_handle(att_stmt)[i].value;"
    }
]