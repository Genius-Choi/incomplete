[
    {
        "line": 3,
        "fullcodeline": "static const char module[] = \"NeXTDecode\";"
    },
    {
        "line": 9,
        "fullcodeline": "(void) s;"
    },
    {
        "line": 18,
        "fullcodeline": "bp = (unsigned char *)tif->tif_rawcp;"
    },
    {
        "line": 19,
        "fullcodeline": "cc = tif->tif_rawcc;"
    },
    {
        "line": 20,
        "fullcodeline": "scanline = tif->tif_scanlinesize;"
    },
    {
        "line": 89,
        "fullcodeline": "tif->tif_rawcp = (uint8*) bp;"
    },
    {
        "line": 90,
        "fullcodeline": "tif->tif_rawcc = cc;"
    },
    {
        "line": 93,
        "fullcodeline": "TIFFErrorExt(tif->tif_clientdata, module, \"Not enough data for scanline %ld\","
    },
    {
        "line": 15,
        "fullcodeline": "for (op = (unsigned char*) buf, cc = occ; cc-- > 0;)"
    },
    {
        "line": 16,
        "fullcodeline": "*op++ = 0xff;"
    },
    {
        "line": 21,
        "fullcodeline": "if (occ % scanline)"
    },
    {
        "line": 26,
        "fullcodeline": "for (row = buf; cc > 0 && occ > 0; occ -= scanline, row += scanline) {"
    },
    {
        "line": 94,
        "fullcodeline": "(long) tif->tif_row);"
    },
    {
        "line": 23,
        "fullcodeline": "TIFFErrorExt(tif->tif_clientdata, module, \"Fractional scanlines cannot be read\");"
    },
    {
        "line": 27,
        "fullcodeline": "n = *bp++, cc--;"
    },
    {
        "line": 35,
        "fullcodeline": "_TIFFmemcpy(row, bp, scanline);"
    },
    {
        "line": 36,
        "fullcodeline": "bp += scanline;"
    },
    {
        "line": 37,
        "fullcodeline": "cc -= scanline;"
    },
    {
        "line": 33,
        "fullcodeline": "if (cc < scanline)"
    },
    {
        "line": 47,
        "fullcodeline": "off = (bp[0] * 256) + bp[1];"
    },
    {
        "line": 48,
        "fullcodeline": "n = (bp[2] * 256) + bp[3];"
    },
    {
        "line": 51,
        "fullcodeline": "_TIFFmemcpy(row+off, bp+4, n);"
    },
    {
        "line": 52,
        "fullcodeline": "bp += 4+n;"
    },
    {
        "line": 53,
        "fullcodeline": "cc -= 4+n;"
    },
    {
        "line": 57,
        "fullcodeline": "uint32 npixels = 0, grey;"
    },
    {
        "line": 68,
        "fullcodeline": "op = row;"
    },
    {
        "line": 45,
        "fullcodeline": "if( cc < 4 )"
    },
    {
        "line": 49,
        "fullcodeline": "if (cc < 4+n || off+n > scanline)"
    },
    {
        "line": 59,
        "fullcodeline": "if( isTiled(tif) )"
    },
    {
        "line": 70,
        "fullcodeline": "grey = (uint32)((n>>6) & 0x3);"
    },
    {
        "line": 71,
        "fullcodeline": "n &= 0x3f;"
    },
    {
        "line": 83,
        "fullcodeline": "n = *bp++, cc--;"
    },
    {
        "line": 77,
        "fullcodeline": "while (n-- > 0 && npixels < imagewidth)"
    },
    {
        "line": 78,
        "fullcodeline": "SETPIXEL(op, grey);"
    },
    {
        "line": 79,
        "fullcodeline": "if (npixels >= imagewidth)"
    },
    {
        "line": 81,
        "fullcodeline": "if (cc == 0)"
    }
]