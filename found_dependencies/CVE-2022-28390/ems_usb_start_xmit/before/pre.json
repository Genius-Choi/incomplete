[
    {
        "line": 3,
        "fullcodeline": "struct ems_usb *dev = netdev_priv(netdev);"
    },
    {
        "line": 4,
        "fullcodeline": "struct ems_tx_urb_context *context = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "struct net_device_stats *stats = &netdev->stats;"
    },
    {
        "line": 6,
        "fullcodeline": "struct can_frame *cf = (struct can_frame *)skb->data;"
    },
    {
        "line": 11,
        "fullcodeline": "size_t size = CPC_HEADER_SIZE + CPC_MSG_HEADER_LEN"
    },
    {
        "line": 18,
        "fullcodeline": "urb = usb_alloc_urb(0, GFP_ATOMIC);"
    },
    {
        "line": 22,
        "fullcodeline": "buf = usb_alloc_coherent(dev->udev, size, GFP_ATOMIC, &urb->transfer_dma);"
    },
    {
        "line": 69,
        "fullcodeline": "context->dev = dev;"
    },
    {
        "line": 70,
        "fullcodeline": "context->echo_index = i;"
    },
    {
        "line": 72,
        "fullcodeline": "usb_fill_bulk_urb(urb, dev->udev, usb_sndbulkpipe(dev->udev, 2), buf,"
    },
    {
        "line": 74,
        "fullcodeline": "urb->transfer_flags |= URB_NO_TRANSFER_DMA_MAP;"
    },
    {
        "line": 75,
        "fullcodeline": "usb_anchor_urb(urb, &dev->tx_submitted);"
    },
    {
        "line": 77,
        "fullcodeline": "can_put_echo_skb(skb, netdev, context->echo_index, 0);"
    },
    {
        "line": 79,
        "fullcodeline": "atomic_inc(&dev->active_tx_urbs);"
    },
    {
        "line": 81,
        "fullcodeline": "err = usb_submit_urb(urb, GFP_ATOMIC);"
    },
    {
        "line": 14,
        "fullcodeline": "if (can_dropped_invalid_skb(netdev, skb))"
    },
    {
        "line": 19,
        "fullcodeline": "if (!urb)"
    },
    {
        "line": 23,
        "fullcodeline": "if (!buf) {"
    },
    {
        "line": 31,
        "fullcodeline": "msg->msg.can_msg.id = cpu_to_le32(cf->can_id & CAN_ERR_MASK);"
    },
    {
        "line": 34,
        "fullcodeline": "if (cf->can_id & CAN_RTR_FLAG) {"
    },
    {
        "line": 49,
        "fullcodeline": "for (i = 0; i < MAX_TX_URBS; i++) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (!context) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (unlikely(err)) {"
    },
    {
        "line": 12,
        "fullcodeline": "+ sizeof(struct cpc_can_msg);"
    },
    {
        "line": 61,
        "fullcodeline": "usb_free_coherent(dev->udev, size, buf, urb->transfer_dma);"
    },
    {
        "line": 83,
        "fullcodeline": "can_free_echo_skb(netdev, context->echo_index, NULL);"
    },
    {
        "line": 85,
        "fullcodeline": "usb_unanchor_urb(urb);"
    },
    {
        "line": 86,
        "fullcodeline": "usb_free_coherent(dev->udev, size, buf, urb->transfer_dma);"
    },
    {
        "line": 35,
        "fullcodeline": "msg->type = cf->can_id & CAN_EFF_FLAG ?"
    },
    {
        "line": 50,
        "fullcodeline": "if (dev->tx_contexts[i].echo_index == MAX_TX_URBS) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (err == -ENODEV) {"
    },
    {
        "line": 99,
        "fullcodeline": "netif_trans_update(netdev);"
    },
    {
        "line": 40,
        "fullcodeline": "msg->type = cf->can_id & CAN_EFF_FLAG ?"
    },
    {
        "line": 43,
        "fullcodeline": "for (i = 0; i < cf->len; i++)"
    },
    {
        "line": 51,
        "fullcodeline": "context = &dev->tx_contexts[i];"
    },
    {
        "line": 102,
        "fullcodeline": "if (atomic_read(&dev->active_tx_urbs) >= MAX_TX_URBS ||"
    },
    {
        "line": 103,
        "fullcodeline": "dev->free_slots < CPC_TX_QUEUE_TRIGGER_LOW) {"
    }
]