[
    {
        "line": 7,
        "fullcodeline": "struct pstore *ps = get_info(store);"
    },
    {
        "line": 12,
        "fullcodeline": "r = read_header(ps, &new_snapshot);"
    },
    {
        "line": 19,
        "fullcodeline": "ps->exceptions_per_area = (ps->store->chunk_size << SECTOR_SHIFT) /"
    },
    {
        "line": 21,
        "fullcodeline": "ps->callbacks = dm_vcalloc(ps->exceptions_per_area,"
    },
    {
        "line": 61,
        "fullcodeline": "r = read_exceptions(ps, callback, callback_context);"
    },
    {
        "line": 23,
        "fullcodeline": "if (!ps->callbacks)"
    },
    {
        "line": 46,
        "fullcodeline": "if (ps->version != SNAPSHOT_DISK_VERSION) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (!ps->valid)"
    },
    {
        "line": 30,
        "fullcodeline": "r = write_header(ps);"
    },
    {
        "line": 36,
        "fullcodeline": "ps->current_area = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "zero_memory_area(ps);"
    },
    {
        "line": 38,
        "fullcodeline": "r = zero_disk_area(ps, 0);"
    },
    {
        "line": 47,
        "fullcodeline": "DMWARN(\"unable to handle snapshot disk version %d\","
    },
    {
        "line": 24,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 49,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 32,
        "fullcodeline": "DMWARN(\"write_header failed\");"
    },
    {
        "line": 40,
        "fullcodeline": "DMWARN(\"zero_disk_area(0) failed\");"
    }
]