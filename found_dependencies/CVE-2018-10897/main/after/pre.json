[
    {
        "line": 15,
        "fullcodeline": "my = RepoSync(opts=opts)"
    },
    {
        "line": 16,
        "fullcodeline": "my.doConfigSetup(fn=opts.config, init_plugins=opts.plugins)"
    },
    {
        "line": 43,
        "fullcodeline": "my.doRepoSetup()"
    },
    {
        "line": 83,
        "fullcodeline": "exit_code = 0"
    },
    {
        "line": 202,
        "fullcodeline": "my.closeRpmDB()"
    },
    {
        "line": 203,
        "fullcodeline": "sys.exit(exit_code)"
    },
    {
        "line": 2,
        "fullcodeline": "(opts, dummy) = parseArgs()"
    },
    {
        "line": 4,
        "fullcodeline": "if not os.path.exists(opts.destdir) and not opts.urls:"
    },
    {
        "line": 11,
        "fullcodeline": "if not os.access(opts.destdir, os.W_OK) and not opts.urls:"
    },
    {
        "line": 20,
        "fullcodeline": "if os.getuid() != 0 and not opts.cachedir:"
    },
    {
        "line": 32,
        "fullcodeline": "if not opts.cachedir:"
    },
    {
        "line": 41,
        "fullcodeline": "if not opts.quiet:"
    },
    {
        "line": 45,
        "fullcodeline": "if len(opts.repoid) > 0:"
    },
    {
        "line": 69,
        "fullcodeline": "if len(my.repos.listEnabled()) > 1 and opts.norepopath:"
    },
    {
        "line": 84,
        "fullcodeline": "for repo in my.repos.listEnabled():"
    },
    {
        "line": 12,
        "fullcodeline": "print >> sys.stderr, _(\"Error: Cannot write to  destination dir %s\") % opts.destdir"
    },
    {
        "line": 13,
        "fullcodeline": "sys.exit(1)"
    },
    {
        "line": 21,
        "fullcodeline": "opts.tempcache = True"
    },
    {
        "line": 27,
        "fullcodeline": "my.conf.uid = 1 # force locking of user cache"
    },
    {
        "line": 46,
        "fullcodeline": "myrepos = []"
    },
    {
        "line": 70,
        "fullcodeline": "print >> sys.stderr, _(\"Error: Can't use --norepopath with multiple repositories\")"
    },
    {
        "line": 71,
        "fullcodeline": "sys.exit(1)"
    },
    {
        "line": 74,
        "fullcodeline": "arches = rpmUtils.arch.getArchList(opts.arch)"
    },
    {
        "line": 77,
        "fullcodeline": "my.doSackSetup(arches)"
    },
    {
        "line": 24,
        "fullcodeline": "if not my.setCacheDir(force=True, reuse=False):"
    },
    {
        "line": 42,
        "fullcodeline": "my.repos.setProgressBar(TextMeter(fo=sys.stdout), TextMultiFileMeter(fo=sys.stdout))"
    },
    {
        "line": 49,
        "fullcodeline": "for glob in opts.repoid:"
    },
    {
        "line": 56,
        "fullcodeline": "if not myrepos:"
    },
    {
        "line": 61,
        "fullcodeline": "for repo in my.repos.repos.values():"
    },
    {
        "line": 65,
        "fullcodeline": "for repo in myrepos:"
    },
    {
        "line": 85,
        "fullcodeline": "reposack = ListPackageSack(my.pkgSack.returnPackages(repoid=repo.id))"
    },
    {
        "line": 146,
        "fullcodeline": "remote_size = 0"
    },
    {
        "line": 158,
        "fullcodeline": "download_list.sort(key=lambda pkg: pkg.name)"
    },
    {
        "line": 180,
        "fullcodeline": "probs = my.downloadPkgs(download_list)"
    },
    {
        "line": 6,
        "fullcodeline": "os.makedirs(opts.destdir)"
    },
    {
        "line": 25,
        "fullcodeline": "print >> sys.stderr, _(\"Error: Could not make cachedir, exiting\")"
    },
    {
        "line": 26,
        "fullcodeline": "sys.exit(50)"
    },
    {
        "line": 34,
        "fullcodeline": "my.doLock()"
    },
    {
        "line": 57,
        "fullcodeline": "print >> sys.stderr, _(\"No repositories found\")"
    },
    {
        "line": 58,
        "fullcodeline": "sys.exit(1)"
    },
    {
        "line": 76,
        "fullcodeline": "arches += ['src']"
    },
    {
        "line": 79,
        "fullcodeline": "print >> sys.stderr, _(\"Error setting up repositories: %s\") % e"
    },
    {
        "line": 81,
        "fullcodeline": "sys.exit(1)"
    },
    {
        "line": 97,
        "fullcodeline": "if opts.delete and os.path.exists(local_repo_path):"
    },
    {
        "line": 113,
        "fullcodeline": "if opts.downloadcomps or opts.downloadmd:"
    },
    {
        "line": 147,
        "fullcodeline": "if not opts.urls:"
    },
    {
        "line": 155,
        "fullcodeline": "if hasattr(urlgrabber.progress, 'text_meter_total_size'):"
    },
    {
        "line": 167,
        "fullcodeline": "if not os.path.exists(local_repo_path):"
    },
    {
        "line": 171,
        "fullcodeline": "for pkg in download_list:"
    },
    {
        "line": 29,
        "fullcodeline": "my.repos.setCacheDir(opts.cachedir)"
    },
    {
        "line": 50,
        "fullcodeline": "add_repos = my.repos.findRepos(glob)"
    },
    {
        "line": 54,
        "fullcodeline": "myrepos.extend(add_repos)"
    },
    {
        "line": 62,
        "fullcodeline": "repo.disable()"
    },
    {
        "line": 66,
        "fullcodeline": "repo.enable()"
    },
    {
        "line": 88,
        "fullcodeline": "download_list = reposack.returnNewestByNameArch()"
    },
    {
        "line": 90,
        "fullcodeline": "download_list = list(reposack)"
    },
    {
        "line": 93,
        "fullcodeline": "local_repo_path = opts.destdir"
    },
    {
        "line": 95,
        "fullcodeline": "local_repo_path = opts.destdir + '/' + repo.id"
    },
    {
        "line": 98,
        "fullcodeline": "current_pkgs = localpkgs(local_repo_path)"
    },
    {
        "line": 100,
        "fullcodeline": "download_set = {}"
    },
    {
        "line": 168,
        "fullcodeline": "os.makedirs(local_repo_path)"
    },
    {
        "line": 182,
        "fullcodeline": "exit_code = 1"
    },
    {
        "line": 8,
        "fullcodeline": "print >> sys.stderr, _(\"Error: Cannot create destination dir %s\") % opts.destdir"
    },
    {
        "line": 9,
        "fullcodeline": "sys.exit(1)"
    },
    {
        "line": 36,
        "fullcodeline": "print >> sys.stderr, _(\"Error: %s\") % e"
    },
    {
        "line": 37,
        "fullcodeline": "sys.exit(50)"
    },
    {
        "line": 51,
        "fullcodeline": "if not add_repos:"
    },
    {
        "line": 101,
        "fullcodeline": "for pkg in download_list:"
    },
    {
        "line": 105,
        "fullcodeline": "for pkg in current_pkgs:"
    },
    {
        "line": 115,
        "fullcodeline": "if not os.path.exists(local_repo_path):"
    },
    {
        "line": 129,
        "fullcodeline": "for ftype in repo.repoXML.fileTypes():"
    },
    {
        "line": 148,
        "fullcodeline": "for pkg in download_list:"
    },
    {
        "line": 156,
        "fullcodeline": "urlgrabber.progress.text_meter_total_size(remote_size)"
    },
    {
        "line": 160,
        "fullcodeline": "for pkg in download_list:"
    },
    {
        "line": 172,
        "fullcodeline": "pkg.localpath = os.path.join(local_repo_path, pkg.remote_path)"
    },
    {
        "line": 173,
        "fullcodeline": "pkg.repo.copy_local = True"
    },
    {
        "line": 174,
        "fullcodeline": "pkg.repo.cache = 0"
    },
    {
        "line": 175,
        "fullcodeline": "localdir = os.path.dirname(pkg.localpath)"
    },
    {
        "line": 183,
        "fullcodeline": "for key in probs:"
    },
    {
        "line": 188,
        "fullcodeline": "for pkg in download_list:"
    },
    {
        "line": 52,
        "fullcodeline": "print >> sys.stderr, _(\"Warning: cannot find repository %s\") % glob"
    },
    {
        "line": 124,
        "fullcodeline": "wanted_types = ['group']"
    },
    {
        "line": 127,
        "fullcodeline": "wanted_types = repo.repoXML.fileTypes()"
    },
    {
        "line": 176,
        "fullcodeline": "if not os.path.exists(localdir):"
    },
    {
        "line": 102,
        "fullcodeline": "rpmname = os.path.basename(pkg.remote_path)"
    },
    {
        "line": 103,
        "fullcodeline": "download_set[rpmname] = 1"
    },
    {
        "line": 111,
        "fullcodeline": "os.unlink(current_pkgs[pkg]['path'])"
    },
    {
        "line": 149,
        "fullcodeline": "local = os.path.join(local_repo_path, pkg.remote_path)"
    },
    {
        "line": 150,
        "fullcodeline": "sz = int(pkg.returnSimple('packagesize'))"
    },
    {
        "line": 153,
        "fullcodeline": "remote_size += sz"
    },
    {
        "line": 161,
        "fullcodeline": "local = os.path.join(local_repo_path, pkg.remote_path)"
    },
    {
        "line": 177,
        "fullcodeline": "os.makedirs(localdir)"
    },
    {
        "line": 106,
        "fullcodeline": "if pkg in download_set:"
    },
    {
        "line": 109,
        "fullcodeline": "if not opts.quiet:"
    },
    {
        "line": 117,
        "fullcodeline": "os.makedirs(local_repo_path)"
    },
    {
        "line": 130,
        "fullcodeline": "if ftype in ['primary', 'primary_db', 'filelists',"
    },
    {
        "line": 133,
        "fullcodeline": "if ftype not in wanted_types:"
    },
    {
        "line": 151,
        "fullcodeline": "if os.path.exists(local) and os.path.getsize(local) == sz:"
    },
    {
        "line": 162,
        "fullcodeline": "if not (os.path.exists(local) and my.verifyPkg(local, pkg, False)):"
    },
    {
        "line": 184,
        "fullcodeline": "for error in probs[key]:"
    },
    {
        "line": 189,
        "fullcodeline": "result, error = my.sigCheckPkg(pkg)"
    },
    {
        "line": 190,
        "fullcodeline": "if result != 0:"
    },
    {
        "line": 137,
        "fullcodeline": "resultfile = repo.retrieveMD(ftype)"
    },
    {
        "line": 138,
        "fullcodeline": "basename = os.path.basename(resultfile)"
    },
    {
        "line": 141,
        "fullcodeline": "shutil.copyfile(resultfile, \"%s/%s\" % (local_repo_path, basename))"
    },
    {
        "line": 163,
        "fullcodeline": "print urljoin(pkg.repo.urls[0], pkg.remote_path)"
    },
    {
        "line": 191,
        "fullcodeline": "rpmfn = os.path.basename(pkg.remote_path)"
    },
    {
        "line": 198,
        "fullcodeline": "os.unlink(pkg.localpath)"
    },
    {
        "line": 199,
        "fullcodeline": "exit_code = 1"
    },
    {
        "line": 110,
        "fullcodeline": "my.logger.info(\"Removing obsolete %s\", pkg)"
    },
    {
        "line": 120,
        "fullcodeline": "my.closeRpmDB()"
    },
    {
        "line": 121,
        "fullcodeline": "sys.exit(1)"
    },
    {
        "line": 139,
        "fullcodeline": "if ftype == 'group' and opts.downloadcomps: # for compat with how --downloadcomps saved the comps file always as comps.xml"
    },
    {
        "line": 192,
        "fullcodeline": "if result == 1:"
    },
    {
        "line": 119,
        "fullcodeline": "my.logger.error(\"Could not make repo subdir: %s\" % e)"
    },
    {
        "line": 140,
        "fullcodeline": "basename = 'comps.xml'"
    },
    {
        "line": 185,
        "fullcodeline": "my.logger.error('%s: %s', key, error)"
    },
    {
        "line": 143,
        "fullcodeline": "if not opts.quiet:"
    },
    {
        "line": 193,
        "fullcodeline": "my.logger.warning('Removing %s, due to missing GPG key.' % rpmfn)"
    },
    {
        "line": 194,
        "fullcodeline": "elif result == 2:"
    },
    {
        "line": 144,
        "fullcodeline": "my.logger.error(\"Unable to fetch metadata: %s\" % e)"
    },
    {
        "line": 195,
        "fullcodeline": "my.logger.warning('Removing %s due to failed signature check.' % rpmfn)"
    },
    {
        "line": 197,
        "fullcodeline": "my.logger.warning('Removing %s due to failed signature check: %s' % rpmfn)"
    }
]