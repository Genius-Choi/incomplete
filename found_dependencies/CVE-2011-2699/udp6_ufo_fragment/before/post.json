[
    {
        "line": 3,
        "fullcodeline": "struct sk_buff *segs = ERR_PTR(-EINVAL);"
    },
    {
        "line": 34,
        "fullcodeline": "offset = skb_checksum_start_offset(skb);"
    },
    {
        "line": 35,
        "fullcodeline": "csum = skb_checksum(skb, offset, skb->len- offset, 0);"
    },
    {
        "line": 36,
        "fullcodeline": "offset += skb->csum_offset;"
    },
    {
        "line": 37,
        "fullcodeline": "*(__sum16 *)(skb->data + offset) = csum_fold(csum);"
    },
    {
        "line": 38,
        "fullcodeline": "skb->ip_summed = CHECKSUM_NONE;"
    },
    {
        "line": 48,
        "fullcodeline": "unfrag_ip6hlen = ip6_find_1stfragopt(skb, &prevhdr);"
    },
    {
        "line": 50,
        "fullcodeline": "*prevhdr = NEXTHDR_FRAGMENT;"
    },
    {
        "line": 51,
        "fullcodeline": "unfrag_len = skb_network_header(skb) - skb_mac_header(skb) +"
    },
    {
        "line": 53,
        "fullcodeline": "mac_start = skb_mac_header(skb);"
    },
    {
        "line": 54,
        "fullcodeline": "memmove(mac_start-frag_hdr_sz, mac_start, unfrag_len);"
    },
    {
        "line": 56,
        "fullcodeline": "skb->mac_header -= frag_hdr_sz;"
    },
    {
        "line": 57,
        "fullcodeline": "skb->network_header -= frag_hdr_sz;"
    },
    {
        "line": 59,
        "fullcodeline": "fptr = (struct frag_hdr *)(skb_network_header(skb) + unfrag_ip6hlen);"
    },
    {
        "line": 60,
        "fullcodeline": "fptr->nexthdr = nexthdr;"
    },
    {
        "line": 61,
        "fullcodeline": "fptr->reserved = 0;"
    },
    {
        "line": 62,
        "fullcodeline": "ipv6_select_ident(fptr);"
    },
    {
        "line": 67,
        "fullcodeline": "segs = skb_segment(skb, features);"
    },
    {
        "line": 14,
        "fullcodeline": "if (unlikely(skb->len <= mss))"
    },
    {
        "line": 17,
        "fullcodeline": "if (skb_gso_ok(skb, features | NETIF_F_GSO_ROBUST)) {"
    },
    {
        "line": 41,
        "fullcodeline": "if ((skb_mac_header(skb) < skb->head + frag_hdr_sz) &&"
    },
    {
        "line": 13,
        "fullcodeline": "mss = skb_shinfo(skb)->gso_size;"
    },
    {
        "line": 25,
        "fullcodeline": "skb_shinfo(skb)->gso_segs = DIV_ROUND_UP(skb->len, mss);"
    },
    {
        "line": 27,
        "fullcodeline": "segs = NULL;"
    },
    {
        "line": 42,
        "fullcodeline": "pskb_expand_head(skb, frag_hdr_sz, 0, GFP_ATOMIC))"
    },
    {
        "line": 21,
        "fullcodeline": "if (unlikely(type & ~(SKB_GSO_UDP | SKB_GSO_DODGY) ||"
    },
    {
        "line": 19,
        "fullcodeline": "int type = skb_shinfo(skb)->gso_type;"
    },
    {
        "line": 22,
        "fullcodeline": "!(type & (SKB_GSO_UDP))))"
    }
]