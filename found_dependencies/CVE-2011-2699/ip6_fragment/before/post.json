[
    {
        "line": 4,
        "fullcodeline": "struct rt6_info *rt = (struct rt6_info*)skb_dst(skb);"
    },
    {
        "line": 5,
        "fullcodeline": "struct ipv6_pinfo *np = skb->sk ? inet6_sk(skb->sk) : NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "__be32 frag_id = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "int ptr, offset = 0, err=0;"
    },
    {
        "line": 11,
        "fullcodeline": "u8 *prevhdr, nexthdr = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "struct net *net = dev_net(skb_dst(skb)->dev);"
    },
    {
        "line": 14,
        "fullcodeline": "hlen = ip6_find_1stfragopt(skb, &prevhdr);"
    },
    {
        "line": 17,
        "fullcodeline": "mtu = ip6_skb_dst_mtu(skb);"
    },
    {
        "line": 35,
        "fullcodeline": "mtu -= hlen + sizeof(struct frag_hdr);"
    },
    {
        "line": 167,
        "fullcodeline": "left = skb->len - hlen;\t\t/* Space per frame */"
    },
    {
        "line": 168,
        "fullcodeline": "ptr = hlen;\t\t\t/* Where to start from */"
    },
    {
        "line": 174,
        "fullcodeline": "*prevhdr = NEXTHDR_FRAGMENT;"
    },
    {
        "line": 262,
        "fullcodeline": "IP6_INC_STATS(net, ip6_dst_idev(skb_dst(skb)),"
    },
    {
        "line": 264,
        "fullcodeline": "kfree_skb(skb);"
    },
    {
        "line": 268,
        "fullcodeline": "IP6_INC_STATS(net, ip6_dst_idev(skb_dst(skb)),"
    },
    {
        "line": 270,
        "fullcodeline": "kfree_skb(skb);"
    },
    {
        "line": 22,
        "fullcodeline": "if (!skb->local_df && skb->len > mtu) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (np && np->frag_size < mtu) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (skb_has_frag_list(skb)) {"
    },
    {
        "line": 179,
        "fullcodeline": "while(left > 0)\t{"
    },
    {
        "line": 23,
        "fullcodeline": "skb->dev = skb_dst(skb)->dev;"
    },
    {
        "line": 24,
        "fullcodeline": "icmpv6_send(skb, ICMPV6_PKT_TOOBIG, 0, mtu);"
    },
    {
        "line": 25,
        "fullcodeline": "IP6_INC_STATS(net, ip6_dst_idev(skb_dst(skb)),"
    },
    {
        "line": 27,
        "fullcodeline": "kfree_skb(skb);"
    },
    {
        "line": 38,
        "fullcodeline": "int first_len = skb_pagelen(skb);"
    },
    {
        "line": 46,
        "fullcodeline": "skb_walk_frags(skb, frag) {"
    },
    {
        "line": 65,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 66,
        "fullcodeline": "offset = 0;"
    },
    {
        "line": 68,
        "fullcodeline": "skb_frag_list_init(skb);"
    },
    {
        "line": 71,
        "fullcodeline": "*prevhdr = NEXTHDR_FRAGMENT;"
    },
    {
        "line": 72,
        "fullcodeline": "tmp_hdr = kmemdup(skb_network_header(skb), hlen, GFP_ATOMIC);"
    },
    {
        "line": 79,
        "fullcodeline": "__skb_pull(skb, hlen);"
    },
    {
        "line": 80,
        "fullcodeline": "fh = (struct frag_hdr*)__skb_push(skb, sizeof(struct frag_hdr));"
    },
    {
        "line": 81,
        "fullcodeline": "__skb_push(skb, hlen);"
    },
    {
        "line": 82,
        "fullcodeline": "skb_reset_network_header(skb);"
    },
    {
        "line": 83,
        "fullcodeline": "memcpy(skb_network_header(skb), tmp_hdr, hlen);"
    },
    {
        "line": 85,
        "fullcodeline": "ipv6_select_ident(fh);"
    },
    {
        "line": 86,
        "fullcodeline": "fh->nexthdr = nexthdr;"
    },
    {
        "line": 87,
        "fullcodeline": "fh->reserved = 0;"
    },
    {
        "line": 88,
        "fullcodeline": "fh->frag_off = htons(IP6_MF);"
    },
    {
        "line": 89,
        "fullcodeline": "frag_id = fh->identification;"
    },
    {
        "line": 91,
        "fullcodeline": "first_len = skb_pagelen(skb);"
    },
    {
        "line": 92,
        "fullcodeline": "skb->data_len = first_len - skb_headlen(skb);"
    },
    {
        "line": 93,
        "fullcodeline": "skb->len = first_len;"
    },
    {
        "line": 94,
        "fullcodeline": "ipv6_hdr(skb)->payload_len = htons(first_len -"
    },
    {
        "line": 97,
        "fullcodeline": "dst_hold(&rt->dst);"
    },
    {
        "line": 136,
        "fullcodeline": "kfree(tmp_hdr);"
    },
    {
        "line": 151,
        "fullcodeline": "IP6_INC_STATS(net, ip6_dst_idev(&rt->dst),"
    },
    {
        "line": 153,
        "fullcodeline": "dst_release(&rt->dst);"
    },
    {
        "line": 180,
        "fullcodeline": "len = left;"
    },
    {
        "line": 205,
        "fullcodeline": "ip6_copy_metadata(frag, skb);"
    },
    {
        "line": 206,
        "fullcodeline": "skb_reserve(frag, LL_RESERVED_SPACE(rt->dst.dev));"
    },
    {
        "line": 207,
        "fullcodeline": "skb_put(frag, len + hlen + sizeof(struct frag_hdr));"
    },
    {
        "line": 208,
        "fullcodeline": "skb_reset_network_header(frag);"
    },
    {
        "line": 209,
        "fullcodeline": "fh = (struct frag_hdr *)(skb_network_header(frag) + hlen);"
    },
    {
        "line": 210,
        "fullcodeline": "frag->transport_header = (frag->network_header + hlen +"
    },
    {
        "line": 223,
        "fullcodeline": "skb_copy_from_linear_data(skb, skb_network_header(frag), hlen);"
    },
    {
        "line": 228,
        "fullcodeline": "fh->nexthdr = nexthdr;"
    },
    {
        "line": 229,
        "fullcodeline": "fh->reserved = 0;"
    },
    {
        "line": 241,
        "fullcodeline": "left -= len;"
    },
    {
        "line": 243,
        "fullcodeline": "fh->frag_off = htons(offset);"
    },
    {
        "line": 246,
        "fullcodeline": "ipv6_hdr(frag)->payload_len = htons(frag->len -"
    },
    {
        "line": 249,
        "fullcodeline": "ptr += len;"
    },
    {
        "line": 250,
        "fullcodeline": "offset += len;"
    },
    {
        "line": 255,
        "fullcodeline": "err = output(frag);"
    },
    {
        "line": 259,
        "fullcodeline": "IP6_INC_STATS(net, ip6_dst_idev(skb_dst(skb)),"
    },
    {
        "line": 28,
        "fullcodeline": "return -EMSGSIZE;"
    },
    {
        "line": 41,
        "fullcodeline": "if (first_len - hlen > mtu ||"
    },
    {
        "line": 57,
        "fullcodeline": "BUG_ON(frag->sk);"
    },
    {
        "line": 62,
        "fullcodeline": "skb->truesize -= frag->truesize;"
    },
    {
        "line": 73,
        "fullcodeline": "if (!tmp_hdr) {"
    },
    {
        "line": 138,
        "fullcodeline": "if (err == 0) {"
    },
    {
        "line": 182,
        "fullcodeline": "if (len > mtu)"
    },
    {
        "line": 186,
        "fullcodeline": "if (len < left)\t{"
    },
    {
        "line": 193,
        "fullcodeline": "if ((frag = alloc_skb(len+hlen+sizeof(struct frag_hdr)+LL_ALLOCATED_SPACE(rt->dst.dev), GFP_ATOMIC)) == NULL) {"
    },
    {
        "line": 230,
        "fullcodeline": "if (!frag_id) {"
    },
    {
        "line": 239,
        "fullcodeline": "if (skb_copy_bits(skb, ptr, skb_transport_header(frag), len))"
    },
    {
        "line": 244,
        "fullcodeline": "if (left > 0)"
    },
    {
        "line": 33,
        "fullcodeline": "mtu = np->frag_size;"
    },
    {
        "line": 43,
        "fullcodeline": "skb_cloned(skb))"
    },
    {
        "line": 48,
        "fullcodeline": "if (frag->len > mtu ||"
    },
    {
        "line": 54,
        "fullcodeline": "if (skb_shared(frag))"
    },
    {
        "line": 67,
        "fullcodeline": "frag = skb_shinfo(skb)->frag_list;"
    },
    {
        "line": 74,
        "fullcodeline": "IP6_INC_STATS(net, ip6_dst_idev(skb_dst(skb)),"
    },
    {
        "line": 123,
        "fullcodeline": "err = output(skb);"
    },
    {
        "line": 131,
        "fullcodeline": "skb = frag;"
    },
    {
        "line": 132,
        "fullcodeline": "frag = skb->next;"
    },
    {
        "line": 133,
        "fullcodeline": "skb->next = NULL;"
    },
    {
        "line": 139,
        "fullcodeline": "IP6_INC_STATS(net, ip6_dst_idev(&rt->dst),"
    },
    {
        "line": 141,
        "fullcodeline": "dst_release(&rt->dst);"
    },
    {
        "line": 146,
        "fullcodeline": "skb = frag->next;"
    },
    {
        "line": 147,
        "fullcodeline": "kfree_skb(frag);"
    },
    {
        "line": 148,
        "fullcodeline": "frag = skb;"
    },
    {
        "line": 183,
        "fullcodeline": "len = mtu;"
    },
    {
        "line": 187,
        "fullcodeline": "len &= ~7;"
    },
    {
        "line": 195,
        "fullcodeline": "IP6_INC_STATS(net, ip6_dst_idev(skb_dst(skb)),"
    },
    {
        "line": 197,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 218,
        "fullcodeline": "skb_set_owner_w(frag, skb->sk);"
    },
    {
        "line": 231,
        "fullcodeline": "ipv6_select_ident(fh);"
    },
    {
        "line": 232,
        "fullcodeline": "frag_id = fh->identification;"
    },
    {
        "line": 240,
        "fullcodeline": "BUG();"
    },
    {
        "line": 245,
        "fullcodeline": "fh->frag_off |= htons(IP6_MF);"
    },
    {
        "line": 42,
        "fullcodeline": "((first_len - hlen) & 7) ||"
    },
    {
        "line": 50,
        "fullcodeline": "skb_headroom(frag) < hlen)"
    },
    {
        "line": 59,
        "fullcodeline": "frag->sk = skb->sk;"
    },
    {
        "line": 60,
        "fullcodeline": "frag->destructor = sock_wfree;"
    },
    {
        "line": 76,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 124,
        "fullcodeline": "if(!err)"
    },
    {
        "line": 128,
        "fullcodeline": "if (err || !frag)"
    },
    {
        "line": 234,
        "fullcodeline": "fh->identification = frag_id;"
    },
    {
        "line": 49,
        "fullcodeline": "((frag->len & 7) && frag->next) ||"
    },
    {
        "line": 103,
        "fullcodeline": "frag->ip_summed = CHECKSUM_NONE;"
    },
    {
        "line": 104,
        "fullcodeline": "skb_reset_transport_header(frag);"
    },
    {
        "line": 105,
        "fullcodeline": "fh = (struct frag_hdr*)__skb_push(frag, sizeof(struct frag_hdr));"
    },
    {
        "line": 106,
        "fullcodeline": "__skb_push(frag, hlen);"
    },
    {
        "line": 107,
        "fullcodeline": "skb_reset_network_header(frag);"
    },
    {
        "line": 108,
        "fullcodeline": "memcpy(skb_network_header(frag), tmp_hdr,"
    },
    {
        "line": 110,
        "fullcodeline": "offset += skb->len - hlen - sizeof(struct frag_hdr);"
    },
    {
        "line": 111,
        "fullcodeline": "fh->nexthdr = nexthdr;"
    },
    {
        "line": 112,
        "fullcodeline": "fh->reserved = 0;"
    },
    {
        "line": 113,
        "fullcodeline": "fh->frag_off = htons(offset);"
    },
    {
        "line": 116,
        "fullcodeline": "fh->identification = frag_id;"
    },
    {
        "line": 117,
        "fullcodeline": "ipv6_hdr(frag)->payload_len ="
    },
    {
        "line": 120,
        "fullcodeline": "ip6_copy_metadata(frag, skb);"
    },
    {
        "line": 125,
        "fullcodeline": "IP6_INC_STATS(net, ip6_dst_idev(&rt->dst),"
    },
    {
        "line": 114,
        "fullcodeline": "if (frag->next != NULL)"
    },
    {
        "line": 118,
        "fullcodeline": "htons(frag->len -"
    },
    {
        "line": 115,
        "fullcodeline": "fh->frag_off |= htons(IP6_MF);"
    }
]