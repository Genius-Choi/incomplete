[
    {
        "line": 7,
        "fullcodeline": "struct inet_sock *inet = inet_sk(sk);"
    },
    {
        "line": 8,
        "fullcodeline": "struct ipv6_pinfo *np = inet6_sk(sk);"
    },
    {
        "line": 17,
        "fullcodeline": "int offset = 0;"
    },
    {
        "line": 18,
        "fullcodeline": "int csummode = CHECKSUM_NONE;"
    },
    {
        "line": 19,
        "fullcodeline": "__u8 tx_flags = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "cork = &inet->cork.base;"
    },
    {
        "line": 92,
        "fullcodeline": "hh_len = LL_RESERVED_SPACE(rt->dst.dev);"
    },
    {
        "line": 94,
        "fullcodeline": "fragheaderlen = sizeof(struct ipv6hdr) + rt->rt6i_nfheader_len +"
    },
    {
        "line": 96,
        "fullcodeline": "maxfraglen = ((mtu - fragheaderlen) & ~7) + fragheaderlen - sizeof(struct frag_hdr);"
    },
    {
        "line": 128,
        "fullcodeline": "cork->length += length;"
    },
    {
        "line": 343,
        "fullcodeline": "IP6_INC_STATS(sock_net(sk), rt->rt6i_idev, IPSTATS_MIB_OUTDISCARDS);"
    },
    {
        "line": 21,
        "fullcodeline": "if (flags&MSG_PROBE)"
    },
    {
        "line": 24,
        "fullcodeline": "if (skb_queue_empty(&sk->sk_write_queue)) {"
    },
    {
        "line": 98,
        "fullcodeline": "if (mtu <= sizeof(struct ipv6hdr) + IPV6_MAXPLEN) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (sk->sk_type == SOCK_DGRAM) {"
    },
    {
        "line": 129,
        "fullcodeline": "if (length > mtu) {"
    },
    {
        "line": 148,
        "fullcodeline": "if ((skb = skb_peek_tail(&sk->sk_write_queue)) == NULL)"
    },
    {
        "line": 151,
        "fullcodeline": "while (length > 0) {"
    },
    {
        "line": 62,
        "fullcodeline": "dst_hold(&rt->dst);"
    },
    {
        "line": 67,
        "fullcodeline": "mtu = np->pmtudisc == IPV6_PMTUDISC_PROBE ?"
    },
    {
        "line": 76,
        "fullcodeline": "cork->length = 0;"
    },
    {
        "line": 77,
        "fullcodeline": "sk->sk_sndmsg_page = NULL;"
    },
    {
        "line": 78,
        "fullcodeline": "sk->sk_sndmsg_off = 0;"
    },
    {
        "line": 79,
        "fullcodeline": "exthdrlen = rt->dst.header_len + (opt ? opt->opt_flen : 0) -"
    },
    {
        "line": 81,
        "fullcodeline": "length += exthdrlen;"
    },
    {
        "line": 82,
        "fullcodeline": "transhdrlen += exthdrlen;"
    },
    {
        "line": 107,
        "fullcodeline": "err = sock_tx_timestamp(sk, &tx_flags);"
    },
    {
        "line": 130,
        "fullcodeline": "int proto = sk->sk_protocol;"
    },
    {
        "line": 153,
        "fullcodeline": "copy = (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - skb->len;"
    },
    {
        "line": 337,
        "fullcodeline": "offset += copy;"
    },
    {
        "line": 338,
        "fullcodeline": "length -= copy;"
    },
    {
        "line": 69,
        "fullcodeline": "if (np->frag_size < mtu) {"
    },
    {
        "line": 84,
        "fullcodeline": "rt = (struct rt6_info *)cork->dst;"
    },
    {
        "line": 85,
        "fullcodeline": "fl6 = &inet->cork.fl.u.ip6;"
    },
    {
        "line": 86,
        "fullcodeline": "opt = np->cork.opt;"
    },
    {
        "line": 87,
        "fullcodeline": "transhdrlen = 0;"
    },
    {
        "line": 88,
        "fullcodeline": "exthdrlen = 0;"
    },
    {
        "line": 89,
        "fullcodeline": "mtu = cork->fragsize;"
    },
    {
        "line": 154,
        "fullcodeline": "if (copy < length)"
    },
    {
        "line": 157,
        "fullcodeline": "if (copy <= 0) {"
    },
    {
        "line": 277,
        "fullcodeline": "if (copy > length)"
    },
    {
        "line": 280,
        "fullcodeline": "if (!(rt->dst.dev->features&NETIF_F_SG)) {"
    },
    {
        "line": 32,
        "fullcodeline": "np->cork.opt = kmalloc(opt->tot_len, sk->sk_allocation);"
    },
    {
        "line": 40,
        "fullcodeline": "np->cork.opt->dst0opt = ip6_opt_dup(opt->dst0opt,"
    },
    {
        "line": 45,
        "fullcodeline": "np->cork.opt->dst1opt = ip6_opt_dup(opt->dst1opt,"
    },
    {
        "line": 50,
        "fullcodeline": "np->cork.opt->hopopt = ip6_opt_dup(opt->hopopt,"
    },
    {
        "line": 55,
        "fullcodeline": "np->cork.opt->srcrt = ip6_rthdr_dup(opt->srcrt,"
    },
    {
        "line": 68,
        "fullcodeline": "rt->dst.dev->mtu : dst_mtu(rt->dst.path);"
    },
    {
        "line": 75,
        "fullcodeline": "cork->flags |= IPCORK_ALLFRAG;"
    },
    {
        "line": 99,
        "fullcodeline": "if (cork->length + length > sizeof(struct ipv6hdr) + IPV6_MAXPLEN - fragheaderlen) {"
    },
    {
        "line": 100,
        "fullcodeline": "ipv6_local_error(sk, EMSGSIZE, fl6, mtu-exthdrlen);"
    },
    {
        "line": 131,
        "fullcodeline": "if (dontfrag && (proto == IPPROTO_UDP || proto == IPPROTO_RAW)){"
    },
    {
        "line": 136,
        "fullcodeline": "if (proto == IPPROTO_UDP &&"
    },
    {
        "line": 137,
        "fullcodeline": "(rt->dst.dev->features & NETIF_F_UFO)) {"
    },
    {
        "line": 139,
        "fullcodeline": "err = ip6_ufo_append_data(sk, getfrag, from, length,"
    },
    {
        "line": 155,
        "fullcodeline": "copy = maxfraglen - skb->len;"
    },
    {
        "line": 165,
        "fullcodeline": "skb_prev = skb;"
    },
    {
        "line": 177,
        "fullcodeline": "datalen = length + fraggap;"
    },
    {
        "line": 181,
        "fullcodeline": "fraglen = datalen + fragheaderlen;"
    },
    {
        "line": 201,
        "fullcodeline": "alloclen += sizeof(struct frag_hdr);"
    },
    {
        "line": 228,
        "fullcodeline": "skb->ip_summed = csummode;"
    },
    {
        "line": 229,
        "fullcodeline": "skb->csum = 0;"
    },
    {
        "line": 231,
        "fullcodeline": "skb_reserve(skb, hh_len+sizeof(struct frag_hdr));"
    },
    {
        "line": 239,
        "fullcodeline": "data = skb_put(skb, fraglen);"
    },
    {
        "line": 240,
        "fullcodeline": "skb_set_network_header(skb, exthdrlen);"
    },
    {
        "line": 241,
        "fullcodeline": "data += fragheaderlen;"
    },
    {
        "line": 242,
        "fullcodeline": "skb->transport_header = (skb->network_header +"
    },
    {
        "line": 253,
        "fullcodeline": "copy = datalen - transhdrlen - fraggap;"
    },
    {
        "line": 264,
        "fullcodeline": "offset += copy;"
    },
    {
        "line": 265,
        "fullcodeline": "length -= datalen - fraggap;"
    },
    {
        "line": 266,
        "fullcodeline": "transhdrlen = 0;"
    },
    {
        "line": 267,
        "fullcodeline": "exthdrlen = 0;"
    },
    {
        "line": 268,
        "fullcodeline": "csummode = CHECKSUM_NONE;"
    },
    {
        "line": 273,
        "fullcodeline": "__skb_queue_tail(&sk->sk_write_queue, skb);"
    },
    {
        "line": 278,
        "fullcodeline": "copy = length;"
    },
    {
        "line": 283,
        "fullcodeline": "off = skb->len;"
    },
    {
        "line": 101,
        "fullcodeline": "return -EMSGSIZE;"
    },
    {
        "line": 132,
        "fullcodeline": "ipv6_local_rxpmtu(sk, fl6, mtu-exthdrlen);"
    },
    {
        "line": 133,
        "fullcodeline": "return -EMSGSIZE;"
    },
    {
        "line": 178,
        "fullcodeline": "if (datalen > (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - fragheaderlen)"
    },
    {
        "line": 193,
        "fullcodeline": "if (datalen == length + fraggap)"
    },
    {
        "line": 223,
        "fullcodeline": "if (skb == NULL)"
    },
    {
        "line": 233,
        "fullcodeline": "if (sk->sk_type == SOCK_DGRAM)"
    },
    {
        "line": 254,
        "fullcodeline": "if (copy < 0) {"
    },
    {
        "line": 291,
        "fullcodeline": "int i = skb_shinfo(skb)->nr_frags;"
    },
    {
        "line": 292,
        "fullcodeline": "skb_frag_t *frag = &skb_shinfo(skb)->frags[i-1];"
    },
    {
        "line": 293,
        "fullcodeline": "struct page *page = sk->sk_sndmsg_page;"
    },
    {
        "line": 294,
        "fullcodeline": "int off = sk->sk_sndmsg_off;"
    },
    {
        "line": 330,
        "fullcodeline": "sk->sk_sndmsg_off += copy;"
    },
    {
        "line": 331,
        "fullcodeline": "frag->size += copy;"
    },
    {
        "line": 332,
        "fullcodeline": "skb->len += copy;"
    },
    {
        "line": 333,
        "fullcodeline": "skb->data_len += copy;"
    },
    {
        "line": 334,
        "fullcodeline": "skb->truesize += copy;"
    },
    {
        "line": 335,
        "fullcodeline": "atomic_add(copy, &sk->sk_wmem_alloc);"
    },
    {
        "line": 33,
        "fullcodeline": "if (unlikely(np->cork.opt == NULL))"
    },
    {
        "line": 42,
        "fullcodeline": "if (opt->dst0opt && !np->cork.opt->dst0opt)"
    },
    {
        "line": 47,
        "fullcodeline": "if (opt->dst1opt && !np->cork.opt->dst1opt)"
    },
    {
        "line": 52,
        "fullcodeline": "if (opt->hopopt && !np->cork.opt->hopopt)"
    },
    {
        "line": 57,
        "fullcodeline": "if (opt->srcrt && !np->cork.opt->srcrt)"
    },
    {
        "line": 71,
        "fullcodeline": "mtu = np->frag_size;"
    },
    {
        "line": 169,
        "fullcodeline": "fraggap = skb_prev->len - maxfraglen;"
    },
    {
        "line": 179,
        "fullcodeline": "datalen = maxfraglen - fragheaderlen;"
    },
    {
        "line": 182,
        "fullcodeline": "if ((flags & MSG_MORE) &&"
    },
    {
        "line": 183,
        "fullcodeline": "!(rt->dst.dev->features&NETIF_F_SG))"
    },
    {
        "line": 184,
        "fullcodeline": "alloclen = mtu;"
    },
    {
        "line": 194,
        "fullcodeline": "alloclen += rt->dst.trailer_len;"
    },
    {
        "line": 204,
        "fullcodeline": "skb = sock_alloc_send_skb(sk,"
    },
    {
        "line": 245,
        "fullcodeline": "skb->csum = skb_copy_and_csum_bits("
    },
    {
        "line": 248,
        "fullcodeline": "skb_prev->csum = csum_sub(skb_prev->csum,"
    },
    {
        "line": 250,
        "fullcodeline": "data += fraggap;"
    },
    {
        "line": 251,
        "fullcodeline": "pskb_trim_unique(skb_prev, maxfraglen);"
    },
    {
        "line": 255,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 284,
        "fullcodeline": "if (getfrag(from, skb_put(skb, copy),"
    },
    {
        "line": 287,
        "fullcodeline": "err = -EFAULT;"
    },
    {
        "line": 297,
        "fullcodeline": "if (page && (left = PAGE_SIZE - off) > 0) {"
    },
    {
        "line": 30,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 34,
        "fullcodeline": "return -ENOBUFS;"
    },
    {
        "line": 43,
        "fullcodeline": "return -ENOBUFS;"
    },
    {
        "line": 48,
        "fullcodeline": "return -ENOBUFS;"
    },
    {
        "line": 53,
        "fullcodeline": "return -ENOBUFS;"
    },
    {
        "line": 58,
        "fullcodeline": "return -ENOBUFS;"
    },
    {
        "line": 171,
        "fullcodeline": "fraggap = 0;"
    },
    {
        "line": 186,
        "fullcodeline": "alloclen = datalen + fragheaderlen;"
    },
    {
        "line": 208,
        "fullcodeline": "skb = NULL;"
    },
    {
        "line": 326,
        "fullcodeline": "if (getfrag(from, page_address(frag->page)+frag->page_offset+frag->size, offset, copy, skb->len, skb) < 0) {"
    },
    {
        "line": 327,
        "fullcodeline": "err = -EFAULT;"
    },
    {
        "line": 206,
        "fullcodeline": "(flags & MSG_DONTWAIT), &err);"
    },
    {
        "line": 234,
        "fullcodeline": "skb_shinfo(skb)->tx_flags = tx_flags;"
    },
    {
        "line": 298,
        "fullcodeline": "if (copy >= left)"
    },
    {
        "line": 300,
        "fullcodeline": "if (page != frag->page) {"
    },
    {
        "line": 209,
        "fullcodeline": "if (atomic_read(&sk->sk_wmem_alloc) <="
    },
    {
        "line": 210,
        "fullcodeline": "2 * sk->sk_sndbuf)"
    },
    {
        "line": 211,
        "fullcodeline": "skb = sock_wmalloc(sk,"
    },
    {
        "line": 214,
        "fullcodeline": "if (unlikely(skb == NULL))"
    },
    {
        "line": 215,
        "fullcodeline": "err = -ENOBUFS;"
    },
    {
        "line": 258,
        "fullcodeline": "} else if (copy > 0 && getfrag(from, data + transhdrlen, offset, copy, fraggap, skb) < 0) {"
    },
    {
        "line": 259,
        "fullcodeline": "err = -EFAULT;"
    },
    {
        "line": 299,
        "fullcodeline": "copy = left;"
    },
    {
        "line": 305,
        "fullcodeline": "get_page(page);"
    },
    {
        "line": 306,
        "fullcodeline": "skb_fill_page_desc(skb, i, page, sk->sk_sndmsg_off, 0);"
    },
    {
        "line": 307,
        "fullcodeline": "frag = &skb_shinfo(skb)->frags[i];"
    },
    {
        "line": 309,
        "fullcodeline": "} else if(i < MAX_SKB_FRAGS) {"
    },
    {
        "line": 220,
        "fullcodeline": "tx_flags = 0;"
    },
    {
        "line": 301,
        "fullcodeline": "if (i == MAX_SKB_FRAGS) {"
    },
    {
        "line": 312,
        "fullcodeline": "page = alloc_pages(sk->sk_allocation, 0);"
    },
    {
        "line": 317,
        "fullcodeline": "sk->sk_sndmsg_page = page;"
    },
    {
        "line": 318,
        "fullcodeline": "sk->sk_sndmsg_off = 0;"
    },
    {
        "line": 320,
        "fullcodeline": "skb_fill_page_desc(skb, i, page, 0, 0);"
    },
    {
        "line": 321,
        "fullcodeline": "frag = &skb_shinfo(skb)->frags[i];"
    },
    {
        "line": 302,
        "fullcodeline": "err = -EMSGSIZE;"
    },
    {
        "line": 310,
        "fullcodeline": "if (copy > PAGE_SIZE)"
    },
    {
        "line": 313,
        "fullcodeline": "if (page == NULL) {"
    },
    {
        "line": 323,
        "fullcodeline": "err = -EMSGSIZE;"
    },
    {
        "line": 311,
        "fullcodeline": "copy = PAGE_SIZE;"
    },
    {
        "line": 314,
        "fullcodeline": "err = -ENOMEM;"
    }
]