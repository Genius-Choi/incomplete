[
    {
        "line": 13,
        "fullcodeline": "struct sk_buff *skb, *skb_prev = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "int exthdrlen = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "int dst_exthdrlen = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "int offset = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "__u8 tx_flags = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "u32 tskey = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "struct rt6_info *rt = (struct rt6_info *)cork->dst;"
    },
    {
        "line": 24,
        "fullcodeline": "struct ipv6_txoptions *opt = v6_cork->opt;"
    },
    {
        "line": 25,
        "fullcodeline": "int csummode = CHECKSUM_NONE;"
    },
    {
        "line": 28,
        "fullcodeline": "skb = skb_peek_tail(queue);"
    },
    {
        "line": 34,
        "fullcodeline": "mtu = cork->fragsize;"
    },
    {
        "line": 35,
        "fullcodeline": "orig_mtu = mtu;"
    },
    {
        "line": 37,
        "fullcodeline": "hh_len = LL_RESERVED_SPACE(rt->dst.dev);"
    },
    {
        "line": 39,
        "fullcodeline": "fragheaderlen = sizeof(struct ipv6hdr) + rt->rt6i_nfheader_len +"
    },
    {
        "line": 41,
        "fullcodeline": "maxfraglen = ((mtu - fragheaderlen) & ~7) + fragheaderlen -"
    },
    {
        "line": 44,
        "fullcodeline": "headersize = sizeof(struct ipv6hdr) +"
    },
    {
        "line": 104,
        "fullcodeline": "cork->length += length;"
    },
    {
        "line": 309,
        "fullcodeline": "err = -EFAULT;"
    },
    {
        "line": 311,
        "fullcodeline": "cork->length -= length;"
    },
    {
        "line": 312,
        "fullcodeline": "IP6_INC_STATS(sock_net(sk), rt->rt6i_idev, IPSTATS_MIB_OUTDISCARDS);"
    },
    {
        "line": 29,
        "fullcodeline": "if (!skb) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (cork->length + length > mtu - headersize && ipc6->dontfrag &&"
    },
    {
        "line": 58,
        "fullcodeline": "if (ip6_sk_ignore_df(sk))"
    },
    {
        "line": 63,
        "fullcodeline": "if (cork->length + length > maxnonfragsize - headersize) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (transhdrlen && sk->sk_protocol == IPPROTO_UDP &&"
    },
    {
        "line": 81,
        "fullcodeline": "if (sk->sk_type == SOCK_DGRAM || sk->sk_type == SOCK_RAW) {"
    },
    {
        "line": 105,
        "fullcodeline": "if ((((length + fragheaderlen) > mtu) ||"
    },
    {
        "line": 118,
        "fullcodeline": "if (!skb)"
    },
    {
        "line": 121,
        "fullcodeline": "while (length > 0) {"
    },
    {
        "line": 30,
        "fullcodeline": "exthdrlen = opt ? opt->opt_flen : 0;"
    },
    {
        "line": 31,
        "fullcodeline": "dst_exthdrlen = rt->dst.header_len - rt->rt6i_nfheader_len;"
    },
    {
        "line": 40,
        "fullcodeline": "(opt ? opt->opt_nflen : 0);"
    },
    {
        "line": 51,
        "fullcodeline": "(sk->sk_protocol == IPPROTO_UDP ||"
    },
    {
        "line": 53,
        "fullcodeline": "ipv6_local_rxpmtu(sk, fl6, mtu - headersize +"
    },
    {
        "line": 59,
        "fullcodeline": "maxnonfragsize = sizeof(struct ipv6hdr) + IPV6_MAXPLEN;"
    },
    {
        "line": 65,
        "fullcodeline": "ipv6_local_error(sk, EMSGSIZE, fl6,"
    },
    {
        "line": 78,
        "fullcodeline": "rt->dst.dev->features & (NETIF_F_IPV6_CSUM | NETIF_F_HW_CSUM))"
    },
    {
        "line": 79,
        "fullcodeline": "csummode = CHECKSUM_PARTIAL;"
    },
    {
        "line": 82,
        "fullcodeline": "sock_tx_timestamp(sk, sockc->tsflags, &tx_flags);"
    },
    {
        "line": 109,
        "fullcodeline": "(sk->sk_type == SOCK_DGRAM) && !udp_get_no_check6_tx(sk)) {"
    },
    {
        "line": 110,
        "fullcodeline": "err = ip6_ufo_append_data(sk, queue, getfrag, from, length,"
    },
    {
        "line": 123,
        "fullcodeline": "copy = (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - skb->len;"
    },
    {
        "line": 302,
        "fullcodeline": "offset += copy;"
    },
    {
        "line": 303,
        "fullcodeline": "length -= copy;"
    },
    {
        "line": 46,
        "fullcodeline": "(dst_allfrag(&rt->dst) ?"
    },
    {
        "line": 52,
        "fullcodeline": "sk->sk_protocol == IPPROTO_RAW)) {"
    },
    {
        "line": 61,
        "fullcodeline": "maxnonfragsize = mtu;"
    },
    {
        "line": 66,
        "fullcodeline": "mtu - headersize +"
    },
    {
        "line": 68,
        "fullcodeline": "return -EMSGSIZE;"
    },
    {
        "line": 77,
        "fullcodeline": "!(flags & MSG_MORE) &&"
    },
    {
        "line": 83,
        "fullcodeline": "if (tx_flags & SKBTX_ANY_SW_TSTAMP &&"
    },
    {
        "line": 124,
        "fullcodeline": "if (copy < length)"
    },
    {
        "line": 127,
        "fullcodeline": "if (copy <= 0) {"
    },
    {
        "line": 258,
        "fullcodeline": "if (copy > length)"
    },
    {
        "line": 261,
        "fullcodeline": "if (!(rt->dst.dev->features&NETIF_F_SG)) {"
    },
    {
        "line": 45,
        "fullcodeline": "(opt ? opt->opt_flen + opt->opt_nflen : 0) +"
    },
    {
        "line": 76,
        "fullcodeline": "length <= mtu - headersize &&"
    },
    {
        "line": 84,
        "fullcodeline": "sk->sk_tsflags & SOF_TIMESTAMPING_OPT_ID)"
    },
    {
        "line": 85,
        "fullcodeline": "tskey = sk->sk_tskey++;"
    },
    {
        "line": 108,
        "fullcodeline": "(rt->dst.dev->features & NETIF_F_UFO) && !dst_xfrm(&rt->dst) &&"
    },
    {
        "line": 125,
        "fullcodeline": "copy = maxfraglen - skb->len;"
    },
    {
        "line": 145,
        "fullcodeline": "skb_prev = skb;"
    },
    {
        "line": 151,
        "fullcodeline": "datalen = length + fraggap;"
    },
    {
        "line": 161,
        "fullcodeline": "alloclen += dst_exthdrlen;"
    },
    {
        "line": 171,
        "fullcodeline": "alloclen += rt->dst.trailer_len;"
    },
    {
        "line": 172,
        "fullcodeline": "fraglen = datalen + fragheaderlen;"
    },
    {
        "line": 179,
        "fullcodeline": "alloclen += sizeof(struct frag_hdr);"
    },
    {
        "line": 200,
        "fullcodeline": "skb->protocol = htons(ETH_P_IPV6);"
    },
    {
        "line": 201,
        "fullcodeline": "skb->ip_summed = csummode;"
    },
    {
        "line": 202,
        "fullcodeline": "skb->csum = 0;"
    },
    {
        "line": 204,
        "fullcodeline": "skb_reserve(skb, hh_len + sizeof(struct frag_hdr) +"
    },
    {
        "line": 208,
        "fullcodeline": "skb_shinfo(skb)->tx_flags = tx_flags;"
    },
    {
        "line": 209,
        "fullcodeline": "tx_flags = 0;"
    },
    {
        "line": 210,
        "fullcodeline": "skb_shinfo(skb)->tskey = tskey;"
    },
    {
        "line": 211,
        "fullcodeline": "tskey = 0;"
    },
    {
        "line": 216,
        "fullcodeline": "data = skb_put(skb, fraglen);"
    },
    {
        "line": 217,
        "fullcodeline": "skb_set_network_header(skb, exthdrlen);"
    },
    {
        "line": 218,
        "fullcodeline": "data += fragheaderlen;"
    },
    {
        "line": 219,
        "fullcodeline": "skb->transport_header = (skb->network_header +"
    },
    {
        "line": 230,
        "fullcodeline": "copy = datalen - transhdrlen - fraggap;"
    },
    {
        "line": 242,
        "fullcodeline": "offset += copy;"
    },
    {
        "line": 243,
        "fullcodeline": "length -= datalen - fraggap;"
    },
    {
        "line": 244,
        "fullcodeline": "transhdrlen = 0;"
    },
    {
        "line": 245,
        "fullcodeline": "exthdrlen = 0;"
    },
    {
        "line": 246,
        "fullcodeline": "dst_exthdrlen = 0;"
    },
    {
        "line": 254,
        "fullcodeline": "__skb_queue_tail(queue, skb);"
    },
    {
        "line": 259,
        "fullcodeline": "copy = length;"
    },
    {
        "line": 264,
        "fullcodeline": "off = skb->len;"
    },
    {
        "line": 75,
        "fullcodeline": "headersize == sizeof(struct ipv6hdr) &&"
    },
    {
        "line": 140,
        "fullcodeline": "if (!skb || !skb_prev)"
    },
    {
        "line": 153,
        "fullcodeline": "if (datalen > (cork->length <= mtu && !(cork->flags & IPCORK_ALLFRAG) ? mtu : maxfraglen) - fragheaderlen)"
    },
    {
        "line": 155,
        "fullcodeline": "if ((flags & MSG_MORE) &&"
    },
    {
        "line": 163,
        "fullcodeline": "if (datalen != length + fraggap) {"
    },
    {
        "line": 195,
        "fullcodeline": "if (!skb)"
    },
    {
        "line": 232,
        "fullcodeline": "if (copy < 0) {"
    },
    {
        "line": 248,
        "fullcodeline": "if ((flags & MSG_CONFIRM) && !skb_prev)"
    },
    {
        "line": 265,
        "fullcodeline": "if (getfrag(from, skb_put(skb, copy),"
    },
    {
        "line": 272,
        "fullcodeline": "int i = skb_shinfo(skb)->nr_frags;"
    },
    {
        "line": 274,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 295,
        "fullcodeline": "pfrag->offset += copy;"
    },
    {
        "line": 296,
        "fullcodeline": "skb_frag_size_add(&skb_shinfo(skb)->frags[i - 1], copy);"
    },
    {
        "line": 297,
        "fullcodeline": "skb->len += copy;"
    },
    {
        "line": 298,
        "fullcodeline": "skb->data_len += copy;"
    },
    {
        "line": 299,
        "fullcodeline": "skb->truesize += copy;"
    },
    {
        "line": 300,
        "fullcodeline": "atomic_add(copy, &sk->sk_wmem_alloc);"
    },
    {
        "line": 107,
        "fullcodeline": "(sk->sk_protocol == IPPROTO_UDP) &&"
    },
    {
        "line": 136,
        "fullcodeline": "fraggap = skb->len - maxfraglen;"
    },
    {
        "line": 141,
        "fullcodeline": "ip6_append_data_mtu(&mtu, &maxfraglen,"
    },
    {
        "line": 154,
        "fullcodeline": "datalen = maxfraglen - fragheaderlen - rt->dst.trailer_len;"
    },
    {
        "line": 156,
        "fullcodeline": "!(rt->dst.dev->features&NETIF_F_SG))"
    },
    {
        "line": 157,
        "fullcodeline": "alloclen = mtu;"
    },
    {
        "line": 168,
        "fullcodeline": "datalen += rt->dst.trailer_len;"
    },
    {
        "line": 182,
        "fullcodeline": "skb = sock_alloc_send_skb(sk,"
    },
    {
        "line": 222,
        "fullcodeline": "skb->csum = skb_copy_and_csum_bits("
    },
    {
        "line": 225,
        "fullcodeline": "skb_prev->csum = csum_sub(skb_prev->csum,"
    },
    {
        "line": 227,
        "fullcodeline": "data += fraggap;"
    },
    {
        "line": 228,
        "fullcodeline": "pskb_trim_unique(skb_prev, maxfraglen);"
    },
    {
        "line": 233,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 234,
        "fullcodeline": "kfree_skb(skb);"
    },
    {
        "line": 249,
        "fullcodeline": "skb_set_dst_pending_confirm(skb, 1);"
    },
    {
        "line": 267,
        "fullcodeline": "__skb_trim(skb, off);"
    },
    {
        "line": 268,
        "fullcodeline": "err = -EFAULT;"
    },
    {
        "line": 275,
        "fullcodeline": "if (!sk_page_frag_refill(sk, pfrag))"
    },
    {
        "line": 278,
        "fullcodeline": "if (!skb_can_coalesce(skb, i, pfrag->page,"
    },
    {
        "line": 290,
        "fullcodeline": "if (getfrag(from,"
    },
    {
        "line": 106,
        "fullcodeline": "(skb && skb_is_gso(skb))) &&"
    },
    {
        "line": 138,
        "fullcodeline": "fraggap = 0;"
    },
    {
        "line": 159,
        "fullcodeline": "alloclen = datalen + fragheaderlen;"
    },
    {
        "line": 186,
        "fullcodeline": "skb = NULL;"
    },
    {
        "line": 280,
        "fullcodeline": "err = -EMSGSIZE;"
    },
    {
        "line": 284,
        "fullcodeline": "__skb_fill_page_desc(skb, i, pfrag->page,"
    },
    {
        "line": 286,
        "fullcodeline": "skb_shinfo(skb)->nr_frags = ++i;"
    },
    {
        "line": 287,
        "fullcodeline": "get_page(pfrag->page);"
    },
    {
        "line": 183,
        "fullcodeline": "alloclen + hh_len,"
    },
    {
        "line": 184,
        "fullcodeline": "(flags & MSG_DONTWAIT), &err);"
    },
    {
        "line": 187,
        "fullcodeline": "if (atomic_read(&sk->sk_wmem_alloc) <="
    },
    {
        "line": 192,
        "fullcodeline": "if (unlikely(!skb))"
    },
    {
        "line": 224,
        "fullcodeline": "data + transhdrlen, fraggap, 0);"
    },
    {
        "line": 236,
        "fullcodeline": "} else if (copy > 0 && getfrag(from, data + transhdrlen, offset, copy, fraggap, skb) < 0) {"
    },
    {
        "line": 281,
        "fullcodeline": "if (i == MAX_SKB_FRAGS)"
    },
    {
        "line": 291,
        "fullcodeline": "page_address(pfrag->page) + pfrag->offset,"
    },
    {
        "line": 188,
        "fullcodeline": "2 * sk->sk_sndbuf)"
    },
    {
        "line": 189,
        "fullcodeline": "skb = sock_wmalloc(sk,"
    },
    {
        "line": 193,
        "fullcodeline": "err = -ENOBUFS;"
    },
    {
        "line": 237,
        "fullcodeline": "err = -EFAULT;"
    },
    {
        "line": 238,
        "fullcodeline": "kfree_skb(skb);"
    },
    {
        "line": 190,
        "fullcodeline": "alloclen + hh_len, 1,"
    }
]