[
    {
        "line": 3,
        "fullcodeline": "struct playlist *v = opaque;"
    },
    {
        "line": 4,
        "fullcodeline": "HLSContext *c = v->parent->priv_data;"
    },
    {
        "line": 6,
        "fullcodeline": "int just_opened = 0;"
    },
    {
        "line": 95,
        "fullcodeline": "ret = read_from_url(v, current_segment(v), buf, buf_size, READ_NORMAL);"
    },
    {
        "line": 105,
        "fullcodeline": "ff_format_io_close(v->parent, &v->input);"
    },
    {
        "line": 106,
        "fullcodeline": "v->cur_seq_no++;"
    },
    {
        "line": 108,
        "fullcodeline": "c->cur_seq_no = v->cur_seq_no;"
    },
    {
        "line": 9,
        "fullcodeline": "if (!v->needed)"
    },
    {
        "line": 12,
        "fullcodeline": "if (!v->input) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (v->init_sec_buf_read_offset < v->init_sec_data_len) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (ret > 0) {"
    },
    {
        "line": 35,
        "fullcodeline": "reload_interval = default_reload_interval(v);"
    },
    {
        "line": 68,
        "fullcodeline": "seg = current_segment(v);"
    },
    {
        "line": 71,
        "fullcodeline": "ret = update_init_section(v, seg);"
    },
    {
        "line": 75,
        "fullcodeline": "ret = open_input(c, v, seg);"
    },
    {
        "line": 84,
        "fullcodeline": "just_opened = 1;"
    },
    {
        "line": 89,
        "fullcodeline": "int copy_size = FFMIN(v->init_sec_data_len - v->init_sec_buf_read_offset, buf_size);"
    },
    {
        "line": 90,
        "fullcodeline": "memcpy(buf, v->init_sec_buf, copy_size);"
    },
    {
        "line": 18,
        "fullcodeline": "if (v->ctx && v->ctx->nb_streams) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (!v->needed) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (!v->finished &&"
    },
    {
        "line": 50,
        "fullcodeline": "if (v->cur_seq_no < v->start_seq_no) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (v->cur_seq_no >= v->start_seq_no + v->n_segments) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 19,
        "fullcodeline": "v->needed = 0;"
    },
    {
        "line": 28,
        "fullcodeline": "av_log(v->parent, AV_LOG_INFO, \"No longer receiving playlist %d\\n\","
    },
    {
        "line": 39,
        "fullcodeline": "av_gettime_relative() - v->last_load_time >= reload_interval) {"
    },
    {
        "line": 48,
        "fullcodeline": "reload_interval = v->target_duration / 2;"
    },
    {
        "line": 51,
        "fullcodeline": "av_log(NULL, AV_LOG_WARNING,"
    },
    {
        "line": 54,
        "fullcodeline": "v->cur_seq_no = v->start_seq_no;"
    },
    {
        "line": 79,
        "fullcodeline": "av_log(v->parent, AV_LOG_WARNING, \"Failed to open segment of playlist %d\\n\","
    },
    {
        "line": 81,
        "fullcodeline": "v->cur_seq_no += 1;"
    },
    {
        "line": 97,
        "fullcodeline": "if (just_opened && v->is_id3_timestamped != 0) {"
    },
    {
        "line": 100,
        "fullcodeline": "intercept_id3(v, buf, buf_size, &ret);"
    },
    {
        "line": 20,
        "fullcodeline": "for (i = 0; i < v->n_main_streams; i++) {"
    },
    {
        "line": 40,
        "fullcodeline": "if ((ret = parse_playlist(c, v->url, v, NULL)) < 0) {"
    },
    {
        "line": 53,
        "fullcodeline": "v->start_seq_no - v->cur_seq_no);"
    },
    {
        "line": 59,
        "fullcodeline": "while (av_gettime_relative() - v->last_load_time < reload_interval) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (ff_check_interrupt(c->interrupt_callback))"
    },
    {
        "line": 62,
        "fullcodeline": "av_usleep(100*1000);"
    },
    {
        "line": 21,
        "fullcodeline": "if (v->main_streams[i]->discard < AVDISCARD_ALL) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (ff_check_interrupt(c->interrupt_callback))"
    },
    {
        "line": 22,
        "fullcodeline": "v->needed = 1;"
    }
]