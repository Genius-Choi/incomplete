[
    {
        "line": 7,
        "fullcodeline": "a = b = c = 0xdeadbeef + ((uint32_t)length) + initval;"
    },
    {
        "line": 9,
        "fullcodeline": "u.ptr = key;"
    },
    {
        "line": 165,
        "fullcodeline": "final(a,b,c);"
    },
    {
        "line": 10,
        "fullcodeline": "if (HASH_LITTLE_ENDIAN && ((u.i & 0x3) == 0)) {"
    },
    {
        "line": 11,
        "fullcodeline": "const uint32_t *k = (const uint32_t *)key;         /* read 32-bit chunks */"
    },
    {
        "line": 14,
        "fullcodeline": "while (length > 12)"
    },
    {
        "line": 16,
        "fullcodeline": "a += k[0];"
    },
    {
        "line": 17,
        "fullcodeline": "b += k[1];"
    },
    {
        "line": 18,
        "fullcodeline": "c += k[2];"
    },
    {
        "line": 19,
        "fullcodeline": "mix(a,b,c);"
    },
    {
        "line": 20,
        "fullcodeline": "length -= 12;"
    },
    {
        "line": 21,
        "fullcodeline": "k += 3;"
    },
    {
        "line": 38,
        "fullcodeline": "case 12: c+=k[2]; b+=k[1]; a+=k[0]; break;"
    },
    {
        "line": 39,
        "fullcodeline": "case 11: c+=k[2]&0xffffff; b+=k[1]; a+=k[0]; break;"
    },
    {
        "line": 40,
        "fullcodeline": "case 10: c+=k[2]&0xffff; b+=k[1]; a+=k[0]; break;"
    },
    {
        "line": 41,
        "fullcodeline": "case 9 : c+=k[2]&0xff; b+=k[1]; a+=k[0]; break;"
    },
    {
        "line": 42,
        "fullcodeline": "case 8 : b+=k[1]; a+=k[0]; break;"
    },
    {
        "line": 43,
        "fullcodeline": "case 7 : b+=k[1]&0xffffff; a+=k[0]; break;"
    },
    {
        "line": 44,
        "fullcodeline": "case 6 : b+=k[1]&0xffff; a+=k[0]; break;"
    },
    {
        "line": 45,
        "fullcodeline": "case 5 : b+=k[1]&0xff; a+=k[0]; break;"
    },
    {
        "line": 46,
        "fullcodeline": "case 4 : a+=k[0]; break;"
    },
    {
        "line": 47,
        "fullcodeline": "case 3 : a+=k[0]&0xffffff; break;"
    },
    {
        "line": 48,
        "fullcodeline": "case 2 : a+=k[0]&0xffff; break;"
    },
    {
        "line": 49,
        "fullcodeline": "case 1 : a+=k[0]&0xff; break;"
    },
    {
        "line": 75,
        "fullcodeline": "} else if (HASH_LITTLE_ENDIAN && ((u.i & 0x1) == 0)) {"
    },
    {
        "line": 76,
        "fullcodeline": "const uint16_t *k = (const uint16_t *)key;         /* read 16-bit chunks */"
    },
    {
        "line": 91,
        "fullcodeline": "k8 = (const uint8_t *)k;"
    },
    {
        "line": 80,
        "fullcodeline": "while (length > 12)"
    },
    {
        "line": 123,
        "fullcodeline": "const uint8_t *k = (const uint8_t *)key;"
    },
    {
        "line": 82,
        "fullcodeline": "a += k[0] + (((uint32_t)k[1])<<16);"
    },
    {
        "line": 83,
        "fullcodeline": "b += k[2] + (((uint32_t)k[3])<<16);"
    },
    {
        "line": 84,
        "fullcodeline": "c += k[4] + (((uint32_t)k[5])<<16);"
    },
    {
        "line": 85,
        "fullcodeline": "mix(a,b,c);"
    },
    {
        "line": 86,
        "fullcodeline": "length -= 12;"
    },
    {
        "line": 87,
        "fullcodeline": "k += 6;"
    },
    {
        "line": 94,
        "fullcodeline": "case 12: c+=k[4]+(((uint32_t)k[5])<<16);"
    },
    {
        "line": 95,
        "fullcodeline": "b+=k[2]+(((uint32_t)k[3])<<16);"
    },
    {
        "line": 96,
        "fullcodeline": "a+=k[0]+(((uint32_t)k[1])<<16);"
    },
    {
        "line": 98,
        "fullcodeline": "case 11: c+=((uint32_t)k8[10])<<16;     /* fall through */"
    },
    {
        "line": 99,
        "fullcodeline": "case 10: c+=k[4];"
    },
    {
        "line": 100,
        "fullcodeline": "b+=k[2]+(((uint32_t)k[3])<<16);"
    },
    {
        "line": 101,
        "fullcodeline": "a+=k[0]+(((uint32_t)k[1])<<16);"
    },
    {
        "line": 103,
        "fullcodeline": "case 9 : c+=k8[8];                      /* fall through */"
    },
    {
        "line": 104,
        "fullcodeline": "case 8 : b+=k[2]+(((uint32_t)k[3])<<16);"
    },
    {
        "line": 105,
        "fullcodeline": "a+=k[0]+(((uint32_t)k[1])<<16);"
    },
    {
        "line": 107,
        "fullcodeline": "case 7 : b+=((uint32_t)k8[6])<<16;      /* fall through */"
    },
    {
        "line": 108,
        "fullcodeline": "case 6 : b+=k[2];"
    },
    {
        "line": 109,
        "fullcodeline": "a+=k[0]+(((uint32_t)k[1])<<16);"
    },
    {
        "line": 111,
        "fullcodeline": "case 5 : b+=k8[4];                      /* fall through */"
    },
    {
        "line": 112,
        "fullcodeline": "case 4 : a+=k[0]+(((uint32_t)k[1])<<16);"
    },
    {
        "line": 114,
        "fullcodeline": "case 3 : a+=((uint32_t)k8[2])<<16;      /* fall through */"
    },
    {
        "line": 115,
        "fullcodeline": "case 2 : a+=k[0];"
    },
    {
        "line": 117,
        "fullcodeline": "case 1 : a+=k8[0];"
    },
    {
        "line": 126,
        "fullcodeline": "while (length > 12)"
    },
    {
        "line": 128,
        "fullcodeline": "a += k[0];"
    },
    {
        "line": 129,
        "fullcodeline": "a += ((uint32_t)k[1])<<8;"
    },
    {
        "line": 130,
        "fullcodeline": "a += ((uint32_t)k[2])<<16;"
    },
    {
        "line": 131,
        "fullcodeline": "a += ((uint32_t)k[3])<<24;"
    },
    {
        "line": 132,
        "fullcodeline": "b += k[4];"
    },
    {
        "line": 133,
        "fullcodeline": "b += ((uint32_t)k[5])<<8;"
    },
    {
        "line": 134,
        "fullcodeline": "b += ((uint32_t)k[6])<<16;"
    },
    {
        "line": 135,
        "fullcodeline": "b += ((uint32_t)k[7])<<24;"
    },
    {
        "line": 136,
        "fullcodeline": "c += k[8];"
    },
    {
        "line": 137,
        "fullcodeline": "c += ((uint32_t)k[9])<<8;"
    },
    {
        "line": 138,
        "fullcodeline": "c += ((uint32_t)k[10])<<16;"
    },
    {
        "line": 139,
        "fullcodeline": "c += ((uint32_t)k[11])<<24;"
    },
    {
        "line": 140,
        "fullcodeline": "mix(a,b,c);"
    },
    {
        "line": 141,
        "fullcodeline": "length -= 12;"
    },
    {
        "line": 142,
        "fullcodeline": "k += 12;"
    },
    {
        "line": 148,
        "fullcodeline": "case 12: c+=((uint32_t)k[11])<<24;"
    },
    {
        "line": 149,
        "fullcodeline": "case 11: c+=((uint32_t)k[10])<<16;"
    },
    {
        "line": 150,
        "fullcodeline": "case 10: c+=((uint32_t)k[9])<<8;"
    },
    {
        "line": 151,
        "fullcodeline": "case 9 : c+=k[8];"
    },
    {
        "line": 152,
        "fullcodeline": "case 8 : b+=((uint32_t)k[7])<<24;"
    },
    {
        "line": 153,
        "fullcodeline": "case 7 : b+=((uint32_t)k[6])<<16;"
    },
    {
        "line": 154,
        "fullcodeline": "case 6 : b+=((uint32_t)k[5])<<8;"
    },
    {
        "line": 155,
        "fullcodeline": "case 5 : b+=k[4];"
    },
    {
        "line": 156,
        "fullcodeline": "case 4 : a+=((uint32_t)k[3])<<24;"
    },
    {
        "line": 157,
        "fullcodeline": "case 3 : a+=((uint32_t)k[2])<<16;"
    },
    {
        "line": 158,
        "fullcodeline": "case 2 : a+=((uint32_t)k[1])<<8;"
    },
    {
        "line": 159,
        "fullcodeline": "case 1 : a+=k[0];"
    }
]