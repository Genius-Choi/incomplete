[
    {
        "line": 4,
        "fullcodeline": "struct json_object *obj = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "char c = '\\1';"
    },
    {
        "line": 14,
        "fullcodeline": "tok->char_offset = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "tok->err = json_tokener_success;"
    },
    {
        "line": 640,
        "fullcodeline": "MC_DEBUG(\"json_tokener_parse_ex: error %s at offset %d\\n\","
    },
    {
        "line": 17,
        "fullcodeline": "while (PEEK_CHAR(c, tok)) {"
    },
    {
        "line": 611,
        "fullcodeline": "if (c &&"
    },
    {
        "line": 618,
        "fullcodeline": "if (!c) { /* We hit an eof char (0) */"
    },
    {
        "line": 629,
        "fullcodeline": "if (tok->err == json_tokener_success)"
    },
    {
        "line": 614,
        "fullcodeline": "(tok->flags & JSON_TOKENER_STRICT)) {"
    },
    {
        "line": 616,
        "fullcodeline": "tok->err = json_tokener_error_parse_unexpected;"
    },
    {
        "line": 631,
        "fullcodeline": "json_object *ret = json_object_get(current);"
    },
    {
        "line": 606,
        "fullcodeline": "if (!ADVANCE_CHAR(str, tok))"
    },
    {
        "line": 613,
        "fullcodeline": "(tok->depth == 0) &&"
    },
    {
        "line": 619,
        "fullcodeline": "if(state != json_tokener_state_finish &&"
    },
    {
        "line": 635,
        "fullcodeline": "for(ii = tok->depth; ii >= 0; ii--)"
    },
    {
        "line": 636,
        "fullcodeline": "json_tokener_reset_level(tok, ii);"
    },
    {
        "line": 108,
        "fullcodeline": "obj = json_object_get(current);"
    },
    {
        "line": 109,
        "fullcodeline": "json_tokener_reset_level(tok, tok->depth);"
    },
    {
        "line": 110,
        "fullcodeline": "tok->depth--;"
    },
    {
        "line": 194,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, &c, 1);"
    },
    {
        "line": 229,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, &c, 1);"
    },
    {
        "line": 500,
        "fullcodeline": "json_object_array_add(current, obj);"
    },
    {
        "line": 501,
        "fullcodeline": "saved_state = json_tokener_state_array_sep;"
    },
    {
        "line": 502,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 579,
        "fullcodeline": "state = json_tokener_state_object_value_add;"
    },
    {
        "line": 580,
        "fullcodeline": "tok->depth++;"
    },
    {
        "line": 581,
        "fullcodeline": "json_tokener_reset_level(tok, tok->depth);"
    },
    {
        "line": 585,
        "fullcodeline": "json_object_object_add(current, obj_field_name, obj);"
    },
    {
        "line": 586,
        "fullcodeline": "free(obj_field_name);"
    },
    {
        "line": 587,
        "fullcodeline": "obj_field_name = NULL;"
    },
    {
        "line": 588,
        "fullcodeline": "saved_state = json_tokener_state_object_sep;"
    },
    {
        "line": 589,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 612,
        "fullcodeline": "(state == json_tokener_state_finish) &&"
    },
    {
        "line": 620,
        "fullcodeline": "saved_state != json_tokener_state_finish)"
    },
    {
        "line": 621,
        "fullcodeline": "tok->err = json_tokener_error_parse_eof;"
    },
    {
        "line": 24,
        "fullcodeline": "while (isspace((int)c)) {"
    },
    {
        "line": 28,
        "fullcodeline": "if(c == '/' && !(tok->flags & JSON_TOKENER_STRICT)) {"
    },
    {
        "line": 107,
        "fullcodeline": "if(tok->depth == 0) goto out;"
    },
    {
        "line": 117,
        "fullcodeline": "int is_negative = 0;"
    },
    {
        "line": 119,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, &c, 1);"
    },
    {
        "line": 120,
        "fullcodeline": "size = json_min(tok->st_pos+1, json_null_str_len);"
    },
    {
        "line": 121,
        "fullcodeline": "size_inf = json_min(tok->st_pos+1, json_inf_str_len);"
    },
    {
        "line": 122,
        "fullcodeline": "char *infbuf = tok->pb->buf;"
    },
    {
        "line": 144,
        "fullcodeline": "tok->st_pos++;"
    },
    {
        "line": 151,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, &c, 1);"
    },
    {
        "line": 152,
        "fullcodeline": "size = json_min(tok->st_pos+1, json_null_str_len);"
    },
    {
        "line": 153,
        "fullcodeline": "size_nan = json_min(tok->st_pos+1, json_nan_str_len);"
    },
    {
        "line": 181,
        "fullcodeline": "tok->st_pos++;"
    },
    {
        "line": 186,
        "fullcodeline": "if(c == '*') {"
    },
    {
        "line": 200,
        "fullcodeline": "const char *case_start = str;"
    },
    {
        "line": 207,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, case_start, 1+str-case_start);"
    },
    {
        "line": 208,
        "fullcodeline": "state = json_tokener_state_comment_end;"
    },
    {
        "line": 215,
        "fullcodeline": "const char *case_start = str;"
    },
    {
        "line": 222,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, case_start, str-case_start);"
    },
    {
        "line": 223,
        "fullcodeline": "MC_DEBUG(\"json_tokener_comment: %s\\n\", tok->pb->buf);"
    },
    {
        "line": 224,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 230,
        "fullcodeline": "if(c == '/') {"
    },
    {
        "line": 241,
        "fullcodeline": "const char *case_start = str;"
    },
    {
        "line": 296,
        "fullcodeline": "unsigned int got_hi_surrogate = 0;"
    },
    {
        "line": 397,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, &c, 1);"
    },
    {
        "line": 398,
        "fullcodeline": "size1 = json_min(tok->st_pos+1, json_true_str_len);"
    },
    {
        "line": 399,
        "fullcodeline": "size2 = json_min(tok->st_pos+1, json_false_str_len);"
    },
    {
        "line": 423,
        "fullcodeline": "tok->st_pos++;"
    },
    {
        "line": 430,
        "fullcodeline": "const char *case_start = str;"
    },
    {
        "line": 431,
        "fullcodeline": "int case_len=0;"
    },
    {
        "line": 470,
        "fullcodeline": "saved_state = json_tokener_state_finish;"
    },
    {
        "line": 471,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 478,
        "fullcodeline": "if(c == ']') {"
    },
    {
        "line": 506,
        "fullcodeline": "if(c == ']') {"
    },
    {
        "line": 520,
        "fullcodeline": "if(c == '}') {"
    },
    {
        "line": 542,
        "fullcodeline": "const char *case_start = str;"
    },
    {
        "line": 565,
        "fullcodeline": "if(c == ':') {"
    },
    {
        "line": 575,
        "fullcodeline": "if(tok->depth >= tok->max_depth-1) {"
    },
    {
        "line": 593,
        "fullcodeline": "if(c == '}') {"
    },
    {
        "line": 29,
        "fullcodeline": "printbuf_reset(tok->pb);"
    },
    {
        "line": 30,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, &c, 1);"
    },
    {
        "line": 31,
        "fullcodeline": "state = json_tokener_state_comment_start;"
    },
    {
        "line": 41,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 42,
        "fullcodeline": "saved_state = json_tokener_state_object_field_start;"
    },
    {
        "line": 43,
        "fullcodeline": "current = json_object_new_object();"
    },
    {
        "line": 46,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 47,
        "fullcodeline": "saved_state = json_tokener_state_array;"
    },
    {
        "line": 48,
        "fullcodeline": "current = json_object_new_array();"
    },
    {
        "line": 52,
        "fullcodeline": "state = json_tokener_state_inf;"
    },
    {
        "line": 53,
        "fullcodeline": "printbuf_reset(tok->pb);"
    },
    {
        "line": 54,
        "fullcodeline": "tok->st_pos = 0;"
    },
    {
        "line": 58,
        "fullcodeline": "state = json_tokener_state_null; // or NaN"
    },
    {
        "line": 59,
        "fullcodeline": "printbuf_reset(tok->pb);"
    },
    {
        "line": 60,
        "fullcodeline": "tok->st_pos = 0;"
    },
    {
        "line": 69,
        "fullcodeline": "state = json_tokener_state_string;"
    },
    {
        "line": 70,
        "fullcodeline": "printbuf_reset(tok->pb);"
    },
    {
        "line": 71,
        "fullcodeline": "tok->quote_char = c;"
    },
    {
        "line": 77,
        "fullcodeline": "state = json_tokener_state_boolean;"
    },
    {
        "line": 78,
        "fullcodeline": "printbuf_reset(tok->pb);"
    },
    {
        "line": 79,
        "fullcodeline": "tok->st_pos = 0;"
    },
    {
        "line": 96,
        "fullcodeline": "state = json_tokener_state_number;"
    },
    {
        "line": 97,
        "fullcodeline": "printbuf_reset(tok->pb);"
    },
    {
        "line": 98,
        "fullcodeline": "tok->is_double = 0;"
    },
    {
        "line": 101,
        "fullcodeline": "tok->err = json_tokener_error_parse_unexpected;"
    },
    {
        "line": 123,
        "fullcodeline": "if (*infbuf == '-')"
    },
    {
        "line": 128,
        "fullcodeline": "if ((!(tok->flags & JSON_TOKENER_STRICT) &&"
    },
    {
        "line": 154,
        "fullcodeline": "if((!(tok->flags & JSON_TOKENER_STRICT) &&"
    },
    {
        "line": 187,
        "fullcodeline": "state = json_tokener_state_comment;"
    },
    {
        "line": 201,
        "fullcodeline": "while(c != '*') {"
    },
    {
        "line": 216,
        "fullcodeline": "while(c != '\\n') {"
    },
    {
        "line": 231,
        "fullcodeline": "MC_DEBUG(\"json_tokener_comment: %s\\n\", tok->pb->buf);"
    },
    {
        "line": 232,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 268,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, &c, 1);"
    },
    {
        "line": 269,
        "fullcodeline": "state = saved_state;"
    },
    {
        "line": 281,
        "fullcodeline": "state = saved_state;"
    },
    {
        "line": 284,
        "fullcodeline": "tok->ucs_char = 0;"
    },
    {
        "line": 285,
        "fullcodeline": "tok->st_pos = 0;"
    },
    {
        "line": 286,
        "fullcodeline": "state = json_tokener_state_escape_unicode;"
    },
    {
        "line": 289,
        "fullcodeline": "tok->err = json_tokener_error_parse_string;"
    },
    {
        "line": 400,
        "fullcodeline": "if((!(tok->flags & JSON_TOKENER_STRICT) &&"
    },
    {
        "line": 432,
        "fullcodeline": "while(c && strchr(json_number_chars, c)) {"
    },
    {
        "line": 441,
        "fullcodeline": "if (case_len>0)"
    },
    {
        "line": 445,
        "fullcodeline": "if (tok->pb->buf[0] == '-' && case_len == 1 &&"
    },
    {
        "line": 455,
        "fullcodeline": "if (!tok->is_double && json_parse_int64(tok->pb->buf, &num64) == 0) {"
    },
    {
        "line": 485,
        "fullcodeline": "saved_state = json_tokener_state_finish;"
    },
    {
        "line": 486,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 507,
        "fullcodeline": "saved_state = json_tokener_state_finish;"
    },
    {
        "line": 508,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 527,
        "fullcodeline": "saved_state = json_tokener_state_finish;"
    },
    {
        "line": 528,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 566,
        "fullcodeline": "saved_state = json_tokener_state_object_value;"
    },
    {
        "line": 567,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 576,
        "fullcodeline": "tok->err = json_tokener_error_depth;"
    },
    {
        "line": 594,
        "fullcodeline": "saved_state = json_tokener_state_finish;"
    },
    {
        "line": 595,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 25,
        "fullcodeline": "if ((!ADVANCE_CHAR(str, tok)) || (!PEEK_CHAR(c, tok)))"
    },
    {
        "line": 33,
        "fullcodeline": "state = saved_state;"
    },
    {
        "line": 63,
        "fullcodeline": "if (tok->flags & JSON_TOKENER_STRICT) {"
    },
    {
        "line": 125,
        "fullcodeline": "infbuf++;"
    },
    {
        "line": 126,
        "fullcodeline": "is_negative = 1;"
    },
    {
        "line": 130,
        "fullcodeline": "(strncmp(json_inf_str, infbuf, size_inf) == 0)"
    },
    {
        "line": 156,
        "fullcodeline": "|| (strncmp(json_null_str, tok->pb->buf, size) == 0)"
    },
    {
        "line": 234,
        "fullcodeline": "state = json_tokener_state_comment;"
    },
    {
        "line": 276,
        "fullcodeline": "if(c == 'b') printbuf_memappend_fast(tok->pb, \"\\b\", 1);"
    },
    {
        "line": 402,
        "fullcodeline": "|| (strncmp(json_true_str, tok->pb->buf, size1) == 0)"
    },
    {
        "line": 433,
        "fullcodeline": "++case_len;"
    },
    {
        "line": 442,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, case_start, case_len);"
    },
    {
        "line": 446,
        "fullcodeline": "(c == 'i' || c == 'I'))"
    },
    {
        "line": 448,
        "fullcodeline": "state = json_tokener_state_inf;"
    },
    {
        "line": 461,
        "fullcodeline": "current = json_object_new_int64(num64);"
    },
    {
        "line": 479,
        "fullcodeline": "if (state == json_tokener_state_array_after_sep &&"
    },
    {
        "line": 492,
        "fullcodeline": "state = json_tokener_state_array_add;"
    },
    {
        "line": 493,
        "fullcodeline": "tok->depth++;"
    },
    {
        "line": 494,
        "fullcodeline": "json_tokener_reset_level(tok, tok->depth);"
    },
    {
        "line": 521,
        "fullcodeline": "if (state == json_tokener_state_object_field_start_after_sep &&"
    },
    {
        "line": 569,
        "fullcodeline": "tok->err = json_tokener_error_parse_object_key_sep;"
    },
    {
        "line": 65,
        "fullcodeline": "tok->err = json_tokener_error_parse_unexpected;"
    },
    {
        "line": 129,
        "fullcodeline": "strncasecmp(json_inf_str, infbuf, size_inf) == 0) ||"
    },
    {
        "line": 133,
        "fullcodeline": "if (tok->st_pos == json_inf_str_len)"
    },
    {
        "line": 141,
        "fullcodeline": "tok->err = json_tokener_error_parse_unexpected;"
    },
    {
        "line": 155,
        "fullcodeline": "strncasecmp(json_null_str, tok->pb->buf, size) == 0)"
    },
    {
        "line": 158,
        "fullcodeline": "if (tok->st_pos == json_null_str_len) {"
    },
    {
        "line": 188,
        "fullcodeline": "} else if(c == '/') {"
    },
    {
        "line": 202,
        "fullcodeline": "if (!ADVANCE_CHAR(str, tok) || !PEEK_CHAR(c, tok)) {"
    },
    {
        "line": 217,
        "fullcodeline": "if (!ADVANCE_CHAR(str, tok) || !PEEK_CHAR(c, tok)) {"
    },
    {
        "line": 243,
        "fullcodeline": "if(c == tok->quote_char) {"
    },
    {
        "line": 255,
        "fullcodeline": "if (!ADVANCE_CHAR(str, tok) || !PEEK_CHAR(c, tok)) {"
    },
    {
        "line": 300,
        "fullcodeline": "if(strchr(json_hex_chars, c)) {"
    },
    {
        "line": 385,
        "fullcodeline": "if (!ADVANCE_CHAR(str, tok) || !PEEK_CHAR(c, tok)) {"
    },
    {
        "line": 401,
        "fullcodeline": "strncasecmp(json_true_str, tok->pb->buf, size1) == 0)"
    },
    {
        "line": 404,
        "fullcodeline": "if(tok->st_pos == json_true_str_len) {"
    },
    {
        "line": 434,
        "fullcodeline": "if(c == '.' || c == 'e' || c == 'E')"
    },
    {
        "line": 436,
        "fullcodeline": "if (!ADVANCE_CHAR(str, tok) || !PEEK_CHAR(c, tok)) {"
    },
    {
        "line": 456,
        "fullcodeline": "if (num64 && tok->pb->buf[0]=='0' && (tok->flags & JSON_TOKENER_STRICT)) {"
    },
    {
        "line": 480,
        "fullcodeline": "(tok->flags & JSON_TOKENER_STRICT))"
    },
    {
        "line": 482,
        "fullcodeline": "tok->err = json_tokener_error_parse_unexpected;"
    },
    {
        "line": 488,
        "fullcodeline": "if(tok->depth >= tok->max_depth-1) {"
    },
    {
        "line": 509,
        "fullcodeline": "} else if(c == ',') {"
    },
    {
        "line": 522,
        "fullcodeline": "(tok->flags & JSON_TOKENER_STRICT))"
    },
    {
        "line": 524,
        "fullcodeline": "tok->err = json_tokener_error_parse_unexpected;"
    },
    {
        "line": 529,
        "fullcodeline": "} else if (c == '\"' || c == '\\'') {"
    },
    {
        "line": 544,
        "fullcodeline": "if(c == tok->quote_char) {"
    },
    {
        "line": 556,
        "fullcodeline": "if (!ADVANCE_CHAR(str, tok) || !PEEK_CHAR(c, tok)) {"
    },
    {
        "line": 596,
        "fullcodeline": "} else if(c == ',') {"
    },
    {
        "line": 135,
        "fullcodeline": "current = json_object_new_double(is_negative ? -INFINITY : INFINITY);"
    },
    {
        "line": 136,
        "fullcodeline": "saved_state = json_tokener_state_finish;"
    },
    {
        "line": 137,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 159,
        "fullcodeline": "current = NULL;"
    },
    {
        "line": 160,
        "fullcodeline": "saved_state = json_tokener_state_finish;"
    },
    {
        "line": 161,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 165,
        "fullcodeline": "else if ((!(tok->flags & JSON_TOKENER_STRICT) &&"
    },
    {
        "line": 189,
        "fullcodeline": "state = json_tokener_state_comment_eol;"
    },
    {
        "line": 203,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, case_start, str-case_start);"
    },
    {
        "line": 218,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, case_start, str-case_start);"
    },
    {
        "line": 244,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, case_start, str-case_start);"
    },
    {
        "line": 245,
        "fullcodeline": "current = json_object_new_string_len(tok->pb->buf, tok->pb->bpos);"
    },
    {
        "line": 246,
        "fullcodeline": "saved_state = json_tokener_state_finish;"
    },
    {
        "line": 247,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 256,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, case_start, str-case_start);"
    },
    {
        "line": 301,
        "fullcodeline": "tok->ucs_char += ((unsigned int)hexdigit(c) << ((3-tok->st_pos++)*4));"
    },
    {
        "line": 405,
        "fullcodeline": "current = json_object_new_boolean(1);"
    },
    {
        "line": 406,
        "fullcodeline": "saved_state = json_tokener_state_finish;"
    },
    {
        "line": 407,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 410,
        "fullcodeline": "} else if((!(tok->flags & JSON_TOKENER_STRICT) &&"
    },
    {
        "line": 435,
        "fullcodeline": "tok->is_double = 1;"
    },
    {
        "line": 437,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, case_start, case_len);"
    },
    {
        "line": 458,
        "fullcodeline": "tok->err = json_tokener_error_parse_number;"
    },
    {
        "line": 463,
        "fullcodeline": "else if(tok->is_double && json_parse_double(tok->pb->buf, &numd) == 0)"
    },
    {
        "line": 489,
        "fullcodeline": "tok->err = json_tokener_error_depth;"
    },
    {
        "line": 510,
        "fullcodeline": "saved_state = json_tokener_state_array_after_sep;"
    },
    {
        "line": 511,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 530,
        "fullcodeline": "tok->quote_char = c;"
    },
    {
        "line": 531,
        "fullcodeline": "printbuf_reset(tok->pb);"
    },
    {
        "line": 532,
        "fullcodeline": "state = json_tokener_state_object_field;"
    },
    {
        "line": 545,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, case_start, str-case_start);"
    },
    {
        "line": 546,
        "fullcodeline": "obj_field_name = strdup(tok->pb->buf);"
    },
    {
        "line": 547,
        "fullcodeline": "saved_state = json_tokener_state_object_field_end;"
    },
    {
        "line": 548,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 557,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, case_start, str-case_start);"
    },
    {
        "line": 597,
        "fullcodeline": "saved_state = json_tokener_state_object_field_start_after_sep;"
    },
    {
        "line": 598,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 167,
        "fullcodeline": "(strncmp(json_nan_str, tok->pb->buf, size_nan) == 0)"
    },
    {
        "line": 191,
        "fullcodeline": "tok->err = json_tokener_error_parse_comment;"
    },
    {
        "line": 277,
        "fullcodeline": "else if(c == 'n') printbuf_memappend_fast(tok->pb, \"\\n\", 1);"
    },
    {
        "line": 302,
        "fullcodeline": "if(tok->st_pos == 4) {"
    },
    {
        "line": 382,
        "fullcodeline": "tok->err = json_tokener_error_parse_string;"
    },
    {
        "line": 412,
        "fullcodeline": "|| (strncmp(json_false_str, tok->pb->buf, size2) == 0)) {"
    },
    {
        "line": 465,
        "fullcodeline": "current = json_object_new_double_s(numd, tok->pb->buf);"
    },
    {
        "line": 513,
        "fullcodeline": "tok->err = json_tokener_error_parse_array;"
    },
    {
        "line": 534,
        "fullcodeline": "tok->err = json_tokener_error_parse_object_key_name;"
    },
    {
        "line": 600,
        "fullcodeline": "tok->err = json_tokener_error_parse_object_value_sep;"
    },
    {
        "line": 166,
        "fullcodeline": "strncasecmp(json_nan_str, tok->pb->buf, size_nan) == 0) ||"
    },
    {
        "line": 170,
        "fullcodeline": "if (tok->st_pos == json_nan_str_len)"
    },
    {
        "line": 178,
        "fullcodeline": "tok->err = json_tokener_error_parse_null;"
    },
    {
        "line": 249,
        "fullcodeline": "} else if(c == '\\\\') {"
    },
    {
        "line": 303,
        "fullcodeline": "unsigned char unescaped_utf[4];"
    },
    {
        "line": 378,
        "fullcodeline": "state = saved_state;"
    },
    {
        "line": 387,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, (char*)utf8_replacement_char, 3);"
    },
    {
        "line": 411,
        "fullcodeline": "strncasecmp(json_false_str, tok->pb->buf, size2) == 0)"
    },
    {
        "line": 413,
        "fullcodeline": "if(tok->st_pos == json_false_str_len) {"
    },
    {
        "line": 420,
        "fullcodeline": "tok->err = json_tokener_error_parse_boolean;"
    },
    {
        "line": 467,
        "fullcodeline": "tok->err = json_tokener_error_parse_number;"
    },
    {
        "line": 550,
        "fullcodeline": "} else if(c == '\\\\') {"
    },
    {
        "line": 172,
        "fullcodeline": "current = json_object_new_double(NAN);"
    },
    {
        "line": 173,
        "fullcodeline": "saved_state = json_tokener_state_finish;"
    },
    {
        "line": 174,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 250,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, case_start, str-case_start);"
    },
    {
        "line": 251,
        "fullcodeline": "saved_state = json_tokener_state_string;"
    },
    {
        "line": 252,
        "fullcodeline": "state = json_tokener_state_string_escape;"
    },
    {
        "line": 317,
        "fullcodeline": "if (tok->ucs_char < 0x80) {"
    },
    {
        "line": 414,
        "fullcodeline": "current = json_object_new_boolean(0);"
    },
    {
        "line": 415,
        "fullcodeline": "saved_state = json_tokener_state_finish;"
    },
    {
        "line": 416,
        "fullcodeline": "state = json_tokener_state_eatws;"
    },
    {
        "line": 551,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, case_start, str-case_start);"
    },
    {
        "line": 552,
        "fullcodeline": "saved_state = json_tokener_state_object_field;"
    },
    {
        "line": 553,
        "fullcodeline": "state = json_tokener_state_string_escape;"
    },
    {
        "line": 278,
        "fullcodeline": "else if(c == 'r') printbuf_memappend_fast(tok->pb, \"\\r\", 1);"
    },
    {
        "line": 314,
        "fullcodeline": "got_hi_surrogate = 0;"
    },
    {
        "line": 318,
        "fullcodeline": "unescaped_utf[0] = tok->ucs_char;"
    },
    {
        "line": 319,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, (char*)unescaped_utf, 1);"
    },
    {
        "line": 306,
        "fullcodeline": "if (IS_LOW_SURROGATE(tok->ucs_char)) {"
    },
    {
        "line": 308,
        "fullcodeline": "tok->ucs_char = DECODE_SURROGATE_PAIR(got_hi_surrogate, tok->ucs_char);"
    },
    {
        "line": 320,
        "fullcodeline": "} else if (tok->ucs_char < 0x800) {"
    },
    {
        "line": 279,
        "fullcodeline": "else if(c == 't') printbuf_memappend_fast(tok->pb, \"\\t\", 1);"
    },
    {
        "line": 312,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, (char*)utf8_replacement_char, 3);"
    },
    {
        "line": 321,
        "fullcodeline": "unescaped_utf[0] = 0xc0 | (tok->ucs_char >> 6);"
    },
    {
        "line": 322,
        "fullcodeline": "unescaped_utf[1] = 0x80 | (tok->ucs_char & 0x3f);"
    },
    {
        "line": 323,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, (char*)unescaped_utf, 2);"
    },
    {
        "line": 324,
        "fullcodeline": "} else if (IS_HIGH_SURROGATE(tok->ucs_char)) {"
    },
    {
        "line": 280,
        "fullcodeline": "else if(c == 'f') printbuf_memappend_fast(tok->pb, \"\\f\", 1);"
    },
    {
        "line": 329,
        "fullcodeline": "got_hi_surrogate = tok->ucs_char;"
    },
    {
        "line": 331,
        "fullcodeline": "if ((tok->char_offset+1 != len) &&"
    },
    {
        "line": 334,
        "fullcodeline": "(str[2] == 'u'))"
    },
    {
        "line": 350,
        "fullcodeline": "tok->ucs_char = 0;"
    },
    {
        "line": 351,
        "fullcodeline": "tok->st_pos = 0;"
    },
    {
        "line": 360,
        "fullcodeline": "} else if (IS_LOW_SURROGATE(tok->ucs_char)) {"
    },
    {
        "line": 333,
        "fullcodeline": "(str[1] == '\\\\') &&"
    },
    {
        "line": 340,
        "fullcodeline": "if( !ADVANCE_CHAR(str, tok) || !ADVANCE_CHAR(str, tok) ) {"
    },
    {
        "line": 346,
        "fullcodeline": "if (!ADVANCE_CHAR(str, tok) || !PEEK_CHAR(c, tok)) {"
    },
    {
        "line": 358,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, (char*)utf8_replacement_char, 3);"
    },
    {
        "line": 362,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, (char*)utf8_replacement_char, 3);"
    },
    {
        "line": 332,
        "fullcodeline": "(tok->char_offset+2 != len) &&"
    },
    {
        "line": 341,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, (char*)utf8_replacement_char, 3);"
    },
    {
        "line": 347,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, (char*)utf8_replacement_char, 3);"
    },
    {
        "line": 363,
        "fullcodeline": "} else if (tok->ucs_char < 0x10000) {"
    },
    {
        "line": 364,
        "fullcodeline": "unescaped_utf[0] = 0xe0 | (tok->ucs_char >> 12);"
    },
    {
        "line": 365,
        "fullcodeline": "unescaped_utf[1] = 0x80 | ((tok->ucs_char >> 6) & 0x3f);"
    },
    {
        "line": 366,
        "fullcodeline": "unescaped_utf[2] = 0x80 | (tok->ucs_char & 0x3f);"
    },
    {
        "line": 367,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, (char*)unescaped_utf, 3);"
    },
    {
        "line": 368,
        "fullcodeline": "} else if (tok->ucs_char < 0x110000) {"
    },
    {
        "line": 369,
        "fullcodeline": "unescaped_utf[0] = 0xf0 | ((tok->ucs_char >> 18) & 0x07);"
    },
    {
        "line": 370,
        "fullcodeline": "unescaped_utf[1] = 0x80 | ((tok->ucs_char >> 12) & 0x3f);"
    },
    {
        "line": 371,
        "fullcodeline": "unescaped_utf[2] = 0x80 | ((tok->ucs_char >> 6) & 0x3f);"
    },
    {
        "line": 372,
        "fullcodeline": "unescaped_utf[3] = 0x80 | (tok->ucs_char & 0x3f);"
    },
    {
        "line": 373,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, (char*)unescaped_utf, 4);"
    },
    {
        "line": 376,
        "fullcodeline": "printbuf_memappend_fast(tok->pb, (char*)utf8_replacement_char, 3);"
    }
]