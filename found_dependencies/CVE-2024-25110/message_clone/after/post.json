[
    {
        "line": 5,
        "fullcodeline": "if (source_message == NULL)"
    },
    {
        "line": 8,
        "fullcodeline": "LogError(\"NULL source_message\");"
    },
    {
        "line": 9,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "result = (MESSAGE_HANDLE)message_create();"
    },
    {
        "line": 15,
        "fullcodeline": "if (result == NULL)"
    },
    {
        "line": 18,
        "fullcodeline": "LogError(\"Cannot clone message\");"
    },
    {
        "line": 22,
        "fullcodeline": "result->message_format = source_message->message_format;"
    },
    {
        "line": 24,
        "fullcodeline": "if (source_message->header != NULL)"
    },
    {
        "line": 37,
        "fullcodeline": "if ((result != NULL) && (source_message->delivery_annotations != NULL))"
    },
    {
        "line": 50,
        "fullcodeline": "if ((result != NULL) && (source_message->message_annotations != NULL))"
    },
    {
        "line": 63,
        "fullcodeline": "if ((result != NULL) && (source_message->properties != NULL))"
    },
    {
        "line": 76,
        "fullcodeline": "if ((result != NULL) && (source_message->application_properties != NULL))"
    },
    {
        "line": 89,
        "fullcodeline": "if ((result != NULL) && (source_message->footer != NULL))"
    },
    {
        "line": 102,
        "fullcodeline": "if ((result != NULL) && (source_message->body_amqp_data_count > 0))"
    },
    {
        "line": 154,
        "fullcodeline": "if ((result != NULL) && (source_message->body_amqp_sequence_count > 0))"
    },
    {
        "line": 200,
        "fullcodeline": "if ((result != NULL) && (source_message->body_amqp_value != NULL))"
    },
    {
        "line": 27,
        "fullcodeline": "result->header = header_clone(source_message->header);"
    },
    {
        "line": 40,
        "fullcodeline": "result->delivery_annotations = annotations_clone(source_message->delivery_annotations);"
    },
    {
        "line": 53,
        "fullcodeline": "result->message_annotations = annotations_clone(source_message->message_annotations);"
    },
    {
        "line": 66,
        "fullcodeline": "result->properties = properties_clone(source_message->properties);"
    },
    {
        "line": 79,
        "fullcodeline": "result->application_properties = amqpvalue_clone(source_message->application_properties);"
    },
    {
        "line": 92,
        "fullcodeline": "result->footer = amqpvalue_clone(source_message->footer);"
    },
    {
        "line": 104,
        "fullcodeline": "size_t calloc_size = safe_multiply_size_t(source_message->body_amqp_data_count, sizeof(BODY_AMQP_DATA));"
    },
    {
        "line": 156,
        "fullcodeline": "size_t calloc_size = safe_multiply_size_t(source_message->body_amqp_sequence_count, sizeof(AMQP_VALUE));"
    },
    {
        "line": 203,
        "fullcodeline": "result->body_amqp_value = amqpvalue_clone(source_message->body_amqp_value);"
    },
    {
        "line": 28,
        "fullcodeline": "if (result->header == NULL)"
    },
    {
        "line": 41,
        "fullcodeline": "if (result->delivery_annotations == NULL)"
    },
    {
        "line": 54,
        "fullcodeline": "if (result->message_annotations == NULL)"
    },
    {
        "line": 67,
        "fullcodeline": "if (result->properties == NULL)"
    },
    {
        "line": 80,
        "fullcodeline": "if (result->application_properties == NULL)"
    },
    {
        "line": 93,
        "fullcodeline": "if (result->footer == NULL)"
    },
    {
        "line": 106,
        "fullcodeline": "if (calloc_size == SIZE_MAX)"
    },
    {
        "line": 158,
        "fullcodeline": "if (calloc_size == SIZE_MAX)"
    },
    {
        "line": 204,
        "fullcodeline": "if (result->body_amqp_value == NULL)"
    },
    {
        "line": 31,
        "fullcodeline": "LogError(\"Cannot clone message header\");"
    },
    {
        "line": 32,
        "fullcodeline": "message_destroy(result);"
    },
    {
        "line": 33,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 44,
        "fullcodeline": "LogError(\"Cannot clone delivery annotations\");"
    },
    {
        "line": 45,
        "fullcodeline": "message_destroy(result);"
    },
    {
        "line": 46,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 57,
        "fullcodeline": "LogError(\"Cannot clone message annotations\");"
    },
    {
        "line": 58,
        "fullcodeline": "message_destroy(result);"
    },
    {
        "line": 59,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 70,
        "fullcodeline": "LogError(\"Cannot clone message properties\");"
    },
    {
        "line": 71,
        "fullcodeline": "message_destroy(result);"
    },
    {
        "line": 72,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 83,
        "fullcodeline": "LogError(\"Cannot clone application annotations\");"
    },
    {
        "line": 84,
        "fullcodeline": "message_destroy(result);"
    },
    {
        "line": 85,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 96,
        "fullcodeline": "LogError(\"Cannot clone message footer\");"
    },
    {
        "line": 97,
        "fullcodeline": "message_destroy(result);"
    },
    {
        "line": 98,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 108,
        "fullcodeline": "LogError(\"Invalid size for body_amqp_data_items\");"
    },
    {
        "line": 109,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 160,
        "fullcodeline": "LogError(\"Invalid size for body_amqp_sequence_items\");"
    },
    {
        "line": 161,
        "fullcodeline": "message_destroy(result);"
    },
    {
        "line": 162,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 207,
        "fullcodeline": "LogError(\"Cannot clone body AMQP value\");"
    },
    {
        "line": 208,
        "fullcodeline": "message_destroy(result);"
    },
    {
        "line": 209,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 113,
        "fullcodeline": "result->body_amqp_data_items = (BODY_AMQP_DATA*)calloc(1, calloc_size);"
    },
    {
        "line": 166,
        "fullcodeline": "result->body_amqp_sequence_items = (AMQP_VALUE*)calloc(1, calloc_size);"
    },
    {
        "line": 115,
        "fullcodeline": "if (result->body_amqp_data_items == NULL)"
    },
    {
        "line": 167,
        "fullcodeline": "if (result->body_amqp_sequence_items == NULL)"
    },
    {
        "line": 118,
        "fullcodeline": "LogError(\"Cannot allocate memory for body data sections\");"
    },
    {
        "line": 119,
        "fullcodeline": "message_destroy(result);"
    },
    {
        "line": 120,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 170,
        "fullcodeline": "LogError(\"Cannot allocate memory for body AMQP sequences\");"
    },
    {
        "line": 171,
        "fullcodeline": "message_destroy(result);"
    },
    {
        "line": 172,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 143,
        "fullcodeline": "result->body_amqp_data_count = i;"
    },
    {
        "line": 189,
        "fullcodeline": "result->body_amqp_sequence_count = i;"
    },
    {
        "line": 126,
        "fullcodeline": "for (i = 0; i < source_message->body_amqp_data_count; i++)"
    },
    {
        "line": 144,
        "fullcodeline": "if (i < source_message->body_amqp_data_count)"
    },
    {
        "line": 178,
        "fullcodeline": "for (i = 0; i < source_message->body_amqp_sequence_count; i++)"
    },
    {
        "line": 190,
        "fullcodeline": "if (i < source_message->body_amqp_sequence_count)"
    },
    {
        "line": 131,
        "fullcodeline": "result->body_amqp_data_items[i].body_data_section_bytes = (unsigned char*)malloc(source_message->body_amqp_data_items[i].body_data_section_length);"
    },
    {
        "line": 147,
        "fullcodeline": "message_destroy(result);"
    },
    {
        "line": 148,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 181,
        "fullcodeline": "result->body_amqp_sequence_items[i] = amqpvalue_clone(source_message->body_amqp_sequence_items[i]);"
    },
    {
        "line": 193,
        "fullcodeline": "message_destroy(result);"
    },
    {
        "line": 194,
        "fullcodeline": "result = NULL;"
    },
    {
        "line": 132,
        "fullcodeline": "if (result->body_amqp_data_items[i].body_data_section_bytes == NULL)"
    },
    {
        "line": 182,
        "fullcodeline": "if (result->body_amqp_sequence_items[i] == NULL)"
    },
    {
        "line": 134,
        "fullcodeline": "LogError(\"Cannot allocate memory for body data section %u\", (unsigned int)i);"
    },
    {
        "line": 184,
        "fullcodeline": "LogError(\"Cannot clone AMQP sequence %u\", (unsigned int)i);"
    },
    {
        "line": 139,
        "fullcodeline": "(void)memcpy(result->body_amqp_data_items[i].body_data_section_bytes, source_message->body_amqp_data_items[i].body_data_section_bytes, result->body_amqp_data_items[i].body_data_section_length);"
    }
]