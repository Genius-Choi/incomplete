[
    {
        "line": 6,
        "fullcodeline": "if ((message == NULL) ||"
    },
    {
        "line": 8,
        "fullcodeline": "((amqp_data.bytes == NULL) &&"
    },
    {
        "line": 11,
        "fullcodeline": "LogError(\"Bad arguments: message = %p, bytes = %p, length = %u\","
    },
    {
        "line": 13,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 9,
        "fullcodeline": "(amqp_data.length != 0)))"
    },
    {
        "line": 12,
        "fullcodeline": "message, amqp_data.bytes, (unsigned int)amqp_data.length);"
    },
    {
        "line": 17,
        "fullcodeline": "MESSAGE_BODY_TYPE body_type = internal_get_body_type(message);"
    },
    {
        "line": 18,
        "fullcodeline": "if ((body_type == MESSAGE_BODY_TYPE_SEQUENCE) ||"
    },
    {
        "line": 19,
        "fullcodeline": "(body_type == MESSAGE_BODY_TYPE_VALUE))"
    },
    {
        "line": 22,
        "fullcodeline": "LogError(\"Body type already set\");"
    },
    {
        "line": 23,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 28,
        "fullcodeline": "BODY_AMQP_DATA* new_body_amqp_data_items = (BODY_AMQP_DATA*)realloc(message->body_amqp_data_items, sizeof(BODY_AMQP_DATA) * (message->body_amqp_data_count + 1));"
    },
    {
        "line": 29,
        "fullcodeline": "if (new_body_amqp_data_items == NULL)"
    },
    {
        "line": 32,
        "fullcodeline": "LogError(\"Cannot allocate memory for body AMQP data items\");"
    },
    {
        "line": 33,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 37,
        "fullcodeline": "message->body_amqp_data_items = new_body_amqp_data_items;"
    },
    {
        "line": 39,
        "fullcodeline": "if (amqp_data.length == 0)"
    },
    {
        "line": 41,
        "fullcodeline": "message->body_amqp_data_items[message->body_amqp_data_count].body_data_section_bytes = NULL;"
    },
    {
        "line": 42,
        "fullcodeline": "message->body_amqp_data_items[message->body_amqp_data_count].body_data_section_length = 0;"
    },
    {
        "line": 43,
        "fullcodeline": "message->body_amqp_data_count++;"
    },
    {
        "line": 46,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 50,
        "fullcodeline": "message->body_amqp_data_items[message->body_amqp_data_count].body_data_section_bytes = (unsigned char*)malloc(amqp_data.length);"
    },
    {
        "line": 51,
        "fullcodeline": "if (message->body_amqp_data_items[message->body_amqp_data_count].body_data_section_bytes == NULL)"
    },
    {
        "line": 54,
        "fullcodeline": "LogError(\"Cannot allocate memory for body AMQP data to be added\");"
    },
    {
        "line": 55,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 59,
        "fullcodeline": "message->body_amqp_data_items[message->body_amqp_data_count].body_data_section_length = amqp_data.length;"
    },
    {
        "line": 60,
        "fullcodeline": "(void)memcpy(message->body_amqp_data_items[message->body_amqp_data_count].body_data_section_bytes, amqp_data.bytes, amqp_data.length);"
    },
    {
        "line": 61,
        "fullcodeline": "message->body_amqp_data_count++;"
    },
    {
        "line": 64,
        "fullcodeline": "result = 0;"
    }
]