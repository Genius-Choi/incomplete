[
    {
        "line": 3,
        "fullcodeline": "dsc_populate_files_vector();"
    },
    {
        "line": 4,
        "fullcodeline": "int file_counter=file_vector_.size();"
    },
    {
        "line": 5,
        "fullcodeline": "int file_failures = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "int file_commit_status = 0;  // status of transaction commit"
    },
    {
        "line": 7,
        "fullcodeline": "int data_process_status = 0; // status of data processing"
    },
    {
        "line": 9,
        "fullcodeline": "string node = bfs::initial_path().filename().generic_string();"
    },
    {
        "line": 10,
        "fullcodeline": "string server = bfs::initial_path().parent_path().filename().generic_string();"
    },
    {
        "line": 12,
        "fullcodeline": "replace(node.begin(), node.end(), '\\'', '_');"
    },
    {
        "line": 13,
        "fullcodeline": "replace(server.begin(), server.end(), '\\'', '_');"
    },
    {
        "line": 15,
        "fullcodeline": "replace(server.begin(), server.end(), '-', '_');"
    },
    {
        "line": 16,
        "fullcodeline": "replace_string(server, \".\", \"__\");"
    },
    {
        "line": 17,
        "fullcodeline": "transform(server.begin(), server.end(), server.begin(), ::tolower);"
    },
    {
        "line": 19,
        "fullcodeline": "cout << \"*** Processing server: \" << server << endl;"
    },
    {
        "line": 20,
        "fullcodeline": "cout << \"*** Processing node:   \" << node << endl;"
    },
    {
        "line": 21,
        "fullcodeline": "cout << \"*** Found:             \" << file_counter << \" \" <<  file_extension_ << \" files to process.\" << endl;"
    },
    {
        "line": 157,
        "fullcodeline": "file_vector_.clear();"
    },
    {
        "line": 160,
        "fullcodeline": "cout << endl;"
    },
    {
        "line": 23,
        "fullcodeline": "for (std::vector<bfs::path>::const_iterator file_vector_it (file_vector_.begin()); file_vector_it != file_vector_.end(); ++file_vector_it) {"
    },
    {
        "line": 31,
        "fullcodeline": "cout << endl << currentDateTime() << \": Starting:  \" << (*file_vector_it).string() << endl;"
    },
    {
        "line": 32,
        "fullcodeline": "DSCDataManager* dsc_data_manager = new DSCDataManager(server, node, pg_db_trans_);"
    },
    {
        "line": 33,
        "fullcodeline": "file_commit_status = 0;"
    },
    {
        "line": 139,
        "fullcodeline": "delete dsc_data_manager;"
    },
    {
        "line": 150,
        "fullcodeline": "file_counter--;"
    },
    {
        "line": 151,
        "fullcodeline": "cout << currentDateTime() << \": Completed: \" << setw(50) << left << (*file_vector_it).string() << \"\\t\" << file_counter << \" remaining (\" << file_failures << \" failures).\"<< endl;"
    },
    {
        "line": 24,
        "fullcodeline": "if ( pg_db_conn_ != NULL ) {"
    },
    {
        "line": 120,
        "fullcodeline": "if ( pg_db_trans_ != NULL ) {"
    },
    {
        "line": 142,
        "fullcodeline": "if (file_commit_status == 0 && data_process_status == 0 ) {"
    },
    {
        "line": 25,
        "fullcodeline": "pg_db_trans_ = new pqxx::work( *pg_db_conn_ );"
    },
    {
        "line": 116,
        "fullcodeline": "cerr << \"Error: Unknown input source\" << endl;"
    },
    {
        "line": 117,
        "fullcodeline": "exit(1);"
    },
    {
        "line": 135,
        "fullcodeline": "delete pg_db_trans_;"
    },
    {
        "line": 136,
        "fullcodeline": "pg_db_trans_ = NULL;"
    },
    {
        "line": 143,
        "fullcodeline": "dsc_move_file_to_done((*file_vector_it));"
    },
    {
        "line": 26,
        "fullcodeline": "if ( pg_db_trans_ == NULL ) {"
    },
    {
        "line": 41,
        "fullcodeline": "dsc_xml_ = new boost::property_tree::ptree();"
    },
    {
        "line": 69,
        "fullcodeline": "BOOST_FOREACH(boost::property_tree::ptree::value_type &array_element, dsc_xml_->get_child(\"dscdata\")) {"
    },
    {
        "line": 75,
        "fullcodeline": "delete dsc_xml_;"
    },
    {
        "line": 83,
        "fullcodeline": "string name = (*file_vector_it).filename().string();"
    },
    {
        "line": 84,
        "fullcodeline": "std::vector<DSCStrategy*> strategies_vector = DSCStrategyFactory::createStrategyDat(server, name);"
    },
    {
        "line": 93,
        "fullcodeline": "strategy_it = strategies_vector.begin();"
    },
    {
        "line": 94,
        "fullcodeline": "multi = (*strategy_it)->is_dat_file_multi_unit();"
    },
    {
        "line": 121,
        "fullcodeline": "if ( data_process_status == 0 ) {"
    },
    {
        "line": 145,
        "fullcodeline": "dsc_handle_failed_file((*file_vector_it), data_process_status);"
    },
    {
        "line": 146,
        "fullcodeline": "file_failures++;"
    },
    {
        "line": 27,
        "fullcodeline": "cerr << \"Error starting transaction.\" << endl;"
    },
    {
        "line": 28,
        "fullcodeline": "exit(1);"
    },
    {
        "line": 70,
        "fullcodeline": "data_process_status = dsc_data_manager->load(array_element, rssac_);"
    },
    {
        "line": 72,
        "fullcodeline": "data_process_status = dsc_data_manager->process();"
    },
    {
        "line": 87,
        "fullcodeline": "if (strategies_vector.size() != 1 ) {"
    },
    {
        "line": 44,
        "fullcodeline": "boost::property_tree::read_xml((*file_vector_it).string(), *dsc_xml_);"
    },
    {
        "line": 88,
        "fullcodeline": "cerr << \"Error: Failed to find a single strategy for loading dat file \" << (*file_vector_it).string() << \" (found: \" << strategies_vector.size() << \")\" << endl;"
    },
    {
        "line": 100,
        "fullcodeline": "dat_file.open((*file_vector_it), ios_base::in);"
    },
    {
        "line": 58,
        "fullcodeline": "cerr << \"Exception reading XML file: \" << e.what() << endl;"
    },
    {
        "line": 59,
        "fullcodeline": "data_process_status = 1;"
    },
    {
        "line": 64,
        "fullcodeline": "cerr << \"Unknown exception caught\" << endl;"
    },
    {
        "line": 65,
        "fullcodeline": "data_process_status = 1;"
    },
    {
        "line": 101,
        "fullcodeline": "while (getline(dat_file, dat_line)) {"
    },
    {
        "line": 108,
        "fullcodeline": "dsc_data_manager->load((*file_vector_it), strategy_it);"
    },
    {
        "line": 109,
        "fullcodeline": "data_process_status = dsc_data_manager->process(strategy_it);"
    },
    {
        "line": 123,
        "fullcodeline": "pg_db_trans_->commit();"
    },
    {
        "line": 48,
        "fullcodeline": "dsc_xml_->get_child(\"dscdata\");"
    },
    {
        "line": 103,
        "fullcodeline": "data_process_status = dsc_data_manager->process(strategy_it);"
    },
    {
        "line": 126,
        "fullcodeline": "cerr << \"Commit failed with exception message: \" << e.what() << endl;"
    },
    {
        "line": 127,
        "fullcodeline": "file_commit_status = 1;"
    },
    {
        "line": 130,
        "fullcodeline": "cerr << \"Commit failed with general error\" << endl;"
    },
    {
        "line": 131,
        "fullcodeline": "file_commit_status = 1;"
    },
    {
        "line": 51,
        "fullcodeline": "cerr << \"Error: XML file has no content: \" << e.what() << endl;"
    },
    {
        "line": 52,
        "fullcodeline": "data_process_status = 1;"
    },
    {
        "line": 102,
        "fullcodeline": "if ( dsc_data_manager->load(dat_line, strategy_it) !=0 ) continue;"
    }
]