[
    {
        "line": 6,
        "fullcodeline": "infra->host_ttl = cfg->host_ttl;"
    },
    {
        "line": 7,
        "fullcodeline": "infra->infra_keep_probing = cfg->infra_keep_probing;"
    },
    {
        "line": 8,
        "fullcodeline": "infra_dp_ratelimit = cfg->ratelimit;"
    },
    {
        "line": 9,
        "fullcodeline": "infra_ip_ratelimit = cfg->ip_ratelimit;"
    },
    {
        "line": 10,
        "fullcodeline": "maxmem = cfg->infra_cache_numhosts * (sizeof(struct infra_key)+"
    },
    {
        "line": 4,
        "fullcodeline": "if(!infra)"
    },
    {
        "line": 15,
        "fullcodeline": "if(!slabhash_is_size(infra->hosts, maxmem, cfg->infra_cache_slabs) ||"
    },
    {
        "line": 18,
        "fullcodeline": "!slabhash_is_size(infra->client_ip_rates, cfg->ip_ratelimit_size,"
    },
    {
        "line": 20,
        "fullcodeline": "infra_delete(infra);"
    },
    {
        "line": 21,
        "fullcodeline": "infra = infra_create(cfg);"
    },
    {
        "line": 5,
        "fullcodeline": "return infra_create(cfg);"
    },
    {
        "line": 16,
        "fullcodeline": "!slabhash_is_size(infra->domain_rates, cfg->ratelimit_size,"
    },
    {
        "line": 24,
        "fullcodeline": "traverse_postorder(&infra->domain_limits, domain_limit_free,"
    },
    {
        "line": 26,
        "fullcodeline": "if(!setup_domain_limits(infra, cfg)) {"
    },
    {
        "line": 27,
        "fullcodeline": "infra_delete(infra);"
    }
]