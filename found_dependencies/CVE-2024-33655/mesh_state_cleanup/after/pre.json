[
    {
        "line": 7,
        "fullcodeline": "mesh = mstate->s.env->mesh;"
    },
    {
        "line": 5,
        "fullcodeline": "if(!mstate)"
    },
    {
        "line": 9,
        "fullcodeline": "if(mstate->s.serve_expired_data && mstate->s.serve_expired_data->timer) {"
    },
    {
        "line": 39,
        "fullcodeline": "for(i=0; i<mesh->mods.num; i++) {"
    },
    {
        "line": 15,
        "fullcodeline": "struct mesh_reply* rep = mstate->reply_list;"
    },
    {
        "line": 41,
        "fullcodeline": "(*mesh->mods.mod[i]->clear)(&mstate->s, i);"
    },
    {
        "line": 43,
        "fullcodeline": "mstate->s.ext_state[i] = module_finished;"
    },
    {
        "line": 21,
        "fullcodeline": "for(; rep; rep=rep->next) {"
    },
    {
        "line": 28,
        "fullcodeline": "while((cb = mstate->cb_list)!=NULL) {"
    },
    {
        "line": 40,
        "fullcodeline": "fptr_ok(fptr_whitelist_mod_clear(mesh->mods.mod[i]->clear));"
    },
    {
        "line": 22,
        "fullcodeline": "infra_wait_limit_dec(mesh->env->infra_cache,"
    },
    {
        "line": 24,
        "fullcodeline": "comm_point_drop_reply(&rep->query_reply);"
    },
    {
        "line": 26,
        "fullcodeline": "mesh->num_reply_addrs--;"
    },
    {
        "line": 29,
        "fullcodeline": "mstate->cb_list = cb->next;"
    },
    {
        "line": 31,
        "fullcodeline": "(*cb->cb)(cb->cb_arg, LDNS_RCODE_SERVFAIL, NULL,"
    },
    {
        "line": 34,
        "fullcodeline": "mesh->num_reply_addrs--;"
    },
    {
        "line": 25,
        "fullcodeline": "log_assert(mesh->num_reply_addrs > 0);"
    },
    {
        "line": 30,
        "fullcodeline": "fptr_ok(fptr_whitelist_mesh_cb(cb->cb));"
    },
    {
        "line": 33,
        "fullcodeline": "log_assert(mesh->num_reply_addrs > 0);"
    }
]