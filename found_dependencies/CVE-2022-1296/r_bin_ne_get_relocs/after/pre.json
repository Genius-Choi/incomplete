[
    {
        "line": 2,
        "fullcodeline": "RList *segments = bin->segments;"
    },
    {
        "line": 6,
        "fullcodeline": "RList *entries = bin->entries;"
    },
    {
        "line": 10,
        "fullcodeline": "RList *symbols = bin->symbols;"
    },
    {
        "line": 15,
        "fullcodeline": "ut16 *modref = calloc (bin->ne_header->ModRefs, sizeof (ut16));"
    },
    {
        "line": 19,
        "fullcodeline": "r_buf_read_at (bin->buf, (ut64)bin->ne_header->ModRefTable + bin->header_offset, (ut8 *)modref, bin->ne_header->ModRefs * sizeof (ut16));"
    },
    {
        "line": 21,
        "fullcodeline": "RList *relocs = r_list_newf (free);"
    },
    {
        "line": 29,
        "fullcodeline": "int index = -1;"
    },
    {
        "line": 30,
        "fullcodeline": "r_list_foreach (segments, it, seg) {"
    },
    {
        "line": 3,
        "fullcodeline": "if (!segments) {"
    },
    {
        "line": 7,
        "fullcodeline": "if (!entries) {"
    },
    {
        "line": 11,
        "fullcodeline": "if (!symbols) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (!modref) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (!relocs) {"
    },
    {
        "line": 35,
        "fullcodeline": "ut32 off = seg->paddr + seg->size;"
    },
    {
        "line": 36,
        "fullcodeline": "ut32 start = off;"
    },
    {
        "line": 37,
        "fullcodeline": "ut16 length = r_buf_read_le16_at (bin->buf, off);"
    },
    {
        "line": 41,
        "fullcodeline": "off += 2;"
    },
    {
        "line": 38,
        "fullcodeline": "if (!length) {"
    },
    {
        "line": 43,
        "fullcodeline": "while (off < start + length * sizeof (NE_image_reloc_item)) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (!(bin->segment_entries[index].flags & RELOCINFO)) {"
    },
    {
        "line": 45,
        "fullcodeline": "NE_image_reloc_item rel = {0};"
    },
    {
        "line": 49,
        "fullcodeline": "RBinReloc *reloc = R_NEW0 (RBinReloc);"
    },
    {
        "line": 53,
        "fullcodeline": "reloc->paddr = seg->paddr + rel.offset;"
    },
    {
        "line": 151,
        "fullcodeline": "off += sizeof (NE_image_reloc_item);"
    },
    {
        "line": 50,
        "fullcodeline": "if (!reloc) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (rel.flags & (IMPORTED_ORD | IMPORTED_NAME)) {"
    },
    {
        "line": 127,
        "fullcodeline": "if (rel.flags & ADDITIVE) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (r_buf_read_at (bin->buf, off, (ut8 *)&rel, sizeof (rel)) < 1) {"
    },
    {
        "line": 56,
        "fullcodeline": "reloc->type = R_BIN_RELOC_8;"
    },
    {
        "line": 60,
        "fullcodeline": "reloc->type = R_BIN_RELOC_16;"
    },
    {
        "line": 64,
        "fullcodeline": "reloc->type = R_BIN_RELOC_32;"
    },
    {
        "line": 67,
        "fullcodeline": "reloc->type = R_BIN_RELOC_64;"
    },
    {
        "line": 73,
        "fullcodeline": "RBinImport *imp = R_NEW0 (RBinImport);"
    },
    {
        "line": 78,
        "fullcodeline": "char *name = NULL;"
    },
    {
        "line": 97,
        "fullcodeline": "reloc->import = imp;"
    },
    {
        "line": 128,
        "fullcodeline": "reloc->additive = 1;"
    },
    {
        "line": 129,
        "fullcodeline": "r_list_append (relocs, reloc);"
    },
    {
        "line": 74,
        "fullcodeline": "if (!imp) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (rel.index > bin->ne_header->ModRefs) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (rel.flags & IMPORTED_ORD) {"
    },
    {
        "line": 80,
        "fullcodeline": "name = r_str_newf (\"UnknownModule%d_%x\", rel.index, off); // ????"
    },
    {
        "line": 86,
        "fullcodeline": "imp->ordinal = rel.func_ord;"
    },
    {
        "line": 87,
        "fullcodeline": "char *fname = __func_name_from_ord (name, rel.func_ord);"
    },
    {
        "line": 88,
        "fullcodeline": "imp->name = r_str_newf (\"%s.%s\", name, fname);"
    },
    {
        "line": 98,
        "fullcodeline": "} else if (rel.flags & OSFIXUP) {"
    },
    {
        "line": 91,
        "fullcodeline": "offset = bin->header_offset + bin->ne_header->ImportNameTable + rel.name_off;"
    },
    {
        "line": 92,
        "fullcodeline": "char *func = __read_nonnull_str_at (bin->buf, offset);"
    },
    {
        "line": 93,
        "fullcodeline": "imp->name = r_str_newf (\"%s.%s\", name, func);"
    },
    {
        "line": 138,
        "fullcodeline": "r_list_append (relocs, reloc);"
    },
    {
        "line": 139,
        "fullcodeline": "offset = r_buf_read_le16_at (bin->buf, reloc->paddr);"
    },
    {
        "line": 141,
        "fullcodeline": "reloc = R_NEW0 (RBinReloc);"
    },
    {
        "line": 145,
        "fullcodeline": "*reloc = *tmp;"
    },
    {
        "line": 146,
        "fullcodeline": "reloc->paddr = seg->paddr + offset;"
    },
    {
        "line": 81,
        "fullcodeline": "} else if (rel.index > 0) {"
    },
    {
        "line": 116,
        "fullcodeline": "reloc->addend = offset;"
    },
    {
        "line": 117,
        "fullcodeline": "RBinSymbol *sym = NULL;"
    },
    {
        "line": 119,
        "fullcodeline": "r_list_foreach (symbols, sit, sym) {"
    },
    {
        "line": 142,
        "fullcodeline": "if (!reloc) {"
    },
    {
        "line": 82,
        "fullcodeline": "offset = modref[rel.index - 1] + bin->header_offset + bin->ne_header->ImportNameTable;"
    },
    {
        "line": 83,
        "fullcodeline": "name = __read_nonnull_str_at (bin->buf, offset);"
    },
    {
        "line": 102,
        "fullcodeline": "RBinSection *s = r_list_get_n (segments, rel.segnum - 1);"
    },
    {
        "line": 120,
        "fullcodeline": "if (sym->paddr == reloc->addend) {"
    },
    {
        "line": 109,
        "fullcodeline": "RBinAddr *entry = r_list_get_n (entries, rel.entry_ordinal - 1);"
    },
    {
        "line": 104,
        "fullcodeline": "offset = s->paddr + rel.segoff;"
    },
    {
        "line": 106,
        "fullcodeline": "offset = -1;"
    },
    {
        "line": 111,
        "fullcodeline": "offset = entry->paddr;"
    },
    {
        "line": 113,
        "fullcodeline": "offset = -1;"
    }
]