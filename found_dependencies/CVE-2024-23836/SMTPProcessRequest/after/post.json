[
    {
        "line": 4,
        "fullcodeline": "SCEnter();"
    },
    {
        "line": 5,
        "fullcodeline": "SMTPTransaction *tx = state->curr_tx;"
    },
    {
        "line": 28,
        "fullcodeline": "state->toserver_data_count += ("
    },
    {
        "line": 11,
        "fullcodeline": "if (state->current_line_len == 0 && state->current_line_delimiter_len == 0) {"
    },
    {
        "line": 14,
        "fullcodeline": "if (state->curr_tx == NULL || (state->curr_tx->done && !NoNewTx(state))) {"
    },
    {
        "line": 29,
        "fullcodeline": "state->current_line_len +"
    },
    {
        "line": 32,
        "fullcodeline": "if (!(state->parser_state & SMTP_PARSER_STATE_FIRST_REPLY_SEEN)) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (!(state->parser_state & SMTP_PARSER_STATE_COMMAND_DATA_MODE)) {"
    },
    {
        "line": 15,
        "fullcodeline": "tx = SMTPTransactionCreate(state);"
    },
    {
        "line": 18,
        "fullcodeline": "state->curr_tx = tx;"
    },
    {
        "line": 19,
        "fullcodeline": "TAILQ_INSERT_TAIL(&state->tx_list, tx, next);"
    },
    {
        "line": 20,
        "fullcodeline": "tx->tx_id = state->tx_cnt++;"
    },
    {
        "line": 23,
        "fullcodeline": "state->toserver_last_data_stamp = state->toserver_data_count;"
    },
    {
        "line": 24,
        "fullcodeline": "StreamTcpReassemblySetMinInspectDepth(f->protoctx, STREAM_TOSERVER,"
    },
    {
        "line": 33,
        "fullcodeline": "SMTPSetEvent(state, SMTP_DECODER_EVENT_NO_SERVER_WELCOME_MESSAGE);"
    },
    {
        "line": 39,
        "fullcodeline": "int r = 0;"
    },
    {
        "line": 133,
        "fullcodeline": "SCReturnInt(r);"
    },
    {
        "line": 149,
        "fullcodeline": "SCReturnInt(0);"
    },
    {
        "line": 16,
        "fullcodeline": "if (tx == NULL)"
    },
    {
        "line": 41,
        "fullcodeline": "if (state->current_line_len >= 8 &&"
    },
    {
        "line": 128,
        "fullcodeline": "if (SMTPInsertCommandIntoCommandBuffer(state->current_command,"
    },
    {
        "line": 138,
        "fullcodeline": "return SMTPProcessCommandSTARTTLS(state, f, pstate);"
    },
    {
        "line": 141,
        "fullcodeline": "return SMTPProcessCommandDATA(state, f, pstate);"
    },
    {
        "line": 144,
        "fullcodeline": "return SMTPProcessCommandBDAT(state, f, pstate);"
    },
    {
        "line": 42,
        "fullcodeline": "SCMemcmpLowercase(\"starttls\", state->current_line, 8) == 0) {"
    },
    {
        "line": 43,
        "fullcodeline": "state->current_command = SMTP_COMMAND_STARTTLS;"
    },
    {
        "line": 129,
        "fullcodeline": "state, f) == -1) {"
    },
    {
        "line": 130,
        "fullcodeline": "SCReturnInt(-1);"
    },
    {
        "line": 17,
        "fullcodeline": "return -1;"
    },
    {
        "line": 44,
        "fullcodeline": "} else if (state->current_line_len >= 4 &&"
    },
    {
        "line": 45,
        "fullcodeline": "SCMemcmpLowercase(\"data\", state->current_line, 4) == 0) {"
    },
    {
        "line": 46,
        "fullcodeline": "state->current_command = SMTP_COMMAND_DATA;"
    },
    {
        "line": 82,
        "fullcodeline": "state->curr_tx->is_data = true;"
    },
    {
        "line": 84,
        "fullcodeline": "if (state->parser_state & SMTP_PARSER_STATE_PIPELINING_SERVER) {"
    },
    {
        "line": 50,
        "fullcodeline": "SMTPSetEvent(state, SMTP_DECODER_EVENT_UNPARSABLE_CONTENT);"
    },
    {
        "line": 51,
        "fullcodeline": "SCReturnInt(0);"
    },
    {
        "line": 85,
        "fullcodeline": "state->parser_state |= SMTP_PARSER_STATE_COMMAND_DATA_MODE;"
    },
    {
        "line": 87,
        "fullcodeline": "} else if (state->current_line_len >= 4 &&"
    },
    {
        "line": 88,
        "fullcodeline": "SCMemcmpLowercase(\"bdat\", state->current_line, 4) == 0) {"
    },
    {
        "line": 89,
        "fullcodeline": "r = SMTPParseCommandBDAT(state);"
    },
    {
        "line": 93,
        "fullcodeline": "state->current_command = SMTP_COMMAND_BDAT;"
    },
    {
        "line": 94,
        "fullcodeline": "state->parser_state |= SMTP_PARSER_STATE_COMMAND_DATA_MODE;"
    },
    {
        "line": 90,
        "fullcodeline": "if (r == -1) {"
    },
    {
        "line": 53,
        "fullcodeline": "const char *msgname = \"rawmsg\"; /* XXX have a better name */"
    },
    {
        "line": 91,
        "fullcodeline": "SCReturnInt(-1);"
    },
    {
        "line": 95,
        "fullcodeline": "} else if (state->current_line_len >= 4 &&"
    },
    {
        "line": 54,
        "fullcodeline": "if (state->files_ts == NULL)"
    },
    {
        "line": 56,
        "fullcodeline": "if (state->files_ts == NULL) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (FileOpenFileWithId(state->files_ts, &smtp_config.sbcfg,"
    },
    {
        "line": 96,
        "fullcodeline": "((SCMemcmpLowercase(\"helo\", state->current_line, 4) == 0) ||"
    },
    {
        "line": 98,
        "fullcodeline": "r = SMTPParseCommandHELO(state);"
    },
    {
        "line": 102,
        "fullcodeline": "state->current_command = SMTP_COMMAND_OTHER_CMD;"
    },
    {
        "line": 55,
        "fullcodeline": "state->files_ts = FileContainerAlloc();"
    },
    {
        "line": 63,
        "fullcodeline": "SMTPNewFile(state->curr_tx, state->files_ts->tail);"
    },
    {
        "line": 97,
        "fullcodeline": "SCMemcmpLowercase(\"ehlo\", state->current_line, 4) == 0))  {"
    },
    {
        "line": 99,
        "fullcodeline": "if (r == -1) {"
    },
    {
        "line": 57,
        "fullcodeline": "return -1;"
    },
    {
        "line": 60,
        "fullcodeline": "state->file_track_id++,"
    },
    {
        "line": 61,
        "fullcodeline": "(uint8_t*) msgname, strlen(msgname), NULL, 0,"
    },
    {
        "line": 62,
        "fullcodeline": "FILE_NOMD5|FILE_NOMAGIC|FILE_USE_DETECT) == 0) {"
    },
    {
        "line": 66,
        "fullcodeline": "DEBUG_VALIDATE_BUG_ON(tx->mime_state);"
    },
    {
        "line": 67,
        "fullcodeline": "tx->mime_state = MimeDecInitParser(f, SMTPProcessDataChunk);"
    },
    {
        "line": 100,
        "fullcodeline": "SCReturnInt(-1);"
    },
    {
        "line": 103,
        "fullcodeline": "} else if (state->current_line_len >= 9 &&"
    },
    {
        "line": 68,
        "fullcodeline": "if (tx->mime_state == NULL) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (tx->msg_head == NULL) {"
    },
    {
        "line": 104,
        "fullcodeline": "SCMemcmpLowercase(\"mail from\", state->current_line, 9) == 0) {"
    },
    {
        "line": 105,
        "fullcodeline": "r = SMTPParseCommandMAILFROM(state);"
    },
    {
        "line": 109,
        "fullcodeline": "state->current_command = SMTP_COMMAND_OTHER_CMD;"
    },
    {
        "line": 106,
        "fullcodeline": "if (r == -1) {"
    },
    {
        "line": 107,
        "fullcodeline": "SCReturnInt(-1);"
    },
    {
        "line": 110,
        "fullcodeline": "} else if (state->current_line_len >= 7 &&"
    },
    {
        "line": 111,
        "fullcodeline": "SCMemcmpLowercase(\"rcpt to\", state->current_line, 7) == 0) {"
    },
    {
        "line": 112,
        "fullcodeline": "r = SMTPParseCommandRCPTTO(state);"
    },
    {
        "line": 116,
        "fullcodeline": "state->current_command = SMTP_COMMAND_OTHER_CMD;"
    },
    {
        "line": 113,
        "fullcodeline": "if (r == -1) {"
    },
    {
        "line": 114,
        "fullcodeline": "SCReturnInt(-1);"
    },
    {
        "line": 117,
        "fullcodeline": "} else if (state->current_line_len >= 4 &&"
    },
    {
        "line": 118,
        "fullcodeline": "SCMemcmpLowercase(\"rset\", state->current_line, 4) == 0) {"
    },
    {
        "line": 120,
        "fullcodeline": "state->bdat_chunk_idx = 0;"
    },
    {
        "line": 121,
        "fullcodeline": "state->current_command = SMTP_COMMAND_RSET;"
    },
    {
        "line": 123,
        "fullcodeline": "state->current_command = SMTP_COMMAND_OTHER_CMD;"
    }
]