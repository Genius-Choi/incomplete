[
    {
        "line": 7,
        "fullcodeline": "ConfNode *p = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "TAILQ_FOREACH(p, &s->head, next) {"
    },
    {
        "line": 4,
        "fullcodeline": "if (cfg_prec == NULL || s == NULL || tree == NULL)"
    },
    {
        "line": 12,
        "fullcodeline": "if (strcasecmp(\"address\", p->name) == 0) {"
    },
    {
        "line": 15,
        "fullcodeline": "TAILQ_FOREACH(pval, &p->head, next) {"
    },
    {
        "line": 16,
        "fullcodeline": "SCLogDebug(\"LIBHTP server %s: %s=%s\", s->name, p->name,"
    },
    {
        "line": 20,
        "fullcodeline": "if (strchr(pval->val, ':') != NULL) {"
    },
    {
        "line": 39,
        "fullcodeline": "} else if (strcasecmp(\"personality\", p->name) == 0) {"
    },
    {
        "line": 21,
        "fullcodeline": "SCLogDebug(\"LIBHTP adding ipv6 server %s at %s: %p\","
    },
    {
        "line": 41,
        "fullcodeline": "int personality = HTPLookupPersonality(p->val);"
    },
    {
        "line": 42,
        "fullcodeline": "SCLogDebug(\"LIBHTP default: %s = %s\", p->name, p->val);"
    },
    {
        "line": 43,
        "fullcodeline": "SCLogDebug(\"LIBHTP default: %s = %s\", p->name, p->val);"
    },
    {
        "line": 23,
        "fullcodeline": "if (!SCRadixAddKeyIPV6String(pval->val, tree, cfg_prec)) {"
    },
    {
        "line": 29,
        "fullcodeline": "SCLogDebug(\"LIBHTP adding ipv4 server %s at %s: %p\","
    },
    {
        "line": 45,
        "fullcodeline": "if (personality >= 0) {"
    },
    {
        "line": 24,
        "fullcodeline": "SCLogWarning(\"LIBHTP failed to \""
    },
    {
        "line": 31,
        "fullcodeline": "if (!SCRadixAddKeyIPV4String(pval->val, tree, cfg_prec)) {"
    },
    {
        "line": 46,
        "fullcodeline": "SCLogDebug(\"LIBHTP default: %s=%s (%d)\", p->name, p->val,"
    },
    {
        "line": 60,
        "fullcodeline": "htp_config_set_convert_lowercase(cfg_prec->cfg, HTP_DECODER_URL_PATH, 0);"
    },
    {
        "line": 68,
        "fullcodeline": "} else if (strcasecmp(\"request-body-limit\", p->name) == 0 ||"
    },
    {
        "line": 32,
        "fullcodeline": "SCLogWarning(\"LIBHTP failed \""
    },
    {
        "line": 48,
        "fullcodeline": "if (htp_config_set_server_personality(cfg_prec->cfg, personality) == HTP_ERROR){"
    },
    {
        "line": 62,
        "fullcodeline": "SCLogWarning(\"LIBHTP Unknown personality \""
    },
    {
        "line": 69,
        "fullcodeline": "strcasecmp(\"request_body_limit\", p->name) == 0) {"
    },
    {
        "line": 49,
        "fullcodeline": "SCLogWarning(\"LIBHTP Failed adding \""
    },
    {
        "line": 70,
        "fullcodeline": "if (ParseSizeStringU32(p->val, &cfg_prec->request.body_limit) < 0) {"
    },
    {
        "line": 53,
        "fullcodeline": "SCLogDebug(\"LIBHTP personality set to %s\","
    },
    {
        "line": 71,
        "fullcodeline": "SCLogError(\"Error parsing request-body-limit \""
    },
    {
        "line": 74,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 77,
        "fullcodeline": "} else if (strcasecmp(\"response-body-limit\", p->name) == 0) {"
    },
    {
        "line": 54,
        "fullcodeline": "HTPLookupPersonalityString(personality));"
    },
    {
        "line": 78,
        "fullcodeline": "if (ParseSizeStringU32(p->val, &cfg_prec->response.body_limit) < 0) {"
    },
    {
        "line": 79,
        "fullcodeline": "SCLogError(\"Error parsing response-body-limit \""
    },
    {
        "line": 82,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 85,
        "fullcodeline": "} else if (strcasecmp(\"request-body-minimal-inspect-size\", p->name) == 0) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (ParseSizeStringU32(p->val, &cfg_prec->request.inspect_min_size) < 0) {"
    },
    {
        "line": 87,
        "fullcodeline": "SCLogError(\"Error parsing request-body-minimal-inspect-size \""
    },
    {
        "line": 90,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 93,
        "fullcodeline": "} else if (strcasecmp(\"request-body-inspect-window\", p->name) == 0) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (ParseSizeStringU32(p->val, &cfg_prec->request.inspect_window) < 0) {"
    },
    {
        "line": 95,
        "fullcodeline": "SCLogError(\"Error parsing request-body-inspect-window \""
    },
    {
        "line": 98,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 101,
        "fullcodeline": "} else if (strcasecmp(\"double-decode-query\", p->name) == 0) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (ConfValIsTrue(p->val)) {"
    },
    {
        "line": 103,
        "fullcodeline": "htp_config_register_request_line(cfg_prec->cfg,"
    },
    {
        "line": 107,
        "fullcodeline": "} else if (strcasecmp(\"double-decode-path\", p->name) == 0) {"
    },
    {
        "line": 108,
        "fullcodeline": "if (ConfValIsTrue(p->val)) {"
    },
    {
        "line": 109,
        "fullcodeline": "htp_config_register_request_line(cfg_prec->cfg,"
    },
    {
        "line": 113,
        "fullcodeline": "} else if (strcasecmp(\"response-body-minimal-inspect-size\", p->name) == 0) {"
    },
    {
        "line": 114,
        "fullcodeline": "if (ParseSizeStringU32(p->val, &cfg_prec->response.inspect_min_size) < 0) {"
    },
    {
        "line": 115,
        "fullcodeline": "SCLogError(\"Error parsing response-body-minimal-inspect-size \""
    },
    {
        "line": 118,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 121,
        "fullcodeline": "} else if (strcasecmp(\"response-body-inspect-window\", p->name) == 0) {"
    },
    {
        "line": 122,
        "fullcodeline": "if (ParseSizeStringU32(p->val, &cfg_prec->response.inspect_window) < 0) {"
    },
    {
        "line": 123,
        "fullcodeline": "SCLogError(\"Error parsing response-body-inspect-window \""
    },
    {
        "line": 126,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 129,
        "fullcodeline": "} else if (strcasecmp(\"response-body-decompress-layer-limit\", p->name) == 0) {"
    },
    {
        "line": 130,
        "fullcodeline": "uint32_t value = 2;"
    },
    {
        "line": 140,
        "fullcodeline": "SCLogWarning(\"can't set response-body-decompress-layer-limit \""
    },
    {
        "line": 131,
        "fullcodeline": "if (ParseSizeStringU32(p->val, &value) < 0) {"
    },
    {
        "line": 132,
        "fullcodeline": "SCLogError(\"Error parsing response-body-inspect-window \""
    },
    {
        "line": 135,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 144,
        "fullcodeline": "} else if (strcasecmp(\"path-convert-backslash-separators\", p->name) == 0) {"
    },
    {
        "line": 145,
        "fullcodeline": "htp_config_set_backslash_convert_slashes(cfg_prec->cfg,"
    },
    {
        "line": 147,
        "fullcodeline": "ConfValIsTrue(p->val));"
    },
    {
        "line": 148,
        "fullcodeline": "} else if (strcasecmp(\"path-bestfit-replacement-char\", p->name) == 0) {"
    },
    {
        "line": 149,
        "fullcodeline": "if (strlen(p->val) == 1) {"
    },
    {
        "line": 150,
        "fullcodeline": "htp_config_set_bestfit_replacement_byte(cfg_prec->cfg,"
    },
    {
        "line": 157,
        "fullcodeline": "} else if (strcasecmp(\"path-convert-lowercase\", p->name) == 0) {"
    },
    {
        "line": 154,
        "fullcodeline": "SCLogError(\"Invalid entry \""
    },
    {
        "line": 158,
        "fullcodeline": "htp_config_set_convert_lowercase(cfg_prec->cfg,"
    },
    {
        "line": 160,
        "fullcodeline": "ConfValIsTrue(p->val));"
    },
    {
        "line": 161,
        "fullcodeline": "} else if (strcasecmp(\"path-nul-encoded-terminates\", p->name) == 0) {"
    },
    {
        "line": 162,
        "fullcodeline": "htp_config_set_nul_encoded_terminates(cfg_prec->cfg,"
    },
    {
        "line": 164,
        "fullcodeline": "ConfValIsTrue(p->val));"
    },
    {
        "line": 165,
        "fullcodeline": "} else if (strcasecmp(\"path-nul-raw-terminates\", p->name) == 0) {"
    },
    {
        "line": 166,
        "fullcodeline": "htp_config_set_nul_raw_terminates(cfg_prec->cfg,"
    },
    {
        "line": 168,
        "fullcodeline": "ConfValIsTrue(p->val));"
    },
    {
        "line": 169,
        "fullcodeline": "} else if (strcasecmp(\"path-separators-compress\", p->name) == 0) {"
    },
    {
        "line": 170,
        "fullcodeline": "htp_config_set_path_separators_compress(cfg_prec->cfg,"
    },
    {
        "line": 172,
        "fullcodeline": "ConfValIsTrue(p->val));"
    },
    {
        "line": 173,
        "fullcodeline": "} else if (strcasecmp(\"path-separators-decode\", p->name) == 0) {"
    },
    {
        "line": 174,
        "fullcodeline": "htp_config_set_path_separators_decode(cfg_prec->cfg,"
    },
    {
        "line": 176,
        "fullcodeline": "ConfValIsTrue(p->val));"
    },
    {
        "line": 177,
        "fullcodeline": "} else if (strcasecmp(\"path-u-encoding-decode\", p->name) == 0) {"
    },
    {
        "line": 178,
        "fullcodeline": "htp_config_set_u_encoding_decode(cfg_prec->cfg,"
    },
    {
        "line": 180,
        "fullcodeline": "ConfValIsTrue(p->val));"
    },
    {
        "line": 181,
        "fullcodeline": "} else if (strcasecmp(\"path-url-encoding-invalid-handling\", p->name) == 0) {"
    },
    {
        "line": 194,
        "fullcodeline": "htp_config_set_url_encoding_invalid_handling(cfg_prec->cfg,"
    },
    {
        "line": 183,
        "fullcodeline": "if (strcasecmp(p->val, \"preserve_percent\") == 0) {"
    },
    {
        "line": 184,
        "fullcodeline": "handling = HTP_URL_DECODE_PRESERVE_PERCENT;"
    },
    {
        "line": 197,
        "fullcodeline": "} else if (strcasecmp(\"path-utf8-convert-bestfit\", p->name) == 0) {"
    },
    {
        "line": 198,
        "fullcodeline": "htp_config_set_utf8_convert_bestfit(cfg_prec->cfg,"
    },
    {
        "line": 185,
        "fullcodeline": "} else if (strcasecmp(p->val, \"remove_percent\") == 0) {"
    },
    {
        "line": 200,
        "fullcodeline": "ConfValIsTrue(p->val));"
    },
    {
        "line": 186,
        "fullcodeline": "handling = HTP_URL_DECODE_REMOVE_PERCENT;"
    },
    {
        "line": 201,
        "fullcodeline": "} else if (strcasecmp(\"uri-include-all\", p->name) == 0) {"
    },
    {
        "line": 202,
        "fullcodeline": "cfg_prec->uri_include_all = ConfValIsTrue(p->val);"
    },
    {
        "line": 203,
        "fullcodeline": "SCLogDebug(\"uri-include-all %s\","
    },
    {
        "line": 187,
        "fullcodeline": "} else if (strcasecmp(p->val, \"decode_invalid\") == 0) {"
    },
    {
        "line": 204,
        "fullcodeline": "cfg_prec->uri_include_all ? \"enabled\" : \"disabled\");"
    },
    {
        "line": 188,
        "fullcodeline": "handling = HTP_URL_DECODE_PROCESS_INVALID;"
    },
    {
        "line": 205,
        "fullcodeline": "} else if (strcasecmp(\"query-plusspace-decode\", p->name) == 0) {"
    },
    {
        "line": 190,
        "fullcodeline": "SCLogError(\"Invalid entry \""
    },
    {
        "line": 206,
        "fullcodeline": "htp_config_set_plusspace_decode(cfg_prec->cfg,"
    },
    {
        "line": 208,
        "fullcodeline": "ConfValIsTrue(p->val));"
    },
    {
        "line": 209,
        "fullcodeline": "} else if (strcasecmp(\"meta-field-limit\", p->name) == 0) {"
    },
    {
        "line": 210,
        "fullcodeline": "uint32_t limit = 0;"
    },
    {
        "line": 222,
        "fullcodeline": "htp_config_set_field_limits(cfg_prec->cfg,"
    },
    {
        "line": 211,
        "fullcodeline": "if (ParseSizeStringU32(p->val, &limit) < 0) {"
    },
    {
        "line": 217,
        "fullcodeline": "if (limit == 0) {"
    },
    {
        "line": 223,
        "fullcodeline": "(size_t)HTP_CONFIG_DEFAULT_FIELD_LIMIT_SOFT,"
    },
    {
        "line": 224,
        "fullcodeline": "(size_t)limit);"
    },
    {
        "line": 212,
        "fullcodeline": "SCLogError(\"Error meta-field-limit \""
    },
    {
        "line": 215,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 218,
        "fullcodeline": "FatalError(\"Error meta-field-limit \""
    },
    {
        "line": 284,
        "fullcodeline": "} else if (strcasecmp(\"randomize-inspection-sizes\", p->name) == 0) {"
    },
    {
        "line": 285,
        "fullcodeline": "if (!g_disable_randomness) {"
    },
    {
        "line": 286,
        "fullcodeline": "cfg_prec->randomize = ConfValIsTrue(p->val);"
    },
    {
        "line": 288,
        "fullcodeline": "} else if (strcasecmp(\"randomize-inspection-range\", p->name) == 0) {"
    },
    {
        "line": 299,
        "fullcodeline": "cfg_prec->randomize_range = range;"
    },
    {
        "line": 290,
        "fullcodeline": "if (StringParseU32RangeCheck(&range, 10, 0,"
    },
    {
        "line": 292,
        "fullcodeline": "SCLogError(\"Invalid value for randomize\""
    },
    {
        "line": 297,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 300,
        "fullcodeline": "} else if (strcasecmp(\"http-body-inline\", p->name) == 0) {"
    },
    {
        "line": 291,
        "fullcodeline": "(const char *)p->val, 0, 100) < 0) {"
    },
    {
        "line": 301,
        "fullcodeline": "if (ConfValIsTrue(p->val)) {"
    },
    {
        "line": 302,
        "fullcodeline": "cfg_prec->http_body_inline = 1;"
    },
    {
        "line": 315,
        "fullcodeline": "} else if (strcasecmp(\"swf-decompression\", p->name) == 0) {"
    },
    {
        "line": 318,
        "fullcodeline": "TAILQ_FOREACH(pval, &p->head, next) {"
    },
    {
        "line": 303,
        "fullcodeline": "} else if (ConfValIsFalse(p->val)) {"
    },
    {
        "line": 362,
        "fullcodeline": "SCLogWarning(\"LIBHTP Ignoring unknown \""
    },
    {
        "line": 304,
        "fullcodeline": "cfg_prec->http_body_inline = 0;"
    },
    {
        "line": 319,
        "fullcodeline": "if (strcasecmp(\"enabled\", pval->name) == 0) {"
    },
    {
        "line": 306,
        "fullcodeline": "if (strcmp(\"auto\", p->val) != 0) {"
    },
    {
        "line": 309,
        "fullcodeline": "if (EngineModeIsIPS()) {"
    },
    {
        "line": 320,
        "fullcodeline": "if (ConfValIsTrue(pval->val)) {"
    },
    {
        "line": 307,
        "fullcodeline": "WarnInvalidConfEntry(\"http_body_inline\", \"%s\", \"auto\");"
    },
    {
        "line": 310,
        "fullcodeline": "cfg_prec->http_body_inline = 1;"
    },
    {
        "line": 321,
        "fullcodeline": "cfg_prec->swf_decompression_enabled = 1;"
    },
    {
        "line": 327,
        "fullcodeline": "} else if (strcasecmp(\"type\", pval->name) == 0) {"
    },
    {
        "line": 312,
        "fullcodeline": "cfg_prec->http_body_inline = 0;"
    },
    {
        "line": 322,
        "fullcodeline": "} else if (ConfValIsFalse(pval->val)) {"
    },
    {
        "line": 328,
        "fullcodeline": "if (strcasecmp(\"no\", pval->val) == 0) {"
    },
    {
        "line": 323,
        "fullcodeline": "cfg_prec->swf_decompression_enabled = 0;"
    },
    {
        "line": 329,
        "fullcodeline": "cfg_prec->swf_compression_type = HTTP_SWF_COMPRESSION_NONE;"
    },
    {
        "line": 343,
        "fullcodeline": "} else if (strcasecmp(\"compress-depth\", pval->name) == 0) {"
    },
    {
        "line": 325,
        "fullcodeline": "WarnInvalidConfEntry(\"swf-decompression.enabled\", \"%s\", \"no\");"
    },
    {
        "line": 330,
        "fullcodeline": "} else if (strcasecmp(\"deflate\", pval->val) == 0) {"
    },
    {
        "line": 344,
        "fullcodeline": "if (ParseSizeStringU32(pval->val, &cfg_prec->swf_compress_depth) < 0) {"
    },
    {
        "line": 331,
        "fullcodeline": "cfg_prec->swf_compression_type = HTTP_SWF_COMPRESSION_ZLIB;"
    },
    {
        "line": 345,
        "fullcodeline": "SCLogError(\"Error parsing swf-decompression.compression-depth \""
    },
    {
        "line": 348,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 350,
        "fullcodeline": "} else if (strcasecmp(\"decompress-depth\", pval->name) == 0) {"
    },
    {
        "line": 332,
        "fullcodeline": "} else if (strcasecmp(\"lzma\", pval->val) == 0) {"
    },
    {
        "line": 351,
        "fullcodeline": "if (ParseSizeStringU32(pval->val, &cfg_prec->swf_decompress_depth) < 0) {"
    },
    {
        "line": 358,
        "fullcodeline": "SCLogWarning(\"Ignoring unknown param %s\", pval->name);"
    },
    {
        "line": 333,
        "fullcodeline": "cfg_prec->swf_compression_type = HTTP_SWF_COMPRESSION_LZMA;"
    },
    {
        "line": 352,
        "fullcodeline": "SCLogError(\"Error parsing swf-decompression.decompression-depth \""
    },
    {
        "line": 355,
        "fullcodeline": "exit(EXIT_FAILURE);"
    },
    {
        "line": 334,
        "fullcodeline": "} else if (strcasecmp(\"both\", pval->val) == 0) {"
    },
    {
        "line": 335,
        "fullcodeline": "cfg_prec->swf_compression_type = HTTP_SWF_COMPRESSION_BOTH;"
    },
    {
        "line": 337,
        "fullcodeline": "SCLogError(\"Invalid entry for \""
    },
    {
        "line": 341,
        "fullcodeline": "exit(EXIT_FAILURE);"
    }
]