[
    {
        "line": 3,
        "fullcodeline": "struct fs_struct *fs, *new_fs = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "struct files_struct *fd, *new_fd = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "struct cred *new_cred = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "struct nsproxy *new_nsproxy = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "int do_sysvsem = 0;"
    },
    {
        "line": 36,
        "fullcodeline": "err = check_unshare_flags(unshare_flags);"
    },
    {
        "line": 46,
        "fullcodeline": "err = unshare_fs(unshare_flags, &new_fs);"
    },
    {
        "line": 49,
        "fullcodeline": "err = unshare_fd(unshare_flags, &new_fd);"
    },
    {
        "line": 52,
        "fullcodeline": "err = unshare_userns(unshare_flags, &new_cred);"
    },
    {
        "line": 55,
        "fullcodeline": "err = unshare_nsproxy_namespaces(unshare_flags, &new_nsproxy,"
    },
    {
        "line": 13,
        "fullcodeline": "if (unshare_flags & CLONE_NEWUSER)"
    },
    {
        "line": 18,
        "fullcodeline": "if (unshare_flags & CLONE_NEWPID)"
    },
    {
        "line": 23,
        "fullcodeline": "if (unshare_flags & CLONE_THREAD)"
    },
    {
        "line": 28,
        "fullcodeline": "if (unshare_flags & CLONE_VM)"
    },
    {
        "line": 33,
        "fullcodeline": "if (unshare_flags & CLONE_NEWNS)"
    },
    {
        "line": 44,
        "fullcodeline": "if (unshare_flags & (CLONE_NEWIPC|CLONE_SYSVSEM))"
    },
    {
        "line": 60,
        "fullcodeline": "if (new_fs || new_fd || do_sysvsem || new_cred || new_nsproxy) {"
    },
    {
        "line": 14,
        "fullcodeline": "unshare_flags |= CLONE_THREAD;"
    },
    {
        "line": 19,
        "fullcodeline": "unshare_flags |= CLONE_THREAD;"
    },
    {
        "line": 24,
        "fullcodeline": "unshare_flags |= CLONE_VM;"
    },
    {
        "line": 29,
        "fullcodeline": "unshare_flags |= CLONE_SIGHAND;"
    },
    {
        "line": 34,
        "fullcodeline": "unshare_flags |= CLONE_FS;"
    },
    {
        "line": 45,
        "fullcodeline": "do_sysvsem = 1;"
    },
    {
        "line": 71,
        "fullcodeline": "task_lock(current);"
    },
    {
        "line": 90,
        "fullcodeline": "task_unlock(current);"
    },
    {
        "line": 101,
        "fullcodeline": "put_cred(new_cred);"
    },
    {
        "line": 104,
        "fullcodeline": "put_files_struct(new_fd);"
    },
    {
        "line": 108,
        "fullcodeline": "free_fs_struct(new_fs);"
    },
    {
        "line": 65,
        "fullcodeline": "exit_sem(current);"
    },
    {
        "line": 69,
        "fullcodeline": "switch_task_namespaces(current, new_nsproxy);"
    },
    {
        "line": 74,
        "fullcodeline": "fs = current->fs;"
    },
    {
        "line": 75,
        "fullcodeline": "spin_lock(&fs->lock);"
    },
    {
        "line": 76,
        "fullcodeline": "current->fs = new_fs;"
    },
    {
        "line": 81,
        "fullcodeline": "spin_unlock(&fs->lock);"
    },
    {
        "line": 85,
        "fullcodeline": "fd = current->files;"
    },
    {
        "line": 86,
        "fullcodeline": "current->files = new_fd;"
    },
    {
        "line": 87,
        "fullcodeline": "new_fd = fd;"
    },
    {
        "line": 94,
        "fullcodeline": "commit_creds(new_cred);"
    },
    {
        "line": 95,
        "fullcodeline": "new_cred = NULL;"
    },
    {
        "line": 77,
        "fullcodeline": "if (--fs->users)"
    },
    {
        "line": 78,
        "fullcodeline": "new_fs = NULL;"
    },
    {
        "line": 80,
        "fullcodeline": "new_fs = fs;"
    }
]