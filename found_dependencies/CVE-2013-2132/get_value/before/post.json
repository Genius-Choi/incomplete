[
    {
        "line": 4,
        "fullcodeline": "struct module_state *state = GETSTATE(self);"
    },
    {
        "line": 485,
        "fullcodeline": "error = _error(\"InvalidBSON\");"
    },
    {
        "line": 486,
        "fullcodeline": "PyErr_SetNone(error);"
    },
    {
        "line": 487,
        "fullcodeline": "Py_DECREF(error);"
    },
    {
        "line": 463,
        "fullcodeline": "case -1:"
    },
    {
        "line": 15,
        "fullcodeline": "memcpy(&d, buffer + *position, 8);"
    },
    {
        "line": 16,
        "fullcodeline": "value = PyFloat_FromDouble(d);"
    },
    {
        "line": 20,
        "fullcodeline": "*position += 8;"
    },
    {
        "line": 26,
        "fullcodeline": "int value_length = ((int*)(buffer + *position))[0] - 1;"
    },
    {
        "line": 30,
        "fullcodeline": "*position += 4;"
    },
    {
        "line": 31,
        "fullcodeline": "value = PyUnicode_DecodeUTF8(buffer + *position, value_length, \"strict\");"
    },
    {
        "line": 35,
        "fullcodeline": "*position += value_length + 1;"
    },
    {
        "line": 41,
        "fullcodeline": "memcpy(&size, buffer + *position, 4);"
    },
    {
        "line": 45,
        "fullcodeline": "value = elements_to_dict(self, buffer + *position + 4,"
    },
    {
        "line": 83,
        "fullcodeline": "*position += size;"
    },
    {
        "line": 91,
        "fullcodeline": "memcpy(&size, buffer + *position, 4);"
    },
    {
        "line": 95,
        "fullcodeline": "end = *position + size - 1;"
    },
    {
        "line": 96,
        "fullcodeline": "*position += 4;"
    },
    {
        "line": 98,
        "fullcodeline": "value = PyList_New(0);"
    },
    {
        "line": 117,
        "fullcodeline": "(*position)++;"
    },
    {
        "line": 126,
        "fullcodeline": "memcpy(&length, buffer + *position, 4);"
    },
    {
        "line": 130,
        "fullcodeline": "subtype = (unsigned char)buffer[*position + 4];"
    },
    {
        "line": 204,
        "fullcodeline": "st = PyInt_FromLong(subtype);"
    },
    {
        "line": 210,
        "fullcodeline": "value = PyObject_CallFunctionObjArgs(state->Binary, data, st, NULL);"
    },
    {
        "line": 211,
        "fullcodeline": "Py_DECREF(st);"
    },
    {
        "line": 212,
        "fullcodeline": "Py_DECREF(data);"
    },
    {
        "line": 216,
        "fullcodeline": "*position += length + 5;"
    },
    {
        "line": 222,
        "fullcodeline": "value = Py_None;"
    },
    {
        "line": 223,
        "fullcodeline": "Py_INCREF(value);"
    },
    {
        "line": 234,
        "fullcodeline": "value = PyObject_CallFunction(state->ObjectId, \"s#\", buffer + *position, 12);"
    },
    {
        "line": 239,
        "fullcodeline": "*position += 12;"
    },
    {
        "line": 244,
        "fullcodeline": "value = buffer[(*position)++] ? Py_True : Py_False;"
    },
    {
        "line": 245,
        "fullcodeline": "Py_INCREF(value);"
    },
    {
        "line": 257,
        "fullcodeline": "naive = datetime_from_millis(*(long long*)(buffer + *position));"
    },
    {
        "line": 258,
        "fullcodeline": "*position += 8;"
    },
    {
        "line": 267,
        "fullcodeline": "replace = PyObject_GetAttrString(naive, \"replace\");"
    },
    {
        "line": 268,
        "fullcodeline": "Py_DECREF(naive);"
    },
    {
        "line": 272,
        "fullcodeline": "args = PyTuple_New(0);"
    },
    {
        "line": 277,
        "fullcodeline": "kwargs = PyDict_New();"
    },
    {
        "line": 289,
        "fullcodeline": "value = PyObject_Call(replace, args, kwargs);"
    },
    {
        "line": 290,
        "fullcodeline": "Py_DECREF(replace);"
    },
    {
        "line": 291,
        "fullcodeline": "Py_DECREF(args);"
    },
    {
        "line": 292,
        "fullcodeline": "Py_DECREF(kwargs);"
    },
    {
        "line": 301,
        "fullcodeline": "int pattern_length = strlen(buffer + *position);"
    },
    {
        "line": 305,
        "fullcodeline": "pattern = PyUnicode_DecodeUTF8(buffer + *position, pattern_length, \"strict\");"
    },
    {
        "line": 309,
        "fullcodeline": "*position += pattern_length + 1;"
    },
    {
        "line": 310,
        "fullcodeline": "flags_length = strlen(buffer + *position);"
    },
    {
        "line": 315,
        "fullcodeline": "flags = 0;"
    },
    {
        "line": 331,
        "fullcodeline": "*position += flags_length + 1;"
    },
    {
        "line": 332,
        "fullcodeline": "value = PyObject_CallFunction(state->RECompile, \"Oi\", pattern, flags);"
    },
    {
        "line": 333,
        "fullcodeline": "Py_DECREF(pattern);"
    },
    {
        "line": 342,
        "fullcodeline": "*position += 4;"
    },
    {
        "line": 343,
        "fullcodeline": "collection_length = strlen(buffer + *position);"
    },
    {
        "line": 347,
        "fullcodeline": "collection = PyUnicode_DecodeUTF8(buffer + *position, collection_length, \"strict\");"
    },
    {
        "line": 351,
        "fullcodeline": "*position += collection_length + 1;"
    },
    {
        "line": 356,
        "fullcodeline": "id = PyObject_CallFunction(state->ObjectId, \"s#\", buffer + *position, 12);"
    },
    {
        "line": 361,
        "fullcodeline": "*position += 12;"
    },
    {
        "line": 362,
        "fullcodeline": "value = PyObject_CallFunctionObjArgs(state->DBRef, collection, id, NULL);"
    },
    {
        "line": 363,
        "fullcodeline": "Py_DECREF(collection);"
    },
    {
        "line": 364,
        "fullcodeline": "Py_DECREF(id);"
    },
    {
        "line": 370,
        "fullcodeline": "int value_length = ((int*)(buffer + *position))[0] - 1;"
    },
    {
        "line": 374,
        "fullcodeline": "*position += 4;"
    },
    {
        "line": 375,
        "fullcodeline": "code = PyUnicode_DecodeUTF8(buffer + *position, value_length, \"strict\");"
    },
    {
        "line": 379,
        "fullcodeline": "*position += value_length + 1;"
    },
    {
        "line": 380,
        "fullcodeline": "value = PyObject_CallFunctionObjArgs(state->Code, code, NULL, NULL);"
    },
    {
        "line": 381,
        "fullcodeline": "Py_DECREF(code);"
    },
    {
        "line": 391,
        "fullcodeline": "*position += 8;"
    },
    {
        "line": 392,
        "fullcodeline": "code_length = strlen(buffer + *position);"
    },
    {
        "line": 396,
        "fullcodeline": "code = PyUnicode_DecodeUTF8(buffer + *position, code_length, \"strict\");"
    },
    {
        "line": 400,
        "fullcodeline": "*position += code_length + 1;"
    },
    {
        "line": 402,
        "fullcodeline": "memcpy(&scope_size, buffer + *position, 4);"
    },
    {
        "line": 403,
        "fullcodeline": "scope = elements_to_dict(self, buffer + *position + 4, scope_size - 5,"
    },
    {
        "line": 409,
        "fullcodeline": "*position += scope_size;"
    },
    {
        "line": 411,
        "fullcodeline": "value = PyObject_CallFunctionObjArgs(state->Code, code, scope, NULL);"
    },
    {
        "line": 412,
        "fullcodeline": "Py_DECREF(code);"
    },
    {
        "line": 413,
        "fullcodeline": "Py_DECREF(scope);"
    },
    {
        "line": 422,
        "fullcodeline": "memcpy(&i, buffer + *position, 4);"
    },
    {
        "line": 426,
        "fullcodeline": "value = PyInt_FromLong(i);"
    },
    {
        "line": 431,
        "fullcodeline": "*position += 4;"
    },
    {
        "line": 440,
        "fullcodeline": "memcpy(&inc, buffer + *position, 4);"
    },
    {
        "line": 441,
        "fullcodeline": "memcpy(&time, buffer + *position + 4, 4);"
    },
    {
        "line": 442,
        "fullcodeline": "value = PyObject_CallFunction(state->Timestamp, \"II\", time, inc);"
    },
    {
        "line": 446,
        "fullcodeline": "*position += 8;"
    },
    {
        "line": 455,
        "fullcodeline": "memcpy(&ll, buffer + *position, 8);"
    },
    {
        "line": 456,
        "fullcodeline": "value = PyLong_FromLongLong(ll);"
    },
    {
        "line": 460,
        "fullcodeline": "*position += 8;"
    },
    {
        "line": 465,
        "fullcodeline": "value = PyObject_CallFunctionObjArgs(state->MinKey, NULL);"
    },
    {
        "line": 470,
        "fullcodeline": "value = PyObject_CallFunctionObjArgs(state->MaxKey, NULL);"
    },
    {
        "line": 475,
        "fullcodeline": "PyObject* InvalidDocument = _error(\"InvalidDocument\");"
    },
    {
        "line": 476,
        "fullcodeline": "PyErr_SetString(InvalidDocument, \"no c decoder for this type yet\");"
    },
    {
        "line": 477,
        "fullcodeline": "Py_DECREF(InvalidDocument);"
    },
    {
        "line": 12,
        "fullcodeline": "if (max < 8) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (!value) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (max < value_length) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (!value) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (max < size) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (!value) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (strcmp(buffer + *position + 5, \"$ref\") == 0) { /* DBRef */"
    },
    {
        "line": 92,
        "fullcodeline": "if (max < size) {"
    },
    {
        "line": 99,
        "fullcodeline": "if (!value) {"
    },
    {
        "line": 102,
        "fullcodeline": "while (*position < end) {"
    },
    {
        "line": 127,
        "fullcodeline": "if (max < length) {"
    },
    {
        "line": 144,
        "fullcodeline": "if (subtype == 2) {"
    },
    {
        "line": 150,
        "fullcodeline": "if (!data) {"
    },
    {
        "line": 153,
        "fullcodeline": "if ((subtype == 3 || subtype == 4) && state->UUID) { // Encode as UUID, not Binary"
    },
    {
        "line": 206,
        "fullcodeline": "if (!st) {"
    },
    {
        "line": 213,
        "fullcodeline": "if (!value) {"
    },
    {
        "line": 228,
        "fullcodeline": "if (max < 12) {"
    },
    {
        "line": 236,
        "fullcodeline": "if (!value) {"
    },
    {
        "line": 254,
        "fullcodeline": "if (max < 8) {"
    },
    {
        "line": 259,
        "fullcodeline": "if (!tz_aware) { /* In the naive case, we're done here. */"
    },
    {
        "line": 264,
        "fullcodeline": "if (!naive) {"
    },
    {
        "line": 269,
        "fullcodeline": "if (!replace) {"
    },
    {
        "line": 273,
        "fullcodeline": "if (!args) {"
    },
    {
        "line": 278,
        "fullcodeline": "if (!kwargs) {"
    },
    {
        "line": 283,
        "fullcodeline": "if (PyDict_SetItemString(kwargs, \"tzinfo\", state->UTC) == -1) {"
    },
    {
        "line": 302,
        "fullcodeline": "if (max < pattern_length) {"
    },
    {
        "line": 306,
        "fullcodeline": "if (!pattern) {"
    },
    {
        "line": 311,
        "fullcodeline": "if (max < pattern_length + flags_length) {"
    },
    {
        "line": 316,
        "fullcodeline": "for (i = 0; i < flags_length; i++) {"
    },
    {
        "line": 344,
        "fullcodeline": "if (max < collection_length) {"
    },
    {
        "line": 348,
        "fullcodeline": "if (!collection) {"
    },
    {
        "line": 352,
        "fullcodeline": "if (max < collection_length + 12) {"
    },
    {
        "line": 357,
        "fullcodeline": "if (!id) {"
    },
    {
        "line": 371,
        "fullcodeline": "if (max < value_length) {"
    },
    {
        "line": 376,
        "fullcodeline": "if (!code) {"
    },
    {
        "line": 393,
        "fullcodeline": "if (max < 8 + code_length) {"
    },
    {
        "line": 397,
        "fullcodeline": "if (!code) {"
    },
    {
        "line": 405,
        "fullcodeline": "if (!scope) {"
    },
    {
        "line": 419,
        "fullcodeline": "if (max < 4) {"
    },
    {
        "line": 428,
        "fullcodeline": "if (!value) {"
    },
    {
        "line": 437,
        "fullcodeline": "if (max < 8) {"
    },
    {
        "line": 443,
        "fullcodeline": "if (!value) {"
    },
    {
        "line": 452,
        "fullcodeline": "if (max < 8) {"
    },
    {
        "line": 457,
        "fullcodeline": "if (!value) {"
    },
    {
        "line": 46,
        "fullcodeline": "size - 5, as_class, tz_aware, uuid_subtype);"
    },
    {
        "line": 54,
        "fullcodeline": "PyObject* collection = PyDict_GetItemString(value, \"$ref\");"
    },
    {
        "line": 55,
        "fullcodeline": "PyObject* id = PyDict_GetItemString(value, \"$id\");"
    },
    {
        "line": 56,
        "fullcodeline": "PyObject* database = PyDict_GetItemString(value, \"$db\");"
    },
    {
        "line": 58,
        "fullcodeline": "Py_INCREF(collection);"
    },
    {
        "line": 59,
        "fullcodeline": "PyDict_DelItemString(value, \"$ref\");"
    },
    {
        "line": 60,
        "fullcodeline": "Py_INCREF(id);"
    },
    {
        "line": 61,
        "fullcodeline": "PyDict_DelItemString(value, \"$id\");"
    },
    {
        "line": 71,
        "fullcodeline": "dbref = PyObject_CallFunctionObjArgs(state->DBRef, collection, id, database, value, NULL);"
    },
    {
        "line": 72,
        "fullcodeline": "Py_DECREF(value);"
    },
    {
        "line": 73,
        "fullcodeline": "value = dbref;"
    },
    {
        "line": 75,
        "fullcodeline": "Py_DECREF(id);"
    },
    {
        "line": 76,
        "fullcodeline": "Py_DECREF(collection);"
    },
    {
        "line": 77,
        "fullcodeline": "Py_DECREF(database);"
    },
    {
        "line": 105,
        "fullcodeline": "int type = (int)buffer[(*position)++];"
    },
    {
        "line": 106,
        "fullcodeline": "int key_size = strlen(buffer + *position);"
    },
    {
        "line": 107,
        "fullcodeline": "*position += key_size + 1; /* just skip the key, they're in order. */"
    },
    {
        "line": 108,
        "fullcodeline": "to_append = get_value(self, buffer, position, type,"
    },
    {
        "line": 114,
        "fullcodeline": "PyList_Append(value, to_append);"
    },
    {
        "line": 115,
        "fullcodeline": "Py_DECREF(to_append);"
    },
    {
        "line": 145,
        "fullcodeline": "data = PyString_FromStringAndSize(buffer + *position + 9, length - 4);"
    },
    {
        "line": 155,
        "fullcodeline": "PyObject* args = PyTuple_New(0);"
    },
    {
        "line": 160,
        "fullcodeline": "kwargs = PyDict_New();"
    },
    {
        "line": 167,
        "fullcodeline": "assert(length == 16); // UUID should always be 16 bytes"
    },
    {
        "line": 188,
        "fullcodeline": "value = PyObject_Call(state->UUID, args, kwargs);"
    },
    {
        "line": 190,
        "fullcodeline": "Py_DECREF(args);"
    },
    {
        "line": 191,
        "fullcodeline": "Py_DECREF(kwargs);"
    },
    {
        "line": 192,
        "fullcodeline": "Py_DECREF(data);"
    },
    {
        "line": 197,
        "fullcodeline": "*position += length + 5;"
    },
    {
        "line": 207,
        "fullcodeline": "Py_DECREF(data);"
    },
    {
        "line": 260,
        "fullcodeline": "value = naive;"
    },
    {
        "line": 274,
        "fullcodeline": "Py_DECREF(replace);"
    },
    {
        "line": 279,
        "fullcodeline": "Py_DECREF(replace);"
    },
    {
        "line": 280,
        "fullcodeline": "Py_DECREF(args);"
    },
    {
        "line": 284,
        "fullcodeline": "Py_DECREF(replace);"
    },
    {
        "line": 285,
        "fullcodeline": "Py_DECREF(args);"
    },
    {
        "line": 286,
        "fullcodeline": "Py_DECREF(kwargs);"
    },
    {
        "line": 312,
        "fullcodeline": "Py_DECREF(pattern);"
    },
    {
        "line": 353,
        "fullcodeline": "Py_DECREF(collection);"
    },
    {
        "line": 358,
        "fullcodeline": "Py_DECREF(collection);"
    },
    {
        "line": 404,
        "fullcodeline": "(PyObject*)&PyDict_Type, tz_aware, uuid_subtype);"
    },
    {
        "line": 406,
        "fullcodeline": "Py_DECREF(code);"
    },
    {
        "line": 63,
        "fullcodeline": "if (database == NULL) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (!value) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (!to_append) {"
    },
    {
        "line": 147,
        "fullcodeline": "data = PyString_FromStringAndSize(buffer + *position + 5, length);"
    },
    {
        "line": 156,
        "fullcodeline": "if (!args) {"
    },
    {
        "line": 161,
        "fullcodeline": "if (!kwargs) {"
    },
    {
        "line": 169,
        "fullcodeline": "if (uuid_subtype == CSHARP_LEGACY) {"
    },
    {
        "line": 193,
        "fullcodeline": "if (!value) {"
    },
    {
        "line": 317,
        "fullcodeline": "if (buffer[*position + i] == 'i') {"
    },
    {
        "line": 64,
        "fullcodeline": "database = Py_None;"
    },
    {
        "line": 65,
        "fullcodeline": "Py_INCREF(database);"
    },
    {
        "line": 109,
        "fullcodeline": "max - key_size, as_class, tz_aware, uuid_subtype);"
    },
    {
        "line": 111,
        "fullcodeline": "Py_DECREF(value);"
    },
    {
        "line": 157,
        "fullcodeline": "Py_DECREF(data);"
    },
    {
        "line": 162,
        "fullcodeline": "Py_DECREF(data);"
    },
    {
        "line": 163,
        "fullcodeline": "Py_DECREF(args);"
    },
    {
        "line": 171,
        "fullcodeline": "PyDict_SetItemString(kwargs, \"bytes_le\", data);"
    },
    {
        "line": 318,
        "fullcodeline": "flags |= 2;"
    },
    {
        "line": 67,
        "fullcodeline": "Py_INCREF(database);"
    },
    {
        "line": 68,
        "fullcodeline": "PyDict_DelItemString(value, \"$db\");"
    },
    {
        "line": 186,
        "fullcodeline": "PyDict_SetItemString(kwargs, \"bytes\", data);"
    },
    {
        "line": 174,
        "fullcodeline": "if (uuid_subtype == JAVA_LEGACY) {"
    },
    {
        "line": 319,
        "fullcodeline": "} else if (buffer[*position + i] == 'l') {"
    },
    {
        "line": 176,
        "fullcodeline": "char big_endian[16];"
    },
    {
        "line": 177,
        "fullcodeline": "_fix_java(buffer + *position + 5, big_endian);"
    },
    {
        "line": 179,
        "fullcodeline": "Py_DECREF(data);"
    },
    {
        "line": 183,
        "fullcodeline": "data = PyString_FromStringAndSize(big_endian, length);"
    },
    {
        "line": 320,
        "fullcodeline": "flags |= 4;"
    },
    {
        "line": 321,
        "fullcodeline": "} else if (buffer[*position + i] == 'm') {"
    },
    {
        "line": 322,
        "fullcodeline": "flags |= 8;"
    },
    {
        "line": 323,
        "fullcodeline": "} else if (buffer[*position + i] == 's') {"
    },
    {
        "line": 324,
        "fullcodeline": "flags |= 16;"
    },
    {
        "line": 325,
        "fullcodeline": "} else if (buffer[*position + i] == 'u') {"
    },
    {
        "line": 326,
        "fullcodeline": "flags |= 32;"
    },
    {
        "line": 327,
        "fullcodeline": "} else if (buffer[*position + i] == 'x') {"
    },
    {
        "line": 328,
        "fullcodeline": "flags |= 64;"
    }
]