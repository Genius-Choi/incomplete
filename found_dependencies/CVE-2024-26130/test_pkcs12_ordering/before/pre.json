[
    {
        "line": 9,
        "fullcodeline": "def make_cert(name):"
    },
    {
        "line": 30,
        "fullcodeline": "a_name = \"A\" * 20"
    },
    {
        "line": 31,
        "fullcodeline": "b_name = \"B\" * 20"
    },
    {
        "line": 32,
        "fullcodeline": "c_name = \"C\" * 20"
    },
    {
        "line": 38,
        "fullcodeline": "p12 = serialize_key_and_certificates("
    },
    {
        "line": 44,
        "fullcodeline": "assert cert == a_cert"
    },
    {
        "line": 45,
        "fullcodeline": "assert certs == [b_cert, c_cert]"
    },
    {
        "line": 48,
        "fullcodeline": "a_idx = p12.index(a_name.encode(\"utf-8\"))"
    },
    {
        "line": 49,
        "fullcodeline": "b_idx = p12.index(b_name.encode(\"utf-8\"))"
    },
    {
        "line": 50,
        "fullcodeline": "c_idx = p12.index(c_name.encode(\"utf-8\"))"
    },
    {
        "line": 52,
        "fullcodeline": "assert a_idx < b_idx < c_idx"
    },
    {
        "line": 33,
        "fullcodeline": "a_key, a_cert = make_cert(a_name)"
    },
    {
        "line": 34,
        "fullcodeline": "_, b_cert = make_cert(b_name)"
    },
    {
        "line": 35,
        "fullcodeline": "_, c_cert = make_cert(c_name)"
    },
    {
        "line": 43,
        "fullcodeline": "(_, cert, certs) = load_key_and_certificates(p12, None)"
    },
    {
        "line": 39,
        "fullcodeline": "b\"p12\", a_key, a_cert, [b_cert, c_cert], serialization.NoEncryption()"
    }
]