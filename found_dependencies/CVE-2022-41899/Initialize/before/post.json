[
    {
        "line": 6,
        "fullcodeline": "num_features_ = num_sparse_features + num_dense_features;"
    },
    {
        "line": 9,
        "fullcodeline": "TF_RETURN_IF_ERROR(context->input_list(\"sparse_example_indices\","
    },
    {
        "line": 17,
        "fullcodeline": "TF_RETURN_IF_ERROR(context->input_list(\"sparse_feature_indices\","
    },
    {
        "line": 36,
        "fullcodeline": "TF_RETURN_IF_ERROR(context->input(\"example_weights\", &example_weights_t));"
    },
    {
        "line": 37,
        "fullcodeline": "auto example_weights = example_weights_t->flat<float>();"
    },
    {
        "line": 46,
        "fullcodeline": "const int num_examples = static_cast<int>(example_weights.size());"
    },
    {
        "line": 48,
        "fullcodeline": "TF_RETURN_IF_ERROR(context->input(\"example_labels\", &example_labels_t));"
    },
    {
        "line": 49,
        "fullcodeline": "auto example_labels = example_labels_t->flat<float>();"
    },
    {
        "line": 57,
        "fullcodeline": "TF_RETURN_IF_ERROR("
    },
    {
        "line": 60,
        "fullcodeline": "examples_.clear();"
    },
    {
        "line": 61,
        "fullcodeline": "examples_.resize(num_examples);"
    },
    {
        "line": 62,
        "fullcodeline": "probabilities_.resize(num_examples);"
    },
    {
        "line": 63,
        "fullcodeline": "sampled_index_.resize(num_examples);"
    },
    {
        "line": 64,
        "fullcodeline": "sampled_count_.resize(num_examples);"
    },
    {
        "line": 74,
        "fullcodeline": "TF_RETURN_IF_ERROR(CreateSparseFeatureRepresentation("
    },
    {
        "line": 78,
        "fullcodeline": "TF_RETURN_IF_ERROR(CreateDenseFeatureRepresentation("
    },
    {
        "line": 81,
        "fullcodeline": "TF_RETURN_IF_ERROR(ComputeSquaredNormPerExample("
    },
    {
        "line": 11,
        "fullcodeline": "if (sparse_example_indices_inputs.size() != num_sparse_features)"
    },
    {
        "line": 19,
        "fullcodeline": "if (sparse_feature_indices_inputs.size() != num_sparse_features)"
    },
    {
        "line": 25,
        "fullcodeline": "if (num_sparse_features_with_values > 0) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (example_weights.size() >= std::numeric_limits<int>::max()) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (example_labels.size() != num_examples) {"
    },
    {
        "line": 58,
        "fullcodeline": "context->input_list(\"dense_features\", &dense_features_inputs));"
    },
    {
        "line": 65,
        "fullcodeline": "for (int example_id = 0; example_id < num_examples; ++example_id) {"
    },
    {
        "line": 84,
        "fullcodeline": "return OkStatus();"
    },
    {
        "line": 26,
        "fullcodeline": "TF_RETURN_IF_ERROR(context->input_list(\"sparse_feature_values\","
    },
    {
        "line": 66,
        "fullcodeline": "Example* const example = &examples_[example_id];"
    },
    {
        "line": 67,
        "fullcodeline": "example->sparse_features_.resize(num_sparse_features);"
    },
    {
        "line": 68,
        "fullcodeline": "example->dense_vectors_.resize(num_dense_features);"
    },
    {
        "line": 69,
        "fullcodeline": "example->example_weight_ = example_weights(example_id);"
    },
    {
        "line": 70,
        "fullcodeline": "example->example_label_ = example_labels(example_id);"
    },
    {
        "line": 73,
        "fullcodeline": "*context->device()->tensorflow_cpu_worker_threads();"
    },
    {
        "line": 12,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 20,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 28,
        "fullcodeline": "if (sparse_feature_values_inputs.size() != num_sparse_features_with_values)"
    },
    {
        "line": 40,
        "fullcodeline": "return errors::InvalidArgument(strings::Printf("
    },
    {
        "line": 51,
        "fullcodeline": "return errors::InvalidArgument(\"Expected \", num_examples,"
    },
    {
        "line": 15,
        "fullcodeline": "sparse_example_indices_inputs.size());"
    },
    {
        "line": 23,
        "fullcodeline": "sparse_feature_indices_inputs.size());"
    },
    {
        "line": 53,
        "fullcodeline": "example_labels.size());"
    },
    {
        "line": 29,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 41,
        "fullcodeline": "\"Too many examples in a mini-batch: %zu > %d\", example_weights.size(),"
    },
    {
        "line": 32,
        "fullcodeline": "sparse_feature_values_inputs.size());"
    }
]