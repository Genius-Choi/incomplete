[
    {
        "line": 2,
        "fullcodeline": "ASCIIColors.yellow(\"Getting all extensions\")"
    },
    {
        "line": 3,
        "fullcodeline": "extensions_folder = lollmsElfServer.lollms_paths.extensions_zoo_path"
    },
    {
        "line": 4,
        "fullcodeline": "extensions = {}"
    },
    {
        "line": 6,
        "fullcodeline": "for category_folder in  extensions_folder.iterdir():"
    },
    {
        "line": 7,
        "fullcodeline": "cat = category_folder.stem"
    },
    {
        "line": 8,
        "fullcodeline": "if category_folder.is_dir() and not category_folder.stem.startswith('.'):"
    },
    {
        "line": 9,
        "fullcodeline": "extensions[category_folder.name] = []"
    },
    {
        "line": 10,
        "fullcodeline": "for extensions_folder in category_folder.iterdir():"
    },
    {
        "line": 11,
        "fullcodeline": "ext = extensions_folder.stem"
    },
    {
        "line": 12,
        "fullcodeline": "if extensions_folder.is_dir() and not extensions_folder.stem.startswith('.'):"
    },
    {
        "line": 13,
        "fullcodeline": "extension_info = {\"folder\":extensions_folder.stem}"
    },
    {
        "line": 14,
        "fullcodeline": "config_path = extensions_folder / 'config.yaml'"
    },
    {
        "line": 15,
        "fullcodeline": "if not config_path.exists():"
    },
    {
        "line": 28,
        "fullcodeline": "real_assets_path = extensions_folder/ 'assets'"
    },
    {
        "line": 29,
        "fullcodeline": "assets_path = Path(\"extensions\") / cat / ext / 'assets'"
    },
    {
        "line": 30,
        "fullcodeline": "gif_logo_path = assets_path / 'logo.gif'"
    },
    {
        "line": 31,
        "fullcodeline": "webp_logo_path = assets_path / 'logo.webp'"
    },
    {
        "line": 32,
        "fullcodeline": "png_logo_path = assets_path / 'logo.png'"
    },
    {
        "line": 33,
        "fullcodeline": "jpg_logo_path = assets_path / 'logo.jpg'"
    },
    {
        "line": 34,
        "fullcodeline": "jpeg_logo_path = assets_path / 'logo.jpeg'"
    },
    {
        "line": 35,
        "fullcodeline": "svg_logo_path = assets_path / 'logo.svg'"
    },
    {
        "line": 36,
        "fullcodeline": "bmp_logo_path = assets_path / 'logo.bmp'"
    },
    {
        "line": 38,
        "fullcodeline": "gif_logo_path_ = real_assets_path / 'logo.gif'"
    },
    {
        "line": 39,
        "fullcodeline": "webp_logo_path_ = real_assets_path / 'logo.webp'"
    },
    {
        "line": 40,
        "fullcodeline": "png_logo_path_ = real_assets_path / 'logo.png'"
    },
    {
        "line": 41,
        "fullcodeline": "jpg_logo_path_ = real_assets_path / 'logo.jpg'"
    },
    {
        "line": 42,
        "fullcodeline": "jpeg_logo_path_ = real_assets_path / 'logo.jpeg'"
    },
    {
        "line": 43,
        "fullcodeline": "svg_logo_path_ = real_assets_path / 'logo.svg'"
    },
    {
        "line": 44,
        "fullcodeline": "bmp_logo_path_ = real_assets_path / 'logo.bmp'"
    },
    {
        "line": 46,
        "fullcodeline": "extension_info['has_logo'] = png_logo_path.is_file() or gif_logo_path.is_file()"
    },
    {
        "line": 18,
        "fullcodeline": "with open(config_path) as config_file:"
    },
    {
        "line": 48,
        "fullcodeline": "if gif_logo_path_.exists():"
    },
    {
        "line": 65,
        "fullcodeline": "extensions[category_folder.name].append(extension_info)"
    },
    {
        "line": 49,
        "fullcodeline": "extension_info['avatar'] = str(gif_logo_path).replace(\"\\\\\",\"/\")"
    },
    {
        "line": 67,
        "fullcodeline": "ASCIIColors.warning(f\"Couldn't load personality from {extensions_folder} [{ex}]\")"
    },
    {
        "line": 68,
        "fullcodeline": "trace_exception(ex)"
    },
    {
        "line": 19,
        "fullcodeline": "config_data = yaml.load(config_file, Loader=yaml.FullLoader)"
    },
    {
        "line": 20,
        "fullcodeline": "extension_info['name'] = config_data.get('name',\"No Name\")"
    },
    {
        "line": 21,
        "fullcodeline": "extension_info['author'] = config_data.get('author', 'ParisNeo')"
    },
    {
        "line": 22,
        "fullcodeline": "extension_info['based_on'] = config_data.get('based_on',\"\")"
    },
    {
        "line": 23,
        "fullcodeline": "extension_info['description'] = config_data.get('description',\"\")"
    },
    {
        "line": 24,
        "fullcodeline": "extension_info['version'] = config_data.get('version', '1.0.0')"
    },
    {
        "line": 25,
        "fullcodeline": "extension_info['installed'] = (lollmsElfServer.lollms_paths.personal_configuration_path/f\"personality_{extensions_folder.stem}.yaml\").exists()"
    },
    {
        "line": 26,
        "fullcodeline": "extension_info['help'] = config_data.get('help', '')"
    },
    {
        "line": 50,
        "fullcodeline": "elif webp_logo_path_.exists():"
    },
    {
        "line": 51,
        "fullcodeline": "extension_info['avatar'] = str(webp_logo_path).replace(\"\\\\\",\"/\")"
    },
    {
        "line": 52,
        "fullcodeline": "elif png_logo_path_.exists():"
    },
    {
        "line": 53,
        "fullcodeline": "extension_info['avatar'] = str(png_logo_path).replace(\"\\\\\",\"/\")"
    },
    {
        "line": 54,
        "fullcodeline": "elif jpg_logo_path_.exists():"
    },
    {
        "line": 55,
        "fullcodeline": "extension_info['avatar'] = str(jpg_logo_path).replace(\"\\\\\",\"/\")"
    },
    {
        "line": 56,
        "fullcodeline": "elif jpeg_logo_path_.exists():"
    },
    {
        "line": 57,
        "fullcodeline": "extension_info['avatar'] = str(jpeg_logo_path).replace(\"\\\\\",\"/\")"
    },
    {
        "line": 58,
        "fullcodeline": "elif svg_logo_path_.exists():"
    },
    {
        "line": 59,
        "fullcodeline": "extension_info['avatar'] = str(svg_logo_path).replace(\"\\\\\",\"/\")"
    },
    {
        "line": 60,
        "fullcodeline": "elif bmp_logo_path_.exists():"
    },
    {
        "line": 61,
        "fullcodeline": "extension_info['avatar'] = str(bmp_logo_path).replace(\"\\\\\",\"/\")"
    },
    {
        "line": 63,
        "fullcodeline": "extension_info['avatar'] = \"\""
    }
]