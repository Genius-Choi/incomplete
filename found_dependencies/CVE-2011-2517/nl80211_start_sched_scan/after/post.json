[
    {
        "line": 9,
        "fullcodeline": "int err, tmp, n_ssids = 0, n_channels, i;"
    },
    {
        "line": 27,
        "fullcodeline": "interval = nla_get_u32(info->attrs[NL80211_ATTR_SCHED_SCAN_INTERVAL]);"
    },
    {
        "line": 31,
        "fullcodeline": "wiphy = &rdev->wiphy;"
    },
    {
        "line": 47,
        "fullcodeline": "nla_for_each_nested(attr, info->attrs[NL80211_ATTR_SCAN_SSIDS],"
    },
    {
        "line": 49,
        "fullcodeline": "n_ssids++;"
    },
    {
        "line": 62,
        "fullcodeline": "request = kzalloc(sizeof(*request)"
    },
    {
        "line": 71,
        "fullcodeline": "request->n_ssids = n_ssids;"
    },
    {
        "line": 79,
        "fullcodeline": "i = 0;"
    },
    {
        "line": 126,
        "fullcodeline": "request->n_channels = i;"
    },
    {
        "line": 128,
        "fullcodeline": "i = 0;"
    },
    {
        "line": 151,
        "fullcodeline": "request->dev = dev;"
    },
    {
        "line": 152,
        "fullcodeline": "request->wiphy = &rdev->wiphy;"
    },
    {
        "line": 153,
        "fullcodeline": "request->interval = interval;"
    },
    {
        "line": 155,
        "fullcodeline": "err = rdev->ops->sched_scan_start(&rdev->wiphy, dev, request);"
    },
    {
        "line": 164,
        "fullcodeline": "kfree(request);"
    },
    {
        "line": 14,
        "fullcodeline": "if (!(rdev->wiphy.flags & WIPHY_FLAG_SUPPORTS_SCHED_SCAN) ||"
    },
    {
        "line": 18,
        "fullcodeline": "if (!is_valid_ie_attr(info->attrs[NL80211_ATTR_IE]))"
    },
    {
        "line": 28,
        "fullcodeline": "if (interval == 0)"
    },
    {
        "line": 51,
        "fullcodeline": "if (n_ssids > wiphy->max_scan_ssids)"
    },
    {
        "line": 59,
        "fullcodeline": "if (ie_len > wiphy->max_scan_ie_len)"
    },
    {
        "line": 66,
        "fullcodeline": "if (!request)"
    },
    {
        "line": 121,
        "fullcodeline": "if (!i) {"
    },
    {
        "line": 156,
        "fullcodeline": "if (!err) {"
    },
    {
        "line": 34,
        "fullcodeline": "n_channels = validate_scan_freqs("
    },
    {
        "line": 55,
        "fullcodeline": "ie_len = nla_len(info->attrs[NL80211_ATTR_IE]);"
    },
    {
        "line": 82,
        "fullcodeline": "nla_for_each_nested(attr,"
    },
    {
        "line": 122,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 130,
        "fullcodeline": "nla_for_each_nested(attr, info->attrs[NL80211_ATTR_SCAN_SSIDS],"
    },
    {
        "line": 145,
        "fullcodeline": "request->ie_len = nla_len(info->attrs[NL80211_ATTR_IE]);"
    },
    {
        "line": 146,
        "fullcodeline": "memcpy((void *)request->ie,"
    },
    {
        "line": 157,
        "fullcodeline": "rdev->sched_scan_req = request;"
    },
    {
        "line": 158,
        "fullcodeline": "nl80211_send_sched_scan(rdev, dev,"
    },
    {
        "line": 16,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 19,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 22,
        "fullcodeline": "return -EINPROGRESS;"
    },
    {
        "line": 25,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 29,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 36,
        "fullcodeline": "if (!n_channels)"
    },
    {
        "line": 39,
        "fullcodeline": "n_channels = 0;"
    },
    {
        "line": 52,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 57,
        "fullcodeline": "ie_len = 0;"
    },
    {
        "line": 60,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 67,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 87,
        "fullcodeline": "chan = ieee80211_get_channel(wiphy, nla_get_u32(attr));"
    },
    {
        "line": 98,
        "fullcodeline": "request->channels[i] = chan;"
    },
    {
        "line": 99,
        "fullcodeline": "i++;"
    },
    {
        "line": 132,
        "fullcodeline": "request->ssids[i].ssid_len = nla_len(attr);"
    },
    {
        "line": 138,
        "fullcodeline": "memcpy(request->ssids[i].ssid, nla_data(attr),"
    },
    {
        "line": 140,
        "fullcodeline": "i++;"
    },
    {
        "line": 147,
        "fullcodeline": "nla_data(info->attrs[NL80211_ATTR_IE]),"
    },
    {
        "line": 41,
        "fullcodeline": "for (band = 0; band < IEEE80211_NUM_BANDS; band++)"
    },
    {
        "line": 64,
        "fullcodeline": "+ sizeof(*request->channels) * n_channels"
    },
    {
        "line": 74,
        "fullcodeline": "request->ie = (void *)(request->ssids + n_ssids);"
    },
    {
        "line": 89,
        "fullcodeline": "if (!chan) {"
    },
    {
        "line": 95,
        "fullcodeline": "if (chan->flags & IEEE80211_CHAN_DISABLED)"
    },
    {
        "line": 103,
        "fullcodeline": "for (band = 0; band < IEEE80211_NUM_BANDS; band++) {"
    },
    {
        "line": 133,
        "fullcodeline": "if (request->ssids[i].ssid_len >"
    },
    {
        "line": 139,
        "fullcodeline": "nla_len(attr));"
    },
    {
        "line": 37,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 63,
        "fullcodeline": "+ sizeof(*request->ssids) * n_ssids"
    },
    {
        "line": 76,
        "fullcodeline": "request->ie = (void *)(request->channels + n_channels);"
    },
    {
        "line": 90,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 135,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 43,
        "fullcodeline": "n_channels += wiphy->bands[band]->n_channels;"
    },
    {
        "line": 105,
        "fullcodeline": "if (!wiphy->bands[band])"
    },
    {
        "line": 107,
        "fullcodeline": "for (j = 0; j < wiphy->bands[band]->n_channels; j++) {"
    },
    {
        "line": 115,
        "fullcodeline": "request->channels[i] = chan;"
    },
    {
        "line": 116,
        "fullcodeline": "i++;"
    },
    {
        "line": 112,
        "fullcodeline": "if (chan->flags & IEEE80211_CHAN_DISABLED)"
    }
]