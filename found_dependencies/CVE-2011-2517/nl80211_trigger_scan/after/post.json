[
    {
        "line": 8,
        "fullcodeline": "int err, tmp, n_ssids = 0, n_channels, i;"
    },
    {
        "line": 15,
        "fullcodeline": "wiphy = &rdev->wiphy;"
    },
    {
        "line": 37,
        "fullcodeline": "nla_for_each_nested(attr, info->attrs[NL80211_ATTR_SCAN_SSIDS], tmp)"
    },
    {
        "line": 38,
        "fullcodeline": "n_ssids++;"
    },
    {
        "line": 51,
        "fullcodeline": "request = kzalloc(sizeof(*request)"
    },
    {
        "line": 60,
        "fullcodeline": "request->n_ssids = n_ssids;"
    },
    {
        "line": 68,
        "fullcodeline": "i = 0;"
    },
    {
        "line": 113,
        "fullcodeline": "request->n_channels = i;"
    },
    {
        "line": 115,
        "fullcodeline": "i = 0;"
    },
    {
        "line": 135,
        "fullcodeline": "request->dev = dev;"
    },
    {
        "line": 136,
        "fullcodeline": "request->wiphy = &rdev->wiphy;"
    },
    {
        "line": 138,
        "fullcodeline": "rdev->scan_req = request;"
    },
    {
        "line": 139,
        "fullcodeline": "err = rdev->ops->scan(&rdev->wiphy, dev, request);"
    },
    {
        "line": 12,
        "fullcodeline": "if (!is_valid_ie_attr(info->attrs[NL80211_ATTR_IE]))"
    },
    {
        "line": 40,
        "fullcodeline": "if (n_ssids > wiphy->max_scan_ssids)"
    },
    {
        "line": 48,
        "fullcodeline": "if (ie_len > wiphy->max_scan_ie_len)"
    },
    {
        "line": 55,
        "fullcodeline": "if (!request)"
    },
    {
        "line": 108,
        "fullcodeline": "if (!i) {"
    },
    {
        "line": 141,
        "fullcodeline": "if (!err) {"
    },
    {
        "line": 24,
        "fullcodeline": "n_channels = validate_scan_freqs("
    },
    {
        "line": 44,
        "fullcodeline": "ie_len = nla_len(info->attrs[NL80211_ATTR_IE]);"
    },
    {
        "line": 71,
        "fullcodeline": "nla_for_each_nested(attr, info->attrs[NL80211_ATTR_SCAN_FREQUENCIES], tmp) {"
    },
    {
        "line": 109,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 117,
        "fullcodeline": "nla_for_each_nested(attr, info->attrs[NL80211_ATTR_SCAN_SSIDS], tmp) {"
    },
    {
        "line": 129,
        "fullcodeline": "request->ie_len = nla_len(info->attrs[NL80211_ATTR_IE]);"
    },
    {
        "line": 130,
        "fullcodeline": "memcpy((void *)request->ie,"
    },
    {
        "line": 142,
        "fullcodeline": "nl80211_send_scan_start(rdev, dev);"
    },
    {
        "line": 143,
        "fullcodeline": "dev_hold(dev);"
    },
    {
        "line": 13,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 18,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 21,
        "fullcodeline": "return -EBUSY;"
    },
    {
        "line": 26,
        "fullcodeline": "if (!n_channels)"
    },
    {
        "line": 29,
        "fullcodeline": "n_channels = 0;"
    },
    {
        "line": 41,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 46,
        "fullcodeline": "ie_len = 0;"
    },
    {
        "line": 49,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 56,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 74,
        "fullcodeline": "chan = ieee80211_get_channel(wiphy, nla_get_u32(attr));"
    },
    {
        "line": 85,
        "fullcodeline": "request->channels[i] = chan;"
    },
    {
        "line": 86,
        "fullcodeline": "i++;"
    },
    {
        "line": 118,
        "fullcodeline": "request->ssids[i].ssid_len = nla_len(attr);"
    },
    {
        "line": 123,
        "fullcodeline": "memcpy(request->ssids[i].ssid, nla_data(attr), nla_len(attr));"
    },
    {
        "line": 124,
        "fullcodeline": "i++;"
    },
    {
        "line": 131,
        "fullcodeline": "nla_data(info->attrs[NL80211_ATTR_IE]),"
    },
    {
        "line": 146,
        "fullcodeline": "rdev->scan_req = NULL;"
    },
    {
        "line": 147,
        "fullcodeline": "kfree(request);"
    },
    {
        "line": 31,
        "fullcodeline": "for (band = 0; band < IEEE80211_NUM_BANDS; band++)"
    },
    {
        "line": 53,
        "fullcodeline": "+ sizeof(*request->channels) * n_channels"
    },
    {
        "line": 63,
        "fullcodeline": "request->ie = (void *)(request->ssids + n_ssids);"
    },
    {
        "line": 76,
        "fullcodeline": "if (!chan) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (chan->flags & IEEE80211_CHAN_DISABLED)"
    },
    {
        "line": 90,
        "fullcodeline": "for (band = 0; band < IEEE80211_NUM_BANDS; band++) {"
    },
    {
        "line": 119,
        "fullcodeline": "if (request->ssids[i].ssid_len > IEEE80211_MAX_SSID_LEN) {"
    },
    {
        "line": 27,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 52,
        "fullcodeline": "+ sizeof(*request->ssids) * n_ssids"
    },
    {
        "line": 65,
        "fullcodeline": "request->ie = (void *)(request->channels + n_channels);"
    },
    {
        "line": 77,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 120,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 33,
        "fullcodeline": "n_channels += wiphy->bands[band]->n_channels;"
    },
    {
        "line": 92,
        "fullcodeline": "if (!wiphy->bands[band])"
    },
    {
        "line": 94,
        "fullcodeline": "for (j = 0; j < wiphy->bands[band]->n_channels; j++) {"
    },
    {
        "line": 102,
        "fullcodeline": "request->channels[i] = chan;"
    },
    {
        "line": 103,
        "fullcodeline": "i++;"
    },
    {
        "line": 99,
        "fullcodeline": "if (chan->flags & IEEE80211_CHAN_DISABLED)"
    }
]