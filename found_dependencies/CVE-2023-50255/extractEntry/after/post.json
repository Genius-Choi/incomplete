[
    {
        "line": 8,
        "fullcodeline": "strFileName = m_common->trans2uft8(statBuffer.name, m_mapFileCode[index]);    // \u89e3\u538b\u6587\u4ef6\u540d\uff08\u538b\u7f29\u5305\u4e2d\uff09"
    },
    {
        "line": 16,
        "fullcodeline": "QString strOriginName = strFileName;"
    },
    {
        "line": 29,
        "fullcodeline": "QString strTempFileName = strFileName;"
    },
    {
        "line": 30,
        "fullcodeline": "int iIndex = strFileName.lastIndexOf(QDir::separator());"
    },
    {
        "line": 99,
        "fullcodeline": "bool bIsDirectory = strFileName.endsWith(QDir::separator());    // \u662f\u5426\u4e3a\u6587\u4ef6\u5939"
    },
    {
        "line": 106,
        "fullcodeline": "QString strDestFileName = options.strTargetPath + QDir::separator() + strFileName;"
    },
    {
        "line": 108,
        "fullcodeline": "QFile file(strDestFileName);"
    },
    {
        "line": 120,
        "fullcodeline": "const bool restoreParentMtime = (parentDir != options.strTargetPath);"
    },
    {
        "line": 135,
        "fullcodeline": "mode_t value = mode_t();"
    },
    {
        "line": 143,
        "fullcodeline": "bool isLink = false;"
    },
    {
        "line": 147,
        "fullcodeline": "QFileDevice::Permissions per = getPermissions(value);"
    },
    {
        "line": 338,
        "fullcodeline": "m_mapLongName[tempFilePathName]++;   // \u4fdd\u5b58\u6587\u4ef6\u8def\u5f84\uff0c\u4e0d\u540c\u76ee\u5f55\u4e0b\u7684\u540c\u540d\u6587\u4ef6\u5206\u5f00\u8ba1\u6570\uff0c\u89e3\u538b\u6210\u529f\uff0c\u6dfb\u52a0\u8ba1\u6570"
    },
    {
        "line": 4,
        "fullcodeline": "if (zip_stat_index(archive, zip_uint64_t(index), ZIP_FL_ENC_RAW, &statBuffer) != 0) {"
    },
    {
        "line": 10,
        "fullcodeline": "if(strFileName.indexOf(\"../\") != -1) {"
    },
    {
        "line": 14,
        "fullcodeline": "if(strFileName.contains(QLatin1Char('\\\\')))"
    },
    {
        "line": 32,
        "fullcodeline": "if (iIndex >= 0) {"
    },
    {
        "line": 38,
        "fullcodeline": "if(!m_bDlnfs) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (!options.strDestination.isEmpty()) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (QDir().exists(options.strTargetPath) == false)"
    },
    {
        "line": 112,
        "fullcodeline": "if (strFileName.endsWith(QDir::separator())) {"
    },
    {
        "line": 130,
        "fullcodeline": "if (zip_file_get_external_attributes(archive, zip_uint64_t(index), ZIP_FL_UNCHANGED, &opsys, &attributes) == -1) {"
    },
    {
        "line": 144,
        "fullcodeline": "if(S_ISLNK(value)) {"
    },
    {
        "line": 149,
        "fullcodeline": "if (bIsDirectory && !isLink) {     // \u6587\u4ef6\u5939"
    },
    {
        "line": 323,
        "fullcodeline": "if(!isLink) {"
    },
    {
        "line": 11,
        "fullcodeline": "qInfo() << \"skipped ../ path component(s) in \" << strFileName;"
    },
    {
        "line": 12,
        "fullcodeline": "strFileName = strFileName.replace(\"../\", \"\");"
    },
    {
        "line": 15,
        "fullcodeline": "strFileName = strFileName.replace(QLatin1Char('\\\\'), QDir::separator());"
    },
    {
        "line": 33,
        "fullcodeline": "strFilePath = strFileName.left(iIndex);   // bug114527 left\u51fd\u6570\u53c2\u6570\u4e3a\u622a\u53d6\u7684\u5b57\u7b26\u4e32\u957f\u5ea6"
    },
    {
        "line": 34,
        "fullcodeline": "strTempFileName = strFileName.right(strFileName.length() - iIndex - 1);"
    },
    {
        "line": 39,
        "fullcodeline": "QString sDir = m_common->handleLongNameforPath(strFilePath, strFileName, m_mapLongDirName, m_mapRealDirValue);"
    },
    {
        "line": 94,
        "fullcodeline": "emit signalCurFileName(strOriginName); // \u53d1\u9001\u5f53\u524d\u6b63\u5728\u89e3\u538b\u7684\u6587\u4ef6\u540d"
    },
    {
        "line": 103,
        "fullcodeline": "QDir().mkpath(options.strTargetPath);"
    },
    {
        "line": 113,
        "fullcodeline": "QDir pDir = QFileInfo(strDestFileName).dir();"
    },
    {
        "line": 114,
        "fullcodeline": "pDir.cdUp();"
    },
    {
        "line": 115,
        "fullcodeline": "parentDir = pDir.path();"
    },
    {
        "line": 124,
        "fullcodeline": "parent_mtime = QFileInfo(parentDir).lastModified().toMSecsSinceEpoch() / 1000;"
    },
    {
        "line": 131,
        "fullcodeline": "emit error((\"Failed to read metadata for entry: %1\"));"
    },
    {
        "line": 138,
        "fullcodeline": "value = attributes >> 16;"
    },
    {
        "line": 145,
        "fullcodeline": "isLink = true;"
    },
    {
        "line": 154,
        "fullcodeline": "dir.mkpath(strDestFileName);"
    },
    {
        "line": 157,
        "fullcodeline": "per = per | QFileDevice::ReadUser | QFileDevice::WriteUser | QFileDevice::ExeUser ;"
    },
    {
        "line": 325,
        "fullcodeline": "file.setPermissions(per);"
    },
    {
        "line": 329,
        "fullcodeline": "times.modtime = statBuffer.mtime;"
    },
    {
        "line": 330,
        "fullcodeline": "utime(strDestFileName.toUtf8().constData(), &times);"
    },
    {
        "line": 40,
        "fullcodeline": "if(sDir.length() > 0) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (NAME_MAX < QString(strTempFileName).toLocal8Bit().length() && !strTempFileName.endsWith(QDir::separator())) {"
    },
    {
        "line": 96,
        "fullcodeline": "emit signalCurFileName(strFileName); // \u53d1\u9001\u5f53\u524d\u6b63\u5728\u89e3\u538b\u7684\u6587\u4ef6\u540d"
    },
    {
        "line": 117,
        "fullcodeline": "parentDir = QFileInfo(strDestFileName).path();"
    },
    {
        "line": 150,
        "fullcodeline": "if (PATH_MAX < QString(strFileName).toLocal8Bit().length())"
    },
    {
        "line": 41,
        "fullcodeline": "strFilePath = sDir.endsWith(QDir::separator())?sDir.left(sDir.length() -1):sDir;"
    },
    {
        "line": 52,
        "fullcodeline": "QString strTemp = strTempFileName.left(TRUNCATION_FILE_LONG);"
    },
    {
        "line": 55,
        "fullcodeline": "tempFilePathName = strFilePath + QDir::separator() + strTemp;   // \u8def\u5f84\u52a0\u622a\u53d6\u540e\u7684\u6587\u4ef6\u540d"
    },
    {
        "line": 59,
        "fullcodeline": "bHandleLongName = true;"
    },
    {
        "line": 60,
        "fullcodeline": "QString sSuffix = QFileInfo(strTempFileName).completeSuffix();"
    },
    {
        "line": 67,
        "fullcodeline": "strTempFileName = strTemp + QString(\"(%1)\").arg(m_mapLongName[tempFilePathName] + 1, LONGFILE_SUFFIX_FieldWidth, BINARY_NUM, QChar('0')) + \".\" + sSuffix;"
    },
    {
        "line": 69,
        "fullcodeline": "strFileName = strTempFileName;"
    },
    {
        "line": 80,
        "fullcodeline": "int nCnt = options.strDestination.count(QDir::separator());"
    },
    {
        "line": 81,
        "fullcodeline": "int nIndex = 0;"
    },
    {
        "line": 86,
        "fullcodeline": "strFileName = strFileName.remove(0, nIndex);"
    },
    {
        "line": 334,
        "fullcodeline": "times.modtime = parent_mtime;"
    },
    {
        "line": 335,
        "fullcodeline": "utime(parentDir.toUtf8().constData(), &times);"
    },
    {
        "line": 42,
        "fullcodeline": "if(strFileName.endsWith(QDir::separator())) {"
    },
    {
        "line": 47,
        "fullcodeline": "if(!m_mapLongDirName.isEmpty()) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (m_mapLongName[tempFilePathName] >= LONGFILE_SAME_FILES ) {"
    },
    {
        "line": 61,
        "fullcodeline": "if(10 < sSuffix.length()){"
    },
    {
        "line": 70,
        "fullcodeline": "if (iIndex >= 0) {"
    },
    {
        "line": 82,
        "fullcodeline": "for(int i = 0; i < nCnt; i++){"
    },
    {
        "line": 88,
        "fullcodeline": "strFileName = strFileName.remove(0, options.strDestination.size());"
    },
    {
        "line": 159,
        "fullcodeline": "zip_file_t *zipFile = zip_fopen_index(archive, zip_uint64_t(index), 0);"
    },
    {
        "line": 160,
        "fullcodeline": "char buf[READBYTES] = {0};"
    },
    {
        "line": 161,
        "fullcodeline": "const auto readBytes = zip_fread(zipFile, buf, zip_uint64_t(READBYTES));"
    },
    {
        "line": 170,
        "fullcodeline": "file.close();"
    },
    {
        "line": 171,
        "fullcodeline": "zip_fclose(zipFile);"
    },
    {
        "line": 43,
        "fullcodeline": "strFileName = sDir;"
    },
    {
        "line": 48,
        "fullcodeline": "bHandleLongName = true;"
    },
    {
        "line": 62,
        "fullcodeline": "sSuffix = QFileInfo(strTempFileName).suffix();"
    },
    {
        "line": 71,
        "fullcodeline": "strFileName = strFilePath + QDir::separator() + strTempFileName;"
    },
    {
        "line": 83,
        "fullcodeline": "nIndex = strFileName.indexOf(QDir::separator(), nIndex);"
    },
    {
        "line": 84,
        "fullcodeline": "nIndex++;"
    },
    {
        "line": 162,
        "fullcodeline": "if (readBytes > 0) {"
    },
    {
        "line": 219,
        "fullcodeline": "zip_file_t *zipFile = zip_fopen_index(archive, zip_uint64_t(index), 0);"
    },
    {
        "line": 272,
        "fullcodeline": "QDataStream out(&file);"
    },
    {
        "line": 273,
        "fullcodeline": "zip_int64_t sum = 0;"
    },
    {
        "line": 274,
        "fullcodeline": "char buf[READBYTES];"
    },
    {
        "line": 275,
        "fullcodeline": "int writeSize = 0;"
    },
    {
        "line": 276,
        "fullcodeline": "double dScale = 1;"
    },
    {
        "line": 320,
        "fullcodeline": "file.close();"
    },
    {
        "line": 321,
        "fullcodeline": "zip_fclose(zipFile);"
    },
    {
        "line": 63,
        "fullcodeline": "if(10 < sSuffix.length()) {"
    },
    {
        "line": 163,
        "fullcodeline": "QString strBuf = QString(buf).toLocal8Bit();"
    },
    {
        "line": 175,
        "fullcodeline": "if (file.exists()) {"
    },
    {
        "line": 209,
        "fullcodeline": "if (file.exists() && !file.isWritable()) {"
    },
    {
        "line": 216,
        "fullcodeline": "if (QDir().exists(QFileInfo(strDestFileName).path()) == false)"
    },
    {
        "line": 221,
        "fullcodeline": "if (nullptr == zipFile) {"
    },
    {
        "line": 256,
        "fullcodeline": "if (file.open(QIODevice::WriteOnly) == false) {"
    },
    {
        "line": 278,
        "fullcodeline": "if (!options.bExistList) {"
    },
    {
        "line": 281,
        "fullcodeline": "while (sum != zip_int64_t(statBuffer.size)) {"
    },
    {
        "line": 44,
        "fullcodeline": "} else if (NAME_MAX >= QString(strTempFileName).toLocal8Bit().length()) {"
    },
    {
        "line": 64,
        "fullcodeline": "sSuffix = sSuffix.right(10);"
    },
    {
        "line": 164,
        "fullcodeline": "if (QFile::link(strBuf, strDestFileName)) {"
    },
    {
        "line": 205,
        "fullcodeline": "m_setLongName << strFileName;"
    },
    {
        "line": 210,
        "fullcodeline": "file.remove();"
    },
    {
        "line": 211,
        "fullcodeline": "file.setFileName(strDestFileName);"
    },
    {
        "line": 212,
        "fullcodeline": "file.setPermissions(QFileDevice::WriteUser);"
    },
    {
        "line": 217,
        "fullcodeline": "QDir().mkpath(QFileInfo(strDestFileName).path());"
    },
    {
        "line": 222,
        "fullcodeline": "int iErr = zip_error_code_zip(zip_get_error(archive));"
    },
    {
        "line": 257,
        "fullcodeline": "zip_fclose(zipFile);"
    },
    {
        "line": 259,
        "fullcodeline": "QList<QString> entryNameList = strDestFileName.split('/');"
    },
    {
        "line": 267,
        "fullcodeline": "emit signalFileWriteErrorName(QFileInfo(file.fileName()).fileName());"
    },
    {
        "line": 279,
        "fullcodeline": "dScale = double(statBuffer.comp_size) / statBuffer.size;"
    },
    {
        "line": 291,
        "fullcodeline": "const auto readBytes = zip_fread(zipFile, buf, zip_uint64_t(READBYTES));"
    },
    {
        "line": 312,
        "fullcodeline": "sum += readBytes;"
    },
    {
        "line": 313,
        "fullcodeline": "writeSize += readBytes;"
    },
    {
        "line": 316,
        "fullcodeline": "qExtractSize += readBytes * dScale;"
    },
    {
        "line": 317,
        "fullcodeline": "emit signalprogress((double(qExtractSize)) * m_dScaleSize);"
    },
    {
        "line": 45,
        "fullcodeline": "strFileName = sDir + strTempFileName;"
    },
    {
        "line": 165,
        "fullcodeline": "qInfo() << \"Symlink's created:\" << buf << strFileName;"
    },
    {
        "line": 223,
        "fullcodeline": "if (ZIP_ER_WRONGPASSWD == iErr) {//\u5bc6\u7801\u9519\u8bef"
    },
    {
        "line": 282,
        "fullcodeline": "if (QThread::currentThread()->isInterruptionRequested()) {"
    },
    {
        "line": 293,
        "fullcodeline": "if (readBytes < 0) {"
    },
    {
        "line": 300,
        "fullcodeline": "if (out.writeRawData(buf, int(readBytes)) != readBytes) {"
    },
    {
        "line": 167,
        "fullcodeline": "qInfo() << \"Can't create symlink\" << buf << strFileName;"
    },
    {
        "line": 177,
        "fullcodeline": "m_mapLongName[tempFilePathName]++;   // \u4fdd\u5b58\u6587\u4ef6\u8def\u5f84\uff0c\u4e0d\u540c\u76ee\u5f55\u4e0b\u7684\u540c\u540d\u6587\u4ef6\u5206\u5f00\u8ba1\u6570\uff0c\u89e3\u538b\u6210\u529f\uff0c\u6dfb\u52a0\u8ba1\u6570"
    },
    {
        "line": 226,
        "fullcodeline": "bool bCheckFinished = false;"
    },
    {
        "line": 227,
        "fullcodeline": "int iCodecIndex = 0;"
    },
    {
        "line": 287,
        "fullcodeline": "sleep(1);"
    },
    {
        "line": 294,
        "fullcodeline": "file.close();"
    },
    {
        "line": 295,
        "fullcodeline": "zip_fclose(zipFile);"
    },
    {
        "line": 296,
        "fullcodeline": "emit signalFileWriteErrorName(QFileInfo(file.fileName()).fileName());"
    },
    {
        "line": 301,
        "fullcodeline": "file.close();"
    },
    {
        "line": 302,
        "fullcodeline": "zip_fclose(zipFile);"
    },
    {
        "line": 228,
        "fullcodeline": "while (nullptr == zipFile && false == bCheckFinished) {"
    },
    {
        "line": 304,
        "fullcodeline": "if (isInsufficientDiskSpace(options.strTargetPath, static_cast<qint64>(readBytes))) {  // \u5c0f\u4e8ereadBytes\u4f5c\u4e3a\u78c1\u76d8\u7a7a\u95f4\u4e0d\u8db3\u7684\u5224\u65ad\u6807\u51c6"
    },
    {
        "line": 180,
        "fullcodeline": "if (!m_bOverwriteAll) {     // \u82e5\u4e0d\u662f\u5168\u90e8\u8986\u76d6\uff0c\u5355\u6761\u5904\u7406"
    },
    {
        "line": 248,
        "fullcodeline": "} else if (ZIP_ER_NOPASSWD == iErr) {   // \u65e0\u5bc6\u7801\u8f93\u5165"
    },
    {
        "line": 182,
        "fullcodeline": "OverwriteQuery query(strDestFileName);"
    },
    {
        "line": 184,
        "fullcodeline": "emit signalQuery(&query);"
    },
    {
        "line": 185,
        "fullcodeline": "query.waitForResponse();"
    },
    {
        "line": 229,
        "fullcodeline": "if (m_listCodecs.length() == iCodecIndex) {"
    },
    {
        "line": 307,
        "fullcodeline": "emit signalFileWriteErrorName(QFileInfo(file.fileName()).fileName());"
    },
    {
        "line": 187,
        "fullcodeline": "if (query.responseCancelled()) {"
    },
    {
        "line": 230,
        "fullcodeline": "bCheckFinished = true;"
    },
    {
        "line": 231,
        "fullcodeline": "if (file.exists()) {"
    },
    {
        "line": 238,
        "fullcodeline": "zip_set_default_password(archive, passwordUnicode(m_strPassword, iCodecIndex).data());"
    },
    {
        "line": 239,
        "fullcodeline": "iCodecIndex++;"
    },
    {
        "line": 240,
        "fullcodeline": "zip_error_clear(archive);"
    },
    {
        "line": 241,
        "fullcodeline": "zipFile = zip_fopen_index(archive, zip_uint64_t(index), 0);"
    },
    {
        "line": 242,
        "fullcodeline": "iErr = zip_error_code_zip(zip_get_error(archive));"
    },
    {
        "line": 232,
        "fullcodeline": "file.remove();"
    },
    {
        "line": 243,
        "fullcodeline": "if (iErr != ZIP_ER_WRONGPASSWD && zipFile != nullptr) {//\u5bc6\u7801\u6b63\u786e"
    },
    {
        "line": 190,
        "fullcodeline": "} else if (query.responseSkip()) {"
    },
    {
        "line": 244,
        "fullcodeline": "bCheckFinished = true;"
    },
    {
        "line": 191,
        "fullcodeline": "m_mapLongName[tempFilePathName]++;   // \u4fdd\u5b58\u6587\u4ef6\u8def\u5f84\uff0c\u4e0d\u540c\u76ee\u5f55\u4e0b\u7684\u540c\u540d\u6587\u4ef6\u5206\u5f00\u8ba1\u6570\uff0c\u89e3\u538b\u6210\u529f\uff0c\u6dfb\u52a0\u8ba1\u6570"
    },
    {
        "line": 193,
        "fullcodeline": "} else if (query.responseSkipAll()) {"
    },
    {
        "line": 194,
        "fullcodeline": "m_bSkipAll = true;"
    },
    {
        "line": 195,
        "fullcodeline": "m_mapLongName[tempFilePathName]++;   // \u4fdd\u5b58\u6587\u4ef6\u8def\u5f84\uff0c\u4e0d\u540c\u76ee\u5f55\u4e0b\u7684\u540c\u540d\u6587\u4ef6\u5206\u5f00\u8ba1\u6570\uff0c\u89e3\u538b\u6210\u529f\uff0c\u6dfb\u52a0\u8ba1\u6570"
    },
    {
        "line": 197,
        "fullcodeline": "}  else if (query.responseOverwriteAll()) {"
    },
    {
        "line": 198,
        "fullcodeline": "m_bOverwriteAll = true;"
    }
]