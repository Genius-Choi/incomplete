[
    {
        "line": 4,
        "fullcodeline": "if (length > SMKTREE_DECODE_MAX_RECURSION) {"
    },
    {
        "line": 9,
        "fullcodeline": "if (!bitstream_read_bit(bc)) { // Leaf"
    },
    {
        "line": 5,
        "fullcodeline": "av_log(NULL, AV_LOG_ERROR, \"Maximum tree recursion level exceeded.\\n\");"
    },
    {
        "line": 21,
        "fullcodeline": "hc->values[hc->current] = bitstream_read(bc, 8);"
    },
    {
        "line": 22,
        "fullcodeline": "hc->current++;"
    },
    {
        "line": 10,
        "fullcodeline": "if(hc->current >= 256){"
    },
    {
        "line": 23,
        "fullcodeline": "if(hc->maxlength < length)"
    },
    {
        "line": 28,
        "fullcodeline": "length++;"
    },
    {
        "line": 29,
        "fullcodeline": "r = smacker_decode_tree(bc, hc, prefix, length);"
    },
    {
        "line": 11,
        "fullcodeline": "av_log(NULL, AV_LOG_ERROR, \"Tree size exceeded!\\n\");"
    },
    {
        "line": 15,
        "fullcodeline": "hc->bits[hc->current] = prefix;"
    },
    {
        "line": 16,
        "fullcodeline": "hc->lengths[hc->current] = length;"
    },
    {
        "line": 24,
        "fullcodeline": "hc->maxlength = length;"
    },
    {
        "line": 32,
        "fullcodeline": "return smacker_decode_tree(bc, hc, prefix | (1 << (length - 1)), length);"
    },
    {
        "line": 18,
        "fullcodeline": "hc->bits[hc->current] = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "hc->lengths[hc->current] = 0;"
    }
]