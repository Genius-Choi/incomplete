[
    {
        "line": 3,
        "fullcodeline": "int first_arg = 0, ret = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "libcrun_context_t crun_context = {"
    },
    {
        "line": 7,
        "fullcodeline": "cleanup_process_schema runtime_spec_schema_config_schema_process *process = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "memset (&exec_opts, 0, sizeof (exec_opts));"
    },
    {
        "line": 13,
        "fullcodeline": "crun_context.preserve_fds = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "crun_context.listen_fds = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "argp_parse (&run_argp, argc, argv, ARGP_IN_ORDER, &first_arg, &exec_options);"
    },
    {
        "line": 17,
        "fullcodeline": "crun_assert_n_args (argc - first_arg, exec_options.process ? 1 : 2, -1);"
    },
    {
        "line": 19,
        "fullcodeline": "ret = init_libcrun_context (&crun_context, argv[first_arg], global_args, err);"
    },
    {
        "line": 23,
        "fullcodeline": "crun_context.detach = exec_options.detach;"
    },
    {
        "line": 24,
        "fullcodeline": "crun_context.console_socket = exec_options.console_socket;"
    },
    {
        "line": 25,
        "fullcodeline": "crun_context.pid_file = exec_options.pid_file;"
    },
    {
        "line": 26,
        "fullcodeline": "crun_context.preserve_fds = exec_options.preserve_fds;"
    },
    {
        "line": 90,
        "fullcodeline": "exec_opts.cgroup = exec_options.cgroup;"
    },
    {
        "line": 20,
        "fullcodeline": "if (UNLIKELY (ret < 0))"
    },
    {
        "line": 28,
        "fullcodeline": "if (getenv (\"LISTEN_FDS\"))"
    },
    {
        "line": 92,
        "fullcodeline": "return libcrun_container_exec_with_options (&crun_context, argv[first_arg], &exec_opts, err);"
    },
    {
        "line": 30,
        "fullcodeline": "crun_context.listen_fds = strtoll (getenv (\"LISTEN_FDS\"), NULL, 10);"
    },
    {
        "line": 31,
        "fullcodeline": "crun_context.preserve_fds += crun_context.listen_fds;"
    },
    {
        "line": 35,
        "fullcodeline": "exec_opts.path = exec_options.process;"
    },
    {
        "line": 41,
        "fullcodeline": "process->args_len = argc;"
    },
    {
        "line": 42,
        "fullcodeline": "process->args = xmalloc0 ((argc + 1) * sizeof (*process->args));"
    },
    {
        "line": 45,
        "fullcodeline": "process->args[i] = NULL;"
    },
    {
        "line": 48,
        "fullcodeline": "process->terminal = exec_options.tty;"
    },
    {
        "line": 49,
        "fullcodeline": "process->env = exec_options.env;"
    },
    {
        "line": 50,
        "fullcodeline": "process->env_len = exec_options.env_size;"
    },
    {
        "line": 51,
        "fullcodeline": "process->user = make_oci_process_user (exec_options.user);"
    },
    {
        "line": 87,
        "fullcodeline": "exec_opts.process = process;"
    },
    {
        "line": 43,
        "fullcodeline": "for (i = 0; i < argc - first_arg; i++)"
    },
    {
        "line": 44,
        "fullcodeline": "process->args[i] = xstrdup (argv[first_arg + i + 1]);"
    },
    {
        "line": 53,
        "fullcodeline": "if (exec_options.process_label != NULL)"
    },
    {
        "line": 56,
        "fullcodeline": "if (exec_options.apparmor != NULL)"
    },
    {
        "line": 59,
        "fullcodeline": "if (exec_options.cap_size > 0)"
    },
    {
        "line": 47,
        "fullcodeline": "process->cwd = exec_options.cwd;"
    },
    {
        "line": 54,
        "fullcodeline": "process->selinux_label = exec_options.process_label;"
    },
    {
        "line": 57,
        "fullcodeline": "process->apparmor_profile = exec_options.apparmor;"
    },
    {
        "line": 64,
        "fullcodeline": "capabilities->effective = exec_options.cap;"
    },
    {
        "line": 65,
        "fullcodeline": "capabilities->effective_len = exec_options.cap_size;"
    },
    {
        "line": 67,
        "fullcodeline": "capabilities->inheritable = dup_array (exec_options.cap, exec_options.cap_size);"
    },
    {
        "line": 68,
        "fullcodeline": "capabilities->inheritable_len = exec_options.cap_size;"
    },
    {
        "line": 70,
        "fullcodeline": "capabilities->bounding = dup_array (exec_options.cap, exec_options.cap_size);"
    },
    {
        "line": 71,
        "fullcodeline": "capabilities->bounding_len = exec_options.cap_size;"
    },
    {
        "line": 73,
        "fullcodeline": "capabilities->ambient = dup_array (exec_options.cap, exec_options.cap_size);"
    },
    {
        "line": 74,
        "fullcodeline": "capabilities->ambient_len = exec_options.cap_size;"
    },
    {
        "line": 76,
        "fullcodeline": "capabilities->permitted = dup_array (exec_options.cap, exec_options.cap_size);"
    },
    {
        "line": 77,
        "fullcodeline": "capabilities->permitted_len = exec_options.cap_size;"
    },
    {
        "line": 79,
        "fullcodeline": "process->capabilities = capabilities;"
    },
    {
        "line": 85,
        "fullcodeline": "process->no_new_privileges = 1;"
    }
]