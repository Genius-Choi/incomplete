[
    {
        "line": 13,
        "fullcodeline": "(void)memcpy(xnh_addr, &nbuf[offset], xnh_sizeof);"
    },
    {
        "line": 14,
        "fullcodeline": "offset += xnh_sizeof;"
    },
    {
        "line": 16,
        "fullcodeline": "namesz = xnh_namesz;"
    },
    {
        "line": 17,
        "fullcodeline": "descsz = xnh_descsz;"
    },
    {
        "line": 39,
        "fullcodeline": "doff = ELF_ALIGN(offset + namesz);"
    },
    {
        "line": 48,
        "fullcodeline": "offset = ELF_ALIGN(doff + descsz);"
    },
    {
        "line": 18,
        "fullcodeline": "if ((namesz == 0) && (descsz == 0)) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (namesz & 0x80000000) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (descsz & 0x80000000) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (offset + namesz > size) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (doff + descsz > size) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (namesz == 4 && strcmp((char *)&nbuf[noff], \"PaX\") == 0 &&"
    },
    {
        "line": 173,
        "fullcodeline": "if (namesz == 8 && strcmp((char *)&nbuf[noff], \"FreeBSD\") == 0) {"
    },
    {
        "line": 181,
        "fullcodeline": "if (namesz == 8 && strcmp((char *)&nbuf[noff], \"OpenBSD\") == 0 &&"
    },
    {
        "line": 56,
        "fullcodeline": "if ((*flags & (FLAGS_DID_NOTE|FLAGS_DID_BUILD_ID)) =="
    },
    {
        "line": 57,
        "fullcodeline": "(FLAGS_DID_NOTE|FLAGS_DID_BUILD_ID))"
    },
    {
        "line": 60,
        "fullcodeline": "if (namesz == 5 && strcmp((char *)&nbuf[noff], \"SuSE\") == 0 &&"
    },
    {
        "line": 61,
        "fullcodeline": "xnh_type == NT_GNU_VERSION && descsz == 2) {"
    },
    {
        "line": 62,
        "fullcodeline": "file_printf(ms, \", for SuSE %d.%d\", nbuf[doff], nbuf[doff + 1]);"
    },
    {
        "line": 64,
        "fullcodeline": "if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&"
    },
    {
        "line": 65,
        "fullcodeline": "xnh_type == NT_GNU_VERSION && descsz == 16) {"
    },
    {
        "line": 103,
        "fullcodeline": "if (namesz == 4 && strcmp((char *)&nbuf[noff], \"GNU\") == 0 &&"
    },
    {
        "line": 104,
        "fullcodeline": "xnh_type == NT_GNU_BUILD_ID && (descsz == 16 || descsz == 20)) {"
    },
    {
        "line": 105,
        "fullcodeline": "uint8_t desc[20];"
    },
    {
        "line": 114,
        "fullcodeline": "*flags |= FLAGS_DID_BUILD_ID;"
    },
    {
        "line": 118,
        "fullcodeline": "xnh_type == NT_NETBSD_PAX && descsz == 4) {"
    },
    {
        "line": 119,
        "fullcodeline": "static const char *pax[] = {"
    },
    {
        "line": 129,
        "fullcodeline": "int did = 0;"
    },
    {
        "line": 132,
        "fullcodeline": "desc = elf_getu32(swap, desc);"
    },
    {
        "line": 146,
        "fullcodeline": "if (namesz == 7 && strcmp((char *)&nbuf[noff], \"NetBSD\") == 0) {"
    },
    {
        "line": 182,
        "fullcodeline": "xnh_type == NT_OPENBSD_VERSION && descsz == 4) {"
    },
    {
        "line": 190,
        "fullcodeline": "if (namesz == 10 && strcmp((char *)&nbuf[noff], \"DragonFly\") == 0 &&"
    },
    {
        "line": 191,
        "fullcodeline": "xnh_type == NT_DRAGONFLY_VERSION && descsz == 4) {"
    },
    {
        "line": 196,
        "fullcodeline": "desc = elf_getu32(swap, desc);"
    },
    {
        "line": 219,
        "fullcodeline": "if ((namesz == 4 && strncmp((char *)&nbuf[noff], \"CORE\", 4) == 0) ||"
    },
    {
        "line": 220,
        "fullcodeline": "(namesz == 5 && strcmp((char *)&nbuf[noff], \"CORE\") == 0)) {"
    },
    {
        "line": 221,
        "fullcodeline": "os_style = OS_STYLE_SVR4;"
    },
    {
        "line": 224,
        "fullcodeline": "if ((namesz == 8 && strcmp((char *)&nbuf[noff], \"FreeBSD\") == 0)) {"
    },
    {
        "line": 225,
        "fullcodeline": "os_style = OS_STYLE_FREEBSD;"
    },
    {
        "line": 228,
        "fullcodeline": "if ((namesz >= 11 && strncmp((char *)&nbuf[noff], \"NetBSD-CORE\", 11)"
    },
    {
        "line": 230,
        "fullcodeline": "os_style = OS_STYLE_NETBSD;"
    },
    {
        "line": 22,
        "fullcodeline": "return (offset >= size) ? offset : size;"
    },
    {
        "line": 26,
        "fullcodeline": "(void)file_printf(ms, \", bad note name size 0x%lx\","
    },
    {
        "line": 32,
        "fullcodeline": "(void)file_printf(ms, \", bad note description size 0x%lx\","
    },
    {
        "line": 53,
        "fullcodeline": "return (offset >= size) ? offset : size;"
    },
    {
        "line": 66,
        "fullcodeline": "uint32_t desc[4];"
    },
    {
        "line": 67,
        "fullcodeline": "(void)memcpy(desc, &nbuf[doff], sizeof(desc));"
    },
    {
        "line": 71,
        "fullcodeline": "switch (elf_getu32(swap, desc[0])) {"
    },
    {
        "line": 110,
        "fullcodeline": "(void)memcpy(desc, &nbuf[doff], descsz);"
    },
    {
        "line": 111,
        "fullcodeline": "for (i = 0; i < descsz; i++)"
    },
    {
        "line": 131,
        "fullcodeline": "(void)memcpy(&desc, &nbuf[doff], sizeof(desc));"
    },
    {
        "line": 134,
        "fullcodeline": "if (desc && file_printf(ms, \", PaX: \") == -1)"
    },
    {
        "line": 137,
        "fullcodeline": "for (i = 0; i < __arraycount(pax); i++) {"
    },
    {
        "line": 174,
        "fullcodeline": "if (xnh_type == NT_FREEBSD_VERSION && descsz == 4) {"
    },
    {
        "line": 195,
        "fullcodeline": "(void)memcpy(&desc, &nbuf[doff], sizeof(desc));"
    },
    {
        "line": 69,
        "fullcodeline": "if (file_printf(ms, \", for GNU/\") == -1)"
    },
    {
        "line": 96,
        "fullcodeline": "if (file_printf(ms, \" %d.%d.%d\", elf_getu32(swap, desc[1]),"
    },
    {
        "line": 97,
        "fullcodeline": "elf_getu32(swap, desc[2]), elf_getu32(swap, desc[3])) == -1)"
    },
    {
        "line": 107,
        "fullcodeline": "if (file_printf(ms, \", BuildID[%s]=\", descsz == 16 ? \"md5/uuid\" :"
    },
    {
        "line": 108,
        "fullcodeline": "\"sha1\") == -1)"
    },
    {
        "line": 183,
        "fullcodeline": "if (file_printf(ms, \", for OpenBSD\") == -1)"
    },
    {
        "line": 193,
        "fullcodeline": "if (file_printf(ms, \", for DragonFly\") == -1)"
    },
    {
        "line": 197,
        "fullcodeline": "if (file_printf(ms, \" %d.%d.%d\", desc / 100000,"
    },
    {
        "line": 198,
        "fullcodeline": "desc / 10000 % 10, desc % 10000) == -1)"
    },
    {
        "line": 112,
        "fullcodeline": "if (file_printf(ms, \"%02x\", desc[i]) == -1)"
    },
    {
        "line": 73,
        "fullcodeline": "if (file_printf(ms, \"Linux\") == -1)"
    },
    {
        "line": 77,
        "fullcodeline": "if (file_printf(ms, \"Hurd\") == -1)"
    },
    {
        "line": 81,
        "fullcodeline": "if (file_printf(ms, \"Solaris\") == -1)"
    },
    {
        "line": 85,
        "fullcodeline": "if (file_printf(ms, \"kFreeBSD\") == -1)"
    },
    {
        "line": 89,
        "fullcodeline": "if (file_printf(ms, \"kNetBSD\") == -1)"
    },
    {
        "line": 93,
        "fullcodeline": "if (file_printf(ms, \"<unknown>\") == -1)"
    },
    {
        "line": 138,
        "fullcodeline": "if (((1 << i) & desc) == 0)"
    },
    {
        "line": 140,
        "fullcodeline": "if (file_printf(ms, \"%s%s\", did++ ? \",\" : \"\","
    },
    {
        "line": 141,
        "fullcodeline": "pax[i]) == -1)"
    },
    {
        "line": 156,
        "fullcodeline": "if (file_printf(ms, \", compiled for: %.*s\", (int)descsz,"
    },
    {
        "line": 157,
        "fullcodeline": "(const char *)&nbuf[doff]) == -1)"
    },
    {
        "line": 161,
        "fullcodeline": "if (file_printf(ms, \", compiler model: %.*s\","
    },
    {
        "line": 162,
        "fullcodeline": "(int)descsz, (const char *)&nbuf[doff]) == -1)"
    },
    {
        "line": 166,
        "fullcodeline": "if (file_printf(ms, \", note=%u\", xnh_type) == -1)"
    }
]