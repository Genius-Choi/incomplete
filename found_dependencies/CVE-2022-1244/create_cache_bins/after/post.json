[
    {
        "line": 2,
        "fullcodeline": "RList *bins = r_list_newf ((RListFree)free_bin);"
    },
    {
        "line": 3,
        "fullcodeline": "ut16 *depArray = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "cache_imgxtr_t *extras = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "char *target_libs = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "RList *target_lib_names = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "int *deps = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "target_libs = r_sys_getenv (\"R_DYLDCACHE_FILTER\");"
    },
    {
        "line": 164,
        "fullcodeline": "R_FREE (deps);"
    },
    {
        "line": 165,
        "fullcodeline": "R_FREE (target_libs);"
    },
    {
        "line": 166,
        "fullcodeline": "r_list_free (target_lib_names);"
    },
    {
        "line": 5,
        "fullcodeline": "if (!bins) {"
    },
    {
        "line": 28,
        "fullcodeline": "for (i = 0; i < cache->n_hdr; i++) {"
    },
    {
        "line": 160,
        "fullcodeline": "if (r_list_empty (bins)) {"
    },
    {
        "line": 14,
        "fullcodeline": "target_lib_names = r_str_split_list (target_libs, \":\", 0);"
    },
    {
        "line": 32,
        "fullcodeline": "cache_img_t *img = read_cache_images (cache->buf, hdr, hdr_offset);"
    },
    {
        "line": 156,
        "fullcodeline": "R_FREE (depArray);"
    },
    {
        "line": 157,
        "fullcodeline": "R_FREE (extras);"
    },
    {
        "line": 158,
        "fullcodeline": "R_FREE (img);"
    },
    {
        "line": 161,
        "fullcodeline": "r_list_free (bins);"
    },
    {
        "line": 162,
        "fullcodeline": "bins = NULL;"
    },
    {
        "line": 15,
        "fullcodeline": "if (!target_lib_names) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (!deps) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (!img) {"
    },
    {
        "line": 102,
        "fullcodeline": "for (j = 0; j < hdr->imagesCount; j++) {"
    },
    {
        "line": 16,
        "fullcodeline": "r_list_free (bins);"
    },
    {
        "line": 21,
        "fullcodeline": "r_list_free (bins);"
    },
    {
        "line": 22,
        "fullcodeline": "r_list_free (target_lib_names);"
    },
    {
        "line": 39,
        "fullcodeline": "HtPU *path_to_idx = NULL;"
    },
    {
        "line": 97,
        "fullcodeline": "ht_pu_free (path_to_idx);"
    },
    {
        "line": 98,
        "fullcodeline": "R_FREE (depArray);"
    },
    {
        "line": 99,
        "fullcodeline": "R_FREE (extras);"
    },
    {
        "line": 107,
        "fullcodeline": "ut64 pa = va2pa (img[j].address, cache->n_maps, &cache->maps[maps_index], cache->buf, 0, NULL, NULL);"
    },
    {
        "line": 111,
        "fullcodeline": "ut8 magicbytes[4];"
    },
    {
        "line": 112,
        "fullcodeline": "r_buf_read_at (cache->buf, pa, magicbytes, 4);"
    },
    {
        "line": 113,
        "fullcodeline": "int magic = r_read_le32 (magicbytes);"
    },
    {
        "line": 58,
        "fullcodeline": "for (j = 0; j < hdr->imagesCount; j++) {"
    },
    {
        "line": 103,
        "fullcodeline": "if (deps && !deps[j]) {"
    },
    {
        "line": 108,
        "fullcodeline": "if (pa == UT64_MAX) {"
    },
    {
        "line": 41,
        "fullcodeline": "depArray = R_NEWS0 (ut16, cache->accel->depListCount);"
    },
    {
        "line": 50,
        "fullcodeline": "extras = read_cache_imgextra (cache->buf, hdr, cache->accel);"
    },
    {
        "line": 59,
        "fullcodeline": "bool printing = !deps[j];"
    },
    {
        "line": 60,
        "fullcodeline": "char *lib_name = get_lib_name (cache->buf, &img[j]);"
    },
    {
        "line": 74,
        "fullcodeline": "R_FREE (lib_name);"
    },
    {
        "line": 75,
        "fullcodeline": "deps[j]++;"
    },
    {
        "line": 151,
        "fullcodeline": "eprintf (\"Unknown sub-bin\\n\");"
    },
    {
        "line": 42,
        "fullcodeline": "if (!depArray) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (r_buf_fread_at (cache->buf, cache->accel->depListOffset, (ut8*) depArray, \"s\", cache->accel->depListCount) != cache->accel->depListCount * 2) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (!extras) {"
    },
    {
        "line": 55,
        "fullcodeline": "path_to_idx = create_path_to_index (cache->buf, img, hdr);"
    },
    {
        "line": 61,
        "fullcodeline": "if (!lib_name) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (strstr (lib_name, \"libobjc.A.dylib\")) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (!r_list_find (target_lib_names, lib_name, string_contains)) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (extras && depArray) {"
    },
    {
        "line": 117,
        "fullcodeline": "char file[256];"
    },
    {
        "line": 118,
        "fullcodeline": "RDyldBinImage *bin = R_NEW0 (RDyldBinImage);"
    },
    {
        "line": 122,
        "fullcodeline": "bin->header_at = pa;"
    },
    {
        "line": 123,
        "fullcodeline": "bin->hdr_offset = hdr_offset;"
    },
    {
        "line": 124,
        "fullcodeline": "bin->symbols_off = resolve_symbols_off (cache, pa);"
    },
    {
        "line": 125,
        "fullcodeline": "bin->va = img[j].address;"
    },
    {
        "line": 147,
        "fullcodeline": "r_list_append (bins, bin);"
    },
    {
        "line": 65,
        "fullcodeline": "deps[j]++;"
    },
    {
        "line": 68,
        "fullcodeline": "R_FREE (lib_name);"
    },
    {
        "line": 72,
        "fullcodeline": "eprintf (\"FILTER: %s\\n\", lib_name);"
    },
    {
        "line": 119,
        "fullcodeline": "if (!bin) {"
    },
    {
        "line": 126,
        "fullcodeline": "if (r_buf_read_at (cache->buf, img[j].pathFileOffset, (ut8*) &file, sizeof (file)) == sizeof (file)) {"
    },
    {
        "line": 79,
        "fullcodeline": "for (k = extras[j].dependentsStartArrayIndex; depArray[k] != 0xffff; k++) {"
    },
    {
        "line": 127,
        "fullcodeline": "file[255] = 0;"
    },
    {
        "line": 128,
        "fullcodeline": "char *last_slash = strrchr (file, '/');"
    },
    {
        "line": 80,
        "fullcodeline": "ut16 dep_index = depArray[k] & 0x7fff;"
    },
    {
        "line": 81,
        "fullcodeline": "deps[dep_index]++;"
    },
    {
        "line": 83,
        "fullcodeline": "char *dep_name = get_lib_name (cache->buf, &img[dep_index]);"
    },
    {
        "line": 90,
        "fullcodeline": "free (dep_name);"
    },
    {
        "line": 129,
        "fullcodeline": "if (last_slash && *last_slash) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (!dep_name) {"
    },
    {
        "line": 93,
        "fullcodeline": "carve_deps_at_address (cache, img, path_to_idx, img[j].address, deps, printing);"
    },
    {
        "line": 88,
        "fullcodeline": "eprintf (\"-> %s\\n\", dep_name);"
    },
    {
        "line": 130,
        "fullcodeline": "if (last_slash > file) {"
    },
    {
        "line": 144,
        "fullcodeline": "bin->file = strdup (file);"
    },
    {
        "line": 131,
        "fullcodeline": "char *scan = last_slash - 1;"
    },
    {
        "line": 132,
        "fullcodeline": "while (scan > file && *scan != '/') {"
    },
    {
        "line": 135,
        "fullcodeline": "if (*scan == '/') {"
    },
    {
        "line": 141,
        "fullcodeline": "bin->file = strdup (last_slash + 1);"
    },
    {
        "line": 133,
        "fullcodeline": "scan--;"
    },
    {
        "line": 136,
        "fullcodeline": "bin->file = strdup (scan + 1);"
    },
    {
        "line": 138,
        "fullcodeline": "bin->file = strdup (last_slash + 1);"
    }
]