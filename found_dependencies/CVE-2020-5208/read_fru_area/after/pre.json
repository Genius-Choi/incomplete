[
    {
        "line": 4,
        "fullcodeline": "uint32_t off = offset;"
    },
    {
        "line": 10,
        "fullcodeline": "uint8_t msg_data[4];"
    },
    {
        "line": 18,
        "fullcodeline": "finish = offset + length;"
    },
    {
        "line": 28,
        "fullcodeline": "memset(&req, 0, sizeof(req));"
    },
    {
        "line": 29,
        "fullcodeline": "req.msg.netfn = IPMI_NETFN_STORAGE;"
    },
    {
        "line": 30,
        "fullcodeline": "req.msg.cmd = GET_FRU_DATA;"
    },
    {
        "line": 61,
        "fullcodeline": "size_left_in_buffer = length;"
    },
    {
        "line": 12,
        "fullcodeline": "if (offset > fru->size) {"
    },
    {
        "line": 19,
        "fullcodeline": "if (finish > fru->size) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (fru->max_read_size == 0) {"
    },
    {
        "line": 121,
        "fullcodeline": "} while (off < finish);"
    },
    {
        "line": 13,
        "fullcodeline": "lprintf(LOG_ERR, \"Read FRU Area offset incorrect: %d > %d\","
    },
    {
        "line": 21,
        "fullcodeline": "finish = fru->size;"
    },
    {
        "line": 22,
        "fullcodeline": "lprintf(LOG_NOTICE, \"Read FRU Area length %d too large, \""
    },
    {
        "line": 25,
        "fullcodeline": "length = finish - offset;"
    },
    {
        "line": 35,
        "fullcodeline": "uint16_t max_rs_size = ipmi_intf_get_max_response_data_size(intf) - 1;"
    },
    {
        "line": 63,
        "fullcodeline": "tmp = fru->access ? off >> 1 : off;"
    },
    {
        "line": 67,
        "fullcodeline": "tmp = finish - off;"
    },
    {
        "line": 73,
        "fullcodeline": "rsp = intf->sendrecv(intf, &req);"
    },
    {
        "line": 102,
        "fullcodeline": "tmp = fru->access ? rsp->data[0] << 1 : rsp->data[0];"
    },
    {
        "line": 111,
        "fullcodeline": "memcpy(frubuf, rsp->data + 1, tmp);"
    },
    {
        "line": 112,
        "fullcodeline": "off += tmp;"
    },
    {
        "line": 113,
        "fullcodeline": "frubuf += tmp;"
    },
    {
        "line": 114,
        "fullcodeline": "size_left_in_buffer -= tmp;"
    },
    {
        "line": 15,
        "fullcodeline": "return -1;"
    },
    {
        "line": 20,
        "fullcodeline": "memset(frubuf + fru->size, 0, length - fru->size);"
    },
    {
        "line": 24,
        "fullcodeline": "offset + length, finish - offset);"
    },
    {
        "line": 38,
        "fullcodeline": "if (max_rs_size <= 1) {"
    },
    {
        "line": 65,
        "fullcodeline": "msg_data[1] = (uint8_t)(tmp & 0xff);"
    },
    {
        "line": 66,
        "fullcodeline": "msg_data[2] = (uint8_t)(tmp >> 8);"
    },
    {
        "line": 68,
        "fullcodeline": "if (tmp > fru->max_read_size)"
    },
    {
        "line": 74,
        "fullcodeline": "if (!rsp) {"
    },
    {
        "line": 124,
        "fullcodeline": "return -1;"
    },
    {
        "line": 39,
        "fullcodeline": "lprintf(LOG_ERROR, \"Maximum response size is too small to send \""
    },
    {
        "line": 47,
        "fullcodeline": "if (max_rs_size - 1 > 255) {"
    },
    {
        "line": 49,
        "fullcodeline": "fru->max_read_size = 255;"
    },
    {
        "line": 57,
        "fullcodeline": "fru->max_read_size &= ~1;"
    },
    {
        "line": 103,
        "fullcodeline": "if(rsp->data_len < 1"
    },
    {
        "line": 105,
        "fullcodeline": "|| tmp > size_left_in_buffer)"
    },
    {
        "line": 118,
        "fullcodeline": "if (tmp == 0 && off < finish) {"
    },
    {
        "line": 41,
        "fullcodeline": "return -1;"
    },
    {
        "line": 52,
        "fullcodeline": "fru->max_read_size = max_rs_size - 1;"
    },
    {
        "line": 98,
        "fullcodeline": "val2str(rsp->ccode, completion_code_vals));"
    },
    {
        "line": 104,
        "fullcodeline": "|| tmp > rsp->data_len - 1"
    },
    {
        "line": 108,
        "fullcodeline": "return -1;"
    },
    {
        "line": 81,
        "fullcodeline": "if (fru_cc_rq2big(rsp->ccode)"
    },
    {
        "line": 82,
        "fullcodeline": "&& fru->max_read_size > FRU_BLOCK_SZ)"
    },
    {
        "line": 92,
        "fullcodeline": "lprintf(LOG_INFO, \"Retrying FRU read with request size %d\","
    },
    {
        "line": 84,
        "fullcodeline": "if (fru->max_read_size > FRU_AREA_MAXIMUM_BLOCK_SZ) {"
    },
    {
        "line": 86,
        "fullcodeline": "fru->max_read_size -= FRU_BLOCK_SZ;"
    },
    {
        "line": 89,
        "fullcodeline": "fru->max_read_size--;"
    }
]