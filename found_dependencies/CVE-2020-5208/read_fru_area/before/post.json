[
    {
        "line": 4,
        "fullcodeline": "uint32_t off = offset, tmp, finish;"
    },
    {
        "line": 7,
        "fullcodeline": "uint8_t msg_data[4];"
    },
    {
        "line": 15,
        "fullcodeline": "finish = offset + length;"
    },
    {
        "line": 23,
        "fullcodeline": "memset(&req, 0, sizeof(req));"
    },
    {
        "line": 24,
        "fullcodeline": "req.msg.netfn = IPMI_NETFN_STORAGE;"
    },
    {
        "line": 25,
        "fullcodeline": "req.msg.cmd = GET_FRU_DATA;"
    },
    {
        "line": 26,
        "fullcodeline": "req.msg.data = msg_data;"
    },
    {
        "line": 27,
        "fullcodeline": "req.msg.data_len = 4;"
    },
    {
        "line": 9,
        "fullcodeline": "if (offset > fru->size) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (finish > fru->size) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (fru->max_read_size == 0) {"
    },
    {
        "line": 106,
        "fullcodeline": "} while (off < finish);"
    },
    {
        "line": 108,
        "fullcodeline": "if (off < finish) {"
    },
    {
        "line": 10,
        "fullcodeline": "lprintf(LOG_ERR, \"Read FRU Area offset incorrect: %d > %d\","
    },
    {
        "line": 17,
        "fullcodeline": "finish = fru->size;"
    },
    {
        "line": 18,
        "fullcodeline": "lprintf(LOG_NOTICE, \"Read FRU Area length %d too large, \""
    },
    {
        "line": 30,
        "fullcodeline": "uint16_t max_rs_size = ipmi_intf_get_max_response_data_size(intf) - 1;"
    },
    {
        "line": 57,
        "fullcodeline": "tmp = fru->access ? off >> 1 : off;"
    },
    {
        "line": 58,
        "fullcodeline": "msg_data[0] = id;"
    },
    {
        "line": 59,
        "fullcodeline": "msg_data[1] = (uint8_t)(tmp & 0xff);"
    },
    {
        "line": 60,
        "fullcodeline": "msg_data[2] = (uint8_t)(tmp >> 8);"
    },
    {
        "line": 61,
        "fullcodeline": "tmp = finish - off;"
    },
    {
        "line": 67,
        "fullcodeline": "rsp = intf->sendrecv(intf, &req);"
    },
    {
        "line": 96,
        "fullcodeline": "tmp = fru->access ? rsp->data[0] << 1 : rsp->data[0];"
    },
    {
        "line": 97,
        "fullcodeline": "memcpy(frubuf, rsp->data + 1, tmp);"
    },
    {
        "line": 98,
        "fullcodeline": "off += tmp;"
    },
    {
        "line": 99,
        "fullcodeline": "frubuf += tmp;"
    },
    {
        "line": 12,
        "fullcodeline": "return -1;"
    },
    {
        "line": 20,
        "fullcodeline": "offset + length, finish - offset);"
    },
    {
        "line": 33,
        "fullcodeline": "if (max_rs_size <= 1) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (max_rs_size - 1 > 255) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (tmp > fru->max_read_size)"
    },
    {
        "line": 68,
        "fullcodeline": "if (!rsp) {"
    },
    {
        "line": 103,
        "fullcodeline": "if (tmp == 0 && off < finish) {"
    },
    {
        "line": 109,
        "fullcodeline": "return -1;"
    },
    {
        "line": 34,
        "fullcodeline": "lprintf(LOG_ERROR, \"Maximum response size is too small to send \""
    },
    {
        "line": 44,
        "fullcodeline": "fru->max_read_size = 255;"
    },
    {
        "line": 52,
        "fullcodeline": "fru->max_read_size &= ~1;"
    },
    {
        "line": 63,
        "fullcodeline": "msg_data[3] = (uint8_t)fru->max_read_size;"
    },
    {
        "line": 69,
        "fullcodeline": "lprintf(LOG_NOTICE, \"FRU Read failed\");"
    },
    {
        "line": 91,
        "fullcodeline": "lprintf(LOG_NOTICE, \"FRU Read failed: %s\","
    },
    {
        "line": 36,
        "fullcodeline": "return -1;"
    },
    {
        "line": 47,
        "fullcodeline": "fru->max_read_size = max_rs_size - 1;"
    },
    {
        "line": 65,
        "fullcodeline": "msg_data[3] = (uint8_t)tmp;"
    },
    {
        "line": 75,
        "fullcodeline": "if (fru_cc_rq2big(rsp->ccode)"
    },
    {
        "line": 92,
        "fullcodeline": "val2str(rsp->ccode, completion_code_vals));"
    },
    {
        "line": 76,
        "fullcodeline": "&& fru->max_read_size > FRU_BLOCK_SZ)"
    },
    {
        "line": 86,
        "fullcodeline": "lprintf(LOG_INFO, \"Retrying FRU read with request size %d\","
    },
    {
        "line": 78,
        "fullcodeline": "if (fru->max_read_size > FRU_AREA_MAXIMUM_BLOCK_SZ) {"
    },
    {
        "line": 80,
        "fullcodeline": "fru->max_read_size -= FRU_BLOCK_SZ;"
    },
    {
        "line": 83,
        "fullcodeline": "fru->max_read_size--;"
    }
]