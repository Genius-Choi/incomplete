[
    {
        "line": 4,
        "fullcodeline": "static uint32_t fru_data_rqst_size = 20;"
    },
    {
        "line": 5,
        "fullcodeline": "uint32_t off = offset, tmp, finish;"
    },
    {
        "line": 8,
        "fullcodeline": "uint8_t msg_data[4];"
    },
    {
        "line": 16,
        "fullcodeline": "finish = offset + length;"
    },
    {
        "line": 24,
        "fullcodeline": "memset(&req, 0, sizeof(req));"
    },
    {
        "line": 25,
        "fullcodeline": "req.msg.netfn = IPMI_NETFN_STORAGE;"
    },
    {
        "line": 26,
        "fullcodeline": "req.msg.cmd = GET_FRU_DATA;"
    },
    {
        "line": 10,
        "fullcodeline": "if (offset > fru->size) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (finish > fru->size) {"
    },
    {
        "line": 76,
        "fullcodeline": "} while (off < finish);"
    },
    {
        "line": 11,
        "fullcodeline": "lprintf(LOG_ERR, \"Read FRU Area offset incorrect: %d > %d\","
    },
    {
        "line": 18,
        "fullcodeline": "finish = fru->size;"
    },
    {
        "line": 19,
        "fullcodeline": "lprintf(LOG_NOTICE, \"Read FRU Area length %d too large, \""
    },
    {
        "line": 33,
        "fullcodeline": "if (fru->access && fru_data_rqst_size > 16)"
    },
    {
        "line": 35,
        "fullcodeline": "fru_data_rqst_size = 16;"
    },
    {
        "line": 37,
        "fullcodeline": "tmp = fru->access ? off >> 1 : off;"
    },
    {
        "line": 41,
        "fullcodeline": "tmp = finish - off;"
    },
    {
        "line": 47,
        "fullcodeline": "rsp = intf->sendrecv(intf, &req);"
    },
    {
        "line": 66,
        "fullcodeline": "tmp = fru->access ? rsp->data[0] << 1 : rsp->data[0];"
    },
    {
        "line": 67,
        "fullcodeline": "memcpy((frubuf + off)-offset, rsp->data + 1, tmp);"
    },
    {
        "line": 68,
        "fullcodeline": "off += tmp;"
    },
    {
        "line": 13,
        "fullcodeline": "return -1;"
    },
    {
        "line": 21,
        "fullcodeline": "offset + length, finish - offset);"
    },
    {
        "line": 39,
        "fullcodeline": "msg_data[1] = (uint8_t)(tmp & 0xff);"
    },
    {
        "line": 40,
        "fullcodeline": "msg_data[2] = (uint8_t)(tmp >> 8);"
    },
    {
        "line": 42,
        "fullcodeline": "if (tmp > fru_data_rqst_size)"
    },
    {
        "line": 48,
        "fullcodeline": "if (!rsp) {"
    },
    {
        "line": 79,
        "fullcodeline": "return -1;"
    },
    {
        "line": 73,
        "fullcodeline": "if (tmp == 0 && off < finish)"
    },
    {
        "line": 62,
        "fullcodeline": "val2str(rsp->ccode, completion_code_vals));"
    },
    {
        "line": 55,
        "fullcodeline": "if (fru_cc_rq2big(rsp->ccode) && (--fru_data_rqst_size > FRU_BLOCK_SZ)) {"
    },
    {
        "line": 56,
        "fullcodeline": "lprintf(LOG_INFO,"
    }
]