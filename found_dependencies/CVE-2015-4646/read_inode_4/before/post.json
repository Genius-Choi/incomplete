[
    {
        "line": 4,
        "fullcodeline": "long long start = sBlk.s.inode_table_start + start_block;"
    },
    {
        "line": 5,
        "fullcodeline": "long long bytes = lookup_entry(inode_table_hash, start);"
    },
    {
        "line": 6,
        "fullcodeline": "char *block_ptr = inode_table + bytes + offset;"
    },
    {
        "line": 9,
        "fullcodeline": "TRACE(\"read_inode: reading inode [%d:%d]\\n\", start_block,  offset);"
    },
    {
        "line": 15,
        "fullcodeline": "SQUASHFS_SWAP_BASE_INODE_HEADER(block_ptr, &header.base);"
    },
    {
        "line": 19,
        "fullcodeline": "i.mode = lookup_type[header.base.inode_type] | header.base.mode;"
    },
    {
        "line": 11,
        "fullcodeline": "if(bytes == -1)"
    },
    {
        "line": 12,
        "fullcodeline": "EXIT_UNSQUASH(\"read_inode: inode table block %lld not found\\n\","
    },
    {
        "line": 133,
        "fullcodeline": "i.data = 0;"
    },
    {
        "line": 134,
        "fullcodeline": "i.xattr = SQUASHFS_INVALID_XATTR;"
    },
    {
        "line": 147,
        "fullcodeline": "EXIT_UNSQUASH(\"Unknown inode type %d in read_inode!\\n\","
    },
    {
        "line": 28,
        "fullcodeline": "SQUASHFS_SWAP_DIR_INODE_HEADER(block_ptr, inode);"
    },
    {
        "line": 30,
        "fullcodeline": "i.data = inode->file_size;"
    },
    {
        "line": 31,
        "fullcodeline": "i.offset = inode->offset;"
    },
    {
        "line": 32,
        "fullcodeline": "i.start = inode->start_block;"
    },
    {
        "line": 33,
        "fullcodeline": "i.xattr = SQUASHFS_INVALID_XATTR;"
    },
    {
        "line": 39,
        "fullcodeline": "SQUASHFS_SWAP_LDIR_INODE_HEADER(block_ptr, inode);"
    },
    {
        "line": 41,
        "fullcodeline": "i.data = inode->file_size;"
    },
    {
        "line": 42,
        "fullcodeline": "i.offset = inode->offset;"
    },
    {
        "line": 43,
        "fullcodeline": "i.start = inode->start_block;"
    },
    {
        "line": 44,
        "fullcodeline": "i.xattr = inode->xattr;"
    },
    {
        "line": 50,
        "fullcodeline": "SQUASHFS_SWAP_REG_INODE_HEADER(block_ptr, inode);"
    },
    {
        "line": 52,
        "fullcodeline": "i.data = inode->file_size;"
    },
    {
        "line": 53,
        "fullcodeline": "i.frag_bytes = inode->fragment == SQUASHFS_INVALID_FRAG"
    },
    {
        "line": 55,
        "fullcodeline": "i.fragment = inode->fragment;"
    },
    {
        "line": 56,
        "fullcodeline": "i.offset = inode->offset;"
    },
    {
        "line": 57,
        "fullcodeline": "i.blocks = inode->fragment == SQUASHFS_INVALID_FRAG ?"
    },
    {
        "line": 61,
        "fullcodeline": "i.start = inode->start_block;"
    },
    {
        "line": 62,
        "fullcodeline": "i.sparse = 0;"
    },
    {
        "line": 63,
        "fullcodeline": "i.block_ptr = block_ptr + sizeof(*inode);"
    },
    {
        "line": 64,
        "fullcodeline": "i.xattr = SQUASHFS_INVALID_XATTR;"
    },
    {
        "line": 70,
        "fullcodeline": "SQUASHFS_SWAP_LREG_INODE_HEADER(block_ptr, inode);"
    },
    {
        "line": 72,
        "fullcodeline": "i.data = inode->file_size;"
    },
    {
        "line": 73,
        "fullcodeline": "i.frag_bytes = inode->fragment == SQUASHFS_INVALID_FRAG"
    },
    {
        "line": 75,
        "fullcodeline": "i.fragment = inode->fragment;"
    },
    {
        "line": 76,
        "fullcodeline": "i.offset = inode->offset;"
    },
    {
        "line": 77,
        "fullcodeline": "i.blocks = inode->fragment == SQUASHFS_INVALID_FRAG ?"
    },
    {
        "line": 81,
        "fullcodeline": "i.start = inode->start_block;"
    },
    {
        "line": 82,
        "fullcodeline": "i.sparse = inode->sparse != 0;"
    },
    {
        "line": 83,
        "fullcodeline": "i.block_ptr = block_ptr + sizeof(*inode);"
    },
    {
        "line": 84,
        "fullcodeline": "i.xattr = inode->xattr;"
    },
    {
        "line": 91,
        "fullcodeline": "SQUASHFS_SWAP_SYMLINK_INODE_HEADER(block_ptr, inode);"
    },
    {
        "line": 93,
        "fullcodeline": "i.symlink = malloc(inode->symlink_size + 1);"
    },
    {
        "line": 97,
        "fullcodeline": "strncpy(i.symlink, block_ptr +"
    },
    {
        "line": 100,
        "fullcodeline": "i.symlink[inode->symlink_size] = '\\0';"
    },
    {
        "line": 101,
        "fullcodeline": "i.data = inode->symlink_size;"
    },
    {
        "line": 115,
        "fullcodeline": "SQUASHFS_SWAP_DEV_INODE_HEADER(block_ptr, inode);"
    },
    {
        "line": 117,
        "fullcodeline": "i.data = inode->rdev;"
    },
    {
        "line": 118,
        "fullcodeline": "i.xattr = SQUASHFS_INVALID_XATTR;"
    },
    {
        "line": 125,
        "fullcodeline": "SQUASHFS_SWAP_LDEV_INODE_HEADER(block_ptr, inode);"
    },
    {
        "line": 127,
        "fullcodeline": "i.data = inode->rdev;"
    },
    {
        "line": 128,
        "fullcodeline": "i.xattr = inode->xattr;"
    },
    {
        "line": 140,
        "fullcodeline": "SQUASHFS_SWAP_LIPC_INODE_HEADER(block_ptr, inode);"
    },
    {
        "line": 142,
        "fullcodeline": "i.data = 0;"
    },
    {
        "line": 143,
        "fullcodeline": "i.xattr = inode->xattr;"
    },
    {
        "line": 94,
        "fullcodeline": "if(i.symlink == NULL)"
    },
    {
        "line": 103,
        "fullcodeline": "if(header.base.inode_type == SQUASHFS_LSYMLINK_TYPE)"
    },
    {
        "line": 54,
        "fullcodeline": "?  0 : inode->file_size % sBlk.s.block_size;"
    },
    {
        "line": 58,
        "fullcodeline": "(i.data + sBlk.s.block_size - 1) >>"
    },
    {
        "line": 60,
        "fullcodeline": "i.data >> sBlk.s.block_log;"
    },
    {
        "line": 74,
        "fullcodeline": "?  0 : inode->file_size % sBlk.s.block_size;"
    },
    {
        "line": 78,
        "fullcodeline": "(inode->file_size + sBlk.s.block_size - 1) >>"
    },
    {
        "line": 80,
        "fullcodeline": "inode->file_size >> sBlk.s.block_log;"
    },
    {
        "line": 95,
        "fullcodeline": "EXIT_UNSQUASH(\"read_inode: failed to malloc \""
    },
    {
        "line": 104,
        "fullcodeline": "SQUASHFS_SWAP_INTS(block_ptr +"
    },
    {
        "line": 108,
        "fullcodeline": "i.xattr = SQUASHFS_INVALID_XATTR;"
    }
]