[
    {
        "line": 5,
        "fullcodeline": "char uuid[16];"
    },
    {
        "line": 8,
        "fullcodeline": "Bool skip_logs = gf_bs_get_cookie(bs) ? GF_TRUE : GF_FALSE;"
    },
    {
        "line": 9,
        "fullcodeline": "Bool is_special = GF_TRUE;"
    },
    {
        "line": 12,
        "fullcodeline": "*outBox = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "start = gf_bs_get_position(bs);"
    },
    {
        "line": 19,
        "fullcodeline": "uuid_type = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "size = (u64) gf_bs_read_u32(bs);"
    },
    {
        "line": 21,
        "fullcodeline": "hdr_size = 4;"
    },
    {
        "line": 48,
        "fullcodeline": "memset(uuid, 0, 16);"
    },
    {
        "line": 104,
        "fullcodeline": "payload_start = gf_bs_get_position(bs);"
    },
    {
        "line": 108,
        "fullcodeline": "end = gf_bs_available(bs);"
    },
    {
        "line": 115,
        "fullcodeline": "newBox->size = size - hdr_size;"
    },
    {
        "line": 162,
        "fullcodeline": "*outBox = newBox;"
    },
    {
        "line": 11,
        "fullcodeline": "if ((bs == NULL) || (outBox == NULL) ) return GF_BAD_PARAM;"
    },
    {
        "line": 13,
        "fullcodeline": "if (gf_bs_available(bs) < 8) {"
    },
    {
        "line": 23,
        "fullcodeline": "if ((size >= 2) && (size <= 4)) {"
    },
    {
        "line": 49,
        "fullcodeline": "if (type == GF_ISOM_BOX_TYPE_UUID ) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (size == 1) {"
    },
    {
        "line": 68,
        "fullcodeline": "if ( size < hdr_size ) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (parent_type && (parent_type == GF_ISOM_BOX_TYPE_TREF)) {"
    },
    {
        "line": 98,
        "fullcodeline": "if (type==GF_ISOM_BOX_TYPE_UUID && !is_special) {"
    },
    {
        "line": 103,
        "fullcodeline": "if (!newBox->type) newBox->type = type;"
    },
    {
        "line": 109,
        "fullcodeline": "if (size - hdr_size > end ) {"
    },
    {
        "line": 129,
        "fullcodeline": "if (e && (e != GF_ISOM_INCOMPLETE_FILE)) {"
    },
    {
        "line": 147,
        "fullcodeline": "if (end-start > size) {"
    },
    {
        "line": 24,
        "fullcodeline": "size = 4;"
    },
    {
        "line": 25,
        "fullcodeline": "type = GF_ISOM_BOX_TYPE_VOID;"
    },
    {
        "line": 53,
        "fullcodeline": "gf_bs_read_data(bs, uuid, 16);"
    },
    {
        "line": 54,
        "fullcodeline": "hdr_size += 16;"
    },
    {
        "line": 55,
        "fullcodeline": "uuid_type = gf_isom_solve_uuid_box(uuid);"
    },
    {
        "line": 63,
        "fullcodeline": "size = gf_bs_read_u64(bs);"
    },
    {
        "line": 64,
        "fullcodeline": "hdr_size += 8;"
    },
    {
        "line": 75,
        "fullcodeline": "newBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_REFT);"
    },
    {
        "line": 77,
        "fullcodeline": "((GF_TrackReferenceTypeBox*)newBox)->reference_type = type;"
    },
    {
        "line": 99,
        "fullcodeline": "memcpy(((GF_UUIDBox *)newBox)->uuid, uuid, 16);"
    },
    {
        "line": 100,
        "fullcodeline": "((GF_UUIDBox *)newBox)->internal_4cc = uuid_type;"
    },
    {
        "line": 110,
        "fullcodeline": "newBox->size = size - hdr_size - end;"
    },
    {
        "line": 111,
        "fullcodeline": "*outBox = newBox;"
    },
    {
        "line": 118,
        "fullcodeline": "e = gf_isom_full_box_read(newBox, bs);"
    },
    {
        "line": 120,
        "fullcodeline": "newBox->size = size;"
    },
    {
        "line": 121,
        "fullcodeline": "end = gf_bs_get_position(bs);"
    },
    {
        "line": 130,
        "fullcodeline": "gf_isom_box_del(newBox);"
    },
    {
        "line": 131,
        "fullcodeline": "*outBox = NULL;"
    },
    {
        "line": 152,
        "fullcodeline": "gf_bs_seek(bs, start+size);"
    },
    {
        "line": 27,
        "fullcodeline": "type = gf_bs_read_u32(bs);"
    },
    {
        "line": 28,
        "fullcodeline": "hdr_size += 4;"
    },
    {
        "line": 50,
        "fullcodeline": "if (gf_bs_available(bs) < 16) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (gf_bs_available(bs) < 8) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (!newBox) return GF_OUT_OF_MEM;"
    },
    {
        "line": 119,
        "fullcodeline": "if (!e) e = gf_isom_box_read(newBox, bs);"
    },
    {
        "line": 123,
        "fullcodeline": "newBox->size = size;"
    },
    {
        "line": 125,
        "fullcodeline": "e = GF_OK;"
    },
    {
        "line": 126,
        "fullcodeline": "end = gf_bs_get_position(bs);"
    },
    {
        "line": 133,
        "fullcodeline": "if (parent_type==GF_ISOM_BOX_TYPE_STSD) {"
    },
    {
        "line": 140,
        "fullcodeline": "if (!skip_logs) {"
    },
    {
        "line": 148,
        "fullcodeline": "if (!skip_logs) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (type == GF_ISOM_BOX_TYPE_TOTL)"
    },
    {
        "line": 32,
        "fullcodeline": "if (!size) {"
    },
    {
        "line": 78,
        "fullcodeline": "} else if (parent_type && (parent_type == GF_ISOM_BOX_TYPE_IREF)) {"
    },
    {
        "line": 134,
        "fullcodeline": "newBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_UNKNOWN);"
    },
    {
        "line": 135,
        "fullcodeline": "((GF_UnknownBox *)newBox)->original_4cc = type;"
    },
    {
        "line": 136,
        "fullcodeline": "newBox->size = size;"
    },
    {
        "line": 137,
        "fullcodeline": "gf_bs_seek(bs, payload_start);"
    },
    {
        "line": 153,
        "fullcodeline": "} else if (end-start < size) {"
    },
    {
        "line": 31,
        "fullcodeline": "size = 12;"
    },
    {
        "line": 79,
        "fullcodeline": "newBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_REFI);"
    },
    {
        "line": 81,
        "fullcodeline": "((GF_ItemReferenceTypeBox*)newBox)->reference_type = type;"
    },
    {
        "line": 154,
        "fullcodeline": "u32 to_skip = (u32) (size-(end-start));"
    },
    {
        "line": 160,
        "fullcodeline": "gf_bs_skip_bytes(bs, to_skip);"
    },
    {
        "line": 80,
        "fullcodeline": "if (!newBox) return GF_OUT_OF_MEM;"
    },
    {
        "line": 155,
        "fullcodeline": "if (!skip_logs) {"
    },
    {
        "line": 37,
        "fullcodeline": "size = gf_bs_available(bs) + 8;"
    },
    {
        "line": 82,
        "fullcodeline": "} else if (parent_type && (parent_type == GF_ISOM_BOX_TYPE_TRGR)) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (!skip_logs) {"
    },
    {
        "line": 83,
        "fullcodeline": "newBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_TRGT);"
    },
    {
        "line": 85,
        "fullcodeline": "((GF_TrackGroupTypeBox*)newBox)->group_type = type;"
    },
    {
        "line": 156,
        "fullcodeline": "if ((to_skip!=4) || gf_bs_peek_bits(bs, 32, 0)) {"
    },
    {
        "line": 35,
        "fullcodeline": "GF_LOG(GF_LOG_DEBUG, GF_LOG_CONTAINER, (\"[iso file] Warning Read Box type %s (0x%08X) size 0 reading till the end of file\\n\", gf_4cc_to_str(type), type));"
    },
    {
        "line": 39,
        "fullcodeline": "if (!skip_logs) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (!newBox) return GF_OUT_OF_MEM;"
    },
    {
        "line": 86,
        "fullcodeline": "} else if (parent_type && (parent_type == GF_ISOM_BOX_TYPE_GRPL)) {"
    },
    {
        "line": 87,
        "fullcodeline": "newBox = gf_isom_box_new(GF_ISOM_BOX_TYPE_GRPT);"
    },
    {
        "line": 89,
        "fullcodeline": "((GF_EntityToGroupTypeBox*)newBox)->grouping_type = type;"
    },
    {
        "line": 88,
        "fullcodeline": "if (!newBox) return GF_OUT_OF_MEM;"
    },
    {
        "line": 92,
        "fullcodeline": "is_special = GF_FALSE;"
    },
    {
        "line": 93,
        "fullcodeline": "newBox = gf_isom_box_new_ex(uuid_type ? uuid_type : type, parent_type, skip_logs, is_root_box);"
    },
    {
        "line": 94,
        "fullcodeline": "if (!newBox) return GF_OUT_OF_MEM;"
    }
]