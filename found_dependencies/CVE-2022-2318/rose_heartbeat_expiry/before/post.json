[
    {
        "line": 3,
        "fullcodeline": "struct sock *sk = from_timer(sk, t, sk_timer);"
    },
    {
        "line": 4,
        "fullcodeline": "struct rose_sock *rose = rose_sk(sk);"
    },
    {
        "line": 6,
        "fullcodeline": "bh_lock_sock(sk);"
    },
    {
        "line": 35,
        "fullcodeline": "rose_start_heartbeat(sk);"
    },
    {
        "line": 36,
        "fullcodeline": "bh_unlock_sock(sk);"
    },
    {
        "line": 11,
        "fullcodeline": "if (sock_flag(sk, SOCK_DESTROY) ||"
    },
    {
        "line": 23,
        "fullcodeline": "if (atomic_read(&sk->sk_rmem_alloc) < (sk->sk_rcvbuf / 2) &&"
    },
    {
        "line": 12,
        "fullcodeline": "(sk->sk_state == TCP_LISTEN && sock_flag(sk, SOCK_DEAD))) {"
    },
    {
        "line": 13,
        "fullcodeline": "bh_unlock_sock(sk);"
    },
    {
        "line": 14,
        "fullcodeline": "rose_destroy_socket(sk);"
    },
    {
        "line": 24,
        "fullcodeline": "(rose->condition & ROSE_COND_OWN_RX_BUSY)) {"
    },
    {
        "line": 25,
        "fullcodeline": "rose->condition &= ~ROSE_COND_OWN_RX_BUSY;"
    },
    {
        "line": 26,
        "fullcodeline": "rose->condition &= ~ROSE_COND_ACK_PENDING;"
    },
    {
        "line": 27,
        "fullcodeline": "rose->vl         = rose->vr;"
    },
    {
        "line": 28,
        "fullcodeline": "rose_write_internal(sk, ROSE_RR);"
    },
    {
        "line": 29,
        "fullcodeline": "rose_stop_timer(sk);\t/* HB */"
    }
]