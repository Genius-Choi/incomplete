[
    {
        "line": 4,
        "fullcodeline": "struct wusbhc *wusbhc = &hwahc->wusbhc;"
    },
    {
        "line": 6,
        "fullcodeline": "struct device *dev = &usb_dev->dev;"
    },
    {
        "line": 12,
        "fullcodeline": "char buf[64];"
    },
    {
        "line": 15,
        "fullcodeline": "index = (usb_dev->actconfig - usb_dev->config) /"
    },
    {
        "line": 18,
        "fullcodeline": "itr_size = le16_to_cpu(usb_dev->actconfig->desc.wTotalLength);"
    },
    {
        "line": 19,
        "fullcodeline": "top = itr + itr_size;"
    },
    {
        "line": 20,
        "fullcodeline": "result = __usb_get_extra_descriptor(usb_dev->rawdescriptors[index],"
    },
    {
        "line": 34,
        "fullcodeline": "needed = le16_to_cpu(secd->wTotalLength);"
    },
    {
        "line": 42,
        "fullcodeline": "itr = (void *) secd + sizeof(*secd);"
    },
    {
        "line": 43,
        "fullcodeline": "top = (void *) secd + le16_to_cpu(secd->wTotalLength);"
    },
    {
        "line": 44,
        "fullcodeline": "index = 0;"
    },
    {
        "line": 45,
        "fullcodeline": "bytes = 0;"
    },
    {
        "line": 68,
        "fullcodeline": "dev_info(dev, \"supported encryption types: %s\\n\", buf);"
    },
    {
        "line": 23,
        "fullcodeline": "if (result == -1) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (top - (void *)secd < needed) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (top - (void *)secd < needed) {"
    },
    {
        "line": 46,
        "fullcodeline": "while (itr < top) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (wusbhc->ccm1_etd == NULL) {"
    },
    {
        "line": 21,
        "fullcodeline": "le16_to_cpu(usb_dev->actconfig->desc.wTotalLength),"
    },
    {
        "line": 22,
        "fullcodeline": "USB_DT_SECURITY, (void **) &secd, sizeof(*secd));"
    },
    {
        "line": 24,
        "fullcodeline": "dev_warn(dev, \"BUG? WUSB host has no security descriptors\\n\");"
    },
    {
        "line": 29,
        "fullcodeline": "dev_err(dev, \"BUG? Not enough data to process security \""
    },
    {
        "line": 36,
        "fullcodeline": "dev_err(dev, \"BUG? Not enough data to process security \""
    },
    {
        "line": 47,
        "fullcodeline": "etd = itr;"
    },
    {
        "line": 61,
        "fullcodeline": "itr += etd->bLength;"
    },
    {
        "line": 62,
        "fullcodeline": "bytes += snprintf(buf + bytes, sizeof(buf) - bytes,"
    },
    {
        "line": 66,
        "fullcodeline": "wusbhc->ccm1_etd = etd;"
    },
    {
        "line": 70,
        "fullcodeline": "dev_err(dev, \"E: host doesn't support CCM-1 crypto\\n\");"
    },
    {
        "line": 31,
        "fullcodeline": "top - (void *) secd, needed);"
    },
    {
        "line": 38,
        "fullcodeline": "top - (void *) secd, needed);"
    },
    {
        "line": 48,
        "fullcodeline": "if (top - itr < sizeof(*etd)) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (etd->bLength < sizeof(*etd)) {"
    },
    {
        "line": 49,
        "fullcodeline": "dev_err(dev, \"BUG: bad host security descriptor; \""
    },
    {
        "line": 55,
        "fullcodeline": "dev_err(dev, \"BUG: bad host encryption descriptor; \""
    },
    {
        "line": 64,
        "fullcodeline": "wusb_et_name(etd->bEncryptionType),"
    },
    {
        "line": 51,
        "fullcodeline": "top - itr, sizeof(*etd));"
    },
    {
        "line": 58,
        "fullcodeline": "(size_t)etd->bLength, sizeof(*etd));"
    }
]