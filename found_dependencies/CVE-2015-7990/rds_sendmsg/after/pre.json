[
    {
        "line": 3,
        "fullcodeline": "struct sock *sk = sock->sk;"
    },
    {
        "line": 4,
        "fullcodeline": "struct rds_sock *rs = rds_sk_to_rs(sk);"
    },
    {
        "line": 8,
        "fullcodeline": "struct rds_message *rm = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "int ret = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "int queued = 0, allocated_mr = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "int nonblock = msg->msg_flags & MSG_DONTWAIT;"
    },
    {
        "line": 13,
        "fullcodeline": "long timeo = sock_sndtimeo(sk, nonblock);"
    },
    {
        "line": 38,
        "fullcodeline": "lock_sock(sk);"
    },
    {
        "line": 44,
        "fullcodeline": "release_sock(sk);"
    },
    {
        "line": 52,
        "fullcodeline": "ret = rds_rm_size(msg, payload_len);"
    },
    {
        "line": 56,
        "fullcodeline": "rm = rds_message_alloc(ret, GFP_KERNEL);"
    },
    {
        "line": 73,
        "fullcodeline": "rm->data.op_active = 1;"
    },
    {
        "line": 75,
        "fullcodeline": "rm->m_daddr = daddr;"
    },
    {
        "line": 94,
        "fullcodeline": "ret = rds_cmsg_send(rs, rm, msg, &allocated_mr);"
    },
    {
        "line": 112,
        "fullcodeline": "rds_conn_connect_if_down(conn);"
    },
    {
        "line": 114,
        "fullcodeline": "ret = rds_cong_wait(conn->c_fcong, dport, nonblock, rs);"
    },
    {
        "line": 149,
        "fullcodeline": "rds_stats_inc(s_send_queued);"
    },
    {
        "line": 151,
        "fullcodeline": "ret = rds_send_xmit(conn);"
    },
    {
        "line": 155,
        "fullcodeline": "rds_message_put(rm);"
    },
    {
        "line": 17,
        "fullcodeline": "if (msg->msg_flags & ~(MSG_DONTWAIT | MSG_CMSG_COMPAT)) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (daddr == 0 || rs->rs_bound_addr == 0) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (payload_len > rds_sk_sndbuf(rs)) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 57,
        "fullcodeline": "if (!rm) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (rs->rs_conn && rs->rs_conn->c_faddr == daddr)"
    },
    {
        "line": 98,
        "fullcodeline": "if (rm->rdma.op_active && !conn->c_trans->xmit_rdma) {"
    },
    {
        "line": 105,
        "fullcodeline": "if (rm->atomic.op_active && !conn->c_trans->xmit_atomic) {"
    },
    {
        "line": 120,
        "fullcodeline": "while (!rds_send_queue_rm(rs, conn, rm, rs->rs_bound_port,"
    },
    {
        "line": 152,
        "fullcodeline": "if (ret == -ENOMEM || ret == -EAGAIN)"
    },
    {
        "line": 18,
        "fullcodeline": "ret = -EOPNOTSUPP;"
    },
    {
        "line": 28,
        "fullcodeline": "daddr = usin->sin_addr.s_addr;"
    },
    {
        "line": 29,
        "fullcodeline": "dport = usin->sin_port;"
    },
    {
        "line": 41,
        "fullcodeline": "ret = -ENOTCONN; /* XXX not a great errno */"
    },
    {
        "line": 47,
        "fullcodeline": "ret = -EMSGSIZE;"
    },
    {
        "line": 58,
        "fullcodeline": "ret = -ENOMEM;"
    },
    {
        "line": 64,
        "fullcodeline": "rm->data.op_sg = rds_message_alloc_sgs(rm, ceil(payload_len, PAGE_SIZE));"
    },
    {
        "line": 69,
        "fullcodeline": "ret = rds_message_copy_from_user(rm, &msg->msg_iter);"
    },
    {
        "line": 80,
        "fullcodeline": "conn = rs->rs_conn;"
    },
    {
        "line": 101,
        "fullcodeline": "ret = -EOPNOTSUPP;"
    },
    {
        "line": 108,
        "fullcodeline": "ret = -EOPNOTSUPP;"
    },
    {
        "line": 116,
        "fullcodeline": "rs->rs_seen_congestion = 1;"
    },
    {
        "line": 122,
        "fullcodeline": "rds_stats_inc(s_send_queue_full);"
    },
    {
        "line": 129,
        "fullcodeline": "timeo = wait_event_interruptible_timeout(*sk_sleep(sk),"
    },
    {
        "line": 135,
        "fullcodeline": "rdsdebug(\"sendmsg woke queued %d timeo %ld\\n\", queued, timeo);"
    },
    {
        "line": 139,
        "fullcodeline": "ret = timeo;"
    },
    {
        "line": 153,
        "fullcodeline": "queue_delayed_work(rds_wq, &conn->c_send_w, 1);"
    },
    {
        "line": 24,
        "fullcodeline": "if (msg->msg_namelen < sizeof(*usin) || usin->sin_family != AF_INET) {"
    },
    {
        "line": 32,
        "fullcodeline": "lock_sock(sk);"
    },
    {
        "line": 33,
        "fullcodeline": "daddr = rs->rs_conn_addr;"
    },
    {
        "line": 34,
        "fullcodeline": "dport = rs->rs_conn_port;"
    },
    {
        "line": 35,
        "fullcodeline": "release_sock(sk);"
    },
    {
        "line": 65,
        "fullcodeline": "if (!rm->data.op_sg) {"
    },
    {
        "line": 82,
        "fullcodeline": "conn = rds_conn_create_outgoing(sock_net(sock->sk),"
    },
    {
        "line": 90,
        "fullcodeline": "rs->rs_conn = conn;"
    },
    {
        "line": 136,
        "fullcodeline": "if (timeo > 0 || timeo == MAX_SCHEDULE_TIMEOUT)"
    },
    {
        "line": 140,
        "fullcodeline": "if (ret == 0)"
    },
    {
        "line": 163,
        "fullcodeline": "rds_rdma_unuse(rs, rds_rdma_cookie_key(rm->m_rdma_cookie), 1);"
    },
    {
        "line": 25,
        "fullcodeline": "ret = -EINVAL;"
    },
    {
        "line": 66,
        "fullcodeline": "ret = -ENOMEM;"
    },
    {
        "line": 86,
        "fullcodeline": "if (IS_ERR(conn)) {"
    },
    {
        "line": 125,
        "fullcodeline": "ret = -EAGAIN;"
    },
    {
        "line": 130,
        "fullcodeline": "rds_send_queue_rm(rs, conn, rm,"
    },
    {
        "line": 141,
        "fullcodeline": "ret = -ETIMEDOUT;"
    },
    {
        "line": 87,
        "fullcodeline": "ret = PTR_ERR(conn);"
    }
]