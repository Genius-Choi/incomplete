[
    {
        "line": 3,
        "fullcodeline": "import pyarrow.parquet as pq"
    },
    {
        "line": 5,
        "fullcodeline": "struct_array = pa.StructArray.from_arrays("
    },
    {
        "line": 8,
        "fullcodeline": "list_array = pa.array([[1, 2, 3], [4, 5]], type=pa.list_(pa.int32()))"
    },
    {
        "line": 10,
        "fullcodeline": "mystruct_array = pa.ExtensionArray.from_storage(MyStructType(),"
    },
    {
        "line": 12,
        "fullcodeline": "mylist_array = pa.ExtensionArray.from_storage("
    },
    {
        "line": 15,
        "fullcodeline": "orig_table = pa.table({'structs': mystruct_array,"
    },
    {
        "line": 17,
        "fullcodeline": "filename = tmpdir / 'nested_extension_storage.parquet'"
    },
    {
        "line": 18,
        "fullcodeline": "pq.write_table(orig_table, filename)"
    },
    {
        "line": 20,
        "fullcodeline": "table = pq.read_table(filename)"
    },
    {
        "line": 21,
        "fullcodeline": "assert table.column('structs').type == mystruct_array.type"
    },
    {
        "line": 22,
        "fullcodeline": "assert table.column('lists').type == mylist_array.type"
    },
    {
        "line": 23,
        "fullcodeline": "assert table == orig_table"
    },
    {
        "line": 25,
        "fullcodeline": "with pytest.raises(pa.ArrowInvalid, match='without all of its fields'):"
    },
    {
        "line": 6,
        "fullcodeline": "[pa.array([0, 1], type=\"int64\"), pa.array([4, 5], type=\"int64\")],"
    },
    {
        "line": 7,
        "fullcodeline": "names=[\"left\", \"right\"])"
    },
    {
        "line": 13,
        "fullcodeline": "MyListType(list_array.type), list_array)"
    },
    {
        "line": 26,
        "fullcodeline": "pq.ParquetFile(filename).read(columns=['structs.left'])"
    }
]