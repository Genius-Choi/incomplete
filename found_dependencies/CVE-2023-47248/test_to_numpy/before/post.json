[
    {
        "line": 2,
        "fullcodeline": "period_type = PeriodType('D')"
    },
    {
        "line": 3,
        "fullcodeline": "storage = pa.array([1, 2, 3, 4], pa.int64())"
    },
    {
        "line": 4,
        "fullcodeline": "arr = pa.ExtensionArray.from_storage(period_type, storage)"
    },
    {
        "line": 6,
        "fullcodeline": "expected = storage.to_numpy()"
    },
    {
        "line": 7,
        "fullcodeline": "result = arr.to_numpy()"
    },
    {
        "line": 10,
        "fullcodeline": "result = np.asarray(arr)"
    },
    {
        "line": 14,
        "fullcodeline": "a1 = pa.chunked_array([arr, arr])"
    },
    {
        "line": 15,
        "fullcodeline": "a2 = pa.chunked_array([arr, arr], type=period_type)"
    },
    {
        "line": 16,
        "fullcodeline": "expected = np.hstack([expected, expected])"
    },
    {
        "line": 25,
        "fullcodeline": "charr = pa.chunked_array([], type=period_type)"
    },
    {
        "line": 26,
        "fullcodeline": "assert charr.type == period_type"
    },
    {
        "line": 8,
        "fullcodeline": "np.testing.assert_array_equal(result, expected)"
    },
    {
        "line": 11,
        "fullcodeline": "np.testing.assert_array_equal(result, expected)"
    },
    {
        "line": 18,
        "fullcodeline": "for charr in [a1, a2]:"
    },
    {
        "line": 28,
        "fullcodeline": "for result in [np.asarray(charr), charr.to_numpy()]:"
    },
    {
        "line": 19,
        "fullcodeline": "assert charr.type == period_type"
    },
    {
        "line": 29,
        "fullcodeline": "assert result.dtype == np.int64"
    },
    {
        "line": 20,
        "fullcodeline": "for result in [np.asarray(charr), charr.to_numpy()]:"
    },
    {
        "line": 30,
        "fullcodeline": "np.testing.assert_array_equal(result, np.array([], dtype='int64'))"
    },
    {
        "line": 21,
        "fullcodeline": "assert result.dtype == np.int64"
    },
    {
        "line": 22,
        "fullcodeline": "np.testing.assert_array_equal(result, expected)"
    }
]