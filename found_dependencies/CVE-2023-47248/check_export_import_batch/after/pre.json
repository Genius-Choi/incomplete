[
    {
        "line": 2,
        "fullcodeline": "c_schema = ffi.new(\"struct ArrowSchema*\")"
    },
    {
        "line": 3,
        "fullcodeline": "ptr_schema = int(ffi.cast(\"uintptr_t\", c_schema))"
    },
    {
        "line": 4,
        "fullcodeline": "c_array = ffi.new(\"struct ArrowArray*\")"
    },
    {
        "line": 5,
        "fullcodeline": "ptr_array = int(ffi.cast(\"uintptr_t\", c_array))"
    },
    {
        "line": 7,
        "fullcodeline": "gc.collect()  # Make sure no Arrow data dangles in a ref cycle"
    },
    {
        "line": 8,
        "fullcodeline": "old_allocated = pa.total_allocated_bytes()"
    },
    {
        "line": 11,
        "fullcodeline": "batch = batch_factory()"
    },
    {
        "line": 12,
        "fullcodeline": "schema = batch.schema"
    },
    {
        "line": 13,
        "fullcodeline": "py_value = batch.to_pydict()"
    },
    {
        "line": 14,
        "fullcodeline": "batch._export_to_c(ptr_array)"
    },
    {
        "line": 18,
        "fullcodeline": "batch_new = pa.RecordBatch._import_from_c(ptr_array, schema)"
    },
    {
        "line": 20,
        "fullcodeline": "assert batch_new.schema == schema"
    },
    {
        "line": 22,
        "fullcodeline": "del batch_new, schema"
    },
    {
        "line": 29,
        "fullcodeline": "batch = batch_factory()"
    },
    {
        "line": 30,
        "fullcodeline": "py_value = batch.to_pydict()"
    },
    {
        "line": 31,
        "fullcodeline": "batch._export_to_c(ptr_array, ptr_schema)"
    },
    {
        "line": 33,
        "fullcodeline": "del batch"
    },
    {
        "line": 34,
        "fullcodeline": "batch_new = pa.RecordBatch._import_from_c(ptr_array, ptr_schema)"
    },
    {
        "line": 35,
        "fullcodeline": "assert batch_new.to_pydict() == py_value"
    },
    {
        "line": 36,
        "fullcodeline": "assert batch_new.schema == batch_factory().schema"
    },
    {
        "line": 37,
        "fullcodeline": "assert pa.total_allocated_bytes() > old_allocated"
    },
    {
        "line": 38,
        "fullcodeline": "del batch_new"
    },
    {
        "line": 39,
        "fullcodeline": "assert pa.total_allocated_bytes() == old_allocated"
    },
    {
        "line": 15,
        "fullcodeline": "assert pa.total_allocated_bytes() > old_allocated"
    },
    {
        "line": 19,
        "fullcodeline": "assert batch_new.to_pydict() == py_value"
    },
    {
        "line": 21,
        "fullcodeline": "assert pa.total_allocated_bytes() > old_allocated"
    },
    {
        "line": 23,
        "fullcodeline": "assert pa.total_allocated_bytes() == old_allocated"
    },
    {
        "line": 25,
        "fullcodeline": "with assert_array_released:"
    },
    {
        "line": 41,
        "fullcodeline": "with assert_schema_released:"
    },
    {
        "line": 45,
        "fullcodeline": "pa.int32()._export_to_c(ptr_schema)"
    },
    {
        "line": 46,
        "fullcodeline": "batch_factory()._export_to_c(ptr_array)"
    },
    {
        "line": 47,
        "fullcodeline": "with pytest.raises(ValueError,"
    },
    {
        "line": 51,
        "fullcodeline": "with assert_schema_released:"
    },
    {
        "line": 26,
        "fullcodeline": "pa.RecordBatch._import_from_c(ptr_array, make_schema())"
    },
    {
        "line": 42,
        "fullcodeline": "pa.RecordBatch._import_from_c(ptr_array, ptr_schema)"
    },
    {
        "line": 49,
        "fullcodeline": "pa.RecordBatch._import_from_c(ptr_array, ptr_schema)"
    },
    {
        "line": 52,
        "fullcodeline": "pa.RecordBatch._import_from_c(ptr_array, ptr_schema)"
    }
]