[
    {
        "line": 5,
        "fullcodeline": "c_schema = ffi.new(\"struct ArrowSchema*\")"
    },
    {
        "line": 6,
        "fullcodeline": "ptr_schema = int(ffi.cast(\"uintptr_t\", c_schema))"
    },
    {
        "line": 8,
        "fullcodeline": "gc.collect()  # Make sure no Arrow data dangles in a ref cycle"
    },
    {
        "line": 9,
        "fullcodeline": "old_allocated = pa.total_allocated_bytes()"
    },
    {
        "line": 12,
        "fullcodeline": "assert pa.total_allocated_bytes() > old_allocated"
    },
    {
        "line": 14,
        "fullcodeline": "schema_new = pa.Schema._import_from_c(ptr_schema)"
    },
    {
        "line": 15,
        "fullcodeline": "assert schema_new == expected_schema_factory()"
    },
    {
        "line": 17,
        "fullcodeline": "del schema_new"
    },
    {
        "line": 18,
        "fullcodeline": "assert pa.total_allocated_bytes() == old_allocated"
    },
    {
        "line": 2,
        "fullcodeline": "if expected_schema_factory is None:"
    },
    {
        "line": 11,
        "fullcodeline": "schema_factory()._export_to_c(ptr_schema)"
    },
    {
        "line": 16,
        "fullcodeline": "assert pa.total_allocated_bytes() == old_allocated"
    },
    {
        "line": 20,
        "fullcodeline": "with assert_schema_released:"
    },
    {
        "line": 24,
        "fullcodeline": "pa.int32()._export_to_c(ptr_schema)"
    },
    {
        "line": 25,
        "fullcodeline": "with pytest.raises(ValueError,"
    },
    {
        "line": 29,
        "fullcodeline": "with assert_schema_released:"
    },
    {
        "line": 3,
        "fullcodeline": "expected_schema_factory = schema_factory"
    },
    {
        "line": 21,
        "fullcodeline": "pa.Schema._import_from_c(ptr_schema)"
    },
    {
        "line": 27,
        "fullcodeline": "pa.Schema._import_from_c(ptr_schema)"
    },
    {
        "line": 30,
        "fullcodeline": "pa.Schema._import_from_c(ptr_schema)"
    }
]