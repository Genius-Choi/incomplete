[
    {
        "line": 2,
        "fullcodeline": "storage = pa.array([[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]], pa.list_(pa.int8(), 12))"
    },
    {
        "line": 3,
        "fullcodeline": "arr = pa.ExtensionArray.from_storage(tensor_type, storage)"
    },
    {
        "line": 4,
        "fullcodeline": "batch = pa.RecordBatch.from_arrays([arr], [\"ext\"])"
    },
    {
        "line": 7,
        "fullcodeline": "tensor_class = tensor_type.__arrow_ext_class__()"
    },
    {
        "line": 8,
        "fullcodeline": "assert isinstance(arr, tensor_class)"
    },
    {
        "line": 10,
        "fullcodeline": "buf = ipc_write_batch(batch)"
    },
    {
        "line": 11,
        "fullcodeline": "del batch"
    },
    {
        "line": 12,
        "fullcodeline": "batch = ipc_read_batch(buf)"
    },
    {
        "line": 14,
        "fullcodeline": "result = batch.column(0)"
    },
    {
        "line": 16,
        "fullcodeline": "assert isinstance(result, tensor_class)"
    },
    {
        "line": 17,
        "fullcodeline": "assert result.type.extension_name == \"arrow.fixed_shape_tensor\""
    },
    {
        "line": 18,
        "fullcodeline": "assert arr.storage.to_pylist() == [[1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6]]"
    },
    {
        "line": 21,
        "fullcodeline": "assert isinstance(result.type, pa.FixedShapeTensorType)"
    },
    {
        "line": 22,
        "fullcodeline": "assert result.type.value_type == pa.int8()"
    },
    {
        "line": 23,
        "fullcodeline": "assert result.type.shape == [2, 2, 3]"
    }
]