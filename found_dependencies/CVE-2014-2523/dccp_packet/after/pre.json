[
    {
        "line": 6,
        "fullcodeline": "struct net *net = nf_ct_net(ct);"
    },
    {
        "line": 7,
        "fullcodeline": "enum ip_conntrack_dir dir = CTINFO2DIR(ctinfo);"
    },
    {
        "line": 12,
        "fullcodeline": "dh = skb_header_pointer(skb, dataoff, sizeof(_dh), &_dh);"
    },
    {
        "line": 13,
        "fullcodeline": "BUG_ON(dh == NULL);"
    },
    {
        "line": 14,
        "fullcodeline": "type = dh->dccph_type;"
    },
    {
        "line": 23,
        "fullcodeline": "spin_lock_bh(&ct->lock);"
    },
    {
        "line": 25,
        "fullcodeline": "role = ct->proto.dccp.role[dir];"
    },
    {
        "line": 26,
        "fullcodeline": "old_state = ct->proto.dccp.state;"
    },
    {
        "line": 27,
        "fullcodeline": "new_state = dccp_state_table[role][type][old_state];"
    },
    {
        "line": 16,
        "fullcodeline": "if (type == DCCP_PKT_RESET &&"
    },
    {
        "line": 17,
        "fullcodeline": "!test_bit(IPS_SEEN_REPLY_BIT, &ct->status)) {"
    },
    {
        "line": 19,
        "fullcodeline": "nf_ct_kill_acct(ct, ctinfo, skb);"
    },
    {
        "line": 86,
        "fullcodeline": "nf_conntrack_event_cache(IPCT_PROTOINFO, ct);"
    },
    {
        "line": 40,
        "fullcodeline": "if (old_state == CT_DCCP_REQUEST)"
    },
    {
        "line": 68,
        "fullcodeline": "if (LOG_INVALID(net, IPPROTO_DCCP))"
    },
    {
        "line": 74,
        "fullcodeline": "if (LOG_INVALID(net, IPPROTO_DCCP))"
    },
    {
        "line": 77,
        "fullcodeline": "return -NF_ACCEPT;"
    },
    {
        "line": 31,
        "fullcodeline": "if (old_state == CT_DCCP_TIMEWAIT &&"
    },
    {
        "line": 32,
        "fullcodeline": "role == CT_DCCP_ROLE_SERVER) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (old_state == CT_DCCP_RESPOND &&"
    },
    {
        "line": 46,
        "fullcodeline": "dccp_ack_seq(dh) == ct->proto.dccp.handshake_seq)"
    },
    {
        "line": 47,
        "fullcodeline": "set_bit(IPS_ASSURED_BIT, &ct->status);"
    },
    {
        "line": 55,
        "fullcodeline": "if (ct->proto.dccp.last_dir == !dir &&"
    },
    {
        "line": 57,
        "fullcodeline": "type == DCCP_PKT_RESPONSE) {"
    },
    {
        "line": 61,
        "fullcodeline": "new_state = CT_DCCP_RESPOND;"
    },
    {
        "line": 41,
        "fullcodeline": "ct->proto.dccp.handshake_seq = dccp_hdr_seq(dh);"
    },
    {
        "line": 45,
        "fullcodeline": "type == DCCP_PKT_ACK &&"
    },
    {
        "line": 56,
        "fullcodeline": "ct->proto.dccp.last_pkt == DCCP_PKT_REQUEST &&"
    },
    {
        "line": 60,
        "fullcodeline": "ct->proto.dccp.handshake_seq = dccp_hdr_seq(dh);"
    },
    {
        "line": 36,
        "fullcodeline": "ct->proto.dccp.role[!dir] = CT_DCCP_ROLE_SERVER;"
    },
    {
        "line": 58,
        "fullcodeline": "ct->proto.dccp.role[!dir] = CT_DCCP_ROLE_CLIENT;"
    }
]