[
    {
        "line": 3,
        "fullcodeline": "int rc = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "fs->flags |= MNT_FS_KERNEL;"
    },
    {
        "line": 10,
        "fullcodeline": "s = next_s32(s, &fs->id, &rc);"
    },
    {
        "line": 16,
        "fullcodeline": "s = skip_separator(s);"
    },
    {
        "line": 19,
        "fullcodeline": "s = next_s32(s, &fs->parent, &rc);"
    },
    {
        "line": 25,
        "fullcodeline": "s = skip_separator(s);"
    },
    {
        "line": 32,
        "fullcodeline": "fs->devno = makedev(maj, min);"
    },
    {
        "line": 33,
        "fullcodeline": "s = skip_nonspearator(s);"
    },
    {
        "line": 34,
        "fullcodeline": "s = skip_separator(s);"
    },
    {
        "line": 37,
        "fullcodeline": "fs->root = unmangle(s, &s);"
    },
    {
        "line": 43,
        "fullcodeline": "s = skip_separator(s);"
    },
    {
        "line": 46,
        "fullcodeline": "fs->target = unmangle(s, &s);"
    },
    {
        "line": 52,
        "fullcodeline": "s = skip_separator(s);"
    },
    {
        "line": 55,
        "fullcodeline": "fs->vfs_optstr = unmangle(s, &s);"
    },
    {
        "line": 62,
        "fullcodeline": "p = strstr(s, \" - \");"
    },
    {
        "line": 70,
        "fullcodeline": "s = skip_separator(p + 3);"
    },
    {
        "line": 73,
        "fullcodeline": "p = unmangle(s, &s);"
    },
    {
        "line": 99,
        "fullcodeline": "s = skip_separator(s);"
    },
    {
        "line": 102,
        "fullcodeline": "fs->fs_optstr = unmangle(s, &s);"
    },
    {
        "line": 109,
        "fullcodeline": "fs->optstr = mnt_fs_strdup_options(fs);"
    },
    {
        "line": 120,
        "fullcodeline": "DBG(TAB, ul_debug(\"tab parse error on: '%s' [rc=%d]\", s, rc));"
    },
    {
        "line": 11,
        "fullcodeline": "if (!s || !*s || rc) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (!s || !*s || rc) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (sscanf(s, \"%u:%u\", &maj, &min) != 2) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (!fs->root) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (!fs->target) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (!fs->vfs_optstr) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (!p) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (p > s + 1)"
    },
    {
        "line": 74,
        "fullcodeline": "if (!p || (rc = __mnt_fs_set_fstype_ptr(fs, p))) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (!s || !*s) {"
    },
    {
        "line": 103,
        "fullcodeline": "if (!fs->fs_optstr) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (!fs->optstr) {"
    },
    {
        "line": 118,
        "fullcodeline": "if (rc == 0)"
    },
    {
        "line": 12,
        "fullcodeline": "DBG(TAB, ul_debug(\"tab parse error: [id]\"));"
    },
    {
        "line": 21,
        "fullcodeline": "DBG(TAB, ul_debug(\"tab parse error: [parent]\"));"
    },
    {
        "line": 29,
        "fullcodeline": "DBG(TAB, ul_debug(\"tab parse error: [maj:min]\"));"
    },
    {
        "line": 39,
        "fullcodeline": "DBG(TAB, ul_debug(\"tab parse error: [mountroot]\"));"
    },
    {
        "line": 48,
        "fullcodeline": "DBG(TAB, ul_debug(\"tab parse error: [target]\"));"
    },
    {
        "line": 57,
        "fullcodeline": "DBG(TAB, ul_debug(\"tab parse error: [VFS options]\"));"
    },
    {
        "line": 64,
        "fullcodeline": "DBG(TAB, ul_debug(\"mountinfo parse error: separator not found\"));"
    },
    {
        "line": 68,
        "fullcodeline": "fs->opt_fields = strndup(s + 1, p - s - 1);"
    },
    {
        "line": 75,
        "fullcodeline": "DBG(TAB, ul_debug(\"tab parse error: [fstype]\"));"
    },
    {
        "line": 76,
        "fullcodeline": "free(p);"
    },
    {
        "line": 82,
        "fullcodeline": "DBG(TAB, ul_debug(\"tab parse error: [source]\"));"
    },
    {
        "line": 104,
        "fullcodeline": "DBG(TAB, ul_debug(\"tab parse error: [FS options]\"));"
    },
    {
        "line": 111,
        "fullcodeline": "rc = -ENOMEM;"
    },
    {
        "line": 112,
        "fullcodeline": "DBG(TAB, ul_debug(\"tab parse error: [merge VFS and FS options]\"));"
    },
    {
        "line": 119,
        "fullcodeline": "rc = -EINVAL;"
    },
    {
        "line": 65,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 84,
        "fullcodeline": "} else if (*s == ' ' && *(s+1) == ' ') {"
    },
    {
        "line": 85,
        "fullcodeline": "if ((rc = mnt_fs_set_source(fs, \"\"))) {"
    },
    {
        "line": 90,
        "fullcodeline": "s = skip_separator(s);"
    },
    {
        "line": 91,
        "fullcodeline": "p = unmangle(s, &s);"
    },
    {
        "line": 86,
        "fullcodeline": "DBG(TAB, ul_debug(\"tab parse error: [empty source]\"));"
    },
    {
        "line": 92,
        "fullcodeline": "if (!p || (rc = __mnt_fs_set_source_ptr(fs, p))) {"
    },
    {
        "line": 93,
        "fullcodeline": "DBG(TAB, ul_debug(\"tab parse error: [regular source]\"));"
    },
    {
        "line": 94,
        "fullcodeline": "free(p);"
    }
]