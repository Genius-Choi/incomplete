[
    {
        "line": 3,
        "fullcodeline": "FILE *out = stdout;"
    },
    {
        "line": 6,
        "fullcodeline": "fputs(USAGE_HEADER, out);"
    },
    {
        "line": 7,
        "fullcodeline": "fprintf(out, _("
    },
    {
        "line": 14,
        "fullcodeline": "fputs(USAGE_SEPARATOR, out);"
    },
    {
        "line": 15,
        "fullcodeline": "fputs(_(\"Find a (mounted) filesystem.\\n\"), out);"
    },
    {
        "line": 17,
        "fullcodeline": "fputs(USAGE_OPTIONS, out);"
    },
    {
        "line": 18,
        "fullcodeline": "fputs(_(\" -s, --fstab            search in static table of filesystems\\n\"), out);"
    },
    {
        "line": 19,
        "fullcodeline": "fputs(_(\" -m, --mtab             search in table of mounted filesystems\\n\""
    },
    {
        "line": 21,
        "fullcodeline": "fputs(_(\" -k, --kernel           search in kernel table of mounted\\n\""
    },
    {
        "line": 23,
        "fullcodeline": "fputc('\\n', out);"
    },
    {
        "line": 24,
        "fullcodeline": "fputs(_(\" -p, --poll[=<list>]    monitor changes in table of mounted filesystems\\n\"), out);"
    },
    {
        "line": 25,
        "fullcodeline": "fputs(_(\" -w, --timeout <num>    upper limit in milliseconds that --poll will block\\n\"), out);"
    },
    {
        "line": 26,
        "fullcodeline": "fputc('\\n', out);"
    },
    {
        "line": 28,
        "fullcodeline": "fputs(_(\" -A, --all              disable all built-in filters, print all filesystems\\n\"), out);"
    },
    {
        "line": 29,
        "fullcodeline": "fputs(_(\" -a, --ascii            use ASCII chars for tree formatting\\n\"), out);"
    },
    {
        "line": 30,
        "fullcodeline": "fputs(_(\" -b, --bytes            print sizes in bytes rather than in human readable format\\n\"), out);"
    },
    {
        "line": 31,
        "fullcodeline": "fputs(_(\" -C, --nocanonicalize   don't canonicalize when comparing paths\\n\"), out);"
    },
    {
        "line": 32,
        "fullcodeline": "fputs(_(\" -c, --canonicalize     canonicalize printed paths\\n\"), out);"
    },
    {
        "line": 33,
        "fullcodeline": "fputs(_(\"     --deleted          print filesystems with mountpoint marked as deleted\\n\"), out);"
    },
    {
        "line": 34,
        "fullcodeline": "fputs(_(\" -D, --df               imitate the output of df(1)\\n\"), out);"
    },
    {
        "line": 35,
        "fullcodeline": "fputs(_(\" -d, --direction <word> direction of search, 'forward' or 'backward'\\n\"), out);"
    },
    {
        "line": 36,
        "fullcodeline": "fputs(_(\" -e, --evaluate         convert tags (LABEL,UUID,PARTUUID,PARTLABEL) \\n\""
    },
    {
        "line": 38,
        "fullcodeline": "fputs(_(\" -F, --tab-file <path>  alternative file for -s, -m or -k options\\n\"), out);"
    },
    {
        "line": 39,
        "fullcodeline": "fputs(_(\" -f, --first-only       print the first found filesystem only\\n\"), out);"
    },
    {
        "line": 40,
        "fullcodeline": "fputs(_(\" -i, --invert           invert the sense of matching\\n\"), out);"
    },
    {
        "line": 41,
        "fullcodeline": "fputs(_(\" -J, --json             use JSON output format\\n\"), out);"
    },
    {
        "line": 42,
        "fullcodeline": "fputs(_(\" -l, --list             use list format output\\n\"), out);"
    },
    {
        "line": 43,
        "fullcodeline": "fputs(_(\" -N, --task <tid>       use alternative namespace (/proc/<tid>/mountinfo file)\\n\"), out);"
    },
    {
        "line": 44,
        "fullcodeline": "fputs(_(\" -n, --noheadings       don't print column headings\\n\"), out);"
    },
    {
        "line": 45,
        "fullcodeline": "fputs(_(\" -O, --options <list>   limit the set of filesystems by mount options\\n\"), out);"
    },
    {
        "line": 46,
        "fullcodeline": "fputs(_(\" -o, --output <list>    the output columns to be shown\\n\"), out);"
    },
    {
        "line": 47,
        "fullcodeline": "fputs(_(\"     --output-all       output all available columns\\n\"), out);"
    },
    {
        "line": 48,
        "fullcodeline": "fputs(_(\" -P, --pairs            use key=\\\"value\\\" output format\\n\"), out);"
    },
    {
        "line": 49,
        "fullcodeline": "fputs(_(\"     --pseudo           print only pseudo-filesystems\\n\"), out);"
    },
    {
        "line": 50,
        "fullcodeline": "fputs(_(\"     --shadowed         print only filesystems over-mounted by another filesystem\\n\"), out);"
    },
    {
        "line": 51,
        "fullcodeline": "fputs(_(\" -R, --submounts        print all submounts for the matching filesystems\\n\"), out);"
    },
    {
        "line": 52,
        "fullcodeline": "fputs(_(\" -r, --raw              use raw output format\\n\"), out);"
    },
    {
        "line": 53,
        "fullcodeline": "fputs(_(\"     --real             print only real filesystems\\n\"), out);"
    },
    {
        "line": 54,
        "fullcodeline": "fputs(_(\" -S, --source <string>  the device to mount (by name, maj:min, \\n\""
    },
    {
        "line": 56,
        "fullcodeline": "fputs(_(\" -T, --target <path>    the path to the filesystem to use\\n\"), out);"
    },
    {
        "line": 57,
        "fullcodeline": "fputs(_(\"     --tree             enable tree format output if possible\\n\"), out);"
    },
    {
        "line": 58,
        "fullcodeline": "fputs(_(\" -M, --mountpoint <dir> the mountpoint directory\\n\"), out);"
    },
    {
        "line": 59,
        "fullcodeline": "fputs(_(\" -t, --types <list>     limit the set of filesystems by FS types\\n\"), out);"
    },
    {
        "line": 60,
        "fullcodeline": "fputs(_(\" -U, --uniq             ignore filesystems with duplicate target\\n\"), out);"
    },
    {
        "line": 61,
        "fullcodeline": "fputs(_(\" -u, --notruncate       don't truncate text in columns\\n\"), out);"
    },
    {
        "line": 62,
        "fullcodeline": "fputs(_(\" -v, --nofsroot         don't print [/dir] for bind or btrfs mounts\\n\"), out);"
    },
    {
        "line": 64,
        "fullcodeline": "fputc('\\n', out);"
    },
    {
        "line": 65,
        "fullcodeline": "fputs(_(\" -x, --verify           verify mount table content (default is fstab)\\n\"), out);"
    },
    {
        "line": 66,
        "fullcodeline": "fputs(_(\"     --verbose          print more details\\n\"), out);"
    },
    {
        "line": 67,
        "fullcodeline": "fputs(_(\"     --vfs-all          print all VFS options\\n\"), out);"
    },
    {
        "line": 69,
        "fullcodeline": "fputs(USAGE_SEPARATOR, out);"
    },
    {
        "line": 70,
        "fullcodeline": "printf(USAGE_HELP_OPTIONS(24));"
    },
    {
        "line": 72,
        "fullcodeline": "fputs(USAGE_COLUMNS, out);"
    },
    {
        "line": 76,
        "fullcodeline": "printf(USAGE_MAN_TAIL(\"findmnt(8)\"));"
    },
    {
        "line": 78,
        "fullcodeline": "exit(EXIT_SUCCESS);"
    },
    {
        "line": 73,
        "fullcodeline": "for (i = 0; i < ARRAY_SIZE(infos); i++)"
    },
    {
        "line": 74,
        "fullcodeline": "fprintf(out, \" %11s  %s\\n\", infos[i].name, _(infos[i].help));"
    }
]