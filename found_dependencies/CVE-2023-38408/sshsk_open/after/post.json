[
    {
        "line": 3,
        "fullcodeline": "struct sshsk_provider *ret = NULL;"
    },
    {
        "line": 38,
        "fullcodeline": "version = ret->sk_api_version();"
    },
    {
        "line": 39,
        "fullcodeline": "debug_f(\"provider %s implements version 0x%08lx\", ret->path,"
    },
    {
        "line": 66,
        "fullcodeline": "sshsk_free(ret);"
    },
    {
        "line": 6,
        "fullcodeline": "if (path == NULL || *path == '\\0') {"
    },
    {
        "line": 10,
        "fullcodeline": "if ((ret = calloc(1, sizeof(*ret))) == NULL) {"
    },
    {
        "line": 14,
        "fullcodeline": "if ((ret->path = strdup(path)) == NULL) {"
    },
    {
        "line": 19,
        "fullcodeline": "if (strcasecmp(ret->path, \"internal\") == 0) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (lib_contains_symbol(path, \"sk_api_version\") != 0) {"
    },
    {
        "line": 29,
        "fullcodeline": "if ((ret->dlhandle = dlopen(path, RTLD_NOW)) == NULL) {"
    },
    {
        "line": 33,
        "fullcodeline": "if ((ret->sk_api_version = dlsym(ret->dlhandle,"
    },
    {
        "line": 40,
        "fullcodeline": "(u_long)version);"
    },
    {
        "line": 41,
        "fullcodeline": "if ((version & SSH_SK_VERSION_MAJOR_MASK) != SSH_SK_VERSION_MAJOR) {"
    },
    {
        "line": 47,
        "fullcodeline": "if ((ret->sk_enroll = dlsym(ret->dlhandle, \"sk_enroll\")) == NULL) {"
    },
    {
        "line": 52,
        "fullcodeline": "if ((ret->sk_sign = dlsym(ret->dlhandle, \"sk_sign\")) == NULL) {"
    },
    {
        "line": 57,
        "fullcodeline": "if ((ret->sk_load_resident_keys = dlsym(ret->dlhandle,"
    },
    {
        "line": 7,
        "fullcodeline": "error(\"No FIDO SecurityKeyProvider specified\");"
    },
    {
        "line": 11,
        "fullcodeline": "error_f(\"calloc failed\");"
    },
    {
        "line": 15,
        "fullcodeline": "error_f(\"strdup failed\");"
    },
    {
        "line": 20,
        "fullcodeline": "ret->sk_enroll = ssh_sk_enroll;"
    },
    {
        "line": 21,
        "fullcodeline": "ret->sk_sign = ssh_sk_sign;"
    },
    {
        "line": 22,
        "fullcodeline": "ret->sk_load_resident_keys = ssh_sk_load_resident_keys;"
    },
    {
        "line": 26,
        "fullcodeline": "error(\"provider %s is not an OpenSSH FIDO library\", path);"
    },
    {
        "line": 30,
        "fullcodeline": "error(\"Provider \\\"%s\\\" dlopen failed: %s\", path, dlerror());"
    },
    {
        "line": 35,
        "fullcodeline": "fatal(\"Provider \\\"%s\\\" dlsym(sk_api_version) failed: %s\","
    },
    {
        "line": 42,
        "fullcodeline": "error(\"Provider \\\"%s\\\" implements unsupported \""
    },
    {
        "line": 48,
        "fullcodeline": "error(\"Provider %s dlsym(sk_enroll) failed: %s\","
    },
    {
        "line": 53,
        "fullcodeline": "error(\"Provider \\\"%s\\\" dlsym(sk_sign) failed: %s\","
    },
    {
        "line": 59,
        "fullcodeline": "error(\"Provider \\\"%s\\\" dlsym(sk_load_resident_keys) \""
    },
    {
        "line": 44,
        "fullcodeline": "path, (u_long)version, (u_long)SSH_SK_VERSION_MAJOR);"
    }
]