[
    {
        "line": 5,
        "fullcodeline": "static const u_char vm_cmu[4] = VM_CMU;"
    },
    {
        "line": 6,
        "fullcodeline": "static const u_char vm_rfc1048[4] = VM_RFC1048;"
    },
    {
        "line": 8,
        "fullcodeline": "bp = (const struct bootp *)cp;"
    },
    {
        "line": 9,
        "fullcodeline": "ND_TCHECK(bp->bp_op);"
    },
    {
        "line": 11,
        "fullcodeline": "ND_PRINT((ndo, \"BOOTP/DHCP, %s\","
    },
    {
        "line": 14,
        "fullcodeline": "ND_TCHECK(bp->bp_hlen);"
    },
    {
        "line": 20,
        "fullcodeline": "ND_PRINT((ndo, \", length %u\", length));"
    },
    {
        "line": 25,
        "fullcodeline": "ND_TCHECK(bp->bp_secs);"
    },
    {
        "line": 43,
        "fullcodeline": "ND_PRINT((ndo, \", Flags [%s]\","
    },
    {
        "line": 49,
        "fullcodeline": "ND_TCHECK(bp->bp_ciaddr);"
    },
    {
        "line": 54,
        "fullcodeline": "ND_TCHECK(bp->bp_yiaddr);"
    },
    {
        "line": 59,
        "fullcodeline": "ND_TCHECK(bp->bp_siaddr);"
    },
    {
        "line": 64,
        "fullcodeline": "ND_TCHECK(bp->bp_giaddr);"
    },
    {
        "line": 74,
        "fullcodeline": "ND_TCHECK2(bp->bp_sname[0], 1);\t\t/* check first char only */"
    },
    {
        "line": 85,
        "fullcodeline": "ND_TCHECK2(bp->bp_file[0], 1);\t\t/* check first char only */"
    },
    {
        "line": 15,
        "fullcodeline": "if (bp->bp_htype == 1 && bp->bp_hlen == 6 && bp->bp_op == BOOTPREQUEST) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (!ndo->ndo_vflag)"
    },
    {
        "line": 28,
        "fullcodeline": "if (bp->bp_htype != 1)"
    },
    {
        "line": 32,
        "fullcodeline": "if (bp->bp_htype != 1 || bp->bp_hlen != 6)"
    },
    {
        "line": 38,
        "fullcodeline": "if (EXTRACT_32BITS(&bp->bp_xid))"
    },
    {
        "line": 40,
        "fullcodeline": "if (EXTRACT_16BITS(&bp->bp_secs))"
    },
    {
        "line": 45,
        "fullcodeline": "if (ndo->ndo_vflag > 1)"
    },
    {
        "line": 69,
        "fullcodeline": "if (bp->bp_htype == 1 && bp->bp_hlen == 6) {"
    },
    {
        "line": 99,
        "fullcodeline": "if (memcmp((const char *)bp->bp_vend, vm_rfc1048,"
    },
    {
        "line": 16,
        "fullcodeline": "ND_TCHECK2(bp->bp_chaddr[0], 6);"
    },
    {
        "line": 17,
        "fullcodeline": "ND_PRINT((ndo, \" from %s\", etheraddr_string(ndo, bp->bp_chaddr)));"
    },
    {
        "line": 29,
        "fullcodeline": "ND_PRINT((ndo, \", htype %d\", bp->bp_htype));"
    },
    {
        "line": 33,
        "fullcodeline": "ND_PRINT((ndo, \", hlen %d\", bp->bp_hlen));"
    },
    {
        "line": 37,
        "fullcodeline": "ND_PRINT((ndo, \", hops %d\", bp->bp_hops));"
    },
    {
        "line": 39,
        "fullcodeline": "ND_PRINT((ndo, \", xid 0x%x\", EXTRACT_32BITS(&bp->bp_xid)));"
    },
    {
        "line": 41,
        "fullcodeline": "ND_PRINT((ndo, \", secs %d\", EXTRACT_16BITS(&bp->bp_secs)));"
    },
    {
        "line": 46,
        "fullcodeline": "ND_PRINT((ndo, \" (0x%04x)\", EXTRACT_16BITS(&bp->bp_flags)));"
    },
    {
        "line": 51,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  Client-IP %s\", ipaddr_string(ndo, &bp->bp_ciaddr)));"
    },
    {
        "line": 56,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  Your-IP %s\", ipaddr_string(ndo, &bp->bp_yiaddr)));"
    },
    {
        "line": 61,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  Server-IP %s\", ipaddr_string(ndo, &bp->bp_siaddr)));"
    },
    {
        "line": 66,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  Gateway-IP %s\", ipaddr_string(ndo, &bp->bp_giaddr)));"
    },
    {
        "line": 70,
        "fullcodeline": "ND_TCHECK2(bp->bp_chaddr[0], 6);"
    },
    {
        "line": 71,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  Client-Ethernet-Address %s\", etheraddr_string(ndo, bp->bp_chaddr)));"
    },
    {
        "line": 76,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  sname \\\"\"));"
    },
    {
        "line": 83,
        "fullcodeline": "ND_PRINT((ndo, \"\\\"\"));"
    },
    {
        "line": 87,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  file \\\"\"));"
    },
    {
        "line": 94,
        "fullcodeline": "ND_PRINT((ndo, \"\\\"\"));"
    },
    {
        "line": 101,
        "fullcodeline": "rfc1048_print(ndo, bp->bp_vend);"
    },
    {
        "line": 12,
        "fullcodeline": "tok2str(bootp_op_values, \"unknown (0x%02x)\", bp->bp_op)));"
    },
    {
        "line": 44,
        "fullcodeline": "bittok2str(bootp_flag_values, \"none\", EXTRACT_16BITS(&bp->bp_flags))));"
    },
    {
        "line": 77,
        "fullcodeline": "if (fn_printztn(ndo, bp->bp_sname, (u_int)sizeof bp->bp_sname,"
    },
    {
        "line": 88,
        "fullcodeline": "if (fn_printztn(ndo, bp->bp_file, (u_int)sizeof bp->bp_file,"
    },
    {
        "line": 79,
        "fullcodeline": "ND_PRINT((ndo, \"\\\"\"));"
    },
    {
        "line": 80,
        "fullcodeline": "ND_PRINT((ndo, \"%s\", tstr + 1));"
    },
    {
        "line": 90,
        "fullcodeline": "ND_PRINT((ndo, \"\\\"\"));"
    },
    {
        "line": 91,
        "fullcodeline": "ND_PRINT((ndo, \"%s\", tstr + 1));"
    },
    {
        "line": 102,
        "fullcodeline": "else if (memcmp((const char *)bp->bp_vend, vm_cmu,"
    },
    {
        "line": 104,
        "fullcodeline": "cmu_print(ndo, bp->bp_vend);"
    },
    {
        "line": 108,
        "fullcodeline": "ul = EXTRACT_32BITS(&bp->bp_vend);"
    },
    {
        "line": 109,
        "fullcodeline": "if (ul != 0)"
    },
    {
        "line": 110,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  Vendor-#0x%x\", ul));"
    }
]