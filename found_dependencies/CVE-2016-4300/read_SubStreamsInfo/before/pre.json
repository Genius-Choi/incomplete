[
    {
        "line": 11,
        "fullcodeline": "memset(ss, 0, sizeof(*ss));"
    },
    {
        "line": 18,
        "fullcodeline": "type = *p;"
    },
    {
        "line": 48,
        "fullcodeline": "usizes = ss->unpackSizes;"
    },
    {
        "line": 78,
        "fullcodeline": "numDigests = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "for (i = 0; i < numFolders; i++)"
    },
    {
        "line": 14,
        "fullcodeline": "f[i].numUnpackStreams = 1;"
    },
    {
        "line": 16,
        "fullcodeline": "if ((p = header_bytes(a, 1)) == NULL)"
    },
    {
        "line": 20,
        "fullcodeline": "if (type == kNumUnPackStream) {"
    },
    {
        "line": 49,
        "fullcodeline": "for (i = 0; i < numFolders; i++) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (type == kSize) {"
    },
    {
        "line": 73,
        "fullcodeline": "for (i = 0; i < unpack_streams; i++) {"
    },
    {
        "line": 79,
        "fullcodeline": "for (i = 0; i < numFolders; i++) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (type == kCRC) {"
    },
    {
        "line": 120,
        "fullcodeline": "if (type != kEnd)"
    },
    {
        "line": 21,
        "fullcodeline": "unpack_streams = 0;"
    },
    {
        "line": 31,
        "fullcodeline": "type = *p;"
    },
    {
        "line": 37,
        "fullcodeline": "ss->unpackSizes = calloc(unpack_streams,"
    },
    {
        "line": 39,
        "fullcodeline": "ss->digestsDefined = calloc(unpack_streams,"
    },
    {
        "line": 41,
        "fullcodeline": "ss->digests = calloc(unpack_streams,"
    },
    {
        "line": 56,
        "fullcodeline": "sum = 0;"
    },
    {
        "line": 70,
        "fullcodeline": "type = *p;"
    },
    {
        "line": 74,
        "fullcodeline": "ss->digestsDefined[i] = 0;"
    },
    {
        "line": 75,
        "fullcodeline": "ss->digests[i] = 0;"
    },
    {
        "line": 86,
        "fullcodeline": "unsigned char *digestsDefined = ss->digestsDefined;"
    },
    {
        "line": 87,
        "fullcodeline": "uint32_t * digests = ss->digests;"
    },
    {
        "line": 88,
        "fullcodeline": "int di = 0;"
    },
    {
        "line": 90,
        "fullcodeline": "memset(&tmpDigests, 0, sizeof(tmpDigests));"
    },
    {
        "line": 114,
        "fullcodeline": "type = *p;"
    },
    {
        "line": 17,
        "fullcodeline": "return (-1);"
    },
    {
        "line": 22,
        "fullcodeline": "for (i = 0; i < numFolders; i++) {"
    },
    {
        "line": 29,
        "fullcodeline": "if ((p = header_bytes(a, 1)) == NULL)"
    },
    {
        "line": 33,
        "fullcodeline": "unpack_streams = numFolders;"
    },
    {
        "line": 53,
        "fullcodeline": "if (f[i].numUnpackStreams == 0)"
    },
    {
        "line": 57,
        "fullcodeline": "if (type == kSize) {"
    },
    {
        "line": 64,
        "fullcodeline": "*usizes++ = folder_uncompressed_size(&f[i]) - sum;"
    },
    {
        "line": 68,
        "fullcodeline": "if ((p = header_bytes(a, 1)) == NULL)"
    },
    {
        "line": 95,
        "fullcodeline": "for (i = 0; i < numFolders; i++) {"
    },
    {
        "line": 121,
        "fullcodeline": "return (-1);"
    },
    {
        "line": 27,
        "fullcodeline": "unpack_streams += (size_t)f[i].numUnpackStreams;"
    },
    {
        "line": 43,
        "fullcodeline": "if (ss->unpackSizes == NULL || ss->digestsDefined == NULL ||"
    },
    {
        "line": 44,
        "fullcodeline": "ss->digests == NULL)"
    },
    {
        "line": 80,
        "fullcodeline": "if (f[i].numUnpackStreams != 1 || !f[i].digest_defined)"
    },
    {
        "line": 81,
        "fullcodeline": "numDigests += (uint32_t)f[i].numUnpackStreams;"
    },
    {
        "line": 91,
        "fullcodeline": "if (read_Digests(a, &(tmpDigests), numDigests) < 0) {"
    },
    {
        "line": 112,
        "fullcodeline": "if ((p = header_bytes(a, 1)) == NULL)"
    },
    {
        "line": 25,
        "fullcodeline": "if (UMAX_ENTRY < f[i].numUnpackStreams)"
    },
    {
        "line": 30,
        "fullcodeline": "return (-1);"
    },
    {
        "line": 45,
        "fullcodeline": "return (-1);"
    },
    {
        "line": 58,
        "fullcodeline": "for (pack = 1; pack < f[i].numUnpackStreams; pack++) {"
    },
    {
        "line": 69,
        "fullcodeline": "return (-1);"
    },
    {
        "line": 93,
        "fullcodeline": "return (-1);"
    },
    {
        "line": 113,
        "fullcodeline": "return (-1);"
    },
    {
        "line": 23,
        "fullcodeline": "if (parse_7zip_uint64(a, &(f[i].numUnpackStreams)) < 0)"
    },
    {
        "line": 61,
        "fullcodeline": "sum += *usizes++;"
    },
    {
        "line": 96,
        "fullcodeline": "if (f[i].numUnpackStreams == 1 && f[i].digest_defined) {"
    },
    {
        "line": 24,
        "fullcodeline": "return (-1);"
    },
    {
        "line": 26,
        "fullcodeline": "return (-1);"
    },
    {
        "line": 59,
        "fullcodeline": "if (parse_7zip_uint64(a, usizes) < 0)"
    },
    {
        "line": 97,
        "fullcodeline": "*digestsDefined++ = 1;"
    },
    {
        "line": 98,
        "fullcodeline": "*digests++ = f[i].digest;"
    },
    {
        "line": 102,
        "fullcodeline": "for (j = 0; j < f[i].numUnpackStreams;"
    },
    {
        "line": 60,
        "fullcodeline": "return (-1);"
    },
    {
        "line": 103,
        "fullcodeline": "j++, di++) {"
    },
    {
        "line": 104,
        "fullcodeline": "*digestsDefined++ ="
    },
    {
        "line": 106,
        "fullcodeline": "*digests++ ="
    }
]