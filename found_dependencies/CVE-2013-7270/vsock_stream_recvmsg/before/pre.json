[
    {
        "line": 13,
        "fullcodeline": "DEFINE_WAIT(wait);"
    },
    {
        "line": 15,
        "fullcodeline": "sk = sock->sk;"
    },
    {
        "line": 16,
        "fullcodeline": "vsk = vsock_sk(sk);"
    },
    {
        "line": 17,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "msg->msg_namelen = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "lock_sock(sk);"
    },
    {
        "line": 65,
        "fullcodeline": "target = sock_rcvlowat(sk, flags & MSG_WAITALL, len);"
    },
    {
        "line": 70,
        "fullcodeline": "timeout = sock_rcvtimeo(sk, flags & MSG_DONTWAIT);"
    },
    {
        "line": 71,
        "fullcodeline": "copied = 0;"
    },
    {
        "line": 73,
        "fullcodeline": "err = transport->notify_recv_init(vsk, target, &recv_data);"
    },
    {
        "line": 77,
        "fullcodeline": "prepare_to_wait(sk_sleep(sk), &wait, TASK_INTERRUPTIBLE);"
    },
    {
        "line": 178,
        "fullcodeline": "finish_wait(sk_sleep(sk), &wait);"
    },
    {
        "line": 180,
        "fullcodeline": "release_sock(sk);"
    },
    {
        "line": 23,
        "fullcodeline": "if (sk->sk_state != SS_CONNECTED) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (flags & MSG_OOB) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (sk->sk_shutdown & RCV_SHUTDOWN) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (!len) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (target >= transport->stream_rcvhiwat(vsk)) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 155,
        "fullcodeline": "if (copied > 0) {"
    },
    {
        "line": 38,
        "fullcodeline": "err = -EOPNOTSUPP;"
    },
    {
        "line": 47,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 55,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 67,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 80,
        "fullcodeline": "s64 ready = vsock_stream_has_data(vsk);"
    },
    {
        "line": 151,
        "fullcodeline": "err = -sk->sk_err;"
    },
    {
        "line": 174,
        "fullcodeline": "err = copied;"
    },
    {
        "line": 29,
        "fullcodeline": "if (sock_flag(sk, SOCK_DONE))"
    },
    {
        "line": 82,
        "fullcodeline": "if (ready < 0) {"
    },
    {
        "line": 161,
        "fullcodeline": "if (!(flags & MSG_PEEK)) {"
    },
    {
        "line": 30,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 87,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 152,
        "fullcodeline": "else if (sk->sk_shutdown & RCV_SHUTDOWN)"
    },
    {
        "line": 32,
        "fullcodeline": "err = -ENOTCONN;"
    },
    {
        "line": 153,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 166,
        "fullcodeline": "if (vsk->peer_shutdown & SEND_SHUTDOWN) {"
    },
    {
        "line": 89,
        "fullcodeline": "} else if (ready > 0) {"
    },
    {
        "line": 92,
        "fullcodeline": "err = transport->notify_recv_pre_dequeue("
    },
    {
        "line": 97,
        "fullcodeline": "read = transport->stream_dequeue("
    },
    {
        "line": 105,
        "fullcodeline": "copied += read;"
    },
    {
        "line": 107,
        "fullcodeline": "err = transport->notify_recv_post_dequeue("
    },
    {
        "line": 116,
        "fullcodeline": "target -= read;"
    },
    {
        "line": 167,
        "fullcodeline": "if (vsock_stream_has_data(vsk) <= 0) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 100,
        "fullcodeline": "if (read < 0) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 113,
        "fullcodeline": "if (read >= target || flags & MSG_PEEK)"
    },
    {
        "line": 128,
        "fullcodeline": "err = transport->notify_recv_pre_block("
    },
    {
        "line": 133,
        "fullcodeline": "release_sock(sk);"
    },
    {
        "line": 134,
        "fullcodeline": "timeout = schedule_timeout(timeout);"
    },
    {
        "line": 135,
        "fullcodeline": "lock_sock(sk);"
    },
    {
        "line": 145,
        "fullcodeline": "prepare_to_wait(sk_sleep(sk), &wait,"
    },
    {
        "line": 168,
        "fullcodeline": "sk->sk_state = SS_UNCONNECTED;"
    },
    {
        "line": 169,
        "fullcodeline": "sock_set_flag(sk, SOCK_DONE);"
    },
    {
        "line": 170,
        "fullcodeline": "sk->sk_state_change(sk);"
    },
    {
        "line": 99,
        "fullcodeline": "len - copied, flags);"
    },
    {
        "line": 101,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 109,
        "fullcodeline": "!(flags & MSG_PEEK), &recv_data);"
    },
    {
        "line": 118,
        "fullcodeline": "if (sk->sk_err != 0 || (sk->sk_shutdown & RCV_SHUTDOWN)"
    },
    {
        "line": 123,
        "fullcodeline": "if (timeout == 0) {"
    },
    {
        "line": 130,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 137,
        "fullcodeline": "if (signal_pending(current)) {"
    },
    {
        "line": 119,
        "fullcodeline": "|| (vsk->peer_shutdown & SEND_SHUTDOWN)) {"
    },
    {
        "line": 124,
        "fullcodeline": "err = -EAGAIN;"
    },
    {
        "line": 138,
        "fullcodeline": "err = sock_intr_errno(timeout);"
    },
    {
        "line": 140,
        "fullcodeline": "} else if (timeout == 0) {"
    },
    {
        "line": 141,
        "fullcodeline": "err = -EAGAIN;"
    }
]