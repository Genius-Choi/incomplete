[
    {
        "line": 3,
        "fullcodeline": "int withvalues = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "hashTypeRandomElement(hash,hashTypeLength(hash),&ele,NULL);"
    },
    {
        "line": 30,
        "fullcodeline": "hashReplyFromListpackEntry(c, &ele);"
    },
    {
        "line": 7,
        "fullcodeline": "if (c->argc >= 3) {"
    },
    {
        "line": 24,
        "fullcodeline": "if ((hash = lookupKeyReadOrReply(c,c->argv[1],shared.null[c->resp]))== NULL ||"
    },
    {
        "line": 19,
        "fullcodeline": "hrandfieldWithCountCommand(c, l, withvalues);"
    },
    {
        "line": 25,
        "fullcodeline": "checkType(c,hash,OBJ_HASH)) {"
    },
    {
        "line": 8,
        "fullcodeline": "if (getLongFromObjectOrReply(c,c->argv[2],&l,NULL) != C_OK) return;"
    },
    {
        "line": 9,
        "fullcodeline": "if (c->argc > 4 || (c->argc == 4 && strcasecmp(c->argv[3]->ptr,\"withvalues\"))) {"
    },
    {
        "line": 10,
        "fullcodeline": "addReplyErrorObject(c,shared.syntaxerr);"
    },
    {
        "line": 12,
        "fullcodeline": "} else if (c->argc == 4) {"
    },
    {
        "line": 13,
        "fullcodeline": "withvalues = 1;"
    },
    {
        "line": 14,
        "fullcodeline": "if (l < LONG_MIN/2 || l > LONG_MAX/2) {"
    },
    {
        "line": 15,
        "fullcodeline": "addReplyError(c,\"value is out of range\");"
    }
]