[
    {
        "line": 5,
        "fullcodeline": "struct l2cap_ecred_conn_req *req = (void *) data;"
    },
    {
        "line": 13,
        "fullcodeline": "u8 result, len = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "bool defer = false;"
    },
    {
        "line": 25,
        "fullcodeline": "cmd_len -= sizeof(*req);"
    },
    {
        "line": 26,
        "fullcodeline": "num_scid = cmd_len / sizeof(u16);"
    },
    {
        "line": 33,
        "fullcodeline": "mtu  = __le16_to_cpu(req->mtu);"
    },
    {
        "line": 34,
        "fullcodeline": "mps  = __le16_to_cpu(req->mps);"
    },
    {
        "line": 41,
        "fullcodeline": "psm  = req->psm;"
    },
    {
        "line": 55,
        "fullcodeline": "BT_DBG(\"psm 0x%2.2x mtu %u mps %u\", __le16_to_cpu(psm), mtu, mps);"
    },
    {
        "line": 57,
        "fullcodeline": "memset(&pdu, 0, sizeof(pdu));"
    },
    {
        "line": 60,
        "fullcodeline": "pchan = l2cap_global_chan_by_psm(BT_LISTEN, psm, &conn->hcon->src,"
    },
    {
        "line": 67,
        "fullcodeline": "mutex_lock(&conn->chan_lock);"
    },
    {
        "line": 68,
        "fullcodeline": "l2cap_chan_lock(pchan);"
    },
    {
        "line": 76,
        "fullcodeline": "result = L2CAP_CR_LE_SUCCESS;"
    },
    {
        "line": 140,
        "fullcodeline": "l2cap_chan_unlock(pchan);"
    },
    {
        "line": 141,
        "fullcodeline": "mutex_unlock(&conn->chan_lock);"
    },
    {
        "line": 142,
        "fullcodeline": "l2cap_chan_put(pchan);"
    },
    {
        "line": 145,
        "fullcodeline": "pdu.rsp.result = cpu_to_le16(result);"
    },
    {
        "line": 150,
        "fullcodeline": "l2cap_send_cmd(conn, cmd->ident, L2CAP_ECRED_CONN_RSP,"
    },
    {
        "line": 17,
        "fullcodeline": "if (!enable_ecred)"
    },
    {
        "line": 20,
        "fullcodeline": "if (cmd_len < sizeof(*req) || (cmd_len - sizeof(*req)) % sizeof(u16)) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (num_scid > ARRAY_SIZE(pdu.dcid)) {"
    },
    {
        "line": 36,
        "fullcodeline": "if (mtu < L2CAP_ECRED_MIN_MTU || mps < L2CAP_ECRED_MIN_MPS) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (!psm || __le16_to_cpu(psm) > L2CAP_PSM_LE_DYN_END) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (!pchan) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (!smp_sufficient_security(conn->hcon, pchan->sec_level,"
    },
    {
        "line": 78,
        "fullcodeline": "for (i = 0; i < num_scid; i++) {"
    },
    {
        "line": 151,
        "fullcodeline": "sizeof(pdu.rsp) + len, &pdu);"
    },
    {
        "line": 21,
        "fullcodeline": "result = L2CAP_CR_LE_INVALID_PARAMS;"
    },
    {
        "line": 29,
        "fullcodeline": "result = L2CAP_CR_LE_INVALID_PARAMS;"
    },
    {
        "line": 37,
        "fullcodeline": "result = L2CAP_CR_LE_UNACCEPT_PARAMS;"
    },
    {
        "line": 51,
        "fullcodeline": "result = L2CAP_CR_LE_BAD_PSM;"
    },
    {
        "line": 63,
        "fullcodeline": "result = L2CAP_CR_LE_BAD_PSM;"
    },
    {
        "line": 72,
        "fullcodeline": "result = L2CAP_CR_LE_AUTHENTICATION;"
    },
    {
        "line": 79,
        "fullcodeline": "u16 scid = __le16_to_cpu(req->scid[i]);"
    },
    {
        "line": 81,
        "fullcodeline": "BT_DBG(\"scid[%d] 0x%4.4x\", i, scid);"
    },
    {
        "line": 83,
        "fullcodeline": "pdu.dcid[i] = 0x0000;"
    },
    {
        "line": 84,
        "fullcodeline": "len += sizeof(*pdu.dcid);"
    },
    {
        "line": 98,
        "fullcodeline": "chan = pchan->ops->new_connection(pchan);"
    },
    {
        "line": 104,
        "fullcodeline": "bacpy(&chan->src, &conn->hcon->src);"
    },
    {
        "line": 105,
        "fullcodeline": "bacpy(&chan->dst, &conn->hcon->dst);"
    },
    {
        "line": 106,
        "fullcodeline": "chan->src_type = bdaddr_src_type(conn->hcon);"
    },
    {
        "line": 107,
        "fullcodeline": "chan->dst_type = bdaddr_dst_type(conn->hcon);"
    },
    {
        "line": 108,
        "fullcodeline": "chan->psm  = psm;"
    },
    {
        "line": 109,
        "fullcodeline": "chan->dcid = scid;"
    },
    {
        "line": 110,
        "fullcodeline": "chan->omtu = mtu;"
    },
    {
        "line": 111,
        "fullcodeline": "chan->remote_mps = mps;"
    },
    {
        "line": 113,
        "fullcodeline": "__l2cap_chan_add(conn, chan);"
    },
    {
        "line": 115,
        "fullcodeline": "l2cap_ecred_init(chan, __le16_to_cpu(req->credits));"
    },
    {
        "line": 124,
        "fullcodeline": "pdu.dcid[i] = cpu_to_le16(chan->scid);"
    },
    {
        "line": 126,
        "fullcodeline": "__set_chan_timer(chan, chan->ops->get_sndtimeo(chan));"
    },
    {
        "line": 128,
        "fullcodeline": "chan->ident = cmd->ident;"
    },
    {
        "line": 18,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 87,
        "fullcodeline": "if (scid < L2CAP_CID_DYN_START || scid > L2CAP_CID_LE_DYN_END) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (__l2cap_get_chan_by_dcid(conn, scid)) {"
    },
    {
        "line": 99,
        "fullcodeline": "if (!chan) {"
    },
    {
        "line": 118,
        "fullcodeline": "if (!pdu.rsp.credits) {"
    },
    {
        "line": 130,
        "fullcodeline": "if (test_bit(FLAG_DEFER_SETUP, &chan->flags)) {"
    },
    {
        "line": 88,
        "fullcodeline": "result = L2CAP_CR_LE_INVALID_SCID;"
    },
    {
        "line": 94,
        "fullcodeline": "result = L2CAP_CR_LE_SCID_IN_USE;"
    },
    {
        "line": 100,
        "fullcodeline": "result = L2CAP_CR_LE_NO_MEM;"
    },
    {
        "line": 119,
        "fullcodeline": "pdu.rsp.mtu = cpu_to_le16(chan->imtu);"
    },
    {
        "line": 120,
        "fullcodeline": "pdu.rsp.mps = cpu_to_le16(chan->mps);"
    },
    {
        "line": 121,
        "fullcodeline": "pdu.rsp.credits = cpu_to_le16(chan->rx_credits);"
    },
    {
        "line": 131,
        "fullcodeline": "l2cap_state_change(chan, BT_CONNECT2);"
    },
    {
        "line": 132,
        "fullcodeline": "defer = true;"
    },
    {
        "line": 133,
        "fullcodeline": "chan->ops->defer(chan);"
    },
    {
        "line": 135,
        "fullcodeline": "l2cap_chan_ready(chan);"
    }
]