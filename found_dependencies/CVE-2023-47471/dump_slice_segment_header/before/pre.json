[
    {
        "line": 14,
        "fullcodeline": "const pic_parameter_set* pps = ctx->get_pps(slice_pic_parameter_set_id);"
    },
    {
        "line": 17,
        "fullcodeline": "const seq_parameter_set* sps = ctx->get_sps((int)pps->seq_parameter_set_id);"
    },
    {
        "line": 18,
        "fullcodeline": "assert(sps->sps_read); // TODO: error handling"
    },
    {
        "line": 22,
        "fullcodeline": "LOG1(\"first_slice_segment_in_pic_flag      : %d\\n\", first_slice_segment_in_pic_flag);"
    },
    {
        "line": 28,
        "fullcodeline": "LOG1(\"slice_pic_parameter_set_id           : %d\\n\", slice_pic_parameter_set_id);"
    },
    {
        "line": 4,
        "fullcodeline": "if (fd==1) fh=stdout;"
    },
    {
        "line": 54,
        "fullcodeline": "LOG1(\"slice_pic_order_cnt_lsb              : %d\\n\", slice_pic_order_cnt_lsb);"
    },
    {
        "line": 179,
        "fullcodeline": "LOG1(\"slice_qp_delta         : %d\\n\", slice_qp_delta);"
    },
    {
        "line": 189,
        "fullcodeline": "LOG2(\"slice_deblocking_filter_disabled_flag : %d %s\\n\","
    },
    {
        "line": 21,
        "fullcodeline": "LOG0(\"----------------- SLICE -----------------\\n\");"
    },
    {
        "line": 23,
        "fullcodeline": "if (ctx->get_nal_unit_type() >= NAL_UNIT_BLA_W_LP &&"
    },
    {
        "line": 24,
        "fullcodeline": "ctx->get_nal_unit_type() <= NAL_UNIT_RESERVED_IRAP_VCL23) {"
    },
    {
        "line": 25,
        "fullcodeline": "LOG1(\"no_output_of_prior_pics_flag         : %d\\n\", no_output_of_prior_pics_flag);"
    },
    {
        "line": 32,
        "fullcodeline": "LOG1(\"dependent_slice_segment_flag         : %d\\n\", dependent_slice_segment_flag);"
    },
    {
        "line": 34,
        "fullcodeline": "LOG1(\"slice_segment_address                : %d\\n\", slice_segment_address);"
    },
    {
        "line": 50,
        "fullcodeline": "if (sps->separate_colour_plane_flag == 1) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (slice_type == SLICE_TYPE_P || slice_type == SLICE_TYPE_B) {"
    },
    {
        "line": 210,
        "fullcodeline": "LOG1(\"num_entry_point_offsets    : %d\\n\", num_entry_point_offsets);"
    },
    {
        "line": 42,
        "fullcodeline": "LOG1(\"slice_type                           : %c\\n\","
    },
    {
        "line": 47,
        "fullcodeline": "LOG1(\"pic_output_flag                      : %d\\n\", pic_output_flag);"
    },
    {
        "line": 51,
        "fullcodeline": "LOG1(\"colour_plane_id                      : %d\\n\", colour_plane_id);"
    },
    {
        "line": 56,
        "fullcodeline": "if (ctx->get_nal_unit_type() != NAL_UNIT_IDR_W_RADL &&"
    },
    {
        "line": 57,
        "fullcodeline": "ctx->get_nal_unit_type() != NAL_UNIT_IDR_N_LP) {"
    },
    {
        "line": 58,
        "fullcodeline": "LOG1(\"short_term_ref_pic_set_sps_flag      : %d\\n\", short_term_ref_pic_set_sps_flag);"
    },
    {
        "line": 92,
        "fullcodeline": "LOG1(\"slice_sao_luma_flag             : %d\\n\", slice_sao_luma_flag);"
    },
    {
        "line": 93,
        "fullcodeline": "LOG1(\"slice_sao_chroma_flag           : %d\\n\", slice_sao_chroma_flag);"
    },
    {
        "line": 98,
        "fullcodeline": "LOG1(\"num_ref_idx_active_override_flag : %d\\n\", num_ref_idx_active_override_flag);"
    },
    {
        "line": 100,
        "fullcodeline": "LOG2(\"num_ref_idx_l0_active          : %d %s\\n\", num_ref_idx_l0_active,"
    },
    {
        "line": 129,
        "fullcodeline": "LOG1(\"cabac_init_flag                : %d\\n\", cabac_init_flag);"
    },
    {
        "line": 175,
        "fullcodeline": "LOG1(\"five_minus_max_num_merge_cand  : %d\\n\", five_minus_max_num_merge_cand);"
    },
    {
        "line": 181,
        "fullcodeline": "LOG1(\"slice_cb_qp_offset     : %d\\n\", slice_cb_qp_offset);"
    },
    {
        "line": 182,
        "fullcodeline": "LOG1(\"slice_cr_qp_offset     : %d\\n\", slice_cr_qp_offset);"
    },
    {
        "line": 186,
        "fullcodeline": "LOG1(\"deblocking_filter_override_flag : %d\\n\", deblocking_filter_override_flag);"
    },
    {
        "line": 202,
        "fullcodeline": "(slice_sao_luma_flag || slice_sao_chroma_flag ||"
    },
    {
        "line": 204,
        "fullcodeline": "LOG1(\"slice_loop_filter_across_slices_enabled_flag : %d\\n\","
    },
    {
        "line": 212,
        "fullcodeline": "if (num_entry_point_offsets > 0) {"
    },
    {
        "line": 5,
        "fullcodeline": "else if (fd==2) fh=stderr;"
    },
    {
        "line": 103,
        "fullcodeline": "if (slice_type == SLICE_TYPE_B) {"
    },
    {
        "line": 125,
        "fullcodeline": "if (slice_type == SLICE_TYPE_B) {"
    },
    {
        "line": 195,
        "fullcodeline": "if (!slice_deblocking_filter_disabled_flag) {"
    },
    {
        "line": 203,
        "fullcodeline": "!slice_deblocking_filter_disabled_flag)) {"
    },
    {
        "line": 213,
        "fullcodeline": "LOG1(\"offset_len                 : %d\\n\", offset_len);"
    },
    {
        "line": 62,
        "fullcodeline": "dump_compact_short_term_ref_pic_set(&slice_ref_pic_set, 16, fh);"
    },
    {
        "line": 74,
        "fullcodeline": "LOG1(\"num_long_term_pics                       : %d\\n\", num_long_term_pics);"
    },
    {
        "line": 86,
        "fullcodeline": "LOG1(\"slice_temporal_mvp_enabled_flag : %d\\n\", slice_temporal_mvp_enabled_flag);"
    },
    {
        "line": 104,
        "fullcodeline": "LOG2(\"num_ref_idx_l1_active          : %d %s\\n\", num_ref_idx_l1_active,"
    },
    {
        "line": 108,
        "fullcodeline": "if (pps->lists_modification_present_flag && NumPocTotalCurr > 1)"
    },
    {
        "line": 110,
        "fullcodeline": "LOG1(\"ref_pic_list_modification_flag_l0 : %d\\n\", ref_pic_list_modification_flag_l0);"
    },
    {
        "line": 117,
        "fullcodeline": "LOG1(\"ref_pic_list_modification_flag_l1 : %d\\n\", ref_pic_list_modification_flag_l1);"
    },
    {
        "line": 126,
        "fullcodeline": "LOG1(\"mvd_l1_zero_flag               : %d\\n\", mvd_l1_zero_flag);"
    },
    {
        "line": 132,
        "fullcodeline": "LOG1(\"collocated_from_l0_flag        : %d\\n\", collocated_from_l0_flag);"
    },
    {
        "line": 133,
        "fullcodeline": "LOG1(\"collocated_ref_idx             : %d\\n\", collocated_ref_idx);"
    },
    {
        "line": 136,
        "fullcodeline": "if ((pps->weighted_pred_flag   && slice_type == SLICE_TYPE_P) ||"
    },
    {
        "line": 137,
        "fullcodeline": "(pps->weighted_bipred_flag && slice_type == SLICE_TYPE_B))"
    },
    {
        "line": 139,
        "fullcodeline": "LOG1(\"luma_log2_weight_denom         : %d\\n\", luma_log2_weight_denom);"
    },
    {
        "line": 196,
        "fullcodeline": "LOG1(\"slice_beta_offset  : %d\\n\", slice_beta_offset);"
    },
    {
        "line": 197,
        "fullcodeline": "LOG1(\"slice_tc_offset    : %d\\n\", slice_tc_offset);"
    },
    {
        "line": 215,
        "fullcodeline": "for (int i=0; i<num_entry_point_offsets; i++) {"
    },
    {
        "line": 61,
        "fullcodeline": "LOG1(\"ref_pic_set[ %2d ]: \",sps->num_short_term_ref_pic_sets());"
    },
    {
        "line": 140,
        "fullcodeline": "if (sps->chroma_format_idc != 0) {"
    },
    {
        "line": 144,
        "fullcodeline": "for (int l=0;l<=1;l++)"
    },
    {
        "line": 216,
        "fullcodeline": "LOG2(\"entry point [%i] : %d\\n\", i, entry_point_offset[i]);"
    },
    {
        "line": 71,
        "fullcodeline": "LOG1(\"num_long_term_sps                        : %d\\n\", num_long_term_sps);"
    },
    {
        "line": 141,
        "fullcodeline": "LOG1(\"ChromaLog2WeightDenom          : %d\\n\", ChromaLog2WeightDenom);"
    },
    {
        "line": 64,
        "fullcodeline": "else if (sps->num_short_term_ref_pic_sets() > 1) {"
    },
    {
        "line": 65,
        "fullcodeline": "LOG1(\"short_term_ref_pic_set_idx           : %d\\n\", short_term_ref_pic_set_idx);"
    },
    {
        "line": 66,
        "fullcodeline": "dump_compact_short_term_ref_pic_set(&sps->ref_pic_sets[short_term_ref_pic_set_idx], 16, fh);"
    },
    {
        "line": 112,
        "fullcodeline": "for (int i=0;i<num_ref_idx_l0_active;i++) {"
    },
    {
        "line": 119,
        "fullcodeline": "for (int i=0;i<num_ref_idx_l1_active;i++) {"
    },
    {
        "line": 145,
        "fullcodeline": "if (l==0 || (l==1 && slice_type == SLICE_TYPE_B))"
    },
    {
        "line": 147,
        "fullcodeline": "int num_ref = (l==0 ?"
    },
    {
        "line": 113,
        "fullcodeline": "LOG2(\"  %d: %d\\n\",i,list_entry_l0[i]);"
    },
    {
        "line": 120,
        "fullcodeline": "LOG2(\"  %d: %d\\n\",i,list_entry_l1[i]);"
    },
    {
        "line": 163,
        "fullcodeline": "for (int i=0;i<=num_ref;i++) {"
    },
    {
        "line": 148,
        "fullcodeline": "num_ref_idx_l0_active-1 :"
    },
    {
        "line": 149,
        "fullcodeline": "num_ref_idx_l1_active-1);"
    },
    {
        "line": 164,
        "fullcodeline": "LOG3(\"LumaWeight_L%d[%d]             : %d\\n\",l,i,LumaWeight[l][i]);"
    },
    {
        "line": 165,
        "fullcodeline": "LOG3(\"luma_offset_l%d[%d]            : %d\\n\",l,i,luma_offset[l][i]);"
    },
    {
        "line": 152,
        "fullcodeline": "for (int i=0;i<=num_ref;i++) {"
    },
    {
        "line": 167,
        "fullcodeline": "for (int j=0;j<2;j++) {"
    },
    {
        "line": 153,
        "fullcodeline": "LOG3(\"luma_weight_flag_l%d[%d]        : %d\\n\",l,i,luma_weight_flag[l][i]);"
    },
    {
        "line": 168,
        "fullcodeline": "LOG4(\"ChromaWeight_L%d[%d][%d]        : %d\\n\",l,i,j,ChromaWeight[l][i][j]);"
    },
    {
        "line": 169,
        "fullcodeline": "LOG4(\"ChromaOffset_L%d[%d][%d]        : %d\\n\",l,i,j,ChromaOffset[l][i][j]);"
    },
    {
        "line": 157,
        "fullcodeline": "for (int i=0;i<=num_ref;i++) {"
    },
    {
        "line": 158,
        "fullcodeline": "LOG3(\"chroma_weight_flag_l%d[%d]      : %d\\n\",l,i,chroma_weight_flag[l][i]);"
    }
]