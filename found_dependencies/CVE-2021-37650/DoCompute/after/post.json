[
    {
        "line": 2,
        "fullcodeline": "tensorflow::ResourceTagger tag(kTFDataResourceTag,"
    },
    {
        "line": 5,
        "fullcodeline": "TF_RETURN_IF_ERROR("
    },
    {
        "line": 8,
        "fullcodeline": "TF_RETURN_IF_ERROR(ParseScalarArgument<tstring>(ctx, \"compression_type\","
    },
    {
        "line": 10,
        "fullcodeline": "std::unique_ptr<WritableFile> file;"
    },
    {
        "line": 11,
        "fullcodeline": "TF_RETURN_IF_ERROR(ctx->env()->NewWritableFile(filename, &file));"
    },
    {
        "line": 12,
        "fullcodeline": "auto writer = absl::make_unique<io::RecordWriter>("
    },
    {
        "line": 17,
        "fullcodeline": "TF_RETURN_IF_ERROR(GetDatasetFromVariantTensor(ctx->input(0), &dataset));"
    },
    {
        "line": 19,
        "fullcodeline": "IteratorContext::Params params(ctx);"
    },
    {
        "line": 21,
        "fullcodeline": "params.function_handle_cache = &function_handle_cache;"
    },
    {
        "line": 23,
        "fullcodeline": "params.resource_mgr = &resource_mgr;"
    },
    {
        "line": 24,
        "fullcodeline": "CancellationManager cancellation_manager(ctx->cancellation_manager());"
    },
    {
        "line": 25,
        "fullcodeline": "params.cancellation_manager = &cancellation_manager;"
    },
    {
        "line": 27,
        "fullcodeline": "IteratorContext iter_ctx(std::move(params));"
    },
    {
        "line": 29,
        "fullcodeline": "TF_RETURN_IF_ERROR(FinalizeDataset(ctx, dataset, &finalized_dataset));"
    },
    {
        "line": 31,
        "fullcodeline": "std::unique_ptr<IteratorBase> iterator;"
    },
    {
        "line": 32,
        "fullcodeline": "TF_RETURN_IF_ERROR(finalized_dataset->MakeIterator("
    },
    {
        "line": 35,
        "fullcodeline": "const int num_output_dtypes = finalized_dataset->output_dtypes().size();"
    },
    {
        "line": 47,
        "fullcodeline": "std::vector<Tensor> components;"
    },
    {
        "line": 48,
        "fullcodeline": "components.reserve(num_output_dtypes);"
    },
    {
        "line": 3,
        "fullcodeline": "ctx->op_kernel().type_string());"
    },
    {
        "line": 6,
        "fullcodeline": "ParseScalarArgument<tstring>(ctx, \"filename\", &filename));"
    },
    {
        "line": 36,
        "fullcodeline": "if (num_output_dtypes != 1) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (dt != DT_STRING) {"
    },
    {
        "line": 59,
        "fullcodeline": "} while (!end_of_sequence);"
    },
    {
        "line": 60,
        "fullcodeline": "return Status::OK();"
    },
    {
        "line": 41,
        "fullcodeline": "const DataType dt = finalized_dataset->output_dtypes()[0];"
    },
    {
        "line": 51,
        "fullcodeline": "TF_RETURN_IF_ERROR("
    },
    {
        "line": 58,
        "fullcodeline": "components.clear();"
    },
    {
        "line": 13,
        "fullcodeline": "file.get(),"
    },
    {
        "line": 37,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 43,
        "fullcodeline": "return errors::InvalidArgument("
    },
    {
        "line": 52,
        "fullcodeline": "iterator->GetNext(&iter_ctx, &components, &end_of_sequence));"
    },
    {
        "line": 54,
        "fullcodeline": "if (!end_of_sequence) {"
    },
    {
        "line": 14,
        "fullcodeline": "io::RecordWriterOptions::CreateRecordWriterOptions(compression_type));"
    },
    {
        "line": 45,
        "fullcodeline": "DataTypeString(dt));"
    },
    {
        "line": 55,
        "fullcodeline": "TF_RETURN_IF_ERROR("
    },
    {
        "line": 56,
        "fullcodeline": "writer->WriteRecord(components[0].scalar<tstring>()()));"
    }
]