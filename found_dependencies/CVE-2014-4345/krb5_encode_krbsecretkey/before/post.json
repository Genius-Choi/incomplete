[
    {
        "line": 3,
        "fullcodeline": "struct berval **ret = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "int num_versions = 1;"
    },
    {
        "line": 7,
        "fullcodeline": "krb5_error_code err = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "key_data = k5calloc(n_key_data, sizeof(*key_data), &err);"
    },
    {
        "line": 17,
        "fullcodeline": "memcpy(key_data, key_data_in, n_key_data * sizeof(*key_data));"
    },
    {
        "line": 35,
        "fullcodeline": "ret = (struct berval **) calloc (num_versions + 1, sizeof (struct berval *));"
    },
    {
        "line": 61,
        "fullcodeline": "ret[num_versions] = NULL;"
    },
    {
        "line": 65,
        "fullcodeline": "free(key_data);"
    },
    {
        "line": 10,
        "fullcodeline": "if (n_key_data <= 0)"
    },
    {
        "line": 15,
        "fullcodeline": "if (key_data_in == NULL)"
    },
    {
        "line": 21,
        "fullcodeline": "for (i = 0; i < n_key_data; i++) {"
    },
    {
        "line": 31,
        "fullcodeline": "for (i = 0; i < n_key_data - 1; i++)"
    },
    {
        "line": 36,
        "fullcodeline": "if (ret == NULL) {"
    },
    {
        "line": 40,
        "fullcodeline": "for (i = 0, last = 0, j = 0, currkvno = key_data[0].key_data_kvno; i < n_key_data; i++) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (err != 0) {"
    },
    {
        "line": 37,
        "fullcodeline": "err = ENOMEM;"
    },
    {
        "line": 22,
        "fullcodeline": "if (key_data[i].key_data_ver == 1) {"
    },
    {
        "line": 33,
        "fullcodeline": "num_versions++;"
    },
    {
        "line": 42,
        "fullcodeline": "if (i == n_key_data - 1 || key_data[i + 1].key_data_kvno != currkvno) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (ret != NULL) {"
    },
    {
        "line": 23,
        "fullcodeline": "key_data[i].key_data_ver = 2;"
    },
    {
        "line": 24,
        "fullcodeline": "key_data[i].key_data_type[1] = KRB5_KDB_SALTTYPE_NORMAL;"
    },
    {
        "line": 25,
        "fullcodeline": "key_data[i].key_data_length[1] = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "key_data[i].key_data_contents[1] = NULL;"
    },
    {
        "line": 43,
        "fullcodeline": "ret[j] = k5alloc(sizeof(struct berval), &err);"
    },
    {
        "line": 46,
        "fullcodeline": "err = asn1_encode_sequence_of_keys(key_data + last,"
    },
    {
        "line": 52,
        "fullcodeline": "ret[j]->bv_len = code->length;"
    },
    {
        "line": 53,
        "fullcodeline": "ret[j]->bv_val = code->data;"
    },
    {
        "line": 54,
        "fullcodeline": "free(code);"
    },
    {
        "line": 55,
        "fullcodeline": "j++;"
    },
    {
        "line": 56,
        "fullcodeline": "last = i + 1;"
    },
    {
        "line": 71,
        "fullcodeline": "free (ret);"
    },
    {
        "line": 72,
        "fullcodeline": "ret = NULL;"
    },
    {
        "line": 32,
        "fullcodeline": "if (key_data[i].key_data_kvno != key_data[i + 1].key_data_kvno)"
    },
    {
        "line": 44,
        "fullcodeline": "if (ret[j] == NULL)"
    },
    {
        "line": 68,
        "fullcodeline": "for (i = 0; i <= num_versions; i++)"
    },
    {
        "line": 47,
        "fullcodeline": "(krb5_int16)i - last + 1,"
    },
    {
        "line": 69,
        "fullcodeline": "if (ret[i] != NULL)"
    },
    {
        "line": 70,
        "fullcodeline": "free (ret[i]);"
    }
]