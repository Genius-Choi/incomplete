[
    {
        "line": 4,
        "fullcodeline": "char\t\t\tname[256];\t/* Hostname of client */"
    },
    {
        "line": 10,
        "fullcodeline": "static time_t\t\tlast_dos = 0;\t/* Time of last DoS attack */"
    },
    {
        "line": 16,
        "fullcodeline": "cupsdLogMessage(CUPSD_LOG_DEBUG2, \"cupsdAcceptClient(lis=%p(%d)) Clients=%d\", lis, lis->fd, cupsArrayCount(Clients));"
    },
    {
        "line": 25,
        "fullcodeline": "cupsdSetBusyState(1);"
    },
    {
        "line": 64,
        "fullcodeline": "con->number = ++ LastClientNumber;"
    },
    {
        "line": 65,
        "fullcodeline": "con->file   = -1;"
    },
    {
        "line": 88,
        "fullcodeline": "cupsdLogClient(con, CUPSD_LOG_DEBUG, \"Server address is \\\"%s\\\".\", httpAddrString(&con->clientaddr, name, sizeof(name)));"
    },
    {
        "line": 237,
        "fullcodeline": "cupsdLogClient(con, CUPSD_LOG_DEBUG, \"Accepted from %s:%d (IPv%d)\","
    },
    {
        "line": 278,
        "fullcodeline": "cupsArrayAdd(Clients, con);"
    },
    {
        "line": 284,
        "fullcodeline": "cupsdAddSelect(httpGetFd(con->http), (cupsd_selfunc_t)cupsdReadClient, NULL,"
    },
    {
        "line": 287,
        "fullcodeline": "cupsdLogClient(con, CUPSD_LOG_DEBUG, \"Waiting for request.\");"
    },
    {
        "line": 22,
        "fullcodeline": "if (cupsArrayCount(Clients) == MaxClients)"
    },
    {
        "line": 31,
        "fullcodeline": "if (!Clients)"
    },
    {
        "line": 34,
        "fullcodeline": "if (!Clients)"
    },
    {
        "line": 42,
        "fullcodeline": "if (!ActiveClients)"
    },
    {
        "line": 45,
        "fullcodeline": "if (!ActiveClients)"
    },
    {
        "line": 53,
        "fullcodeline": "if ((con = calloc(1, sizeof(cupsd_client_t))) == NULL)"
    },
    {
        "line": 67,
        "fullcodeline": "if ((con->http = httpAcceptConnection(lis->fd, 0)) == NULL)"
    },
    {
        "line": 85,
        "fullcodeline": "if (getsockname(httpGetFd(con->http), (struct sockaddr *)&con->clientaddr, &addrlen) || addrlen == 0)"
    },
    {
        "line": 96,
        "fullcodeline": "tempcon = (cupsd_client_t *)cupsArrayNext(Clients))"
    },
    {
        "line": 104,
        "fullcodeline": "if (count >= MaxClientsPerHost)"
    },
    {
        "line": 130,
        "fullcodeline": "if (hostname == NULL && HostNameLookups == 2)"
    },
    {
        "line": 146,
        "fullcodeline": "if (HostNameLookups == 2)"
    },
    {
        "line": 238,
        "fullcodeline": "httpGetHostname(con->http, NULL, 0),"
    },
    {
        "line": 239,
        "fullcodeline": "httpAddrPort(httpGetAddress(con->http)),"
    },
    {
        "line": 240,
        "fullcodeline": "httpAddrFamily(httpGetAddress(con->http)) == AF_INET ? 4 : 6);"
    },
    {
        "line": 247,
        "fullcodeline": "if (getsockname(httpGetFd(con->http), (struct sockaddr *)&temp, &addrlen))"
    },
    {
        "line": 293,
        "fullcodeline": "if (cupsArrayCount(Clients) == MaxClients)"
    },
    {
        "line": 32,
        "fullcodeline": "Clients = cupsArrayNew(NULL, NULL);"
    },
    {
        "line": 36,
        "fullcodeline": "cupsdLogMessage(CUPSD_LOG_ERROR,"
    },
    {
        "line": 38,
        "fullcodeline": "cupsdPauseListening();"
    },
    {
        "line": 43,
        "fullcodeline": "ActiveClients = cupsArrayNew((cups_array_func_t)compare_clients, NULL);"
    },
    {
        "line": 47,
        "fullcodeline": "cupsdLogMessage(CUPSD_LOG_ERROR,"
    },
    {
        "line": 49,
        "fullcodeline": "cupsdPauseListening();"
    },
    {
        "line": 55,
        "fullcodeline": "cupsdLogMessage(CUPSD_LOG_ERROR, \"Unable to allocate memory for client!\");"
    },
    {
        "line": 56,
        "fullcodeline": "cupsdPauseListening();"
    },
    {
        "line": 72,
        "fullcodeline": "cupsdLogMessage(CUPSD_LOG_ERROR, \"Unable to accept client connection - %s.\","
    },
    {
        "line": 74,
        "fullcodeline": "free(con);"
    },
    {
        "line": 86,
        "fullcodeline": "con->clientaddr = lis->address;"
    },
    {
        "line": 94,
        "fullcodeline": "for (count = 0, tempcon = (cupsd_client_t *)cupsArrayFirst(Clients);"
    },
    {
        "line": 97,
        "fullcodeline": "if (httpAddrEqual(httpGetAddress(tempcon->http), httpGetAddress(con->http)))"
    },
    {
        "line": 116,
        "fullcodeline": "httpClose(con->http);"
    },
    {
        "line": 117,
        "fullcodeline": "free(con);"
    },
    {
        "line": 126,
        "fullcodeline": "hostname = httpResolveHostname(con->http, NULL, 0);"
    },
    {
        "line": 136,
        "fullcodeline": "httpClose(con->http);"
    },
    {
        "line": 138,
        "fullcodeline": "cupsdLogClient(con, CUPSD_LOG_WARN,"
    },
    {
        "line": 142,
        "fullcodeline": "free(con);"
    },
    {
        "line": 168,
        "fullcodeline": "httpAddrFreeList(addrlist);"
    },
    {
        "line": 249,
        "fullcodeline": "cupsdLogClient(con, CUPSD_LOG_ERROR, \"Unable to get local address - %s\","
    },
    {
        "line": 252,
        "fullcodeline": "strlcpy(con->servername, \"localhost\", sizeof(con->servername));"
    },
    {
        "line": 253,
        "fullcodeline": "con->serverport = LocalPort;"
    },
    {
        "line": 294,
        "fullcodeline": "cupsdPauseListening();"
    },
    {
        "line": 69,
        "fullcodeline": "if (errno == ENFILE || errno == EMFILE)"
    },
    {
        "line": 73,
        "fullcodeline": "strerror(errno));"
    },
    {
        "line": 99,
        "fullcodeline": "count ++;"
    },
    {
        "line": 106,
        "fullcodeline": "if ((time(NULL) - last_dos) >= 60)"
    },
    {
        "line": 128,
        "fullcodeline": "hostname = httpGetHostname(con->http, NULL, 0);"
    },
    {
        "line": 140,
        "fullcodeline": "httpGetHostname(con->http, NULL, 0));"
    },
    {
        "line": 155,
        "fullcodeline": "if ((addrlist = httpAddrGetList(hostname, AF_UNSPEC, NULL)) != NULL)"
    },
    {
        "line": 170,
        "fullcodeline": "if (!addr)"
    },
    {
        "line": 250,
        "fullcodeline": "strerror(errno));"
    },
    {
        "line": 271,
        "fullcodeline": "con->serverport = httpAddrPort(&(lis->address));"
    },
    {
        "line": 70,
        "fullcodeline": "cupsdPauseListening();"
    },
    {
        "line": 100,
        "fullcodeline": "if (count >= MaxClientsPerHost)"
    },
    {
        "line": 108,
        "fullcodeline": "last_dos = time(NULL);"
    },
    {
        "line": 109,
        "fullcodeline": "cupsdLogMessage(CUPSD_LOG_WARN,"
    },
    {
        "line": 177,
        "fullcodeline": "httpClose(con->http);"
    },
    {
        "line": 179,
        "fullcodeline": "cupsdLogClient(con, CUPSD_LOG_WARN,"
    },
    {
        "line": 182,
        "fullcodeline": "free(con);"
    },
    {
        "line": 264,
        "fullcodeline": "if (httpAddrLocalhost(&temp))"
    },
    {
        "line": 113,
        "fullcodeline": "httpGetHostname(con->http, name, sizeof(name)));"
    },
    {
        "line": 161,
        "fullcodeline": "for (addr = addrlist; addr; addr = addr->next)"
    },
    {
        "line": 166,
        "fullcodeline": "addr = NULL;"
    },
    {
        "line": 181,
        "fullcodeline": "httpGetHostname(con->http, NULL, 0));"
    },
    {
        "line": 265,
        "fullcodeline": "strlcpy(con->servername, \"localhost\", sizeof(con->servername));"
    },
    {
        "line": 162,
        "fullcodeline": "if (httpAddrEqual(httpGetAddress(con->http), &(addr->addr)))"
    },
    {
        "line": 267,
        "fullcodeline": "httpAddrLookup(&temp, con->servername, sizeof(con->servername));"
    },
    {
        "line": 269,
        "fullcodeline": "httpAddrString(&temp, con->servername, sizeof(con->servername));"
    }
]