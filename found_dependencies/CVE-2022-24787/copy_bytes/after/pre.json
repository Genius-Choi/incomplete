[
    {
        "line": 2,
        "fullcodeline": "annotation = f\"copy_bytes from {src} to {dst}\""
    },
    {
        "line": 4,
        "fullcodeline": "src = IRnode.from_list(src)"
    },
    {
        "line": 5,
        "fullcodeline": "dst = IRnode.from_list(dst)"
    },
    {
        "line": 6,
        "fullcodeline": "length = IRnode.from_list(length)"
    },
    {
        "line": 8,
        "fullcodeline": "with src.cache_when_complex(\"src\") as (b1, src), length.cache_when_complex("
    },
    {
        "line": 10,
        "fullcodeline": ") as (b2, length), dst.cache_when_complex(\"dst\") as (b3, dst):"
    },
    {
        "line": 45,
        "fullcodeline": "i = IRnode.from_list(_freshname(\"copy_bytes_ix\"), typ=\"uint256\")"
    },
    {
        "line": 47,
        "fullcodeline": "n = [\"div\", [\"ceil32\", length], 32]"
    },
    {
        "line": 48,
        "fullcodeline": "n_bound = ceil32(length_bound) // 32"
    },
    {
        "line": 50,
        "fullcodeline": "dst_i = add_ofst(dst, _mul(i, dst.location.word_scale))"
    },
    {
        "line": 51,
        "fullcodeline": "src_i = add_ofst(src, _mul(i, src.location.word_scale))"
    },
    {
        "line": 53,
        "fullcodeline": "copy_one_word = STORE(dst_i, LOAD(src_i))"
    },
    {
        "line": 55,
        "fullcodeline": "main_loop = [\"repeat\", i, 0, n, n_bound, copy_one_word]"
    },
    {
        "line": 14,
        "fullcodeline": "if length_bound <= 32:"
    },
    {
        "line": 57,
        "fullcodeline": "return b1.resolve("
    },
    {
        "line": 15,
        "fullcodeline": "copy_op = STORE(dst, LOAD(src))"
    },
    {
        "line": 16,
        "fullcodeline": "ret = IRnode.from_list(copy_op, annotation=annotation)"
    },
    {
        "line": 19,
        "fullcodeline": "if dst.location == MEMORY and src.location in (MEMORY, CALLDATA, DATA):"
    },
    {
        "line": 33,
        "fullcodeline": "ret = IRnode.from_list(copy_op, annotation=annotation, add_gas_estimate=gas_bound)"
    },
    {
        "line": 36,
        "fullcodeline": "if dst.location == IMMUTABLES and src.location in (MEMORY, DATA):"
    },
    {
        "line": 58,
        "fullcodeline": "b2.resolve(b3.resolve(IRnode.from_list(main_loop, annotation=annotation)))"
    },
    {
        "line": 17,
        "fullcodeline": "return b1.resolve(b2.resolve(b3.resolve(ret)))"
    },
    {
        "line": 22,
        "fullcodeline": "if src.location == MEMORY:"
    },
    {
        "line": 34,
        "fullcodeline": "return b1.resolve(b2.resolve(b3.resolve(ret)))"
    },
    {
        "line": 23,
        "fullcodeline": "copy_op = [\"staticcall\", \"gas\", 4, src, length, dst, length]"
    },
    {
        "line": 24,
        "fullcodeline": "gas_bound = _identity_gas_bound(length_bound)"
    },
    {
        "line": 25,
        "fullcodeline": "elif src.location == CALLDATA:"
    },
    {
        "line": 26,
        "fullcodeline": "copy_op = [\"calldatacopy\", dst, src, length]"
    },
    {
        "line": 27,
        "fullcodeline": "gas_bound = _calldatacopy_gas_bound(length_bound)"
    },
    {
        "line": 28,
        "fullcodeline": "elif src.location == DATA:"
    },
    {
        "line": 29,
        "fullcodeline": "copy_op = [\"dloadbytes\", dst, src, length]"
    },
    {
        "line": 31,
        "fullcodeline": "gas_bound = _codecopy_gas_bound(length_bound)"
    }
]