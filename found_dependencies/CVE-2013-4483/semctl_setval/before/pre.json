[
    {
        "line": 16,
        "fullcodeline": "val = arg;"
    },
    {
        "line": 19,
        "fullcodeline": "sma = sem_lock_check(ns, semid);"
    },
    {
        "line": 23,
        "fullcodeline": "INIT_LIST_HEAD(&tasks);"
    },
    {
        "line": 24,
        "fullcodeline": "nsems = sma->sem_nsems;"
    },
    {
        "line": 26,
        "fullcodeline": "err = -EACCES;"
    },
    {
        "line": 30,
        "fullcodeline": "err = security_sem_semctl(sma, SETVAL);"
    },
    {
        "line": 34,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 40,
        "fullcodeline": "err = -ERANGE;"
    },
    {
        "line": 45,
        "fullcodeline": "list_for_each_entry(un, &sma->list_id, list_id)"
    },
    {
        "line": 50,
        "fullcodeline": "sma->sem_ctime = get_seconds();"
    },
    {
        "line": 52,
        "fullcodeline": "do_smart_update(sma, NULL, 0, 0, &tasks);"
    },
    {
        "line": 53,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 20,
        "fullcodeline": "if (IS_ERR(sma))"
    },
    {
        "line": 27,
        "fullcodeline": "if (ipcperms(ns, &sma->sem_perm, S_IWUGO))"
    },
    {
        "line": 49,
        "fullcodeline": "curr->sempid = task_tgid_vnr(current);"
    },
    {
        "line": 35,
        "fullcodeline": "if(semnum < 0 || semnum >= nsems)"
    },
    {
        "line": 41,
        "fullcodeline": "if (val > SEMVMX || val < 0)"
    },
    {
        "line": 21,
        "fullcodeline": "return PTR_ERR(sma);"
    }
]