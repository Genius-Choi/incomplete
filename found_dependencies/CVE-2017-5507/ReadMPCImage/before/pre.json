[
    {
        "line": 4,
        "fullcodeline": "cache_filename[MagickPathExtent],"
    },
    {
        "line": 5,
        "fullcodeline": "id[MagickPathExtent],"
    },
    {
        "line": 6,
        "fullcodeline": "keyword[MagickPathExtent],"
    },
    {
        "line": 52,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 53,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 57,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 58,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 59,
        "fullcodeline": "image=AcquireImage(image_info,exception);"
    },
    {
        "line": 60,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 67,
        "fullcodeline": "AppendImageFormat(\"cache\",cache_filename);"
    },
    {
        "line": 68,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 74,
        "fullcodeline": "*id='\\0';"
    },
    {
        "line": 76,
        "fullcodeline": "offset=0;"
    },
    {
        "line": 54,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 61,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 66,
        "fullcodeline": "(void) CopyMagickString(cache_filename,image->filename,MagickPathExtent);"
    },
    {
        "line": 69,
        "fullcodeline": "if (c == EOF)"
    },
    {
        "line": 75,
        "fullcodeline": "(void) ResetMagickMemory(keyword,0,sizeof(keyword));"
    },
    {
        "line": 816,
        "fullcodeline": "} while (c != EOF);"
    },
    {
        "line": 817,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 818,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 55,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 63,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 82,
        "fullcodeline": "profiles=(LinkedListInfo *) NULL;"
    },
    {
        "line": 84,
        "fullcodeline": "options=AcquireString((char *) NULL);"
    },
    {
        "line": 85,
        "fullcodeline": "signature=GetMagickSignature((const StringInfo *) NULL);"
    },
    {
        "line": 86,
        "fullcodeline": "image->depth=8;"
    },
    {
        "line": 87,
        "fullcodeline": "image->compression=NoCompression;"
    },
    {
        "line": 688,
        "fullcodeline": "depth=GetImageQuantumDepth(image,MagickFalse);"
    },
    {
        "line": 783,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows,exception);"
    },
    {
        "line": 789,
        "fullcodeline": "status=PersistPixelCache(image,cache_filename,MagickTrue,&offset,exception);"
    },
    {
        "line": 64,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 71,
        "fullcodeline": "image=DestroyImage(image);"
    },
    {
        "line": 72,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 618,
        "fullcodeline": "options=DestroyString(options);"
    },
    {
        "line": 619,
        "fullcodeline": "(void) ReadBlobByte(image);"
    },
    {
        "line": 630,
        "fullcodeline": "if (image->montage != (char *) NULL)"
    },
    {
        "line": 660,
        "fullcodeline": "if (profiles != (LinkedListInfo *) NULL)"
    },
    {
        "line": 689,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 774,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 784,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 790,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 799,
        "fullcodeline": "if (c != EOF)"
    },
    {
        "line": 88,
        "fullcodeline": "while ((isgraph(c) != MagickFalse) && (c != (int) ':'))"
    },
    {
        "line": 623,
        "fullcodeline": "if ((LocaleCompare(id,\"MagickCache\") != 0) ||"
    },
    {
        "line": 626,
        "fullcodeline": "(image->rows == 0))"
    },
    {
        "line": 627,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 628,
        "fullcodeline": "if (signature != GetMagickSignature((const StringInfo *) NULL))"
    },
    {
        "line": 629,
        "fullcodeline": "ThrowReaderException(CacheError,\"IncompatibleAPI\");"
    },
    {
        "line": 638,
        "fullcodeline": "length=MagickPathExtent;"
    },
    {
        "line": 639,
        "fullcodeline": "image->directory=AcquireString((char *) NULL);"
    },
    {
        "line": 640,
        "fullcodeline": "p=image->directory;"
    },
    {
        "line": 674,
        "fullcodeline": "ResetLinkedListIterator(profiles);"
    },
    {
        "line": 675,
        "fullcodeline": "name=(const char *) GetNextValueInLinkedList(profiles);"
    },
    {
        "line": 776,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 780,
        "fullcodeline": "if ((image_info->ping != MagickFalse) && (image_info->number_scenes != 0))"
    },
    {
        "line": 791,
        "fullcodeline": "ThrowReaderException(CacheError,\"UnableToPersistPixelCache\");"
    },
    {
        "line": 797,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 798,
        "fullcodeline": "} while ((isgraph(c) == MagickFalse) && (c != EOF));"
    },
    {
        "line": 804,
        "fullcodeline": "AcquireNextImage(image_info,image,exception);"
    },
    {
        "line": 810,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 811,
        "fullcodeline": "status=SetImageProgress(image,LoadImagesTag,TellBlob(image),"
    },
    {
        "line": 93,
        "fullcodeline": "if (c == (int) '{')"
    },
    {
        "line": 616,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 625,
        "fullcodeline": "(image->compression == UndefinedCompression) || (image->columns == 0) ||"
    },
    {
        "line": 676,
        "fullcodeline": "while (name != (const char *) NULL)"
    },
    {
        "line": 686,
        "fullcodeline": "profiles=DestroyLinkedList(profiles,RelinquishMagickMemory);"
    },
    {
        "line": 694,
        "fullcodeline": "if (AcquireImageColormap(image,image->colors,exception) == MagickFalse)"
    },
    {
        "line": 696,
        "fullcodeline": "if (image->colors != 0)"
    },
    {
        "line": 781,
        "fullcodeline": "if (image->scene >= (image_info->scene+image_info->number_scenes-1))"
    },
    {
        "line": 785,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 813,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 101,
        "fullcodeline": "length=MagickPathExtent;"
    },
    {
        "line": 102,
        "fullcodeline": "comment=AcquireString((char *) NULL);"
    },
    {
        "line": 125,
        "fullcodeline": "*p='\\0';"
    },
    {
        "line": 128,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 615,
        "fullcodeline": "while (isspace((int) ((unsigned char) c)) != 0)"
    },
    {
        "line": 643,
        "fullcodeline": "*p='\\0';"
    },
    {
        "line": 656,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 678,
        "fullcodeline": "profile=GetImageProfile(image,name);"
    },
    {
        "line": 684,
        "fullcodeline": "name=(const char *) GetNextValueInLinkedList(profiles);"
    },
    {
        "line": 695,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 707,
        "fullcodeline": "packet_size=(size_t) (3UL*depth/8UL);"
    },
    {
        "line": 708,
        "fullcodeline": "colormap=(unsigned char *) AcquireQuantumMemory(image->colors,"
    },
    {
        "line": 712,
        "fullcodeline": "count=ReadBlob(image,packet_size*image->colors,colormap);"
    },
    {
        "line": 716,
        "fullcodeline": "p=colormap;"
    },
    {
        "line": 805,
        "fullcodeline": "if (GetNextImageInList(image) == (Image *) NULL)"
    },
    {
        "line": 812,
        "fullcodeline": "GetBlobSize(image));"
    },
    {
        "line": 103,
        "fullcodeline": "for (p=comment; comment != (char *) NULL; p++)"
    },
    {
        "line": 123,
        "fullcodeline": "if (comment == (char *) NULL)"
    },
    {
        "line": 126,
        "fullcodeline": "(void) SetImageProperty(image,\"comment\",comment,exception);"
    },
    {
        "line": 127,
        "fullcodeline": "comment=DestroyString(comment);"
    },
    {
        "line": 624,
        "fullcodeline": "(image->storage_class == UndefinedClass) ||"
    },
    {
        "line": 644,
        "fullcodeline": "if ((strlen(image->directory)+MagickPathExtent) >= length)"
    },
    {
        "line": 679,
        "fullcodeline": "if (profile != (StringInfo *) NULL)"
    },
    {
        "line": 710,
        "fullcodeline": "if (colormap == (unsigned char *) NULL)"
    },
    {
        "line": 807,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 808,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 105,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 121,
        "fullcodeline": "*p=(char) c;"
    },
    {
        "line": 124,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 131,
        "fullcodeline": "if (isalnum(c) != MagickFalse)"
    },
    {
        "line": 649,
        "fullcodeline": "length<<=1;"
    },
    {
        "line": 650,
        "fullcodeline": "image->directory=(char *) ResizeQuantumMemory(image->directory,"
    },
    {
        "line": 654,
        "fullcodeline": "p=image->directory+strlen(image->directory);"
    },
    {
        "line": 681,
        "fullcodeline": "p=GetStringInfoDatum(profile);"
    },
    {
        "line": 711,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 713,
        "fullcodeline": "if (count != (ssize_t) (packet_size*image->colors))"
    },
    {
        "line": 714,
        "fullcodeline": "ThrowReaderException(CorruptImageError,"
    },
    {
        "line": 720,
        "fullcodeline": "ThrowReaderException(CorruptImageError,"
    },
    {
        "line": 771,
        "fullcodeline": "colormap=(unsigned char *) RelinquishMagickMemory(colormap);"
    },
    {
        "line": 106,
        "fullcodeline": "if (c == (int) '\\\\')"
    },
    {
        "line": 111,
        "fullcodeline": "if ((size_t) (p-comment+1) >= length)"
    },
    {
        "line": 136,
        "fullcodeline": "length=MagickPathExtent;"
    },
    {
        "line": 137,
        "fullcodeline": "p=keyword;"
    },
    {
        "line": 146,
        "fullcodeline": "*p='\\0';"
    },
    {
        "line": 147,
        "fullcodeline": "p=options;"
    },
    {
        "line": 187,
        "fullcodeline": "*p='\\0';"
    },
    {
        "line": 652,
        "fullcodeline": "if (image->directory == (char *) NULL)"
    },
    {
        "line": 682,
        "fullcodeline": "count=ReadBlob(image,GetStringInfoLength(profile),p);"
    },
    {
        "line": 709,
        "fullcodeline": "packet_size*sizeof(*colormap));"
    },
    {
        "line": 107,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 114,
        "fullcodeline": "length<<=1;"
    },
    {
        "line": 115,
        "fullcodeline": "comment=(char *) ResizeQuantumMemory(comment,length+"
    },
    {
        "line": 119,
        "fullcodeline": "p=comment+strlen(comment);"
    },
    {
        "line": 145,
        "fullcodeline": "} while (c != EOF);"
    },
    {
        "line": 149,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 150,
        "fullcodeline": "if (c == (int) '=')"
    },
    {
        "line": 188,
        "fullcodeline": "if (*options == '{')"
    },
    {
        "line": 614,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 653,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");"
    },
    {
        "line": 727,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 743,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 759,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 117,
        "fullcodeline": "if (comment == (char *) NULL)"
    },
    {
        "line": 144,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 148,
        "fullcodeline": "while (isspace((int) ((unsigned char) c)) != 0)"
    },
    {
        "line": 155,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 729,
        "fullcodeline": "p=PushCharPixel(p,&pixel);"
    },
    {
        "line": 731,
        "fullcodeline": "p=PushCharPixel(p,&pixel);"
    },
    {
        "line": 733,
        "fullcodeline": "p=PushCharPixel(p,&pixel);"
    },
    {
        "line": 745,
        "fullcodeline": "p=PushShortPixel(MSBEndian,p,&pixel);"
    },
    {
        "line": 747,
        "fullcodeline": "p=PushShortPixel(MSBEndian,p,&pixel);"
    },
    {
        "line": 749,
        "fullcodeline": "p=PushShortPixel(MSBEndian,p,&pixel);"
    },
    {
        "line": 761,
        "fullcodeline": "p=PushLongPixel(MSBEndian,p,&pixel);"
    },
    {
        "line": 763,
        "fullcodeline": "p=PushLongPixel(MSBEndian,p,&pixel);"
    },
    {
        "line": 765,
        "fullcodeline": "p=PushLongPixel(MSBEndian,p,&pixel);"
    },
    {
        "line": 140,
        "fullcodeline": "if (c == (int) '=')"
    },
    {
        "line": 156,
        "fullcodeline": "while ((c != (int) '}') && (c != EOF))"
    },
    {
        "line": 183,
        "fullcodeline": "if (options == (char *) NULL)"
    },
    {
        "line": 189,
        "fullcodeline": "(void) CopyMagickString(options,options+1,strlen(options));"
    },
    {
        "line": 730,
        "fullcodeline": "image->colormap[i].red=ScaleCharToQuantum(pixel);"
    },
    {
        "line": 732,
        "fullcodeline": "image->colormap[i].green=ScaleCharToQuantum(pixel);"
    },
    {
        "line": 734,
        "fullcodeline": "image->colormap[i].blue=ScaleCharToQuantum(pixel);"
    },
    {
        "line": 746,
        "fullcodeline": "image->colormap[i].red=ScaleShortToQuantum(pixel);"
    },
    {
        "line": 748,
        "fullcodeline": "image->colormap[i].green=ScaleShortToQuantum(pixel);"
    },
    {
        "line": 750,
        "fullcodeline": "image->colormap[i].blue=ScaleShortToQuantum(pixel);"
    },
    {
        "line": 762,
        "fullcodeline": "image->colormap[i].red=ScaleLongToQuantum(pixel);"
    },
    {
        "line": 764,
        "fullcodeline": "image->colormap[i].green=ScaleLongToQuantum(pixel);"
    },
    {
        "line": 766,
        "fullcodeline": "image->colormap[i].blue=ScaleLongToQuantum(pixel);"
    },
    {
        "line": 109,
        "fullcodeline": "if ((c == EOF) || (c == (int) '}'))"
    },
    {
        "line": 142,
        "fullcodeline": "if ((size_t) (p-keyword) < (MagickPathExtent-1))"
    },
    {
        "line": 169,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 184,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,"
    },
    {
        "line": 216,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 244,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 296,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 324,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 348,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 369,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 385,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 413,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 431,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 475,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 486,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 526,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 537,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 569,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 587,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 603,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 608,
        "fullcodeline": "(void) SetImageProperty(image,keyword,options,exception);"
    },
    {
        "line": 158,
        "fullcodeline": "if ((size_t) (p-options+1) >= length)"
    },
    {
        "line": 170,
        "fullcodeline": "if (c == '\\\\')"
    },
    {
        "line": 179,
        "fullcodeline": "if (*options != '{')"
    },
    {
        "line": 198,
        "fullcodeline": "if (LocaleCompare(keyword,\"alpha-color\") == 0)"
    },
    {
        "line": 204,
        "fullcodeline": "if (LocaleCompare(keyword,\"alpha-trait\") == 0)"
    },
    {
        "line": 209,
        "fullcodeline": "alpha_trait=ParseCommandOption(MagickPixelTraitOptions,"
    },
    {
        "line": 213,
        "fullcodeline": "image->alpha_trait=(PixelTrait) alpha_trait;"
    },
    {
        "line": 222,
        "fullcodeline": "if (LocaleCompare(keyword,\"background-color\") == 0)"
    },
    {
        "line": 228,
        "fullcodeline": "if (LocaleCompare(keyword,\"blue-primary\") == 0)"
    },
    {
        "line": 230,
        "fullcodeline": "flags=ParseGeometry(options,&geometry_info);"
    },
    {
        "line": 231,
        "fullcodeline": "image->chromaticity.blue_primary.x=geometry_info.rho;"
    },
    {
        "line": 238,
        "fullcodeline": "if (LocaleCompare(keyword,\"border-color\") == 0)"
    },
    {
        "line": 250,
        "fullcodeline": "if (LocaleCompare(keyword,\"class\") == 0)"
    },
    {
        "line": 255,
        "fullcodeline": "storage_class=ParseCommandOption(MagickClassOptions,"
    },
    {
        "line": 259,
        "fullcodeline": "image->storage_class=(ClassType) storage_class;"
    },
    {
        "line": 262,
        "fullcodeline": "if (LocaleCompare(keyword,\"colors\") == 0)"
    },
    {
        "line": 264,
        "fullcodeline": "image->colors=StringToUnsignedLong(options);"
    },
    {
        "line": 267,
        "fullcodeline": "if (LocaleCompare(keyword,\"colorspace\") == 0)"
    },
    {
        "line": 272,
        "fullcodeline": "colorspace=ParseCommandOption(MagickColorspaceOptions,"
    },
    {
        "line": 276,
        "fullcodeline": "image->colorspace=(ColorspaceType) colorspace;"
    },
    {
        "line": 279,
        "fullcodeline": "if (LocaleCompare(keyword,\"compression\") == 0)"
    },
    {
        "line": 284,
        "fullcodeline": "compression=ParseCommandOption(MagickCompressOptions,"
    },
    {
        "line": 288,
        "fullcodeline": "image->compression=(CompressionType) compression;"
    },
    {
        "line": 291,
        "fullcodeline": "if (LocaleCompare(keyword,\"columns\") == 0)"
    },
    {
        "line": 293,
        "fullcodeline": "image->columns=StringToUnsignedLong(options);"
    },
    {
        "line": 302,
        "fullcodeline": "if (LocaleCompare(keyword,\"delay\") == 0)"
    },
    {
        "line": 304,
        "fullcodeline": "image->delay=StringToUnsignedLong(options);"
    },
    {
        "line": 307,
        "fullcodeline": "if (LocaleCompare(keyword,\"depth\") == 0)"
    },
    {
        "line": 309,
        "fullcodeline": "image->depth=StringToUnsignedLong(options);"
    },
    {
        "line": 312,
        "fullcodeline": "if (LocaleCompare(keyword,\"dispose\") == 0)"
    },
    {
        "line": 317,
        "fullcodeline": "dispose=ParseCommandOption(MagickDisposeOptions,MagickFalse,"
    },
    {
        "line": 321,
        "fullcodeline": "image->dispose=(DisposeType) dispose;"
    },
    {
        "line": 330,
        "fullcodeline": "if (LocaleCompare(keyword,\"endian\") == 0)"
    },
    {
        "line": 335,
        "fullcodeline": "endian=ParseCommandOption(MagickEndianOptions,MagickFalse,"
    },
    {
        "line": 339,
        "fullcodeline": "image->endian=(EndianType) endian;"
    },
    {
        "line": 342,
        "fullcodeline": "if (LocaleCompare(keyword,\"error\") == 0)"
    },
    {
        "line": 354,
        "fullcodeline": "if (LocaleCompare(keyword,\"gamma\") == 0)"
    },
    {
        "line": 356,
        "fullcodeline": "image->gamma=StringToDouble(options,(char **) NULL);"
    },
    {
        "line": 359,
        "fullcodeline": "if (LocaleCompare(keyword,\"green-primary\") == 0)"
    },
    {
        "line": 361,
        "fullcodeline": "flags=ParseGeometry(options,&geometry_info);"
    },
    {
        "line": 362,
        "fullcodeline": "image->chromaticity.green_primary.x=geometry_info.rho;"
    },
    {
        "line": 375,
        "fullcodeline": "if (LocaleCompare(keyword,\"id\") == 0)"
    },
    {
        "line": 380,
        "fullcodeline": "if (LocaleCompare(keyword,\"iterations\") == 0)"
    },
    {
        "line": 382,
        "fullcodeline": "image->iterations=StringToUnsignedLong(options);"
    },
    {
        "line": 391,
        "fullcodeline": "if (LocaleCompare(keyword,\"magick-signature\") == 0)"
    },
    {
        "line": 393,
        "fullcodeline": "signature=(unsigned int) StringToUnsignedLong(options);"
    },
    {
        "line": 396,
        "fullcodeline": "if (LocaleCompare(keyword,\"maximum-error\") == 0)"
    },
    {
        "line": 402,
        "fullcodeline": "if (LocaleCompare(keyword,\"mean-error\") == 0)"
    },
    {
        "line": 408,
        "fullcodeline": "if (LocaleCompare(keyword,\"montage\") == 0)"
    },
    {
        "line": 419,
        "fullcodeline": "if (LocaleCompare(keyword,\"orientation\") == 0)"
    },
    {
        "line": 424,
        "fullcodeline": "orientation=ParseCommandOption(MagickOrientationOptions,"
    },
    {
        "line": 428,
        "fullcodeline": "image->orientation=(OrientationType) orientation;"
    },
    {
        "line": 437,
        "fullcodeline": "if (LocaleCompare(keyword,\"page\") == 0)"
    },
    {
        "line": 442,
        "fullcodeline": "geometry=GetPageGeometry(options);"
    },
    {
        "line": 447,
        "fullcodeline": "if (LocaleCompare(keyword,\"pixel-intensity\") == 0)"
    },
    {
        "line": 452,
        "fullcodeline": "intensity=ParseCommandOption(MagickPixelIntensityOptions,"
    },
    {
        "line": 456,
        "fullcodeline": "image->intensity=(PixelIntensityMethod) intensity;"
    },
    {
        "line": 459,
        "fullcodeline": "if ((LocaleNCompare(keyword,\"profile:\",8) == 0) ||"
    },
    {
        "line": 460,
        "fullcodeline": "(LocaleNCompare(keyword,\"profile-\",8) == 0))"
    },
    {
        "line": 466,
        "fullcodeline": "profile=BlobToStringInfo((const void *) NULL,(size_t)"
    },
    {
        "line": 481,
        "fullcodeline": "if (LocaleCompare(keyword,\"quality\") == 0)"
    },
    {
        "line": 483,
        "fullcodeline": "image->quality=StringToUnsignedLong(options);"
    },
    {
        "line": 492,
        "fullcodeline": "if (LocaleCompare(keyword,\"red-primary\") == 0)"
    },
    {
        "line": 494,
        "fullcodeline": "flags=ParseGeometry(options,&geometry_info);"
    },
    {
        "line": 500,
        "fullcodeline": "if (LocaleCompare(keyword,\"rendering-intent\") == 0)"
    },
    {
        "line": 505,
        "fullcodeline": "rendering_intent=ParseCommandOption(MagickIntentOptions,"
    },
    {
        "line": 509,
        "fullcodeline": "image->rendering_intent=(RenderingIntent) rendering_intent;"
    },
    {
        "line": 512,
        "fullcodeline": "if (LocaleCompare(keyword,\"resolution\") == 0)"
    },
    {
        "line": 514,
        "fullcodeline": "flags=ParseGeometry(options,&geometry_info);"
    },
    {
        "line": 515,
        "fullcodeline": "image->resolution.x=geometry_info.rho;"
    },
    {
        "line": 521,
        "fullcodeline": "if (LocaleCompare(keyword,\"rows\") == 0)"
    },
    {
        "line": 523,
        "fullcodeline": "image->rows=StringToUnsignedLong(options);"
    },
    {
        "line": 532,
        "fullcodeline": "if (LocaleCompare(keyword,\"scene\") == 0)"
    },
    {
        "line": 534,
        "fullcodeline": "image->scene=StringToUnsignedLong(options);"
    },
    {
        "line": 543,
        "fullcodeline": "if (LocaleCompare(keyword,\"ticks-per-second\") == 0)"
    },
    {
        "line": 545,
        "fullcodeline": "image->ticks_per_second=(ssize_t) StringToLong(options);"
    },
    {
        "line": 548,
        "fullcodeline": "if (LocaleCompare(keyword,\"tile-offset\") == 0)"
    },
    {
        "line": 553,
        "fullcodeline": "geometry=GetPageGeometry(options);"
    },
    {
        "line": 557,
        "fullcodeline": "if (LocaleCompare(keyword,\"type\") == 0)"
    },
    {
        "line": 562,
        "fullcodeline": "type=ParseCommandOption(MagickTypeOptions,MagickFalse,"
    },
    {
        "line": 566,
        "fullcodeline": "image->type=(ImageType) type;"
    },
    {
        "line": 575,
        "fullcodeline": "if (LocaleCompare(keyword,\"units\") == 0)"
    },
    {
        "line": 580,
        "fullcodeline": "units=ParseCommandOption(MagickResolutionOptions,"
    },
    {
        "line": 584,
        "fullcodeline": "image->units=(ResolutionType) units;"
    },
    {
        "line": 593,
        "fullcodeline": "if (LocaleCompare(keyword,\"white-point\") == 0)"
    },
    {
        "line": 595,
        "fullcodeline": "flags=ParseGeometry(options,&geometry_info);"
    },
    {
        "line": 596,
        "fullcodeline": "image->chromaticity.white_point.x=geometry_info.rho;"
    },
    {
        "line": 143,
        "fullcodeline": "*p++=(char) c;"
    },
    {
        "line": 160,
        "fullcodeline": "*p='\\0';"
    },
    {
        "line": 161,
        "fullcodeline": "length<<=1;"
    },
    {
        "line": 162,
        "fullcodeline": "options=(char *) ResizeQuantumMemory(options,length+"
    },
    {
        "line": 166,
        "fullcodeline": "p=options+strlen(options);"
    },
    {
        "line": 168,
        "fullcodeline": "*p++=(char) c;"
    },
    {
        "line": 172,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 200,
        "fullcodeline": "(void) QueryColorCompliance(options,AllCompliance,"
    },
    {
        "line": 211,
        "fullcodeline": "if (alpha_trait < 0)"
    },
    {
        "line": 224,
        "fullcodeline": "(void) QueryColorCompliance(options,AllCompliance,"
    },
    {
        "line": 240,
        "fullcodeline": "(void) QueryColorCompliance(options,AllCompliance,"
    },
    {
        "line": 257,
        "fullcodeline": "if (storage_class < 0)"
    },
    {
        "line": 274,
        "fullcodeline": "if (colorspace < 0)"
    },
    {
        "line": 286,
        "fullcodeline": "if (compression < 0)"
    },
    {
        "line": 319,
        "fullcodeline": "if (dispose < 0)"
    },
    {
        "line": 337,
        "fullcodeline": "if (endian < 0)"
    },
    {
        "line": 344,
        "fullcodeline": "image->error.mean_error_per_pixel=StringToDouble(options,"
    },
    {
        "line": 377,
        "fullcodeline": "(void) CopyMagickString(id,options,MagickPathExtent);"
    },
    {
        "line": 398,
        "fullcodeline": "image->error.normalized_maximum_error=StringToDouble("
    },
    {
        "line": 404,
        "fullcodeline": "image->error.normalized_mean_error=StringToDouble(options,"
    },
    {
        "line": 410,
        "fullcodeline": "(void) CloneString(&image->montage,options);"
    },
    {
        "line": 426,
        "fullcodeline": "if (orientation < 0)"
    },
    {
        "line": 443,
        "fullcodeline": "(void) ParseAbsoluteGeometry(geometry,&image->page);"
    },
    {
        "line": 444,
        "fullcodeline": "geometry=DestroyString(geometry);"
    },
    {
        "line": 454,
        "fullcodeline": "if (intensity < 0)"
    },
    {
        "line": 462,
        "fullcodeline": "if (profiles == (LinkedListInfo *) NULL)"
    },
    {
        "line": 464,
        "fullcodeline": "(void) AppendValueToLinkedList(profiles,"
    },
    {
        "line": 468,
        "fullcodeline": "if (profile == (StringInfo *) NULL)"
    },
    {
        "line": 471,
        "fullcodeline": "(void) SetImageProfile(image,keyword+8,profile,exception);"
    },
    {
        "line": 472,
        "fullcodeline": "profile=DestroyStringInfo(profile);"
    },
    {
        "line": 507,
        "fullcodeline": "if (rendering_intent < 0)"
    },
    {
        "line": 554,
        "fullcodeline": "(void) ParseAbsoluteGeometry(geometry,&image->tile_offset);"
    },
    {
        "line": 555,
        "fullcodeline": "geometry=DestroyString(geometry);"
    },
    {
        "line": 564,
        "fullcodeline": "if (type < 0)"
    },
    {
        "line": 582,
        "fullcodeline": "if (units < 0)"
    },
    {
        "line": 164,
        "fullcodeline": "if (options == (char *) NULL)"
    },
    {
        "line": 173,
        "fullcodeline": "if (c == (int) '}')"
    },
    {
        "line": 233,
        "fullcodeline": "if ((flags & SigmaValue) == 0)"
    },
    {
        "line": 364,
        "fullcodeline": "if ((flags & SigmaValue) == 0)"
    },
    {
        "line": 463,
        "fullcodeline": "profiles=NewLinkedList(0);"
    },
    {
        "line": 465,
        "fullcodeline": "AcquireString(keyword+8));"
    },
    {
        "line": 469,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,"
    },
    {
        "line": 496,
        "fullcodeline": "if ((flags & SigmaValue) != 0)"
    },
    {
        "line": 517,
        "fullcodeline": "if ((flags & SigmaValue) == 0)"
    },
    {
        "line": 598,
        "fullcodeline": "if ((flags & SigmaValue) == 0)"
    },
    {
        "line": 176,
        "fullcodeline": "c=ReadBlobByte(image);"
    },
    {
        "line": 180,
        "fullcodeline": "if (isspace((int) ((unsigned char) c)) != 0)"
    },
    {
        "line": 467,
        "fullcodeline": "StringToLong(options));"
    },
    {
        "line": 175,
        "fullcodeline": "*p++=(char) c;"
    }
]