[
    {
        "line": 2,
        "fullcodeline": "status(\"Configuring csync2\")"
    },
    {
        "line": 7,
        "fullcodeline": "invoke(\"rm\", \"-f\", CSYNC2_KEY)"
    },
    {
        "line": 8,
        "fullcodeline": "status_long(\"Generating csync2 shared key (this may take a while)\")"
    },
    {
        "line": 11,
        "fullcodeline": "status_done()"
    },
    {
        "line": 13,
        "fullcodeline": "utils.str2file(\"\"\"group ha_group"
    },
    {
        "line": 37,
        "fullcodeline": "utils.start_service(\"csync2.socket\", enable=True)"
    },
    {
        "line": 38,
        "fullcodeline": "status_long(\"csync2 checking files\")"
    },
    {
        "line": 39,
        "fullcodeline": "invoke(\"csync2\", \"-cr\", \"/\")"
    },
    {
        "line": 40,
        "fullcodeline": "status_done()"
    },
    {
        "line": 9,
        "fullcodeline": "if not invokerc(\"csync2\", \"-k\", CSYNC2_KEY):"
    },
    {
        "line": 3,
        "fullcodeline": "if os.path.exists(CSYNC2_KEY):"
    },
    {
        "line": 10,
        "fullcodeline": "error(\"Can't create csync2 key {}\".format(CSYNC2_KEY))"
    },
    {
        "line": 35,
        "fullcodeline": "\"\"\" % (utils.this_node()), CSYNC2_CFG)"
    },
    {
        "line": 4,
        "fullcodeline": "if not confirm(\"csync2 is already configured - overwrite?\"):"
    }
]