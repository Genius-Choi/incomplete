[
    {
        "line": 4,
        "fullcodeline": "size_t initial_size = size;"
    },
    {
        "line": 6,
        "fullcodeline": "if (internal_decoder_data == NULL)"
    },
    {
        "line": 2038,
        "fullcodeline": "if (used_bytes != NULL)"
    },
    {
        "line": 9,
        "fullcodeline": "LogError(\"NULL internal_decoder_data\");"
    },
    {
        "line": 10,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 2040,
        "fullcodeline": "*used_bytes = initial_size - size;"
    },
    {
        "line": 14,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "while ((size > 0) && (internal_decoder_data->decoder_state != DECODER_STATE_DONE))"
    },
    {
        "line": 2031,
        "fullcodeline": "if (result != 0)"
    },
    {
        "line": 21,
        "fullcodeline": "LogError(\"Invalid decoder state: %d\", (int)internal_decoder_data->decoder_state);"
    },
    {
        "line": 22,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 45,
        "fullcodeline": "memset(internal_decoder_data->decode_to_value, 0, sizeof(AMQP_VALUE_DATA));"
    },
    {
        "line": 46,
        "fullcodeline": "internal_decoder_data->constructor_byte = buffer[0];"
    },
    {
        "line": 47,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 48,
        "fullcodeline": "size--;"
    },
    {
        "line": 27,
        "fullcodeline": "if ((internal_decoder_data->decode_to_value != NULL) && (!internal_decoder_data->is_internal))"
    },
    {
        "line": 33,
        "fullcodeline": "if (internal_decoder_data->decode_to_value == NULL)"
    },
    {
        "line": 38,
        "fullcodeline": "if (internal_decoder_data->decode_to_value == NULL)"
    },
    {
        "line": 29,
        "fullcodeline": "amqpvalue_destroy(internal_decoder_data->decode_to_value);"
    },
    {
        "line": 30,
        "fullcodeline": "internal_decoder_data->decode_to_value = NULL;"
    },
    {
        "line": 35,
        "fullcodeline": "internal_decoder_data->decode_to_value = (AMQP_VALUE_DATA*)REFCOUNT_TYPE_CREATE(AMQP_VALUE_DATA);"
    },
    {
        "line": 40,
        "fullcodeline": "LogError(\"Cannot allocate decode value\");"
    },
    {
        "line": 41,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 53,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 54,
        "fullcodeline": "LogError(\"Invalid constructor byte: 0x%02x\", internal_decoder_data->constructor_byte);"
    },
    {
        "line": 55,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 423,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_LIST;"
    },
    {
        "line": 424,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 425,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.list_value.count = 0;"
    },
    {
        "line": 426,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.list_value.items = NULL;"
    },
    {
        "line": 431,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 432,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 438,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_LIST;"
    },
    {
        "line": 439,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 440,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.list_value.count = 0;"
    },
    {
        "line": 441,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.list_value.items = NULL;"
    },
    {
        "line": 442,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 443,
        "fullcodeline": "internal_decoder_data->decode_value_state.list_value_state.list_value_state = DECODE_LIST_STEP_SIZE;"
    },
    {
        "line": 446,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 451,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_MAP;"
    },
    {
        "line": 452,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 453,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.map_value.pair_count = 0;"
    },
    {
        "line": 454,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.map_value.pairs = NULL;"
    },
    {
        "line": 455,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 456,
        "fullcodeline": "internal_decoder_data->decode_value_state.map_value_state.map_value_state = DECODE_MAP_STEP_SIZE;"
    },
    {
        "line": 458,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 463,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_ARRAY;"
    },
    {
        "line": 464,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 465,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.array_value.count = 0;"
    },
    {
        "line": 466,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.array_value.items = NULL;"
    },
    {
        "line": 467,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 468,
        "fullcodeline": "internal_decoder_data->decode_value_state.array_value_state.array_value_state = DECODE_ARRAY_STEP_SIZE;"
    },
    {
        "line": 470,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 481,
        "fullcodeline": "LogError(\"Invalid constructor byte: 0x%02x\", internal_decoder_data->constructor_byte);"
    },
    {
        "line": 482,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 61,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_DESCRIBED;"
    },
    {
        "line": 62,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.described_value.value = NULL;"
    },
    {
        "line": 63,
        "fullcodeline": "descriptor = REFCOUNT_TYPE_CREATE(AMQP_VALUE_DATA);"
    },
    {
        "line": 96,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_NULL;"
    },
    {
        "line": 97,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 102,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 103,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 112,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_BOOL;"
    },
    {
        "line": 113,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 114,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 117,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 124,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_BOOL;"
    },
    {
        "line": 125,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.bool_value = true;"
    },
    {
        "line": 126,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 131,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 132,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 139,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_BOOL;"
    },
    {
        "line": 140,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.bool_value = false;"
    },
    {
        "line": 141,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 146,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 147,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 154,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_UBYTE;"
    },
    {
        "line": 155,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 156,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.ubyte_value = 0;"
    },
    {
        "line": 159,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 166,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_USHORT;"
    },
    {
        "line": 167,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 168,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.ushort_value = 0;"
    },
    {
        "line": 169,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 172,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 180,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_UINT;"
    },
    {
        "line": 181,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 182,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.uint_value = 0;"
    },
    {
        "line": 183,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 186,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 193,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_UINT;"
    },
    {
        "line": 194,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.uint_value = 0;"
    },
    {
        "line": 195,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 200,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 201,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 208,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_ULONG;"
    },
    {
        "line": 209,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 210,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.ulong_value = 0;"
    },
    {
        "line": 213,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 214,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 220,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_ULONG;"
    },
    {
        "line": 221,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 222,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.ulong_value = 0;"
    },
    {
        "line": 225,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 226,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 233,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_ULONG;"
    },
    {
        "line": 234,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.ulong_value = 0;"
    },
    {
        "line": 235,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 240,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 241,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 248,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_BYTE;"
    },
    {
        "line": 249,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 250,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.byte_value = 0;"
    },
    {
        "line": 251,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 254,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 261,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_SHORT;"
    },
    {
        "line": 262,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 263,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.short_value = 0;"
    },
    {
        "line": 264,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 267,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 274,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_INT;"
    },
    {
        "line": 275,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 276,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.int_value = 0;"
    },
    {
        "line": 277,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 280,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 287,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_INT;"
    },
    {
        "line": 288,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 289,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.int_value = 0;"
    },
    {
        "line": 292,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 299,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_LONG;"
    },
    {
        "line": 300,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 301,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.long_value = 0;"
    },
    {
        "line": 302,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 305,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 312,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_LONG;"
    },
    {
        "line": 313,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 314,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.long_value = 0;"
    },
    {
        "line": 317,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 324,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_FLOAT;"
    },
    {
        "line": 325,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 326,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 327,
        "fullcodeline": "*((uint32_t*)&internal_decoder_data->decode_to_value->value.float_value) = 0;"
    },
    {
        "line": 330,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 337,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_DOUBLE;"
    },
    {
        "line": 338,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 339,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 340,
        "fullcodeline": "*((uint64_t*)&internal_decoder_data->decode_to_value->value.double_value) = 0;"
    },
    {
        "line": 343,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 350,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_TIMESTAMP;"
    },
    {
        "line": 351,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 352,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.timestamp_value = 0;"
    },
    {
        "line": 353,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 356,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 363,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_UUID;"
    },
    {
        "line": 364,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 365,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.timestamp_value = 0;"
    },
    {
        "line": 366,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 369,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 378,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_BINARY;"
    },
    {
        "line": 379,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 380,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.binary_value.length = 0;"
    },
    {
        "line": 381,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.binary_value.bytes = NULL;"
    },
    {
        "line": 382,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 385,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 394,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_STRING;"
    },
    {
        "line": 395,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 396,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.string_value.chars = NULL;"
    },
    {
        "line": 397,
        "fullcodeline": "internal_decoder_data->decode_value_state.string_value_state.length = 0;"
    },
    {
        "line": 398,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 401,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 410,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_SYMBOL;"
    },
    {
        "line": 411,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 412,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.symbol_value.chars = NULL;"
    },
    {
        "line": 413,
        "fullcodeline": "internal_decoder_data->decode_value_state.symbol_value_state.length = 0;"
    },
    {
        "line": 414,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 417,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 487,
        "fullcodeline": "DECODE_DESCRIBED_VALUE_STEP step = internal_decoder_data->decode_value_state.described_value_state.described_value_state;"
    },
    {
        "line": 605,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.ubyte_value = buffer[0];"
    },
    {
        "line": 606,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 607,
        "fullcodeline": "size--;"
    },
    {
        "line": 608,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 613,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 614,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 620,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.ushort_value += ((uint16_t)buffer[0]) << ((1 - internal_decoder_data->bytes_decoded) * 8);"
    },
    {
        "line": 621,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 622,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 623,
        "fullcodeline": "size--;"
    },
    {
        "line": 634,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 640,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.uint_value += ((uint32_t)buffer[0]) << ((3 - internal_decoder_data->bytes_decoded) * 8);"
    },
    {
        "line": 641,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 642,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 643,
        "fullcodeline": "size--;"
    },
    {
        "line": 656,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 662,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.uint_value = buffer[0];"
    },
    {
        "line": 663,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 664,
        "fullcodeline": "size--;"
    },
    {
        "line": 665,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 670,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 671,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 677,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.ulong_value += ((uint64_t)buffer[0]) << ((7 - internal_decoder_data->bytes_decoded) * 8);"
    },
    {
        "line": 678,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 679,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 680,
        "fullcodeline": "size--;"
    },
    {
        "line": 693,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 699,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.ulong_value = buffer[0];"
    },
    {
        "line": 700,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 701,
        "fullcodeline": "size--;"
    },
    {
        "line": 702,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 707,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 708,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 714,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.byte_value = buffer[0];"
    },
    {
        "line": 715,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 716,
        "fullcodeline": "size--;"
    },
    {
        "line": 717,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 722,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 723,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 729,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.short_value = (int16_t)((uint16_t)internal_decoder_data->decode_to_value->value.short_value + (((uint16_t)buffer[0]) << ((1 - internal_decoder_data->bytes_decoded) * 8)));"
    },
    {
        "line": 730,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 731,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 732,
        "fullcodeline": "size--;"
    },
    {
        "line": 745,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 751,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.int_value = (int32_t)((uint32_t)internal_decoder_data->decode_to_value->value.int_value + (((uint32_t)buffer[0]) << ((3 - internal_decoder_data->bytes_decoded) * 8)));"
    },
    {
        "line": 752,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 753,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 754,
        "fullcodeline": "size--;"
    },
    {
        "line": 767,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 773,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.int_value = (int32_t)((int8_t)(buffer[0]));"
    },
    {
        "line": 774,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 775,
        "fullcodeline": "size--;"
    },
    {
        "line": 776,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 781,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 782,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 788,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.long_value = (int64_t)((uint64_t)internal_decoder_data->decode_to_value->value.long_value + (((uint64_t)buffer[0]) << ((7 - internal_decoder_data->bytes_decoded) * 8)));"
    },
    {
        "line": 789,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 790,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 791,
        "fullcodeline": "size--;"
    },
    {
        "line": 804,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 810,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.long_value = (int64_t)((int8_t)buffer[0]);"
    },
    {
        "line": 811,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 812,
        "fullcodeline": "size--;"
    },
    {
        "line": 813,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 818,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 819,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 825,
        "fullcodeline": "*((uint32_t*)&internal_decoder_data->decode_to_value->value.float_value) += ((uint32_t)buffer[0]) << ((3 - internal_decoder_data->bytes_decoded) * 8);"
    },
    {
        "line": 826,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 827,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 828,
        "fullcodeline": "size--;"
    },
    {
        "line": 841,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 847,
        "fullcodeline": "*((uint64_t*)&internal_decoder_data->decode_to_value->value.double_value) += ((uint64_t)buffer[0]) << ((7 - internal_decoder_data->bytes_decoded) * 8);"
    },
    {
        "line": 848,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 849,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 850,
        "fullcodeline": "size--;"
    },
    {
        "line": 863,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 869,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.timestamp_value = (int64_t)((uint64_t)internal_decoder_data->decode_to_value->value.timestamp_value + (((uint64_t)buffer[0]) << ((7 - internal_decoder_data->bytes_decoded) * 8)));"
    },
    {
        "line": 870,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 871,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 872,
        "fullcodeline": "size--;"
    },
    {
        "line": 885,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 891,
        "fullcodeline": "size_t to_copy = 16 - internal_decoder_data->bytes_decoded;"
    },
    {
        "line": 897,
        "fullcodeline": "(void)memcpy(&internal_decoder_data->decode_to_value->value.uuid_value[internal_decoder_data->bytes_decoded], buffer, to_copy);"
    },
    {
        "line": 898,
        "fullcodeline": "internal_decoder_data->bytes_decoded += to_copy;"
    },
    {
        "line": 899,
        "fullcodeline": "buffer += to_copy;"
    },
    {
        "line": 900,
        "fullcodeline": "size -= to_copy;"
    },
    {
        "line": 913,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1321,
        "fullcodeline": "DECODE_LIST_STEP step = internal_decoder_data->decode_value_state.list_value_state.list_value_state;"
    },
    {
        "line": 1543,
        "fullcodeline": "DECODE_MAP_STEP step = internal_decoder_data->decode_value_state.map_value_state.map_value_state;"
    },
    {
        "line": 1772,
        "fullcodeline": "DECODE_ARRAY_STEP step = internal_decoder_data->decode_value_state.array_value_state.array_value_state;"
    },
    {
        "line": 64,
        "fullcodeline": "if (descriptor == NULL)"
    },
    {
        "line": 580,
        "fullcodeline": "if (buffer[0] >= 2)"
    },
    {
        "line": 624,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 2)"
    },
    {
        "line": 646,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 4)"
    },
    {
        "line": 683,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 8)"
    },
    {
        "line": 735,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 2)"
    },
    {
        "line": 757,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 4)"
    },
    {
        "line": 794,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 8)"
    },
    {
        "line": 831,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 4)"
    },
    {
        "line": 853,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 8)"
    },
    {
        "line": 875,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 8)"
    },
    {
        "line": 892,
        "fullcodeline": "if (to_copy > size)"
    },
    {
        "line": 903,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 16)"
    },
    {
        "line": 919,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 0)"
    },
    {
        "line": 984,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded < 4)"
    },
    {
        "line": 1061,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 0)"
    },
    {
        "line": 1122,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded < 4)"
    },
    {
        "line": 1190,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 0)"
    },
    {
        "line": 1251,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded < 4)"
    },
    {
        "line": 66,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 67,
        "fullcodeline": "LogError(\"Could not allocate memory for descriptor\");"
    },
    {
        "line": 68,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 491,
        "fullcodeline": "LogError(\"Invalid described value decode step: %d\", step);"
    },
    {
        "line": 492,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 582,
        "fullcodeline": "LogError(\"Bad boolean value: %02X\", buffer[0]);"
    },
    {
        "line": 583,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 626,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 631,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 648,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 653,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 685,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 690,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 737,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 742,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 759,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 764,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 796,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 801,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 833,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 838,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 855,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 860,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 877,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 882,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 894,
        "fullcodeline": "to_copy = size;"
    },
    {
        "line": 905,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 910,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 921,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.binary_value.length = buffer[0];"
    },
    {
        "line": 922,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 923,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 924,
        "fullcodeline": "size--;"
    },
    {
        "line": 986,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.binary_value.length += buffer[0] << ((3 - internal_decoder_data->bytes_decoded) * 8);"
    },
    {
        "line": 987,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 988,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 989,
        "fullcodeline": "size--;"
    },
    {
        "line": 1063,
        "fullcodeline": "internal_decoder_data->decode_value_state.string_value_state.length = buffer[0];"
    },
    {
        "line": 1064,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 1065,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 1066,
        "fullcodeline": "size--;"
    },
    {
        "line": 1068,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.string_value.chars = (char*)malloc((size_t)internal_decoder_data->decode_value_state.string_value_state.length + 1);"
    },
    {
        "line": 1124,
        "fullcodeline": "internal_decoder_data->decode_value_state.string_value_state.length += buffer[0] << ((3 - internal_decoder_data->bytes_decoded) * 8);"
    },
    {
        "line": 1125,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 1126,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 1127,
        "fullcodeline": "size--;"
    },
    {
        "line": 1192,
        "fullcodeline": "internal_decoder_data->decode_value_state.symbol_value_state.length = buffer[0];"
    },
    {
        "line": 1193,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 1194,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 1195,
        "fullcodeline": "size--;"
    },
    {
        "line": 1197,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.symbol_value.chars = (char*)malloc((size_t)internal_decoder_data->decode_value_state.symbol_value_state.length + 1);"
    },
    {
        "line": 1253,
        "fullcodeline": "internal_decoder_data->decode_value_state.symbol_value_state.length += buffer[0] << ((3 - internal_decoder_data->bytes_decoded) * 8);"
    },
    {
        "line": 1254,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 1255,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 1256,
        "fullcodeline": "size--;"
    },
    {
        "line": 1326,
        "fullcodeline": "LogError(\"Invalid step in decoding list value: %d\", step);"
    },
    {
        "line": 1327,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1331,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 1332,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 1333,
        "fullcodeline": "size--;"
    },
    {
        "line": 1366,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 1367,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 1368,
        "fullcodeline": "size--;"
    },
    {
        "line": 1548,
        "fullcodeline": "LogError(\"Invalid step in decoding map value: %d\", step);"
    },
    {
        "line": 1549,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1553,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 1554,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 1555,
        "fullcodeline": "size--;"
    },
    {
        "line": 1586,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 1587,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 1588,
        "fullcodeline": "size--;"
    },
    {
        "line": 1777,
        "fullcodeline": "LogError(\"Invalid step in decoding array value: %d\", step);"
    },
    {
        "line": 1778,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1782,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 1783,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 1784,
        "fullcodeline": "size--;"
    },
    {
        "line": 1816,
        "fullcodeline": "internal_decoder_data->bytes_decoded++;"
    },
    {
        "line": 1817,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 1818,
        "fullcodeline": "size--;"
    },
    {
        "line": 72,
        "fullcodeline": "descriptor->type = AMQP_TYPE_UNKNOWN;"
    },
    {
        "line": 73,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.described_value.descriptor = descriptor;"
    },
    {
        "line": 74,
        "fullcodeline": "internal_decoder_data->inner_decoder = internal_decoder_create(inner_decoder_callback, internal_decoder_data, descriptor, true);"
    },
    {
        "line": 587,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.bool_value = (buffer[0] == 0) ? false : true;"
    },
    {
        "line": 589,
        "fullcodeline": "buffer++;"
    },
    {
        "line": 590,
        "fullcodeline": "size--;"
    },
    {
        "line": 591,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 596,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 597,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 926,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.binary_value.length == 0)"
    },
    {
        "line": 954,
        "fullcodeline": "size_t to_copy = internal_decoder_data->decode_to_value->value.binary_value.length - (internal_decoder_data->bytes_decoded - 1);"
    },
    {
        "line": 960,
        "fullcodeline": "(void)memcpy((unsigned char*)(internal_decoder_data->decode_to_value->value.binary_value.bytes) + (internal_decoder_data->bytes_decoded - 1), buffer, to_copy);"
    },
    {
        "line": 962,
        "fullcodeline": "buffer += to_copy;"
    },
    {
        "line": 963,
        "fullcodeline": "size -= to_copy;"
    },
    {
        "line": 964,
        "fullcodeline": "internal_decoder_data->bytes_decoded += to_copy;"
    },
    {
        "line": 976,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 991,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 4)"
    },
    {
        "line": 1036,
        "fullcodeline": "size_t to_copy = internal_decoder_data->decode_to_value->value.binary_value.length - (internal_decoder_data->bytes_decoded - 4);"
    },
    {
        "line": 1042,
        "fullcodeline": "(void)memcpy((unsigned char*)(internal_decoder_data->decode_to_value->value.binary_value.bytes) + (internal_decoder_data->bytes_decoded - 4), buffer, to_copy);"
    },
    {
        "line": 1043,
        "fullcodeline": "buffer += to_copy;"
    },
    {
        "line": 1044,
        "fullcodeline": "size -= to_copy;"
    },
    {
        "line": 1045,
        "fullcodeline": "internal_decoder_data->bytes_decoded += to_copy;"
    },
    {
        "line": 1053,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1069,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.string_value.chars == NULL)"
    },
    {
        "line": 1093,
        "fullcodeline": "size_t to_copy = internal_decoder_data->decode_value_state.string_value_state.length - (internal_decoder_data->bytes_decoded - 1);"
    },
    {
        "line": 1099,
        "fullcodeline": "(void)memcpy(internal_decoder_data->decode_to_value->value.string_value.chars + (internal_decoder_data->bytes_decoded - 1), buffer, to_copy);"
    },
    {
        "line": 1100,
        "fullcodeline": "buffer += to_copy;"
    },
    {
        "line": 1101,
        "fullcodeline": "size -= to_copy;"
    },
    {
        "line": 1102,
        "fullcodeline": "internal_decoder_data->bytes_decoded += to_copy;"
    },
    {
        "line": 1115,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1129,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 4)"
    },
    {
        "line": 1161,
        "fullcodeline": "size_t to_copy = internal_decoder_data->decode_value_state.string_value_state.length - (internal_decoder_data->bytes_decoded - 4);"
    },
    {
        "line": 1167,
        "fullcodeline": "(void)memcpy(internal_decoder_data->decode_to_value->value.string_value.chars + (internal_decoder_data->bytes_decoded - 4), buffer, to_copy);"
    },
    {
        "line": 1168,
        "fullcodeline": "buffer += to_copy;"
    },
    {
        "line": 1169,
        "fullcodeline": "size -= to_copy;"
    },
    {
        "line": 1170,
        "fullcodeline": "internal_decoder_data->bytes_decoded += to_copy;"
    },
    {
        "line": 1183,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1198,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.symbol_value.chars == NULL)"
    },
    {
        "line": 1222,
        "fullcodeline": "size_t to_copy = internal_decoder_data->decode_value_state.symbol_value_state.length - (internal_decoder_data->bytes_decoded - 1);"
    },
    {
        "line": 1228,
        "fullcodeline": "(void)memcpy(internal_decoder_data->decode_to_value->value.symbol_value.chars + (internal_decoder_data->bytes_decoded - 1), buffer, to_copy);"
    },
    {
        "line": 1229,
        "fullcodeline": "buffer += to_copy;"
    },
    {
        "line": 1230,
        "fullcodeline": "size -= to_copy;"
    },
    {
        "line": 1231,
        "fullcodeline": "internal_decoder_data->bytes_decoded += to_copy;"
    },
    {
        "line": 1244,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1258,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 4)"
    },
    {
        "line": 1290,
        "fullcodeline": "size_t to_copy = internal_decoder_data->decode_value_state.symbol_value_state.length - (internal_decoder_data->bytes_decoded - 4);"
    },
    {
        "line": 1296,
        "fullcodeline": "(void)memcpy(internal_decoder_data->decode_to_value->value.symbol_value.chars + (internal_decoder_data->bytes_decoded - 4), buffer, to_copy);"
    },
    {
        "line": 1297,
        "fullcodeline": "buffer += to_copy;"
    },
    {
        "line": 1298,
        "fullcodeline": "size -= to_copy;"
    },
    {
        "line": 1299,
        "fullcodeline": "internal_decoder_data->bytes_decoded += to_copy;"
    },
    {
        "line": 1312,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1335,
        "fullcodeline": "if (internal_decoder_data->constructor_byte == 0xC0)"
    },
    {
        "line": 1357,
        "fullcodeline": "if (internal_decoder_data->constructor_byte == 0xC0)"
    },
    {
        "line": 1369,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.list_value.count > MAX_AMQPVALUE_ITEM_COUNT)"
    },
    {
        "line": 1377,
        "fullcodeline": "if (internal_decoder_data->constructor_byte == 0xC0)"
    },
    {
        "line": 1557,
        "fullcodeline": "if (internal_decoder_data->constructor_byte == 0xC1)"
    },
    {
        "line": 1578,
        "fullcodeline": "if (internal_decoder_data->constructor_byte == 0xC1)"
    },
    {
        "line": 1590,
        "fullcodeline": "if (internal_decoder_data->constructor_byte == 0xC1)"
    },
    {
        "line": 1786,
        "fullcodeline": "if (internal_decoder_data->constructor_byte == 0xE0)"
    },
    {
        "line": 1807,
        "fullcodeline": "if (internal_decoder_data->constructor_byte == 0xE0)"
    },
    {
        "line": 1819,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.array_value.count > MAX_AMQPVALUE_ITEM_COUNT)"
    },
    {
        "line": 1827,
        "fullcodeline": "if (internal_decoder_data->constructor_byte == 0xE0)"
    },
    {
        "line": 75,
        "fullcodeline": "if (internal_decoder_data->inner_decoder == NULL)"
    },
    {
        "line": 498,
        "fullcodeline": "if (internal_decoder_decode_bytes(internal_decoder_data->inner_decoder, buffer, size, &inner_used_bytes) != 0)"
    },
    {
        "line": 550,
        "fullcodeline": "if (internal_decoder_decode_bytes(internal_decoder_data->inner_decoder, buffer, size, &inner_used_bytes) != 0)"
    },
    {
        "line": 928,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.binary_value.bytes = NULL;"
    },
    {
        "line": 933,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 934,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 955,
        "fullcodeline": "if (to_copy > size)"
    },
    {
        "line": 966,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == (size_t)internal_decoder_data->decode_to_value->value.binary_value.length + 1)"
    },
    {
        "line": 1037,
        "fullcodeline": "if (to_copy > size)"
    },
    {
        "line": 1047,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == (size_t)internal_decoder_data->decode_to_value->value.binary_value.length + 4)"
    },
    {
        "line": 1072,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 1073,
        "fullcodeline": "LogError(\"Could not allocate memory for decoded string value\");"
    },
    {
        "line": 1074,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1094,
        "fullcodeline": "if (to_copy > size)"
    },
    {
        "line": 1104,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == (size_t)internal_decoder_data->decode_value_state.string_value_state.length + 1)"
    },
    {
        "line": 1131,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.string_value.chars = (char*)malloc((size_t)internal_decoder_data->decode_value_state.string_value_state.length + 1);"
    },
    {
        "line": 1162,
        "fullcodeline": "if (to_copy > size)"
    },
    {
        "line": 1172,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == (size_t)internal_decoder_data->decode_value_state.string_value_state.length + 4)"
    },
    {
        "line": 1201,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 1202,
        "fullcodeline": "LogError(\"Could not allocate memory for decoded symbol value\");"
    },
    {
        "line": 1203,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1223,
        "fullcodeline": "if (to_copy > size)"
    },
    {
        "line": 1233,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == (size_t)internal_decoder_data->decode_value_state.symbol_value_state.length + 1)"
    },
    {
        "line": 1260,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.symbol_value.chars = (char*)malloc((size_t)internal_decoder_data->decode_value_state.symbol_value_state.length + 1);"
    },
    {
        "line": 1291,
        "fullcodeline": "if (to_copy > size)"
    },
    {
        "line": 1301,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == (size_t)internal_decoder_data->decode_value_state.symbol_value_state.length + 4)"
    },
    {
        "line": 1337,
        "fullcodeline": "internal_decoder_data->decode_value_state.list_value_state.list_value_state = DECODE_LIST_STEP_COUNT;"
    },
    {
        "line": 1338,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 1339,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.list_value.count = 0;"
    },
    {
        "line": 1340,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1359,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.list_value.count = buffer[0];"
    },
    {
        "line": 1371,
        "fullcodeline": "LogError(\"AMQP list item count exceeded MAX_AMQPVALUE_ITEM_COUNT\");"
    },
    {
        "line": 1372,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1373,
        "fullcodeline": "size = 0;"
    },
    {
        "line": 1473,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 0)"
    },
    {
        "line": 1495,
        "fullcodeline": "if (internal_decoder_data->inner_decoder == NULL)"
    },
    {
        "line": 1559,
        "fullcodeline": "internal_decoder_data->decode_value_state.map_value_state.map_value_state = DECODE_MAP_STEP_COUNT;"
    },
    {
        "line": 1560,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 1561,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.map_value.pair_count = 0;"
    },
    {
        "line": 1562,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1580,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.map_value.pair_count = buffer[0];"
    },
    {
        "line": 1682,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 0)"
    },
    {
        "line": 1725,
        "fullcodeline": "if (internal_decoder_data->inner_decoder == NULL)"
    },
    {
        "line": 1788,
        "fullcodeline": "internal_decoder_data->decode_value_state.array_value_state.array_value_state = DECODE_ARRAY_STEP_COUNT;"
    },
    {
        "line": 1789,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 1790,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.array_value.count = 0;"
    },
    {
        "line": 1791,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1809,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.array_value.count = buffer[0];"
    },
    {
        "line": 1821,
        "fullcodeline": "LogError(\"AMQP array item count exceeded MAX_AMQPVALUE_ITEM_COUNT\");"
    },
    {
        "line": 1822,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1823,
        "fullcodeline": "size = 0;"
    },
    {
        "line": 1904,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 0)"
    },
    {
        "line": 1930,
        "fullcodeline": "if (internal_decoder_data->inner_decoder == NULL)"
    },
    {
        "line": 77,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 78,
        "fullcodeline": "LogError(\"Could not create inner decoder for descriptor\");"
    },
    {
        "line": 79,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 500,
        "fullcodeline": "LogError(\"Decoding bytes for described value failed\");"
    },
    {
        "line": 501,
        "fullcodeline": "internal_decoder_data->decode_to_value->type = AMQP_TYPE_UNKNOWN;"
    },
    {
        "line": 502,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 552,
        "fullcodeline": "LogError(\"Decoding bytes for described value failed\");"
    },
    {
        "line": 553,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 938,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.binary_value.bytes = (unsigned char*)malloc(internal_decoder_data->decode_to_value->value.binary_value.length);"
    },
    {
        "line": 957,
        "fullcodeline": "to_copy = size;"
    },
    {
        "line": 968,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 973,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 993,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.binary_value.length == 0)"
    },
    {
        "line": 1031,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1039,
        "fullcodeline": "to_copy = size;"
    },
    {
        "line": 1049,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 1050,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 1088,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1096,
        "fullcodeline": "to_copy = size;"
    },
    {
        "line": 1106,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.string_value.chars[internal_decoder_data->decode_value_state.string_value_state.length] = 0;"
    },
    {
        "line": 1107,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 1112,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 1132,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.string_value.chars == NULL)"
    },
    {
        "line": 1156,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1164,
        "fullcodeline": "to_copy = size;"
    },
    {
        "line": 1174,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.string_value.chars[internal_decoder_data->decode_value_state.string_value_state.length] = '\\0';"
    },
    {
        "line": 1175,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 1180,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 1217,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1225,
        "fullcodeline": "to_copy = size;"
    },
    {
        "line": 1235,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.symbol_value.chars[internal_decoder_data->decode_value_state.symbol_value_state.length] = 0;"
    },
    {
        "line": 1236,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 1241,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 1261,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.symbol_value.chars == NULL)"
    },
    {
        "line": 1285,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1293,
        "fullcodeline": "to_copy = size;"
    },
    {
        "line": 1303,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.symbol_value.chars[internal_decoder_data->decode_value_state.symbol_value_state.length] = '\\0';"
    },
    {
        "line": 1304,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 1309,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 1351,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1363,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.list_value.count += buffer[0] << ((3 - internal_decoder_data->bytes_decoded) * 8);"
    },
    {
        "line": 1379,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.list_value.count == 0)"
    },
    {
        "line": 1475,
        "fullcodeline": "AMQP_VALUE_DATA* list_item = (AMQP_VALUE_DATA*)REFCOUNT_TYPE_CREATE(AMQP_VALUE_DATA);"
    },
    {
        "line": 1497,
        "fullcodeline": "LogError(\"NULL inner decoder. This should not happen under normal circumstances\");"
    },
    {
        "line": 1498,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1572,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1584,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.map_value.pair_count += buffer[0] << ((3 - internal_decoder_data->bytes_decoded) * 8);"
    },
    {
        "line": 1592,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.map_value.pair_count == 0)"
    },
    {
        "line": 1692,
        "fullcodeline": "AMQP_VALUE_DATA* map_item = (AMQP_VALUE_DATA*)REFCOUNT_TYPE_CREATE(AMQP_VALUE_DATA);"
    },
    {
        "line": 1727,
        "fullcodeline": "LogError(\"NULL inner decoder. This should not happen under normal circumstances\");"
    },
    {
        "line": 1728,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1801,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1813,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.array_value.count += buffer[0] << ((3 - internal_decoder_data->bytes_decoded) * 8);"
    },
    {
        "line": 1829,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.array_value.count == 0)"
    },
    {
        "line": 1907,
        "fullcodeline": "internal_decoder_data->decode_value_state.array_value_state.constructor_byte = buffer[0];"
    },
    {
        "line": 1909,
        "fullcodeline": "array_item = (AMQP_VALUE_DATA*)REFCOUNT_TYPE_CREATE(AMQP_VALUE_DATA);"
    },
    {
        "line": 1932,
        "fullcodeline": "LogError(\"NULL inner decoder. This should not happen under normal circumstances\");"
    },
    {
        "line": 1933,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 83,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 84,
        "fullcodeline": "internal_decoder_data->decode_value_state.described_value_state.described_value_state = DECODE_DESCRIBED_VALUE_STEP_DESCRIPTOR;"
    },
    {
        "line": 85,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 506,
        "fullcodeline": "INTERNAL_DECODER_DATA* inner_decoder = (INTERNAL_DECODER_DATA*)internal_decoder_data->inner_decoder;"
    },
    {
        "line": 507,
        "fullcodeline": "buffer += inner_used_bytes;"
    },
    {
        "line": 508,
        "fullcodeline": "size -= inner_used_bytes;"
    },
    {
        "line": 557,
        "fullcodeline": "INTERNAL_DECODER_DATA* inner_decoder = (INTERNAL_DECODER_DATA*)internal_decoder_data->inner_decoder;"
    },
    {
        "line": 558,
        "fullcodeline": "buffer += inner_used_bytes;"
    },
    {
        "line": 559,
        "fullcodeline": "size -= inner_used_bytes;"
    },
    {
        "line": 570,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 939,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.binary_value.bytes == NULL)"
    },
    {
        "line": 995,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.binary_value.bytes = NULL;"
    },
    {
        "line": 1000,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 1001,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1078,
        "fullcodeline": "if (internal_decoder_data->decode_value_state.string_value_state.length == 0)"
    },
    {
        "line": 1135,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 1136,
        "fullcodeline": "LogError(\"Could not allocate memory for decoded string value\");"
    },
    {
        "line": 1137,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1207,
        "fullcodeline": "if (internal_decoder_data->decode_value_state.symbol_value_state.length == 0)"
    },
    {
        "line": 1264,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 1265,
        "fullcodeline": "LogError(\"Could not allocate memory for decoded symbol value\");"
    },
    {
        "line": 1266,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1344,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 4)"
    },
    {
        "line": 1381,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 1386,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 1387,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1415,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 4)"
    },
    {
        "line": 1476,
        "fullcodeline": "if (list_item == NULL)"
    },
    {
        "line": 1566,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 4)"
    },
    {
        "line": 1594,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 1596,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 1597,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1629,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 4)"
    },
    {
        "line": 1684,
        "fullcodeline": "if (internal_decoder_data->decode_value_state.map_value_state.item >= internal_decoder_data->decode_to_value->value.map_value.pair_count)"
    },
    {
        "line": 1693,
        "fullcodeline": "if (map_item == NULL)"
    },
    {
        "line": 1795,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 4)"
    },
    {
        "line": 1831,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 1833,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 1834,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1862,
        "fullcodeline": "if (internal_decoder_data->bytes_decoded == 4)"
    },
    {
        "line": 1910,
        "fullcodeline": "if (array_item == NULL)"
    },
    {
        "line": 510,
        "fullcodeline": "if (inner_decoder->decoder_state == DECODER_STATE_DONE)"
    },
    {
        "line": 561,
        "fullcodeline": "if (inner_decoder->decoder_state == DECODER_STATE_DONE)"
    },
    {
        "line": 942,
        "fullcodeline": "LogError(\"Cannot allocate memory for decoded binary value\");"
    },
    {
        "line": 943,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 944,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1005,
        "fullcodeline": "size_t malloc_size = (size_t)internal_decoder_data->decode_to_value->value.binary_value.length + 1;"
    },
    {
        "line": 1080,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.string_value.chars[0] = '\\0';"
    },
    {
        "line": 1085,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 1151,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1209,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.symbol_value.chars[0] = '\\0';"
    },
    {
        "line": 1214,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 1280,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1346,
        "fullcodeline": "internal_decoder_data->decode_value_state.list_value_state.list_value_state = DECODE_LIST_STEP_COUNT;"
    },
    {
        "line": 1347,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 1348,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.list_value.count = 0;"
    },
    {
        "line": 1392,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.list_value.items = (AMQP_VALUE*)calloc(1, (sizeof(AMQP_VALUE) * internal_decoder_data->decode_to_value->value.list_value.count));"
    },
    {
        "line": 1478,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 1479,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1500,
        "fullcodeline": "else if (internal_decoder_decode_bytes(internal_decoder_data->inner_decoder, buffer, size, &inner_used_bytes) != 0)"
    },
    {
        "line": 1568,
        "fullcodeline": "internal_decoder_data->decode_value_state.map_value_state.map_value_state = DECODE_MAP_STEP_COUNT;"
    },
    {
        "line": 1569,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 1570,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.map_value.pair_count = 0;"
    },
    {
        "line": 1603,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.map_value.pair_count /= 2;"
    },
    {
        "line": 1605,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.map_value.pairs = (AMQP_MAP_KEY_VALUE_PAIR*)malloc(sizeof(AMQP_MAP_KEY_VALUE_PAIR) * ((size_t)internal_decoder_data->decode_to_value->value.map_value.pair_count * 2));"
    },
    {
        "line": 1686,
        "fullcodeline": "LogError(\"Map item index is out of range\");"
    },
    {
        "line": 1687,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 1688,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1695,
        "fullcodeline": "LogError(\"Could not allocate memory for map item\");"
    },
    {
        "line": 1696,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 1697,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1730,
        "fullcodeline": "else if (internal_decoder_decode_bytes(internal_decoder_data->inner_decoder, buffer, size, &inner_used_bytes) != 0)"
    },
    {
        "line": 1797,
        "fullcodeline": "internal_decoder_data->decode_value_state.array_value_state.array_value_state = DECODE_ARRAY_STEP_COUNT;"
    },
    {
        "line": 1798,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 1799,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.array_value.count = 0;"
    },
    {
        "line": 1839,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.array_value.items = (AMQP_VALUE*)calloc(1, (sizeof(AMQP_VALUE) * internal_decoder_data->decode_to_value->value.array_value.count));"
    },
    {
        "line": 1912,
        "fullcodeline": "LogError(\"Could not allocate memory for array item to be decoded\");"
    },
    {
        "line": 1913,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 1914,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1935,
        "fullcodeline": "else if (internal_decoder_decode_bytes(internal_decoder_data->inner_decoder, buffer, size, &inner_used_bytes) != 0)"
    },
    {
        "line": 513,
        "fullcodeline": "internal_decoder_destroy(inner_decoder);"
    },
    {
        "line": 515,
        "fullcodeline": "described_value = REFCOUNT_TYPE_CREATE(AMQP_VALUE_DATA);"
    },
    {
        "line": 563,
        "fullcodeline": "internal_decoder_destroy(inner_decoder);"
    },
    {
        "line": 564,
        "fullcodeline": "internal_decoder_data->inner_decoder = NULL;"
    },
    {
        "line": 566,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 567,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 948,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1006,
        "fullcodeline": "if (malloc_size == 0)"
    },
    {
        "line": 1016,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.binary_value.bytes == NULL)"
    },
    {
        "line": 1141,
        "fullcodeline": "if (internal_decoder_data->decode_value_state.string_value_state.length == 0)"
    },
    {
        "line": 1270,
        "fullcodeline": "if (internal_decoder_data->decode_value_state.symbol_value_state.length == 0)"
    },
    {
        "line": 1393,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.list_value.items == NULL)"
    },
    {
        "line": 1417,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.list_value.count == 0)"
    },
    {
        "line": 1464,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1484,
        "fullcodeline": "list_item->type = AMQP_TYPE_UNKNOWN;"
    },
    {
        "line": 1485,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.list_value.items[internal_decoder_data->decode_value_state.list_value_state.item] = list_item;"
    },
    {
        "line": 1486,
        "fullcodeline": "internal_decoder_data->inner_decoder = internal_decoder_create(inner_decoder_callback, internal_decoder_data, list_item, true);"
    },
    {
        "line": 1502,
        "fullcodeline": "LogError(\"Decoding list items failed\");"
    },
    {
        "line": 1503,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1606,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.map_value.pairs == NULL)"
    },
    {
        "line": 1631,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.map_value.pair_count == 0)"
    },
    {
        "line": 1673,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1702,
        "fullcodeline": "map_item->type = AMQP_TYPE_UNKNOWN;"
    },
    {
        "line": 1712,
        "fullcodeline": "internal_decoder_data->inner_decoder = internal_decoder_create(inner_decoder_callback, internal_decoder_data, map_item, true);"
    },
    {
        "line": 1732,
        "fullcodeline": "LogError(\"Could not decode map item\");"
    },
    {
        "line": 1733,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1840,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.array_value.items == NULL)"
    },
    {
        "line": 1864,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.array_value.count == 0)"
    },
    {
        "line": 1895,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1919,
        "fullcodeline": "array_item->type = AMQP_TYPE_UNKNOWN;"
    },
    {
        "line": 1920,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.array_value.items[internal_decoder_data->decode_value_state.array_value_state.item] = array_item;"
    },
    {
        "line": 1921,
        "fullcodeline": "internal_decoder_data->inner_decoder = internal_decoder_create(inner_decoder_callback, internal_decoder_data, array_item, true);"
    },
    {
        "line": 1937,
        "fullcodeline": "LogError(\"Could not decode array item\");"
    },
    {
        "line": 1938,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 516,
        "fullcodeline": "if (described_value == NULL)"
    },
    {
        "line": 542,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1008,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.binary_value.bytes = NULL;"
    },
    {
        "line": 1009,
        "fullcodeline": "LogError(\"Invalid binary_value size exceeded max allocation\");"
    },
    {
        "line": 1019,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 1020,
        "fullcodeline": "LogError(\"Cannot allocate memory for decoded binary value\");"
    },
    {
        "line": 1021,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1143,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.string_value.chars[0] = '\\0';"
    },
    {
        "line": 1148,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 1272,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.symbol_value.chars[0] = '\\0';"
    },
    {
        "line": 1277,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 1395,
        "fullcodeline": "LogError(\"Could not allocate memory for decoded list value\");"
    },
    {
        "line": 1396,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1419,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 1424,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 1425,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1487,
        "fullcodeline": "if (internal_decoder_data->inner_decoder == NULL)"
    },
    {
        "line": 1507,
        "fullcodeline": "INTERNAL_DECODER_DATA* inner_decoder = (INTERNAL_DECODER_DATA*)internal_decoder_data->inner_decoder;"
    },
    {
        "line": 1508,
        "fullcodeline": "internal_decoder_data->bytes_decoded += inner_used_bytes;"
    },
    {
        "line": 1509,
        "fullcodeline": "buffer += inner_used_bytes;"
    },
    {
        "line": 1510,
        "fullcodeline": "size -= inner_used_bytes;"
    },
    {
        "line": 1531,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1608,
        "fullcodeline": "LogError(\"Could not allocate memory for map value items\");"
    },
    {
        "line": 1609,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1633,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 1635,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 1636,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1704,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.map_value.pairs[internal_decoder_data->decode_value_state.map_value_state.item].key == NULL)"
    },
    {
        "line": 1713,
        "fullcodeline": "if (internal_decoder_data->inner_decoder == NULL)"
    },
    {
        "line": 1737,
        "fullcodeline": "INTERNAL_DECODER_DATA* inner_decoder = (INTERNAL_DECODER_DATA*)internal_decoder_data->inner_decoder;"
    },
    {
        "line": 1738,
        "fullcodeline": "internal_decoder_data->bytes_decoded += inner_used_bytes;"
    },
    {
        "line": 1739,
        "fullcodeline": "buffer += inner_used_bytes;"
    },
    {
        "line": 1740,
        "fullcodeline": "size -= inner_used_bytes;"
    },
    {
        "line": 1760,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1842,
        "fullcodeline": "LogError(\"Could not allocate memory for array items\");"
    },
    {
        "line": 1843,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1866,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 1867,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 1868,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1922,
        "fullcodeline": "if (internal_decoder_data->inner_decoder == NULL)"
    },
    {
        "line": 1942,
        "fullcodeline": "INTERNAL_DECODER_DATA* inner_decoder = (INTERNAL_DECODER_DATA*)internal_decoder_data->inner_decoder;"
    },
    {
        "line": 1943,
        "fullcodeline": "internal_decoder_data->bytes_decoded += inner_used_bytes;"
    },
    {
        "line": 1944,
        "fullcodeline": "size -= inner_used_bytes;"
    },
    {
        "line": 518,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 519,
        "fullcodeline": "LogError(\"Could not allocate memory for AMQP value\");"
    },
    {
        "line": 520,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1013,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.binary_value.bytes = (unsigned char*)malloc(malloc_size);"
    },
    {
        "line": 1025,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1405,
        "fullcodeline": "internal_decoder_data->decode_value_state.list_value_state.list_value_state = DECODE_LIST_STEP_ITEMS;"
    },
    {
        "line": 1406,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 1407,
        "fullcodeline": "internal_decoder_data->inner_decoder = NULL;"
    },
    {
        "line": 1408,
        "fullcodeline": "internal_decoder_data->decode_value_state.list_value_state.item = 0;"
    },
    {
        "line": 1409,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1430,
        "fullcodeline": "size_t calloc_size = (sizeof(AMQP_VALUE) * internal_decoder_data->decode_to_value->value.list_value.count);"
    },
    {
        "line": 1489,
        "fullcodeline": "LogError(\"Could not create inner decoder for list items\");"
    },
    {
        "line": 1490,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 1512,
        "fullcodeline": "if (inner_decoder->decoder_state == DECODER_STATE_DONE)"
    },
    {
        "line": 1619,
        "fullcodeline": "internal_decoder_data->decode_value_state.map_value_state.map_value_state = DECODE_MAP_STEP_PAIRS;"
    },
    {
        "line": 1620,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 1621,
        "fullcodeline": "internal_decoder_data->inner_decoder = NULL;"
    },
    {
        "line": 1622,
        "fullcodeline": "internal_decoder_data->decode_value_state.map_value_state.item = 0;"
    },
    {
        "line": 1623,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1642,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.map_value.pair_count /= 2;"
    },
    {
        "line": 1706,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.map_value.pairs[internal_decoder_data->decode_value_state.map_value_state.item].key = map_item;"
    },
    {
        "line": 1715,
        "fullcodeline": "LogError(\"Could not create inner decoder for map item\");"
    },
    {
        "line": 1716,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 1742,
        "fullcodeline": "if (inner_decoder->decoder_state == DECODER_STATE_DONE)"
    },
    {
        "line": 1852,
        "fullcodeline": "internal_decoder_data->decode_value_state.array_value_state.array_value_state = DECODE_ARRAY_STEP_ITEMS;"
    },
    {
        "line": 1853,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 1854,
        "fullcodeline": "internal_decoder_data->inner_decoder = NULL;"
    },
    {
        "line": 1855,
        "fullcodeline": "internal_decoder_data->decode_value_state.array_value_state.item = 0;"
    },
    {
        "line": 1856,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1873,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.array_value.items = (AMQP_VALUE*)calloc(1, (sizeof(AMQP_VALUE) * internal_decoder_data->decode_to_value->value.array_value.count));"
    },
    {
        "line": 1924,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 1925,
        "fullcodeline": "LogError(\"Could not create inner decoder for array items\");"
    },
    {
        "line": 1946,
        "fullcodeline": "if (inner_decoder->decoder_state == DECODER_STATE_DONE)"
    },
    {
        "line": 524,
        "fullcodeline": "described_value->type = AMQP_TYPE_UNKNOWN;"
    },
    {
        "line": 525,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.described_value.value = (AMQP_VALUE)described_value;"
    },
    {
        "line": 526,
        "fullcodeline": "internal_decoder_data->inner_decoder = internal_decoder_create(inner_decoder_callback, internal_decoder_data, described_value, true);"
    },
    {
        "line": 1400,
        "fullcodeline": "for (i = 0; i < internal_decoder_data->decode_to_value->value.list_value.count; i++)"
    },
    {
        "line": 1432,
        "fullcodeline": "if (calloc_size < MAX_AMQPVALUE_MALLOC_SIZE_BYTES)"
    },
    {
        "line": 1442,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.list_value.items == NULL)"
    },
    {
        "line": 1514,
        "fullcodeline": "internal_decoder_destroy(inner_decoder);"
    },
    {
        "line": 1515,
        "fullcodeline": "internal_decoder_data->inner_decoder = NULL;"
    },
    {
        "line": 1516,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 1518,
        "fullcodeline": "internal_decoder_data->decode_value_state.list_value_state.item++;"
    },
    {
        "line": 1613,
        "fullcodeline": "for (i = 0; i < internal_decoder_data->decode_to_value->value.map_value.pair_count; i++)"
    },
    {
        "line": 1643,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.map_value.pair_count > MAX_AMQPVALUE_ITEM_COUNT)"
    },
    {
        "line": 1710,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.map_value.pairs[internal_decoder_data->decode_value_state.map_value_state.item].value = map_item;"
    },
    {
        "line": 1720,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1744,
        "fullcodeline": "internal_decoder_destroy(inner_decoder);"
    },
    {
        "line": 1745,
        "fullcodeline": "internal_decoder_data->inner_decoder = NULL;"
    },
    {
        "line": 1746,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 1847,
        "fullcodeline": "for (i = 0; i < internal_decoder_data->decode_to_value->value.array_value.count; i++)"
    },
    {
        "line": 1874,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.array_value.items == NULL)"
    },
    {
        "line": 1948,
        "fullcodeline": "internal_decoder_destroy(inner_decoder);"
    },
    {
        "line": 1949,
        "fullcodeline": "internal_decoder_data->inner_decoder = NULL;"
    },
    {
        "line": 1951,
        "fullcodeline": "internal_decoder_data->decode_value_state.array_value_state.item++;"
    },
    {
        "line": 527,
        "fullcodeline": "if (internal_decoder_data->inner_decoder == NULL)"
    },
    {
        "line": 1402,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.list_value.items[i] = NULL;"
    },
    {
        "line": 1434,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.list_value.items = (AMQP_VALUE*)calloc(1, calloc_size);"
    },
    {
        "line": 1444,
        "fullcodeline": "LogError(\"Could not allocate memory for decoded list value\");"
    },
    {
        "line": 1445,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1519,
        "fullcodeline": "if (internal_decoder_data->decode_value_state.list_value_state.item == internal_decoder_data->decode_to_value->value.list_value.count)"
    },
    {
        "line": 1615,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.map_value.pairs[i].key = NULL;"
    },
    {
        "line": 1616,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.map_value.pairs[i].value = NULL;"
    },
    {
        "line": 1645,
        "fullcodeline": "LogError(\"AMQP list map count exceeded MAX_AMQPVALUE_ITEM_COUNT\");"
    },
    {
        "line": 1646,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1748,
        "fullcodeline": "if (internal_decoder_data->decode_to_value->value.map_value.pairs[internal_decoder_data->decode_value_state.map_value_state.item].value != NULL)"
    },
    {
        "line": 1849,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.array_value.items[i] = NULL;"
    },
    {
        "line": 1876,
        "fullcodeline": "LogError(\"Could not allocate memory for array items\");"
    },
    {
        "line": 1877,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1952,
        "fullcodeline": "if (internal_decoder_data->decode_value_state.array_value_state.item == internal_decoder_data->decode_to_value->value.array_value.count)"
    },
    {
        "line": 2015,
        "fullcodeline": "buffer += inner_used_bytes;"
    },
    {
        "line": 2016,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 529,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 530,
        "fullcodeline": "LogError(\"Could not create inner decoder\");"
    },
    {
        "line": 531,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1438,
        "fullcodeline": "LogError(\"Large memory allocation exceeded MAX_AMQPVALUE_MALLOC_SIZE_BYTES\");"
    },
    {
        "line": 1439,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.list_value.items = NULL;"
    },
    {
        "line": 1454,
        "fullcodeline": "internal_decoder_data->decode_value_state.list_value_state.list_value_state = DECODE_LIST_STEP_ITEMS;"
    },
    {
        "line": 1455,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 1456,
        "fullcodeline": "internal_decoder_data->inner_decoder = NULL;"
    },
    {
        "line": 1457,
        "fullcodeline": "internal_decoder_data->decode_value_state.list_value_state.item = 0;"
    },
    {
        "line": 1458,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1521,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 1526,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 1750,
        "fullcodeline": "internal_decoder_data->decode_value_state.map_value_state.item++;"
    },
    {
        "line": 1885,
        "fullcodeline": "internal_decoder_data->decode_value_state.array_value_state.array_value_state = DECODE_ARRAY_STEP_ITEMS;"
    },
    {
        "line": 1886,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 1887,
        "fullcodeline": "internal_decoder_data->inner_decoder = NULL;"
    },
    {
        "line": 1888,
        "fullcodeline": "internal_decoder_data->decode_value_state.array_value_state.item = 0;"
    },
    {
        "line": 1889,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1954,
        "fullcodeline": "buffer += inner_used_bytes;"
    },
    {
        "line": 1955,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 1956,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 1958,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 535,
        "fullcodeline": "internal_decoder_data->decode_value_state.described_value_state.described_value_state = DECODE_DESCRIBED_VALUE_STEP_VALUE;"
    },
    {
        "line": 536,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1449,
        "fullcodeline": "for (i = 0; i < internal_decoder_data->decode_to_value->value.list_value.count; i++)"
    },
    {
        "line": 1648,
        "fullcodeline": "else if ((internal_decoder_data->decode_to_value->value.map_value.pairs ="
    },
    {
        "line": 1751,
        "fullcodeline": "if (internal_decoder_data->decode_value_state.map_value_state.item == internal_decoder_data->decode_to_value->value.map_value.pair_count)"
    },
    {
        "line": 1881,
        "fullcodeline": "for (i = 0; i < internal_decoder_data->decode_to_value->value.array_value.count; i++)"
    },
    {
        "line": 1980,
        "fullcodeline": "array_item = (AMQP_VALUE_DATA*)REFCOUNT_TYPE_CREATE(AMQP_VALUE_DATA);"
    },
    {
        "line": 1451,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.list_value.items[i] = NULL;"
    },
    {
        "line": 1652,
        "fullcodeline": "LogError(\"Could not allocate memory for map value items\");"
    },
    {
        "line": 1653,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1753,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_CONSTRUCTOR;"
    },
    {
        "line": 1755,
        "fullcodeline": "internal_decoder_data->on_value_decoded(internal_decoder_data->on_value_decoded_context, internal_decoder_data->decode_to_value);"
    },
    {
        "line": 1883,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.array_value.items[i] = NULL;"
    },
    {
        "line": 1964,
        "fullcodeline": "if ((internal_decoder_data->decode_value_state.array_value_state.constructor_byte == 0x40) ||"
    },
    {
        "line": 1981,
        "fullcodeline": "if (array_item == NULL)"
    },
    {
        "line": 1649,
        "fullcodeline": "(AMQP_MAP_KEY_VALUE_PAIR*)malloc(sizeof(AMQP_MAP_KEY_VALUE_PAIR) * ((size_t)internal_decoder_data->decode_to_value->value.map_value.pair_count * 2)))"
    },
    {
        "line": 1663,
        "fullcodeline": "internal_decoder_data->decode_value_state.map_value_state.map_value_state = DECODE_MAP_STEP_PAIRS;"
    },
    {
        "line": 1664,
        "fullcodeline": "internal_decoder_data->bytes_decoded = 0;"
    },
    {
        "line": 1665,
        "fullcodeline": "internal_decoder_data->inner_decoder = NULL;"
    },
    {
        "line": 1666,
        "fullcodeline": "internal_decoder_data->decode_value_state.map_value_state.item = 0;"
    },
    {
        "line": 1667,
        "fullcodeline": "result = 0;"
    },
    {
        "line": 1969,
        "fullcodeline": "(internal_decoder_data->decode_value_state.array_value_state.constructor_byte == 0x45))"
    },
    {
        "line": 1972,
        "fullcodeline": "size += inner_used_bytes;"
    },
    {
        "line": 1973,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_TYPE_DATA;"
    },
    {
        "line": 1983,
        "fullcodeline": "LogError(\"Could not allocate memory for array item\");"
    },
    {
        "line": 1984,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 1985,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1657,
        "fullcodeline": "for (i = 0; i < internal_decoder_data->decode_to_value->value.map_value.pair_count; i++)"
    },
    {
        "line": 1968,
        "fullcodeline": "(internal_decoder_data->decode_value_state.array_value_state.constructor_byte == 0x44) ||"
    },
    {
        "line": 1977,
        "fullcodeline": "buffer += inner_used_bytes;"
    },
    {
        "line": 1989,
        "fullcodeline": "array_item->type = AMQP_TYPE_UNKNOWN;"
    },
    {
        "line": 1990,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.array_value.items[internal_decoder_data->decode_value_state.array_value_state.item] = array_item;"
    },
    {
        "line": 1991,
        "fullcodeline": "internal_decoder_data->inner_decoder = internal_decoder_create(inner_decoder_callback, internal_decoder_data, array_item, true);"
    },
    {
        "line": 1659,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.map_value.pairs[i].key = NULL;"
    },
    {
        "line": 1660,
        "fullcodeline": "internal_decoder_data->decode_to_value->value.map_value.pairs[i].value = NULL;"
    },
    {
        "line": 1967,
        "fullcodeline": "(internal_decoder_data->decode_value_state.array_value_state.constructor_byte == 0x43) ||"
    },
    {
        "line": 1992,
        "fullcodeline": "if (internal_decoder_data->inner_decoder == NULL)"
    },
    {
        "line": 1966,
        "fullcodeline": "(internal_decoder_data->decode_value_state.array_value_state.constructor_byte == 0x42) ||"
    },
    {
        "line": 1994,
        "fullcodeline": "LogError(\"Could not create inner decoder for array item\");"
    },
    {
        "line": 1995,
        "fullcodeline": "internal_decoder_data->decoder_state = DECODER_STATE_ERROR;"
    },
    {
        "line": 1996,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 1965,
        "fullcodeline": "(internal_decoder_data->decode_value_state.array_value_state.constructor_byte == 0x41) ||"
    },
    {
        "line": 2000,
        "fullcodeline": "if (internal_decoder_decode_bytes(internal_decoder_data->inner_decoder, &internal_decoder_data->decode_value_state.array_value_state.constructor_byte, 1, NULL) != 0)"
    },
    {
        "line": 2002,
        "fullcodeline": "LogError(\"Could not decode array item data\");"
    },
    {
        "line": 2003,
        "fullcodeline": "result = MU_FAILURE;"
    },
    {
        "line": 2007,
        "fullcodeline": "result = 0;"
    }
]