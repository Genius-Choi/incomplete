[
    {
        "line": 20,
        "fullcodeline": "has_this_binding = s->has_this_binding;"
    },
    {
        "line": 31,
        "fullcodeline": "has_arguments_binding = s->has_arguments_binding;"
    },
    {
        "line": 47,
        "fullcodeline": "assert(s->is_eval || s->closure_var_count == 0);"
    },
    {
        "line": 50,
        "fullcodeline": "fd = s;"
    },
    {
        "line": 10,
        "fullcodeline": "if (!s->is_eval && !(s->js_mode & JS_MODE_STRICT)) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (s->is_func_expr && s->func_name != JS_ATOM_NULL)"
    },
    {
        "line": 11,
        "fullcodeline": "s->var_object_idx = add_var(ctx, s, JS_ATOM__var_);"
    },
    {
        "line": 33,
        "fullcodeline": "add_arguments_var(ctx, s);"
    },
    {
        "line": 41,
        "fullcodeline": "add_func_var(ctx, s, s->func_name);"
    },
    {
        "line": 52,
        "fullcodeline": "scope_level = fd->parent_scope_level;"
    },
    {
        "line": 53,
        "fullcodeline": "fd = fd->parent;"
    },
    {
        "line": 78,
        "fullcodeline": "scope_idx = fd->scopes[scope_level].first;"
    },
    {
        "line": 86,
        "fullcodeline": "is_arg_scope = (scope_idx == ARG_SCOPE_END);"
    },
    {
        "line": 22,
        "fullcodeline": "if (s->this_var_idx < 0)"
    },
    {
        "line": 24,
        "fullcodeline": "if (s->new_target_var_idx < 0)"
    },
    {
        "line": 26,
        "fullcodeline": "if (s->is_derived_class_constructor && s->this_active_func_var_idx < 0)"
    },
    {
        "line": 28,
        "fullcodeline": "if (s->has_home_object && s->home_object_var_idx < 0)"
    },
    {
        "line": 37,
        "fullcodeline": "if (s->has_parameter_expressions && !(s->js_mode & JS_MODE_STRICT))"
    },
    {
        "line": 54,
        "fullcodeline": "if (!fd)"
    },
    {
        "line": 57,
        "fullcodeline": "if (!has_this_binding && fd->has_this_binding) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (!has_arguments_binding && fd->has_arguments_binding) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (fd->is_func_expr && fd->func_name != JS_ATOM_NULL)"
    },
    {
        "line": 79,
        "fullcodeline": "while (scope_idx >= 0) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (!is_arg_scope) {"
    },
    {
        "line": 15,
        "fullcodeline": "s->arg_var_object_idx = add_var(ctx, s, JS_ATOM__arg_var_);"
    },
    {
        "line": 23,
        "fullcodeline": "s->this_var_idx = add_var_this(ctx, s);"
    },
    {
        "line": 25,
        "fullcodeline": "s->new_target_var_idx = add_var(ctx, s, JS_ATOM_new_target);"
    },
    {
        "line": 27,
        "fullcodeline": "s->this_active_func_var_idx = add_var(ctx, s, JS_ATOM_this_active_func);"
    },
    {
        "line": 29,
        "fullcodeline": "s->home_object_var_idx = add_var(ctx, s, JS_ATOM_home_object);"
    },
    {
        "line": 38,
        "fullcodeline": "add_arguments_arg(ctx, s);"
    },
    {
        "line": 66,
        "fullcodeline": "has_this_binding = TRUE;"
    },
    {
        "line": 70,
        "fullcodeline": "add_arguments_var(ctx, fd);"
    },
    {
        "line": 71,
        "fullcodeline": "has_arguments_binding = TRUE;"
    },
    {
        "line": 75,
        "fullcodeline": "add_func_var(ctx, fd, fd->func_name);"
    },
    {
        "line": 80,
        "fullcodeline": "vd = &fd->vars[scope_idx];"
    },
    {
        "line": 81,
        "fullcodeline": "vd->is_captured = 1;"
    },
    {
        "line": 82,
        "fullcodeline": "get_closure_var(ctx, s, fd, FALSE, scope_idx,"
    },
    {
        "line": 84,
        "fullcodeline": "scope_idx = vd->scope_next;"
    },
    {
        "line": 58,
        "fullcodeline": "if (fd->this_var_idx < 0)"
    },
    {
        "line": 60,
        "fullcodeline": "if (fd->new_target_var_idx < 0)"
    },
    {
        "line": 62,
        "fullcodeline": "if (fd->is_derived_class_constructor && fd->this_active_func_var_idx < 0)"
    },
    {
        "line": 64,
        "fullcodeline": "if (fd->has_home_object && fd->home_object_var_idx < 0)"
    },
    {
        "line": 89,
        "fullcodeline": "for(i = 0; i < fd->arg_count; i++) {"
    },
    {
        "line": 97,
        "fullcodeline": "for(i = 0; i < fd->var_count; i++) {"
    },
    {
        "line": 123,
        "fullcodeline": "for (idx = 0; idx < fd->closure_var_count; idx++) {"
    },
    {
        "line": 59,
        "fullcodeline": "fd->this_var_idx = add_var_this(ctx, fd);"
    },
    {
        "line": 61,
        "fullcodeline": "fd->new_target_var_idx = add_var(ctx, fd, JS_ATOM_new_target);"
    },
    {
        "line": 63,
        "fullcodeline": "fd->this_active_func_var_idx = add_var(ctx, fd, JS_ATOM_this_active_func);"
    },
    {
        "line": 65,
        "fullcodeline": "fd->home_object_var_idx = add_var(ctx, fd, JS_ATOM_home_object);"
    },
    {
        "line": 90,
        "fullcodeline": "vd = &fd->args[i];"
    },
    {
        "line": 98,
        "fullcodeline": "vd = &fd->vars[i];"
    },
    {
        "line": 109,
        "fullcodeline": "for(i = 0; i < fd->var_count; i++) {"
    },
    {
        "line": 124,
        "fullcodeline": "JSClosureVar *cv = &fd->closure_var[idx];"
    },
    {
        "line": 125,
        "fullcodeline": "get_closure_var2(ctx, s, fd,"
    },
    {
        "line": 91,
        "fullcodeline": "if (vd->var_name != JS_ATOM_NULL) {"
    },
    {
        "line": 100,
        "fullcodeline": "if (vd->scope_level == 0 &&"
    },
    {
        "line": 110,
        "fullcodeline": "vd = &fd->vars[i];"
    },
    {
        "line": 92,
        "fullcodeline": "get_closure_var(ctx, s, fd,"
    },
    {
        "line": 102,
        "fullcodeline": "vd->var_name != JS_ATOM_NULL) {"
    },
    {
        "line": 103,
        "fullcodeline": "get_closure_var(ctx, s, fd,"
    },
    {
        "line": 112,
        "fullcodeline": "if (vd->scope_level == 0 && is_var_in_arg_scope(vd)) {"
    },
    {
        "line": 101,
        "fullcodeline": "vd->var_name != JS_ATOM__ret_ &&"
    },
    {
        "line": 113,
        "fullcodeline": "get_closure_var(ctx, s, fd,"
    }
]