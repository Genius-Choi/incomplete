[
    {
        "line": 15,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"...\");"
    },
    {
        "line": 16,
        "fullcodeline": "assert(draw_info != (DrawInfo *) NULL);"
    },
    {
        "line": 17,
        "fullcodeline": "(void) ResetMagickMemory(draw_info,0,sizeof(*draw_info));"
    },
    {
        "line": 18,
        "fullcodeline": "clone_info=CloneImageInfo(image_info);"
    },
    {
        "line": 19,
        "fullcodeline": "GetAffineMatrix(&draw_info->affine);"
    },
    {
        "line": 20,
        "fullcodeline": "exception=AcquireExceptionInfo();"
    },
    {
        "line": 21,
        "fullcodeline": "(void) QueryColorCompliance(\"#000F\",AllCompliance,&draw_info->fill,"
    },
    {
        "line": 23,
        "fullcodeline": "(void) QueryColorCompliance(\"#0000\",AllCompliance,&draw_info->stroke,"
    },
    {
        "line": 25,
        "fullcodeline": "draw_info->stroke_width=1.0;"
    },
    {
        "line": 26,
        "fullcodeline": "draw_info->alpha=OpaqueAlpha;"
    },
    {
        "line": 27,
        "fullcodeline": "draw_info->fill_rule=EvenOddRule;"
    },
    {
        "line": 28,
        "fullcodeline": "draw_info->linecap=ButtCap;"
    },
    {
        "line": 29,
        "fullcodeline": "draw_info->linejoin=MiterJoin;"
    },
    {
        "line": 30,
        "fullcodeline": "draw_info->miterlimit=10;"
    },
    {
        "line": 31,
        "fullcodeline": "draw_info->decorate=NoDecoration;"
    },
    {
        "line": 32,
        "fullcodeline": "draw_info->pointsize=12.0;"
    },
    {
        "line": 33,
        "fullcodeline": "draw_info->undercolor.alpha=(Quantum) TransparentAlpha;"
    },
    {
        "line": 34,
        "fullcodeline": "draw_info->compose=OverCompositeOp;"
    },
    {
        "line": 35,
        "fullcodeline": "draw_info->render=MagickTrue;"
    },
    {
        "line": 36,
        "fullcodeline": "draw_info->debug=IsEventLogging();"
    },
    {
        "line": 37,
        "fullcodeline": "draw_info->stroke_antialias=clone_info->antialias;"
    },
    {
        "line": 42,
        "fullcodeline": "draw_info->text_antialias=clone_info->antialias;"
    },
    {
        "line": 45,
        "fullcodeline": "draw_info->border_color=clone_info->border_color;"
    },
    {
        "line": 48,
        "fullcodeline": "option=GetImageOption(clone_info,\"direction\");"
    },
    {
        "line": 54,
        "fullcodeline": "option=GetImageOption(clone_info,\"encoding\");"
    },
    {
        "line": 57,
        "fullcodeline": "option=GetImageOption(clone_info,\"family\");"
    },
    {
        "line": 60,
        "fullcodeline": "option=GetImageOption(clone_info,\"fill\");"
    },
    {
        "line": 64,
        "fullcodeline": "option=GetImageOption(clone_info,\"gravity\");"
    },
    {
        "line": 68,
        "fullcodeline": "option=GetImageOption(clone_info,\"interline-spacing\");"
    },
    {
        "line": 71,
        "fullcodeline": "option=GetImageOption(clone_info,\"interword-spacing\");"
    },
    {
        "line": 74,
        "fullcodeline": "option=GetImageOption(clone_info,\"kerning\");"
    },
    {
        "line": 77,
        "fullcodeline": "option=GetImageOption(clone_info,\"stroke\");"
    },
    {
        "line": 81,
        "fullcodeline": "option=GetImageOption(clone_info,\"strokewidth\");"
    },
    {
        "line": 84,
        "fullcodeline": "option=GetImageOption(clone_info,\"style\");"
    },
    {
        "line": 88,
        "fullcodeline": "option=GetImageOption(clone_info,\"undercolor\");"
    },
    {
        "line": 92,
        "fullcodeline": "option=GetImageOption(clone_info,\"weight\");"
    },
    {
        "line": 103,
        "fullcodeline": "exception=DestroyExceptionInfo(exception);"
    },
    {
        "line": 104,
        "fullcodeline": "draw_info->signature=MagickCoreSignature;"
    },
    {
        "line": 105,
        "fullcodeline": "clone_info=DestroyImageInfo(clone_info);"
    },
    {
        "line": 38,
        "fullcodeline": "if (clone_info->font != (char *) NULL)"
    },
    {
        "line": 40,
        "fullcodeline": "if (clone_info->density != (char *) NULL)"
    },
    {
        "line": 43,
        "fullcodeline": "if (clone_info->pointsize != 0.0)"
    },
    {
        "line": 46,
        "fullcodeline": "if (clone_info->server_name != (char *) NULL)"
    },
    {
        "line": 49,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 55,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 58,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 61,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 65,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 69,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 72,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 75,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 78,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 82,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 85,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 89,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 93,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 39,
        "fullcodeline": "draw_info->font=AcquireString(clone_info->font);"
    },
    {
        "line": 41,
        "fullcodeline": "draw_info->density=AcquireString(clone_info->density);"
    },
    {
        "line": 44,
        "fullcodeline": "draw_info->pointsize=clone_info->pointsize;"
    },
    {
        "line": 47,
        "fullcodeline": "draw_info->server_name=AcquireString(clone_info->server_name);"
    },
    {
        "line": 50,
        "fullcodeline": "draw_info->direction=(DirectionType) ParseCommandOption("
    },
    {
        "line": 56,
        "fullcodeline": "(void) CloneString(&draw_info->encoding,option);"
    },
    {
        "line": 59,
        "fullcodeline": "(void) CloneString(&draw_info->family,option);"
    },
    {
        "line": 62,
        "fullcodeline": "(void) QueryColorCompliance(option,AllCompliance,&draw_info->fill,"
    },
    {
        "line": 66,
        "fullcodeline": "draw_info->gravity=(GravityType) ParseCommandOption(MagickGravityOptions,"
    },
    {
        "line": 70,
        "fullcodeline": "draw_info->interline_spacing=StringToDouble(option,(char **) NULL);"
    },
    {
        "line": 73,
        "fullcodeline": "draw_info->interword_spacing=StringToDouble(option,(char **) NULL);"
    },
    {
        "line": 76,
        "fullcodeline": "draw_info->kerning=StringToDouble(option,(char **) NULL);"
    },
    {
        "line": 79,
        "fullcodeline": "(void) QueryColorCompliance(option,AllCompliance,&draw_info->stroke,"
    },
    {
        "line": 83,
        "fullcodeline": "draw_info->stroke_width=StringToDouble(option,(char **) NULL);"
    },
    {
        "line": 86,
        "fullcodeline": "draw_info->style=(StyleType) ParseCommandOption(MagickStyleOptions,"
    },
    {
        "line": 90,
        "fullcodeline": "(void) QueryColorCompliance(option,AllCompliance,&draw_info->undercolor,"
    },
    {
        "line": 98,
        "fullcodeline": "weight=ParseCommandOption(MagickWeightOptions,MagickFalse,option);"
    },
    {
        "line": 101,
        "fullcodeline": "draw_info->weight=(size_t) weight;"
    },
    {
        "line": 53,
        "fullcodeline": "draw_info->direction=UndefinedDirection;"
    },
    {
        "line": 99,
        "fullcodeline": "if (weight == -1)"
    },
    {
        "line": 100,
        "fullcodeline": "weight=StringToUnsignedLong(option);"
    }
]