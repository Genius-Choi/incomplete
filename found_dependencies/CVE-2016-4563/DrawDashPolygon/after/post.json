[
    {
        "line": 34,
        "fullcodeline": "assert(draw_info != (const DrawInfo *) NULL);"
    },
    {
        "line": 38,
        "fullcodeline": "number_vertices=(size_t) i;"
    },
    {
        "line": 39,
        "fullcodeline": "dash_polygon=(PrimitiveInfo *) AcquireQuantumMemory((size_t)"
    },
    {
        "line": 43,
        "fullcodeline": "clone_info=CloneDrawInfo((ImageInfo *) NULL,draw_info);"
    },
    {
        "line": 44,
        "fullcodeline": "clone_info->miterlimit=0;"
    },
    {
        "line": 45,
        "fullcodeline": "dash_polygon[0]=primitive_info[0];"
    },
    {
        "line": 46,
        "fullcodeline": "scale=ExpandAffine(&draw_info->affine);"
    },
    {
        "line": 47,
        "fullcodeline": "length=scale*(draw_info->dash_pattern[0]-0.5);"
    },
    {
        "line": 48,
        "fullcodeline": "offset=draw_info->dash_offset != 0.0 ? scale*draw_info->dash_offset : 0.0;"
    },
    {
        "line": 49,
        "fullcodeline": "j=1;"
    },
    {
        "line": 71,
        "fullcodeline": "status=MagickTrue;"
    },
    {
        "line": 72,
        "fullcodeline": "maximum_length=0.0;"
    },
    {
        "line": 73,
        "fullcodeline": "total_length=0.0;"
    },
    {
        "line": 136,
        "fullcodeline": "dash_polygon=(PrimitiveInfo *) RelinquishMagickMemory(dash_polygon);"
    },
    {
        "line": 137,
        "fullcodeline": "clone_info=DestroyDrawInfo(clone_info);"
    },
    {
        "line": 35,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 37,
        "fullcodeline": "for (i=0; primitive_info[i].primitive != UndefinedPrimitive; i++) ;"
    },
    {
        "line": 41,
        "fullcodeline": "if (dash_polygon == (PrimitiveInfo *) NULL)"
    },
    {
        "line": 50,
        "fullcodeline": "for (n=0; offset > 0.0; j=0)"
    },
    {
        "line": 74,
        "fullcodeline": "for (i=1; (i < (ssize_t) number_vertices) && (length >= 0.0); i++)"
    },
    {
        "line": 125,
        "fullcodeline": "if ((total_length <= maximum_length) && ((n & 0x01) == 0) && (j > 1))"
    },
    {
        "line": 138,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 140,
        "fullcodeline": "return(status != 0 ? MagickTrue : MagickFalse);"
    },
    {
        "line": 36,
        "fullcodeline": "(void) LogMagickEvent(DrawEvent,GetMagickModule(),\"    begin draw-dash\");"
    },
    {
        "line": 54,
        "fullcodeline": "length=scale*(draw_info->dash_pattern[n]+(n == 0 ? -0.5 : 0.5));"
    },
    {
        "line": 68,
        "fullcodeline": "offset=0.0;"
    },
    {
        "line": 69,
        "fullcodeline": "n++;"
    },
    {
        "line": 76,
        "fullcodeline": "dx=primitive_info[i].point.x-primitive_info[i-1].point.x;"
    },
    {
        "line": 77,
        "fullcodeline": "dy=primitive_info[i].point.y-primitive_info[i-1].point.y;"
    },
    {
        "line": 78,
        "fullcodeline": "maximum_length=hypot((double) dx,dy);"
    },
    {
        "line": 118,
        "fullcodeline": "length-=(maximum_length-total_length);"
    },
    {
        "line": 121,
        "fullcodeline": "dash_polygon[j]=primitive_info[i];"
    },
    {
        "line": 122,
        "fullcodeline": "dash_polygon[j].coordinates=1;"
    },
    {
        "line": 123,
        "fullcodeline": "j++;"
    },
    {
        "line": 127,
        "fullcodeline": "dash_polygon[j]=primitive_info[i-1];"
    },
    {
        "line": 128,
        "fullcodeline": "dash_polygon[j].point.x+=MagickEpsilon;"
    },
    {
        "line": 129,
        "fullcodeline": "dash_polygon[j].point.y+=MagickEpsilon;"
    },
    {
        "line": 130,
        "fullcodeline": "dash_polygon[j].coordinates=1;"
    },
    {
        "line": 131,
        "fullcodeline": "j++;"
    },
    {
        "line": 132,
        "fullcodeline": "dash_polygon[0].coordinates=(size_t) j;"
    },
    {
        "line": 133,
        "fullcodeline": "dash_polygon[j].primitive=UndefinedPrimitive;"
    },
    {
        "line": 134,
        "fullcodeline": "status&=DrawStrokePolygon(image,clone_info,dash_polygon,exception);"
    },
    {
        "line": 139,
        "fullcodeline": "(void) LogMagickEvent(DrawEvent,GetMagickModule(),\"    end draw-dash\");"
    },
    {
        "line": 52,
        "fullcodeline": "if (draw_info->dash_pattern[n] <= 0.0)"
    },
    {
        "line": 55,
        "fullcodeline": "if (offset > length)"
    },
    {
        "line": 62,
        "fullcodeline": "if (offset < length)"
    },
    {
        "line": 79,
        "fullcodeline": "if (length == 0.0)"
    },
    {
        "line": 86,
        "fullcodeline": "for (total_length=0.0; (length >= 0.0) && (maximum_length >= (total_length+length)); )"
    },
    {
        "line": 119,
        "fullcodeline": "if ((n & 0x01) != 0)"
    },
    {
        "line": 40,
        "fullcodeline": "(2UL*number_vertices+1UL),sizeof(*dash_polygon));"
    },
    {
        "line": 57,
        "fullcodeline": "offset-=length;"
    },
    {
        "line": 58,
        "fullcodeline": "n++;"
    },
    {
        "line": 59,
        "fullcodeline": "length=scale*(draw_info->dash_pattern[n]+0.5);"
    },
    {
        "line": 64,
        "fullcodeline": "length-=offset;"
    },
    {
        "line": 65,
        "fullcodeline": "offset=0.0;"
    },
    {
        "line": 81,
        "fullcodeline": "n++;"
    },
    {
        "line": 84,
        "fullcodeline": "length=scale*(draw_info->dash_pattern[n]+(n == 0 ? -0.5 : 0.5));"
    },
    {
        "line": 88,
        "fullcodeline": "total_length+=length;"
    },
    {
        "line": 113,
        "fullcodeline": "n++;"
    },
    {
        "line": 116,
        "fullcodeline": "length=scale*(draw_info->dash_pattern[n]+(n == 0 ? -0.5 : 0.5));"
    },
    {
        "line": 82,
        "fullcodeline": "if (draw_info->dash_pattern[n] == 0.0)"
    },
    {
        "line": 89,
        "fullcodeline": "if ((n & 0x01) != 0)"
    },
    {
        "line": 114,
        "fullcodeline": "if (draw_info->dash_pattern[n] == 0.0)"
    },
    {
        "line": 83,
        "fullcodeline": "n=0;"
    },
    {
        "line": 91,
        "fullcodeline": "dash_polygon[0]=primitive_info[0];"
    },
    {
        "line": 92,
        "fullcodeline": "dash_polygon[0].point.x=(double) (primitive_info[i-1].point.x+dx*"
    },
    {
        "line": 94,
        "fullcodeline": "dash_polygon[0].point.y=(double) (primitive_info[i-1].point.y+dy*"
    },
    {
        "line": 96,
        "fullcodeline": "j=1;"
    },
    {
        "line": 115,
        "fullcodeline": "n=0;"
    },
    {
        "line": 102,
        "fullcodeline": "dash_polygon[j]=primitive_info[i-1];"
    },
    {
        "line": 103,
        "fullcodeline": "dash_polygon[j].point.x=(double) (primitive_info[i-1].point.x+dx*"
    },
    {
        "line": 105,
        "fullcodeline": "dash_polygon[j].point.y=(double) (primitive_info[i-1].point.y+dy*"
    },
    {
        "line": 107,
        "fullcodeline": "dash_polygon[j].coordinates=1;"
    },
    {
        "line": 108,
        "fullcodeline": "j++;"
    },
    {
        "line": 109,
        "fullcodeline": "dash_polygon[0].coordinates=(size_t) j;"
    },
    {
        "line": 110,
        "fullcodeline": "dash_polygon[j].primitive=UndefinedPrimitive;"
    },
    {
        "line": 111,
        "fullcodeline": "status&=DrawStrokePolygon(image,clone_info,dash_polygon,exception);"
    },
    {
        "line": 100,
        "fullcodeline": "if ((j+1) > (ssize_t) (2*number_vertices))"
    }
]