[
    {
        "line": 61,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 62,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 66,
        "fullcodeline": "assert(exception != (ExceptionInfo *) NULL);"
    },
    {
        "line": 67,
        "fullcodeline": "assert(exception->signature == MagickCoreSignature);"
    },
    {
        "line": 68,
        "fullcodeline": "image=AcquireImage(image_info);"
    },
    {
        "line": 69,
        "fullcodeline": "status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);"
    },
    {
        "line": 78,
        "fullcodeline": "count=ReadBlob(image,sz_XWDheader,(unsigned char *) &header);"
    },
    {
        "line": 84,
        "fullcodeline": "lsb_first=1;"
    },
    {
        "line": 123,
        "fullcodeline": "length=(size_t) (header.header_size-sz_XWDheader);"
    },
    {
        "line": 126,
        "fullcodeline": "comment=(char *) AcquireQuantumMemory(length+1,sizeof(*comment));"
    },
    {
        "line": 129,
        "fullcodeline": "count=ReadBlob(image,length,(unsigned char *) comment);"
    },
    {
        "line": 130,
        "fullcodeline": "comment[length]='\\0';"
    },
    {
        "line": 131,
        "fullcodeline": "(void) SetImageProperty(image,\"comment\",comment);"
    },
    {
        "line": 132,
        "fullcodeline": "comment=DestroyString(comment);"
    },
    {
        "line": 141,
        "fullcodeline": "ximage->depth=(int) header.pixmap_depth;"
    },
    {
        "line": 142,
        "fullcodeline": "ximage->format=(int) header.pixmap_format;"
    },
    {
        "line": 143,
        "fullcodeline": "ximage->xoffset=(int) header.xoffset;"
    },
    {
        "line": 144,
        "fullcodeline": "ximage->data=(char *) NULL;"
    },
    {
        "line": 145,
        "fullcodeline": "ximage->width=(int) header.pixmap_width;"
    },
    {
        "line": 146,
        "fullcodeline": "ximage->height=(int) header.pixmap_height;"
    },
    {
        "line": 147,
        "fullcodeline": "ximage->bitmap_pad=(int) header.bitmap_pad;"
    },
    {
        "line": 148,
        "fullcodeline": "ximage->bytes_per_line=(int) header.bytes_per_line;"
    },
    {
        "line": 149,
        "fullcodeline": "ximage->byte_order=(int) header.byte_order;"
    },
    {
        "line": 150,
        "fullcodeline": "ximage->bitmap_unit=(int) header.bitmap_unit;"
    },
    {
        "line": 151,
        "fullcodeline": "ximage->bitmap_bit_order=(int) header.bitmap_bit_order;"
    },
    {
        "line": 152,
        "fullcodeline": "ximage->bits_per_pixel=(int) header.bits_per_pixel;"
    },
    {
        "line": 153,
        "fullcodeline": "ximage->red_mask=header.red_mask;"
    },
    {
        "line": 154,
        "fullcodeline": "ximage->green_mask=header.green_mask;"
    },
    {
        "line": 155,
        "fullcodeline": "ximage->blue_mask=header.blue_mask;"
    },
    {
        "line": 174,
        "fullcodeline": "x_status=XInitImage(ximage);"
    },
    {
        "line": 183,
        "fullcodeline": "authentic_colormap=MagickFalse;"
    },
    {
        "line": 184,
        "fullcodeline": "colors=(XColor *) NULL;"
    },
    {
        "line": 232,
        "fullcodeline": "length=(size_t) ximage->bytes_per_line*ximage->height;"
    },
    {
        "line": 255,
        "fullcodeline": "ximage->data=(char *) AcquireQuantumMemory(length,sizeof(*ximage->data));"
    },
    {
        "line": 263,
        "fullcodeline": "count=ReadBlob(image,length,(unsigned char *) ximage->data);"
    },
    {
        "line": 275,
        "fullcodeline": "image->columns=(size_t) ximage->width;"
    },
    {
        "line": 276,
        "fullcodeline": "image->rows=(size_t) ximage->height;"
    },
    {
        "line": 277,
        "fullcodeline": "image->depth=8;"
    },
    {
        "line": 278,
        "fullcodeline": "status=SetImageExtent(image,image->columns,image->rows);"
    },
    {
        "line": 293,
        "fullcodeline": "image->colors=header.ncolors;"
    },
    {
        "line": 446,
        "fullcodeline": "ximage->data=DestroyString(ximage->data);"
    },
    {
        "line": 447,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 451,
        "fullcodeline": "(void) CloseBlob(image);"
    },
    {
        "line": 63,
        "fullcodeline": "if (image_info->debug != MagickFalse)"
    },
    {
        "line": 70,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 79,
        "fullcodeline": "if (count != sz_XWDheader)"
    },
    {
        "line": 85,
        "fullcodeline": "if ((int) (*(char *) &lsb_first) != 0)"
    },
    {
        "line": 90,
        "fullcodeline": "if (header.file_version != XWD_FILE_VERSION)"
    },
    {
        "line": 92,
        "fullcodeline": "if (header.header_size < sz_XWDheader)"
    },
    {
        "line": 94,
        "fullcodeline": "if ((header.bits_per_pixel == 0) || (header.bits_per_pixel > 32))"
    },
    {
        "line": 96,
        "fullcodeline": "if (((header.bitmap_pad % 8) != 0) || (header.bitmap_pad > 32))"
    },
    {
        "line": 98,
        "fullcodeline": "if (header.bitmap_unit > 32)"
    },
    {
        "line": 100,
        "fullcodeline": "if (header.ncolors > 256)"
    },
    {
        "line": 124,
        "fullcodeline": "if ((length+1) != ((size_t) ((CARD32) (length+1))))"
    },
    {
        "line": 127,
        "fullcodeline": "if (comment == (char *) NULL)"
    },
    {
        "line": 133,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 139,
        "fullcodeline": "if (ximage == (XImage *) NULL)"
    },
    {
        "line": 156,
        "fullcodeline": "if ((ximage->width < 0) || (ximage->height < 0) || (ximage->depth < 0) ||"
    },
    {
        "line": 164,
        "fullcodeline": "if ((ximage->width > 65535) || (ximage->height > 65535))"
    },
    {
        "line": 169,
        "fullcodeline": "if ((ximage->bits_per_pixel > 32) || (ximage->bitmap_unit > 32))"
    },
    {
        "line": 175,
        "fullcodeline": "if (x_status == 0)"
    },
    {
        "line": 185,
        "fullcodeline": "if (header.ncolors != 0)"
    },
    {
        "line": 233,
        "fullcodeline": "if (CheckOverflowException(length,ximage->bytes_per_line,ximage->height))"
    },
    {
        "line": 240,
        "fullcodeline": "if (ximage->format != ZPixmap)"
    },
    {
        "line": 256,
        "fullcodeline": "if (ximage->data == (char *) NULL)"
    },
    {
        "line": 264,
        "fullcodeline": "if (count != (ssize_t) length)"
    },
    {
        "line": 279,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 288,
        "fullcodeline": "if ((header.ncolors == 0U) || (ximage->red_mask != 0) ||"
    },
    {
        "line": 294,
        "fullcodeline": "if (image_info->ping == MagickFalse)"
    },
    {
        "line": 444,
        "fullcodeline": "if (header.ncolors != 0)"
    },
    {
        "line": 448,
        "fullcodeline": "if (EOFBlob(image) != MagickFalse)"
    },
    {
        "line": 452,
        "fullcodeline": "return(GetFirstImageInList(image));"
    },
    {
        "line": 64,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 72,
        "fullcodeline": "image=DestroyImageList(image);"
    },
    {
        "line": 80,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnableToReadImageHeader\");"
    },
    {
        "line": 86,
        "fullcodeline": "MSBOrderLong((unsigned char *) &header,sz_XWDheader);"
    },
    {
        "line": 91,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"FileFormatVersionMismatch\");"
    },
    {
        "line": 93,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 95,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 97,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 99,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 101,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 112,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 121,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 125,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 128,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 134,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnexpectedEndOfFile\");"
    },
    {
        "line": 140,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 159,
        "fullcodeline": "(ximage->bytes_per_line < 0))"
    },
    {
        "line": 161,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 162,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 166,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 167,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 171,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 172,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 177,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 178,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnexpectedEndOfFile\");"
    },
    {
        "line": 190,
        "fullcodeline": "length=(size_t) header.ncolors;"
    },
    {
        "line": 193,
        "fullcodeline": "colors=(XColor *) AcquireQuantumMemory(length,sizeof(*colors));"
    },
    {
        "line": 219,
        "fullcodeline": "lsb_first=1;"
    },
    {
        "line": 237,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 238,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 245,
        "fullcodeline": "extent=length;"
    },
    {
        "line": 246,
        "fullcodeline": "length*=ximage->depth;"
    },
    {
        "line": 260,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 261,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 268,
        "fullcodeline": "ximage->data=DestroyString(ximage->data);"
    },
    {
        "line": 269,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 270,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnableToReadImageData\");"
    },
    {
        "line": 283,
        "fullcodeline": "ximage->data=DestroyString(ximage->data);"
    },
    {
        "line": 284,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 285,
        "fullcodeline": "InheritException(exception,&image->exception);"
    },
    {
        "line": 289,
        "fullcodeline": "(ximage->green_mask != 0) || (ximage->blue_mask != 0))"
    },
    {
        "line": 290,
        "fullcodeline": "image->storage_class=DirectClass;"
    },
    {
        "line": 445,
        "fullcodeline": "colors=(XColor *) RelinquishMagickMemory(colors);"
    },
    {
        "line": 449,
        "fullcodeline": "ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\","
    },
    {
        "line": 73,
        "fullcodeline": "return((Image *) NULL);"
    },
    {
        "line": 158,
        "fullcodeline": "(ximage->bitmap_bit_order < 0) || (ximage->bitmap_pad < 0) ||"
    },
    {
        "line": 191,
        "fullcodeline": "if (length > ((~0UL)/sizeof(*colors)))"
    },
    {
        "line": 194,
        "fullcodeline": "if (colors == (XColor *) NULL)"
    },
    {
        "line": 199,
        "fullcodeline": "for (i=0; i < (ssize_t) header.ncolors; i++)"
    },
    {
        "line": 220,
        "fullcodeline": "if ((int) (*(char *) &lsb_first) != 0)"
    },
    {
        "line": 235,
        "fullcodeline": "if (header.ncolors != 0)"
    },
    {
        "line": 247,
        "fullcodeline": "if (CheckOverflowException(length,extent,ximage->depth))"
    },
    {
        "line": 258,
        "fullcodeline": "if (header.ncolors != 0)"
    },
    {
        "line": 266,
        "fullcodeline": "if (header.ncolors != 0)"
    },
    {
        "line": 281,
        "fullcodeline": "if (header.ncolors != 0)"
    },
    {
        "line": 286,
        "fullcodeline": "return(DestroyImageList(image));"
    },
    {
        "line": 292,
        "fullcodeline": "image->storage_class=PseudoClass;"
    },
    {
        "line": 192,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 196,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 197,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 201,
        "fullcodeline": "count=ReadBlob(image,sz_XWDColor,(unsigned char *) &color);"
    },
    {
        "line": 208,
        "fullcodeline": "colors[i].pixel=color.pixel;"
    },
    {
        "line": 212,
        "fullcodeline": "colors[i].flags=(char) color.flags;"
    },
    {
        "line": 236,
        "fullcodeline": "colors=(XColor *) RelinquishMagickMemory(colors);"
    },
    {
        "line": 251,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 252,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");"
    },
    {
        "line": 259,
        "fullcodeline": "colors=(XColor *) RelinquishMagickMemory(colors);"
    },
    {
        "line": 267,
        "fullcodeline": "colors=(XColor *) RelinquishMagickMemory(colors);"
    },
    {
        "line": 282,
        "fullcodeline": "colors=(XColor *) RelinquishMagickMemory(colors);"
    },
    {
        "line": 157,
        "fullcodeline": "(ximage->format < 0) || (ximage->byte_order < 0) ||"
    },
    {
        "line": 202,
        "fullcodeline": "if (count != sz_XWDColor)"
    },
    {
        "line": 213,
        "fullcodeline": "if (color.flags != 0)"
    },
    {
        "line": 221,
        "fullcodeline": "for (i=0; i < (ssize_t) header.ncolors; i++)"
    },
    {
        "line": 249,
        "fullcodeline": "if (header.ncolors != 0)"
    },
    {
        "line": 314,
        "fullcodeline": "red_mask=ximage->red_mask;"
    },
    {
        "line": 315,
        "fullcodeline": "red_shift=0;"
    },
    {
        "line": 321,
        "fullcodeline": "green_mask=ximage->green_mask;"
    },
    {
        "line": 322,
        "fullcodeline": "green_shift=0;"
    },
    {
        "line": 328,
        "fullcodeline": "blue_mask=ximage->blue_mask;"
    },
    {
        "line": 329,
        "fullcodeline": "blue_shift=0;"
    },
    {
        "line": 204,
        "fullcodeline": "colors=(XColor *) RelinquishMagickMemory(colors);"
    },
    {
        "line": 205,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 206,
        "fullcodeline": "ThrowReaderException(CorruptImageError,\"UnexpectedEndOfFile\");"
    },
    {
        "line": 214,
        "fullcodeline": "authentic_colormap=MagickTrue;"
    },
    {
        "line": 225,
        "fullcodeline": "MSBOrderShort((unsigned char *) &colors[i].red,3*"
    },
    {
        "line": 250,
        "fullcodeline": "colors=(XColor *) RelinquishMagickMemory(colors);"
    },
    {
        "line": 316,
        "fullcodeline": "while ((red_mask != 0) && ((red_mask & 0x01) == 0))"
    },
    {
        "line": 323,
        "fullcodeline": "while ((green_mask != 0) && ((green_mask & 0x01) == 0))"
    },
    {
        "line": 330,
        "fullcodeline": "while ((blue_mask != 0) && ((blue_mask & 0x01) == 0))"
    },
    {
        "line": 338,
        "fullcodeline": "if ((image->colors != 0) && (authentic_colormap != MagickFalse))"
    },
    {
        "line": 403,
        "fullcodeline": "if (AcquireImageColormap(image,image->colors) == MagickFalse)"
    },
    {
        "line": 411,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 417,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 318,
        "fullcodeline": "red_mask>>=1;"
    },
    {
        "line": 319,
        "fullcodeline": "red_shift++;"
    },
    {
        "line": 325,
        "fullcodeline": "green_mask>>=1;"
    },
    {
        "line": 326,
        "fullcodeline": "green_shift++;"
    },
    {
        "line": 332,
        "fullcodeline": "blue_mask>>=1;"
    },
    {
        "line": 333,
        "fullcodeline": "blue_shift++;"
    },
    {
        "line": 407,
        "fullcodeline": "ximage->data=DestroyString(ximage->data);"
    },
    {
        "line": 408,
        "fullcodeline": "ximage=(XImage *) RelinquishMagickMemory(ximage);"
    },
    {
        "line": 409,
        "fullcodeline": "ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 413,
        "fullcodeline": "image->colormap[i].red=ScaleShortToQuantum(colors[i].red);"
    },
    {
        "line": 414,
        "fullcodeline": "image->colormap[i].green=ScaleShortToQuantum(colors[i].green);"
    },
    {
        "line": 415,
        "fullcodeline": "image->colormap[i].blue=ScaleShortToQuantum(colors[i].blue);"
    },
    {
        "line": 419,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 422,
        "fullcodeline": "indexes=GetAuthenticIndexQueue(image);"
    },
    {
        "line": 433,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 339,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 405,
        "fullcodeline": "if (header.ncolors != 0)"
    },
    {
        "line": 420,
        "fullcodeline": "if (q == (PixelPacket *) NULL)"
    },
    {
        "line": 423,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 431,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 435,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 341,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 361,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 367,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 406,
        "fullcodeline": "colors=(XColor *) RelinquishMagickMemory(colors);"
    },
    {
        "line": 425,
        "fullcodeline": "index=ConstrainColormapIndex(image,(ssize_t) XGetPixel(ximage,(int)"
    },
    {
        "line": 427,
        "fullcodeline": "SetPixelIndex(indexes+x,index);"
    },
    {
        "line": 428,
        "fullcodeline": "SetPixelRGBO(q,image->colormap+(ssize_t) index);"
    },
    {
        "line": 429,
        "fullcodeline": "q++;"
    },
    {
        "line": 342,
        "fullcodeline": "if (q == (PixelPacket *) NULL)"
    },
    {
        "line": 344,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 359,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 363,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 369,
        "fullcodeline": "q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);"
    },
    {
        "line": 391,
        "fullcodeline": "status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 346,
        "fullcodeline": "pixel=XGetPixel(ximage,(int) x,(int) y);"
    },
    {
        "line": 347,
        "fullcodeline": "index=ConstrainColormapIndex(image,(ssize_t) (pixel >>"
    },
    {
        "line": 349,
        "fullcodeline": "SetPixelRed(q,ScaleShortToQuantum(colors[(ssize_t) index].red));"
    },
    {
        "line": 350,
        "fullcodeline": "index=ConstrainColormapIndex(image,(ssize_t) (pixel >>"
    },
    {
        "line": 352,
        "fullcodeline": "SetPixelGreen(q,ScaleShortToQuantum(colors[(ssize_t)"
    },
    {
        "line": 354,
        "fullcodeline": "index=ConstrainColormapIndex(image,(ssize_t) (pixel >>"
    },
    {
        "line": 356,
        "fullcodeline": "SetPixelBlue(q,ScaleShortToQuantum(colors[(ssize_t) index].blue));"
    },
    {
        "line": 357,
        "fullcodeline": "q++;"
    },
    {
        "line": 370,
        "fullcodeline": "if (q == (PixelPacket *) NULL)"
    },
    {
        "line": 372,
        "fullcodeline": "for (x=0; x < (ssize_t) image->columns; x++)"
    },
    {
        "line": 389,
        "fullcodeline": "if (SyncAuthenticPixels(image,exception) == MagickFalse)"
    },
    {
        "line": 393,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 374,
        "fullcodeline": "pixel=XGetPixel(ximage,(int) x,(int) y);"
    },
    {
        "line": 375,
        "fullcodeline": "color=(pixel >> red_shift) & red_mask;"
    },
    {
        "line": 378,
        "fullcodeline": "SetPixelRed(q,ScaleShortToQuantum((unsigned short) color));"
    },
    {
        "line": 379,
        "fullcodeline": "color=(pixel >> green_shift) & green_mask;"
    },
    {
        "line": 382,
        "fullcodeline": "SetPixelGreen(q,ScaleShortToQuantum((unsigned short) color));"
    },
    {
        "line": 383,
        "fullcodeline": "color=(pixel >> blue_shift) & blue_mask;"
    },
    {
        "line": 386,
        "fullcodeline": "SetPixelBlue(q,ScaleShortToQuantum((unsigned short) color));"
    },
    {
        "line": 387,
        "fullcodeline": "q++;"
    },
    {
        "line": 376,
        "fullcodeline": "if (red_mask != 0)"
    },
    {
        "line": 380,
        "fullcodeline": "if (green_mask != 0)"
    },
    {
        "line": 384,
        "fullcodeline": "if (blue_mask != 0)"
    },
    {
        "line": 426,
        "fullcodeline": "x,(int) y));"
    },
    {
        "line": 377,
        "fullcodeline": "color=(color*65535UL)/red_mask;"
    },
    {
        "line": 381,
        "fullcodeline": "color=(color*65535UL)/green_mask;"
    },
    {
        "line": 385,
        "fullcodeline": "color=(color*65535UL)/blue_mask;"
    }
]