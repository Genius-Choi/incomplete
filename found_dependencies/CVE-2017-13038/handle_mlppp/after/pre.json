[
    {
        "line": 4,
        "fullcodeline": "if (!ndo->ndo_eflag)"
    },
    {
        "line": 7,
        "fullcodeline": "if (length < 2) {"
    },
    {
        "line": 16,
        "fullcodeline": "ND_PRINT((ndo, \"seq 0x%03x, Flags [%s], length %u\","
    },
    {
        "line": 5,
        "fullcodeline": "ND_PRINT((ndo, \"MLPPP, \"));"
    },
    {
        "line": 8,
        "fullcodeline": "ND_PRINT((ndo, \"[|mlppp]\"));"
    },
    {
        "line": 11,
        "fullcodeline": "if (!ND_TTEST_16BITS(p)) {"
    },
    {
        "line": 12,
        "fullcodeline": "ND_PRINT((ndo, \"[|mlppp]\"));"
    },
    {
        "line": 17,
        "fullcodeline": "(EXTRACT_16BITS(p))&0x0fff, /* only support 12-Bit sequence space for now */"
    },
    {
        "line": 18,
        "fullcodeline": "bittok2str(ppp_ml_flag_values, \"none\", *p & 0xc0),"
    }
]