[
    {
        "line": 17,
        "fullcodeline": "newData = PyMem_Malloc(newDataLength + 1);"
    },
    {
        "line": 21,
        "fullcodeline": "oldpos = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "newpos = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "diffPtr = diffBlock;"
    },
    {
        "line": 24,
        "fullcodeline": "extraPtr = extraBlock;"
    },
    {
        "line": 25,
        "fullcodeline": "numTuples = PyList_GET_SIZE(controlTuples);"
    },
    {
        "line": 70,
        "fullcodeline": "results = PyBytes_FromStringAndSize(newData, newDataLength);"
    },
    {
        "line": 71,
        "fullcodeline": "PyMem_Free(newData);"
    },
    {
        "line": 9,
        "fullcodeline": "if (!PyArg_ParseTuple(args, \"s#nO!s#s#\","
    },
    {
        "line": 18,
        "fullcodeline": "if (!newData)"
    },
    {
        "line": 26,
        "fullcodeline": "for (i = 0; i < numTuples; i++) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (newpos != newDataLength ||"
    },
    {
        "line": 27,
        "fullcodeline": "tuple = PyList_GET_ITEM(controlTuples, i);"
    },
    {
        "line": 38,
        "fullcodeline": "x = PyLong_AsLong(PyTuple_GET_ITEM(tuple, 0));"
    },
    {
        "line": 39,
        "fullcodeline": "y = PyLong_AsLong(PyTuple_GET_ITEM(tuple, 1));"
    },
    {
        "line": 40,
        "fullcodeline": "z = PyLong_AsLong(PyTuple_GET_ITEM(tuple, 2));"
    },
    {
        "line": 48,
        "fullcodeline": "memcpy(newData + newpos, diffPtr, x);"
    },
    {
        "line": 49,
        "fullcodeline": "diffPtr += x;"
    },
    {
        "line": 53,
        "fullcodeline": "newpos += x;"
    },
    {
        "line": 54,
        "fullcodeline": "oldpos += x;"
    },
    {
        "line": 55,
        "fullcodeline": "memcpy(newData + newpos, extraPtr, y);"
    },
    {
        "line": 56,
        "fullcodeline": "extraPtr += y;"
    },
    {
        "line": 57,
        "fullcodeline": "newpos += y;"
    },
    {
        "line": 58,
        "fullcodeline": "oldpos += z;"
    },
    {
        "line": 64,
        "fullcodeline": "extraPtr != extraBlock + extraBlockLength) {"
    },
    {
        "line": 65,
        "fullcodeline": "PyMem_Free(newData);"
    },
    {
        "line": 66,
        "fullcodeline": "PyErr_SetString(PyExc_ValueError, \"corrupt patch (underflow)\");"
    },
    {
        "line": 19,
        "fullcodeline": "return PyErr_NoMemory();"
    },
    {
        "line": 28,
        "fullcodeline": "if (!PyTuple_Check(tuple)) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (PyTuple_GET_SIZE(tuple) != 3) {"
    },
    {
        "line": 41,
        "fullcodeline": "if (newpos + x > newDataLength ||"
    },
    {
        "line": 50,
        "fullcodeline": "for (j = 0; j < x; j++)"
    },
    {
        "line": 63,
        "fullcodeline": "diffPtr != diffBlock + diffBlockLength ||"
    },
    {
        "line": 29,
        "fullcodeline": "PyMem_Free(newData);"
    },
    {
        "line": 30,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"expecting tuple\");"
    },
    {
        "line": 34,
        "fullcodeline": "PyMem_Free(newData);"
    },
    {
        "line": 35,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"expecting tuple of size 3\");"
    },
    {
        "line": 43,
        "fullcodeline": "extraPtr + y > extraBlock + extraBlockLength) {"
    },
    {
        "line": 44,
        "fullcodeline": "PyMem_Free(newData);"
    },
    {
        "line": 45,
        "fullcodeline": "PyErr_SetString(PyExc_ValueError, \"corrupt patch (overflow)\");"
    },
    {
        "line": 51,
        "fullcodeline": "if ((oldpos + j >= 0) && (oldpos + j < origDataLength))"
    },
    {
        "line": 42,
        "fullcodeline": "diffPtr + x > diffBlock + diffBlockLength ||"
    },
    {
        "line": 52,
        "fullcodeline": "newData[newpos + j] += origData[oldpos + j];"
    }
]