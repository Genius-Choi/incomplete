[
    {
        "line": 13,
        "fullcodeline": "engine_object = EngineType.objects.get(pk=engine_type)"
    },
    {
        "line": 14,
        "fullcodeline": "domain = Domain.objects.get(pk=domain_id)"
    },
    {
        "line": 22,
        "fullcodeline": "domain.last_scan_date = timezone.now()"
    },
    {
        "line": 23,
        "fullcodeline": "domain.save()"
    },
    {
        "line": 26,
        "fullcodeline": "task.scan_type = engine_object"
    },
    {
        "line": 28,
        "fullcodeline": "task.domain = domain"
    },
    {
        "line": 29,
        "fullcodeline": "task.scan_status = 1"
    },
    {
        "line": 30,
        "fullcodeline": "task.start_scan_date = timezone.now()"
    },
    {
        "line": 31,
        "fullcodeline": "task.subdomain_discovery = True if engine_object.subdomain_discovery else False"
    },
    {
        "line": 32,
        "fullcodeline": "task.dir_file_search = True if engine_object.dir_file_search else False"
    },
    {
        "line": 33,
        "fullcodeline": "task.port_scan = True if engine_object.port_scan else False"
    },
    {
        "line": 34,
        "fullcodeline": "task.fetch_url = True if engine_object.fetch_url else False"
    },
    {
        "line": 35,
        "fullcodeline": "task.osint = True if engine_object.osint else False"
    },
    {
        "line": 36,
        "fullcodeline": "task.screenshot = True if engine_object.screenshot else False"
    },
    {
        "line": 37,
        "fullcodeline": "task.vulnerability_scan = True if engine_object.vulnerability_scan else False"
    },
    {
        "line": 38,
        "fullcodeline": "task.save()"
    },
    {
        "line": 40,
        "fullcodeline": "activity_id = create_scan_activity(task, \"Scanning Started\", 2)"
    },
    {
        "line": 41,
        "fullcodeline": "results_dir = '/usr/src/scan_results/'"
    },
    {
        "line": 42,
        "fullcodeline": "os.chdir(results_dir)"
    },
    {
        "line": 44,
        "fullcodeline": "notification = Notification.objects.all()"
    },
    {
        "line": 58,
        "fullcodeline": "yaml_configuration = None"
    },
    {
        "line": 59,
        "fullcodeline": "excluded_subdomains = ''"
    },
    {
        "line": 77,
        "fullcodeline": "results_dir = results_dir + current_scan_dir"
    },
    {
        "line": 195,
        "fullcodeline": "activity_id = create_scan_activity(task, \"Scan Completed\", 2)"
    },
    {
        "line": 206,
        "fullcodeline": "task.stop_scan_date = timezone.now()"
    },
    {
        "line": 207,
        "fullcodeline": "task.save()"
    },
    {
        "line": 209,
        "fullcodeline": "delete_scan_data(results_dir)"
    },
    {
        "line": 15,
        "fullcodeline": "if scan_type == 1:"
    },
    {
        "line": 46,
        "fullcodeline": "if notification and notification[0].send_scan_status_notif:"
    },
    {
        "line": 72,
        "fullcodeline": "if engine_object.fetch_url and GF_PATTERNS in yaml_configuration[FETCH_URL]:"
    },
    {
        "line": 196,
        "fullcodeline": "if notification and notification[0].send_scan_status_notif:"
    },
    {
        "line": 16,
        "fullcodeline": "task = ScanHistory()"
    },
    {
        "line": 17,
        "fullcodeline": "task.scan_status = -1"
    },
    {
        "line": 47,
        "fullcodeline": "send_notification('reNgine has initiated recon for target {} with engine type {}'.format(domain.name, engine_object.engine_name))"
    },
    {
        "line": 50,
        "fullcodeline": "current_scan_dir = domain.name + '_' + str(random.randint(100000000000, 999999999999))"
    },
    {
        "line": 51,
        "fullcodeline": "os.mkdir(current_scan_dir)"
    },
    {
        "line": 52,
        "fullcodeline": "task.results_dir = current_scan_dir"
    },
    {
        "line": 53,
        "fullcodeline": "task.save()"
    },
    {
        "line": 62,
        "fullcodeline": "yaml_configuration = yaml.load("
    },
    {
        "line": 73,
        "fullcodeline": "task.used_gf_patterns = ','.join("
    },
    {
        "line": 75,
        "fullcodeline": "task.save()"
    },
    {
        "line": 81,
        "fullcodeline": "extract_imported_subdomain("
    },
    {
        "line": 90,
        "fullcodeline": "initial_subdomain_file = '/target_domain.txt' if task.subdomain_discovery else '/sorted_subdomain_collection.txt'"
    },
    {
        "line": 92,
        "fullcodeline": "subdomain_file = open(results_dir + initial_subdomain_file, \"w\")"
    },
    {
        "line": 93,
        "fullcodeline": "subdomain_file.write(domain.name + \"\\n\")"
    },
    {
        "line": 94,
        "fullcodeline": "subdomain_file.close()"
    },
    {
        "line": 109,
        "fullcodeline": "update_last_activity(activity_id, 2)"
    },
    {
        "line": 110,
        "fullcodeline": "activity_id = create_scan_activity(task, \"HTTP Crawler\", 1)"
    },
    {
        "line": 111,
        "fullcodeline": "http_crawler("
    },
    {
        "line": 116,
        "fullcodeline": "update_last_activity(activity_id, 2)"
    },
    {
        "line": 197,
        "fullcodeline": "send_notification('*Scan Completed*\\nreNgine has finished performing recon on target {}.'.format(domain.name))"
    },
    {
        "line": 202,
        "fullcodeline": "if ScanActivity.objects.filter(scan_of=task).filter(status=0).all():"
    },
    {
        "line": 203,
        "fullcodeline": "task.scan_status = 0"
    },
    {
        "line": 205,
        "fullcodeline": "task.scan_status = 2"
    },
    {
        "line": 210,
        "fullcodeline": "return {\"status\": True}"
    },
    {
        "line": 18,
        "fullcodeline": "elif scan_type == 0:"
    },
    {
        "line": 19,
        "fullcodeline": "task = ScanHistory.objects.get(pk=scan_history_id)"
    },
    {
        "line": 55,
        "fullcodeline": "logger.error(exception)"
    },
    {
        "line": 56,
        "fullcodeline": "scan_failed(task)"
    },
    {
        "line": 66,
        "fullcodeline": "logger.error(exception)"
    },
    {
        "line": 97,
        "fullcodeline": "activity_id = create_scan_activity(task, \"Subdomain Scanning\", 1)"
    },
    {
        "line": 98,
        "fullcodeline": "subdomain_scan("
    },
    {
        "line": 107,
        "fullcodeline": "skip_subdomain_scan(task, domain, results_dir)"
    },
    {
        "line": 74,
        "fullcodeline": "pattern for pattern in yaml_configuration[FETCH_URL][GF_PATTERNS])"
    },
    {
        "line": 120,
        "fullcodeline": "activity_id = create_scan_activity("
    },
    {
        "line": 122,
        "fullcodeline": "grab_screenshot("
    },
    {
        "line": 128,
        "fullcodeline": "update_last_activity(activity_id, 2)"
    },
    {
        "line": 130,
        "fullcodeline": "logger.error(e)"
    },
    {
        "line": 131,
        "fullcodeline": "update_last_activity(activity_id, 0)"
    },
    {
        "line": 135,
        "fullcodeline": "activity_id = create_scan_activity(task, \"Port Scanning\", 1)"
    },
    {
        "line": 136,
        "fullcodeline": "port_scanning(task, domain, yaml_configuration, results_dir)"
    },
    {
        "line": 137,
        "fullcodeline": "update_last_activity(activity_id, 2)"
    },
    {
        "line": 139,
        "fullcodeline": "logger.error(e)"
    },
    {
        "line": 140,
        "fullcodeline": "update_last_activity(activity_id, 0)"
    },
    {
        "line": 144,
        "fullcodeline": "activity_id = create_scan_activity(task, \"OSINT Running\", 1)"
    },
    {
        "line": 145,
        "fullcodeline": "perform_osint(task, domain, yaml_configuration, results_dir)"
    },
    {
        "line": 146,
        "fullcodeline": "update_last_activity(activity_id, 2)"
    },
    {
        "line": 148,
        "fullcodeline": "logger.error(e)"
    },
    {
        "line": 149,
        "fullcodeline": "update_last_activity(activity_id, 0)"
    },
    {
        "line": 154,
        "fullcodeline": "activity_id = create_scan_activity(task, \"Directory Search\", 1)"
    },
    {
        "line": 155,
        "fullcodeline": "directory_brute("
    },
    {
        "line": 162,
        "fullcodeline": "update_last_activity(activity_id, 2)"
    },
    {
        "line": 164,
        "fullcodeline": "logger.error(e)"
    },
    {
        "line": 165,
        "fullcodeline": "update_last_activity(activity_id, 0)"
    },
    {
        "line": 169,
        "fullcodeline": "activity_id = create_scan_activity(task, \"Fetching endpoints\", 1)"
    },
    {
        "line": 170,
        "fullcodeline": "fetch_endpoints("
    },
    {
        "line": 176,
        "fullcodeline": "update_last_activity(activity_id, 2)"
    },
    {
        "line": 178,
        "fullcodeline": "logger.error(e)"
    },
    {
        "line": 179,
        "fullcodeline": "update_last_activity(activity_id, 0)"
    },
    {
        "line": 183,
        "fullcodeline": "activity_id = create_scan_activity(task, \"Vulnerability Scan\", 1)"
    },
    {
        "line": 184,
        "fullcodeline": "vulnerability_scan("
    },
    {
        "line": 190,
        "fullcodeline": "update_last_activity(activity_id, 2)"
    },
    {
        "line": 192,
        "fullcodeline": "logger.error(e)"
    },
    {
        "line": 193,
        "fullcodeline": "update_last_activity(activity_id, 0)"
    }
]