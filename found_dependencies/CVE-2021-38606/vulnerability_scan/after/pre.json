[
    {
        "line": 7,
        "fullcodeline": "notification = Notification.objects.all()"
    },
    {
        "line": 17,
        "fullcodeline": "urls_path = '/alive.txt'"
    },
    {
        "line": 24,
        "fullcodeline": "vulnerability_result_path = results_dir + '/vulnerability.json'"
    },
    {
        "line": 26,
        "fullcodeline": "vulnerability_scan_input_file = results_dir + urls_path"
    },
    {
        "line": 28,
        "fullcodeline": "nuclei_command = 'nuclei -json -l {} -o {}'.format("
    },
    {
        "line": 81,
        "fullcodeline": "os.system('nuclei -update-templates')"
    },
    {
        "line": 8,
        "fullcodeline": "if notification and notification[0].send_scan_status_notif:"
    },
    {
        "line": 32,
        "fullcodeline": "if USE_NUCLEI_CONFIG in yaml_configuration[VULNERABILITY_SCAN] and yaml_configuration[VULNERABILITY_SCAN][USE_NUCLEI_CONFIG]:"
    },
    {
        "line": 41,
        "fullcodeline": "if CUSTOM_NUCLEI_TEMPLATE in yaml_configuration["
    },
    {
        "line": 66,
        "fullcodeline": "if NUCLEI_CONCURRENCY in yaml_configuration[VULNERABILITY_SCAN] and yaml_configuration["
    },
    {
        "line": 73,
        "fullcodeline": "if NUCLEI_SEVERITY in yaml_configuration[VULNERABILITY_SCAN] and ALL not in yaml_configuration[VULNERABILITY_SCAN][NUCLEI_SEVERITY]:"
    },
    {
        "line": 83,
        "fullcodeline": "for _severity in severity.split(\",\"):"
    },
    {
        "line": 183,
        "fullcodeline": "if notification and notification[0].send_scan_status_notif:"
    },
    {
        "line": 9,
        "fullcodeline": "send_notification('Vulnerability scan has been initiated for {}.'.format(domain.name))"
    },
    {
        "line": 19,
        "fullcodeline": "os.system('cat {0}/all_urls.txt | grep -Eiv \"\\\\.(eot|jpg|jpeg|gif|css|tif|tiff|png|ttf|otf|woff|woff2|ico|pdf|svg|txt|js|doc|docx)$\" | unfurl -u format %s://%d%p >> {0}/unfurl_urls.txt'.format(results_dir))"
    },
    {
        "line": 20,
        "fullcodeline": "os.system("
    },
    {
        "line": 22,
        "fullcodeline": "urls_path = '/unfurl_urls.txt'"
    },
    {
        "line": 33,
        "fullcodeline": "nuclei_command += ' -config /root/.config/nuclei/config.yaml'"
    },
    {
        "line": 42,
        "fullcodeline": "VULNERABILITY_SCAN] or NUCLEI_TEMPLATE in yaml_configuration[VULNERABILITY_SCAN]:"
    },
    {
        "line": 63,
        "fullcodeline": "nuclei_command = nuclei_command + ' -t /root/nuclei-templates'"
    },
    {
        "line": 68,
        "fullcodeline": "concurrency = yaml_configuration[VULNERABILITY_SCAN][NUCLEI_CONCURRENCY]"
    },
    {
        "line": 70,
        "fullcodeline": "nuclei_command = nuclei_command + ' -c ' + str(concurrency)"
    },
    {
        "line": 74,
        "fullcodeline": "_severity = ','.join("
    },
    {
        "line": 76,
        "fullcodeline": "severity = _severity.replace(\" \", \"\")"
    },
    {
        "line": 78,
        "fullcodeline": "severity = \"critical, high, medium, low, info\""
    },
    {
        "line": 184,
        "fullcodeline": "info_count = Vulnerability.objects.filter("
    },
    {
        "line": 186,
        "fullcodeline": "low_count = Vulnerability.objects.filter("
    },
    {
        "line": 188,
        "fullcodeline": "medium_count = Vulnerability.objects.filter("
    },
    {
        "line": 190,
        "fullcodeline": "high_count = Vulnerability.objects.filter("
    },
    {
        "line": 192,
        "fullcodeline": "critical_count = Vulnerability.objects.filter("
    },
    {
        "line": 194,
        "fullcodeline": "vulnerability_count = info + low_count + medium_count + high_count + critical_count"
    },
    {
        "line": 196,
        "fullcodeline": "message = 'Vulnerability scan has been completed for {} and discovered {} vulnerabilities.'.format("
    },
    {
        "line": 200,
        "fullcodeline": "message += '\\n\\n*Vulnerability Stats:*'"
    },
    {
        "line": 201,
        "fullcodeline": "message += '\\nCritical: {}'.format(critical_count)"
    },
    {
        "line": 202,
        "fullcodeline": "message += '\\nHigh: {}'.format(high_count)"
    },
    {
        "line": 203,
        "fullcodeline": "message += '\\nMedium: {}'.format(medium_count)"
    },
    {
        "line": 204,
        "fullcodeline": "message += '\\nLow: {}'.format(low_count)"
    },
    {
        "line": 205,
        "fullcodeline": "message += '\\nInfo: {}'.format(info_count)"
    },
    {
        "line": 207,
        "fullcodeline": "send_notification(message)"
    },
    {
        "line": 44,
        "fullcodeline": "if NUCLEI_TEMPLATE in yaml_configuration[VULNERABILITY_SCAN]:"
    },
    {
        "line": 55,
        "fullcodeline": "if CUSTOM_NUCLEI_TEMPLATE in yaml_configuration[VULNERABILITY_SCAN]:"
    },
    {
        "line": 88,
        "fullcodeline": "final_nuclei_command = nuclei_command + ' -severity ' + _severity"
    },
    {
        "line": 89,
        "fullcodeline": "proxy = get_random_proxy()"
    },
    {
        "line": 93,
        "fullcodeline": "logger.info(final_nuclei_command)"
    },
    {
        "line": 95,
        "fullcodeline": "os.system(final_nuclei_command)"
    },
    {
        "line": 21,
        "fullcodeline": "'sort -u {0}/unfurl_urls.txt -o {0}/unfurl_urls.txt'.format(results_dir))"
    },
    {
        "line": 53,
        "fullcodeline": "nuclei_command = nuclei_command + ' -t ' + template"
    },
    {
        "line": 57,
        "fullcodeline": "_template = ','.join("
    },
    {
        "line": 59,
        "fullcodeline": "template = _template.replace(',', ' -t ')"
    },
    {
        "line": 61,
        "fullcodeline": "nuclei_command = nuclei_command + ' -t ' + template"
    },
    {
        "line": 45,
        "fullcodeline": "if ALL in yaml_configuration[VULNERABILITY_SCAN][NUCLEI_TEMPLATE]:"
    },
    {
        "line": 85,
        "fullcodeline": "if os.path.isfile(vulnerability_result_path):"
    },
    {
        "line": 86,
        "fullcodeline": "os.system('rm {}'.format(vulnerability_result_path))"
    },
    {
        "line": 91,
        "fullcodeline": "final_nuclei_command += ' --proxy-url {}'.format(proxy)"
    },
    {
        "line": 46,
        "fullcodeline": "template = NUCLEI_TEMPLATES_PATH"
    },
    {
        "line": 48,
        "fullcodeline": "_template = ','.join([NUCLEI_TEMPLATES_PATH + str(element)"
    },
    {
        "line": 50,
        "fullcodeline": "template = _template.replace(',', ' -t ')"
    },
    {
        "line": 75,
        "fullcodeline": "[str(element) for element in yaml_configuration[VULNERABILITY_SCAN][NUCLEI_SEVERITY]])"
    },
    {
        "line": 97,
        "fullcodeline": "if os.path.isfile(vulnerability_result_path):"
    },
    {
        "line": 98,
        "fullcodeline": "urls_json_result = open(vulnerability_result_path, 'r')"
    },
    {
        "line": 99,
        "fullcodeline": "lines = urls_json_result.readlines()"
    },
    {
        "line": 180,
        "fullcodeline": "logging.error(exception)"
    },
    {
        "line": 181,
        "fullcodeline": "update_last_activity(activity_id, 0)"
    },
    {
        "line": 58,
        "fullcodeline": "[str(element) + '.yaml' for element in yaml_configuration[VULNERABILITY_SCAN][CUSTOM_NUCLEI_TEMPLATE]])"
    },
    {
        "line": 100,
        "fullcodeline": "for line in lines:"
    },
    {
        "line": 101,
        "fullcodeline": "json_st = json.loads(line.strip())"
    },
    {
        "line": 102,
        "fullcodeline": "host = json_st['host']"
    },
    {
        "line": 103,
        "fullcodeline": "_subdomain = get_subdomain_from_url(host)"
    },
    {
        "line": 105,
        "fullcodeline": "subdomain = Subdomain.objects.get("
    },
    {
        "line": 107,
        "fullcodeline": "vulnerability = Vulnerability()"
    },
    {
        "line": 108,
        "fullcodeline": "vulnerability.subdomain = subdomain"
    },
    {
        "line": 109,
        "fullcodeline": "vulnerability.scan_history = task"
    },
    {
        "line": 110,
        "fullcodeline": "vulnerability.target_domain = domain"
    },
    {
        "line": 134,
        "fullcodeline": "vulnerability.severity = severity"
    },
    {
        "line": 151,
        "fullcodeline": "vulnerability.discovered_date = timezone.now()"
    },
    {
        "line": 152,
        "fullcodeline": "vulnerability.open_status = True"
    },
    {
        "line": 153,
        "fullcodeline": "vulnerability.save()"
    },
    {
        "line": 117,
        "fullcodeline": "if 'name' in json_st['info']:"
    },
    {
        "line": 119,
        "fullcodeline": "if 'severity' in json_st['info']:"
    },
    {
        "line": 135,
        "fullcodeline": "if 'tags' in json_st['info']:"
    },
    {
        "line": 137,
        "fullcodeline": "if 'description' in json_st['info']:"
    },
    {
        "line": 139,
        "fullcodeline": "if 'reference' in json_st['info']:"
    },
    {
        "line": 141,
        "fullcodeline": "if 'matched' in json_st:"
    },
    {
        "line": 143,
        "fullcodeline": "if 'templateID' in json_st:"
    },
    {
        "line": 145,
        "fullcodeline": "if 'description' in json_st:"
    },
    {
        "line": 147,
        "fullcodeline": "if 'matcher_name' in json_st:"
    },
    {
        "line": 149,
        "fullcodeline": "if 'extracted_results' in json_st:"
    },
    {
        "line": 155,
        "fullcodeline": "if  severity != \"info\" and notification and notification[0].send_vuln_notif:"
    },
    {
        "line": 164,
        "fullcodeline": "if Hackerone.objects.all().exists() and severity != 'info' and severity \\"
    },
    {
        "line": 112,
        "fullcodeline": "endpoint = EndPoint.objects.get("
    },
    {
        "line": 114,
        "fullcodeline": "vulnerability.endpoint = endpoint"
    },
    {
        "line": 118,
        "fullcodeline": "vulnerability.name = json_st['info']['name']"
    },
    {
        "line": 133,
        "fullcodeline": "severity = 0"
    },
    {
        "line": 136,
        "fullcodeline": "vulnerability.tags = json_st['info']['tags']"
    },
    {
        "line": 138,
        "fullcodeline": "vulnerability.description = json_st['info']['description']"
    },
    {
        "line": 140,
        "fullcodeline": "vulnerability.reference = json_st['info']['reference']"
    },
    {
        "line": 142,
        "fullcodeline": "vulnerability.http_url = json_st['matched']"
    },
    {
        "line": 144,
        "fullcodeline": "vulnerability.template_used = json_st['templateID']"
    },
    {
        "line": 146,
        "fullcodeline": "vulnerability.description = json_st['description']"
    },
    {
        "line": 148,
        "fullcodeline": "vulnerability.matcher_name = json_st['matcher_name']"
    },
    {
        "line": 150,
        "fullcodeline": "vulnerability.extracted_results = json_st['extracted_results']"
    },
    {
        "line": 156,
        "fullcodeline": "message = \"*Alert: Vulnerability Identified*\""
    },
    {
        "line": 157,
        "fullcodeline": "message += \"\\n\\n\""
    },
    {
        "line": 158,
        "fullcodeline": "message += \"A *{}* severity vulnerability has been identified.\".format(json_st['info']['severity'])"
    },
    {
        "line": 159,
        "fullcodeline": "message += \"\\nVulnerability Name: {}\".format(json_st['info']['name'])"
    },
    {
        "line": 160,
        "fullcodeline": "message += \"\\nVulnerable URL: {}\".format(json_st['host'])"
    },
    {
        "line": 166,
        "fullcodeline": "hackerone = Hackerone.objects.all()[0]"
    },
    {
        "line": 176,
        "fullcodeline": "logger.error('Object not found')"
    },
    {
        "line": 120,
        "fullcodeline": "if json_st['info']['severity'] == 'info':"
    },
    {
        "line": 168,
        "fullcodeline": "if hackerone.send_critical and severity == 'critical':"
    },
    {
        "line": 116,
        "fullcodeline": "logger.error(exception)"
    },
    {
        "line": 121,
        "fullcodeline": "severity = 0"
    },
    {
        "line": 169,
        "fullcodeline": "send_hackerone_report(vulnerability.id)"
    },
    {
        "line": 122,
        "fullcodeline": "elif json_st['info']['severity'] == 'low':"
    },
    {
        "line": 170,
        "fullcodeline": "elif hackerone.send_high and severity == 'high':"
    },
    {
        "line": 123,
        "fullcodeline": "severity = 1"
    },
    {
        "line": 171,
        "fullcodeline": "send_hackerone_report(vulnerability.id)"
    },
    {
        "line": 124,
        "fullcodeline": "elif json_st['info']['severity'] == 'medium':"
    },
    {
        "line": 172,
        "fullcodeline": "elif hackerone.send_medium and severity == 'medium':"
    },
    {
        "line": 125,
        "fullcodeline": "severity = 2"
    },
    {
        "line": 173,
        "fullcodeline": "send_hackerone_report(vulnerability.id)"
    },
    {
        "line": 126,
        "fullcodeline": "elif json_st['info']['severity'] == 'high':"
    },
    {
        "line": 127,
        "fullcodeline": "severity = 3"
    },
    {
        "line": 128,
        "fullcodeline": "elif json_st['info']['severity'] == 'critical':"
    },
    {
        "line": 129,
        "fullcodeline": "severity = 4"
    },
    {
        "line": 131,
        "fullcodeline": "severity = 0"
    }
]