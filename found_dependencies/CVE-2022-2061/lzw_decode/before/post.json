[
    {
        "line": 8,
        "fullcodeline": "uint8_t *stack_pos = ctx->stack_base;"
    },
    {
        "line": 9,
        "fullcodeline": "uint32_t clear_code = ctx->clear_code;"
    },
    {
        "line": 10,
        "fullcodeline": "uint32_t current_entry = ctx->current_entry;"
    },
    {
        "line": 11,
        "fullcodeline": "struct lzw_dictionary_entry * const table = ctx->table;"
    },
    {
        "line": 14,
        "fullcodeline": "res = lzw__next_code(&ctx->input, ctx->current_code_size, &code_new);"
    },
    {
        "line": 63,
        "fullcodeline": "ctx->previous_code = code_new;"
    },
    {
        "line": 75,
        "fullcodeline": "*stack_pos_out = stack_pos;"
    },
    {
        "line": 15,
        "fullcodeline": "if (res != LZW_OK) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (code_new == clear_code) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (current_entry < (1 << LZW_CODE_MAX)) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (current_entry == ctx->current_code_size_max) {"
    },
    {
        "line": 68,
        "fullcodeline": "while (code_out > clear_code) {"
    },
    {
        "line": 45,
        "fullcodeline": "struct lzw_dictionary_entry *entry = table + current_entry;"
    },
    {
        "line": 46,
        "fullcodeline": "entry->last_value     = last_value;"
    },
    {
        "line": 47,
        "fullcodeline": "entry->first_value    = ctx->previous_code_first;"
    },
    {
        "line": 48,
        "fullcodeline": "entry->previous_entry = ctx->previous_code;"
    },
    {
        "line": 49,
        "fullcodeline": "ctx->current_entry++;"
    },
    {
        "line": 69,
        "fullcodeline": "struct lzw_dictionary_entry *entry = table + code_out;"
    },
    {
        "line": 70,
        "fullcodeline": "*stack_pos++ = entry->last_value;"
    },
    {
        "line": 71,
        "fullcodeline": "code_out = entry->previous_entry;"
    },
    {
        "line": 73,
        "fullcodeline": "*stack_pos++ = table[code_out].last_value;"
    },
    {
        "line": 22,
        "fullcodeline": "return lzw__clear_codes(ctx, stack_pos_out);"
    },
    {
        "line": 54,
        "fullcodeline": "if (ctx->current_code_size < LZW_CODE_MAX) {"
    },
    {
        "line": 24,
        "fullcodeline": "} else if (code_new == ctx->eoi_code) {"
    },
    {
        "line": 55,
        "fullcodeline": "ctx->current_code_size++;"
    },
    {
        "line": 56,
        "fullcodeline": "ctx->current_code_size_max ="
    },
    {
        "line": 57,
        "fullcodeline": "(1 << ctx->current_code_size) - 1;"
    },
    {
        "line": 28,
        "fullcodeline": "} else if (code_new > current_entry) {"
    },
    {
        "line": 32,
        "fullcodeline": "} else if (code_new < current_entry) {"
    },
    {
        "line": 34,
        "fullcodeline": "code_out = code_new;"
    },
    {
        "line": 38,
        "fullcodeline": "*stack_pos++ = ctx->previous_code_first;"
    },
    {
        "line": 39,
        "fullcodeline": "code_out = ctx->previous_code;"
    },
    {
        "line": 40,
        "fullcodeline": "last_value = ctx->previous_code_first;"
    }
]