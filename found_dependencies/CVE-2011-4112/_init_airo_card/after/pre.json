[
    {
        "line": 11,
        "fullcodeline": "dev = alloc_netdev(sizeof(*ai), \"\", ether_setup);"
    },
    {
        "line": 17,
        "fullcodeline": "ai = dev->ml_priv = netdev_priv(dev);"
    },
    {
        "line": 18,
        "fullcodeline": "ai->wifidev = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "ai->flags = 1 << FLAG_RADIO_DOWN;"
    },
    {
        "line": 20,
        "fullcodeline": "ai->jobs = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "ai->dev = dev;"
    },
    {
        "line": 29,
        "fullcodeline": "ai->pci = pci;"
    },
    {
        "line": 31,
        "fullcodeline": "ai->tfm = NULL;"
    },
    {
        "line": 32,
        "fullcodeline": "add_airo_dev(ai);"
    },
    {
        "line": 36,
        "fullcodeline": "airo_networks_initialize (ai);"
    },
    {
        "line": 45,
        "fullcodeline": "dev->wireless_handlers = &airo_handler_def;"
    },
    {
        "line": 46,
        "fullcodeline": "ai->wireless_data.spy_data = &ai->spy_data;"
    },
    {
        "line": 47,
        "fullcodeline": "dev->wireless_data = &ai->wireless_data;"
    },
    {
        "line": 48,
        "fullcodeline": "dev->irq = irq;"
    },
    {
        "line": 49,
        "fullcodeline": "dev->base_addr = port;"
    },
    {
        "line": 50,
        "fullcodeline": "dev->priv_flags &= ~IFF_TX_SKB_SHARING;"
    },
    {
        "line": 52,
        "fullcodeline": "SET_NETDEV_DEV(dev, dmdev);"
    },
    {
        "line": 54,
        "fullcodeline": "reset_card (dev, 1);"
    },
    {
        "line": 83,
        "fullcodeline": "strcpy(dev->name, \"eth%d\");"
    },
    {
        "line": 89,
        "fullcodeline": "ai->wifidev = init_wifidev(ai, dev);"
    },
    {
        "line": 93,
        "fullcodeline": "rc = readCapabilityRid(ai, &cap_rid, 1);"
    },
    {
        "line": 99,
        "fullcodeline": "ai->wep_capable = (cap_rid.softCap & cpu_to_le16(0x02)) ? 1 : 0;"
    },
    {
        "line": 100,
        "fullcodeline": "ai->max_wep_idx = (cap_rid.softCap & cpu_to_le16(0x80)) ? 3 : 0;"
    },
    {
        "line": 102,
        "fullcodeline": "airo_print_info(dev->name, \"Firmware version %x.%x.%02d\","
    },
    {
        "line": 127,
        "fullcodeline": "set_bit(FLAG_REGISTERED,&ai->flags);"
    },
    {
        "line": 128,
        "fullcodeline": "airo_print_info(dev->name, \"MAC enabled %pM\", dev->dev_addr);"
    },
    {
        "line": 141,
        "fullcodeline": "unregister_netdev(ai->wifidev);"
    },
    {
        "line": 142,
        "fullcodeline": "free_netdev(ai->wifidev);"
    },
    {
        "line": 144,
        "fullcodeline": "unregister_netdev(dev);"
    },
    {
        "line": 156,
        "fullcodeline": "airo_networks_free(ai);"
    },
    {
        "line": 12,
        "fullcodeline": "if (!dev) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (pci && (pci->device == 0x5000 || pci->device == 0xa504)) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (airo_networks_allocate (ai))"
    },
    {
        "line": 41,
        "fullcodeline": "if (test_bit(FLAG_MPI,&ai->flags))"
    },
    {
        "line": 57,
        "fullcodeline": "if (!is_pcmcia) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (test_bit(FLAG_MPI,&ai->flags)) {"
    },
    {
        "line": 84,
        "fullcodeline": "rc = register_netdev(dev);"
    },
    {
        "line": 90,
        "fullcodeline": "if (!ai->wifidev)"
    },
    {
        "line": 103,
        "fullcodeline": "((le16_to_cpu(cap_rid.softVer) >> 8) & 0xF),"
    },
    {
        "line": 104,
        "fullcodeline": "(le16_to_cpu(cap_rid.softVer) & 0xFF),"
    },
    {
        "line": 105,
        "fullcodeline": "le16_to_cpu(cap_rid.softSubVer));"
    },
    {
        "line": 131,
        "fullcodeline": "if (probe && !test_bit(FLAG_MPI,&ai->flags))"
    },
    {
        "line": 146,
        "fullcodeline": "if (test_bit(FLAG_MPI,&ai->flags) && pci) {"
    },
    {
        "line": 13,
        "fullcodeline": "airo_print_err(\"\", \"Couldn't alloc_etherdev\");"
    },
    {
        "line": 24,
        "fullcodeline": "set_bit(FLAG_MPI, &ai->flags);"
    },
    {
        "line": 42,
        "fullcodeline": "dev->netdev_ops = &mpi_netdev_ops;"
    },
    {
        "line": 86,
        "fullcodeline": "airo_print_err(dev->name, \"Couldn't register_netdev\");"
    },
    {
        "line": 109,
        "fullcodeline": "if (le16_to_cpu(cap_rid.softVer) > 0x530"
    },
    {
        "line": 110,
        "fullcodeline": "|| (le16_to_cpu(cap_rid.softVer) == 0x530"
    },
    {
        "line": 114,
        "fullcodeline": "set_bit(FLAG_WPA_CAPABLE, &ai->flags);"
    },
    {
        "line": 115,
        "fullcodeline": "ai->bssListFirst = RID_WPA_BSSLISTFIRST;"
    },
    {
        "line": 116,
        "fullcodeline": "ai->bssListNext = RID_WPA_BSSLISTNEXT;"
    },
    {
        "line": 117,
        "fullcodeline": "ai->bssListRidLen = sizeof(BSSListRid);"
    },
    {
        "line": 135,
        "fullcodeline": "if (setup_proc_entry(dev, dev->ml_priv) < 0)"
    },
    {
        "line": 147,
        "fullcodeline": "pci_free_consistent(pci, PCI_SHARED_LEN, ai->shared, ai->shared_dma);"
    },
    {
        "line": 148,
        "fullcodeline": "iounmap(ai->pciaux);"
    },
    {
        "line": 149,
        "fullcodeline": "iounmap(ai->pcimem);"
    },
    {
        "line": 150,
        "fullcodeline": "mpi_unmap_card(ai->pci);"
    },
    {
        "line": 154,
        "fullcodeline": "release_region( dev->base_addr, 64 );"
    },
    {
        "line": 44,
        "fullcodeline": "dev->netdev_ops = &airo_netdev_ops;"
    },
    {
        "line": 66,
        "fullcodeline": "if (mpi_map_card(ai, pci)) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (setup_card(ai, dev->dev_addr, 1) != SUCCESS) {"
    },
    {
        "line": 95,
        "fullcodeline": "rc = -EIO;"
    },
    {
        "line": 111,
        "fullcodeline": "&& le16_to_cpu(cap_rid.softSubVer) >= 17)) {"
    },
    {
        "line": 122,
        "fullcodeline": "ai->bssListFirst = RID_BSSLISTFIRST;"
    },
    {
        "line": 123,
        "fullcodeline": "ai->bssListNext = RID_BSSLISTNEXT;"
    },
    {
        "line": 124,
        "fullcodeline": "ai->bssListRidLen = sizeof(BSSListRid) - sizeof(BSSListRidExtra);"
    },
    {
        "line": 132,
        "fullcodeline": "for( i = 0; i < MAX_FIDS; i++ )"
    },
    {
        "line": 58,
        "fullcodeline": "if (!request_region(dev->base_addr, 64, DRV_NAME)) {"
    },
    {
        "line": 60,
        "fullcodeline": "airo_print_err(dev->name, \"Couldn't request region\");"
    },
    {
        "line": 74,
        "fullcodeline": "airo_print_err(dev->name, \"MAC could not be enabled\" );"
    },
    {
        "line": 78,
        "fullcodeline": "} else if (!test_bit(FLAG_MPI,&ai->flags)) {"
    },
    {
        "line": 133,
        "fullcodeline": "ai->fids[i] = transmit_allocate(ai,AIRO_DEF_MTU,i>=MAX_FIDS/2);"
    },
    {
        "line": 59,
        "fullcodeline": "rc = -EBUSY;"
    },
    {
        "line": 75,
        "fullcodeline": "rc = -EIO;"
    },
    {
        "line": 79,
        "fullcodeline": "ai->bap_read = fast_bap_read;"
    },
    {
        "line": 80,
        "fullcodeline": "set_bit(FLAG_FLASHING, &ai->flags);"
    }
]