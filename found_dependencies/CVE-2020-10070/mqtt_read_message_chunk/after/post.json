[
    {
        "line": 15,
        "fullcodeline": "remaining = length - (buf->end - buf->cur);"
    },
    {
        "line": 25,
        "fullcodeline": "len = mqtt_transport_read(client, buf->end, remaining, false);"
    },
    {
        "line": 36,
        "fullcodeline": "client->internal.rx_buf_datalen += len;"
    },
    {
        "line": 37,
        "fullcodeline": "buf->end += len;"
    },
    {
        "line": 8,
        "fullcodeline": "if (length <= (buf->end - buf->cur)) {"
    },
    {
        "line": 18,
        "fullcodeline": "if ((buf->end + remaining > client->rx_buf + client->rx_buf_size) ||"
    },
    {
        "line": 26,
        "fullcodeline": "if (len < 0) {"
    },
    {
        "line": 31,
        "fullcodeline": "if (len == 0) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (len < remaining) {"
    },
    {
        "line": 19,
        "fullcodeline": "(buf->end + remaining < client->rx_buf)) {"
    },
    {
        "line": 20,
        "fullcodeline": "MQTT_ERR(\"[CID %p]: Read would exceed RX buffer bounds.\","
    },
    {
        "line": 27,
        "fullcodeline": "MQTT_TRC(\"[CID %p]: Transport read error: %d\", client, len);"
    },
    {
        "line": 32,
        "fullcodeline": "MQTT_TRC(\"[CID %p]: Connection closed.\", client);"
    },
    {
        "line": 40,
        "fullcodeline": "MQTT_TRC(\"[CID %p]: Message partially received.\", client);"
    },
    {
        "line": 22,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 33,
        "fullcodeline": "return -ENOTCONN;"
    },
    {
        "line": 41,
        "fullcodeline": "return -EAGAIN;"
    }
]