[
    {
        "line": 4,
        "fullcodeline": "unsigned char\t*ucptr, sixteen_bytes [16] ;"
    },
    {
        "line": 11,
        "fullcodeline": "int\t\t\t\tbyte_count = 0, count ;"
    },
    {
        "line": 16,
        "fullcodeline": "va_start (argptr, format) ;"
    },
    {
        "line": 13,
        "fullcodeline": "if (! format)"
    },
    {
        "line": 18,
        "fullcodeline": "while ((c = *format++))"
    },
    {
        "line": 14,
        "fullcodeline": "return psf_ftell (psf) ;"
    },
    {
        "line": 21,
        "fullcodeline": "psf->rwf_endian = SF_ENDIAN_LITTLE ;"
    },
    {
        "line": 25,
        "fullcodeline": "psf->rwf_endian = SF_ENDIAN_BIG ;"
    },
    {
        "line": 30,
        "fullcodeline": "ucptr = (unsigned char*) intptr ;"
    },
    {
        "line": 31,
        "fullcodeline": "byte_count += header_read (psf, ucptr, sizeof (int)) ;"
    },
    {
        "line": 32,
        "fullcodeline": "*intptr = GET_MARKER (ucptr) ;"
    },
    {
        "line": 38,
        "fullcodeline": "byte_count += header_read (psf, sixteen_bytes, sizeof (sixteen_bytes)) ;"
    },
    {
        "line": 44,
        "fullcodeline": "*intptr = intdata ;"
    },
    {
        "line": 49,
        "fullcodeline": "*charptr = 0 ;"
    },
    {
        "line": 50,
        "fullcodeline": "byte_count += header_read (psf, charptr, sizeof (char)) ;"
    },
    {
        "line": 55,
        "fullcodeline": "*shortptr = 0 ;"
    },
    {
        "line": 56,
        "fullcodeline": "ucptr = (unsigned char*) shortptr ;"
    },
    {
        "line": 57,
        "fullcodeline": "byte_count += header_read (psf, ucptr, sizeof (short)) ;"
    },
    {
        "line": 67,
        "fullcodeline": "byte_count += header_read (psf, sixteen_bytes, 3) ;"
    },
    {
        "line": 76,
        "fullcodeline": "*intptr = 0 ;"
    },
    {
        "line": 77,
        "fullcodeline": "ucptr = (unsigned char*) intptr ;"
    },
    {
        "line": 78,
        "fullcodeline": "byte_count += header_read (psf, ucptr, sizeof (int)) ;"
    },
    {
        "line": 88,
        "fullcodeline": "byte_count += header_read (psf, sixteen_bytes, 8) ;"
    },
    {
        "line": 98,
        "fullcodeline": "*floatptr = 0.0 ;"
    },
    {
        "line": 99,
        "fullcodeline": "byte_count += header_read (psf, floatptr, sizeof (float)) ;"
    },
    {
        "line": 108,
        "fullcodeline": "*doubleptr = 0.0 ;"
    },
    {
        "line": 109,
        "fullcodeline": "byte_count += header_read (psf, doubleptr, sizeof (double)) ;"
    },
    {
        "line": 117,
        "fullcodeline": "psf_log_printf (psf, \"Format conversion 's' not implemented yet.\\n\") ;"
    },
    {
        "line": 131,
        "fullcodeline": "count = va_arg (argptr, size_t) ;"
    },
    {
        "line": 138,
        "fullcodeline": "count = va_arg (argptr, size_t) ;"
    },
    {
        "line": 144,
        "fullcodeline": "psf_log_printf (psf, \"Format conversion 'z' not implemented yet.\\n\") ;"
    },
    {
        "line": 157,
        "fullcodeline": "count = va_arg (argptr, size_t) ;"
    },
    {
        "line": 158,
        "fullcodeline": "header_seek (psf, count, SEEK_SET) ;"
    },
    {
        "line": 159,
        "fullcodeline": "byte_count = count ;"
    },
    {
        "line": 164,
        "fullcodeline": "count = va_arg (argptr, size_t) ;"
    },
    {
        "line": 172,
        "fullcodeline": "psf_log_printf (psf, \"*** Invalid format specifier `%c'\\n\", c) ;"
    },
    {
        "line": 173,
        "fullcodeline": "psf->error = SFE_INTERNAL ;"
    },
    {
        "line": 40,
        "fullcodeline": "intdata = 0 ;"
    },
    {
        "line": 58,
        "fullcodeline": "if (psf->rwf_endian == SF_ENDIAN_BIG)"
    },
    {
        "line": 68,
        "fullcodeline": "if (psf->rwf_endian == SF_ENDIAN_BIG)"
    },
    {
        "line": 79,
        "fullcodeline": "if (psf->rwf_endian == SF_ENDIAN_BIG)"
    },
    {
        "line": 89,
        "fullcodeline": "if (psf->rwf_endian == SF_ENDIAN_BIG)"
    },
    {
        "line": 100,
        "fullcodeline": "if (psf->rwf_endian == SF_ENDIAN_BIG)"
    },
    {
        "line": 110,
        "fullcodeline": "if (psf->rwf_endian == SF_ENDIAN_BIG)"
    },
    {
        "line": 132,
        "fullcodeline": "if (count > 0)"
    },
    {
        "line": 139,
        "fullcodeline": "if (count > 0)"
    },
    {
        "line": 41,
        "fullcodeline": "for (k = 0 ; k < 16 ; k++)"
    },
    {
        "line": 42,
        "fullcodeline": "intdata ^= sixteen_bytes [k] << k ;"
    },
    {
        "line": 69,
        "fullcodeline": "*intptr = GET_BE_3BYTE (sixteen_bytes) ;"
    },
    {
        "line": 80,
        "fullcodeline": "*intptr = psf_get_be32 (ucptr, 0) ;"
    },
    {
        "line": 90,
        "fullcodeline": "countdata = psf_get_be64 (sixteen_bytes, 0) ;"
    },
    {
        "line": 133,
        "fullcodeline": "byte_count += header_read (psf, charptr, count) ;"
    },
    {
        "line": 140,
        "fullcodeline": "byte_count += header_gets (psf, charptr, count) ;"
    },
    {
        "line": 166,
        "fullcodeline": "{\theader_seek (psf, count, SEEK_CUR) ;"
    },
    {
        "line": 167,
        "fullcodeline": "byte_count += count ;"
    },
    {
        "line": 59,
        "fullcodeline": "*shortptr = GET_BE_SHORT (ucptr) ;"
    },
    {
        "line": 71,
        "fullcodeline": "*intptr = GET_LE_3BYTE (sixteen_bytes) ;"
    },
    {
        "line": 82,
        "fullcodeline": "*intptr = psf_get_le32 (ucptr, 0) ;"
    },
    {
        "line": 92,
        "fullcodeline": "countdata = psf_get_le64 (sixteen_bytes, 0) ;"
    },
    {
        "line": 101,
        "fullcodeline": "*floatptr = float32_be_read ((unsigned char*) floatptr) ;"
    },
    {
        "line": 111,
        "fullcodeline": "*doubleptr = double64_be_read ((unsigned char*) doubleptr) ;"
    },
    {
        "line": 61,
        "fullcodeline": "*shortptr = GET_LE_SHORT (ucptr) ;"
    },
    {
        "line": 103,
        "fullcodeline": "*floatptr = float32_le_read ((unsigned char*) floatptr) ;"
    },
    {
        "line": 113,
        "fullcodeline": "*doubleptr = double64_le_read ((unsigned char*) doubleptr) ;"
    }
]