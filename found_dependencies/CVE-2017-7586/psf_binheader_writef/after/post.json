[
    {
        "line": 11,
        "fullcodeline": "int\t\t\t\tcount = 0, trunc_8to4 ;"
    },
    {
        "line": 13,
        "fullcodeline": "trunc_8to4 = SF_FALSE ;"
    },
    {
        "line": 15,
        "fullcodeline": "va_start (argptr, format) ;"
    },
    {
        "line": 245,
        "fullcodeline": "va_end (argptr) ;"
    },
    {
        "line": 17,
        "fullcodeline": "while ((c = *format++))"
    },
    {
        "line": 19,
        "fullcodeline": "if (psf->header.indx + 16 >= psf->header.len && psf_bump_header_allocation (psf, 16))"
    },
    {
        "line": 27,
        "fullcodeline": "psf->rwf_endian = SF_ENDIAN_LITTLE ;"
    },
    {
        "line": 31,
        "fullcodeline": "psf->rwf_endian = SF_ENDIAN_BIG ;"
    },
    {
        "line": 35,
        "fullcodeline": "trunc_8to4 = SF_TRUE ;"
    },
    {
        "line": 39,
        "fullcodeline": "trunc_8to4 = SF_FALSE ;"
    },
    {
        "line": 44,
        "fullcodeline": "header_put_marker (psf, data) ;"
    },
    {
        "line": 45,
        "fullcodeline": "count += 4 ;"
    },
    {
        "line": 50,
        "fullcodeline": "header_put_byte (psf, data) ;"
    },
    {
        "line": 51,
        "fullcodeline": "count += 1 ;"
    },
    {
        "line": 62,
        "fullcodeline": "count += 2 ;"
    },
    {
        "line": 73,
        "fullcodeline": "count += 3 ;"
    },
    {
        "line": 84,
        "fullcodeline": "count += 4 ;"
    },
    {
        "line": 88,
        "fullcodeline": "countdata = va_arg (argptr, sf_count_t) ;"
    },
    {
        "line": 116,
        "fullcodeline": "psf->header.indx += 4 ;"
    },
    {
        "line": 117,
        "fullcodeline": "count += 4 ;"
    },
    {
        "line": 126,
        "fullcodeline": "psf->header.indx += 8 ;"
    },
    {
        "line": 127,
        "fullcodeline": "count += 8 ;"
    },
    {
        "line": 133,
        "fullcodeline": "size = strlen (strptr) + 1 ;"
    },
    {
        "line": 134,
        "fullcodeline": "size += (size & 1) ;"
    },
    {
        "line": 143,
        "fullcodeline": "memcpy (&(psf->header.ptr [psf->header.indx]), strptr, size) ;"
    },
    {
        "line": 144,
        "fullcodeline": "psf->header.indx += size ;"
    },
    {
        "line": 145,
        "fullcodeline": "psf->header.ptr [psf->header.indx - 1] = 0 ;"
    },
    {
        "line": 146,
        "fullcodeline": "count += 4 + size ;"
    },
    {
        "line": 155,
        "fullcodeline": "size = strlen (strptr) ;"
    },
    {
        "line": 162,
        "fullcodeline": "memcpy (&(psf->header.ptr [psf->header.indx]), strptr, size + 1) ;"
    },
    {
        "line": 163,
        "fullcodeline": "size += (size & 1) ;"
    },
    {
        "line": 164,
        "fullcodeline": "psf->header.indx += size ;"
    },
    {
        "line": 165,
        "fullcodeline": "psf->header.ptr [psf->header.indx] = 0 ;"
    },
    {
        "line": 166,
        "fullcodeline": "count += 4 + size ;"
    },
    {
        "line": 173,
        "fullcodeline": "size = strlen (strptr) ;"
    },
    {
        "line": 174,
        "fullcodeline": "size = (size & 1) ? size : size + 1 ;"
    },
    {
        "line": 175,
        "fullcodeline": "size = (size > 254) ? 254 : size ;"
    },
    {
        "line": 180,
        "fullcodeline": "header_put_byte (psf, size) ;"
    },
    {
        "line": 181,
        "fullcodeline": "memcpy (&(psf->header.ptr [psf->header.indx]), strptr, size) ;"
    },
    {
        "line": 182,
        "fullcodeline": "psf->header.indx += size ;"
    },
    {
        "line": 183,
        "fullcodeline": "count += 1 + size ;"
    },
    {
        "line": 188,
        "fullcodeline": "size\t= va_arg (argptr, size_t) ;"
    },
    {
        "line": 193,
        "fullcodeline": "memcpy (&(psf->header.ptr [psf->header.indx]), bindata, size) ;"
    },
    {
        "line": 194,
        "fullcodeline": "psf->header.indx += size ;"
    },
    {
        "line": 195,
        "fullcodeline": "count += size ;"
    },
    {
        "line": 199,
        "fullcodeline": "size = va_arg (argptr, size_t) ;"
    },
    {
        "line": 204,
        "fullcodeline": "count += size ;"
    },
    {
        "line": 214,
        "fullcodeline": "memcpy (&(psf->header.ptr [psf->header.indx]), bindata, 16) ;"
    },
    {
        "line": 215,
        "fullcodeline": "psf->header.indx += 16 ;"
    },
    {
        "line": 216,
        "fullcodeline": "count += 16 ;"
    },
    {
        "line": 220,
        "fullcodeline": "size = va_arg (argptr, size_t) ;"
    },
    {
        "line": 225,
        "fullcodeline": "psf->header.indx += size ;"
    },
    {
        "line": 226,
        "fullcodeline": "count += size ;"
    },
    {
        "line": 230,
        "fullcodeline": "size = va_arg (argptr, size_t) ;"
    },
    {
        "line": 235,
        "fullcodeline": "psf->header.indx = size ;"
    },
    {
        "line": 239,
        "fullcodeline": "psf_log_printf (psf, \"*** Invalid format specifier `%c'\\n\", c) ;"
    },
    {
        "line": 240,
        "fullcodeline": "psf->error = SFE_INTERNAL ;"
    },
    {
        "line": 56,
        "fullcodeline": "if (psf->rwf_endian == SF_ENDIAN_BIG)"
    },
    {
        "line": 67,
        "fullcodeline": "if (psf->rwf_endian == SF_ENDIAN_BIG)"
    },
    {
        "line": 78,
        "fullcodeline": "if (psf->rwf_endian == SF_ENDIAN_BIG)"
    },
    {
        "line": 89,
        "fullcodeline": "if (psf->rwf_endian == SF_ENDIAN_BIG && trunc_8to4 == SF_FALSE)"
    },
    {
        "line": 112,
        "fullcodeline": "if (psf->rwf_endian == SF_ENDIAN_BIG)"
    },
    {
        "line": 122,
        "fullcodeline": "if (psf->rwf_endian == SF_ENDIAN_BIG)"
    },
    {
        "line": 136,
        "fullcodeline": "if (psf->header.indx + (sf_count_t) size >= psf->header.len && psf_bump_header_allocation (psf, 16))"
    },
    {
        "line": 139,
        "fullcodeline": "if (psf->rwf_endian == SF_ENDIAN_BIG)"
    },
    {
        "line": 156,
        "fullcodeline": "if (psf->header.indx + (sf_count_t) size > psf->header.len && psf_bump_header_allocation (psf, size))"
    },
    {
        "line": 158,
        "fullcodeline": "if (psf->rwf_endian == SF_ENDIAN_BIG)"
    },
    {
        "line": 177,
        "fullcodeline": "if (psf->header.indx + (sf_count_t) size > psf->header.len && psf_bump_header_allocation (psf, size))"
    },
    {
        "line": 190,
        "fullcodeline": "if (psf->header.indx + (sf_count_t) size > psf->header.len && psf_bump_header_allocation (psf, size))"
    },
    {
        "line": 201,
        "fullcodeline": "if (psf->header.indx + (sf_count_t) size > psf->header.len && psf_bump_header_allocation (psf, size))"
    },
    {
        "line": 222,
        "fullcodeline": "if (psf->header.indx + (sf_count_t) size > psf->header.len && psf_bump_header_allocation (psf, size))"
    },
    {
        "line": 232,
        "fullcodeline": "if ((sf_count_t) size >= psf->header.len && psf_bump_header_allocation (psf, size))"
    },
    {
        "line": 57,
        "fullcodeline": "{\theader_put_be_short (psf, data) ;"
    },
    {
        "line": 68,
        "fullcodeline": "{\theader_put_be_3byte (psf, data) ;"
    },
    {
        "line": 79,
        "fullcodeline": "{\theader_put_be_int (psf, data) ;"
    },
    {
        "line": 90,
        "fullcodeline": "{\theader_put_be_8byte (psf, countdata) ;"
    },
    {
        "line": 91,
        "fullcodeline": "count += 8 ;"
    },
    {
        "line": 113,
        "fullcodeline": "float32_be_write (floatdata, psf->header.ptr + psf->header.indx) ;"
    },
    {
        "line": 123,
        "fullcodeline": "double64_be_write (doubledata, psf->header.ptr + psf->header.indx) ;"
    },
    {
        "line": 140,
        "fullcodeline": "header_put_be_int (psf, size) ;"
    },
    {
        "line": 159,
        "fullcodeline": "header_put_be_int (psf, size) ;"
    },
    {
        "line": 206,
        "fullcodeline": "{\tpsf->header.ptr [psf->header.indx] = 0 ;"
    },
    {
        "line": 208,
        "fullcodeline": "size -- ;"
    },
    {
        "line": 60,
        "fullcodeline": "{\theader_put_le_short (psf, data) ;"
    },
    {
        "line": 71,
        "fullcodeline": "{\theader_put_le_3byte (psf, data) ;"
    },
    {
        "line": 82,
        "fullcodeline": "{\theader_put_le_int (psf, data) ;"
    },
    {
        "line": 115,
        "fullcodeline": "float32_le_write (floatdata, psf->header.ptr + psf->header.indx) ;"
    },
    {
        "line": 125,
        "fullcodeline": "double64_le_write (doubledata, psf->header.ptr + psf->header.indx) ;"
    },
    {
        "line": 142,
        "fullcodeline": "header_put_le_int (psf, size) ;"
    },
    {
        "line": 161,
        "fullcodeline": "header_put_le_int (psf, size) ;"
    },
    {
        "line": 93,
        "fullcodeline": "else if (psf->rwf_endian == SF_ENDIAN_LITTLE && trunc_8to4 == SF_FALSE)"
    },
    {
        "line": 94,
        "fullcodeline": "{\theader_put_le_8byte (psf, countdata) ;"
    },
    {
        "line": 95,
        "fullcodeline": "count += 8 ;"
    },
    {
        "line": 97,
        "fullcodeline": "else if (psf->rwf_endian == SF_ENDIAN_BIG && trunc_8to4 == SF_TRUE)"
    },
    {
        "line": 98,
        "fullcodeline": "{\tlongdata = countdata & 0xFFFFFFFF ;"
    },
    {
        "line": 99,
        "fullcodeline": "header_put_be_int (psf, longdata) ;"
    },
    {
        "line": 100,
        "fullcodeline": "count += 4 ;"
    },
    {
        "line": 102,
        "fullcodeline": "else if (psf->rwf_endian == SF_ENDIAN_LITTLE && trunc_8to4 == SF_TRUE)"
    },
    {
        "line": 103,
        "fullcodeline": "{\tlongdata = countdata & 0xFFFFFFFF ;"
    },
    {
        "line": 104,
        "fullcodeline": "header_put_le_int (psf, longdata) ;"
    },
    {
        "line": 105,
        "fullcodeline": "count += 4 ;"
    }
]