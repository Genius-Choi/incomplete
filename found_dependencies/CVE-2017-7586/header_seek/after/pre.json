[
    {
        "line": 41,
        "fullcodeline": "psf->header.end += psf_fread (psf->header.ptr + psf->header.end, 1, position - (psf->header.end - psf->header.indx), psf) ;"
    },
    {
        "line": 5,
        "fullcodeline": "if (psf->header.indx + position >= psf->header.len)"
    },
    {
        "line": 7,
        "fullcodeline": "if (position > psf->header.len)"
    },
    {
        "line": 12,
        "fullcodeline": "if (position > psf->header.end)"
    },
    {
        "line": 18,
        "fullcodeline": "if (psf->header.indx + position >= psf->header.len)"
    },
    {
        "line": 24,
        "fullcodeline": "if (psf->header.indx >= psf->header.len)"
    },
    {
        "line": 29,
        "fullcodeline": "if (psf->header.indx + position <= psf->header.end)"
    },
    {
        "line": 6,
        "fullcodeline": "psf_bump_header_allocation (psf, position) ;"
    },
    {
        "line": 9,
        "fullcodeline": "psf_fseek (psf, position, whence) ;"
    },
    {
        "line": 19,
        "fullcodeline": "psf_bump_header_allocation (psf, position) ;"
    },
    {
        "line": 37,
        "fullcodeline": "psf_fseek (psf, position, SEEK_CUR) ;"
    },
    {
        "line": 13,
        "fullcodeline": "psf->header.end += psf_fread (psf->header.ptr + psf->header.end, 1, position - psf->header.end, psf) ;"
    }
]