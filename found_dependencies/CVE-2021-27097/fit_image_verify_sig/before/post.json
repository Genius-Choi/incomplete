[
    {
        "line": 6,
        "fullcodeline": "char *err_msg = \"\";"
    },
    {
        "line": 7,
        "fullcodeline": "int verified = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "fdt_for_each_subnode(noffset, fit, image_noffset) {"
    },
    {
        "line": 36,
        "fullcodeline": "printf(\" error!\\n%s for '%s' hash node in '%s' image node\\n\","
    },
    {
        "line": 12,
        "fullcodeline": "const char *name = fit_get_name(fit, noffset, NULL);"
    },
    {
        "line": 28,
        "fullcodeline": "if (noffset == -FDT_ERR_TRUNCATED || noffset == -FDT_ERR_BADSTRUCTURE) {"
    },
    {
        "line": 33,
        "fullcodeline": "return verified ? 0 : -EPERM;"
    },
    {
        "line": 37,
        "fullcodeline": "err_msg, fit_get_name(fit, noffset, NULL),"
    },
    {
        "line": 38,
        "fullcodeline": "fit_get_name(fit, image_noffset, NULL));"
    },
    {
        "line": 39,
        "fullcodeline": "return -1;"
    },
    {
        "line": 14,
        "fullcodeline": "if (!strncmp(name, FIT_SIG_NODENAME,"
    },
    {
        "line": 29,
        "fullcodeline": "err_msg = \"Corrupted or truncated tree\";"
    },
    {
        "line": 16,
        "fullcodeline": "ret = fit_image_check_sig(fit, noffset, data,"
    },
    {
        "line": 15,
        "fullcodeline": "strlen(FIT_SIG_NODENAME))) {"
    },
    {
        "line": 17,
        "fullcodeline": "size, -1, &err_msg);"
    },
    {
        "line": 19,
        "fullcodeline": "puts(\"- \");"
    },
    {
        "line": 21,
        "fullcodeline": "puts(\"+ \");"
    },
    {
        "line": 22,
        "fullcodeline": "verified = 1;"
    }
]