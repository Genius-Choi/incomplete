[
    {
        "line": 23,
        "fullcodeline": "fit = map_sysmem(addr, 0);"
    },
    {
        "line": 24,
        "fullcodeline": "fit_uname = fit_unamep ? *fit_unamep : NULL;"
    },
    {
        "line": 25,
        "fullcodeline": "fit_uname_config = fit_uname_configp ? *fit_uname_configp : NULL;"
    },
    {
        "line": 26,
        "fullcodeline": "fit_base_uname_config = NULL;"
    },
    {
        "line": 27,
        "fullcodeline": "prop_name = fit_get_image_type_property(image_type);"
    },
    {
        "line": 28,
        "fullcodeline": "printf(\"## Loading %s from FIT Image at %08lx ...\\n\", prop_name, addr);"
    },
    {
        "line": 30,
        "fullcodeline": "bootstage_mark(bootstage_id + BOOTSTAGE_SUB_FORMAT);"
    },
    {
        "line": 90,
        "fullcodeline": "printf(\"   Trying '%s' %s subimage\\n\", fit_uname, prop_name);"
    },
    {
        "line": 92,
        "fullcodeline": "ret = fit_image_select(fit, noffset, images->verify);"
    },
    {
        "line": 108,
        "fullcodeline": "fit_image_get_arch(fit, noffset, &os_arch);"
    },
    {
        "line": 113,
        "fullcodeline": "type_ok = fit_image_check_type(fit, noffset, image_type) ||"
    },
    {
        "line": 118,
        "fullcodeline": "os_ok = image_type == IH_TYPE_FLATDT ||"
    },
    {
        "line": 165,
        "fullcodeline": "len = (ulong)size;"
    },
    {
        "line": 169,
        "fullcodeline": "data = map_to_sysmem(buf);"
    },
    {
        "line": 170,
        "fullcodeline": "load = data;"
    },
    {
        "line": 203,
        "fullcodeline": "comp = IH_COMP_NONE;"
    },
    {
        "line": 204,
        "fullcodeline": "loadbuf = buf;"
    },
    {
        "line": 31,
        "fullcodeline": "if (!fit_check_format(fit)) {"
    },
    {
        "line": 36,
        "fullcodeline": "bootstage_mark(bootstage_id + BOOTSTAGE_SUB_FORMAT_OK);"
    },
    {
        "line": 84,
        "fullcodeline": "if (noffset < 0) {"
    },
    {
        "line": 141,
        "fullcodeline": "bootstage_mark(bootstage_id + BOOTSTAGE_SUB_CHECK_ALL_OK);"
    },
    {
        "line": 144,
        "fullcodeline": "if (fit_image_get_data_and_size(fit, noffset,"
    },
    {
        "line": 152,
        "fullcodeline": "if (IS_ENABLED(CONFIG_FIT_CIPHER) && IMAGE_ENABLE_DECRYPT) {"
    },
    {
        "line": 167,
        "fullcodeline": "bootstage_mark(bootstage_id + BOOTSTAGE_SUB_GET_DATA_OK);"
    },
    {
        "line": 171,
        "fullcodeline": "if (load_op == FIT_LOAD_IGNORED) {"
    },
    {
        "line": 32,
        "fullcodeline": "printf(\"Bad FIT %s image format!\\n\", prop_name);"
    },
    {
        "line": 33,
        "fullcodeline": "bootstage_error(bootstage_id + BOOTSTAGE_SUB_FORMAT);"
    },
    {
        "line": 40,
        "fullcodeline": "noffset = fit_image_get_node(fit, fit_uname);"
    },
    {
        "line": 99,
        "fullcodeline": "if (!host_build() && IS_ENABLED(CONFIG_SANDBOX)) {"
    },
    {
        "line": 115,
        "fullcodeline": "(image_type == IH_TYPE_KERNEL &&"
    },
    {
        "line": 124,
        "fullcodeline": "fit_image_check_os(fit, noffset, IH_OS_VXWORKS);"
    },
    {
        "line": 131,
        "fullcodeline": "if ((!type_ok || !os_ok) && image_type != IH_TYPE_LOADABLE) {"
    },
    {
        "line": 132,
        "fullcodeline": "fit_image_get_os(fit, noffset, &os);"
    },
    {
        "line": 162,
        "fullcodeline": "if (!host_build() && IS_ENABLED(CONFIG_FIT_IMAGE_POST_PROCESS))"
    },
    {
        "line": 163,
        "fullcodeline": "board_fit_image_post_process(&buf, &size);"
    },
    {
        "line": 206,
        "fullcodeline": "if (!fit_image_get_comp(fit, noffset, &comp) &&"
    },
    {
        "line": 208,
        "fullcodeline": "!(image_type == IH_TYPE_KERNEL ||"
    },
    {
        "line": 211,
        "fullcodeline": "ulong max_decomp_len = len * 20;"
    },
    {
        "line": 224,
        "fullcodeline": "len = load_end - load;"
    },
    {
        "line": 230,
        "fullcodeline": "if (image_type == IH_TYPE_RAMDISK && comp != IH_COMP_NONE)"
    },
    {
        "line": 235,
        "fullcodeline": "if (image_type == IH_TYPE_FLATDT && fdt_check_header(loadbuf)) {"
    },
    {
        "line": 34,
        "fullcodeline": "return -ENOEXEC;"
    },
    {
        "line": 39,
        "fullcodeline": "bootstage_mark(bootstage_id + BOOTSTAGE_SUB_UNIT_NAME);"
    },
    {
        "line": 61,
        "fullcodeline": "fit_base_uname_config = fdt_get_name(fit, cfg_noffset, NULL);"
    },
    {
        "line": 62,
        "fullcodeline": "printf(\"   Using '%s' configuration\\n\", fit_base_uname_config);"
    },
    {
        "line": 78,
        "fullcodeline": "bootstage_mark(BOOTSTAGE_ID_FIT_CONFIG);"
    },
    {
        "line": 80,
        "fullcodeline": "noffset = fit_conf_get_prop_node(fit, cfg_noffset,"
    },
    {
        "line": 82,
        "fullcodeline": "fit_uname = fit_get_name(fit, noffset, NULL);"
    },
    {
        "line": 86,
        "fullcodeline": "bootstage_error(bootstage_id + BOOTSTAGE_SUB_SUBNODE);"
    },
    {
        "line": 87,
        "fullcodeline": "return -ENOENT;"
    },
    {
        "line": 114,
        "fullcodeline": "fit_image_check_type(fit, noffset, IH_TYPE_FIRMWARE) ||"
    },
    {
        "line": 116,
        "fullcodeline": "fit_image_check_type(fit, noffset, IH_TYPE_KERNEL_NOLOAD));"
    },
    {
        "line": 123,
        "fullcodeline": "fit_image_check_os(fit, noffset, IH_OS_EFI) ||"
    },
    {
        "line": 134,
        "fullcodeline": "genimg_get_os_name(os),"
    },
    {
        "line": 135,
        "fullcodeline": "genimg_get_arch_name(arch),"
    },
    {
        "line": 136,
        "fullcodeline": "genimg_get_type_name(image_type));"
    },
    {
        "line": 138,
        "fullcodeline": "return -EIO;"
    },
    {
        "line": 147,
        "fullcodeline": "bootstage_error(bootstage_id + BOOTSTAGE_SUB_GET_DATA);"
    },
    {
        "line": 148,
        "fullcodeline": "return -ENOENT;"
    },
    {
        "line": 154,
        "fullcodeline": "if (fit_image_uncipher(fit, noffset, &buf, &size)) {"
    },
    {
        "line": 207,
        "fullcodeline": "comp != IH_COMP_NONE &&"
    },
    {
        "line": 212,
        "fullcodeline": "if (load == data) {"
    },
    {
        "line": 218,
        "fullcodeline": "if (image_decomp(comp, load, data, image_type,"
    },
    {
        "line": 237,
        "fullcodeline": "return -ENOEXEC;"
    },
    {
        "line": 48,
        "fullcodeline": "if (IMAGE_ENABLE_BEST_MATCH && !fit_uname_config) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (cfg_noffset < 0) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (image_type == IH_TYPE_KERNEL)"
    },
    {
        "line": 67,
        "fullcodeline": "if (FIT_IMAGE_ENABLE_VERIFY && images->verify) {"
    },
    {
        "line": 100,
        "fullcodeline": "if (!fit_image_check_target_arch(fit, noffset)) {"
    },
    {
        "line": 122,
        "fullcodeline": "fit_image_check_os(fit, noffset, IH_OS_OPENRTOS) ||"
    },
    {
        "line": 173,
        "fullcodeline": "} else if (fit_image_get_load(fit, noffset, &load)) {"
    },
    {
        "line": 210,
        "fullcodeline": "image_type == IH_TYPE_RAMDISK)) {"
    },
    {
        "line": 213,
        "fullcodeline": "loadbuf = malloc(max_decomp_len);"
    },
    {
        "line": 214,
        "fullcodeline": "load = map_to_sysmem(loadbuf);"
    },
    {
        "line": 225,
        "fullcodeline": "} else if (load != data) {"
    },
    {
        "line": 49,
        "fullcodeline": "cfg_noffset = fit_conf_find_compat(fit, gd_fdt_blob());"
    },
    {
        "line": 103,
        "fullcodeline": "return -ENOEXEC;"
    },
    {
        "line": 121,
        "fullcodeline": "fit_image_check_os(fit, noffset, IH_OS_U_BOOT) ||"
    },
    {
        "line": 156,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 209,
        "fullcodeline": "image_type == IH_TYPE_KERNEL_NOLOAD ||"
    },
    {
        "line": 216,
        "fullcodeline": "loadbuf = map_sysmem(load, max_decomp_len);"
    },
    {
        "line": 222,
        "fullcodeline": "return -ENOEXEC;"
    },
    {
        "line": 226,
        "fullcodeline": "loadbuf = map_sysmem(load, len);"
    },
    {
        "line": 227,
        "fullcodeline": "memcpy(loadbuf, buf, len);"
    },
    {
        "line": 51,
        "fullcodeline": "cfg_noffset = fit_conf_get_node(fit,"
    },
    {
        "line": 58,
        "fullcodeline": "return -ENOENT;"
    },
    {
        "line": 69,
        "fullcodeline": "if (fit_config_verify(fit, cfg_noffset)) {"
    },
    {
        "line": 120,
        "fullcodeline": "fit_image_check_os(fit, noffset, IH_OS_LINUX) ||"
    },
    {
        "line": 174,
        "fullcodeline": "if (load_op == FIT_LOAD_REQUIRED) {"
    },
    {
        "line": 119,
        "fullcodeline": "image_type == IH_TYPE_FPGA ||"
    },
    {
        "line": 180,
        "fullcodeline": "} else if (load_op != FIT_LOAD_OPTIONAL_NON_ZERO || load) {"
    },
    {
        "line": 73,
        "fullcodeline": "return -EACCES;"
    },
    {
        "line": 178,
        "fullcodeline": "return -EBADF;"
    },
    {
        "line": 187,
        "fullcodeline": "image_start = addr;"
    },
    {
        "line": 188,
        "fullcodeline": "image_end = addr + fit_get_size(fit);"
    },
    {
        "line": 190,
        "fullcodeline": "load_end = load + len;"
    },
    {
        "line": 197,
        "fullcodeline": "printf(\"   Loading %s from 0x%08lx to 0x%08lx\\n\","
    },
    {
        "line": 200,
        "fullcodeline": "load = data;\t/* No load address specified */"
    },
    {
        "line": 191,
        "fullcodeline": "if (image_type != IH_TYPE_KERNEL &&"
    },
    {
        "line": 192,
        "fullcodeline": "load < image_end && load_end > image_start) {"
    },
    {
        "line": 194,
        "fullcodeline": "return -EXDEV;"
    }
]