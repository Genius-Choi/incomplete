[
    {
        "line": 5,
        "fullcodeline": "u32 *buffer_p = (u32 *)*buffer;"
    },
    {
        "line": 6,
        "fullcodeline": "u32 *loadable = buffer_p;"
    },
    {
        "line": 7,
        "fullcodeline": "size_t buffer_size = *buffer_bsize;"
    },
    {
        "line": 10,
        "fullcodeline": "const char *fpga_node_name = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "const char *uname = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "ret = request_firmware_into_buf(dev,"
    },
    {
        "line": 28,
        "fullcodeline": "fit_size = fdt_totalsize(buffer_p);"
    },
    {
        "line": 37,
        "fullcodeline": "ret = request_firmware_into_buf(dev,"
    },
    {
        "line": 43,
        "fullcodeline": "ret = fit_check_format(buffer_p);"
    },
    {
        "line": 49,
        "fullcodeline": "confs_noffset = fdt_path_offset(buffer_p, FIT_CONFS_PATH);"
    },
    {
        "line": 50,
        "fullcodeline": "images_noffset = fdt_path_offset(buffer_p, FIT_IMAGES_PATH);"
    },
    {
        "line": 57,
        "fullcodeline": "confs_noffset = fit_conf_get_node(buffer_p, NULL);"
    },
    {
        "line": 63,
        "fullcodeline": "count = fit_conf_get_prop_node_count(buffer_p, confs_noffset,"
    },
    {
        "line": 69,
        "fullcodeline": "debug(\"FPGA: FPGA node count: %d\\n\", count);"
    },
    {
        "line": 103,
        "fullcodeline": "images_noffset = fit_image_get_node(buffer_p, fpga_node_name);"
    },
    {
        "line": 127,
        "fullcodeline": "ret = fit_image_get_data_size(buffer_p, images_noffset, &rbf_size);"
    },
    {
        "line": 152,
        "fullcodeline": "debug(\"FPGA: External data: offset = 0x%x, size = 0x%x.\\n\","
    },
    {
        "line": 155,
        "fullcodeline": "fpga_loadfs->remaining = rbf_size;"
    },
    {
        "line": 170,
        "fullcodeline": "fpga_loadfs->offset = rbf_offset;"
    },
    {
        "line": 172,
        "fullcodeline": "ret = request_firmware_into_buf(dev,"
    },
    {
        "line": 18,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (image_get_magic((struct image_header *)buffer_p) != FDT_MAGIC) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (fit_size > buffer_size) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 58,
        "fullcodeline": "if (confs_noffset < 0) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (count < 0) {"
    },
    {
        "line": 71,
        "fullcodeline": "for (i = 0; i < count; i++) {"
    },
    {
        "line": 98,
        "fullcodeline": "if (!fpga_node_name) {"
    },
    {
        "line": 104,
        "fullcodeline": "if (images_noffset < 0) {"
    },
    {
        "line": 128,
        "fullcodeline": "if (ret < 0) {"
    },
    {
        "line": 133,
        "fullcodeline": "if (gd->ram_size < rbf_size) {"
    },
    {
        "line": 162,
        "fullcodeline": "if (rbf_size <= buffer_size) {"
    },
    {
        "line": 16,
        "fullcodeline": "buffer_p, sizeof(struct image_header),"
    },
    {
        "line": 19,
        "fullcodeline": "debug(\"FPGA: Failed to read image header from flash.\\n\");"
    },
    {
        "line": 51,
        "fullcodeline": "if (confs_noffset < 0 || images_noffset < 0) {"
    },
    {
        "line": 72,
        "fullcodeline": "images_noffset = fit_conf_get_prop_node_index(buffer_p,"
    },
    {
        "line": 75,
        "fullcodeline": "uname = fit_get_name(buffer_p, images_noffset, NULL);"
    },
    {
        "line": 110,
        "fullcodeline": "if (!fit_image_get_data_position(buffer_p, images_noffset,"
    },
    {
        "line": 164,
        "fullcodeline": "buffer_size = rbf_size;"
    },
    {
        "line": 20,
        "fullcodeline": "return -ENOENT;"
    },
    {
        "line": 25,
        "fullcodeline": "return -EBADF;"
    },
    {
        "line": 33,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 46,
        "fullcodeline": "return -EBADF;"
    },
    {
        "line": 53,
        "fullcodeline": "return -ENOENT;"
    },
    {
        "line": 60,
        "fullcodeline": "return -ENOENT;"
    },
    {
        "line": 107,
        "fullcodeline": "return -ENOENT;"
    },
    {
        "line": 130,
        "fullcodeline": "return -ENOENT;"
    },
    {
        "line": 136,
        "fullcodeline": "ret = fit_image_get_load(buffer_p, images_noffset,"
    },
    {
        "line": 149,
        "fullcodeline": "buffer_size = rbf_size;"
    },
    {
        "line": 178,
        "fullcodeline": "return -ENOENT;"
    },
    {
        "line": 77,
        "fullcodeline": "debug(\"FPGA: %s\\n\", uname);"
    },
    {
        "line": 113,
        "fullcodeline": "} else if (!fit_image_get_data_offset(buffer_p, images_noffset,"
    },
    {
        "line": 120,
        "fullcodeline": "rbf_offset += ((fdt_totalsize(buffer_p) + 3) & ~3);"
    },
    {
        "line": 139,
        "fullcodeline": "buffer_p = (u32 *)DEFAULT_DDR_LOAD_ADDRESS;"
    },
    {
        "line": 79,
        "fullcodeline": "if (strstr(uname, \"fpga-periph\") &&"
    },
    {
        "line": 80,
        "fullcodeline": "(!is_fpgamgr_early_user_mode() ||"
    },
    {
        "line": 82,
        "fullcodeline": "fpga_node_name = uname;"
    },
    {
        "line": 144,
        "fullcodeline": "buffer_p = (u32 *)*loadable;"
    },
    {
        "line": 124,
        "fullcodeline": "return -ENOENT;"
    },
    {
        "line": 86,
        "fullcodeline": "} else if (strstr(uname, \"fpga-core\") &&"
    },
    {
        "line": 87,
        "fullcodeline": "(is_fpgamgr_early_user_mode() &&"
    },
    {
        "line": 89,
        "fullcodeline": "fpga_node_name = uname;"
    },
    {
        "line": 88,
        "fullcodeline": "!is_fpgamgr_user_mode())) {"
    }
]