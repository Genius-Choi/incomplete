[
    {
        "line": 3,
        "fullcodeline": "int ndepth = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "int best_match_offset = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "int best_match_pos = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "confs_noffset = fdt_path_offset(fit, FIT_CONFS_PATH);"
    },
    {
        "line": 11,
        "fullcodeline": "images_noffset = fdt_path_offset(fit, FIT_IMAGES_PATH);"
    },
    {
        "line": 17,
        "fullcodeline": "fdt_compat = fdt_getprop(fdt, 0, \"compatible\", &fdt_compat_len);"
    },
    {
        "line": 12,
        "fullcodeline": "if (confs_noffset < 0 || images_noffset < 0) {"
    },
    {
        "line": 18,
        "fullcodeline": "if (!fdt_compat) {"
    },
    {
        "line": 28,
        "fullcodeline": "noffset = fdt_next_node(fit, noffset, &ndepth)) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (!best_match_offset) {"
    },
    {
        "line": 13,
        "fullcodeline": "debug(\"Can't find configurations or images nodes.\\n\");"
    },
    {
        "line": 26,
        "fullcodeline": "for (noffset = fdt_next_node(fit, confs_noffset, &ndepth);"
    },
    {
        "line": 27,
        "fullcodeline": "(noffset >= 0) && (ndepth > 0);"
    },
    {
        "line": 74,
        "fullcodeline": "len = fdt_compat_len;"
    },
    {
        "line": 75,
        "fullcodeline": "cur_fdt_compat = fdt_compat;"
    },
    {
        "line": 14,
        "fullcodeline": "return -1;"
    },
    {
        "line": 20,
        "fullcodeline": "return -1;"
    },
    {
        "line": 37,
        "fullcodeline": "if (ndepth > 1)"
    },
    {
        "line": 41,
        "fullcodeline": "if (fdt_getprop(fit, noffset, \"compatible\", NULL)) {"
    },
    {
        "line": 81,
        "fullcodeline": "(!best_match_offset || best_match_pos > i); i++) {"
    },
    {
        "line": 96,
        "fullcodeline": "return -1;"
    },
    {
        "line": 42,
        "fullcodeline": "fdt = fit;\t\t  /* search in FIT image */"
    },
    {
        "line": 43,
        "fullcodeline": "compat_noffset = noffset; /* search under config node */"
    },
    {
        "line": 80,
        "fullcodeline": "for (i = 0; len > 0 &&"
    },
    {
        "line": 82,
        "fullcodeline": "int cur_len = strlen(cur_fdt_compat) + 1;"
    },
    {
        "line": 90,
        "fullcodeline": "len -= cur_len;"
    },
    {
        "line": 91,
        "fullcodeline": "cur_fdt_compat += cur_len;"
    },
    {
        "line": 45,
        "fullcodeline": "kfdt_name = fdt_getprop(fit, noffset, \"fdt\", &len);"
    },
    {
        "line": 50,
        "fullcodeline": "kfdt_noffset = fdt_subnode_offset(fit, images_noffset,"
    },
    {
        "line": 71,
        "fullcodeline": "compat_noffset = 0;  /* search kFDT under root node */"
    },
    {
        "line": 46,
        "fullcodeline": "if (!kfdt_name) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (kfdt_noffset < 0) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (fit_image_get_data(fit, kfdt_noffset, &fdt, &sz)) {"
    },
    {
        "line": 84,
        "fullcodeline": "if (!fdt_node_check_compatible(fdt, compat_noffset,"
    },
    {
        "line": 86,
        "fullcodeline": "best_match_offset = noffset;"
    },
    {
        "line": 87,
        "fullcodeline": "best_match_pos = i;"
    },
    {
        "line": 58,
        "fullcodeline": "if (!fit_image_check_comp(fit, kfdt_noffset,"
    }
]