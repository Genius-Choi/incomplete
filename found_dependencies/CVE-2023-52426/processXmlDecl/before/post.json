[
    {
        "line": 3,
        "fullcodeline": "const char *encodingName = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "const XML_Char *storedEncName = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "const ENCODING *newEncoding = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "const char *version = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "const char *versionend = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "const XML_Char *storedversion = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "int standalone = -1;"
    },
    {
        "line": 19,
        "fullcodeline": "if (! (parser->m_ns ? XmlParseXmlDeclNS : XmlParseXmlDecl)("
    },
    {
        "line": 27,
        "fullcodeline": "if (! isGeneralTextEntity && standalone == 1) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (parser->m_protocolEncodingName == NULL) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (storedEncName || storedversion)"
    },
    {
        "line": 28,
        "fullcodeline": "parser->m_dtd->standalone = XML_TRUE;"
    },
    {
        "line": 51,
        "fullcodeline": "parser->m_xmlDeclHandler(parser->m_handlerArg, storedversion, storedEncName,"
    },
    {
        "line": 87,
        "fullcodeline": "poolClear(&parser->m_temp2Pool);"
    },
    {
        "line": 36,
        "fullcodeline": "if (encodingName != NULL) {"
    },
    {
        "line": 37,
        "fullcodeline": "storedEncName = poolStoreString("
    },
    {
        "line": 42,
        "fullcodeline": "poolFinish(&parser->m_temp2Pool);"
    },
    {
        "line": 45,
        "fullcodeline": "storedversion"
    },
    {
        "line": 68,
        "fullcodeline": "parser->m_encoding = newEncoding;"
    },
    {
        "line": 40,
        "fullcodeline": "if (! storedEncName)"
    },
    {
        "line": 46,
        "fullcodeline": "= poolStoreString(&parser->m_temp2Pool, parser->m_encoding, version,"
    },
    {
        "line": 48,
        "fullcodeline": "if (! storedversion)"
    },
    {
        "line": 54,
        "fullcodeline": "reportDefault(parser, parser->m_encoding, s, next);"
    },
    {
        "line": 62,
        "fullcodeline": "if (newEncoding->minBytesPerChar != parser->m_encoding->minBytesPerChar"
    },
    {
        "line": 39,
        "fullcodeline": "encodingName + XmlNameLength(parser->m_encoding, encodingName));"
    },
    {
        "line": 47,
        "fullcodeline": "versionend - parser->m_encoding->minBytesPerChar);"
    },
    {
        "line": 63,
        "fullcodeline": "|| (newEncoding->minBytesPerChar == 2"
    },
    {
        "line": 65,
        "fullcodeline": "parser->m_eventPtr = encodingName;"
    },
    {
        "line": 64,
        "fullcodeline": "&& newEncoding != parser->m_encoding)) {"
    },
    {
        "line": 78,
        "fullcodeline": "result = handleUnknownEncoding(parser, storedEncName);"
    },
    {
        "line": 79,
        "fullcodeline": "poolClear(&parser->m_temp2Pool);"
    },
    {
        "line": 71,
        "fullcodeline": "if (! storedEncName) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (result == XML_ERROR_UNKNOWN_ENCODING)"
    },
    {
        "line": 72,
        "fullcodeline": "storedEncName = poolStoreString("
    },
    {
        "line": 81,
        "fullcodeline": "parser->m_eventPtr = encodingName;"
    },
    {
        "line": 75,
        "fullcodeline": "if (! storedEncName)"
    },
    {
        "line": 74,
        "fullcodeline": "encodingName + XmlNameLength(parser->m_encoding, encodingName));"
    }
]