[
    {
        "line": 3,
        "fullcodeline": "const char *next = *startPtr; /* in case of XML_TOK_NONE or XML_TOK_PARTIAL */"
    },
    {
        "line": 5,
        "fullcodeline": "const char *s = *startPtr;"
    },
    {
        "line": 28,
        "fullcodeline": "*eventPP = s;"
    },
    {
        "line": 29,
        "fullcodeline": "*startPtr = NULL;"
    },
    {
        "line": 30,
        "fullcodeline": "tok = XmlIgnoreSectionTok(enc, s, end, &next);"
    },
    {
        "line": 38,
        "fullcodeline": "*eventEndPP = next;"
    },
    {
        "line": 8,
        "fullcodeline": "if (enc == parser->m_encoding) {"
    },
    {
        "line": 9,
        "fullcodeline": "eventPP = &parser->m_eventPtr;"
    },
    {
        "line": 11,
        "fullcodeline": "eventEndPP = &parser->m_eventEndPtr;"
    },
    {
        "line": 43,
        "fullcodeline": "*startPtr = next;"
    },
    {
        "line": 44,
        "fullcodeline": "*nextPtr = next;"
    },
    {
        "line": 24,
        "fullcodeline": "eventPP = &(parser->m_openInternalEntities->internalEventPtr);"
    },
    {
        "line": 25,
        "fullcodeline": "eventEndPP = &(parser->m_openInternalEntities->internalEventEndPtr);"
    },
    {
        "line": 45,
        "fullcodeline": "if (parser->m_parsingStatus.parsing == XML_FINISHED)"
    },
    {
        "line": 42,
        "fullcodeline": "reportDefault(parser, enc, s, next);"
    }
]