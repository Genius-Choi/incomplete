[
    {
        "line": 4,
        "fullcodeline": "DTD *const dtd = parser->m_dtd; /* save one level of indirection */"
    },
    {
        "line": 5,
        "fullcodeline": "STRING_POOL *pool = &(dtd->entityValuePool);"
    },
    {
        "line": 6,
        "fullcodeline": "enum XML_Error result = XML_ERROR_NONE;"
    },
    {
        "line": 11,
        "fullcodeline": "UNUSED_P(account);"
    },
    {
        "line": 16,
        "fullcodeline": "if (! pool->blocks) {"
    },
    {
        "line": 22,
        "fullcodeline": "const char *next"
    },
    {
        "line": 177,
        "fullcodeline": "entityTextPtr = next;"
    },
    {
        "line": 17,
        "fullcodeline": "if (! poolGrow(pool))"
    },
    {
        "line": 24,
        "fullcodeline": "int tok = XmlEntityValueTok(enc, entityTextPtr, entityTextEnd, &next);"
    },
    {
        "line": 103,
        "fullcodeline": "result = XML_ERROR_PARAM_ENTITY_REF;"
    },
    {
        "line": 106,
        "fullcodeline": "result = XML_ERROR_NONE;"
    },
    {
        "line": 116,
        "fullcodeline": "next = entityTextPtr + enc->minBytesPerChar;"
    },
    {
        "line": 156,
        "fullcodeline": "result = XML_ERROR_INVALID_TOKEN;"
    },
    {
        "line": 161,
        "fullcodeline": "result = XML_ERROR_INVALID_TOKEN;"
    },
    {
        "line": 173,
        "fullcodeline": "result = XML_ERROR_UNEXPECTED_STATE;"
    },
    {
        "line": 119,
        "fullcodeline": "if (pool->end == pool->ptr && ! poolGrow(pool)) {"
    },
    {
        "line": 126,
        "fullcodeline": "XML_Char buf[XML_ENCODE_MAX];"
    },
    {
        "line": 128,
        "fullcodeline": "int n = XmlCharRefNumber(enc, entityTextPtr);"
    },
    {
        "line": 135,
        "fullcodeline": "n = XmlEncode(n, (ICHAR *)buf);"
    },
    {
        "line": 110,
        "fullcodeline": "if (! poolAppend(pool, enc, entityTextPtr, next)) {"
    },
    {
        "line": 111,
        "fullcodeline": "result = XML_ERROR_NO_MEMORY;"
    },
    {
        "line": 120,
        "fullcodeline": "result = XML_ERROR_NO_MEMORY;"
    },
    {
        "line": 123,
        "fullcodeline": "*(pool->ptr)++ = 0xA;"
    },
    {
        "line": 129,
        "fullcodeline": "if (n < 0) {"
    },
    {
        "line": 145,
        "fullcodeline": "for (i = 0; i < n; i++) {"
    },
    {
        "line": 132,
        "fullcodeline": "result = XML_ERROR_BAD_CHAR_REF;"
    },
    {
        "line": 146,
        "fullcodeline": "if (pool->end == pool->ptr && ! poolGrow(pool)) {"
    },
    {
        "line": 147,
        "fullcodeline": "result = XML_ERROR_NO_MEMORY;"
    },
    {
        "line": 150,
        "fullcodeline": "*(pool->ptr)++ = buf[i];"
    }
]