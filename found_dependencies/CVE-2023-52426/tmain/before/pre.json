[
    {
        "line": 3,
        "fullcodeline": "const XML_Char *outputDir = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "const XML_Char *encoding = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "unsigned processFlags = XML_MAP_FILE;"
    },
    {
        "line": 6,
        "fullcodeline": "int windowsCodePages = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "int outputType = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "int useNamespaces = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "int requireStandalone = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "int requiresNotations = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "int continueOnError = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "float attackMaximumAmplification = -1.0f; /* signaling \"not set\" */"
    },
    {
        "line": 14,
        "fullcodeline": "unsigned long long attackThresholdBytes = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "XML_Bool attackThresholdGiven = XML_FALSE;"
    },
    {
        "line": 17,
        "fullcodeline": "int exitCode = XMLWF_EXIT_SUCCESS;"
    },
    {
        "line": 18,
        "fullcodeline": "enum XML_ParamEntityParsing paramEntityParsing"
    },
    {
        "line": 20,
        "fullcodeline": "int useStdin = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "XmlwfUserData userData = {NULL, NULL, NULL};"
    },
    {
        "line": 27,
        "fullcodeline": "i = 1;"
    },
    {
        "line": 28,
        "fullcodeline": "j = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "while (i < argc) {"
    },
    {
        "line": 179,
        "fullcodeline": "if (i == argc) {"
    },
    {
        "line": 184,
        "fullcodeline": "for (; i < argc; i++) {"
    },
    {
        "line": 181,
        "fullcodeline": "processFlags &= ~XML_MAP_FILE;"
    },
    {
        "line": 182,
        "fullcodeline": "i--;"
    },
    {
        "line": 185,
        "fullcodeline": "XML_Char *outName = 0;"
    },
    {
        "line": 215,
        "fullcodeline": "XML_SetParamEntityParsing(parser, paramEntityParsing);"
    },
    {
        "line": 311,
        "fullcodeline": "result = XML_ProcessFile(parser, useStdin ? NULL : argv[i], processFlags);"
    },
    {
        "line": 30,
        "fullcodeline": "if (j == 0) {"
    },
    {
        "line": 193,
        "fullcodeline": "if (! parser) {"
    },
    {
        "line": 216,
        "fullcodeline": "if (outputType == 't') {"
    },
    {
        "line": 45,
        "fullcodeline": "j++;"
    },
    {
        "line": 48,
        "fullcodeline": "case T('r'):"
    },
    {
        "line": 49,
        "fullcodeline": "processFlags &= ~XML_MAP_FILE;"
    },
    {
        "line": 50,
        "fullcodeline": "j++;"
    },
    {
        "line": 52,
        "fullcodeline": "case T('s'):"
    },
    {
        "line": 53,
        "fullcodeline": "requireStandalone = 1;"
    },
    {
        "line": 54,
        "fullcodeline": "j++;"
    },
    {
        "line": 56,
        "fullcodeline": "case T('n'):"
    },
    {
        "line": 57,
        "fullcodeline": "useNamespaces = 1;"
    },
    {
        "line": 58,
        "fullcodeline": "j++;"
    },
    {
        "line": 60,
        "fullcodeline": "case T('p'):"
    },
    {
        "line": 61,
        "fullcodeline": "paramEntityParsing = XML_PARAM_ENTITY_PARSING_ALWAYS;"
    },
    {
        "line": 63,
        "fullcodeline": "case T('x'):"
    },
    {
        "line": 64,
        "fullcodeline": "processFlags |= XML_EXTERNAL_ENTITIES;"
    },
    {
        "line": 65,
        "fullcodeline": "j++;"
    },
    {
        "line": 67,
        "fullcodeline": "case T('w'):"
    },
    {
        "line": 68,
        "fullcodeline": "windowsCodePages = 1;"
    },
    {
        "line": 69,
        "fullcodeline": "j++;"
    },
    {
        "line": 71,
        "fullcodeline": "case T('m'):"
    },
    {
        "line": 72,
        "fullcodeline": "outputType = 'm';"
    },
    {
        "line": 73,
        "fullcodeline": "j++;"
    },
    {
        "line": 75,
        "fullcodeline": "case T('c'):"
    },
    {
        "line": 76,
        "fullcodeline": "outputType = 'c';"
    },
    {
        "line": 77,
        "fullcodeline": "useNamespaces = 0;"
    },
    {
        "line": 78,
        "fullcodeline": "j++;"
    },
    {
        "line": 80,
        "fullcodeline": "case T('t'):"
    },
    {
        "line": 81,
        "fullcodeline": "outputType = 't';"
    },
    {
        "line": 82,
        "fullcodeline": "j++;"
    },
    {
        "line": 84,
        "fullcodeline": "case T('N'):"
    },
    {
        "line": 85,
        "fullcodeline": "requiresNotations = 1;"
    },
    {
        "line": 86,
        "fullcodeline": "j++;"
    },
    {
        "line": 88,
        "fullcodeline": "case T('d'):"
    },
    {
        "line": 89,
        "fullcodeline": "XMLWF_SHIFT_ARG_INTO(outputDir, argc, argv, i, j);"
    },
    {
        "line": 91,
        "fullcodeline": "case T('e'):"
    },
    {
        "line": 92,
        "fullcodeline": "XMLWF_SHIFT_ARG_INTO(encoding, argc, argv, i, j);"
    },
    {
        "line": 95,
        "fullcodeline": "usage(argv[0], XMLWF_EXIT_SUCCESS);"
    },
    {
        "line": 100,
        "fullcodeline": "case T('g'): {"
    },
    {
        "line": 120,
        "fullcodeline": "case T('k'):"
    },
    {
        "line": 121,
        "fullcodeline": "continueOnError = 1;"
    },
    {
        "line": 122,
        "fullcodeline": "j++;"
    },
    {
        "line": 124,
        "fullcodeline": "case T('a'): {"
    },
    {
        "line": 146,
        "fullcodeline": "case T('b'): {"
    },
    {
        "line": 175,
        "fullcodeline": "usage(argv[0], XMLWF_EXIT_USAGE_ERROR);"
    },
    {
        "line": 189,
        "fullcodeline": "parser = XML_ParserCreateNS(encoding, NSSEP);"
    },
    {
        "line": 195,
        "fullcodeline": "exit(XMLWF_EXIT_INTERNAL_ERROR);"
    },
    {
        "line": 198,
        "fullcodeline": "if (attackMaximumAmplification != -1.0f) {"
    },
    {
        "line": 214,
        "fullcodeline": "XML_SetNotStandaloneHandler(parser, notStandalone);"
    },
    {
        "line": 219,
        "fullcodeline": "outputDir = 0;"
    },
    {
        "line": 220,
        "fullcodeline": "XML_SetElementHandler(parser, nopStartElement, nopEndElement);"
    },
    {
        "line": 221,
        "fullcodeline": "XML_SetCharacterDataHandler(parser, nopCharacterData);"
    },
    {
        "line": 222,
        "fullcodeline": "XML_SetProcessingInstructionHandler(parser, nopProcessingInstruction);"
    },
    {
        "line": 310,
        "fullcodeline": "XML_SetUnknownEncodingHandler(parser, unknownEncoding, 0);"
    },
    {
        "line": 315,
        "fullcodeline": "fclose(userData.fp);"
    },
    {
        "line": 323,
        "fullcodeline": "exitCode = XMLWF_EXIT_NOT_WELLFORMED;"
    },
    {
        "line": 324,
        "fullcodeline": "cleanupUserData(&userData);"
    },
    {
        "line": 31,
        "fullcodeline": "if (argv[i][0] != T('-'))"
    },
    {
        "line": 33,
        "fullcodeline": "if (argv[i][1] == T('-')) {"
    },
    {
        "line": 101,
        "fullcodeline": "const XML_Char *valueText = NULL;"
    },
    {
        "line": 102,
        "fullcodeline": "XMLWF_SHIFT_ARG_INTO(valueText, argc, argv, i, j);"
    },
    {
        "line": 104,
        "fullcodeline": "errno = 0;"
    },
    {
        "line": 105,
        "fullcodeline": "XML_Char *afterValueText = (XML_Char *)valueText;"
    },
    {
        "line": 106,
        "fullcodeline": "const long long read_size_bytes_candidate"
    },
    {
        "line": 117,
        "fullcodeline": "g_read_size_bytes = (int)read_size_bytes_candidate;"
    },
    {
        "line": 125,
        "fullcodeline": "const XML_Char *valueText = NULL;"
    },
    {
        "line": 126,
        "fullcodeline": "XMLWF_SHIFT_ARG_INTO(valueText, argc, argv, i, j);"
    },
    {
        "line": 128,
        "fullcodeline": "errno = 0;"
    },
    {
        "line": 129,
        "fullcodeline": "XML_Char *afterValueText = NULL;"
    },
    {
        "line": 130,
        "fullcodeline": "attackMaximumAmplification = tcstof(valueText, &afterValueText);"
    },
    {
        "line": 147,
        "fullcodeline": "const XML_Char *valueText = NULL;"
    },
    {
        "line": 148,
        "fullcodeline": "XMLWF_SHIFT_ARG_INTO(valueText, argc, argv, i, j);"
    },
    {
        "line": 150,
        "fullcodeline": "errno = 0;"
    },
    {
        "line": 151,
        "fullcodeline": "XML_Char *afterValueText = (XML_Char *)valueText;"
    },
    {
        "line": 152,
        "fullcodeline": "attackThresholdBytes = tcstoull(valueText, &afterValueText, 10);"
    },
    {
        "line": 160,
        "fullcodeline": "attackThresholdGiven = XML_TRUE;"
    },
    {
        "line": 168,
        "fullcodeline": "if (j > 1) {"
    },
    {
        "line": 191,
        "fullcodeline": "parser = XML_ParserCreate(encoding);"
    },
    {
        "line": 194,
        "fullcodeline": "tperror(T(\"Could not instantiate parser\"));"
    },
    {
        "line": 313,
        "fullcodeline": "if (outputType == 'm')"
    },
    {
        "line": 316,
        "fullcodeline": "if (! result) {"
    },
    {
        "line": 107,
        "fullcodeline": "= tcstoull(valueText, &afterValueText, 10);"
    },
    {
        "line": 108,
        "fullcodeline": "if ((errno != 0) || (afterValueText[0] != T('\\0'))"
    },
    {
        "line": 131,
        "fullcodeline": "if ((errno != 0) || (afterValueText[0] != T('\\0'))"
    },
    {
        "line": 153,
        "fullcodeline": "if ((errno != 0) || (afterValueText[0] != T('\\0'))) {"
    },
    {
        "line": 169,
        "fullcodeline": "i++;"
    },
    {
        "line": 170,
        "fullcodeline": "j = 0;"
    },
    {
        "line": 314,
        "fullcodeline": "metaEndDocument(parser);"
    },
    {
        "line": 317,
        "fullcodeline": "tremove(outName);"
    },
    {
        "line": 34,
        "fullcodeline": "if (argv[i][2] == T('\\0')) {"
    },
    {
        "line": 110,
        "fullcodeline": "|| (read_size_bytes_candidate > (INT_MAX / 2 + 1))) {"
    },
    {
        "line": 112,
        "fullcodeline": "errno = ERANGE;"
    },
    {
        "line": 115,
        "fullcodeline": "exit(XMLWF_EXIT_USAGE_ERROR);"
    },
    {
        "line": 133,
        "fullcodeline": "|| (attackMaximumAmplification < 1.0f)) {"
    },
    {
        "line": 135,
        "fullcodeline": "errno = ERANGE;"
    },
    {
        "line": 138,
        "fullcodeline": "exit(XMLWF_EXIT_USAGE_ERROR);"
    },
    {
        "line": 155,
        "fullcodeline": "errno = ERANGE;"
    },
    {
        "line": 158,
        "fullcodeline": "exit(XMLWF_EXIT_USAGE_ERROR);"
    },
    {
        "line": 224,
        "fullcodeline": "const XML_Char *delim = T(\"/\");"
    },
    {
        "line": 225,
        "fullcodeline": "const XML_Char *file = useStdin ? T(\"STDIN\") : argv[i];"
    },
    {
        "line": 242,
        "fullcodeline": "outName = (XML_Char *)malloc((tcslen(outputDir) + tcslen(file) + 2)"
    },
    {
        "line": 248,
        "fullcodeline": "tcscpy(outName, outputDir);"
    },
    {
        "line": 249,
        "fullcodeline": "tcscat(outName, delim);"
    },
    {
        "line": 250,
        "fullcodeline": "tcscat(outName, file);"
    },
    {
        "line": 251,
        "fullcodeline": "userData.fp = tfopen(outName, T(\"wb\"));"
    },
    {
        "line": 263,
        "fullcodeline": "setvbuf(userData.fp, NULL, _IOFBF, 16384);"
    },
    {
        "line": 267,
        "fullcodeline": "XML_SetUserData(parser, &userData);"
    },
    {
        "line": 35,
        "fullcodeline": "i++;"
    },
    {
        "line": 109,
        "fullcodeline": "|| (read_size_bytes_candidate < 1)"
    },
    {
        "line": 132,
        "fullcodeline": "|| isnan(attackMaximumAmplification)"
    },
    {
        "line": 244,
        "fullcodeline": "if (! outName) {"
    },
    {
        "line": 252,
        "fullcodeline": "if (! userData.fp) {"
    },
    {
        "line": 228,
        "fullcodeline": "const XML_Char *lastDelim = tcsrchr(file, delim[0]);"
    },
    {
        "line": 246,
        "fullcodeline": "exit(XMLWF_EXIT_INTERNAL_ERROR);"
    },
    {
        "line": 253,
        "fullcodeline": "tperror(outName);"
    },
    {
        "line": 254,
        "fullcodeline": "exitCode = XMLWF_EXIT_OUTPUT_ERROR;"
    },
    {
        "line": 270,
        "fullcodeline": "XML_UseParserAsHandlerArg(parser);"
    },
    {
        "line": 271,
        "fullcodeline": "XML_SetElementHandler(parser, metaStartElement, metaEndElement);"
    },
    {
        "line": 272,
        "fullcodeline": "XML_SetProcessingInstructionHandler(parser, metaProcessingInstruction);"
    },
    {
        "line": 273,
        "fullcodeline": "XML_SetCommentHandler(parser, metaComment);"
    },
    {
        "line": 274,
        "fullcodeline": "XML_SetCdataSectionHandler(parser, metaStartCdataSection,"
    },
    {
        "line": 276,
        "fullcodeline": "XML_SetCharacterDataHandler(parser, metaCharacterData);"
    },
    {
        "line": 277,
        "fullcodeline": "XML_SetDoctypeDeclHandler(parser, metaStartDoctypeDecl,"
    },
    {
        "line": 279,
        "fullcodeline": "XML_SetEntityDeclHandler(parser, metaEntityDecl);"
    },
    {
        "line": 280,
        "fullcodeline": "XML_SetNotationDeclHandler(parser, metaNotationDecl);"
    },
    {
        "line": 281,
        "fullcodeline": "XML_SetNamespaceDeclHandler(parser, metaStartNamespaceDecl,"
    },
    {
        "line": 283,
        "fullcodeline": "metaStartDocument(parser);"
    },
    {
        "line": 286,
        "fullcodeline": "XML_UseParserAsHandlerArg(parser);"
    },
    {
        "line": 287,
        "fullcodeline": "XML_SetDefaultHandler(parser, markup);"
    },
    {
        "line": 288,
        "fullcodeline": "XML_SetElementHandler(parser, defaultStartElement, defaultEndElement);"
    },
    {
        "line": 289,
        "fullcodeline": "XML_SetCharacterDataHandler(parser, defaultCharacterData);"
    },
    {
        "line": 290,
        "fullcodeline": "XML_SetProcessingInstructionHandler(parser,"
    },
    {
        "line": 298,
        "fullcodeline": "XML_SetCharacterDataHandler(parser, characterData);"
    },
    {
        "line": 300,
        "fullcodeline": "XML_SetProcessingInstructionHandler(parser, processingInstruction);"
    },
    {
        "line": 37,
        "fullcodeline": "} else if (tcscmp(argv[i] + 2, T(\"help\")) == 0) {"
    },
    {
        "line": 245,
        "fullcodeline": "tperror(T(\"Could not allocate memory\"));"
    },
    {
        "line": 38,
        "fullcodeline": "usage(argv[0], XMLWF_EXIT_SUCCESS);"
    },
    {
        "line": 230,
        "fullcodeline": "file = lastDelim + 1;"
    },
    {
        "line": 243,
        "fullcodeline": "* sizeof(XML_Char));"
    },
    {
        "line": 295,
        "fullcodeline": "XML_SetElementHandler(parser, startElementNS, endElementNS);"
    },
    {
        "line": 302,
        "fullcodeline": "XML_SetDoctypeDeclHandler(parser, startDoctypeDecl, endDoctypeDecl);"
    },
    {
        "line": 303,
        "fullcodeline": "XML_SetNotationDeclHandler(parser, notationDecl);"
    },
    {
        "line": 297,
        "fullcodeline": "XML_SetElementHandler(parser, startElement, endElement);"
    },
    {
        "line": 40,
        "fullcodeline": "} else if (tcscmp(argv[i] + 2, T(\"version\")) == 0) {"
    },
    {
        "line": 41,
        "fullcodeline": "showVersion(argv[0]);"
    }
]