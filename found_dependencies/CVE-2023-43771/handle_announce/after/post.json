[
    {
        "line": 5,
        "fullcodeline": "if ((size_t)recv_len >= sizeof(struct ptp_announce_message)) {"
    },
    {
        "line": 6,
        "fullcodeline": "struct ptp_announce_message *msg = (struct ptp_announce_message *)buf;"
    },
    {
        "line": 8,
        "fullcodeline": "uint64_t packet_clock_id = nctohl(&msg->header.clockIdentity[0]);"
    },
    {
        "line": 9,
        "fullcodeline": "uint64_t packet_clock_id_low = nctohl(&msg->header.clockIdentity[4]);"
    },
    {
        "line": 10,
        "fullcodeline": "packet_clock_id = packet_clock_id << 32;"
    },
    {
        "line": 11,
        "fullcodeline": "packet_clock_id = packet_clock_id + packet_clock_id_low;"
    },
    {
        "line": 12,
        "fullcodeline": "clock_private_info->clock_id = packet_clock_id;"
    },
    {
        "line": 26,
        "fullcodeline": "uint64_t grandmaster_clock_id = nctohl(&msg->announce.grandmasterIdentity[0]);"
    },
    {
        "line": 27,
        "fullcodeline": "uint64_t grandmaster_clock_id_low = nctohl(&msg->announce.grandmasterIdentity[4]);"
    },
    {
        "line": 28,
        "fullcodeline": "grandmaster_clock_id = grandmaster_clock_id << 32;"
    },
    {
        "line": 29,
        "fullcodeline": "grandmaster_clock_id = grandmaster_clock_id + grandmaster_clock_id_low;"
    },
    {
        "line": 30,
        "fullcodeline": "uint32_t clockQuality = ntohl(msg->announce.grandmasterClockQuality);"
    },
    {
        "line": 31,
        "fullcodeline": "uint8_t clockClass = (clockQuality >> 24) & 0xff;"
    },
    {
        "line": 32,
        "fullcodeline": "uint8_t clockAccuracy = (clockQuality >> 16) & 0xff;"
    },
    {
        "line": 33,
        "fullcodeline": "uint16_t offsetScaledLogVariance = clockQuality & 0xffff;"
    },
    {
        "line": 34,
        "fullcodeline": "uint16_t stepsRemoved = ntohs(msg->announce.stepsRemoved);"
    },
    {
        "line": 35,
        "fullcodeline": "uint16_t sourcePortID = ntohs(msg->header.sourcePortID);"
    },
    {
        "line": 37,
        "fullcodeline": "clock_private_info->grandmasterIdentity = grandmaster_clock_id;"
    },
    {
        "line": 39,
        "fullcodeline": "clock_private_info->grandmasterQuality = clockQuality;"
    },
    {
        "line": 40,
        "fullcodeline": "clock_private_info->grandmasterClass = clockClass;"
    },
    {
        "line": 41,
        "fullcodeline": "clock_private_info->grandmasterAccuracy = clockAccuracy;"
    },
    {
        "line": 42,
        "fullcodeline": "clock_private_info->grandmasterVariance = offsetScaledLogVariance;"
    },
    {
        "line": 44,
        "fullcodeline": "clock_private_info->stepsRemoved = stepsRemoved;"
    },
    {
        "line": 45,
        "fullcodeline": "clock_private_info->clock_port_number = sourcePortID;"
    },
    {
        "line": 21,
        "fullcodeline": "if (clock_private_info->announcements_without_followups < 5) // don't keep going forever"
    },
    {
        "line": 47,
        "fullcodeline": "if (clock_private_info->wakeup_sent == 0) {"
    },
    {
        "line": 24,
        "fullcodeline": "clock_private_info->announcements_without_followups++;"
    },
    {
        "line": 48,
        "fullcodeline": "send_awakening_announcement_sequence("
    },
    {
        "line": 51,
        "fullcodeline": "clock_private_info->wakeup_sent = 1;"
    }
]