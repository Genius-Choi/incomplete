[
    {
        "line": 4,
        "fullcodeline": "switch (ttypetag(s2v(func))) {"
    },
    {
        "line": 9,
        "fullcodeline": "f = fvalue(s2v(func));"
    },
    {
        "line": 13,
        "fullcodeline": "checkstackGCp(L, LUA_MINSTACK, func);  /* ensure minimum stack size */"
    },
    {
        "line": 14,
        "fullcodeline": "L->ci = ci = next_ci(L);"
    },
    {
        "line": 15,
        "fullcodeline": "ci->nresults = nresults;"
    },
    {
        "line": 16,
        "fullcodeline": "ci->callstatus = CIST_C;"
    },
    {
        "line": 17,
        "fullcodeline": "ci->top = L->top + LUA_MINSTACK;"
    },
    {
        "line": 18,
        "fullcodeline": "ci->func = func;"
    },
    {
        "line": 19,
        "fullcodeline": "lua_assert(ci->top <= L->stack_last);"
    },
    {
        "line": 24,
        "fullcodeline": "lua_unlock(L);"
    },
    {
        "line": 25,
        "fullcodeline": "n = (*f)(L);  /* do the actual call */"
    },
    {
        "line": 26,
        "fullcodeline": "lua_lock(L);"
    },
    {
        "line": 27,
        "fullcodeline": "api_checknelems(L, n);"
    },
    {
        "line": 28,
        "fullcodeline": "luaD_poscall(L, ci, n);"
    },
    {
        "line": 34,
        "fullcodeline": "int narg = cast_int(L->top - func) - 1;  /* number of real arguments */"
    },
    {
        "line": 35,
        "fullcodeline": "int nfixparams = p->numparams;"
    },
    {
        "line": 36,
        "fullcodeline": "int fsize = p->maxstacksize;  /* frame size */"
    },
    {
        "line": 37,
        "fullcodeline": "checkstackGCp(L, fsize, func);"
    },
    {
        "line": 38,
        "fullcodeline": "L->ci = ci = next_ci(L);"
    },
    {
        "line": 39,
        "fullcodeline": "ci->nresults = nresults;"
    },
    {
        "line": 40,
        "fullcodeline": "ci->u.l.savedpc = p->code;  /* starting point */"
    },
    {
        "line": 41,
        "fullcodeline": "ci->callstatus = 0;"
    },
    {
        "line": 42,
        "fullcodeline": "ci->top = func + 1 + fsize;"
    },
    {
        "line": 43,
        "fullcodeline": "ci->func = func;"
    },
    {
        "line": 44,
        "fullcodeline": "L->ci = ci;"
    },
    {
        "line": 47,
        "fullcodeline": "lua_assert(ci->top <= L->stack_last);"
    },
    {
        "line": 48,
        "fullcodeline": "luaV_execute(L, ci);  /* run the function */"
    },
    {
        "line": 52,
        "fullcodeline": "checkstackGCp(L, 1, func);  /* space for metamethod */"
    },
    {
        "line": 53,
        "fullcodeline": "luaD_tryfuncTM(L, func);  /* try to get '__call' metamethod */"
    },
    {
        "line": 6,
        "fullcodeline": "f = clCvalue(s2v(func))->f;"
    },
    {
        "line": 20,
        "fullcodeline": "if (L->hookmask & LUA_MASKCALL) {"
    },
    {
        "line": 45,
        "fullcodeline": "for (; narg < nfixparams; narg++)"
    },
    {
        "line": 46,
        "fullcodeline": "setnilvalue(s2v(L->top++));  /* complete missing arguments */"
    },
    {
        "line": 21,
        "fullcodeline": "int narg = cast_int(L->top - func) - 1;"
    },
    {
        "line": 22,
        "fullcodeline": "luaD_hook(L, LUA_HOOKCALL, -1, 1, narg);"
    },
    {
        "line": 33,
        "fullcodeline": "Proto *p = clLvalue(s2v(func))->p;"
    }
]