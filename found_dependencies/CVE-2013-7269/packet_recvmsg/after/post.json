[
    {
        "line": 4,
        "fullcodeline": "struct sock *sk = sock->sk;"
    },
    {
        "line": 7,
        "fullcodeline": "int vnet_hdr_len = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 34,
        "fullcodeline": "skb = skb_recv_datagram(sk, flags, flags & MSG_DONTWAIT, &err);"
    },
    {
        "line": 94,
        "fullcodeline": "copied = skb->len;"
    },
    {
        "line": 100,
        "fullcodeline": "err = skb_copy_datagram_iovec(skb, 0, msg->msg_iov, copied);"
    },
    {
        "line": 104,
        "fullcodeline": "sock_recv_ts_and_drops(msg, sk, skb);"
    },
    {
        "line": 145,
        "fullcodeline": "err = vnet_hdr_len + ((flags&MSG_TRUNC) ? skb->len : copied);"
    },
    {
        "line": 148,
        "fullcodeline": "skb_free_datagram(sk, skb);"
    },
    {
        "line": 10,
        "fullcodeline": "if (flags & ~(MSG_PEEK|MSG_DONTWAIT|MSG_TRUNC|MSG_CMSG_COMPAT|MSG_ERRQUEUE))"
    },
    {
        "line": 19,
        "fullcodeline": "if (flags & MSG_ERRQUEUE) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (skb == NULL)"
    },
    {
        "line": 95,
        "fullcodeline": "if (copied > len) {"
    },
    {
        "line": 20,
        "fullcodeline": "err = sock_recv_errqueue(sk, msg, len,"
    },
    {
        "line": 45,
        "fullcodeline": "if (pkt_sk(sk)->has_vnet_hdr) {"
    },
    {
        "line": 46,
        "fullcodeline": "struct virtio_net_hdr vnet_hdr = { 0 };"
    },
    {
        "line": 48,
        "fullcodeline": "err = -EINVAL;"
    },
    {
        "line": 53,
        "fullcodeline": "len -= vnet_hdr_len;"
    },
    {
        "line": 84,
        "fullcodeline": "err = memcpy_toiovec(msg->msg_iov, (void *)&vnet_hdr,"
    },
    {
        "line": 96,
        "fullcodeline": "copied = len;"
    },
    {
        "line": 97,
        "fullcodeline": "msg->msg_flags |= MSG_TRUNC;"
    },
    {
        "line": 117,
        "fullcodeline": "memcpy(msg->msg_name, &PACKET_SKB_CB(skb)->sa,"
    },
    {
        "line": 121,
        "fullcodeline": "if (pkt_sk(sk)->auxdata) {"
    },
    {
        "line": 124,
        "fullcodeline": "aux.tp_status = TP_STATUS_USER;"
    },
    {
        "line": 128,
        "fullcodeline": "aux.tp_snaplen = skb->len;"
    },
    {
        "line": 129,
        "fullcodeline": "aux.tp_mac = 0;"
    },
    {
        "line": 130,
        "fullcodeline": "aux.tp_net = skb_network_offset(skb);"
    },
    {
        "line": 137,
        "fullcodeline": "aux.tp_padding = 0;"
    },
    {
        "line": 138,
        "fullcodeline": "put_cmsg(msg, SOL_PACKET, PACKET_AUXDATA, sizeof(aux), &aux);"
    },
    {
        "line": 50,
        "fullcodeline": "if (len < vnet_hdr_len)"
    },
    {
        "line": 55,
        "fullcodeline": "if (skb_is_gso(skb)) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (skb->ip_summed == CHECKSUM_PARTIAL) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 110,
        "fullcodeline": "if (sock->type == SOCK_PACKET) {"
    },
    {
        "line": 125,
        "fullcodeline": "if (skb->ip_summed == CHECKSUM_PARTIAL)"
    },
    {
        "line": 131,
        "fullcodeline": "if (vlan_tx_tag_present(skb)) {"
    },
    {
        "line": 56,
        "fullcodeline": "struct skb_shared_info *sinfo = skb_shinfo(skb);"
    },
    {
        "line": 59,
        "fullcodeline": "vnet_hdr.hdr_len = skb_headlen(skb);"
    },
    {
        "line": 60,
        "fullcodeline": "vnet_hdr.gso_size = sinfo->gso_size;"
    },
    {
        "line": 77,
        "fullcodeline": "vnet_hdr.flags = VIRTIO_NET_HDR_F_NEEDS_CSUM;"
    },
    {
        "line": 78,
        "fullcodeline": "vnet_hdr.csum_start = skb_checksum_start_offset(skb);"
    },
    {
        "line": 79,
        "fullcodeline": "vnet_hdr.csum_offset = skb->csum_offset;"
    },
    {
        "line": 126,
        "fullcodeline": "aux.tp_status |= TP_STATUS_CSUMNOTREADY;"
    },
    {
        "line": 127,
        "fullcodeline": "aux.tp_len = PACKET_SKB_CB(skb)->origlen;"
    },
    {
        "line": 132,
        "fullcodeline": "aux.tp_vlan_tci = vlan_tx_tag_get(skb);"
    },
    {
        "line": 133,
        "fullcodeline": "aux.tp_status |= TP_STATUS_VLAN_VALID;"
    },
    {
        "line": 61,
        "fullcodeline": "if (sinfo->gso_type & SKB_GSO_TCPV4)"
    },
    {
        "line": 71,
        "fullcodeline": "if (sinfo->gso_type & SKB_GSO_TCP_ECN)"
    },
    {
        "line": 74,
        "fullcodeline": "vnet_hdr.gso_type = VIRTIO_NET_HDR_GSO_NONE;"
    },
    {
        "line": 135,
        "fullcodeline": "aux.tp_vlan_tci = 0;"
    },
    {
        "line": 62,
        "fullcodeline": "vnet_hdr.gso_type = VIRTIO_NET_HDR_GSO_TCPV4;"
    },
    {
        "line": 72,
        "fullcodeline": "vnet_hdr.gso_type |= VIRTIO_NET_HDR_GSO_ECN;"
    },
    {
        "line": 80,
        "fullcodeline": "} else if (skb->ip_summed == CHECKSUM_UNNECESSARY) {"
    },
    {
        "line": 81,
        "fullcodeline": "vnet_hdr.flags = VIRTIO_NET_HDR_F_DATA_VALID;"
    },
    {
        "line": 63,
        "fullcodeline": "else if (sinfo->gso_type & SKB_GSO_TCPV6)"
    },
    {
        "line": 64,
        "fullcodeline": "vnet_hdr.gso_type = VIRTIO_NET_HDR_GSO_TCPV6;"
    },
    {
        "line": 113,
        "fullcodeline": "struct sockaddr_ll *sll = &PACKET_SKB_CB(skb)->sa.ll;"
    },
    {
        "line": 65,
        "fullcodeline": "else if (sinfo->gso_type & SKB_GSO_UDP)"
    },
    {
        "line": 66,
        "fullcodeline": "vnet_hdr.gso_type = VIRTIO_NET_HDR_GSO_UDP;"
    },
    {
        "line": 67,
        "fullcodeline": "else if (sinfo->gso_type & SKB_GSO_FCOE)"
    },
    {
        "line": 70,
        "fullcodeline": "BUG();"
    }
]