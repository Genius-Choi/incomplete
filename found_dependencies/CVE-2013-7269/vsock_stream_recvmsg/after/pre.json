[
    {
        "line": 13,
        "fullcodeline": "DEFINE_WAIT(wait);"
    },
    {
        "line": 15,
        "fullcodeline": "sk = sock->sk;"
    },
    {
        "line": 16,
        "fullcodeline": "vsk = vsock_sk(sk);"
    },
    {
        "line": 17,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 19,
        "fullcodeline": "lock_sock(sk);"
    },
    {
        "line": 63,
        "fullcodeline": "target = sock_rcvlowat(sk, flags & MSG_WAITALL, len);"
    },
    {
        "line": 68,
        "fullcodeline": "timeout = sock_rcvtimeo(sk, flags & MSG_DONTWAIT);"
    },
    {
        "line": 69,
        "fullcodeline": "copied = 0;"
    },
    {
        "line": 71,
        "fullcodeline": "err = transport->notify_recv_init(vsk, target, &recv_data);"
    },
    {
        "line": 75,
        "fullcodeline": "prepare_to_wait(sk_sleep(sk), &wait, TASK_INTERRUPTIBLE);"
    },
    {
        "line": 176,
        "fullcodeline": "finish_wait(sk_sleep(sk), &wait);"
    },
    {
        "line": 178,
        "fullcodeline": "release_sock(sk);"
    },
    {
        "line": 21,
        "fullcodeline": "if (sk->sk_state != SS_CONNECTED) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (flags & MSG_OOB) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (sk->sk_shutdown & RCV_SHUTDOWN) {"
    },
    {
        "line": 52,
        "fullcodeline": "if (!len) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (target >= transport->stream_rcvhiwat(vsk)) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 153,
        "fullcodeline": "if (copied > 0) {"
    },
    {
        "line": 36,
        "fullcodeline": "err = -EOPNOTSUPP;"
    },
    {
        "line": 45,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 53,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 65,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 78,
        "fullcodeline": "s64 ready = vsock_stream_has_data(vsk);"
    },
    {
        "line": 149,
        "fullcodeline": "err = -sk->sk_err;"
    },
    {
        "line": 172,
        "fullcodeline": "err = copied;"
    },
    {
        "line": 27,
        "fullcodeline": "if (sock_flag(sk, SOCK_DONE))"
    },
    {
        "line": 80,
        "fullcodeline": "if (ready < 0) {"
    },
    {
        "line": 159,
        "fullcodeline": "if (!(flags & MSG_PEEK)) {"
    },
    {
        "line": 28,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 85,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 150,
        "fullcodeline": "else if (sk->sk_shutdown & RCV_SHUTDOWN)"
    },
    {
        "line": 30,
        "fullcodeline": "err = -ENOTCONN;"
    },
    {
        "line": 151,
        "fullcodeline": "err = 0;"
    },
    {
        "line": 164,
        "fullcodeline": "if (vsk->peer_shutdown & SEND_SHUTDOWN) {"
    },
    {
        "line": 87,
        "fullcodeline": "} else if (ready > 0) {"
    },
    {
        "line": 90,
        "fullcodeline": "err = transport->notify_recv_pre_dequeue("
    },
    {
        "line": 95,
        "fullcodeline": "read = transport->stream_dequeue("
    },
    {
        "line": 103,
        "fullcodeline": "copied += read;"
    },
    {
        "line": 105,
        "fullcodeline": "err = transport->notify_recv_post_dequeue("
    },
    {
        "line": 114,
        "fullcodeline": "target -= read;"
    },
    {
        "line": 165,
        "fullcodeline": "if (vsock_stream_has_data(vsk) <= 0) {"
    },
    {
        "line": 92,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 98,
        "fullcodeline": "if (read < 0) {"
    },
    {
        "line": 108,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 111,
        "fullcodeline": "if (read >= target || flags & MSG_PEEK)"
    },
    {
        "line": 126,
        "fullcodeline": "err = transport->notify_recv_pre_block("
    },
    {
        "line": 131,
        "fullcodeline": "release_sock(sk);"
    },
    {
        "line": 132,
        "fullcodeline": "timeout = schedule_timeout(timeout);"
    },
    {
        "line": 133,
        "fullcodeline": "lock_sock(sk);"
    },
    {
        "line": 143,
        "fullcodeline": "prepare_to_wait(sk_sleep(sk), &wait,"
    },
    {
        "line": 166,
        "fullcodeline": "sk->sk_state = SS_UNCONNECTED;"
    },
    {
        "line": 167,
        "fullcodeline": "sock_set_flag(sk, SOCK_DONE);"
    },
    {
        "line": 168,
        "fullcodeline": "sk->sk_state_change(sk);"
    },
    {
        "line": 97,
        "fullcodeline": "len - copied, flags);"
    },
    {
        "line": 99,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 107,
        "fullcodeline": "!(flags & MSG_PEEK), &recv_data);"
    },
    {
        "line": 116,
        "fullcodeline": "if (sk->sk_err != 0 || (sk->sk_shutdown & RCV_SHUTDOWN)"
    },
    {
        "line": 121,
        "fullcodeline": "if (timeout == 0) {"
    },
    {
        "line": 128,
        "fullcodeline": "if (err < 0)"
    },
    {
        "line": 135,
        "fullcodeline": "if (signal_pending(current)) {"
    },
    {
        "line": 117,
        "fullcodeline": "|| (vsk->peer_shutdown & SEND_SHUTDOWN)) {"
    },
    {
        "line": 122,
        "fullcodeline": "err = -EAGAIN;"
    },
    {
        "line": 136,
        "fullcodeline": "err = sock_intr_errno(timeout);"
    },
    {
        "line": 138,
        "fullcodeline": "} else if (timeout == 0) {"
    },
    {
        "line": 139,
        "fullcodeline": "err = -EAGAIN;"
    }
]