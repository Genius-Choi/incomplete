[
    {
        "line": 5,
        "fullcodeline": "struct rxrpc_call *call = NULL, *continue_call = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "struct rxrpc_sock *rx = rxrpc_sk(sock->sk);"
    },
    {
        "line": 9,
        "fullcodeline": "int copy, ret, ullen, offset, copied = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "DEFINE_WAIT(wait);"
    },
    {
        "line": 14,
        "fullcodeline": "_enter(\",,,%zu,%d\", len, flags);"
    },
    {
        "line": 19,
        "fullcodeline": "ullen = msg->msg_flags & MSG_CMSG_COMPAT ? 4 : sizeof(unsigned long);"
    },
    {
        "line": 21,
        "fullcodeline": "timeo = sock_rcvtimeo(&rx->sk, flags & MSG_DONTWAIT);"
    },
    {
        "line": 22,
        "fullcodeline": "msg->msg_flags |= MSG_MORE;"
    },
    {
        "line": 24,
        "fullcodeline": "lock_sock(&rx->sk);"
    },
    {
        "line": 217,
        "fullcodeline": "_leave(\" = %d [data]\", copied);"
    },
    {
        "line": 238,
        "fullcodeline": "ret = put_cmsg(msg, SOL_RXRPC, RXRPC_USER_CALL_ID,"
    },
    {
        "line": 278,
        "fullcodeline": "msg->msg_flags &= ~MSG_MORE;"
    },
    {
        "line": 279,
        "fullcodeline": "msg->msg_flags |= MSG_EOR;"
    },
    {
        "line": 293,
        "fullcodeline": "_leave(\" = %d\", ret);"
    },
    {
        "line": 302,
        "fullcodeline": "_leave(\" = %d\", ret);"
    },
    {
        "line": 307,
        "fullcodeline": "release_sock(&rx->sk);"
    },
    {
        "line": 310,
        "fullcodeline": "rxrpc_kill_skb(skb);"
    },
    {
        "line": 316,
        "fullcodeline": "ret = sock_intr_errno(timeo);"
    },
    {
        "line": 323,
        "fullcodeline": "_leave(\" = %d [waitfail %d]\", copied, ret);"
    },
    {
        "line": 16,
        "fullcodeline": "if (flags & (MSG_OOB | MSG_TRUNC))"
    },
    {
        "line": 225,
        "fullcodeline": "if (skb->mark == RXRPC_SKB_MARK_NEW_CALL) {"
    },
    {
        "line": 240,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 242,
        "fullcodeline": "ASSERT(test_bit(RXRPC_CALL_HAS_USERID, &call->flags));"
    },
    {
        "line": 273,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 313,
        "fullcodeline": "return -EAGAIN;"
    },
    {
        "line": 318,
        "fullcodeline": "finish_wait(sk_sleep(&rx->sk), &wait);"
    },
    {
        "line": 41,
        "fullcodeline": "skb = skb_peek(&rx->sk.sk_receive_queue);"
    },
    {
        "line": 67,
        "fullcodeline": "sp = rxrpc_skb(skb);"
    },
    {
        "line": 68,
        "fullcodeline": "call = sp->call;"
    },
    {
        "line": 74,
        "fullcodeline": "spin_lock_bh(&call->lock);"
    },
    {
        "line": 75,
        "fullcodeline": "spin_unlock_bh(&call->lock);"
    },
    {
        "line": 97,
        "fullcodeline": "rxrpc_get_call(call);"
    },
    {
        "line": 115,
        "fullcodeline": "_debug(\"recvmsg DATA #%u { %d, %d }\","
    },
    {
        "line": 129,
        "fullcodeline": "call->rx_data_recv = ntohl(sp->hdr.seq);"
    },
    {
        "line": 133,
        "fullcodeline": "offset = sp->offset;"
    },
    {
        "line": 134,
        "fullcodeline": "copy = skb->len - offset;"
    },
    {
        "line": 152,
        "fullcodeline": "_debug(\"copied %d+%d\", copy, copied);"
    },
    {
        "line": 154,
        "fullcodeline": "offset += copy;"
    },
    {
        "line": 155,
        "fullcodeline": "copied += copy;"
    },
    {
        "line": 193,
        "fullcodeline": "call = NULL;"
    },
    {
        "line": 227,
        "fullcodeline": "ret = put_cmsg(msg, SOL_RXRPC, RXRPC_NEW_CALL, 0, &abort_code);"
    },
    {
        "line": 248,
        "fullcodeline": "ret = put_cmsg(msg, SOL_RXRPC, RXRPC_ACK, 0, &abort_code);"
    },
    {
        "line": 251,
        "fullcodeline": "ret = put_cmsg(msg, SOL_RXRPC, RXRPC_BUSY, 0, &abort_code);"
    },
    {
        "line": 254,
        "fullcodeline": "abort_code = call->abort_code;"
    },
    {
        "line": 255,
        "fullcodeline": "ret = put_cmsg(msg, SOL_RXRPC, RXRPC_ABORT, 4, &abort_code);"
    },
    {
        "line": 258,
        "fullcodeline": "_debug(\"RECV NET ERROR %d\", sp->error);"
    },
    {
        "line": 259,
        "fullcodeline": "abort_code = sp->error;"
    },
    {
        "line": 260,
        "fullcodeline": "ret = put_cmsg(msg, SOL_RXRPC, RXRPC_NET_ERROR, 4, &abort_code);"
    },
    {
        "line": 263,
        "fullcodeline": "_debug(\"RECV LOCAL ERROR %d\", sp->error);"
    },
    {
        "line": 264,
        "fullcodeline": "abort_code = sp->error;"
    },
    {
        "line": 265,
        "fullcodeline": "ret = put_cmsg(msg, SOL_RXRPC, RXRPC_LOCAL_ERROR, 4,"
    },
    {
        "line": 281,
        "fullcodeline": "if (!(flags & MSG_PEEK)) {"
    },
    {
        "line": 282,
        "fullcodeline": "_net(\"free terminal skb %p\", skb);"
    },
    {
        "line": 286,
        "fullcodeline": "rxrpc_remove_user_ID(rx, call);"
    },
    {
        "line": 322,
        "fullcodeline": "copied = ret;"
    },
    {
        "line": 17,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 29,
        "fullcodeline": "if (RB_EMPTY_ROOT(&rx->calls)) {"
    },
    {
        "line": 42,
        "fullcodeline": "if (!skb) {"
    },
    {
        "line": 69,
        "fullcodeline": "ASSERT(call != NULL);"
    },
    {
        "line": 77,
        "fullcodeline": "if (test_bit(RXRPC_CALL_RELEASED, &call->flags)) {"
    },
    {
        "line": 100,
        "fullcodeline": "if (!continue_call) {"
    },
    {
        "line": 112,
        "fullcodeline": "if (skb->mark != RXRPC_SKB_MARK_DATA)"
    },
    {
        "line": 116,
        "fullcodeline": "ntohl(sp->hdr.seq), skb->len, sp->offset);"
    },
    {
        "line": 118,
        "fullcodeline": "if (!continue_call) {"
    },
    {
        "line": 135,
        "fullcodeline": "if (copy > len - copied)"
    },
    {
        "line": 138,
        "fullcodeline": "if (skb->ip_summed == CHECKSUM_UNNECESSARY) {"
    },
    {
        "line": 148,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 160,
        "fullcodeline": "if (sp->offset < skb->len) {"
    },
    {
        "line": 167,
        "fullcodeline": "if (sp->hdr.flags & RXRPC_LAST_PACKET) {"
    },
    {
        "line": 189,
        "fullcodeline": "if (!continue_call)"
    },
    {
        "line": 195,
        "fullcodeline": "if (flags & MSG_PEEK) {"
    },
    {
        "line": 204,
        "fullcodeline": "if (skb_dequeue(&rx->sk.sk_receive_queue) != skb)"
    },
    {
        "line": 228,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 283,
        "fullcodeline": "if (skb_dequeue(&rx->sk.sk_receive_queue) != skb)"
    },
    {
        "line": 49,
        "fullcodeline": "release_sock(&rx->sk);"
    },
    {
        "line": 50,
        "fullcodeline": "prepare_to_wait_exclusive(sk_sleep(&rx->sk), &wait,"
    },
    {
        "line": 52,
        "fullcodeline": "ret = sock_error(&rx->sk);"
    },
    {
        "line": 61,
        "fullcodeline": "finish_wait(sk_sleep(&rx->sk), &wait);"
    },
    {
        "line": 62,
        "fullcodeline": "lock_sock(&rx->sk);"
    },
    {
        "line": 108,
        "fullcodeline": "sock_recv_ts_and_drops(msg, &rx->sk, skb);"
    },
    {
        "line": 120,
        "fullcodeline": "ret = put_cmsg(msg, SOL_RXRPC, RXRPC_USER_CALL_ID,"
    },
    {
        "line": 136,
        "fullcodeline": "copy = len - copied;"
    },
    {
        "line": 139,
        "fullcodeline": "ret = skb_copy_datagram_iovec(skb, offset,"
    },
    {
        "line": 157,
        "fullcodeline": "if (!(flags & MSG_PEEK))"
    },
    {
        "line": 158,
        "fullcodeline": "sp->offset = offset;"
    },
    {
        "line": 190,
        "fullcodeline": "continue_call = sp->call;"
    },
    {
        "line": 197,
        "fullcodeline": "skb = skb->next;"
    },
    {
        "line": 230,
        "fullcodeline": "if (!(flags & MSG_PEEK)) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (rx->sk.sk_state != RXRPC_SERVER_LISTENING) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (copied &&"
    },
    {
        "line": 56,
        "fullcodeline": "if (skb_queue_empty(&rx->sk.sk_receive_queue)) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (skb_dequeue(&rx->sk.sk_receive_queue) != skb)"
    },
    {
        "line": 122,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 124,
        "fullcodeline": "ASSERT(test_bit(RXRPC_CALL_HAS_USERID, &call->flags));"
    },
    {
        "line": 142,
        "fullcodeline": "ret = skb_copy_and_csum_datagram_iovec(skb, offset,"
    },
    {
        "line": 183,
        "fullcodeline": "msg->msg_flags &= ~MSG_MORE;"
    },
    {
        "line": 198,
        "fullcodeline": "if (skb == (struct sk_buff *) &rx->sk.sk_receive_queue)"
    },
    {
        "line": 231,
        "fullcodeline": "if (skb_dequeue(&rx->sk.sk_receive_queue) != skb)"
    },
    {
        "line": 45,
        "fullcodeline": "(msg->msg_flags & MSG_PEEK || timeo == 0))"
    },
    {
        "line": 59,
        "fullcodeline": "timeo = schedule_timeout(timeo);"
    },
    {
        "line": 88,
        "fullcodeline": "if (call != continue_call ||"
    },
    {
        "line": 89,
        "fullcodeline": "skb->mark != RXRPC_SKB_MARK_DATA) {"
    },
    {
        "line": 92,
        "fullcodeline": "_leave(\" = %d [noncont]\", copied);"
    },
    {
        "line": 102,
        "fullcodeline": "size_t len ="
    },
    {
        "line": 104,
        "fullcodeline": "memcpy(msg->msg_name,"
    },
    {
        "line": 106,
        "fullcodeline": "msg->msg_namelen = len;"
    },
    {
        "line": 144,
        "fullcodeline": "if (ret == -EINVAL)"
    },
    {
        "line": 171,
        "fullcodeline": "ret = copied;"
    },
    {
        "line": 176,
        "fullcodeline": "if (!(flags & MSG_PEEK)) {"
    },
    {
        "line": 36,
        "fullcodeline": "return -ENODATA;"
    },
    {
        "line": 57,
        "fullcodeline": "if (signal_pending(current))"
    },
    {
        "line": 178,
        "fullcodeline": "if (skb_dequeue(&rx->sk.sk_receive_queue) !="
    }
]