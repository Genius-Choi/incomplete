[
    {
        "line": 6,
        "fullcodeline": "char\t\tcap_int[NETSCREEN_MAX_INT_NAME_LENGTH];"
    },
    {
        "line": 7,
        "fullcodeline": "char\t\tdirection[2];"
    },
    {
        "line": 9,
        "fullcodeline": "char\t\tcap_src[13];"
    },
    {
        "line": 10,
        "fullcodeline": "char\t\tcap_dst[13];"
    },
    {
        "line": 13,
        "fullcodeline": "int\t\tn, i = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "guint\t\toffset = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "gchar\t\tdststr[13];"
    },
    {
        "line": 17,
        "fullcodeline": "phdr->rec_type = REC_TYPE_PACKET;"
    },
    {
        "line": 18,
        "fullcodeline": "phdr->presence_flags = WTAP_HAS_TS|WTAP_HAS_CAP_LEN;"
    },
    {
        "line": 47,
        "fullcodeline": "ws_buffer_assure_space(buf, pkt_len);"
    },
    {
        "line": 48,
        "fullcodeline": "pd = ws_buffer_start_ptr(buf);"
    },
    {
        "line": 20,
        "fullcodeline": "if (sscanf(line, \"%9d.%9d: %15[a-z0-9/:.-](%1[io]) len=%9u:%12s->%12s/\","
    },
    {
        "line": 26,
        "fullcodeline": "if (pkt_len > WTAP_MAX_PACKET_SIZE) {"
    },
    {
        "line": 43,
        "fullcodeline": "phdr->ts.nsecs = dsec * 100000000;"
    },
    {
        "line": 22,
        "fullcodeline": "*err = WTAP_ERR_BAD_FILE;"
    },
    {
        "line": 23,
        "fullcodeline": "*err_info = g_strdup(\"netscreen: Can't parse packet-header\");"
    },
    {
        "line": 72,
        "fullcodeline": "n = parse_single_hex_dump_line(p, pd, offset);"
    },
    {
        "line": 100,
        "fullcodeline": "offset += n;"
    },
    {
        "line": 119,
        "fullcodeline": "if (strncmp(cap_int, \"adsl\", 4) == 0) {"
    },
    {
        "line": 126,
        "fullcodeline": "g_snprintf(dststr, 13, \"%02x%02x%02x%02x%02x%02x\","
    },
    {
        "line": 24,
        "fullcodeline": "return -1;"
    },
    {
        "line": 32,
        "fullcodeline": "*err_info = g_strdup_printf(\"netscreen: File has %u-byte packet, bigger than maximum of %u\","
    },
    {
        "line": 55,
        "fullcodeline": "if (file_gets(line, NETSCREEN_LINE_LENGTH, fh) == NULL) {"
    },
    {
        "line": 65,
        "fullcodeline": "for (p = &line[0]; g_ascii_isspace(*p); p++)"
    },
    {
        "line": 68,
        "fullcodeline": "if (*p == '\\0') {"
    },
    {
        "line": 93,
        "fullcodeline": "if (n == -1) {"
    },
    {
        "line": 105,
        "fullcodeline": "if (offset > pkt_len) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (offset == 0 && n < 6) {"
    },
    {
        "line": 128,
        "fullcodeline": "if (strncmp(dststr, cap_dst, 12) == 0)"
    },
    {
        "line": 79,
        "fullcodeline": "if (info_line(line)) {"
    },
    {
        "line": 95,
        "fullcodeline": "*err_info = g_strdup(\"netscreen: cannot parse hex-data\");"
    },
    {
        "line": 107,
        "fullcodeline": "*err_info = g_strdup(\"netscreen: too much hex-data\");"
    },
    {
        "line": 133,
        "fullcodeline": "else if (strncmp(cap_int, \"seri\", 4) == 0)"
    },
    {
        "line": 80,
        "fullcodeline": "if (++i <= NETSCREEN_MAX_INFOLINES) {"
    },
    {
        "line": 85,
        "fullcodeline": "*err_info = g_strdup(\"netscreen: cannot parse hex-data\");"
    }
]