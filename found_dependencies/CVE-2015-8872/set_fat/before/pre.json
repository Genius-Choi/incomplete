[
    {
        "line": 3,
        "fullcodeline": "unsigned char *data = NULL;"
    },
    {
        "line": 54,
        "fullcodeline": "fs_write(offs, size, data);"
    },
    {
        "line": 7,
        "fullcodeline": "if (new == -1)"
    },
    {
        "line": 55,
        "fullcodeline": "if (fs->nfats > 1) {"
    },
    {
        "line": 8,
        "fullcodeline": "new = FAT_EOF(fs);"
    },
    {
        "line": 13,
        "fullcodeline": "data = fs->fat + cluster * 3 / 2;"
    },
    {
        "line": 14,
        "fullcodeline": "offs = fs->fat_start + cluster * 3 / 2;"
    },
    {
        "line": 29,
        "fullcodeline": "size = 2;"
    },
    {
        "line": 32,
        "fullcodeline": "data = fs->fat + cluster * 2;"
    },
    {
        "line": 33,
        "fullcodeline": "offs = fs->fat_start + cluster * 2;"
    },
    {
        "line": 34,
        "fullcodeline": "*(unsigned short *)data = htole16(new);"
    },
    {
        "line": 35,
        "fullcodeline": "size = 2;"
    },
    {
        "line": 52,
        "fullcodeline": "die(\"Bad FAT entry size: %d bits.\", fs->fat_bits);"
    },
    {
        "line": 56,
        "fullcodeline": "fs_write(offs + fs->fat_size, size, data);"
    },
    {
        "line": 15,
        "fullcodeline": "if (cluster & 1) {"
    },
    {
        "line": 40,
        "fullcodeline": "get_fat(&curEntry, fs->fat, cluster, fs);"
    },
    {
        "line": 42,
        "fullcodeline": "data = fs->fat + cluster * 4;"
    },
    {
        "line": 43,
        "fullcodeline": "offs = fs->fat_start + cluster * 4;"
    },
    {
        "line": 46,
        "fullcodeline": "*(uint32_t *)data = htole32((new & 0xfffffff) |"
    },
    {
        "line": 48,
        "fullcodeline": "size = 4;"
    },
    {
        "line": 9,
        "fullcodeline": "else if ((long)new == -2)"
    },
    {
        "line": 17,
        "fullcodeline": "get_fat(&prevEntry, fs->fat, cluster - 1, fs);"
    },
    {
        "line": 18,
        "fullcodeline": "data[0] = ((new & 0xf) << 4) | (prevEntry.value >> 8);"
    },
    {
        "line": 19,
        "fullcodeline": "data[1] = new >> 4;"
    },
    {
        "line": 10,
        "fullcodeline": "new = FAT_BAD(fs);"
    },
    {
        "line": 26,
        "fullcodeline": "data[0] = new & 0xff;"
    },
    {
        "line": 27,
        "fullcodeline": "data[1] = (new >> 8) | ((0xff & subseqEntry.value) << 4);"
    },
    {
        "line": 22,
        "fullcodeline": "if (cluster != fs->clusters - 1)"
    },
    {
        "line": 47,
        "fullcodeline": "(curEntry.reserved << 28));"
    },
    {
        "line": 23,
        "fullcodeline": "get_fat(&subseqEntry, fs->fat, cluster + 1, fs);"
    },
    {
        "line": 25,
        "fullcodeline": "subseqEntry.value = 0;"
    }
]