[
    {
        "line": 11,
        "fullcodeline": "rc = setup_ntlmv2_rsp(ses, nls_cp);"
    },
    {
        "line": 17,
        "fullcodeline": "*pbuffer = kmalloc(size_of_ntlmssp_blob(ses), GFP_KERNEL);"
    },
    {
        "line": 18,
        "fullcodeline": "sec_blob = (AUTHENTICATE_MESSAGE *)*pbuffer;"
    },
    {
        "line": 20,
        "fullcodeline": "memcpy(sec_blob->Signature, NTLMSSP_SIGNATURE, 8);"
    },
    {
        "line": 21,
        "fullcodeline": "sec_blob->MessageType = NtLmAuthenticate;"
    },
    {
        "line": 23,
        "fullcodeline": "flags = NTLMSSP_NEGOTIATE_56 |"
    },
    {
        "line": 33,
        "fullcodeline": "tmp = *pbuffer + sizeof(AUTHENTICATE_MESSAGE);"
    },
    {
        "line": 34,
        "fullcodeline": "sec_blob->NegotiateFlags = cpu_to_le32(flags);"
    },
    {
        "line": 38,
        "fullcodeline": "sec_blob->LmChallengeResponse.Length = 0;"
    },
    {
        "line": 39,
        "fullcodeline": "sec_blob->LmChallengeResponse.MaximumLength = 0;"
    },
    {
        "line": 41,
        "fullcodeline": "sec_blob->NtChallengeResponse.BufferOffset ="
    },
    {
        "line": 92,
        "fullcodeline": "sec_blob->WorkstationName.BufferOffset = cpu_to_le32(tmp - *pbuffer);"
    },
    {
        "line": 93,
        "fullcodeline": "sec_blob->WorkstationName.Length = 0;"
    },
    {
        "line": 94,
        "fullcodeline": "sec_blob->WorkstationName.MaximumLength = 0;"
    },
    {
        "line": 95,
        "fullcodeline": "tmp += 2;"
    },
    {
        "line": 112,
        "fullcodeline": "*buflen = tmp - *pbuffer;"
    },
    {
        "line": 30,
        "fullcodeline": "if (!ses->server->session_estab || ses->ntlmssp->sesskey_per_smbsess)"
    },
    {
        "line": 42,
        "fullcodeline": "cpu_to_le32(tmp - *pbuffer);"
    },
    {
        "line": 43,
        "fullcodeline": "if (ses->user_name != NULL) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (ses->domainName == NULL) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (ses->user_name == NULL) {"
    },
    {
        "line": 97,
        "fullcodeline": "if (((ses->ntlmssp->server_flags & NTLMSSP_NEGOTIATE_KEY_XCH) ||"
    },
    {
        "line": 13,
        "fullcodeline": "cifs_dbg(VFS, \"Error %d during NTLMSSP authentication\\n\", rc);"
    },
    {
        "line": 14,
        "fullcodeline": "*buflen = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "flags |= NTLMSSP_NEGOTIATE_SIGN;"
    },
    {
        "line": 31,
        "fullcodeline": "flags |= NTLMSSP_NEGOTIATE_KEY_XCH;"
    },
    {
        "line": 44,
        "fullcodeline": "memcpy(tmp, ses->auth_key.response + CIFS_SESS_KEY_SIZE,"
    },
    {
        "line": 46,
        "fullcodeline": "tmp += ses->auth_key.len - CIFS_SESS_KEY_SIZE;"
    },
    {
        "line": 48,
        "fullcodeline": "sec_blob->NtChallengeResponse.Length ="
    },
    {
        "line": 50,
        "fullcodeline": "sec_blob->NtChallengeResponse.MaximumLength ="
    },
    {
        "line": 61,
        "fullcodeline": "sec_blob->DomainName.BufferOffset = cpu_to_le32(tmp - *pbuffer);"
    },
    {
        "line": 62,
        "fullcodeline": "sec_blob->DomainName.Length = 0;"
    },
    {
        "line": 63,
        "fullcodeline": "sec_blob->DomainName.MaximumLength = 0;"
    },
    {
        "line": 64,
        "fullcodeline": "tmp += 2;"
    },
    {
        "line": 77,
        "fullcodeline": "sec_blob->UserName.BufferOffset = cpu_to_le32(tmp - *pbuffer);"
    },
    {
        "line": 78,
        "fullcodeline": "sec_blob->UserName.Length = 0;"
    },
    {
        "line": 79,
        "fullcodeline": "sec_blob->UserName.MaximumLength = 0;"
    },
    {
        "line": 80,
        "fullcodeline": "tmp += 2;"
    },
    {
        "line": 99,
        "fullcodeline": "&& !calc_seckey(ses)) {"
    },
    {
        "line": 100,
        "fullcodeline": "memcpy(tmp, ses->ntlmssp->ciphertext, CIFS_CPHTXT_SIZE);"
    },
    {
        "line": 101,
        "fullcodeline": "sec_blob->SessionKey.BufferOffset = cpu_to_le32(tmp - *pbuffer);"
    },
    {
        "line": 102,
        "fullcodeline": "sec_blob->SessionKey.Length = cpu_to_le16(CIFS_CPHTXT_SIZE);"
    },
    {
        "line": 103,
        "fullcodeline": "sec_blob->SessionKey.MaximumLength ="
    },
    {
        "line": 105,
        "fullcodeline": "tmp += CIFS_CPHTXT_SIZE;"
    },
    {
        "line": 45,
        "fullcodeline": "ses->auth_key.len - CIFS_SESS_KEY_SIZE);"
    },
    {
        "line": 49,
        "fullcodeline": "cpu_to_le16(ses->auth_key.len - CIFS_SESS_KEY_SIZE);"
    },
    {
        "line": 51,
        "fullcodeline": "cpu_to_le16(ses->auth_key.len - CIFS_SESS_KEY_SIZE);"
    },
    {
        "line": 56,
        "fullcodeline": "sec_blob->NtChallengeResponse.Length = 0;"
    },
    {
        "line": 57,
        "fullcodeline": "sec_blob->NtChallengeResponse.MaximumLength = 0;"
    },
    {
        "line": 67,
        "fullcodeline": "len = cifs_strtoUTF16((__le16 *)tmp, ses->domainName,"
    },
    {
        "line": 69,
        "fullcodeline": "len *= 2; /* unicode is 2 bytes each */"
    },
    {
        "line": 70,
        "fullcodeline": "sec_blob->DomainName.BufferOffset = cpu_to_le32(tmp - *pbuffer);"
    },
    {
        "line": 71,
        "fullcodeline": "sec_blob->DomainName.Length = cpu_to_le16(len);"
    },
    {
        "line": 72,
        "fullcodeline": "sec_blob->DomainName.MaximumLength = cpu_to_le16(len);"
    },
    {
        "line": 73,
        "fullcodeline": "tmp += len;"
    },
    {
        "line": 83,
        "fullcodeline": "len = cifs_strtoUTF16((__le16 *)tmp, ses->user_name,"
    },
    {
        "line": 85,
        "fullcodeline": "len *= 2; /* unicode is 2 bytes each */"
    },
    {
        "line": 86,
        "fullcodeline": "sec_blob->UserName.BufferOffset = cpu_to_le32(tmp - *pbuffer);"
    },
    {
        "line": 87,
        "fullcodeline": "sec_blob->UserName.Length = cpu_to_le16(len);"
    },
    {
        "line": 88,
        "fullcodeline": "sec_blob->UserName.MaximumLength = cpu_to_le16(len);"
    },
    {
        "line": 89,
        "fullcodeline": "tmp += len;"
    },
    {
        "line": 98,
        "fullcodeline": "(ses->ntlmssp->server_flags & NTLMSSP_NEGOTIATE_EXTENDED_SEC))"
    },
    {
        "line": 104,
        "fullcodeline": "cpu_to_le16(CIFS_CPHTXT_SIZE);"
    },
    {
        "line": 107,
        "fullcodeline": "sec_blob->SessionKey.BufferOffset = cpu_to_le32(tmp - *pbuffer);"
    },
    {
        "line": 108,
        "fullcodeline": "sec_blob->SessionKey.Length = 0;"
    },
    {
        "line": 109,
        "fullcodeline": "sec_blob->SessionKey.MaximumLength = 0;"
    }
]