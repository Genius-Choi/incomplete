[
    {
        "line": 15,
        "fullcodeline": "assert delay > 0, 'invalid delay'"
    },
    {
        "line": 22,
        "fullcodeline": "request = cherrypy.request"
    },
    {
        "line": 32,
        "fullcodeline": "datastore = getattr(cherrypy.request.app, '_ratelimit_datastore', None)"
    },
    {
        "line": 40,
        "fullcodeline": "token = (request.login or request.remote.ip) + '.' + (scope or request.path_info)"
    },
    {
        "line": 43,
        "fullcodeline": "hits = datastore.get_and_increment(token, delay, hit)"
    },
    {
        "line": 18,
        "fullcodeline": "if limit <= 0:"
    },
    {
        "line": 33,
        "fullcodeline": "if datastore is None:"
    },
    {
        "line": 23,
        "fullcodeline": "if methods is not None and request.method not in methods:"
    },
    {
        "line": 36,
        "fullcodeline": "datastore = storage_class(**conf)"
    },
    {
        "line": 45,
        "fullcodeline": "cherrypy.log("
    },
    {
        "line": 35,
        "fullcodeline": "storage_class = conf.get('storage_class', RamRateLimit)"
    },
    {
        "line": 46,
        "fullcodeline": "'check and increase rate limit for scope %s, limit %s, hits %s' % (token, limit, hits), 'TOOLS.RATELIMIT'"
    },
    {
        "line": 56,
        "fullcodeline": "raise cherrypy.HTTPError(return_status)"
    },
    {
        "line": 26,
        "fullcodeline": "'skip rate limit for HTTP method %s' % (request.method,),"
    },
    {
        "line": 52,
        "fullcodeline": "if hasattr(cherrypy, 'session'):"
    },
    {
        "line": 54,
        "fullcodeline": "raise cherrypy.HTTPRedirect(\"/\")"
    },
    {
        "line": 53,
        "fullcodeline": "cherrypy.session.clear()"
    }
]