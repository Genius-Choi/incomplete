[
    {
        "line": 21,
        "fullcodeline": "sb = sget(fs_type, proc_test_super, proc_set_super, flags, ns);"
    },
    {
        "line": 9,
        "fullcodeline": "if (flags & MS_KERNMOUNT) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (IS_ERR(sb))"
    },
    {
        "line": 30,
        "fullcodeline": "if (!sb->s_root) {"
    },
    {
        "line": 42,
        "fullcodeline": "return dget(sb->s_root);"
    },
    {
        "line": 10,
        "fullcodeline": "ns = (struct pid_namespace *)data;"
    },
    {
        "line": 11,
        "fullcodeline": "options = NULL;"
    },
    {
        "line": 25,
        "fullcodeline": "if (!proc_parse_options(options, ns)) {"
    },
    {
        "line": 31,
        "fullcodeline": "err = proc_fill_super(sb);"
    },
    {
        "line": 37,
        "fullcodeline": "sb->s_flags |= MS_ACTIVE;"
    },
    {
        "line": 39,
        "fullcodeline": "sb->s_iflags |= SB_I_NOEXEC;"
    },
    {
        "line": 13,
        "fullcodeline": "ns = task_active_pid_ns(current);"
    },
    {
        "line": 14,
        "fullcodeline": "options = data;"
    },
    {
        "line": 23,
        "fullcodeline": "return ERR_CAST(sb);"
    },
    {
        "line": 27,
        "fullcodeline": "return ERR_PTR(-EINVAL);"
    },
    {
        "line": 17,
        "fullcodeline": "if (!ns_capable(ns->user_ns, CAP_SYS_ADMIN))"
    },
    {
        "line": 34,
        "fullcodeline": "return ERR_PTR(err);"
    },
    {
        "line": 18,
        "fullcodeline": "return ERR_PTR(-EPERM);"
    }
]