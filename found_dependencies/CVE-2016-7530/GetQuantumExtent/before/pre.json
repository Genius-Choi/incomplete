[
    {
        "line": 7,
        "fullcodeline": "assert(quantum_info != (QuantumInfo *) NULL);"
    },
    {
        "line": 8,
        "fullcodeline": "assert(quantum_info->signature == MagickCoreSignature);"
    },
    {
        "line": 9,
        "fullcodeline": "packet_size=1;"
    },
    {
        "line": 23,
        "fullcodeline": "if (quantum_info->pack == MagickFalse)"
    },
    {
        "line": 25,
        "fullcodeline": "return((size_t) ((packet_size*image->columns*quantum_info->depth+7)/8));"
    },
    {
        "line": 12,
        "fullcodeline": "case GrayAlphaQuantum: packet_size=2; break;"
    },
    {
        "line": 13,
        "fullcodeline": "case IndexAlphaQuantum: packet_size=2; break;"
    },
    {
        "line": 14,
        "fullcodeline": "case RGBQuantum: packet_size=3; break;"
    },
    {
        "line": 15,
        "fullcodeline": "case BGRQuantum: packet_size=3; break;"
    },
    {
        "line": 16,
        "fullcodeline": "case RGBAQuantum: packet_size=4; break;"
    },
    {
        "line": 17,
        "fullcodeline": "case RGBOQuantum: packet_size=4; break;"
    },
    {
        "line": 18,
        "fullcodeline": "case BGRAQuantum: packet_size=4; break;"
    },
    {
        "line": 19,
        "fullcodeline": "case CMYKQuantum: packet_size=4; break;"
    },
    {
        "line": 20,
        "fullcodeline": "case CMYKAQuantum: packet_size=5; break;"
    },
    {
        "line": 24,
        "fullcodeline": "return((size_t) (packet_size*image->columns*((quantum_info->depth+7)/8)));"
    }
]