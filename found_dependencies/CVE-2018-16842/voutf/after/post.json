[
    {
        "line": 6,
        "fullcodeline": "size_t width = (79 - strlen(prefix));"
    },
    {
        "line": 7,
        "fullcodeline": "if(!config->mute) {"
    },
    {
        "line": 12,
        "fullcodeline": "print_buffer = curlx_mvaprintf(fmt, ap);"
    },
    {
        "line": 15,
        "fullcodeline": "len = strlen(print_buffer);"
    },
    {
        "line": 17,
        "fullcodeline": "ptr = print_buffer;"
    },
    {
        "line": 42,
        "fullcodeline": "curl_free(print_buffer);"
    },
    {
        "line": 13,
        "fullcodeline": "if(!print_buffer)"
    },
    {
        "line": 18,
        "fullcodeline": "while(len > 0) {"
    },
    {
        "line": 19,
        "fullcodeline": "fputs(prefix, config->errors);"
    },
    {
        "line": 21,
        "fullcodeline": "if(len > width) {"
    },
    {
        "line": 22,
        "fullcodeline": "size_t cut = width-1;"
    },
    {
        "line": 32,
        "fullcodeline": "(void)fwrite(ptr, cut + 1, 1, config->errors);"
    },
    {
        "line": 33,
        "fullcodeline": "fputs(\"\\n\", config->errors);"
    },
    {
        "line": 34,
        "fullcodeline": "ptr += cut + 1; /* skip the space too */"
    },
    {
        "line": 35,
        "fullcodeline": "len -= cut + 1;"
    },
    {
        "line": 24,
        "fullcodeline": "while(!ISSPACE(ptr[cut]) && cut) {"
    },
    {
        "line": 27,
        "fullcodeline": "if(0 == cut)"
    },
    {
        "line": 38,
        "fullcodeline": "fputs(ptr, config->errors);"
    },
    {
        "line": 39,
        "fullcodeline": "len = 0;"
    },
    {
        "line": 25,
        "fullcodeline": "cut--;"
    },
    {
        "line": 30,
        "fullcodeline": "cut = width-1;"
    }
]