[
    {
        "line": 8,
        "fullcodeline": "GF_TimeToSampleBox *stts = stbl->TimeToSample;"
    },
    {
        "line": 11,
        "fullcodeline": "stts->r_FirstSampleInEntry = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "*sampleNumber = 0;"
    },
    {
        "line": 120,
        "fullcodeline": "DTSs = (u64*)gf_malloc(sizeof(u64) * (stbl->SampleSize->sampleCount+2) );"
    },
    {
        "line": 122,
        "fullcodeline": "curDTS = 0;"
    },
    {
        "line": 123,
        "fullcodeline": "sampNum = 0;"
    },
    {
        "line": 124,
        "fullcodeline": "ent = NULL;"
    },
    {
        "line": 125,
        "fullcodeline": "inserted = 0;"
    },
    {
        "line": 154,
        "fullcodeline": "j=0;"
    },
    {
        "line": 155,
        "fullcodeline": "stts->nb_entries = 1;"
    },
    {
        "line": 156,
        "fullcodeline": "stts->entries[0].sampleCount = 1;"
    },
    {
        "line": 157,
        "fullcodeline": "stts->entries[0].sampleDelta = (u32) DTSs[1] /* - (DTS[0] which is 0)*/;"
    },
    {
        "line": 171,
        "fullcodeline": "gf_free(DTSs);"
    },
    {
        "line": 174,
        "fullcodeline": "stts->w_currentSampleNum = stbl->SampleSize->sampleCount + 1;"
    },
    {
        "line": 19,
        "fullcodeline": "if (!stts->nb_entries) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (DTS >= stts->w_LastDTS) {"
    },
    {
        "line": 121,
        "fullcodeline": "if (!DTSs) return GF_OUT_OF_MEM;"
    },
    {
        "line": 126,
        "fullcodeline": "for (i=0; i<stts->nb_entries; i++) {"
    },
    {
        "line": 140,
        "fullcodeline": "if (!inserted) {"
    },
    {
        "line": 146,
        "fullcodeline": "if (stts->nb_entries+3 >= stts->alloc_size) {"
    },
    {
        "line": 158,
        "fullcodeline": "for (i=1; i<stbl->SampleSize->sampleCount+1; i++) {"
    },
    {
        "line": 22,
        "fullcodeline": "stts->alloc_size = 1;"
    },
    {
        "line": 23,
        "fullcodeline": "stts->nb_entries = 1;"
    },
    {
        "line": 26,
        "fullcodeline": "stts->entries[0].sampleCount = nb_pack;"
    },
    {
        "line": 27,
        "fullcodeline": "stts->entries[0].sampleDelta = (nb_pack>1) ? 0 : LastAUDefDuration;"
    },
    {
        "line": 28,
        "fullcodeline": "(*sampleNumber) = 1;"
    },
    {
        "line": 29,
        "fullcodeline": "stts->w_currentSampleNum = nb_pack;"
    },
    {
        "line": 34,
        "fullcodeline": "u32 nb_extra = 0;"
    },
    {
        "line": 77,
        "fullcodeline": "ent->sampleCount --;"
    },
    {
        "line": 92,
        "fullcodeline": "ent = &stts->entries[stts->nb_entries];"
    },
    {
        "line": 93,
        "fullcodeline": "stts->nb_entries++;"
    },
    {
        "line": 104,
        "fullcodeline": "ent->sampleCount = 1;"
    },
    {
        "line": 105,
        "fullcodeline": "ent->sampleDelta = (u32) (DTS - stts->w_LastDTS);"
    },
    {
        "line": 107,
        "fullcodeline": "ent = &stts->entries[stts->nb_entries];"
    },
    {
        "line": 108,
        "fullcodeline": "stts->nb_entries++;"
    },
    {
        "line": 110,
        "fullcodeline": "ent->sampleCount = nb_pack;"
    },
    {
        "line": 111,
        "fullcodeline": "ent->sampleDelta = nb_extra;"
    },
    {
        "line": 112,
        "fullcodeline": "stts->w_LastDTS = DTS;"
    },
    {
        "line": 113,
        "fullcodeline": "(*sampleNumber) = stts->w_currentSampleNum + 1;"
    },
    {
        "line": 114,
        "fullcodeline": "stts->w_currentSampleNum += nb_pack;"
    },
    {
        "line": 141,
        "fullcodeline": "gf_free(DTSs);"
    },
    {
        "line": 147,
        "fullcodeline": "stts->alloc_size += 3;"
    },
    {
        "line": 148,
        "fullcodeline": "stts->entries = gf_realloc(stts->entries, sizeof(GF_SttsEntry)*stts->alloc_size);"
    },
    {
        "line": 150,
        "fullcodeline": "memset(&stts->entries[stts->nb_entries], 0, sizeof(GF_SttsEntry)*(stts->alloc_size - stts->nb_entries) );"
    },
    {
        "line": 25,
        "fullcodeline": "if (!stts->entries) return GF_OUT_OF_MEM;"
    },
    {
        "line": 36,
        "fullcodeline": "if (!ent->sampleDelta && (ent->sampleCount>1)) {"
    },
    {
        "line": 41,
        "fullcodeline": "if ((DTS == stts->w_LastDTS + ent->sampleDelta)"
    },
    {
        "line": 53,
        "fullcodeline": "if (ent->sampleCount == 1) {"
    },
    {
        "line": 79,
        "fullcodeline": "if (nb_pack>1)"
    },
    {
        "line": 82,
        "fullcodeline": "if (stts->alloc_size <= stts->nb_entries + nb_extra) {"
    },
    {
        "line": 95,
        "fullcodeline": "if (nb_pack==1) {"
    },
    {
        "line": 128,
        "fullcodeline": "for (j = 0; j<ent->sampleCount; j++) {"
    },
    {
        "line": 149,
        "fullcodeline": "if (!stts->entries) return GF_OUT_OF_MEM;"
    },
    {
        "line": 159,
        "fullcodeline": "if (i == stbl->SampleSize->sampleCount) {"
    },
    {
        "line": 37,
        "fullcodeline": "ent->sampleDelta = (u32) ( DTS / ent->sampleCount);"
    },
    {
        "line": 38,
        "fullcodeline": "stts->w_LastDTS = DTS - ent->sampleDelta;"
    },
    {
        "line": 44,
        "fullcodeline": "|| ((nb_pack>1) && ((DTS == stts->w_LastDTS) || (DTS == stts->w_LastDTS + 2*ent->sampleDelta) ))"
    },
    {
        "line": 46,
        "fullcodeline": "(*sampleNumber) = stts->w_currentSampleNum + 1;"
    },
    {
        "line": 47,
        "fullcodeline": "ent->sampleCount += nb_pack;"
    },
    {
        "line": 48,
        "fullcodeline": "stts->w_currentSampleNum += nb_pack;"
    },
    {
        "line": 49,
        "fullcodeline": "stts->w_LastDTS = DTS + ent->sampleDelta * (nb_pack-1);"
    },
    {
        "line": 62,
        "fullcodeline": "ent->sampleDelta = (u32) (DTS - stts->w_LastDTS);"
    },
    {
        "line": 65,
        "fullcodeline": "ent->sampleCount ++;"
    },
    {
        "line": 71,
        "fullcodeline": "stts->w_currentSampleNum ++;"
    },
    {
        "line": 72,
        "fullcodeline": "stts->w_LastDTS = DTS;"
    },
    {
        "line": 73,
        "fullcodeline": "(*sampleNumber) = stts->w_currentSampleNum;"
    },
    {
        "line": 80,
        "fullcodeline": "nb_extra = 1;"
    },
    {
        "line": 83,
        "fullcodeline": "ALLOC_INC(stts->alloc_size);"
    },
    {
        "line": 84,
        "fullcodeline": "stts->entries = gf_realloc(stts->entries, sizeof(GF_SttsEntry)*stts->alloc_size);"
    },
    {
        "line": 86,
        "fullcodeline": "memset(&stts->entries[stts->nb_entries], 0, sizeof(GF_SttsEntry)*(stts->alloc_size-stts->nb_entries) );"
    },
    {
        "line": 96,
        "fullcodeline": "ent->sampleCount = 2;"
    },
    {
        "line": 97,
        "fullcodeline": "ent->sampleDelta = (u32) (DTS - stts->w_LastDTS);"
    },
    {
        "line": 98,
        "fullcodeline": "stts->w_LastDTS = DTS;"
    },
    {
        "line": 99,
        "fullcodeline": "(*sampleNumber) = stts->w_currentSampleNum+1;"
    },
    {
        "line": 100,
        "fullcodeline": "stts->w_currentSampleNum += 1;"
    },
    {
        "line": 135,
        "fullcodeline": "DTSs[sampNum] = curDTS;"
    },
    {
        "line": 136,
        "fullcodeline": "curDTS += ent->sampleDelta;"
    },
    {
        "line": 137,
        "fullcodeline": "sampNum ++;"
    },
    {
        "line": 161,
        "fullcodeline": "stts->entries[j].sampleCount++;"
    },
    {
        "line": 35,
        "fullcodeline": "ent = &stts->entries[stts->nb_entries-1];"
    },
    {
        "line": 67,
        "fullcodeline": "if ((stts->nb_entries>=2) && (ent->sampleDelta== stts->entries[stts->nb_entries-2].sampleDelta)) {"
    },
    {
        "line": 85,
        "fullcodeline": "if (!stts->entries) return GF_OUT_OF_MEM;"
    },
    {
        "line": 129,
        "fullcodeline": "if (!inserted && (curDTS > DTS)) {"
    },
    {
        "line": 68,
        "fullcodeline": "stts->entries[stts->nb_entries-2].sampleCount += ent->sampleCount;"
    },
    {
        "line": 69,
        "fullcodeline": "stts->nb_entries--;"
    },
    {
        "line": 130,
        "fullcodeline": "DTSs[sampNum] = DTS;"
    },
    {
        "line": 131,
        "fullcodeline": "sampNum++;"
    },
    {
        "line": 132,
        "fullcodeline": "*sampleNumber = sampNum;"
    },
    {
        "line": 133,
        "fullcodeline": "inserted = 1;"
    },
    {
        "line": 162,
        "fullcodeline": "} else if (stts->entries[j].sampleDelta == (u32) ( DTSs[i+1] - DTSs[i]) ) {"
    },
    {
        "line": 90,
        "fullcodeline": "nb_extra = stts->entries[stts->nb_entries-1].sampleDelta;"
    },
    {
        "line": 163,
        "fullcodeline": "stts->entries[j].sampleCount ++;"
    },
    {
        "line": 165,
        "fullcodeline": "stts->nb_entries ++;"
    },
    {
        "line": 166,
        "fullcodeline": "j++;"
    },
    {
        "line": 167,
        "fullcodeline": "stts->entries[j].sampleCount = 1;"
    },
    {
        "line": 168,
        "fullcodeline": "stts->entries[j].sampleDelta = (u32) (DTSs[i+1] - DTSs[i]);"
    }
]