[
    {
        "line": 6,
        "fullcodeline": "ctts = stbl->CompositionOffset;"
    },
    {
        "line": 8,
        "fullcodeline": "ctts->unpack_mode = 1;"
    },
    {
        "line": 10,
        "fullcodeline": "packed = ctts->entries;"
    },
    {
        "line": 11,
        "fullcodeline": "count = ctts->nb_entries;"
    },
    {
        "line": 12,
        "fullcodeline": "ctts->entries = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "ctts->nb_entries = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "ctts->alloc_size = 0;"
    },
    {
        "line": 29,
        "fullcodeline": "gf_free(packed);"
    },
    {
        "line": 7,
        "fullcodeline": "if (!ctts || ctts->unpack_mode) return GF_OK;"
    },
    {
        "line": 15,
        "fullcodeline": "for (i=0; i<count; i++) {"
    },
    {
        "line": 31,
        "fullcodeline": "while (stbl->SampleSize->sampleCount > ctts->nb_entries) {"
    },
    {
        "line": 38,
        "fullcodeline": "ctts->entries[ctts->nb_entries].decodingOffset = 0;"
    },
    {
        "line": 39,
        "fullcodeline": "ctts->entries[ctts->nb_entries].sampleCount = 1;"
    },
    {
        "line": 40,
        "fullcodeline": "ctts->nb_entries++;"
    },
    {
        "line": 16,
        "fullcodeline": "for (j=0; j<packed[i].sampleCount; j++) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (ctts->nb_entries == ctts->alloc_size) {"
    },
    {
        "line": 25,
        "fullcodeline": "ctts->entries[ctts->nb_entries].sampleCount = 1;"
    },
    {
        "line": 26,
        "fullcodeline": "ctts->nb_entries++;"
    },
    {
        "line": 33,
        "fullcodeline": "ALLOC_INC(ctts->alloc_size);"
    },
    {
        "line": 34,
        "fullcodeline": "ctts->entries = gf_realloc(ctts->entries, sizeof(GF_DttsEntry)*ctts->alloc_size);"
    },
    {
        "line": 36,
        "fullcodeline": "memset(&ctts->entries[ctts->nb_entries], 0, sizeof(GF_DttsEntry)*(ctts->alloc_size-ctts->nb_entries) );"
    },
    {
        "line": 17,
        "fullcodeline": "if (ctts->nb_entries == ctts->alloc_size) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (!ctts->entries) return GF_OUT_OF_MEM;"
    },
    {
        "line": 18,
        "fullcodeline": "ALLOC_INC(ctts->alloc_size);"
    },
    {
        "line": 19,
        "fullcodeline": "ctts->entries = gf_realloc(ctts->entries, sizeof(GF_DttsEntry)*ctts->alloc_size);"
    },
    {
        "line": 22,
        "fullcodeline": "memset(&ctts->entries[ctts->nb_entries], 0, sizeof(GF_DttsEntry)*(ctts->alloc_size-ctts->nb_entries) );"
    },
    {
        "line": 20,
        "fullcodeline": "if (!ctts->entries) return GF_OUT_OF_MEM;"
    }
]