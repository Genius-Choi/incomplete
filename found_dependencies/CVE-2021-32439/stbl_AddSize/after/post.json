[
    {
        "line": 80,
        "fullcodeline": "stsz->sampleCount++;"
    },
    {
        "line": 5,
        "fullcodeline": "if (!stsz /*|| !size */ || !sampleNumber) return GF_BAD_PARAM;"
    },
    {
        "line": 7,
        "fullcodeline": "if (sampleNumber > stsz->sampleCount + 1) return GF_BAD_PARAM;"
    },
    {
        "line": 11,
        "fullcodeline": "if (nb_pack>1)"
    },
    {
        "line": 16,
        "fullcodeline": "if (stsz->sizes == NULL) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (stsz->sampleCount + 1 == sampleNumber) {"
    },
    {
        "line": 12,
        "fullcodeline": "size /= nb_pack;"
    },
    {
        "line": 33,
        "fullcodeline": "stsz->sizes = (u32*)gf_malloc(sizeof(u32) * (stsz->sampleCount + 1));"
    },
    {
        "line": 35,
        "fullcodeline": "stsz->alloc_size = stsz->sampleCount + 1;"
    },
    {
        "line": 37,
        "fullcodeline": "k = 0;"
    },
    {
        "line": 49,
        "fullcodeline": "stsz->sampleSize = 0;"
    },
    {
        "line": 50,
        "fullcodeline": "stsz->sampleCount++;"
    },
    {
        "line": 64,
        "fullcodeline": "stsz->sizes[stsz->sampleCount] = size;"
    },
    {
        "line": 18,
        "fullcodeline": "if (! stsz->sampleCount && (stsz->type != GF_ISOM_BOX_TYPE_STZ2) ) {"
    },
    {
        "line": 24,
        "fullcodeline": "if (stsz->sampleSize == size) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (nb_pack>1) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (!stsz->sizes) return GF_OUT_OF_MEM;"
    },
    {
        "line": 38,
        "fullcodeline": "for (i = 0 ; i < stsz->sampleCount; i++) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (stsz->sampleCount + 1 == sampleNumber) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (!stsz->alloc_size) stsz->alloc_size = stsz->sampleCount;"
    },
    {
        "line": 58,
        "fullcodeline": "if (stsz->sampleCount == stsz->alloc_size) {"
    },
    {
        "line": 66,
        "fullcodeline": "newSizes = (u32*)gf_malloc(sizeof(u32)*(1 + stsz->sampleCount) );"
    },
    {
        "line": 68,
        "fullcodeline": "k = 0;"
    },
    {
        "line": 76,
        "fullcodeline": "gf_free(stsz->sizes);"
    },
    {
        "line": 77,
        "fullcodeline": "stsz->sizes = newSizes;"
    },
    {
        "line": 78,
        "fullcodeline": "stsz->alloc_size = 1 + stsz->sampleCount;"
    },
    {
        "line": 19,
        "fullcodeline": "stsz->sampleCount = nb_pack;"
    },
    {
        "line": 20,
        "fullcodeline": "stsz->sampleSize = size;"
    },
    {
        "line": 25,
        "fullcodeline": "stsz->sampleCount += nb_pack;"
    },
    {
        "line": 29,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Inserting packed samples with different sizes is not yet supported\\n\" ));"
    },
    {
        "line": 43,
        "fullcodeline": "stsz->sizes[i+k] = stsz->sampleSize;"
    },
    {
        "line": 47,
        "fullcodeline": "stsz->sizes[stsz->sampleCount] = size;"
    },
    {
        "line": 59,
        "fullcodeline": "ALLOC_INC(stsz->alloc_size);"
    },
    {
        "line": 60,
        "fullcodeline": "stsz->sizes = gf_realloc(stsz->sizes, sizeof(u32)*(stsz->alloc_size) );"
    },
    {
        "line": 62,
        "fullcodeline": "memset(&stsz->sizes[stsz->sampleCount], 0, sizeof(u32)*(stsz->alloc_size - stsz->sampleCount) );"
    },
    {
        "line": 67,
        "fullcodeline": "if (!newSizes) return GF_OUT_OF_MEM;"
    },
    {
        "line": 69,
        "fullcodeline": "for (i = 0; i < stsz->sampleCount; i++) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (i + 1 == sampleNumber) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (!stsz->sizes) return GF_OUT_OF_MEM;"
    },
    {
        "line": 40,
        "fullcodeline": "stsz->sizes[i + k] = size;"
    },
    {
        "line": 41,
        "fullcodeline": "k = 1;"
    },
    {
        "line": 70,
        "fullcodeline": "if (i + 1 == sampleNumber) {"
    },
    {
        "line": 71,
        "fullcodeline": "newSizes[i + k] = size;"
    },
    {
        "line": 72,
        "fullcodeline": "k = 1;"
    },
    {
        "line": 74,
        "fullcodeline": "newSizes[i + k] = stsz->sizes[i];"
    }
]