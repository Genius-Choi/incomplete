[
    {
        "line": 78,
        "fullcodeline": "stsz->sampleCount++;"
    },
    {
        "line": 5,
        "fullcodeline": "if (!stsz /*|| !size */ || !sampleNumber) return GF_BAD_PARAM;"
    },
    {
        "line": 7,
        "fullcodeline": "if (sampleNumber > stsz->sampleCount + 1) return GF_BAD_PARAM;"
    },
    {
        "line": 9,
        "fullcodeline": "if (!nb_pack_samples) nb_pack_samples = 1;"
    },
    {
        "line": 14,
        "fullcodeline": "if (stsz->sizes == NULL) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (stsz->sampleCount + 1 == sampleNumber) {"
    },
    {
        "line": 31,
        "fullcodeline": "stsz->sizes = (u32*)gf_malloc(sizeof(u32) * (stsz->sampleCount + 1));"
    },
    {
        "line": 33,
        "fullcodeline": "stsz->alloc_size = stsz->sampleCount + 1;"
    },
    {
        "line": 35,
        "fullcodeline": "k = 0;"
    },
    {
        "line": 47,
        "fullcodeline": "stsz->sampleSize = 0;"
    },
    {
        "line": 48,
        "fullcodeline": "stsz->sampleCount++;"
    },
    {
        "line": 62,
        "fullcodeline": "stsz->sizes[stsz->sampleCount] = size;"
    },
    {
        "line": 16,
        "fullcodeline": "if (! stsz->sampleCount && (stsz->type != GF_ISOM_BOX_TYPE_STZ2) ) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (stsz->sampleSize == size) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (nb_pack_samples>1) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (!stsz->sizes) return GF_OUT_OF_MEM;"
    },
    {
        "line": 36,
        "fullcodeline": "for (i = 0 ; i < stsz->sampleCount; i++) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (stsz->sampleCount + 1 == sampleNumber) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (!stsz->alloc_size) stsz->alloc_size = stsz->sampleCount;"
    },
    {
        "line": 56,
        "fullcodeline": "if (stsz->sampleCount == stsz->alloc_size) {"
    },
    {
        "line": 64,
        "fullcodeline": "newSizes = (u32*)gf_malloc(sizeof(u32)*(1 + stsz->sampleCount) );"
    },
    {
        "line": 66,
        "fullcodeline": "k = 0;"
    },
    {
        "line": 74,
        "fullcodeline": "gf_free(stsz->sizes);"
    },
    {
        "line": 75,
        "fullcodeline": "stsz->sizes = newSizes;"
    },
    {
        "line": 76,
        "fullcodeline": "stsz->alloc_size = 1 + stsz->sampleCount;"
    },
    {
        "line": 10,
        "fullcodeline": "else if (nb_pack_samples>1)"
    },
    {
        "line": 17,
        "fullcodeline": "stsz->sampleCount = nb_pack_samples;"
    },
    {
        "line": 18,
        "fullcodeline": "stsz->sampleSize = size;"
    },
    {
        "line": 23,
        "fullcodeline": "stsz->sampleCount += nb_pack_samples;"
    },
    {
        "line": 27,
        "fullcodeline": "GF_LOG(GF_LOG_ERROR, GF_LOG_CONTAINER, (\"[iso file] Inserting packed samples with different sizes is not yet supported\\n\" ));"
    },
    {
        "line": 41,
        "fullcodeline": "stsz->sizes[i+k] = stsz->sampleSize;"
    },
    {
        "line": 45,
        "fullcodeline": "stsz->sizes[stsz->sampleCount] = size;"
    },
    {
        "line": 57,
        "fullcodeline": "ALLOC_INC(stsz->alloc_size);"
    },
    {
        "line": 58,
        "fullcodeline": "stsz->sizes = gf_realloc(stsz->sizes, sizeof(u32)*(stsz->alloc_size) );"
    },
    {
        "line": 60,
        "fullcodeline": "memset(&stsz->sizes[stsz->sampleCount], 0, sizeof(u32)*(stsz->alloc_size - stsz->sampleCount) );"
    },
    {
        "line": 65,
        "fullcodeline": "if (!newSizes) return GF_OUT_OF_MEM;"
    },
    {
        "line": 67,
        "fullcodeline": "for (i = 0; i < stsz->sampleCount; i++) {"
    },
    {
        "line": 11,
        "fullcodeline": "size /= nb_pack_samples;"
    },
    {
        "line": 37,
        "fullcodeline": "if (i + 1 == sampleNumber) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (!stsz->sizes) return GF_OUT_OF_MEM;"
    },
    {
        "line": 38,
        "fullcodeline": "stsz->sizes[i + k] = size;"
    },
    {
        "line": 39,
        "fullcodeline": "k = 1;"
    },
    {
        "line": 68,
        "fullcodeline": "if (i + 1 == sampleNumber) {"
    },
    {
        "line": 69,
        "fullcodeline": "newSizes[i + k] = size;"
    },
    {
        "line": 70,
        "fullcodeline": "k = 1;"
    },
    {
        "line": 72,
        "fullcodeline": "newSizes[i + k] = stsz->sizes[i];"
    }
]