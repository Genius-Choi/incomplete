[
    {
        "line": 7,
        "fullcodeline": "unsigned long vaddr = *position;"
    },
    {
        "line": 8,
        "fullcodeline": "unsigned long remainder = *nr_pages;"
    },
    {
        "line": 9,
        "fullcodeline": "struct hstate *h = hstate_vma(vma);"
    },
    {
        "line": 10,
        "fullcodeline": "int err = -EFAULT;"
    },
    {
        "line": 12,
        "fullcodeline": "while (vaddr < vma->vm_end && remainder) {"
    },
    {
        "line": 156,
        "fullcodeline": "return i ? i : err;"
    },
    {
        "line": 14,
        "fullcodeline": "spinlock_t *ptl = NULL;"
    },
    {
        "line": 34,
        "fullcodeline": "pte = huge_pte_offset(mm, vaddr & huge_page_mask(h),"
    },
    {
        "line": 38,
        "fullcodeline": "absent = !pte || huge_pte_none(huge_ptep_get(pte));"
    },
    {
        "line": 110,
        "fullcodeline": "pfn_offset = (vaddr & ~huge_page_mask(h)) >> PAGE_SHIFT;"
    },
    {
        "line": 111,
        "fullcodeline": "page = pte_page(huge_ptep_get(pte));"
    },
    {
        "line": 134,
        "fullcodeline": "vaddr += PAGE_SIZE;"
    },
    {
        "line": 135,
        "fullcodeline": "++pfn_offset;"
    },
    {
        "line": 136,
        "fullcodeline": "--remainder;"
    },
    {
        "line": 137,
        "fullcodeline": "++i;"
    },
    {
        "line": 146,
        "fullcodeline": "spin_unlock(ptl);"
    },
    {
        "line": 22,
        "fullcodeline": "if (fatal_signal_pending(current)) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (absent && (flags & FOLL_DUMP) &&"
    },
    {
        "line": 65,
        "fullcodeline": "if (absent || is_swap_pte(huge_ptep_get(pte)) ||"
    },
    {
        "line": 117,
        "fullcodeline": "if (unlikely(page_count(page) <= 0)) {"
    },
    {
        "line": 138,
        "fullcodeline": "if (vaddr < vma->vm_end && remainder &&"
    },
    {
        "line": 23,
        "fullcodeline": "remainder = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "huge_page_size(h));"
    },
    {
        "line": 37,
        "fullcodeline": "ptl = huge_pte_lock(h, mm, pte);"
    },
    {
        "line": 48,
        "fullcodeline": "!hugetlbfs_pagecache_present(h, vma, vaddr)) {"
    },
    {
        "line": 51,
        "fullcodeline": "remainder = 0;"
    },
    {
        "line": 66,
        "fullcodeline": "((flags & FOLL_WRITE) &&"
    },
    {
        "line": 69,
        "fullcodeline": "unsigned int fault_flags = 0;"
    },
    {
        "line": 85,
        "fullcodeline": "ret = hugetlb_fault(mm, vma, vaddr, fault_flags);"
    },
    {
        "line": 127,
        "fullcodeline": "pages[i] = mem_map_offset(page, pfn_offset);"
    },
    {
        "line": 128,
        "fullcodeline": "get_page(pages[i]);"
    },
    {
        "line": 132,
        "fullcodeline": "vmas[i] = vma;"
    },
    {
        "line": 139,
        "fullcodeline": "pfn_offset < pages_per_huge_page(h)) {"
    },
    {
        "line": 67,
        "fullcodeline": "!huge_pte_write(huge_ptep_get(pte)))) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (flags & FOLL_WRITE)"
    },
    {
        "line": 77,
        "fullcodeline": "if (flags & FOLL_NOWAIT)"
    },
    {
        "line": 80,
        "fullcodeline": "if (flags & FOLL_TRIED) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (ret & VM_FAULT_ERROR) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (ret & VM_FAULT_RETRY) {"
    },
    {
        "line": 72,
        "fullcodeline": "spin_unlock(ptl);"
    },
    {
        "line": 74,
        "fullcodeline": "fault_flags |= FAULT_FLAG_WRITE;"
    },
    {
        "line": 76,
        "fullcodeline": "fault_flags |= FAULT_FLAG_ALLOW_RETRY;"
    },
    {
        "line": 78,
        "fullcodeline": "fault_flags |= FAULT_FLAG_ALLOW_RETRY |"
    },
    {
        "line": 81,
        "fullcodeline": "VM_WARN_ON_ONCE(fault_flags &"
    },
    {
        "line": 83,
        "fullcodeline": "fault_flags |= FAULT_FLAG_TRIED;"
    },
    {
        "line": 87,
        "fullcodeline": "err = vm_fault_to_errno(ret, flags);"
    },
    {
        "line": 88,
        "fullcodeline": "remainder = 0;"
    },
    {
        "line": 95,
        "fullcodeline": "*nr_pages = 0;"
    },
    {
        "line": 120,
        "fullcodeline": "remainder = 0;"
    },
    {
        "line": 121,
        "fullcodeline": "err = -ENOMEM;"
    },
    {
        "line": 92,
        "fullcodeline": "if (nonblocking &&"
    },
    {
        "line": 93,
        "fullcodeline": "!(fault_flags & FAULT_FLAG_RETRY_NOWAIT))"
    },
    {
        "line": 94,
        "fullcodeline": "*nonblocking = 0;"
    }
]