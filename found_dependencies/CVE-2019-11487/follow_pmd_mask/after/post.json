[
    {
        "line": 9,
        "fullcodeline": "struct mm_struct *mm = vma->vm_mm;"
    },
    {
        "line": 11,
        "fullcodeline": "pmd = pmd_offset(pudp, address);"
    },
    {
        "line": 16,
        "fullcodeline": "pmdval = READ_ONCE(*pmd);"
    },
    {
        "line": 64,
        "fullcodeline": "ptl = pmd_lock(mm, pmd);"
    },
    {
        "line": 106,
        "fullcodeline": "page = follow_trans_huge_pmd(vma, address, pmd, flags);"
    },
    {
        "line": 107,
        "fullcodeline": "spin_unlock(ptl);"
    },
    {
        "line": 108,
        "fullcodeline": "ctx->page_mask = HPAGE_PMD_NR - 1;"
    },
    {
        "line": 17,
        "fullcodeline": "if (pmd_none(pmdval))"
    },
    {
        "line": 19,
        "fullcodeline": "if (pmd_huge(pmdval) && vma->vm_flags & VM_HUGETLB) {"
    },
    {
        "line": 25,
        "fullcodeline": "if (is_hugepd(__hugepd(pmd_val(pmdval)))) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (!pmd_present(pmdval)) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (pmd_devmap(pmdval)) {"
    },
    {
        "line": 57,
        "fullcodeline": "if (likely(!pmd_trans_huge(pmdval)))"
    },
    {
        "line": 60,
        "fullcodeline": "if ((flags & FOLL_NUMA) && pmd_protnone(pmdval))"
    },
    {
        "line": 65,
        "fullcodeline": "if (unlikely(pmd_none(*pmd))) {"
    },
    {
        "line": 69,
        "fullcodeline": "if (unlikely(!pmd_present(*pmd))) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (unlikely(!pmd_trans_huge(*pmd))) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (flags & FOLL_SPLIT) {"
    },
    {
        "line": 20,
        "fullcodeline": "page = follow_huge_pmd(mm, address, pmd, flags);"
    },
    {
        "line": 26,
        "fullcodeline": "page = follow_huge_pd(vma, address,"
    },
    {
        "line": 37,
        "fullcodeline": "VM_BUG_ON(thp_migration_supported() &&"
    },
    {
        "line": 41,
        "fullcodeline": "pmdval = READ_ONCE(*pmd);"
    },
    {
        "line": 51,
        "fullcodeline": "ptl = pmd_lock(mm, pmd);"
    },
    {
        "line": 52,
        "fullcodeline": "page = follow_devmap_pmd(vma, address, pmd, flags, &ctx->pgmap);"
    },
    {
        "line": 53,
        "fullcodeline": "spin_unlock(ptl);"
    },
    {
        "line": 66,
        "fullcodeline": "spin_unlock(ptl);"
    },
    {
        "line": 70,
        "fullcodeline": "spin_unlock(ptl);"
    },
    {
        "line": 73,
        "fullcodeline": "pmd_migration_entry_wait(mm, pmd);"
    },
    {
        "line": 77,
        "fullcodeline": "spin_unlock(ptl);"
    },
    {
        "line": 82,
        "fullcodeline": "page = pmd_page(*pmd);"
    },
    {
        "line": 18,
        "fullcodeline": "return no_page_table(vma, flags);"
    },
    {
        "line": 23,
        "fullcodeline": "return no_page_table(vma, flags);"
    },
    {
        "line": 31,
        "fullcodeline": "return no_page_table(vma, flags);"
    },
    {
        "line": 35,
        "fullcodeline": "if (likely(!(flags & FOLL_MIGRATION)))"
    },
    {
        "line": 39,
        "fullcodeline": "if (is_pmd_migration_entry(pmdval))"
    },
    {
        "line": 46,
        "fullcodeline": "if (pmd_none(pmdval))"
    },
    {
        "line": 58,
        "fullcodeline": "return follow_page_pte(vma, address, pmd, flags, &ctx->pgmap);"
    },
    {
        "line": 61,
        "fullcodeline": "return no_page_table(vma, flags);"
    },
    {
        "line": 67,
        "fullcodeline": "return no_page_table(vma, flags);"
    },
    {
        "line": 71,
        "fullcodeline": "if (likely(!(flags & FOLL_MIGRATION)))"
    },
    {
        "line": 78,
        "fullcodeline": "return follow_page_pte(vma, address, pmd, flags, &ctx->pgmap);"
    },
    {
        "line": 83,
        "fullcodeline": "if (is_huge_zero_page(page)) {"
    },
    {
        "line": 103,
        "fullcodeline": "return ret ? ERR_PTR(ret) :"
    },
    {
        "line": 27,
        "fullcodeline": "__hugepd(pmd_val(pmdval)), flags,"
    },
    {
        "line": 38,
        "fullcodeline": "!is_pmd_migration_entry(pmdval));"
    },
    {
        "line": 40,
        "fullcodeline": "pmd_migration_entry_wait(mm, pmd);"
    },
    {
        "line": 84,
        "fullcodeline": "spin_unlock(ptl);"
    },
    {
        "line": 85,
        "fullcodeline": "ret = 0;"
    },
    {
        "line": 86,
        "fullcodeline": "split_huge_pmd(vma, pmd, address);"
    },
    {
        "line": 104,
        "fullcodeline": "follow_page_pte(vma, address, pmd, flags, &ctx->pgmap);"
    },
    {
        "line": 36,
        "fullcodeline": "return no_page_table(vma, flags);"
    },
    {
        "line": 47,
        "fullcodeline": "return no_page_table(vma, flags);"
    },
    {
        "line": 72,
        "fullcodeline": "return no_page_table(vma, flags);"
    },
    {
        "line": 87,
        "fullcodeline": "if (pmd_trans_unstable(pmd))"
    },
    {
        "line": 94,
        "fullcodeline": "spin_unlock(ptl);"
    },
    {
        "line": 95,
        "fullcodeline": "lock_page(page);"
    },
    {
        "line": 96,
        "fullcodeline": "ret = split_huge_page(page);"
    },
    {
        "line": 97,
        "fullcodeline": "unlock_page(page);"
    },
    {
        "line": 98,
        "fullcodeline": "put_page(page);"
    },
    {
        "line": 88,
        "fullcodeline": "ret = -EBUSY;"
    },
    {
        "line": 90,
        "fullcodeline": "if (unlikely(!try_get_page(page))) {"
    },
    {
        "line": 99,
        "fullcodeline": "if (pmd_none(*pmd))"
    },
    {
        "line": 91,
        "fullcodeline": "spin_unlock(ptl);"
    },
    {
        "line": 92,
        "fullcodeline": "return ERR_PTR(-ENOMEM);"
    },
    {
        "line": 100,
        "fullcodeline": "return no_page_table(vma, flags);"
    }
]