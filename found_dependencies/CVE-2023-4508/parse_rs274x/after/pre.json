[
    {
        "line": 5,
        "fullcodeline": "int op[2];"
    },
    {
        "line": 6,
        "fullcodeline": "char str[3];"
    },
    {
        "line": 8,
        "fullcodeline": "gerbv_aperture_t *a = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "gdouble scale = 1.0;"
    },
    {
        "line": 12,
        "fullcodeline": "gerbv_error_list_t *error_list = stats->error_list;"
    },
    {
        "line": 17,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 18,
        "fullcodeline": "op[1] = gerb_fgetc(fd);"
    },
    {
        "line": 645,
        "fullcodeline": "gerb_ungetc(fd);"
    },
    {
        "line": 14,
        "fullcodeline": "if (state->state->unit == GERBV_UNIT_MM)"
    },
    {
        "line": 20,
        "fullcodeline": "if (op[0] == EOF || op[1] == EOF)"
    },
    {
        "line": 24,
        "fullcodeline": "switch (A2I(op[0], op[1])){"
    },
    {
        "line": 15,
        "fullcodeline": "scale = 25.4;"
    },
    {
        "line": 21,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 30,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 31,
        "fullcodeline": "op[1] = gerb_fgetc(fd);"
    },
    {
        "line": 45,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 46,
        "fullcodeline": "op[1] = gerb_fgetc(fd);"
    },
    {
        "line": 100,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 172,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 206,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 207,
        "fullcodeline": "op[1] = gerb_fgetc(fd);"
    },
    {
        "line": 230,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 285,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 321,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 322,
        "fullcodeline": "op[1] = gerb_fgetc(fd);"
    },
    {
        "line": 355,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 421,
        "fullcodeline": "tmp = gerb_fgetint(fd, NULL) % 360;"
    },
    {
        "line": 443,
        "fullcodeline": "a = (gerbv_aperture_t *) g_new0 (gerbv_aperture_t,1);"
    },
    {
        "line": 445,
        "fullcodeline": "ano = parse_aperture_definition(fd, a, image, scale, line_num_p);"
    },
    {
        "line": 475,
        "fullcodeline": "case A2I('A','M'): /* Aperture Macro */"
    },
    {
        "line": 476,
        "fullcodeline": "tmp_amacro = image->amacro;"
    },
    {
        "line": 477,
        "fullcodeline": "image->amacro = parse_aperture_macro(fd);"
    },
    {
        "line": 513,
        "fullcodeline": "state->layer = gerbv_image_return_new_layer (state->layer);"
    },
    {
        "line": 516,
        "fullcodeline": "knockoutMeasure = FALSE;"
    },
    {
        "line": 517,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 537,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 580,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 627,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 636,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 647,
        "fullcodeline": "tmp = gerb_fgetc(fd);"
    },
    {
        "line": 648,
        "fullcodeline": "} while (tmp != EOF && tmp != '*');"
    },
    {
        "line": 22,
        "fullcodeline": "_(\"Unexpected EOF found in file \\\"%s\\\"\"), fd->filename);"
    },
    {
        "line": 32,
        "fullcodeline": "state->state = gerbv_image_return_new_netstate (state->state);"
    },
    {
        "line": 34,
        "fullcodeline": "if (op[0] == EOF || op[1] == EOF)"
    },
    {
        "line": 38,
        "fullcodeline": "if (((op[0] == 'A') && (op[1] == 'Y')) ||"
    },
    {
        "line": 61,
        "fullcodeline": "image->format = g_new0 (gerbv_format_t,1);"
    },
    {
        "line": 63,
        "fullcodeline": "switch (gerb_fgetc(fd)) {"
    },
    {
        "line": 84,
        "fullcodeline": "switch (gerb_fgetc(fd)) {"
    },
    {
        "line": 173,
        "fullcodeline": "state->state = gerbv_image_return_new_netstate (state->state);"
    },
    {
        "line": 213,
        "fullcodeline": "switch (A2I(op[0],op[1])) {"
    },
    {
        "line": 251,
        "fullcodeline": "gchar *includeFilename = gerb_fgetstring(fd, '*');"
    },
    {
        "line": 305,
        "fullcodeline": "state->state = gerbv_image_return_new_netstate (state->state);"
    },
    {
        "line": 328,
        "fullcodeline": "switch (A2I(op[0],op[1])) {"
    },
    {
        "line": 394,
        "fullcodeline": "image->info->name = gerb_fgetstring(fd, '*');"
    },
    {
        "line": 398,
        "fullcodeline": "for (ano = 0; ano < 3; ano++) {"
    },
    {
        "line": 422,
        "fullcodeline": "if (tmp == 0)"
    },
    {
        "line": 438,
        "fullcodeline": "image->info->plotterFilm = gerb_fgetstring(fd, '*');"
    },
    {
        "line": 446,
        "fullcodeline": "if (ano == -1) {"
    },
    {
        "line": 493,
        "fullcodeline": "state->layer = gerbv_image_return_new_layer (state->layer);"
    },
    {
        "line": 494,
        "fullcodeline": "state->layer->name = gerb_fgetstring(fd, '*');"
    },
    {
        "line": 497,
        "fullcodeline": "state->layer = gerbv_image_return_new_layer (state->layer);"
    },
    {
        "line": 498,
        "fullcodeline": "switch (gerb_fgetc(fd)) {"
    },
    {
        "line": 518,
        "fullcodeline": "if (op[0] == '*') { /* Disable previous SR parameters */"
    },
    {
        "line": 579,
        "fullcodeline": "state->layer = gerbv_image_return_new_layer (state->layer);"
    },
    {
        "line": 581,
        "fullcodeline": "if (op[0] == '*') { /* Disable previous SR parameters */"
    },
    {
        "line": 624,
        "fullcodeline": "state->layer = gerbv_image_return_new_layer (state->layer);"
    },
    {
        "line": 626,
        "fullcodeline": "state->layer->rotation = DEG2RAD(gerb_fgetdouble(fd));"
    },
    {
        "line": 637,
        "fullcodeline": "_(\"Unknown RS-274X extension found %%%s%s%% \""
    },
    {
        "line": 639,
        "fullcodeline": "gerbv_escape_char(op[0]), gerbv_escape_char(op[1]),"
    },
    {
        "line": 35,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 39,
        "fullcodeline": "((op[0] == 'B') && (op[1] == 'X'))) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (op[0] == EOF || op[1] == EOF)"
    },
    {
        "line": 49,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 52,
        "fullcodeline": "if (((op[0] == 'A') && (op[1] == 'Y')) ||"
    },
    {
        "line": 53,
        "fullcodeline": "((op[0] == 'B') && (op[1] == 'X'))) {"
    },
    {
        "line": 68,
        "fullcodeline": "image->format->omit_zeros = GERBV_OMIT_ZEROS_TRAILING;"
    },
    {
        "line": 71,
        "fullcodeline": "image->format->omit_zeros = GERBV_OMIT_ZEROS_EXPLICIT;"
    },
    {
        "line": 74,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 78,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_WARNING, -1,"
    },
    {
        "line": 80,
        "fullcodeline": "gerb_ungetc(fd);"
    },
    {
        "line": 89,
        "fullcodeline": "image->format->coordinate = GERBV_COORDINATE_INCREMENTAL;"
    },
    {
        "line": 92,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 96,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_WARNING, -1,"
    },
    {
        "line": 101,
        "fullcodeline": "while((op[0] != '*')&&(op[0] != EOF)) {"
    },
    {
        "line": 168,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 175,
        "fullcodeline": "while ((op[0] != '*')&&(op[0] != EOF)) {"
    },
    {
        "line": 202,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 209,
        "fullcodeline": "if (op[0] == EOF || op[1] == EOF)"
    },
    {
        "line": 210,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 216,
        "fullcodeline": "state->state->unit = GERBV_UNIT_INCH;"
    },
    {
        "line": 223,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 232,
        "fullcodeline": "while ((op[0] != '*')&&(op[0] != EOF)) {"
    },
    {
        "line": 246,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 287,
        "fullcodeline": "while ((op[0] != '*')&&(op[0] != EOF)) {"
    },
    {
        "line": 301,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 306,
        "fullcodeline": "if (gerb_fgetc(fd) == 'A')"
    },
    {
        "line": 310,
        "fullcodeline": "if (gerb_fgetc(fd) == 'B')"
    },
    {
        "line": 324,
        "fullcodeline": "if (op[0] == EOF || op[1] == EOF)"
    },
    {
        "line": 325,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 330,
        "fullcodeline": "image->info->encoding = GERBV_ENCODING_ASCII;"
    },
    {
        "line": 333,
        "fullcodeline": "image->info->encoding = GERBV_ENCODING_EBCDIC;"
    },
    {
        "line": 336,
        "fullcodeline": "image->info->encoding = GERBV_ENCODING_BCD;"
    },
    {
        "line": 339,
        "fullcodeline": "image->info->encoding = GERBV_ENCODING_ISO_ASCII;"
    },
    {
        "line": 342,
        "fullcodeline": "image->info->encoding = GERBV_ENCODING_EIA;"
    },
    {
        "line": 345,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 360,
        "fullcodeline": "while ((op[0] != '*')&&(op[0] != EOF)) {"
    },
    {
        "line": 390,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 399,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 405,
        "fullcodeline": "str[ano] = (char)op[0];"
    },
    {
        "line": 408,
        "fullcodeline": "if (strncmp(str, \"POS\", 3) == 0)"
    },
    {
        "line": 409,
        "fullcodeline": "image->info->polarity = GERBV_POLARITY_POSITIVE;"
    },
    {
        "line": 479,
        "fullcodeline": "image->amacro->next = tmp_amacro;"
    },
    {
        "line": 506,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 519,
        "fullcodeline": "state->layer->knockout.type = GERBV_KNOCKOUT_TYPE_NOKNOCKOUT;"
    },
    {
        "line": 538,
        "fullcodeline": "while ((op[0] != '*')&&(op[0] != EOF)) {"
    },
    {
        "line": 574,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 588,
        "fullcodeline": "while ((op[0] != '*')&&(op[0] != EOF)) {"
    },
    {
        "line": 619,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 629,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 36,
        "fullcodeline": "_(\"Unexpected EOF found in file \\\"%s\\\"\"), fd->filename);"
    },
    {
        "line": 50,
        "fullcodeline": "_(\"Unexpected EOF found in file \\\"%s\\\"\"), fd->filename);"
    },
    {
        "line": 75,
        "fullcodeline": "_(\"EagleCad bug detected: Undefined handling of zeros \""
    },
    {
        "line": 79,
        "fullcodeline": "_(\"Defaulting to omitting leading zeros\"));"
    },
    {
        "line": 93,
        "fullcodeline": "_(\"Invalid coordinate type defined in format code \""
    },
    {
        "line": 97,
        "fullcodeline": "_(\"Defaulting to absolute coordinates\"));"
    },
    {
        "line": 211,
        "fullcodeline": "_(\"Unexpected EOF found in file \\\"%s\\\"\"), fd->filename);"
    },
    {
        "line": 215,
        "fullcodeline": "state->state = gerbv_image_return_new_netstate (state->state);"
    },
    {
        "line": 219,
        "fullcodeline": "state->state = gerbv_image_return_new_netstate (state->state);"
    },
    {
        "line": 224,
        "fullcodeline": "_(\"Illegal unit '%s%s' at line %ld in file \\\"%s\\\"\"),"
    },
    {
        "line": 225,
        "fullcodeline": "gerbv_escape_char(op[0]), gerbv_escape_char(op[1]),"
    },
    {
        "line": 307,
        "fullcodeline": "state->state->scaleA = gerb_fgetdouble(fd);"
    },
    {
        "line": 309,
        "fullcodeline": "gerb_ungetc(fd);"
    },
    {
        "line": 311,
        "fullcodeline": "state->state->scaleB = gerb_fgetdouble(fd);"
    },
    {
        "line": 313,
        "fullcodeline": "gerb_ungetc(fd);"
    },
    {
        "line": 326,
        "fullcodeline": "_(\"Unexpected EOF found in file \\\"%s\\\"\"), fd->filename);"
    },
    {
        "line": 346,
        "fullcodeline": "_(\"Unknown input code (IC) '%s%s' \""
    },
    {
        "line": 348,
        "fullcodeline": "gerbv_escape_char(op[0]), gerbv_escape_char(op[1]),"
    },
    {
        "line": 400,
        "fullcodeline": "if (op[0] == EOF) {"
    },
    {
        "line": 484,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 507,
        "fullcodeline": "_(\"Unknown layer polarity '%s' \""
    },
    {
        "line": 509,
        "fullcodeline": "gerbv_escape_char(op[0]), *line_num_p, fd->filename);"
    },
    {
        "line": 630,
        "fullcodeline": "_(\"Error in layer rotation command \""
    },
    {
        "line": 104,
        "fullcodeline": "op[0] = (char)gerb_fgetc(fd);"
    },
    {
        "line": 108,
        "fullcodeline": "op[0] = (char)gerb_fgetc(fd);"
    },
    {
        "line": 112,
        "fullcodeline": "op[0] = (char)gerb_fgetc(fd);"
    },
    {
        "line": 116,
        "fullcodeline": "op[0] = (char)gerb_fgetc(fd);"
    },
    {
        "line": 120,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 129,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 140,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 149,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 160,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 165,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_WARNING, -1,"
    },
    {
        "line": 179,
        "fullcodeline": "readValue = gerb_fgetint(fd, NULL);"
    },
    {
        "line": 188,
        "fullcodeline": "readValue = gerb_fgetint(fd, NULL);"
    },
    {
        "line": 197,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 241,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 260,
        "fullcodeline": "if (levelOfRecursion < 10) {"
    },
    {
        "line": 296,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 363,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 374,
        "fullcodeline": "op[0] = gerb_fgetc(fd);"
    },
    {
        "line": 385,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 401,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 424,
        "fullcodeline": "else if (tmp == 90)"
    },
    {
        "line": 485,
        "fullcodeline": "_(\"Failed to parse aperture macro \""
    },
    {
        "line": 521,
        "fullcodeline": "} else if (op[0] == 'C') {"
    },
    {
        "line": 557,
        "fullcodeline": "state->layer->knockout.type = GERBV_KNOCKOUT_TYPE_BORDER;"
    },
    {
        "line": 562,
        "fullcodeline": "knockoutLimitXmin = HUGE_VAL;"
    },
    {
        "line": 563,
        "fullcodeline": "knockoutLimitYmin = HUGE_VAL;"
    },
    {
        "line": 564,
        "fullcodeline": "knockoutLimitXmax = -HUGE_VAL;"
    },
    {
        "line": 565,
        "fullcodeline": "knockoutLimitYmax = -HUGE_VAL;"
    },
    {
        "line": 566,
        "fullcodeline": "knockoutLayer = state->layer;"
    },
    {
        "line": 569,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 591,
        "fullcodeline": "state->layer->stepAndRepeat.X = gerb_fgetint(fd, NULL);"
    },
    {
        "line": 594,
        "fullcodeline": "state->layer->stepAndRepeat.Y = gerb_fgetint(fd, NULL);"
    },
    {
        "line": 603,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 615,
        "fullcodeline": "state->layer->stepAndRepeat.X = 1;"
    },
    {
        "line": 617,
        "fullcodeline": "state->layer->stepAndRepeat.Y = 1;"
    },
    {
        "line": 105,
        "fullcodeline": "image->format->lim_seqno = op[0] - '0';"
    },
    {
        "line": 109,
        "fullcodeline": "image->format->lim_gf = op[0] - '0';"
    },
    {
        "line": 113,
        "fullcodeline": "image->format->lim_pf = op[0] - '0';"
    },
    {
        "line": 117,
        "fullcodeline": "image->format->lim_mf = op[0] - '0';"
    },
    {
        "line": 121,
        "fullcodeline": "if ((op[0] < '0') || (op[0] > '6')) {"
    },
    {
        "line": 128,
        "fullcodeline": "image->format->x_int = op[0] - '0';"
    },
    {
        "line": 130,
        "fullcodeline": "if ((op[0] < '0') || (op[0] > '6')) {"
    },
    {
        "line": 137,
        "fullcodeline": "image->format->x_dec = op[0] - '0';"
    },
    {
        "line": 141,
        "fullcodeline": "if ((op[0] < '0') || (op[0] > '6')) {"
    },
    {
        "line": 148,
        "fullcodeline": "image->format->y_int = op[0] - '0';"
    },
    {
        "line": 150,
        "fullcodeline": "if ((op[0] < '0') || (op[0] > '6')) {"
    },
    {
        "line": 157,
        "fullcodeline": "image->format->y_dec = op[0] - '0';"
    },
    {
        "line": 161,
        "fullcodeline": "_(\"Illegal format statement '%s' \""
    },
    {
        "line": 163,
        "fullcodeline": "gerbv_escape_char(op[0]),"
    },
    {
        "line": 166,
        "fullcodeline": "_(\"Ignoring invalid format statement\"));"
    },
    {
        "line": 198,
        "fullcodeline": "_(\"Wrong character '%s' in mirror \""
    },
    {
        "line": 200,
        "fullcodeline": "gerbv_escape_char(op[0]), *line_num_p, fd->filename);"
    },
    {
        "line": 235,
        "fullcodeline": "state->state->offsetA = gerb_fgetdouble(fd) / scale;"
    },
    {
        "line": 238,
        "fullcodeline": "state->state->offsetB = gerb_fgetdouble(fd) / scale;"
    },
    {
        "line": 242,
        "fullcodeline": "_(\"Wrong character '%s' in offset \""
    },
    {
        "line": 244,
        "fullcodeline": "gerbv_escape_char(op[0]), *line_num_p, fd->filename);"
    },
    {
        "line": 255,
        "fullcodeline": "if (!g_path_is_absolute(includeFilename)) {"
    },
    {
        "line": 256,
        "fullcodeline": "fullPath = g_build_filename (directoryPath, includeFilename, NULL);"
    },
    {
        "line": 263,
        "fullcodeline": "includefd = gerb_fopen(fullPath);"
    },
    {
        "line": 290,
        "fullcodeline": "image->info->offsetA = gerb_fgetdouble(fd) / scale;"
    },
    {
        "line": 293,
        "fullcodeline": "image->info->offsetB = gerb_fgetdouble(fd) / scale;"
    },
    {
        "line": 297,
        "fullcodeline": "_(\"Wrong character '%s' in image offset \""
    },
    {
        "line": 299,
        "fullcodeline": "gerbv_escape_char(op[0]), *line_num_p, fd->filename);"
    },
    {
        "line": 364,
        "fullcodeline": "if (op[0] == 'C') {"
    },
    {
        "line": 375,
        "fullcodeline": "if (op[0] == 'C') {"
    },
    {
        "line": 386,
        "fullcodeline": "_(\"Wrong character '%s' in image justify \""
    },
    {
        "line": 388,
        "fullcodeline": "gerbv_escape_char(op[0]), *line_num_p, fd->filename);"
    },
    {
        "line": 402,
        "fullcodeline": "_(\"Unexpected EOF while reading image polarity (IP) \""
    },
    {
        "line": 410,
        "fullcodeline": "else if (strncmp(str, \"NEG\", 3) == 0)"
    },
    {
        "line": 411,
        "fullcodeline": "image->info->polarity = GERBV_POLARITY_NEGATIVE;"
    },
    {
        "line": 449,
        "fullcodeline": "else if ((ano >= 0) && (ano <= APERTURE_MAX)) {"
    },
    {
        "line": 450,
        "fullcodeline": "a->unit = state->state->unit;"
    },
    {
        "line": 452,
        "fullcodeline": "dprintf(\"     In %s(), adding new aperture to aperture list ...\\n\","
    },
    {
        "line": 454,
        "fullcodeline": "gerbv_stats_add_aperture(stats->aperture_list,"
    },
    {
        "line": 458,
        "fullcodeline": "gerbv_stats_add_to_D_list(stats->D_code_list,"
    },
    {
        "line": 542,
        "fullcodeline": "state->layer->knockout.lowerLeftX = gerb_fgetdouble(fd) / scale;"
    },
    {
        "line": 546,
        "fullcodeline": "state->layer->knockout.lowerLeftY = gerb_fgetdouble(fd) / scale;"
    },
    {
        "line": 550,
        "fullcodeline": "state->layer->knockout.width = gerb_fgetdouble(fd) / scale;"
    },
    {
        "line": 554,
        "fullcodeline": "state->layer->knockout.height = gerb_fgetdouble(fd) / scale;"
    },
    {
        "line": 558,
        "fullcodeline": "state->layer->knockout.border = gerb_fgetdouble(fd) / scale;"
    },
    {
        "line": 570,
        "fullcodeline": "_(\"Unknown variable in knockout \""
    },
    {
        "line": 597,
        "fullcodeline": "state->layer->stepAndRepeat.dist_X = gerb_fgetdouble(fd) / scale;"
    },
    {
        "line": 600,
        "fullcodeline": "state->layer->stepAndRepeat.dist_Y = gerb_fgetdouble(fd) / scale;"
    },
    {
        "line": 604,
        "fullcodeline": "_(\"Step-and-repeat parameter error \""
    },
    {
        "line": 122,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 131,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 142,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 151,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 258,
        "fullcodeline": "fullPath = g_strdup (includeFilename);"
    },
    {
        "line": 413,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 455,
        "fullcodeline": "-1, ano,"
    },
    {
        "line": 460,
        "fullcodeline": "if (ano < APERTURE_MIN) {"
    },
    {
        "line": 467,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 123,
        "fullcodeline": "_(\"Illegal format size '%s' \""
    },
    {
        "line": 125,
        "fullcodeline": "gerbv_escape_char(op[0]),"
    },
    {
        "line": 132,
        "fullcodeline": "_(\"Illegal format size '%s' \""
    },
    {
        "line": 134,
        "fullcodeline": "gerbv_escape_char(op[0]),"
    },
    {
        "line": 143,
        "fullcodeline": "_(\"Illegal format size '%s' \""
    },
    {
        "line": 145,
        "fullcodeline": "gerbv_escape_char(op[0]),"
    },
    {
        "line": 152,
        "fullcodeline": "_(\"Illegal format size '%s' \""
    },
    {
        "line": 154,
        "fullcodeline": "gerbv_escape_char(op[0]),"
    },
    {
        "line": 181,
        "fullcodeline": "if (state->state->mirrorState == GERBV_MIRROR_STATE_FLIPB)"
    },
    {
        "line": 190,
        "fullcodeline": "if (state->state->mirrorState == GERBV_MIRROR_STATE_FLIPA)"
    },
    {
        "line": 265,
        "fullcodeline": "gerber_parse_file_segment (levelOfRecursion + 1, image, state, curr_net, stats, includefd, directoryPath);"
    },
    {
        "line": 275,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 276,
        "fullcodeline": "_(\"Parser encountered more than 10 levels of \""
    },
    {
        "line": 414,
        "fullcodeline": "_(\"Unknown polarity '%s%s%s' \""
    },
    {
        "line": 416,
        "fullcodeline": "gerbv_escape_char(str[0]), gerbv_escape_char(str[1]),"
    },
    {
        "line": 417,
        "fullcodeline": "gerbv_escape_char(str[2]), *line_num_p, fd->filename);"
    },
    {
        "line": 426,
        "fullcodeline": "else if (tmp == 180)"
    },
    {
        "line": 461,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 468,
        "fullcodeline": "_(\"Aperture number out of bounds %d \""
    },
    {
        "line": 182,
        "fullcodeline": "state->state->mirrorState=GERBV_MIRROR_STATE_FLIPAB;"
    },
    {
        "line": 191,
        "fullcodeline": "state->state->mirrorState=GERBV_MIRROR_STATE_FLIPAB;"
    },
    {
        "line": 268,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 462,
        "fullcodeline": "_(\"Aperture number out of bounds %d \""
    },
    {
        "line": 184,
        "fullcodeline": "state->state->mirrorState=GERBV_MIRROR_STATE_FLIPA;"
    },
    {
        "line": 193,
        "fullcodeline": "state->state->mirrorState=GERBV_MIRROR_STATE_FLIPB;"
    },
    {
        "line": 269,
        "fullcodeline": "_(\"Included file \\\"%s\\\" cannot be found \""
    },
    {
        "line": 526,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 369,
        "fullcodeline": "gerb_ungetc (fd);"
    },
    {
        "line": 380,
        "fullcodeline": "gerb_ungetc (fd);"
    },
    {
        "line": 428,
        "fullcodeline": "else if (tmp == 270)"
    },
    {
        "line": 527,
        "fullcodeline": "_(\"Knockout must supply a polarity (C, D, or *) \""
    },
    {
        "line": 370,
        "fullcodeline": "image->info->imageJustifyOffsetA = gerb_fgetdouble(fd) / scale;"
    },
    {
        "line": 381,
        "fullcodeline": "image->info->imageJustifyOffsetB = gerb_fgetdouble(fd) / scale;"
    },
    {
        "line": 431,
        "fullcodeline": "gerbv_stats_printf(error_list, GERBV_MESSAGE_ERROR, -1,"
    },
    {
        "line": 432,
        "fullcodeline": "_(\"Image rotation must be 0, 90, 180 or 270 \""
    }
]