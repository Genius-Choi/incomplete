[
    {
        "line": 11,
        "fullcodeline": "int\t\tfound_match = FALSE;"
    },
    {
        "line": 14,
        "fullcodeline": "int\t\tpat_len = (int)STRLEN(spat);"
    },
    {
        "line": 16,
        "fullcodeline": "for (lnum = 1; lnum <= buf->b_ml.ml_line_count && *tomatch > 0; ++lnum)"
    },
    {
        "line": 18,
        "fullcodeline": "col = 0;"
    },
    {
        "line": 104,
        "fullcodeline": "line_breakcheck();"
    },
    {
        "line": 19,
        "fullcodeline": "if (!(flags & VGR_FUZZY))"
    },
    {
        "line": 22,
        "fullcodeline": "while (vim_regexec_multi(regmatch, curwin, buf, lnum,"
    },
    {
        "line": 63,
        "fullcodeline": "char_u  *str = ml_get_buf(buf, lnum, FALSE);"
    },
    {
        "line": 65,
        "fullcodeline": "int_u   matches[MAX_FUZZY_MATCHES];"
    },
    {
        "line": 66,
        "fullcodeline": "int_u   sz = ARRAY_LENGTH(matches);"
    },
    {
        "line": 49,
        "fullcodeline": "found_match = TRUE;"
    },
    {
        "line": 55,
        "fullcodeline": "col = regmatch->endpos[0].col"
    },
    {
        "line": 69,
        "fullcodeline": "while (fuzzy_match(str + col, spat, FALSE, &score, matches, sz) > 0)"
    },
    {
        "line": 28,
        "fullcodeline": "if (qf_add_entry(qfl,"
    },
    {
        "line": 50,
        "fullcodeline": "if (--*tomatch == 0)"
    },
    {
        "line": 52,
        "fullcodeline": "if ((flags & VGR_GLOBAL) == 0"
    },
    {
        "line": 57,
        "fullcodeline": "if (col > (colnr_T)STRLEN(ml_get_buf(buf, lnum, FALSE)))"
    },
    {
        "line": 94,
        "fullcodeline": "found_match = TRUE;"
    },
    {
        "line": 99,
        "fullcodeline": "col = matches[pat_len - 1] + col + 1;"
    },
    {
        "line": 46,
        "fullcodeline": "got_int = TRUE;"
    },
    {
        "line": 53,
        "fullcodeline": "|| regmatch->endpos[0].lnum > 0)"
    },
    {
        "line": 56,
        "fullcodeline": "+ (col == regmatch->endpos[0].col);"
    },
    {
        "line": 74,
        "fullcodeline": "if (qf_add_entry(qfl,"
    },
    {
        "line": 95,
        "fullcodeline": "if (--*tomatch == 0)"
    },
    {
        "line": 97,
        "fullcodeline": "if ((flags & VGR_GLOBAL) == 0)"
    },
    {
        "line": 100,
        "fullcodeline": "if (col > (colnr_T)STRLEN(str))"
    },
    {
        "line": 32,
        "fullcodeline": "duplicate_name ? 0 : buf->b_fnum,"
    },
    {
        "line": 33,
        "fullcodeline": "ml_get_buf(buf,"
    },
    {
        "line": 35,
        "fullcodeline": "regmatch->startpos[0].lnum + lnum,"
    },
    {
        "line": 36,
        "fullcodeline": "regmatch->endpos[0].lnum + lnum,"
    },
    {
        "line": 37,
        "fullcodeline": "regmatch->startpos[0].col + 1,"
    },
    {
        "line": 38,
        "fullcodeline": "regmatch->endpos[0].col + 1,"
    },
    {
        "line": 91,
        "fullcodeline": "got_int = TRUE;"
    },
    {
        "line": 34,
        "fullcodeline": "regmatch->startpos[0].lnum + lnum, FALSE),"
    },
    {
        "line": 78,
        "fullcodeline": "duplicate_name ? 0 : buf->b_fnum,"
    },
    {
        "line": 82,
        "fullcodeline": "matches[0] + col + 1,"
    }
]