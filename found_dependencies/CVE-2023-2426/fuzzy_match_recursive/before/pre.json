[
    {
        "line": 15,
        "fullcodeline": "int\t\trecursiveMatch = FALSE;"
    },
    {
        "line": 16,
        "fullcodeline": "int_u\tbestRecursiveMatches[MAX_FUZZY_MATCHES];"
    },
    {
        "line": 17,
        "fullcodeline": "int\t\tbestRecursiveScore = 0;"
    },
    {
        "line": 22,
        "fullcodeline": "++*recursionCount;"
    },
    {
        "line": 31,
        "fullcodeline": "first_match = TRUE;"
    },
    {
        "line": 94,
        "fullcodeline": "matched = *fuzpat == NUL ? TRUE : FALSE;"
    },
    {
        "line": 23,
        "fullcodeline": "if (*recursionCount >= FUZZY_MATCH_RECURSION_LIMIT)"
    },
    {
        "line": 27,
        "fullcodeline": "if (*fuzpat == NUL || *str == NUL)"
    },
    {
        "line": 32,
        "fullcodeline": "while (*fuzpat != NUL && *str != NUL)"
    },
    {
        "line": 37,
        "fullcodeline": "c1 = PTR2CHAR(fuzpat);"
    },
    {
        "line": 38,
        "fullcodeline": "c2 = PTR2CHAR(str);"
    },
    {
        "line": 90,
        "fullcodeline": "strIdx++;"
    },
    {
        "line": 98,
        "fullcodeline": "*outScore = fuzzy_match_compute_score(strBegin, strLen, matches,"
    },
    {
        "line": 102,
        "fullcodeline": "if (recursiveMatch && (!matched || bestRecursiveScore > *outScore))"
    },
    {
        "line": 105,
        "fullcodeline": "memcpy(matches, bestRecursiveMatches, maxMatches * sizeof(matches[0]));"
    },
    {
        "line": 41,
        "fullcodeline": "if (vim_tolower(c1) == vim_tolower(c2))"
    },
    {
        "line": 43,
        "fullcodeline": "int_u\trecursiveMatches[MAX_FUZZY_MATCHES];"
    },
    {
        "line": 44,
        "fullcodeline": "int\t\trecursiveScore = 0;"
    },
    {
        "line": 80,
        "fullcodeline": "matches[nextMatch++] = strIdx;"
    },
    {
        "line": 87,
        "fullcodeline": "MB_PTR_ADV(str);"
    },
    {
        "line": 48,
        "fullcodeline": "if (nextMatch >= maxMatches)"
    },
    {
        "line": 52,
        "fullcodeline": "if (first_match && srcMatches)"
    },
    {
        "line": 63,
        "fullcodeline": "if (fuzzy_match_recursive(fuzpat, next_char, strIdx + 1,"
    },
    {
        "line": 89,
        "fullcodeline": "++str;"
    },
    {
        "line": 54,
        "fullcodeline": "memcpy(matches, srcMatches, nextMatch * sizeof(srcMatches[0]));"
    },
    {
        "line": 55,
        "fullcodeline": "first_match = FALSE;"
    },
    {
        "line": 60,
        "fullcodeline": "next_char = str + (*mb_ptr2len)(str);"
    },
    {
        "line": 66,
        "fullcodeline": "ARRAY_LENGTH(recursiveMatches),"
    },
    {
        "line": 76,
        "fullcodeline": "recursiveMatch = TRUE;"
    },
    {
        "line": 82,
        "fullcodeline": "MB_PTR_ADV(fuzpat);"
    },
    {
        "line": 62,
        "fullcodeline": "next_char = str + 1;"
    },
    {
        "line": 84,
        "fullcodeline": "++fuzpat;"
    },
    {
        "line": 70,
        "fullcodeline": "if (!recursiveMatch || recursiveScore > bestRecursiveScore)"
    },
    {
        "line": 72,
        "fullcodeline": "memcpy(bestRecursiveMatches, recursiveMatches,"
    },
    {
        "line": 74,
        "fullcodeline": "bestRecursiveScore = recursiveScore;"
    },
    {
        "line": 73,
        "fullcodeline": "MAX_FUZZY_MATCHES * sizeof(recursiveMatches[0]));"
    }
]