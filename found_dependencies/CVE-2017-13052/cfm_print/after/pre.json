[
    {
        "line": 23,
        "fullcodeline": "tptr=pptr;"
    },
    {
        "line": 24,
        "fullcodeline": "cfm_common_header = (const struct cfm_common_header_t *)pptr;"
    },
    {
        "line": 27,
        "fullcodeline": "ND_TCHECK(*cfm_common_header);"
    },
    {
        "line": 53,
        "fullcodeline": "tptr += sizeof(const struct cfm_common_header_t);"
    },
    {
        "line": 54,
        "fullcodeline": "tlen = length - sizeof(struct cfm_common_header_t);"
    },
    {
        "line": 255,
        "fullcodeline": "tptr += cfm_common_header->first_tlv_offset;"
    },
    {
        "line": 256,
        "fullcodeline": "tlen -= cfm_common_header->first_tlv_offset;"
    },
    {
        "line": 25,
        "fullcodeline": "if (length < sizeof(*cfm_common_header))"
    },
    {
        "line": 32,
        "fullcodeline": "if (CFM_EXTRACT_VERSION(cfm_common_header->mdlevel_version) != CFM_VERSION) {"
    },
    {
        "line": 38,
        "fullcodeline": "ND_PRINT((ndo, \"CFMv%u %s, MD Level %u, length %u\","
    },
    {
        "line": 47,
        "fullcodeline": "if (ndo->ndo_vflag < 1) {"
    },
    {
        "line": 51,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\tFirst TLV offset %u\", cfm_common_header->first_tlv_offset));"
    },
    {
        "line": 59,
        "fullcodeline": "if (cfm_common_header->first_tlv_offset > tlen) {"
    },
    {
        "line": 258,
        "fullcodeline": "while (tlen > 0) {"
    },
    {
        "line": 489,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t\\t packet is too short\"));"
    },
    {
        "line": 33,
        "fullcodeline": "ND_PRINT((ndo, \"CFMv%u not supported, length %u\","
    },
    {
        "line": 76,
        "fullcodeline": "ccm_interval = CFM_EXTRACT_CCM_INTERVAL(cfm_common_header->flags);"
    },
    {
        "line": 97,
        "fullcodeline": "namesp = msg_ptr.cfm_ccm->names;"
    },
    {
        "line": 98,
        "fullcodeline": "names_data_remaining = sizeof(msg_ptr.cfm_ccm->names);"
    },
    {
        "line": 103,
        "fullcodeline": "md_nameformat = *namesp;"
    },
    {
        "line": 104,
        "fullcodeline": "namesp++;"
    },
    {
        "line": 105,
        "fullcodeline": "names_data_remaining--;  /* We know this is != 0 */"
    },
    {
        "line": 161,
        "fullcodeline": "ma_nameformat = *namesp;"
    },
    {
        "line": 162,
        "fullcodeline": "namesp++;"
    },
    {
        "line": 163,
        "fullcodeline": "names_data_remaining--; /* We know this is != 0 */"
    },
    {
        "line": 164,
        "fullcodeline": "ma_namelength = *namesp;"
    },
    {
        "line": 165,
        "fullcodeline": "namesp++;"
    },
    {
        "line": 166,
        "fullcodeline": "names_data_remaining--; /* We know this is != 0 */"
    },
    {
        "line": 178,
        "fullcodeline": "ma_name = namesp;"
    },
    {
        "line": 250,
        "fullcodeline": "print_unknown_data(ndo, tptr, \"\\n\\t  \","
    },
    {
        "line": 259,
        "fullcodeline": "cfm_tlv_header = (const struct cfm_tlv_header_t *)tptr;"
    },
    {
        "line": 262,
        "fullcodeline": "ND_TCHECK2(*tptr, 1);"
    },
    {
        "line": 263,
        "fullcodeline": "cfm_tlv_type=cfm_tlv_header->type;"
    },
    {
        "line": 277,
        "fullcodeline": "ND_TCHECK2(*tptr, sizeof(struct cfm_tlv_header_t));"
    },
    {
        "line": 278,
        "fullcodeline": "cfm_tlv_len=EXTRACT_16BITS(&cfm_tlv_header->length);"
    },
    {
        "line": 282,
        "fullcodeline": "tptr += sizeof(struct cfm_tlv_header_t);"
    },
    {
        "line": 283,
        "fullcodeline": "tlen -= sizeof(struct cfm_tlv_header_t);"
    },
    {
        "line": 284,
        "fullcodeline": "tlv_ptr = tptr;"
    },
    {
        "line": 289,
        "fullcodeline": "ND_TCHECK2(*tptr, cfm_tlv_len);"
    },
    {
        "line": 290,
        "fullcodeline": "hexdump = FALSE;"
    },
    {
        "line": 483,
        "fullcodeline": "tptr+=cfm_tlv_len;"
    },
    {
        "line": 484,
        "fullcodeline": "tlen-=cfm_tlv_len;"
    },
    {
        "line": 39,
        "fullcodeline": "CFM_EXTRACT_VERSION(cfm_common_header->mdlevel_version),"
    },
    {
        "line": 40,
        "fullcodeline": "tok2str(cfm_opcode_values, \"unknown (%u)\", cfm_common_header->opcode),"
    },
    {
        "line": 41,
        "fullcodeline": "CFM_EXTRACT_MD_LEVEL(cfm_common_header->mdlevel_version),"
    },
    {
        "line": 60,
        "fullcodeline": "ND_PRINT((ndo, \" (too large, must be <= %u)\", tlen));"
    },
    {
        "line": 67,
        "fullcodeline": "if (cfm_common_header->first_tlv_offset < sizeof(*msg_ptr.cfm_ccm)) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (tlen < sizeof(*msg_ptr.cfm_ccm))"
    },
    {
        "line": 77,
        "fullcodeline": "ND_PRINT((ndo, \", Flags [CCM Interval %u%s]\","
    },
    {
        "line": 93,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  Sequence Number 0x%08x, MA-End-Point-ID 0x%04x\","
    },
    {
        "line": 106,
        "fullcodeline": "if (md_nameformat != CFM_CCM_MD_FORMAT_NONE) {"
    },
    {
        "line": 167,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  MA Name-Format %s (%u), MA name length %u\","
    },
    {
        "line": 173,
        "fullcodeline": "if (ma_namelength > names_data_remaining) {"
    },
    {
        "line": 179,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  MA Name: \"));"
    },
    {
        "line": 197,
        "fullcodeline": "if (cfm_common_header->first_tlv_offset < sizeof(*msg_ptr.cfm_ltm)) {"
    },
    {
        "line": 202,
        "fullcodeline": "if (tlen < sizeof(*msg_ptr.cfm_ltm))"
    },
    {
        "line": 206,
        "fullcodeline": "ND_PRINT((ndo, \", Flags [%s]\","
    },
    {
        "line": 209,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  Transaction-ID 0x%08x, ttl %u\","
    },
    {
        "line": 213,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  Original-MAC %s, Target-MAC %s\","
    },
    {
        "line": 220,
        "fullcodeline": "if (cfm_common_header->first_tlv_offset < sizeof(*msg_ptr.cfm_ltr)) {"
    },
    {
        "line": 225,
        "fullcodeline": "if (tlen < sizeof(*msg_ptr.cfm_ltr))"
    },
    {
        "line": 229,
        "fullcodeline": "ND_PRINT((ndo, \", Flags [%s]\","
    },
    {
        "line": 232,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  Transaction-ID 0x%08x, ttl %u\","
    },
    {
        "line": 236,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  Replay-Action %s (%u)\","
    },
    {
        "line": 251,
        "fullcodeline": "tlen -  cfm_common_header->first_tlv_offset);"
    },
    {
        "line": 265,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t%s TLV (0x%02x)\","
    },
    {
        "line": 269,
        "fullcodeline": "if (cfm_tlv_type == CFM_TLV_END) {"
    },
    {
        "line": 275,
        "fullcodeline": "if (tlen < sizeof(struct cfm_tlv_header_t))"
    },
    {
        "line": 280,
        "fullcodeline": "ND_PRINT((ndo, \", length %u\", cfm_tlv_len));"
    },
    {
        "line": 287,
        "fullcodeline": "if (tlen < cfm_tlv_len)"
    },
    {
        "line": 107,
        "fullcodeline": "md_namelength = *namesp;"
    },
    {
        "line": 108,
        "fullcodeline": "namesp++;"
    },
    {
        "line": 109,
        "fullcodeline": "names_data_remaining--; /* We know this is !=0 */"
    },
    {
        "line": 125,
        "fullcodeline": "md_name = namesp;"
    },
    {
        "line": 148,
        "fullcodeline": "namesp += md_namelength;"
    },
    {
        "line": 149,
        "fullcodeline": "names_data_remaining -= md_namelength;"
    },
    {
        "line": 182,
        "fullcodeline": "safeputs(ndo, ma_name, ma_namelength);"
    },
    {
        "line": 191,
        "fullcodeline": "print_unknown_data(ndo, ma_name, \"\\n\\t    \", ma_namelength);"
    },
    {
        "line": 322,
        "fullcodeline": "hexdump = TRUE;"
    },
    {
        "line": 475,
        "fullcodeline": "hexdump = TRUE;"
    },
    {
        "line": 479,
        "fullcodeline": "if (hexdump || ndo->ndo_vflag > 1)"
    },
    {
        "line": 480,
        "fullcodeline": "print_unknown_data(ndo, tlv_ptr, \"\\n\\t  \", cfm_tlv_len);"
    },
    {
        "line": 34,
        "fullcodeline": "CFM_EXTRACT_VERSION(cfm_common_header->mdlevel_version), length));"
    },
    {
        "line": 68,
        "fullcodeline": "ND_PRINT((ndo, \" (too small 1, must be >= %lu)\","
    },
    {
        "line": 86,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  CCM Interval %.3fs\""
    },
    {
        "line": 94,
        "fullcodeline": "EXTRACT_32BITS(msg_ptr.cfm_ccm->sequence),"
    },
    {
        "line": 95,
        "fullcodeline": "EXTRACT_16BITS(msg_ptr.cfm_ccm->ma_epi)));"
    },
    {
        "line": 110,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  MD Name Format %s (%u), MD Name length %u\","
    },
    {
        "line": 120,
        "fullcodeline": "if (md_namelength > names_data_remaining - 3) {"
    },
    {
        "line": 126,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  MD Name: \"));"
    },
    {
        "line": 168,
        "fullcodeline": "tok2str(cfm_ma_nameformat_values, \"Unknown\","
    },
    {
        "line": 174,
        "fullcodeline": "ND_PRINT((ndo, \" (too large, must be <= %u)\", names_data_remaining));"
    },
    {
        "line": 198,
        "fullcodeline": "ND_PRINT((ndo, \" (too small 4, must be >= %lu)\","
    },
    {
        "line": 207,
        "fullcodeline": "bittok2str(cfm_ltm_flag_values, \"none\", cfm_common_header->flags)));"
    },
    {
        "line": 210,
        "fullcodeline": "EXTRACT_32BITS(msg_ptr.cfm_ltm->transaction_id),"
    },
    {
        "line": 214,
        "fullcodeline": "etheraddr_string(ndo, msg_ptr.cfm_ltm->original_mac),"
    },
    {
        "line": 215,
        "fullcodeline": "etheraddr_string(ndo, msg_ptr.cfm_ltm->target_mac)));"
    },
    {
        "line": 221,
        "fullcodeline": "ND_PRINT((ndo, \" (too small 5, must be >= %lu)\","
    },
    {
        "line": 230,
        "fullcodeline": "bittok2str(cfm_ltr_flag_values, \"none\", cfm_common_header->flags)));"
    },
    {
        "line": 233,
        "fullcodeline": "EXTRACT_32BITS(msg_ptr.cfm_ltr->transaction_id),"
    },
    {
        "line": 237,
        "fullcodeline": "tok2str(cfm_ltr_replay_action_values,"
    },
    {
        "line": 266,
        "fullcodeline": "tok2str(cfm_tlv_values, \"Unknown\", cfm_tlv_type),"
    },
    {
        "line": 294,
        "fullcodeline": "if (cfm_tlv_len < 1) {"
    },
    {
        "line": 298,
        "fullcodeline": "ND_PRINT((ndo, \", Status: %s (%u)\","
    },
    {
        "line": 304,
        "fullcodeline": "if (cfm_tlv_len < 1) {"
    },
    {
        "line": 308,
        "fullcodeline": "ND_PRINT((ndo, \", Status: %s (%u)\","
    },
    {
        "line": 314,
        "fullcodeline": "if (cfm_tlv_len < 4) {"
    },
    {
        "line": 318,
        "fullcodeline": "ND_PRINT((ndo, \", Vendor: %s (%u), Sub-Type %u\","
    },
    {
        "line": 339,
        "fullcodeline": "chassis_id_length = *tptr;"
    },
    {
        "line": 340,
        "fullcodeline": "tptr++;"
    },
    {
        "line": 341,
        "fullcodeline": "tlen--;"
    },
    {
        "line": 342,
        "fullcodeline": "cfm_tlv_len--;"
    },
    {
        "line": 413,
        "fullcodeline": "mgmt_addr_length = *tptr;"
    },
    {
        "line": 414,
        "fullcodeline": "tptr++;"
    },
    {
        "line": 415,
        "fullcodeline": "tlen--;"
    },
    {
        "line": 416,
        "fullcodeline": "cfm_tlv_len--;"
    },
    {
        "line": 79,
        "fullcodeline": "cfm_common_header->flags & CFM_CCM_RDI_FLAG ?"
    },
    {
        "line": 130,
        "fullcodeline": "safeputs(ndo, md_name, md_namelength);"
    },
    {
        "line": 145,
        "fullcodeline": "print_unknown_data(ndo, md_name, \"\\n\\t    \","
    },
    {
        "line": 151,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  MD Name Format %s (%u)\","
    },
    {
        "line": 330,
        "fullcodeline": "if (cfm_tlv_len < 1) {"
    },
    {
        "line": 407,
        "fullcodeline": "if (cfm_tlv_len == 0) {"
    },
    {
        "line": 417,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  Management Address Domain Length %u\", mgmt_addr_length));"
    },
    {
        "line": 89,
        "fullcodeline": "ccm_interval_base[ccm_interval] * CCM_INTERVAL_MIN_MULTIPLIER,"
    },
    {
        "line": 90,
        "fullcodeline": "ccm_interval_base[ccm_interval] * CCM_INTERVAL_MAX_MULTIPLIER));"
    },
    {
        "line": 111,
        "fullcodeline": "tok2str(cfm_md_nameformat_values, \"Unknown\","
    },
    {
        "line": 121,
        "fullcodeline": "ND_PRINT((ndo, \" (too large, must be <= %u)\", names_data_remaining - 2));"
    },
    {
        "line": 134,
        "fullcodeline": "if (md_namelength == 6) {"
    },
    {
        "line": 295,
        "fullcodeline": "ND_PRINT((ndo, \" (too short, must be >= 1)\"));"
    },
    {
        "line": 299,
        "fullcodeline": "tok2str(cfm_tlv_port_status_values, \"Unknown\", *tptr),"
    },
    {
        "line": 305,
        "fullcodeline": "ND_PRINT((ndo, \" (too short, must be >= 1)\"));"
    },
    {
        "line": 309,
        "fullcodeline": "tok2str(cfm_tlv_interface_status_values, \"Unknown\", *tptr),"
    },
    {
        "line": 315,
        "fullcodeline": "ND_PRINT((ndo, \" (too short, must be >= 4)\"));"
    },
    {
        "line": 319,
        "fullcodeline": "tok2str(oui_values,\"Unknown\", EXTRACT_24BITS(tptr)),"
    },
    {
        "line": 320,
        "fullcodeline": "EXTRACT_24BITS(tptr),"
    },
    {
        "line": 354,
        "fullcodeline": "chassis_id_type = *tptr;"
    },
    {
        "line": 355,
        "fullcodeline": "cfm_tlv_len--;"
    },
    {
        "line": 395,
        "fullcodeline": "cfm_tlv_len -= chassis_id_length;"
    },
    {
        "line": 397,
        "fullcodeline": "tptr += 1 + chassis_id_length;"
    },
    {
        "line": 398,
        "fullcodeline": "tlen -= 1 + chassis_id_length;"
    },
    {
        "line": 424,
        "fullcodeline": "cfm_tlv_len -= mgmt_addr_length;"
    },
    {
        "line": 428,
        "fullcodeline": "hex_print(ndo, \"\\n\\t  Management Address Domain: \", tptr, mgmt_addr_length);"
    },
    {
        "line": 429,
        "fullcodeline": "tptr += mgmt_addr_length;"
    },
    {
        "line": 430,
        "fullcodeline": "tlen -= mgmt_addr_length;"
    },
    {
        "line": 443,
        "fullcodeline": "mgmt_addr_length = *tptr;"
    },
    {
        "line": 444,
        "fullcodeline": "tptr++;"
    },
    {
        "line": 445,
        "fullcodeline": "tlen--;"
    },
    {
        "line": 446,
        "fullcodeline": "cfm_tlv_len--;"
    },
    {
        "line": 152,
        "fullcodeline": "tok2str(cfm_md_nameformat_values, \"Unknown\","
    },
    {
        "line": 331,
        "fullcodeline": "ND_PRINT((ndo, \" (too short, must be >= 1)\"));"
    },
    {
        "line": 350,
        "fullcodeline": "if (cfm_tlv_len < 1) {"
    },
    {
        "line": 356,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  Chassis-ID Type %s (%u), Chassis-ID length %u\","
    },
    {
        "line": 363,
        "fullcodeline": "if (cfm_tlv_len < chassis_id_length) {"
    },
    {
        "line": 420,
        "fullcodeline": "if (cfm_tlv_len < mgmt_addr_length) {"
    },
    {
        "line": 436,
        "fullcodeline": "if (cfm_tlv_len < 1) {"
    },
    {
        "line": 447,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  Management Address Length %u\", mgmt_addr_length));"
    },
    {
        "line": 135,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  MAC %s\", etheraddr_string(ndo,"
    },
    {
        "line": 380,
        "fullcodeline": "hexdump |= cfm_network_addr_print(ndo, tptr + 1, chassis_id_length);"
    },
    {
        "line": 388,
        "fullcodeline": "safeputs(ndo, tptr + 1, chassis_id_length);"
    },
    {
        "line": 392,
        "fullcodeline": "hexdump = TRUE;"
    },
    {
        "line": 438,
        "fullcodeline": "hexdump = TRUE;"
    },
    {
        "line": 454,
        "fullcodeline": "cfm_tlv_len -= mgmt_addr_length;"
    },
    {
        "line": 458,
        "fullcodeline": "hex_print(ndo, \"\\n\\t  Management Address: \", tptr, mgmt_addr_length);"
    },
    {
        "line": 459,
        "fullcodeline": "tptr += mgmt_addr_length;"
    },
    {
        "line": 460,
        "fullcodeline": "tlen -= mgmt_addr_length;"
    },
    {
        "line": 138,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  MAC (length invalid)\"));"
    },
    {
        "line": 351,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  (TLV too short)\"));"
    },
    {
        "line": 357,
        "fullcodeline": "tok2str(cfm_tlv_senderid_chassisid_values,"
    },
    {
        "line": 364,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  (TLV too short)\"));"
    },
    {
        "line": 371,
        "fullcodeline": "if (chassis_id_length != ETHER_ADDR_LEN) {"
    },
    {
        "line": 376,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  MAC %s\", etheraddr_string(ndo, tptr + 1)));"
    },
    {
        "line": 421,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  (TLV too short)\"));"
    },
    {
        "line": 437,
        "fullcodeline": "ND_PRINT((ndo, \" (Management Address Length is missing)\"));"
    },
    {
        "line": 450,
        "fullcodeline": "if (cfm_tlv_len < mgmt_addr_length) {"
    },
    {
        "line": 373,
        "fullcodeline": "hexdump = TRUE;"
    },
    {
        "line": 372,
        "fullcodeline": "ND_PRINT((ndo, \" (invalid MAC address length)\"));"
    },
    {
        "line": 451,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  (TLV too short)\"));"
    }
]