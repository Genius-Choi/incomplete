[
    {
        "line": 16,
        "fullcodeline": "spin_lock_irqsave(&dgnc_global_lock, flags);"
    },
    {
        "line": 18,
        "fullcodeline": "memset(&ddi, 0, sizeof(ddi));"
    },
    {
        "line": 19,
        "fullcodeline": "ddi.dinfo_nboards = dgnc_NumBoards;"
    },
    {
        "line": 20,
        "fullcodeline": "sprintf(ddi.dinfo_version, \"%s\", DG_PART);"
    },
    {
        "line": 22,
        "fullcodeline": "spin_unlock_irqrestore(&dgnc_global_lock, flags);"
    },
    {
        "line": 42,
        "fullcodeline": "memset(&di, 0, sizeof(di));"
    },
    {
        "line": 44,
        "fullcodeline": "di.info_bdnum = brd;"
    },
    {
        "line": 46,
        "fullcodeline": "spin_lock_irqsave(&dgnc_Board[brd]->bd_lock, flags);"
    },
    {
        "line": 48,
        "fullcodeline": "di.info_bdtype = dgnc_Board[brd]->dpatype;"
    },
    {
        "line": 49,
        "fullcodeline": "di.info_bdstate = dgnc_Board[brd]->dpastatus;"
    },
    {
        "line": 50,
        "fullcodeline": "di.info_ioport = 0;"
    },
    {
        "line": 51,
        "fullcodeline": "di.info_physaddr = (ulong)dgnc_Board[brd]->membase;"
    },
    {
        "line": 52,
        "fullcodeline": "di.info_physsize = (ulong)dgnc_Board[brd]->membase"
    },
    {
        "line": 78,
        "fullcodeline": "board = ni.board;"
    },
    {
        "line": 79,
        "fullcodeline": "channel = ni.channel;"
    },
    {
        "line": 89,
        "fullcodeline": "ch = dgnc_Board[board]->channels[channel];"
    },
    {
        "line": 94,
        "fullcodeline": "memset(&ni, 0, sizeof(ni));"
    },
    {
        "line": 95,
        "fullcodeline": "ni.board = board;"
    },
    {
        "line": 96,
        "fullcodeline": "ni.channel = channel;"
    },
    {
        "line": 98,
        "fullcodeline": "spin_lock_irqsave(&ch->ch_lock, flags);"
    },
    {
        "line": 100,
        "fullcodeline": "mstat = (ch->ch_mostat | ch->ch_mistat);"
    },
    {
        "line": 125,
        "fullcodeline": "ni.iflag = ch->ch_c_iflag;"
    },
    {
        "line": 126,
        "fullcodeline": "ni.oflag = ch->ch_c_oflag;"
    },
    {
        "line": 127,
        "fullcodeline": "ni.cflag = ch->ch_c_cflag;"
    },
    {
        "line": 128,
        "fullcodeline": "ni.lflag = ch->ch_c_lflag;"
    },
    {
        "line": 147,
        "fullcodeline": "ni.curtx = ch->ch_txcount;"
    },
    {
        "line": 148,
        "fullcodeline": "ni.currx = ch->ch_rxcount;"
    },
    {
        "line": 150,
        "fullcodeline": "ni.baud = ch->ch_old_baud;"
    },
    {
        "line": 24,
        "fullcodeline": "if (copy_to_user(uarg, &ddi, sizeof(ddi)))"
    },
    {
        "line": 36,
        "fullcodeline": "if (copy_from_user(&brd, uarg, sizeof(int)))"
    },
    {
        "line": 54,
        "fullcodeline": "if (dgnc_Board[brd]->state != BOARD_FAILED)"
    },
    {
        "line": 75,
        "fullcodeline": "if (copy_from_user(&ni, uarg, sizeof(ni)))"
    },
    {
        "line": 82,
        "fullcodeline": "if (board >= dgnc_NumBoards)"
    },
    {
        "line": 86,
        "fullcodeline": "if (channel >= dgnc_Board[board]->nasync)"
    },
    {
        "line": 102,
        "fullcodeline": "if (mstat & UART_MCR_DTR) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (mstat & UART_MCR_RTS) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (mstat & UART_MSR_CTS) {"
    },
    {
        "line": 114,
        "fullcodeline": "if (mstat & UART_MSR_RI) {"
    },
    {
        "line": 118,
        "fullcodeline": "if (mstat & UART_MSR_DCD) {"
    },
    {
        "line": 122,
        "fullcodeline": "if (mstat & UART_MSR_DSR)"
    },
    {
        "line": 39,
        "fullcodeline": "if (brd < 0 || brd >= dgnc_NumBoards)"
    },
    {
        "line": 55,
        "fullcodeline": "di.info_nports = dgnc_Board[brd]->nasync;"
    },
    {
        "line": 91,
        "fullcodeline": "if (!ch || ch->magic != DGNC_CHANNEL_MAGIC)"
    },
    {
        "line": 103,
        "fullcodeline": "ni.mstat |= TIOCM_DTR;"
    },
    {
        "line": 104,
        "fullcodeline": "ni.dtr = TIOCM_DTR;"
    },
    {
        "line": 107,
        "fullcodeline": "ni.mstat |= TIOCM_RTS;"
    },
    {
        "line": 108,
        "fullcodeline": "ni.rts = TIOCM_RTS;"
    },
    {
        "line": 111,
        "fullcodeline": "ni.mstat |= TIOCM_CTS;"
    },
    {
        "line": 112,
        "fullcodeline": "ni.cts = TIOCM_CTS;"
    },
    {
        "line": 115,
        "fullcodeline": "ni.mstat |= TIOCM_RI;"
    },
    {
        "line": 116,
        "fullcodeline": "ni.ri = TIOCM_RI;"
    },
    {
        "line": 119,
        "fullcodeline": "ni.mstat |= TIOCM_CD;"
    },
    {
        "line": 120,
        "fullcodeline": "ni.dcd = TIOCM_CD;"
    },
    {
        "line": 123,
        "fullcodeline": "ni.mstat |= TIOCM_DSR;"
    },
    {
        "line": 130,
        "fullcodeline": "if (ch->ch_digi.digi_flags & CTSPACE ||"
    },
    {
        "line": 131,
        "fullcodeline": "ch->ch_c_cflag & CRTSCTS)"
    },
    {
        "line": 132,
        "fullcodeline": "ni.hflow = 1;"
    },
    {
        "line": 136,
        "fullcodeline": "if ((ch->ch_flags & CH_STOPI) ||"
    },
    {
        "line": 137,
        "fullcodeline": "(ch->ch_flags & CH_FORCED_STOPI))"
    },
    {
        "line": 138,
        "fullcodeline": "ni.recv_stopped = 1;"
    },
    {
        "line": 142,
        "fullcodeline": "if ((ch->ch_flags & CH_STOP) || (ch->ch_flags & CH_FORCED_STOP))"
    },
    {
        "line": 143,
        "fullcodeline": "ni.xmit_stopped = 1;"
    },
    {
        "line": 25,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 37,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 40,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 57,
        "fullcodeline": "di.info_nports = 0;"
    },
    {
        "line": 62,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 76,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 83,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 87,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 92,
        "fullcodeline": "return -ENODEV;"
    },
    {
        "line": 134,
        "fullcodeline": "ni.hflow = 0;"
    },
    {
        "line": 140,
        "fullcodeline": "ni.recv_stopped = 0;"
    },
    {
        "line": 145,
        "fullcodeline": "ni.xmit_stopped = 0;"
    },
    {
        "line": 155,
        "fullcodeline": "return -EFAULT;"
    }
]