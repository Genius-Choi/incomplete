[
    {
        "line": 29,
        "fullcodeline": "assert(image_info != (ImageInfo *) NULL);"
    },
    {
        "line": 30,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 31,
        "fullcodeline": "assert(images != (Image **) NULL);"
    },
    {
        "line": 32,
        "fullcodeline": "assert((*images)->previous == (Image *) NULL);"
    },
    {
        "line": 33,
        "fullcodeline": "assert((*images)->signature == MagickCoreSignature);"
    },
    {
        "line": 39,
        "fullcodeline": "interpolate_method=UndefinedInterpolatePixel;"
    },
    {
        "line": 40,
        "fullcodeline": "mogrify_info=CloneImageInfo(image_info);"
    },
    {
        "line": 41,
        "fullcodeline": "quantize_info=AcquireQuantizeInfo(mogrify_info);"
    },
    {
        "line": 42,
        "fullcodeline": "status=MagickTrue;"
    },
    {
        "line": 1157,
        "fullcodeline": "quantize_info=DestroyQuantizeInfo(quantize_info);"
    },
    {
        "line": 1158,
        "fullcodeline": "mogrify_info=DestroyImageInfo(mogrify_info);"
    },
    {
        "line": 1159,
        "fullcodeline": "status&=MogrifyImageInfo(image_info,argc,argv,exception);"
    },
    {
        "line": 34,
        "fullcodeline": "if ((*images)->debug != MagickFalse)"
    },
    {
        "line": 37,
        "fullcodeline": "if ((argc <= 0) || (*argv == (char *) NULL))"
    },
    {
        "line": 43,
        "fullcodeline": "for (i=0; i < (ssize_t) argc; i++)"
    },
    {
        "line": 1160,
        "fullcodeline": "return(status != 0 ? MagickTrue : MagickFalse);"
    },
    {
        "line": 35,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\","
    },
    {
        "line": 47,
        "fullcodeline": "option=argv[i];"
    },
    {
        "line": 50,
        "fullcodeline": "count=ParseCommandOption(MagickCommandOptions,MagickFalse,option);"
    },
    {
        "line": 51,
        "fullcodeline": "count=MagickMax(count,0L);"
    },
    {
        "line": 54,
        "fullcodeline": "status=MogrifyImageInfo(mogrify_info,(int) count+1,argv+i,exception);"
    },
    {
        "line": 1155,
        "fullcodeline": "i+=count;"
    },
    {
        "line": 45,
        "fullcodeline": "if (*images == (Image *) NULL)"
    },
    {
        "line": 48,
        "fullcodeline": "if (IsCommandOption(option) == MagickFalse)"
    },
    {
        "line": 52,
        "fullcodeline": "if ((i+count) >= (ssize_t) argc)"
    },
    {
        "line": 55,
        "fullcodeline": "switch (*(option+1))"
    },
    {
        "line": 59,
        "fullcodeline": "if (LocaleCompare(\"affinity\",option+1) == 0)"
    },
    {
        "line": 71,
        "fullcodeline": "if (LocaleCompare(\"append\",option+1) == 0)"
    },
    {
        "line": 88,
        "fullcodeline": "if (LocaleCompare(\"average\",option+1) == 0)"
    },
    {
        "line": 112,
        "fullcodeline": "if (LocaleCompare(\"channel-fx\",option+1) == 0)"
    },
    {
        "line": 128,
        "fullcodeline": "if (LocaleCompare(\"clut\",option+1) == 0)"
    },
    {
        "line": 148,
        "fullcodeline": "if (LocaleCompare(\"coalesce\",option+1) == 0)"
    },
    {
        "line": 164,
        "fullcodeline": "if (LocaleCompare(\"combine\",option+1) == 0)"
    },
    {
        "line": 189,
        "fullcodeline": "if (LocaleCompare(\"compare\",option+1) == 0)"
    },
    {
        "line": 230,
        "fullcodeline": "if (LocaleCompare(\"complex\",option+1) == 0)"
    },
    {
        "line": 251,
        "fullcodeline": "if (LocaleCompare(\"composite\",option+1) == 0)"
    },
    {
        "line": 358,
        "fullcodeline": "if (LocaleCompare(\"copy\",option+1) == 0)"
    },
    {
        "line": 389,
        "fullcodeline": "if (LocaleCompare(\"deconstruct\",option+1) == 0)"
    },
    {
        "line": 406,
        "fullcodeline": "if (LocaleCompare(\"delete\",option+1) == 0)"
    },
    {
        "line": 414,
        "fullcodeline": "if (LocaleCompare(\"dither\",option+1) == 0)"
    },
    {
        "line": 425,
        "fullcodeline": "if (LocaleCompare(\"duplicate\",option+1) == 0)"
    },
    {
        "line": 457,
        "fullcodeline": "if (LocaleCompare(\"evaluate-sequence\",option+1) == 0)"
    },
    {
        "line": 482,
        "fullcodeline": "if (LocaleCompare(\"fft\",option+1) == 0)"
    },
    {
        "line": 499,
        "fullcodeline": "if (LocaleCompare(\"flatten\",option+1) == 0)"
    },
    {
        "line": 512,
        "fullcodeline": "if (LocaleCompare(\"fx\",option+1) == 0)"
    },
    {
        "line": 532,
        "fullcodeline": "if (LocaleCompare(\"hald-clut\",option+1) == 0)"
    },
    {
        "line": 557,
        "fullcodeline": "if (LocaleCompare(\"ift\",option+1) == 0)"
    },
    {
        "line": 584,
        "fullcodeline": "if (LocaleCompare(\"insert\",option+1) == 0)"
    },
    {
        "line": 623,
        "fullcodeline": "if (LocaleCompare(\"interpolate\",option+1) == 0)"
    },
    {
        "line": 633,
        "fullcodeline": "if (LocaleCompare(\"layers\",option+1) == 0)"
    },
    {
        "line": 802,
        "fullcodeline": "if (LocaleCompare(\"map\",option+1) == 0)"
    },
    {
        "line": 814,
        "fullcodeline": "if (LocaleCompare(\"maximum\",option+1) == 0)"
    },
    {
        "line": 833,
        "fullcodeline": "if (LocaleCompare(\"minimum\",option+1) == 0)"
    },
    {
        "line": 852,
        "fullcodeline": "if (LocaleCompare(\"morph\",option+1) == 0)"
    },
    {
        "line": 869,
        "fullcodeline": "if (LocaleCompare(\"mosaic\",option+1) == 0)"
    },
    {
        "line": 889,
        "fullcodeline": "if (LocaleCompare(\"poly\",option+1) == 0)"
    },
    {
        "line": 953,
        "fullcodeline": "if (LocaleCompare(\"print\",option+1) == 0)"
    },
    {
        "line": 966,
        "fullcodeline": "if (LocaleCompare(\"process\",option+1) == 0)"
    },
    {
        "line": 1039,
        "fullcodeline": "if (LocaleCompare(\"reverse\",option+1) == 0)"
    },
    {
        "line": 1048,
        "fullcodeline": "if (LocaleCompare(\"smush\",option+1) == 0)"
    },
    {
        "line": 1069,
        "fullcodeline": "if (LocaleCompare(\"swap\",option+1) == 0)"
    },
    {
        "line": 1125,
        "fullcodeline": "if (LocaleCompare(\"write\",option+1) == 0)"
    },
    {
        "line": 61,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 68,
        "fullcodeline": "i++;"
    },
    {
        "line": 76,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 77,
        "fullcodeline": "append_image=AppendImages(*images,*option == '-' ? MagickTrue :"
    },
    {
        "line": 84,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 85,
        "fullcodeline": "*images=append_image;"
    },
    {
        "line": 96,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 97,
        "fullcodeline": "average_image=EvaluateImages(*images,MeanEvaluateOperator,"
    },
    {
        "line": 104,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 105,
        "fullcodeline": "*images=average_image;"
    },
    {
        "line": 117,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 118,
        "fullcodeline": "channel_image=ChannelFxImage(*images,argv[i+1],exception);"
    },
    {
        "line": 124,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 125,
        "fullcodeline": "*images=channel_image;"
    },
    {
        "line": 134,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 135,
        "fullcodeline": "image=RemoveFirstImageFromList(images);"
    },
    {
        "line": 136,
        "fullcodeline": "clut_image=RemoveFirstImageFromList(images);"
    },
    {
        "line": 142,
        "fullcodeline": "(void) ClutImage(image,clut_image,interpolate_method,exception);"
    },
    {
        "line": 143,
        "fullcodeline": "clut_image=DestroyImage(clut_image);"
    },
    {
        "line": 144,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 145,
        "fullcodeline": "*images=image;"
    },
    {
        "line": 153,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 154,
        "fullcodeline": "coalesce_image=CoalesceImages(*images,exception);"
    },
    {
        "line": 160,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 161,
        "fullcodeline": "*images=coalesce_image;"
    },
    {
        "line": 172,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 179,
        "fullcodeline": "combine_image=CombineImages(*images,colorspace,exception);"
    },
    {
        "line": 185,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 186,
        "fullcodeline": "*images=combine_image;"
    },
    {
        "line": 206,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 207,
        "fullcodeline": "image=RemoveFirstImageFromList(images);"
    },
    {
        "line": 208,
        "fullcodeline": "reconstruct_image=RemoveFirstImageFromList(images);"
    },
    {
        "line": 214,
        "fullcodeline": "metric=UndefinedErrorMetric;"
    },
    {
        "line": 215,
        "fullcodeline": "option=GetImageOption(mogrify_info,\"metric\");"
    },
    {
        "line": 219,
        "fullcodeline": "difference_image=CompareImages(image,reconstruct_image,metric,"
    },
    {
        "line": 223,
        "fullcodeline": "reconstruct_image=DestroyImage(reconstruct_image);"
    },
    {
        "line": 224,
        "fullcodeline": "image=DestroyImage(image);"
    },
    {
        "line": 227,
        "fullcodeline": "*images=difference_image;"
    },
    {
        "line": 238,
        "fullcodeline": "(void) SyncImageSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 239,
        "fullcodeline": "op=(ComplexOperator) ParseCommandOption(MagickComplexOptions,"
    },
    {
        "line": 241,
        "fullcodeline": "complex_images=ComplexImages(*images,op,exception);"
    },
    {
        "line": 247,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 248,
        "fullcodeline": "*images=complex_images;"
    },
    {
        "line": 271,
        "fullcodeline": "(void) SyncImageSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 272,
        "fullcodeline": "value=GetImageOption(mogrify_info,\"compose\");"
    },
    {
        "line": 280,
        "fullcodeline": "clip_to_self=GetCompositeClipToSelf(compose);"
    },
    {
        "line": 281,
        "fullcodeline": "value=GetImageOption(mogrify_info,\"compose:clip-to-self\");"
    },
    {
        "line": 284,
        "fullcodeline": "value=GetImageOption(mogrify_info,\"compose:outside-overlay\");"
    },
    {
        "line": 288,
        "fullcodeline": "new_images=RemoveFirstImageFromList(images);"
    },
    {
        "line": 289,
        "fullcodeline": "source_image=RemoveFirstImageFromList(images);"
    },
    {
        "line": 316,
        "fullcodeline": "SetGeometry(source_image,&geometry);"
    },
    {
        "line": 317,
        "fullcodeline": "(void) ParseAbsoluteGeometry(source_image->geometry,&geometry);"
    },
    {
        "line": 318,
        "fullcodeline": "GravityAdjustGeometry(new_images->columns,new_images->rows,"
    },
    {
        "line": 320,
        "fullcodeline": "mask_image=RemoveFirstImageFromList(images);"
    },
    {
        "line": 353,
        "fullcodeline": "source_image=DestroyImage(source_image);"
    },
    {
        "line": 354,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 355,
        "fullcodeline": "*images=new_images;"
    },
    {
        "line": 372,
        "fullcodeline": "(void) SyncImageSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 373,
        "fullcodeline": "(void) ParsePageGeometry(*images,argv[i+2],&geometry,exception);"
    },
    {
        "line": 374,
        "fullcodeline": "offset.x=geometry.x;"
    },
    {
        "line": 375,
        "fullcodeline": "offset.y=geometry.y;"
    },
    {
        "line": 376,
        "fullcodeline": "source_image=(*images);"
    },
    {
        "line": 379,
        "fullcodeline": "(void) ParsePageGeometry(source_image,argv[i+1],&geometry,"
    },
    {
        "line": 381,
        "fullcodeline": "status=CopyImagePixels(*images,source_image,&geometry,&offset,"
    },
    {
        "line": 394,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 395,
        "fullcodeline": "deconstruct_image=CompareImagesLayers(*images,CompareAnyLayer,"
    },
    {
        "line": 402,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 403,
        "fullcodeline": "*images=deconstruct_image;"
    },
    {
        "line": 421,
        "fullcodeline": "quantize_info->dither_method=(DitherMethod) ParseCommandOption("
    },
    {
        "line": 449,
        "fullcodeline": "AppendImageToList(images, duplicate_images);"
    },
    {
        "line": 450,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 465,
        "fullcodeline": "(void) SyncImageSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 466,
        "fullcodeline": "op=(MagickEvaluateOperator) ParseCommandOption("
    },
    {
        "line": 468,
        "fullcodeline": "evaluate_image=EvaluateImages(*images,op,exception);"
    },
    {
        "line": 474,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 475,
        "fullcodeline": "*images=evaluate_image;"
    },
    {
        "line": 490,
        "fullcodeline": "(void) SyncImageSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 491,
        "fullcodeline": "fourier_image=ForwardFourierTransformImage(*images,*option == '-' ?"
    },
    {
        "line": 495,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 496,
        "fullcodeline": "*images=fourier_image;"
    },
    {
        "line": 504,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 505,
        "fullcodeline": "flatten_image=MergeImageLayers(*images,FlattenLayer,exception);"
    },
    {
        "line": 508,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 509,
        "fullcodeline": "*images=flatten_image;"
    },
    {
        "line": 517,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 518,
        "fullcodeline": "fx_image=FxImage(*images,argv[i+1],exception);"
    },
    {
        "line": 524,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 525,
        "fullcodeline": "*images=fx_image;"
    },
    {
        "line": 538,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 539,
        "fullcodeline": "image=RemoveFirstImageFromList(images);"
    },
    {
        "line": 540,
        "fullcodeline": "hald_image=RemoveFirstImageFromList(images);"
    },
    {
        "line": 546,
        "fullcodeline": "(void) HaldClutImage(image,hald_image,exception);"
    },
    {
        "line": 547,
        "fullcodeline": "hald_image=DestroyImage(hald_image);"
    },
    {
        "line": 550,
        "fullcodeline": "*images=image;"
    },
    {
        "line": 567,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 568,
        "fullcodeline": "magnitude_image=RemoveFirstImageFromList(images);"
    },
    {
        "line": 569,
        "fullcodeline": "phase_image=RemoveFirstImageFromList(images);"
    },
    {
        "line": 575,
        "fullcodeline": "fourier_image=InverseFourierTransformImage(magnitude_image,"
    },
    {
        "line": 581,
        "fullcodeline": "*images=fourier_image;"
    },
    {
        "line": 590,
        "fullcodeline": "index=0;"
    },
    {
        "line": 593,
        "fullcodeline": "p=RemoveLastImageFromList(images);"
    },
    {
        "line": 601,
        "fullcodeline": "q=p;"
    },
    {
        "line": 620,
        "fullcodeline": "*images=GetFirstImageInList(q);"
    },
    {
        "line": 625,
        "fullcodeline": "interpolate_method=(PixelInterpolateMethod) ParseCommandOption("
    },
    {
        "line": 641,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 642,
        "fullcodeline": "layers=(Image *) NULL;"
    },
    {
        "line": 643,
        "fullcodeline": "method=(LayerMethod) ParseCommandOption(MagickLayerOptions,"
    },
    {
        "line": 794,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 795,
        "fullcodeline": "*images=layers;"
    },
    {
        "line": 804,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 811,
        "fullcodeline": "i++;"
    },
    {
        "line": 822,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 823,
        "fullcodeline": "maximum_image=EvaluateImages(*images,MaxEvaluateOperator,exception);"
    },
    {
        "line": 829,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 830,
        "fullcodeline": "*images=maximum_image;"
    },
    {
        "line": 841,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 842,
        "fullcodeline": "minimum_image=EvaluateImages(*images,MinEvaluateOperator,exception);"
    },
    {
        "line": 848,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 849,
        "fullcodeline": "*images=minimum_image;"
    },
    {
        "line": 857,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 858,
        "fullcodeline": "morph_image=MorphImages(*images,StringToUnsignedLong(argv[i+1]),"
    },
    {
        "line": 865,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 866,
        "fullcodeline": "*images=morph_image;"
    },
    {
        "line": 874,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 875,
        "fullcodeline": "mosaic_image=MergeImageLayers(*images,MosaicLayer,exception);"
    },
    {
        "line": 881,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 882,
        "fullcodeline": "*images=mosaic_image;"
    },
    {
        "line": 893,
        "fullcodeline": "token[MagickPathExtent];"
    },
    {
        "line": 913,
        "fullcodeline": "(void) SyncImageSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 914,
        "fullcodeline": "args=InterpretImageProperties(mogrify_info,*images,argv[i+1],"
    },
    {
        "line": 918,
        "fullcodeline": "p=(char *) args;"
    },
    {
        "line": 925,
        "fullcodeline": "number_arguments=(size_t) x;"
    },
    {
        "line": 926,
        "fullcodeline": "arguments=(double *) AcquireQuantumMemory(number_arguments,"
    },
    {
        "line": 931,
        "fullcodeline": "(void) memset(arguments,0,number_arguments*"
    },
    {
        "line": 933,
        "fullcodeline": "p=(char *) args;"
    },
    {
        "line": 941,
        "fullcodeline": "args=DestroyString(args);"
    },
    {
        "line": 942,
        "fullcodeline": "polynomial_image=PolynomialImage(*images,number_arguments >> 1,"
    },
    {
        "line": 944,
        "fullcodeline": "arguments=(double *) RelinquishMagickMemory(arguments);"
    },
    {
        "line": 950,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 951,
        "fullcodeline": "*images=polynomial_image;"
    },
    {
        "line": 958,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 959,
        "fullcodeline": "string=InterpretImageProperties(mogrify_info,*images,argv[i+1],"
    },
    {
        "line": 963,
        "fullcodeline": "(void) FormatLocaleFile(stdout,\"%s\",string);"
    },
    {
        "line": 964,
        "fullcodeline": "string=DestroyString(string);"
    },
    {
        "line": 975,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 976,
        "fullcodeline": "arguments=StringToArgv(argv[i+1],&number_arguments);"
    },
    {
        "line": 1027,
        "fullcodeline": "(void) SubstituteString(&arguments[1],\"-\",\"\");"
    },
    {
        "line": 1028,
        "fullcodeline": "(void) InvokeDynamicImageFilter(arguments[1],&(*images),"
    },
    {
        "line": 1032,
        "fullcodeline": "arguments=(char **) RelinquishMagickMemory(arguments);"
    },
    {
        "line": 1041,
        "fullcodeline": "ReverseImageList(images);"
    },
    {
        "line": 1056,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 1057,
        "fullcodeline": "offset=(ssize_t) StringToLong(argv[i+1]);"
    },
    {
        "line": 1058,
        "fullcodeline": "smush_image=SmushImages(*images,*option == '-' ? MagickTrue :"
    },
    {
        "line": 1065,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 1066,
        "fullcodeline": "*images=smush_image;"
    },
    {
        "line": 1080,
        "fullcodeline": "index=(-1);"
    },
    {
        "line": 1081,
        "fullcodeline": "swap_index=(-2);"
    },
    {
        "line": 1096,
        "fullcodeline": "p=GetImageFromList(*images,index);"
    },
    {
        "line": 1097,
        "fullcodeline": "q=GetImageFromList(*images,swap_index);"
    },
    {
        "line": 1107,
        "fullcodeline": "u=CloneImage(p,0,0,MagickTrue,exception);"
    },
    {
        "line": 1110,
        "fullcodeline": "v=CloneImage(q,0,0,MagickTrue,exception);"
    },
    {
        "line": 1116,
        "fullcodeline": "ReplaceImageInList(&p,v);"
    },
    {
        "line": 1117,
        "fullcodeline": "ReplaceImageInList(&q,u);"
    },
    {
        "line": 1118,
        "fullcodeline": "*images=GetFirstImageInList(q);"
    },
    {
        "line": 1128,
        "fullcodeline": "key[MagickPathExtent];"
    },
    {
        "line": 1136,
        "fullcodeline": "(void) SyncImagesSettings(mogrify_info,*images,exception);"
    },
    {
        "line": 1137,
        "fullcodeline": "(void) FormatLocaleString(key,MagickPathExtent,\"cache:%s\","
    },
    {
        "line": 1139,
        "fullcodeline": "(void) DeleteImageRegistry(key);"
    },
    {
        "line": 1140,
        "fullcodeline": "write_images=(*images);"
    },
    {
        "line": 1143,
        "fullcodeline": "write_info=CloneImageInfo(mogrify_info);"
    },
    {
        "line": 1144,
        "fullcodeline": "status&=WriteImages(write_info,write_images,argv[i+1],exception);"
    },
    {
        "line": 1145,
        "fullcodeline": "write_info=DestroyImageInfo(write_info);"
    },
    {
        "line": 62,
        "fullcodeline": "if (*option == '+')"
    },
    {
        "line": 79,
        "fullcodeline": "if (append_image == (Image *) NULL)"
    },
    {
        "line": 99,
        "fullcodeline": "if (average_image == (Image *) NULL)"
    },
    {
        "line": 119,
        "fullcodeline": "if (channel_image == (Image *) NULL)"
    },
    {
        "line": 137,
        "fullcodeline": "if (clut_image == (Image *) NULL)"
    },
    {
        "line": 155,
        "fullcodeline": "if (coalesce_image == (Image *) NULL)"
    },
    {
        "line": 174,
        "fullcodeline": "if ((*images)->number_channels < GetImageListLength(*images))"
    },
    {
        "line": 176,
        "fullcodeline": "if (*option == '+')"
    },
    {
        "line": 180,
        "fullcodeline": "if (combine_image == (Image *) NULL)"
    },
    {
        "line": 209,
        "fullcodeline": "if (reconstruct_image == (Image *) NULL)"
    },
    {
        "line": 216,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 221,
        "fullcodeline": "if (difference_image == (Image *) NULL)"
    },
    {
        "line": 225,
        "fullcodeline": "if (*images != (Image *) NULL)"
    },
    {
        "line": 242,
        "fullcodeline": "if (complex_images == (Image *) NULL)"
    },
    {
        "line": 273,
        "fullcodeline": "if (value == (const char *) NULL)"
    },
    {
        "line": 282,
        "fullcodeline": "if (value != (const char *) NULL)"
    },
    {
        "line": 285,
        "fullcodeline": "if (value != (const char *) NULL)"
    },
    {
        "line": 290,
        "fullcodeline": "if (source_image == (Image *) NULL)"
    },
    {
        "line": 294,
        "fullcodeline": "if (source_image->geometry != (char *) NULL)"
    },
    {
        "line": 321,
        "fullcodeline": "if (mask_image == (Image *) NULL)"
    },
    {
        "line": 377,
        "fullcodeline": "if (source_image->next != (Image *) NULL)"
    },
    {
        "line": 397,
        "fullcodeline": "if (deconstruct_image == (Image *) NULL)"
    },
    {
        "line": 408,
        "fullcodeline": "if (*option == '+')"
    },
    {
        "line": 416,
        "fullcodeline": "if (*option == '+')"
    },
    {
        "line": 430,
        "fullcodeline": "if (*option == '+')"
    },
    {
        "line": 469,
        "fullcodeline": "if (evaluate_image == (Image *) NULL)"
    },
    {
        "line": 493,
        "fullcodeline": "if (fourier_image == (Image *) NULL)"
    },
    {
        "line": 506,
        "fullcodeline": "if (flatten_image == (Image *) NULL)"
    },
    {
        "line": 519,
        "fullcodeline": "if (fx_image == (Image *) NULL)"
    },
    {
        "line": 541,
        "fullcodeline": "if (hald_image == (Image *) NULL)"
    },
    {
        "line": 548,
        "fullcodeline": "if (*images != (Image *) NULL)"
    },
    {
        "line": 570,
        "fullcodeline": "if (phase_image == (Image *) NULL)"
    },
    {
        "line": 577,
        "fullcodeline": "if (fourier_image == (Image *) NULL)"
    },
    {
        "line": 579,
        "fullcodeline": "if (*images != (Image *) NULL)"
    },
    {
        "line": 591,
        "fullcodeline": "if (*option != '+')"
    },
    {
        "line": 594,
        "fullcodeline": "if (p == (Image *) NULL)"
    },
    {
        "line": 602,
        "fullcodeline": "if (index == 0)"
    },
    {
        "line": 792,
        "fullcodeline": "if (layers == (Image *) NULL)"
    },
    {
        "line": 805,
        "fullcodeline": "if (*option == '+')"
    },
    {
        "line": 824,
        "fullcodeline": "if (maximum_image == (Image *) NULL)"
    },
    {
        "line": 843,
        "fullcodeline": "if (minimum_image == (Image *) NULL)"
    },
    {
        "line": 860,
        "fullcodeline": "if (morph_image == (Image *) NULL)"
    },
    {
        "line": 876,
        "fullcodeline": "if (mosaic_image == (Image *) NULL)"
    },
    {
        "line": 916,
        "fullcodeline": "if (args == (char *) NULL)"
    },
    {
        "line": 919,
        "fullcodeline": "for (x=0; *p != '\\0'; x++)"
    },
    {
        "line": 928,
        "fullcodeline": "if (arguments == (double *) NULL)"
    },
    {
        "line": 934,
        "fullcodeline": "for (x=0; (x < (ssize_t) number_arguments) && (*p != '\\0'); x++)"
    },
    {
        "line": 945,
        "fullcodeline": "if (polynomial_image == (Image *) NULL)"
    },
    {
        "line": 961,
        "fullcodeline": "if (string == (char *) NULL)"
    },
    {
        "line": 977,
        "fullcodeline": "if (arguments == (char **) NULL)"
    },
    {
        "line": 979,
        "fullcodeline": "if ((argc > 1) && (strchr(arguments[1],'=') != (char *) NULL))"
    },
    {
        "line": 1030,
        "fullcodeline": "for (j=0; j < number_arguments; j++)"
    },
    {
        "line": 1031,
        "fullcodeline": "arguments[j]=DestroyString(arguments[j]);"
    },
    {
        "line": 1060,
        "fullcodeline": "if (smush_image == (Image *) NULL)"
    },
    {
        "line": 1082,
        "fullcodeline": "if (*option != '+')"
    },
    {
        "line": 1098,
        "fullcodeline": "if ((p == (Image *) NULL) || (q == (Image *) NULL))"
    },
    {
        "line": 1105,
        "fullcodeline": "if (p == q)"
    },
    {
        "line": 1108,
        "fullcodeline": "if (u == (Image *) NULL)"
    },
    {
        "line": 1111,
        "fullcodeline": "if (v == (Image *) NULL)"
    },
    {
        "line": 1141,
        "fullcodeline": "if (*option == '+')"
    },
    {
        "line": 1146,
        "fullcodeline": "if (*option == '+')"
    },
    {
        "line": 64,
        "fullcodeline": "(void) RemapImages(quantize_info,*images,(Image *) NULL,"
    },
    {
        "line": 81,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 101,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 121,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 139,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 157,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 175,
        "fullcodeline": "colorspace=sRGBColorspace;"
    },
    {
        "line": 177,
        "fullcodeline": "colorspace=(ColorspaceType) ParseCommandOption("
    },
    {
        "line": 182,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 211,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 217,
        "fullcodeline": "metric=(MetricType) ParseCommandOption(MagickMetricOptions,"
    },
    {
        "line": 226,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 244,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 274,
        "fullcodeline": "compose=OverCompositeOp;  /* use Over not source_image->compose */"
    },
    {
        "line": 283,
        "fullcodeline": "clip_to_self=IsStringTrue(value);"
    },
    {
        "line": 286,
        "fullcodeline": "clip_to_self=IsStringFalse(value);  /* deprecated */"
    },
    {
        "line": 299,
        "fullcodeline": "(void) ParseRegionGeometry(source_image,source_image->geometry,"
    },
    {
        "line": 322,
        "fullcodeline": "status&=CompositeImage(new_images,source_image,compose,"
    },
    {
        "line": 378,
        "fullcodeline": "source_image=source_image->next;"
    },
    {
        "line": 399,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 409,
        "fullcodeline": "DeleteImages(images,\"-1\",exception);"
    },
    {
        "line": 418,
        "fullcodeline": "quantize_info->dither_method=NoDitherMethod;"
    },
    {
        "line": 431,
        "fullcodeline": "duplicate_images=DuplicateImages(*images,1,\"-1\",exception);"
    },
    {
        "line": 471,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 521,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 543,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 549,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 572,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 576,
        "fullcodeline": "phase_image,*option == '-' ? MagickTrue : MagickFalse,exception);"
    },
    {
        "line": 580,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 592,
        "fullcodeline": "index=(ssize_t) StringToLong(argv[i+1]);"
    },
    {
        "line": 596,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),"
    },
    {
        "line": 598,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 603,
        "fullcodeline": "PrependImageToList(images,q);"
    },
    {
        "line": 807,
        "fullcodeline": "(void) RemapImages(quantize_info,*images,(Image *) NULL,"
    },
    {
        "line": 826,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 845,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 862,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 878,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 921,
        "fullcodeline": "GetNextToken(p,&p,MagickPathExtent,token);"
    },
    {
        "line": 929,
        "fullcodeline": "ThrowWandFatalException(ResourceLimitFatalError,"
    },
    {
        "line": 936,
        "fullcodeline": "GetNextToken(p,&p,MagickPathExtent,token);"
    },
    {
        "line": 939,
        "fullcodeline": "arguments[x]=StringToDouble(token,(char **) NULL);"
    },
    {
        "line": 947,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 1002,
        "fullcodeline": "length=strlen(argv[i+1]);"
    },
    {
        "line": 1003,
        "fullcodeline": "token=(char *) NULL;"
    },
    {
        "line": 1009,
        "fullcodeline": "next=0;"
    },
    {
        "line": 1010,
        "fullcodeline": "argument=argv[i+1];"
    },
    {
        "line": 1011,
        "fullcodeline": "token_info=AcquireTokenInfo();"
    },
    {
        "line": 1012,
        "fullcodeline": "token_status=Tokenizer(token_info,0,token,length,argument,\"\","
    },
    {
        "line": 1014,
        "fullcodeline": "token_info=DestroyTokenInfo(token_info);"
    },
    {
        "line": 1024,
        "fullcodeline": "token=DestroyString(token);"
    },
    {
        "line": 1029,
        "fullcodeline": "number_arguments-2,(const char **) arguments+2,exception);"
    },
    {
        "line": 1062,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 1090,
        "fullcodeline": "swap_index=(-1);"
    },
    {
        "line": 1091,
        "fullcodeline": "flags=ParseGeometry(argv[i+1],&geometry_info);"
    },
    {
        "line": 1092,
        "fullcodeline": "index=(ssize_t) geometry_info.rho;"
    },
    {
        "line": 1100,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),"
    },
    {
        "line": 1102,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 1113,
        "fullcodeline": "u=DestroyImage(u);"
    },
    {
        "line": 1142,
        "fullcodeline": "write_images=CloneImageList(*images,exception);"
    },
    {
        "line": 1147,
        "fullcodeline": "write_images=DestroyImageList(write_images);"
    },
    {
        "line": 276,
        "fullcodeline": "compose=(CompositeOperator) ParseCommandOption("
    },
    {
        "line": 301,
        "fullcodeline": "if ((source_image->columns != resize_geometry.width) ||"
    },
    {
        "line": 351,
        "fullcodeline": "mask_image=DestroyImage(mask_image);"
    },
    {
        "line": 411,
        "fullcodeline": "DeleteImages(images,argv[i+1],exception);"
    },
    {
        "line": 440,
        "fullcodeline": "number_duplicates=(size_t) StringToLong(argv[i+1]);"
    },
    {
        "line": 441,
        "fullcodeline": "p=strchr(argv[i+1],',');"
    },
    {
        "line": 649,
        "fullcodeline": "layers=CoalesceImages(*images,exception);"
    },
    {
        "line": 657,
        "fullcodeline": "layers=CompareImagesLayers(*images,method,exception);"
    },
    {
        "line": 665,
        "fullcodeline": "layers=MergeImageLayers(*images,method,exception);"
    },
    {
        "line": 670,
        "fullcodeline": "layers=DisposeImages(*images,exception);"
    },
    {
        "line": 675,
        "fullcodeline": "layers=OptimizeImageLayers(*images,exception);"
    },
    {
        "line": 680,
        "fullcodeline": "layers=OptimizePlusImageLayers(*images,exception);"
    },
    {
        "line": 685,
        "fullcodeline": "OptimizeImageTransparency(*images,exception);"
    },
    {
        "line": 690,
        "fullcodeline": "RemoveDuplicateLayers(images,exception);"
    },
    {
        "line": 695,
        "fullcodeline": "RemoveZeroDelayLayers(images,exception);"
    },
    {
        "line": 703,
        "fullcodeline": "layers=CoalesceImages(*images,exception);"
    },
    {
        "line": 709,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 710,
        "fullcodeline": "*images=layers;"
    },
    {
        "line": 711,
        "fullcodeline": "layers=OptimizeImageLayers(*images,exception);"
    },
    {
        "line": 717,
        "fullcodeline": "*images=DestroyImageList(*images);"
    },
    {
        "line": 718,
        "fullcodeline": "*images=layers;"
    },
    {
        "line": 719,
        "fullcodeline": "layers=(Image *) NULL;"
    },
    {
        "line": 720,
        "fullcodeline": "OptimizeImageTransparency(*images,exception);"
    },
    {
        "line": 721,
        "fullcodeline": "(void) RemapImages(quantize_info,*images,(Image *) NULL,"
    },
    {
        "line": 739,
        "fullcodeline": "source=(*images);"
    },
    {
        "line": 771,
        "fullcodeline": "SetGeometry(*images,&geometry);"
    },
    {
        "line": 772,
        "fullcodeline": "(void) ParseAbsoluteGeometry((*images)->geometry,&geometry);"
    },
    {
        "line": 773,
        "fullcodeline": "geometry.width=source->page.width != 0 ?"
    },
    {
        "line": 775,
        "fullcodeline": "geometry.height=source->page.height != 0 ?"
    },
    {
        "line": 777,
        "fullcodeline": "GravityAdjustGeometry((*images)->page.width != 0 ?"
    },
    {
        "line": 781,
        "fullcodeline": "compose=OverCompositeOp;"
    },
    {
        "line": 782,
        "fullcodeline": "option=GetImageOption(mogrify_info,\"compose\");"
    },
    {
        "line": 786,
        "fullcodeline": "CompositeLayers(*images,compose,source,geometry.x,geometry.y,"
    },
    {
        "line": 788,
        "fullcodeline": "source=DestroyImageList(source);"
    },
    {
        "line": 922,
        "fullcodeline": "if (*token == ',')"
    },
    {
        "line": 937,
        "fullcodeline": "if (*token == ',')"
    },
    {
        "line": 1004,
        "fullcodeline": "if (~length >= (MagickPathExtent-1))"
    },
    {
        "line": 1007,
        "fullcodeline": "if (token == (char *) NULL)"
    },
    {
        "line": 1015,
        "fullcodeline": "if (token_status == 0)"
    },
    {
        "line": 1093,
        "fullcodeline": "if ((flags & SigmaValue) != 0)"
    },
    {
        "line": 1138,
        "fullcodeline": "argv[i+1]);"
    },
    {
        "line": 240,
        "fullcodeline": "MagickFalse,argv[i+1]);"
    },
    {
        "line": 302,
        "fullcodeline": "(source_image->rows != resize_geometry.height))"
    },
    {
        "line": 307,
        "fullcodeline": "resize_image=ResizeImage(source_image,resize_geometry.width,"
    },
    {
        "line": 326,
        "fullcodeline": "if ((compose == DisplaceCompositeOp) ||"
    },
    {
        "line": 422,
        "fullcodeline": "MagickDitherOptions,MagickFalse,argv[i+1]);"
    },
    {
        "line": 442,
        "fullcodeline": "if (p == (const char *) NULL)"
    },
    {
        "line": 467,
        "fullcodeline": "MagickEvaluateOptions,MagickFalse,argv[i+1]);"
    },
    {
        "line": 605,
        "fullcodeline": "if (index == (ssize_t) GetImageListLength(*images))"
    },
    {
        "line": 626,
        "fullcodeline": "MagickInterpolateOptions,MagickFalse,argv[i+1]);"
    },
    {
        "line": 644,
        "fullcodeline": "MagickFalse,argv[i+1]);"
    },
    {
        "line": 704,
        "fullcodeline": "if (layers == (Image *) NULL)"
    },
    {
        "line": 712,
        "fullcodeline": "if (layers == (Image *) NULL)"
    },
    {
        "line": 740,
        "fullcodeline": "while (source != (Image *) NULL)"
    },
    {
        "line": 747,
        "fullcodeline": "if (source != (Image *) NULL)"
    },
    {
        "line": 761,
        "fullcodeline": "if (source == (Image *) NULL)"
    },
    {
        "line": 779,
        "fullcodeline": "(*images)->page.height != 0 ? (*images)->page.height :"
    },
    {
        "line": 783,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 923,
        "fullcodeline": "GetNextToken(p,&p,MagickPathExtent,token);"
    },
    {
        "line": 938,
        "fullcodeline": "GetNextToken(p,&p,MagickPathExtent,token);"
    },
    {
        "line": 1005,
        "fullcodeline": "token=(char *) AcquireQuantumMemory(length+MagickPathExtent,"
    },
    {
        "line": 1021,
        "fullcodeline": "(void) InvokeDynamicImageFilter(token,&(*images),1,&arg,"
    },
    {
        "line": 309,
        "fullcodeline": "if (resize_image != (Image *) NULL)"
    },
    {
        "line": 327,
        "fullcodeline": "(compose == DistortCompositeOp))"
    },
    {
        "line": 329,
        "fullcodeline": "status&=CompositeImage(source_image,mask_image,"
    },
    {
        "line": 331,
        "fullcodeline": "status&=CompositeImage(new_images,source_image,compose,"
    },
    {
        "line": 443,
        "fullcodeline": "duplicate_images=DuplicateImages(*images,number_duplicates,"
    },
    {
        "line": 597,
        "fullcodeline": "OptionError,\"NoSuchImage\",\"`%s'\",argv[i+1]);"
    },
    {
        "line": 606,
        "fullcodeline": "AppendImageToList(images,q);"
    },
    {
        "line": 706,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 714,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 742,
        "fullcodeline": "source=GetNextImageInList(source);"
    },
    {
        "line": 763,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),"
    },
    {
        "line": 765,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 784,
        "fullcodeline": "compose=(CompositeOperator) ParseCommandOption("
    },
    {
        "line": 178,
        "fullcodeline": "MagickColorspaceOptions,MagickFalse,argv[i+1]);"
    },
    {
        "line": 311,
        "fullcodeline": "source_image=DestroyImage(source_image);"
    },
    {
        "line": 312,
        "fullcodeline": "source_image=resize_image;"
    },
    {
        "line": 339,
        "fullcodeline": "clone_image=CloneImage(new_images,0,0,MagickTrue,exception);"
    },
    {
        "line": 342,
        "fullcodeline": "status&=CompositeImage(new_images,source_image,compose,"
    },
    {
        "line": 344,
        "fullcodeline": "status&=CompositeImage(new_images,mask_image,"
    },
    {
        "line": 346,
        "fullcodeline": "status&=CompositeImage(clone_image,new_images,"
    },
    {
        "line": 348,
        "fullcodeline": "new_images=DestroyImageList(new_images);"
    },
    {
        "line": 349,
        "fullcodeline": "new_images=clone_image;"
    },
    {
        "line": 446,
        "fullcodeline": "duplicate_images=DuplicateImages(*images,number_duplicates,p,"
    },
    {
        "line": 609,
        "fullcodeline": "q=GetImageFromList(*images,index-1);"
    },
    {
        "line": 618,
        "fullcodeline": "InsertImageInList(&q,p);"
    },
    {
        "line": 743,
        "fullcodeline": "if ((source != (Image *) NULL) &&"
    },
    {
        "line": 749,
        "fullcodeline": "if ((GetPreviousImageInList(source) == (Image *) NULL) ||"
    },
    {
        "line": 340,
        "fullcodeline": "if (clone_image == (Image *) NULL)"
    },
    {
        "line": 610,
        "fullcodeline": "if (q == (Image *) NULL)"
    },
    {
        "line": 744,
        "fullcodeline": "(LocaleCompare(source->magick,\"NULL\") == 0))"
    },
    {
        "line": 750,
        "fullcodeline": "(GetNextImageInList(source) == (Image *) NULL))"
    },
    {
        "line": 751,
        "fullcodeline": "source=(Image *) NULL;"
    },
    {
        "line": 612,
        "fullcodeline": "p=DestroyImage(p);"
    },
    {
        "line": 613,
        "fullcodeline": "(void) ThrowMagickException(exception,GetMagickModule(),"
    },
    {
        "line": 615,
        "fullcodeline": "status=MagickFalse;"
    },
    {
        "line": 757,
        "fullcodeline": "source=SplitImageList(source->previous);"
    },
    {
        "line": 758,
        "fullcodeline": "DeleteImageFromList(&source);"
    },
    {
        "line": 614,
        "fullcodeline": "OptionError,\"NoSuchImage\",\"`%s'\",argv[i+1]);"
    }
]