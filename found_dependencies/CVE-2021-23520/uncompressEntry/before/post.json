[
    {
        "line": 3,
        "fullcodeline": "auto* zei = entries.getUnchecked (index);"
    },
    {
        "line": 8,
        "fullcodeline": "auto entryPath = zei->entry.filename.replaceCharacter ('\\\\', '/');"
    },
    {
        "line": 14,
        "fullcodeline": "auto targetFile = targetDirectory.getChildFile (entryPath);"
    },
    {
        "line": 19,
        "fullcodeline": "std::unique_ptr<InputStream> in (createStreamForEntry (index));"
    },
    {
        "line": 54,
        "fullcodeline": "targetFile.setCreationTime (zei->entry.fileTime);"
    },
    {
        "line": 55,
        "fullcodeline": "targetFile.setLastModificationTime (zei->entry.fileTime);"
    },
    {
        "line": 56,
        "fullcodeline": "targetFile.setLastAccessTime (zei->entry.fileTime);"
    },
    {
        "line": 11,
        "fullcodeline": "if (entryPath.isEmpty())"
    },
    {
        "line": 16,
        "fullcodeline": "if (entryPath.endsWithChar ('/') || entryPath.endsWithChar ('\\\\'))"
    },
    {
        "line": 21,
        "fullcodeline": "if (in == nullptr)"
    },
    {
        "line": 24,
        "fullcodeline": "if (targetFile.exists())"
    },
    {
        "line": 33,
        "fullcodeline": "if (! targetFile.getParentDirectory().createDirectory())"
    },
    {
        "line": 58,
        "fullcodeline": "return Result::ok();"
    },
    {
        "line": 38,
        "fullcodeline": "String originalFilePath (in->readEntireStreamAsString()"
    },
    {
        "line": 12,
        "fullcodeline": "return Result::ok();"
    },
    {
        "line": 17,
        "fullcodeline": "return targetFile.createDirectory(); // (entry is a directory, not a file)"
    },
    {
        "line": 22,
        "fullcodeline": "return Result::fail (\"Failed to open the zip file for reading\");"
    },
    {
        "line": 26,
        "fullcodeline": "if (! shouldOverwriteFiles)"
    },
    {
        "line": 29,
        "fullcodeline": "if (! targetFile.deleteFile())"
    },
    {
        "line": 34,
        "fullcodeline": "return Result::fail (\"Failed to create target folder: \" + targetFile.getParentDirectory().getFullPathName());"
    },
    {
        "line": 41,
        "fullcodeline": "if (! File::createSymbolicLink (targetFile, originalFilePath, true))"
    },
    {
        "line": 46,
        "fullcodeline": "FileOutputStream out (targetFile);"
    },
    {
        "line": 51,
        "fullcodeline": "out << *in;"
    },
    {
        "line": 48,
        "fullcodeline": "if (out.failedToOpen())"
    },
    {
        "line": 27,
        "fullcodeline": "return Result::ok();"
    },
    {
        "line": 30,
        "fullcodeline": "return Result::fail (\"Failed to write to target file: \" + targetFile.getFullPathName());"
    },
    {
        "line": 42,
        "fullcodeline": "return Result::fail (\"Failed to create symbolic link: \" + originalFilePath);"
    },
    {
        "line": 49,
        "fullcodeline": "return Result::fail (\"Failed to write to target file: \" + targetFile.getFullPathName());"
    }
]