[
    {
        "line": 3,
        "fullcodeline": "int cbData = (int)pSendMessage->m_cbSize;"
    },
    {
        "line": 33,
        "fullcodeline": "SNP_ClampSendRate();"
    },
    {
        "line": 34,
        "fullcodeline": "SNP_TokenBucket_Accumulate( usecNow );"
    },
    {
        "line": 37,
        "fullcodeline": "pSendMessage->m_nMessageNumber = ++m_senderState.m_nLastSentMsgNum;"
    },
    {
        "line": 94,
        "fullcodeline": "m_senderState.m_messagesQueued.push_back( pSendMessage );"
    },
    {
        "line": 95,
        "fullcodeline": "SpewVerboseGroup( m_connectionConfig.m_LogLevel_Message.Get(), \"[%s] SendMessage %s: MsgNum=%lld sz=%d\\n\","
    },
    {
        "line": 108,
        "fullcodeline": "pSendMessage->SNPSend_SetUsecNagle( usecNow + m_connectionConfig.m_NagleTime.Get() );"
    },
    {
        "line": 113,
        "fullcodeline": "int64 result = pSendMessage->m_nMessageNumber;"
    },
    {
        "line": 10,
        "fullcodeline": "if ( m_senderState.PendingBytesTotal() + cbData > m_connectionConfig.m_SendBufferSize.Get() )"
    },
    {
        "line": 18,
        "fullcodeline": "if ( cbData > k_cbMaxUnreliableMsgSize && !( pSendMessage->m_nFlags & k_nSteamNetworkingSend_Reliable )  )"
    },
    {
        "line": 24,
        "fullcodeline": "if ( pSendMessage->m_nFlags & k_nSteamNetworkingSend_NoDelay )"
    },
    {
        "line": 40,
        "fullcodeline": "if ( pSendMessage->m_nFlags & k_nSteamNetworkingSend_Reliable )"
    },
    {
        "line": 97,
        "fullcodeline": "pSendMessage->SNPSend_IsReliable() ? \"RELIABLE\" : \"UNRELIABLE\","
    },
    {
        "line": 98,
        "fullcodeline": "(long long)pSendMessage->m_nMessageNumber,"
    },
    {
        "line": 109,
        "fullcodeline": "if ( pSendMessage->m_nFlags & k_nSteamNetworkingSend_NoNagle )"
    },
    {
        "line": 122,
        "fullcodeline": "if ( GetState() == k_ESteamNetworkingConnectionState_Connected )"
    },
    {
        "line": 7,
        "fullcodeline": "*pbThinkImmediately = false;"
    },
    {
        "line": 12,
        "fullcodeline": "SpewWarningRateLimited( usecNow, \"Connection already has %u bytes pending, cannot queue any more messages\\n\", m_senderState.PendingBytesTotal() );"
    },
    {
        "line": 13,
        "fullcodeline": "pSendMessage->Release();"
    },
    {
        "line": 20,
        "fullcodeline": "SpewWarningRateLimited( usecNow, \"Trying to send a very large (%d bytes) unreliable message.  Sending as reliable instead.\\n\", cbData );"
    },
    {
        "line": 21,
        "fullcodeline": "pSendMessage->m_nFlags |= k_nSteamNetworkingSend_Reliable;"
    },
    {
        "line": 42,
        "fullcodeline": "pSendMessage->SNPSend_SetReliableStreamPos( m_senderState.m_nReliableStreamPos );"
    },
    {
        "line": 45,
        "fullcodeline": "byte *hdr = pSendMessage->SNPSend_ReliableHeader();"
    },
    {
        "line": 46,
        "fullcodeline": "hdr[0] = 0;"
    },
    {
        "line": 47,
        "fullcodeline": "byte *hdrEnd = hdr+1;"
    },
    {
        "line": 48,
        "fullcodeline": "int64 nMsgNumGap = pSendMessage->m_nMessageNumber - m_senderState.m_nLastSendMsgNumReliable;"
    },
    {
        "line": 49,
        "fullcodeline": "Assert( nMsgNumGap >= 1 );"
    },
    {
        "line": 64,
        "fullcodeline": "pSendMessage->m_cbSNPSendReliableHeader = hdrEnd - hdr;"
    },
    {
        "line": 67,
        "fullcodeline": "pSendMessage->m_cbSize += pSendMessage->m_cbSNPSendReliableHeader;"
    },
    {
        "line": 70,
        "fullcodeline": "m_senderState.m_nReliableStreamPos += pSendMessage->m_cbSize;"
    },
    {
        "line": 73,
        "fullcodeline": "++m_senderState.m_nMessagesSentReliable;"
    },
    {
        "line": 74,
        "fullcodeline": "m_senderState.m_cbPendingReliable += pSendMessage->m_cbSize;"
    },
    {
        "line": 78,
        "fullcodeline": "m_senderState.m_nLastSendMsgNumReliable = pSendMessage->m_nMessageNumber;"
    },
    {
        "line": 80,
        "fullcodeline": "Assert( pSendMessage->SNPSend_IsReliable() );"
    },
    {
        "line": 110,
        "fullcodeline": "m_senderState.ClearNagleTimers();"
    },
    {
        "line": 124,
        "fullcodeline": "SteamNetworkingMicroseconds usecNextThink = SNP_GetNextThinkTime( usecNow );"
    },
    {
        "line": 14,
        "fullcodeline": "return -k_EResultLimitExceeded;"
    },
    {
        "line": 50,
        "fullcodeline": "if ( nMsgNumGap > 1 )"
    },
    {
        "line": 55,
        "fullcodeline": "if ( cbData < 0x20 )"
    },
    {
        "line": 84,
        "fullcodeline": "pSendMessage->SNPSend_SetReliableStreamPos( 0 );"
    },
    {
        "line": 85,
        "fullcodeline": "pSendMessage->m_cbSNPSendReliableHeader = 0;"
    },
    {
        "line": 87,
        "fullcodeline": "++m_senderState.m_nMessagesSentUnreliable;"
    },
    {
        "line": 88,
        "fullcodeline": "m_senderState.m_cbPendingUnreliable += pSendMessage->m_cbSize;"
    },
    {
        "line": 90,
        "fullcodeline": "Assert( !pSendMessage->SNPSend_IsReliable() );"
    },
    {
        "line": 127,
        "fullcodeline": "if ( usecNextThink > usecNow )"
    },
    {
        "line": 52,
        "fullcodeline": "hdrEnd = SerializeVarInt( hdrEnd, (uint64)nMsgNumGap );"
    },
    {
        "line": 53,
        "fullcodeline": "hdr[0] |= 0x40;"
    },
    {
        "line": 57,
        "fullcodeline": "hdr[0] |= (byte)cbData;"
    },
    {
        "line": 142,
        "fullcodeline": "EnsureMinThinkTime( usecNextThink );"
    },
    {
        "line": 61,
        "fullcodeline": "hdr[0] |= (byte)( 0x20 | ( cbData & 0x1f ) );"
    },
    {
        "line": 62,
        "fullcodeline": "hdrEnd = SerializeVarInt( hdrEnd, cbData>>5U );"
    },
    {
        "line": 131,
        "fullcodeline": "if ( m_senderState.m_messagesQueued.m_pFirst->SNPSend_UsecNagle() == 0 )"
    },
    {
        "line": 133,
        "fullcodeline": "SpewVerbose( \"[%s] RATELIM QueueTime is %.1fms, SendRate=%.1fk, BytesQueued=%d\\n\","
    },
    {
        "line": 148,
        "fullcodeline": "if ( pSendMessage->m_nFlags & k_nSteamNetworkingSend_UseCurrentThread )"
    },
    {
        "line": 135,
        "fullcodeline": "m_senderState.CalcTimeUntilNextSend() * 1e-3,"
    },
    {
        "line": 136,
        "fullcodeline": "m_senderState.m_n_x * ( 1.0/1024.0),"
    },
    {
        "line": 137,
        "fullcodeline": "m_senderState.PendingBytesTotal()"
    },
    {
        "line": 167,
        "fullcodeline": "SetNextThinkTimeASAP();"
    },
    {
        "line": 156,
        "fullcodeline": "*pbThinkImmediately = true;"
    },
    {
        "line": 161,
        "fullcodeline": "CheckConnectionStateAndSetNextThinkTime( usecNow );"
    }
]