[
    {
        "line": 17,
        "fullcodeline": "n = paddle.arange(0, M, dtype=dtype)"
    },
    {
        "line": 18,
        "fullcodeline": "width = int(alpha * (M - 1) / 2.0)"
    },
    {
        "line": 19,
        "fullcodeline": "n1 = n[0 : width + 1]"
    },
    {
        "line": 20,
        "fullcodeline": "n2 = n[width + 1 : M - width - 1]"
    },
    {
        "line": 21,
        "fullcodeline": "n3 = n[M - width - 1 :]"
    },
    {
        "line": 23,
        "fullcodeline": "w1 = 0.5 * (1 + paddle.cos(math.pi * (-1 + 2.0 * n1 / alpha / (M - 1))))"
    },
    {
        "line": 24,
        "fullcodeline": "w2 = paddle.ones(n2.shape, dtype=dtype)"
    },
    {
        "line": 25,
        "fullcodeline": "w3 = 0.5 * ("
    },
    {
        "line": 29,
        "fullcodeline": "w = paddle.concat([w1, w2, w3])"
    },
    {
        "line": 7,
        "fullcodeline": "if _len_guards(M):"
    },
    {
        "line": 10,
        "fullcodeline": "if alpha <= 0:"
    },
    {
        "line": 15,
        "fullcodeline": "M, needs_trunc = _extend(M, sym)"
    },
    {
        "line": 31,
        "fullcodeline": "return _truncate(w, needs_trunc)"
    },
    {
        "line": 8,
        "fullcodeline": "return paddle.ones((M,), dtype=dtype)"
    },
    {
        "line": 11,
        "fullcodeline": "return paddle.ones((M,), dtype=dtype)"
    },
    {
        "line": 12,
        "fullcodeline": "elif alpha >= 1.0:"
    },
    {
        "line": 27,
        "fullcodeline": "+ paddle.cos(math.pi * (-2.0 / alpha + 1 + 2.0 * n3 / alpha / (M - 1)))"
    },
    {
        "line": 13,
        "fullcodeline": "return hann(M, sym=sym)"
    }
]