[
    {
        "line": 7,
        "fullcodeline": "n = paddle.arange(1, (M + 1) // 2 + 1, dtype=dtype)"
    },
    {
        "line": 3,
        "fullcodeline": "if _len_guards(M):"
    },
    {
        "line": 5,
        "fullcodeline": "M, needs_trunc = _extend(M, sym)"
    },
    {
        "line": 15,
        "fullcodeline": "return _truncate(w, needs_trunc)"
    },
    {
        "line": 8,
        "fullcodeline": "if M % 2 == 0:"
    },
    {
        "line": 9,
        "fullcodeline": "w = (2 * n - 1.0) / M"
    },
    {
        "line": 10,
        "fullcodeline": "w = paddle.concat([w, w[::-1]])"
    },
    {
        "line": 12,
        "fullcodeline": "w = 2 * n / (M + 1.0)"
    },
    {
        "line": 13,
        "fullcodeline": "w = paddle.concat([w, w[-2::-1]])"
    },
    {
        "line": 4,
        "fullcodeline": "return paddle.ones((M,), dtype=dtype)"
    }
]