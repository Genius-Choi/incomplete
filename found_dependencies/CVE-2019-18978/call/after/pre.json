[
    {
        "line": 4,
        "fullcodeline": "path = evaluate_path(env)"
    },
    {
        "line": 6,
        "fullcodeline": "add_headers = nil"
    },
    {
        "line": 33,
        "fullcodeline": "vary_resource = resource_for_path(path)"
    },
    {
        "line": 65,
        "fullcodeline": "[status, headers, body]"
    },
    {
        "line": 8,
        "fullcodeline": "debug(env) do"
    },
    {
        "line": 27,
        "fullcodeline": "Result.miss(env, Result::MISS_NO_ORIGIN)"
    },
    {
        "line": 38,
        "fullcodeline": "headers = add_headers.merge(headers)"
    },
    {
        "line": 39,
        "fullcodeline": "debug(env) do"
    },
    {
        "line": 52,
        "fullcodeline": "vary = headers[VARY]"
    },
    {
        "line": 58,
        "fullcodeline": "headers[VARY] = ((vary ? ([vary].flatten.map { |v| v.split(/,\\s*/) }.flatten) : []) + cors_vary_headers).uniq.join(', ')"
    },
    {
        "line": 61,
        "fullcodeline": "if debug? && result = env[RACK_CORS]"
    },
    {
        "line": 62,
        "fullcodeline": "result.append_header(headers)"
    },
    {
        "line": 16,
        "fullcodeline": "if env[REQUEST_METHOD] == OPTIONS and env[HTTP_ACCESS_CONTROL_REQUEST_METHOD]"
    },
    {
        "line": 53,
        "fullcodeline": "cors_vary_headers = if vary_resource.vary_headers && vary_resource.vary_headers.any?"
    },
    {
        "line": 2,
        "fullcodeline": "env[HTTP_ORIGIN] ||= env[HTTP_X_ORIGIN] if env[HTTP_X_ORIGIN]"
    },
    {
        "line": 17,
        "fullcodeline": "headers = process_preflight(env, path)"
    },
    {
        "line": 18,
        "fullcodeline": "debug(env) do"
    },
    {
        "line": 24,
        "fullcodeline": "add_headers = process_cors(env, path)"
    },
    {
        "line": 54,
        "fullcodeline": "vary_resource.vary_headers"
    },
    {
        "line": 55,
        "fullcodeline": "else"
    },
    {
        "line": 22,
        "fullcodeline": "return [200, headers, []]"
    }
]