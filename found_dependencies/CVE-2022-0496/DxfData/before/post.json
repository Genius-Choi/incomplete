[
    {
        "line": 5,
        "fullcodeline": "std::ifstream stream(filename.c_str());"
    },
    {
        "line": 11,
        "fullcodeline": "Grid2d<std::vector<int>> grid(GRID_COARSE);"
    },
    {
        "line": 12,
        "fullcodeline": "std::vector<Line> lines;                       // Global lines"
    },
    {
        "line": 15,
        "fullcodeline": "auto in_entities_section = false;"
    },
    {
        "line": 16,
        "fullcodeline": "auto in_blocks_section = false;"
    },
    {
        "line": 39,
        "fullcodeline": "int dimtype = 0;"
    },
    {
        "line": 40,
        "fullcodeline": "double coords[7][2]; // Used by DIMENSION entities"
    },
    {
        "line": 43,
        "fullcodeline": "double radius = 0;"
    },
    {
        "line": 44,
        "fullcodeline": "double arc_start_angle = 0, arc_stop_angle = 0;"
    },
    {
        "line": 45,
        "fullcodeline": "double ellipse_start_angle = 0, ellipse_stop_angle = 0;"
    },
    {
        "line": 441,
        "fullcodeline": "fixup_path_direction();"
    },
    {
        "line": 6,
        "fullcodeline": "if (!stream.good()) {"
    },
    {
        "line": 47,
        "fullcodeline": "for (int i = 0; i < 7; ++i) {"
    },
    {
        "line": 59,
        "fullcodeline": "while (!stream.eof())\t{"
    },
    {
        "line": 350,
        "fullcodeline": "for (size_t i = 0; i < lines.size(); ++i) {"
    },
    {
        "line": 355,
        "fullcodeline": "while (enabled_lines.size() > 0) {"
    },
    {
        "line": 407,
        "fullcodeline": "while (enabled_lines.size() > 0) {"
    },
    {
        "line": 7,
        "fullcodeline": "LOG(message_group::Warning,Location::NONE,\"\",\"Can't open DXF file '%1$s'.\",filename);"
    },
    {
        "line": 61,
        "fullcodeline": "std::getline(stream, id_str);"
    },
    {
        "line": 62,
        "fullcodeline": "boost::trim(id_str);"
    },
    {
        "line": 63,
        "fullcodeline": "std::getline(stream, data);"
    },
    {
        "line": 64,
        "fullcodeline": "boost::trim(data);"
    },
    {
        "line": 351,
        "fullcodeline": "enabled_lines[i] = i;"
    },
    {
        "line": 377,
        "fullcodeline": "this->paths.push_back(Path());"
    },
    {
        "line": 378,
        "fullcodeline": "Path *this_path = &this->paths.back();"
    },
    {
        "line": 380,
        "fullcodeline": "this_path->indices.push_back(lines[current_line].idx[current_point]);"
    },
    {
        "line": 409,
        "fullcodeline": "int current_point = 0;"
    },
    {
        "line": 411,
        "fullcodeline": "this->paths.push_back(Path());"
    },
    {
        "line": 412,
        "fullcodeline": "auto& this_path = this->paths.back();"
    },
    {
        "line": 413,
        "fullcodeline": "this_path.is_closed = true;"
    },
    {
        "line": 415,
        "fullcodeline": "this_path.indices.push_back(lines[current_line].idx[current_point]);"
    },
    {
        "line": 48,
        "fullcodeline": "for (int j = 0; j < 2; ++j) {"
    },
    {
        "line": 337,
        "fullcodeline": "if (layername.empty()) {"
    },
    {
        "line": 49,
        "fullcodeline": "coords[i][j] = 0;"
    },
    {
        "line": 68,
        "fullcodeline": "id = boost::lexical_cast<int>(id_str);"
    },
    {
        "line": 338,
        "fullcodeline": "LOG(message_group::Warning,Location::NONE,\"\","
    },
    {
        "line": 382,
        "fullcodeline": "this_path->indices.push_back(lines[current_line].idx[!current_point]);"
    },
    {
        "line": 384,
        "fullcodeline": "lines[current_line].disabled = true;"
    },
    {
        "line": 385,
        "fullcodeline": "enabled_lines.erase(current_line);"
    },
    {
        "line": 386,
        "fullcodeline": "auto lv = grid.data(ref_point[0], ref_point[1]);"
    },
    {
        "line": 408,
        "fullcodeline": "int current_line = enabled_lines.begin()->second;"
    },
    {
        "line": 417,
        "fullcodeline": "this_path.indices.push_back(lines[current_line].idx[!current_point]);"
    },
    {
        "line": 419,
        "fullcodeline": "lines[current_line].disabled = true;"
    },
    {
        "line": 420,
        "fullcodeline": "enabled_lines.erase(current_line);"
    },
    {
        "line": 421,
        "fullcodeline": "auto lv = grid.data(ref_point[0], ref_point[1]);"
    },
    {
        "line": 77,
        "fullcodeline": "if (id >= 10 && id <= 16) {"
    },
    {
        "line": 89,
        "fullcodeline": "if (id >= 20 && id <= 26) {"
    },
    {
        "line": 329,
        "fullcodeline": "LOG(message_group::Warning,Location::NONE,\"\",\"Illegal value '%1$s'in `%2$s'\",data,filename);"
    },
    {
        "line": 332,
        "fullcodeline": "LOG(message_group::Warning,Location::NONE,\"\",\"Not enough input values for %1$s. in '%2$s'\",data,filename);"
    },
    {
        "line": 339,
        "fullcodeline": "\"Unsupported DXF Entity '%1$s' (%2$x) in %3$s.\",i.first,i.second,QuotedString(boostfs_uncomplete(filename, fs::current_path()).generic_string()));"
    },
    {
        "line": 341,
        "fullcodeline": "LOG(message_group::Warning,Location::NONE,\"\","
    },
    {
        "line": 360,
        "fullcodeline": "for (int j = 0; j < 2; ++j) {"
    },
    {
        "line": 387,
        "fullcodeline": "for (size_t ki = 0; ki < lv.size(); ++ki) {"
    },
    {
        "line": 422,
        "fullcodeline": "for (size_t ki = 0; ki < lv.size(); ++ki) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (!stream.eof()) {"
    },
    {
        "line": 236,
        "fullcodeline": "mode = data;"
    },
    {
        "line": 237,
        "fullcodeline": "layer.erase();"
    },
    {
        "line": 238,
        "fullcodeline": "name.erase();"
    },
    {
        "line": 239,
        "fullcodeline": "iddata.erase();"
    },
    {
        "line": 240,
        "fullcodeline": "dimtype = 0;"
    },
    {
        "line": 246,
        "fullcodeline": "xverts.clear();"
    },
    {
        "line": 247,
        "fullcodeline": "yverts.clear();"
    },
    {
        "line": 248,
        "fullcodeline": "radius = arc_start_angle = arc_stop_angle = 0;"
    },
    {
        "line": 249,
        "fullcodeline": "ellipse_start_angle = ellipse_stop_angle = 0;"
    },
    {
        "line": 255,
        "fullcodeline": "name = data;"
    },
    {
        "line": 258,
        "fullcodeline": "iddata = data;"
    },
    {
        "line": 261,
        "fullcodeline": "layer = data;"
    },
    {
        "line": 299,
        "fullcodeline": "radius = boost::lexical_cast<double>(data);"
    },
    {
        "line": 305,
        "fullcodeline": "ellipse_start_angle = boost::lexical_cast<double>(data);"
    },
    {
        "line": 311,
        "fullcodeline": "arc_start_angle = boost::lexical_cast<double>(data);"
    },
    {
        "line": 316,
        "fullcodeline": "ellipse_stop_angle = boost::lexical_cast<double>(data);"
    },
    {
        "line": 319,
        "fullcodeline": "arc_stop_angle = boost::lexical_cast<double>(data);"
    },
    {
        "line": 324,
        "fullcodeline": "dimtype = boost::lexical_cast<int>(data);"
    },
    {
        "line": 342,
        "fullcodeline": "\"Unsupported DXF Entity '%1$s' (%2$x) in layer '%3$s' of %4$s\",i.first,i.second,layername,boostfs_uncomplete(filename, fs::current_path()).generic_string());"
    },
    {
        "line": 361,
        "fullcodeline": "auto lv = grid.data(this->points[lines[idx].idx[j]][0], this->points[lines[idx].idx[j]][1]);"
    },
    {
        "line": 367,
        "fullcodeline": "current_line = idx;"
    },
    {
        "line": 368,
        "fullcodeline": "current_point = j;"
    },
    {
        "line": 388,
        "fullcodeline": "int k = lv.at(ki);"
    },
    {
        "line": 423,
        "fullcodeline": "int k = lv.at(ki);"
    },
    {
        "line": 72,
        "fullcodeline": "LOG(message_group::Warning,Location::NONE,\"\",\"Illegal ID '%1$s' in `%2$s'\",id_str,filename);"
    },
    {
        "line": 103,
        "fullcodeline": "if (mode == \"SECTION\") {"
    },
    {
        "line": 241,
        "fullcodeline": "for (int i = 0; i < 7; ++i) {"
    },
    {
        "line": 250,
        "fullcodeline": "if (mode == \"INSERT\") {"
    },
    {
        "line": 300,
        "fullcodeline": "if (!in_blocks_section) radius *= scale;"
    },
    {
        "line": 362,
        "fullcodeline": "for (size_t ki = 0; ki < lv.size(); ++ki) {"
    },
    {
        "line": 383,
        "fullcodeline": "const auto &ref_point = this->points[lines[current_line].idx[!current_point]];"
    },
    {
        "line": 390,
        "fullcodeline": "if (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[0]][0], this->points[lines[k].idx[0]][1])) {"
    },
    {
        "line": 395,
        "fullcodeline": "if (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[1]][0], this->points[lines[k].idx[1]][1])) {"
    },
    {
        "line": 418,
        "fullcodeline": "const auto &ref_point = this->points[lines[current_line].idx[!current_point]];"
    },
    {
        "line": 425,
        "fullcodeline": "if (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[0]][0], this->points[lines[k].idx[0]][1])) {"
    },
    {
        "line": 430,
        "fullcodeline": "if (grid.eq(ref_point[0], ref_point[1], this->points[lines[k].idx[1]][0], this->points[lines[k].idx[1]][1])) {"
    },
    {
        "line": 79,
        "fullcodeline": "coords[id-10][0] = boost::lexical_cast<double>(data);"
    },
    {
        "line": 91,
        "fullcodeline": "coords[id-20][1] = boost::lexical_cast<double>(data);"
    },
    {
        "line": 104,
        "fullcodeline": "in_entities_section = iddata == \"ENTITIES\";"
    },
    {
        "line": 105,
        "fullcodeline": "in_blocks_section = iddata == \"BLOCKS\";"
    },
    {
        "line": 251,
        "fullcodeline": "ellipse_start_angle = ellipse_stop_angle = 1.0; // scale"
    },
    {
        "line": 265,
        "fullcodeline": "xverts.push_back((boost::lexical_cast<double>(data)));"
    },
    {
        "line": 273,
        "fullcodeline": "xverts.push_back((boost::lexical_cast<double>(data)));"
    },
    {
        "line": 281,
        "fullcodeline": "yverts.push_back((boost::lexical_cast<double>(data)));"
    },
    {
        "line": 289,
        "fullcodeline": "yverts.push_back((boost::lexical_cast<double>(data)));"
    },
    {
        "line": 363,
        "fullcodeline": "int k = lv.at(ki);"
    },
    {
        "line": 391,
        "fullcodeline": "current_line = k;"
    },
    {
        "line": 392,
        "fullcodeline": "current_point = 0;"
    },
    {
        "line": 396,
        "fullcodeline": "current_line = k;"
    },
    {
        "line": 397,
        "fullcodeline": "current_point = 1;"
    },
    {
        "line": 426,
        "fullcodeline": "current_line = k;"
    },
    {
        "line": 427,
        "fullcodeline": "current_point = 0;"
    },
    {
        "line": 431,
        "fullcodeline": "current_line = k;"
    },
    {
        "line": 432,
        "fullcodeline": "current_point = 1;"
    },
    {
        "line": 242,
        "fullcodeline": "for (int j = 0; j < 2; ++j) {"
    },
    {
        "line": 268,
        "fullcodeline": "xverts.push_back((boost::lexical_cast<double>(data) - xorigin) * scale);"
    },
    {
        "line": 276,
        "fullcodeline": "xverts.push_back((boost::lexical_cast<double>(data) - xorigin) * scale);"
    },
    {
        "line": 284,
        "fullcodeline": "yverts.push_back((boost::lexical_cast<double>(data) - yorigin) * scale);"
    },
    {
        "line": 292,
        "fullcodeline": "yverts.push_back((boost::lexical_cast<double>(data) - yorigin) * scale);"
    },
    {
        "line": 364,
        "fullcodeline": "if (k == idx || lines[k].disabled) continue;"
    },
    {
        "line": 81,
        "fullcodeline": "else if (id == 11 || id == 12 || id == 16) {"
    },
    {
        "line": 93,
        "fullcodeline": "else if (id == 21 || id == 22 || id == 26) {"
    },
    {
        "line": 107,
        "fullcodeline": "else if (mode == \"LINE\") {"
    },
    {
        "line": 243,
        "fullcodeline": "coords[i][j] = 0;"
    },
    {
        "line": 82,
        "fullcodeline": "coords[id-10][0] = boost::lexical_cast<double>(data) * scale;"
    },
    {
        "line": 94,
        "fullcodeline": "coords[id-20][1] = boost::lexical_cast<double>(data) * scale;"
    },
    {
        "line": 108,
        "fullcodeline": "ADD_LINE(xverts.at(0), yverts.at(0), xverts.at(1), yverts.at(1));"
    },
    {
        "line": 85,
        "fullcodeline": "coords[id-10][0] = (boost::lexical_cast<double>(data) - xorigin) * scale;"
    },
    {
        "line": 97,
        "fullcodeline": "coords[id-20][1] = (boost::lexical_cast<double>(data) - yorigin) * scale;"
    },
    {
        "line": 110,
        "fullcodeline": "else if (mode == \"LWPOLYLINE\") {"
    },
    {
        "line": 113,
        "fullcodeline": "int numverts = std::max(xverts.size(), yverts.size());"
    },
    {
        "line": 114,
        "fullcodeline": "for (int i=1; i<numverts; ++i) {"
    },
    {
        "line": 118,
        "fullcodeline": "if (dimtype & 0x01) { // closed polyline"
    },
    {
        "line": 115,
        "fullcodeline": "ADD_LINE(xverts.at(i-1), yverts.at(i-1), xverts.at(i%numverts), yverts.at(i%numverts));"
    },
    {
        "line": 119,
        "fullcodeline": "ADD_LINE(xverts.at(numverts-1), yverts.at(numverts-1), xverts.at(0), yverts.at(0));"
    },
    {
        "line": 122,
        "fullcodeline": "else if (mode == \"CIRCLE\") {"
    },
    {
        "line": 123,
        "fullcodeline": "int n = Calc::get_fragments_from_r(radius, fn, fs, fa);"
    },
    {
        "line": 124,
        "fullcodeline": "Vector2d center(xverts.at(0), yverts.at(0));"
    },
    {
        "line": 125,
        "fullcodeline": "for (int i = 0; i < n; ++i) {"
    },
    {
        "line": 126,
        "fullcodeline": "double a1 = (360.0 * i) / n;"
    },
    {
        "line": 127,
        "fullcodeline": "double a2 = (360.0 *(i + 1)) / n;"
    },
    {
        "line": 128,
        "fullcodeline": "ADD_LINE(cos_degrees(a1)*radius + center[0], sin_degrees(a1)*radius + center[1],"
    },
    {
        "line": 132,
        "fullcodeline": "else if (mode == \"ARC\") {"
    },
    {
        "line": 133,
        "fullcodeline": "Vector2d center(xverts.at(0), yverts.at(0));"
    },
    {
        "line": 134,
        "fullcodeline": "int n = Calc::get_fragments_from_r(radius, fn, fs, fa);"
    },
    {
        "line": 138,
        "fullcodeline": "double arc_angle = arc_stop_angle - arc_start_angle;"
    },
    {
        "line": 139,
        "fullcodeline": "n = static_cast<int>(ceil(n * arc_angle / 360));"
    },
    {
        "line": 135,
        "fullcodeline": "while (arc_start_angle > arc_stop_angle) {"
    },
    {
        "line": 140,
        "fullcodeline": "for (int i = 0; i < n; ++i) {"
    },
    {
        "line": 136,
        "fullcodeline": "arc_stop_angle += 360.0;"
    },
    {
        "line": 141,
        "fullcodeline": "double a1 = arc_start_angle + arc_angle * i / n;"
    },
    {
        "line": 142,
        "fullcodeline": "double a2 = arc_start_angle + arc_angle * (i + 1) / n;"
    },
    {
        "line": 143,
        "fullcodeline": "ADD_LINE(cos_degrees(a1)*radius + center[0], sin_degrees(a1)*radius + center[1],"
    },
    {
        "line": 147,
        "fullcodeline": "else if (mode == \"ELLIPSE\") {"
    },
    {
        "line": 151,
        "fullcodeline": "Vector2d center(xverts.at(0), yverts.at(0));"
    },
    {
        "line": 153,
        "fullcodeline": "Vector2d ce(xverts.at(1), yverts.at(1));"
    },
    {
        "line": 155,
        "fullcodeline": "double r_major = sqrt(ce[0]*ce[0] + ce[1]*ce[1]);"
    },
    {
        "line": 169,
        "fullcodeline": "double r_minor = r_major * radius;"
    },
    {
        "line": 170,
        "fullcodeline": "double sweep_angle = ellipse_stop_angle-ellipse_start_angle;"
    },
    {
        "line": 171,
        "fullcodeline": "int n = Calc::get_fragments_from_r(r_major, fn, fs, fa);"
    },
    {
        "line": 172,
        "fullcodeline": "n = static_cast<int>(ceil(n * sweep_angle / (2 * M_PI)));"
    },
    {
        "line": 174,
        "fullcodeline": "Vector2d p1{0.0, 0.0};"
    },
    {
        "line": 149,
        "fullcodeline": "while (ellipse_start_angle > ellipse_stop_angle) ellipse_stop_angle += 2 * M_PI;"
    },
    {
        "line": 160,
        "fullcodeline": "double dot = ce[0];"
    },
    {
        "line": 161,
        "fullcodeline": "double cosval = dot / r_major;"
    },
    {
        "line": 164,
        "fullcodeline": "rot_angle = acos(cosval);"
    },
    {
        "line": 175,
        "fullcodeline": "for (int i=0; i<=n; ++i) {"
    },
    {
        "line": 162,
        "fullcodeline": "if (cosval > 1.0) cosval = 1.0;"
    },
    {
        "line": 163,
        "fullcodeline": "if (cosval < -1.0) cosval = -1.0;"
    },
    {
        "line": 165,
        "fullcodeline": "if (ce[1] < 0.0) rot_angle = 2 * M_PI - rot_angle;"
    },
    {
        "line": 176,
        "fullcodeline": "double a = (ellipse_start_angle + sweep_angle*i/n);"
    },
    {
        "line": 178,
        "fullcodeline": "Vector2d p2(cos(a)*r_major, sin(a)*r_minor);"
    },
    {
        "line": 180,
        "fullcodeline": "Vector2d p2_rot(cos(rot_angle)*p2[0] - sin(rot_angle)*p2[1],"
    },
    {
        "line": 183,
        "fullcodeline": "p2_rot[0] += center[0];"
    },
    {
        "line": 184,
        "fullcodeline": "p2_rot[1] += center[1];"
    },
    {
        "line": 190,
        "fullcodeline": "p1[0] = p2_rot[0];"
    },
    {
        "line": 191,
        "fullcodeline": "p1[1] = p2_rot[1];"
    },
    {
        "line": 194,
        "fullcodeline": "else if (mode == \"INSERT\") {"
    },
    {
        "line": 181,
        "fullcodeline": "sin(rot_angle)*p2[0] + cos(rot_angle)*p2[1]);"
    },
    {
        "line": 185,
        "fullcodeline": "if (i > 0) {"
    },
    {
        "line": 197,
        "fullcodeline": "int n = blockdata[iddata].size();"
    },
    {
        "line": 187,
        "fullcodeline": "ADD_LINE(p1[0], p1[1], p2_rot[0], p2_rot[1]);"
    },
    {
        "line": 198,
        "fullcodeline": "for (int i = 0; i < n; ++i) {"
    },
    {
        "line": 199,
        "fullcodeline": "double a = arc_start_angle;"
    },
    {
        "line": 200,
        "fullcodeline": "double lx1 = this->points[blockdata[iddata][i].idx[0]][0] * ellipse_start_angle;"
    },
    {
        "line": 201,
        "fullcodeline": "double ly1 = this->points[blockdata[iddata][i].idx[0]][1] * ellipse_stop_angle;"
    },
    {
        "line": 202,
        "fullcodeline": "double lx2 = this->points[blockdata[iddata][i].idx[1]][0] * ellipse_start_angle;"
    },
    {
        "line": 203,
        "fullcodeline": "double ly2 = this->points[blockdata[iddata][i].idx[1]][1] * ellipse_stop_angle;"
    },
    {
        "line": 204,
        "fullcodeline": "double px1 = (cos_degrees(a)*lx1 - sin_degrees(a)*ly1) * scale + xverts.at(0);"
    },
    {
        "line": 205,
        "fullcodeline": "double py1 = (sin_degrees(a)*lx1 + cos_degrees(a)*ly1) * scale + yverts.at(0);"
    },
    {
        "line": 206,
        "fullcodeline": "double px2 = (cos_degrees(a)*lx2 - sin_degrees(a)*ly2) * scale + xverts.at(0);"
    },
    {
        "line": 207,
        "fullcodeline": "double py2 = (sin_degrees(a)*lx2 + cos_degrees(a)*ly2) * scale + yverts.at(0);"
    },
    {
        "line": 208,
        "fullcodeline": "ADD_LINE(px1, py1, px2, py2);"
    },
    {
        "line": 211,
        "fullcodeline": "else if (mode == \"DIMENSION\" &&"
    },
    {
        "line": 212,
        "fullcodeline": "(layername.empty() || layername == layer)) {"
    },
    {
        "line": 213,
        "fullcodeline": "this->dims.push_back(Dim());"
    },
    {
        "line": 214,
        "fullcodeline": "this->dims.back().type = dimtype;"
    },
    {
        "line": 220,
        "fullcodeline": "this->dims.back().angle = arc_start_angle;"
    },
    {
        "line": 221,
        "fullcodeline": "this->dims.back().length = radius;"
    },
    {
        "line": 222,
        "fullcodeline": "this->dims.back().name = name;"
    },
    {
        "line": 215,
        "fullcodeline": "for (int i = 0; i < 7; ++i) {"
    },
    {
        "line": 224,
        "fullcodeline": "else if (mode == \"BLOCK\") {"
    },
    {
        "line": 216,
        "fullcodeline": "for (int j = 0; j < 2; ++j) {"
    },
    {
        "line": 225,
        "fullcodeline": "current_block = iddata;"
    },
    {
        "line": 217,
        "fullcodeline": "this->dims.back().coords[i][j] = coords[i][j];"
    },
    {
        "line": 227,
        "fullcodeline": "else if (mode == \"ENDBLK\") {"
    },
    {
        "line": 228,
        "fullcodeline": "current_block.erase();"
    },
    {
        "line": 230,
        "fullcodeline": "else if (mode == \"ENDSEC\") {"
    },
    {
        "line": 232,
        "fullcodeline": "else if (in_blocks_section || (in_entities_section &&"
    },
    {
        "line": 233,
        "fullcodeline": "(layername.empty() || layername == layer))) {"
    }
]