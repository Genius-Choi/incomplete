[
    {
        "line": 2,
        "fullcodeline": "auto* params ="
    },
    {
        "line": 5,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);"
    },
    {
        "line": 6,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);"
    },
    {
        "line": 9,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, GetInputSafe(context, node, kInputTensor, &input));"
    },
    {
        "line": 11,
        "fullcodeline": "TF_LITE_ENSURE_OK(context,"
    },
    {
        "line": 14,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, NumDimensions(input), 4);"
    },
    {
        "line": 16,
        "fullcodeline": "auto data_type = output->type;"
    },
    {
        "line": 17,
        "fullcodeline": "TF_LITE_ENSURE(context,"
    },
    {
        "line": 19,
        "fullcodeline": "TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);"
    },
    {
        "line": 21,
        "fullcodeline": "const int block_size = params->block_size;"
    },
    {
        "line": 22,
        "fullcodeline": "TF_LITE_ENSURE(context, block_size > 0);"
    },
    {
        "line": 26,
        "fullcodeline": "int output_height = input_height * block_size;"
    },
    {
        "line": 27,
        "fullcodeline": "int output_width = input_width * block_size;"
    },
    {
        "line": 28,
        "fullcodeline": "int output_channels = input_channels / block_size / block_size;"
    },
    {
        "line": 30,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_height, output_height / block_size);"
    },
    {
        "line": 31,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_width, output_width / block_size);"
    },
    {
        "line": 32,
        "fullcodeline": "TF_LITE_ENSURE_EQ(context, input_channels,"
    },
    {
        "line": 42,
        "fullcodeline": "TfLiteEvalTensor* output_eval ="
    },
    {
        "line": 44,
        "fullcodeline": "TF_LITE_ENSURE_OK(context, tflite::micro::CreateWritableTensorDimsWithCopy("
    },
    {
        "line": 47,
        "fullcodeline": "output->dims->data[kHeightRank] = output_height;"
    },
    {
        "line": 48,
        "fullcodeline": "output->dims->data[kWidthRank] = output_width;"
    },
    {
        "line": 49,
        "fullcodeline": "output->dims->data[kDepthRank] = output_channels;"
    },
    {
        "line": 3,
        "fullcodeline": "reinterpret_cast<TfLiteDepthToSpaceParams*>(node->builtin_data);"
    },
    {
        "line": 12,
        "fullcodeline": "GetOutputSafe(context, node, kOutputTensor, &output));"
    },
    {
        "line": 18,
        "fullcodeline": "data_type == kTfLiteFloat32 || data_type == kTfLiteInt8);"
    },
    {
        "line": 33,
        "fullcodeline": "output_channels * block_size * block_size);"
    },
    {
        "line": 43,
        "fullcodeline": "tflite::micro::GetEvalOutput(context, node, kOutputTensor);"
    }
]