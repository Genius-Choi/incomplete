[
    {
        "line": 3,
        "fullcodeline": "struct device ** pp = &devlist;"
    },
    {
        "line": 4,
        "fullcodeline": "struct device * p = *pp;\t/* = devlist; */"
    },
    {
        "line": 39,
        "fullcodeline": "syslog(LOG_INFO, \"new device discovered : %.*s\","
    },
    {
        "line": 45,
        "fullcodeline": "p = malloc(  sizeof(struct device)"
    },
    {
        "line": 51,
        "fullcodeline": "p->next = devlist;"
    },
    {
        "line": 52,
        "fullcodeline": "p->t = t;"
    },
    {
        "line": 53,
        "fullcodeline": "pc = p->data;"
    },
    {
        "line": 62,
        "fullcodeline": "sendNotifications(NOTIF_NEW, p, NULL);"
    },
    {
        "line": 36,
        "fullcodeline": "pp = &p->next;"
    },
    {
        "line": 37,
        "fullcodeline": "p = *pp;\t/* p = p->next; */"
    },
    {
        "line": 47,
        "fullcodeline": "if(!p) {"
    },
    {
        "line": 54,
        "fullcodeline": "for(i = 0; i < 3; i++)"
    },
    {
        "line": 7,
        "fullcodeline": "if(  p->headers[HEADER_NT].l == headers[HEADER_NT].l"
    },
    {
        "line": 58,
        "fullcodeline": "memcpy(pc, headers[i].p, headers[i].l);"
    },
    {
        "line": 59,
        "fullcodeline": "pc += headers[i].l;"
    },
    {
        "line": 10,
        "fullcodeline": "&& (0==memcmp(p->headers[HEADER_USN].p, headers[HEADER_USN].p, headers[HEADER_USN].l)) )"
    },
    {
        "line": 13,
        "fullcodeline": "syslog(LOG_DEBUG, \"device updated : %.*s\", headers[HEADER_USN].l, headers[HEADER_USN].p);"
    },
    {
        "line": 14,
        "fullcodeline": "p->t = t;"
    },
    {
        "line": 49,
        "fullcodeline": "return -1;"
    },
    {
        "line": 9,
        "fullcodeline": "&& p->headers[HEADER_USN].l == headers[HEADER_USN].l"
    },
    {
        "line": 16,
        "fullcodeline": "if(headers[HEADER_LOCATION].l > p->headers[HEADER_LOCATION].l)"
    },
    {
        "line": 8,
        "fullcodeline": "&& (0==memcmp(p->headers[HEADER_NT].p, headers[HEADER_NT].p, headers[HEADER_NT].l))"
    },
    {
        "line": 19,
        "fullcodeline": "tmp = realloc(p, sizeof(struct device)"
    },
    {
        "line": 28,
        "fullcodeline": "p = tmp;"
    },
    {
        "line": 21,
        "fullcodeline": "if(!tmp)\t/* allocation error */"
    },
    {
        "line": 23,
        "fullcodeline": "syslog(LOG_ERR, \"updateDevice() : memory allocation error\");"
    },
    {
        "line": 24,
        "fullcodeline": "*pp = p->next;\t/* remove \"p\" from the list */"
    },
    {
        "line": 25,
        "fullcodeline": "free(p);"
    }
]