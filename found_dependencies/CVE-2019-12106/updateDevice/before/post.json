[
    {
        "line": 3,
        "fullcodeline": "struct device ** pp = &devlist;"
    },
    {
        "line": 38,
        "fullcodeline": "syslog(LOG_INFO, \"new device discovered : %.*s\","
    },
    {
        "line": 44,
        "fullcodeline": "p = malloc(  sizeof(struct device)"
    },
    {
        "line": 50,
        "fullcodeline": "p->next = devlist;"
    },
    {
        "line": 51,
        "fullcodeline": "p->t = t;"
    },
    {
        "line": 52,
        "fullcodeline": "pc = p->data;"
    },
    {
        "line": 60,
        "fullcodeline": "devlist = p;"
    },
    {
        "line": 61,
        "fullcodeline": "sendNotifications(NOTIF_NEW, p, NULL);"
    },
    {
        "line": 35,
        "fullcodeline": "pp = &p->next;"
    },
    {
        "line": 46,
        "fullcodeline": "if(!p) {"
    },
    {
        "line": 53,
        "fullcodeline": "for(i = 0; i < 3; i++)"
    },
    {
        "line": 7,
        "fullcodeline": "if(  p->headers[HEADER_NT].l == headers[HEADER_NT].l"
    },
    {
        "line": 47,
        "fullcodeline": "syslog(LOG_ERR, \"updateDevice(): cannot allocate memory\");"
    },
    {
        "line": 55,
        "fullcodeline": "p->headers[i].p = pc;"
    },
    {
        "line": 57,
        "fullcodeline": "memcpy(pc, headers[i].p, headers[i].l);"
    },
    {
        "line": 58,
        "fullcodeline": "pc += headers[i].l;"
    },
    {
        "line": 10,
        "fullcodeline": "&& (0==memcmp(p->headers[HEADER_USN].p, headers[HEADER_USN].p, headers[HEADER_USN].l)) )"
    },
    {
        "line": 13,
        "fullcodeline": "syslog(LOG_DEBUG, \"device updated : %.*s\", headers[HEADER_USN].l, headers[HEADER_USN].p);"
    },
    {
        "line": 14,
        "fullcodeline": "p->t = t;"
    },
    {
        "line": 30,
        "fullcodeline": "memcpy(p->data + p->headers[0].l + p->headers[1].l,"
    },
    {
        "line": 48,
        "fullcodeline": "return -1;"
    },
    {
        "line": 9,
        "fullcodeline": "&& p->headers[HEADER_USN].l == headers[HEADER_USN].l"
    },
    {
        "line": 8,
        "fullcodeline": "&& (0==memcmp(p->headers[HEADER_NT].p, headers[HEADER_NT].p, headers[HEADER_NT].l))"
    },
    {
        "line": 19,
        "fullcodeline": "tmp = realloc(p, sizeof(struct device)"
    },
    {
        "line": 27,
        "fullcodeline": "p = tmp;"
    },
    {
        "line": 28,
        "fullcodeline": "*pp = p;"
    },
    {
        "line": 21,
        "fullcodeline": "if(!tmp)\t/* allocation error */"
    },
    {
        "line": 23,
        "fullcodeline": "syslog(LOG_ERR, \"updateDevice() : memory allocation error\");"
    },
    {
        "line": 24,
        "fullcodeline": "free(p);"
    }
]