[
    {
        "line": 5,
        "fullcodeline": "initHashMap(&contentType, urlDestroyHashMapEntry, NULL);"
    },
    {
        "line": 6,
        "fullcodeline": "const char *ctHeader     = getFromHashMap(&http->header, \"content-type\");"
    },
    {
        "line": 7,
        "fullcodeline": "urlParseHeaderLine(&contentType, ctHeader, ctHeader ? strlen(ctHeader) : 0);"
    },
    {
        "line": 55,
        "fullcodeline": "destroyHashMap(&contentType);"
    },
    {
        "line": 8,
        "fullcodeline": "if (getRefFromHashMap(&contentType, \"application/x-www-form-urlencoded\")) {"
    },
    {
        "line": 9,
        "fullcodeline": "urlParseQueryString(&url->args, buf, len);"
    },
    {
        "line": 10,
        "fullcodeline": "} else if (getRefFromHashMap(&contentType, \"multipart/form-data\")) {"
    },
    {
        "line": 11,
        "fullcodeline": "const char *boundary   = getFromHashMap(&contentType, \"boundary\");"
    },
    {
        "line": 12,
        "fullcodeline": "if (boundary && *boundary) {"
    },
    {
        "line": 13,
        "fullcodeline": "const char *lastPart = NULL;"
    },
    {
        "line": 14,
        "fullcodeline": "for (const char *part = buf; len > 0; ) {"
    },
    {
        "line": 52,
        "fullcodeline": "warn(\"[http] Missing \\\"boundary\\\" information for \\\"multipart/form-data\\\"!\");"
    },
    {
        "line": 49,
        "fullcodeline": "warn(\"[http] Missing final \\\"boundary\\\" for \\\"multipart/form-data\\\"!\");"
    },
    {
        "line": 16,
        "fullcodeline": "if ((part == buf && (ptr = urlMemstr(part, len, \"--\")) != NULL) ||"
    },
    {
        "line": 17,
        "fullcodeline": "(ptr = urlMemstr(part, len, \"\\r\\n--\")) != NULL) {"
    },
    {
        "line": 18,
        "fullcodeline": "len             -= ptr - part + (part == buf ? 2 : 4);"
    },
    {
        "line": 19,
        "fullcodeline": "part             = ptr + (part == buf ? 2 : 4);"
    },
    {
        "line": 20,
        "fullcodeline": "if (!urlMemcmp(part, len, boundary)) {"
    },
    {
        "line": 21,
        "fullcodeline": "int i          = strlen(boundary);"
    },
    {
        "line": 22,
        "fullcodeline": "len           -= i;"
    },
    {
        "line": 23,
        "fullcodeline": "part          += i;"
    },
    {
        "line": 24,
        "fullcodeline": "if (!urlMemcmp(part, len, \"\\r\\n\")) {"
    },
    {
        "line": 25,
        "fullcodeline": "len         -= 2;"
    },
    {
        "line": 26,
        "fullcodeline": "part        += 2;"
    },
    {
        "line": 34,
        "fullcodeline": "lastPart     = part;"
    },
    {
        "line": 28,
        "fullcodeline": "urlParsePart(url, lastPart, ptr - lastPart);"
    },
    {
        "line": 35,
        "fullcodeline": "} else if (!urlMemcmp(part, len, \"--\\r\\n\")) {"
    },
    {
        "line": 36,
        "fullcodeline": "len         -= 4;"
    },
    {
        "line": 37,
        "fullcodeline": "part        += 4;"
    },
    {
        "line": 38,
        "fullcodeline": "urlParsePart(url, lastPart, ptr - lastPart);"
    },
    {
        "line": 39,
        "fullcodeline": "lastPart     = NULL;"
    },
    {
        "line": 30,
        "fullcodeline": "if (ptr != buf) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (len > 0) {"
    },
    {
        "line": 31,
        "fullcodeline": "info(\"[http] Ignoring prologue before \\\"multipart/form-data\\\"!\");"
    },
    {
        "line": 41,
        "fullcodeline": "info(\"[http] Ignoring epilogue past end of \\\"multipart/\""
    }
]