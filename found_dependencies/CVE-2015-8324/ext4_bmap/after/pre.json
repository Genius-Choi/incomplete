[
    {
        "line": 3,
        "fullcodeline": "struct inode *inode = mapping->host;"
    },
    {
        "line": 7,
        "fullcodeline": "if (mapping_tagged(mapping, PAGECACHE_TAG_DIRTY) &&"
    },
    {
        "line": 17,
        "fullcodeline": "if (EXT4_JOURNAL(inode) &&"
    },
    {
        "line": 47,
        "fullcodeline": "return generic_block_bmap(mapping, block, ext4_get_block);"
    },
    {
        "line": 8,
        "fullcodeline": "test_opt(inode->i_sb, DELALLOC)) {"
    },
    {
        "line": 14,
        "fullcodeline": "filemap_write_and_wait(mapping);"
    },
    {
        "line": 18,
        "fullcodeline": "ext4_test_inode_state(inode, EXT4_STATE_JDATA)) {"
    },
    {
        "line": 37,
        "fullcodeline": "ext4_clear_inode_state(inode, EXT4_STATE_JDATA);"
    },
    {
        "line": 38,
        "fullcodeline": "journal = EXT4_JOURNAL(inode);"
    },
    {
        "line": 39,
        "fullcodeline": "jbd2_journal_lock_updates(journal);"
    },
    {
        "line": 40,
        "fullcodeline": "err = jbd2_journal_flush(journal);"
    },
    {
        "line": 41,
        "fullcodeline": "jbd2_journal_unlock_updates(journal);"
    }
]