[
    {
        "line": 5,
        "fullcodeline": "handle_t *handle = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "struct inode *inode = file_inode(vma->vm_file);"
    },
    {
        "line": 7,
        "fullcodeline": "struct super_block *sb = inode->i_sb;"
    },
    {
        "line": 8,
        "fullcodeline": "bool write = flags & FAULT_FLAG_WRITE;"
    },
    {
        "line": 20,
        "fullcodeline": "if (IS_ERR(handle))"
    },
    {
        "line": 11,
        "fullcodeline": "sb_start_pagefault(sb);"
    },
    {
        "line": 12,
        "fullcodeline": "file_update_time(vma->vm_file);"
    },
    {
        "line": 14,
        "fullcodeline": "handle = ext4_journal_start_sb(sb, EXT4_HT_WRITE_PAGE,"
    },
    {
        "line": 21,
        "fullcodeline": "result = VM_FAULT_SIGBUS;"
    },
    {
        "line": 29,
        "fullcodeline": "up_read(&EXT4_I(inode)->i_mmap_sem);"
    },
    {
        "line": 30,
        "fullcodeline": "sb_end_pagefault(sb);"
    },
    {
        "line": 23,
        "fullcodeline": "result = __dax_pmd_fault(vma, addr, pmd, flags,"
    },
    {
        "line": 27,
        "fullcodeline": "if (!IS_ERR(handle))"
    },
    {
        "line": 32,
        "fullcodeline": "up_read(&EXT4_I(inode)->i_mmap_sem);"
    },
    {
        "line": 15,
        "fullcodeline": "ext4_chunk_trans_blocks(inode,"
    },
    {
        "line": 28,
        "fullcodeline": "ext4_journal_stop(handle);"
    },
    {
        "line": 13,
        "fullcodeline": "down_read(&EXT4_I(inode)->i_mmap_sem);"
    },
    {
        "line": 16,
        "fullcodeline": "PMD_SIZE / PAGE_SIZE));"
    },
    {
        "line": 18,
        "fullcodeline": "down_read(&EXT4_I(inode)->i_mmap_sem);"
    }
]