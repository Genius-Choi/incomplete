[
    {
        "line": 3,
        "fullcodeline": "struct page *page = vmf->page;"
    },
    {
        "line": 7,
        "fullcodeline": "struct file *file = vma->vm_file;"
    },
    {
        "line": 8,
        "fullcodeline": "struct inode *inode = file_inode(file);"
    },
    {
        "line": 9,
        "fullcodeline": "struct address_space *mapping = inode->i_mapping;"
    },
    {
        "line": 12,
        "fullcodeline": "int retries = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "sb_start_pagefault(inode->i_sb);"
    },
    {
        "line": 15,
        "fullcodeline": "file_update_time(vma->vm_file);"
    },
    {
        "line": 30,
        "fullcodeline": "lock_page(page);"
    },
    {
        "line": 31,
        "fullcodeline": "size = i_size_read(inode);"
    },
    {
        "line": 57,
        "fullcodeline": "unlock_page(page);"
    },
    {
        "line": 64,
        "fullcodeline": "handle = ext4_journal_start(inode, EXT4_HT_WRITE_PAGE,"
    },
    {
        "line": 70,
        "fullcodeline": "ret = block_page_mkwrite(vma, vmf, get_block);"
    },
    {
        "line": 81,
        "fullcodeline": "ext4_journal_stop(handle);"
    },
    {
        "line": 85,
        "fullcodeline": "ret = block_page_mkwrite_return(ret);"
    },
    {
        "line": 87,
        "fullcodeline": "up_read(&EXT4_I(inode)->i_mmap_sem);"
    },
    {
        "line": 88,
        "fullcodeline": "sb_end_pagefault(inode->i_sb);"
    },
    {
        "line": 19,
        "fullcodeline": "if (test_opt(inode->i_sb, DELALLOC) &&"
    },
    {
        "line": 33,
        "fullcodeline": "if (page->mapping != mapping || page_offset(page) > size) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (page->index == size >> PAGE_CACHE_SHIFT)"
    },
    {
        "line": 47,
        "fullcodeline": "if (page_has_buffers(page)) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (ext4_should_dioread_nolock(inode))"
    },
    {
        "line": 66,
        "fullcodeline": "if (IS_ERR(handle)) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (!ret && ext4_should_journal_data(inode)) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (ret == -ENOSPC && ext4_should_retry_alloc(inode->i_sb, &retries))"
    },
    {
        "line": 21,
        "fullcodeline": "!ext4_nonda_switch(inode->i_sb)) {"
    },
    {
        "line": 34,
        "fullcodeline": "unlock_page(page);"
    },
    {
        "line": 35,
        "fullcodeline": "ret = VM_FAULT_NOPAGE;"
    },
    {
        "line": 40,
        "fullcodeline": "len = size & ~PAGE_CACHE_MASK;"
    },
    {
        "line": 60,
        "fullcodeline": "get_block = ext4_get_block_write;"
    },
    {
        "line": 65,
        "fullcodeline": "ext4_writepage_trans_blocks(inode));"
    },
    {
        "line": 67,
        "fullcodeline": "ret = VM_FAULT_SIGBUS;"
    },
    {
        "line": 79,
        "fullcodeline": "ext4_set_inode_state(inode, EXT4_STATE_JDATA);"
    },
    {
        "line": 17,
        "fullcodeline": "down_read(&EXT4_I(inode)->i_mmap_sem);"
    },
    {
        "line": 20,
        "fullcodeline": "!ext4_should_journal_data(inode) &&"
    },
    {
        "line": 25,
        "fullcodeline": "} while (ret == -ENOSPC &&"
    },
    {
        "line": 42,
        "fullcodeline": "len = PAGE_CACHE_SIZE;"
    },
    {
        "line": 48,
        "fullcodeline": "if (!ext4_walk_page_buffers(NULL, page_buffers(page),"
    },
    {
        "line": 62,
        "fullcodeline": "get_block = ext4_get_block;"
    },
    {
        "line": 72,
        "fullcodeline": "if (ext4_walk_page_buffers(handle, page_buffers(page), 0,"
    },
    {
        "line": 23,
        "fullcodeline": "ret = block_page_mkwrite(vma, vmf,"
    },
    {
        "line": 26,
        "fullcodeline": "ext4_should_retry_alloc(inode->i_sb, &retries));"
    },
    {
        "line": 52,
        "fullcodeline": "wait_for_stable_page(page);"
    },
    {
        "line": 53,
        "fullcodeline": "ret = VM_FAULT_LOCKED;"
    },
    {
        "line": 74,
        "fullcodeline": "unlock_page(page);"
    },
    {
        "line": 75,
        "fullcodeline": "ret = VM_FAULT_SIGBUS;"
    },
    {
        "line": 76,
        "fullcodeline": "ext4_journal_stop(handle);"
    }
]