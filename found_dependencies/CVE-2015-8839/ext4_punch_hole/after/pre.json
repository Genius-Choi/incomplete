[
    {
        "line": 3,
        "fullcodeline": "struct super_block *sb = inode->i_sb;"
    },
    {
        "line": 5,
        "fullcodeline": "struct address_space *mapping = inode->i_mapping;"
    },
    {
        "line": 9,
        "fullcodeline": "int ret = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "trace_ext4_punch_hole(inode, offset, length, 0);"
    },
    {
        "line": 27,
        "fullcodeline": "mutex_lock(&inode->i_mutex);"
    },
    {
        "line": 56,
        "fullcodeline": "ext4_inode_block_unlocked_dio(inode);"
    },
    {
        "line": 57,
        "fullcodeline": "inode_dio_wait(inode);"
    },
    {
        "line": 63,
        "fullcodeline": "down_write(&EXT4_I(inode)->i_mmap_sem);"
    },
    {
        "line": 64,
        "fullcodeline": "first_block_offset = round_up(offset, sb->s_blocksize);"
    },
    {
        "line": 65,
        "fullcodeline": "last_block_offset = round_down((offset + length), sb->s_blocksize) - 1;"
    },
    {
        "line": 76,
        "fullcodeline": "handle = ext4_journal_start(inode, EXT4_HT_TRUNCATE, credits);"
    },
    {
        "line": 83,
        "fullcodeline": "ret = ext4_zero_partial_blocks(handle, inode, offset,"
    },
    {
        "line": 88,
        "fullcodeline": "first_block = (offset + sb->s_blocksize - 1) >>"
    },
    {
        "line": 90,
        "fullcodeline": "stop_block = (offset + length) >> EXT4_BLOCK_SIZE_BITS(sb);"
    },
    {
        "line": 96,
        "fullcodeline": "down_write(&EXT4_I(inode)->i_data_sem);"
    },
    {
        "line": 97,
        "fullcodeline": "ext4_discard_preallocations(inode);"
    },
    {
        "line": 99,
        "fullcodeline": "ret = ext4_es_remove_extent(inode, first_block,"
    },
    {
        "line": 117,
        "fullcodeline": "inode->i_mtime = inode->i_ctime = ext4_current_time(inode);"
    },
    {
        "line": 118,
        "fullcodeline": "ext4_mark_inode_dirty(handle, inode);"
    },
    {
        "line": 123,
        "fullcodeline": "ext4_inode_resume_unlocked_dio(inode);"
    },
    {
        "line": 11,
        "fullcodeline": "if (!S_ISREG(inode->i_mode))"
    },
    {
        "line": 20,
        "fullcodeline": "if (mapping->nrpages && mapping_tagged(mapping, PAGECACHE_TAG_DIRTY)) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (offset >= inode->i_size)"
    },
    {
        "line": 37,
        "fullcodeline": "if (offset + length > inode->i_size) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (last_block_offset > first_block_offset)"
    },
    {
        "line": 72,
        "fullcodeline": "if (ext4_test_inode_flag(inode, EXT4_INODE_EXTENTS))"
    },
    {
        "line": 77,
        "fullcodeline": "if (IS_ERR(handle)) {"
    },
    {
        "line": 93,
        "fullcodeline": "if (first_block >= stop_block)"
    },
    {
        "line": 106,
        "fullcodeline": "if (ext4_test_inode_flag(inode, EXT4_INODE_EXTENTS))"
    },
    {
        "line": 114,
        "fullcodeline": "if (IS_SYNC(inode))"
    },
    {
        "line": 21,
        "fullcodeline": "ret = filemap_write_and_wait_range(mapping, offset,"
    },
    {
        "line": 38,
        "fullcodeline": "length = inode->i_size +"
    },
    {
        "line": 43,
        "fullcodeline": "if (offset & (sb->s_blocksize - 1) ||"
    },
    {
        "line": 44,
        "fullcodeline": "(offset + length) & (sb->s_blocksize - 1)) {"
    },
    {
        "line": 49,
        "fullcodeline": "ret = ext4_inode_attach_jinode(inode);"
    },
    {
        "line": 69,
        "fullcodeline": "truncate_pagecache_range(inode, first_block_offset,"
    },
    {
        "line": 73,
        "fullcodeline": "credits = ext4_writepage_trans_blocks(inode);"
    },
    {
        "line": 78,
        "fullcodeline": "ret = PTR_ERR(handle);"
    },
    {
        "line": 79,
        "fullcodeline": "ext4_std_error(sb, ret);"
    },
    {
        "line": 89,
        "fullcodeline": "EXT4_BLOCK_SIZE_BITS(sb);"
    },
    {
        "line": 100,
        "fullcodeline": "stop_block - first_block);"
    },
    {
        "line": 107,
        "fullcodeline": "ret = ext4_ext_remove_space(inode, first_block,"
    },
    {
        "line": 115,
        "fullcodeline": "ext4_handle_sync(handle);"
    },
    {
        "line": 12,
        "fullcodeline": "return -EOPNOTSUPP;"
    },
    {
        "line": 50,
        "fullcodeline": "if (ret < 0)"
    },
    {
        "line": 75,
        "fullcodeline": "credits = ext4_blocks_for_truncate(inode);"
    },
    {
        "line": 110,
        "fullcodeline": "ret = ext4_ind_remove_space(handle, inode, first_block,"
    },
    {
        "line": 113,
        "fullcodeline": "up_write(&EXT4_I(inode)->i_data_sem);"
    },
    {
        "line": 122,
        "fullcodeline": "up_write(&EXT4_I(inode)->i_mmap_sem);"
    },
    {
        "line": 22,
        "fullcodeline": "offset + length - 1);"
    },
    {
        "line": 108,
        "fullcodeline": "stop_block - 1);"
    },
    {
        "line": 39,
        "fullcodeline": "PAGE_CACHE_SIZE - (inode->i_size & (PAGE_CACHE_SIZE - 1)) -"
    },
    {
        "line": 102,
        "fullcodeline": "up_write(&EXT4_I(inode)->i_data_sem);"
    }
]