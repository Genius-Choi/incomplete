[
    {
        "line": 7,
        "fullcodeline": "uint8_t prefix[4];"
    },
    {
        "line": 19,
        "fullcodeline": "tptr=pptr;"
    },
    {
        "line": 20,
        "fullcodeline": "eigrp_com_header = (const struct eigrp_common_header *)pptr;"
    },
    {
        "line": 21,
        "fullcodeline": "ND_TCHECK(*eigrp_com_header);"
    },
    {
        "line": 41,
        "fullcodeline": "tlen=len-sizeof(struct eigrp_common_header);"
    },
    {
        "line": 57,
        "fullcodeline": "tptr+=sizeof(const struct eigrp_common_header);"
    },
    {
        "line": 26,
        "fullcodeline": "if (eigrp_com_header->version != EIGRP_VERSION) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (ndo->ndo_vflag < 1) {"
    },
    {
        "line": 44,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\tEIGRP v%u, opcode: %s (%u), chksum: 0x%04x, Flags: [%s]\\n\\tseq: 0x%08x, ack: 0x%08x, AS: %u, length: %u\","
    },
    {
        "line": 59,
        "fullcodeline": "while(tlen>0) {"
    },
    {
        "line": 27,
        "fullcodeline": "ND_PRINT((ndo, \"EIGRP version %u packet not supported\",eigrp_com_header->version));"
    },
    {
        "line": 61,
        "fullcodeline": "ND_TCHECK2(*tptr, sizeof(struct eigrp_tlv_header));"
    },
    {
        "line": 63,
        "fullcodeline": "eigrp_tlv_header = (const struct eigrp_tlv_header *)tptr;"
    },
    {
        "line": 64,
        "fullcodeline": "eigrp_tlv_len=EXTRACT_16BITS(&eigrp_tlv_header->length);"
    },
    {
        "line": 65,
        "fullcodeline": "eigrp_tlv_type=EXTRACT_16BITS(&eigrp_tlv_header->type);"
    },
    {
        "line": 81,
        "fullcodeline": "tlv_tptr=tptr+sizeof(struct eigrp_tlv_header);"
    },
    {
        "line": 82,
        "fullcodeline": "tlv_tlen=eigrp_tlv_len-sizeof(struct eigrp_tlv_header);"
    },
    {
        "line": 85,
        "fullcodeline": "ND_TCHECK2(*tptr, eigrp_tlv_len);"
    },
    {
        "line": 261,
        "fullcodeline": "tptr+=eigrp_tlv_len;"
    },
    {
        "line": 262,
        "fullcodeline": "tlen-=eigrp_tlv_len;"
    },
    {
        "line": 33,
        "fullcodeline": "ND_PRINT((ndo, \"EIGRP %s, length: %u\","
    },
    {
        "line": 46,
        "fullcodeline": "tok2str(eigrp_opcode_values, \"unknown, type: %u\",eigrp_com_header->opcode),"
    },
    {
        "line": 48,
        "fullcodeline": "EXTRACT_16BITS(&eigrp_com_header->checksum),"
    },
    {
        "line": 49,
        "fullcodeline": "tok2str(eigrp_common_header_flag_values,"
    },
    {
        "line": 52,
        "fullcodeline": "EXTRACT_32BITS(&eigrp_com_header->seq),"
    },
    {
        "line": 53,
        "fullcodeline": "EXTRACT_32BITS(&eigrp_com_header->ack),"
    },
    {
        "line": 54,
        "fullcodeline": "EXTRACT_32BITS(&eigrp_com_header->asn),"
    },
    {
        "line": 74,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t  %s TLV (0x%04x), length: %u\","
    },
    {
        "line": 257,
        "fullcodeline": "if (ndo->ndo_vflag > 1)"
    },
    {
        "line": 51,
        "fullcodeline": "EXTRACT_32BITS(&eigrp_com_header->flags)),"
    },
    {
        "line": 68,
        "fullcodeline": "if (eigrp_tlv_len < sizeof(struct eigrp_tlv_header) ||"
    },
    {
        "line": 69,
        "fullcodeline": "eigrp_tlv_len > tlen) {"
    },
    {
        "line": 114,
        "fullcodeline": "bit_length = tlv_ptr.eigrp_tlv_ip_int->plen;"
    },
    {
        "line": 119,
        "fullcodeline": "byte_length = (bit_length + 7) / 8; /* variable length encoding */"
    },
    {
        "line": 120,
        "fullcodeline": "memset(prefix, 0, 4);"
    },
    {
        "line": 121,
        "fullcodeline": "memcpy(prefix,&tlv_ptr.eigrp_tlv_ip_int->destination,byte_length);"
    },
    {
        "line": 143,
        "fullcodeline": "bit_length = tlv_ptr.eigrp_tlv_ip_ext->plen;"
    },
    {
        "line": 148,
        "fullcodeline": "byte_length = (bit_length + 7) / 8; /* variable length encoding */"
    },
    {
        "line": 149,
        "fullcodeline": "memset(prefix, 0, 4);"
    },
    {
        "line": 150,
        "fullcodeline": "memcpy(prefix,&tlv_ptr.eigrp_tlv_ip_ext->destination,byte_length);"
    },
    {
        "line": 258,
        "fullcodeline": "print_unknown_data(ndo,tptr+sizeof(struct eigrp_tlv_header),\"\\n\\t    \","
    },
    {
        "line": 34,
        "fullcodeline": "tok2str(eigrp_opcode_values, \"unknown (%u)\",eigrp_com_header->opcode),"
    },
    {
        "line": 75,
        "fullcodeline": "tok2str(eigrp_tlv_values,"
    },
    {
        "line": 92,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    holdtime: %us, k1 %u, k2 %u, k3 %u, k4 %u, k5 %u\","
    },
    {
        "line": 104,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    IOS version: %u.%u, EIGRP version %u.%u\","
    },
    {
        "line": 115,
        "fullcodeline": "if (bit_length > 32) {"
    },
    {
        "line": 123,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    IPv4 prefix: %15s/%u, nexthop: \","
    },
    {
        "line": 131,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      delay %u ms, bandwidth %u Kbps, mtu %u, hop %u, reliability %u, load %u\","
    },
    {
        "line": 144,
        "fullcodeline": "if (bit_length > 32) {"
    },
    {
        "line": 152,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    IPv4 prefix: %15s/%u, nexthop: \","
    },
    {
        "line": 160,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      origin-router %s, origin-as %u, origin-proto %s, flags [0x%02x], tag 0x%08x, metric %u\","
    },
    {
        "line": 168,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      delay %u ms, bandwidth %u Kbps, mtu %u, hop %u, reliability %u, load %u\","
    },
    {
        "line": 180,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    Cable-range: %u-%u, Router-ID %u\","
    },
    {
        "line": 189,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t     Cable-Range: %u-%u, nexthop: \","
    },
    {
        "line": 200,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      delay %u ms, bandwidth %u Kbps, mtu %u, hop %u, reliability %u, load %u\","
    },
    {
        "line": 212,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t     Cable-Range: %u-%u, nexthop: \","
    },
    {
        "line": 223,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      origin-router %u, origin-as %u, origin-proto %s, flags [0x%02x], tag 0x%08x, metric %u\","
    },
    {
        "line": 231,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t      delay %u ms, bandwidth %u Kbps, mtu %u, hop %u, reliability %u, load %u\","
    },
    {
        "line": 252,
        "fullcodeline": "if (ndo->ndo_vflag <= 1)"
    },
    {
        "line": 259,
        "fullcodeline": "eigrp_tlv_len-sizeof(struct eigrp_tlv_header));"
    },
    {
        "line": 126,
        "fullcodeline": "if (EXTRACT_32BITS(&tlv_ptr.eigrp_tlv_ip_int->nexthop) == 0)"
    },
    {
        "line": 155,
        "fullcodeline": "if (EXTRACT_32BITS(&tlv_ptr.eigrp_tlv_ip_ext->nexthop) == 0)"
    },
    {
        "line": 193,
        "fullcodeline": "if (EXTRACT_32BITS(&tlv_ptr.eigrp_tlv_at_int->nexthop) == 0)"
    },
    {
        "line": 216,
        "fullcodeline": "if (EXTRACT_32BITS(&tlv_ptr.eigrp_tlv_at_ext->nexthop) == 0)"
    },
    {
        "line": 253,
        "fullcodeline": "print_unknown_data(ndo,tlv_tptr,\"\\n\\t    \",tlv_tlen);"
    },
    {
        "line": 93,
        "fullcodeline": "EXTRACT_16BITS(tlv_ptr.eigrp_tlv_general_parm->holdtime),"
    },
    {
        "line": 116,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    illegal prefix length %u\",bit_length));"
    },
    {
        "line": 124,
        "fullcodeline": "ipaddr_string(ndo, prefix),"
    },
    {
        "line": 127,
        "fullcodeline": "ND_PRINT((ndo, \"self\"));"
    },
    {
        "line": 132,
        "fullcodeline": "(EXTRACT_32BITS(&tlv_ptr.eigrp_tlv_ip_int->delay)/100),"
    },
    {
        "line": 133,
        "fullcodeline": "EXTRACT_32BITS(&tlv_ptr.eigrp_tlv_ip_int->bandwidth),"
    },
    {
        "line": 134,
        "fullcodeline": "EXTRACT_24BITS(&tlv_ptr.eigrp_tlv_ip_int->mtu),"
    },
    {
        "line": 145,
        "fullcodeline": "ND_PRINT((ndo, \"\\n\\t    illegal prefix length %u\",bit_length));"
    },
    {
        "line": 153,
        "fullcodeline": "ipaddr_string(ndo, prefix),"
    },
    {
        "line": 156,
        "fullcodeline": "ND_PRINT((ndo, \"self\"));"
    },
    {
        "line": 161,
        "fullcodeline": "ipaddr_string(ndo, tlv_ptr.eigrp_tlv_ip_ext->origin_router),"
    },
    {
        "line": 162,
        "fullcodeline": "EXTRACT_32BITS(tlv_ptr.eigrp_tlv_ip_ext->origin_as),"
    },
    {
        "line": 163,
        "fullcodeline": "tok2str(eigrp_ext_proto_id_values,\"unknown\",tlv_ptr.eigrp_tlv_ip_ext->proto_id),"
    },
    {
        "line": 165,
        "fullcodeline": "EXTRACT_32BITS(tlv_ptr.eigrp_tlv_ip_ext->tag),"
    },
    {
        "line": 166,
        "fullcodeline": "EXTRACT_32BITS(tlv_ptr.eigrp_tlv_ip_ext->metric)));"
    },
    {
        "line": 169,
        "fullcodeline": "(EXTRACT_32BITS(&tlv_ptr.eigrp_tlv_ip_ext->delay)/100),"
    },
    {
        "line": 170,
        "fullcodeline": "EXTRACT_32BITS(&tlv_ptr.eigrp_tlv_ip_ext->bandwidth),"
    },
    {
        "line": 171,
        "fullcodeline": "EXTRACT_24BITS(&tlv_ptr.eigrp_tlv_ip_ext->mtu),"
    },
    {
        "line": 181,
        "fullcodeline": "EXTRACT_16BITS(&tlv_ptr.eigrp_tlv_at_cable_setup->cable_start),"
    },
    {
        "line": 182,
        "fullcodeline": "EXTRACT_16BITS(&tlv_ptr.eigrp_tlv_at_cable_setup->cable_end),"
    },
    {
        "line": 183,
        "fullcodeline": "EXTRACT_32BITS(&tlv_ptr.eigrp_tlv_at_cable_setup->router_id)));"
    },
    {
        "line": 190,
        "fullcodeline": "EXTRACT_16BITS(&tlv_ptr.eigrp_tlv_at_int->cable_start),"
    },
    {
        "line": 191,
        "fullcodeline": "EXTRACT_16BITS(&tlv_ptr.eigrp_tlv_at_int->cable_end)));"
    },
    {
        "line": 194,
        "fullcodeline": "ND_PRINT((ndo, \"self\"));"
    },
    {
        "line": 201,
        "fullcodeline": "(EXTRACT_32BITS(&tlv_ptr.eigrp_tlv_at_int->delay)/100),"
    },
    {
        "line": 202,
        "fullcodeline": "EXTRACT_32BITS(&tlv_ptr.eigrp_tlv_at_int->bandwidth),"
    },
    {
        "line": 203,
        "fullcodeline": "EXTRACT_24BITS(&tlv_ptr.eigrp_tlv_at_int->mtu),"
    },
    {
        "line": 213,
        "fullcodeline": "EXTRACT_16BITS(&tlv_ptr.eigrp_tlv_at_ext->cable_start),"
    },
    {
        "line": 214,
        "fullcodeline": "EXTRACT_16BITS(&tlv_ptr.eigrp_tlv_at_ext->cable_end)));"
    },
    {
        "line": 217,
        "fullcodeline": "ND_PRINT((ndo, \"self\"));"
    },
    {
        "line": 224,
        "fullcodeline": "EXTRACT_32BITS(tlv_ptr.eigrp_tlv_at_ext->origin_router),"
    },
    {
        "line": 225,
        "fullcodeline": "EXTRACT_32BITS(tlv_ptr.eigrp_tlv_at_ext->origin_as),"
    },
    {
        "line": 226,
        "fullcodeline": "tok2str(eigrp_ext_proto_id_values,\"unknown\",tlv_ptr.eigrp_tlv_at_ext->proto_id),"
    },
    {
        "line": 228,
        "fullcodeline": "EXTRACT_32BITS(tlv_ptr.eigrp_tlv_at_ext->tag),"
    },
    {
        "line": 229,
        "fullcodeline": "EXTRACT_16BITS(tlv_ptr.eigrp_tlv_at_ext->metric)));"
    },
    {
        "line": 232,
        "fullcodeline": "(EXTRACT_32BITS(&tlv_ptr.eigrp_tlv_at_ext->delay)/100),"
    },
    {
        "line": 233,
        "fullcodeline": "EXTRACT_32BITS(&tlv_ptr.eigrp_tlv_at_ext->bandwidth),"
    },
    {
        "line": 234,
        "fullcodeline": "EXTRACT_24BITS(&tlv_ptr.eigrp_tlv_at_ext->mtu),"
    },
    {
        "line": 129,
        "fullcodeline": "ND_PRINT((ndo, \"%s\",ipaddr_string(ndo, &tlv_ptr.eigrp_tlv_ip_int->nexthop)));"
    },
    {
        "line": 158,
        "fullcodeline": "ND_PRINT((ndo, \"%s\",ipaddr_string(ndo, &tlv_ptr.eigrp_tlv_ip_ext->nexthop)));"
    },
    {
        "line": 196,
        "fullcodeline": "ND_PRINT((ndo, \"%u.%u\","
    },
    {
        "line": 219,
        "fullcodeline": "ND_PRINT((ndo, \"%u.%u\","
    },
    {
        "line": 197,
        "fullcodeline": "EXTRACT_16BITS(&tlv_ptr.eigrp_tlv_at_int->nexthop),"
    },
    {
        "line": 198,
        "fullcodeline": "EXTRACT_16BITS(&tlv_ptr.eigrp_tlv_at_int->nexthop[2])));"
    },
    {
        "line": 220,
        "fullcodeline": "EXTRACT_16BITS(&tlv_ptr.eigrp_tlv_at_ext->nexthop),"
    },
    {
        "line": 221,
        "fullcodeline": "EXTRACT_16BITS(&tlv_ptr.eigrp_tlv_at_ext->nexthop[2])));"
    }
]