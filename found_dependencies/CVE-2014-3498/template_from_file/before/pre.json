[
    {
        "line": 4,
        "fullcodeline": "fail_on_undefined = C.DEFAULT_UNDEFINED_VAR_BEHAVIOR"
    },
    {
        "line": 6,
        "fullcodeline": "from ansible import utils"
    },
    {
        "line": 7,
        "fullcodeline": "realpath = utils.path_dwim(basedir, path)"
    },
    {
        "line": 8,
        "fullcodeline": "loader=jinja2.FileSystemLoader([basedir,os.path.dirname(realpath)])"
    },
    {
        "line": 10,
        "fullcodeline": "def my_lookup(*args, **kwargs):"
    },
    {
        "line": 13,
        "fullcodeline": "def my_finalize(thing):"
    },
    {
        "line": 16,
        "fullcodeline": "environment = jinja2.Environment(loader=loader, trim_blocks=True, extensions=_get_extensions())"
    },
    {
        "line": 18,
        "fullcodeline": "environment.globals['lookup'] = my_lookup"
    },
    {
        "line": 19,
        "fullcodeline": "environment.globals['finalize'] = my_finalize"
    },
    {
        "line": 40,
        "fullcodeline": "environment.template_class = J2Template"
    },
    {
        "line": 50,
        "fullcodeline": "vars = vars.copy()"
    },
    {
        "line": 55,
        "fullcodeline": "vars['template_host']   = os.uname()[1]"
    },
    {
        "line": 56,
        "fullcodeline": "vars['template_path']   = realpath"
    },
    {
        "line": 57,
        "fullcodeline": "vars['template_mtime']  = datetime.datetime.fromtimestamp(os.path.getmtime(realpath))"
    },
    {
        "line": 58,
        "fullcodeline": "vars['template_uid']    = template_uid"
    },
    {
        "line": 59,
        "fullcodeline": "vars['template_fullpath'] = os.path.abspath(realpath)"
    },
    {
        "line": 60,
        "fullcodeline": "vars['template_run_date'] = datetime.datetime.now()"
    },
    {
        "line": 62,
        "fullcodeline": "managed_default = C.DEFAULT_MANAGED_STR"
    },
    {
        "line": 63,
        "fullcodeline": "managed_str = managed_default.format("
    },
    {
        "line": 68,
        "fullcodeline": "vars['ansible_managed'] = time.strftime("
    },
    {
        "line": 95,
        "fullcodeline": "res_newlines  = count_newlines_from_end(res)"
    },
    {
        "line": 96,
        "fullcodeline": "data_newlines = count_newlines_from_end(data)"
    },
    {
        "line": 17,
        "fullcodeline": "environment.filters.update(_get_filters())"
    },
    {
        "line": 32,
        "fullcodeline": "if data.startswith(JINJA2_OVERRIDE):"
    },
    {
        "line": 97,
        "fullcodeline": "if data_newlines > res_newlines:"
    },
    {
        "line": 100,
        "fullcodeline": "if isinstance(res, unicode):"
    },
    {
        "line": 21,
        "fullcodeline": "environment.undefined = StrictUndefined"
    },
    {
        "line": 24,
        "fullcodeline": "data = codecs.open(realpath, encoding=\"utf8\").read()"
    },
    {
        "line": 33,
        "fullcodeline": "eol = data.find('\\n')"
    },
    {
        "line": 34,
        "fullcodeline": "line = data[len(JINJA2_OVERRIDE):eol]"
    },
    {
        "line": 35,
        "fullcodeline": "data = data[eol+1:]"
    },
    {
        "line": 42,
        "fullcodeline": "t = environment.from_string(data)"
    },
    {
        "line": 52,
        "fullcodeline": "template_uid = pwd.getpwuid(os.stat(realpath).st_uid).pw_name"
    },
    {
        "line": 70,
        "fullcodeline": "time.localtime(os.path.getmtime(realpath))"
    },
    {
        "line": 77,
        "fullcodeline": "res = jinja2.utils.concat(t.root_render_func(t.new_context(_jinja2_vars(basedir, vars, t.globals, fail_on_undefined), shared=True)))"
    },
    {
        "line": 98,
        "fullcodeline": "res += '\\n' * (data_newlines - res_newlines)"
    },
    {
        "line": 102,
        "fullcodeline": "result = res"
    },
    {
        "line": 104,
        "fullcodeline": "result = template(basedir, res, vars)"
    },
    {
        "line": 36,
        "fullcodeline": "for pair in line.split(','):"
    },
    {
        "line": 26,
        "fullcodeline": "raise errors.AnsibleError(\"unable to process as utf-8: %s\" % realpath)"
    },
    {
        "line": 28,
        "fullcodeline": "raise errors.AnsibleError(\"unable to read %s\" % realpath)"
    },
    {
        "line": 45,
        "fullcodeline": "values = {'name': realpath, 'lineno': e.lineno, 'error': str(e)}"
    },
    {
        "line": 46,
        "fullcodeline": "msg = 'file: %(name)s, line number: %(lineno)s, error: %(error)s' % \\"
    },
    {
        "line": 48,
        "fullcodeline": "error = errors.AnsibleError(msg)"
    },
    {
        "line": 49,
        "fullcodeline": "raise error"
    },
    {
        "line": 54,
        "fullcodeline": "template_uid = os.stat(realpath).st_uid"
    },
    {
        "line": 79,
        "fullcodeline": "raise errors.AnsibleUndefinedVariable(\"One or more undefined variables: %s\" % str(e))"
    },
    {
        "line": 85,
        "fullcodeline": "values = {'name': realpath, 'subname': str(e)}"
    },
    {
        "line": 86,
        "fullcodeline": "msg = 'file: %(name)s, error: Cannot find/not allowed to load (include) template %(subname)s' % \\"
    },
    {
        "line": 88,
        "fullcodeline": "error = errors.AnsibleError(msg)"
    },
    {
        "line": 89,
        "fullcodeline": "raise error"
    },
    {
        "line": 38,
        "fullcodeline": "setattr(environment,key.strip(),ast.literal_eval(val.strip()))"
    },
    {
        "line": 37,
        "fullcodeline": "(key,val) = pair.split(':')"
    }
]