[
    {
        "line": 2,
        "fullcodeline": "char *uri = NULL, *proto = NULL, *method = NULL;"
    },
    {
        "line": 3,
        "fullcodeline": "int is_key = 1, key_len = 0, is_ws_after_key = 0, in_folding;"
    },
    {
        "line": 4,
        "fullcodeline": "char *value = NULL, *key = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "data_string *current_header = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "int line = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "int request_line_stage = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "int done = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "const unsigned int http_header_strict = (con->conf.http_parseopts & HTTP_PARSEOPT_HEADER_STRICT);"
    },
    {
        "line": 16,
        "fullcodeline": "init_parse_header_state(&state);"
    },
    {
        "line": 68,
        "fullcodeline": "ilen = buffer_string_length(con->parse_request);"
    },
    {
        "line": 286,
        "fullcodeline": "in_folding = 0;"
    },
    {
        "line": 557,
        "fullcodeline": "con->header_len = i;"
    },
    {
        "line": 31,
        "fullcodeline": "if (con->request_count > 1 &&"
    },
    {
        "line": 69,
        "fullcodeline": "for (i = 0, first = 0; i < ilen && line == 0; i++) {"
    },
    {
        "line": 288,
        "fullcodeline": "if (buffer_string_is_empty(con->request.uri)) {"
    },
    {
        "line": 312,
        "fullcodeline": "for (; i <= ilen && !done; i++) {"
    },
    {
        "line": 561,
        "fullcodeline": "if (con->request.http_version == HTTP_VERSION_1_1) {"
    },
    {
        "line": 595,
        "fullcodeline": "if (!buffer_is_empty(con->request.http_host) &&"
    },
    {
        "line": 610,
        "fullcodeline": "data_string *ds = (data_string *)array_get_element(con->request.headers, \"Transfer-Encoding\");"
    },
    {
        "line": 25,
        "fullcodeline": "log_error_write(srv, __FILE__, __LINE__, \"sdsdSb\","
    },
    {
        "line": 33,
        "fullcodeline": "con->request.request->ptr[1] == '\\n') {"
    },
    {
        "line": 42,
        "fullcodeline": "buffer_copy_string_len(con->parse_request, con->request.request->ptr + 2, buffer_string_length(con->request.request) - 2);"
    },
    {
        "line": 306,
        "fullcodeline": "buffer_copy_string_len(ds->key, CONST_STR_LEN(\"Host\"));"
    },
    {
        "line": 307,
        "fullcodeline": "buffer_copy_string_len(ds->value, state.reqline_host, state.reqline_hostlen);"
    },
    {
        "line": 308,
        "fullcodeline": "array_insert_unique(con->request.headers, (data_unset *)ds);"
    },
    {
        "line": 309,
        "fullcodeline": "con->request.http_host = ds->value;"
    },
    {
        "line": 313,
        "fullcodeline": "char *cur = con->parse_request->ptr + i;"
    },
    {
        "line": 549,
        "fullcodeline": "data_string* ds = current_header;"
    },
    {
        "line": 550,
        "fullcodeline": "current_header = NULL;"
    },
    {
        "line": 596,
        "fullcodeline": "0 != http_request_host_policy(con, con->request.http_host, con->proto)) {"
    },
    {
        "line": 611,
        "fullcodeline": "if (NULL != ds) {"
    },
    {
        "line": 27,
        "fullcodeline": "\"request-len:\", buffer_string_length(con->request.request),"
    },
    {
        "line": 32,
        "fullcodeline": "con->request.request->ptr[0] == '\\r' &&"
    },
    {
        "line": 302,
        "fullcodeline": "if (NULL == (ds = (data_string *)array_get_unused_element(con->request.headers, TYPE_STRING))) {"
    },
    {
        "line": 551,
        "fullcodeline": "if (!parse_single_header(srv, con, &state, ds)) {"
    },
    {
        "line": 562,
        "fullcodeline": "if (state.keep_alive_set != HTTP_CONNECTION_CLOSE) {"
    },
    {
        "line": 572,
        "fullcodeline": "if (con->request.http_host == NULL ||"
    },
    {
        "line": 627,
        "fullcodeline": "buffer_reset(ds->value); /* headers with empty values are ignored */"
    },
    {
        "line": 629,
        "fullcodeline": "state.con_length_set = 1;"
    },
    {
        "line": 630,
        "fullcodeline": "con->request.content_length = -1;"
    },
    {
        "line": 633,
        "fullcodeline": "ds = (data_string *)array_get_element(con->request.headers, \"Content-Length\");"
    },
    {
        "line": 642,
        "fullcodeline": "if (state.con_length_set && con->request.content_length != 0) {"
    },
    {
        "line": 652,
        "fullcodeline": "if (!state.con_length_set) {"
    },
    {
        "line": 669,
        "fullcodeline": "if (con->request.content_length != 0) {"
    },
    {
        "line": 43,
        "fullcodeline": "} else if (con->request_count > 0 &&"
    },
    {
        "line": 281,
        "fullcodeline": "request_line_stage++;"
    },
    {
        "line": 290,
        "fullcodeline": "log_error_write(srv, __FILE__, __LINE__, \"s\", \"no uri specified -> 400\");"
    },
    {
        "line": 303,
        "fullcodeline": "ds = data_string_init();"
    },
    {
        "line": 317,
        "fullcodeline": "int got_colon = 0;"
    },
    {
        "line": 566,
        "fullcodeline": "con->keep_alive = 1;"
    },
    {
        "line": 573,
        "fullcodeline": "buffer_string_is_empty(con->request.http_host)) {"
    },
    {
        "line": 584,
        "fullcodeline": "if (state.keep_alive_set == HTTP_CONNECTION_KEEPALIVE) {"
    },
    {
        "line": 599,
        "fullcodeline": "log_error_write(srv, __FILE__, __LINE__, \"s\","
    },
    {
        "line": 612,
        "fullcodeline": "if (con->request.http_version == HTTP_VERSION_1_0) {"
    },
    {
        "line": 618,
        "fullcodeline": "if (0 != strcasecmp(ds->value->ptr, \"chunked\")) {"
    },
    {
        "line": 634,
        "fullcodeline": "if (NULL != ds) buffer_reset(ds->value); /* headers with empty values are ignored */"
    },
    {
        "line": 657,
        "fullcodeline": "con->http_status = 411;"
    },
    {
        "line": 44,
        "fullcodeline": "con->request.request->ptr[1] == '\\n') {"
    },
    {
        "line": 56,
        "fullcodeline": "buffer_copy_string_len(con->parse_request, con->request.request->ptr + 1, buffer_string_length(con->request.request) - 1);"
    },
    {
        "line": 72,
        "fullcodeline": "if (con->parse_request->ptr[i+1] != '\\n') break;"
    },
    {
        "line": 77,
        "fullcodeline": "char *nuri = NULL;"
    },
    {
        "line": 80,
        "fullcodeline": "buffer_copy_string_len(con->request.request_line, con->parse_request->ptr, i);"
    },
    {
        "line": 90,
        "fullcodeline": "con->parse_request->ptr[i] = '\\0';"
    },
    {
        "line": 102,
        "fullcodeline": "proto = con->parse_request->ptr + first;"
    },
    {
        "line": 104,
        "fullcodeline": "*(uri - 1) = '\\0';"
    },
    {
        "line": 105,
        "fullcodeline": "*(proto - 1) = '\\0';"
    },
    {
        "line": 121,
        "fullcodeline": "con->request.http_method = r;"
    },
    {
        "line": 214,
        "fullcodeline": "jlen = buffer_string_length(con->request.uri);"
    },
    {
        "line": 250,
        "fullcodeline": "buffer_copy_buffer(con->request.orig_uri, con->request.uri);"
    },
    {
        "line": 252,
        "fullcodeline": "con->http_status = 0;"
    },
    {
        "line": 254,
        "fullcodeline": "line++;"
    },
    {
        "line": 255,
        "fullcodeline": "first = i+1;"
    },
    {
        "line": 568,
        "fullcodeline": "con->keep_alive = 0;"
    },
    {
        "line": 588,
        "fullcodeline": "con->keep_alive = 1;"
    },
    {
        "line": 621,
        "fullcodeline": "con->http_status = 501; /* Not Implemented */"
    },
    {
        "line": 59,
        "fullcodeline": "buffer_copy_buffer(con->parse_request, con->request.request);"
    },
    {
        "line": 83,
        "fullcodeline": "if (con->parse_request->ptr[i] == '\\r') {"
    },
    {
        "line": 92,
        "fullcodeline": "if (request_line_stage != 2) {"
    },
    {
        "line": 108,
        "fullcodeline": "if (HTTP_METHOD_UNSET == (r = get_http_method_key(method))) {"
    },
    {
        "line": 129,
        "fullcodeline": "if (0 == strncmp(proto, \"HTTP/\", sizeof(\"HTTP/\") - 1)) {"
    },
    {
        "line": 188,
        "fullcodeline": "if (*uri == '/') {"
    },
    {
        "line": 215,
        "fullcodeline": "if ((con->conf.http_parseopts & HTTP_PARSEOPT_URL_NORMALIZE_CTRLS_REJECT)) {"
    },
    {
        "line": 223,
        "fullcodeline": "if (j < jlen) {"
    },
    {
        "line": 262,
        "fullcodeline": "method = con->parse_request->ptr + first;"
    },
    {
        "line": 263,
        "fullcodeline": "first = i + 1;"
    },
    {
        "line": 267,
        "fullcodeline": "uri = con->parse_request->ptr + first;"
    },
    {
        "line": 268,
        "fullcodeline": "first = i + 1;"
    },
    {
        "line": 326,
        "fullcodeline": "is_key = 0;"
    },
    {
        "line": 328,
        "fullcodeline": "value = cur + 1;"
    },
    {
        "line": 333,
        "fullcodeline": "is_ws_after_key = 0;"
    },
    {
        "line": 372,
        "fullcodeline": "key_len = i - first;"
    },
    {
        "line": 576,
        "fullcodeline": "log_error_write(srv, __FILE__, __LINE__, \"s\", \"HTTP/1.1 but Host missing -> 400\");"
    },
    {
        "line": 590,
        "fullcodeline": "con->keep_alive = 0;"
    },
    {
        "line": 47,
        "fullcodeline": "http_request_missing_CR_before_LF(srv, con);"
    },
    {
        "line": 85,
        "fullcodeline": "++i;"
    },
    {
        "line": 109,
        "fullcodeline": "con->http_status = 501;"
    },
    {
        "line": 130,
        "fullcodeline": "char * major = proto + sizeof(\"HTTP/\") - 1;"
    },
    {
        "line": 131,
        "fullcodeline": "char * minor = strchr(major, '.');"
    },
    {
        "line": 132,
        "fullcodeline": "char *err = NULL;"
    },
    {
        "line": 133,
        "fullcodeline": "int major_num = 0, minor_num = 0;"
    },
    {
        "line": 135,
        "fullcodeline": "int invalid_version = 0;"
    },
    {
        "line": 190,
        "fullcodeline": "buffer_copy_string_len(con->request.uri, uri, proto - uri - 1);"
    },
    {
        "line": 216,
        "fullcodeline": "j = jlen; /* URI will be checked in http_response_prepare() */"
    },
    {
        "line": 330,
        "fullcodeline": "if (is_ws_after_key == 0) {"
    },
    {
        "line": 363,
        "fullcodeline": "if (i == first) {"
    },
    {
        "line": 375,
        "fullcodeline": "for (j = 1; !got_colon; j++) {"
    },
    {
        "line": 405,
        "fullcodeline": "if (con->parse_request->ptr[i+1] == '\\n' && i == first) {"
    },
    {
        "line": 435,
        "fullcodeline": "if (http_header_strict ? (*cur < 32 || ((unsigned char)*cur) >= 127) : *cur == '\\0') {"
    },
    {
        "line": 137,
        "fullcodeline": "if (NULL == minor || /* no dot */"
    },
    {
        "line": 163,
        "fullcodeline": "if (major_num == 1 && minor_num == 1) {"
    },
    {
        "line": 273,
        "fullcodeline": "log_error_write(srv, __FILE__, __LINE__, \"s\", \"overlong request line -> 400\");"
    },
    {
        "line": 331,
        "fullcodeline": "key_len = i - first;"
    },
    {
        "line": 353,
        "fullcodeline": "log_error_write(srv, __FILE__, __LINE__, \"sbsds\","
    },
    {
        "line": 364,
        "fullcodeline": "is_key = 0;"
    },
    {
        "line": 365,
        "fullcodeline": "in_folding = 1;"
    },
    {
        "line": 366,
        "fullcodeline": "value = cur;"
    },
    {
        "line": 407,
        "fullcodeline": "con->parse_request->ptr[i] = '\\0';"
    },
    {
        "line": 408,
        "fullcodeline": "con->parse_request->ptr[i+1] = '\\0';"
    },
    {
        "line": 410,
        "fullcodeline": "i++;"
    },
    {
        "line": 412,
        "fullcodeline": "done = 1;"
    },
    {
        "line": 426,
        "fullcodeline": "http_request_missing_CR_before_LF(srv, con);"
    },
    {
        "line": 454,
        "fullcodeline": "if (*cur == '\\n' || con->parse_request->ptr[i+1] == '\\n') {"
    },
    {
        "line": 531,
        "fullcodeline": "if (value == cur) value = cur+1;"
    },
    {
        "line": 534,
        "fullcodeline": "if (http_header_strict ? (*cur >= 0 && *cur < 32) : *cur == '\\0') {"
    },
    {
        "line": 94,
        "fullcodeline": "log_error_write(srv, __FILE__, __LINE__, \"s\", \"incomplete request line -> 400\");"
    },
    {
        "line": 112,
        "fullcodeline": "log_error_write(srv, __FILE__, __LINE__, \"s\", \"unknown http-method -> 501\");"
    },
    {
        "line": 139,
        "fullcodeline": "*(minor + 1) == '\\0' /* no minor */) {"
    },
    {
        "line": 140,
        "fullcodeline": "invalid_version = 1;"
    },
    {
        "line": 164,
        "fullcodeline": "con->request.http_version = con->conf.allow_http11 ? HTTP_VERSION_1_1 : HTTP_VERSION_1_0;"
    },
    {
        "line": 191,
        "fullcodeline": "} else if (0 == strncasecmp(uri, \"http://\", 7) &&"
    },
    {
        "line": 225,
        "fullcodeline": "unsigned char buf[2];"
    },
    {
        "line": 226,
        "fullcodeline": "buf[0] = con->request.uri->ptr[j];"
    },
    {
        "line": 227,
        "fullcodeline": "buf[1] = '\\0';"
    },
    {
        "line": 468,
        "fullcodeline": "con->parse_request->ptr[i] = '\\0';"
    },
    {
        "line": 470,
        "fullcodeline": "value_len = cur - value;"
    },
    {
        "line": 514,
        "fullcodeline": "first = i+1;"
    },
    {
        "line": 515,
        "fullcodeline": "is_key = 1;"
    },
    {
        "line": 516,
        "fullcodeline": "value = NULL;"
    },
    {
        "line": 517,
        "fullcodeline": "key_len = 0;"
    },
    {
        "line": 518,
        "fullcodeline": "in_folding = 0;"
    },
    {
        "line": 87,
        "fullcodeline": "http_request_missing_CR_before_LF(srv, con);"
    },
    {
        "line": 138,
        "fullcodeline": "minor == major || /* no major */"
    },
    {
        "line": 142,
        "fullcodeline": "*minor = '\\0';"
    },
    {
        "line": 143,
        "fullcodeline": "major_num = strtol(major, &err, 10);"
    },
    {
        "line": 147,
        "fullcodeline": "*minor++ = '.';"
    },
    {
        "line": 148,
        "fullcodeline": "minor_num = strtol(minor, &err, 10);"
    },
    {
        "line": 180,
        "fullcodeline": "log_error_write(srv, __FILE__, __LINE__, \"s\", \"unknown protocol -> 400\");"
    },
    {
        "line": 192,
        "fullcodeline": "NULL != (nuri = strchr(uri + 7, '/'))) {"
    },
    {
        "line": 193,
        "fullcodeline": "state.reqline_host = uri + 7;"
    },
    {
        "line": 194,
        "fullcodeline": "state.reqline_hostlen = nuri - state.reqline_host;"
    },
    {
        "line": 196,
        "fullcodeline": "buffer_copy_string_len(con->request.uri, nuri, proto - nuri - 1);"
    },
    {
        "line": 384,
        "fullcodeline": "i += j - 1;"
    },
    {
        "line": 385,
        "fullcodeline": "got_colon = 1;"
    },
    {
        "line": 386,
        "fullcodeline": "is_ws_after_key = 1; /* we already know the key length */"
    },
    {
        "line": 428,
        "fullcodeline": "} else if (i == first) {"
    },
    {
        "line": 437,
        "fullcodeline": "log_error_write(srv, __FILE__, __LINE__, \"sbsds\","
    },
    {
        "line": 457,
        "fullcodeline": "if (*cur == '\\n') {"
    },
    {
        "line": 473,
        "fullcodeline": "while (value_len > 0 && (value[value_len - 1] == ' ' || value[value_len - 1] == '\\t')) {"
    },
    {
        "line": 145,
        "fullcodeline": "if (*err != '\\0') invalid_version = 1;"
    },
    {
        "line": 150,
        "fullcodeline": "if (*err != '\\0') invalid_version = 1;"
    },
    {
        "line": 155,
        "fullcodeline": "log_error_write(srv, __FILE__, __LINE__, \"s\", \"unknown protocol -> 400\");"
    },
    {
        "line": 165,
        "fullcodeline": "} else if (major_num == 1 && minor_num == 0) {"
    },
    {
        "line": 218,
        "fullcodeline": "for (j = 0; j < jlen && request_uri_is_valid_char(con->request.uri->ptr[j]); j++) ;"
    },
    {
        "line": 220,
        "fullcodeline": "char *z = memchr(con->request.uri->ptr, '\\0', jlen);"
    },
    {
        "line": 221,
        "fullcodeline": "j = (NULL == z) ? jlen : (size_t)(z - con->request.uri->ptr);"
    },
    {
        "line": 229,
        "fullcodeline": "if (con->request.uri->ptr[j] > 32 &&"
    },
    {
        "line": 230,
        "fullcodeline": "con->request.uri->ptr[j] != 127) {"
    },
    {
        "line": 232,
        "fullcodeline": "log_error_write(srv, __FILE__, __LINE__, \"ss\","
    },
    {
        "line": 415,
        "fullcodeline": "log_error_write(srv, __FILE__, __LINE__, \"s\", \"CR without LF -> 400\");"
    },
    {
        "line": 429,
        "fullcodeline": "con->parse_request->ptr[i] = '\\0';"
    },
    {
        "line": 430,
        "fullcodeline": "done = 1;"
    },
    {
        "line": 474,
        "fullcodeline": "--value_len;"
    },
    {
        "line": 492,
        "fullcodeline": "buffer_append_string_len(current_header->value, value, value_len);"
    },
    {
        "line": 166,
        "fullcodeline": "con->request.http_version = HTTP_VERSION_1_0;"
    },
    {
        "line": 197,
        "fullcodeline": "} else if (0 == strncasecmp(uri, \"https://\", 8) &&"
    },
    {
        "line": 237,
        "fullcodeline": "log_error_write(srv, __FILE__, __LINE__, \"sd\","
    },
    {
        "line": 393,
        "fullcodeline": "log_error_write(srv, __FILE__, __LINE__, \"s\", \"WS character in key -> 400\");"
    },
    {
        "line": 464,
        "fullcodeline": "++i;"
    },
    {
        "line": 478,
        "fullcodeline": "if (!current_header) {"
    },
    {
        "line": 504,
        "fullcodeline": "key = con->parse_request->ptr + first;"
    },
    {
        "line": 510,
        "fullcodeline": "buffer_copy_string_len(current_header->key, key, key_len);"
    },
    {
        "line": 511,
        "fullcodeline": "buffer_copy_string_len(current_header->value, value, value_len);"
    },
    {
        "line": 168,
        "fullcodeline": "con->http_status = 505;"
    },
    {
        "line": 198,
        "fullcodeline": "NULL != (nuri = strchr(uri + 8, '/'))) {"
    },
    {
        "line": 199,
        "fullcodeline": "state.reqline_host = uri + 8;"
    },
    {
        "line": 200,
        "fullcodeline": "state.reqline_hostlen = nuri - state.reqline_host;"
    },
    {
        "line": 202,
        "fullcodeline": "buffer_copy_string_len(con->request.uri, nuri, proto - nuri - 1);"
    },
    {
        "line": 459,
        "fullcodeline": "http_request_missing_CR_before_LF(srv, con);"
    },
    {
        "line": 506,
        "fullcodeline": "if (NULL == (current_header = (data_string *)array_get_unused_element(con->request.headers, TYPE_STRING))) {"
    },
    {
        "line": 496,
        "fullcodeline": "data_string *ds = current_header;"
    },
    {
        "line": 497,
        "fullcodeline": "current_header = NULL;"
    },
    {
        "line": 507,
        "fullcodeline": "current_header = data_string_init();"
    },
    {
        "line": 171,
        "fullcodeline": "log_error_write(srv, __FILE__, __LINE__, \"s\", \"unknown HTTP version -> 505\");"
    },
    {
        "line": 203,
        "fullcodeline": "} else if (!http_header_strict"
    },
    {
        "line": 482,
        "fullcodeline": "log_error_write(srv, __FILE__, __LINE__, \"s\", \"WS at the start of first line -> 400\");"
    },
    {
        "line": 498,
        "fullcodeline": "if (!parse_single_header(srv, con, &state, ds)) {"
    },
    {
        "line": 205,
        "fullcodeline": "|| (HTTP_METHOD_OPTIONS == con->request.http_method && uri[0] == '*' && uri[1] == '\\0')) {"
    },
    {
        "line": 207,
        "fullcodeline": "buffer_copy_string_len(con->request.uri, uri, proto - uri - 1);"
    },
    {
        "line": 204,
        "fullcodeline": "|| (HTTP_METHOD_CONNECT == con->request.http_method && (uri[0] == ':' || light_isdigit(uri[0])))"
    }
]