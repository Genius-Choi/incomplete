[
    {
        "line": 2,
        "fullcodeline": "int multipart = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "char *boundary = \"fkj49sn38dcn3\";"
    },
    {
        "line": 8,
        "fullcodeline": "buffer *content_type = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "start = 0;"
    },
    {
        "line": 11,
        "fullcodeline": "end = sce->st.st_size - 1;"
    },
    {
        "line": 13,
        "fullcodeline": "con->response.content_length = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "if (NULL != (ds = (data_string *)array_get_element(con->response.headers, \"Content-Type\"))) {"
    },
    {
        "line": 20,
        "fullcodeline": "!error && *s && NULL != (minus = strchr(s, '-')); ) {"
    },
    {
        "line": 16,
        "fullcodeline": "content_type = ds->value;"
    },
    {
        "line": 19,
        "fullcodeline": "for (s = con->request.http_range, error = 0;"
    },
    {
        "line": 164,
        "fullcodeline": "buffer *b = buffer_init();"
    },
    {
        "line": 166,
        "fullcodeline": "buffer_copy_string_len(b, \"\\r\\n--\", 4);"
    },
    {
        "line": 167,
        "fullcodeline": "buffer_append_string(b, boundary);"
    },
    {
        "line": 168,
        "fullcodeline": "buffer_append_string_len(b, \"--\\r\\n\", 4);"
    },
    {
        "line": 170,
        "fullcodeline": "con->response.content_length += buffer_string_length(b);"
    },
    {
        "line": 171,
        "fullcodeline": "chunkqueue_append_buffer(con->write_queue, b);"
    },
    {
        "line": 172,
        "fullcodeline": "buffer_free(b);"
    },
    {
        "line": 176,
        "fullcodeline": "buffer_copy_string_len(srv->tmp_buf, CONST_STR_LEN(\"multipart/byteranges; boundary=\"));"
    },
    {
        "line": 177,
        "fullcodeline": "buffer_append_string(srv->tmp_buf, boundary);"
    },
    {
        "line": 180,
        "fullcodeline": "response_header_overwrite(srv, con, CONST_STR_LEN(\"Content-Type\"), CONST_BUF_LEN(srv->tmp_buf));"
    },
    {
        "line": 24,
        "fullcodeline": "if (s == minus) {"
    },
    {
        "line": 114,
        "fullcodeline": "if (!error) {"
    },
    {
        "line": 127,
        "fullcodeline": "if (!error) {"
    },
    {
        "line": 160,
        "fullcodeline": "if (error) return -1;"
    },
    {
        "line": 184,
        "fullcodeline": "buffer_copy_string_len(srv->tmp_buf, CONST_STR_LEN(\"bytes \"));"
    },
    {
        "line": 185,
        "fullcodeline": "buffer_append_int(srv->tmp_buf, start);"
    },
    {
        "line": 186,
        "fullcodeline": "buffer_append_string_len(srv->tmp_buf, CONST_STR_LEN(\"-\"));"
    },
    {
        "line": 187,
        "fullcodeline": "buffer_append_int(srv->tmp_buf, end);"
    },
    {
        "line": 188,
        "fullcodeline": "buffer_append_string_len(srv->tmp_buf, CONST_STR_LEN(\"/\"));"
    },
    {
        "line": 189,
        "fullcodeline": "buffer_append_int(srv->tmp_buf, sce->st.st_size);"
    },
    {
        "line": 191,
        "fullcodeline": "response_header_insert(srv, con, CONST_STR_LEN(\"Content-Range\"), CONST_BUF_LEN(srv->tmp_buf));"
    },
    {
        "line": 27,
        "fullcodeline": "le = strtoll(s, &err, 10);"
    },
    {
        "line": 154,
        "fullcodeline": "chunkqueue_append_file(con->write_queue, path, start, end - start + 1);"
    },
    {
        "line": 155,
        "fullcodeline": "con->response.content_length += end - start + 1;"
    },
    {
        "line": 29,
        "fullcodeline": "if (le == 0) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (start < 0) start = 0;"
    },
    {
        "line": 118,
        "fullcodeline": "if (end > sce->st.st_size - 1) end = sce->st.st_size - 1;"
    },
    {
        "line": 120,
        "fullcodeline": "if (start > sce->st.st_size - 1) {"
    },
    {
        "line": 32,
        "fullcodeline": "con->http_status = 416;"
    },
    {
        "line": 33,
        "fullcodeline": "error = 1;"
    },
    {
        "line": 50,
        "fullcodeline": "} else if (*(minus+1) == '\\0' || *(minus+1) == ',') {"
    },
    {
        "line": 121,
        "fullcodeline": "error = 1;"
    },
    {
        "line": 123,
        "fullcodeline": "con->http_status = 416;"
    },
    {
        "line": 130,
        "fullcodeline": "buffer *b = buffer_init();"
    },
    {
        "line": 132,
        "fullcodeline": "buffer_copy_string_len(b, CONST_STR_LEN(\"\\r\\n--\"));"
    },
    {
        "line": 133,
        "fullcodeline": "buffer_append_string(b, boundary);"
    },
    {
        "line": 136,
        "fullcodeline": "buffer_append_string_len(b, CONST_STR_LEN(\"\\r\\nContent-Range: bytes \"));"
    },
    {
        "line": 137,
        "fullcodeline": "buffer_append_int(b, start);"
    },
    {
        "line": 138,
        "fullcodeline": "buffer_append_string_len(b, CONST_STR_LEN(\"-\"));"
    },
    {
        "line": 139,
        "fullcodeline": "buffer_append_int(b, end);"
    },
    {
        "line": 140,
        "fullcodeline": "buffer_append_string_len(b, CONST_STR_LEN(\"/\"));"
    },
    {
        "line": 141,
        "fullcodeline": "buffer_append_int(b, sce->st.st_size);"
    },
    {
        "line": 143,
        "fullcodeline": "buffer_append_string_len(b, CONST_STR_LEN(\"\\r\\nContent-Type: \"));"
    },
    {
        "line": 144,
        "fullcodeline": "buffer_append_string_buffer(b, content_type);"
    },
    {
        "line": 147,
        "fullcodeline": "buffer_append_string_len(b, CONST_STR_LEN(\"\\r\\n\\r\\n\"));"
    },
    {
        "line": 149,
        "fullcodeline": "con->response.content_length += buffer_string_length(b);"
    },
    {
        "line": 150,
        "fullcodeline": "chunkqueue_append_buffer(con->write_queue, b);"
    },
    {
        "line": 151,
        "fullcodeline": "buffer_free(b);"
    },
    {
        "line": 53,
        "fullcodeline": "la = strtoll(s, &err, 10);"
    },
    {
        "line": 34,
        "fullcodeline": "} else if (*err == '\\0') {"
    },
    {
        "line": 55,
        "fullcodeline": "if (err == minus) {"
    },
    {
        "line": 80,
        "fullcodeline": "la = strtoll(s, &err, 10);"
    },
    {
        "line": 36,
        "fullcodeline": "s = err;"
    },
    {
        "line": 38,
        "fullcodeline": "end = sce->st.st_size - 1;"
    },
    {
        "line": 39,
        "fullcodeline": "start = sce->st.st_size + le;"
    },
    {
        "line": 82,
        "fullcodeline": "if (err == minus) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (*(err + 1) == '\\0') {"
    },
    {
        "line": 75,
        "fullcodeline": "error = 1;"
    },
    {
        "line": 83,
        "fullcodeline": "le = strtoll(minus+1, &err, 10);"
    },
    {
        "line": 40,
        "fullcodeline": "} else if (*err == ',') {"
    },
    {
        "line": 59,
        "fullcodeline": "s = err + 1;"
    },
    {
        "line": 61,
        "fullcodeline": "end = sce->st.st_size - 1;"
    },
    {
        "line": 62,
        "fullcodeline": "start = la;"
    },
    {
        "line": 86,
        "fullcodeline": "if (la > le) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (*err == '\\0') {"
    },
    {
        "line": 110,
        "fullcodeline": "error = 1;"
    },
    {
        "line": 41,
        "fullcodeline": "multipart = 1;"
    },
    {
        "line": 42,
        "fullcodeline": "s = err + 1;"
    },
    {
        "line": 44,
        "fullcodeline": "end = sce->st.st_size - 1;"
    },
    {
        "line": 45,
        "fullcodeline": "start = sce->st.st_size + le;"
    },
    {
        "line": 87,
        "fullcodeline": "error = 1;"
    },
    {
        "line": 92,
        "fullcodeline": "s = err;"
    },
    {
        "line": 94,
        "fullcodeline": "end = le;"
    },
    {
        "line": 95,
        "fullcodeline": "start = la;"
    },
    {
        "line": 47,
        "fullcodeline": "error = 1;"
    },
    {
        "line": 64,
        "fullcodeline": "} else if (*(err + 1) == ',') {"
    },
    {
        "line": 65,
        "fullcodeline": "multipart = 1;"
    },
    {
        "line": 66,
        "fullcodeline": "s = err + 2;"
    },
    {
        "line": 68,
        "fullcodeline": "end = sce->st.st_size - 1;"
    },
    {
        "line": 69,
        "fullcodeline": "start = la;"
    },
    {
        "line": 96,
        "fullcodeline": "} else if (*err == ',') {"
    },
    {
        "line": 71,
        "fullcodeline": "error = 1;"
    },
    {
        "line": 97,
        "fullcodeline": "multipart = 1;"
    },
    {
        "line": 98,
        "fullcodeline": "s = err + 1;"
    },
    {
        "line": 100,
        "fullcodeline": "end = le;"
    },
    {
        "line": 101,
        "fullcodeline": "start = la;"
    },
    {
        "line": 105,
        "fullcodeline": "error = 1;"
    }
]