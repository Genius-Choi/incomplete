[
    {
        "line": 3,
        "fullcodeline": "assert_ready(ibc)"
    },
    {
        "line": 5,
        "fullcodeline": "evmos: Evmos = ibc.chains[\"evmos\"]"
    },
    {
        "line": 6,
        "fullcodeline": "w3 = evmos.w3"
    },
    {
        "line": 8,
        "fullcodeline": "amt = 1000000000000000000"
    },
    {
        "line": 9,
        "fullcodeline": "src_denom = \"aevmos\""
    },
    {
        "line": 10,
        "fullcodeline": "gas_limit = 200_000"
    },
    {
        "line": 11,
        "fullcodeline": "evmos_gas_price = ibc.chains[\"evmos\"].w3.eth.gas_price"
    },
    {
        "line": 13,
        "fullcodeline": "dst_addr = ibc.chains[\"chainmain\"].cosmos_cli().address(\"signer2\")"
    },
    {
        "line": 14,
        "fullcodeline": "src_adr = ibc.chains[\"evmos\"].cosmos_cli().address(\"signer2\")"
    },
    {
        "line": 20,
        "fullcodeline": "counter = eth_contract.functions.counter().call()"
    },
    {
        "line": 21,
        "fullcodeline": "assert counter == 0"
    },
    {
        "line": 23,
        "fullcodeline": "pc = get_precompile_contract(ibc.chains[\"evmos\"].w3, \"ICS20I\")"
    },
    {
        "line": 25,
        "fullcodeline": "approve_tx = pc.functions.approve("
    },
    {
        "line": 34,
        "fullcodeline": "tx_receipt = send_transaction(ibc.chains[\"evmos\"].w3, approve_tx, KEYS[\"signer2\"])"
    },
    {
        "line": 35,
        "fullcodeline": "assert tx_receipt.status == 1"
    },
    {
        "line": 37,
        "fullcodeline": "def check_allowance_set():"
    },
    {
        "line": 43,
        "fullcodeline": "wait_for_fn(\"allowance has changed\", check_allowance_set)"
    },
    {
        "line": 45,
        "fullcodeline": "src_starting_balance = get_balance(ibc.chains[\"evmos\"], src_adr, \"aevmos\")"
    },
    {
        "line": 46,
        "fullcodeline": "dest_starting_balance = get_balance("
    },
    {
        "line": 50,
        "fullcodeline": "send_tx = eth_contract.functions.transferFromEOA("
    },
    {
        "line": 55,
        "fullcodeline": "receipt = send_transaction(ibc.chains[\"evmos\"].w3, send_tx, KEYS[\"signer2\"])"
    },
    {
        "line": 56,
        "fullcodeline": "assert receipt.status == 1"
    },
    {
        "line": 57,
        "fullcodeline": "fees = receipt.gasUsed * evmos_gas_price"
    },
    {
        "line": 59,
        "fullcodeline": "final_dest_balance = dest_starting_balance"
    },
    {
        "line": 60,
        "fullcodeline": "def check_dest_balance():"
    },
    {
        "line": 67,
        "fullcodeline": "wait_for_fn(\"destination balance change\", check_dest_balance)"
    },
    {
        "line": 68,
        "fullcodeline": "assert final_dest_balance == dest_starting_balance + amt"
    },
    {
        "line": 70,
        "fullcodeline": "src_final_amount_evmos = get_balance(ibc.chains[\"evmos\"], src_adr, src_denom)"
    },
    {
        "line": 71,
        "fullcodeline": "assert src_final_amount_evmos == src_starting_balance - amt - fees"
    },
    {
        "line": 73,
        "fullcodeline": "counter_after = eth_contract.functions.counter().call()"
    },
    {
        "line": 74,
        "fullcodeline": "assert counter_after == 0"
    },
    {
        "line": 17,
        "fullcodeline": "eth_contract, tx_receipt = deploy_contract(w3, CONTRACTS[\"ICS20FromContract\"])"
    },
    {
        "line": 18,
        "fullcodeline": "assert tx_receipt.status == 1"
    },
    {
        "line": 28,
        "fullcodeline": "{"
    },
    {
        "line": 53,
        "fullcodeline": "{\"from\": ADDRS[\"signer2\"], \"gasPrice\": evmos_gas_price, \"gas\": gas_limit}"
    },
    {
        "line": 26,
        "fullcodeline": "eth_contract.address, [[\"transfer\", \"channel-0\", [[src_denom, amt]], []]]"
    }
]