[
    {
        "line": 3,
        "fullcodeline": "struct ssh *ssh = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "int was_addr, config_test = 0, opt_terminated = 0, want_final_pass = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "char cname[NI_MAXHOST], thishost[NI_MAXHOST];"
    },
    {
        "line": 13,
        "fullcodeline": "struct addrinfo *addrs = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "struct ssh_conn_info *cinfo = NULL;"
    },
    {
        "line": 19,
        "fullcodeline": "sanitise_stdfd();"
    },
    {
        "line": 25,
        "fullcodeline": "closefrom(STDERR_FILENO + 1);"
    },
    {
        "line": 27,
        "fullcodeline": "__progname = ssh_get_progname(av[0]);"
    },
    {
        "line": 32,
        "fullcodeline": "saved_av = xcalloc(ac + 1, sizeof(*saved_av));"
    },
    {
        "line": 35,
        "fullcodeline": "saved_av[i] = NULL;"
    },
    {
        "line": 36,
        "fullcodeline": "compat_init_setproctitle(ac, av);"
    },
    {
        "line": 37,
        "fullcodeline": "av = saved_av;"
    },
    {
        "line": 40,
        "fullcodeline": "seed_rng();"
    },
    {
        "line": 43,
        "fullcodeline": "pw = getpwuid(getuid());"
    },
    {
        "line": 49,
        "fullcodeline": "pw = pwcopy(pw);"
    },
    {
        "line": 57,
        "fullcodeline": "umask(022 | umask(077));"
    },
    {
        "line": 59,
        "fullcodeline": "msetlocale();"
    },
    {
        "line": 65,
        "fullcodeline": "initialize_options(&options);"
    },
    {
        "line": 72,
        "fullcodeline": "channel_init_channels(ssh);"
    },
    {
        "line": 75,
        "fullcodeline": "host = NULL;"
    },
    {
        "line": 76,
        "fullcodeline": "use_syslog = 0;"
    },
    {
        "line": 77,
        "fullcodeline": "logfile = NULL;"
    },
    {
        "line": 78,
        "fullcodeline": "argv0 = av[0];"
    },
    {
        "line": 442,
        "fullcodeline": "ac -= optind;"
    },
    {
        "line": 443,
        "fullcodeline": "av += optind;"
    },
    {
        "line": 493,
        "fullcodeline": "options.host_arg = xstrdup(host);"
    },
    {
        "line": 520,
        "fullcodeline": "ssh_signal(SIGPIPE, SIG_IGN); /* ignore SIGPIPE early */"
    },
    {
        "line": 530,
        "fullcodeline": "log_init(argv0,"
    },
    {
        "line": 541,
        "fullcodeline": "process_config_files(options.host_arg, pw, 0, &want_final_pass);"
    },
    {
        "line": 546,
        "fullcodeline": "fill_default_options_for_canonicalization(&options);"
    },
    {
        "line": 583,
        "fullcodeline": "direct = option_clear_or_none(options.proxy_command) &&"
    },
    {
        "line": 684,
        "fullcodeline": "channel_set_af(ssh, options.address_family);"
    },
    {
        "line": 723,
        "fullcodeline": "log_init(argv0, options.log_level, options.log_facility, !use_syslog);"
    },
    {
        "line": 753,
        "fullcodeline": "cinfo = xcalloc(1, sizeof(*cinfo));"
    },
    {
        "line": 756,
        "fullcodeline": "cinfo->thishost = xstrdup(thishost);"
    },
    {
        "line": 757,
        "fullcodeline": "thishost[strcspn(thishost, \".\")] = '\\0';"
    },
    {
        "line": 758,
        "fullcodeline": "cinfo->shorthost = xstrdup(thishost);"
    },
    {
        "line": 759,
        "fullcodeline": "xasprintf(&cinfo->portstr, \"%d\", options.port);"
    },
    {
        "line": 760,
        "fullcodeline": "xasprintf(&cinfo->uidstr, \"%llu\","
    },
    {
        "line": 762,
        "fullcodeline": "cinfo->keyalias = xstrdup(options.host_key_alias ?"
    },
    {
        "line": 764,
        "fullcodeline": "cinfo->host_arg = xstrdup(options.host_arg);"
    },
    {
        "line": 765,
        "fullcodeline": "cinfo->remhost = xstrdup(host);"
    },
    {
        "line": 766,
        "fullcodeline": "cinfo->remuser = xstrdup(options.user);"
    },
    {
        "line": 767,
        "fullcodeline": "cinfo->homedir = xstrdup(pw->pw_dir);"
    },
    {
        "line": 768,
        "fullcodeline": "cinfo->locuser = xstrdup(pw->pw_name);"
    },
    {
        "line": 769,
        "fullcodeline": "cinfo->jmphost = xstrdup(options.jump_host == NULL ?"
    },
    {
        "line": 771,
        "fullcodeline": "cinfo->conn_hash_hex = ssh_connection_hash(cinfo->thishost,"
    },
    {
        "line": 953,
        "fullcodeline": "channel_clear_timeouts(ssh);"
    },
    {
        "line": 975,
        "fullcodeline": "ssh_packet_set_timeout(ssh, options.server_alive_interval,"
    },
    {
        "line": 986,
        "fullcodeline": "sensitive_data.nkeys = 0;"
    },
    {
        "line": 987,
        "fullcodeline": "sensitive_data.keys = NULL;"
    },
    {
        "line": 1037,
        "fullcodeline": "load_public_identity_files(cinfo);"
    },
    {
        "line": 1080,
        "fullcodeline": "tilde_expand_paths(options.system_hostfiles,"
    },
    {
        "line": 1082,
        "fullcodeline": "tilde_expand_paths(options.user_hostfiles, options.num_user_hostfiles);"
    },
    {
        "line": 1084,
        "fullcodeline": "ssh_signal(SIGCHLD, main_sigchld_handler);"
    },
    {
        "line": 1087,
        "fullcodeline": "ssh_login(ssh, &sensitive_data, host, (struct sockaddr *)&hostaddr,"
    },
    {
        "line": 1120,
        "fullcodeline": "exit_status = ssh_session2(ssh, cinfo);"
    },
    {
        "line": 1121,
        "fullcodeline": "ssh_conn_info_free(cinfo);"
    },
    {
        "line": 1122,
        "fullcodeline": "ssh_packet_close(ssh);"
    },
    {
        "line": 1128,
        "fullcodeline": "ssh_kill_proxy_command();"
    },
    {
        "line": 33,
        "fullcodeline": "for (i = 0; i < ac; i++)"
    },
    {
        "line": 34,
        "fullcodeline": "saved_av[i] = xstrdup(av[i]);"
    },
    {
        "line": 44,
        "fullcodeline": "if (!pw) {"
    },
    {
        "line": 70,
        "fullcodeline": "if ((ssh = ssh_alloc_session_state()) == NULL)"
    },
    {
        "line": 81,
        "fullcodeline": "while ((opt = getopt(ac, av, \"1246ab:c:e:fgi:kl:m:no:p:qstvx\""
    },
    {
        "line": 439,
        "fullcodeline": "if (optind > 1 && strcmp(av[optind - 1], \"--\") == 0)"
    },
    {
        "line": 445,
        "fullcodeline": "if (ac > 0 && !host) {"
    },
    {
        "line": 486,
        "fullcodeline": "if (!host)"
    },
    {
        "line": 489,
        "fullcodeline": "if (!valid_hostname(host))"
    },
    {
        "line": 491,
        "fullcodeline": "if (options.user != NULL && !valid_ruser(options.user))"
    },
    {
        "line": 496,
        "fullcodeline": "if ((command = sshbuf_new()) == NULL)"
    },
    {
        "line": 504,
        "fullcodeline": "if (!ac) {"
    },
    {
        "line": 526,
        "fullcodeline": "if (use_syslog && logfile != NULL)"
    },
    {
        "line": 528,
        "fullcodeline": "if (logfile != NULL)"
    },
    {
        "line": 531,
        "fullcodeline": "options.log_level == SYSLOG_LEVEL_NOT_SET ?"
    },
    {
        "line": 533,
        "fullcodeline": "options.log_facility == SYSLOG_FACILITY_NOT_SET ?"
    },
    {
        "line": 535,
        "fullcodeline": "!use_syslog);"
    },
    {
        "line": 549,
        "fullcodeline": "if (options.hostname != NULL) {"
    },
    {
        "line": 560,
        "fullcodeline": "if ((was_addr = is_addr(host)) == 0)"
    },
    {
        "line": 567,
        "fullcodeline": "if (options.canonicalize_hostname != SSH_CANONICALISE_NO || was_addr)"
    },
    {
        "line": 585,
        "fullcodeline": "if (addrs == NULL && config_has_permitted_cnames(&options) && (direct ||"
    },
    {
        "line": 600,
        "fullcodeline": "if (options.canonicalize_hostname != 0 && !want_final_pass) {"
    },
    {
        "line": 621,
        "fullcodeline": "if (fill_default_options(&options) != 0)"
    },
    {
        "line": 624,
        "fullcodeline": "if (options.user == NULL)"
    },
    {
        "line": 630,
        "fullcodeline": "if (options.jump_host != NULL) {"
    },
    {
        "line": 682,
        "fullcodeline": "if (options.port == 0)"
    },
    {
        "line": 687,
        "fullcodeline": "if (options.host_key_alias != NULL)"
    },
    {
        "line": 689,
        "fullcodeline": "if (options.proxy_command != NULL &&"
    },
    {
        "line": 693,
        "fullcodeline": "if (options.update_hostkeys == SSH_UPDATE_HOSTKEYS_ASK) {"
    },
    {
        "line": 709,
        "fullcodeline": "if (options.connection_attempts <= 0)"
    },
    {
        "line": 712,
        "fullcodeline": "if (sshbuf_len(command) != 0 && options.remote_command != NULL)"
    },
    {
        "line": 716,
        "fullcodeline": "if (options.fork_after_authentication && sshbuf_len(command) == 0 &&"
    },
    {
        "line": 724,
        "fullcodeline": "for (j = 0; j < options.num_log_verbose; j++) {"
    },
    {
        "line": 730,
        "fullcodeline": "if (options.request_tty == REQUEST_TTY_YES ||"
    },
    {
        "line": 735,
        "fullcodeline": "if (sshbuf_len(command) == 0 && options.remote_command == NULL)"
    },
    {
        "line": 739,
        "fullcodeline": "if (options.request_tty == REQUEST_TTY_NO ||"
    },
    {
        "line": 744,
        "fullcodeline": "if ((!isatty(fileno(stdin)) || options.stdin_null) &&"
    },
    {
        "line": 754,
        "fullcodeline": "if (gethostname(thishost, sizeof(thishost)) == -1)"
    },
    {
        "line": 761,
        "fullcodeline": "(unsigned long long)pw->pw_uid);"
    },
    {
        "line": 779,
        "fullcodeline": "if (options.remote_command != NULL) {"
    },
    {
        "line": 791,
        "fullcodeline": "if (options.control_path != NULL) {"
    },
    {
        "line": 799,
        "fullcodeline": "if (options.identity_agent != NULL) {"
    },
    {
        "line": 807,
        "fullcodeline": "if (options.revoked_host_keys != NULL) {"
    },
    {
        "line": 815,
        "fullcodeline": "if (options.forward_agent_sock_path != NULL) {"
    },
    {
        "line": 830,
        "fullcodeline": "if (options.num_system_hostfiles > 0 &&"
    },
    {
        "line": 840,
        "fullcodeline": "if (options.num_user_hostfiles > 0 &&"
    },
    {
        "line": 849,
        "fullcodeline": "for (j = 0; j < options.num_user_hostfiles; j++) {"
    },
    {
        "line": 862,
        "fullcodeline": "for (i = 0; i < options.num_local_forwards; i++) {"
    },
    {
        "line": 883,
        "fullcodeline": "for (i = 0; i < options.num_remote_forwards; i++) {"
    },
    {
        "line": 910,
        "fullcodeline": "if (options.sk_provider != NULL && *options.sk_provider == '$' &&"
    },
    {
        "line": 925,
        "fullcodeline": "if (muxclient_command != 0 && options.control_path == NULL)"
    },
    {
        "line": 927,
        "fullcodeline": "if (options.control_path != NULL) {"
    },
    {
        "line": 940,
        "fullcodeline": "if (addrs == NULL && options.proxy_command == NULL) {"
    },
    {
        "line": 947,
        "fullcodeline": "if (options.connection_timeout >= INT_MAX/1000)"
    },
    {
        "line": 954,
        "fullcodeline": "for (j = 0; j < options.num_channel_timeouts; j++) {"
    },
    {
        "line": 967,
        "fullcodeline": "if (ssh_connect(ssh, host, options.host_arg, addrs, &hostaddr,"
    },
    {
        "line": 972,
        "fullcodeline": "if (addrs != NULL)"
    },
    {
        "line": 978,
        "fullcodeline": "if (timeout_ms > 0)"
    },
    {
        "line": 1040,
        "fullcodeline": "if (options.identity_agent &&"
    },
    {
        "line": 1063,
        "fullcodeline": "if (options.forward_agent && options.forward_agent_sock_path != NULL) {"
    },
    {
        "line": 1091,
        "fullcodeline": "if (sensitive_data.nkeys != 0) {"
    },
    {
        "line": 1102,
        "fullcodeline": "for (i = 0; i < options.num_identity_files; i++) {"
    },
    {
        "line": 1110,
        "fullcodeline": "for (i = 0; i < options.num_certificate_files; i++) {"
    },
    {
        "line": 1124,
        "fullcodeline": "if (options.control_path != NULL && muxserver_sock != -1)"
    },
    {
        "line": 45,
        "fullcodeline": "logit(\"No user exists for uid %lu\", (u_long)getuid());"
    },
    {
        "line": 46,
        "fullcodeline": "exit(255);"
    },
    {
        "line": 71,
        "fullcodeline": "fatal(\"Couldn't allocate session state\");"
    },
    {
        "line": 82,
        "fullcodeline": "\"AB:CD:E:F:GI:J:KL:MNO:P:Q:R:S:TVw:W:XYy\")) != -1) { /* HUZdhjruz */"
    },
    {
        "line": 440,
        "fullcodeline": "opt_terminated = 1;"
    },
    {
        "line": 482,
        "fullcodeline": "ac--, av++;"
    },
    {
        "line": 487,
        "fullcodeline": "usage();"
    },
    {
        "line": 490,
        "fullcodeline": "fatal(\"hostname contains invalid characters\");"
    },
    {
        "line": 492,
        "fullcodeline": "fatal(\"remote username contains invalid characters\");"
    },
    {
        "line": 497,
        "fullcodeline": "fatal(\"sshbuf_new failed\");"
    },
    {
        "line": 527,
        "fullcodeline": "fatal(\"Can't specify both -y and -E\");"
    },
    {
        "line": 529,
        "fullcodeline": "log_redirect_stderr_to(logfile);"
    },
    {
        "line": 538,
        "fullcodeline": "logit(\"%s, %s\", SSH_RELEASE, SSH_OPENSSL_VERSION);"
    },
    {
        "line": 543,
        "fullcodeline": "debug(\"configuration requests final Match pass\");"
    },
    {
        "line": 551,
        "fullcodeline": "cp = percent_expand(options.hostname,"
    },
    {
        "line": 553,
        "fullcodeline": "free(host);"
    },
    {
        "line": 554,
        "fullcodeline": "host = cp;"
    },
    {
        "line": 555,
        "fullcodeline": "free(options.hostname);"
    },
    {
        "line": 556,
        "fullcodeline": "options.hostname = xstrdup(host);"
    },
    {
        "line": 561,
        "fullcodeline": "lowercase(host);"
    },
    {
        "line": 568,
        "fullcodeline": "addrs = resolve_canonicalize(&host, options.port);"
    },
    {
        "line": 584,
        "fullcodeline": "option_clear_or_none(options.jump_host);"
    },
    {
        "line": 601,
        "fullcodeline": "debug(\"hostname canonicalisation enabled, \""
    },
    {
        "line": 603,
        "fullcodeline": "want_final_pass = 1;"
    },
    {
        "line": 607,
        "fullcodeline": "debug(\"re-parsing configuration\");"
    },
    {
        "line": 608,
        "fullcodeline": "free(options.hostname);"
    },
    {
        "line": 609,
        "fullcodeline": "options.hostname = xstrdup(host);"
    },
    {
        "line": 610,
        "fullcodeline": "process_config_files(options.host_arg, pw, 1, NULL);"
    },
    {
        "line": 622,
        "fullcodeline": "cleanup_exit(255);"
    },
    {
        "line": 625,
        "fullcodeline": "options.user = xstrdup(pw->pw_name);"
    },
    {
        "line": 631,
        "fullcodeline": "char port_s[8];"
    },
    {
        "line": 632,
        "fullcodeline": "const char *jumpuser = options.jump_user, *sshbin = argv0;"
    },
    {
        "line": 633,
        "fullcodeline": "int port = options.port, jumpport = options.jump_port;"
    },
    {
        "line": 656,
        "fullcodeline": "options.proxy_use_fdpass = 0;"
    },
    {
        "line": 657,
        "fullcodeline": "snprintf(port_s, sizeof(port_s), \"%d\", options.jump_port);"
    },
    {
        "line": 658,
        "fullcodeline": "xasprintf(&options.proxy_command,"
    },
    {
        "line": 678,
        "fullcodeline": "debug(\"Setting implicit ProxyCommand from ProxyJump: %s\","
    },
    {
        "line": 683,
        "fullcodeline": "options.port = default_ssh_port();"
    },
    {
        "line": 688,
        "fullcodeline": "lowercase(options.host_key_alias);"
    },
    {
        "line": 692,
        "fullcodeline": "fatal(\"ProxyCommand=- and ProxyUseFDPass are incompatible\");"
    },
    {
        "line": 710,
        "fullcodeline": "fatal(\"Invalid number of ConnectionAttempts\");"
    },
    {
        "line": 713,
        "fullcodeline": "fatal(\"Cannot execute command-line and remote command.\");"
    },
    {
        "line": 718,
        "fullcodeline": "options.session_type != SESSION_TYPE_NONE)"
    },
    {
        "line": 719,
        "fullcodeline": "fatal(\"Cannot fork into background without a command \""
    },
    {
        "line": 727,
        "fullcodeline": "log_verbose_add(options.log_verbose[j]);"
    },
    {
        "line": 731,
        "fullcodeline": "options.request_tty == REQUEST_TTY_FORCE)"
    },
    {
        "line": 732,
        "fullcodeline": "tty_flag = 1;"
    },
    {
        "line": 736,
        "fullcodeline": "tty_flag = options.request_tty != REQUEST_TTY_NO;"
    },
    {
        "line": 741,
        "fullcodeline": "options.session_type == SESSION_TYPE_NONE)"
    },
    {
        "line": 742,
        "fullcodeline": "tty_flag = 0;"
    },
    {
        "line": 745,
        "fullcodeline": "options.request_tty != REQUEST_TTY_FORCE) {"
    },
    {
        "line": 749,
        "fullcodeline": "tty_flag = 0;"
    },
    {
        "line": 755,
        "fullcodeline": "fatal(\"gethostname: %s\", strerror(errno));"
    },
    {
        "line": 780,
        "fullcodeline": "debug3(\"expanding RemoteCommand: %s\", options.remote_command);"
    },
    {
        "line": 781,
        "fullcodeline": "cp = options.remote_command;"
    },
    {
        "line": 782,
        "fullcodeline": "options.remote_command = default_client_percent_expand(cp,"
    },
    {
        "line": 784,
        "fullcodeline": "debug3(\"expanded RemoteCommand: %s\", options.remote_command);"
    },
    {
        "line": 785,
        "fullcodeline": "free(cp);"
    },
    {
        "line": 792,
        "fullcodeline": "cp = tilde_expand_filename(options.control_path, getuid());"
    },
    {
        "line": 793,
        "fullcodeline": "free(options.control_path);"
    },
    {
        "line": 794,
        "fullcodeline": "options.control_path = default_client_percent_dollar_expand(cp,"
    },
    {
        "line": 796,
        "fullcodeline": "free(cp);"
    },
    {
        "line": 800,
        "fullcodeline": "p = tilde_expand_filename(options.identity_agent, getuid());"
    },
    {
        "line": 801,
        "fullcodeline": "cp = default_client_percent_dollar_expand(p, cinfo);"
    },
    {
        "line": 802,
        "fullcodeline": "free(p);"
    },
    {
        "line": 803,
        "fullcodeline": "free(options.identity_agent);"
    },
    {
        "line": 804,
        "fullcodeline": "options.identity_agent = cp;"
    },
    {
        "line": 808,
        "fullcodeline": "p = tilde_expand_filename(options.revoked_host_keys, getuid());"
    },
    {
        "line": 809,
        "fullcodeline": "cp = default_client_percent_dollar_expand(p, cinfo);"
    },
    {
        "line": 810,
        "fullcodeline": "free(p);"
    },
    {
        "line": 811,
        "fullcodeline": "free(options.revoked_host_keys);"
    },
    {
        "line": 812,
        "fullcodeline": "options.revoked_host_keys = cp;"
    },
    {
        "line": 816,
        "fullcodeline": "p = tilde_expand_filename(options.forward_agent_sock_path,"
    },
    {
        "line": 818,
        "fullcodeline": "cp = default_client_percent_dollar_expand(p, cinfo);"
    },
    {
        "line": 819,
        "fullcodeline": "free(p);"
    },
    {
        "line": 820,
        "fullcodeline": "free(options.forward_agent_sock_path);"
    },
    {
        "line": 821,
        "fullcodeline": "options.forward_agent_sock_path = cp;"
    },
    {
        "line": 831,
        "fullcodeline": "strcasecmp(options.system_hostfiles[0], \"none\") == 0) {"
    },
    {
        "line": 835,
        "fullcodeline": "free(options.system_hostfiles[0]);"
    },
    {
        "line": 836,
        "fullcodeline": "options.system_hostfiles[0] = NULL;"
    },
    {
        "line": 837,
        "fullcodeline": "options.num_system_hostfiles = 0;"
    },
    {
        "line": 841,
        "fullcodeline": "strcasecmp(options.user_hostfiles[0], \"none\") == 0) {"
    },
    {
        "line": 845,
        "fullcodeline": "free(options.user_hostfiles[0]);"
    },
    {
        "line": 846,
        "fullcodeline": "options.user_hostfiles[0] = NULL;"
    },
    {
        "line": 847,
        "fullcodeline": "options.num_user_hostfiles = 0;"
    },
    {
        "line": 852,
        "fullcodeline": "cp = tilde_expand_filename(options.user_hostfiles[j], getuid());"
    },
    {
        "line": 853,
        "fullcodeline": "p = default_client_percent_dollar_expand(cp, cinfo);"
    },
    {
        "line": 857,
        "fullcodeline": "free(options.user_hostfiles[j]);"
    },
    {
        "line": 858,
        "fullcodeline": "free(cp);"
    },
    {
        "line": 859,
        "fullcodeline": "options.user_hostfiles[j] = p;"
    },
    {
        "line": 905,
        "fullcodeline": "dump_client_config(&options, host);"
    },
    {
        "line": 906,
        "fullcodeline": "exit(0);"
    },
    {
        "line": 911,
        "fullcodeline": "strlen(options.sk_provider) > 1) {"
    },
    {
        "line": 926,
        "fullcodeline": "fatal(\"No ControlPath specified for \\\"-O\\\" command\");"
    },
    {
        "line": 941,
        "fullcodeline": "debug2(\"resolving \\\"%s\\\" port %d\", host, options.port);"
    },
    {
        "line": 948,
        "fullcodeline": "timeout_ms = INT_MAX;"
    },
    {
        "line": 955,
        "fullcodeline": "debug3(\"applying channel timeout %s\","
    },
    {
        "line": 962,
        "fullcodeline": "channel_add_timeout(ssh, cp, i);"
    },
    {
        "line": 963,
        "fullcodeline": "free(cp);"
    },
    {
        "line": 970,
        "fullcodeline": "exit(255);"
    },
    {
        "line": 973,
        "fullcodeline": "freeaddrinfo(addrs);"
    },
    {
        "line": 979,
        "fullcodeline": "debug3(\"timeout: %d ms remain after connect\", timeout_ms);"
    },
    {
        "line": 989,
        "fullcodeline": "int loaded = 0;"
    },
    {
        "line": 991,
        "fullcodeline": "sensitive_data.nkeys = 10;"
    },
    {
        "line": 992,
        "fullcodeline": "sensitive_data.keys = xcalloc(sensitive_data.nkeys,"
    },
    {
        "line": 1041,
        "fullcodeline": "strcmp(options.identity_agent, SSH_AUTHSOCKET_ENV_NAME) != 0) {"
    },
    {
        "line": 1064,
        "fullcodeline": "cp = options.forward_agent_sock_path;"
    },
    {
        "line": 1100,
        "fullcodeline": "free(sensitive_data.keys);"
    },
    {
        "line": 1103,
        "fullcodeline": "free(options.identity_files[i]);"
    },
    {
        "line": 1104,
        "fullcodeline": "options.identity_files[i] = NULL;"
    },
    {
        "line": 1111,
        "fullcodeline": "free(options.certificate_files[i]);"
    },
    {
        "line": 1112,
        "fullcodeline": "options.certificate_files[i] = NULL;"
    },
    {
        "line": 1125,
        "fullcodeline": "unlink(options.control_path);"
    },
    {
        "line": 448,
        "fullcodeline": "switch (parse_ssh_uri(*av, &tuser, &host, &tport)) {"
    },
    {
        "line": 478,
        "fullcodeline": "if (ac > 1 && !opt_terminated) {"
    },
    {
        "line": 506,
        "fullcodeline": "if (options.session_type == SESSION_TYPE_SUBSYSTEM) {"
    },
    {
        "line": 586,
        "fullcodeline": "options.canonicalize_hostname == SSH_CANONICALISE_ALWAYS)) {"
    },
    {
        "line": 587,
        "fullcodeline": "if ((addrs = resolve_host(host, options.port,"
    },
    {
        "line": 616,
        "fullcodeline": "if (addrs != NULL && options.port > 0)"
    },
    {
        "line": 635,
        "fullcodeline": "if (port <= 0)"
    },
    {
        "line": 637,
        "fullcodeline": "if (jumpport <= 0)"
    },
    {
        "line": 639,
        "fullcodeline": "if (jumpuser == NULL)"
    },
    {
        "line": 641,
        "fullcodeline": "if (strcmp(options.jump_host, host) == 0 && port == jumpport &&"
    },
    {
        "line": 649,
        "fullcodeline": "if (strchr(argv0, '/') != NULL && access(argv0, X_OK) != 0)"
    },
    {
        "line": 653,
        "fullcodeline": "if (options.proxy_command != NULL)"
    },
    {
        "line": 662,
        "fullcodeline": "options.jump_user == NULL ? \"\" : \" -l \","
    },
    {
        "line": 663,
        "fullcodeline": "options.jump_user == NULL ? \"\" : options.jump_user,"
    },
    {
        "line": 665,
        "fullcodeline": "options.jump_port <= 0 ? \"\" : \" -p \","
    },
    {
        "line": 666,
        "fullcodeline": "options.jump_port <= 0 ? \"\" : port_s,"
    },
    {
        "line": 668,
        "fullcodeline": "options.jump_extra == NULL ? \"\" : \" -J \","
    },
    {
        "line": 669,
        "fullcodeline": "options.jump_extra == NULL ? \"\" : options.jump_extra,"
    },
    {
        "line": 671,
        "fullcodeline": "config == NULL ? \"\" : \" -F \","
    },
    {
        "line": 672,
        "fullcodeline": "config == NULL ? \"\" : config,"
    },
    {
        "line": 674,
        "fullcodeline": "debug_flag ? \" -\" : \"\","
    },
    {
        "line": 690,
        "fullcodeline": "strcmp(options.proxy_command, \"-\") == 0 &&"
    },
    {
        "line": 694,
        "fullcodeline": "if (options.control_persist && options.control_path != NULL) {"
    },
    {
        "line": 717,
        "fullcodeline": "options.remote_command == NULL &&"
    },
    {
        "line": 725,
        "fullcodeline": "if (strcasecmp(options.log_verbose[j], \"none\") == 0)"
    },
    {
        "line": 740,
        "fullcodeline": "(muxclient_command && muxclient_command != SSHMUX_COMMAND_PROXY) ||"
    },
    {
        "line": 786,
        "fullcodeline": "if ((r = sshbuf_put(command, options.remote_command,"
    },
    {
        "line": 822,
        "fullcodeline": "if (stat(options.forward_agent_sock_path, &st) != 0) {"
    },
    {
        "line": 832,
        "fullcodeline": "if (options.num_system_hostfiles > 1)"
    },
    {
        "line": 842,
        "fullcodeline": "if (options.num_user_hostfiles > 1)"
    },
    {
        "line": 850,
        "fullcodeline": "if (options.user_hostfiles[j] == NULL)"
    },
    {
        "line": 854,
        "fullcodeline": "if (strcmp(options.user_hostfiles[j], p) != 0)"
    },
    {
        "line": 863,
        "fullcodeline": "if (options.local_forwards[i].listen_path != NULL) {"
    },
    {
        "line": 872,
        "fullcodeline": "if (options.local_forwards[i].connect_path != NULL) {"
    },
    {
        "line": 884,
        "fullcodeline": "if (options.remote_forwards[i].listen_path != NULL) {"
    },
    {
        "line": 893,
        "fullcodeline": "if (options.remote_forwards[i].connect_path != NULL) {"
    },
    {
        "line": 912,
        "fullcodeline": "if ((cp = getenv(options.sk_provider + 1)) == NULL) {"
    },
    {
        "line": 929,
        "fullcodeline": "if ((sock = muxclient(options.control_path)) >= 0) {"
    },
    {
        "line": 942,
        "fullcodeline": "if ((addrs = resolve_host(host, options.port, 1,"
    },
    {
        "line": 950,
        "fullcodeline": "timeout_ms = options.connection_timeout * 1000;"
    },
    {
        "line": 957,
        "fullcodeline": "if (parse_pattern_interval(options.channel_timeouts[j],"
    },
    {
        "line": 1019,
        "fullcodeline": "if (options.hostbased_authentication == 1) {"
    },
    {
        "line": 1042,
        "fullcodeline": "if (strcmp(options.identity_agent, \"none\") == 0) {"
    },
    {
        "line": 1065,
        "fullcodeline": "if (cp[0] == '$') {"
    },
    {
        "line": 1092,
        "fullcodeline": "for (i = 0; i < sensitive_data.nkeys; i++) {"
    },
    {
        "line": 85,
        "fullcodeline": "fatal(\"SSH protocol v.1 is no longer supported\");"
    },
    {
        "line": 91,
        "fullcodeline": "options.address_family = AF_INET;"
    },
    {
        "line": 94,
        "fullcodeline": "options.address_family = AF_INET6;"
    },
    {
        "line": 97,
        "fullcodeline": "options.stdin_null = 1;"
    },
    {
        "line": 100,
        "fullcodeline": "options.fork_after_authentication = 1;"
    },
    {
        "line": 101,
        "fullcodeline": "options.stdin_null = 1;"
    },
    {
        "line": 104,
        "fullcodeline": "options.forward_x11 = 0;"
    },
    {
        "line": 107,
        "fullcodeline": "options.forward_x11 = 1;"
    },
    {
        "line": 110,
        "fullcodeline": "use_syslog = 1;"
    },
    {
        "line": 113,
        "fullcodeline": "logfile = optarg;"
    },
    {
        "line": 116,
        "fullcodeline": "config_test = 1;"
    },
    {
        "line": 119,
        "fullcodeline": "options.forward_x11 = 1;"
    },
    {
        "line": 120,
        "fullcodeline": "options.forward_x11_trusted = 1;"
    },
    {
        "line": 123,
        "fullcodeline": "options.fwd_opts.gateway_ports = 1;"
    },
    {
        "line": 151,
        "fullcodeline": "cp = NULL;"
    },
    {
        "line": 198,
        "fullcodeline": "printf(\"%s\\n\", cp);"
    },
    {
        "line": 199,
        "fullcodeline": "free(cp);"
    },
    {
        "line": 200,
        "fullcodeline": "exit(0);"
    },
    {
        "line": 203,
        "fullcodeline": "options.forward_agent = 0;"
    },
    {
        "line": 206,
        "fullcodeline": "options.forward_agent = 1;"
    },
    {
        "line": 209,
        "fullcodeline": "options.gss_deleg_creds = 0;"
    },
    {
        "line": 212,
        "fullcodeline": "options.gss_authentication = 1;"
    },
    {
        "line": 213,
        "fullcodeline": "options.gss_deleg_creds = 1;"
    },
    {
        "line": 216,
        "fullcodeline": "p = tilde_expand_filename(optarg, getuid());"
    },
    {
        "line": 223,
        "fullcodeline": "free(p);"
    },
    {
        "line": 230,
        "fullcodeline": "fprintf(stderr, \"no support for PKCS#11.\\n\");"
    },
    {
        "line": 243,
        "fullcodeline": "options.proxy_command = xstrdup(\"none\");"
    },
    {
        "line": 263,
        "fullcodeline": "fprintf(stderr, \"%s, %s\\n\","
    },
    {
        "line": 265,
        "fullcodeline": "exit(0);"
    },
    {
        "line": 270,
        "fullcodeline": "options.tun_local = a2tun(optarg, &options.tun_remote);"
    },
    {
        "line": 294,
        "fullcodeline": "options.request_tty = REQUEST_TTY_NO;"
    },
    {
        "line": 295,
        "fullcodeline": "options.session_type = SESSION_TYPE_NONE;"
    },
    {
        "line": 298,
        "fullcodeline": "options.log_level = SYSLOG_LEVEL_QUIET;"
    },
    {
        "line": 322,
        "fullcodeline": "free(options.ciphers);"
    },
    {
        "line": 323,
        "fullcodeline": "options.ciphers = xstrdup(optarg);"
    },
    {
        "line": 394,
        "fullcodeline": "error(\"Compression not supported, disabling.\");"
    },
    {
        "line": 401,
        "fullcodeline": "options.session_type = SESSION_TYPE_NONE;"
    },
    {
        "line": 402,
        "fullcodeline": "options.request_tty = REQUEST_TTY_NO;"
    },
    {
        "line": 405,
        "fullcodeline": "options.request_tty = REQUEST_TTY_NO;"
    },
    {
        "line": 408,
        "fullcodeline": "line = xstrdup(optarg);"
    },
    {
        "line": 413,
        "fullcodeline": "free(line);"
    },
    {
        "line": 419,
        "fullcodeline": "options.session_type = SESSION_TYPE_SUBSYSTEM;"
    },
    {
        "line": 422,
        "fullcodeline": "free(options.control_path);"
    },
    {
        "line": 423,
        "fullcodeline": "options.control_path = xstrdup(optarg);"
    },
    {
        "line": 426,
        "fullcodeline": "options.bind_address = optarg;"
    },
    {
        "line": 429,
        "fullcodeline": "options.bind_interface = optarg;"
    },
    {
        "line": 432,
        "fullcodeline": "config = optarg;"
    },
    {
        "line": 435,
        "fullcodeline": "usage();"
    },
    {
        "line": 449,
        "fullcodeline": "case -1:"
    },
    {
        "line": 450,
        "fullcodeline": "usage();"
    },
    {
        "line": 457,
        "fullcodeline": "free(tuser);"
    },
    {
        "line": 462,
        "fullcodeline": "p = xstrdup(*av);"
    },
    {
        "line": 463,
        "fullcodeline": "cp = strrchr(p, '@');"
    },
    {
        "line": 479,
        "fullcodeline": "optind = optreset = 1;"
    },
    {
        "line": 507,
        "fullcodeline": "fprintf(stderr,"
    },
    {
        "line": 509,
        "fullcodeline": "usage();"
    },
    {
        "line": 513,
        "fullcodeline": "for (i = 0; i < ac; i++) {"
    },
    {
        "line": 552,
        "fullcodeline": "\"h\", host, (char *)NULL);"
    },
    {
        "line": 617,
        "fullcodeline": "set_addrinfo_port(addrs, options.port);"
    },
    {
        "line": 636,
        "fullcodeline": "port = default_ssh_port();"
    },
    {
        "line": 638,
        "fullcodeline": "jumpport = default_ssh_port();"
    },
    {
        "line": 640,
        "fullcodeline": "jumpuser = options.user;"
    },
    {
        "line": 642,
        "fullcodeline": "strcmp(options.user, jumpuser) == 0)"
    },
    {
        "line": 643,
        "fullcodeline": "fatal(\"jumphost loop via %s\", options.jump_host);"
    },
    {
        "line": 650,
        "fullcodeline": "sshbin = \"ssh\";"
    },
    {
        "line": 654,
        "fullcodeline": "fatal(\"inconsistent options: ProxyCommand+ProxyJump\");"
    },
    {
        "line": 695,
        "fullcodeline": "debug(\"UpdateHostKeys=ask is incompatible with \""
    },
    {
        "line": 697,
        "fullcodeline": "options.update_hostkeys = 0;"
    },
    {
        "line": 747,
        "fullcodeline": "logit(\"Pseudo-terminal will not be allocated because \""
    },
    {
        "line": 788,
        "fullcodeline": "fatal_fr(r, \"buffer error\");"
    },
    {
        "line": 823,
        "fullcodeline": "error(\"Cannot forward agent socket path \\\"%s\\\": %s\","
    },
    {
        "line": 833,
        "fullcodeline": "fatal(\"Invalid GlobalKnownHostsFiles: \\\"none\\\" \""
    },
    {
        "line": 843,
        "fullcodeline": "fatal(\"Invalid UserKnownHostsFiles: \\\"none\\\" \""
    },
    {
        "line": 855,
        "fullcodeline": "debug3(\"expanded UserKnownHostsFile '%s' -> \""
    },
    {
        "line": 864,
        "fullcodeline": "cp = options.local_forwards[i].listen_path;"
    },
    {
        "line": 865,
        "fullcodeline": "p = options.local_forwards[i].listen_path ="
    },
    {
        "line": 870,
        "fullcodeline": "free(cp);"
    },
    {
        "line": 873,
        "fullcodeline": "cp = options.local_forwards[i].connect_path;"
    },
    {
        "line": 874,
        "fullcodeline": "p = options.local_forwards[i].connect_path ="
    },
    {
        "line": 879,
        "fullcodeline": "free(cp);"
    },
    {
        "line": 885,
        "fullcodeline": "cp = options.remote_forwards[i].listen_path;"
    },
    {
        "line": 886,
        "fullcodeline": "p = options.remote_forwards[i].listen_path ="
    },
    {
        "line": 891,
        "fullcodeline": "free(cp);"
    },
    {
        "line": 894,
        "fullcodeline": "cp = options.remote_forwards[i].connect_path;"
    },
    {
        "line": 895,
        "fullcodeline": "p = options.remote_forwards[i].connect_path ="
    },
    {
        "line": 900,
        "fullcodeline": "free(cp);"
    },
    {
        "line": 913,
        "fullcodeline": "debug(\"Authenticator provider %s did not resolve; \""
    },
    {
        "line": 915,
        "fullcodeline": "free(options.sk_provider);"
    },
    {
        "line": 916,
        "fullcodeline": "options.sk_provider = NULL;"
    },
    {
        "line": 930,
        "fullcodeline": "ssh_packet_set_connection(ssh, sock, sock);"
    },
    {
        "line": 931,
        "fullcodeline": "ssh_packet_set_mux(ssh);"
    },
    {
        "line": 944,
        "fullcodeline": "cleanup_exit(255); /* resolve_host logs the error */"
    },
    {
        "line": 959,
        "fullcodeline": "fatal_f(\"internal error: bad timeout %s\","
    },
    {
        "line": 1020,
        "fullcodeline": "L_CERT(_PATH_HOST_ECDSA_KEY_FILE, 0);"
    },
    {
        "line": 1021,
        "fullcodeline": "L_CERT(_PATH_HOST_ED25519_KEY_FILE, 1);"
    },
    {
        "line": 1022,
        "fullcodeline": "L_CERT(_PATH_HOST_RSA_KEY_FILE, 2);"
    },
    {
        "line": 1023,
        "fullcodeline": "L_CERT(_PATH_HOST_DSA_KEY_FILE, 3);"
    },
    {
        "line": 1024,
        "fullcodeline": "L_PUBKEY(_PATH_HOST_ECDSA_KEY_FILE, 4);"
    },
    {
        "line": 1025,
        "fullcodeline": "L_PUBKEY(_PATH_HOST_ED25519_KEY_FILE, 5);"
    },
    {
        "line": 1026,
        "fullcodeline": "L_PUBKEY(_PATH_HOST_RSA_KEY_FILE, 6);"
    },
    {
        "line": 1027,
        "fullcodeline": "L_PUBKEY(_PATH_HOST_DSA_KEY_FILE, 7);"
    },
    {
        "line": 1028,
        "fullcodeline": "L_CERT(_PATH_HOST_XMSS_KEY_FILE, 8);"
    },
    {
        "line": 1029,
        "fullcodeline": "L_PUBKEY(_PATH_HOST_XMSS_KEY_FILE, 9);"
    },
    {
        "line": 1043,
        "fullcodeline": "unsetenv(SSH_AUTHSOCKET_ENV_NAME);"
    },
    {
        "line": 1073,
        "fullcodeline": "free(cp);"
    },
    {
        "line": 1106,
        "fullcodeline": "sshkey_free(options.identity_keys[i]);"
    },
    {
        "line": 1107,
        "fullcodeline": "options.identity_keys[i] = NULL;"
    },
    {
        "line": 126,
        "fullcodeline": "if (options.stdio_forward_host != NULL)"
    },
    {
        "line": 131,
        "fullcodeline": "if (strcmp(optarg, \"check\") == 0)"
    },
    {
        "line": 147,
        "fullcodeline": "if (options.tag == NULL)"
    },
    {
        "line": 152,
        "fullcodeline": "if (strcmp(optarg, \"cipher\") == 0 ||"
    },
    {
        "line": 196,
        "fullcodeline": "if (cp == NULL)"
    },
    {
        "line": 217,
        "fullcodeline": "if (stat(p, &st) == -1)"
    },
    {
        "line": 234,
        "fullcodeline": "if (options.jump_host != NULL) {"
    },
    {
        "line": 239,
        "fullcodeline": "if (options.proxy_command != NULL)"
    },
    {
        "line": 241,
        "fullcodeline": "if (parse_jump(optarg, &options, 1) == -1)"
    },
    {
        "line": 246,
        "fullcodeline": "if (options.request_tty == REQUEST_TTY_YES)"
    },
    {
        "line": 252,
        "fullcodeline": "if (debug_flag == 0) {"
    },
    {
        "line": 268,
        "fullcodeline": "if (options.tun_open == -1)"
    },
    {
        "line": 271,
        "fullcodeline": "if (options.tun_local == SSH_TUNID_ERR) {"
    },
    {
        "line": 278,
        "fullcodeline": "if (options.stdio_forward_host != NULL)"
    },
    {
        "line": 280,
        "fullcodeline": "if (muxclient_command != 0)"
    },
    {
        "line": 282,
        "fullcodeline": "if (parse_forward(&fwd, optarg, 1, 0)) {"
    },
    {
        "line": 301,
        "fullcodeline": "if (optarg[0] == '^' && optarg[2] == 0 &&"
    },
    {
        "line": 316,
        "fullcodeline": "if (!ciphers_valid(*optarg == '+' || *optarg == '^' ?"
    },
    {
        "line": 326,
        "fullcodeline": "if (mac_valid(optarg)) {"
    },
    {
        "line": 336,
        "fullcodeline": "if (options.control_master == SSHCTL_MASTER_YES)"
    },
    {
        "line": 342,
        "fullcodeline": "if (options.port == -1) {"
    },
    {
        "line": 352,
        "fullcodeline": "if (options.user == NULL)"
    },
    {
        "line": 357,
        "fullcodeline": "if (parse_forward(&fwd, optarg, 0, 0))"
    },
    {
        "line": 368,
        "fullcodeline": "if (parse_forward(&fwd, optarg, 0, 1) ||"
    },
    {
        "line": 380,
        "fullcodeline": "if (parse_forward(&fwd, optarg, 1, 0)) {"
    },
    {
        "line": 398,
        "fullcodeline": "if (options.session_type != -1 &&"
    },
    {
        "line": 409,
        "fullcodeline": "if (process_config_line(&options, pw,"
    },
    {
        "line": 416,
        "fullcodeline": "if (options.session_type != -1 &&"
    },
    {
        "line": 453,
        "fullcodeline": "if (options.user == NULL) {"
    },
    {
        "line": 458,
        "fullcodeline": "if (options.port == -1 && tport != -1)"
    },
    {
        "line": 464,
        "fullcodeline": "if (cp != NULL) {"
    },
    {
        "line": 593,
        "fullcodeline": "check_follow_cname(direct, &host, cname);"
    },
    {
        "line": 824,
        "fullcodeline": "options.forward_agent_sock_path, strerror(errno));"
    },
    {
        "line": 867,
        "fullcodeline": "if (strcmp(cp, p) != 0)"
    },
    {
        "line": 876,
        "fullcodeline": "if (strcmp(cp, p) != 0)"
    },
    {
        "line": 888,
        "fullcodeline": "if (strcmp(cp, p) != 0)"
    },
    {
        "line": 897,
        "fullcodeline": "if (strcmp(cp, p) != 0)"
    },
    {
        "line": 918,
        "fullcodeline": "debug2(\"resolved SecurityKeyProvider %s => %s\","
    },
    {
        "line": 920,
        "fullcodeline": "free(options.sk_provider);"
    },
    {
        "line": 921,
        "fullcodeline": "options.sk_provider = xstrdup(cp);"
    },
    {
        "line": 1030,
        "fullcodeline": "if (loaded == 0)"
    },
    {
        "line": 1045,
        "fullcodeline": "cp = options.identity_agent;"
    },
    {
        "line": 1066,
        "fullcodeline": "if (!valid_env_name(cp + 1)) {"
    },
    {
        "line": 1069,
        "fullcodeline": "if ((p = getenv(cp + 1)) != NULL)"
    },
    {
        "line": 1075,
        "fullcodeline": "forward_agent_sock_path = cp;"
    },
    {
        "line": 1093,
        "fullcodeline": "if (sensitive_data.keys[i] != NULL) {"
    },
    {
        "line": 127,
        "fullcodeline": "fatal(\"Cannot specify multiplexing \""
    },
    {
        "line": 132,
        "fullcodeline": "muxclient_command = SSHMUX_COMMAND_ALIVE_CHECK;"
    },
    {
        "line": 148,
        "fullcodeline": "options.tag = xstrdup(optarg);"
    },
    {
        "line": 153,
        "fullcodeline": "strcasecmp(optarg, \"Ciphers\") == 0)"
    },
    {
        "line": 154,
        "fullcodeline": "cp = cipher_alg_list('\\n', 0);"
    },
    {
        "line": 197,
        "fullcodeline": "fatal(\"Unsupported query \\\"%s\\\"\", optarg);"
    },
    {
        "line": 218,
        "fullcodeline": "fprintf(stderr, \"Warning: Identity file %s \""
    },
    {
        "line": 235,
        "fullcodeline": "fatal(\"Only a single -J option is permitted \""
    },
    {
        "line": 240,
        "fullcodeline": "fatal(\"Cannot specify -J with ProxyCommand\");"
    },
    {
        "line": 242,
        "fullcodeline": "fatal(\"Invalid -J argument\");"
    },
    {
        "line": 247,
        "fullcodeline": "options.request_tty = REQUEST_TTY_FORCE;"
    },
    {
        "line": 253,
        "fullcodeline": "debug_flag = 1;"
    },
    {
        "line": 254,
        "fullcodeline": "options.log_level = SYSLOG_LEVEL_DEBUG1;"
    },
    {
        "line": 269,
        "fullcodeline": "options.tun_open = SSH_TUNMODE_DEFAULT;"
    },
    {
        "line": 272,
        "fullcodeline": "fprintf(stderr,"
    },
    {
        "line": 274,
        "fullcodeline": "exit(255);"
    },
    {
        "line": 279,
        "fullcodeline": "fatal(\"stdio forward already specified\");"
    },
    {
        "line": 281,
        "fullcodeline": "fatal(\"Cannot specify stdio forward with -O\");"
    },
    {
        "line": 286,
        "fullcodeline": "options.stdio_forward_port = fwd.listen_port;"
    },
    {
        "line": 287,
        "fullcodeline": "free(fwd.connect_host);"
    },
    {
        "line": 303,
        "fullcodeline": "(u_char) optarg[1] < 128)"
    },
    {
        "line": 304,
        "fullcodeline": "options.escape_char = (u_char) optarg[1] & 31;"
    },
    {
        "line": 318,
        "fullcodeline": "fprintf(stderr, \"Unknown cipher type '%s'\\n\","
    },
    {
        "line": 320,
        "fullcodeline": "exit(255);"
    },
    {
        "line": 327,
        "fullcodeline": "free(options.macs);"
    },
    {
        "line": 328,
        "fullcodeline": "options.macs = xstrdup(optarg);"
    },
    {
        "line": 337,
        "fullcodeline": "options.control_master = SSHCTL_MASTER_ASK;"
    },
    {
        "line": 343,
        "fullcodeline": "options.port = a2port(optarg);"
    },
    {
        "line": 353,
        "fullcodeline": "options.user = optarg;"
    },
    {
        "line": 358,
        "fullcodeline": "add_local_forward(&options, &fwd);"
    },
    {
        "line": 369,
        "fullcodeline": "parse_forward(&fwd, optarg, 1, 1)) {"
    },
    {
        "line": 370,
        "fullcodeline": "add_remote_forward(&options, &fwd);"
    },
    {
        "line": 381,
        "fullcodeline": "add_local_forward(&options, &fwd);"
    },
    {
        "line": 399,
        "fullcodeline": "options.session_type != SESSION_TYPE_NONE)"
    },
    {
        "line": 400,
        "fullcodeline": "fatal(\"Cannot specify -N with -s/SessionType\");"
    },
    {
        "line": 412,
        "fullcodeline": "exit(255);"
    },
    {
        "line": 417,
        "fullcodeline": "options.session_type != SESSION_TYPE_SUBSYSTEM)"
    },
    {
        "line": 418,
        "fullcodeline": "fatal(\"Cannot specify -s with -N/SessionType\");"
    },
    {
        "line": 454,
        "fullcodeline": "options.user = tuser;"
    },
    {
        "line": 455,
        "fullcodeline": "tuser = NULL;"
    },
    {
        "line": 459,
        "fullcodeline": "options.port = tport;"
    },
    {
        "line": 471,
        "fullcodeline": "*cp++ = '\\0';"
    },
    {
        "line": 472,
        "fullcodeline": "host = xstrdup(cp);"
    },
    {
        "line": 473,
        "fullcodeline": "free(p);"
    },
    {
        "line": 514,
        "fullcodeline": "if ((r = sshbuf_putf(command, \"%s%s\","
    },
    {
        "line": 591,
        "fullcodeline": "cleanup_exit(255); /* logged in resolve_host */"
    },
    {
        "line": 698,
        "fullcodeline": "} else if (sshbuf_len(command) != 0 ||"
    },
    {
        "line": 787,
        "fullcodeline": "strlen(options.remote_command))) != 0)"
    },
    {
        "line": 826,
        "fullcodeline": "cleanup_exit(255);"
    },
    {
        "line": 866,
        "fullcodeline": "default_client_percent_expand(cp, cinfo);"
    },
    {
        "line": 868,
        "fullcodeline": "debug3(\"expanded LocalForward listen path \""
    },
    {
        "line": 875,
        "fullcodeline": "default_client_percent_expand(cp, cinfo);"
    },
    {
        "line": 877,
        "fullcodeline": "debug3(\"expanded LocalForward connect path \""
    },
    {
        "line": 887,
        "fullcodeline": "default_client_percent_expand(cp, cinfo);"
    },
    {
        "line": 889,
        "fullcodeline": "debug3(\"expanded RemoteForward listen path \""
    },
    {
        "line": 896,
        "fullcodeline": "default_client_percent_expand(cp, cinfo);"
    },
    {
        "line": 898,
        "fullcodeline": "debug3(\"expanded RemoteForward connect path \""
    },
    {
        "line": 1031,
        "fullcodeline": "debug(\"HostbasedAuthentication enabled but no \""
    },
    {
        "line": 1047,
        "fullcodeline": "if (cp[0] == '$' && cp[1] != '{') {"
    },
    {
        "line": 1067,
        "fullcodeline": "fatal(\"Invalid ForwardAgent environment variable name %s\", cp);"
    },
    {
        "line": 1070,
        "fullcodeline": "forward_agent_sock_path = xstrdup(p);"
    },
    {
        "line": 1095,
        "fullcodeline": "debug3(\"clear hostkey %d\", i);"
    },
    {
        "line": 1096,
        "fullcodeline": "sshkey_free(sensitive_data.keys[i]);"
    },
    {
        "line": 1097,
        "fullcodeline": "sensitive_data.keys[i] = NULL;"
    },
    {
        "line": 220,
        "fullcodeline": "strerror(errno));"
    },
    {
        "line": 222,
        "fullcodeline": "add_identity_file(&options, NULL, p, 1);"
    },
    {
        "line": 249,
        "fullcodeline": "options.request_tty = REQUEST_TTY_YES;"
    },
    {
        "line": 289,
        "fullcodeline": "fprintf(stderr,"
    },
    {
        "line": 292,
        "fullcodeline": "exit(255);"
    },
    {
        "line": 302,
        "fullcodeline": "(u_char) optarg[1] >= 64 &&"
    },
    {
        "line": 330,
        "fullcodeline": "fprintf(stderr, \"Unknown mac type '%s'\\n\","
    },
    {
        "line": 332,
        "fullcodeline": "exit(255);"
    },
    {
        "line": 339,
        "fullcodeline": "options.control_master = SSHCTL_MASTER_YES;"
    },
    {
        "line": 344,
        "fullcodeline": "if (options.port <= 0) {"
    },
    {
        "line": 360,
        "fullcodeline": "fprintf(stderr,"
    },
    {
        "line": 363,
        "fullcodeline": "exit(255);"
    },
    {
        "line": 372,
        "fullcodeline": "fprintf(stderr,"
    },
    {
        "line": 375,
        "fullcodeline": "exit(255);"
    },
    {
        "line": 383,
        "fullcodeline": "fprintf(stderr,"
    },
    {
        "line": 386,
        "fullcodeline": "exit(255);"
    },
    {
        "line": 410,
        "fullcodeline": "host ? host : \"\", host ? host : \"\", line,"
    },
    {
        "line": 465,
        "fullcodeline": "if (cp == p)"
    },
    {
        "line": 467,
        "fullcodeline": "if (options.user == NULL) {"
    },
    {
        "line": 475,
        "fullcodeline": "host = p;"
    },
    {
        "line": 516,
        "fullcodeline": "fatal_fr(r, \"buffer error\");"
    },
    {
        "line": 700,
        "fullcodeline": "options.request_tty == REQUEST_TTY_NO) {"
    },
    {
        "line": 701,
        "fullcodeline": "debug(\"UpdateHostKeys=ask is incompatible with \""
    },
    {
        "line": 703,
        "fullcodeline": "options.update_hostkeys = 0;"
    },
    {
        "line": 1072,
        "fullcodeline": "options.forward_agent = 0;"
    },
    {
        "line": 129,
        "fullcodeline": "else if (muxclient_command != 0)"
    },
    {
        "line": 133,
        "fullcodeline": "else if (strcmp(optarg, \"forward\") == 0)"
    },
    {
        "line": 155,
        "fullcodeline": "else if (strcmp(optarg, \"cipher-auth\") == 0)"
    },
    {
        "line": 256,
        "fullcodeline": "if (options.log_level < SYSLOG_LEVEL_DEBUG3) {"
    },
    {
        "line": 284,
        "fullcodeline": "fwd.listen_port == PORT_STREAMLOCAL ?"
    },
    {
        "line": 305,
        "fullcodeline": "else if (strlen(optarg) == 1)"
    },
    {
        "line": 317,
        "fullcodeline": "optarg + 1 : optarg)) {"
    },
    {
        "line": 345,
        "fullcodeline": "fprintf(stderr, \"Bad port '%s'\\n\","
    },
    {
        "line": 347,
        "fullcodeline": "exit(255);"
    },
    {
        "line": 466,
        "fullcodeline": "usage();"
    },
    {
        "line": 468,
        "fullcodeline": "options.user = p;"
    },
    {
        "line": 469,
        "fullcodeline": "p = NULL;"
    },
    {
        "line": 699,
        "fullcodeline": "options.remote_command != NULL ||"
    },
    {
        "line": 1048,
        "fullcodeline": "if (!valid_env_name(cp + 1)) {"
    },
    {
        "line": 1052,
        "fullcodeline": "if ((p = getenv(cp + 1)) == NULL)"
    },
    {
        "line": 1058,
        "fullcodeline": "setenv(SSH_AUTHSOCKET_ENV_NAME, cp, 1);"
    },
    {
        "line": 130,
        "fullcodeline": "fatal(\"Multiplexing command already specified\");"
    },
    {
        "line": 134,
        "fullcodeline": "muxclient_command = SSHMUX_COMMAND_FORWARD;"
    },
    {
        "line": 156,
        "fullcodeline": "cp = cipher_alg_list('\\n', 1);"
    },
    {
        "line": 257,
        "fullcodeline": "debug_flag++;"
    },
    {
        "line": 258,
        "fullcodeline": "options.log_level++;"
    },
    {
        "line": 306,
        "fullcodeline": "options.escape_char = (u_char) optarg[0];"
    },
    {
        "line": 515,
        "fullcodeline": "i ? \" \" : \"\", av[i])) != 0)"
    },
    {
        "line": 704,
        "fullcodeline": "} else if (options.log_level < SYSLOG_LEVEL_INFO) {"
    },
    {
        "line": 1049,
        "fullcodeline": "fatal(\"Invalid IdentityAgent \""
    },
    {
        "line": 1053,
        "fullcodeline": "unsetenv(SSH_AUTHSOCKET_ENV_NAME);"
    },
    {
        "line": 706,
        "fullcodeline": "options.update_hostkeys = 0;"
    },
    {
        "line": 1055,
        "fullcodeline": "setenv(SSH_AUTHSOCKET_ENV_NAME, p, 1);"
    },
    {
        "line": 135,
        "fullcodeline": "else if (strcmp(optarg, \"exit\") == 0)"
    },
    {
        "line": 157,
        "fullcodeline": "else if (strcmp(optarg, \"mac\") == 0 ||"
    },
    {
        "line": 307,
        "fullcodeline": "else if (strcmp(optarg, \"none\") == 0)"
    },
    {
        "line": 136,
        "fullcodeline": "muxclient_command = SSHMUX_COMMAND_TERMINATE;"
    },
    {
        "line": 158,
        "fullcodeline": "strcasecmp(optarg, \"MACs\") == 0)"
    },
    {
        "line": 159,
        "fullcodeline": "cp = mac_alg_list('\\n');"
    },
    {
        "line": 308,
        "fullcodeline": "options.escape_char = SSH_ESCAPECHAR_NONE;"
    },
    {
        "line": 310,
        "fullcodeline": "fprintf(stderr, \"Bad escape character '%s'.\\n\","
    },
    {
        "line": 312,
        "fullcodeline": "exit(255);"
    },
    {
        "line": 137,
        "fullcodeline": "else if (strcmp(optarg, \"stop\") == 0)"
    },
    {
        "line": 160,
        "fullcodeline": "else if (strcmp(optarg, \"kex\") == 0 ||"
    },
    {
        "line": 138,
        "fullcodeline": "muxclient_command = SSHMUX_COMMAND_STOP;"
    },
    {
        "line": 161,
        "fullcodeline": "strcasecmp(optarg, \"KexAlgorithms\") == 0)"
    },
    {
        "line": 162,
        "fullcodeline": "cp = kex_alg_list('\\n');"
    },
    {
        "line": 139,
        "fullcodeline": "else if (strcmp(optarg, \"cancel\") == 0)"
    },
    {
        "line": 163,
        "fullcodeline": "else if (strcmp(optarg, \"key\") == 0)"
    },
    {
        "line": 140,
        "fullcodeline": "muxclient_command = SSHMUX_COMMAND_CANCEL_FWD;"
    },
    {
        "line": 164,
        "fullcodeline": "cp = sshkey_alg_list(0, 0, 0, '\\n');"
    },
    {
        "line": 141,
        "fullcodeline": "else if (strcmp(optarg, \"proxy\") == 0)"
    },
    {
        "line": 165,
        "fullcodeline": "else if (strcmp(optarg, \"key-cert\") == 0)"
    },
    {
        "line": 142,
        "fullcodeline": "muxclient_command = SSHMUX_COMMAND_PROXY;"
    },
    {
        "line": 166,
        "fullcodeline": "cp = sshkey_alg_list(1, 0, 0, '\\n');"
    },
    {
        "line": 144,
        "fullcodeline": "fatal(\"Invalid multiplex command.\");"
    },
    {
        "line": 167,
        "fullcodeline": "else if (strcmp(optarg, \"key-plain\") == 0)"
    },
    {
        "line": 168,
        "fullcodeline": "cp = sshkey_alg_list(0, 1, 0, '\\n');"
    },
    {
        "line": 169,
        "fullcodeline": "else if (strcmp(optarg, \"key-ca-sign\") == 0 ||"
    },
    {
        "line": 170,
        "fullcodeline": "strcasecmp(optarg, \"CASignatureAlgorithms\") == 0)"
    },
    {
        "line": 171,
        "fullcodeline": "cp = sshkey_alg_list(0, 1, 1, '\\n');"
    },
    {
        "line": 172,
        "fullcodeline": "else if (strcmp(optarg, \"key-sig\") == 0 ||"
    },
    {
        "line": 178,
        "fullcodeline": "strcasecmp(optarg, \"HostbasedAcceptedAlgorithms\") == 0)"
    },
    {
        "line": 179,
        "fullcodeline": "cp = sshkey_alg_list(0, 0, 1, '\\n');"
    },
    {
        "line": 177,
        "fullcodeline": "strcasecmp(optarg, \"HostbasedAcceptedKeyTypes\") == 0 || /* deprecated name */"
    },
    {
        "line": 176,
        "fullcodeline": "strcasecmp(optarg, \"HostbasedKeyTypes\") == 0 || /* deprecated name */"
    },
    {
        "line": 180,
        "fullcodeline": "else if (strcmp(optarg, \"sig\") == 0)"
    },
    {
        "line": 175,
        "fullcodeline": "strcasecmp(optarg, \"HostKeyAlgorithms\") == 0 ||"
    },
    {
        "line": 181,
        "fullcodeline": "cp = sshkey_alg_list(0, 1, 1, '\\n');"
    },
    {
        "line": 174,
        "fullcodeline": "strcasecmp(optarg, \"PubkeyAcceptedAlgorithms\") == 0 ||"
    },
    {
        "line": 173,
        "fullcodeline": "strcasecmp(optarg, \"PubkeyAcceptedKeyTypes\") == 0 || /* deprecated name */"
    },
    {
        "line": 182,
        "fullcodeline": "else if (strcmp(optarg, \"protocol-version\") == 0)"
    },
    {
        "line": 183,
        "fullcodeline": "cp = xstrdup(\"2\");"
    },
    {
        "line": 184,
        "fullcodeline": "else if (strcmp(optarg, \"compression\") == 0) {"
    },
    {
        "line": 185,
        "fullcodeline": "cp = xstrdup(compression_alg_list(0));"
    },
    {
        "line": 186,
        "fullcodeline": "len = strlen(cp);"
    },
    {
        "line": 187,
        "fullcodeline": "for (n = 0; n < len; n++)"
    },
    {
        "line": 188,
        "fullcodeline": "if (cp[n] == ',')"
    },
    {
        "line": 190,
        "fullcodeline": "} else if (strcmp(optarg, \"help\") == 0) {"
    },
    {
        "line": 189,
        "fullcodeline": "cp[n] = '\\n';"
    },
    {
        "line": 191,
        "fullcodeline": "cp = xstrdup("
    }
]