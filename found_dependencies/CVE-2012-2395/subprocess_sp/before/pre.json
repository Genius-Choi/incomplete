[
    {
        "line": 12,
        "fullcodeline": "rc = sp.returncode"
    },
    {
        "line": 2,
        "fullcodeline": "if logger is not None:"
    },
    {
        "line": 11,
        "fullcodeline": "(out,err) = sp.communicate()"
    },
    {
        "line": 13,
        "fullcodeline": "if logger is not None:"
    },
    {
        "line": 16,
        "fullcodeline": "return out, rc"
    },
    {
        "line": 3,
        "fullcodeline": "logger.info(\"running: %s\" % cmd)"
    },
    {
        "line": 5,
        "fullcodeline": "sp = sub_process.Popen(cmd, shell=shell, stdout=sub_process.PIPE, stderr=sub_process.PIPE, close_fds=True)"
    },
    {
        "line": 14,
        "fullcodeline": "logger.info(\"received on stdout: %s\" % out)"
    },
    {
        "line": 15,
        "fullcodeline": "logger.debug(\"received on stderr: %s\" % err)"
    },
    {
        "line": 9,
        "fullcodeline": "die(logger, \"OS Error, command not found?  While running: %s\" % cmd)"
    },
    {
        "line": 7,
        "fullcodeline": "if logger is not None:"
    },
    {
        "line": 8,
        "fullcodeline": "log_exc(logger)"
    }
]