[
    {
        "line": 13,
        "fullcodeline": "mutex_lock(&adpt_configuration_lock);"
    },
    {
        "line": 17,
        "fullcodeline": "p2 = NULL;"
    },
    {
        "line": 29,
        "fullcodeline": "hba_count--;"
    },
    {
        "line": 30,
        "fullcodeline": "mutex_unlock(&adpt_configuration_lock);"
    },
    {
        "line": 32,
        "fullcodeline": "iounmap(pHba->base_addr_virt);"
    },
    {
        "line": 33,
        "fullcodeline": "pci_release_regions(pHba->pDev);"
    },
    {
        "line": 72,
        "fullcodeline": "pci_dev_put(pHba->pDev);"
    },
    {
        "line": 76,
        "fullcodeline": "kfree(pHba);"
    },
    {
        "line": 18,
        "fullcodeline": "for( p1 = hba_chain; p1; p2 = p1,p1=p1->next){"
    },
    {
        "line": 34,
        "fullcodeline": "if(pHba->msg_addr_virt != pHba->base_addr_virt){"
    },
    {
        "line": 58,
        "fullcodeline": "for(d = pHba->devices; d ; d = next){"
    },
    {
        "line": 62,
        "fullcodeline": "for(i = 0 ; i < pHba->top_scsi_channel ; i++){"
    },
    {
        "line": 78,
        "fullcodeline": "if(hba_count <= 0){"
    },
    {
        "line": 15,
        "fullcodeline": "free_irq(pHba->host->irq, pHba);"
    },
    {
        "line": 35,
        "fullcodeline": "iounmap(pHba->msg_addr_virt);"
    },
    {
        "line": 38,
        "fullcodeline": "iounmap(pHba->FwDebugBuffer_P);"
    },
    {
        "line": 40,
        "fullcodeline": "dma_free_coherent(&pHba->pDev->dev,"
    },
    {
        "line": 45,
        "fullcodeline": "dma_free_coherent(&pHba->pDev->dev, pHba->lct_size,"
    },
    {
        "line": 49,
        "fullcodeline": "dma_free_coherent(&pHba->pDev->dev, sizeof(i2o_status_block),"
    },
    {
        "line": 53,
        "fullcodeline": "dma_free_coherent(&pHba->pDev->dev,"
    },
    {
        "line": 59,
        "fullcodeline": "next = d->next;"
    },
    {
        "line": 60,
        "fullcodeline": "kfree(d);"
    },
    {
        "line": 74,
        "fullcodeline": "device_destroy(adpt_sysfs_class,"
    },
    {
        "line": 79,
        "fullcodeline": "unregister_chrdev(DPTI_I2O_MAJOR, DPT_DRIVER);"
    },
    {
        "line": 19,
        "fullcodeline": "if(p1 == pHba) {"
    },
    {
        "line": 41,
        "fullcodeline": "pHba->hrt->num_entries * pHba->hrt->entry_len << 2,"
    },
    {
        "line": 54,
        "fullcodeline": "pHba->reply_fifo_size * REPLY_FRAME_SIZE * 4,"
    },
    {
        "line": 63,
        "fullcodeline": "for(j = 0; j < MAX_ID; j++){"
    },
    {
        "line": 75,
        "fullcodeline": "MKDEV(DPTI_I2O_MAJOR, pHba->unit));"
    },
    {
        "line": 81,
        "fullcodeline": "class_destroy(adpt_sysfs_class);"
    },
    {
        "line": 82,
        "fullcodeline": "adpt_sysfs_class = NULL;"
    },
    {
        "line": 64,
        "fullcodeline": "if(pHba->channel[i].device[j] != NULL){"
    },
    {
        "line": 21,
        "fullcodeline": "p2->next = p1->next;"
    },
    {
        "line": 23,
        "fullcodeline": "hba_chain = p1->next;"
    },
    {
        "line": 65,
        "fullcodeline": "for(pDev = pHba->channel[i].device[j]; pDev; pDev = pNext){"
    },
    {
        "line": 66,
        "fullcodeline": "pNext = pDev->next_lun;"
    },
    {
        "line": 67,
        "fullcodeline": "kfree(pDev);"
    }
]