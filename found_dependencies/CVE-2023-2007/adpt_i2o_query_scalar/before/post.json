[
    {
        "line": 4,
        "fullcodeline": "u16 opblk[] = { 1, 0, I2O_PARAMS_FIELD_GET, group, 1, field };"
    },
    {
        "line": 13,
        "fullcodeline": "resblk_va = dma_alloc_coherent(&pHba->pDev->dev,"
    },
    {
        "line": 20,
        "fullcodeline": "opblk_va = dma_alloc_coherent(&pHba->pDev->dev,"
    },
    {
        "line": 32,
        "fullcodeline": "memcpy(opblk_va, opblk, sizeof(opblk));"
    },
    {
        "line": 33,
        "fullcodeline": "size = adpt_i2o_issue_params(I2O_CMD_UTIL_PARAMS_GET, pHba, tid,"
    },
    {
        "line": 36,
        "fullcodeline": "dma_free_coherent(&pHba->pDev->dev, sizeof(opblk), opblk_va, opblk_pa);"
    },
    {
        "line": 49,
        "fullcodeline": "memcpy(buf, resblk_va+8, buflen);  /* cut off header */"
    },
    {
        "line": 51,
        "fullcodeline": "dma_free_coherent(&pHba->pDev->dev, sizeof(u8) * (8+buflen),"
    },
    {
        "line": 15,
        "fullcodeline": "if (resblk_va == NULL) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (opblk_va == NULL) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (field == -1)  \t\t/* whole group */"
    },
    {
        "line": 37,
        "fullcodeline": "if (size == -ETIME) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (size < 0)"
    },
    {
        "line": 14,
        "fullcodeline": "sizeof(u8) * (8 + buflen), &resblk_pa, GFP_KERNEL);"
    },
    {
        "line": 23,
        "fullcodeline": "dma_free_coherent(&pHba->pDev->dev, sizeof(u8) * (8+buflen),"
    },
    {
        "line": 30,
        "fullcodeline": "opblk[4] = -1;"
    },
    {
        "line": 35,
        "fullcodeline": "resblk_va, resblk_pa, sizeof(u8)*(8+buflen));"
    },
    {
        "line": 38,
        "fullcodeline": "dma_free_coherent(&pHba->pDev->dev, sizeof(u8) * (8+buflen),"
    },
    {
        "line": 17,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 27,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 41,
        "fullcodeline": "return -ETIME;"
    },
    {
        "line": 42,
        "fullcodeline": "} else if (size == -EINTR) {"
    },
    {
        "line": 43,
        "fullcodeline": "dma_free_coherent(&pHba->pDev->dev, sizeof(u8) * (8+buflen),"
    },
    {
        "line": 46,
        "fullcodeline": "return -EINTR;"
    }
]