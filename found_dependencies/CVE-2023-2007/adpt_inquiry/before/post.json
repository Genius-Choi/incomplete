[
    {
        "line": 3,
        "fullcodeline": "u32 msg[17];"
    },
    {
        "line": 12,
        "fullcodeline": "u8  scb[16];"
    },
    {
        "line": 15,
        "fullcodeline": "memset(msg, 0, sizeof(msg));"
    },
    {
        "line": 16,
        "fullcodeline": "buf = dma_alloc_coherent(&pHba->pDev->dev, 80, &addr, GFP_KERNEL);"
    },
    {
        "line": 21,
        "fullcodeline": "memset((void*)buf, 0, 36);"
    },
    {
        "line": 23,
        "fullcodeline": "len = 36;"
    },
    {
        "line": 24,
        "fullcodeline": "direction = 0x00000000;"
    },
    {
        "line": 25,
        "fullcodeline": "scsidir  =0x40000000;\t// DATA IN  (iop<--dev)"
    },
    {
        "line": 32,
        "fullcodeline": "msg[0] = reqlen<<16 | SGL_OFFSET_12;"
    },
    {
        "line": 33,
        "fullcodeline": "msg[1] = (0xff<<24|HOST_TID<<12|ADAPTER_TID);"
    },
    {
        "line": 34,
        "fullcodeline": "msg[2] = 0;"
    },
    {
        "line": 35,
        "fullcodeline": "msg[3]  = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "msg[4] = I2O_CMD_SCSI_EXEC|DPT_ORGANIZATION_ID<<16;"
    },
    {
        "line": 38,
        "fullcodeline": "msg[5] = ADAPTER_TID | 1<<16 /* Interpret*/;"
    },
    {
        "line": 43,
        "fullcodeline": "msg[6] = scsidir|0x20a00000| 6 /* cmd len*/;"
    },
    {
        "line": 45,
        "fullcodeline": "mptr=msg+7;"
    },
    {
        "line": 47,
        "fullcodeline": "memset(scb, 0, sizeof(scb));"
    },
    {
        "line": 49,
        "fullcodeline": "scb[0] = INQUIRY;"
    },
    {
        "line": 50,
        "fullcodeline": "scb[1] = 0;"
    },
    {
        "line": 51,
        "fullcodeline": "scb[2] = 0;"
    },
    {
        "line": 52,
        "fullcodeline": "scb[3] = 0;"
    },
    {
        "line": 53,
        "fullcodeline": "scb[4] = 36;"
    },
    {
        "line": 54,
        "fullcodeline": "scb[5] = 0;"
    },
    {
        "line": 57,
        "fullcodeline": "memcpy(mptr, scb, sizeof(scb));"
    },
    {
        "line": 58,
        "fullcodeline": "mptr+=4;"
    },
    {
        "line": 59,
        "fullcodeline": "lenptr=mptr++;\t\t/* Remember me - fill in when we know */"
    },
    {
        "line": 62,
        "fullcodeline": "*lenptr = len;"
    },
    {
        "line": 75,
        "fullcodeline": "rcode = adpt_i2o_post_wait(pHba, msg, reqlen<<2, 120);"
    },
    {
        "line": 91,
        "fullcodeline": "adpt_i2o_status_get(pHba);"
    },
    {
        "line": 17,
        "fullcodeline": "if(!buf){"
    },
    {
        "line": 27,
        "fullcodeline": "if (dpt_dma64(pHba))"
    },
    {
        "line": 63,
        "fullcodeline": "if (dpt_dma64(pHba)) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (rcode != 0) {"
    },
    {
        "line": 28,
        "fullcodeline": "reqlen = 17;\t\t// SINGLE SGE, 64 bit"
    },
    {
        "line": 64,
        "fullcodeline": "*mptr++ = (0x7C<<24)+(2<<16)+0x02; /* Enable 64 bit */"
    },
    {
        "line": 65,
        "fullcodeline": "*mptr++ = 1 << PAGE_SHIFT;"
    },
    {
        "line": 66,
        "fullcodeline": "*mptr++ = 0xD0000000|direction|len;"
    },
    {
        "line": 67,
        "fullcodeline": "*mptr++ = dma_low(addr);"
    },
    {
        "line": 68,
        "fullcodeline": "*mptr++ = dma_high(addr);"
    },
    {
        "line": 77,
        "fullcodeline": "sprintf(pHba->detail, \"Adaptec I2O RAID\");"
    },
    {
        "line": 30,
        "fullcodeline": "reqlen = 14;\t\t// SINGLE SGE, 32 bit"
    },
    {
        "line": 70,
        "fullcodeline": "*mptr++ = 0xD0000000|direction|len;"
    },
    {
        "line": 71,
        "fullcodeline": "*mptr++ = addr;"
    },
    {
        "line": 79,
        "fullcodeline": "if (rcode != -ETIME && rcode != -EINTR)"
    },
    {
        "line": 82,
        "fullcodeline": "memset(pHba->detail, 0, sizeof(pHba->detail));"
    },
    {
        "line": 83,
        "fullcodeline": "memcpy(&(pHba->detail), \"Vendor: Adaptec \", 16);"
    },
    {
        "line": 84,
        "fullcodeline": "memcpy(&(pHba->detail[16]), \" Model: \", 8);"
    },
    {
        "line": 85,
        "fullcodeline": "memcpy(&(pHba->detail[24]), (u8*) &buf[16], 16);"
    },
    {
        "line": 86,
        "fullcodeline": "memcpy(&(pHba->detail[40]), \" FW: \", 4);"
    },
    {
        "line": 87,
        "fullcodeline": "memcpy(&(pHba->detail[44]), (u8*) &buf[32], 4);"
    },
    {
        "line": 88,
        "fullcodeline": "pHba->detail[48] = '\\0';\t/* precautionary */"
    },
    {
        "line": 89,
        "fullcodeline": "dma_free_coherent(&pHba->pDev->dev, 80, buf, addr);"
    },
    {
        "line": 80,
        "fullcodeline": "dma_free_coherent(&pHba->pDev->dev, 80, buf, addr);"
    }
]