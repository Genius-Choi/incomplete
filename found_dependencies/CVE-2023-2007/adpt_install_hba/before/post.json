[
    {
        "line": 4,
        "fullcodeline": "adpt_hba* pHba = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "adpt_hba* p = NULL;"
    },
    {
        "line": 6,
        "fullcodeline": "ulong base_addr0_phys = 0;"
    },
    {
        "line": 7,
        "fullcodeline": "ulong base_addr1_phys = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "u32 hba_map0_area_size = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "u32 hba_map1_area_size = 0;"
    },
    {
        "line": 10,
        "fullcodeline": "void __iomem *base_addr_virt = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "void __iomem *msg_addr_virt = NULL;"
    },
    {
        "line": 12,
        "fullcodeline": "int dma64 = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "int raptorFlag = FALSE;"
    },
    {
        "line": 25,
        "fullcodeline": "pci_set_master(pDev);"
    },
    {
        "line": 39,
        "fullcodeline": "dma_set_coherent_mask(&pDev->dev, DMA_BIT_MASK(32));"
    },
    {
        "line": 41,
        "fullcodeline": "base_addr0_phys = pci_resource_start(pDev,0);"
    },
    {
        "line": 42,
        "fullcodeline": "hba_map0_area_size = pci_resource_len(pDev,0);"
    },
    {
        "line": 80,
        "fullcodeline": "base_addr_virt = ioremap(base_addr0_phys,hba_map0_area_size);"
    },
    {
        "line": 100,
        "fullcodeline": "pHba = kzalloc(sizeof(adpt_hba), GFP_KERNEL);"
    },
    {
        "line": 109,
        "fullcodeline": "mutex_lock(&adpt_configuration_lock);"
    },
    {
        "line": 117,
        "fullcodeline": "pHba->next = NULL;"
    },
    {
        "line": 118,
        "fullcodeline": "pHba->unit = hba_count;"
    },
    {
        "line": 119,
        "fullcodeline": "sprintf(pHba->name, \"dpti%d\", hba_count);"
    },
    {
        "line": 120,
        "fullcodeline": "hba_count++;"
    },
    {
        "line": 122,
        "fullcodeline": "mutex_unlock(&adpt_configuration_lock);"
    },
    {
        "line": 124,
        "fullcodeline": "pHba->pDev = pDev;"
    },
    {
        "line": 125,
        "fullcodeline": "pHba->base_addr_phys = base_addr0_phys;"
    },
    {
        "line": 128,
        "fullcodeline": "pHba->base_addr_virt = base_addr_virt;"
    },
    {
        "line": 129,
        "fullcodeline": "pHba->msg_addr_virt = msg_addr_virt;"
    },
    {
        "line": 130,
        "fullcodeline": "pHba->irq_mask = base_addr_virt+0x30;"
    },
    {
        "line": 131,
        "fullcodeline": "pHba->post_port = base_addr_virt+0x40;"
    },
    {
        "line": 132,
        "fullcodeline": "pHba->reply_port = base_addr_virt+0x44;"
    },
    {
        "line": 134,
        "fullcodeline": "pHba->hrt = NULL;"
    },
    {
        "line": 135,
        "fullcodeline": "pHba->lct = NULL;"
    },
    {
        "line": 136,
        "fullcodeline": "pHba->lct_size = 0;"
    },
    {
        "line": 137,
        "fullcodeline": "pHba->status_block = NULL;"
    },
    {
        "line": 138,
        "fullcodeline": "pHba->post_count = 0;"
    },
    {
        "line": 139,
        "fullcodeline": "pHba->state = DPTI_STATE_RESET;"
    },
    {
        "line": 140,
        "fullcodeline": "pHba->pDev = pDev;"
    },
    {
        "line": 141,
        "fullcodeline": "pHba->devices = NULL;"
    },
    {
        "line": 142,
        "fullcodeline": "pHba->dma64 = dma64;"
    },
    {
        "line": 145,
        "fullcodeline": "spin_lock_init(&pHba->state_lock);"
    },
    {
        "line": 16,
        "fullcodeline": "if(pci_enable_device(pDev)) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (pci_request_regions(pDev, \"dpt_i2o\")) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (sizeof(dma_addr_t) > 4 &&"
    },
    {
        "line": 35,
        "fullcodeline": "if (!dma64 && dma_set_mask(&pDev->dev, DMA_BIT_MASK(32)) != 0)"
    },
    {
        "line": 45,
        "fullcodeline": "if(pDev->device == PCI_DPT_DEVICE_ID){"
    },
    {
        "line": 81,
        "fullcodeline": "if (!base_addr_virt) {"
    },
    {
        "line": 87,
        "fullcodeline": "if(raptorFlag == TRUE) {"
    },
    {
        "line": 101,
        "fullcodeline": "if (!pHba) {"
    },
    {
        "line": 111,
        "fullcodeline": "if(hba_chain != NULL){"
    },
    {
        "line": 147,
        "fullcodeline": "if(raptorFlag == 0){"
    },
    {
        "line": 161,
        "fullcodeline": "if (request_irq (pDev->irq, adpt_isr, IRQF_SHARED, pHba->name, pHba)) {"
    },
    {
        "line": 21,
        "fullcodeline": "PERROR(\"dpti: adpt_config_hba: pci request region failed\\n\");"
    },
    {
        "line": 32,
        "fullcodeline": "dma_set_mask(&pDev->dev, DMA_BIT_MASK(64)) == 0)"
    },
    {
        "line": 33,
        "fullcodeline": "dma64 = 1;"
    },
    {
        "line": 82,
        "fullcodeline": "pci_release_regions(pDev);"
    },
    {
        "line": 83,
        "fullcodeline": "PERROR(\"dpti: adpt_config_hba: io remap failed\\n\");"
    },
    {
        "line": 88,
        "fullcodeline": "msg_addr_virt = ioremap(base_addr1_phys, hba_map1_area_size );"
    },
    {
        "line": 104,
        "fullcodeline": "iounmap(base_addr_virt);"
    },
    {
        "line": 105,
        "fullcodeline": "pci_release_regions(pDev);"
    },
    {
        "line": 113,
        "fullcodeline": "p->next = pHba;"
    },
    {
        "line": 163,
        "fullcodeline": "adpt_i2o_delete_hba(pHba);"
    },
    {
        "line": 17,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 22,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 31,
        "fullcodeline": "dma_get_required_mask(&pDev->dev) > DMA_BIT_MASK(32) &&"
    },
    {
        "line": 36,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 46,
        "fullcodeline": "if(pDev->subsystem_device >=0xc032 && pDev->subsystem_device <= 0xc03b){"
    },
    {
        "line": 56,
        "fullcodeline": "base_addr1_phys = pci_resource_start(pDev,1);"
    },
    {
        "line": 57,
        "fullcodeline": "hba_map1_area_size = pci_resource_len(pDev,1);"
    },
    {
        "line": 58,
        "fullcodeline": "raptorFlag = TRUE;"
    },
    {
        "line": 84,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 89,
        "fullcodeline": "if (!msg_addr_virt) {"
    },
    {
        "line": 96,
        "fullcodeline": "msg_addr_virt = base_addr_virt;"
    },
    {
        "line": 102,
        "fullcodeline": "if (msg_addr_virt != base_addr_virt)"
    },
    {
        "line": 106,
        "fullcodeline": "return -ENOMEM;"
    },
    {
        "line": 112,
        "fullcodeline": "for(p = hba_chain; p->next; p = p->next);"
    },
    {
        "line": 115,
        "fullcodeline": "hba_chain = pHba;"
    },
    {
        "line": 164,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 48,
        "fullcodeline": "hba_map0_area_size = 0x400000;"
    },
    {
        "line": 90,
        "fullcodeline": "PERROR(\"dpti: adpt_config_hba: io remap failed on BAR1\\n\");"
    },
    {
        "line": 91,
        "fullcodeline": "iounmap(base_addr_virt);"
    },
    {
        "line": 92,
        "fullcodeline": "pci_release_regions(pDev);"
    },
    {
        "line": 103,
        "fullcodeline": "iounmap(msg_addr_virt);"
    },
    {
        "line": 93,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 50,
        "fullcodeline": "if(hba_map0_area_size > 0x100000 ){"
    },
    {
        "line": 51,
        "fullcodeline": "hba_map0_area_size = 0x100000;"
    }
]