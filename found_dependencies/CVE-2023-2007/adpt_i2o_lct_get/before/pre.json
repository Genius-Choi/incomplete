[
    {
        "line": 3,
        "fullcodeline": "u32 msg[8];"
    },
    {
        "line": 5,
        "fullcodeline": "u32 buf[16];"
    },
    {
        "line": 47,
        "fullcodeline": "PDEBUG(\"%s: Hardware resource table read.\\n\", pHba->name);"
    },
    {
        "line": 7,
        "fullcodeline": "if ((pHba->lct_size == 0) || (pHba->lct == NULL)){"
    },
    {
        "line": 45,
        "fullcodeline": "} while (pHba->lct == NULL);"
    },
    {
        "line": 8,
        "fullcodeline": "pHba->lct_size = pHba->status_block->expected_lct_size;"
    },
    {
        "line": 21,
        "fullcodeline": "memset(pHba->lct, 0, pHba->lct_size);"
    },
    {
        "line": 23,
        "fullcodeline": "msg[0] = EIGHT_WORD_MSG_SIZE|SGL_OFFSET_6;"
    },
    {
        "line": 24,
        "fullcodeline": "msg[1] = I2O_CMD_LCT_NOTIFY<<24 | HOST_TID<<12 | ADAPTER_TID;"
    },
    {
        "line": 25,
        "fullcodeline": "msg[2] = 0;"
    },
    {
        "line": 26,
        "fullcodeline": "msg[3] = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "msg[4] = 0xFFFFFFFF;\t/* All devices */"
    },
    {
        "line": 28,
        "fullcodeline": "msg[5] = 0x00000000;\t/* Report now */"
    },
    {
        "line": 29,
        "fullcodeline": "msg[6] = 0xD0000000|pHba->lct_size;"
    },
    {
        "line": 30,
        "fullcodeline": "msg[7] = (u32)pHba->lct_pa;"
    },
    {
        "line": 51,
        "fullcodeline": "if(adpt_i2o_query_scalar(pHba, 0 , 0x8000, -1, buf, sizeof(buf))>=0) {"
    },
    {
        "line": 52,
        "fullcodeline": "pHba->FwDebugBufferSize = buf[1];"
    },
    {
        "line": 53,
        "fullcodeline": "pHba->FwDebugBuffer_P = ioremap(pHba->base_addr_phys + buf[0],"
    },
    {
        "line": 11,
        "fullcodeline": "if (pHba->lct == NULL) {"
    },
    {
        "line": 32,
        "fullcodeline": "if ((ret=adpt_i2o_post_wait(pHba, msg, sizeof(msg), 360))) {"
    },
    {
        "line": 39,
        "fullcodeline": "if ((pHba->lct->table_size << 2) > pHba->lct_size) {"
    },
    {
        "line": 12,
        "fullcodeline": "pHba->lct = dma_alloc_coherent(&pHba->pDev->dev,"
    },
    {
        "line": 40,
        "fullcodeline": "pHba->lct_size = pHba->lct->table_size << 2;"
    },
    {
        "line": 41,
        "fullcodeline": "dma_free_coherent(&pHba->pDev->dev, pHba->lct_size,"
    },
    {
        "line": 43,
        "fullcodeline": "pHba->lct = NULL;"
    },
    {
        "line": 58,
        "fullcodeline": "pHba->FwDebugBLEDvalue_P = pHba->FwDebugBuffer_P +"
    },
    {
        "line": 15,
        "fullcodeline": "if(pHba->lct == NULL) {"
    },
    {
        "line": 56,
        "fullcodeline": "pHba->FwDebugFlags_P     = pHba->FwDebugBuffer_P +"
    },
    {
        "line": 61,
        "fullcodeline": "pHba->FwDebugStrLength_P = pHba->FwDebugBuffer_P +"
    },
    {
        "line": 18,
        "fullcodeline": "return -ENOMEM;"
    }
]