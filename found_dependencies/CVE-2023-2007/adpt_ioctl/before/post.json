[
    {
        "line": 4,
        "fullcodeline": "int error = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "ulong flags = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "minor = iminor(inode);"
    },
    {
        "line": 13,
        "fullcodeline": "mutex_lock(&adpt_configuration_lock);"
    },
    {
        "line": 19,
        "fullcodeline": "mutex_unlock(&adpt_configuration_lock);"
    },
    {
        "line": 10,
        "fullcodeline": "if (minor >= DPTI_MAX_HBA){"
    },
    {
        "line": 14,
        "fullcodeline": "for (pHba = hba_chain; pHba; pHba = pHba->next) {"
    },
    {
        "line": 20,
        "fullcodeline": "if(pHba == NULL){"
    },
    {
        "line": 24,
        "fullcodeline": "while((volatile u32) pHba->state & DPTI_STATE_RESET )"
    },
    {
        "line": 25,
        "fullcodeline": "schedule_timeout_uninterruptible(2);"
    },
    {
        "line": 78,
        "fullcodeline": "adpt_rescan(pHba);"
    },
    {
        "line": 11,
        "fullcodeline": "return -ENXIO;"
    },
    {
        "line": 15,
        "fullcodeline": "if (pHba->unit == minor) {"
    },
    {
        "line": 21,
        "fullcodeline": "return -ENXIO;"
    },
    {
        "line": 30,
        "fullcodeline": "if (copy_to_user(argp, &DPTI_sig, sizeof(DPTI_sig))) {"
    },
    {
        "line": 35,
        "fullcodeline": "return adpt_i2o_passthru(pHba, argp);"
    },
    {
        "line": 43,
        "fullcodeline": "memset(&HbaInfo, 0, sizeof(HbaInfo));"
    },
    {
        "line": 44,
        "fullcodeline": "HbaInfo.drvrHBAnum = pHba->unit;"
    },
    {
        "line": 45,
        "fullcodeline": "HbaInfo.baseAddr = (ulong) pHba->base_addr_phys;"
    },
    {
        "line": 46,
        "fullcodeline": "HbaInfo.blinkState = adpt_read_blink_led(pHba);"
    },
    {
        "line": 48,
        "fullcodeline": "HbaInfo.pciDeviceNum=PCI_SLOT(pHba->pDev->devfn);"
    },
    {
        "line": 50,
        "fullcodeline": "HbaInfo.hbaFlags = FLG_OSD_PCI_VALID | FLG_OSD_DMA | FLG_OSD_I2O;"
    },
    {
        "line": 58,
        "fullcodeline": "return adpt_system_info(argp);"
    },
    {
        "line": 61,
        "fullcodeline": "value = (u32)adpt_read_blink_led(pHba);"
    },
    {
        "line": 68,
        "fullcodeline": "struct Scsi_Host *shost = pHba->host;"
    },
    {
        "line": 72,
        "fullcodeline": "adpt_hba_reset(pHba);"
    },
    {
        "line": 81,
        "fullcodeline": "return -EINVAL;"
    },
    {
        "line": 51,
        "fullcodeline": "if(copy_to_user(argp, &HbaInfo, sizeof(HbaInfo))){"
    },
    {
        "line": 62,
        "fullcodeline": "if (copy_to_user(argp, &value, sizeof(value))) {"
    },
    {
        "line": 31,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 71,
        "fullcodeline": "spin_lock_irqsave(shost->host_lock, flags);"
    },
    {
        "line": 74,
        "fullcodeline": "spin_unlock_irqrestore(shost->host_lock, flags);"
    },
    {
        "line": 53,
        "fullcodeline": "return -EFAULT;"
    },
    {
        "line": 63,
        "fullcodeline": "return -EFAULT;"
    }
]