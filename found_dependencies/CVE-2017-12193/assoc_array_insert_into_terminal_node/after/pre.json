[
    {
        "line": 15,
        "fullcodeline": "node\t= result->terminal_node.node;"
    },
    {
        "line": 16,
        "fullcodeline": "level\t= result->terminal_node.level;"
    },
    {
        "line": 17,
        "fullcodeline": "edit->segment_cache[ASSOC_ARRAY_FAN_OUT] = result->terminal_node.slot;"
    },
    {
        "line": 19,
        "fullcodeline": "pr_devel(\"-->%s()\\n\", __func__);"
    },
    {
        "line": 26,
        "fullcodeline": "free_slot = -1;"
    },
    {
        "line": 66,
        "fullcodeline": "new_n0 = kzalloc(sizeof(struct assoc_array_node), GFP_KERNEL);"
    },
    {
        "line": 70,
        "fullcodeline": "new_n1 = kzalloc(sizeof(struct assoc_array_node), GFP_KERNEL);"
    },
    {
        "line": 97,
        "fullcodeline": "dissimilarity = 0;"
    },
    {
        "line": 98,
        "fullcodeline": "base_seg = edit->segment_cache[0];"
    },
    {
        "line": 102,
        "fullcodeline": "pr_devel(\"only leaves; dissimilarity=%lx\\n\", dissimilarity);"
    },
    {
        "line": 141,
        "fullcodeline": "new_n0->back_pointer = node->back_pointer;"
    },
    {
        "line": 142,
        "fullcodeline": "new_n0->parent_slot = node->parent_slot;"
    },
    {
        "line": 143,
        "fullcodeline": "new_n1->back_pointer = assoc_array_node_to_ptr(new_n0);"
    },
    {
        "line": 149,
        "fullcodeline": "new_n0->nr_leaves_on_branch = node->nr_leaves_on_branch;"
    },
    {
        "line": 150,
        "fullcodeline": "new_n1->nr_leaves_on_branch = 0;"
    },
    {
        "line": 166,
        "fullcodeline": "pr_devel(\"same slot: %x %x [%02x]\\n\", i, j, slot);"
    },
    {
        "line": 171,
        "fullcodeline": "new_n1->parent_slot = slot;"
    },
    {
        "line": 183,
        "fullcodeline": "free_slot = -1;"
    },
    {
        "line": 184,
        "fullcodeline": "next_slot = 0;"
    },
    {
        "line": 199,
        "fullcodeline": "pr_devel(\"filtered: f=%x n=%x\\n\", free_slot, next_slot);"
    },
    {
        "line": 229,
        "fullcodeline": "ptr = node->back_pointer;"
    },
    {
        "line": 256,
        "fullcodeline": "diff = INT_MAX;"
    },
    {
        "line": 268,
        "fullcodeline": "keylen = round_up(diff, ASSOC_ARRAY_KEY_CHUNK_SIZE);"
    },
    {
        "line": 269,
        "fullcodeline": "keylen >>= ASSOC_ARRAY_KEY_CHUNK_SHIFT;"
    },
    {
        "line": 271,
        "fullcodeline": "new_s0 = kzalloc(sizeof(struct assoc_array_shortcut) +"
    },
    {
        "line": 278,
        "fullcodeline": "new_s0->back_pointer = node->back_pointer;"
    },
    {
        "line": 279,
        "fullcodeline": "new_s0->parent_slot = node->parent_slot;"
    },
    {
        "line": 280,
        "fullcodeline": "new_s0->next_node = assoc_array_node_to_ptr(new_n0);"
    },
    {
        "line": 281,
        "fullcodeline": "new_n0->back_pointer = assoc_array_shortcut_to_ptr(new_s0);"
    },
    {
        "line": 282,
        "fullcodeline": "new_n0->parent_slot = 0;"
    },
    {
        "line": 283,
        "fullcodeline": "new_n1->back_pointer = assoc_array_node_to_ptr(new_n0);"
    },
    {
        "line": 287,
        "fullcodeline": "pr_devel(\"skip_to_level = %d [diff %d]\\n\", level, diff);"
    },
    {
        "line": 294,
        "fullcodeline": "blank = ULONG_MAX << (level & ASSOC_ARRAY_KEY_CHUNK_MASK);"
    },
    {
        "line": 295,
        "fullcodeline": "pr_devel(\"blank off [%zu] %d: %lx\\n\", keylen - 1, level, blank);"
    },
    {
        "line": 309,
        "fullcodeline": "base_seg = ops->get_key_chunk(index_key, level);"
    },
    {
        "line": 310,
        "fullcodeline": "base_seg >>= level & ASSOC_ARRAY_KEY_CHUNK_MASK;"
    },
    {
        "line": 311,
        "fullcodeline": "edit->segment_cache[ASSOC_ARRAY_FAN_OUT] = base_seg & ASSOC_ARRAY_FAN_MASK;"
    },
    {
        "line": 31,
        "fullcodeline": "for (i = 0; i < ASSOC_ARRAY_FAN_OUT; i++) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (free_slot >= 0) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (!new_n0)"
    },
    {
        "line": 69,
        "fullcodeline": "edit->new_meta[0] = assoc_array_node_to_ptr(new_n0);"
    },
    {
        "line": 71,
        "fullcodeline": "if (!new_n1)"
    },
    {
        "line": 73,
        "fullcodeline": "edit->new_meta[1] = assoc_array_node_to_ptr(new_n1);"
    },
    {
        "line": 78,
        "fullcodeline": "for (i = 0; i < ASSOC_ARRAY_FAN_OUT; i++) {"
    },
    {
        "line": 99,
        "fullcodeline": "for (i = 1; i < ASSOC_ARRAY_FAN_OUT; i++)"
    },
    {
        "line": 100,
        "fullcodeline": "dissimilarity |= edit->segment_cache[i] ^ base_seg;"
    },
    {
        "line": 140,
        "fullcodeline": "edit->set[0].to = assoc_array_node_to_ptr(new_n0);"
    },
    {
        "line": 144,
        "fullcodeline": "new_n1->parent_slot = -1; /* Need to calculate this */"
    },
    {
        "line": 158,
        "fullcodeline": "for (i = 0; i < ASSOC_ARRAY_FAN_OUT; i++) {"
    },
    {
        "line": 167,
        "fullcodeline": "BUG_ON(i >= ASSOC_ARRAY_FAN_OUT);"
    },
    {
        "line": 168,
        "fullcodeline": "BUG_ON(j >= ASSOC_ARRAY_FAN_OUT + 1);"
    },
    {
        "line": 169,
        "fullcodeline": "BUG_ON(slot >= ASSOC_ARRAY_FAN_OUT);"
    },
    {
        "line": 174,
        "fullcodeline": "for (i = 0; i < ASSOC_ARRAY_FAN_OUT; i++)"
    },
    {
        "line": 179,
        "fullcodeline": "BUG_ON(new_n0->slots[slot] != NULL);"
    },
    {
        "line": 180,
        "fullcodeline": "new_n0->slots[slot] = assoc_array_node_to_ptr(new_n1);"
    },
    {
        "line": 185,
        "fullcodeline": "for (i = 0; i < ASSOC_ARRAY_FAN_OUT; i++) {"
    },
    {
        "line": 212,
        "fullcodeline": "BUG_ON(next_slot <= 1);"
    },
    {
        "line": 214,
        "fullcodeline": "edit->set_backpointers_to = assoc_array_node_to_ptr(new_n0);"
    },
    {
        "line": 215,
        "fullcodeline": "for (i = 0; i < ASSOC_ARRAY_FAN_OUT; i++) {"
    },
    {
        "line": 230,
        "fullcodeline": "if (!ptr)"
    },
    {
        "line": 236,
        "fullcodeline": "edit->excised_meta[0] = assoc_array_node_to_ptr(node);"
    },
    {
        "line": 257,
        "fullcodeline": "for (i = 0; i < ASSOC_ARRAY_FAN_OUT; i++) {"
    },
    {
        "line": 265,
        "fullcodeline": "BUG_ON(diff == INT_MAX);"
    },
    {
        "line": 266,
        "fullcodeline": "BUG_ON(diff < level + ASSOC_ARRAY_LEVEL_STEP);"
    },
    {
        "line": 273,
        "fullcodeline": "if (!new_s0)"
    },
    {
        "line": 275,
        "fullcodeline": "edit->new_meta[2] = assoc_array_shortcut_to_ptr(new_s0);"
    },
    {
        "line": 277,
        "fullcodeline": "edit->set[0].to = assoc_array_shortcut_to_ptr(new_s0);"
    },
    {
        "line": 284,
        "fullcodeline": "new_n1->parent_slot = -1; /* Need to calculate this */"
    },
    {
        "line": 286,
        "fullcodeline": "new_s0->skip_to_level = level = diff & ~ASSOC_ARRAY_LEVEL_STEP_MASK;"
    },
    {
        "line": 288,
        "fullcodeline": "BUG_ON(level <= 0);"
    },
    {
        "line": 290,
        "fullcodeline": "for (i = 0; i < keylen; i++)"
    },
    {
        "line": 296,
        "fullcodeline": "new_s0->index_key[keylen - 1] &= ~blank;"
    },
    {
        "line": 301,
        "fullcodeline": "for (i = 0; i < ASSOC_ARRAY_FAN_OUT; i++) {"
    },
    {
        "line": 32,
        "fullcodeline": "ptr = node->slots[i];"
    },
    {
        "line": 79,
        "fullcodeline": "ptr = node->slots[i];"
    },
    {
        "line": 85,
        "fullcodeline": "base_seg = ops->get_object_key_chunk("
    },
    {
        "line": 87,
        "fullcodeline": "base_seg >>= level & ASSOC_ARRAY_KEY_CHUNK_MASK;"
    },
    {
        "line": 88,
        "fullcodeline": "edit->segment_cache[i] = base_seg & ASSOC_ARRAY_FAN_MASK;"
    },
    {
        "line": 104,
        "fullcodeline": "if ((dissimilarity & ASSOC_ARRAY_FAN_MASK) == 0) {"
    },
    {
        "line": 159,
        "fullcodeline": "slot = edit->segment_cache[i];"
    },
    {
        "line": 175,
        "fullcodeline": "if (assoc_array_ptr_is_meta(node->slots[i]))"
    },
    {
        "line": 258,
        "fullcodeline": "int x = ops->diff_objects(assoc_array_ptr_to_leaf(node->slots[i]),"
    },
    {
        "line": 292,
        "fullcodeline": "ops->get_key_chunk(index_key, i * ASSOC_ARRAY_KEY_CHUNK_SIZE);"
    },
    {
        "line": 302,
        "fullcodeline": "ptr = node->slots[i];"
    },
    {
        "line": 303,
        "fullcodeline": "base_seg = ops->get_object_key_chunk(assoc_array_ptr_to_leaf(ptr),"
    },
    {
        "line": 305,
        "fullcodeline": "base_seg >>= level & ASSOC_ARRAY_KEY_CHUNK_MASK;"
    },
    {
        "line": 306,
        "fullcodeline": "edit->segment_cache[i] = base_seg & ASSOC_ARRAY_FAN_MASK;"
    },
    {
        "line": 33,
        "fullcodeline": "if (!ptr) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (assoc_array_ptr_is_leaf(ptr) &&"
    },
    {
        "line": 80,
        "fullcodeline": "if (assoc_array_ptr_is_meta(ptr)) {"
    },
    {
        "line": 160,
        "fullcodeline": "if (slot != 0xff)"
    },
    {
        "line": 186,
        "fullcodeline": "if (assoc_array_ptr_is_meta(node->slots[i]))"
    },
    {
        "line": 188,
        "fullcodeline": "if (edit->segment_cache[i] == slot) {"
    },
    {
        "line": 204,
        "fullcodeline": "} while (new_n0->slots[free_slot] != NULL);"
    },
    {
        "line": 260,
        "fullcodeline": "if (x < diff) {"
    },
    {
        "line": 272,
        "fullcodeline": "keylen * sizeof(unsigned long), GFP_KERNEL);"
    },
    {
        "line": 34,
        "fullcodeline": "free_slot = i;"
    },
    {
        "line": 38,
        "fullcodeline": "ops->compare_object(assoc_array_ptr_to_leaf(ptr),"
    },
    {
        "line": 40,
        "fullcodeline": "pr_devel(\"replace in slot %d\\n\", i);"
    },
    {
        "line": 41,
        "fullcodeline": "edit->leaf_p = &node->slots[i];"
    },
    {
        "line": 42,
        "fullcodeline": "edit->dead_leaf = node->slots[i];"
    },
    {
        "line": 43,
        "fullcodeline": "pr_devel(\"<--%s() = ok [replace]\\n\", __func__);"
    },
    {
        "line": 81,
        "fullcodeline": "edit->segment_cache[i] = 0xff;"
    },
    {
        "line": 86,
        "fullcodeline": "assoc_array_ptr_to_leaf(ptr), level);"
    },
    {
        "line": 108,
        "fullcodeline": "if ((edit->segment_cache[ASSOC_ARRAY_FAN_OUT] ^ base_seg) == 0)"
    },
    {
        "line": 189,
        "fullcodeline": "new_n1->slots[next_slot++] = node->slots[i];"
    },
    {
        "line": 190,
        "fullcodeline": "new_n1->nr_leaves_on_branch++;"
    },
    {
        "line": 217,
        "fullcodeline": "ptr = node->slots[i];"
    },
    {
        "line": 232,
        "fullcodeline": "else if (assoc_array_ptr_is_node(ptr))"
    },
    {
        "line": 262,
        "fullcodeline": "diff = x;"
    },
    {
        "line": 161,
        "fullcodeline": "for (j = i + 1; j < ASSOC_ARRAY_FAN_OUT + 1; j++)"
    },
    {
        "line": 195,
        "fullcodeline": "new_n0->slots[free_slot] = node->slots[i];"
    },
    {
        "line": 218,
        "fullcodeline": "BUG_ON(assoc_array_ptr_is_leaf(ptr));"
    },
    {
        "line": 219,
        "fullcodeline": "if (assoc_array_ptr_is_node(ptr)) {"
    },
    {
        "line": 261,
        "fullcodeline": "BUG_ON(x < 0);"
    },
    {
        "line": 162,
        "fullcodeline": "if (edit->segment_cache[j] == slot)"
    },
    {
        "line": 194,
        "fullcodeline": "} while (new_n0->slots[free_slot] != NULL);"
    },
    {
        "line": 208,
        "fullcodeline": "edit->leaf_p = &new_n1->slots[next_slot++];"
    },
    {
        "line": 220,
        "fullcodeline": "side = assoc_array_ptr_to_node(ptr);"
    },
    {
        "line": 193,
        "fullcodeline": "free_slot++;"
    },
    {
        "line": 223,
        "fullcodeline": "shortcut = assoc_array_ptr_to_shortcut(ptr);"
    }
]