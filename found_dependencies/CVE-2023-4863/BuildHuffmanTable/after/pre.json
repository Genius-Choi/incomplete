[
    {
        "line": 4,
        "fullcodeline": "HuffmanCode* table = root_table;  // next available space in table"
    },
    {
        "line": 5,
        "fullcodeline": "int total_size = 1 << root_bits;  // total size root table + 2nd level table"
    },
    {
        "line": 9,
        "fullcodeline": "int count[MAX_ALLOWED_CODE_LENGTH + 1] = { 0 };"
    },
    {
        "line": 11,
        "fullcodeline": "int offset[MAX_ALLOWED_CODE_LENGTH + 1];"
    },
    {
        "line": 13,
        "fullcodeline": "assert(code_lengths_size != 0);"
    },
    {
        "line": 14,
        "fullcodeline": "assert(code_lengths != NULL);"
    },
    {
        "line": 15,
        "fullcodeline": "assert((root_table != NULL && sorted != NULL) ||"
    },
    {
        "line": 17,
        "fullcodeline": "assert(root_bits > 0);"
    },
    {
        "line": 20,
        "fullcodeline": "for (symbol = 0; symbol < code_lengths_size; ++symbol) {"
    },
    {
        "line": 28,
        "fullcodeline": "if (count[0] == code_lengths_size) {"
    },
    {
        "line": 34,
        "fullcodeline": "for (len = 1; len < MAX_ALLOWED_CODE_LENGTH; ++len) {"
    },
    {
        "line": 42,
        "fullcodeline": "for (symbol = 0; symbol < code_lengths_size; ++symbol) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (offset[MAX_ALLOWED_CODE_LENGTH] == 1) {"
    },
    {
        "line": 66,
        "fullcodeline": "uint32_t low = 0xffffffffu;        // low bits for current root entry"
    },
    {
        "line": 67,
        "fullcodeline": "uint32_t mask = total_size - 1;    // mask for low bits"
    },
    {
        "line": 68,
        "fullcodeline": "uint32_t key = 0;      // reversed prefix code"
    },
    {
        "line": 69,
        "fullcodeline": "int num_nodes = 1;     // number of Huffman tree nodes"
    },
    {
        "line": 70,
        "fullcodeline": "int num_open = 1;      // number of open branches in current tree level"
    },
    {
        "line": 71,
        "fullcodeline": "int table_bits = root_bits;        // key length of current table"
    },
    {
        "line": 72,
        "fullcodeline": "int table_size = 1 << table_bits;  // size of current table"
    },
    {
        "line": 73,
        "fullcodeline": "symbol = 0;"
    },
    {
        "line": 16,
        "fullcodeline": "(root_table == NULL && sorted == NULL));"
    },
    {
        "line": 24,
        "fullcodeline": "++count[code_lengths[symbol]];"
    },
    {
        "line": 75,
        "fullcodeline": "for (len = 1, step = 2; len <= root_bits; ++len, step <<= 1) {"
    },
    {
        "line": 93,
        "fullcodeline": "for (len = root_bits + 1, step = 2; len <= MAX_ALLOWED_CODE_LENGTH;"
    },
    {
        "line": 21,
        "fullcodeline": "if (code_lengths[symbol] > MAX_ALLOWED_CODE_LENGTH) {"
    },
    {
        "line": 35,
        "fullcodeline": "if (count[len] > (1 << len)) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (code_lengths[symbol] > 0) {"
    },
    {
        "line": 55,
        "fullcodeline": "if (sorted != NULL) {"
    },
    {
        "line": 76,
        "fullcodeline": "num_open <<= 1;"
    },
    {
        "line": 77,
        "fullcodeline": "num_nodes += num_open;"
    },
    {
        "line": 78,
        "fullcodeline": "num_open -= count[len];"
    },
    {
        "line": 94,
        "fullcodeline": "++len, step <<= 1) {"
    },
    {
        "line": 95,
        "fullcodeline": "num_open <<= 1;"
    },
    {
        "line": 96,
        "fullcodeline": "num_nodes += num_open;"
    },
    {
        "line": 97,
        "fullcodeline": "num_open -= count[len];"
    },
    {
        "line": 124,
        "fullcodeline": "if (num_nodes != 2 * offset[MAX_ALLOWED_CODE_LENGTH] - 1) {"
    },
    {
        "line": 57,
        "fullcodeline": "code.bits = 0;"
    },
    {
        "line": 58,
        "fullcodeline": "code.value = (uint16_t)sorted[0];"
    },
    {
        "line": 59,
        "fullcodeline": "ReplicateValue(table, 1, total_size, code);"
    },
    {
        "line": 79,
        "fullcodeline": "if (num_open < 0) {"
    },
    {
        "line": 82,
        "fullcodeline": "if (root_table == NULL) continue;"
    },
    {
        "line": 83,
        "fullcodeline": "for (; count[len] > 0; --count[len]) {"
    },
    {
        "line": 98,
        "fullcodeline": "if (num_open < 0) {"
    },
    {
        "line": 101,
        "fullcodeline": "for (; count[len] > 0; --count[len]) {"
    },
    {
        "line": 45,
        "fullcodeline": "if (sorted != NULL) {"
    },
    {
        "line": 85,
        "fullcodeline": "code.bits = (uint8_t)len;"
    },
    {
        "line": 86,
        "fullcodeline": "code.value = (uint16_t)sorted[symbol++];"
    },
    {
        "line": 87,
        "fullcodeline": "ReplicateValue(&table[key], step, table_size, code);"
    },
    {
        "line": 88,
        "fullcodeline": "key = GetNextKey(key, len);"
    },
    {
        "line": 119,
        "fullcodeline": "key = GetNextKey(key, len);"
    },
    {
        "line": 46,
        "fullcodeline": "sorted[offset[symbol_code_length]++] = symbol;"
    },
    {
        "line": 114,
        "fullcodeline": "if (root_table != NULL) {"
    },
    {
        "line": 48,
        "fullcodeline": "offset[symbol_code_length]++;"
    },
    {
        "line": 103,
        "fullcodeline": "if ((key & mask) != low) {"
    },
    {
        "line": 105,
        "fullcodeline": "table_bits = NextTableBitSize(count, len, root_bits);"
    },
    {
        "line": 106,
        "fullcodeline": "table_size = 1 << table_bits;"
    },
    {
        "line": 107,
        "fullcodeline": "total_size += table_size;"
    },
    {
        "line": 108,
        "fullcodeline": "low = key & mask;"
    },
    {
        "line": 115,
        "fullcodeline": "code.bits = (uint8_t)(len - root_bits);"
    },
    {
        "line": 116,
        "fullcodeline": "code.value = (uint16_t)sorted[symbol++];"
    },
    {
        "line": 117,
        "fullcodeline": "ReplicateValue(&table[key >> root_bits], step, table_size, code);"
    },
    {
        "line": 104,
        "fullcodeline": "if (root_table != NULL) table += table_size;"
    },
    {
        "line": 109,
        "fullcodeline": "if (root_table != NULL) {"
    },
    {
        "line": 110,
        "fullcodeline": "root_table[low].bits = (uint8_t)(table_bits + root_bits);"
    },
    {
        "line": 111,
        "fullcodeline": "root_table[low].value = (uint16_t)((table - root_table) - low);"
    }
]