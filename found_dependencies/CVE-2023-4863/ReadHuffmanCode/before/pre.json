[
    {
        "line": 3,
        "fullcodeline": "int ok = 0;"
    },
    {
        "line": 4,
        "fullcodeline": "int size = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "VP8LBitReader* const br = &dec->br_;"
    },
    {
        "line": 6,
        "fullcodeline": "const int simple_code = VP8LReadBits(br, 1);"
    },
    {
        "line": 8,
        "fullcodeline": "memset(code_lengths, 0, alphabet_size * sizeof(*code_lengths));"
    },
    {
        "line": 35,
        "fullcodeline": "ok = ok && !br->eos_;"
    },
    {
        "line": 40,
        "fullcodeline": "if (!ok || size == 0) {"
    },
    {
        "line": 11,
        "fullcodeline": "const int num_symbols = VP8LReadBits(br, 1) + 1;"
    },
    {
        "line": 12,
        "fullcodeline": "const int first_symbol_len_code = VP8LReadBits(br, 1);"
    },
    {
        "line": 14,
        "fullcodeline": "int symbol = VP8LReadBits(br, (first_symbol_len_code == 0) ? 1 : 8);"
    },
    {
        "line": 15,
        "fullcodeline": "code_lengths[symbol] = 1;"
    },
    {
        "line": 21,
        "fullcodeline": "ok = 1;"
    },
    {
        "line": 37,
        "fullcodeline": "size = VP8LBuildHuffmanTable(table, HUFFMAN_TABLE_BITS,"
    },
    {
        "line": 17,
        "fullcodeline": "if (num_symbols == 2) {"
    },
    {
        "line": 24,
        "fullcodeline": "int code_length_code_lengths[NUM_CODE_LENGTH_CODES] = { 0 };"
    },
    {
        "line": 25,
        "fullcodeline": "const int num_codes = VP8LReadBits(br, 4) + 4;"
    },
    {
        "line": 26,
        "fullcodeline": "assert(num_codes <= NUM_CODE_LENGTH_CODES);"
    },
    {
        "line": 31,
        "fullcodeline": "ok = ReadHuffmanCodeLengths(dec, code_length_code_lengths, alphabet_size,"
    },
    {
        "line": 41,
        "fullcodeline": "return VP8LSetError(dec, VP8_STATUS_BITSTREAM_ERROR);"
    },
    {
        "line": 18,
        "fullcodeline": "symbol = VP8LReadBits(br, 8);"
    },
    {
        "line": 19,
        "fullcodeline": "code_lengths[symbol] = 1;"
    },
    {
        "line": 28,
        "fullcodeline": "for (i = 0; i < num_codes; ++i) {"
    },
    {
        "line": 29,
        "fullcodeline": "code_length_code_lengths[kCodeLengthCodeOrder[i]] = VP8LReadBits(br, 3);"
    }
]