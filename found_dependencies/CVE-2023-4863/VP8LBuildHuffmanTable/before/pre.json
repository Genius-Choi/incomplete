[
    {
        "line": 4,
        "fullcodeline": "assert(code_lengths_size <= MAX_CODE_LENGTHS_SIZE);"
    },
    {
        "line": 5,
        "fullcodeline": "if (root_table == NULL) {"
    },
    {
        "line": 6,
        "fullcodeline": "total_size = BuildHuffmanTable(NULL, root_bits,"
    },
    {
        "line": 8,
        "fullcodeline": "} else if (code_lengths_size <= SORTED_SIZE_CUTOFF) {"
    },
    {
        "line": 10,
        "fullcodeline": "uint16_t sorted[SORTED_SIZE_CUTOFF];"
    },
    {
        "line": 11,
        "fullcodeline": "total_size = BuildHuffmanTable(root_table, root_bits,"
    },
    {
        "line": 14,
        "fullcodeline": "uint16_t* const sorted ="
    },
    {
        "line": 17,
        "fullcodeline": "total_size = BuildHuffmanTable(root_table, root_bits,"
    },
    {
        "line": 15,
        "fullcodeline": "(uint16_t*)WebPSafeMalloc(code_lengths_size, sizeof(*sorted));"
    },
    {
        "line": 16,
        "fullcodeline": "if (sorted == NULL) return 0;"
    }
]