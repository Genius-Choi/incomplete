[
    {
        "line": 4,
        "fullcodeline": "int ok = 0;"
    },
    {
        "line": 5,
        "fullcodeline": "VP8LBitReader* const br = &dec->br_;"
    },
    {
        "line": 8,
        "fullcodeline": "int prev_code_len = DEFAULT_CODE_LENGTH;"
    },
    {
        "line": 9,
        "fullcodeline": "HuffmanCode table[1 << LENGTHS_TABLE_BITS];"
    },
    {
        "line": 27,
        "fullcodeline": "symbol = 0;"
    },
    {
        "line": 53,
        "fullcodeline": "ok = 1;"
    },
    {
        "line": 11,
        "fullcodeline": "if (!VP8LBuildHuffmanTable(table, LENGTHS_TABLE_BITS,"
    },
    {
        "line": 17,
        "fullcodeline": "if (VP8LReadBits(br, 1)) {    // use length"
    },
    {
        "line": 28,
        "fullcodeline": "while (symbol < num_symbols) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (!ok) return VP8LSetError(dec, VP8_STATUS_BITSTREAM_ERROR);"
    },
    {
        "line": 18,
        "fullcodeline": "const int length_nbits = 2 + 2 * VP8LReadBits(br, 3);"
    },
    {
        "line": 19,
        "fullcodeline": "max_symbol = 2 + VP8LReadBits(br, length_nbits);"
    },
    {
        "line": 32,
        "fullcodeline": "VP8LFillBitWindow(br);"
    },
    {
        "line": 33,
        "fullcodeline": "p = &table[VP8LPrefetchBits(br) & LENGTHS_TABLE_MASK];"
    },
    {
        "line": 34,
        "fullcodeline": "VP8LSetBitPos(br, br->bit_pos_ + p->bits);"
    },
    {
        "line": 35,
        "fullcodeline": "code_len = p->value;"
    },
    {
        "line": 20,
        "fullcodeline": "if (max_symbol > num_symbols) {"
    },
    {
        "line": 24,
        "fullcodeline": "max_symbol = num_symbols;"
    },
    {
        "line": 31,
        "fullcodeline": "if (max_symbol-- == 0) break;"
    },
    {
        "line": 36,
        "fullcodeline": "if (code_len < kCodeLengthLiterals) {"
    },
    {
        "line": 37,
        "fullcodeline": "code_lengths[symbol++] = code_len;"
    },
    {
        "line": 38,
        "fullcodeline": "if (code_len != 0) prev_code_len = code_len;"
    },
    {
        "line": 40,
        "fullcodeline": "const int use_prev = (code_len == kCodeLengthRepeatCode);"
    },
    {
        "line": 41,
        "fullcodeline": "const int slot = code_len - kCodeLengthLiterals;"
    },
    {
        "line": 42,
        "fullcodeline": "const int extra_bits = kCodeLengthExtraBits[slot];"
    },
    {
        "line": 43,
        "fullcodeline": "const int repeat_offset = kCodeLengthRepeatOffsets[slot];"
    },
    {
        "line": 44,
        "fullcodeline": "int repeat = VP8LReadBits(br, extra_bits) + repeat_offset;"
    },
    {
        "line": 45,
        "fullcodeline": "if (symbol + repeat > num_symbols) {"
    },
    {
        "line": 48,
        "fullcodeline": "const int length = use_prev ? prev_code_len : 0;"
    },
    {
        "line": 49,
        "fullcodeline": "while (repeat-- > 0) code_lengths[symbol++] = length;"
    }
]