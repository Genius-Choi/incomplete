[
    {
        "line": 4,
        "fullcodeline": "VP8LBitReader* const br = &dec->br_;"
    },
    {
        "line": 5,
        "fullcodeline": "VP8LMetadata* const hdr = &dec->hdr_;"
    },
    {
        "line": 6,
        "fullcodeline": "uint32_t* huffman_image = NULL;"
    },
    {
        "line": 7,
        "fullcodeline": "HTreeGroup* htree_groups = NULL;"
    },
    {
        "line": 8,
        "fullcodeline": "HuffmanCode* huffman_tables = NULL;"
    },
    {
        "line": 9,
        "fullcodeline": "HuffmanCode* huffman_table = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "int num_htree_groups = 1;"
    },
    {
        "line": 11,
        "fullcodeline": "int num_htree_groups_max = 1;"
    },
    {
        "line": 12,
        "fullcodeline": "const int max_alphabet_size ="
    },
    {
        "line": 14,
        "fullcodeline": "int* code_lengths = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "int* mapping = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "int ok = 0;"
    },
    {
        "line": 68,
        "fullcodeline": "code_lengths = (int*)WebPSafeCalloc((uint64_t)max_alphabet_size,"
    },
    {
        "line": 70,
        "fullcodeline": "huffman_tables = (HuffmanCode*)WebPSafeMalloc(num_htree_groups * table_size,"
    },
    {
        "line": 72,
        "fullcodeline": "htree_groups = VP8LHtreeGroupsNew(num_htree_groups);"
    },
    {
        "line": 79,
        "fullcodeline": "huffman_table = huffman_tables;"
    },
    {
        "line": 145,
        "fullcodeline": "ok = 1;"
    },
    {
        "line": 148,
        "fullcodeline": "hdr->huffman_image_ = huffman_image;"
    },
    {
        "line": 149,
        "fullcodeline": "hdr->num_htree_groups_ = num_htree_groups;"
    },
    {
        "line": 150,
        "fullcodeline": "hdr->htree_groups_ = htree_groups;"
    },
    {
        "line": 151,
        "fullcodeline": "hdr->huffman_tables_ = huffman_tables;"
    },
    {
        "line": 154,
        "fullcodeline": "WebPSafeFree(code_lengths);"
    },
    {
        "line": 155,
        "fullcodeline": "WebPSafeFree(mapping);"
    },
    {
        "line": 13,
        "fullcodeline": "kAlphabetSize[0] + ((color_cache_bits > 0) ? 1 << color_cache_bits : 0);"
    },
    {
        "line": 19,
        "fullcodeline": "if (allow_recursion && VP8LReadBits(br, 1)) {"
    },
    {
        "line": 74,
        "fullcodeline": "if (htree_groups == NULL || code_lengths == NULL || huffman_tables == NULL) {"
    },
    {
        "line": 80,
        "fullcodeline": "for (i = 0; i < num_htree_groups_max; ++i) {"
    },
    {
        "line": 156,
        "fullcodeline": "if (!ok) {"
    },
    {
        "line": 21,
        "fullcodeline": "const int huffman_precision = VP8LReadBits(br, 3) + 2;"
    },
    {
        "line": 22,
        "fullcodeline": "const int huffman_xsize = VP8LSubSampleSize(xsize, huffman_precision);"
    },
    {
        "line": 23,
        "fullcodeline": "const int huffman_ysize = VP8LSubSampleSize(ysize, huffman_precision);"
    },
    {
        "line": 24,
        "fullcodeline": "const int huffman_pixs = huffman_xsize * huffman_ysize;"
    },
    {
        "line": 29,
        "fullcodeline": "hdr->huffman_subsample_bits_ = huffman_precision;"
    },
    {
        "line": 75,
        "fullcodeline": "VP8LSetError(dec, VP8_STATUS_OUT_OF_MEMORY);"
    },
    {
        "line": 157,
        "fullcodeline": "WebPSafeFree(huffman_image);"
    },
    {
        "line": 158,
        "fullcodeline": "WebPSafeFree(huffman_tables);"
    },
    {
        "line": 159,
        "fullcodeline": "VP8LHtreeGroupsFree(htree_groups);"
    },
    {
        "line": 25,
        "fullcodeline": "if (!DecodeImageStream(huffman_xsize, huffman_ysize, /*is_level0=*/0, dec,"
    },
    {
        "line": 30,
        "fullcodeline": "for (i = 0; i < huffman_pixs; ++i) {"
    },
    {
        "line": 44,
        "fullcodeline": "if (num_htree_groups_max > 1000 || num_htree_groups_max > xsize * ysize) {"
    },
    {
        "line": 83,
        "fullcodeline": "if (mapping != NULL && mapping[i] == -1) {"
    },
    {
        "line": 32,
        "fullcodeline": "const int group = (huffman_image[i] >> 8) & 0xffff;"
    },
    {
        "line": 33,
        "fullcodeline": "huffman_image[i] = group;"
    },
    {
        "line": 47,
        "fullcodeline": "mapping = (int*)WebPSafeMalloc(num_htree_groups_max, sizeof(*mapping));"
    },
    {
        "line": 54,
        "fullcodeline": "memset(mapping, 0xff, num_htree_groups_max * sizeof(*mapping));"
    },
    {
        "line": 34,
        "fullcodeline": "if (group >= num_htree_groups_max) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (mapping == NULL) {"
    },
    {
        "line": 55,
        "fullcodeline": "for (num_htree_groups = 0, i = 0; i < huffman_pixs; ++i) {"
    },
    {
        "line": 62,
        "fullcodeline": "num_htree_groups = num_htree_groups_max;"
    },
    {
        "line": 84,
        "fullcodeline": "for (j = 0; j < HUFFMAN_CODES_PER_META_CODE; ++j) {"
    },
    {
        "line": 97,
        "fullcodeline": "HuffmanCode** const htrees = htree_group->htrees;"
    },
    {
        "line": 99,
        "fullcodeline": "int total_size = 0;"
    },
    {
        "line": 100,
        "fullcodeline": "int is_trivial_literal = 1;"
    },
    {
        "line": 101,
        "fullcodeline": "int max_bits = 0;"
    },
    {
        "line": 128,
        "fullcodeline": "htree_group->is_trivial_literal = is_trivial_literal;"
    },
    {
        "line": 129,
        "fullcodeline": "htree_group->is_trivial_code = 0;"
    },
    {
        "line": 140,
        "fullcodeline": "htree_group->use_packed_table ="
    },
    {
        "line": 35,
        "fullcodeline": "num_htree_groups_max = group + 1;"
    },
    {
        "line": 49,
        "fullcodeline": "VP8LSetError(dec, VP8_STATUS_OUT_OF_MEMORY);"
    },
    {
        "line": 59,
        "fullcodeline": "huffman_image[i] = *mapped_group;"
    },
    {
        "line": 102,
        "fullcodeline": "for (j = 0; j < HUFFMAN_CODES_PER_META_CODE; ++j) {"
    },
    {
        "line": 141,
        "fullcodeline": "!htree_group->is_trivial_code && (max_bits < HUFFMAN_PACKED_BITS);"
    },
    {
        "line": 58,
        "fullcodeline": "if (*mapped_group == -1) *mapped_group = num_htree_groups++;"
    },
    {
        "line": 86,
        "fullcodeline": "if (j == 0 && color_cache_bits > 0) {"
    },
    {
        "line": 90,
        "fullcodeline": "if (!ReadHuffmanCode(alphabet_size, dec, code_lengths, NULL)) {"
    },
    {
        "line": 104,
        "fullcodeline": "htrees[j] = huffman_table;"
    },
    {
        "line": 108,
        "fullcodeline": "size = ReadHuffmanCode(alphabet_size, dec, code_lengths, huffman_table);"
    },
    {
        "line": 115,
        "fullcodeline": "total_size += huffman_table->bits;"
    },
    {
        "line": 116,
        "fullcodeline": "huffman_table += size;"
    },
    {
        "line": 134,
        "fullcodeline": "htree_group->literal_arb = ((uint32_t)alpha << 24) | (red << 16) | blue;"
    },
    {
        "line": 142,
        "fullcodeline": "if (htree_group->use_packed_table) BuildPackedTable(htree_group);"
    },
    {
        "line": 87,
        "fullcodeline": "alphabet_size += (1 << color_cache_bits);"
    },
    {
        "line": 96,
        "fullcodeline": "&htree_groups[(mapping == NULL) ? i : mapping[i]];"
    },
    {
        "line": 105,
        "fullcodeline": "if (j == 0 && color_cache_bits > 0) {"
    },
    {
        "line": 109,
        "fullcodeline": "if (size == 0) {"
    },
    {
        "line": 112,
        "fullcodeline": "if (is_trivial_literal && kLiteralMap[j] == 1) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (j <= ALPHA) {"
    },
    {
        "line": 135,
        "fullcodeline": "if (total_size == 0 && htrees[GREEN][0].value < NUM_LITERAL_CODES) {"
    },
    {
        "line": 106,
        "fullcodeline": "alphabet_size += (1 << color_cache_bits);"
    },
    {
        "line": 113,
        "fullcodeline": "is_trivial_literal = (huffman_table->bits == 0);"
    },
    {
        "line": 118,
        "fullcodeline": "int local_max_bits = code_lengths[0];"
    },
    {
        "line": 125,
        "fullcodeline": "max_bits += local_max_bits;"
    },
    {
        "line": 136,
        "fullcodeline": "htree_group->is_trivial_code = 1;"
    },
    {
        "line": 137,
        "fullcodeline": "htree_group->literal_arb |= htrees[GREEN][0].value << 8;"
    },
    {
        "line": 120,
        "fullcodeline": "for (k = 1; k < alphabet_size; ++k) {"
    },
    {
        "line": 121,
        "fullcodeline": "if (code_lengths[k] > local_max_bits) {"
    },
    {
        "line": 122,
        "fullcodeline": "local_max_bits = code_lengths[k];"
    }
]