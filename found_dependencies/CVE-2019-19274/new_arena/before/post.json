[
    {
        "line": 6,
        "fullcodeline": "static int debug_stats = -1;"
    },
    {
        "line": 58,
        "fullcodeline": "assert(unused_arena_objects != NULL);"
    },
    {
        "line": 59,
        "fullcodeline": "arenaobj = unused_arena_objects;"
    },
    {
        "line": 60,
        "fullcodeline": "unused_arena_objects = arenaobj->nextarena;"
    },
    {
        "line": 61,
        "fullcodeline": "assert(arenaobj->address == 0);"
    },
    {
        "line": 62,
        "fullcodeline": "address = _PyObject_Arena.alloc(_PyObject_Arena.ctx, ARENA_SIZE);"
    },
    {
        "line": 71,
        "fullcodeline": "arenaobj->address = (uintptr_t)address;"
    },
    {
        "line": 73,
        "fullcodeline": "++narenas_currently_allocated;"
    },
    {
        "line": 74,
        "fullcodeline": "++ntimes_arena_allocated;"
    },
    {
        "line": 77,
        "fullcodeline": "arenaobj->freepools = NULL;"
    },
    {
        "line": 80,
        "fullcodeline": "arenaobj->pool_address = (block*)arenaobj->address;"
    },
    {
        "line": 81,
        "fullcodeline": "arenaobj->nfreepools = ARENA_SIZE / POOL_SIZE;"
    },
    {
        "line": 82,
        "fullcodeline": "assert(POOL_SIZE * arenaobj->nfreepools == ARENA_SIZE);"
    },
    {
        "line": 83,
        "fullcodeline": "excess = (uint)(arenaobj->address & POOL_SIZE_MASK);"
    },
    {
        "line": 88,
        "fullcodeline": "arenaobj->ntotalpools = arenaobj->nfreepools;"
    },
    {
        "line": 8,
        "fullcodeline": "if (debug_stats == -1) {"
    },
    {
        "line": 15,
        "fullcodeline": "if (unused_arena_objects == NULL) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (address == NULL) {"
    },
    {
        "line": 75,
        "fullcodeline": "if (narenas_currently_allocated > narenas_highwater)"
    },
    {
        "line": 84,
        "fullcodeline": "if (excess != 0) {"
    },
    {
        "line": 9,
        "fullcodeline": "char *opt = Py_GETENV(\"PYTHONMALLOCSTATS\");"
    },
    {
        "line": 10,
        "fullcodeline": "debug_stats = (opt != NULL && *opt != '\\0');"
    },
    {
        "line": 13,
        "fullcodeline": "_PyObject_DebugMallocStats(stderr);"
    },
    {
        "line": 23,
        "fullcodeline": "numarenas = maxarenas ? maxarenas << 1 : INITIAL_ARENA_OBJECTS;"
    },
    {
        "line": 30,
        "fullcodeline": "nbytes = numarenas * sizeof(*arenas);"
    },
    {
        "line": 31,
        "fullcodeline": "arenaobj = (struct arena_object *)PyMem_RawRealloc(arenas, nbytes);"
    },
    {
        "line": 34,
        "fullcodeline": "arenas = arenaobj;"
    },
    {
        "line": 42,
        "fullcodeline": "assert(usable_arenas == NULL);"
    },
    {
        "line": 43,
        "fullcodeline": "assert(unused_arena_objects == NULL);"
    },
    {
        "line": 53,
        "fullcodeline": "unused_arena_objects = &arenas[maxarenas];"
    },
    {
        "line": 54,
        "fullcodeline": "maxarenas = numarenas;"
    },
    {
        "line": 67,
        "fullcodeline": "arenaobj->nextarena = unused_arena_objects;"
    },
    {
        "line": 68,
        "fullcodeline": "unused_arena_objects = arenaobj;"
    },
    {
        "line": 76,
        "fullcodeline": "narenas_highwater = narenas_currently_allocated;"
    },
    {
        "line": 85,
        "fullcodeline": "--arenaobj->nfreepools;"
    },
    {
        "line": 86,
        "fullcodeline": "arenaobj->pool_address += POOL_SIZE - excess;"
    },
    {
        "line": 24,
        "fullcodeline": "if (numarenas <= maxarenas)"
    },
    {
        "line": 27,
        "fullcodeline": "if (numarenas > SIZE_MAX / sizeof(*arenas))"
    },
    {
        "line": 32,
        "fullcodeline": "if (arenaobj == NULL)"
    },
    {
        "line": 46,
        "fullcodeline": "for (i = maxarenas; i < numarenas; ++i) {"
    },
    {
        "line": 47,
        "fullcodeline": "arenas[i].address = 0;              /* mark as unassociated */"
    },
    {
        "line": 48,
        "fullcodeline": "arenas[i].nextarena = i < numarenas - 1 ?"
    },
    {
        "line": 49,
        "fullcodeline": "&arenas[i+1] : NULL;"
    }
]