[
    {
        "line": 3,
        "fullcodeline": "debug_alloc_api_t *api = (debug_alloc_api_t *)ctx;"
    },
    {
        "line": 4,
        "fullcodeline": "uint8_t *q = (uint8_t *)p, *oldq;"
    },
    {
        "line": 13,
        "fullcodeline": "_PyMem_DebugCheckAddress(api->api_id, p);"
    },
    {
        "line": 14,
        "fullcodeline": "bumpserialno();"
    },
    {
        "line": 15,
        "fullcodeline": "original_nbytes = read_size_t(q - 2*SST);"
    },
    {
        "line": 16,
        "fullcodeline": "total = nbytes + 4*SST;"
    },
    {
        "line": 25,
        "fullcodeline": "oldq = q;"
    },
    {
        "line": 26,
        "fullcodeline": "q = (uint8_t *)api->alloc.realloc(api->alloc.ctx, q - 2*SST, total);"
    },
    {
        "line": 35,
        "fullcodeline": "write_size_t(q, nbytes);"
    },
    {
        "line": 36,
        "fullcodeline": "assert(q[SST] == (uint8_t)api->api_id);"
    },
    {
        "line": 39,
        "fullcodeline": "q += 2*SST;"
    },
    {
        "line": 41,
        "fullcodeline": "tail = q + nbytes;"
    },
    {
        "line": 42,
        "fullcodeline": "memset(tail, FORBIDDENBYTE, SST);"
    },
    {
        "line": 43,
        "fullcodeline": "write_size_t(tail + SST, serialno);"
    },
    {
        "line": 10,
        "fullcodeline": "if (p == NULL)"
    },
    {
        "line": 17,
        "fullcodeline": "if (nbytes > PY_SSIZE_T_MAX - 4*SST)"
    },
    {
        "line": 27,
        "fullcodeline": "if (q == NULL)"
    },
    {
        "line": 30,
        "fullcodeline": "if (q == oldq && nbytes < original_nbytes) {"
    },
    {
        "line": 37,
        "fullcodeline": "for (i = 1; i < SST; ++i)"
    },
    {
        "line": 38,
        "fullcodeline": "assert(q[SST + i] == FORBIDDENBYTE);"
    },
    {
        "line": 45,
        "fullcodeline": "if (nbytes > original_nbytes) {"
    },
    {
        "line": 32,
        "fullcodeline": "memset(q + nbytes, DEADBYTE, original_nbytes - nbytes);"
    },
    {
        "line": 47,
        "fullcodeline": "memset(q + original_nbytes, CLEANBYTE,"
    },
    {
        "line": 11,
        "fullcodeline": "return _PyMem_DebugRawAlloc(0, ctx, nbytes);"
    },
    {
        "line": 48,
        "fullcodeline": "nbytes - original_nbytes);"
    }
]