[
    {
        "line": 5,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject *)Add_type);"
    },
    {
        "line": 13,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject *)Sub_type);"
    },
    {
        "line": 21,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject *)Mult_type);"
    },
    {
        "line": 29,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject *)MatMult_type);"
    },
    {
        "line": 37,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject *)Div_type);"
    },
    {
        "line": 45,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject *)Mod_type);"
    },
    {
        "line": 53,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject *)Pow_type);"
    },
    {
        "line": 61,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject *)LShift_type);"
    },
    {
        "line": 69,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject *)RShift_type);"
    },
    {
        "line": 77,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject *)BitOr_type);"
    },
    {
        "line": 85,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject *)BitXor_type);"
    },
    {
        "line": 93,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject *)BitAnd_type);"
    },
    {
        "line": 101,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject *)FloorDiv_type);"
    },
    {
        "line": 110,
        "fullcodeline": "PyErr_Format(PyExc_TypeError, \"expected some sort of operator, but got %R\", obj);"
    },
    {
        "line": 6,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 14,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 22,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 30,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 38,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 46,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 70,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 78,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 94,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 102,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 10,
        "fullcodeline": "*out = Add;"
    },
    {
        "line": 18,
        "fullcodeline": "*out = Sub;"
    },
    {
        "line": 26,
        "fullcodeline": "*out = Mult;"
    },
    {
        "line": 34,
        "fullcodeline": "*out = MatMult;"
    },
    {
        "line": 42,
        "fullcodeline": "*out = Div;"
    },
    {
        "line": 50,
        "fullcodeline": "*out = Mod;"
    },
    {
        "line": 58,
        "fullcodeline": "*out = Pow;"
    },
    {
        "line": 66,
        "fullcodeline": "*out = LShift;"
    },
    {
        "line": 74,
        "fullcodeline": "*out = RShift;"
    },
    {
        "line": 82,
        "fullcodeline": "*out = BitOr;"
    },
    {
        "line": 90,
        "fullcodeline": "*out = BitXor;"
    },
    {
        "line": 98,
        "fullcodeline": "*out = BitAnd;"
    },
    {
        "line": 106,
        "fullcodeline": "*out = FloorDiv;"
    }
]