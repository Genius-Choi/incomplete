[
    {
        "line": 3,
        "fullcodeline": "int nbits = nf->nf_nstates;"
    },
    {
        "line": 12,
        "fullcodeline": "ss = newbitset(nbits);"
    },
    {
        "line": 13,
        "fullcodeline": "addclosure(ss, nf, nf->nf_start);"
    },
    {
        "line": 14,
        "fullcodeline": "xx_state = (ss_state *)PyObject_MALLOC(sizeof(ss_state));"
    },
    {
        "line": 17,
        "fullcodeline": "xx_nstates = 1;"
    },
    {
        "line": 18,
        "fullcodeline": "yy = &xx_state[0];"
    },
    {
        "line": 19,
        "fullcodeline": "yy->ss_ss = ss;"
    },
    {
        "line": 20,
        "fullcodeline": "yy->ss_narcs = 0;"
    },
    {
        "line": 21,
        "fullcodeline": "yy->ss_arc = NULL;"
    },
    {
        "line": 22,
        "fullcodeline": "yy->ss_deleted = 0;"
    },
    {
        "line": 23,
        "fullcodeline": "yy->ss_finish = testbit(ss, nf->nf_finish);"
    },
    {
        "line": 97,
        "fullcodeline": "simplify(xx_nstates, xx_state);"
    },
    {
        "line": 103,
        "fullcodeline": "convert(d, xx_nstates, xx_state);"
    },
    {
        "line": 110,
        "fullcodeline": "PyObject_FREE(xx_state);"
    },
    {
        "line": 15,
        "fullcodeline": "if (xx_state == NULL)"
    },
    {
        "line": 32,
        "fullcodeline": "for (istate = 0; istate < xx_nstates; ++istate) {"
    },
    {
        "line": 105,
        "fullcodeline": "for (int i = 0; i < xx_nstates; i++) {"
    },
    {
        "line": 16,
        "fullcodeline": "Py_FatalError(\"no mem for xx_state in makedfa\");"
    },
    {
        "line": 25,
        "fullcodeline": "printf(\"Error: nonterminal '%s' may produce empty.\\n\","
    },
    {
        "line": 34,
        "fullcodeline": "yy = &xx_state[istate];"
    },
    {
        "line": 35,
        "fullcodeline": "ss = yy->ss_ss;"
    },
    {
        "line": 94,
        "fullcodeline": "printssdfa(xx_nstates, xx_state, nbits, &gr->gr_ll,"
    },
    {
        "line": 100,
        "fullcodeline": "printssdfa(xx_nstates, xx_state, nbits, &gr->gr_ll,"
    },
    {
        "line": 108,
        "fullcodeline": "PyObject_FREE(xx_state[i].ss_arc);"
    },
    {
        "line": 37,
        "fullcodeline": "for (ibit = 0; ibit < nf->nf_nstates; ++ibit) {"
    },
    {
        "line": 68,
        "fullcodeline": "for (jarc = 0; jarc < xx_state[istate].ss_narcs; jarc++) {"
    },
    {
        "line": 106,
        "fullcodeline": "for (int j = 0; j < xx_state[i].ss_narcs; j++)"
    },
    {
        "line": 107,
        "fullcodeline": "delbitset(xx_state[i].ss_arc[j].sa_bitset);"
    },
    {
        "line": 40,
        "fullcodeline": "st = &nf->nf_state[ibit];"
    },
    {
        "line": 69,
        "fullcodeline": "zz = &xx_state[istate].ss_arc[jarc];"
    },
    {
        "line": 77,
        "fullcodeline": "size = sizeof(ss_state) * (xx_nstates + 1);"
    },
    {
        "line": 78,
        "fullcodeline": "xx_state = (ss_state *)PyObject_REALLOC(xx_state,"
    },
    {
        "line": 82,
        "fullcodeline": "zz->sa_arrow = xx_nstates;"
    },
    {
        "line": 83,
        "fullcodeline": "yy = &xx_state[xx_nstates++];"
    },
    {
        "line": 84,
        "fullcodeline": "yy->ss_ss = zz->sa_bitset;"
    },
    {
        "line": 85,
        "fullcodeline": "yy->ss_narcs = 0;"
    },
    {
        "line": 86,
        "fullcodeline": "yy->ss_arc = NULL;"
    },
    {
        "line": 87,
        "fullcodeline": "yy->ss_deleted = 0;"
    },
    {
        "line": 88,
        "fullcodeline": "yy->ss_finish = testbit(yy->ss_ss, nf->nf_finish);"
    },
    {
        "line": 38,
        "fullcodeline": "if (!testbit(ss, ibit))"
    },
    {
        "line": 42,
        "fullcodeline": "for (iarc = 0; iarc < st->st_narcs; iarc++) {"
    },
    {
        "line": 70,
        "fullcodeline": "for (jstate = 0; jstate < xx_nstates; jstate++) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (xx_state == NULL)"
    },
    {
        "line": 43,
        "fullcodeline": "ar = &st->st_arc[iarc];"
    },
    {
        "line": 53,
        "fullcodeline": "size = sizeof(ss_arc) * (yy->ss_narcs + 1);"
    },
    {
        "line": 54,
        "fullcodeline": "yy->ss_arc = (ss_arc *)PyObject_REALLOC("
    },
    {
        "line": 58,
        "fullcodeline": "zz = &yy->ss_arc[yy->ss_narcs++];"
    },
    {
        "line": 59,
        "fullcodeline": "zz->sa_label = ar->ar_label;"
    },
    {
        "line": 60,
        "fullcodeline": "zz->sa_bitset = newbitset(nbits);"
    },
    {
        "line": 61,
        "fullcodeline": "zz->sa_arrow = -1;"
    },
    {
        "line": 64,
        "fullcodeline": "addclosure(zz->sa_bitset, nf, ar->ar_arrow);"
    },
    {
        "line": 81,
        "fullcodeline": "Py_FatalError(\"out of mem\");"
    },
    {
        "line": 44,
        "fullcodeline": "if (ar->ar_label == EMPTY)"
    },
    {
        "line": 47,
        "fullcodeline": "for (jarc = 0; jarc < yy->ss_narcs; ++jarc) {"
    },
    {
        "line": 56,
        "fullcodeline": "if (yy->ss_arc == NULL)"
    },
    {
        "line": 71,
        "fullcodeline": "if (samebitset(zz->sa_bitset,"
    },
    {
        "line": 48,
        "fullcodeline": "zz = &yy->ss_arc[jarc];"
    },
    {
        "line": 57,
        "fullcodeline": "Py_FatalError(\"out of mem\");"
    },
    {
        "line": 73,
        "fullcodeline": "zz->sa_arrow = jstate;"
    },
    {
        "line": 49,
        "fullcodeline": "if (ar->ar_label == zz->sa_label)"
    }
]