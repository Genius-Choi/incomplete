[
    {
        "line": 3,
        "fullcodeline": "const uint8_t *q = (const uint8_t *)p;"
    },
    {
        "line": 10,
        "fullcodeline": "fprintf(stderr, \"Debug memory block at address p=%p:\", p);"
    },
    {
        "line": 15,
        "fullcodeline": "id = (char)q[-SST];"
    },
    {
        "line": 16,
        "fullcodeline": "fprintf(stderr, \" API '%c'\\n\", id);"
    },
    {
        "line": 18,
        "fullcodeline": "nbytes = read_size_t(q - 2*SST);"
    },
    {
        "line": 23,
        "fullcodeline": "fprintf(stderr, \"    The %d pad bytes at p-%d are \", SST-1, SST-1);"
    },
    {
        "line": 50,
        "fullcodeline": "tail = q + nbytes;"
    },
    {
        "line": 51,
        "fullcodeline": "fprintf(stderr, \"    The %d pad bytes at tail=%p are \", SST, tail);"
    },
    {
        "line": 100,
        "fullcodeline": "fputc('\\n', stderr);"
    },
    {
        "line": 102,
        "fullcodeline": "fflush(stderr);"
    },
    {
        "line": 11,
        "fullcodeline": "if (p == NULL) {"
    },
    {
        "line": 25,
        "fullcodeline": "for (i = 1; i <= SST-1; ++i) {"
    },
    {
        "line": 53,
        "fullcodeline": "for (i = 0; i < SST; ++i) {"
    },
    {
        "line": 74,
        "fullcodeline": "serial = read_size_t(tail + SST);"
    },
    {
        "line": 103,
        "fullcodeline": "_PyMem_DumpTraceback(fileno(stderr), p);"
    },
    {
        "line": 12,
        "fullcodeline": "fprintf(stderr, \"\\n\");"
    },
    {
        "line": 32,
        "fullcodeline": "fputs(\"FORBIDDENBYTE, as expected.\\n\", stderr);"
    },
    {
        "line": 60,
        "fullcodeline": "fputs(\"FORBIDDENBYTE, as expected.\\n\", stderr);"
    },
    {
        "line": 79,
        "fullcodeline": "i = 0;"
    },
    {
        "line": 80,
        "fullcodeline": "fputs(\"    Data at p:\", stderr);"
    },
    {
        "line": 98,
        "fullcodeline": "fputc('\\n', stderr);"
    },
    {
        "line": 26,
        "fullcodeline": "if (*(q-i) != FORBIDDENBYTE) {"
    },
    {
        "line": 34,
        "fullcodeline": "fprintf(stderr, \"not all FORBIDDENBYTE (0x%02x):\\n\","
    },
    {
        "line": 44,
        "fullcodeline": "fputs(\"    Because memory is corrupted at the start, the \""
    },
    {
        "line": 54,
        "fullcodeline": "if (tail[i] != FORBIDDENBYTE) {"
    },
    {
        "line": 62,
        "fullcodeline": "fprintf(stderr, \"not all FORBIDDENBYTE (0x%02x):\\n\","
    },
    {
        "line": 88,
        "fullcodeline": "if (q < tail) {"
    },
    {
        "line": 36,
        "fullcodeline": "for (i = SST-1; i >= 1; --i) {"
    },
    {
        "line": 64,
        "fullcodeline": "for (i = 0; i < SST; ++i) {"
    },
    {
        "line": 82,
        "fullcodeline": "while (q < tail && i < 8) {"
    },
    {
        "line": 83,
        "fullcodeline": "fprintf(stderr, \" %02x\", *q);"
    },
    {
        "line": 84,
        "fullcodeline": "++i;"
    },
    {
        "line": 85,
        "fullcodeline": "++q;"
    },
    {
        "line": 37,
        "fullcodeline": "const uint8_t byte = *(q-i);"
    },
    {
        "line": 38,
        "fullcodeline": "fprintf(stderr, \"        at p-%d: 0x%02x\", i, byte);"
    },
    {
        "line": 41,
        "fullcodeline": "fputc('\\n', stderr);"
    },
    {
        "line": 65,
        "fullcodeline": "const uint8_t byte = tail[i];"
    },
    {
        "line": 66,
        "fullcodeline": "fprintf(stderr, \"        at tail+%d: 0x%02x\","
    },
    {
        "line": 70,
        "fullcodeline": "fputc('\\n', stderr);"
    },
    {
        "line": 93,
        "fullcodeline": "while (q < tail) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (byte != FORBIDDENBYTE)"
    },
    {
        "line": 89,
        "fullcodeline": "if (tail - q > 8) {"
    },
    {
        "line": 90,
        "fullcodeline": "fputs(\" ...\", stderr);"
    },
    {
        "line": 91,
        "fullcodeline": "q = tail - 8;"
    },
    {
        "line": 94,
        "fullcodeline": "fprintf(stderr, \" %02x\", *q);"
    },
    {
        "line": 95,
        "fullcodeline": "++q;"
    },
    {
        "line": 40,
        "fullcodeline": "fputs(\" *** OUCH\", stderr);"
    },
    {
        "line": 69,
        "fullcodeline": "fputs(\" *** OUCH\", stderr);"
    }
]