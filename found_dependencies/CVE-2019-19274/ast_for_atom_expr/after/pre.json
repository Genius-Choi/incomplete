[
    {
        "line": 3,
        "fullcodeline": "int i, nch, start = 0;"
    },
    {
        "line": 6,
        "fullcodeline": "REQ(n, atom_expr);"
    },
    {
        "line": 7,
        "fullcodeline": "nch = NCH(n);"
    },
    {
        "line": 19,
        "fullcodeline": "e = ast_for_atom(c, CHILD(n, start));"
    },
    {
        "line": 9,
        "fullcodeline": "if (TYPE(CHILD(n, 0)) == AWAIT) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (!e)"
    },
    {
        "line": 22,
        "fullcodeline": "if (nch == 1)"
    },
    {
        "line": 24,
        "fullcodeline": "if (start && nch == 2) {"
    },
    {
        "line": 28,
        "fullcodeline": "for (i = start + 1; i < nch; i++) {"
    },
    {
        "line": 15,
        "fullcodeline": "start = 1;"
    },
    {
        "line": 29,
        "fullcodeline": "node *ch = CHILD(n, i);"
    },
    {
        "line": 32,
        "fullcodeline": "tmp = ast_for_trailer(c, ch, e);"
    },
    {
        "line": 35,
        "fullcodeline": "tmp->lineno = e->lineno;"
    },
    {
        "line": 36,
        "fullcodeline": "tmp->col_offset = e->col_offset;"
    },
    {
        "line": 37,
        "fullcodeline": "e = tmp;"
    },
    {
        "line": 10,
        "fullcodeline": "if (c->c_feature_version < 5) {"
    },
    {
        "line": 16,
        "fullcodeline": "assert(nch > 1);"
    },
    {
        "line": 25,
        "fullcodeline": "return Await(e, LINENO(n), n->n_col_offset, c->c_arena);"
    },
    {
        "line": 30,
        "fullcodeline": "if (TYPE(ch) != trailer)"
    },
    {
        "line": 33,
        "fullcodeline": "if (!tmp)"
    },
    {
        "line": 42,
        "fullcodeline": "return Await(e, LINENO(n), n->n_col_offset, c->c_arena);"
    },
    {
        "line": 11,
        "fullcodeline": "ast_error(c, n,"
    }
]