[
    {
        "line": 3,
        "fullcodeline": "ExprList_check_invariants(l);"
    },
    {
        "line": 34,
        "fullcodeline": "l->p[l->size++] = exp;"
    },
    {
        "line": 36,
        "fullcodeline": "ExprList_check_invariants(l);"
    },
    {
        "line": 4,
        "fullcodeline": "if (l->size >= l->allocated) {"
    },
    {
        "line": 6,
        "fullcodeline": "Py_ssize_t new_size = l->allocated * 2;"
    },
    {
        "line": 30,
        "fullcodeline": "l->allocated = new_size;"
    },
    {
        "line": 31,
        "fullcodeline": "assert(l->allocated == 2 * l->size);"
    },
    {
        "line": 9,
        "fullcodeline": "if (l->p == l->data) {"
    },
    {
        "line": 13,
        "fullcodeline": "l->p = PyMem_RawMalloc(sizeof(expr_ty) * new_size);"
    },
    {
        "line": 14,
        "fullcodeline": "if (!l->p)"
    },
    {
        "line": 17,
        "fullcodeline": "for (i = 0; i < l->size; i++)"
    },
    {
        "line": 21,
        "fullcodeline": "expr_ty *tmp = PyMem_RawRealloc(l->p, sizeof(expr_ty) * new_size);"
    },
    {
        "line": 27,
        "fullcodeline": "l->p = tmp;"
    },
    {
        "line": 22,
        "fullcodeline": "if (!tmp) {"
    },
    {
        "line": 15,
        "fullcodeline": "return -1;"
    },
    {
        "line": 23,
        "fullcodeline": "PyMem_RawFree(l->p);"
    },
    {
        "line": 24,
        "fullcodeline": "l->p = NULL;"
    },
    {
        "line": 25,
        "fullcodeline": "return -1;"
    }
]