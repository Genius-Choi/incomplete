[
    {
        "line": 5,
        "fullcodeline": "PyObject *tmp = NULL;"
    },
    {
        "line": 39,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)BoolOp_type);"
    },
    {
        "line": 94,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)BinOp_type);"
    },
    {
        "line": 146,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)UnaryOp_type);"
    },
    {
        "line": 184,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Lambda_type);"
    },
    {
        "line": 222,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)IfExp_type);"
    },
    {
        "line": 274,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Dict_type);"
    },
    {
        "line": 346,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Set_type);"
    },
    {
        "line": 387,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)ListComp_type);"
    },
    {
        "line": 442,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)SetComp_type);"
    },
    {
        "line": 497,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)DictComp_type);"
    },
    {
        "line": 566,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)GeneratorExp_type);"
    },
    {
        "line": 621,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Await_type);"
    },
    {
        "line": 645,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Yield_type);"
    },
    {
        "line": 669,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)YieldFrom_type);"
    },
    {
        "line": 693,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Compare_type);"
    },
    {
        "line": 779,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Call_type);"
    },
    {
        "line": 865,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Num_type);"
    },
    {
        "line": 889,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Str_type);"
    },
    {
        "line": 925,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)FormattedValue_type);"
    },
    {
        "line": 978,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)JoinedStr_type);"
    },
    {
        "line": 1019,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Bytes_type);"
    },
    {
        "line": 1043,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)NameConstant_type);"
    },
    {
        "line": 1067,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Ellipsis_type);"
    },
    {
        "line": 1077,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Constant_type);"
    },
    {
        "line": 1101,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Attribute_type);"
    },
    {
        "line": 1153,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Subscript_type);"
    },
    {
        "line": 1205,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Starred_type);"
    },
    {
        "line": 1243,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Name_type);"
    },
    {
        "line": 1281,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)List_type);"
    },
    {
        "line": 1336,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Tuple_type);"
    },
    {
        "line": 1392,
        "fullcodeline": "PyErr_Format(PyExc_TypeError, \"expected some sort of expr, but got %R\", obj);"
    },
    {
        "line": 1394,
        "fullcodeline": "Py_XDECREF(tmp);"
    },
    {
        "line": 9,
        "fullcodeline": "if (obj == Py_None) {"
    },
    {
        "line": 13,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_lineno, &tmp) < 0) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 95,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 147,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 185,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 223,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 275,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 347,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 388,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 443,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 498,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 567,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 622,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 646,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 670,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 694,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 780,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 866,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 890,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 926,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 979,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1020,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1044,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1068,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1078,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1102,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1154,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1206,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1244,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1282,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1337,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 10,
        "fullcodeline": "*out = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"lineno\\\" missing from expr\");"
    },
    {
        "line": 30,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"col_offset\\\" missing from expr\");"
    },
    {
        "line": 90,
        "fullcodeline": "*out = BoolOp(op, values, lineno, col_offset, arena);"
    },
    {
        "line": 142,
        "fullcodeline": "*out = BinOp(left, op, right, lineno, col_offset, arena);"
    },
    {
        "line": 180,
        "fullcodeline": "*out = UnaryOp(op, operand, lineno, col_offset, arena);"
    },
    {
        "line": 218,
        "fullcodeline": "*out = Lambda(args, body, lineno, col_offset, arena);"
    },
    {
        "line": 270,
        "fullcodeline": "*out = IfExp(test, body, orelse, lineno, col_offset, arena);"
    },
    {
        "line": 342,
        "fullcodeline": "*out = Dict(keys, values, lineno, col_offset, arena);"
    },
    {
        "line": 383,
        "fullcodeline": "*out = Set(elts, lineno, col_offset, arena);"
    },
    {
        "line": 438,
        "fullcodeline": "*out = ListComp(elt, generators, lineno, col_offset, arena);"
    },
    {
        "line": 493,
        "fullcodeline": "*out = SetComp(elt, generators, lineno, col_offset, arena);"
    },
    {
        "line": 562,
        "fullcodeline": "*out = DictComp(key, value, generators, lineno, col_offset, arena);"
    },
    {
        "line": 617,
        "fullcodeline": "*out = GeneratorExp(elt, generators, lineno, col_offset, arena);"
    },
    {
        "line": 641,
        "fullcodeline": "*out = Await(value, lineno, col_offset, arena);"
    },
    {
        "line": 665,
        "fullcodeline": "*out = Yield(value, lineno, col_offset, arena);"
    },
    {
        "line": 689,
        "fullcodeline": "*out = YieldFrom(value, lineno, col_offset, arena);"
    },
    {
        "line": 775,
        "fullcodeline": "*out = Compare(left, ops, comparators, lineno, col_offset, arena);"
    },
    {
        "line": 861,
        "fullcodeline": "*out = Call(func, args, keywords, lineno, col_offset, arena);"
    },
    {
        "line": 885,
        "fullcodeline": "*out = Num(n, lineno, col_offset, arena);"
    },
    {
        "line": 921,
        "fullcodeline": "*out = Str(s, kind, lineno, col_offset, arena);"
    },
    {
        "line": 973,
        "fullcodeline": "*out = FormattedValue(value, conversion, format_spec, lineno,"
    },
    {
        "line": 1015,
        "fullcodeline": "*out = JoinedStr(values, lineno, col_offset, arena);"
    },
    {
        "line": 1039,
        "fullcodeline": "*out = Bytes(s, lineno, col_offset, arena);"
    },
    {
        "line": 1063,
        "fullcodeline": "*out = NameConstant(value, lineno, col_offset, arena);"
    },
    {
        "line": 1073,
        "fullcodeline": "*out = Ellipsis(lineno, col_offset, arena);"
    },
    {
        "line": 1097,
        "fullcodeline": "*out = Constant(value, lineno, col_offset, arena);"
    },
    {
        "line": 1149,
        "fullcodeline": "*out = Attribute(value, attr, ctx, lineno, col_offset, arena);"
    },
    {
        "line": 1201,
        "fullcodeline": "*out = Subscript(value, slice, ctx, lineno, col_offset, arena);"
    },
    {
        "line": 1239,
        "fullcodeline": "*out = Starred(value, ctx, lineno, col_offset, arena);"
    },
    {
        "line": 1277,
        "fullcodeline": "*out = Name(id, ctx, lineno, col_offset, arena);"
    },
    {
        "line": 1332,
        "fullcodeline": "*out = List(elts, ctx, lineno, col_offset, arena);"
    },
    {
        "line": 1387,
        "fullcodeline": "*out = Tuple(elts, ctx, lineno, col_offset, arena);"
    },
    {
        "line": 22,
        "fullcodeline": "res = obj2ast_int(tmp, &lineno, arena);"
    },
    {
        "line": 24,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 35,
        "fullcodeline": "res = obj2ast_int(tmp, &col_offset, arena);"
    },
    {
        "line": 37,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 47,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_op, &tmp) < 0) {"
    },
    {
        "line": 50,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 60,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_values, &tmp) < 0) {"
    },
    {
        "line": 63,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 91,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 103,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_left, &tmp) < 0) {"
    },
    {
        "line": 106,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 116,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_op, &tmp) < 0) {"
    },
    {
        "line": 119,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 129,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_right, &tmp) < 0) {"
    },
    {
        "line": 132,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 143,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 154,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_op, &tmp) < 0) {"
    },
    {
        "line": 157,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 167,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_operand, &tmp) < 0) {"
    },
    {
        "line": 170,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 181,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 192,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_args, &tmp) < 0) {"
    },
    {
        "line": 195,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 205,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_body, &tmp) < 0) {"
    },
    {
        "line": 208,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 219,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 231,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_test, &tmp) < 0) {"
    },
    {
        "line": 234,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 244,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_body, &tmp) < 0) {"
    },
    {
        "line": 247,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 257,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_orelse, &tmp) < 0) {"
    },
    {
        "line": 260,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 271,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 282,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_keys, &tmp) < 0) {"
    },
    {
        "line": 285,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 312,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_values, &tmp) < 0) {"
    },
    {
        "line": 315,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 343,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 353,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_elts, &tmp) < 0) {"
    },
    {
        "line": 356,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 384,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 395,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_elt, &tmp) < 0) {"
    },
    {
        "line": 398,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 408,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_generators, &tmp) < 0) {"
    },
    {
        "line": 411,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 439,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 450,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_elt, &tmp) < 0) {"
    },
    {
        "line": 453,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 463,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_generators, &tmp) < 0) {"
    },
    {
        "line": 466,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 494,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 506,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_key, &tmp) < 0) {"
    },
    {
        "line": 509,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 519,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_value, &tmp) < 0) {"
    },
    {
        "line": 522,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 532,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_generators, &tmp) < 0) {"
    },
    {
        "line": 535,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 563,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 574,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_elt, &tmp) < 0) {"
    },
    {
        "line": 577,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 587,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_generators, &tmp) < 0) {"
    },
    {
        "line": 590,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 618,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 628,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_value, &tmp) < 0) {"
    },
    {
        "line": 631,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 642,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 652,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_value, &tmp) < 0) {"
    },
    {
        "line": 655,
        "fullcodeline": "if (tmp == NULL || tmp == Py_None) {"
    },
    {
        "line": 666,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 676,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_value, &tmp) < 0) {"
    },
    {
        "line": 679,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 690,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 702,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_left, &tmp) < 0) {"
    },
    {
        "line": 705,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 715,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_ops, &tmp) < 0) {"
    },
    {
        "line": 718,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 745,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_comparators, &tmp) < 0) {"
    },
    {
        "line": 748,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 776,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 788,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_func, &tmp) < 0) {"
    },
    {
        "line": 791,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 801,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_args, &tmp) < 0) {"
    },
    {
        "line": 804,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 831,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_keywords, &tmp) < 0) {"
    },
    {
        "line": 834,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 862,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 872,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_n, &tmp) < 0) {"
    },
    {
        "line": 875,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 886,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 897,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_s, &tmp) < 0) {"
    },
    {
        "line": 900,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 910,
        "fullcodeline": "if (_PyObject_HasAttrId(obj, &PyId_kind)) {"
    },
    {
        "line": 922,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 934,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_value, &tmp) < 0) {"
    },
    {
        "line": 937,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 947,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_conversion, &tmp) < 0) {"
    },
    {
        "line": 950,
        "fullcodeline": "if (tmp == NULL || tmp == Py_None) {"
    },
    {
        "line": 960,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_format_spec, &tmp) < 0) {"
    },
    {
        "line": 963,
        "fullcodeline": "if (tmp == NULL || tmp == Py_None) {"
    },
    {
        "line": 975,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 985,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_values, &tmp) < 0) {"
    },
    {
        "line": 988,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1016,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 1026,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_s, &tmp) < 0) {"
    },
    {
        "line": 1029,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1040,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 1050,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_value, &tmp) < 0) {"
    },
    {
        "line": 1053,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1064,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 1074,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 1084,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_value, &tmp) < 0) {"
    },
    {
        "line": 1087,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1098,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 1110,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_value, &tmp) < 0) {"
    },
    {
        "line": 1113,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1123,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_attr, &tmp) < 0) {"
    },
    {
        "line": 1126,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1136,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_ctx, &tmp) < 0) {"
    },
    {
        "line": 1139,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1150,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 1162,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_value, &tmp) < 0) {"
    },
    {
        "line": 1165,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1175,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_slice, &tmp) < 0) {"
    },
    {
        "line": 1178,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1188,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_ctx, &tmp) < 0) {"
    },
    {
        "line": 1191,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1202,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 1213,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_value, &tmp) < 0) {"
    },
    {
        "line": 1216,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1226,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_ctx, &tmp) < 0) {"
    },
    {
        "line": 1229,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1240,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 1251,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_id, &tmp) < 0) {"
    },
    {
        "line": 1254,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1264,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_ctx, &tmp) < 0) {"
    },
    {
        "line": 1267,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1278,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 1289,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_elts, &tmp) < 0) {"
    },
    {
        "line": 1292,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1319,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_ctx, &tmp) < 0) {"
    },
    {
        "line": 1322,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1333,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 1344,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_elts, &tmp) < 0) {"
    },
    {
        "line": 1347,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1374,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_ctx, &tmp) < 0) {"
    },
    {
        "line": 1377,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1388,
        "fullcodeline": "if (*out == NULL) goto failed;"
    },
    {
        "line": 23,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 36,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 51,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"op\\\" missing from BoolOp\");"
    },
    {
        "line": 64,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from BoolOp\");"
    },
    {
        "line": 107,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"left\\\" missing from BinOp\");"
    },
    {
        "line": 120,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"op\\\" missing from BinOp\");"
    },
    {
        "line": 133,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"right\\\" missing from BinOp\");"
    },
    {
        "line": 158,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"op\\\" missing from UnaryOp\");"
    },
    {
        "line": 171,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"operand\\\" missing from UnaryOp\");"
    },
    {
        "line": 196,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"args\\\" missing from Lambda\");"
    },
    {
        "line": 209,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"body\\\" missing from Lambda\");"
    },
    {
        "line": 235,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"test\\\" missing from IfExp\");"
    },
    {
        "line": 248,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"body\\\" missing from IfExp\");"
    },
    {
        "line": 261,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"orelse\\\" missing from IfExp\");"
    },
    {
        "line": 286,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"keys\\\" missing from Dict\");"
    },
    {
        "line": 316,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from Dict\");"
    },
    {
        "line": 357,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"elts\\\" missing from Set\");"
    },
    {
        "line": 399,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"elt\\\" missing from ListComp\");"
    },
    {
        "line": 412,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"generators\\\" missing from ListComp\");"
    },
    {
        "line": 454,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"elt\\\" missing from SetComp\");"
    },
    {
        "line": 467,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"generators\\\" missing from SetComp\");"
    },
    {
        "line": 510,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"key\\\" missing from DictComp\");"
    },
    {
        "line": 523,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"value\\\" missing from DictComp\");"
    },
    {
        "line": 536,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"generators\\\" missing from DictComp\");"
    },
    {
        "line": 578,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"elt\\\" missing from GeneratorExp\");"
    },
    {
        "line": 591,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"generators\\\" missing from GeneratorExp\");"
    },
    {
        "line": 632,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"value\\\" missing from Await\");"
    },
    {
        "line": 656,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 657,
        "fullcodeline": "value = NULL;"
    },
    {
        "line": 680,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"value\\\" missing from YieldFrom\");"
    },
    {
        "line": 706,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"left\\\" missing from Compare\");"
    },
    {
        "line": 719,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"ops\\\" missing from Compare\");"
    },
    {
        "line": 749,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"comparators\\\" missing from Compare\");"
    },
    {
        "line": 792,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"func\\\" missing from Call\");"
    },
    {
        "line": 805,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"args\\\" missing from Call\");"
    },
    {
        "line": 835,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"keywords\\\" missing from Call\");"
    },
    {
        "line": 876,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"n\\\" missing from Num\");"
    },
    {
        "line": 901,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"s\\\" missing from Str\");"
    },
    {
        "line": 912,
        "fullcodeline": "tmp = _PyObject_GetAttrId(obj, &PyId_kind);"
    },
    {
        "line": 914,
        "fullcodeline": "res = obj2ast_string(tmp, &kind, arena);"
    },
    {
        "line": 916,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 938,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"value\\\" missing from FormattedValue\");"
    },
    {
        "line": 951,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 952,
        "fullcodeline": "conversion = 0;"
    },
    {
        "line": 964,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 965,
        "fullcodeline": "format_spec = NULL;"
    },
    {
        "line": 989,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"values\\\" missing from JoinedStr\");"
    },
    {
        "line": 1030,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"s\\\" missing from Bytes\");"
    },
    {
        "line": 1054,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"value\\\" missing from NameConstant\");"
    },
    {
        "line": 1088,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"value\\\" missing from Constant\");"
    },
    {
        "line": 1114,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"value\\\" missing from Attribute\");"
    },
    {
        "line": 1127,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"attr\\\" missing from Attribute\");"
    },
    {
        "line": 1140,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"ctx\\\" missing from Attribute\");"
    },
    {
        "line": 1166,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"value\\\" missing from Subscript\");"
    },
    {
        "line": 1179,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"slice\\\" missing from Subscript\");"
    },
    {
        "line": 1192,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"ctx\\\" missing from Subscript\");"
    },
    {
        "line": 1217,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"value\\\" missing from Starred\");"
    },
    {
        "line": 1230,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"ctx\\\" missing from Starred\");"
    },
    {
        "line": 1255,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"id\\\" missing from Name\");"
    },
    {
        "line": 1268,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"ctx\\\" missing from Name\");"
    },
    {
        "line": 1293,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"elts\\\" missing from List\");"
    },
    {
        "line": 1323,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"ctx\\\" missing from List\");"
    },
    {
        "line": 1348,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"elts\\\" missing from Tuple\");"
    },
    {
        "line": 1378,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"ctx\\\" missing from Tuple\");"
    },
    {
        "line": 56,
        "fullcodeline": "res = obj2ast_boolop(tmp, &op, arena);"
    },
    {
        "line": 58,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 75,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 76,
        "fullcodeline": "values = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 88,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 112,
        "fullcodeline": "res = obj2ast_expr(tmp, &left, arena);"
    },
    {
        "line": 114,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 125,
        "fullcodeline": "res = obj2ast_operator(tmp, &op, arena);"
    },
    {
        "line": 127,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 138,
        "fullcodeline": "res = obj2ast_expr(tmp, &right, arena);"
    },
    {
        "line": 140,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 163,
        "fullcodeline": "res = obj2ast_unaryop(tmp, &op, arena);"
    },
    {
        "line": 165,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 176,
        "fullcodeline": "res = obj2ast_expr(tmp, &operand, arena);"
    },
    {
        "line": 178,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 201,
        "fullcodeline": "res = obj2ast_arguments(tmp, &args, arena);"
    },
    {
        "line": 203,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 214,
        "fullcodeline": "res = obj2ast_expr(tmp, &body, arena);"
    },
    {
        "line": 216,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 240,
        "fullcodeline": "res = obj2ast_expr(tmp, &test, arena);"
    },
    {
        "line": 242,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 253,
        "fullcodeline": "res = obj2ast_expr(tmp, &body, arena);"
    },
    {
        "line": 255,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 266,
        "fullcodeline": "res = obj2ast_expr(tmp, &orelse, arena);"
    },
    {
        "line": 268,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 297,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 298,
        "fullcodeline": "keys = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 310,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 327,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 328,
        "fullcodeline": "values = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 340,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 368,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 369,
        "fullcodeline": "elts = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 381,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 404,
        "fullcodeline": "res = obj2ast_expr(tmp, &elt, arena);"
    },
    {
        "line": 406,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 423,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 424,
        "fullcodeline": "generators = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 436,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 459,
        "fullcodeline": "res = obj2ast_expr(tmp, &elt, arena);"
    },
    {
        "line": 461,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 478,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 479,
        "fullcodeline": "generators = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 491,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 515,
        "fullcodeline": "res = obj2ast_expr(tmp, &key, arena);"
    },
    {
        "line": 517,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 528,
        "fullcodeline": "res = obj2ast_expr(tmp, &value, arena);"
    },
    {
        "line": 530,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 547,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 548,
        "fullcodeline": "generators = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 560,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 583,
        "fullcodeline": "res = obj2ast_expr(tmp, &elt, arena);"
    },
    {
        "line": 585,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 602,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 603,
        "fullcodeline": "generators = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 615,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 637,
        "fullcodeline": "res = obj2ast_expr(tmp, &value, arena);"
    },
    {
        "line": 639,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 661,
        "fullcodeline": "res = obj2ast_expr(tmp, &value, arena);"
    },
    {
        "line": 663,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 685,
        "fullcodeline": "res = obj2ast_expr(tmp, &value, arena);"
    },
    {
        "line": 687,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 711,
        "fullcodeline": "res = obj2ast_expr(tmp, &left, arena);"
    },
    {
        "line": 713,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 730,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 731,
        "fullcodeline": "ops = _Ta3_asdl_int_seq_new(len, arena);"
    },
    {
        "line": 743,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 760,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 761,
        "fullcodeline": "comparators = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 773,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 797,
        "fullcodeline": "res = obj2ast_expr(tmp, &func, arena);"
    },
    {
        "line": 799,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 816,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 817,
        "fullcodeline": "args = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 829,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 846,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 847,
        "fullcodeline": "keywords = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 859,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 881,
        "fullcodeline": "res = obj2ast_object(tmp, &n, arena);"
    },
    {
        "line": 883,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 906,
        "fullcodeline": "res = obj2ast_string(tmp, &s, arena);"
    },
    {
        "line": 908,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 913,
        "fullcodeline": "if (tmp == NULL) goto failed;"
    },
    {
        "line": 915,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 918,
        "fullcodeline": "PyErr_SetString(PyExc_TypeError, \"required field \\\"kind\\\" missing from Str\");"
    },
    {
        "line": 943,
        "fullcodeline": "res = obj2ast_expr(tmp, &value, arena);"
    },
    {
        "line": 945,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 956,
        "fullcodeline": "res = obj2ast_int(tmp, &conversion, arena);"
    },
    {
        "line": 958,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 969,
        "fullcodeline": "res = obj2ast_expr(tmp, &format_spec, arena);"
    },
    {
        "line": 971,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1000,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 1001,
        "fullcodeline": "values = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 1013,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1035,
        "fullcodeline": "res = obj2ast_bytes(tmp, &s, arena);"
    },
    {
        "line": 1037,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1059,
        "fullcodeline": "res = obj2ast_singleton(tmp, &value, arena);"
    },
    {
        "line": 1061,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1093,
        "fullcodeline": "res = obj2ast_constant(tmp, &value, arena);"
    },
    {
        "line": 1095,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1119,
        "fullcodeline": "res = obj2ast_expr(tmp, &value, arena);"
    },
    {
        "line": 1121,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1132,
        "fullcodeline": "res = obj2ast_identifier(tmp, &attr, arena);"
    },
    {
        "line": 1134,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1145,
        "fullcodeline": "res = obj2ast_expr_context(tmp, &ctx, arena);"
    },
    {
        "line": 1147,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1171,
        "fullcodeline": "res = obj2ast_expr(tmp, &value, arena);"
    },
    {
        "line": 1173,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1184,
        "fullcodeline": "res = obj2ast_slice(tmp, &slice, arena);"
    },
    {
        "line": 1186,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1197,
        "fullcodeline": "res = obj2ast_expr_context(tmp, &ctx, arena);"
    },
    {
        "line": 1199,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1222,
        "fullcodeline": "res = obj2ast_expr(tmp, &value, arena);"
    },
    {
        "line": 1224,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1235,
        "fullcodeline": "res = obj2ast_expr_context(tmp, &ctx, arena);"
    },
    {
        "line": 1237,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1260,
        "fullcodeline": "res = obj2ast_identifier(tmp, &id, arena);"
    },
    {
        "line": 1262,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1273,
        "fullcodeline": "res = obj2ast_expr_context(tmp, &ctx, arena);"
    },
    {
        "line": 1275,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1304,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 1305,
        "fullcodeline": "elts = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 1317,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1328,
        "fullcodeline": "res = obj2ast_expr_context(tmp, &ctx, arena);"
    },
    {
        "line": 1330,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1359,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 1360,
        "fullcodeline": "elts = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 1372,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1383,
        "fullcodeline": "res = obj2ast_expr_context(tmp, &ctx, arena);"
    },
    {
        "line": 1385,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 57,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 71,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (values == NULL) goto failed;"
    },
    {
        "line": 78,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 113,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 126,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 139,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 164,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 177,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 202,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 215,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 241,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 254,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 267,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 293,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 299,
        "fullcodeline": "if (keys == NULL) goto failed;"
    },
    {
        "line": 300,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 323,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 329,
        "fullcodeline": "if (values == NULL) goto failed;"
    },
    {
        "line": 330,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 364,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 370,
        "fullcodeline": "if (elts == NULL) goto failed;"
    },
    {
        "line": 371,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 405,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 419,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 425,
        "fullcodeline": "if (generators == NULL) goto failed;"
    },
    {
        "line": 426,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 460,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 474,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 480,
        "fullcodeline": "if (generators == NULL) goto failed;"
    },
    {
        "line": 481,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 516,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 529,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 543,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 549,
        "fullcodeline": "if (generators == NULL) goto failed;"
    },
    {
        "line": 550,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 584,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 598,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 604,
        "fullcodeline": "if (generators == NULL) goto failed;"
    },
    {
        "line": 605,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 638,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 662,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 686,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 712,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 726,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 732,
        "fullcodeline": "if (ops == NULL) goto failed;"
    },
    {
        "line": 733,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 756,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 762,
        "fullcodeline": "if (comparators == NULL) goto failed;"
    },
    {
        "line": 763,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 798,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 812,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 818,
        "fullcodeline": "if (args == NULL) goto failed;"
    },
    {
        "line": 819,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 842,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 848,
        "fullcodeline": "if (keywords == NULL) goto failed;"
    },
    {
        "line": 849,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 882,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 907,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 944,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 957,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 970,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 996,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 1002,
        "fullcodeline": "if (values == NULL) goto failed;"
    },
    {
        "line": 1003,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 1036,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 1060,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 1094,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 1120,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 1133,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 1146,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 1172,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 1185,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 1198,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 1223,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 1236,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 1261,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 1274,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 1300,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 1306,
        "fullcodeline": "if (elts == NULL) goto failed;"
    },
    {
        "line": 1307,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 1329,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 1355,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 1361,
        "fullcodeline": "if (elts == NULL) goto failed;"
    },
    {
        "line": 1362,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 1384,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 72,
        "fullcodeline": "PyErr_Format(PyExc_TypeError, \"BoolOp field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"
    },
    {
        "line": 80,
        "fullcodeline": "res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 86,
        "fullcodeline": "asdl_seq_SET(values, i, val);"
    },
    {
        "line": 294,
        "fullcodeline": "PyErr_Format(PyExc_TypeError, \"Dict field \\\"keys\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"
    },
    {
        "line": 302,
        "fullcodeline": "res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 308,
        "fullcodeline": "asdl_seq_SET(keys, i, val);"
    },
    {
        "line": 324,
        "fullcodeline": "PyErr_Format(PyExc_TypeError, \"Dict field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"
    },
    {
        "line": 332,
        "fullcodeline": "res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 338,
        "fullcodeline": "asdl_seq_SET(values, i, val);"
    },
    {
        "line": 365,
        "fullcodeline": "PyErr_Format(PyExc_TypeError, \"Set field \\\"elts\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"
    },
    {
        "line": 373,
        "fullcodeline": "res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 379,
        "fullcodeline": "asdl_seq_SET(elts, i, val);"
    },
    {
        "line": 420,
        "fullcodeline": "PyErr_Format(PyExc_TypeError, \"ListComp field \\\"generators\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"
    },
    {
        "line": 428,
        "fullcodeline": "res = obj2ast_comprehension(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 434,
        "fullcodeline": "asdl_seq_SET(generators, i, val);"
    },
    {
        "line": 475,
        "fullcodeline": "PyErr_Format(PyExc_TypeError, \"SetComp field \\\"generators\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"
    },
    {
        "line": 483,
        "fullcodeline": "res = obj2ast_comprehension(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 489,
        "fullcodeline": "asdl_seq_SET(generators, i, val);"
    },
    {
        "line": 544,
        "fullcodeline": "PyErr_Format(PyExc_TypeError, \"DictComp field \\\"generators\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"
    },
    {
        "line": 552,
        "fullcodeline": "res = obj2ast_comprehension(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 558,
        "fullcodeline": "asdl_seq_SET(generators, i, val);"
    },
    {
        "line": 599,
        "fullcodeline": "PyErr_Format(PyExc_TypeError, \"GeneratorExp field \\\"generators\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"
    },
    {
        "line": 607,
        "fullcodeline": "res = obj2ast_comprehension(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 613,
        "fullcodeline": "asdl_seq_SET(generators, i, val);"
    },
    {
        "line": 727,
        "fullcodeline": "PyErr_Format(PyExc_TypeError, \"Compare field \\\"ops\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"
    },
    {
        "line": 735,
        "fullcodeline": "res = obj2ast_cmpop(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 741,
        "fullcodeline": "asdl_seq_SET(ops, i, val);"
    },
    {
        "line": 757,
        "fullcodeline": "PyErr_Format(PyExc_TypeError, \"Compare field \\\"comparators\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"
    },
    {
        "line": 765,
        "fullcodeline": "res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 771,
        "fullcodeline": "asdl_seq_SET(comparators, i, val);"
    },
    {
        "line": 813,
        "fullcodeline": "PyErr_Format(PyExc_TypeError, \"Call field \\\"args\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"
    },
    {
        "line": 821,
        "fullcodeline": "res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 827,
        "fullcodeline": "asdl_seq_SET(args, i, val);"
    },
    {
        "line": 843,
        "fullcodeline": "PyErr_Format(PyExc_TypeError, \"Call field \\\"keywords\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"
    },
    {
        "line": 851,
        "fullcodeline": "res = obj2ast_keyword(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 857,
        "fullcodeline": "asdl_seq_SET(keywords, i, val);"
    },
    {
        "line": 997,
        "fullcodeline": "PyErr_Format(PyExc_TypeError, \"JoinedStr field \\\"values\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"
    },
    {
        "line": 1005,
        "fullcodeline": "res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 1011,
        "fullcodeline": "asdl_seq_SET(values, i, val);"
    },
    {
        "line": 1301,
        "fullcodeline": "PyErr_Format(PyExc_TypeError, \"List field \\\"elts\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"
    },
    {
        "line": 1309,
        "fullcodeline": "res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 1315,
        "fullcodeline": "asdl_seq_SET(elts, i, val);"
    },
    {
        "line": 1356,
        "fullcodeline": "PyErr_Format(PyExc_TypeError, \"Tuple field \\\"elts\\\" must be a list, not a %.200s\", tmp->ob_type->tp_name);"
    },
    {
        "line": 1364,
        "fullcodeline": "res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 1370,
        "fullcodeline": "asdl_seq_SET(elts, i, val);"
    },
    {
        "line": 81,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 82,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 303,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 304,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 333,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 334,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 374,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 375,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 429,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 430,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 484,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 485,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 553,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 554,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 608,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 609,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 736,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 737,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 766,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 767,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 822,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 823,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 852,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 853,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 1006,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 1007,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 1310,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 1311,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 1365,
        "fullcodeline": "if (res != 0) goto failed;"
    },
    {
        "line": 1366,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 83,
        "fullcodeline": "PyErr_SetString(PyExc_RuntimeError, \"BoolOp field \\\"values\\\" changed size during iteration\");"
    },
    {
        "line": 305,
        "fullcodeline": "PyErr_SetString(PyExc_RuntimeError, \"Dict field \\\"keys\\\" changed size during iteration\");"
    },
    {
        "line": 335,
        "fullcodeline": "PyErr_SetString(PyExc_RuntimeError, \"Dict field \\\"values\\\" changed size during iteration\");"
    },
    {
        "line": 376,
        "fullcodeline": "PyErr_SetString(PyExc_RuntimeError, \"Set field \\\"elts\\\" changed size during iteration\");"
    },
    {
        "line": 431,
        "fullcodeline": "PyErr_SetString(PyExc_RuntimeError, \"ListComp field \\\"generators\\\" changed size during iteration\");"
    },
    {
        "line": 486,
        "fullcodeline": "PyErr_SetString(PyExc_RuntimeError, \"SetComp field \\\"generators\\\" changed size during iteration\");"
    },
    {
        "line": 555,
        "fullcodeline": "PyErr_SetString(PyExc_RuntimeError, \"DictComp field \\\"generators\\\" changed size during iteration\");"
    },
    {
        "line": 610,
        "fullcodeline": "PyErr_SetString(PyExc_RuntimeError, \"GeneratorExp field \\\"generators\\\" changed size during iteration\");"
    },
    {
        "line": 738,
        "fullcodeline": "PyErr_SetString(PyExc_RuntimeError, \"Compare field \\\"ops\\\" changed size during iteration\");"
    },
    {
        "line": 768,
        "fullcodeline": "PyErr_SetString(PyExc_RuntimeError, \"Compare field \\\"comparators\\\" changed size during iteration\");"
    },
    {
        "line": 824,
        "fullcodeline": "PyErr_SetString(PyExc_RuntimeError, \"Call field \\\"args\\\" changed size during iteration\");"
    },
    {
        "line": 854,
        "fullcodeline": "PyErr_SetString(PyExc_RuntimeError, \"Call field \\\"keywords\\\" changed size during iteration\");"
    },
    {
        "line": 1008,
        "fullcodeline": "PyErr_SetString(PyExc_RuntimeError, \"JoinedStr field \\\"values\\\" changed size during iteration\");"
    },
    {
        "line": 1312,
        "fullcodeline": "PyErr_SetString(PyExc_RuntimeError, \"List field \\\"elts\\\" changed size during iteration\");"
    },
    {
        "line": 1367,
        "fullcodeline": "PyErr_SetString(PyExc_RuntimeError, \"Tuple field \\\"elts\\\" changed size during iteration\");"
    }
]