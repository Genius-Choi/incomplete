[
    {
        "line": 3,
        "fullcodeline": "if (TYPE(n) == stmt) {"
    },
    {
        "line": 7,
        "fullcodeline": "if (TYPE(n) == simple_stmt) {"
    },
    {
        "line": 11,
        "fullcodeline": "if (TYPE(n) == small_stmt) {"
    },
    {
        "line": 4,
        "fullcodeline": "assert(NCH(n) == 1);"
    },
    {
        "line": 5,
        "fullcodeline": "n = CHILD(n, 0);"
    },
    {
        "line": 8,
        "fullcodeline": "assert(num_stmts(n) == 1);"
    },
    {
        "line": 9,
        "fullcodeline": "n = CHILD(n, 0);"
    },
    {
        "line": 12,
        "fullcodeline": "n = CHILD(n, 0);"
    },
    {
        "line": 16,
        "fullcodeline": "switch (TYPE(n)) {"
    },
    {
        "line": 44,
        "fullcodeline": "node *ch = CHILD(n, 0);"
    },
    {
        "line": 45,
        "fullcodeline": "REQ(n, compound_stmt);"
    },
    {
        "line": 46,
        "fullcodeline": "switch (TYPE(ch)) {"
    },
    {
        "line": 18,
        "fullcodeline": "return ast_for_expr_stmt(c, n);"
    },
    {
        "line": 20,
        "fullcodeline": "return ast_for_del_stmt(c, n);"
    },
    {
        "line": 22,
        "fullcodeline": "return Pass(LINENO(n), n->n_col_offset, c->c_arena);"
    },
    {
        "line": 24,
        "fullcodeline": "return ast_for_flow_stmt(c, n);"
    },
    {
        "line": 26,
        "fullcodeline": "return ast_for_import_stmt(c, n);"
    },
    {
        "line": 28,
        "fullcodeline": "return ast_for_global_stmt(c, n);"
    },
    {
        "line": 30,
        "fullcodeline": "return ast_for_nonlocal_stmt(c, n);"
    },
    {
        "line": 32,
        "fullcodeline": "return ast_for_assert_stmt(c, n);"
    },
    {
        "line": 36,
        "fullcodeline": "TYPE(n), NCH(n));"
    },
    {
        "line": 48,
        "fullcodeline": "return ast_for_if_stmt(c, ch);"
    },
    {
        "line": 50,
        "fullcodeline": "return ast_for_while_stmt(c, ch);"
    },
    {
        "line": 52,
        "fullcodeline": "return ast_for_for_stmt(c, ch, 0);"
    },
    {
        "line": 54,
        "fullcodeline": "return ast_for_try_stmt(c, ch);"
    },
    {
        "line": 56,
        "fullcodeline": "return ast_for_with_stmt(c, ch, 0);"
    },
    {
        "line": 58,
        "fullcodeline": "return ast_for_funcdef(c, ch, NULL);"
    },
    {
        "line": 60,
        "fullcodeline": "return ast_for_classdef(c, ch, NULL);"
    },
    {
        "line": 62,
        "fullcodeline": "return ast_for_decorated(c, ch);"
    },
    {
        "line": 64,
        "fullcodeline": "return ast_for_async_stmt(c, ch);"
    },
    {
        "line": 68,
        "fullcodeline": "TYPE(n), NCH(n));"
    }
]