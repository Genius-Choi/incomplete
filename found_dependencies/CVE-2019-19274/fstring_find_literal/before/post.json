[
    {
        "line": 11,
        "fullcodeline": "int in_named_escape = 0;"
    },
    {
        "line": 12,
        "fullcodeline": "int result = 0;"
    },
    {
        "line": 14,
        "fullcodeline": "assert(*literal == NULL);"
    },
    {
        "line": 50,
        "fullcodeline": "literal_end = *str;"
    },
    {
        "line": 51,
        "fullcodeline": "assert(*str <= end);"
    },
    {
        "line": 52,
        "fullcodeline": "assert(*str == end || **str == '{' || **str == '}');"
    },
    {
        "line": 15,
        "fullcodeline": "for (; *str < end; (*str)++) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (literal_start != literal_end) {"
    },
    {
        "line": 17,
        "fullcodeline": "if (!in_named_escape && ch == '{' && (*str)-literal_start >= 2 &&"
    },
    {
        "line": 62,
        "fullcodeline": "if (!*literal)"
    },
    {
        "line": 18,
        "fullcodeline": "*(*str-2) == '\\\\' && *(*str-1) == 'N') {"
    },
    {
        "line": 19,
        "fullcodeline": "in_named_escape = 1;"
    },
    {
        "line": 56,
        "fullcodeline": "*literal = PyUnicode_DecodeUTF8Stateful(literal_start,"
    },
    {
        "line": 60,
        "fullcodeline": "*literal = decode_unicode_with_escapes(c, n, literal_start,"
    },
    {
        "line": 63,
        "fullcodeline": "return -1;"
    },
    {
        "line": 20,
        "fullcodeline": "} else if (in_named_escape && ch == '}') {"
    },
    {
        "line": 57,
        "fullcodeline": "literal_end-literal_start,"
    },
    {
        "line": 21,
        "fullcodeline": "in_named_escape = 0;"
    },
    {
        "line": 61,
        "fullcodeline": "literal_end-literal_start);"
    },
    {
        "line": 22,
        "fullcodeline": "} else if (ch == '{' || ch == '}') {"
    },
    {
        "line": 26,
        "fullcodeline": "if (recurse_lvl == 0) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (*str+1 < end && *(*str+1) == ch) {"
    },
    {
        "line": 39,
        "fullcodeline": "if (ch == '}') {"
    },
    {
        "line": 31,
        "fullcodeline": "literal_end = *str+1;"
    },
    {
        "line": 32,
        "fullcodeline": "*str += 2;"
    },
    {
        "line": 33,
        "fullcodeline": "result = 1;"
    },
    {
        "line": 40,
        "fullcodeline": "ast_error(c, n, \"f-string: single '}' is not allowed\");"
    },
    {
        "line": 41,
        "fullcodeline": "return -1;"
    }
]