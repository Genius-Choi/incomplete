[
    {
        "line": 9,
        "fullcodeline": "D(printf(\"Token %s/'%s' ... \", _PyParser_TokenNames[type], str));"
    },
    {
        "line": 12,
        "fullcodeline": "ilabel = classify(ps, type, str);"
    },
    {
        "line": 13,
        "fullcodeline": "if (ilabel < 0)"
    },
    {
        "line": 19,
        "fullcodeline": "dfa *d = ps->p_stack.s_top->s_dfa;"
    },
    {
        "line": 20,
        "fullcodeline": "state *s = &d->d_state[ps->p_stack.s_top->s_state];"
    },
    {
        "line": 22,
        "fullcodeline": "D(printf(\" DFA '%s', state %d:\","
    },
    {
        "line": 99,
        "fullcodeline": "D(printf(\" Error.\\n\"));"
    },
    {
        "line": 26,
        "fullcodeline": "if (s->s_lower <= ilabel && ilabel < s->s_upper) {"
    },
    {
        "line": 27,
        "fullcodeline": "int x = s->s_accel[ilabel - s->s_lower];"
    },
    {
        "line": 89,
        "fullcodeline": "s_pop(&ps->p_stack);"
    },
    {
        "line": 28,
        "fullcodeline": "if (x != -1) {"
    },
    {
        "line": 90,
        "fullcodeline": "D(printf(\" Pop ...\\n\"));"
    },
    {
        "line": 91,
        "fullcodeline": "if (s_empty(&ps->p_stack)) {"
    },
    {
        "line": 101,
        "fullcodeline": "if (s->s_lower == s->s_upper - 1) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (x & (1<<7)) {"
    },
    {
        "line": 52,
        "fullcodeline": "D(printf(\" Shift.\\n\"));"
    },
    {
        "line": 92,
        "fullcodeline": "D(printf(\" Error: bottom of stack.\\n\"));"
    },
    {
        "line": 31,
        "fullcodeline": "int nt = (x >> 8) + NT_OFFSET;"
    },
    {
        "line": 32,
        "fullcodeline": "int arrow = x & ((1<<7)-1);"
    },
    {
        "line": 33,
        "fullcodeline": "dfa *d1 = PyGrammar_FindDFA("
    },
    {
        "line": 46,
        "fullcodeline": "if ((err = shift(&ps->p_stack, type, str,"
    },
    {
        "line": 54,
        "fullcodeline": "while (s = &d->d_state"
    },
    {
        "line": 69,
        "fullcodeline": "s_pop(&ps->p_stack);"
    },
    {
        "line": 74,
        "fullcodeline": "d = ps->p_stack.s_top->s_dfa;"
    },
    {
        "line": 107,
        "fullcodeline": "*expected_ret = -1;"
    },
    {
        "line": 41,
        "fullcodeline": "D(printf(\" Push ...\\n\"));"
    },
    {
        "line": 49,
        "fullcodeline": "D(printf(\" MemError: shift.\\n\"));"
    },
    {
        "line": 56,
        "fullcodeline": "s->s_accept && s->s_narcs == 1) {"
    },
    {
        "line": 57,
        "fullcodeline": "D(printf(\"  DFA '%s', state %d: \""
    },
    {
        "line": 70,
        "fullcodeline": "if (s_empty(&ps->p_stack)) {"
    },
    {
        "line": 35,
        "fullcodeline": "if ((err = push(&ps->p_stack, nt, d1,"
    },
    {
        "line": 38,
        "fullcodeline": "D(printf(\" MemError: push\\n\"));"
    },
    {
        "line": 71,
        "fullcodeline": "D(printf(\"  ACCEPT.\\n\"));"
    }
]