[
    {
        "line": 5,
        "fullcodeline": "FstringParser_check_invariants(state);"
    },
    {
        "line": 6,
        "fullcodeline": "state->fmode = 1;"
    },
    {
        "line": 82,
        "fullcodeline": "FstringParser_check_invariants(state);"
    },
    {
        "line": 73,
        "fullcodeline": "if (recurse_lvl == 0 && *str < end-1) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (recurse_lvl != 0 && **str != '}') {"
    },
    {
        "line": 10,
        "fullcodeline": "PyObject *literal = NULL;"
    },
    {
        "line": 11,
        "fullcodeline": "expr_ty expression = NULL;"
    },
    {
        "line": 17,
        "fullcodeline": "int result = fstring_find_literal_and_expr(str, end, raw, recurse_lvl,"
    },
    {
        "line": 42,
        "fullcodeline": "assert(literal == NULL);"
    },
    {
        "line": 74,
        "fullcodeline": "ast_error(c, n, \"f-string: unexpected end of string\");"
    },
    {
        "line": 78,
        "fullcodeline": "ast_error(c, n, \"f-string: expecting '}'\");"
    },
    {
        "line": 20,
        "fullcodeline": "if (result < 0)"
    },
    {
        "line": 24,
        "fullcodeline": "if (!literal) {"
    },
    {
        "line": 48,
        "fullcodeline": "if (result == 1)"
    },
    {
        "line": 51,
        "fullcodeline": "if (!expression)"
    },
    {
        "line": 57,
        "fullcodeline": "if (!state->last_str) {"
    },
    {
        "line": 66,
        "fullcodeline": "if (ExprList_Append(&state->expr_list, expression) < 0)"
    },
    {
        "line": 75,
        "fullcodeline": "return -1;"
    },
    {
        "line": 79,
        "fullcodeline": "return -1;"
    },
    {
        "line": 21,
        "fullcodeline": "return -1;"
    },
    {
        "line": 61,
        "fullcodeline": "expr_ty str = make_str_node_and_del(&state->last_str, c, n);"
    },
    {
        "line": 67,
        "fullcodeline": "return -1;"
    },
    {
        "line": 27,
        "fullcodeline": "} else if (!state->last_str) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (!str || ExprList_Append(&state->expr_list, str) < 0)"
    },
    {
        "line": 30,
        "fullcodeline": "state->last_str = literal;"
    },
    {
        "line": 31,
        "fullcodeline": "literal = NULL;"
    },
    {
        "line": 34,
        "fullcodeline": "assert(PyUnicode_GET_LENGTH(literal) != 0);"
    },
    {
        "line": 37,
        "fullcodeline": "literal = NULL;"
    },
    {
        "line": 63,
        "fullcodeline": "return -1;"
    },
    {
        "line": 35,
        "fullcodeline": "if (FstringParser_ConcatAndDel(state, literal) < 0)"
    },
    {
        "line": 36,
        "fullcodeline": "return -1;"
    }
]