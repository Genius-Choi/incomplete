[
    {
        "line": 5,
        "fullcodeline": "FstringParser_check_invariants(state);"
    },
    {
        "line": 9,
        "fullcodeline": "PyObject *literal = NULL;"
    },
    {
        "line": 10,
        "fullcodeline": "expr_ty expression = NULL;"
    },
    {
        "line": 16,
        "fullcodeline": "int result = fstring_find_literal_and_expr(str, end, raw, recurse_lvl,"
    },
    {
        "line": 36,
        "fullcodeline": "assert(!state->last_str ||"
    },
    {
        "line": 41,
        "fullcodeline": "assert(literal == NULL);"
    },
    {
        "line": 72,
        "fullcodeline": "if (recurse_lvl == 0 && *str < end-1) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (recurse_lvl != 0 && **str != '}') {"
    },
    {
        "line": 19,
        "fullcodeline": "if (result < 0)"
    },
    {
        "line": 23,
        "fullcodeline": "if (!literal) {"
    },
    {
        "line": 47,
        "fullcodeline": "if (result == 1)"
    },
    {
        "line": 50,
        "fullcodeline": "if (!expression)"
    },
    {
        "line": 56,
        "fullcodeline": "if (!state->last_str) {"
    },
    {
        "line": 65,
        "fullcodeline": "if (ExprList_Append(&state->expr_list, expression) < 0)"
    },
    {
        "line": 74,
        "fullcodeline": "return -1;"
    },
    {
        "line": 78,
        "fullcodeline": "return -1;"
    },
    {
        "line": 37,
        "fullcodeline": "PyUnicode_GET_LENGTH(state->last_str) != 0);"
    },
    {
        "line": 20,
        "fullcodeline": "return -1;"
    },
    {
        "line": 60,
        "fullcodeline": "expr_ty str = make_str_node_and_del(&state->last_str, c, n);"
    },
    {
        "line": 66,
        "fullcodeline": "return -1;"
    },
    {
        "line": 26,
        "fullcodeline": "} else if (!state->last_str) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (!str || ExprList_Append(&state->expr_list, str) < 0)"
    },
    {
        "line": 27,
        "fullcodeline": "state->last_str = literal;"
    },
    {
        "line": 28,
        "fullcodeline": "literal = NULL;"
    },
    {
        "line": 31,
        "fullcodeline": "assert(PyUnicode_GET_LENGTH(literal) != 0);"
    },
    {
        "line": 34,
        "fullcodeline": "literal = NULL;"
    },
    {
        "line": 62,
        "fullcodeline": "return -1;"
    },
    {
        "line": 32,
        "fullcodeline": "if (FstringParser_ConcatAndDel(state, literal) < 0)"
    },
    {
        "line": 33,
        "fullcodeline": "return -1;"
    }
]