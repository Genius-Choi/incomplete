[
    {
        "line": 11,
        "fullcodeline": "_Py_AllocatedBlocks--;"
    },
    {
        "line": 18,
        "fullcodeline": "pool = POOL_ADDR(p);"
    },
    {
        "line": 217,
        "fullcodeline": "PyMem_RawFree(p);"
    },
    {
        "line": 8,
        "fullcodeline": "if (p == NULL)      /* free(NULL) has no effect */"
    },
    {
        "line": 19,
        "fullcodeline": "if (address_in_range(p, pool)) {"
    },
    {
        "line": 21,
        "fullcodeline": "LOCK();"
    },
    {
        "line": 28,
        "fullcodeline": "assert(pool->ref.count > 0);            /* else it was empty */"
    },
    {
        "line": 29,
        "fullcodeline": "*(block **)p = lastfree = pool->freeblock;"
    },
    {
        "line": 30,
        "fullcodeline": "pool->freeblock = (block *)p;"
    },
    {
        "line": 199,
        "fullcodeline": "--pool->ref.count;"
    },
    {
        "line": 200,
        "fullcodeline": "assert(pool->ref.count > 0);            /* else the pool is empty */"
    },
    {
        "line": 201,
        "fullcodeline": "size = pool->szidx;"
    },
    {
        "line": 203,
        "fullcodeline": "prev = next->prevpool;"
    },
    {
        "line": 205,
        "fullcodeline": "pool->nextpool = next;"
    },
    {
        "line": 206,
        "fullcodeline": "pool->prevpool = prev;"
    },
    {
        "line": 207,
        "fullcodeline": "next->prevpool = pool;"
    },
    {
        "line": 208,
        "fullcodeline": "prev->nextpool = pool;"
    },
    {
        "line": 209,
        "fullcodeline": "UNLOCK();"
    },
    {
        "line": 48,
        "fullcodeline": "next = pool->nextpool;"
    },
    {
        "line": 49,
        "fullcodeline": "prev = pool->prevpool;"
    },
    {
        "line": 50,
        "fullcodeline": "next->prevpool = prev;"
    },
    {
        "line": 51,
        "fullcodeline": "prev->nextpool = next;"
    },
    {
        "line": 57,
        "fullcodeline": "pool->nextpool = ao->freepools;"
    },
    {
        "line": 58,
        "fullcodeline": "ao->freepools = pool;"
    },
    {
        "line": 59,
        "fullcodeline": "nf = ++ao->nfreepools;"
    },
    {
        "line": 159,
        "fullcodeline": "ao->nextarena->prevarena = ao->prevarena;"
    },
    {
        "line": 171,
        "fullcodeline": "assert(ao->nextarena == NULL ||"
    },
    {
        "line": 173,
        "fullcodeline": "assert(ao->prevarena->nextarena == ao->nextarena);"
    },
    {
        "line": 175,
        "fullcodeline": "ao->prevarena->nextarena = ao;"
    },
    {
        "line": 180,
        "fullcodeline": "assert(ao->nextarena == NULL ||"
    },
    {
        "line": 182,
        "fullcodeline": "assert(ao->prevarena == NULL ||"
    },
    {
        "line": 184,
        "fullcodeline": "assert(ao->nextarena == NULL ||"
    },
    {
        "line": 186,
        "fullcodeline": "assert((usable_arenas == ao &&"
    },
    {
        "line": 190,
        "fullcodeline": "UNLOCK();"
    },
    {
        "line": 202,
        "fullcodeline": "next = usedpools[size + size];"
    },
    {
        "line": 38,
        "fullcodeline": "if (--pool->ref.count != 0) {"
    },
    {
        "line": 73,
        "fullcodeline": "if (nf == ao->ntotalpools) {"
    },
    {
        "line": 115,
        "fullcodeline": "if (nf == 1) {"
    },
    {
        "line": 138,
        "fullcodeline": "if (ao->nextarena == NULL ||"
    },
    {
        "line": 149,
        "fullcodeline": "if (ao->prevarena != NULL) {"
    },
    {
        "line": 164,
        "fullcodeline": "while (ao->nextarena != NULL &&"
    },
    {
        "line": 176,
        "fullcodeline": "if (ao->nextarena != NULL)"
    },
    {
        "line": 40,
        "fullcodeline": "UNLOCK();"
    },
    {
        "line": 76,
        "fullcodeline": "assert(ao->prevarena == NULL ||"
    },
    {
        "line": 78,
        "fullcodeline": "assert(ao ->nextarena == NULL ||"
    },
    {
        "line": 103,
        "fullcodeline": "ao->nextarena = unused_arena_objects;"
    },
    {
        "line": 104,
        "fullcodeline": "unused_arena_objects = ao;"
    },
    {
        "line": 107,
        "fullcodeline": "_PyObject_Arena.free(_PyObject_Arena.ctx,"
    },
    {
        "line": 109,
        "fullcodeline": "ao->address = 0;                        /* mark unassociated */"
    },
    {
        "line": 110,
        "fullcodeline": "--narenas_currently_allocated;"
    },
    {
        "line": 112,
        "fullcodeline": "UNLOCK();"
    },
    {
        "line": 121,
        "fullcodeline": "ao->nextarena = usable_arenas;"
    },
    {
        "line": 122,
        "fullcodeline": "ao->prevarena = NULL;"
    },
    {
        "line": 125,
        "fullcodeline": "usable_arenas = ao;"
    },
    {
        "line": 126,
        "fullcodeline": "assert(usable_arenas->address != 0);"
    },
    {
        "line": 128,
        "fullcodeline": "UNLOCK();"
    },
    {
        "line": 139,
        "fullcodeline": "nf <= ao->nextarena->nfreepools) {"
    },
    {
        "line": 141,
        "fullcodeline": "UNLOCK();"
    },
    {
        "line": 151,
        "fullcodeline": "assert(ao->prevarena->nextarena == ao);"
    },
    {
        "line": 152,
        "fullcodeline": "ao->prevarena->nextarena = ao->nextarena;"
    },
    {
        "line": 165,
        "fullcodeline": "nf > ao->nextarena->nfreepools) {"
    },
    {
        "line": 166,
        "fullcodeline": "ao->prevarena = ao->nextarena;"
    },
    {
        "line": 172,
        "fullcodeline": "ao->prevarena == ao->nextarena->prevarena);"
    },
    {
        "line": 177,
        "fullcodeline": "ao->nextarena->prevarena = ao;"
    },
    {
        "line": 181,
        "fullcodeline": "nf <= ao->nextarena->nfreepools);"
    },
    {
        "line": 183,
        "fullcodeline": "nf > ao->prevarena->nfreepools);"
    },
    {
        "line": 185,
        "fullcodeline": "ao->nextarena->prevarena == ao);"
    },
    {
        "line": 188,
        "fullcodeline": "ao->prevarena->nextarena == ao);"
    },
    {
        "line": 84,
        "fullcodeline": "if (ao->prevarena == NULL) {"
    },
    {
        "line": 95,
        "fullcodeline": "if (ao->nextarena != NULL) {"
    },
    {
        "line": 108,
        "fullcodeline": "(void *)ao->address, ARENA_SIZE);"
    },
    {
        "line": 156,
        "fullcodeline": "assert(usable_arenas == ao);"
    },
    {
        "line": 157,
        "fullcodeline": "usable_arenas = ao->nextarena;"
    },
    {
        "line": 187,
        "fullcodeline": "ao->prevarena == NULL) ||"
    },
    {
        "line": 77,
        "fullcodeline": "ao->prevarena->address != 0);"
    },
    {
        "line": 79,
        "fullcodeline": "ao->nextarena->address != 0);"
    },
    {
        "line": 85,
        "fullcodeline": "usable_arenas = ao->nextarena;"
    },
    {
        "line": 86,
        "fullcodeline": "assert(usable_arenas == NULL ||"
    },
    {
        "line": 96,
        "fullcodeline": "assert(ao->nextarena->prevarena == ao);"
    },
    {
        "line": 97,
        "fullcodeline": "ao->nextarena->prevarena ="
    },
    {
        "line": 124,
        "fullcodeline": "usable_arenas->prevarena = ao;"
    },
    {
        "line": 90,
        "fullcodeline": "assert(ao->prevarena->nextarena == ao);"
    },
    {
        "line": 91,
        "fullcodeline": "ao->prevarena->nextarena ="
    },
    {
        "line": 87,
        "fullcodeline": "usable_arenas->address != 0);"
    }
]