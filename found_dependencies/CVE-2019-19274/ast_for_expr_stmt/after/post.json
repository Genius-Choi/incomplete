[
    {
        "line": 3,
        "fullcodeline": "REQ(n, expr_stmt);"
    },
    {
        "line": 12,
        "fullcodeline": "int num = NCH(n);"
    },
    {
        "line": 14,
        "fullcodeline": "if (num == 1) {"
    },
    {
        "line": 15,
        "fullcodeline": "expr_ty e = ast_for_testlist(c, CHILD(n, 0));"
    },
    {
        "line": 16,
        "fullcodeline": "if (!e)"
    },
    {
        "line": 19,
        "fullcodeline": "return Expr(e, LINENO(n), n->n_col_offset,"
    },
    {
        "line": 22,
        "fullcodeline": "else if (TYPE(CHILD(n, 1)) == augassign) {"
    },
    {
        "line": 25,
        "fullcodeline": "node *ch = CHILD(n, 0);"
    },
    {
        "line": 27,
        "fullcodeline": "expr1 = ast_for_testlist(c, ch);"
    },
    {
        "line": 46,
        "fullcodeline": "ch = CHILD(n, 2);"
    },
    {
        "line": 54,
        "fullcodeline": "newoperator = ast_for_augassign(c, CHILD(n, 1));"
    },
    {
        "line": 28,
        "fullcodeline": "if (!expr1)"
    },
    {
        "line": 30,
        "fullcodeline": "if(!set_context(c, expr1, Store, ch))"
    },
    {
        "line": 47,
        "fullcodeline": "if (TYPE(ch) == testlist)"
    },
    {
        "line": 51,
        "fullcodeline": "if (!expr2)"
    },
    {
        "line": 55,
        "fullcodeline": "if (!newoperator)"
    },
    {
        "line": 58,
        "fullcodeline": "return AugAssign(expr1, newoperator, expr2, LINENO(n), n->n_col_offset,"
    },
    {
        "line": 42,
        "fullcodeline": "ast_error(c, ch, \"illegal expression for augmented assignment\");"
    },
    {
        "line": 48,
        "fullcodeline": "expr2 = ast_for_testlist(c, ch);"
    },
    {
        "line": 61,
        "fullcodeline": "else if (TYPE(CHILD(n, 1)) == annassign) {"
    },
    {
        "line": 50,
        "fullcodeline": "expr2 = ast_for_expr(c, ch);"
    },
    {
        "line": 63,
        "fullcodeline": "node *ch = CHILD(n, 0);"
    },
    {
        "line": 64,
        "fullcodeline": "node *deep, *ann = CHILD(n, 1);"
    },
    {
        "line": 65,
        "fullcodeline": "int simple = 1;"
    },
    {
        "line": 68,
        "fullcodeline": "deep = ch;"
    },
    {
        "line": 75,
        "fullcodeline": "expr1 = ast_for_testlist(c, ch);"
    },
    {
        "line": 112,
        "fullcodeline": "ch = CHILD(ann, 1);"
    },
    {
        "line": 113,
        "fullcodeline": "expr2 = ast_for_expr(c, ch);"
    },
    {
        "line": 69,
        "fullcodeline": "while (NCH(deep) == 1) {"
    },
    {
        "line": 72,
        "fullcodeline": "if (NCH(deep) > 0 && TYPE(CHILD(deep, 0)) == LPAR) {"
    },
    {
        "line": 76,
        "fullcodeline": "if (!expr1) {"
    },
    {
        "line": 109,
        "fullcodeline": "if (expr1->kind != Name_kind) {"
    },
    {
        "line": 114,
        "fullcodeline": "if (!expr2) {"
    },
    {
        "line": 117,
        "fullcodeline": "if (NCH(ann) == 2) {"
    },
    {
        "line": 146,
        "fullcodeline": "REQ(CHILD(n, 1), EQUAL);"
    },
    {
        "line": 148,
        "fullcodeline": "has_type_comment = TYPE(CHILD(n, num - 1)) == TYPE_COMMENT;"
    },
    {
        "line": 149,
        "fullcodeline": "nch_minus_type = num - has_type_comment;"
    },
    {
        "line": 151,
        "fullcodeline": "targets = _Py_asdl_seq_new(nch_minus_type / 2, c->c_arena);"
    },
    {
        "line": 171,
        "fullcodeline": "value = CHILD(n, nch_minus_type - 1);"
    },
    {
        "line": 70,
        "fullcodeline": "deep = CHILD(deep, 0);"
    },
    {
        "line": 73,
        "fullcodeline": "simple = 0;"
    },
    {
        "line": 84,
        "fullcodeline": "expr1->v.Name.ctx = Store;"
    },
    {
        "line": 90,
        "fullcodeline": "expr1->v.Attribute.ctx = Store;"
    },
    {
        "line": 93,
        "fullcodeline": "expr1->v.Subscript.ctx = Store;"
    },
    {
        "line": 96,
        "fullcodeline": "ast_error(c, ch,"
    },
    {
        "line": 100,
        "fullcodeline": "ast_error(c, ch,"
    },
    {
        "line": 104,
        "fullcodeline": "ast_error(c, ch,"
    },
    {
        "line": 110,
        "fullcodeline": "simple = 0;"
    },
    {
        "line": 152,
        "fullcodeline": "if (!targets)"
    },
    {
        "line": 154,
        "fullcodeline": "for (i = 0; i < nch_minus_type - 2; i += 2) {"
    },
    {
        "line": 172,
        "fullcodeline": "if (TYPE(value) == testlist_star_expr)"
    },
    {
        "line": 176,
        "fullcodeline": "if (!expression)"
    },
    {
        "line": 185,
        "fullcodeline": "return Assign(targets, expression, type_comment, LINENO(n), n->n_col_offset,"
    },
    {
        "line": 81,
        "fullcodeline": "if (forbidden_name(c, expr1->v.Name.id, n, 0)) {"
    },
    {
        "line": 87,
        "fullcodeline": "if (forbidden_name(c, expr1->v.Attribute.attr, n, 1)) {"
    },
    {
        "line": 118,
        "fullcodeline": "return AnnAssign(expr1, expr2, NULL, simple,"
    },
    {
        "line": 123,
        "fullcodeline": "ch = CHILD(ann, 3);"
    },
    {
        "line": 156,
        "fullcodeline": "node *ch = CHILD(n, i);"
    },
    {
        "line": 161,
        "fullcodeline": "e = ast_for_testlist(c, ch);"
    },
    {
        "line": 169,
        "fullcodeline": "asdl_seq_SET(targets, i / 2, e);"
    },
    {
        "line": 173,
        "fullcodeline": "expression = ast_for_testlist(c, value);"
    },
    {
        "line": 179,
        "fullcodeline": "type_comment = NEW_TYPE_COMMENT(CHILD(n, nch_minus_type));"
    },
    {
        "line": 119,
        "fullcodeline": "LINENO(n), n->n_col_offset,"
    },
    {
        "line": 124,
        "fullcodeline": "if (TYPE(ch) == testlist) {"
    },
    {
        "line": 130,
        "fullcodeline": "if (!expr3) {"
    },
    {
        "line": 133,
        "fullcodeline": "return AnnAssign(expr1, expr2, expr3, simple,"
    },
    {
        "line": 157,
        "fullcodeline": "if (TYPE(ch) == yield_expr) {"
    },
    {
        "line": 162,
        "fullcodeline": "if (!e)"
    },
    {
        "line": 166,
        "fullcodeline": "if (!set_context(c, e, Store, CHILD(n, i)))"
    },
    {
        "line": 175,
        "fullcodeline": "expression = ast_for_expr(c, value);"
    },
    {
        "line": 180,
        "fullcodeline": "if (!type_comment)"
    },
    {
        "line": 184,
        "fullcodeline": "type_comment = NULL;"
    },
    {
        "line": 125,
        "fullcodeline": "expr3 = ast_for_testlist(c, ch);"
    },
    {
        "line": 134,
        "fullcodeline": "LINENO(n), n->n_col_offset,"
    },
    {
        "line": 158,
        "fullcodeline": "ast_error(c, ch, \"assignment to yield expression not possible\");"
    },
    {
        "line": 128,
        "fullcodeline": "expr3 = ast_for_expr(c, ch);"
    }
]