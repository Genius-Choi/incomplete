[
    {
        "line": 5,
        "fullcodeline": "PyObject *tmp = NULL;"
    },
    {
        "line": 39,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)FunctionDef_type);"
    },
    {
        "line": 168,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)AsyncFunctionDef_type);"
    },
    {
        "line": 297,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)ClassDef_type);"
    },
    {
        "line": 446,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Return_type);"
    },
    {
        "line": 470,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Delete_type);"
    },
    {
        "line": 511,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Assign_type);"
    },
    {
        "line": 580,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)AugAssign_type);"
    },
    {
        "line": 632,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)AnnAssign_type);"
    },
    {
        "line": 699,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)For_type);"
    },
    {
        "line": 814,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)AsyncFor_type);"
    },
    {
        "line": 929,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)While_type);"
    },
    {
        "line": 1015,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)If_type);"
    },
    {
        "line": 1101,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)With_type);"
    },
    {
        "line": 1187,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)AsyncWith_type);"
    },
    {
        "line": 1273,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Raise_type);"
    },
    {
        "line": 1311,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Try_type);"
    },
    {
        "line": 1446,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Assert_type);"
    },
    {
        "line": 1484,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Import_type);"
    },
    {
        "line": 1525,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)ImportFrom_type);"
    },
    {
        "line": 1594,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Global_type);"
    },
    {
        "line": 1635,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Nonlocal_type);"
    },
    {
        "line": 1676,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Expr_type);"
    },
    {
        "line": 1700,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Pass_type);"
    },
    {
        "line": 1710,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Break_type);"
    },
    {
        "line": 1720,
        "fullcodeline": "isinstance = PyObject_IsInstance(obj, (PyObject*)Continue_type);"
    },
    {
        "line": 9,
        "fullcodeline": "if (obj == Py_None) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 29,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 10,
        "fullcodeline": "*out = NULL;"
    },
    {
        "line": 13,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_lineno, &tmp) < 0) {"
    },
    {
        "line": 26,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_col_offset, &tmp) < 0) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 163,
        "fullcodeline": "*out = FunctionDef(name, args, body, decorator_list, returns,"
    },
    {
        "line": 169,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 292,
        "fullcodeline": "*out = AsyncFunctionDef(name, args, body, decorator_list, returns,"
    },
    {
        "line": 298,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 441,
        "fullcodeline": "*out = ClassDef(name, bases, keywords, body, decorator_list, lineno,"
    },
    {
        "line": 447,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 466,
        "fullcodeline": "*out = Return(value, lineno, col_offset, arena);"
    },
    {
        "line": 471,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 507,
        "fullcodeline": "*out = Delete(targets, lineno, col_offset, arena);"
    },
    {
        "line": 512,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 576,
        "fullcodeline": "*out = Assign(targets, value, type_comment, lineno, col_offset, arena);"
    },
    {
        "line": 581,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 628,
        "fullcodeline": "*out = AugAssign(target, op, value, lineno, col_offset, arena);"
    },
    {
        "line": 633,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 694,
        "fullcodeline": "*out = AnnAssign(target, annotation, value, simple, lineno, col_offset,"
    },
    {
        "line": 700,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 809,
        "fullcodeline": "*out = For(target, iter, body, orelse, type_comment, lineno,"
    },
    {
        "line": 815,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 924,
        "fullcodeline": "*out = AsyncFor(target, iter, body, orelse, type_comment, lineno,"
    },
    {
        "line": 930,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1011,
        "fullcodeline": "*out = While(test, body, orelse, lineno, col_offset, arena);"
    },
    {
        "line": 1016,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1097,
        "fullcodeline": "*out = If(test, body, orelse, lineno, col_offset, arena);"
    },
    {
        "line": 1102,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1183,
        "fullcodeline": "*out = With(items, body, type_comment, lineno, col_offset, arena);"
    },
    {
        "line": 1188,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1269,
        "fullcodeline": "*out = AsyncWith(items, body, type_comment, lineno, col_offset, arena);"
    },
    {
        "line": 1274,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1307,
        "fullcodeline": "*out = Raise(exc, cause, lineno, col_offset, arena);"
    },
    {
        "line": 1312,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1441,
        "fullcodeline": "*out = Try(body, handlers, orelse, finalbody, lineno, col_offset,"
    },
    {
        "line": 1447,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1480,
        "fullcodeline": "*out = Assert(test, msg, lineno, col_offset, arena);"
    },
    {
        "line": 1485,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1521,
        "fullcodeline": "*out = Import(names, lineno, col_offset, arena);"
    },
    {
        "line": 1526,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1590,
        "fullcodeline": "*out = ImportFrom(module, names, level, lineno, col_offset, arena);"
    },
    {
        "line": 1595,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1631,
        "fullcodeline": "*out = Global(names, lineno, col_offset, arena);"
    },
    {
        "line": 1636,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1672,
        "fullcodeline": "*out = Nonlocal(names, lineno, col_offset, arena);"
    },
    {
        "line": 1677,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1696,
        "fullcodeline": "*out = Expr(value, lineno, col_offset, arena);"
    },
    {
        "line": 1701,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1706,
        "fullcodeline": "*out = Pass(lineno, col_offset, arena);"
    },
    {
        "line": 1711,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1716,
        "fullcodeline": "*out = Break(lineno, col_offset, arena);"
    },
    {
        "line": 1721,
        "fullcodeline": "if (isinstance == -1) {"
    },
    {
        "line": 1726,
        "fullcodeline": "*out = Continue(lineno, col_offset, arena);"
    },
    {
        "line": 22,
        "fullcodeline": "res = obj2ast_int(tmp, &lineno, arena);"
    },
    {
        "line": 24,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 35,
        "fullcodeline": "res = obj2ast_int(tmp, &col_offset, arena);"
    },
    {
        "line": 37,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 54,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 80,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 110,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 140,
        "fullcodeline": "if (tmp == NULL || tmp == Py_None) {"
    },
    {
        "line": 183,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 196,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 209,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 239,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 269,
        "fullcodeline": "if (tmp == NULL || tmp == Py_None) {"
    },
    {
        "line": 311,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 324,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 354,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 384,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 414,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 480,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 523,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 553,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 592,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 605,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 618,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 645,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 658,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 684,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 713,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 726,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 739,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 769,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 828,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 841,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 854,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 884,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 941,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 954,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 984,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1027,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1040,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1070,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1113,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1143,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1199,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1229,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1284,
        "fullcodeline": "if (tmp == NULL || tmp == Py_None) {"
    },
    {
        "line": 1324,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1354,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1384,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1414,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1457,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1494,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1537,
        "fullcodeline": "if (tmp == NULL || tmp == Py_None) {"
    },
    {
        "line": 1550,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1604,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1645,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 1686,
        "fullcodeline": "if (tmp == NULL) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_name, &tmp) < 0) {"
    },
    {
        "line": 64,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_args, &tmp) < 0) {"
    },
    {
        "line": 77,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_body, &tmp) < 0) {"
    },
    {
        "line": 107,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_decorator_list, &tmp) < 0) {"
    },
    {
        "line": 137,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_returns, &tmp) < 0) {"
    },
    {
        "line": 141,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 142,
        "fullcodeline": "returns = NULL;"
    },
    {
        "line": 150,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_type_comment, &tmp) < 0) {"
    },
    {
        "line": 153,
        "fullcodeline": "if (tmp == NULL || tmp == Py_None) {"
    },
    {
        "line": 154,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 155,
        "fullcodeline": "type_comment = NULL;"
    },
    {
        "line": 180,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_name, &tmp) < 0) {"
    },
    {
        "line": 193,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_args, &tmp) < 0) {"
    },
    {
        "line": 206,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_body, &tmp) < 0) {"
    },
    {
        "line": 236,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_decorator_list, &tmp) < 0) {"
    },
    {
        "line": 266,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_returns, &tmp) < 0) {"
    },
    {
        "line": 270,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 271,
        "fullcodeline": "returns = NULL;"
    },
    {
        "line": 279,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_type_comment, &tmp) < 0) {"
    },
    {
        "line": 282,
        "fullcodeline": "if (tmp == NULL || tmp == Py_None) {"
    },
    {
        "line": 283,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 284,
        "fullcodeline": "type_comment = NULL;"
    },
    {
        "line": 308,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_name, &tmp) < 0) {"
    },
    {
        "line": 321,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_bases, &tmp) < 0) {"
    },
    {
        "line": 351,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_keywords, &tmp) < 0) {"
    },
    {
        "line": 381,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_body, &tmp) < 0) {"
    },
    {
        "line": 411,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_decorator_list, &tmp) < 0) {"
    },
    {
        "line": 453,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_value, &tmp) < 0) {"
    },
    {
        "line": 456,
        "fullcodeline": "if (tmp == NULL || tmp == Py_None) {"
    },
    {
        "line": 457,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 458,
        "fullcodeline": "value = NULL;"
    },
    {
        "line": 477,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_targets, &tmp) < 0) {"
    },
    {
        "line": 520,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_targets, &tmp) < 0) {"
    },
    {
        "line": 550,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_value, &tmp) < 0) {"
    },
    {
        "line": 563,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_type_comment, &tmp) < 0) {"
    },
    {
        "line": 566,
        "fullcodeline": "if (tmp == NULL || tmp == Py_None) {"
    },
    {
        "line": 567,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 568,
        "fullcodeline": "type_comment = NULL;"
    },
    {
        "line": 589,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_target, &tmp) < 0) {"
    },
    {
        "line": 602,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_op, &tmp) < 0) {"
    },
    {
        "line": 615,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_value, &tmp) < 0) {"
    },
    {
        "line": 642,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_target, &tmp) < 0) {"
    },
    {
        "line": 655,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_annotation, &tmp) < 0) {"
    },
    {
        "line": 668,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_value, &tmp) < 0) {"
    },
    {
        "line": 671,
        "fullcodeline": "if (tmp == NULL || tmp == Py_None) {"
    },
    {
        "line": 672,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 673,
        "fullcodeline": "value = NULL;"
    },
    {
        "line": 681,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_simple, &tmp) < 0) {"
    },
    {
        "line": 710,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_target, &tmp) < 0) {"
    },
    {
        "line": 723,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_iter, &tmp) < 0) {"
    },
    {
        "line": 736,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_body, &tmp) < 0) {"
    },
    {
        "line": 766,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_orelse, &tmp) < 0) {"
    },
    {
        "line": 796,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_type_comment, &tmp) < 0) {"
    },
    {
        "line": 799,
        "fullcodeline": "if (tmp == NULL || tmp == Py_None) {"
    },
    {
        "line": 800,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 801,
        "fullcodeline": "type_comment = NULL;"
    },
    {
        "line": 825,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_target, &tmp) < 0) {"
    },
    {
        "line": 838,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_iter, &tmp) < 0) {"
    },
    {
        "line": 851,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_body, &tmp) < 0) {"
    },
    {
        "line": 881,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_orelse, &tmp) < 0) {"
    },
    {
        "line": 911,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_type_comment, &tmp) < 0) {"
    },
    {
        "line": 914,
        "fullcodeline": "if (tmp == NULL || tmp == Py_None) {"
    },
    {
        "line": 915,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 916,
        "fullcodeline": "type_comment = NULL;"
    },
    {
        "line": 938,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_test, &tmp) < 0) {"
    },
    {
        "line": 951,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_body, &tmp) < 0) {"
    },
    {
        "line": 981,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_orelse, &tmp) < 0) {"
    },
    {
        "line": 1024,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_test, &tmp) < 0) {"
    },
    {
        "line": 1037,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_body, &tmp) < 0) {"
    },
    {
        "line": 1067,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_orelse, &tmp) < 0) {"
    },
    {
        "line": 1110,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_items, &tmp) < 0) {"
    },
    {
        "line": 1140,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_body, &tmp) < 0) {"
    },
    {
        "line": 1170,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_type_comment, &tmp) < 0) {"
    },
    {
        "line": 1173,
        "fullcodeline": "if (tmp == NULL || tmp == Py_None) {"
    },
    {
        "line": 1174,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1175,
        "fullcodeline": "type_comment = NULL;"
    },
    {
        "line": 1196,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_items, &tmp) < 0) {"
    },
    {
        "line": 1226,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_body, &tmp) < 0) {"
    },
    {
        "line": 1256,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_type_comment, &tmp) < 0) {"
    },
    {
        "line": 1259,
        "fullcodeline": "if (tmp == NULL || tmp == Py_None) {"
    },
    {
        "line": 1260,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1261,
        "fullcodeline": "type_comment = NULL;"
    },
    {
        "line": 1281,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_exc, &tmp) < 0) {"
    },
    {
        "line": 1285,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1286,
        "fullcodeline": "exc = NULL;"
    },
    {
        "line": 1294,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_cause, &tmp) < 0) {"
    },
    {
        "line": 1297,
        "fullcodeline": "if (tmp == NULL || tmp == Py_None) {"
    },
    {
        "line": 1298,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1299,
        "fullcodeline": "cause = NULL;"
    },
    {
        "line": 1321,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_body, &tmp) < 0) {"
    },
    {
        "line": 1351,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_handlers, &tmp) < 0) {"
    },
    {
        "line": 1381,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_orelse, &tmp) < 0) {"
    },
    {
        "line": 1411,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_finalbody, &tmp) < 0) {"
    },
    {
        "line": 1454,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_test, &tmp) < 0) {"
    },
    {
        "line": 1467,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_msg, &tmp) < 0) {"
    },
    {
        "line": 1470,
        "fullcodeline": "if (tmp == NULL || tmp == Py_None) {"
    },
    {
        "line": 1471,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1472,
        "fullcodeline": "msg = NULL;"
    },
    {
        "line": 1491,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_names, &tmp) < 0) {"
    },
    {
        "line": 1534,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_module, &tmp) < 0) {"
    },
    {
        "line": 1538,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1539,
        "fullcodeline": "module = NULL;"
    },
    {
        "line": 1547,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_names, &tmp) < 0) {"
    },
    {
        "line": 1577,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_level, &tmp) < 0) {"
    },
    {
        "line": 1580,
        "fullcodeline": "if (tmp == NULL || tmp == Py_None) {"
    },
    {
        "line": 1581,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1582,
        "fullcodeline": "level = 0;"
    },
    {
        "line": 1601,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_names, &tmp) < 0) {"
    },
    {
        "line": 1642,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_names, &tmp) < 0) {"
    },
    {
        "line": 1683,
        "fullcodeline": "if (lookup_attr_id(obj, &PyId_value, &tmp) < 0) {"
    },
    {
        "line": 60,
        "fullcodeline": "res = obj2ast_identifier(tmp, &name, arena);"
    },
    {
        "line": 62,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 73,
        "fullcodeline": "res = obj2ast_arguments(tmp, &args, arena);"
    },
    {
        "line": 75,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 92,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 93,
        "fullcodeline": "body = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 105,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 122,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 123,
        "fullcodeline": "decorator_list = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 135,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 146,
        "fullcodeline": "res = obj2ast_expr(tmp, &returns, arena);"
    },
    {
        "line": 148,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 159,
        "fullcodeline": "res = obj2ast_string(tmp, &type_comment, arena);"
    },
    {
        "line": 161,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 189,
        "fullcodeline": "res = obj2ast_identifier(tmp, &name, arena);"
    },
    {
        "line": 191,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 202,
        "fullcodeline": "res = obj2ast_arguments(tmp, &args, arena);"
    },
    {
        "line": 204,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 221,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 222,
        "fullcodeline": "body = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 234,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 251,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 252,
        "fullcodeline": "decorator_list = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 264,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 275,
        "fullcodeline": "res = obj2ast_expr(tmp, &returns, arena);"
    },
    {
        "line": 277,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 288,
        "fullcodeline": "res = obj2ast_string(tmp, &type_comment, arena);"
    },
    {
        "line": 290,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 317,
        "fullcodeline": "res = obj2ast_identifier(tmp, &name, arena);"
    },
    {
        "line": 319,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 336,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 337,
        "fullcodeline": "bases = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 349,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 366,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 367,
        "fullcodeline": "keywords = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 379,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 396,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 397,
        "fullcodeline": "body = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 409,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 426,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 427,
        "fullcodeline": "decorator_list = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 439,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 462,
        "fullcodeline": "res = obj2ast_expr(tmp, &value, arena);"
    },
    {
        "line": 464,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 492,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 493,
        "fullcodeline": "targets = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 505,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 535,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 536,
        "fullcodeline": "targets = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 548,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 559,
        "fullcodeline": "res = obj2ast_expr(tmp, &value, arena);"
    },
    {
        "line": 561,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 572,
        "fullcodeline": "res = obj2ast_string(tmp, &type_comment, arena);"
    },
    {
        "line": 574,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 598,
        "fullcodeline": "res = obj2ast_expr(tmp, &target, arena);"
    },
    {
        "line": 600,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 611,
        "fullcodeline": "res = obj2ast_operator(tmp, &op, arena);"
    },
    {
        "line": 613,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 624,
        "fullcodeline": "res = obj2ast_expr(tmp, &value, arena);"
    },
    {
        "line": 626,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 651,
        "fullcodeline": "res = obj2ast_expr(tmp, &target, arena);"
    },
    {
        "line": 653,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 664,
        "fullcodeline": "res = obj2ast_expr(tmp, &annotation, arena);"
    },
    {
        "line": 666,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 677,
        "fullcodeline": "res = obj2ast_expr(tmp, &value, arena);"
    },
    {
        "line": 679,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 690,
        "fullcodeline": "res = obj2ast_int(tmp, &simple, arena);"
    },
    {
        "line": 692,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 719,
        "fullcodeline": "res = obj2ast_expr(tmp, &target, arena);"
    },
    {
        "line": 721,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 732,
        "fullcodeline": "res = obj2ast_expr(tmp, &iter, arena);"
    },
    {
        "line": 734,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 751,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 752,
        "fullcodeline": "body = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 764,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 781,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 782,
        "fullcodeline": "orelse = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 794,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 805,
        "fullcodeline": "res = obj2ast_string(tmp, &type_comment, arena);"
    },
    {
        "line": 807,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 834,
        "fullcodeline": "res = obj2ast_expr(tmp, &target, arena);"
    },
    {
        "line": 836,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 847,
        "fullcodeline": "res = obj2ast_expr(tmp, &iter, arena);"
    },
    {
        "line": 849,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 866,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 867,
        "fullcodeline": "body = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 879,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 896,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 897,
        "fullcodeline": "orelse = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 909,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 920,
        "fullcodeline": "res = obj2ast_string(tmp, &type_comment, arena);"
    },
    {
        "line": 922,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 947,
        "fullcodeline": "res = obj2ast_expr(tmp, &test, arena);"
    },
    {
        "line": 949,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 966,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 967,
        "fullcodeline": "body = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 979,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 996,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 997,
        "fullcodeline": "orelse = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 1009,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1033,
        "fullcodeline": "res = obj2ast_expr(tmp, &test, arena);"
    },
    {
        "line": 1035,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1052,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 1053,
        "fullcodeline": "body = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 1065,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1082,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 1083,
        "fullcodeline": "orelse = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 1095,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1125,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 1126,
        "fullcodeline": "items = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 1138,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1155,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 1156,
        "fullcodeline": "body = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 1168,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1179,
        "fullcodeline": "res = obj2ast_string(tmp, &type_comment, arena);"
    },
    {
        "line": 1181,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1211,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 1212,
        "fullcodeline": "items = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 1224,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1241,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 1242,
        "fullcodeline": "body = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 1254,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1265,
        "fullcodeline": "res = obj2ast_string(tmp, &type_comment, arena);"
    },
    {
        "line": 1267,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1290,
        "fullcodeline": "res = obj2ast_expr(tmp, &exc, arena);"
    },
    {
        "line": 1292,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1303,
        "fullcodeline": "res = obj2ast_expr(tmp, &cause, arena);"
    },
    {
        "line": 1305,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1336,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 1337,
        "fullcodeline": "body = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 1349,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1366,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 1367,
        "fullcodeline": "handlers = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 1379,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1396,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 1397,
        "fullcodeline": "orelse = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 1409,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1426,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 1427,
        "fullcodeline": "finalbody = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 1439,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1463,
        "fullcodeline": "res = obj2ast_expr(tmp, &test, arena);"
    },
    {
        "line": 1465,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1476,
        "fullcodeline": "res = obj2ast_expr(tmp, &msg, arena);"
    },
    {
        "line": 1478,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1506,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 1507,
        "fullcodeline": "names = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 1519,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1543,
        "fullcodeline": "res = obj2ast_identifier(tmp, &module, arena);"
    },
    {
        "line": 1545,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1562,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 1563,
        "fullcodeline": "names = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 1575,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1586,
        "fullcodeline": "res = obj2ast_int(tmp, &level, arena);"
    },
    {
        "line": 1588,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1616,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 1617,
        "fullcodeline": "names = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 1629,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1657,
        "fullcodeline": "len = PyList_GET_SIZE(tmp);"
    },
    {
        "line": 1658,
        "fullcodeline": "names = _Ta3_asdl_seq_new(len, arena);"
    },
    {
        "line": 1670,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 1692,
        "fullcodeline": "res = obj2ast_expr(tmp, &value, arena);"
    },
    {
        "line": 1694,
        "fullcodeline": "Py_CLEAR(tmp);"
    },
    {
        "line": 94,
        "fullcodeline": "if (body == NULL) goto failed;"
    },
    {
        "line": 95,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 124,
        "fullcodeline": "if (decorator_list == NULL) goto failed;"
    },
    {
        "line": 125,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 223,
        "fullcodeline": "if (body == NULL) goto failed;"
    },
    {
        "line": 224,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 253,
        "fullcodeline": "if (decorator_list == NULL) goto failed;"
    },
    {
        "line": 254,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 338,
        "fullcodeline": "if (bases == NULL) goto failed;"
    },
    {
        "line": 339,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 368,
        "fullcodeline": "if (keywords == NULL) goto failed;"
    },
    {
        "line": 369,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 398,
        "fullcodeline": "if (body == NULL) goto failed;"
    },
    {
        "line": 399,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 428,
        "fullcodeline": "if (decorator_list == NULL) goto failed;"
    },
    {
        "line": 429,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 494,
        "fullcodeline": "if (targets == NULL) goto failed;"
    },
    {
        "line": 495,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 537,
        "fullcodeline": "if (targets == NULL) goto failed;"
    },
    {
        "line": 538,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 753,
        "fullcodeline": "if (body == NULL) goto failed;"
    },
    {
        "line": 754,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 783,
        "fullcodeline": "if (orelse == NULL) goto failed;"
    },
    {
        "line": 784,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 868,
        "fullcodeline": "if (body == NULL) goto failed;"
    },
    {
        "line": 869,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 898,
        "fullcodeline": "if (orelse == NULL) goto failed;"
    },
    {
        "line": 899,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 968,
        "fullcodeline": "if (body == NULL) goto failed;"
    },
    {
        "line": 969,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 998,
        "fullcodeline": "if (orelse == NULL) goto failed;"
    },
    {
        "line": 999,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 1054,
        "fullcodeline": "if (body == NULL) goto failed;"
    },
    {
        "line": 1055,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 1084,
        "fullcodeline": "if (orelse == NULL) goto failed;"
    },
    {
        "line": 1085,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 1127,
        "fullcodeline": "if (items == NULL) goto failed;"
    },
    {
        "line": 1128,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 1157,
        "fullcodeline": "if (body == NULL) goto failed;"
    },
    {
        "line": 1158,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 1213,
        "fullcodeline": "if (items == NULL) goto failed;"
    },
    {
        "line": 1214,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 1243,
        "fullcodeline": "if (body == NULL) goto failed;"
    },
    {
        "line": 1244,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 1338,
        "fullcodeline": "if (body == NULL) goto failed;"
    },
    {
        "line": 1339,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 1368,
        "fullcodeline": "if (handlers == NULL) goto failed;"
    },
    {
        "line": 1369,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 1398,
        "fullcodeline": "if (orelse == NULL) goto failed;"
    },
    {
        "line": 1399,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 1428,
        "fullcodeline": "if (finalbody == NULL) goto failed;"
    },
    {
        "line": 1429,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 1508,
        "fullcodeline": "if (names == NULL) goto failed;"
    },
    {
        "line": 1509,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 1564,
        "fullcodeline": "if (names == NULL) goto failed;"
    },
    {
        "line": 1565,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 1618,
        "fullcodeline": "if (names == NULL) goto failed;"
    },
    {
        "line": 1619,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 1659,
        "fullcodeline": "if (names == NULL) goto failed;"
    },
    {
        "line": 1660,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 88,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 97,
        "fullcodeline": "res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 103,
        "fullcodeline": "asdl_seq_SET(body, i, val);"
    },
    {
        "line": 118,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 127,
        "fullcodeline": "res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 133,
        "fullcodeline": "asdl_seq_SET(decorator_list, i, val);"
    },
    {
        "line": 217,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 226,
        "fullcodeline": "res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 232,
        "fullcodeline": "asdl_seq_SET(body, i, val);"
    },
    {
        "line": 247,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 256,
        "fullcodeline": "res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 262,
        "fullcodeline": "asdl_seq_SET(decorator_list, i, val);"
    },
    {
        "line": 332,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 341,
        "fullcodeline": "res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 347,
        "fullcodeline": "asdl_seq_SET(bases, i, val);"
    },
    {
        "line": 362,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 371,
        "fullcodeline": "res = obj2ast_keyword(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 377,
        "fullcodeline": "asdl_seq_SET(keywords, i, val);"
    },
    {
        "line": 392,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 401,
        "fullcodeline": "res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 407,
        "fullcodeline": "asdl_seq_SET(body, i, val);"
    },
    {
        "line": 422,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 431,
        "fullcodeline": "res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 437,
        "fullcodeline": "asdl_seq_SET(decorator_list, i, val);"
    },
    {
        "line": 488,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 497,
        "fullcodeline": "res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 503,
        "fullcodeline": "asdl_seq_SET(targets, i, val);"
    },
    {
        "line": 531,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 540,
        "fullcodeline": "res = obj2ast_expr(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 546,
        "fullcodeline": "asdl_seq_SET(targets, i, val);"
    },
    {
        "line": 747,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 756,
        "fullcodeline": "res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 762,
        "fullcodeline": "asdl_seq_SET(body, i, val);"
    },
    {
        "line": 777,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 786,
        "fullcodeline": "res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 792,
        "fullcodeline": "asdl_seq_SET(orelse, i, val);"
    },
    {
        "line": 862,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 871,
        "fullcodeline": "res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 877,
        "fullcodeline": "asdl_seq_SET(body, i, val);"
    },
    {
        "line": 892,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 901,
        "fullcodeline": "res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 907,
        "fullcodeline": "asdl_seq_SET(orelse, i, val);"
    },
    {
        "line": 962,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 971,
        "fullcodeline": "res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 977,
        "fullcodeline": "asdl_seq_SET(body, i, val);"
    },
    {
        "line": 992,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 1001,
        "fullcodeline": "res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 1007,
        "fullcodeline": "asdl_seq_SET(orelse, i, val);"
    },
    {
        "line": 1048,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 1057,
        "fullcodeline": "res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 1063,
        "fullcodeline": "asdl_seq_SET(body, i, val);"
    },
    {
        "line": 1078,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 1087,
        "fullcodeline": "res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 1093,
        "fullcodeline": "asdl_seq_SET(orelse, i, val);"
    },
    {
        "line": 1121,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 1130,
        "fullcodeline": "res = obj2ast_withitem(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 1136,
        "fullcodeline": "asdl_seq_SET(items, i, val);"
    },
    {
        "line": 1151,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 1160,
        "fullcodeline": "res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 1166,
        "fullcodeline": "asdl_seq_SET(body, i, val);"
    },
    {
        "line": 1207,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 1216,
        "fullcodeline": "res = obj2ast_withitem(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 1222,
        "fullcodeline": "asdl_seq_SET(items, i, val);"
    },
    {
        "line": 1237,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 1246,
        "fullcodeline": "res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 1252,
        "fullcodeline": "asdl_seq_SET(body, i, val);"
    },
    {
        "line": 1332,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 1341,
        "fullcodeline": "res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 1347,
        "fullcodeline": "asdl_seq_SET(body, i, val);"
    },
    {
        "line": 1362,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 1371,
        "fullcodeline": "res = obj2ast_excepthandler(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 1377,
        "fullcodeline": "asdl_seq_SET(handlers, i, val);"
    },
    {
        "line": 1392,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 1401,
        "fullcodeline": "res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 1407,
        "fullcodeline": "asdl_seq_SET(orelse, i, val);"
    },
    {
        "line": 1422,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 1431,
        "fullcodeline": "res = obj2ast_stmt(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 1437,
        "fullcodeline": "asdl_seq_SET(finalbody, i, val);"
    },
    {
        "line": 1502,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 1511,
        "fullcodeline": "res = obj2ast_alias(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 1517,
        "fullcodeline": "asdl_seq_SET(names, i, val);"
    },
    {
        "line": 1558,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 1567,
        "fullcodeline": "res = obj2ast_alias(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 1573,
        "fullcodeline": "asdl_seq_SET(names, i, val);"
    },
    {
        "line": 1612,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 1621,
        "fullcodeline": "res = obj2ast_identifier(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 1627,
        "fullcodeline": "asdl_seq_SET(names, i, val);"
    },
    {
        "line": 1653,
        "fullcodeline": "if (!PyList_Check(tmp)) {"
    },
    {
        "line": 1662,
        "fullcodeline": "res = obj2ast_identifier(PyList_GET_ITEM(tmp, i), &val, arena);"
    },
    {
        "line": 1668,
        "fullcodeline": "asdl_seq_SET(names, i, val);"
    },
    {
        "line": 99,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 129,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 228,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 258,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 343,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 373,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 403,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 433,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 499,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 542,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 758,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 788,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 873,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 903,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 973,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 1003,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 1059,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 1089,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 1132,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 1162,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 1218,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 1248,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 1343,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 1373,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 1403,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 1433,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 1513,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 1569,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 1623,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    },
    {
        "line": 1664,
        "fullcodeline": "if (len != PyList_GET_SIZE(tmp)) {"
    }
]