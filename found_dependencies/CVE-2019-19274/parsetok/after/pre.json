[
    {
        "line": 6,
        "fullcodeline": "int started = 0;"
    },
    {
        "line": 9,
        "fullcodeline": "if (!growable_int_array_init(&type_ignores, 10)) {"
    },
    {
        "line": 15,
        "fullcodeline": "if ((ps = Ta3Parser_New(g, start)) == NULL) {"
    },
    {
        "line": 165,
        "fullcodeline": "if (n == NULL) {"
    },
    {
        "line": 10,
        "fullcodeline": "err_ret->error = E_NOMEM;"
    },
    {
        "line": 11,
        "fullcodeline": "Ta3Tokenizer_Free(tok);"
    },
    {
        "line": 32,
        "fullcodeline": "type = Ta3Tokenizer_Get(tok, &a, &b);"
    },
    {
        "line": 52,
        "fullcodeline": "len = (a != NULL && b != NULL) ? b - a : 0;"
    },
    {
        "line": 53,
        "fullcodeline": "str = (char *) PyObject_MALLOC(len + 1);"
    },
    {
        "line": 60,
        "fullcodeline": "str[len] = '\\0';"
    },
    {
        "line": 108,
        "fullcodeline": "n = ps->p_tree;"
    },
    {
        "line": 109,
        "fullcodeline": "ps->p_tree = NULL;"
    },
    {
        "line": 33,
        "fullcodeline": "if (type == ERRORTOKEN) {"
    },
    {
        "line": 54,
        "fullcodeline": "if (str == NULL) {"
    },
    {
        "line": 58,
        "fullcodeline": "if (len > 0)"
    },
    {
        "line": 87,
        "fullcodeline": "if (type == TYPE_IGNORE) {"
    },
    {
        "line": 95,
        "fullcodeline": "if ((err_ret->error ="
    },
    {
        "line": 111,
        "fullcodeline": "if (n->n_type == file_input) {"
    },
    {
        "line": 132,
        "fullcodeline": "if (start == single_input) {"
    },
    {
        "line": 158,
        "fullcodeline": "n = NULL;"
    },
    {
        "line": 166,
        "fullcodeline": "if (tok->done == E_EOF)"
    },
    {
        "line": 169,
        "fullcodeline": "if (tok->buf != NULL) {"
    },
    {
        "line": 34,
        "fullcodeline": "err_ret->error = tok->done;"
    },
    {
        "line": 37,
        "fullcodeline": "if (type == ENDMARKER && started) {"
    },
    {
        "line": 38,
        "fullcodeline": "type = NEWLINE; /* Add an extra newline */"
    },
    {
        "line": 39,
        "fullcodeline": "started = 0;"
    },
    {
        "line": 55,
        "fullcodeline": "err_ret->error = E_NOMEM;"
    },
    {
        "line": 59,
        "fullcodeline": "strncpy(str, a, len);"
    },
    {
        "line": 79,
        "fullcodeline": "if (a != NULL && a >= tok->line_start) {"
    },
    {
        "line": 117,
        "fullcodeline": "num = NCH(n);"
    },
    {
        "line": 118,
        "fullcodeline": "ch = CHILD(n, num - 1);"
    },
    {
        "line": 119,
        "fullcodeline": "REQ(ch, ENDMARKER);"
    },
    {
        "line": 133,
        "fullcodeline": "char *cur = tok->cur;"
    },
    {
        "line": 134,
        "fullcodeline": "char c = *tok->cur;"
    },
    {
        "line": 173,
        "fullcodeline": "len = tok->inp - tok->buf;"
    },
    {
        "line": 174,
        "fullcodeline": "err_ret->text = (char *) PyObject_MALLOC(len + 1);"
    },
    {
        "line": 181,
        "fullcodeline": "} else if (tok->encoding != NULL) {"
    },
    {
        "line": 43,
        "fullcodeline": "if (tok->indent &&"
    },
    {
        "line": 51,
        "fullcodeline": "started = 1;"
    },
    {
        "line": 84,
        "fullcodeline": "col_offset = -1;"
    },
    {
        "line": 96,
        "fullcodeline": "Ta3Parser_AddToken(ps, (int)type, str,"
    },
    {
        "line": 99,
        "fullcodeline": "if (err_ret->error != E_DONE) {"
    },
    {
        "line": 121,
        "fullcodeline": "for (i = 0; i < type_ignores.num_items; i++) {"
    },
    {
        "line": 171,
        "fullcodeline": "assert(tok->cur - tok->buf < INT_MAX);"
    },
    {
        "line": 175,
        "fullcodeline": "if (err_ret->text != NULL) {"
    },
    {
        "line": 185,
        "fullcodeline": "node* r = Ta3Node_New(encoding_decl);"
    },
    {
        "line": 195,
        "fullcodeline": "strcpy(r->n_str, tok->encoding);"
    },
    {
        "line": 197,
        "fullcodeline": "tok->encoding = NULL;"
    },
    {
        "line": 198,
        "fullcodeline": "r->n_nchildren = 1;"
    },
    {
        "line": 199,
        "fullcodeline": "r->n_child = n;"
    },
    {
        "line": 200,
        "fullcodeline": "n = r;"
    },
    {
        "line": 44,
        "fullcodeline": "!(*flags & PyPARSE_DONT_IMPLY_DEDENT))"
    },
    {
        "line": 46,
        "fullcodeline": "tok->pendin = -tok->indent;"
    },
    {
        "line": 47,
        "fullcodeline": "tok->indent = 0;"
    },
    {
        "line": 88,
        "fullcodeline": "if (!growable_int_array_add(&type_ignores, tok->lineno)) {"
    },
    {
        "line": 89,
        "fullcodeline": "err_ret->error = E_NOMEM;"
    },
    {
        "line": 122,
        "fullcodeline": "Ta3Node_AddChild(ch, TYPE_IGNORE, NULL, type_ignores.items[i], 0);"
    },
    {
        "line": 172,
        "fullcodeline": "err_ret->offset = (int)(tok->cur - tok->buf);"
    },
    {
        "line": 138,
        "fullcodeline": "c = *++cur;"
    },
    {
        "line": 140,
        "fullcodeline": "if (!c)"
    },
    {
        "line": 143,
        "fullcodeline": "if (c != '#') {"
    },
    {
        "line": 151,
        "fullcodeline": "while (c && c != '\\n')"
    },
    {
        "line": 152,
        "fullcodeline": "c = *++cur;"
    },
    {
        "line": 176,
        "fullcodeline": "if (len > 0)"
    },
    {
        "line": 187,
        "fullcodeline": "r->n_str = PyObject_MALLOC(strlen(tok->encoding)+1);"
    },
    {
        "line": 188,
        "fullcodeline": "if (!r || !r->n_str) {"
    },
    {
        "line": 192,
        "fullcodeline": "n = NULL;"
    },
    {
        "line": 137,
        "fullcodeline": "while (c == ' ' || c == '\\t' || c == '\\n' || c == '\\014')"
    },
    {
        "line": 144,
        "fullcodeline": "err_ret->error = E_BADSINGLE;"
    },
    {
        "line": 146,
        "fullcodeline": "n = NULL;"
    },
    {
        "line": 177,
        "fullcodeline": "strncpy(err_ret->text, tok->buf, len);"
    }
]