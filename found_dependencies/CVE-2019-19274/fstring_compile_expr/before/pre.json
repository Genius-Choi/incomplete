[
    {
        "line": 5,
        "fullcodeline": "int all_whitespace = 1;"
    },
    {
        "line": 15,
        "fullcodeline": "assert(expr_end >= expr_start);"
    },
    {
        "line": 16,
        "fullcodeline": "assert(*(expr_start-1) == '{');"
    },
    {
        "line": 17,
        "fullcodeline": "assert(*expr_end == '}' || *expr_end == '!' || *expr_end == ':');"
    },
    {
        "line": 29,
        "fullcodeline": "o = PyUnicode_DecodeUTF8(expr_start, expr_end-expr_start, NULL);"
    },
    {
        "line": 32,
        "fullcodeline": "len = PyUnicode_GET_LENGTH(o);"
    },
    {
        "line": 33,
        "fullcodeline": "kind = PyUnicode_KIND(o);"
    },
    {
        "line": 34,
        "fullcodeline": "data = PyUnicode_DATA(o);"
    },
    {
        "line": 48,
        "fullcodeline": "len = expr_end - expr_start;"
    },
    {
        "line": 50,
        "fullcodeline": "str = PyMem_RawMalloc(len + 3);"
    },
    {
        "line": 54,
        "fullcodeline": "str[0] = '(';"
    },
    {
        "line": 55,
        "fullcodeline": "memcpy(str+1, expr_start, len);"
    },
    {
        "line": 56,
        "fullcodeline": "str[len+1] = ')';"
    },
    {
        "line": 57,
        "fullcodeline": "str[len+2] = 0;"
    },
    {
        "line": 59,
        "fullcodeline": "cf.cf_flags = PyCF_ONLY_AST;"
    },
    {
        "line": 60,
        "fullcodeline": "fstring_name = PyUnicode_FromString(\"<fstring>\");"
    },
    {
        "line": 61,
        "fullcodeline": "mod = string_object_to_c_ast(str, fstring_name,"
    },
    {
        "line": 30,
        "fullcodeline": "if (o == NULL)"
    },
    {
        "line": 35,
        "fullcodeline": "for (i = 0; i < len; i++) {"
    },
    {
        "line": 51,
        "fullcodeline": "if (str == NULL)"
    },
    {
        "line": 36,
        "fullcodeline": "if (!Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, i))) {"
    }
]