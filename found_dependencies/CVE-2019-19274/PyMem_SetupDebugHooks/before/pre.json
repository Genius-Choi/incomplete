[
    {
        "line": 5,
        "fullcodeline": "alloc.malloc = _PyMem_DebugRawMalloc;"
    },
    {
        "line": 6,
        "fullcodeline": "alloc.calloc = _PyMem_DebugRawCalloc;"
    },
    {
        "line": 7,
        "fullcodeline": "alloc.realloc = _PyMem_DebugRawRealloc;"
    },
    {
        "line": 8,
        "fullcodeline": "alloc.free = _PyMem_DebugRawFree;"
    },
    {
        "line": 16,
        "fullcodeline": "alloc.malloc = _PyMem_DebugMalloc;"
    },
    {
        "line": 17,
        "fullcodeline": "alloc.calloc = _PyMem_DebugCalloc;"
    },
    {
        "line": 18,
        "fullcodeline": "alloc.realloc = _PyMem_DebugRealloc;"
    },
    {
        "line": 19,
        "fullcodeline": "alloc.free = _PyMem_DebugFree;"
    },
    {
        "line": 10,
        "fullcodeline": "if (_PyMem_Raw.malloc != _PyMem_DebugRawMalloc) {"
    },
    {
        "line": 21,
        "fullcodeline": "if (_PyMem.malloc != _PyMem_DebugMalloc) {"
    },
    {
        "line": 27,
        "fullcodeline": "if (_PyObject.malloc != _PyMem_DebugMalloc) {"
    },
    {
        "line": 11,
        "fullcodeline": "alloc.ctx = &_PyMem_Debug.raw;"
    },
    {
        "line": 12,
        "fullcodeline": "PyMem_GetAllocator(PYMEM_DOMAIN_RAW, &_PyMem_Debug.raw.alloc);"
    },
    {
        "line": 13,
        "fullcodeline": "PyMem_SetAllocator(PYMEM_DOMAIN_RAW, &alloc);"
    },
    {
        "line": 22,
        "fullcodeline": "alloc.ctx = &_PyMem_Debug.mem;"
    },
    {
        "line": 23,
        "fullcodeline": "PyMem_GetAllocator(PYMEM_DOMAIN_MEM, &_PyMem_Debug.mem.alloc);"
    },
    {
        "line": 24,
        "fullcodeline": "PyMem_SetAllocator(PYMEM_DOMAIN_MEM, &alloc);"
    },
    {
        "line": 28,
        "fullcodeline": "alloc.ctx = &_PyMem_Debug.obj;"
    },
    {
        "line": 29,
        "fullcodeline": "PyMem_GetAllocator(PYMEM_DOMAIN_OBJ, &_PyMem_Debug.obj.alloc);"
    },
    {
        "line": 30,
        "fullcodeline": "PyMem_SetAllocator(PYMEM_DOMAIN_OBJ, &alloc);"
    }
]