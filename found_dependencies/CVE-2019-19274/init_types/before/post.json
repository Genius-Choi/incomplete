[
    {
        "line": 6,
        "fullcodeline": "mod_type = make_type(\"mod\", &AST_type, NULL, 0);"
    },
    {
        "line": 9,
        "fullcodeline": "Module_type = make_type(\"Module\", mod_type, Module_fields, 1);"
    },
    {
        "line": 11,
        "fullcodeline": "Interactive_type = make_type(\"Interactive\", mod_type, Interactive_fields,"
    },
    {
        "line": 14,
        "fullcodeline": "Expression_type = make_type(\"Expression\", mod_type, Expression_fields, 1);"
    },
    {
        "line": 16,
        "fullcodeline": "Suite_type = make_type(\"Suite\", mod_type, Suite_fields, 1);"
    },
    {
        "line": 18,
        "fullcodeline": "stmt_type = make_type(\"stmt\", &AST_type, NULL, 0);"
    },
    {
        "line": 21,
        "fullcodeline": "FunctionDef_type = make_type(\"FunctionDef\", stmt_type, FunctionDef_fields,"
    },
    {
        "line": 24,
        "fullcodeline": "AsyncFunctionDef_type = make_type(\"AsyncFunctionDef\", stmt_type,"
    },
    {
        "line": 27,
        "fullcodeline": "ClassDef_type = make_type(\"ClassDef\", stmt_type, ClassDef_fields, 5);"
    },
    {
        "line": 29,
        "fullcodeline": "Return_type = make_type(\"Return\", stmt_type, Return_fields, 1);"
    },
    {
        "line": 31,
        "fullcodeline": "Delete_type = make_type(\"Delete\", stmt_type, Delete_fields, 1);"
    },
    {
        "line": 33,
        "fullcodeline": "Assign_type = make_type(\"Assign\", stmt_type, Assign_fields, 2);"
    },
    {
        "line": 35,
        "fullcodeline": "AugAssign_type = make_type(\"AugAssign\", stmt_type, AugAssign_fields, 3);"
    },
    {
        "line": 37,
        "fullcodeline": "AnnAssign_type = make_type(\"AnnAssign\", stmt_type, AnnAssign_fields, 4);"
    },
    {
        "line": 39,
        "fullcodeline": "For_type = make_type(\"For\", stmt_type, For_fields, 4);"
    },
    {
        "line": 41,
        "fullcodeline": "AsyncFor_type = make_type(\"AsyncFor\", stmt_type, AsyncFor_fields, 4);"
    },
    {
        "line": 43,
        "fullcodeline": "While_type = make_type(\"While\", stmt_type, While_fields, 3);"
    },
    {
        "line": 45,
        "fullcodeline": "If_type = make_type(\"If\", stmt_type, If_fields, 3);"
    },
    {
        "line": 47,
        "fullcodeline": "With_type = make_type(\"With\", stmt_type, With_fields, 2);"
    },
    {
        "line": 49,
        "fullcodeline": "AsyncWith_type = make_type(\"AsyncWith\", stmt_type, AsyncWith_fields, 2);"
    },
    {
        "line": 51,
        "fullcodeline": "Raise_type = make_type(\"Raise\", stmt_type, Raise_fields, 2);"
    },
    {
        "line": 53,
        "fullcodeline": "Try_type = make_type(\"Try\", stmt_type, Try_fields, 4);"
    },
    {
        "line": 55,
        "fullcodeline": "Assert_type = make_type(\"Assert\", stmt_type, Assert_fields, 2);"
    },
    {
        "line": 57,
        "fullcodeline": "Import_type = make_type(\"Import\", stmt_type, Import_fields, 1);"
    },
    {
        "line": 59,
        "fullcodeline": "ImportFrom_type = make_type(\"ImportFrom\", stmt_type, ImportFrom_fields, 3);"
    },
    {
        "line": 61,
        "fullcodeline": "Global_type = make_type(\"Global\", stmt_type, Global_fields, 1);"
    },
    {
        "line": 63,
        "fullcodeline": "Nonlocal_type = make_type(\"Nonlocal\", stmt_type, Nonlocal_fields, 1);"
    },
    {
        "line": 65,
        "fullcodeline": "Expr_type = make_type(\"Expr\", stmt_type, Expr_fields, 1);"
    },
    {
        "line": 67,
        "fullcodeline": "Pass_type = make_type(\"Pass\", stmt_type, NULL, 0);"
    },
    {
        "line": 69,
        "fullcodeline": "Break_type = make_type(\"Break\", stmt_type, NULL, 0);"
    },
    {
        "line": 71,
        "fullcodeline": "Continue_type = make_type(\"Continue\", stmt_type, NULL, 0);"
    },
    {
        "line": 73,
        "fullcodeline": "expr_type = make_type(\"expr\", &AST_type, NULL, 0);"
    },
    {
        "line": 76,
        "fullcodeline": "BoolOp_type = make_type(\"BoolOp\", expr_type, BoolOp_fields, 2);"
    },
    {
        "line": 78,
        "fullcodeline": "NamedExpr_type = make_type(\"NamedExpr\", expr_type, NamedExpr_fields, 2);"
    },
    {
        "line": 80,
        "fullcodeline": "BinOp_type = make_type(\"BinOp\", expr_type, BinOp_fields, 3);"
    },
    {
        "line": 82,
        "fullcodeline": "UnaryOp_type = make_type(\"UnaryOp\", expr_type, UnaryOp_fields, 2);"
    },
    {
        "line": 84,
        "fullcodeline": "Lambda_type = make_type(\"Lambda\", expr_type, Lambda_fields, 2);"
    },
    {
        "line": 86,
        "fullcodeline": "IfExp_type = make_type(\"IfExp\", expr_type, IfExp_fields, 3);"
    },
    {
        "line": 88,
        "fullcodeline": "Dict_type = make_type(\"Dict\", expr_type, Dict_fields, 2);"
    },
    {
        "line": 90,
        "fullcodeline": "Set_type = make_type(\"Set\", expr_type, Set_fields, 1);"
    },
    {
        "line": 92,
        "fullcodeline": "ListComp_type = make_type(\"ListComp\", expr_type, ListComp_fields, 2);"
    },
    {
        "line": 94,
        "fullcodeline": "SetComp_type = make_type(\"SetComp\", expr_type, SetComp_fields, 2);"
    },
    {
        "line": 96,
        "fullcodeline": "DictComp_type = make_type(\"DictComp\", expr_type, DictComp_fields, 3);"
    },
    {
        "line": 98,
        "fullcodeline": "GeneratorExp_type = make_type(\"GeneratorExp\", expr_type,"
    },
    {
        "line": 101,
        "fullcodeline": "Await_type = make_type(\"Await\", expr_type, Await_fields, 1);"
    },
    {
        "line": 103,
        "fullcodeline": "Yield_type = make_type(\"Yield\", expr_type, Yield_fields, 1);"
    },
    {
        "line": 105,
        "fullcodeline": "YieldFrom_type = make_type(\"YieldFrom\", expr_type, YieldFrom_fields, 1);"
    },
    {
        "line": 107,
        "fullcodeline": "Compare_type = make_type(\"Compare\", expr_type, Compare_fields, 3);"
    },
    {
        "line": 109,
        "fullcodeline": "Call_type = make_type(\"Call\", expr_type, Call_fields, 3);"
    },
    {
        "line": 111,
        "fullcodeline": "FormattedValue_type = make_type(\"FormattedValue\", expr_type,"
    },
    {
        "line": 114,
        "fullcodeline": "JoinedStr_type = make_type(\"JoinedStr\", expr_type, JoinedStr_fields, 1);"
    },
    {
        "line": 116,
        "fullcodeline": "Constant_type = make_type(\"Constant\", expr_type, Constant_fields, 1);"
    },
    {
        "line": 118,
        "fullcodeline": "Attribute_type = make_type(\"Attribute\", expr_type, Attribute_fields, 3);"
    },
    {
        "line": 120,
        "fullcodeline": "Subscript_type = make_type(\"Subscript\", expr_type, Subscript_fields, 3);"
    },
    {
        "line": 122,
        "fullcodeline": "Starred_type = make_type(\"Starred\", expr_type, Starred_fields, 2);"
    },
    {
        "line": 124,
        "fullcodeline": "Name_type = make_type(\"Name\", expr_type, Name_fields, 2);"
    },
    {
        "line": 126,
        "fullcodeline": "List_type = make_type(\"List\", expr_type, List_fields, 2);"
    },
    {
        "line": 128,
        "fullcodeline": "Tuple_type = make_type(\"Tuple\", expr_type, Tuple_fields, 2);"
    },
    {
        "line": 130,
        "fullcodeline": "expr_context_type = make_type(\"expr_context\", &AST_type, NULL, 0);"
    },
    {
        "line": 133,
        "fullcodeline": "Load_type = make_type(\"Load\", expr_context_type, NULL, 0);"
    },
    {
        "line": 135,
        "fullcodeline": "Load_singleton = PyType_GenericNew(Load_type, NULL, NULL);"
    },
    {
        "line": 137,
        "fullcodeline": "Store_type = make_type(\"Store\", expr_context_type, NULL, 0);"
    },
    {
        "line": 139,
        "fullcodeline": "Store_singleton = PyType_GenericNew(Store_type, NULL, NULL);"
    },
    {
        "line": 141,
        "fullcodeline": "Del_type = make_type(\"Del\", expr_context_type, NULL, 0);"
    },
    {
        "line": 143,
        "fullcodeline": "Del_singleton = PyType_GenericNew(Del_type, NULL, NULL);"
    },
    {
        "line": 145,
        "fullcodeline": "AugLoad_type = make_type(\"AugLoad\", expr_context_type, NULL, 0);"
    },
    {
        "line": 147,
        "fullcodeline": "AugLoad_singleton = PyType_GenericNew(AugLoad_type, NULL, NULL);"
    },
    {
        "line": 149,
        "fullcodeline": "AugStore_type = make_type(\"AugStore\", expr_context_type, NULL, 0);"
    },
    {
        "line": 151,
        "fullcodeline": "AugStore_singleton = PyType_GenericNew(AugStore_type, NULL, NULL);"
    },
    {
        "line": 153,
        "fullcodeline": "Param_type = make_type(\"Param\", expr_context_type, NULL, 0);"
    },
    {
        "line": 155,
        "fullcodeline": "Param_singleton = PyType_GenericNew(Param_type, NULL, NULL);"
    },
    {
        "line": 157,
        "fullcodeline": "NamedStore_type = make_type(\"NamedStore\", expr_context_type, NULL, 0);"
    },
    {
        "line": 159,
        "fullcodeline": "NamedStore_singleton = PyType_GenericNew(NamedStore_type, NULL, NULL);"
    },
    {
        "line": 161,
        "fullcodeline": "slice_type = make_type(\"slice\", &AST_type, NULL, 0);"
    },
    {
        "line": 164,
        "fullcodeline": "Slice_type = make_type(\"Slice\", slice_type, Slice_fields, 3);"
    },
    {
        "line": 166,
        "fullcodeline": "ExtSlice_type = make_type(\"ExtSlice\", slice_type, ExtSlice_fields, 1);"
    },
    {
        "line": 168,
        "fullcodeline": "Index_type = make_type(\"Index\", slice_type, Index_fields, 1);"
    },
    {
        "line": 170,
        "fullcodeline": "boolop_type = make_type(\"boolop\", &AST_type, NULL, 0);"
    },
    {
        "line": 173,
        "fullcodeline": "And_type = make_type(\"And\", boolop_type, NULL, 0);"
    },
    {
        "line": 175,
        "fullcodeline": "And_singleton = PyType_GenericNew(And_type, NULL, NULL);"
    },
    {
        "line": 177,
        "fullcodeline": "Or_type = make_type(\"Or\", boolop_type, NULL, 0);"
    },
    {
        "line": 179,
        "fullcodeline": "Or_singleton = PyType_GenericNew(Or_type, NULL, NULL);"
    },
    {
        "line": 181,
        "fullcodeline": "operator_type = make_type(\"operator\", &AST_type, NULL, 0);"
    },
    {
        "line": 184,
        "fullcodeline": "Add_type = make_type(\"Add\", operator_type, NULL, 0);"
    },
    {
        "line": 186,
        "fullcodeline": "Add_singleton = PyType_GenericNew(Add_type, NULL, NULL);"
    },
    {
        "line": 188,
        "fullcodeline": "Sub_type = make_type(\"Sub\", operator_type, NULL, 0);"
    },
    {
        "line": 190,
        "fullcodeline": "Sub_singleton = PyType_GenericNew(Sub_type, NULL, NULL);"
    },
    {
        "line": 192,
        "fullcodeline": "Mult_type = make_type(\"Mult\", operator_type, NULL, 0);"
    },
    {
        "line": 194,
        "fullcodeline": "Mult_singleton = PyType_GenericNew(Mult_type, NULL, NULL);"
    },
    {
        "line": 196,
        "fullcodeline": "MatMult_type = make_type(\"MatMult\", operator_type, NULL, 0);"
    },
    {
        "line": 198,
        "fullcodeline": "MatMult_singleton = PyType_GenericNew(MatMult_type, NULL, NULL);"
    },
    {
        "line": 200,
        "fullcodeline": "Div_type = make_type(\"Div\", operator_type, NULL, 0);"
    },
    {
        "line": 202,
        "fullcodeline": "Div_singleton = PyType_GenericNew(Div_type, NULL, NULL);"
    },
    {
        "line": 204,
        "fullcodeline": "Mod_type = make_type(\"Mod\", operator_type, NULL, 0);"
    },
    {
        "line": 206,
        "fullcodeline": "Mod_singleton = PyType_GenericNew(Mod_type, NULL, NULL);"
    },
    {
        "line": 208,
        "fullcodeline": "Pow_type = make_type(\"Pow\", operator_type, NULL, 0);"
    },
    {
        "line": 210,
        "fullcodeline": "Pow_singleton = PyType_GenericNew(Pow_type, NULL, NULL);"
    },
    {
        "line": 212,
        "fullcodeline": "LShift_type = make_type(\"LShift\", operator_type, NULL, 0);"
    },
    {
        "line": 214,
        "fullcodeline": "LShift_singleton = PyType_GenericNew(LShift_type, NULL, NULL);"
    },
    {
        "line": 216,
        "fullcodeline": "RShift_type = make_type(\"RShift\", operator_type, NULL, 0);"
    },
    {
        "line": 218,
        "fullcodeline": "RShift_singleton = PyType_GenericNew(RShift_type, NULL, NULL);"
    },
    {
        "line": 220,
        "fullcodeline": "BitOr_type = make_type(\"BitOr\", operator_type, NULL, 0);"
    },
    {
        "line": 222,
        "fullcodeline": "BitOr_singleton = PyType_GenericNew(BitOr_type, NULL, NULL);"
    },
    {
        "line": 224,
        "fullcodeline": "BitXor_type = make_type(\"BitXor\", operator_type, NULL, 0);"
    },
    {
        "line": 226,
        "fullcodeline": "BitXor_singleton = PyType_GenericNew(BitXor_type, NULL, NULL);"
    },
    {
        "line": 228,
        "fullcodeline": "BitAnd_type = make_type(\"BitAnd\", operator_type, NULL, 0);"
    },
    {
        "line": 230,
        "fullcodeline": "BitAnd_singleton = PyType_GenericNew(BitAnd_type, NULL, NULL);"
    },
    {
        "line": 232,
        "fullcodeline": "FloorDiv_type = make_type(\"FloorDiv\", operator_type, NULL, 0);"
    },
    {
        "line": 234,
        "fullcodeline": "FloorDiv_singleton = PyType_GenericNew(FloorDiv_type, NULL, NULL);"
    },
    {
        "line": 236,
        "fullcodeline": "unaryop_type = make_type(\"unaryop\", &AST_type, NULL, 0);"
    },
    {
        "line": 239,
        "fullcodeline": "Invert_type = make_type(\"Invert\", unaryop_type, NULL, 0);"
    },
    {
        "line": 241,
        "fullcodeline": "Invert_singleton = PyType_GenericNew(Invert_type, NULL, NULL);"
    },
    {
        "line": 243,
        "fullcodeline": "Not_type = make_type(\"Not\", unaryop_type, NULL, 0);"
    },
    {
        "line": 245,
        "fullcodeline": "Not_singleton = PyType_GenericNew(Not_type, NULL, NULL);"
    },
    {
        "line": 247,
        "fullcodeline": "UAdd_type = make_type(\"UAdd\", unaryop_type, NULL, 0);"
    },
    {
        "line": 249,
        "fullcodeline": "UAdd_singleton = PyType_GenericNew(UAdd_type, NULL, NULL);"
    },
    {
        "line": 251,
        "fullcodeline": "USub_type = make_type(\"USub\", unaryop_type, NULL, 0);"
    },
    {
        "line": 253,
        "fullcodeline": "USub_singleton = PyType_GenericNew(USub_type, NULL, NULL);"
    },
    {
        "line": 255,
        "fullcodeline": "cmpop_type = make_type(\"cmpop\", &AST_type, NULL, 0);"
    },
    {
        "line": 258,
        "fullcodeline": "Eq_type = make_type(\"Eq\", cmpop_type, NULL, 0);"
    },
    {
        "line": 260,
        "fullcodeline": "Eq_singleton = PyType_GenericNew(Eq_type, NULL, NULL);"
    },
    {
        "line": 262,
        "fullcodeline": "NotEq_type = make_type(\"NotEq\", cmpop_type, NULL, 0);"
    },
    {
        "line": 264,
        "fullcodeline": "NotEq_singleton = PyType_GenericNew(NotEq_type, NULL, NULL);"
    },
    {
        "line": 266,
        "fullcodeline": "Lt_type = make_type(\"Lt\", cmpop_type, NULL, 0);"
    },
    {
        "line": 268,
        "fullcodeline": "Lt_singleton = PyType_GenericNew(Lt_type, NULL, NULL);"
    },
    {
        "line": 270,
        "fullcodeline": "LtE_type = make_type(\"LtE\", cmpop_type, NULL, 0);"
    },
    {
        "line": 272,
        "fullcodeline": "LtE_singleton = PyType_GenericNew(LtE_type, NULL, NULL);"
    },
    {
        "line": 274,
        "fullcodeline": "Gt_type = make_type(\"Gt\", cmpop_type, NULL, 0);"
    },
    {
        "line": 276,
        "fullcodeline": "Gt_singleton = PyType_GenericNew(Gt_type, NULL, NULL);"
    },
    {
        "line": 278,
        "fullcodeline": "GtE_type = make_type(\"GtE\", cmpop_type, NULL, 0);"
    },
    {
        "line": 280,
        "fullcodeline": "GtE_singleton = PyType_GenericNew(GtE_type, NULL, NULL);"
    },
    {
        "line": 282,
        "fullcodeline": "Is_type = make_type(\"Is\", cmpop_type, NULL, 0);"
    },
    {
        "line": 284,
        "fullcodeline": "Is_singleton = PyType_GenericNew(Is_type, NULL, NULL);"
    },
    {
        "line": 286,
        "fullcodeline": "IsNot_type = make_type(\"IsNot\", cmpop_type, NULL, 0);"
    },
    {
        "line": 288,
        "fullcodeline": "IsNot_singleton = PyType_GenericNew(IsNot_type, NULL, NULL);"
    },
    {
        "line": 290,
        "fullcodeline": "In_type = make_type(\"In\", cmpop_type, NULL, 0);"
    },
    {
        "line": 292,
        "fullcodeline": "In_singleton = PyType_GenericNew(In_type, NULL, NULL);"
    },
    {
        "line": 294,
        "fullcodeline": "NotIn_type = make_type(\"NotIn\", cmpop_type, NULL, 0);"
    },
    {
        "line": 296,
        "fullcodeline": "NotIn_singleton = PyType_GenericNew(NotIn_type, NULL, NULL);"
    },
    {
        "line": 298,
        "fullcodeline": "comprehension_type = make_type(\"comprehension\", &AST_type,"
    },
    {
        "line": 302,
        "fullcodeline": "excepthandler_type = make_type(\"excepthandler\", &AST_type, NULL, 0);"
    },
    {
        "line": 306,
        "fullcodeline": "ExceptHandler_type = make_type(\"ExceptHandler\", excepthandler_type,"
    },
    {
        "line": 309,
        "fullcodeline": "arguments_type = make_type(\"arguments\", &AST_type, arguments_fields, 6);"
    },
    {
        "line": 312,
        "fullcodeline": "arg_type = make_type(\"arg\", &AST_type, arg_fields, 2);"
    },
    {
        "line": 315,
        "fullcodeline": "keyword_type = make_type(\"keyword\", &AST_type, keyword_fields, 2);"
    },
    {
        "line": 318,
        "fullcodeline": "alias_type = make_type(\"alias\", &AST_type, alias_fields, 2);"
    },
    {
        "line": 321,
        "fullcodeline": "withitem_type = make_type(\"withitem\", &AST_type, withitem_fields, 2);"
    },
    {
        "line": 324,
        "fullcodeline": "initialized = 1;"
    },
    {
        "line": 5,
        "fullcodeline": "if (add_ast_fields() < 0) return 0;"
    },
    {
        "line": 7,
        "fullcodeline": "if (!mod_type) return 0;"
    },
    {
        "line": 8,
        "fullcodeline": "if (!add_attributes(mod_type, NULL, 0)) return 0;"
    },
    {
        "line": 10,
        "fullcodeline": "if (!Module_type) return 0;"
    },
    {
        "line": 13,
        "fullcodeline": "if (!Interactive_type) return 0;"
    },
    {
        "line": 15,
        "fullcodeline": "if (!Expression_type) return 0;"
    },
    {
        "line": 17,
        "fullcodeline": "if (!Suite_type) return 0;"
    },
    {
        "line": 19,
        "fullcodeline": "if (!stmt_type) return 0;"
    },
    {
        "line": 20,
        "fullcodeline": "if (!add_attributes(stmt_type, stmt_attributes, 4)) return 0;"
    },
    {
        "line": 23,
        "fullcodeline": "if (!FunctionDef_type) return 0;"
    },
    {
        "line": 26,
        "fullcodeline": "if (!AsyncFunctionDef_type) return 0;"
    },
    {
        "line": 28,
        "fullcodeline": "if (!ClassDef_type) return 0;"
    },
    {
        "line": 30,
        "fullcodeline": "if (!Return_type) return 0;"
    },
    {
        "line": 32,
        "fullcodeline": "if (!Delete_type) return 0;"
    },
    {
        "line": 34,
        "fullcodeline": "if (!Assign_type) return 0;"
    },
    {
        "line": 36,
        "fullcodeline": "if (!AugAssign_type) return 0;"
    },
    {
        "line": 38,
        "fullcodeline": "if (!AnnAssign_type) return 0;"
    },
    {
        "line": 40,
        "fullcodeline": "if (!For_type) return 0;"
    },
    {
        "line": 42,
        "fullcodeline": "if (!AsyncFor_type) return 0;"
    },
    {
        "line": 44,
        "fullcodeline": "if (!While_type) return 0;"
    },
    {
        "line": 46,
        "fullcodeline": "if (!If_type) return 0;"
    },
    {
        "line": 48,
        "fullcodeline": "if (!With_type) return 0;"
    },
    {
        "line": 50,
        "fullcodeline": "if (!AsyncWith_type) return 0;"
    },
    {
        "line": 52,
        "fullcodeline": "if (!Raise_type) return 0;"
    },
    {
        "line": 54,
        "fullcodeline": "if (!Try_type) return 0;"
    },
    {
        "line": 56,
        "fullcodeline": "if (!Assert_type) return 0;"
    },
    {
        "line": 58,
        "fullcodeline": "if (!Import_type) return 0;"
    },
    {
        "line": 60,
        "fullcodeline": "if (!ImportFrom_type) return 0;"
    },
    {
        "line": 62,
        "fullcodeline": "if (!Global_type) return 0;"
    },
    {
        "line": 64,
        "fullcodeline": "if (!Nonlocal_type) return 0;"
    },
    {
        "line": 66,
        "fullcodeline": "if (!Expr_type) return 0;"
    },
    {
        "line": 68,
        "fullcodeline": "if (!Pass_type) return 0;"
    },
    {
        "line": 70,
        "fullcodeline": "if (!Break_type) return 0;"
    },
    {
        "line": 72,
        "fullcodeline": "if (!Continue_type) return 0;"
    },
    {
        "line": 74,
        "fullcodeline": "if (!expr_type) return 0;"
    },
    {
        "line": 75,
        "fullcodeline": "if (!add_attributes(expr_type, expr_attributes, 4)) return 0;"
    },
    {
        "line": 77,
        "fullcodeline": "if (!BoolOp_type) return 0;"
    },
    {
        "line": 79,
        "fullcodeline": "if (!NamedExpr_type) return 0;"
    },
    {
        "line": 81,
        "fullcodeline": "if (!BinOp_type) return 0;"
    },
    {
        "line": 83,
        "fullcodeline": "if (!UnaryOp_type) return 0;"
    },
    {
        "line": 85,
        "fullcodeline": "if (!Lambda_type) return 0;"
    },
    {
        "line": 87,
        "fullcodeline": "if (!IfExp_type) return 0;"
    },
    {
        "line": 89,
        "fullcodeline": "if (!Dict_type) return 0;"
    },
    {
        "line": 91,
        "fullcodeline": "if (!Set_type) return 0;"
    },
    {
        "line": 93,
        "fullcodeline": "if (!ListComp_type) return 0;"
    },
    {
        "line": 95,
        "fullcodeline": "if (!SetComp_type) return 0;"
    },
    {
        "line": 97,
        "fullcodeline": "if (!DictComp_type) return 0;"
    },
    {
        "line": 100,
        "fullcodeline": "if (!GeneratorExp_type) return 0;"
    },
    {
        "line": 102,
        "fullcodeline": "if (!Await_type) return 0;"
    },
    {
        "line": 104,
        "fullcodeline": "if (!Yield_type) return 0;"
    },
    {
        "line": 106,
        "fullcodeline": "if (!YieldFrom_type) return 0;"
    },
    {
        "line": 108,
        "fullcodeline": "if (!Compare_type) return 0;"
    },
    {
        "line": 110,
        "fullcodeline": "if (!Call_type) return 0;"
    },
    {
        "line": 113,
        "fullcodeline": "if (!FormattedValue_type) return 0;"
    },
    {
        "line": 115,
        "fullcodeline": "if (!JoinedStr_type) return 0;"
    },
    {
        "line": 117,
        "fullcodeline": "if (!Constant_type) return 0;"
    },
    {
        "line": 119,
        "fullcodeline": "if (!Attribute_type) return 0;"
    },
    {
        "line": 121,
        "fullcodeline": "if (!Subscript_type) return 0;"
    },
    {
        "line": 123,
        "fullcodeline": "if (!Starred_type) return 0;"
    },
    {
        "line": 125,
        "fullcodeline": "if (!Name_type) return 0;"
    },
    {
        "line": 127,
        "fullcodeline": "if (!List_type) return 0;"
    },
    {
        "line": 129,
        "fullcodeline": "if (!Tuple_type) return 0;"
    },
    {
        "line": 131,
        "fullcodeline": "if (!expr_context_type) return 0;"
    },
    {
        "line": 132,
        "fullcodeline": "if (!add_attributes(expr_context_type, NULL, 0)) return 0;"
    },
    {
        "line": 134,
        "fullcodeline": "if (!Load_type) return 0;"
    },
    {
        "line": 136,
        "fullcodeline": "if (!Load_singleton) return 0;"
    },
    {
        "line": 138,
        "fullcodeline": "if (!Store_type) return 0;"
    },
    {
        "line": 140,
        "fullcodeline": "if (!Store_singleton) return 0;"
    },
    {
        "line": 142,
        "fullcodeline": "if (!Del_type) return 0;"
    },
    {
        "line": 144,
        "fullcodeline": "if (!Del_singleton) return 0;"
    },
    {
        "line": 146,
        "fullcodeline": "if (!AugLoad_type) return 0;"
    },
    {
        "line": 148,
        "fullcodeline": "if (!AugLoad_singleton) return 0;"
    },
    {
        "line": 150,
        "fullcodeline": "if (!AugStore_type) return 0;"
    },
    {
        "line": 152,
        "fullcodeline": "if (!AugStore_singleton) return 0;"
    },
    {
        "line": 154,
        "fullcodeline": "if (!Param_type) return 0;"
    },
    {
        "line": 156,
        "fullcodeline": "if (!Param_singleton) return 0;"
    },
    {
        "line": 158,
        "fullcodeline": "if (!NamedStore_type) return 0;"
    },
    {
        "line": 160,
        "fullcodeline": "if (!NamedStore_singleton) return 0;"
    },
    {
        "line": 162,
        "fullcodeline": "if (!slice_type) return 0;"
    },
    {
        "line": 163,
        "fullcodeline": "if (!add_attributes(slice_type, NULL, 0)) return 0;"
    },
    {
        "line": 165,
        "fullcodeline": "if (!Slice_type) return 0;"
    },
    {
        "line": 167,
        "fullcodeline": "if (!ExtSlice_type) return 0;"
    },
    {
        "line": 169,
        "fullcodeline": "if (!Index_type) return 0;"
    },
    {
        "line": 171,
        "fullcodeline": "if (!boolop_type) return 0;"
    },
    {
        "line": 172,
        "fullcodeline": "if (!add_attributes(boolop_type, NULL, 0)) return 0;"
    },
    {
        "line": 174,
        "fullcodeline": "if (!And_type) return 0;"
    },
    {
        "line": 176,
        "fullcodeline": "if (!And_singleton) return 0;"
    },
    {
        "line": 178,
        "fullcodeline": "if (!Or_type) return 0;"
    },
    {
        "line": 180,
        "fullcodeline": "if (!Or_singleton) return 0;"
    },
    {
        "line": 182,
        "fullcodeline": "if (!operator_type) return 0;"
    },
    {
        "line": 183,
        "fullcodeline": "if (!add_attributes(operator_type, NULL, 0)) return 0;"
    },
    {
        "line": 185,
        "fullcodeline": "if (!Add_type) return 0;"
    },
    {
        "line": 187,
        "fullcodeline": "if (!Add_singleton) return 0;"
    },
    {
        "line": 189,
        "fullcodeline": "if (!Sub_type) return 0;"
    },
    {
        "line": 191,
        "fullcodeline": "if (!Sub_singleton) return 0;"
    },
    {
        "line": 193,
        "fullcodeline": "if (!Mult_type) return 0;"
    },
    {
        "line": 195,
        "fullcodeline": "if (!Mult_singleton) return 0;"
    },
    {
        "line": 197,
        "fullcodeline": "if (!MatMult_type) return 0;"
    },
    {
        "line": 199,
        "fullcodeline": "if (!MatMult_singleton) return 0;"
    },
    {
        "line": 201,
        "fullcodeline": "if (!Div_type) return 0;"
    },
    {
        "line": 203,
        "fullcodeline": "if (!Div_singleton) return 0;"
    },
    {
        "line": 205,
        "fullcodeline": "if (!Mod_type) return 0;"
    },
    {
        "line": 207,
        "fullcodeline": "if (!Mod_singleton) return 0;"
    },
    {
        "line": 209,
        "fullcodeline": "if (!Pow_type) return 0;"
    },
    {
        "line": 211,
        "fullcodeline": "if (!Pow_singleton) return 0;"
    },
    {
        "line": 213,
        "fullcodeline": "if (!LShift_type) return 0;"
    },
    {
        "line": 215,
        "fullcodeline": "if (!LShift_singleton) return 0;"
    },
    {
        "line": 217,
        "fullcodeline": "if (!RShift_type) return 0;"
    },
    {
        "line": 219,
        "fullcodeline": "if (!RShift_singleton) return 0;"
    },
    {
        "line": 221,
        "fullcodeline": "if (!BitOr_type) return 0;"
    },
    {
        "line": 223,
        "fullcodeline": "if (!BitOr_singleton) return 0;"
    },
    {
        "line": 225,
        "fullcodeline": "if (!BitXor_type) return 0;"
    },
    {
        "line": 227,
        "fullcodeline": "if (!BitXor_singleton) return 0;"
    },
    {
        "line": 229,
        "fullcodeline": "if (!BitAnd_type) return 0;"
    },
    {
        "line": 231,
        "fullcodeline": "if (!BitAnd_singleton) return 0;"
    },
    {
        "line": 233,
        "fullcodeline": "if (!FloorDiv_type) return 0;"
    },
    {
        "line": 235,
        "fullcodeline": "if (!FloorDiv_singleton) return 0;"
    },
    {
        "line": 237,
        "fullcodeline": "if (!unaryop_type) return 0;"
    },
    {
        "line": 238,
        "fullcodeline": "if (!add_attributes(unaryop_type, NULL, 0)) return 0;"
    },
    {
        "line": 240,
        "fullcodeline": "if (!Invert_type) return 0;"
    },
    {
        "line": 242,
        "fullcodeline": "if (!Invert_singleton) return 0;"
    },
    {
        "line": 244,
        "fullcodeline": "if (!Not_type) return 0;"
    },
    {
        "line": 246,
        "fullcodeline": "if (!Not_singleton) return 0;"
    },
    {
        "line": 248,
        "fullcodeline": "if (!UAdd_type) return 0;"
    },
    {
        "line": 250,
        "fullcodeline": "if (!UAdd_singleton) return 0;"
    },
    {
        "line": 252,
        "fullcodeline": "if (!USub_type) return 0;"
    },
    {
        "line": 254,
        "fullcodeline": "if (!USub_singleton) return 0;"
    },
    {
        "line": 256,
        "fullcodeline": "if (!cmpop_type) return 0;"
    },
    {
        "line": 257,
        "fullcodeline": "if (!add_attributes(cmpop_type, NULL, 0)) return 0;"
    },
    {
        "line": 259,
        "fullcodeline": "if (!Eq_type) return 0;"
    },
    {
        "line": 261,
        "fullcodeline": "if (!Eq_singleton) return 0;"
    },
    {
        "line": 263,
        "fullcodeline": "if (!NotEq_type) return 0;"
    },
    {
        "line": 265,
        "fullcodeline": "if (!NotEq_singleton) return 0;"
    },
    {
        "line": 267,
        "fullcodeline": "if (!Lt_type) return 0;"
    },
    {
        "line": 269,
        "fullcodeline": "if (!Lt_singleton) return 0;"
    },
    {
        "line": 271,
        "fullcodeline": "if (!LtE_type) return 0;"
    },
    {
        "line": 273,
        "fullcodeline": "if (!LtE_singleton) return 0;"
    },
    {
        "line": 275,
        "fullcodeline": "if (!Gt_type) return 0;"
    },
    {
        "line": 277,
        "fullcodeline": "if (!Gt_singleton) return 0;"
    },
    {
        "line": 279,
        "fullcodeline": "if (!GtE_type) return 0;"
    },
    {
        "line": 281,
        "fullcodeline": "if (!GtE_singleton) return 0;"
    },
    {
        "line": 283,
        "fullcodeline": "if (!Is_type) return 0;"
    },
    {
        "line": 285,
        "fullcodeline": "if (!Is_singleton) return 0;"
    },
    {
        "line": 287,
        "fullcodeline": "if (!IsNot_type) return 0;"
    },
    {
        "line": 289,
        "fullcodeline": "if (!IsNot_singleton) return 0;"
    },
    {
        "line": 291,
        "fullcodeline": "if (!In_type) return 0;"
    },
    {
        "line": 293,
        "fullcodeline": "if (!In_singleton) return 0;"
    },
    {
        "line": 295,
        "fullcodeline": "if (!NotIn_type) return 0;"
    },
    {
        "line": 297,
        "fullcodeline": "if (!NotIn_singleton) return 0;"
    },
    {
        "line": 300,
        "fullcodeline": "if (!comprehension_type) return 0;"
    },
    {
        "line": 301,
        "fullcodeline": "if (!add_attributes(comprehension_type, NULL, 0)) return 0;"
    },
    {
        "line": 303,
        "fullcodeline": "if (!excepthandler_type) return 0;"
    },
    {
        "line": 304,
        "fullcodeline": "if (!add_attributes(excepthandler_type, excepthandler_attributes, 4))"
    },
    {
        "line": 308,
        "fullcodeline": "if (!ExceptHandler_type) return 0;"
    },
    {
        "line": 310,
        "fullcodeline": "if (!arguments_type) return 0;"
    },
    {
        "line": 311,
        "fullcodeline": "if (!add_attributes(arguments_type, NULL, 0)) return 0;"
    },
    {
        "line": 313,
        "fullcodeline": "if (!arg_type) return 0;"
    },
    {
        "line": 314,
        "fullcodeline": "if (!add_attributes(arg_type, arg_attributes, 4)) return 0;"
    },
    {
        "line": 316,
        "fullcodeline": "if (!keyword_type) return 0;"
    },
    {
        "line": 317,
        "fullcodeline": "if (!add_attributes(keyword_type, NULL, 0)) return 0;"
    },
    {
        "line": 319,
        "fullcodeline": "if (!alias_type) return 0;"
    },
    {
        "line": 320,
        "fullcodeline": "if (!add_attributes(alias_type, NULL, 0)) return 0;"
    },
    {
        "line": 322,
        "fullcodeline": "if (!withitem_type) return 0;"
    },
    {
        "line": 323,
        "fullcodeline": "if (!add_attributes(withitem_type, NULL, 0)) return 0;"
    }
]