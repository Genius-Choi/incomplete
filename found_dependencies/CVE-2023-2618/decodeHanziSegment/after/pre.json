[
    {
        "line": 3,
        "fullcodeline": "BitSource& bits(*bits_);"
    },
    {
        "line": 12,
        "fullcodeline": "size_t nBytes = 2 * count;"
    },
    {
        "line": 13,
        "fullcodeline": "char* buffer = new char[nBytes];"
    },
    {
        "line": 14,
        "fullcodeline": "int offset = 0;"
    },
    {
        "line": 37,
        "fullcodeline": "append(result, buffer, nBytes, err_handler);"
    },
    {
        "line": 5,
        "fullcodeline": "if (count * 13 > bits.available()) {"
    },
    {
        "line": 15,
        "fullcodeline": "while (count > 0) {"
    },
    {
        "line": 6,
        "fullcodeline": "err_handler = zxing::FormatErrorHandler(\"decodeKanjiSegment\");"
    },
    {
        "line": 17,
        "fullcodeline": "int twoBytes = bits.readBits(13, err_handler);"
    },
    {
        "line": 22,
        "fullcodeline": "int assembledTwoBytes = ((twoBytes / 0x060) << 8) | (twoBytes % 0x060);"
    },
    {
        "line": 30,
        "fullcodeline": "buffer[offset] = (char)((assembledTwoBytes >> 8) & 0xFF);"
    },
    {
        "line": 31,
        "fullcodeline": "buffer[offset + 1] = (char)(assembledTwoBytes & 0xFF);"
    },
    {
        "line": 32,
        "fullcodeline": "offset += 2;"
    },
    {
        "line": 33,
        "fullcodeline": "count--;"
    },
    {
        "line": 18,
        "fullcodeline": "if (err_handler.ErrCode()) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (assembledTwoBytes < 0x003BF) {"
    },
    {
        "line": 25,
        "fullcodeline": "assembledTwoBytes += 0x0A1A1;"
    },
    {
        "line": 28,
        "fullcodeline": "assembledTwoBytes += 0x0A6A1;"
    }
]