[
    {
        "line": 3,
        "fullcodeline": "SSL_CTX *ssl_ctx = NULL;"
    },
    {
        "line": 4,
        "fullcodeline": "SSL *ssl = NULL;"
    },
    {
        "line": 5,
        "fullcodeline": "int n, finished = 0;"
    },
    {
        "line": 15,
        "fullcodeline": "param = X509_VERIFY_PARAM_new();"
    },
    {
        "line": 87,
        "fullcodeline": "SSL_set_cipher_list(ssl, \"ALL\");"
    },
    {
        "line": 89,
        "fullcodeline": "SSL_set_fd (ssl, sockfd);"
    },
    {
        "line": 90,
        "fullcodeline": "SSL_CTX_set_app_data (ssl_ctx, client);"
    },
    {
        "line": 108,
        "fullcodeline": "X509_VERIFY_PARAM_free(param);"
    },
    {
        "line": 112,
        "fullcodeline": "SSL_free(ssl);"
    },
    {
        "line": 115,
        "fullcodeline": "X509_VERIFY_PARAM_free(param);"
    },
    {
        "line": 116,
        "fullcodeline": "SSL_CTX_free(ssl_ctx);"
    },
    {
        "line": 9,
        "fullcodeline": "if (!(ssl_ctx = SSL_CTX_new(SSLv23_client_method())))"
    },
    {
        "line": 18,
        "fullcodeline": "if (!anonTLS)"
    },
    {
        "line": 80,
        "fullcodeline": "if (!(ssl = SSL_new (ssl_ctx)))"
    },
    {
        "line": 106,
        "fullcodeline": "} while( n != 1 && finished != 1 );"
    },
    {
        "line": 11,
        "fullcodeline": "rfbClientLog(\"Could not create new SSL context.\\n\");"
    },
    {
        "line": 65,
        "fullcodeline": "SSL_CTX_set_verify(ssl_ctx, SSL_VERIFY_PEER, NULL);"
    },
    {
        "line": 77,
        "fullcodeline": "SSL_CTX_set1_param(ssl_ctx, param);"
    },
    {
        "line": 82,
        "fullcodeline": "rfbClientLog(\"Could not create a new SSL session.\\n\");"
    },
    {
        "line": 94,
        "fullcodeline": "n = SSL_connect(ssl);"
    },
    {
        "line": 67,
        "fullcodeline": "if (verify_crls == rfbX509CrlVerifyClient)"
    },
    {
        "line": 72,
        "fullcodeline": "if(!X509_VERIFY_PARAM_set1_host(param, client->serverHost, strlen(client->serverHost)))"
    },
    {
        "line": 96,
        "fullcodeline": "if (n != 1)"
    },
    {
        "line": 68,
        "fullcodeline": "X509_VERIFY_PARAM_set_flags(param, X509_V_FLAG_CRL_CHECK);"
    },
    {
        "line": 74,
        "fullcodeline": "rfbClientLog(\"Could not set server name for verification.\\n\");"
    },
    {
        "line": 23,
        "fullcodeline": "if (!SSL_CTX_load_verify_locations(ssl_ctx, cred->x509Credential.x509CACertFile, NULL))"
    },
    {
        "line": 30,
        "fullcodeline": "rfbClientLog(\"Using default paths for certificate verification.\\n\");"
    },
    {
        "line": 31,
        "fullcodeline": "SSL_CTX_set_default_verify_paths (ssl_ctx);"
    },
    {
        "line": 36,
        "fullcodeline": "if (!load_crls_from_file(cred->x509Credential.x509CACrlFile, ssl_ctx))"
    },
    {
        "line": 41,
        "fullcodeline": "if (verify_crls == rfbX509CrlVerifyNone) verify_crls = rfbX509CrlVerifyAll;"
    },
    {
        "line": 46,
        "fullcodeline": "if (SSL_CTX_use_certificate_chain_file(ssl_ctx, cred->x509Credential.x509ClientCertFile) != 1)"
    },
    {
        "line": 52,
        "fullcodeline": "if (SSL_CTX_use_PrivateKey_file(ssl_ctx, cred->x509Credential.x509ClientKeyFile,"
    },
    {
        "line": 59,
        "fullcodeline": "if (SSL_CTX_check_private_key(ssl_ctx) == 0) {"
    },
    {
        "line": 98,
        "fullcodeline": "if (wait_for_data(ssl, n, 1) != 1)"
    },
    {
        "line": 25,
        "fullcodeline": "rfbClientLog(\"Failed to load CA certificate from %s.\\n\","
    },
    {
        "line": 38,
        "fullcodeline": "rfbClientLog(\"CRLs could not be loaded.\\n\");"
    },
    {
        "line": 48,
        "fullcodeline": "rfbClientLog(\"Client certificate could not be loaded.\\n\");"
    },
    {
        "line": 55,
        "fullcodeline": "rfbClientLog(\"Client private key could not be loaded.\\n\");"
    },
    {
        "line": 60,
        "fullcodeline": "rfbClientLog(\"Client certificate and private key do not match.\\n\");"
    },
    {
        "line": 69,
        "fullcodeline": "else if (verify_crls == rfbX509CrlVerifyAll)"
    },
    {
        "line": 100,
        "fullcodeline": "finished = 1;"
    },
    {
        "line": 101,
        "fullcodeline": "SSL_shutdown(ssl);"
    },
    {
        "line": 70,
        "fullcodeline": "X509_VERIFY_PARAM_set_flags(param, X509_V_FLAG_CRL_CHECK | X509_V_FLAG_CRL_CHECK_ALL);"
    }
]