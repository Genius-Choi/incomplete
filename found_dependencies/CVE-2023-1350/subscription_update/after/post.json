[
    {
        "line": 13,
        "fullcodeline": "debug1 (DEBUG_UPDATE, \"Scheduling %s to be updated\", node_get_title (subscription->node));"
    },
    {
        "line": 7,
        "fullcodeline": "if (!subscription)"
    },
    {
        "line": 15,
        "fullcodeline": "if (subscription_can_be_updated (subscription)) {"
    },
    {
        "line": 16,
        "fullcodeline": "now = g_get_real_time();"
    },
    {
        "line": 17,
        "fullcodeline": "subscription_reset_update_counter (subscription, &now);"
    },
    {
        "line": 19,
        "fullcodeline": "request = update_request_new ("
    },
    {
        "line": 24,
        "fullcodeline": "update_request_allow_commands (request, TRUE);"
    },
    {
        "line": 34,
        "fullcodeline": "update_jobs_get_count (&count, &maxcount);"
    },
    {
        "line": 26,
        "fullcodeline": "if (subscription_get_filter (subscription))"
    },
    {
        "line": 29,
        "fullcodeline": "if (SUBSCRIPTION_TYPE (subscription)->prepare_update_request (subscription, request))"
    },
    {
        "line": 35,
        "fullcodeline": "if (count > 1)"
    },
    {
        "line": 20,
        "fullcodeline": "subscription_get_source (subscription),"
    },
    {
        "line": 27,
        "fullcodeline": "request->filtercmd = g_strdup (subscription_get_filter (subscription));"
    },
    {
        "line": 30,
        "fullcodeline": "subscription->updateJob = update_execute_request (subscription, request, subscription_process_update_result, subscription, flags);"
    },
    {
        "line": 36,
        "fullcodeline": "liferea_shell_set_status_bar (_(\"Updating (%d / %d) ...\"), maxcount - count, maxcount);"
    },
    {
        "line": 32,
        "fullcodeline": "g_object_unref (request);"
    },
    {
        "line": 38,
        "fullcodeline": "liferea_shell_set_status_bar (_(\"Updating '%s'...\"), node_get_title (subscription->node));"
    }
]