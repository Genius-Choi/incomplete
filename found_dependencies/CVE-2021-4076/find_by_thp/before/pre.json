[
    {
        "line": 7,
        "fullcodeline": "json_auto_t* keys = json_deep_copy(tki->m_keys);"
    },
    {
        "line": 8,
        "fullcodeline": "json_array_extend(keys, tki->m_rotated_keys);"
    },
    {
        "line": 12,
        "fullcodeline": "const char** hashes = supported_hashes();"
    },
    {
        "line": 13,
        "fullcodeline": "json_array_foreach(keys, idx, jwk) {"
    },
    {
        "line": 3,
        "fullcodeline": "if (!tki) {"
    },
    {
        "line": 14,
        "fullcodeline": "for (int i = 0; hashes[i]; i++) {"
    },
    {
        "line": 15,
        "fullcodeline": "__attribute__ ((__cleanup__(cleanup_str))) char* thumbprint = jwk_thumbprint(jwk, hashes[i]);"
    },
    {
        "line": 20,
        "fullcodeline": "if (jwk_valid_for_deriving_keys(jwk)) {"
    },
    {
        "line": 16,
        "fullcodeline": "if (!thumbprint || strcmp(thumbprint, target) != 0) {"
    },
    {
        "line": 21,
        "fullcodeline": "return json_incref(jwk);"
    },
    {
        "line": 22,
        "fullcodeline": "} else if (jwk_valid_for_signing(jwk)) {"
    },
    {
        "line": 23,
        "fullcodeline": "json_auto_t* sign = json_deep_copy(tki->m_sign);"
    },
    {
        "line": 27,
        "fullcodeline": "json_auto_t* jws = jwk_sign(tki->m_payload, sign);"
    },
    {
        "line": 28,
        "fullcodeline": "if (!jws) {"
    },
    {
        "line": 31,
        "fullcodeline": "return json_incref(jws);"
    },
    {
        "line": 24,
        "fullcodeline": "if (json_array_append(sign, jwk) == -1) {"
    }
]