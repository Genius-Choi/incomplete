[
    {
        "line": 3,
        "fullcodeline": "struct rar *rar = (struct rar *)(a->format->data);"
    },
    {
        "line": 4,
        "fullcodeline": "const void *h = __archive_read_ahead(a, min, avail);"
    },
    {
        "line": 8,
        "fullcodeline": "if (a->archive.read_data_is_posix_read && *avail > (ssize_t)a->archive.read_data_requested)"
    },
    {
        "line": 10,
        "fullcodeline": "if (*avail > rar->bytes_remaining)"
    },
    {
        "line": 12,
        "fullcodeline": "if (*avail < 0)"
    },
    {
        "line": 9,
        "fullcodeline": "*avail = a->archive.read_data_requested;"
    },
    {
        "line": 11,
        "fullcodeline": "*avail = (ssize_t)rar->bytes_remaining;"
    },
    {
        "line": 14,
        "fullcodeline": "else if (*avail == 0 && rar->main_flags & MHD_VOLUME &&"
    },
    {
        "line": 15,
        "fullcodeline": "rar->file_flags & FHD_SPLIT_AFTER)"
    },
    {
        "line": 18,
        "fullcodeline": "ret = archive_read_format_rar_read_header(a, a->entry);"
    },
    {
        "line": 19,
        "fullcodeline": "if (ret == (ARCHIVE_EOF))"
    },
    {
        "line": 25,
        "fullcodeline": "if (ret != (ARCHIVE_OK))"
    },
    {
        "line": 27,
        "fullcodeline": "return rar_read_ahead(a, min, avail);"
    },
    {
        "line": 22,
        "fullcodeline": "ret = archive_read_format_rar_read_header(a, a->entry);"
    }
]