[
    {
        "line": 2,
        "fullcodeline": "Memcached *root = (Memcached *) ptr->root;"
    },
    {
        "line": 17,
        "fullcodeline": "Purge set_purge(root);"
    },
    {
        "line": 19,
        "fullcodeline": "WATCHPOINT_ASSERT(ptr->fd != INVALID_SOCKET);"
    },
    {
        "line": 29,
        "fullcodeline": "WATCHPOINT_ASSERT(ptr->fd != INVALID_SOCKET);"
    },
    {
        "line": 31,
        "fullcodeline": "bool is_successful = true;"
    },
    {
        "line": 32,
        "fullcodeline": "uint32_t no_msg = memcached_server_response_count(ptr);"
    },
    {
        "line": 4,
        "fullcodeline": "if (memcached_is_purging(ptr->root) || /* already purging */"
    },
    {
        "line": 24,
        "fullcodeline": "if (memcached_io_write(ptr) == false) {"
    },
    {
        "line": 33,
        "fullcodeline": "if (no_msg > 1) {"
    },
    {
        "line": 7,
        "fullcodeline": "|| (ptr->io_bytes_sent >= ptr->root->io_bytes_watermark"
    },
    {
        "line": 25,
        "fullcodeline": "memcached_io_reset(ptr);"
    },
    {
        "line": 26,
        "fullcodeline": "memcached_set_error(*ptr, MEMCACHED_WRITE_FAILURE, MEMCACHED_AT);"
    },
    {
        "line": 41,
        "fullcodeline": "PollTimeout poll_timeout(ptr->root);"
    },
    {
        "line": 43,
        "fullcodeline": "memcached_result_st *result_ptr = memcached_result_create(root, &result);"
    },
    {
        "line": 44,
        "fullcodeline": "assert(result_ptr);"
    },
    {
        "line": 76,
        "fullcodeline": "memcached_result_free(result_ptr);"
    },
    {
        "line": 5,
        "fullcodeline": "(memcached_server_response_count(ptr) < ptr->root->io_msg_watermark"
    },
    {
        "line": 8,
        "fullcodeline": "&& memcached_server_response_count(ptr) < 2))"
    },
    {
        "line": 46,
        "fullcodeline": "for (uint32_t x = 0; x < no_msg - 1; x++) {"
    },
    {
        "line": 6,
        "fullcodeline": "&& ptr->io_bytes_sent < ptr->root->io_bytes_watermark)"
    },
    {
        "line": 47,
        "fullcodeline": "memcached_result_reset(result_ptr);"
    },
    {
        "line": 48,
        "fullcodeline": "memcached_return_t rc = memcached_read_one_response(ptr, result_ptr);"
    },
    {
        "line": 54,
        "fullcodeline": "if (rc == MEMCACHED_PROTOCOL_ERROR or rc == MEMCACHED_UNKNOWN_READ_FAILURE"
    },
    {
        "line": 60,
        "fullcodeline": "if (rc == MEMCACHED_TIMEOUT) {"
    },
    {
        "line": 55,
        "fullcodeline": "or rc == MEMCACHED_READ_FAILURE)"
    },
    {
        "line": 57,
        "fullcodeline": "WATCHPOINT_ERROR(rc);"
    },
    {
        "line": 58,
        "fullcodeline": "is_successful = false;"
    },
    {
        "line": 66,
        "fullcodeline": "if (memcached_success(rc)) {"
    },
    {
        "line": 67,
        "fullcodeline": "for (uint32_t y = 0; y < cb.number_of_callback; y++) {"
    },
    {
        "line": 68,
        "fullcodeline": "if (memcached_fatal((*cb.callback[y])(ptr->root, result_ptr, cb.context))) {"
    }
]