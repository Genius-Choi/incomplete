ClientListener::ClientListener(const NetworkAddress& address,
                ISocketFactory* socketFactory,
                IEventQueue* events,
                               ConnectionSecurityLevel security_level) :
    m_socketFactory(socketFactory),
    m_server(NULL),
    m_events(events),
    security_level_{security_level}
{
    assert(m_socketFactory != NULL);

    try {
        m_listen = m_socketFactory->createListen(ARCH->getAddrFamily(address.getAddress()),
                                                 security_level);

        // setup event handler
        m_events->adoptHandler(m_events->forIListenSocket().connecting(),
                    m_listen,
                    new TMethodEventJob<ClientListener>(this,
                            &ClientListener::handleClientConnecting));

        // bind listen address
        LOG((CLOG_DEBUG1 "binding listen socket"));
        m_listen->bind(address);
    }
    catch (XSocketAddressInUse&) {
        cleanupListenSocket();
        delete m_socketFactory;
        throw;
    }
    catch (XBase&) {
        cleanupListenSocket();
        delete m_socketFactory;
        throw;
    }
    LOG((CLOG_DEBUG1 "listening for clients"));
}
