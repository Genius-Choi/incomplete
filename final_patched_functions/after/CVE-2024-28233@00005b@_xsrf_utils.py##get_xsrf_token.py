def get_xsrf_token(handler, cookie_path=""):
    """Override tornado's xsrf token to add further restrictions

    - only set cookie for regular pages (not API requests)
    - include login info in xsrf token
    - verify signature
    """
    # original: https://github.com/tornadoweb/tornado/blob/v6.4.0/tornado/web.py#L1455
    if hasattr(handler, "_xsrf_token"):
        return handler._xsrf_token

    _set_cookie = False
    # the raw cookie is the token
    xsrf_token = xsrf_cookie = handler.get_cookie("_xsrf")
    if xsrf_token:
        try:
            xsrf_token = xsrf_token.encode("ascii")
        except UnicodeEncodeError:
            xsrf_token = None

    xsrf_id_cookie = _get_signed_value_urlsafe(handler, "_xsrf", xsrf_token)
    if xsrf_cookie and not xsrf_id_cookie:
        # we have a cookie, but it's invalid!
        # handle possibility of _xsrf being set multiple times,
        # e.g. on / and on /hub/
        # this will reload the page if it's a GET request
        app_log.warning(
            "Attempting to clear invalid _xsrf cookie %r", xsrf_cookie[:4] + "..."
        )
        _clear_invalid_xsrf_cookie(handler, cookie_path)

    # check the decoded, signed value for validity
    xsrf_id = handler._xsrf_token_id
    if xsrf_id_cookie != xsrf_id:
        # this will usually happen on the first page request after login,
        # which changes the inputs to the token id
        if xsrf_id_cookie:
            app_log.debug("xsrf id mismatch %r != %r", xsrf_id_cookie, xsrf_id)
        # generate new value
        xsrf_token = _create_signed_value_urlsafe(handler, "_xsrf", xsrf_id)
        # only set cookie on regular navigation pages
        # i.e. not API requests, etc.
        # insecure URLs (public hostname/ip, no https)
        # don't set Sec-Fetch-Mode.
        # consequence of assuming 'navigate': setting a cookie unnecessarily
        # consequence of assuming not 'navigate': xsrf never set, nothing works
        _set_cookie = (
            handler.request.headers.get("Sec-Fetch-Mode", "navigate") == "navigate"
        )

    if _set_cookie:
        xsrf_cookie_kwargs = {}
        xsrf_cookie_kwargs.update(handler.settings.get('xsrf_cookie_kwargs', {}))
        xsrf_cookie_kwargs.setdefault("path", cookie_path)
        if not handler.current_user:
            # limit anonymous xsrf cookies to one hour
            xsrf_cookie_kwargs.pop("expires", None)
            xsrf_cookie_kwargs.pop("expires_days", None)
            xsrf_cookie_kwargs["max_age"] = 3600
        app_log.info(
            "Setting new xsrf cookie for %r %r",
            xsrf_id,
            xsrf_cookie_kwargs,
        )
        handler.set_cookie("_xsrf", xsrf_token, **xsrf_cookie_kwargs)
    handler._xsrf_token = xsrf_token
    return xsrf_token
