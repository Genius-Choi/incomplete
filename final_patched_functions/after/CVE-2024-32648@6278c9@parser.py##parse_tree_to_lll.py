def parse_tree_to_lll(global_ctx: GlobalContext) -> Tuple[LLLnode, LLLnode]:
    _names_def = [_def.name for _def in global_ctx._defs]
    # Checks for duplicate function names
    if len(set(_names_def)) < len(_names_def):
        raise FunctionDeclarationException(
            "Duplicate function name: "
            f"{[name for name in _names_def if _names_def.count(name) > 1][0]}"
        )
    _names_events = [_event.name for _event in global_ctx._events]
    # Checks for duplicate event names
    if len(set(_names_events)) < len(_names_events):
        raise EventDeclarationException(
            f"""Duplicate event name:
            {[name for name in _names_events if _names_events.count(name) > 1][0]}"""
        )
    # Initialization function
    init_function = next((_def for _def in global_ctx._defs if is_initializer(_def)), None)
    # Default function
    default_function = next((i for i in global_ctx._defs if is_default_func(i)), None)

    regular_functions = [
        _def for _def in global_ctx._defs if not is_initializer(_def) and not is_default_func(_def)
    ]

    sigs: dict = {}
    external_interfaces: dict = {}
    # Create the main statement
    o: List[Union[str, LLLnode]] = ["seq"]
    if global_ctx._contracts or global_ctx._interfaces:
        external_interfaces = parse_external_interfaces(external_interfaces, global_ctx)

    # TODO: fix for #2251 is to move this after parse_regular_functions
    if init_function:
        o.append(init_func_init_lll())
        init_func_lll, _frame_start, _frame_size = generate_lll_for_function(
            init_function, {**{"self": sigs}, **external_interfaces}, global_ctx, False,
        )
        o.append(init_func_lll)

    if regular_functions or default_function:
        o, runtime = parse_regular_functions(
            o, regular_functions, sigs, external_interfaces, global_ctx, default_function,
        )
    else:
        runtime = o.copy()

    return LLLnode.from_list(o), LLLnode.from_list(runtime)
