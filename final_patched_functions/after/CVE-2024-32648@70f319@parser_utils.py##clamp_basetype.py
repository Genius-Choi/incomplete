def clamp_basetype(lll_node):
    t = lll_node.typ
    if isinstance(t, ByteArrayLike):
        return ["assert", ["le", get_bytearray_length(lll_node), t.maxlen]]
    if isinstance(t, BaseType):
        lll_node = unwrap_location(lll_node)
        if t.typ in ("int128"):
            return int_clamp(lll_node, 128, signed=True)
        if t.typ in ("decimal"):
            return [
                "clamp",
                ["mload", MemoryPositions.MINDECIMAL],
                lll_node,
                ["mload", MemoryPositions.MAXDECIMAL],
            ]

        if t.typ in ("address",):
            return int_clamp(lll_node, 160)
        if t.typ in ("bool",):
            return int_clamp(lll_node, 1)
        if t.typ in ("int256", "uint256", "bytes32"):
            return ["pass"]  # special case, no clamp
    return  # raises
