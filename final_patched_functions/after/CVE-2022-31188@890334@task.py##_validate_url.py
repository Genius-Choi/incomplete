def _validate_url(url):
    def _validate_ip_address(ip_address):
        if not ip_address.is_global:
            raise ValidationError('Non public IP address \'{}\' is provided!'.format(ip_address))

    ALLOWED_SCHEMES = ['http', 'https']

    parsed_url = urlparse.urlparse(url)

    if parsed_url.scheme not in ALLOWED_SCHEMES:
        raise ValueError('Unsupported URL sheme: {}. Only http and https are supported'.format(parsed_url.scheme))

    try:
        ip_address = ipaddress.ip_address(parsed_url.hostname)
        _validate_ip_address(ip_address)
    except ValueError as _:
        ip_v4_records = None
        ip_v6_records = None
        try:
            ip_v4_records = dns.resolver.query(parsed_url.hostname, 'A')
            for record in ip_v4_records:
                _validate_ip_address(ipaddress.ip_address(record.to_text()))
        except ValidationError:
            raise
        except Exception as e:
            slogger.glob.info('Cannot get A record for domain \'{}\': {}'.format(parsed_url.hostname, e))

        try:
            ip_v6_records = dns.resolver.query(parsed_url.hostname, 'AAAA')
            for record in ip_v6_records:
                _validate_ip_address(ipaddress.ip_address(record.to_text()))
        except ValidationError:
            raise
        except Exception as e:
            slogger.glob.info('Cannot get AAAA record for domain \'{}\': {}'.format(parsed_url.hostname, e))

        if not ip_v4_records and not ip_v6_records:
            raise ValidationError('Cannot resolve IP address for domain \'{}\''.format(parsed_url.hostname))
