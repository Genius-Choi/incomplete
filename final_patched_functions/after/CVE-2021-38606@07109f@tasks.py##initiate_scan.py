def initiate_scan(
        domain_id,
        scan_history_id,
        scan_type,
        engine_type,
        imported_subdomains=None,
        out_of_scope_subdomains=None
        ):
    '''
    scan_type = 0 -> immediate scan, need not create scan object
    scan_type = 1 -> scheduled scan
    '''
    engine_object = EngineType.objects.get(pk=engine_type)
    domain = Domain.objects.get(pk=domain_id)
    if scan_type == 1:
        task = ScanHistory()
        task.scan_status = -1
    elif scan_type == 0:
        task = ScanHistory.objects.get(pk=scan_history_id)

    # save the last scan date for domain model
    domain.last_scan_date = timezone.now()
    domain.save()

    # once the celery task starts, change the task status to Started
    task.scan_type = engine_object
    task.celery_id = initiate_scan.request.id
    task.domain = domain
    task.scan_status = 1
    task.start_scan_date = timezone.now()
    task.subdomain_discovery = True if engine_object.subdomain_discovery else False
    task.dir_file_search = True if engine_object.dir_file_search else False
    task.port_scan = True if engine_object.port_scan else False
    task.fetch_url = True if engine_object.fetch_url else False
    task.osint = True if engine_object.osint else False
    task.screenshot = True if engine_object.screenshot else False
    task.vulnerability_scan = True if engine_object.vulnerability_scan else False
    task.save()

    activity_id = create_scan_activity(task, "Scanning Started", 2)
    results_dir = '/usr/src/scan_results/'
    os.chdir(results_dir)

    notification = Notification.objects.all()

    if notification and notification[0].send_scan_status_notif:
        send_notification('reNgine has initiated recon for target {} with engine type {}'.format(domain.name, engine_object.engine_name))

    try:
        current_scan_dir = domain.name + '_' + str(random.randint(100000000000, 999999999999))
        os.mkdir(current_scan_dir)
        task.results_dir = current_scan_dir
        task.save()
    except Exception as exception:
        logger.error(exception)
        scan_failed(task)

    yaml_configuration = None
    excluded_subdomains = ''

    try:
        yaml_configuration = yaml.load(
            task.scan_type.yaml_configuration,
            Loader=yaml.FullLoader)
    except Exception as exception:
        logger.error(exception)
        # TODO: Put failed reason on db

    '''
    Add GF patterns name to db for dynamic URLs menu
    '''
    if engine_object.fetch_url and GF_PATTERNS in yaml_configuration[FETCH_URL]:
        task.used_gf_patterns = ','.join(
            pattern for pattern in yaml_configuration[FETCH_URL][GF_PATTERNS])
        task.save()

    results_dir = results_dir + current_scan_dir

    # put all imported subdomains into txt file and also in Subdomain model
    if imported_subdomains:
        extract_imported_subdomain(
            imported_subdomains, task, domain, results_dir)

    if yaml_configuration:
        '''
        a target in itself is a subdomain, some tool give subdomains as
        www.yogeshojha.com but url and everything else resolves to yogeshojha.com
        In that case, we would already need to store target itself as subdomain
        '''
        initial_subdomain_file = '/target_domain.txt' if task.subdomain_discovery else '/sorted_subdomain_collection.txt'

        subdomain_file = open(results_dir + initial_subdomain_file, "w")
        subdomain_file.write(domain.name + "\n")
        subdomain_file.close()

        if(task.subdomain_discovery):
            activity_id = create_scan_activity(task, "Subdomain Scanning", 1)
            subdomain_scan(
                task,
                domain,
                yaml_configuration,
                results_dir,
                activity_id,
                out_of_scope_subdomains
                )
        else:
            skip_subdomain_scan(task, domain, results_dir)

        update_last_activity(activity_id, 2)
        activity_id = create_scan_activity(task, "HTTP Crawler", 1)
        http_crawler(
            task,
            domain,
            results_dir,
            activity_id)
        update_last_activity(activity_id, 2)

        try:
            if task.screenshot:
                activity_id = create_scan_activity(
                    task, "Visual Recon - Screenshot", 1)
                grab_screenshot(
                    task,
                    domain,
                    yaml_configuration,
                    current_scan_dir,
                    activity_id)
                update_last_activity(activity_id, 2)
        except Exception as e:
            logger.error(e)
            update_last_activity(activity_id, 0)

        try:
            if(task.port_scan):
                activity_id = create_scan_activity(task, "Port Scanning", 1)
                port_scanning(task, domain, yaml_configuration, results_dir)
                update_last_activity(activity_id, 2)
        except Exception as e:
            logger.error(e)
            update_last_activity(activity_id, 0)

        try:
            if task.osint:
                activity_id = create_scan_activity(task, "OSINT Running", 1)
                perform_osint(task, domain, yaml_configuration, results_dir)
                update_last_activity(activity_id, 2)
        except Exception as e:
            logger.error(e)
            update_last_activity(activity_id, 0)


        try:
            if task.dir_file_search:
                activity_id = create_scan_activity(task, "Directory Search", 1)
                directory_brute(
                    task,
                    domain,
                    yaml_configuration,
                    results_dir,
                    activity_id
                )
                update_last_activity(activity_id, 2)
        except Exception as e:
            logger.error(e)
            update_last_activity(activity_id, 0)

        try:
            if task.fetch_url:
                activity_id = create_scan_activity(task, "Fetching endpoints", 1)
                fetch_endpoints(
                    task,
                    domain,
                    yaml_configuration,
                    results_dir,
                    activity_id)
                update_last_activity(activity_id, 2)
        except Exception as e:
            logger.error(e)
            update_last_activity(activity_id, 0)

        try:
            if task.vulnerability_scan:
                activity_id = create_scan_activity(task, "Vulnerability Scan", 1)
                vulnerability_scan(
                    task,
                    domain,
                    yaml_configuration,
                    results_dir,
                    activity_id)
                update_last_activity(activity_id, 2)
        except Exception as e:
            logger.error(e)
            update_last_activity(activity_id, 0)

    activity_id = create_scan_activity(task, "Scan Completed", 2)
    if notification and notification[0].send_scan_status_notif:
        send_notification('*Scan Completed*\nreNgine has finished performing recon on target {}.'.format(domain.name))

    '''
    Once the scan is completed, save the status to successful
    '''
    if ScanActivity.objects.filter(scan_of=task).filter(status=0).all():
        task.scan_status = 0
    else:
        task.scan_status = 2
    task.stop_scan_date = timezone.now()
    task.save()
    # cleanup results
    delete_scan_data(results_dir)
    return {"status": True}
