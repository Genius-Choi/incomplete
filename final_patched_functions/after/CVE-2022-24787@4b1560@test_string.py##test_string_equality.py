def test_string_equality(get_contract_with_gas_estimation, len_, a, b):
    # fixtures to initialize strings with dirty bytes
    a_init = "\\1" * len_
    b_init = "\\2" * len_
    string1 = a.encode("unicode_escape").decode("utf-8")
    string2 = b.encode("unicode_escape").decode("utf-8")
    code = f"""
a: String[{len_}]
b: String[{len_}]

@external
def equal_true() -> bool:
    a: String[{len_}] = "{a_init}"
    b: String[{len_}] = "{b_init}"
    a = "{string1}"
    b = "{string1}"
    return a == b

@external
def equal_false() -> bool:
    a: String[{len_}] = "{a_init}"
    b: String[{len_}] = "{b_init}"
    a = "{string1}"
    b = "{string2}"
    return a == b

@external
def not_equal_true() -> bool:
    a: String[{len_}] = "{a_init}"
    b: String[{len_}] = "{b_init}"
    a = "{string1}"
    b = "{string2}"
    return a != b

@external
def not_equal_false() -> bool:
    a: String[{len_}] = "{a_init}"
    b: String[{len_}] = "{b_init}"
    a = "{string1}"
    b = "{string1}"
    return a != b

@external
def literal_equal_true() -> bool:
    return "{string1}" == "{string1}"

@external
def literal_equal_false() -> bool:
    return "{string1}" == "{string2}"

@external
def literal_not_equal_true() -> bool:
    return "{string1}" != "{string2}"

@external
def literal_not_equal_false() -> bool:
    return "{string1}" != "{string1}"

@external
def storage_equal_true() -> bool:
    self.a = "{a_init}"
    self.b = "{b_init}"
    self.a = "{string1}"
    self.b = "{string1}"
    return self.a == self.b

@external
def storage_equal_false() -> bool:
    self.a = "{a_init}"
    self.b = "{b_init}"
    self.a = "{string1}"
    self.b = "{string2}"
    return self.a == self.b

@external
def storage_not_equal_true() -> bool:
    self.a = "{a_init}"
    self.b = "{b_init}"
    self.a = "{string1}"
    self.b = "{string2}"
    return self.a != self.b

@external
def storage_not_equal_false() -> bool:
    self.a = "{a_init}"
    self.b = "{b_init}"
    self.a = "{string1}"
    self.b = "{string1}"
    return self.a != self.b

@external
def string_compare_equal(str1: String[{len_}], str2: String[{len_}]) -> bool:
    return str1 == str2

@external
def string_compare_not_equal(str1: String[{len_}], str2: String[{len_}]) -> bool:
    return str1 != str2

@external
def compare_passed_storage_equal(str_: String[{len_}]) -> bool:
    self.a = "{a_init}"
    self.a = "{string1}"
    return self.a == str_

@external
def compare_passed_storage_not_equal(str_: String[{len_}]) -> bool:
    self.a = "{a_init}"
    self.a = "{string1}"
    return self.a != str_

@external
def compare_var_storage_equal_true() -> bool:
    self.a = "{a_init}"
    b: String[{len_}] = "{b_init}"
    self.a = "{string1}"
    b = "{string1}"
    return self.a == b

@external
def compare_var_storage_equal_false() -> bool:
    self.a = "{a_init}"
    b: String[{len_}] = "{b_init}"
    self.a = "{string1}"
    b = "{string2}"
    return self.a == b

@external
def compare_var_storage_not_equal_true() -> bool:
    self.a = "{a_init}"
    b: String[{len_}] = "{b_init}"
    self.a = "{string1}"
    b = "{string2}"
    return self.a != b

@external
def compare_var_storage_not_equal_false() -> bool:
    self.a = "{a_init}"
    b: String[{len_}] = "{b_init}"
    self.a = "{string1}"
    b = "{string1}"
    return self.a != b
    """

    c = get_contract_with_gas_estimation(code)
    assert c.equal_true() is True
    assert c.equal_false() is False
    assert c.not_equal_true() is True
    assert c.not_equal_false() is False
    assert c.literal_equal_true() is True
    assert c.literal_equal_false() is False
    assert c.literal_not_equal_true() is True
    assert c.literal_not_equal_false() is False
    assert c.storage_equal_true() is True
    assert c.storage_equal_false() is False
    assert c.storage_not_equal_true() is True
    assert c.storage_not_equal_false() is False

    assert c.string_compare_equal(a, a) is True
    assert c.string_compare_equal(a, b) is False
    assert c.string_compare_not_equal(b, a) is True
    assert c.string_compare_not_equal(b, b) is False

    assert c.compare_passed_storage_equal(a) is True
    assert c.compare_passed_storage_equal(b) is False
    assert c.compare_passed_storage_not_equal(a) is False
    assert c.compare_passed_storage_not_equal(b) is True

    assert c.compare_var_storage_equal_true() is True
    assert c.compare_var_storage_equal_false() is False
    assert c.compare_var_storage_not_equal_true() is True
    assert c.compare_var_storage_not_equal_false() is False
