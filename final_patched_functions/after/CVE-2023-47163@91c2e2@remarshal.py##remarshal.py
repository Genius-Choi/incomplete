def remarshal(
    input: Path | str,
    output: Path | str,
    input_format: str,
    output_format: str,
    *,
    json_indent: Union[int, None] = None,
    max_nodes: int = DEFAULT_MAX_NODES,
    ordered: bool = True,
    stringify: bool = False,
    transform: Union[Callable[[Document], Document], None] = None,
    unwrap: Union[str, None] = None,
    wrap: Union[str, None] = None,
    yaml_options: Dict[Any, Any] = {},
) -> None:
    input_file = None
    output_file = None

    try:
        input_file = sys.stdin.buffer if input == "-" else Path(input).open("rb")
        output_file = sys.stdout.buffer if output == "-" else Path(output).open("wb")

        input_data = input_file.read()
        if not isinstance(input_data, bytes):
            msg = "input_data must be bytes"
            raise TypeError(msg)

        parsed = decode(input_format, input_data)

        validate_node_count(parsed, limit=max_nodes)

        if unwrap is not None:
            if not isinstance(parsed, Mapping):
                msg = (
                    f"Top-level value of type '{type(parsed).__name__}' "
                    "cannot be unwrapped"
                )
                raise TypeError(msg)
            parsed = parsed[unwrap]
        if wrap is not None:
            temp = {}
            temp[wrap] = parsed
            parsed = temp

        if transform:
            parsed = transform(parsed)

        encoded = encode(
            output_format,
            parsed,
            json_indent=json_indent,
            ordered=ordered,
            stringify=stringify,
            yaml_options=yaml_options,
        )

        output_file.write(encoded)
    finally:
        if input_file is not None:
            input_file.close()
        if output != "-" and output_file is not None:
            output_file.close()
