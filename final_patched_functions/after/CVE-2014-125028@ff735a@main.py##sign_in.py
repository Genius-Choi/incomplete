def sign_in():
  if session.get('signed_in') != None: return redirect('/')

  # state is used for CSRF protection. the client generates a value and stores it
  # for the user somewhere (in a cookie or in a session). it then passes the same value
  # in the state parameter in the authorize request. IDP will mirror the state value
  # to the redirect URI. the client should then make sure the state value it has stored
  # matches what it receives in the callback
  state = str(uuid.uuid4())

  authorize_url = 'https://stage-id.valtech.com/oauth2/authorize?response_type=%s&client_id=%s&scope=%s&state=%s' % ('code', CLIENT_ID, 'email openid', state)

  resp = make_response(redirect(authorize_url))
  resp.set_cookie('python-flask-csrf', state)
  return resp
