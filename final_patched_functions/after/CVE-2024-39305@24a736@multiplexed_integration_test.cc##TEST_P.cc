TEST_P(MultiplexedRingHashIntegrationTest,
       CookieRoutingNoCookieWithNonzeroTtlSetAndWithAttributes) {
  config_helper_.addConfigModifier(
      [&](envoy::extensions::filters::network::http_connection_manager::v3::HttpConnectionManager&
              hcm) -> void {
        auto* hash_policy = hcm.mutable_route_config()
                                ->mutable_virtual_hosts(0)
                                ->mutable_routes(0)
                                ->mutable_route()
                                ->add_hash_policy();
        auto* cookie = hash_policy->mutable_cookie();
        cookie->set_name("foo");
        cookie->mutable_ttl()->set_seconds(15);
        auto* attribute_1 = cookie->mutable_attributes()->Add();
        attribute_1->set_name("test1");
        attribute_1->set_value("value1");
        auto* attribute_2 = cookie->mutable_attributes()->Add();
        attribute_2->set_name("test2");
        attribute_2->set_value("value2");
      });

  std::set<std::string> set_cookies;
  sendMultipleRequests(
      1024,
      Http::TestRequestHeaderMapImpl{{":method", "POST"},
                                     {":path", "/test/long/url"},
                                     {":scheme", "http"},
                                     {":authority", "host"}},
      [&](IntegrationStreamDecoder& response) {
        EXPECT_EQ("200", response.headers().getStatusValue());
        std::string value(
            response.headers().get(Http::Headers::get().SetCookie)[0]->value().getStringView());
        set_cookies.insert(value);
        EXPECT_THAT(value,
                    MatchesRegex("foo=.*; Max-Age=15; test1=value1; test2=value2; HttpOnly"));
      });
  EXPECT_EQ(set_cookies.size(), 1);
}
