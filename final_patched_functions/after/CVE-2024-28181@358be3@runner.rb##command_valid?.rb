  def command_valid?
    return false unless command_requested?

    # validate class
    unless command_instance.is_a?(TurboBoost::Commands::Command)
      raise TurboBoost::Commands::InvalidClassError,
        "`#{command_class_name}` is not a subclass of `TurboBoost::Commands::Command`!"
    end

    # validate method
    ancestors = command_class.ancestors[0..command_class.ancestors.index(TurboBoost::Commands::Command) - 1]
    unless ancestors.any? { |a| a.public_instance_methods(false).any? command_method_name.to_sym }
      raise TurboBoost::Commands::InvalidMethodError,
        "`#{command_class_name}` does not define the public method `#{command_method_name}`!"
    end

    # validate csrf token
    unless valid_command_token?
      raise TurboBoost::Commands::InvalidTokenError,
        "Token mismatch! The token: #{client_command_token}` does not match the expected value of `#{server_command_token}`."
    end

    true
  end
