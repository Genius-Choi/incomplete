def test_delete_user_with_resources_fails():
    """Tests deleting a user with resources fails."""
    zen_store = Client().zen_store

    login = zen_store.type == StoreType.REST

    with UserContext(delete=False, login=login) as user:
        component_context = ComponentContext(
            c_type=StackComponentType.ORCHESTRATOR,
            flavor="local",
            config={},
            user_id=user.id,
            delete=False,
        )
        with component_context as orchestrator:
            # We only use the context as a shortcut to create the resource
            pass

    # Can't delete because owned resources exist
    with pytest.raises(IllegalOperationError):
        zen_store.delete_user(user.id)

    component_context.cleanup()

    # Can delete because owned resources have been removed
    with does_not_raise():
        zen_store.delete_user(user.id)

    with UserContext(delete=False, login=login) as user:
        orchestrator_context = ComponentContext(
            c_type=StackComponentType.ORCHESTRATOR,
            flavor="local",
            config={},
            user_id=user.id,
            delete=False,
        )
        artifact_store_context = ComponentContext(
            c_type=StackComponentType.ARTIFACT_STORE,
            flavor="local",
            config={},
            user_id=user.id,
            delete=False,
        )

        with orchestrator_context as orchestrator:
            # We only use the context as a shortcut to create the resource
            pass
        with artifact_store_context as artifact_store:
            # We only use the context as a shortcut to create the resource
            pass

        components = {
            StackComponentType.ORCHESTRATOR: [orchestrator.id],
            StackComponentType.ARTIFACT_STORE: [artifact_store.id],
        }
        stack_context = StackContext(
            components=components, user_id=user.id, delete=False
        )
        with stack_context:
            # We only use the context as a shortcut to create the resource
            pass

    # Can't delete because owned resources exist
    with pytest.raises(IllegalOperationError):
        zen_store.delete_user(user.id)

    stack_context.cleanup()
    artifact_store_context.cleanup()
    orchestrator_context.cleanup()

    # Can delete because owned resources have been removed
    with does_not_raise():
        zen_store.delete_user(user.id)

    with UserContext(delete=False, login=login) as user:
        secret_context = SecretContext(user_id=user.id, delete=False)
        with secret_context:
            # We only use the context as a shortcut to create the resource
            pass

    # Can't delete because owned resources exist
    with pytest.raises(IllegalOperationError):
        zen_store.delete_user(user.id)

    secret_context.cleanup()

    # Can delete because owned resources have been removed
    with does_not_raise():
        zen_store.delete_user(user.id)

    with UserContext(delete=False, login=login) as user:
        code_repo_context = CodeRepositoryContext(
            user_id=user.id, delete=False
        )
        with code_repo_context:
            # We only use the context as a shortcut to create the resource
            pass

    # Can't delete because owned resources exist
    with pytest.raises(IllegalOperationError):
        zen_store.delete_user(user.id)

    code_repo_context.cleanup()

    # Can delete because owned resources have been removed
    with does_not_raise():
        zen_store.delete_user(user.id)

    with UserContext(delete=False, login=login) as user:
        service_connector_context = ServiceConnectorContext(
            connector_type="cat'o'matic",
            auth_method="paw-print",
            resource_types=["cat"],
            resource_id="aria",
            configuration={
                "language": "meow",
                "foods": "tuna",
            },
            user_id=user.id,
            delete=False,
        )
        with service_connector_context:
            # We only use the context as a shortcut to create the resource
            pass

    # Can't delete because owned resources exist
    with pytest.raises(IllegalOperationError):
        zen_store.delete_user(user.id)

    service_connector_context.cleanup()

    # Can delete because owned resources have been removed
    with does_not_raise():
        zen_store.delete_user(user.id)

    with UserContext(delete=False, login=login) as user:
        model_context = ModelContext(
            create_version=True, user_id=user.id, delete=False
        )
        with model_context:
            # We only use the context as a shortcut to create the resource
            pass

    # Can't delete because owned resources exist
    with pytest.raises(IllegalOperationError):
        zen_store.delete_user(user.id)

    model_context.cleanup()

    # Can delete because owned resources have been removed
    with does_not_raise():
        zen_store.delete_user(user.id)
