async def validate_token(request: Request):
    try:
        token = await get_token_auth_header(request)
        jwks = await fetch_jwks_keys()
        unverified_header = jwt.get_unverified_header(token)

        rsa_key = {}

        for key in jwks["keys"]:
            if key["kid"] == unverified_header["kid"]:
                rsa_key = {
                    "kty": key["kty"],
                    "kid": key["kid"],
                    "use": key["use"],
                    "n": key["n"],
                    "e": key["e"]
                }
    except Exception:
        raise HTTPException(status_code=401, detail="Unable to parse authorization token.")

    if rsa_key:
        rsa_pem_key = jwt.algorithms.RSAAlgorithm.from_jwk(json.dumps(rsa_key))
        rsa_pem_key_bytes = rsa_pem_key.public_bytes(
            encoding=serialization.Encoding.PEM, 
            format=serialization.PublicFormat.SubjectPublicKeyInfo
        )

        try:
            payload = jwt.decode(
                token,
                key=rsa_pem_key_bytes,
                verify=True,
                algorithms=["RS256"],
                audience=globals.CLIENT_ID,
                issuer="https://" + globals.AUTHORITY_HOST + "/" + globals.TENANT_ID + "/v2.0"
            )
        except jwt.ExpiredSignatureError:
            raise HTTPException(status_code=401, detail="Token has expired.")
        except jwt.MissingRequiredClaimError:
            raise HTTPException(status_code=401, detail="Incorrect token claims, please check the audience and issuer.")
        except jwt.InvalidSignatureError:
            raise HTTPException(status_code=401, detail="Invalid token signature.")
        except Exception:
            raise HTTPException(status_code=401, detail="Unable to parse authorization token.")
    else:
        raise HTTPException(status_code=401, detail="Unable to find appropriate signing key.")
    
    request.state.tenant_id = payload['tid']

    return payload
