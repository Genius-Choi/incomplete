def test_checkout_delivery_method_update_valid_method_not_all_shipping_data_for_cc(
    mock_clean_delivery,
    api_client,
    delivery_method,
    node_name,
    attribute_name,
    checkout_with_item_for_cc,
    warehouse_for_cc,
):
    # given
    mock_clean_delivery.return_value = True
    checkout_address = Address.objects.create(country="US")
    checkout = checkout_with_item_for_cc
    checkout.shipping_address = checkout_address
    checkout.save()
    manager = get_plugins_manager(allow_replica=False)
    lines, _ = fetch_checkout_lines(checkout)
    checkout_info = fetch_checkout_info(checkout, lines, manager)

    shipping_method_data = delivery_method
    checkout_info.shipping_address = shipping_method_data.address
    query = MUTATION_UPDATE_DELIVERY_METHOD
    mock_clean_delivery.return_value = True

    method_id = graphene.Node.to_global_id(node_name, delivery_method.id)

    # when
    response = api_client.post_graphql(
        query, {"id": to_global_id_or_none(checkout), "deliveryMethodId": method_id}
    )

    # then
    data = get_graphql_content(response)["data"]["checkoutDeliveryMethodUpdate"]
    checkout.refresh_from_db()

    mock_clean_delivery.assert_called_once_with(
        checkout_info=checkout_info, lines=lines, method=shipping_method_data
    )
    errors = data["errors"]
    assert checkout.shipping_address == delivery_method.address
    assert not errors
    assert getattr(checkout, attribute_name) == delivery_method
