def move_files_to_cache(
    data: Any,
    block: Component,
    postprocess: bool = False,
    add_urls=False,
    check_in_upload_folder=False,
) -> dict:
    """Move any files in `data` to cache and (optionally), adds URL prefixes (/file=...) needed to access the cached file.
    Also handles the case where the file is on an external Gradio app (/proxy=...).

    Runs after .postprocess() and before .preprocess().

    Args:
        data: The input or output data for a component. Can be a dictionary or a dataclass
        block: The component whose data is being processed
        postprocess: Whether its running from postprocessing
        root_url: The root URL of the local server, if applicable
        add_urls: Whether to add URLs to the payload
        check_in_upload_folder: If True, instead of moving the file to cache, checks if the file is in already in cache (exception if not).
    """

    def _move_to_cache(d: dict):
        payload = FileData(**d)
        # If the gradio app developer is returning a URL from
        # postprocess, it means the component can display a URL
        # without it being served from the gradio server
        # This makes it so that the URL is not downloaded and speeds up event processing
        if payload.url and postprocess:
            payload.path = payload.url
        elif not block.proxy_url:
            # If the file is on a remote server, do not move it to cache.
            if check_in_upload_folder and not client_utils.is_http_url_like(
                payload.path
            ):
                path = os.path.abspath(payload.path)
                if not is_in_or_equal(path, get_upload_folder()):
                    raise ValueError(
                        f"File {path} is not in the upload folder and cannot be accessed."
                    )
            temp_file_path = block.move_resource_to_block_cache(payload.path)
            if temp_file_path is None:
                raise ValueError("Did not determine a file path for the resource.")
            payload.path = temp_file_path

        if add_urls:
            url_prefix = "/stream/" if payload.is_stream else "/file="
            if block.proxy_url:
                proxy_url = block.proxy_url.rstrip("/")
                url = f"/proxy={proxy_url}{url_prefix}{payload.path}"
            elif client_utils.is_http_url_like(payload.path) or payload.path.startswith(
                f"{url_prefix}"
            ):
                url = payload.path
            else:
                url = f"{url_prefix}{payload.path}"
            payload.url = url

        return payload.model_dump()

    if isinstance(data, (GradioRootModel, GradioModel)):
        data = data.model_dump()

    return client_utils.traverse(data, _move_to_cache, client_utils.is_file_obj)
