int PackTmt::readFileHeader() {
#define H(x) get_le16(h + 2 * (x))
#define H4(x) get_le32(h + (x))
    unsigned char h[0x40];
    int ic;
    unsigned exe_offset = 0;
    adam_offset = 0;

    for (ic = 0; ic < 20; ic++) {
        fi->seek(adam_offset, SEEK_SET);
        fi->readx(h, sizeof(h));

        if (memcmp(h, "MZ", 2) == 0) // dos exe
        {
            exe_offset = adam_offset;
            adam_offset += H(2) * 512 + H(1);
            if (H(1))
                adam_offset -= 512;
            if (H(0x18 / 2) == 0x40 && H4(0x3c))
                adam_offset = H4(0x3c);
        } else if (memcmp(h, "BW", 2) == 0)
            adam_offset += H(2) * 512 + H(1);
        else if (memcmp(h, "PMW1", 4) == 0) {
            fi->seek(adam_offset + H4(0x18), SEEK_SET);
            adam_offset += H4(0x24);
            int objs = H4(0x1c);
            while (objs--) {
                fi->readx(h, 0x18);
                adam_offset += H4(4);
            }
        } else if (memcmp(h, "LE", 2) == 0) {
            // + (memory_pages-1)*memory_page_size+bytes_on_last_page
            unsigned offs = exe_offset + (H4(0x14) - 1) * H4(0x28) + H4(0x2c);
            fi->seek(adam_offset + 0x80, SEEK_SET);
            fi->readx(h, 4);
            // + data_pages_offset
            adam_offset = offs + H4(0);
        } else if (memcmp(h, "Adam", 4) == 0)
            break;
        else
            return 0;
    }
    if (ic == 20)
        return 0;

    fi->seek(adam_offset, SEEK_SET);
    fi->readx(&ih, sizeof(ih));
    // FIXME: should add more checks for the values in 'ih'
    unsigned const imagesize = ih.imagesize;
    unsigned const entry = ih.entry;
    unsigned const relocsize = ih.relocsize;
    if (imagesize < sizeof(ih) || entry < sizeof(ih) || file_size <= imagesize ||
        file_size <= entry || file_size <= relocsize) {
        printWarn(getName(), "bad header; imagesize=%#x  entry=%#x  relocsize=%#x", imagesize,
                  entry, relocsize);
        return 0;
    }

    return UPX_F_TMT_ADAM;
#undef H4
#undef H
}
