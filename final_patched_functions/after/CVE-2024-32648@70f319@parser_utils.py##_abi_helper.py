    def _abi_helper(member_t, ofst, clamp=True):
        member_abi_t = abi_type_of(member_t)
        ofst_lll = _add_ofst(parent, ofst)

        if member_abi_t.is_dynamic():
            # double dereference, according to ABI spec
            # TODO optimize special case: first dynamic item
            # offset is statically known.
            ofst_lll = _add_ofst(parent, unwrap_location(ofst_lll))

        x = LLLnode.from_list(
            ["ofst"], typ=member_t, location=parent.location, annotation=f"&({typ}->{member_t})"
        )

        if clamp and _needs_clamp(member_t, parent.encoding):
            # special handling for unsanitized external data that need clamping
            # TODO optimize me. this results in a double dereference because
            # it returns a pointer and not a value. probably the best thing
            # is to move the clamp to make_setter
            ret = ["with", x, ofst_lll, ["seq", clamp_basetype(x), x]]
        else:
            ret = ofst_lll

        return LLLnode.from_list(
            ret,
            typ=member_t,
            location=parent.location,
            encoding=parent.encoding,
            pos=pos,
            # annotation=f"({parent.typ})[{key.typ}]",
        )
