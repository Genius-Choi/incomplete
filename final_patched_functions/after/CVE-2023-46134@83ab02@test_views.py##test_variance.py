def test_variance(unittest):
    from dtale.views import build_dtypes_state, format_data

    global_state.clear_store()
    with open(
        os.path.join(os.path.dirname(__file__), "..", "data/test_variance.json"), "r"
    ) as f:
        expected = f.read()
        expected = json.loads(expected)

    def _df():
        for i in range(2500):
            yield dict(i=i, x=i % 5)

    df = pd.DataFrame(list(_df()))
    df.loc[:, "low_var"] = 2500
    df.loc[0, "low_var"] = 1
    df, _ = format_data(df)

    with app.test_client() as c:
        build_data_inst({c.port: df})
        dtypes = build_dtypes_state(df)
        assert next((dt for dt in dtypes if dt["name"] == "low_var"), None)[
            "lowVariance"
        ]
        build_dtypes({c.port: dtypes})
        response = c.get(
            "/dtale/variance/{}".format(c.port), query_string=dict(col="x")
        )
        if parse_version(pd.__version__) >= parse_version("1.3.0"):
            expected["x"]["check2"]["val1"]["val"] = 0
            expected["x"]["check2"]["val2"]["val"] = 1
        response_data = response.get_json()
        del response_data["code"]
        response_data["jarqueBera"]["pvalue"] = round(
            response_data["jarqueBera"]["pvalue"], 4
        )
        response_data["jarqueBera"]["statistic"] = round(
            response_data["jarqueBera"]["statistic"], 4
        )
        unittest.assertEqual(response_data, expected["x"])

        response = c.get(
            "/dtale/variance/{}".format(c.port), query_string=dict(col="low_var")
        )
        response_data = response.get_json()
        del response_data["code"]
        response_data["shapiroWilk"]["statistic"] = round(
            response_data["shapiroWilk"]["statistic"], 4
        )
        response_data["jarqueBera"]["statistic"] = round(
            response_data["jarqueBera"]["statistic"], 4
        )
        unittest.assertEqual(response_data, expected["low_var"])
