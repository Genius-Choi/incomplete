CompileResult generateBytecodeForExecution(
    Module &M,
    const BytecodeGenerationOptions &genOptions) {
  std::shared_ptr<Context> context = M.shareContext();
  CompileResult result{Success};
  if (cl::BytecodeFormat == cl::BytecodeFormatKind::HBC) {
    auto BM =
        hbc::generateBytecodeModule(&M, M.getTopLevelFunction(), genOptions);
    if (auto N = context->getSourceErrorManager().getErrorCount()) {
      llvh::errs() << "Emitted " << N << " errors in the backend. exiting.\n";
      return BackendError;
    }

    result.bytecodeProvider =
        hbc::BCProviderFromSrc::createBCProviderFromSrc(std::move(BM));
  } else {
    llvm_unreachable("Invalid bytecode kind for execution");
    result = InvalidFlags;
  }
  return result;
}
