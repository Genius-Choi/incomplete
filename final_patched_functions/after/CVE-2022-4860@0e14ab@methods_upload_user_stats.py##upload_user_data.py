def upload_user_data(user_stats_dict):
    """
    Takes the User Stats dict that is populated by the other functions and 
    then populates the user_info and user_system_summary_stats tables
    in the metrics MySQL DB.
    """
    total_users = len(user_stats_dict.keys())
    rows_info_inserted = 0
    rows_info_updated = 0
    rows_stats_inserted = 0
    # connect to mysql
    db_connection = mysql.connect(
        host=sql_host, user="metrics", passwd=metrics_mysql_password, database="metrics"
    )

    cursor = db_connection.cursor()
    query = "use " + query_on
    cursor.execute(query)

    counter_user_id = -1
    get_max_user_id_q = (
	"select max(user_id) from metrics.user_info "
    )
    cursor.execute(get_max_user_id_q)
    for row in cursor:
        counter_user_id = row[0]
        
    # get all existing users
    existing_user_info = dict()
    query = (
        "select username, display_name, email, orcid, globus_login, google_login, "
        "kb_internal_user, institution, country, "
        "signup_date, last_signin_date, department, job_title, job_title_other, "
        "city, state, postal_code, funding_source, research_statement, "
        "research_interests, avatar_option, gravatar_default , "
        "how_u_hear_selected, how_u_hear_other from metrics.user_info"
    )
    cursor.execute(query)
    for (
            username,
            display_name,
            email,
            orcid,
            globus_login,
            google_login,
            kb_internal_user,
            institution,
            country,
            signup_date,
            last_signin_date,
            department,
            job_title,
            job_title_other,
            city,
            state,
            postal_code,
            funding_source,
            research_statement,
            research_interests,
            avatar_option,
            gravatar_default,
            how_u_hear_selected,
            how_u_hear_other
    ) in cursor:
        existing_user_info[username] = {
            "name": display_name,
            "email": email,
            "orcid": orcid,
            "globus_login": globus_login,
            "google_login": google_login,
            "kb_internal_user": kb_internal_user,
            "institution": institution,
            "country": country,
            "signup_date": signup_date,
            "last_signin_date": last_signin_date,
            "department": department,
            "job_title": job_title,
            "job_title_other": job_title_other,
            "city" : city,
            "state" : state,
            "postal_code" : postal_code,
            "funding_source" : funding_source,
            "research_statement" : research_statement,
            "research_interests" : research_interests,
            "avatar_option" : avatar_option,
            "gravatar_default" : gravatar_default,
            "how_u_hear_selected" : how_u_hear_selected,
            "how_u_hear_other" : how_u_hear_other
        }

    print("Number of existing users:" + str(len(existing_user_info)))

    prep_cursor = db_connection.cursor(prepared=True)
    user_info_insert_statement = (
        "insert into user_info "
        "(username, display_name, email, orcid, "
        "globus_login, google_login, "
        "user_id, kb_internal_user, institution, "
        "country, signup_date, last_signin_date, "
        "department, job_title, job_title_other, "
        "city, state, postal_code, funding_source, "
        "research_statement, research_interests, "
        "avatar_option, gravatar_default, "
        "how_u_hear_selected, how_u_hear_other)"
        "values(%s, %s, %s, %s, "
        "%s, %s, "
        "%s, %s, %s, "
        "%s, %s, %s, "
        "%s, %s, %s, "
        "%s, %s, %s, %s, "
        "%s, %s, "
        "%s, %s, "
        "%s, %s);")

    update_prep_cursor = db_connection.cursor(prepared=True)
    user_info_update_statement = (
        "update user_info "
        "set display_name = %s, email = %s, "
        "orcid = %s, globus_login = %s, "
        "google_login = %s, kb_internal_user = %s, "
        "institution = %s, country = %s, "
        "signup_date = %s, last_signin_date = %s, "
        "department = %s, job_title = %s, "
        "job_title_other = %s, "
        "city = %s, state = %s, "
        "postal_code = %s, funding_source = %s, "
        "research_statement = %s, "
        "research_interests = %s, "
        "avatar_option = %s, "
        "gravatar_default = %s, "
        "how_u_hear_selected = %s, "
        "how_u_hear_other = %s "
        "where username = %s;"
    )

    new_user_info_count = 0
    users_info_updated_count = 0

    for username in user_stats_dict:
        # check if new user_info exists in the existing user info, if not insert the record.
        if username not in existing_user_info:
            counter_user_id += 1
            input = (
                username,
                user_stats_dict[username]["name"],
                user_stats_dict[username]["email"],
                user_stats_dict[username]["orcid"],
                user_stats_dict[username]["globus_login"],
                user_stats_dict[username]["google_login"],
                counter_user_id,
                user_stats_dict[username]["kbase_internal_user"],
                user_stats_dict[username]["institution"],
                user_stats_dict[username]["country"],
                user_stats_dict[username]["signup_date"],
                user_stats_dict[username]["last_signin_date"],
                user_stats_dict[username]["department"],
                user_stats_dict[username]["job_title"],
                user_stats_dict[username]["job_title_other"],
                user_stats_dict[username]["city"],
                user_stats_dict[username]["state"],
                user_stats_dict[username]["postal_code"],
                user_stats_dict[username]["funding_source"],
                user_stats_dict[username]["research_statement"],
                user_stats_dict[username]["research_interests"],
                user_stats_dict[username]["avatar_option"],
                user_stats_dict[username]["gravatar_default"],
                user_stats_dict[username]["how_u_hear_selected"],
                user_stats_dict[username]["how_u_hear_other"],
            )
            prep_cursor.execute(user_info_insert_statement, input)
            new_user_info_count += 1
        else:
            # Check if anything has changed in the user_info, if so update the record
            if not (
                (
                    user_stats_dict[username]["last_signin_date"] is None
                    or user_stats_dict[username]["last_signin_date"].strftime(
                        "%Y-%m-%d %H:%M:%S"
                    )
                    == str(existing_user_info[username]["last_signin_date"])
                )
                and (
                    user_stats_dict[username]["signup_date"].strftime(
                        "%Y-%m-%d %H:%M:%S"
                    )
                    == str(existing_user_info[username]["signup_date"])
                )
                and user_stats_dict[username]["country"]
                    == existing_user_info[username]["country"]
                and user_stats_dict[username]["institution"]
                    == existing_user_info[username]["institution"]
                and user_stats_dict[username]["kbase_internal_user"]
                    == existing_user_info[username]["kb_internal_user"]
                and user_stats_dict[username]["orcid"]
                    == existing_user_info[username]["orcid"]
                and user_stats_dict[username]["globus_login"]
                    == existing_user_info[username]["globus_login"]
                and user_stats_dict[username]["google_login"]
                    == existing_user_info[username]["google_login"]
                and user_stats_dict[username]["email"]
                    == existing_user_info[username]["email"]
                and user_stats_dict[username]["name"]
                    == existing_user_info[username]["name"]
                and user_stats_dict[username]["department"]
                    == existing_user_info[username]["department"]
                and user_stats_dict[username]["job_title"]
                    == existing_user_info[username]["job_title"]
                and user_stats_dict[username]["job_title_other"]
                    == existing_user_info[username]["job_title_other"]
                and user_stats_dict[username]["city"]
                    == existing_user_info[username]["city"]
                and user_stats_dict[username]["state"]
                    == existing_user_info[username]["state"]
                and user_stats_dict[username]["postal_code"]
                    == existing_user_info[username]["postal_code"]
                and user_stats_dict[username]["funding_source"]
                    == existing_user_info[username]["funding_source"]
                and user_stats_dict[username]["research_statement"]
                    == existing_user_info[username]["research_statement"]
                and user_stats_dict[username]["research_interests"]
                    == existing_user_info[username]["research_interests"]
                and user_stats_dict[username]["avatar_option"]
                    == existing_user_info[username]["avatar_option"]
                and user_stats_dict[username]["gravatar_default"]
                    == existing_user_info[username]["gravatar_default"]
                and user_stats_dict[username]["how_u_hear_selected"]
                    == existing_user_info[username]["how_u_hear_selected"]
                and user_stats_dict[username]["how_u_hear_other"]
                    == existing_user_info[username]["how_u_hear_other"]
            ):
                input = (
                    user_stats_dict[username]["name"],
                    user_stats_dict[username]["email"],
                    user_stats_dict[username]["orcid"],
                    user_stats_dict[username]["globus_login"],
                    user_stats_dict[username]["google_login"],
                    user_stats_dict[username]["kbase_internal_user"],
                    user_stats_dict[username]["institution"],
                    user_stats_dict[username]["country"],
                    user_stats_dict[username]["signup_date"],
                    user_stats_dict[username]["last_signin_date"],
                    user_stats_dict[username]["department"],
                    user_stats_dict[username]["job_title"],
                    user_stats_dict[username]["job_title_other"],
                    user_stats_dict[username]["city"],
                    user_stats_dict[username]["state"],
                    user_stats_dict[username]["postal_code"],
                    user_stats_dict[username]["funding_source"],
                    user_stats_dict[username]["research_statement"],
                    user_stats_dict[username]["research_interests"],
                    user_stats_dict[username]["avatar_option"],
                    user_stats_dict[username]["gravatar_default"],
                    user_stats_dict[username]["how_u_hear_selected"],
                    user_stats_dict[username]["how_u_hear_other"],
                    username,
                )
                update_prep_cursor.execute(user_info_update_statement, input)
                users_info_updated_count += 1
    db_connection.commit()

    print("Number of new users info inserted:" + str(new_user_info_count))
    print("Number of users updated:" + str(users_info_updated_count))

    dev_tokens_users = get_dev_token_users_from_mongo()
    update_new_dev_tokens_statement = (
        "update user_info set dev_token_first_seen = now() "
        "where dev_token_first_seen is null and "
        "username in (" + ("%s, " * (len(dev_tokens_users) - 1)) + "%s)"
        )
#    print("update_new_dev_tokens_statement : " + update_new_dev_tokens_statement)
    update_dev_tokens_prep_cursor = db_connection.cursor(prepared=True)
    update_dev_tokens_prep_cursor.execute(update_new_dev_tokens_statement, dev_tokens_users)
    db_connection.commit()
    
    # NOW DO USER SUMMARY STATS
    user_summary_stats_insert_statement = (
        "insert into user_system_summary_stats "
        "(username,num_orgs, narrative_count, "
        "shared_count, narratives_shared) "
        "values(%s,%s,%s,%s,%s);"
    )

    existing_user_summary_stats = dict()
    query = (
        "select username, num_orgs, narrative_count, shared_count, narratives_shared "
        "from user_system_summary_stats_current"
    )
    cursor.execute(query)
    for (
        username,
        num_orgs,
        narrative_count,
        shared_count,
        narratives_shared,
    ) in cursor:
        existing_user_summary_stats[username] = {
            "num_orgs": num_orgs,
            "narrative_count": narrative_count,
            "shared_count": shared_count,
            "narratives_shared": narratives_shared,
        }
    print("Number of existing user summaries:" + str(len(existing_user_summary_stats)))

    new_user_summary_count = 0
    existing_user_summary_count = 0
    for username in user_stats_dict:
        if username not in existing_user_summary_stats:
            # if user does not exist insert
            input = (
                username,
                user_stats_dict[username]["num_orgs"],
                user_stats_dict[username]["narrative_count"],
                user_stats_dict[username]["shared_count"],
                user_stats_dict[username]["narratives_shared"],
            )
            prep_cursor.execute(user_summary_stats_insert_statement, input)
            new_user_summary_count += 1
        else:
            # else see if the new data differs from the most recent snapshot. If it does differ, do an insert
            if not (
                user_stats_dict[username]["num_orgs"]
                == existing_user_summary_stats[username]["num_orgs"]
                and user_stats_dict[username]["narrative_count"]
                == existing_user_summary_stats[username]["narrative_count"]
                and user_stats_dict[username]["shared_count"]
                == existing_user_summary_stats[username]["shared_count"]
                and user_stats_dict[username]["narratives_shared"]
                == existing_user_summary_stats[username]["narratives_shared"]
            ):
                input = (
                    username,
                    user_stats_dict[username]["num_orgs"],
                    user_stats_dict[username]["narrative_count"],
                    user_stats_dict[username]["shared_count"],
                    user_stats_dict[username]["narratives_shared"],
                )
                prep_cursor.execute(user_summary_stats_insert_statement, input)
                existing_user_summary_count += 1

    db_connection.commit()

    # THIS CODE is to update any of the 434 excluded users that had accounts made for them
    # but never logged in. In case any of them ever do log in, they will be removed from
    # the excluded list
    query = "UPDATE metrics.user_info set exclude = False where last_signin_date is not NULL"
    cursor.execute(query)
    db_connection.commit()

    print("Number of new users summary inserted:" + str(new_user_summary_count))
    print(
        "Number of existing users summary inserted:" + str(existing_user_summary_count)
    )

    return 1
