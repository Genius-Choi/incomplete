def process_selections(data, exclude=None):
    if exclude is None:
        to_exclude = []
    else:
        to_exclude = unpack_list(exclude)
    result = []
    if (isinstance(data, abc.Iterable) and not isinstance(data, (str, dict)) and not (hasattr(data, 'elements') and isinstance(data.elements, dict))) or (hasattr(data, 'elements') and isinstance(data.elements, (list, set))):
        for entry in data:
            if isinstance(entry, dict) or (hasattr(entry, 'elements') and isinstance(entry.elements, dict)):
                the_item = {}
                for key in entry:
                    if len(entry) > 1:
                        if key in ('default', 'help', 'image', 'label', 'group', 'css class', 'color', 'show if'):
                            continue
                        for standard_key in ('css class', 'color', 'default', 'help', 'group'):
                            if standard_key in entry:
                                the_item[standard_key] = entry[standard_key]
                        if 'image' in entry:
                            if entry['image'].__class__.__name__ == 'DAFile':
                                entry['image'].retrieve()
                                if entry['image'].mimetype is not None and entry['image'].mimetype.startswith('image'):
                                    the_item['image'] = {'type': 'url', 'value': entry['image'].url_for()}
                            elif entry['image'].__class__.__name__ == 'DAFileList':
                                entry['image'][0].retrieve()
                                if entry['image'][0].mimetype is not None and entry['image'][0].mimetype.startswith('image'):
                                    the_item['image'] = {'type': 'url', 'value': entry['image'][0].url_for()}
                            elif entry['image'].__class__.__name__ == 'DAFileCollection':
                                the_file = entry['image']._first_file()
                                the_file.retrieve()
                                if the_file.mimetype is not None and the_file.mimetype.startswith('image'):
                                    the_item['image'] = {'type': 'url', 'value': entry['image'][0].url_for()}
                            elif entry['image'].__class__.__name__ == 'DAStaticFile':
                                the_item['image'] = {'type': 'url', 'value': entry['image'].url_for()}
                            else:
                                the_item['image'] = {'type': 'decoration', 'value': entry['image']}
                    if key == 'value' and 'label' in entry:
                        the_item['key'] = entry[key]
                        the_item['label'] = entry['label']
                        if entry.get('show if', True) and entry[key] not in to_exclude and ((not isinstance(entry['label'], bool)) or entry['label'] is True):
                            result.append(the_item)
                    else:
                        the_item['key'] = key
                        the_item['label'] = entry[key]
                        is_not_boolean = False
                        for key, val in entry.items():
                            if key in ('default', 'help', 'image', 'label', 'group', 'css class', 'color', 'show if'):
                                continue
                            if val not in (True, False):
                                is_not_boolean = True
                        if entry.get('show if', True) and key not in to_exclude and (is_not_boolean or entry[key] is True):
                            result.append(the_item)
            if (isinstance(entry, (list, tuple)) or (hasattr(entry, 'elements') and isinstance(entry.elements, list))) and len(entry) > 0:
                if entry[0] not in to_exclude:
                    if len(entry) >= 4:
                        result.append({'key': entry[0], 'label': entry[1], 'default': entry[2], 'help': entry[3]})
                    elif len(entry) == 3:
                        result.append({'key': entry[0], 'label': entry[1], 'default': entry[2]})
                    elif len(entry) == 1:
                        result.append({'key': entry[0], 'label': entry[0]})
                    else:
                        result.append({'key': entry[0], 'label': entry[1]})
            elif isinstance(entry, (str, bool, int, float)):
                if entry not in to_exclude:
                    result.append({'key': entry, 'label': entry})
            elif hasattr(entry, 'instanceName'):
                if entry not in to_exclude:
                    result.append({'key': str(entry), 'label': str(entry)})
    elif isinstance(data, dict) or (hasattr(data, 'elements') and isinstance(data.elements, dict)):
        if isinstance(data, OrderedDict) or (hasattr(data, 'elements') and isinstance(data.elements, OrderedDict)):
            the_items = data.items()
        else:
            the_items = sorted(data.items(), key=operator.itemgetter(1))
        for key, value in the_items:
            if key not in to_exclude:
                if isinstance(value, (str, bool, int, float)):
                    result.append({'key': key, 'label': value})
                elif hasattr(value, 'instanceName'):
                    result.append({'key': key, 'label': str(value)})
                else:
                    logmessage("process_selections: non-label passed as label in dictionary")
    else:
        raise DASourceError("Unknown data type in choices selection: " + re.sub(r'[<>]', '', repr(data)))
    return result
