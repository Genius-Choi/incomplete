def tuplize_dict(data_dict: dict[str, Any]) -> FlattenDataDict:
    '''Takes a dict with keys of the form 'table__0__key' and converts them
    to a tuple like ('table', 0, 'key').

    Dict should be put through parse_dict before this function, to have
    values standardized.

    May raise a DataError if the format of the key is incorrect.
    '''
    tuplized_dict: FlattenDataDict = {}
    for k, value in data_dict.items():
        key_list = cast("list[Union[str, int]]", k.split('__'))
        for num, key in enumerate(key_list):
            if num % 2 == 1:
                try:
                    key_list[num] = int(key)
                except ValueError:
                    raise df.DataError('Bad key')
        tuplized_dict[tuple(key_list)] = value

    # Sanitize key indexes to make sure they are sequential
    seq_tuplized_dict: FlattenDataDict = {}
    # sequential field indexes grouped by common prefix
    groups: dict[FlattenKey, dict[FlattenKey, int]] = defaultdict(dict)
    for key in sorted(tuplized_dict.keys()):
        new_key = key

        # iterate over even(numeric) parts of the key
        for idx in range(1, len(key), 2):
            # narrow down scope by common prefix
            group = groups[key[:idx]]

            # if the identifier(i.e `(extra, 123)`, `(resource, 9)`) is met for
            # the first time, generate for it next number in the index
            # sequence. Index of the latest added item is always equals to the
            # number of unique identifiers minus one(because list indexation
            # starts from 0 in Python). If identifier already present(i.e, we
            # process `(extra, 10, VALUE)` after processing `(extra, 10,
            # KEY)`), reuse sequential index of this identifier
            seq_index = group.setdefault(key[idx-1:idx+1], len(group))

            # replace the currently processed key segment with computed
            # sequential index
            new_key = new_key[:idx] + (seq_index,) + new_key[idx+1:]

        seq_tuplized_dict[new_key] = tuplized_dict[key]

    return seq_tuplized_dict
