        def each_revision(path=nil, identifier_from=nil, identifier_to=nil, options={})
          hg_args = ['log', '--debug', '-C', "--style=#{self.class.template_path}"]
          hg_args << "-r#{hgrev(identifier_from)}:#{hgrev(identifier_to)}"
          hg_args << "--limit=#{options[:limit]}" if options[:limit]
          hg_args << '--' << hgtarget(path) unless path.blank?
          log = hg(*hg_args) do |io|
            output = io.read.force_encoding('UTF-8')
            begin
              # Mercurial < 1.5 does not support footer template for '</log>'
              parse_xml("#{output}</log>")['log']
            rescue
            end
          end
          as_ary(log['logentry']).each do |le|
            cpalist = as_ary(le['paths']['path-copied']).map do |e|
              [e['__content__'], e['copyfrom-path']].map do |s|
                scm_iconv('UTF-8', @path_encoding, CGI.unescape(s))
              end
            end
            cpmap = Hash[*cpalist.flatten]
            paths = as_ary(le['paths']['path']).map do |e|
              p = scm_iconv('UTF-8', @path_encoding, CGI.unescape(e['__content__']) )
              {:action        => e['action'],
               :path          => with_leading_slash(p),
               :from_path     => (cpmap.member?(p) ? with_leading_slash(cpmap[p]) : nil),
               :from_revision => (cpmap.member?(p) ? le['node'] : nil)}
            end.sort { |a, b| a[:path] <=> b[:path] }
            parents_ary = []
            as_ary(le['parents']['parent']).map do |par|
              parents_ary << par['__content__'] if par['__content__'] != "0000000000000000000000000000000000000000"
            end
            yield Revision.new(:revision => le['revision'],
                               :scmid    => le['node'],
                               :author   => (le['author']['__content__'] rescue ''),
                               :time     => Time.parse(le['date']['__content__']),
                               :message  => le['msg']['__content__'],
                               :paths    => paths,
                               :parents  => parents_ary)
          end
          self
        end
