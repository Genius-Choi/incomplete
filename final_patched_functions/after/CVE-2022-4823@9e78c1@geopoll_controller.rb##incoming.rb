  def incoming
    account = Account.find_by_id_or_name(params[:account_name])
    channel = account.geopoll_channels.find_by_name(params[:channel_name])
    auth_token = channel.configuration[:auth_token].to_s.split(' ')[1]
    identifier = params[:Identifier]
    signature = Digest::MD5.hexdigest(auth_token + identifier)

    if !(ActiveSupport::SecurityUtils.secure_compare params[:Signature], signature)
      return render text: "Error", status: :unauthorized
    end

    unknown_params = params.except(
      'Identifier', 'Signature', 'SourceAddress', 'TargetAddress', 'MessageText', # GeoPoll API specification
      'account_name', 'channel_name', 'controller', 'action' # Rails-generated parameters
    )

    msg = AtMessage.new
    msg.from = "sms://#{params[:SourceAddress]}"
    msg.to   = "sms://#{params[:TargetAddress]}"
    msg.body = params[:MessageText]
    msg.channel_relative_id = params[:Identifier]
    account.route_at msg, channel

    channel.logger.warning :channel_id => channel.id, :at_message_id => msg.id, :message => "Received unknown parameters for AT #{msg.id}: #{unknown_params.to_json}" unless unknown_params.empty?
    
    render text: "Accepted"
  end
