async def stream_sse_v1(
    helper: Communicator,
    pending_messages_per_event: dict[str, list[Message | None]],
    event_id: str,
) -> dict[str, Any]:
    try:
        pending_messages = pending_messages_per_event[event_id]

        while True:
            if len(pending_messages) > 0:
                msg = pending_messages.pop(0)
            else:
                await asyncio.sleep(0.05)
                continue

            if msg is None:
                raise CancelledError()

            with helper.lock:
                log_message = None
                if msg["msg"] == "log":
                    log = msg.get("log")
                    level = msg.get("level")
                    if log and level:
                        log_message = (log, level)
                status_update = StatusUpdate(
                    code=Status.msg_to_status(msg["msg"]),
                    queue_size=msg.get("queue_size"),
                    rank=msg.get("rank", None),
                    success=msg.get("success"),
                    time=datetime.now(),
                    eta=msg.get("rank_eta"),
                    progress_data=ProgressUnit.from_msg(msg["progress_data"])
                    if "progress_data" in msg
                    else None,
                    log=log_message,
                )
                output = msg.get("output", {}).get("data", [])
                if output and status_update.code != Status.FINISHED:
                    try:
                        result = helper.prediction_processor(*output)
                    except Exception as e:
                        result = [e]
                    helper.job.outputs.append(result)
                helper.job.latest_status = status_update

            if msg["msg"] == "queue_full":
                raise QueueError("Queue is full! Please try again.")
            elif msg["msg"] == "process_completed":
                del pending_messages_per_event[event_id]
                return msg["output"]
            elif msg["msg"] == "server_stopped":
                raise ValueError("Server stopped.")

    except asyncio.CancelledError:
        raise
