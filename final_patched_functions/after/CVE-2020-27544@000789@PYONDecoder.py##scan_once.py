  def scan_once(string, idx):
    try:
        nextchar = string[idx]
    except IndexError:
      raise StopIteration(idx)

    if nextchar == '"': return parse_string(string, idx + 1, 'utf-8', strict)
    elif nextchar == '{':
      return parse_object((string, idx + 1), 'utf-8', strict, scan_once,
                          object_hook, object_pairs_hook)
    elif nextchar == '[':
      return parse_array((string, idx + 1), scan_once)
    elif nextchar == 'N' and string[idx:idx + 4] == 'None':
      return None, idx + 4
    elif nextchar == 'T' and string[idx:idx + 4] == 'True':
      return True, idx + 4
    elif nextchar == 'F' and string[idx:idx + 5] == 'False':
      return False, idx + 5

    m = match_number(string, idx)
    if m is not None:
      integer, frac, exp = m.groups()
      if frac or exp:
        res = parse_float(integer + (frac or '') + (exp or ''))
      else: res = parse_int(integer)

      return res, m.end()

    elif nextchar == 'N' and string[idx:idx + 3] == 'NaN':
      return parse_constant('NaN'), idx + 3

    elif nextchar == 'I' and string[idx:idx + 8] == 'Infinity':
      return parse_constant('Infinity'), idx + 8

    elif nextchar == '-' and string[idx:idx + 9] == '-Infinity':
      return parse_constant('-Infinity'), idx + 9

    else: raise StopIteration(idx)
