def extract_lora(
    model_tuned,
    model_org,
    save_to,
    save_precision,
    dim,
    v2,
    sdxl,
    conv_dim,
    clamp_quantile,
    min_diff,
    device,
    load_original_model_to,
    load_tuned_model_to,
    load_precision,
):
    # Check for caption_text_input
    if model_tuned == "":
        log.info("Invalid finetuned model file")
        return

    if model_org == "":
        log.info("Invalid base model file")
        return

    # Check if source model exist
    if not os.path.isfile(model_tuned):
        log.info("The provided finetuned model is not a file")
        return

    if not os.path.isfile(model_org):
        log.info("The provided base model is not a file")
        return

    if os.path.dirname(save_to) == "":
        # only filename given. prepend dir
        save_to = os.path.join(os.path.dirname(model_tuned), save_to)
    if os.path.isdir(save_to):
        # only dir name given. set default lora name
        save_to = os.path.join(save_to, "lora.safetensors")
    if os.path.normpath(model_tuned) == os.path.normpath(save_to):
        # same path. silently ignore but rename output
        path, ext = os.path.splitext(save_to)
        save_to = f"{path}_tmp{ext}"

    if not is_file_writable(save_to):
        return

    run_cmd = (
        rf'"{PYTHON}" "{scriptdir}/sd-scripts/networks/extract_lora_from_models.py"'
    )
    run_cmd += f" --load_precision {load_precision}"
    run_cmd += f" --save_precision {save_precision}"
    run_cmd += rf' --save_to "{save_to}"'
    run_cmd += rf' --model_org "{model_org}"'
    run_cmd += rf' --model_tuned "{model_tuned}"'
    run_cmd += f" --dim {dim}"
    run_cmd += f" --device {device}"
    if conv_dim > 0:
        run_cmd += f" --conv_dim {conv_dim}"
    if v2:
        run_cmd += f" --v2"
    if sdxl:
        run_cmd += f" --sdxl"
    run_cmd += f" --clamp_quantile {clamp_quantile}"
    run_cmd += f" --min_diff {min_diff}"
    if sdxl:
        run_cmd += f" --load_original_model_to {load_original_model_to}"
        run_cmd += f" --load_tuned_model_to {load_tuned_model_to}"

    log.info(run_cmd)

    env = os.environ.copy()
    env["PYTHONPATH"] = (
        rf"{scriptdir}{os.pathsep}{scriptdir}/sd-scripts{os.pathsep}{env.get('PYTHONPATH', '')}"
    )

    # Run the command
    subprocess.run(run_cmd, env=env)
