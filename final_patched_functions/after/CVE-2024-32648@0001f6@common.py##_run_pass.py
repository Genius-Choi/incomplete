    def _run_pass(memory_allocator=None):
        # Create a local (per function) context.
        if memory_allocator is None:
            memory_allocator = MemoryAllocator()
        nonlocal _vars
        _vars = _vars.copy()  # these will get clobbered in called functions
        nonlocal sig
        sig = copy.deepcopy(sig)  # just in case
        context = Context(
            vars=_vars,
            global_ctx=global_ctx,
            sigs=sigs,
            memory_allocator=memory_allocator,
            return_type=sig.return_type,
            constancy=Constancy.Constant
            if sig.mutability in ("view", "pure")
            else Constancy.Mutable,
            is_payable=sig.mutability == "payable",
            is_internal=sig.internal,
            sig=sig,
        )

        if sig.internal:
            o = generate_lll_for_internal_function(code, sig, context)
        else:
            o = generate_lll_for_external_function(code, sig, context, check_nonpayable)
        return o, context
