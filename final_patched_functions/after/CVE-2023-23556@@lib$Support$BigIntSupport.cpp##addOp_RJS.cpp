addOp_RJS(Runtime &runtime, Handle<> xHandle, Handle<> yHandle) {
  auto resX = toPrimitive_RJS(runtime, xHandle, PreferredType::NONE);
  if (resX == ExecutionStatus::EXCEPTION) {
    return ExecutionStatus::EXCEPTION;
  }
  auto xPrim = runtime.makeHandle(resX.getValue());

  auto resY = toPrimitive_RJS(runtime, yHandle, PreferredType::NONE);
  if (resY == ExecutionStatus::EXCEPTION) {
    return ExecutionStatus::EXCEPTION;
  }
  auto yPrim = runtime.makeHandle(resY.getValue());

  // If one of the values is a string, concatenate as strings.
  if (xPrim->isString() || yPrim->isString()) {
    auto resX = toString_RJS(runtime, xPrim);
    if (resX == ExecutionStatus::EXCEPTION) {
      return ExecutionStatus::EXCEPTION;
    }
    auto xStr = runtime.makeHandle(std::move(*resX));

    auto resY = toString_RJS(runtime, yPrim);
    if (resY == ExecutionStatus::EXCEPTION) {
      return ExecutionStatus::EXCEPTION;
    }
    auto yStr = runtime.makeHandle(std::move(*resY));

    return StringPrimitive::concat(runtime, xStr, yStr);
  }

  // xPrim and yPrim are primitives; hence, they are already bigints, or they
  // will never be bigints.
  if (LLVM_LIKELY(!xPrim->isBigInt())) {
    // xPrim is not a bigint; thus this is Number + Number.
    auto res = toNumber_RJS(runtime, xPrim);
    if (LLVM_UNLIKELY(res == ExecutionStatus::EXCEPTION)) {
      return ExecutionStatus::EXCEPTION;
    }
    const double xNum = res->getNumber();
    // N.B.: toNumber(yPrim) will raise an TypeError if yPrim is bigint, which
    // is the correct exception to be raised when trying to perform
    // Number + BigInt. This avoids the need to check if yPrim is a bigint.
    res = toNumber_RJS(runtime, yPrim);
    if (LLVM_UNLIKELY(res == ExecutionStatus::EXCEPTION)) {
      return ExecutionStatus::EXCEPTION;
    }
    const double yNum = res->getNumber();
    return HermesValue::encodeDoubleValue(xNum + yNum);
  }

  // yPrim is a primitive; therefore it is already a BigInt, or it will never be
  // one.
  if (!yPrim->isBigInt()) {
    return runtime.raiseTypeErrorForValue(
        "Cannot convert ", yHandle, " to BigInt");
  }

  return BigIntPrimitive::add(
      runtime,
      runtime.makeHandle(xPrim->getBigInt()),
      runtime.makeHandle(yPrim->getBigInt()));
}
