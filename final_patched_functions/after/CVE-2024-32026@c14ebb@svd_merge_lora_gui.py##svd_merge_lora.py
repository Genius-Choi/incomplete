def svd_merge_lora(
    lora_a_model,
    lora_b_model,
    lora_c_model,
    lora_d_model,
    ratio_a,
    ratio_b,
    ratio_c,
    ratio_d,
    save_to,
    precision,
    save_precision,
    new_rank,
    new_conv_rank,
    device,
):
    # Check if the output file already exists
    if os.path.isfile(save_to):
        print(f"Output file '{save_to}' already exists. Aborting.")
        return

    # Check if the ratio total is equal to one. If not normalise to 1
    total_ratio = ratio_a + ratio_b + ratio_c + ratio_d
    if total_ratio != 1:
        ratio_a /= total_ratio
        ratio_b /= total_ratio
        ratio_c /= total_ratio
        ratio_d /= total_ratio

    run_cmd = rf'"{PYTHON}" "{scriptdir}/sd-scripts/networks/svd_merge_lora.py"'
    run_cmd += f" --save_precision {save_precision}"
    run_cmd += f" --precision {precision}"
    run_cmd += rf' --save_to "{save_to}"'

    run_cmd_models = " --models"
    run_cmd_ratios = " --ratios"
    # Add non-empty models and their ratios to the command
    if lora_a_model:
        if not os.path.isfile(lora_a_model):
            msgbox("The provided model A is not a file")
            return
        run_cmd_models += rf' "{lora_a_model}"'
        run_cmd_ratios += f" {ratio_a}"
    if lora_b_model:
        if not os.path.isfile(lora_b_model):
            msgbox("The provided model B is not a file")
            return
        run_cmd_models += rf' "{lora_b_model}"'
        run_cmd_ratios += f" {ratio_b}"
    if lora_c_model:
        if not os.path.isfile(lora_c_model):
            msgbox("The provided model C is not a file")
            return
        run_cmd_models += rf' "{lora_c_model}"'
        run_cmd_ratios += f" {ratio_c}"
    if lora_d_model:
        if not os.path.isfile(lora_d_model):
            msgbox("The provided model D is not a file")
            return
        run_cmd_models += rf' "{lora_d_model}"'
        run_cmd_ratios += f" {ratio_d}"

    run_cmd += run_cmd_models
    run_cmd += run_cmd_ratios
    run_cmd += f" --device {device}"
    run_cmd += f' --new_rank "{new_rank}"'
    run_cmd += f' --new_conv_rank "{new_conv_rank}"'

    log.info(run_cmd)

    env = os.environ.copy()
    env["PYTHONPATH"] = (
        rf"{scriptdir}{os.pathsep}{scriptdir}/sd-scripts{os.pathsep}{env.get('PYTHONPATH', '')}"
    )

    # Run the command
    subprocess.run(run_cmd, env=env)
