def import_service(
    service_identifier: str,
    bento_path: pathlib.Path | None = None,
) -> Service[t.Any]:
    """
    import a service from a service identifier, which should be normalized by
    `normalize_identifier` function.
    """
    from _bentoml_sdk import Service

    if bento_path is None:
        bento_path = pathlib.Path(".")
    bento_path = bento_path.absolute()

    # patch python path if needed
    if bento_path != pathlib.Path(".").absolute():
        # a project
        extra_python_path = str(bento_path)
        sys.path.insert(0, extra_python_path)
    else:
        # a project under current directory
        extra_python_path = None

    # patch model store if needed
    if (
        bento_path.parent.joinpath(BENTO_YAML_FILENAME).exists()
        and bento_path.parent.joinpath("models").exists()
    ):
        from bentoml._internal.configuration.containers import BentoMLContainer
        from bentoml._internal.models import ModelStore

        original_model_store = BentoMLContainer.model_store.get()

        BentoMLContainer.model_store.set(
            ModelStore((bento_path.parent.joinpath("models").absolute()))
        )
    else:
        original_model_store = None

    try:
        module_name, _, attrs_str = service_identifier.partition(":")

        assert (
            module_name and attrs_str
        ), f'Invalid import target "{service_identifier}", must format as "<module>:<attribute>"'

        module = importlib.import_module(module_name)
        root_service_name, _, depend_path = attrs_str.partition(".")
        root_service = getattr(module, root_service_name)

        assert isinstance(
            root_service, Service
        ), f'import target "{module_name}:{attrs_str}" is not a bentoml.Service instance'

        if not depend_path:
            return root_service  # type: ignore
        else:
            return root_service.find_dependent(depend_path)

    except (ImportError, AttributeError, KeyError, AssertionError) as e:
        sys_path = sys.path.copy()
        if extra_python_path is not None:
            sys.path.remove(extra_python_path)

        if original_model_store is not None:
            from bentoml._internal.configuration.containers import BentoMLContainer

            BentoMLContainer.model_store.set(original_model_store)
        from bentoml.exceptions import ImportServiceError

        raise ImportServiceError(
            f'Failed to import service "{service_identifier}": {e}, sys.path: {sys_path}, cwd: {pathlib.Path.cwd()}'
        ) from None
