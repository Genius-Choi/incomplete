def handle_author_on_edit(book, author_name, update_stored=True):
    # handle author(s)
    input_authors, renamed = prepare_authors(author_name)
    '''input_authors = author_name.split('&')
    input_authors = list(map(lambda it: it.strip().replace(',', '|'), input_authors))
    # Remove duplicates in authors list
    input_authors = helper.uniq(input_authors)
    # we have all author names now
    if input_authors == ['']:
        input_authors = [_(u'Unknown')]  # prevent empty Author

    renamed = list()
    for in_aut in input_authors:
        renamed_author = calibre_db.session.query(db.Authors).filter(db.Authors.name == in_aut).first()
        if renamed_author and in_aut != renamed_author.name:
            renamed.append(renamed_author.name)
            all_books = calibre_db.session.query(db.Books) \
                .filter(db.Books.authors.any(db.Authors.name == renamed_author.name)).all()
            sorted_renamed_author = helper.get_sorted_author(renamed_author.name)
            sorted_old_author = helper.get_sorted_author(in_aut)
            for one_book in all_books:
                one_book.author_sort = one_book.author_sort.replace(sorted_renamed_author, sorted_old_author)'''

    change = modify_database_object(input_authors, book.authors, db.Authors, calibre_db.session, 'author')

    # Search for each author if author is in database, if not, author name and sorted author name is generated new
    # everything then is assembled for sorted author field in database
    sort_authors_list = list()
    for inp in input_authors:
        stored_author = calibre_db.session.query(db.Authors).filter(db.Authors.name == inp).first()
        if not stored_author:
            stored_author = helper.get_sorted_author(inp)
        else:
            stored_author = stored_author.sort
        sort_authors_list.append(helper.get_sorted_author(stored_author))
    sort_authors = ' & '.join(sort_authors_list)
    if book.author_sort != sort_authors and update_stored:
        book.author_sort = sort_authors
        change = True
    return input_authors, change, renamed
