def convert_lcm(name, model_path, lora_scale, model_type):
    run_cmd = rf'"{PYTHON}" "{scriptdir}/tools/lcm_convert.py"'

    # Check if source model exist
    if not os.path.isfile(model_path):
        log.error("The provided DyLoRA model is not a file")
        return

    if os.path.dirname(name) == "":
        # only filename given. prepend dir
        name = os.path.join(os.path.dirname(model_path), name)
    if os.path.isdir(name):
        # only dir name given. set default lcm name
        name = os.path.join(name, "lcm.safetensors")
    if os.path.normpath(model_path) == os.path.normpath(name):
        # same path. silently ignore but rename output
        path, ext = os.path.splitext(save_to)
        save_to = f"{path}_lcm{ext}"

    # Construct the command to run the script
    run_cmd += f" --lora-scale {lora_scale}"
    run_cmd += f' --model "{model_path}"'
    run_cmd += f' --name "{name}"'

    if model_type == "SDXL":
        run_cmd += f" --sdxl"
    if model_type == "SSD-1B":
        run_cmd += f" --ssd-1b"

    log.info(run_cmd)

    env = os.environ.copy()
    env["PYTHONPATH"] = (
        rf"{scriptdir}{os.pathsep}{scriptdir}/sd-scripts{os.pathsep}{env.get('PYTHONPATH', '')}"
    )

    # Run the command
    subprocess.run(run_cmd, env=env)

    # Return a success message
    log.info("Done extracting...")
