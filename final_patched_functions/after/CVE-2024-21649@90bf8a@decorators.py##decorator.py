    def decorator(*args, **kwargs) -> callable:
        """
        Decorator the function with metadata from the run.

        Decorator that adds metadata from the run to the function. This
        includes the task id, node id, collaboration id, organization id,
        temporary directory, output file, input file, and token file.

        Example
        -------
        >>> @metadata
        >>> def my_algorithm(metadata: RunMetaData, <other arguments>):
        >>>     pass
        """
        token_file = get_env_var("TOKEN_FILE")
        info("Reading token")
        with open(token_file) as fp:
            token = fp.read().strip()

        info("Extracting payload from token")
        payload = _extract_token_payload(token)

        metadata = RunMetaData(
            task_id=payload["task_id"],
            node_id=payload["node_id"],
            collaboration_id=payload["collaboration_id"],
            organization_id=payload["organization_id"],
            temporary_directory=Path(get_env_var("TEMPORARY_FOLDER")),
            output_file=Path(get_env_var("OUTPUT_FILE")),
            input_file=Path(get_env_var("INPUT_FILE")),
            token_file=Path(get_env_var("TOKEN_FILE"))
        )
        return func(metadata, *args, **kwargs)
