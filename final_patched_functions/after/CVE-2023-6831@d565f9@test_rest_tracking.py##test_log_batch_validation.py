def test_log_batch_validation(mlflow_client):
    experiment_id = mlflow_client.create_experiment("log_batch validation")
    created_run = mlflow_client.create_run(experiment_id)
    run_id = created_run.info.run_id

    def assert_bad_request(payload, expected_error_message):
        response = _send_rest_tracking_post_request(
            mlflow_client.tracking_uri,
            "/api/2.0/mlflow/runs/log-batch",
            payload,
        )
        assert response.status_code == 400
        assert expected_error_message in response.text

    for request_parameter in ["metrics", "params", "tags"]:
        assert_bad_request(
            {
                "run_id": run_id,
                request_parameter: "foo",
            },
            f"Invalid value foo for parameter '{request_parameter}' supplied",
        )

    ## Should 400 if missing timestamp
    assert_bad_request(
        {"run_id": run_id, "metrics": [{"key": "mae", "value": 2.5}]},
        "Invalid value [{'key': 'mae', 'value': 2.5}] for parameter 'metrics' supplied",
    )

    ## Should 200 if timestamp provided but step is not
    response = _send_rest_tracking_post_request(
        mlflow_client.tracking_uri,
        "/api/2.0/mlflow/runs/log-batch",
        {"run_id": run_id, "metrics": [{"key": "mae", "value": 2.5, "timestamp": 123456789}]},
    )

    assert response.status_code == 200
