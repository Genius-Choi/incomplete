def checkin(request):
    if request.content_type != "application/json":
        return HttpResponseBadRequest(
            'Checkin must be content-type "application/json"!'
        )
    # Ensure we have the bare minimum data before continuing.
    try:
        submission = json.loads(request.body.decode())
    except json.JSONDecodeError:
        return HttpResponseBadRequest("Checkin has invalid JSON!")
    if not isinstance(submission, dict) or "Machine" not in submission:
        return HttpResponseBadRequest('Checkin JSON is missing required key "Machine"!')

    # Process machine submission information.
    try:
        serial = submission["Machine"]["extra_data"].get("serial")
    except KeyError:
        return HttpResponseBadRequest(
            'Checkin JSON is missing required "Machine" key "serial"!'
        )
    if not serial:
        return HttpResponseBadRequest(
            'Checkin JSON is missing required "Machine" key "serial"!'
        )

    machine = process_checkin_serial(serial)
    machine_group = get_object_or_404(
        MachineGroup, key=submission["Sal"]["extra_data"].get("key")
    )
    machine.machine_group = machine_group
    machine.broken_client = False
    machine.save()
    clean_related(machine)

    object_queue = {
        "facts": [],
        "historical_facts": [],
        "managed_items": [],
        "managed_item_histories": [],
        "messages": [],
    }

    # Pop off the plugin_results, because they are a list instead of
    # a dict.
    plugin_results = submission.pop("plugin_results", {})
    for management_source_name, management_data in submission.items():
        management_source, _ = ManagementSource.objects.get_or_create(
            name=management_source_name
        )

        object_queue = process_management_submission(
            management_source, management_data, machine, object_queue
        )

    object_queue = process_managed_item_histories(object_queue, machine)

    create_objects(object_queue)

    server.utils.process_plugin_script(plugin_results, machine)
    server.utils.run_plugin_processing(machine, submission)

    if server.utils.get_setting("send_data") in (None, True):
        # If setting is None, it hasn't been configured yet; assume True
        try:
            # If the report server is down, don't halt all submissions
            server.utils.send_report()
        except Exception as e:
            logger.debug(e)

    msg = f"Sal report submitted for {machine.serial}"
    logger.debug(msg)
    return HttpResponse(msg)
