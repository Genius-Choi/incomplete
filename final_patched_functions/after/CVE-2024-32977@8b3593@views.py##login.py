def login():
    from flask_login import current_user

    default_redirect_url = url_for("index")
    redirect_url = request.args.get("redirect", default_redirect_url)

    configured_allowed_paths = settings().get(["server", "allowedLoginRedirectPaths"])
    if configured_allowed_paths is None or not isinstance(configured_allowed_paths, list):
        configured_allowed_paths = []
    configured_allowed_paths = list(
        filter(
            lambda x: isinstance(x, str),
            configured_allowed_paths,
        )
    )

    allowed_paths = [
        url_for("index"),
        url_for("recovery"),
        url_for("reverse_proxy_test"),
    ]
    try:
        allowed_paths += [
            url_for("plugin.appkeys.handle_auth_dialog", app_token="*"),
        ]
    except BuildError:
        pass  # no appkeys plugin enabled, see #4763
    allowed_paths += configured_allowed_paths

    if not validate_local_redirect(redirect_url, allowed_paths):
        _logger.warning(
            f"Got an invalid redirect URL with the login attempt, misconfiguration or attack attempt: {redirect_url}"
        )
        redirect_url = default_redirect_url

    permissions = sorted(
        filter(
            lambda x: x is not None and isinstance(x, OctoPrintPermission),
            map(
                lambda x: getattr(Permissions, x.strip()),
                request.args.get("permissions", "").split(","),
            ),
        ),
        key=lambda x: x.get_name(),
    )
    if not permissions:
        permissions = [Permissions.STATUS, Permissions.SETTINGS_READ]

    user_id = request.args.get("user_id", "")
    reauthenticate = request.args.get("reauthenticate", "false").lower() == "true"

    if (
        (not user_id or current_user.get_id() == user_id)
        and has_permissions(*permissions)
        and (not reauthenticate or credentials_checked_recently())
    ):
        return redirect(redirect_url)

    render_kwargs = {
        "theming": [],
        "redirect_url": redirect_url,
        "permission_names": map(lambda x: x.get_name(), permissions),
        "user_id": user_id,
        "logged_in": not current_user.is_anonymous,
        "reauthenticate": reauthenticate,
    }

    try:
        additional_assets = _add_additional_assets("octoprint.theming.login")

        # backwards compatibility to forcelogin & loginui plugins which were replaced by this built-in dialog
        additional_assets += _add_additional_assets("octoprint.plugin.forcelogin.theming")
        additional_assets += _add_additional_assets("octoprint.plugin.loginui.theming")

        render_kwargs.update({"theming": additional_assets})
    except Exception:
        _logger.exception("Error processing theming CSS, ignoring")

    resp = make_response(render_template("login.jinja2", **render_kwargs))
    return add_csrf_cookie(resp)
