def test_test_filter(test_data):
    with app.test_client() as c:
        build_data_inst({c.port: test_data})
        global_state.set_app_settings(dict(enable_custom_filters=True))
        response = c.get(
            "/dtale/test-filter/{}".format(c.port),
            query_string=dict(query="date == date"),
        )
        response_data = response.get_json()
        assert response_data["success"]

        response = c.get(
            "/dtale/test-filter/{}".format(c.port), query_string=dict(query="foo == 1")
        )
        response_data = response.get_json()
        assert response_data["success"]

        response = c.get(
            "/dtale/test-filter/{}".format(c.port),
            query_string=dict(query="date == '20000101'"),
        )
        response_data = response.get_json()
        assert response_data["success"]

        response = c.get(
            "/dtale/test-filter/{}".format(c.port),
            query_string=dict(query="baz == 'baz'"),
        )
        response_data = response.get_json()
        assert response_data["success"]

        response = c.get(
            "/dtale/test-filter/{}".format(c.port), query_string=dict(query="bar > 1.5")
        )
        response_data = response.get_json()
        assert not response_data["success"]
        assert response_data["error"] == 'query "bar > 1.5" found no data, please alter'

        response = c.get(
            "/dtale/test-filter/{}".format(c.port), query_string=dict(query="foo2 == 1")
        )
        response_data = response.get_json()
        assert "error" in response_data

        response = c.get(
            "/dtale/test-filter/{}".format(c.port),
            query_string=dict(query=None, save="true"),
        )
        response_data = response.get_json()
        assert response_data["success"]

        global_state.set_app_settings(dict(enable_custom_filters=False))
        response = c.get(
            "/dtale/test-filter/{}".format(c.port),
            query_string=dict(query="foo2 == 1", save=True),
        )
        response_data = response.get_json()
        assert not response_data["success"]
        assert response_data["error"] == (
            "Custom Filters not enabled! Custom filters are vulnerable to code injection attacks, please only "
            "use in trusted environments."
        )
        global_state.set_app_settings(dict(enable_custom_filters=True))

    if PY3:
        df = pd.DataFrame([dict(a=1)])
        df["a.b"] = 2
        with app.test_client() as c:
            build_data_inst({c.port: df})
            response = c.get(
                "/dtale/test-filter/{}".format(c.port),
                query_string=dict(query="a.b == 2"),
            )
            response_data = response.get_json()
            assert not response_data["success"]
