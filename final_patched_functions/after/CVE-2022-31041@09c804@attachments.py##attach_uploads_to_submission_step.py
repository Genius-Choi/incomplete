def attach_uploads_to_submission_step(submission_step: SubmissionStep) -> list:
    # circular import
    from .tasks import resize_submission_attachment

    components = list(submission_step.form_step.iter_components(recursive=True))

    uploads = resolve_uploads_from_data(components, submission_step.data)

    result = list()
    validation_errors = defaultdict(list)
    for key, (component, uploads) in uploads.items():
        # grab resize settings
        resize_apply = glom(component, "of.image.resize.apply", default=False)
        resize_size = (
            glom(component, "of.image.resize.width", default=DEFAULT_IMAGE_MAX_SIZE[0]),
            glom(
                component, "of.image.resize.height", default=DEFAULT_IMAGE_MAX_SIZE[1]
            ),
        )
        allowed_mime_types = glom(component, "file.type", default=[])
        file_max_size = file_size_cast(
            glom(component, "fileMaxSize", default="") or settings.MAX_FILE_UPLOAD_SIZE
        )

        base_name = glom(component, "file.name", default="")

        # formio sends a list of uploads even with multiple=False
        for i, upload in enumerate(uploads, start=1):
            if upload.file_size > file_max_size:
                raise RequestEntityTooLarge(
                    _(
                        "Upload {uuid} exceeds the maximum upload size of {max_size}b"
                    ).format(
                        uuid=upload.uuid,
                        max_size=file_max_size,
                    ),
                )

            # perform content type validation
            with upload.content.open("rb") as infile:
                # 2048 bytes per recommendation of python-magic
                file_mime_type = magic.from_buffer(infile.read(2048), mime=True)

            invalid_file_type_error = ValidationError(
                _("The file '{filename}' is not a valid file type.").format(
                    filename=upload.file_name
                ),
                code="invalid",
            )

            if upload.content_type != file_mime_type:
                validation_errors[key].append(invalid_file_type_error)
                continue

            # if no allowed_mime_types are defined on the file component, then all filetypes
            # are allowed and we skip validation.
            if allowed_mime_types and file_mime_type not in allowed_mime_types:
                validation_errors[key].append(invalid_file_type_error)
                continue

            file_name = append_file_num_postfix(
                upload.file_name, base_name, i, len(uploads)
            )

            attachment, created = SubmissionFileAttachment.objects.create_from_upload(
                submission_step, key, upload, file_name=file_name
            )
            result.append((attachment, created))

            if created and resize_apply and resize_size:
                # NOTE there is a possible race-condition if user completes a submission before this resize task is done
                # see https://github.com/open-formulieren/open-forms/issues/507
                resize_submission_attachment.delay(attachment.id, resize_size)

    if validation_errors:
        raise ValidationError(validation_errors)

    return result
