  def by_frq_order_by_distance
    return nil if @location.nil? || @q.to_f == 0

    sql = <<-SQL
          SELECT uo.name AS owner,
                 CONCAT(us.name, ' ', us.location) AS display_name,
                 us.net,
                 us.radius,
                 us.lat,
                 us.lon,
                 (3959 * acos(cos(radians(:lat))*cos(radians(lat))*cos(radians(lon)-radians(:lon))+sin(radians(:lat))*sin(radians(lat)))) AS distance,
                 fa.id AS frequency_assignment_id
            FROM frequencies f
      INNER JOIN frequency_assignments fa ON (fa.frequency_id = f.id AND fa.subject_type = 'UkeStation' AND fa.uke_import_id = :uke_import_id)
      INNER JOIN uke_stations us ON us.id = fa.subject_id
      INNER JOIN uke_operators uo ON uo.id = us.uke_operator_id
           WHERE f.mhz = :mhz
             AND fa.usage = 'TX'
          HAVING distance <= 100
        ORDER BY distance ASC
    SQL

    result_to_hash(conn.select_all(sql.gsub(':uke_import_id', @active_import.id.to_s).gsub(':lat', conn.quote(@location.latitude.to_s)).gsub(':lon', conn.quote(@location.longitude.to_s)).gsub(':mhz', conn.quote(Uke::Unifier::frq_string(@q).to_s))))
  end
