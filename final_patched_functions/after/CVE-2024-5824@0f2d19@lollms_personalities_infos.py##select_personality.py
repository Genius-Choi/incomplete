def select_personality(data:PersonalitySelectionInfos):
    check_access(lollmsElfServer, data.client_id)
    ASCIIColors.info("Selecting personality")
    id = data.id
    print(f"- Selecting active personality {id} ...",end="")
    if id<len(lollmsElfServer.mounted_personalities):
        lollmsElfServer.config["active_personality_id"]=id
        lollmsElfServer.personality:AIPersonality = lollmsElfServer.mounted_personalities[lollmsElfServer.config["active_personality_id"]]
        if lollmsElfServer.personality is None:
            return {"status": False, "error":"Something is wrong with the personality"}
        if lollmsElfServer.personality.processor:
            lollmsElfServer.personality.processor.selected()
        ASCIIColors.success("ok")
        
        print(f"Selected {lollmsElfServer.personality.name}")

        language = lollmsElfServer.config.current_language
        if lollmsElfServer.personality.language is None:
            lollmsElfServer.personality.language = "english"
        default_language = lollmsElfServer.personality.language.lower().strip().split()[0]

        if language != default_language:
            lollmsElfServer.set_personality_language(language)

        if lollmsElfServer.config.auto_save:
            ASCIIColors.info("Saving configuration")
            lollmsElfServer.config.save_config()
        return {
            "status": True,
            "personalities":lollmsElfServer.config["personalities"],
            "active_personality_id":lollmsElfServer.config["active_personality_id"]                
            }
    else:
        ASCIIColors.error(f"nok : personality id out of bounds @ {id} >= {len(lollmsElfServer.mounted_personalities)}")
        return {"status": False, "error":"Invalid ID"}
