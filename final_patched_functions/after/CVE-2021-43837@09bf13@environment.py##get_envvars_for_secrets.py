def get_envvars_for_secrets(
    secrets: Dict[str, types.JSONDict],
    path: str,
    prefix: str,
    omit_single_key: bool = False,
) -> Dict[str, str]:
    env_secrets = {}
    if not prefix:
        prefix = pathlib.Path(path).name

    for subpath, values in secrets.items():
        omit = omit_single_key and len(values) == 1
        for key, value in values.items():
            if omit:
                key = ""
            try:
                env_name = _normalize("_".join(e for e in (prefix, subpath, key) if e))
            except exceptions.VaultInvalidEnvironmentName as exc:
                logger.warning(f"Invalid environment name {exc}, skipping secret value")
                continue
            value = _make_env_value(value)
            env_secrets[env_name] = value
    return env_secrets
