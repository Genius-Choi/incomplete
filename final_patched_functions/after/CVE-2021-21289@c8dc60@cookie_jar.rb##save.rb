    def save(output, *options)
      output.respond_to?(:write) or
        return ::File.open(output, 'w') { |io| save(io, *options) }

      opthash = {
        :format => :yaml,
        :session => false,
      }
      case options.size
      when 0
      when 1
        case options = options.first
        when Symbol
          opthash[:format] = options
        else
          opthash.update(options) if options
        end
      when 2
        opthash[:format], options = options
        opthash.update(options) if options
      else
        raise ArgumentError, 'wrong number of arguments (%d for 1-3)' % (1 + options.size)
      end

      return super(output, opthash) if opthash[:format] != :yaml

      session = opthash[:session]
      nstore = HashStore.new

      each { |cookie|
        next if !session && cookie.session?

        if cookie.max_age
          cookie = cookie.dup
          cookie.expires = cookie.expires # convert max_age to expires
        end
        nstore.add(cookie)
      }

      yaml = YAML.dump(nstore.instance_variable_get(:@jar))

      # a gross hack
      yaml.gsub!(%r{^(    [^ ].*: !ruby/object:)HTTP::Cookie$}) {
        $1 + 'Mechanize::Cookie'
      }
      yaml.gsub!(%r{^(      expires: )(?:|!!null|(.+?)) *$}) {
        $1 + ($2 ? Time.parse($2).httpdate : '')
      }

      output.write yaml

      self
    end
