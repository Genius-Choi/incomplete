def get_sanitized_output_path(fname: str, path: Optional[pathlib.Path]) -> pathlib.Path:
    """
    check f.filename has invalid directory traversals
    do following but is_relative_to introduced in py 3.9,
    so I replaced it with relative_to. when condition is not satisfied, raise ValueError
    if not pathlib.Path(...).joinpath(remove_relative_path_marker(outname)).is_relative_to(...):
        raise Bad7zFile
    """
    if path is None:
        try:
            pathlib.Path(os.getcwd()).joinpath(fname).resolve().relative_to(os.getcwd())
            outfile = pathlib.Path(remove_relative_path_marker(fname))
        except ValueError:
            raise Bad7zFile(f"Specified path is bad: {fname}")
    else:
        try:
            outfile = path.joinpath(remove_relative_path_marker(fname))
            outfile.resolve().relative_to(path)
        except ValueError:
            raise Bad7zFile(f"Specified path is bad: {fname}")
    return outfile
