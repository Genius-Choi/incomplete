def check_prereg_key(
    request: HttpRequest, confirmation_key: str
) -> Union[Confirmation, HttpResponse]:
    """
    Checks if the Confirmation key is valid, returning the Confirmation object in case of success
    and an appropriate error page otherwise.
    """
    try:
        confirmation: Optional[Confirmation] = Confirmation.objects.get(
            confirmation_key=confirmation_key
        )
    except Confirmation.DoesNotExist:
        confirmation = None

    if confirmation is None or confirmation.type not in [
        Confirmation.USER_REGISTRATION,
        Confirmation.INVITATION,
        Confirmation.REALM_CREATION,
    ]:
        return render_confirmation_key_error(
            request, ConfirmationKeyException(ConfirmationKeyException.DOES_NOT_EXIST)
        )

    prereg_user = confirmation.content_object
    assert prereg_user is not None
    if prereg_user.status == confirmation_settings.STATUS_REVOKED:
        return render(request, "zerver/confirmation_link_expired_error.html", status=404)

    try:
        get_object_from_key(confirmation_key, confirmation.type, activate_object=False)
    except ConfirmationKeyException as exception:
        return render_confirmation_key_error(request, exception)

    return confirmation
