def a_server_url_and_token(
    tmp_path_factory: pytest.TempPathFactory,
) -> Generator[Tuple[str, str], None, None]:
    """Start a temporary, isolated jupyter server."""
    token = str(uuid.uuid4())
    port = get_unused_port()

    root_dir = tmp_path_factory.mktemp("root_dir")
    home = tmp_path_factory.mktemp("home")
    server_conf = home / "etc/jupyter/jupyter_config.json"

    server_conf.parent.mkdir(parents=True)
    extensions = {"jupyter_lsp": True, "jupyterlab": False, "nbclassic": False}
    app = {"jpserver_extensions": extensions, "token": token}
    config_data = {"ServerApp": app, "IdentityProvider": {"token": token}}

    server_conf.write_text(json.dumps(config_data), encoding="utf-8")
    args = ["jupyter-server", f"--port={port}", "--no-browser"]
    env = dict(os.environ)
    env.update(
        HOME=str(home),
        USERPROFILE=str(home),
        JUPYTER_CONFIG_DIR=str(server_conf.parent),
    )
    proc = subprocess.Popen(args, cwd=str(root_dir), env=env, stdin=subprocess.PIPE)
    url = f"http://{LOCALHOST}:{port}"
    retries = 20
    while retries:
        time.sleep(1)
        try:
            urlopen(f"{url}/favicon.ico")
            break
        except URLError:
            print(f"[{retries} / 20] ...", flush=True)
            retries -= 1
            continue
    yield url, token
    proc.terminate()
    proc.communicate(b"y\n")
    proc.wait()
    assert proc.returncode is not None, "jupyter-server probably still running"
