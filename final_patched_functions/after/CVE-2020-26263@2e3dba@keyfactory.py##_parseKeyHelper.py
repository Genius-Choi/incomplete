def _parseKeyHelper(key, private, public):
    if private and not key.hasPrivateKey():
        raise SyntaxError("Not a private key!")

    if public:
        return _createPublicKey(key)

    if private:
        if cryptomath.m2cryptoLoaded:
            if type(key) == Python_RSAKey:
                return _createPrivateKey(key)
            assert type(key) in (OpenSSL_RSAKey, ), type(key)
            return key
        elif hasattr(key, "d"):
            return _createPrivateKey(key)
    return key
