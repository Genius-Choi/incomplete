  def users
    Log.add_info(request, params.inspect)

    @item = Item.find(params[:item_id])

    con = []

    unless params[:keyword].blank?
      key_array = params[:keyword].split(nil)
      key_array.each do |key| 
        con << SqlHelper.get_sql_like([:name, :email, :fullname, :address, :organization], key)
      end
    end

    @group_id = nil
    if !params[:thetisBoxSelKeeper].nil?
      @group_id = params[:thetisBoxSelKeeper].split(':').last
    elsif !params[:group_id].blank?
      @group_id = params[:group_id]
    end
    SqlHelper.validate_token([@group_id])

    unless @group_id.nil?
      con << SqlHelper.get_sql_like([:groups], "|#{@group_id}|")
    end

    include_comment = false

    filter_status = params[:filter_status]
    SqlHelper.validate_token([filter_status])

    unless filter_status.blank?
      case filter_status
        when ZeptairDistHelper::STATUS_REPLIED
          con << "((Comment.item_id=#{@item.id}) and (Comment.xtype='#{Comment::XTYPE_DIST_ACK}') and (Comment.user_id=User.id))"
          include_comment = true
        when ZeptairDistHelper::STATUS_COMPLETE
          ack_msg = ZeptairDistHelper.completed_ack_message(@item.id)
          con << "((Comment.item_id=#{@item.id}) and (Comment.xtype='#{Comment::XTYPE_DIST_ACK}') and (Comment.user_id=User.id) and (Comment.message='#{ack_msg}'))"
          include_comment = true
        when ZeptairDistHelper::STATUS_NO_REPLY
          comments = Comment.where("((Comment.item_id=#{@item.id}) and (Comment.xtype='#{Comment::XTYPE_DIST_ACK}'))").to_a
          except_users = []
          unless comments.nil?
            comments.each do |comment|
              except_users << comment.user_id
            end
          end
          unless except_users.empty?
            con << '(User.id not in (' + except_users.join(',') + '))'
          end
        else
          ;
      end
    end

    order_by = nil
    @sort_col = params[:sort_col]
    @sort_type = params[:sort_type]

    if @sort_col.blank? or @sort_type.blank?
      @sort_col = 'id'
      @sort_type = 'ASC'
    end
    SqlHelper.validate_token([@sort_col, @sort_type])

    fields = ['User.*']
    unless @sort_col.index('Comment.').nil?
      if include_comment
        fields << @sort_col
      else
        sort_alias = @sort_col.downcase.gsub('.', '_')
        fields << "(select distinct #{@sort_col} from comments Comment where (Comment.item_id=#{@item.id}) and (Comment.xtype='#{Comment::XTYPE_DIST_ACK}') and (Comment.user_id=User.id)) as #{sort_alias}"
        order_by = ' order by ' + sort_alias + ' ' + @sort_type
      end
    end

    order_by = " order by #{@sort_col} #{@sort_type}" if order_by.nil?

    where = ''
    unless con.empty?
      where = ' where ' + con.join(' and ')
    end

    sql = "select distinct #{fields.join(',')} from users User"
    if include_comment
      sql << ', comments Comment'
    end
    sql << where + order_by

    @user_pages, @users, @total_num = paginate_by_sql(User, sql, 50)
  end
