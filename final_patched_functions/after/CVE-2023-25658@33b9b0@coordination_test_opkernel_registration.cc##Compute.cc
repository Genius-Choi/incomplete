  void Compute(OpKernelContext* ctx) override {
    const Tensor* error_code_tensor;
    OP_REQUIRES_OK(ctx, ctx->input("error_code", &error_code_tensor));
    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(error_code_tensor->shape()),
                errors::InvalidArgument("Error code must be scalar."));
    const int& error_code = error_code_tensor->scalar<int32_t>()();
    const Tensor* error_message_tensor;
    OP_REQUIRES_OK(ctx, ctx->input("error_message", &error_message_tensor));
    OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(error_message_tensor->shape()),
                errors::InvalidArgument("Error message must be scalar."));
    const string& error_message = error_message_tensor->scalar<tstring>()();
    LOG(INFO) << "TestReportErrorToClusterOp error_code=" << error_code
              << " error_message=" << error_message;
    auto* coord_agent = ctx->coordination_service_agent();
    if (coord_agent == nullptr || !coord_agent->IsInitialized()) {
      ctx->SetStatus(
          errors::Internal("Coordination service agent is not instantiated or "
                           "initialized properly."));
      return;
    }
    tensorflow::Status s(static_cast<tensorflow::error::Code>(error_code),
                         error_message);
    s.SetPayload(tsl::CoordinationErrorPayloadKey(),
                 absl::Cord("testing error payload"));
    OP_REQUIRES_OK(ctx, coord_agent->ReportError(s));
  }
