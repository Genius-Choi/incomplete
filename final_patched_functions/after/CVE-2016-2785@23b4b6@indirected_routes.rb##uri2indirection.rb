  def uri2indirection(http_method, uri, params)
    # the first field is always nil because of the leading slash,
    indirection_type, version, indirection_name, key = uri.split("/", 5)[1..-1]
    url_prefix = "/#{indirection_type}/#{version}"
    environment = params.delete(:environment)

    if indirection_name !~ /^\w+$/
      raise ArgumentError, "The indirection name must be purely alphanumeric, not '#{indirection_name}'"
    end

    # this also depluralizes the indirection_name if it is a search
    method = indirection_method(http_method, indirection_name)

    # check whether this indirection matches the prefix and version in the
    # request
    if url_prefix != IndirectionType.url_prefix_for(indirection_name)
      raise ArgumentError, "Indirection '#{indirection_name}' does not match url prefix '#{url_prefix}'"
    end

    indirection = Puppet::Indirector::Indirection.instance(indirection_name.to_sym)
    if !indirection
      raise Puppet::Network::HTTP::Error::HTTPNotFoundError.new(
        "Could not find indirection '#{indirection_name}'", Puppet::Network::HTTP::Issues::HANDLER_NOT_FOUND)
    end

    if !environment
      raise ArgumentError, "An environment parameter must be specified"
    end

    if ! Puppet::Node::Environment.valid_name?(environment)
      raise ArgumentError, "The environment must be purely alphanumeric, not '#{environment}'"
    end

    configured_environment = Puppet.lookup(:environments).get(environment)
    unless configured_environment.nil?
      configured_environment = configured_environment.override_from_commandline(Puppet.settings)
      params[:environment] = configured_environment
    end

    check_authorization(method, "#{url_prefix}/#{indirection_name}/#{key}", params)

    if configured_environment.nil?
      raise ArgumentError, "Could not find environment '#{environment}'"
    end

    params.delete(:bucket_path)

    if key == "" or key.nil?
      raise ArgumentError, "No request key specified in #{uri}"
    end

    [indirection, method, key, params]
  end
