def unInstall_binding(data:BindingInstallParams):
    """Uninstall an installed binding from the server.
    
    Args:
        data (BindingInstallParams): Parameters required for uninstallation.
        format:
            name: str : the name of the binding
    Returns:
        dict: Status of operation.
    """    
    ASCIIColors.info(f"- Reinstalling binding {data.name}...")
    try:
        ASCIIColors.info("Unmounting binding and model")
        if lollmsElfServer.binding is not None:
            del lollmsElfServer.binding
            lollmsElfServer.binding = None
            gc.collect()
        ASCIIColors.info("Uninstalling binding")
        old_bn = lollmsElfServer.config.binding_name
        lollmsElfServer.config.binding_name = sanitize_path(data.name)
        lollmsElfServer.binding =  BindingBuilder().build_binding(lollmsElfServer.config, lollmsElfServer.lollms_paths, InstallOption.NEVER_INSTALL, lollmsCom=lollmsElfServer)
        lollmsElfServer.binding.uninstall()
        ASCIIColors.green("Uninstalled successful")
        if old_bn!=lollmsElfServer.config.binding_name:
            lollmsElfServer.config.binding_name = old_bn
            lollmsElfServer.binding =  BindingBuilder().build_binding(lollmsElfServer.config, lollmsElfServer.lollms_paths, lollmsCom=lollmsElfServer)
            lollmsElfServer.model = lollmsElfServer.binding.build_model()
            for per in lollmsElfServer.mounted_personalities:
                if per is not None:
                    per.model = lollmsElfServer.model
        else:
            lollmsElfServer.config.binding_name = None
        if lollmsElfServer.config.auto_save:
            ASCIIColors.info("Saving configuration")
            lollmsElfServer.config.save_config()
            
        return {"status": True}
    except Exception as ex:
        ASCIIColors.error(f"Couldn't build binding: [{ex}]")
        trace_exception(ex)
        return {"status":False, 'error':str(ex)}     
