def post_process_findings(banner: Optional[Banner], algs: Algorithms, client_audit: bool) -> List[str]:
    '''Perform post-processing on scan results before reporting them to the user.  Returns a list of algorithms that should not be recommended'''


    algorithm_recommendation_suppress_list = []

    # If the server is OpenSSH, and the diffie-hellman-group-exchange-sha256 key exchange was found with modulus size 2048, add a note regarding the bug that causes the server to support 2048-bit moduli no matter the configuration.
    if (algs.ssh2kex is not None and 'diffie-hellman-group-exchange-sha256' in algs.ssh2kex.kex_algorithms and 'diffie-hellman-group-exchange-sha256' in algs.ssh2kex.dh_modulus_sizes() and algs.ssh2kex.dh_modulus_sizes()['diffie-hellman-group-exchange-sha256'] == 2048) and (banner is not None and banner.software is not None and banner.software.find('OpenSSH') != -1):

        # Ensure a list for notes exists.
        db = SSH2_KexDB.get_db()
        while len(db['kex']['diffie-hellman-group-exchange-sha256']) < 4:
            db['kex']['diffie-hellman-group-exchange-sha256'].append([])

        db['kex']['diffie-hellman-group-exchange-sha256'][3].append("A bug in OpenSSH causes it to fall back to a 2048-bit modulus regardless of server configuration (https://bugzilla.mindrot.org/show_bug.cgi?id=2793)")

        # Ensure that this algorithm doesn't appear in the recommendations section since the user cannot control this OpenSSH bug.
        algorithm_recommendation_suppress_list.append('diffie-hellman-group-exchange-sha256')

    # Check for the Terrapin vulnerability (CVE-2023-48795), and mark the vulnerable algorithms.
    if algs.ssh2kex is not None and \
       ((client_audit and 'kex-strict-c-v00@openssh.com' not in algs.ssh2kex.kex_algorithms) or (not client_audit and 'kex-strict-s-v00@openssh.com' not in algs.ssh2kex.kex_algorithms)):  # Strict KEX marker is not present.

        def add_terrapin_warning(db: Dict[str, Dict[str, List[List[Optional[str]]]]], category: str, algorithm_name: str) -> None:
            while len(db[category][algorithm_name]) < 3:
                db[category][algorithm_name].append([])

            db[category][algorithm_name][2].append("vulnerable to the Terrapin attack (CVE-2023-48795), allowing message prefix truncation")

        db = SSH2_KexDB.get_db()

        # Without the strict KEX marker, these algorithms are always vulnerable.
        add_terrapin_warning(db, "enc", "chacha20-poly1305")
        add_terrapin_warning(db, "enc", "chacha20-poly1305@openssh.com")

        cbc_ciphers = []
        etm_macs = []

        # Find the list of CBC ciphers the peer supports.
        ciphers_supported = algs.ssh2kex.client.encryption if client_audit else algs.ssh2kex.server.encryption
        for cipher in ciphers_supported:
            if cipher.endswith("-cbc"):
                cbc_ciphers.append(cipher)

        # Find the list of ETM MACs the peer supports.
        macs_supported = algs.ssh2kex.client.mac if client_audit else algs.ssh2kex.server.mac
        for mac in macs_supported:
            if mac.endswith("-etm@openssh.com"):
                etm_macs.append(mac)

        # If at least one CBC cipher and at least one ETM MAC is supported, mark them all as vulnerable.
        if len(cbc_ciphers) > 0 and len(etm_macs) > 0:
            for cipher in cbc_ciphers:
                add_terrapin_warning(db, "enc", cipher)

            for mac in etm_macs:
                add_terrapin_warning(db, "mac", mac)

    return algorithm_recommendation_suppress_list
