def tableajax(request, plugin_name, data, group_type="all", group_id=None):
    """Table ajax for dataTables"""
    # Pull our variables out of the GET request
    get_data = request.GET["args"]
    get_data = json.loads(get_data)
    draw = get_data.get("draw", 0)
    start = int(get_data.get("start", 0))
    length = int(get_data.get("length", 0))
    search_value = ""
    if "search" in get_data:
        if "value" in get_data["search"]:
            search_value = get_data["search"]["value"]

    # default ordering
    order_column = 2
    order_direction = "desc"
    order_name = ""
    if "order" in get_data:
        order_column = get_data["order"][0]["column"]
        order_direction = get_data["order"][0]["dir"]
    for column in get_data.get("columns", None):
        if column["data"] == order_column:
            order_name = column["name"]
            break

    plugin_object = process_plugin(plugin_name, group_type, group_id)
    queryset = plugin_object.get_queryset(
        request, group_type=group_type, group_id=group_id
    )
    machines, title = plugin_object.filter_machines(queryset, data)
    machines = machines.values("id", "hostname", "console_user", "last_checkin")

    if len(order_name) != 0:
        if order_direction == "desc":
            order_string = "-%s" % order_name
        else:
            order_string = "%s" % order_name

    if len(search_value) != 0:
        hostname_q = Q(hostname__icontains=search_value)
        user_q = Q(console_user__icontains=search_value)
        checkin_q = Q(last_checkin__icontains=search_value)
        searched_machines = machines.filter(hostname_q | user_q | checkin_q).order_by(
            order_string
        )
    else:
        searched_machines = machines.order_by(order_string)

    limited_machines = searched_machines[start : (start + length)]

    return_data = {}
    return_data["title"] = title
    return_data["draw"] = int(draw)
    return_data["recordsTotal"] = machines.count()
    return_data["recordsFiltered"] = return_data["recordsTotal"]

    return_data["data"] = []
    settings_time_zone = None
    try:
        settings_time_zone = pytz.timezone(settings.TIME_ZONE)
    except Exception:
        pass

    for machine in limited_machines:
        if machine["last_checkin"]:
            # formatted_date = pytz.utc.localize(machine.last_checkin)
            if settings_time_zone:
                formatted_date = (
                    machine["last_checkin"]
                    .astimezone(settings_time_zone)
                    .strftime("%Y-%m-%d %H:%M %Z")
                )
            else:
                formatted_date = machine["last_checkin"].strftime("%Y-%m-%d %H:%M")
        else:
            formatted_date = ""
        hostname_link = '<a href="%s">%s</a>' % (
            reverse("machine_detail", args=[machine["id"]]),
            escape(machine["hostname"]),
        )

        list_data = [hostname_link, escape(machine["console_user"]), formatted_date]
        return_data["data"].append(list_data)

    return JsonResponse(return_data)
