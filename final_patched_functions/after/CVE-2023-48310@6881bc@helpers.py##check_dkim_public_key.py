def check_dkim_public_key(domain: str, selectors: list):
    """Looks for a DKIM public key in a DNS field and verifies that it can be used to
    encrypt data."""
    try:
        domain_name(domain)
    except Exception:
        return {"status": False, "statusmessage": "The given domain is invalid!"}
    if len(selectors) == 0:
        # TODO Check to get proper selector or have a database of selectors
        selectors = [
            "selector1",
            "selector2",
            "google",
            "dkim",
            "k1",
            "default",
            "mxvault",
            "mail",
        ]
    for selector in selectors:
        try:
            dns_response = (
                dns.resolver.query(f"{selector}._domainkey.{domain}.", "TXT")
                .response.answer[1]
                .to_text()
            )
            p = re.search(r"p=([\w\d/+]*)", dns_response).group(1)
            key = RSA.importKey(b64decode(p))
            return {"dkim": key.can_encrypt()}
        except Exception:
            continue
    return {"dkim": False}
