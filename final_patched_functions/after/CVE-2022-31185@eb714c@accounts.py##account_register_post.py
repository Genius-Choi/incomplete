async def account_register_post(
    request: Request,
    U: str = Form(default=str()),  # Username
    E: str = Form(default=str()),  # Email
    H: str = Form(default="off"),  # Hide Email
    BE: str = Form(default=None),  # Backup Email
    R: str = Form(default=""),  # Real Name
    HP: str = Form(default=None),  # Homepage
    I: str = Form(default=None),  # IRC Nick # noqa: E741
    K: str = Form(default=None),  # PGP Key
    L: str = Form(default=aurweb.config.get("options", "default_lang")),
    TZ: str = Form(default=aurweb.config.get("options", "default_timezone")),
    PK: str = Form(default=None),  # SSH PubKey
    CN: bool = Form(default=False),
    UN: bool = Form(default=False),
    ON: bool = Form(default=False),
    captcha: str = Form(default=None),
    captcha_salt: str = Form(...),
):
    context = await make_variable_context(request, "Register")
    args = dict(await request.form())

    context = make_account_form_context(context, request, None, args)
    ok, errors = process_account_form(request, request.user, args)
    if not ok:
        # If the field values given do not meet the requirements,
        # return HTTP 400 with an error.
        context["errors"] = errors
        return render_template(
            request, "register.html", context, status_code=HTTPStatus.BAD_REQUEST
        )

    if not captcha:
        context["errors"] = ["The CAPTCHA is missing."]
        return render_template(
            request, "register.html", context, status_code=HTTPStatus.BAD_REQUEST
        )

    # Create a user with no password with a resetkey, then send
    # an email off about it.
    resetkey = generate_resetkey()

    # By default, we grab the User account type to associate with.
    atype = db.query(
        models.AccountType, models.AccountType.AccountType == "User"
    ).first()

    # Check if we should turn on HideEmail.
    if H == "on":
        hide_email = 1
    else:
        hide_email = 0

    # Create a user given all parameters available.
    with db.begin():
        user = db.create(
            models.User,
            Username=U,
            Email=E,
            HideEmail=hide_email,
            BackupEmail=BE,
            RealName=R,
            Homepage=HP,
            IRCNick=I,
            PGPKey=K,
            LangPreference=L,
            Timezone=TZ,
            CommentNotify=CN,
            UpdateNotify=UN,
            OwnershipNotify=ON,
            ResetKey=resetkey,
            AccountType=atype,
        )

    # If a PK was given and either one does not exist or the given
    # PK mismatches the existing user's SSHPubKey.PubKey.
    if PK:
        # Get the second element in the PK, which is the actual key.
        pubkey = PK.strip().rstrip()
        parts = pubkey.split(" ")
        if len(parts) == 3:
            # Remove the host part.
            pubkey = parts[0] + " " + parts[1]
        fingerprint = get_fingerprint(pubkey)
        with db.begin():
            user.ssh_pub_key = models.SSHPubKey(
                UserID=user.ID, PubKey=pubkey, Fingerprint=fingerprint
            )

    # Send a reset key notification to the new user.
    WelcomeNotification(user.ID).send()

    context["complete"] = True
    context["user"] = user
    return render_template(request, "register.html", context)
