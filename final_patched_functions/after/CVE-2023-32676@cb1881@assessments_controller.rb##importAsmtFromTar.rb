  def importAsmtFromTar
    tarFile = params["tarFile"]
    if tarFile.nil?
      flash[:error] = "Please select an assessment tarball for uploading."
      redirect_to(action: "install_assessment")
      return
    end

    begin
      tarFile = File.new(tarFile.open, "rb")
      tar_extract = Gem::Package::TarReader.new(tarFile)
      tar_extract.rewind
      is_valid_tar, asmt_name = valid_asmt_tar(tar_extract)
      tar_extract.close
      unless is_valid_tar
        flash[:error] +=
          "<br>Invalid tarball. A valid assessment tar has a single root "\
          "directory that's named after the assessment, containing an "\
          "assessment yaml file and an assessment ruby file."
        flash[:html_safe] = true
        redirect_to(action: "install_assessment") && return
      end
    rescue SyntaxError => e
      flash[:error] = "Error parsing assessment configuration file:"
      # escape so that <compiled> doesn't get treated as a html tag
      flash[:error] += "<br><pre>#{CGI.escapeHTML e.to_s}</pre>"
      flash[:html_safe] = true
      redirect_to(action: "install_assessment") && return
    rescue StandardError => e
      flash[:error] = "Error while reading the tarball -- #{e.message}."
      redirect_to(action: "install_assessment") && return
    end

    # Check if the assessment already exists.
    unless @course.assessments.find_by(name: asmt_name).nil?
      flash[:error] =
        "An assessment with the same name already exists for the course. "\
        "Please use a different name."
      redirect_to(action: "install_assessment") && return
    end

    # If all requirements are satisfied, extract assessment files.
    begin
      course_root = Rails.root.join("courses", @course.name)
      assessment_path = Rails.root.join("courses", @course.name, asmt_name)
      tar_extract.rewind
      tar_extract.each do |entry|
        relative_pathname = entry.full_name
        entry_file = File.join(course_root, relative_pathname)
        # Ensure file will lie within course, otherwise skip
        next unless Archive.in_dir?(Pathname(entry_file), Pathname(assessment_path))

        if entry.directory?
          FileUtils.mkdir_p(entry_file,
                            mode: entry.header.mode, verbose: false)
        elsif entry.file?
          FileUtils.mkdir_p(File.join(course_root, File.dirname(relative_pathname)),
                            mode: entry.header.mode, verbose: false)
          File.open(entry_file, "wb") do |f|
            f.write entry.read
          end
          FileUtils.chmod entry.header.mode, entry_file,
                          verbose: false
        elsif entry.header.typeflag == "2"
          File.symlink entry.header.linkname, entry_file
        end
      end
      tar_extract.close
    rescue StandardError => e
      flash[:error] = "Error while extracting tarball to server -- #{e.message}."
      redirect_to(action: "install_assessment") && return
    end

    params[:assessment_name] = asmt_name
    importAssessment && return
  end
