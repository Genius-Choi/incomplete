def __handle_failed_login(
    app: Flask, user_exists: bool, username: str, password_policy: dict,
    is_blocked: bool, min_rem: int, mail: Mail, config: dict, ip: str
) -> None:
    """
    When a user login fails, this function is called to update the database
    with the failed login attempt and send an email to the user if necessary.

    Note that this function is called in a separate thread to keep response
    times for login attempts similar in all cases. Therefore, this function
    calls `sys.exit()` to terminate the thread.

    Parameters
    ----------
    app: flask.Flask
        The current Flask app
    user_exists: bool
        Whether user exists or not
    username: str
        Username of the user that failed to login
    password_policy: dict
        Dictionary with password policy settings.
    min_rem: int
        Number of minutes remaining before the account is unlocked
    mail: flask_mail.Mail
        An instance of the Flask mail class. Used to send email to user in case
        of too many failed login attempts.
    config: dict
        Dictionary with configuration settings
    ip: str
        IP address from where the login attempt was made
    """
    if not user_exists:
        sys.exit()
    # get user object again (required because we are in a new thread)
    user = User.get_by_username(username)

    max_failed_attempts = password_policy.get(
        'max_failed_attempts', DEFAULT_MAX_FAILED_ATTEMPTS
    )

    if is_blocked:
        # alert the user via email that they are blocked
        __notify_user_blocked(app, user, min_rem, mail, config, ip)
        sys.exit()
    elif (
        not user.failed_login_attempts or
        user.failed_login_attempts >= max_failed_attempts
    ):
        # set failed login attempts to 1 if first failed login attempt or if
        # user got unblocked after being blocked previously
        user.failed_login_attempts = 1
    else:
        user.failed_login_attempts += 1
    user.last_login_attempt = dt.datetime.now()
    user.save()
    sys.exit()
