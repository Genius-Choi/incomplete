def diff(old, new):
    def compare_objects(obj1, obj2, path=None):
        if path is None:
            path = []
        edits = []

        if obj1 == obj2:
            return edits

        if type(obj1) != type(obj2):
            edits.append(("replace", path, obj2))
            return edits

        if isinstance(obj1, str) and obj2.startswith(obj1):
            edits.append(("append", path, obj2[len(obj1) :]))
            return edits

        if isinstance(obj1, list):
            common_length = min(len(obj1), len(obj2))
            for i in range(common_length):
                edits.extend(compare_objects(obj1[i], obj2[i], path + [i]))
            for i in range(common_length, len(obj1)):
                edits.append(("delete", path + [i], None))
            for i in range(common_length, len(obj2)):
                edits.append(("add", path + [i], obj2[i]))
            return edits

        if isinstance(obj1, dict):
            for key in obj1:
                if key in obj2:
                    edits.extend(compare_objects(obj1[key], obj2[key], path + [key]))
                else:
                    edits.append(("delete", path + [key], None))
            for key in obj2:
                if key not in obj1:
                    edits.append(("add", path + [key], obj2[key]))
            return edits

        edits.append(("replace", path, obj2))
        return edits

    return compare_objects(old, new)
