    def protection_decorator(func: callable, *args, **kwargs) -> callable:
        @wraps(func)
        def decorator(*args, mock_data: list[pd.DataFrame] = None,
                      **kwargs) -> callable:
            """
            Wrap the function with the data

            Parameters
            ----------
            mock_data : list[pd.DataFrame]
                Mock data to use instead of the regular data
            """
            if mock_data is not None:
                return func(*mock_data, *args, **kwargs)

            # read the labels that the user requested
            labels = _get_user_database_labels()

            # check if user provided enough databases
            if len(labels) < number_of_databases:
                error(f"Algorithm requires {number_of_databases} databases "
                      f"but only {len(labels)} were provided. "
                      "Exiting...")
                exit(1)
            elif len(labels) > number_of_databases:
                warn(f"Algorithm requires only {number_of_databases} databases"
                     f", but {len(labels)} were provided. Using the "
                     f"first {number_of_databases} databases.")

            for i in range(number_of_databases):
                label = labels[i]
                # read the data from the database
                info("Reading data from database")
                data_ = _get_data_from_label(label)

                # do any data preprocessing here
                info(f"Applying preprocessing for database '{label}'")
                env_prepro = get_env_var(f"{label.upper()}_PREPROCESSING")
                if env_prepro is not None:
                    preprocess = json.loads(env_prepro)
                    data_ = preprocess_data(data_, preprocess)

                # add the data to the arguments
                args = (data_, *args)

            return func(*args, **kwargs)
        # set attribute that this function is wrapped in a data decorator
        decorator.wrapped_in_data_decorator = True
        return decorator
