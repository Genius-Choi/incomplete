def validate_grub_remote_file(value: str) -> bool:
    """
    This validates if the passed value is a valid value for ``remote_grub_{kernel,initrd}``.

    :param value: Must be a valid grub formatted URI starting with http or tftp. ftp is not supported and thus invalid.
    :return: False in any case. If value is valid, ``True`` is returned.
    """
    if not isinstance(value, str):
        return False
    # Format: "(%s,%s)/%s" % (prot, server, path)
    grub_match_result = RE_URL_GRUB.match(value)
    success = False
    if grub_match_result:
        # grub_match_result.group("protocol") -> No further processing needing if the match is there.
        server = grub_match_result.group("server")
        # FIXME: Disallow invalid port specifications in the URL
        success_server_ip = (netaddr.valid_ipv4(server) or netaddr.valid_ipv6(server))
        # FIXME: Disallow invalid URLs (e.g.: underscore in URL)
        success_server_name = urlparse("https://%s" % server).netloc == server
        path = grub_match_result.group("path")
        success_path = urlparse("https://fake.local/%s" % path).path[1:] == path
        success = (success_server_ip or success_server_name) and success_path
    return success
