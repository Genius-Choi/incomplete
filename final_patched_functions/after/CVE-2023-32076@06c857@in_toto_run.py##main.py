def main():
    """Parse arguments, load key from disk (prompts for password if key is
    encrypted) and call in_toto_run."""
    parser = create_parser()
    args = parser.parse_args()

    LOG.setLevelVerboseOrQuiet(args.verbose, args.quiet)

    # Regular signing and GPG signing are mutually exclusive
    if (args.key is None) == (args.gpg is None):
        parser.print_usage()
        parser.error("Specify either '--key <key path>' or '--gpg [<keyid>]'")

    password, prompt = parse_password_and_prompt_args(args)

    # If `--gpg` was set without argument it has the value `True` and
    # we will try to sign with the default key
    gpg_use_default = args.gpg is True

    # Otherwise we interpret it as actual keyid
    gpg_keyid = None
    if args.gpg is not True:
        gpg_keyid = args.gpg

    # If no_command is specified run in_toto_run without executing a command
    if args.no_command:
        args.link_cmd = []

    elif not args.link_cmd:  # pragma: no branch
        parser.print_usage()
        parser.error(
            "No command specified."
            " Please specify (or use the --no-command option)"
        )

    try:
        # We load the key here because it might prompt the user for a password in
        # case the key is encrypted. Something that should not happen in the lib.
        key = None
        if args.key:
            key = interface.import_privatekey_from_file(
                args.key,
                key_type=args.key_type,
                password=password,
                prompt=prompt,
            )

        runlib.in_toto_run(
            args.step_name,
            args.materials,
            args.products,
            args.link_cmd,
            record_streams=args.record_streams,
            signing_key=key,
            gpg_keyid=gpg_keyid,
            gpg_use_default=gpg_use_default,
            gpg_home=args.gpg_home,
            exclude_patterns=args.exclude_patterns,
            base_path=args.base_path,
            lstrip_paths=args.lstrip_paths,
            metadata_directory=args.metadata_directory,
            use_dsse=args.use_dsse,
        )

    except Exception as e:
        LOG.error("(in-toto-run) {0}: {1}".format(type(e).__name__, e))
        sys.exit(1)

    sys.exit(0)
