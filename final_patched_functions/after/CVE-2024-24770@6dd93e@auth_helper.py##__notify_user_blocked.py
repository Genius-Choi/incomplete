def __notify_user_blocked(
    app: Flask, user: User, min_rem: int, mail: Mail, config: dict, ip: str
) -> None:
    """
    Sends an email to the user when their account is locked.

    This function also checks that emails are not sent too often to the same
    user.

    Parameters
    ----------
    app: flask.Flask
        The current Flask app
    user: :class:`~vantage6.server.model.user.User`
        User who is temporarily blocked
    min_rem: int
        Number of minutes remaining before the account is unlocked
    mail: flask_mail.Mail
        An instance of the Flask mail class. Used to send email to user in case
        of too many failed login attempts.
    config: dict
        Dictionary with configuration settings
    ip: str
        IP address from where the login attempt was made
    """
    log.info("User %s is locked. Sending them an email.", user.username)

    # check that email has not already been sent recently
    password_policy = config.get("password_policy", {})
    minutes_between_blocked_emails = password_policy.get(
        "between_user_emails_minutes",
        DEFAULT_BETWEEN_USER_EMAILS_MINUTES,
    )
    email_sent_recently = user.last_email_failed_login_sent and (
        dt.datetime.now()
        < user.last_email_failed_login_sent
        + dt.timedelta(minutes=minutes_between_blocked_emails)
    )
    if email_sent_recently:
        return

    # send email
    smtp_settings = config.get("smtp", {})
    email_from = smtp_settings.get("email_from", DEFAULT_EMAIL_FROM_ADDRESS)
    support_email = config.get("support_email", DEFAULT_SUPPORT_EMAIL_ADDRESS)

    max_failed_attempts = password_policy.get(
        "max_failed_attempts", DEFAULT_MAX_FAILED_ATTEMPTS
    )
    template_vars = {
        "firstname": user.firstname if user.firstname else user.username,
        "number_of_allowed_attempts": max_failed_attempts,
        "ip": ip,
        "time": dt.datetime.now(dt.timezone.utc),
        "time_remaining": min_rem,
        "support_email": support_email,
    }

    with app.app_context():
        mail.send_email(
            "Failed login attempts on your vantage6 account",
            sender=email_from,
            recipients=[user.email],
            text_body=render_template("mail/blocked_account.txt", **template_vars),
            html_body=render_template("mail/blocked_account.html", **template_vars),
        )

    # Update latest email sent timestamp
    user.last_email_failed_login_sent = dt.datetime.now()
    user.save()
