def move_files_to_cache(
    data: Any,
    block: Component,
    postprocess: bool = False,
    add_urls=False,
) -> dict:
    """Move any files in `data` to cache and (optionally), adds URL prefixes (/file=...) needed to access the cached file.
    Also handles the case where the file is on an external Gradio app (/proxy=...).

    Runs after .postprocess() and before .preprocess().

    Args:
        data: The input or output data for a component. Can be a dictionary or a dataclass
        block: The component whose data is being processed
        postprocess: Whether its running from postprocessing
        root_url: The root URL of the local server, if applicable
    """

    def _move_to_cache(d: dict):
        payload = FileData(**d)
        # If the gradio app developer is returning a URL from
        # postprocess, it means the component can display a URL
        # without it being served from the gradio server
        # This makes it so that the URL is not downloaded and speeds up event processing
        if payload.url and postprocess:
            temp_file_path = payload.url
        else:
            temp_file_path = move_resource_to_block_cache(payload.path, block)
        assert temp_file_path is not None
        payload.path = temp_file_path

        if add_urls:
            url_prefix = "/stream/" if payload.is_stream else "/file="
            if block.proxy_url:
                url = f"/proxy={block.proxy_url}{url_prefix}{temp_file_path}"
            elif client_utils.is_http_url_like(
                temp_file_path
            ) or temp_file_path.startswith(f"{url_prefix}"):
                url = temp_file_path
            else:
                url = f"{url_prefix}{temp_file_path}"
            payload.url = url

        return payload.model_dump()

    if isinstance(data, (GradioRootModel, GradioModel)):
        data = data.model_dump()

    return client_utils.traverse(data, _move_to_cache, client_utils.is_file_obj)
