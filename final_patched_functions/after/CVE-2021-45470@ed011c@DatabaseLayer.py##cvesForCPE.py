def cvesForCPE(cpe, lax=False, vulnProdSearch=False, limit=0, strict_vendor_product=False):
    if not cpe:
        return []

    cpe_regex = cpe
    final_cves = []
    cpe_searchField = (
        "vulnerable_product" if vulnProdSearch else "vulnerable_configuration"
    )

    if lax:
        # get target version from product description provided by the user
        target_version = cpe.split(":")[-1]
        product = cpe.rsplit(":", 1)[0]
        # perform checks on the target version
        if None is target_version or [] is target_version:
            print(
                "Error, target version not found at the end of product description '{}'".format(
                    cpe
                )
            )
            sys.exit(-1)
        for i in target_version.split("."):
            try:
                int(i)
            except:
                print(
                    "Error, target version should be of the form '1.2.3'. Current form is '{}'".format(
                        target_version
                    )
                )
                sys.exit(-1)

        # over-approximate versions
        cpe_regex = product

        if limit != 0:
            if mongo_version > [4, 4]:
                cves = (
                    colCVE.find({cpe_searchField: {"$regex": cpe_regex}})
                    .limit(limit)
                    .sort(
                        [("Modified", pymongo.DESCENDING), ("cvss", pymongo.DESCENDING)]
                    )
                    .allow_disk_use(True)
                )
            else:
                cves = (
                    colCVE.find({cpe_searchField: {"$regex": cpe_regex}})
                    .limit(limit)
                    .sort(
                        [("Modified", pymongo.DESCENDING), ("cvss", pymongo.DESCENDING)]
                    )
                )
        else:
            if mongo_version > [4, 4]:
                cves = (
                    colCVE.find({cpe_searchField: {"$regex": cpe_regex}})
                    .sort("Modified", direction=pymongo.DESCENDING)
                    .allow_disk_use(True)
                )
            else:
                cves = colCVE.find({cpe_searchField: {"$regex": cpe_regex}}).sort(
                    "Modified", direction=pymongo.DESCENDING
                )

        i = 0

        for cve in cves:
            vuln_confs = cve["vulnerable_configuration"]
            vuln_confs += cve["vulnerable_configuration_cpe_2_2"]
            vuln_confs += cve["vulnerable_product"]
            i += 1
            for vc in vuln_confs:
                if cpe_regex not in vc:
                    continue

                re_from_start = re.compile("^.*{}:".format(re.escape(cpe_regex)))
                cpe_version = re_from_start.sub("", vc)

                # TODO: handle versions such as "1.1.3:p2"
                cpe_version = cpe_version.split(":")[0]

                # TODO: handle versions such as "1.1.3p2"
                cpe_version = re.search(r"([0-9\.]*)", cpe_version).group(0)
                if len(cpe_version) == 0:
                    # TODO: print warnings
                    # print ("Warning, missing cpe version for {}: '{}'. Skipping cpe.".format(cve["id"], vc))
                    continue
                if target_version_is_included(target_version, cpe_version):
                    final_cves.append(cve)
                    break
    elif strict_vendor_product:
        # strict product search

        vendor, product = cpe

        cpe_regex_string = r"^{}".format(re.escape(product))

        if limit != 0:
            if mongo_version > [4, 4]:
                cves = (
                    colCVE.find({"vendors": vendor, "products": {"$regex": cpe_regex_string}})
                    .limit(limit)
                    .sort("cvss", direction=pymongo.DESCENDING)
                    .allow_disk_use(True)
                )
            else:
                cves = (
                    colCVE.find({"vendors": vendor, "products": {"$regex": cpe_regex_string}})
                    .limit(limit)
                    .sort("cvss", direction=pymongo.DESCENDING)
                )
        else:
            cves = colCVE.find({"vendors": vendor, "products": {"$regex": cpe_regex_string}})

        final_cves = cves

    else:
        # create strict cpe regex

        if cpe_regex.startswith("cpe"):
            # strict search with term starting with cpe; e.g: cpe:2.3:o:microsoft:windows_7:*:sp1:*:*:*:*:*:*

            remove_trailing_regex_stars = r"(?:\:|\:\:|\:\*)+$"

            cpe_regex = re.escape(re.sub(remove_trailing_regex_stars, "", cpe_regex))

            cpe_regex_string = r"^{}:".format(cpe_regex)
        else:
            # more general search on same field; e.g. microsoft:windows_7
            cpe_regex_string = "{}".format(re.escape(cpe_regex))

        # default strict search
        if limit != 0:
            if mongo_version > [4, 4]:
                cves = (
                    colCVE.find({"{}".format(cpe_searchField): {"$regex": cpe_regex_string}})
                    .limit(limit)
                    .sort("cvss", direction=pymongo.DESCENDING)
                    .allow_disk_use(True)
                )
            else:
                cves = (
                    colCVE.find({"{}".format(cpe_searchField): {"$regex": cpe_regex_string}})
                    .limit(limit)
                    .sort("cvss", direction=pymongo.DESCENDING)
                )
        else:
            cves = colCVE.find({"{}".format(cpe_searchField): {"$regex": cpe_regex_string}})

        final_cves = cves

    final_cves = sanitize(final_cves)
    return {"results": final_cves, "total": len(final_cves)}
