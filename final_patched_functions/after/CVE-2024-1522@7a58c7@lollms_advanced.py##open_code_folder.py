async def open_code_folder(request: Request):
    """
    Opens code folder.

    :param request: The HTTP request object.
    :return: A JSON response with the status of the operation.
    """

    try:
        data = (await request.json())
        if "discussion_id" in data:
            discussion_id = int(data.get("discussion_id", "unknown_discussion"))

            ASCIIColors.info("Opening folder:")
            # Create a temporary file.
            root_folder = lollmsElfServer.lollms_paths.personal_outputs_path / "discussions" / f"d_{discussion_id}"
            root_folder.mkdir(parents=True, exist_ok=True)
            if platform.system() == 'Windows':
                os.startfile(str(root_folder))
            elif platform.system() == 'Linux':
                os.system('xdg-open ' + str(root_folder))
            elif platform.system() == 'Darwin':
                os.system('open ' + str(root_folder))
            return {"status": True, "execution_time": 0}
        elif "folder_path" in data:
            folder_path = os.path.realpath(data["folder_path"])
            # Verify that this is a file and not an executable
            root_folder = Path(folder_path)
            is_valid_folder_path = root_folder.is_dir()

            if not is_valid_folder_path:
                return {"status":False, "error":"Invalid folder path"}

            ASCIIColors.info("Opening folder:")
            # Create a temporary file.
            root_folder.mkdir(parents=True, exist_ok=True)
            if platform.system() == 'Windows':
                os.startfile(str(root_folder))
            elif platform.system() == 'Linux':
                os.system('xdg-open ' + str(root_folder))
            elif platform.system() == 'Darwin':
                os.system('open ' + str(root_folder))
            return {"status": True, "execution_time": 0}

    except Exception as ex:
        trace_exception(ex)
        lollmsElfServer.error(ex)
        return {"status": False, "error": str(ex)}
