async def test_token_url_cookie(app, user, full_spawn, accept_token_in_url):
    if accept_token_in_url:
        user.spawner.environment["JUPYTERHUB_ALLOW_TOKEN_IN_URL"] = accept_token_in_url
    should_accept = accept_token_in_url != "0"

    await user.spawn()
    await app.proxy.add_user(user)

    token = user.new_api_token(scopes=["access:servers!user"])
    url = url_path_join(public_url(app, user), user.spawner.default_url or "/tree/")

    # first request: auth with token in URL
    s = AsyncSession()
    r = await s.get(url + f"?token={token}", allow_redirects=False)
    print(r.url, r.status_code)
    if not should_accept:
        assert r.status_code == 302
        return

    assert r.status_code == 200
    assert s.cookies
    # second request, use cookies set by first response,
    # no token in URL
    r = await s.get(url, allow_redirects=False)
    assert r.status_code == 200
    await user.stop()
