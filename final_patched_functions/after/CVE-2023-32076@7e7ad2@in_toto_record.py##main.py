def main():
    """Parse arguments, load key from disk (if passed) and call
    either runlib.in_toto_record_start or runlib.in_toto_record_stop depending
    on the specified subcommand."""

    parser = create_parser()
    args = parser.parse_args()

    LOG.setLevelVerboseOrQuiet(args.verbose, args.quiet)

    # Regular signing and GPG signing are mutually exclusive
    if (args.key is None) == (args.gpg is None):
        parser.print_usage()
        parser.error("Specify either '--key <key path>' or '--gpg [<keyid>]'")

    password, prompt = parse_password_and_prompt_args(args)

    # If `--gpg` was set without argument it has the value `True` and
    # we will try to sign with the default key
    gpg_use_default = args.gpg is True

    # Otherwise gpg_keyid stays either None or gets the passed argument assigned
    gpg_keyid = None
    if not gpg_use_default and args.gpg:
        gpg_keyid = args.gpg

    try:
        # We load the key here because it might prompt the user for a password in
        # case the key is encrypted. Something that should not happen in the lib.
        key = None
        if args.key:
            key = interface.import_privatekey_from_file(
                args.key,
                key_type=args.key_type,
                password=password,
                prompt=prompt,
            )

        if args.command == "start":
            in_toto.runlib.in_toto_record_start(
                args.step_name,
                args.materials,
                signing_key=key,
                gpg_keyid=gpg_keyid,
                gpg_use_default=gpg_use_default,
                gpg_home=args.gpg_home,
                exclude_patterns=args.exclude_patterns,
                base_path=args.base_path,
                lstrip_paths=args.lstrip_paths,
                use_dsse=args.use_dsse,
            )

        # Mutually exclusiveness is guaranteed by argparser
        else:  # args.command == "stop":
            in_toto.runlib.in_toto_record_stop(
                args.step_name,
                args.products,
                signing_key=key,
                gpg_keyid=gpg_keyid,
                gpg_use_default=gpg_use_default,
                gpg_home=args.gpg_home,
                exclude_patterns=args.exclude_patterns,
                base_path=args.base_path,
                lstrip_paths=args.lstrip_paths,
                metadata_directory=args.metadata_directory,
            )

    except Exception as e:
        LOG.error(
            "(in-toto-record {0}) {1}: {2}".format(
                args.command, type(e).__name__, e
            )
        )
        sys.exit(1)

    sys.exit(0)
