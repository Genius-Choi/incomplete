        async def queue_data(
            request: fastapi.Request,
            session_hash: str,
        ):
            blocks = app.get_blocks()

            async def sse_stream(request: fastapi.Request):
                try:
                    last_heartbeat = time.perf_counter()
                    while True:
                        if await request.is_disconnected():
                            await blocks._queue.clean_events(session_hash=session_hash)
                            return

                        if (
                            session_hash
                            not in blocks._queue.pending_messages_per_session
                        ):
                            raise HTTPException(
                                status_code=status.HTTP_404_NOT_FOUND,
                                detail="Session not found.",
                            )

                        heartbeat_rate = 15
                        check_rate = 0.05
                        message = None
                        try:
                            messages = blocks._queue.pending_messages_per_session[
                                session_hash
                            ]
                            message = messages.get_nowait()
                        except EmptyQueue:
                            await asyncio.sleep(check_rate)
                            if time.perf_counter() - last_heartbeat > heartbeat_rate:
                                message = {"msg": "heartbeat"}
                                # Need to reset last_heartbeat with perf_counter
                                # otherwise only a single hearbeat msg will be sent
                                # and then the stream will retry leading to infinite queue ðŸ˜¬
                                last_heartbeat = time.perf_counter()

                        if blocks._queue.stopped:
                            message = {"msg": "server_stopped", "success": False}
                        if message:
                            yield f"data: {json.dumps(message)}\n\n"
                            if message["msg"] == "process_completed":
                                blocks._queue.pending_event_ids_session[
                                    session_hash
                                ].remove(message["event_id"])
                                if message["msg"] == "server_stopped" or (
                                    message["msg"] == "process_completed"
                                    and (
                                        len(
                                            blocks._queue.pending_event_ids_session[
                                                session_hash
                                            ]
                                        )
                                        == 0
                                    )
                                ):
                                    return
                except asyncio.CancelledError as e:
                    del blocks._queue.pending_messages_per_session[session_hash]
                    await blocks._queue.clean_events(session_hash=session_hash)
                    raise e

            return StreamingResponse(
                sse_stream(request),
                media_type="text/event-stream",
            )
