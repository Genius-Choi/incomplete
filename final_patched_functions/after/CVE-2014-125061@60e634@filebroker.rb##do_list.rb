  def do_list(soap_body)
    begin
      prefix = soap_body.root.namespace.prefix

      req = {}
      req['protocol'] = soap_body.xpath("//#{prefix}:Protocol/text()").to_s.downcase
      req['address'] 	= soap_body.xpath("//#{prefix}:Address/text()").to_s
      req['port'] 		= soap_body.xpath("//#{prefix}:Port/text()").to_s
      req['login'] 		= soap_body.xpath("//#{prefix}:Login/text()").to_s
      req['password'] = soap_body.xpath("//#{prefix}:Password/text()").to_s
      req['path'] 		= soap_body.xpath("//#{prefix}:Path/text()").to_s
      req['filter_out_transferred'] = soap_body.xpath("//#{prefix}:FilterOutTransferred/text()").to_s

      begin
        source = @db.select_account(req)
      rescue Database::AccountNotExist
        source = @db.insert_account(req)
      end

      list = []
      if req['protocol'] == 'cifs'
        conn = Connector::CIFS.new
        conn.address 	= req['address']
        conn.login 		= req['login']
        conn.password = req['password']
        conn.share 	  = req['path'].split('/')[1]
        conn.connect
        conn.cd(req['path'])
        list = conn.list(req['path'])
        conn.disconnect
      elsif req['protocol'] == 'ftp'
        conn = Connector::FTP.new
        conn.address 	= req['address']
        conn.port 		= req['port']
        conn.login 		= req['login']
        conn.password = req['password']
        conn.connect
        list = conn.list(req['path'])
        conn.disconnect
      elsif req['protocol'] == 'sftp'
        conn = Connector::SFTP.new
        conn.address 	= req['address']
        conn.port 		= req['port']
        conn.login 		= req['login']
        conn.password = req['password']
        conn.connect
        list = conn.list(req['path'])
        conn.disconnect
      end

      # Convert time format
      list.map { |j| j['mtime'] = DateTime.parse(j['mtime']) }

      # Remove currently transferring files
      @db.select_running_transfers_by_source(FBService::TRANSFER_RUNNING, source['account_id'], source['path']).each { |i|
        @db.select_transfer_files(i['transfer_id']).each { |j|
          list.delete_if { |k| k['name'] == j['filename'] }
        }
      }

      # Remove already transferred files - optional depends on FilterOutTransferred option
      if source['filter_out_transferred'] == 'true'
        list.delete_if { |k| 
          @db.select_files_by_transfer_status(FBService::TRANSFER_COMPLETED_SUCCESSFULLY, source['account_id'], source['path'], k['name']).ntuples() > 0
        }
      end

      # Remove temporary files
      list.delete_if { |j| j['name'] =~ /\.partial$/ }

      builder(:list_response, :locals => { :list => list })
    rescue
      err_msg = "#{$!.backtrace.join("\n")}\n#{$!.message}\n"
      @stderr_mutex.try_lock
      80.times { STDERR.print '-' }
      STDERR.puts
      STDERR.puts "Exception time: #{DateTime.parse(Time.now.to_s)}"
      STDERR.puts err_msg
      80.times { STDERR.print '-' }
      STDERR.puts
      @stderr_mutex.unlock

      builder(:fault, :locals => { :fault_string => 'failed to list directory', :fault_code => 'Server' })
    end
  end
