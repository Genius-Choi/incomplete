Status SpectrogramShapeFn(InferenceContext* c) {
  ShapeHandle input;
  TF_RETURN_IF_ERROR(c->WithRank(c->input(0), 2, &input));
  int32_t window_size;
  TF_RETURN_IF_ERROR(c->GetAttr("window_size", &window_size));
  if (window_size <= 1) {
    return errors::InvalidArgument("window size must be > 1, got ",
                                   window_size);
  }

  int32_t stride;
  TF_RETURN_IF_ERROR(c->GetAttr("stride", &stride));
  if (stride <= 0) {
    return errors::InvalidArgument("stride must be strictly positive, got ",
                                   stride);
  }

  DimensionHandle input_length = c->Dim(input, 0);
  DimensionHandle input_channels = c->Dim(input, 1);

  DimensionHandle output_length;
  if (!c->ValueKnown(input_length)) {
    output_length = c->UnknownDim();
  } else {
    const int64_t input_length_value = c->Value(input_length);
    const int64_t length_minus_window = (input_length_value - window_size);
    int64_t output_length_value;
    if (length_minus_window < 0) {
      output_length_value = 0;
    } else {
      output_length_value = 1 + (length_minus_window / stride);
    }
    output_length = c->MakeDim(output_length_value);
  }

  DimensionHandle output_channels =
      c->MakeDim(1 + NextPowerOfTwo(window_size) / 2);
  c->set_output(0,
                c->MakeShape({input_channels, output_length, output_channels}));
  return OkStatus();
}
