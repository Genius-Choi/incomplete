int calc_secret_share(const char* decrypted_coeffs, char * s_share,
                        unsigned _t, unsigned _n, unsigned ind) {

  libff::init_alt_bn128_params();
  char symbol = ':';
  vector<libff::alt_bn128_Fr> poly =  SplitStringToFr(decrypted_coeffs, symbol);
  if ( poly.size() != _t){
    return 1;
  }

  libff::alt_bn128_Fr secret_share = PolynomialValue(poly, libff::alt_bn128_Fr(ind), _t);
  string cur_share = ConvertToString(secret_share, 16);
  int n_zeroes = 64 - cur_share.size();
  cur_share.insert(0, n_zeroes, '0');

  strncpy(s_share, cur_share.c_str(), cur_share.length() + 1);
  return 0;

}
