    def applyAttributes(mjml_element):
        if len(mjml_element) == 0:
            return {}
        def parse(_mjml, parentMjClass='', *, template_dir):
            tagName = _mjml.name
            is_comment = not isinstance(tagName, str)
            if is_comment:
                # XML comment: <cyfunction Comment at 0xâ€¦>
                # (this needs to be extended when "keepComments" should be implemented)
                return None
            attributes = _mjml.attrs
            children = [child for child in _mjml]
            classes = ignore_empty(attributes.get('mj-class', '').split(' '))

            # upstream parses text contents (+ comments) in mjml-parser-xml/index.js
            content = _mjml.decode_contents(formatter=None)

            attributesClasses = {}
            for css_class in classes:
                mjClassValues = globalDatas.classes.get(css_class)
                if mjClassValues:
                    attributesClasses.update(mjClassValues)

            parent_mj_classes = ignore_empty(parentMjClass.split(' '))
            def default_attr_classes(value):
                return globalDatas.classesDefault.get(value, {}).get(tagName, {})
            defaultAttributesForClasses = merge_dicts(*map(default_attr_classes, parent_mj_classes))
            nextParentMjClass = attributes.get('mj-class', parentMjClass)

            _attrs_omit = omit(attributes, 'mj-class')
            _returned_attributes = merge_dicts(
                globalDatas.defaultAttributes.get(tagName, {}),
                attributesClasses,
                defaultAttributesForClasses,
                _attrs_omit,
            )

            if tagName == 'mj-include':
                mj_include_subtree = handle_include(attributes['path'],
                                                    parse_mjml=parse,
                                                    template_dir=template_dir)
                return mj_include_subtree
            result = {
                'tagName': tagName,
                'content': content,
                'attributes': _returned_attributes,
                'globalAttributes': globalDatas.defaultAttributes.get('mj-all', {}).copy(),
                'children': [], # will be set afterwards
            }
            _parse_mjml = lambda mjml: parse(mjml, nextParentMjClass, template_dir=template_dir)
            for child_result in _map_to_tuple(children, _parse_mjml, filter_none=True):
                if isinstance(child_result, (tuple, list)):
                    result['children'].extend(child_result)
                else:
                    result['children'].append(child_result)
            return result

        return parse(mjml_element, template_dir=template_dir)
