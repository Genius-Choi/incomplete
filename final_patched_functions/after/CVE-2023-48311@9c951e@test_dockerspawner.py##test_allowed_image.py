async def test_allowed_image(
    user, dockerspawner_configured_app, allowed_images, image, ok
):
    app = dockerspawner_configured_app
    name = user.name
    assert isinstance(user.spawner, DockerSpawner)
    default_image = user.spawner.image  # default value
    if image == "DEFAULT":
        image = default_image
    user.spawner.remove_containers = True
    if allowed_images is not None:
        user.spawner.allowed_images = allowed_images

    if image:
        request_body = json.dumps({"image": image})
    else:
        request_body = b""
    # start the server
    r = await api_request(
        app,
        "users",
        name,
        "server",
        method="post",
        data=request_body,
    )

    if not ok:
        assert r.status_code == 400
        return
    else:
        r.raise_for_status()

    pending = r.status_code == 202
    while pending:
        # request again
        await asyncio.sleep(1)
        r = await api_request(app, "users", name)
        user_info = r.json()
        pending = user_info["servers"][""]["pending"]

    if image is None:
        expected_image = default_image
    elif isinstance(allowed_images, (list, dict)):
        expected_image = user.spawner._get_allowed_images()[image]
    else:
        expected_image = image

    assert user.spawner.image == expected_image
    obj = await user.spawner.get_object()
    assert obj["Config"]["Image"] == expected_image

    r = await api_request(
        app,
        "users",
        name,
        "server",
        method="delete",
    )
    r.raise_for_status()
