SecureListenSocket::accept()
{
    SecureSocket* socket = NULL;
    try {
        socket = new SecureSocket(m_events, m_socketMultiplexer,
                                  ARCH->acceptSocket(m_socket, NULL), security_level_);
        socket->initSsl(true);

        if (socket != NULL) {
            setListeningJob();
        }

        bool loaded = socket->load_certificates(barrier::DataDirectories::ssl_certificate_path());
        if (!loaded) {
            delete socket;
            return NULL;
        }

        socket->secureAccept();

        return dynamic_cast<IDataSocket*>(socket);
    }
    catch (XArchNetwork&) {
        if (socket != NULL) {
            delete socket;
            setListeningJob();
        }
        return NULL;
    }
    catch (std::exception &ex) {
        if (socket != NULL) {
            delete socket;
            setListeningJob();
        }
        throw ex;
    }
}
