def _wrap_with_jail_check(func: GetPathMethod) -> GetPathMethod:
    """Wraps a path-returning method to check that the returned path(s) do not escape
    the media store directory.

    The check is not expected to ever fail, unless `func` is missing a call to
    `_validate_path_component`, or `_validate_path_component` is buggy.

    Args:
        func: The `MediaFilePaths` method to wrap. The method may return either a single
            path, or a list of paths. Returned paths may be either absolute or relative.

    Returns:
        The method, wrapped with a check to ensure that the returned path(s) lie within
        the media store directory. Raises a `ValueError` if the check fails.
    """

    @functools.wraps(func)
    def _wrapped(
        self: "MediaFilePaths", *args: Any, **kwargs: Any
    ) -> Union[str, List[str]]:
        path_or_paths = func(self, *args, **kwargs)

        if isinstance(path_or_paths, list):
            paths_to_check = path_or_paths
        else:
            paths_to_check = [path_or_paths]

        for path in paths_to_check:
            # path may be an absolute or relative path, depending on the method being
            # wrapped. When "appending" an absolute path, `os.path.join` discards the
            # previous path, which is desired here.
            normalized_path = os.path.normpath(os.path.join(self.real_base_path, path))
            if (
                os.path.commonpath([normalized_path, self.real_base_path])
                != self.real_base_path
            ):
                raise ValueError(f"Invalid media store path: {path!r}")

        return path_or_paths

    return cast(GetPathMethod, _wrapped)
