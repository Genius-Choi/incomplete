  def silence
    reason = params[:reason]

    if reason && (!reason.is_a?(String) || reason.size > 300)
      raise Discourse::InvalidParameters.new(:reason)
    end

    if @user.silenced?
      silenced_record = @user.silenced_record
      message =
        I18n.t(
          "user.already_silenced",
          staff: silenced_record.acting_user.username,
          time_ago:
            AgeWords.time_ago_in_words(
              silenced_record.created_at,
              true,
              scope: :"datetime.distance_in_words_verbose",
            ),
        )
      return render json: failed_json.merge(message: message), status: 409
    end

    all_users = [@user]
    if Array === params[:other_user_ids]
      if params[:other_user_ids].size > MAX_SIMILAR_USERS
        raise Discourse::InvalidParameters.new(:other_user_ids)
      end

      all_users.concat(User.where(id: params[:other_user_ids]).to_a)
      all_users.uniq!
    end

    user_history = nil

    all_users.each do |user|
      raise Discourse::InvalidAccess.new if !guardian.can_silence_user?(user)
    end

    all_users.each do |user|
      silencer =
        UserSilencer.new(
          user,
          current_user,
          silenced_till: params[:silenced_till],
          reason: params[:reason],
          message_body: params[:message],
          keep_posts: true,
          post_id: params[:post_id],
        )

      if silencer.silence
        user_history = silencer.user_history
        Jobs.enqueue(
          :critical_user_email,
          type: "account_silenced",
          user_id: user.id,
          user_history_id: user_history.id,
        )
      end
    end

    perform_post_action

    render_json_dump(
      silence: {
        silenced: true,
        silence_reason: user_history.try(:details),
        silenced_till: @user.silenced_till,
        silenced_at: @user.silenced_at,
        silenced_by: BasicUserSerializer.new(current_user, root: false).as_json,
      },
    )
  end
