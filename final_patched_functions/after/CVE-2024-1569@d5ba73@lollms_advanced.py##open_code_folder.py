async def open_code_folder(request: FolderRequest):
    """
    Opens code folder.

    :param request: The HTTP request object.
    :return: A JSON response with the status of the operation.
    """
    if lollmsElfServer.config.headless_server_mode:
        return {"status":False,"error":"Open code folder is blocked when in headless mode for obvious security reasons!"}

    if lollmsElfServer.config.host=="0.0.0.0":
        return {"status":False,"error":"Open code folder is blocked when the server is exposed outside for very obvious reasons!"}
    
    try:
        if request.discussion_id:
            discussion_id = request.discussion_id

            ASCIIColors.info("Opening folder:")
            # Create a temporary file.
            root_folder = lollmsElfServer.lollms_paths.personal_outputs_path / "discussions" / f"d_{discussion_id}"
            root_folder.mkdir(parents=True, exist_ok=True)
            if platform.system() == 'Windows':
                subprocess.run(['start', str(root_folder)], check=True)
            elif platform.system() == 'Linux':
                subprocess.run(['xdg-open', str(root_folder)], check=True)
            elif platform.system() == 'Darwin':
                subprocess.run(['open', str(root_folder)], check=True)
            return {"status": True, "execution_time": 0}
        elif request.folder_path:
            folder_path = os.path.realpath(request.folder_path)
            # Verify that this is a file and not an executable
            root_folder = Path(folder_path)
            is_valid_folder_path = root_folder.is_dir()

            if not is_valid_folder_path:
                return {"status":False, "error":"Invalid folder path"}

            ASCIIColors.info("Opening folder:")
            # Create a temporary file.
            root_folder.mkdir(parents=True, exist_ok=True)
            if platform.system() == 'Windows':
                subprocess.run(['start', str(root_folder)], check=True)
            elif platform.system() == 'Linux':
                subprocess.run(['xdg-open', str(root_folder)], check=True)
            elif platform.system() == 'Darwin':
                subprocess.run(['open', str(root_folder)], check=True)
            return {"status": True, "execution_time": 0}

    except Exception as ex:
        trace_exception(ex)
        lollmsElfServer.error(ex)
        return {"status": False, "error": "An error occurred while processing the request"}
