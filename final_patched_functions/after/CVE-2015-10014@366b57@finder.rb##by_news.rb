  def by_news
    return nil if @q.strip[0..4] != 'news:' || (@location = Geocoder.search(@q.gsub('news:', '').strip).first).nil?
    
    bounds_ne = @location.geometry['bounds']['northeast']
    bounds_sw = @location.geometry['bounds']['southwest']
    @location_radius = (distance_between_points([bounds_ne['lat'], bounds_ne['lng']], [bounds_sw['lat'], bounds_sw['lng']])/1000).round(0)
    
    sql = <<-SQL
          SELECT DISTINCT us.id,
                 (3959 * acos(cos(radians(:lat))*cos(radians(lat))*cos(radians(lon)-radians(:lon))+sin(radians(:lat))*sin(radians(lat)))) AS distance
            FROM uke_import_news n
      INNER JOIN uke_stations AS us ON (us.id = n.uke_station_id)
           WHERE n.uke_import_id = :uke_import_id
             AND lat BETWEEN :lat_sw AND :lat_ne
             AND lon BETWEEN :lon_sw AND :lon_ne
        ORDER BY distance ASC
    SQL
    
    sql.gsub!(':uke_import_id', @active_import.id.to_s)
    sql.gsub!(':lat_ne', conn.quote(bounds_ne['lat'].to_s))
    sql.gsub!(':lat_sw', conn.quote(bounds_sw['lat'].to_s))
    sql.gsub!(':lon_ne', conn.quote(bounds_ne['lng'].to_s))
    sql.gsub!(':lon_sw', conn.quote(bounds_sw['lng'].to_s))
    sql.gsub!(':lat', conn.quote(@location.latitude.to_s))
    sql.gsub!(':lon', conn.quote(@location.longitude.to_s))
    
    result_to_hash select_using_uke_stations_result(sql)
  end
