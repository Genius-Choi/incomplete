    def update_user(
        user_name_or_id: Union[str, UUID],
        user_update: UserUpdate,
        auth_context: AuthContext = Security(authorize),
    ) -> UserResponse:
        """Updates a specific user.

        Args:
            user_name_or_id: Name or ID of the user.
            user_update: the user to use for the update.
            auth_context: Authentication context.

        Returns:
            The updated user.

        Raises:
            IllegalOperationError: if the user tries change admin status,
                while not an admin
        """
        user = zen_store().get_user(user_name_or_id)
        if user.id != auth_context.user.id:
            verify_admin_status_if_no_rbac(
                auth_context.user.is_admin, "update other user"
            )
            verify_permission_for_model(
                user,
                action=Action.UPDATE,
            )
        if (
            user_update.is_admin is not None
            and user.is_admin != user_update.is_admin
            and not auth_context.user.is_admin
        ):
            raise IllegalOperationError(
                "Only admins can change the admin status of other users."
            )

        user_update.activation_token = user.activation_token
        if not auth_context.user.is_admin or user.id == auth_context.user.id:
            user_update.active = user.active
        updated_user = zen_store().update_user(
            user_id=user.id,
            user_update=user_update,
        )
        return dehydrate_response_model(updated_user)
