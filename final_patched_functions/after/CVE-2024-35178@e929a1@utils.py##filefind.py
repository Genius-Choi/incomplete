def filefind(filename: str, path_dirs: Sequence[str]) -> str:
    """Find a file by looking through a sequence of paths.

    For use in FileFindHandler.

    Iterates through a sequence of paths looking for a file and returns
    the full, absolute path of the first occurrence of the file.

    Absolute paths are not accepted for inputs.

    This function does not automatically try any paths,
    such as the cwd or the user's home directory.

    Parameters
    ----------
    filename : str
        The filename to look for. Must be a relative path.
    path_dirs : sequence of str
        The sequence of paths to look in for the file.
        Walk through each element and join with ``filename``.
        Only after ensuring the path resolves within the directory is it checked for existence.

    Returns
    -------
    Raises :exc:`OSError` or returns absolute path to file.
    """
    file_path = Path(filename)

    # If the input is an absolute path, reject it
    if file_path.is_absolute():
        msg = f"{filename} is absolute, filefind only accepts relative paths."
        raise OSError(msg)

    for path_str in path_dirs:
        path = Path(path_str).absolute()
        test_path = path / file_path
        # os.path.abspath resolves '..', but Path.absolute() doesn't
        # Path.resolve() does, but traverses symlinks, which we don't want
        test_path = Path(os.path.abspath(test_path))
        if sys.version_info >= (3, 9):
            if not test_path.is_relative_to(path):
                # points outside root, e.g. via `filename='../foo'`
                continue
        else:
            # is_relative_to is new in 3.9
            try:
                test_path.relative_to(path)
            except ValueError:
                # points outside root, e.g. via `filename='../foo'`
                continue
        # make sure we don't call is_file before we know it's a file within a prefix
        # GHSA-hrw6-wg82-cm62 - can leak password hash on windows.
        if test_path.is_file():
            return os.path.abspath(test_path)

    msg = f"File {filename!r} does not exist in any of the search paths: {path_dirs!r}"
    raise OSError(msg)
