def create_databases
  Chef::Log.info("Creating bootstrap databases")
  cdb = Chef::CouchDB.new(Chef::Config[:couchdb_url], "chef_integration")

  # Sometimes Couch returns a '412 Precondition Failed' when creating a database,
  # via a PUT to its URL, as the DELETE from the previous step in delete_databases
  # has not yet finished. This condition disappears if you try again. So here we
  # try up to 10 times if PreconditionFailed occurs. See
  #   http://tickets.opscode.com/browse/CHEF-1788 and
  #   http://tickets.opscode.com/browse/CHEF-1764.
  #
  # According to https://issues.apache.org/jira/browse/COUCHDB-449, setting the
  # 'X-Couch-Full-Commit: true' header on the DELETE should work around this issue,
  # but it does not.
  db_created = nil
  max_tries = 10
  num_tries = 1
  while !db_created && num_tries <= max_tries
    begin
      cdb.create_db
      db_created = true
    rescue Net::HTTPServerException => e
      unless e.response.code.to_i == 412
        # Re-raise if we got anything but 412.
        raise
      end

      if num_tries <= max_tries
        Chef::Log.debug("In creating chef_integration try #{num_tries}/#{max_tries}, got #{e}; try again")
        sleep 0.25
      else
        Chef::Log.error("In creating chef_integration, tried #{max_tries} times: got #{e}; giving up")
      end
    end
    num_tries += 1
  end

  cdb.create_id_map
  Chef::Node.create_design_document
  Chef::Role.create_design_document
  Chef::DataBag.create_design_document
  Chef::ApiClient.create_design_document
  Chef::WebUIUser.create_design_document
  Chef::CookbookVersion.create_design_document
  Chef::Sandbox.create_design_document
  Chef::Checksum.create_design_document
  Chef::Environment.create_design_document

  Chef::Certificate.generate_signing_ca
  Chef::Certificate.gen_validation_key
  Chef::Certificate.gen_validation_key(Chef::Config[:web_ui_client_name], Chef::Config[:web_ui_key])
  Chef::Environment.create_default_environment
  system("cp #{File.join(Dir.tmpdir, "chef_integration", "validation.pem")} #{Dir.tmpdir}")
  system("cp #{File.join(Dir.tmpdir, "chef_integration", "webui.pem")} #{Dir.tmpdir}")
  c = Chef::ApiClient.cdb_load(Chef::Config[:web_ui_client_name])
  c.admin(true)
  c.cdb_save

  cmd = [KNIFE_CMD, "cookbook", "upload", "-a", "-o", INTEGRATION_COOKBOOKS, "-u", Chef::Config[:web_ui_client_name], "-k", File.join(Dir.tmpdir, "webui.pem"), "-c", KNIFE_CONFIG]
  Chef::Log.info("Uploading fixture cookbooks with #{cmd.join(' ')}")
  cmd << {:timeout => 120}
  shell_out!(*cmd)
end
