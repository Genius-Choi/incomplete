def create_app(name=""):
    if "mscolab.server" in name:
        from mslib.mscolab.app import APP
    else:
        from mslib.mswms.app import APP

    @APP.route('/xstatic/<name>/', defaults=dict(filename=''))
    @APP.route('/xstatic/<name>/<path:filename>')
    def files(name, filename):

        base_path = _xstatic(name)
        if base_path is None:
            abort(404)
        if not filename:
            abort(404)
        return send_from_directory(base_path, filename)

    @APP.route('/mss_theme/<name>/', defaults=dict(filename=''))
    @APP.route('/mss_theme/<name>/<path:filename>')
    def mss_theme(name, filename):
        if name != 'img':
            abort(404)
        base_path = os.path.join(DOCS_SERVER_PATH, 'static', 'img')
        return send_from_directory(base_path, filename)

    def get_topmenu():
        if "mscolab" in " ".join(sys.argv):
            menu = [
                (url_for('index'), 'Mission Support System',
                 ((url_for('about'), 'About'),
                  (url_for('install'), 'Install'),
                  (url_for('help'), 'Help'),
                  )),
            ]
        else:
            menu = [
                (url_for('index'), 'Mission Support System',
                 ((url_for('about'), 'About'),
                  (url_for('install'), 'Install'),
                  (url_for("plots"), 'Gallery'),
                  (url_for('help'), 'Help'),
                  )),
            ]

        return menu

    APP.jinja_env.globals.update(get_topmenu=get_topmenu)

    def get_content(filename, overrides=None):
        markdown = Markdown(extensions=["fenced_code"])
        content = ""
        if os.path.isfile(filename):
            with codecs.open(filename, 'r', 'utf-8') as f:
                md_data = f.read()
            md_data = md_data.replace(':ref:', '')
            if overrides is not None:
                v1, v2 = overrides
                md_data = md_data.replace(v1, v2)
            content = markdown.convert(md_data)
        return content

    @APP.route("/index")
    def index():
        return render_template("/index.html")

    @APP.route("/mss/about")
    @APP.route("/mss")
    def about():
        _file = os.path.join(DOCS_SERVER_PATH, 'static', 'docs', 'about.md')
        img_url = url_for('overview')
        overrides = ['![image](/mss/overview.png)', f'![image]({img_url})']
        content = get_content(_file,
                              overrides=overrides)
        return render_template("/content.html", act="about", content=content)

    @APP.route("/mss/install")
    def install():
        _file = os.path.join(DOCS_SERVER_PATH, 'static', 'docs', 'installation.md')
        content = get_content(_file)
        return render_template("/content.html", act="install", content=content)

    @APP.route("/mss/plots")
    def plots():
        if STATIC_LOCATION != "" and os.path.exists(os.path.join(STATIC_LOCATION, 'plots.html')):
            _file = os.path.join(STATIC_LOCATION, 'plots.html')
            content = get_content(_file)
        else:
            content = "Gallery was not generated for this server.<br>" \
                      "For further info on how to generate it, run the " \
                      "<b>gallery --help</b> command line parameter of mswms.<br>" \
                      "An example of the gallery can be seen " \
                      "<a href=\"https://mss.readthedocs.io/en/stable/gallery/index.html\">here</a>"
        return render_template("/content.html", act="plots", content=content)

    @APP.route("/mss/code/<path:filename>")
    def code(filename):
        download = request.args.get("download", False)
        _file = werkzeug.security.safe_join(STATIC_LOCATION, "code", filename)
        if _file is None:
            abort(404)
        content = get_content(_file)
        if not download:
            return render_template("/content.html", act="code", content=content)
        else:
            if not os.path.isfile(_file):
                abort(404)
            with open(_file) as f:
                text = f.read()
            return Response("".join([s.replace("\t", "", 1) for s in text.split("```python")[-1]
                                    .splitlines(keepends=True)][1:-2]),
                            mimetype="text/plain",
                            headers={"Content-disposition": f"attachment; filename={filename.split('-')[0]}.py"})

    @APP.route("/mss/help")
    def help():
        _file = os.path.join(DOCS_SERVER_PATH, 'static', 'docs', 'help.md')
        content = get_content(_file)
        return render_template("/content.html", act="help", content=content)

    @APP.route("/mss/imprint")
    def imprint():
        _file = os.path.join(DOCS_SERVER_PATH, 'static', 'docs', 'imprint.md')
        content = get_content(_file)
        return render_template("/content.html", act="imprint", content=content)

    @APP.route('/mss/favicon.ico')
    def favicons():
        base_path = icons("16x16", "favicon.ico")
        return send_file(base_path)

    @APP.route('/mss/logo.png')
    def logo():
        base_path = icons("64x64", "mss-logo.png")
        return send_file(base_path)

    @APP.route('/mss/overview.png')
    def overview():
        base_path = os.path.join(DOCS_SERVER_PATH, 'static', 'img', 'wise12_overview.png')
        return send_file(base_path)

    return APP
