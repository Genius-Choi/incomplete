def base_render_template(template, data_id, **kwargs):
    """
    Overriden version of Flask.render_template which will also include vital instance information
     - settings
     - version
     - processes
    """
    if not len(os.listdir("{}/static/dist".format(os.path.dirname(__file__)))):
        return redirect(current_app.url_for("missing_js"))
    curr_settings = global_state.get_settings(data_id) or {}
    curr_app_settings = global_state.get_app_settings()
    _, version = retrieve_meta_info_and_version("dtale")
    hide_shutdown = global_state.load_flag(data_id, "hide_shutdown", False)
    allow_cell_edits = global_state.load_flag(data_id, "allow_cell_edits", True)
    github_fork = global_state.load_flag(data_id, "github_fork", False)
    hide_header_editor = global_state.load_flag(data_id, "hide_header_editor", False)
    lock_header_menu = global_state.load_flag(data_id, "lock_header_menu", False)
    hide_header_menu = global_state.load_flag(data_id, "hide_header_menu", False)
    hide_main_menu = global_state.load_flag(data_id, "hide_main_menu", False)
    hide_column_menus = global_state.load_flag(data_id, "hide_column_menus", False)
    app_overrides = dict(
        allow_cell_edits=json.dumps(allow_cell_edits),
        hide_shutdown=hide_shutdown,
        hide_header_editor=hide_header_editor,
        lock_header_menu=lock_header_menu,
        hide_header_menu=hide_header_menu,
        hide_main_menu=hide_main_menu,
        hide_column_menus=hide_column_menus,
        github_fork=github_fork,
    )
    is_arcticdb = 0
    arctic_conn = ""
    if global_state.is_arcticdb:
        instance = global_state.store.get(data_id)
        is_arcticdb = instance.rows()
        arctic_conn = global_state.store.uri
    return render_template(
        template,
        data_id=get_url_quote()(get_url_quote()(data_id, safe=""))
        if data_id is not None
        else "",
        xarray=global_state.get_data_inst(data_id).is_xarray_dataset,
        xarray_dim=json.dumps(global_state.get_dataset_dim(data_id)),
        settings=json.dumps(curr_settings),
        version=str(version),
        processes=global_state.size(),
        python_version=platform.python_version(),
        predefined_filters=json.dumps(
            [f.asdict() for f in predefined_filters.get_filters()]
        ),
        is_vscode=is_vscode(),
        is_arcticdb=is_arcticdb,
        arctic_conn=arctic_conn,
        column_count=len(global_state.get_dtypes(data_id) or []),
        # fmt: off
        **dict_merge(kwargs, curr_app_settings, app_overrides)
        # fmt: on
    )
