def _process_shipping_data_for_order(
    checkout_info: "CheckoutInfo",
    base_shipping_price: Money,
    shipping_price: TaxedMoney,
    manager: "PluginsManager",
    lines: Iterable["CheckoutLineInfo"],
) -> dict[str, Any]:
    """Fetch, process and return shipping data from checkout."""
    delivery_method_info = checkout_info.delivery_method_info
    shipping_address = delivery_method_info.shipping_address

    if (
        delivery_method_info.store_as_customer_address
        and checkout_info.user
        and shipping_address
    ):
        store_user_address(
            checkout_info.user, shipping_address, AddressType.SHIPPING, manager=manager
        )
        if checkout_info.user.addresses.filter(pk=shipping_address.pk).exists():
            shipping_address = shipping_address.get_copy()

    shipping_method = delivery_method_info.delivery_method
    tax_class = getattr(shipping_method, "tax_class", None)

    result: dict[str, Any] = {
        "shipping_address": shipping_address,
        "base_shipping_price": base_shipping_price,
        "shipping_price": shipping_price,
        "weight": checkout_info.checkout.get_total_weight(lines),
        **get_shipping_tax_class_kwargs_for_order(tax_class),
    }
    result.update(delivery_method_info.delivery_method_order_field)
    result.update(delivery_method_info.delivery_method_name)

    return result
