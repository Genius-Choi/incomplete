def filter_materialized_view(
        engine,
        view_name,
        schema="web",
        state_code=None,
        area=None,
        distance_grid=None,
        building=None,
        buildingfp=None,
        limit=None,
        keys=None,
):
    if schema is not None:
        view_name = "{}.{}".format(schema, view_name)
    if limit is None:
        limit = ""
    else:
        limit = " LIMIT {}".format(limit)

    filter_cond = ""

    if state_code is not None:
        key = "adm1_pcode"
        filter_cond = f" WHERE {view_name}.{key}='{state_code}'"

    if area is not None:
        key = "area_km2"
        if "WHERE" in filter_cond:
            filter_cond = filter_cond + f" AND {view_name}.{key} >= {area[0]} AND" \
                                        f" {view_name}.{key} <= {area[1]}"
        else:
            filter_cond = f" WHERE {view_name}.{key} >= {area[0]} AND {view_name}.{key} <= {area[1]}"

    if distance_grid is not None:
        key = "grid_dist_km"
        if "WHERE" in filter_cond:
            filter_cond = filter_cond + f" AND {view_name}.{key} >= {distance_grid[0]} AND" \
                                        f" {view_name}.{key} <= {distance_grid[1]}"
        else:
            filter_cond = f" WHERE {view_name}.{key} >= {distance_grid[0]} AND" \
                          f" {view_name}.{key} <= {distance_grid[1]}"

    if building is not None:
        key = "building_count"
        if "WHERE" in filter_cond:
            filter_cond = filter_cond + f" AND {view_name}.{key} >= {building[0]} AND" \
                                        f" {view_name}.{key} <= {building[1]}"
        else:
            filter_cond = f" WHERE {view_name}.{key} >= {building[0]} AND" \
                          f" {view_name}.{key} <= {building[1]}"

    if buildingfp is not None:
        key = "percentage_building_area"
        if "WHERE" in filter_cond:
            filter_cond = filter_cond + f" AND {view_name}.{key} >= {buildingfp[0]} AND" \
                                        f" {view_name}.{key} <= {buildingfp[1]}"
        else:
            filter_cond = f" WHERE {view_name}.{key} >= {buildingfp[0]} AND" \
                          f" {view_name}.{key} <= {buildingfp[1]}"

    if keys is None:
        columns = "*"
    else:
        if not isinstance(keys, str):
            columns = ", ".join(keys)
        else:
            columns = "COUNT({})".format(keys)
    with engine.connect() as con:
        query = 'SELECT {} FROM {}{}{};'.format(columns, view_name, filter_cond, limit)
        rs = con.execute(query)
        data = rs.fetchall()
    return data
