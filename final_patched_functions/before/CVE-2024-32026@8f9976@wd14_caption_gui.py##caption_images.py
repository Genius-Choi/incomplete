def caption_images(
    train_data_dir: str,
    caption_extension: str,
    batch_size: int,
    general_threshold: float,
    character_threshold: float,
    repo_id: str,
    recursive: bool,
    max_data_loader_n_workers: int,
    debug: bool,
    undesired_tags: str,
    frequency_tags: bool,
    always_first_tags: str,
    onnx: bool,
    append_tags: bool,
    force_download: bool,
    caption_separator: str,
    tag_replacement: bool,
    character_tag_expand: str,
    use_rating_tags: bool,
    use_rating_tags_as_last_tag: bool,
    remove_underscore: bool,
    thresh: float,
) -> None:
    # Check for images_dir_input
    if train_data_dir == "":
        msgbox("Image folder is missing...")
        return

    if caption_extension == "":
        msgbox("Please provide an extension for the caption files.")
        return

    log.info(f"Captioning files in {train_data_dir}...")
    run_cmd = rf'accelerate launch "{scriptdir}/sd-scripts/finetune/tag_images_by_wd14_tagger.py"'
    # if always_first_tags:
    #     run_cmd += f' --always_first_tags="{always_first_tags}"'
    if append_tags:
        run_cmd += f" --append_tags"
    run_cmd += f" --batch_size={int(batch_size)}"
    run_cmd += f' --caption_extension="{caption_extension}"'
    run_cmd += f' --caption_separator="{caption_separator}"'
    if character_tag_expand:
        run_cmd += f" --character_tag_expand"
    if not character_threshold == 0.35:
        run_cmd += f" --character_threshold={character_threshold}"
    if debug:
        run_cmd += f" --debug"
    if force_download:
        run_cmd += f" --force_download"
    if frequency_tags:
        run_cmd += f" --frequency_tags"
    if not general_threshold == 0.35:
        run_cmd += f" --general_threshold={general_threshold}"
    run_cmd += f' --max_data_loader_n_workers="{int(max_data_loader_n_workers)}"'
    if onnx:
        run_cmd += f" --onnx"
    if recursive:
        run_cmd += f" --recursive"
    if remove_underscore:
        run_cmd += f" --remove_underscore"
    run_cmd += f' --repo_id="{repo_id}"'
    if not tag_replacement == "":
        run_cmd += f" --tag_replacement={tag_replacement}"
    if not thresh == 0.35:
        run_cmd += f" --thresh={thresh}"
    if not undesired_tags == "":
        run_cmd += f' --undesired_tags="{undesired_tags}"'
    if use_rating_tags:
        run_cmd += f" --use_rating_tags"
    if use_rating_tags_as_last_tag:
        run_cmd += f" --use_rating_tags_as_last_tag"
    run_cmd += rf' "{train_data_dir}"'

    log.info(run_cmd)

    env = os.environ.copy()
    env["PYTHONPATH"] = (
        rf"{scriptdir}{os.pathsep}{scriptdir}/sd-scripts{os.pathsep}{env.get('PYTHONPATH', '')}"
    )
    env["TF_ENABLE_ONEDNN_OPTS"] = "0"

    # Run the command
    subprocess.run(run_cmd, shell=True, env=env)
    
    # Add prefix and postfix
    add_pre_postfix(
        folder=train_data_dir,
        caption_file_ext=caption_extension,
        prefix=always_first_tags,
    )

    log.info("...captioning done")
