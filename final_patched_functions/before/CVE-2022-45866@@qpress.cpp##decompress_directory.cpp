void decompress_directory(string extract_dir, bool std_out)
{
    char c;
    string curdir;
    size_t r = 0;
    unsigned int chunk_size;

    curdir = string(extract_dir);

    for(;;)
    {
        r = aread(&c, 1);
        if (r == 0)
            return;

        if(c == 'D')
        {
			// read directory name, append it to current path and create the directory
            chunk_size = fread32();
            try_aread(tmp, chunk_size + 1);
            curdir = curdir + DELIM_STR + tmp;
            PRINT(FILES_PROCESSED, "%s%s%s\n", BLANK_LINE, remove_leading_curdir(curdir).c_str(), DELIM_STR);
            if(!std_out)
            {
#ifdef WINDOWS
                CreateDirectory(curdir.c_str(), 0);
#else
                mkdir(curdir.c_str(), 509);
#endif
            }
        }
        else if(c == 'U')
            curdir = curdir.substr(0, curdir.find_last_of(DELIM_STR)); // remove last sub dir from current path
        else if(c == 'F')
        {
            chunk_size = fread32(); // read length of file name
            try_aread(tmp, chunk_size + 1); // read file name
            string buf2 = curdir + DELIM_STR + tmp;
            PRINT(FILES_PROCESSED, "%s    %s\n", BLANK_LINE, tmp);
            if(!std_out)
            {
                if(exists(buf2) && !force_flag)
                    abort("Destination file '%s' already exists - aborted", buf2.c_str());
                else
                    decompress_file(buf2);
            }
            else
                decompress_file("<stdout>");
        }
        else
            abort("Source file is corrupted - try the -R flag to recover");
    }
}
