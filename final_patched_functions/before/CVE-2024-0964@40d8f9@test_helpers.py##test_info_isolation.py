async def test_info_isolation(async_handler: bool):
    async def greet_async(name):
        await asyncio.sleep(2)
        gr.Info(f"Hello {name}")
        return name

    def greet_sync(name):
        time.sleep(2)
        gr.Info(f"Hello {name}")
        return name

    demo = gr.Interface(
        greet_async if async_handler else greet_sync,
        "text",
        "text",
        concurrency_limit=2,
    )
    demo.launch(prevent_thread_lock=True)

    async def session_interaction(name, delay=0):
        await asyncio.sleep(delay)

        log_messages = []
        async with httpx.AsyncClient() as client:
            async with client.stream(
                "GET",
                f"http://localhost:{demo.server_port}/queue/join",
                params={"fn_index": 0, "session_hash": name},
            ) as response:
                async for line in response.aiter_text():
                    if line.startswith("data:"):
                        msg = json.loads(line[5:])
                    if msg["msg"] == "send_data":
                        event_id = msg["event_id"]
                        req = await client.post(
                            f"http://localhost:{demo.server_port}/queue/data",
                            json={
                                "event_id": event_id,
                                "data": [name],
                                "fn_index": 0,
                            },
                        )
                        if not req.is_success:
                            raise ValueError(
                                f"Could not send payload to endpoint: {req.text}"
                            )
                    if msg["msg"] == "log":
                        log_messages.append(msg["log"])
                    if msg["msg"] == "process_completed":
                        break
        return log_messages

    alice_logs, bob_logs = await asyncio.gather(
        session_interaction("Alice"),
        session_interaction("Bob", delay=1),
    )

    assert alice_logs == ["Hello Alice"]
    assert bob_logs == ["Hello Bob"]
