def test_create_user_no_password():
    """Tests that creating a user without a password needs to be activated."""
    client = Client()
    store = client.zen_store

    if store.type == StoreType.SQL:
        pytest.skip("SQL Zen Stores do not support user activation")

    with UserContext(inactive=True) as user:
        assert not user.active
        assert user.activation_token is not None

        with pytest.raises(AuthorizationException):
            with LoginContext(user_name=user.name, password=""):
                pass

        with pytest.raises(AuthorizationException):
            with LoginContext(user_name=user.name, password="password"):
                pass

        with pytest.raises(AuthorizationException):
            response_body = store.put(
                f"{USERS}/{str(user.id)}{ACTIVATE}",
                body=UserUpdate(password="password"),
            )

        with pytest.raises(AuthorizationException):
            with LoginContext(user_name=user.name, password="password"):
                pass

        response_body = store.put(
            f"{USERS}/{str(user.id)}{ACTIVATE}",
            body=UserUpdate(
                password="password", activation_token=user.activation_token
            ),
        )
        activated_user = UserResponse.parse_obj(response_body)
        assert activated_user.active
        assert activated_user.name == user.name
        assert activated_user.id == user.id

        with LoginContext(user_name=user.name, password="password"):
            new_store = Client().zen_store
            assert new_store.get_user().id == user.id
