def check_ratelimit(delay=60, anonymous_limit=0, registered_limit=0, rate_exceed_status=429, debug=False, **conf):
    """
    Verify the ratelimit. By default return a 429 HTTP error code (Too Many Request).

    Usage:

    @cherrypy.tools.ratelimit(on=True, anonymous_limit=5, registered_limit=50, storage_class=FileRateLimit, storage_path='/tmp')
    def index(self):
        pass
    """

    # If datastore is not pass as configuration, create it for the first time.
    datastore = getattr(cherrypy, '_ratelimit_datastore', None)
    if datastore is None:
        # Create storage using storage class
        storage_class = conf.get('storage_class', RamRateLimit)
        datastore = storage_class(**conf)
        cherrypy._ratelimit_datastore = datastore

    # If user is authenticated, use the username else use the ip address
    token = cherrypy.request.login or cherrypy.request.remote.ip

    # Get the real limit depending of user login.
    limit = registered_limit if cherrypy.request.login else anonymous_limit
    if limit is None or limit <= 0:
        return

    # Get hits count using datastore.
    hits = datastore.get_and_increment(token, delay)
    if debug:
        cherrypy.log(
            'check and increase rate limit for token %s, limit %s, hits %s' % (token, limit, hits), 'TOOLS.RATELIMIT'
        )

    # Verify user has not exceeded rate limit
    if limit <= hits:
        raise cherrypy.HTTPError(rate_exceed_status)
