        async def new_discussion(sid, data):
            if lollmsElfServer.personality is None:
                lollmsElfServer.error("Please select a personality first")
                return
            ASCIIColors.yellow("New descussion requested")
            client_id = sid
            title = data["title"]
            if lollmsElfServer.connections[client_id]["current_discussion"] is not None:
                if lollmsElfServer.long_term_memory is not None:
                    title, content = lollmsElfServer.connections[client_id]["current_discussion"].export_for_vectorization()
                    skill = lollmsElfServer.learn_from_discussion(title, content)
                    lollmsElfServer.long_term_memory.add_document(title, skill, chunk_size=lollmsElfServer.config.data_vectorization_chunk_size, overlap_size=lollmsElfServer.config.data_vectorization_overlap_size, force_vectorize=False, add_as_a_bloc=False, add_to_index=True)
                    ASCIIColors.yellow("4- Saving database")
                    lollmsElfServer.long_term_memory.save_to_json()
            lollmsElfServer.connections[client_id]["current_discussion"] = lollmsElfServer.db.create_discussion(title)
            # Get the current timestamp
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            # Return a success response
            if lollmsElfServer.connections[client_id]["current_discussion"] is None:
                lollmsElfServer.connections[client_id]["current_discussion"] = lollmsElfServer.db.load_last_discussion()
        
            if lollmsElfServer.personality.welcome_message!="":
                if lollmsElfServer.config.force_output_language_to_be and lollmsElfServer.config.force_output_language_to_be.lower().strip() !="english":
                    welcome_message = lollmsElfServer.personality.fast_gen(f"!@>instruction: Translate the following text to {lollmsElfServer.config.force_output_language_to_be.lower()}:\n{lollmsElfServer.personality.welcome_message}\n!@>translation:")
                else:
                    welcome_message = lollmsElfServer.personality.welcome_message

                message = lollmsElfServer.connections[client_id]["current_discussion"].add_message(
                    message_type        = MSG_TYPE.MSG_TYPE_FULL.value if lollmsElfServer.personality.include_welcome_message_in_disucssion else MSG_TYPE.MSG_TYPE_FULL_INVISIBLE_TO_AI.value,
                    sender_type         = SENDER_TYPES.SENDER_TYPES_AI.value,
                    sender              = lollmsElfServer.personality.name,
                    content             = welcome_message,
                    metadata            = None,
                    rank                = 0, 
                    parent_message_id   = -1, 
                    binding             = lollmsElfServer.config.binding_name, 
                    model               = lollmsElfServer.config.model_name,
                    personality         = lollmsElfServer.config.personalities[lollmsElfServer.config.active_personality_id], 
                    created_at=None, 
                    finished_generating_at=None
                )
 
                await lollmsElfServer.sio.emit('discussion_created',
                            {'id':lollmsElfServer.connections[client_id]["current_discussion"].discussion_id},
                            to=client_id
                )                        
            else:
                await lollmsElfServer.sio.emit('discussion_created',
                            {'id':0},
                            to=client_id
                )                        
