  def get_mails
    if params[:action] == 'get_mails'
      Log.add_info(request, params.inspect)
    end

    if !params[:pop].nil? and params[:pop] == 'true'
      begin
        new_arrivals_h = {}

        mail_account_id = params[:mail_account_id]
        if mail_account_id.blank?
          mail_accounts = MailAccount.find_all("user_id=#{@login_user.id}")
          mail_accounts.each do |mail_account|
            emails = Email.do_pop(mail_account)
            unless emails.empty?
              new_arrivals_h[mail_account.id] ||= []
              new_arrivals_h[mail_account.id] |= emails
            end
          end
        else
          mail_account = MailAccount.find(mail_account_id)
          emails = Email.do_pop(mail_account)
          unless emails.empty?
            new_arrivals_h[mail_account.id] ||= []
            new_arrivals_h[mail_account.id] |= emails
          end
        end

        unless new_arrivals_h.empty?
          flash[:notice] = t('mail.received', :count => new_arrivals_h.values.flatten.length)

        # FEATURE_MAIL_FILTERS >>>
          new_arrivals_h.each do |mail_account_id, emails|
            mail_filters = MailFilter.get_for(mail_account_id, true, MailFilter::TRIGGER_CHECKING)
            filter_next = true

            emails.each do |email|
              mail_filters.each do |filter|
                filter_next = filter.execute(email)
                break unless filter_next
              end
              break unless filter_next
            end
          end
        # FEATURE_MAIL_FILTERS <<<
        end
      rescue => evar
        if evar.to_s.starts_with?('ERROR:')
          flash[:notice] = evar.to_s
        else
          flash[:notice] = 'ERROR:' + t('mail.receive_error') + '<br/>' + evar.to_s
        end
        Log.add_error(nil, evar)
      end
    end

    @folder_id = params[:id]
    if @folder_id == TreeElement::ROOT_ID.to_s
      @emails = nil
    else
=begin
#      @emails = MailFolder.get_mails_to_show(@folder_id, @login_user)
=end
# FEATURE_PAGING_IN_TREE >>>
      @sort_col = (params[:sort_col] || 'sent_at')
      @sort_type = (params[:sort_type] || 'DESC')

      folder_ids = nil
      add_con = nil

      folder_ids = [@folder_id]

      sql = EmailsHelper.get_list_sql(@login_user, params[:keyword], folder_ids, @sort_col, @sort_type, 0, add_con)
      @email_pages, @emails, @total_num = paginate_by_sql(Email, sql, 10)
# FEATURE_PAGING_IN_TREE <<<
    end

    session[:mailfolder_id] = @folder_id

    render(:partial => 'ajax_folder_mails', :layout => false)
  end
