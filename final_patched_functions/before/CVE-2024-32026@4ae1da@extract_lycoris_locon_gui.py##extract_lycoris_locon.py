def extract_lycoris_locon(
    db_model,
    base_model,
    output_name,
    device,
    is_sdxl,
    is_v2,
    mode,
    linear_dim,
    conv_dim,
    linear_threshold,
    conv_threshold,
    linear_ratio,
    conv_ratio,
    linear_quantile,
    conv_quantile,
    use_sparse_bias,
    sparsity,
    disable_cp,
):
    # Check for caption_text_input
    if db_model == "":
        msgbox("Invalid finetuned model file")
        return

    if base_model == "":
        msgbox("Invalid base model file")
        return

    # Check if source model exist
    if not os.path.isfile(db_model):
        msgbox("The provided finetuned model is not a file")
        return

    if not os.path.isfile(base_model):
        msgbox("The provided base model is not a file")
        return

    if os.path.dirname(output_name) == "":
        # only filename given. prepend dir
        output_name = os.path.join(os.path.dirname(db_model), output_name)
    if os.path.isdir(output_name):
        # only dir name given. set default lora name
        output_name = os.path.join(output_name, "lora.safetensors")
    if os.path.normpath(db_model) == os.path.normpath(output_name):
        # same path. silently ignore but rename output
        path, ext = os.path.splitext(output_name)
        output_name = f"{path}_tmp{ext}"

    run_cmd = rf'"{PYTHON}" "{scriptdir}/tools/lycoris_locon_extract.py"'
    if is_sdxl:
        run_cmd += f" --is_sdxl"
    if is_v2:
        run_cmd += f" --is_v2"
    run_cmd += f" --device {device}"
    run_cmd += f" --mode {mode}"
    run_cmd += f" --safetensors"
    if mode == "fixed":
        run_cmd += f" --linear_dim {linear_dim}"
        run_cmd += f" --conv_dim {conv_dim}"
    if mode == "threshold":
        run_cmd += f" --linear_threshold {linear_threshold}"
        run_cmd += f" --conv_threshold {conv_threshold}"
    if mode == "ratio":
        run_cmd += f" --linear_ratio {linear_ratio}"
        run_cmd += f" --conv_ratio {conv_ratio}"
    if mode == "quantile":
        run_cmd += f" --linear_quantile {linear_quantile}"
        run_cmd += f" --conv_quantile {conv_quantile}"
    if use_sparse_bias:
        run_cmd += f" --use_sparse_bias"
    run_cmd += f" --sparsity {sparsity}"
    if disable_cp:
        run_cmd += f" --disable_cp"
    run_cmd += rf' "{base_model}"'
    run_cmd += rf' "{db_model}"'
    run_cmd += rf' "{output_name}"'

    log.info(run_cmd)

    env = os.environ.copy()
    env["PYTHONPATH"] = (
        rf"{scriptdir}{os.pathsep}{scriptdir}/sd-scripts{os.pathsep}{env.get('PYTHONPATH', '')}"
    )

    # Run the command
    subprocess.run(run_cmd, shell=True, env=env)

    log.info("Done extracting...")
