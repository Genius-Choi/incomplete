    def data(_data)
      unless in_state(:rcpt_to_received)
        increment_error_count("data-out-of-order")
        return "503 HELO/EHLO, MAIL FROM and RCPT TO before sending data"
      end

      @data = String.new.force_encoding("BINARY")
      @headers = {}
      @receiving_headers = true

      received_header = ReceivedHeader.generate(@credential&.server, @helo_name, @ip_address, :smtp)
                                      .force_encoding("BINARY")

      @data << "Received: #{received_header}\r\n"
      @headers["received"] = [received_header]

      handler = proc do |idata|
        if idata == "."
          @logging_enabled = true
          @proc = nil
          finished
        else
          idata = idata.to_s.sub(/\A\.\./, ".")

          if @credential&.server&.log_smtp_data?
            # We want to log if enabled
          else
            log "Not logging further message data."
            @logging_enabled = false
          end

          if @receiving_headers
            if idata.blank?
              @receiving_headers = false
            elsif idata.to_s =~ /^\s/
              # This is a continuation of a header
              if @header_key && @headers[@header_key.downcase] && @headers[@header_key.downcase].last
                @headers[@header_key.downcase].last << idata.to_s
              end
            else
              @header_key, value = idata.split(/:\s*/, 2)
              @headers[@header_key.downcase] ||= []
              @headers[@header_key.downcase] << value
            end
          end
          @data << idata
          @data << "\r\n"
          nil
        end
      end

      @proc = handler
      "354 Go ahead"
    end
