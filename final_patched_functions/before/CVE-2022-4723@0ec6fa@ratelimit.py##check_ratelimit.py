def check_ratelimit(
    delay=3600, limit=25, return_status=429, logout=False, scope=None, methods=None, debug=False, hit=1, **conf
):
    """
    Verify the ratelimit. By default return a 429 HTTP error code (Too Many Request). After 25 request within the same hour.

    Arguments:
        delay:         Time window for analysis in seconds. Default per hour (3600 seconds)
        limit:         Number of request allowed for an entry point. Default 25
        return_status: HTTP Error code to return.
        logout:        True to logout user when limit is reached
        scope:         if specify, define the scope of rate limit. Default to path_info.
        methods:       if specify, only the methods in the list will be rate limited.
    """
    assert delay > 0, 'invalid delay'

    # Check if limit is enabled
    if limit <= 0:
        return

    # Check if this 'method' should be rate limited
    request = cherrypy.request
    if methods is not None and request.method not in methods:
        if debug:
            cherrypy.log(
                'skip rate limit for HTTP method %s' % (request.method,),
                'TOOLS.RATELIMIT',
            )
        return

    # If datastore is not pass as configuration, create it for the first time.
    datastore = getattr(cherrypy.request.app, '_ratelimit_datastore', None)
    if datastore is None:
        # Create storage using storage class
        storage_class = conf.get('storage_class', RamRateLimit)
        datastore = storage_class(**conf)
        cherrypy.request.app._ratelimit_datastore = datastore

    # If user is authenticated, use the username else use the ip address
    token = (request.login or request.remote.ip) + '.' + (scope or request.path_info)

    # Get hits count using datastore.
    hits = datastore.get_and_increment(token, delay, hit)
    if debug:
        cherrypy.log(
            'check and increase rate limit for scope %s, limit %s, hits %s' % (token, limit, hits), 'TOOLS.RATELIMIT'
        )

    # Verify user has not exceeded rate limit
    if limit <= hits:
        if logout:
            if hasattr(cherrypy.serving, 'session'):
                cherrypy.serving.session.clear()
            raise cherrypy.HTTPRedirect("/")

        raise cherrypy.HTTPError(return_status)
