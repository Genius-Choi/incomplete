def web_upload():
    from dtale.cli.loaders.csv_loader import loader_func as load_csv
    from dtale.cli.loaders.json_loader import loader_func as load_json
    from dtale.cli.loaders.excel_loader import load_file as load_excel
    from dtale.cli.loaders.parquet_loader import loader_func as load_parquet

    data_type = get_str_arg(request, "type")
    url = get_str_arg(request, "url")
    proxy = get_str_arg(request, "proxy")
    if data_type == "csv":
        df = load_csv(path=url, proxy=proxy)
        startup_code = (
            "from dtale.cli.loaders.csv_loader import loader_func as load_csv\n\n"
            "df = load_csv(path='{url}'{proxy})"
        ).format(url=url, proxy=", '{}'".format(proxy) if proxy else "")
    elif data_type == "tsv":
        df = load_csv(path=url, proxy=proxy, delimiter="\t")
        startup_code = (
            "from dtale.cli.loaders.csv_loader import loader_func as load_csv\n\n"
            "df = load_csv(path='{url}'{proxy}, delimiter='\t')"
        ).format(url=url, proxy=", '{}'".format(proxy) if proxy else "")
    elif data_type == "json":
        df = load_json(path=url, proxy=proxy)
        startup_code = (
            "from dtale.cli.loaders.json_loader import loader_func as load_json\n\n"
            "df = load_json(path='{url}'{proxy})"
        ).format(url=url, proxy=", '{}'".format(proxy) if proxy else "")
    elif data_type == "excel":
        dfs = load_excel(path=url, proxy=proxy)

        def build_xls_code(sheet_name):
            return (
                "from dtale.cli.loaders.excel_loader import load_file as load_excel\n\n"
                "df = load_excel(sheet_name='{sheet_name}', path='{url}'{proxy})"
            ).format(
                sheet_name=sheet_name,
                url=url,
                proxy=", '{}'".format(proxy) if proxy else "",
            )

        dfs = {
            sheet_name: (df, build_xls_code(sheet_name))
            for sheet_name, df in dfs.items()
        }
        return handle_excel_upload(dfs)
    elif data_type == "parquet":
        df = load_parquet(path=url)
        startup_code = (
            "from dtale.cli.loaders.parquet_loader import loader_func as load_parquet\n\n"
            "df = load_parquet(path='{url}'{proxy})"
        ).format(url=url, proxy=", '{}'".format(proxy) if proxy else "")
    return load_new_data(df, startup_code)
