def vulnerability_scan(
        task,
        domain,
        yaml_configuration,
        results_dir,
        activity_id):
    notification = Notification.objects.all()
    if notification and notification[0].send_scan_status_notif:
        send_notification('Vulnerability scan has been initiated for {}.'.format(domain.name))
    '''
    This function will run nuclei as a vulnerability scanner
    ----
    unfurl the urls to keep only domain and path, this will be sent to vuln scan
    ignore certain file extensions
    Thanks: https://github.com/six2dez/reconftw
    '''
    urls_path = '/alive.txt'
    if task.scan_type.fetch_url:
        os.system('cat {0}/all_urls.txt | grep -Eiv "\\.(eot|jpg|jpeg|gif|css|tif|tiff|png|ttf|otf|woff|woff2|ico|pdf|svg|txt|js|doc|docx)$" | unfurl -u format %s://%d%p >> {0}/unfurl_urls.txt'.format(results_dir))
        os.system(
            'sort -u {0}/unfurl_urls.txt -o {0}/unfurl_urls.txt'.format(results_dir))
        urls_path = '/unfurl_urls.txt'

    vulnerability_result_path = results_dir + '/vulnerability.json'

    vulnerability_scan_input_file = results_dir + urls_path

    nuclei_command = 'nuclei -json -l {} -o {}'.format(
        vulnerability_scan_input_file, vulnerability_result_path)

    # check nuclei config
    if USE_NUCLEI_CONFIG in yaml_configuration[VULNERABILITY_SCAN] and yaml_configuration[VULNERABILITY_SCAN][USE_NUCLEI_CONFIG]:
        nuclei_command += ' -config /root/.config/nuclei/config.yaml'

    '''
    Nuclei Templates
    Either custom template has to be supplied or default template, if neither has
    been supplied then use all templates including custom templates
    '''

    if CUSTOM_NUCLEI_TEMPLATE in yaml_configuration[
            VULNERABILITY_SCAN] or NUCLEI_TEMPLATE in yaml_configuration[VULNERABILITY_SCAN]:
        # check yaml settings for templates
        if NUCLEI_TEMPLATE in yaml_configuration[VULNERABILITY_SCAN]:
            if ALL in yaml_configuration[VULNERABILITY_SCAN][NUCLEI_TEMPLATE]:
                template = NUCLEI_TEMPLATES_PATH
            else:
                _template = ','.join([NUCLEI_TEMPLATES_PATH + str(element)
                                      for element in yaml_configuration[VULNERABILITY_SCAN][NUCLEI_TEMPLATE]])
                template = _template.replace(',', ' -t ')

            # Update nuclei command with templates
            nuclei_command = nuclei_command + ' -t ' + template

        if CUSTOM_NUCLEI_TEMPLATE in yaml_configuration[VULNERABILITY_SCAN]:
            # add .yaml to the custom template extensions
            _template = ','.join(
                [str(element) + '.yaml' for element in yaml_configuration[VULNERABILITY_SCAN][CUSTOM_NUCLEI_TEMPLATE]])
            template = _template.replace(',', ' -t ')
            # Update nuclei command with templates
            nuclei_command = nuclei_command + ' -t ' + template
    else:
        nuclei_command = nuclei_command + ' -t /root/nuclei-templates'

    # check yaml settings for  concurrency
    if NUCLEI_CONCURRENCY in yaml_configuration[VULNERABILITY_SCAN] and yaml_configuration[
            VULNERABILITY_SCAN][NUCLEI_CONCURRENCY] > 0:
        concurrency = yaml_configuration[VULNERABILITY_SCAN][NUCLEI_CONCURRENCY]
        # Update nuclei command with concurrent
        nuclei_command = nuclei_command + ' -c ' + str(concurrency)

    # for severity
    if NUCLEI_SEVERITY in yaml_configuration[VULNERABILITY_SCAN] and ALL not in yaml_configuration[VULNERABILITY_SCAN][NUCLEI_SEVERITY]:
        _severity = ','.join(
            [str(element) for element in yaml_configuration[VULNERABILITY_SCAN][NUCLEI_SEVERITY]])
        severity = _severity.replace(" ", "")
    else:
        severity = "critical, high, medium, low, info"

    # update nuclei templates before running scan
    os.system('nuclei -update-templates')

    for _severity in severity.split(","):
        # delete any existing vulnerability.json file
        if os.path.isfile(vulnerability_result_path):
            os.system('rm {}'.format(vulnerability_result_path))
        # run nuclei
        final_nuclei_command = nuclei_command + ' -severity ' + _severity
        proxy = get_random_proxy()
        if proxy:
            final_nuclei_command += ' --proxy-url {}'.format(proxy)

        logger.info(final_nuclei_command)

        os.system(final_nuclei_command)
        try:
            if os.path.isfile(vulnerability_result_path):
                urls_json_result = open(vulnerability_result_path, 'r')
                lines = urls_json_result.readlines()
                for line in lines:
                    json_st = json.loads(line.strip())
                    host = json_st['host']
                    _subdomain = get_subdomain_from_url(host)
                    try:
                        subdomain = Subdomain.objects.get(
                            name=_subdomain, scan_history=task)
                        vulnerability = Vulnerability()
                        vulnerability.subdomain = subdomain
                        vulnerability.scan_history = task
                        vulnerability.target_domain = domain
                        try:
                            endpoint = EndPoint.objects.get(
                                scan_history=task, target_domain=domain, http_url=host)
                            vulnerability.endpoint = endpoint
                        except Exception as exception:
                            logger.error(exception)
                        if 'name' in json_st['info']:
                            vulnerability.name = json_st['info']['name']
                        if 'severity' in json_st['info']:
                            if json_st['info']['severity'] == 'info':
                                severity = 0
                            elif json_st['info']['severity'] == 'low':
                                severity = 1
                            elif json_st['info']['severity'] == 'medium':
                                severity = 2
                            elif json_st['info']['severity'] == 'high':
                                severity = 3
                            elif json_st['info']['severity'] == 'critical':
                                severity = 4
                            else:
                                severity = 0
                        else:
                            severity = 0
                        vulnerability.severity = severity
                        if 'tags' in json_st['info']:
                            vulnerability.tags = json_st['info']['tags']
                        if 'description' in json_st['info']:
                            vulnerability.description = json_st['info']['description']
                        if 'reference' in json_st['info']:
                            vulnerability.reference = json_st['info']['reference']
                        if 'matched' in json_st:
                            vulnerability.http_url = json_st['matched']
                        if 'templateID' in json_st:
                            vulnerability.template_used = json_st['templateID']
                        if 'description' in json_st:
                            vulnerability.description = json_st['description']
                        if 'matcher_name' in json_st:
                            vulnerability.matcher_name = json_st['matcher_name']
                        if 'extracted_results' in json_st:
                            vulnerability.extracted_results = json_st['extracted_results']
                        vulnerability.discovered_date = timezone.now()
                        vulnerability.open_status = True
                        vulnerability.save()
                        # send notification for all vulnerabilities except info
                        if  severity != "info" and notification and notification[0].send_vuln_notif:
                            message = "*Alert: Vulnerability Identified*"
                            message += "\n\n"
                            message += "A *{}* severity vulnerability has been identified.".format(json_st['info']['severity'])
                            message += "\nVulnerability Name: {}".format(json_st['info']['name'])
                            message += "\nVulnerable URL: {}".format(json_st['host'])
                            send_notification(message)

                        # send report to hackerone
                        if Hackerone.objects.all().exists() and severity != 'info' and severity \
                            != 'low' and vulnerability.target_domain.h1_team_handle:
                            hackerone = Hackerone.objects.all()[0]
                            
                            if hackerone.send_critical and severity == 'critical':
                                send_hackerone_report(vulnerability.id)
                            elif hackerone.send_high and severity == 'high':
                                send_hackerone_report(vulnerability.id)
                            elif hackerone.send_medium and severity == 'medium':
                                send_hackerone_report(vulnerability.id)

                    except ObjectDoesNotExist:
                        logger.error('Object not found')
                        continue

        except Exception as exception:
            logging.error(exception)
            update_last_activity(activity_id, 0)

    if notification and notification[0].send_scan_status_notif:
        info_count = Vulnerability.objects.filter(
            scan_history__id=task.id, severity=0).count()
        low_count = Vulnerability.objects.filter(
            scan_history__id=task.id, severity=1).count()
        medium_count = Vulnerability.objects.filter(
            scan_history__id=task.id, severity=2).count()
        high_count = Vulnerability.objects.filter(
            scan_history__id=task.id, severity=3).count()
        critical_count = Vulnerability.objects.filter(
            scan_history__id=task.id, severity=4).count()
        vulnerability_count = info + low_count + medium_count + high_count + critical_count

        message = 'Vulnerability scan has been completed for {} and discovered {} vulnerabilities.'.format(
            domain.name,
            vulnerability_count
        )
        message += '\n\n*Vulnerability Stats:*'
        message += '\nCritical: {}'.format(critical_count)
        message += '\nHigh: {}'.format(high_count)
        message += '\nMedium: {}'.format(medium_count)
        message += '\nLow: {}'.format(low_count)
        message += '\nInfo: {}'.format(info_count)

        send_notification(message)
