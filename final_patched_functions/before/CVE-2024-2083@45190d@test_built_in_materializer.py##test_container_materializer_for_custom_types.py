def test_container_materializer_for_custom_types(mocker):
    """Test container materializer for custom types.

    This ensures that:
    - The container materializer can handle custom types.
    - Custom types are loaded as the correct type.
    - The materializer of the subtype does not need to be registered in the
        materializer registry when the container is loaded.
    """
    from zenml.materializers.materializer_registry import materializer_registry

    example = [CustomType(), CustomSubType()]
    with TemporaryDirectory() as artifact_uri:
        materializer = BuiltInContainerMaterializer(uri=artifact_uri)

        # Container materializer should find materializer for both elements in
        # the default materializer registry.
        materializer.save(example)

        # When loading, the default materializer registry should no longer be
        # needed because the container materializer should have saved the
        # materializer that was used for each element.
        mocker.patch.object(
            materializer_registry,
            "materializer_types",
            {},
        )
        result = materializer.load(list)

        # Check that the loaded elements are of the correct types.
        assert isinstance(result[0], CustomType)
        assert isinstance(result[1], CustomSubType)
        assert result[0].myname == "aria"
        assert result[1].myname == "axl"
        assert result == example
