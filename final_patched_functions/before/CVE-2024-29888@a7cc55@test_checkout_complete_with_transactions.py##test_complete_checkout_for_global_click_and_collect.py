def test_complete_checkout_for_global_click_and_collect(
    api_client,
    checkout_with_item_for_cc,
    address,
    warehouse_for_cc,
    warehouse,
    transaction_events_generator,
    transaction_item_generator,
):
    """Test that click-and-collect prefers the local stock even if other warehouses hold more stock."""
    # given
    checkout = prepare_checkout_for_test(
        checkout_with_item_for_cc,
        None,
        address,
        None,
        transaction_item_generator,
        transaction_events_generator,
    )

    warehouse_for_cc.click_and_collect_option = (
        WarehouseClickAndCollectOption.ALL_WAREHOUSES
    )
    warehouse_for_cc.save(update_fields=["click_and_collect_option"])

    checkout.collection_point = warehouse_for_cc
    checkout.save(update_fields=["collection_point"])

    variables = {
        "id": to_global_id_or_none(checkout),
        "redirectUrl": "https://www.example.com",
    }

    line = checkout.lines.first()
    variant = line.variant

    # create another stock for the variant with the bigger quantity available
    Stock.objects.create(product_variant=variant, warehouse=warehouse, quantity=50)

    # when
    response = api_client.post_graphql(MUTATION_CHECKOUT_COMPLETE, variables)

    # then
    content = get_graphql_content(response)["data"]["checkoutComplete"]

    assert not content["errors"]
    assert Order.objects.count() == 1

    order = Order.objects.latest("created_at")

    assert order.collection_point == warehouse_for_cc
    assert order.shipping_method is None
    assert order.shipping_address == warehouse_for_cc.address
    assert order.shipping_price == zero_taxed_money(order.channel.currency_code)
    assert order.lines.count() == 1

    # ensure the allocation is made on the correct warehouse
    assert order.lines.first().allocations.first().stock.warehouse == warehouse_for_cc
