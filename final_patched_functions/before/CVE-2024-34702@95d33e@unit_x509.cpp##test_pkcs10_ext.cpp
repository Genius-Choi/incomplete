Test::Result test_pkcs10_ext(const Botan::Private_Key& key,
                             const std::string& sig_padding,
                             const std::string& hash_fn,
                             Botan::RandomNumberGenerator& rng) {
   Test::Result result("PKCS10 extensions");

   Botan::X509_Cert_Options opts;

   opts.dns = "main.example.org";
   opts.more_dns.push_back("more1.example.org");
   opts.more_dns.push_back("more2.example.org");

   opts.padding_scheme = sig_padding;

   Botan::AlternativeName alt_name;
   alt_name.add_attribute("DNS", "bonus.example.org");

   opts.extensions.add(std::make_unique<Botan::Cert_Extension::Subject_Alternative_Name>(alt_name));

   Botan::PKCS10_Request req = Botan::X509::create_cert_req(opts, key, hash_fn, rng);

   std::vector<std::string> alt_dns_names = req.subject_alt_name().get_attribute("DNS");

   result.test_eq("Expected number of DNS names", alt_dns_names.size(), 4);

   // The order is not guaranteed so sort before comparing
   std::sort(alt_dns_names.begin(), alt_dns_names.end());

   if(alt_dns_names.size() == 4) {
      result.test_eq("Expected DNS name 1", alt_dns_names.at(0), "bonus.example.org");
      result.test_eq("Expected DNS name 2", alt_dns_names.at(1), "main.example.org");
      result.test_eq("Expected DNS name 3", alt_dns_names.at(2), "more1.example.org");
      result.test_eq("Expected DNS name 3", alt_dns_names.at(3), "more2.example.org");
   }

   return result;
}
