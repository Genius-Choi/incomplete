def set_headers():
    """
    This tool provide CSRF mitigation.

    * Define X-Frame-Options = DENY
    * Define Cookies SameSite=Lax
    * Define Cookies Secure when https is detected
    * Validate `Origin` and `Referer` on POST, PUT, PATCH, DELETE

    Ref.:
    https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html
    https://cheatsheetseries.owasp.org/cheatsheets/Clickjacking_Defense_Cheat_Sheet.html
    """
    if cherrypy.request.method in ['POST', 'PUT', 'PATCH', 'DELETE']:
        # Check if Origin matches our target.
        origin = cherrypy.request.headers.get('Origin', None)
        if origin and not origin.startswith(cherrypy.request.base):
            raise cherrypy.HTTPError(403, 'Unexpected Origin header')

    response = cherrypy.serving.response
    # Define X-Frame-Options to avoid Clickjacking
    response.headers['X-Frame-Options'] = 'DENY'

    # Enforce security on cookies
    cookie = response.cookie.get('session_id', None)
    if cookie:
        # Awaiting bug fix in cherrypy
        # https://github.com/cherrypy/cherrypy/issues/1767
        # Force SameSite to Lax
        cookie['samesite'] = 'Lax'
        # Check if https is enabled
        https = cherrypy.request.base.startswith('https')
        if https:
            cookie['secure'] = 1
