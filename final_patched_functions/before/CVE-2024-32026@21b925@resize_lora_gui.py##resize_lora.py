def resize_lora(
    model,
    new_rank,
    save_to,
    save_precision,
    device,
    dynamic_method,
    dynamic_param,
    verbose,
):
    # Check for caption_text_input
    if model == "":
        msgbox("Invalid model file")
        return

    # Check if source model exist
    if not os.path.isfile(model):
        msgbox("The provided model is not a file")
        return

    if dynamic_method == "sv_ratio":
        if float(dynamic_param) < 2:
            msgbox(f"Dynamic parameter for {dynamic_method} need to be 2 or greater...")
            return

    if dynamic_method == "sv_fro" or dynamic_method == "sv_cumulative":
        if float(dynamic_param) < 0 or float(dynamic_param) > 1:
            msgbox(
                f"Dynamic parameter for {dynamic_method} need to be between 0 and 1..."
            )
            return

    # Check if save_to end with one of the defines extension. If not add .safetensors.
    if not save_to.endswith((".pt", ".safetensors")):
        save_to += ".safetensors"

    if device == "":
        device = "cuda"

    run_cmd = rf'"{PYTHON}" "{scriptdir}/sd-scripts/networks/resize_lora.py"'
    run_cmd += f" --save_precision {save_precision}"
    run_cmd += rf' --save_to "{save_to}"'
    run_cmd += rf' --model "{model}"'
    run_cmd += f" --new_rank {new_rank}"
    run_cmd += f" --device {device}"
    if not dynamic_method == "None":
        run_cmd += f" --dynamic_method {dynamic_method}"
        run_cmd += f" --dynamic_param {dynamic_param}"
    if verbose:
        run_cmd += f" --verbose"

    log.info(run_cmd)

    env = os.environ.copy()
    env["PYTHONPATH"] = (
        rf"{scriptdir}{os.pathsep}{scriptdir}/sd-scripts{os.pathsep}{env.get('PYTHONPATH', '')}"
    )

    # Run the command
    subprocess.run(run_cmd, shell=True, env=env)

    log.info("Done resizing...")
