TEST_F(ClusterInfoImplTest, UseDownstreamHttpProtocolWithoutDowngrade) {
  const std::string yaml = TestEnvironment::substitute(R"EOF(
    name: name
    connect_timeout: 0.25s
    type: STRICT_DNS
    lb_policy: MAGLEV
    load_assignment:
        endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: foo.bar.com
                    port_value: 443
    transport_socket:
      name: envoy.transport_sockets.quic
      typed_config:
        "@type": type.googleapis.com/envoy.extensions.transport_sockets.quic.v3.QuicUpstreamTransport
        upstream_tls_context:
          common_tls_context:
            tls_certificates:
            - certificate_chain:
                filename: "{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_cert.pem"
              private_key:
                filename: "{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/san_uri_key.pem"
            validation_context:
              trusted_ca:
                filename: "{{ test_rundir }}/test/extensions/transport_sockets/tls/test_data/ca_cert.pem"
              match_subject_alt_names:
              - exact: localhost
              - exact: 127.0.0.1
    typed_extension_protocol_options:
      envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
        "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
        use_downstream_protocol_config:
          http3_protocol_options: {}
        common_http_protocol_options:
          idle_timeout: 1s
  )EOF",
                                                       Network::Address::IpVersion::v4);
  auto cluster = makeCluster(yaml);

  EXPECT_EQ(Http::Protocol::Http10,
            cluster->info()->upstreamHttpProtocol({Http::Protocol::Http10})[0]);
  EXPECT_EQ(Http::Protocol::Http11,
            cluster->info()->upstreamHttpProtocol({Http::Protocol::Http11})[0]);
  EXPECT_EQ(Http::Protocol::Http2,
            cluster->info()->upstreamHttpProtocol({Http::Protocol::Http2})[0]);
  EXPECT_EQ(Http::Protocol::Http3,
            cluster->info()->upstreamHttpProtocol({Http::Protocol::Http3})[0]);
}
