def get_rc():
    """
    <Purpose>
      Reads RCfiles from the paths defined in `RC_PATHS` and returns
      a dictionary with all parsed key-value pairs.

      The RCfile format is as expected by Python's builtin `ConfigParser` with
      the addition that values that contain colons (:) are split at the position
      of the colons and converted into a list.

      Section titles in RCfiles are ignored when parsing the key-value pairs.
      However, there has to be at least one section defined.

      The paths in `RC_PATHS` are ordered in reverse precedence, i.e. each file's
      settings override a previous file's settings, e.g. a setting defined
      in `.in_totorc` (in the current working dir) overrides the same
      setting defined in `~/.in_totorc` (in the user's home dir) and so on ...

      Example:

      ```
      # E.g. file `.in_totorc` in current working directory
      [in-toto setting]
      ARTIFACT_BASE_PATH = /home/user/project
      ARTIFACT_EXCLUDE_PATTERNS = *.link:.gitignore
      LINK_CMD_EXEC_TIMEOUT = 10
      ```

      produces

      ```
      {
        "ARTIFACT_BASE_PATH": "/home/user/project"
        "ARTIFACT_EXCLUDE_PATTERNS": ["*.link", ".gitignore"]
        "LINK_CMD_EXEC_TIMEOUT": "10"
      }
      ```

    <Exceptions>
      None.

    <Side Effects>
      Calls function to read files from disk.

    <Returns>
      A dictionary containing the parsed key-value pairs.

    """
    rc_dict = {}

    config = configparser.ConfigParser()
    # Reset `optionxform`'s default case conversion to enable case-sensitivity
    config.optionxform = str
    config.read(RC_PATHS)

    for section in config.sections():
        for name, value in config.items(section):
            rc_dict[name] = _colon_split(value)

    return rc_dict
