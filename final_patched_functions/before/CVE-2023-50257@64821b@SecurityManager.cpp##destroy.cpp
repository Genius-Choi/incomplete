void SecurityManager::destroy()
{
    disable_security_manager();

    if (authentication_plugin_ != nullptr)
    {
        shared_lock<shared_mutex> _(mutex_);

        SecurityException exception;

        // writer_handles_ and reader_handles_ contents reference the discovered_participants_ ones and are disposed on
        // this collection removal

        for (auto& dp_it : discovered_participants_)
        {
            std::shared_ptr<ParticipantCryptoHandle> participant_crypto_handle = dp_it.second->get_participant_crypto();
            if (participant_crypto_handle != nullptr)
            {
                crypto_plugin_->cryptokeyfactory()->unregister_participant(participant_crypto_handle, exception);
            }

            PermissionsHandle* permissions_handle = dp_it.second->get_permissions_handle();
            if (permissions_handle != nullptr)
            {
                access_plugin_->return_permissions_handle(permissions_handle, exception);
            }

            std::shared_ptr<SecretHandle> shared_secret_handle = dp_it.second->get_shared_secret();
            if (shared_secret_handle != nullptr)
            {
                authentication_plugin_->return_sharedsecret_handle(shared_secret_handle, exception);
            }

            remove_discovered_participant_info(dp_it.second->get_auth());
        }

        if (local_participant_crypto_handle_)
        {
            crypto_plugin_->cryptokeyfactory()->unregister_participant(local_participant_crypto_handle_, exception);
        }

        if (local_permissions_handle_ != nullptr)
        {
            access_plugin_->return_permissions_handle(local_permissions_handle_, exception);
        }

        if (local_identity_handle_ != nullptr)
        {
            authentication_plugin_->return_identity_handle(local_identity_handle_, exception);
        }

    }

    std::lock_guard<shared_mutex> _(mutex_);

    // check the logic
    delete_entities();

    writer_handles_.clear();
    reader_handles_.clear();
    discovered_participants_.clear();

    local_permissions_handle_ = nullptr;
    local_identity_handle_ = nullptr;

    if (crypto_plugin_ != nullptr)
    {
        delete crypto_plugin_;
        crypto_plugin_ = nullptr;
    }

    if (access_plugin_ != nullptr)
    {
        delete access_plugin_;
        access_plugin_ = nullptr;
    }

    if (authentication_plugin_ != nullptr)
    {
        delete authentication_plugin_;
        authentication_plugin_ = nullptr;
    }

    if (logging_plugin_ != nullptr)
    {
        delete logging_plugin_;
        logging_plugin_ = nullptr;
    }
}
