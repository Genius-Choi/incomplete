def getSettings():
    if not Permissions.SETTINGS_READ.can() and not (
        settings().getBoolean(["server", "firstRun"])
        or not userManager.has_been_customized()
    ):
        abort(403)

    s = settings()

    connectionOptions = printer.__class__.get_connection_options()

    # NOTE: Remember to adjust the docs of the data model on the Settings API if anything
    # is changed, added or removed here

    data = {
        "api": {
            "key": s.get(["api", "key"]) if Permissions.ADMIN.can() else None,
            "allowCrossOrigin": s.get(["api", "allowCrossOrigin"]),
        },
        "appearance": {
            "name": s.get(["appearance", "name"]),
            "color": s.get(["appearance", "color"]),
            "colorTransparent": s.getBoolean(["appearance", "colorTransparent"]),
            "colorIcon": s.getBoolean(["appearance", "colorIcon"]),
            "defaultLanguage": s.get(["appearance", "defaultLanguage"]),
            "showFahrenheitAlso": s.getBoolean(["appearance", "showFahrenheitAlso"]),
            "fuzzyTimes": s.getBoolean(["appearance", "fuzzyTimes"]),
            "closeModalsWithClick": s.getBoolean(["appearance", "closeModalsWithClick"]),
            "showInternalFilename": s.getBoolean(["appearance", "showInternalFilename"]),
        },
        "feature": {
            "temperatureGraph": s.getBoolean(["feature", "temperatureGraph"]),
            "sdSupport": s.getBoolean(["feature", "sdSupport"]),
            "keyboardControl": s.getBoolean(["feature", "keyboardControl"]),
            "pollWatched": s.getBoolean(["feature", "pollWatched"]),
            "modelSizeDetection": s.getBoolean(["feature", "modelSizeDetection"]),
            "rememberFileFolder": s.getBoolean(["feature", "rememberFileFolder"]),
            "printStartConfirmation": s.getBoolean(["feature", "printStartConfirmation"]),
            "printCancelConfirmation": s.getBoolean(
                ["feature", "printCancelConfirmation"]
            ),
            "uploadOverwriteConfirmation": s.getBoolean(
                ["feature", "uploadOverwriteConfirmation"]
            ),
            "g90InfluencesExtruder": s.getBoolean(["feature", "g90InfluencesExtruder"]),
            "autoUppercaseBlacklist": s.get(["feature", "autoUppercaseBlacklist"]),
            "enableDragDropUpload": s.getBoolean(["feature", "enableDragDropUpload"]),
        },
        "gcodeAnalysis": {
            "runAt": s.get(["gcodeAnalysis", "runAt"]),
            "bedZ": s.getFloat(["gcodeAnalysis", "bedZ"]),
        },
        "serial": {
            "port": connectionOptions["portPreference"],
            "baudrate": connectionOptions["baudratePreference"],
            "exclusive": s.getBoolean(["serial", "exclusive"]),
            "lowLatency": s.getBoolean(["serial", "lowLatency"]),
            "portOptions": connectionOptions["ports"],
            "baudrateOptions": connectionOptions["baudrates"],
            "autoconnect": s.getBoolean(["serial", "autoconnect"]),
            "timeoutConnection": s.getFloat(["serial", "timeout", "connection"]),
            "timeoutDetectionFirst": s.getFloat(["serial", "timeout", "detectionFirst"]),
            "timeoutDetectionConsecutive": s.getFloat(
                ["serial", "timeout", "detectionConsecutive"]
            ),
            "timeoutCommunication": s.getFloat(["serial", "timeout", "communication"]),
            "timeoutCommunicationBusy": s.getFloat(
                ["serial", "timeout", "communicationBusy"]
            ),
            "timeoutTemperature": s.getFloat(["serial", "timeout", "temperature"]),
            "timeoutTemperatureTargetSet": s.getFloat(
                ["serial", "timeout", "temperatureTargetSet"]
            ),
            "timeoutTemperatureAutoreport": s.getFloat(
                ["serial", "timeout", "temperatureAutoreport"]
            ),
            "timeoutSdStatus": s.getFloat(["serial", "timeout", "sdStatus"]),
            "timeoutSdStatusAutoreport": s.getFloat(
                ["serial", "timeout", "sdStatusAutoreport"]
            ),
            "timeoutPosAutoreport": s.getFloat(["serial", "timeout", "posAutoreport"]),
            "timeoutBaudrateDetectionPause": s.getFloat(
                ["serial", "timeout", "baudrateDetectionPause"]
            ),
            "timeoutPositionLogWait": s.getFloat(
                ["serial", "timeout", "positionLogWait"]
            ),
            "log": s.getBoolean(["serial", "log"]),
            "additionalPorts": s.get(["serial", "additionalPorts"]),
            "additionalBaudrates": s.get(["serial", "additionalBaudrates"]),
            "blacklistedPorts": s.get(["serial", "blacklistedPorts"]),
            "blacklistedBaudrates": s.get(["serial", "blacklistedBaudrates"]),
            "longRunningCommands": s.get(["serial", "longRunningCommands"]),
            "checksumRequiringCommands": s.get(["serial", "checksumRequiringCommands"]),
            "blockedCommands": s.get(["serial", "blockedCommands"]),
            "ignoredCommands": s.get(["serial", "ignoredCommands"]),
            "pausingCommands": s.get(["serial", "pausingCommands"]),
            "sdCancelCommand": s.get(["serial", "sdCancelCommand"]),
            "emergencyCommands": s.get(["serial", "emergencyCommands"]),
            "helloCommand": s.get(["serial", "helloCommand"]),
            "ignoreErrorsFromFirmware": s.getBoolean(
                ["serial", "ignoreErrorsFromFirmware"]
            ),
            "disconnectOnErrors": s.getBoolean(["serial", "disconnectOnErrors"]),
            "triggerOkForM29": s.getBoolean(["serial", "triggerOkForM29"]),
            "logPositionOnPause": s.getBoolean(["serial", "logPositionOnPause"]),
            "logPositionOnCancel": s.getBoolean(["serial", "logPositionOnCancel"]),
            "abortHeatupOnCancel": s.getBoolean(["serial", "abortHeatupOnCancel"]),
            "supportResendsWithoutOk": s.get(["serial", "supportResendsWithoutOk"]),
            "waitForStart": s.getBoolean(["serial", "waitForStartOnConnect"]),
            "waitToLoadSdFileList": s.getBoolean(["serial", "waitToLoadSdFileList"]),
            "alwaysSendChecksum": s.getBoolean(["serial", "alwaysSendChecksum"]),
            "neverSendChecksum": s.getBoolean(["serial", "neverSendChecksum"]),
            "sendChecksumWithUnknownCommands": s.getBoolean(
                ["serial", "sendChecksumWithUnknownCommands"]
            ),
            "unknownCommandsNeedAck": s.getBoolean(["serial", "unknownCommandsNeedAck"]),
            "sdRelativePath": s.getBoolean(["serial", "sdRelativePath"]),
            "sdAlwaysAvailable": s.getBoolean(["serial", "sdAlwaysAvailable"]),
            "sdLowerCase": s.getBoolean(["serial", "sdLowerCase"]),
            "swallowOkAfterResend": s.getBoolean(["serial", "swallowOkAfterResend"]),
            "repetierTargetTemp": s.getBoolean(["serial", "repetierTargetTemp"]),
            "externalHeatupDetection": s.getBoolean(
                ["serial", "externalHeatupDetection"]
            ),
            "ignoreIdenticalResends": s.getBoolean(["serial", "ignoreIdenticalResends"]),
            "firmwareDetection": s.getBoolean(["serial", "firmwareDetection"]),
            "blockWhileDwelling": s.getBoolean(["serial", "blockWhileDwelling"]),
            "useParityWorkaround": s.get(["serial", "useParityWorkaround"]),
            "sanityCheckTools": s.getBoolean(["serial", "sanityCheckTools"]),
            "notifySuppressedCommands": s.get(["serial", "notifySuppressedCommands"]),
            "sendM112OnError": s.getBoolean(["serial", "sendM112OnError"]),
            "disableSdPrintingDetection": s.getBoolean(
                ["serial", "disableSdPrintingDetection"]
            ),
            "ackMax": s.getInt(["serial", "ackMax"]),
            "maxTimeoutsIdle": s.getInt(["serial", "maxCommunicationTimeouts", "idle"]),
            "maxTimeoutsPrinting": s.getInt(
                ["serial", "maxCommunicationTimeouts", "printing"]
            ),
            "maxTimeoutsLong": s.getInt(["serial", "maxCommunicationTimeouts", "long"]),
            "capAutoreportTemp": s.getBoolean(
                ["serial", "capabilities", "autoreport_temp"]
            ),
            "capAutoreportSdStatus": s.getBoolean(
                ["serial", "capabilities", "autoreport_sdstatus"]
            ),
            "capAutoreportPos": s.getBoolean(
                ["serial", "capabilities", "autoreport_pos"]
            ),
            "capBusyProtocol": s.getBoolean(["serial", "capabilities", "busy_protocol"]),
            "capEmergencyParser": s.getBoolean(
                ["serial", "capabilities", "emergency_parser"]
            ),
            "capExtendedM20": s.getBoolean(["serial", "capabilities", "extended_m20"]),
            "capLfnWrite": s.getBoolean(["serial", "capabilities", "lfn_write"]),
            "resendRatioThreshold": s.getInt(["serial", "resendRatioThreshold"]),
            "resendRatioStart": s.getInt(["serial", "resendRatioStart"]),
            "ignoreEmptyPorts": s.getBoolean(["serial", "ignoreEmptyPorts"]),
            "encoding": s.get(["serial", "encoding"]),
            "enableShutdownActionCommand": s.get(
                ["serial", "enableShutdownActionCommand"]
            ),
        },
        "folder": {
            "uploads": s.getBaseFolder("uploads"),
            "timelapse": s.getBaseFolder("timelapse"),
            "watched": s.getBaseFolder("watched"),
        },
        "temperature": {
            "profiles": s.get(["temperature", "profiles"]),
            "cutoff": s.getInt(["temperature", "cutoff"]),
            "sendAutomatically": s.getBoolean(["temperature", "sendAutomatically"]),
            "sendAutomaticallyAfter": s.getInt(
                ["temperature", "sendAutomaticallyAfter"], min=0, max=30
            ),
        },
        "system": {
            "actions": s.get(["system", "actions"]),
            "events": s.get(["system", "events"]),
        },
        "terminalFilters": s.get(["terminalFilters"]),
        "scripts": {
            "gcode": {
                "afterPrinterConnected": None,
                "beforePrinterDisconnected": None,
                "beforePrintStarted": None,
                "afterPrintCancelled": None,
                "afterPrintDone": None,
                "beforePrintPaused": None,
                "afterPrintResumed": None,
                "beforeToolChange": None,
                "afterToolChange": None,
                "snippets": {},
            }
        },
        "server": {
            "commands": {
                "systemShutdownCommand": s.get(
                    ["server", "commands", "systemShutdownCommand"]
                ),
                "systemRestartCommand": s.get(
                    ["server", "commands", "systemRestartCommand"]
                ),
                "serverRestartCommand": s.get(
                    ["server", "commands", "serverRestartCommand"]
                ),
            },
            "diskspace": {
                "warning": s.getInt(["server", "diskspace", "warning"]),
                "critical": s.getInt(["server", "diskspace", "critical"]),
            },
            "onlineCheck": {
                "enabled": s.getBoolean(["server", "onlineCheck", "enabled"]),
                "interval": int(s.getInt(["server", "onlineCheck", "interval"]) / 60),
                "host": s.get(["server", "onlineCheck", "host"]),
                "port": s.getInt(["server", "onlineCheck", "port"]),
                "name": s.get(["server", "onlineCheck", "name"]),
            },
            "pluginBlacklist": {
                "enabled": s.getBoolean(["server", "pluginBlacklist", "enabled"]),
                "url": s.get(["server", "pluginBlacklist", "url"]),
                "ttl": int(s.getInt(["server", "pluginBlacklist", "ttl"]) / 60),
            },
            "allowFraming": s.getBoolean(["server", "allowFraming"]),
        },
        "devel": {"pluginTimings": s.getBoolean(["devel", "pluginTimings"])},
        "slicing": {"defaultSlicer": s.get(["slicing", "defaultSlicer"])},
    }

    gcode_scripts = s.listScripts("gcode")
    if gcode_scripts:
        data["scripts"] = {"gcode": {}}
        for name in gcode_scripts:
            data["scripts"]["gcode"][name] = s.loadScript("gcode", name, source=True)

    plugin_settings = _get_plugin_settings()
    if len(plugin_settings):
        data["plugins"] = plugin_settings

    if Permissions.WEBCAM.can() or (
        settings().getBoolean(["server", "firstRun"])
        and not userManager.has_been_customized()
    ):
        webcamsDict = get_webcams_as_dicts()
        data["webcam"] = {
            "webcamEnabled": s.getBoolean(["webcam", "webcamEnabled"]),
            "timelapseEnabled": s.getBoolean(["webcam", "timelapseEnabled"]),
            "ffmpegPath": s.get(["webcam", "ffmpeg"]),
            "ffmpegCommandline": s.get(["webcam", "ffmpegCommandline"]),
            "bitrate": s.get(["webcam", "bitrate"]),
            "ffmpegThreads": s.get(["webcam", "ffmpegThreads"]),
            "ffmpegVideoCodec": s.get(["webcam", "ffmpegVideoCodec"]),
            "watermark": s.getBoolean(["webcam", "watermark"]),
            # webcams & defaults
            "webcams": webcamsDict,
            "defaultWebcam": None,
            "snapshotWebcam": None,
        }

        for key in DEPRECATED_WEBCAM_KEYS:
            data["webcam"][key] = None

        defaultWebcam = get_default_webcam()
        if defaultWebcam:
            data["webcam"].update(
                {
                    "flipH": defaultWebcam.config.flipH,
                    "flipV": defaultWebcam.config.flipV,
                    "rotate90": defaultWebcam.config.rotate90,
                    "defaultWebcam": defaultWebcam.config.name,
                }
            )

        compatWebcam = defaultWebcam.config.compat if defaultWebcam is not None else None
        if compatWebcam:
            data["webcam"].update(
                {
                    "streamUrl": compatWebcam.stream,
                    "streamRatio": compatWebcam.streamRatio,
                    "streamTimeout": compatWebcam.streamTimeout,
                    "streamWebrtcIceServers": compatWebcam.streamWebrtcIceServers,
                    "snapshotUrl": compatWebcam.snapshot,
                    "snapshotTimeout": compatWebcam.snapshotTimeout,
                    "snapshotSslValidation": compatWebcam.snapshotSslValidation,
                    "cacheBuster": compatWebcam.cacheBuster,
                }
            )

        snapshotWebcam = get_snapshot_webcam()
        if snapshotWebcam:
            data["webcam"].update(
                {
                    "snapshotWebcam": snapshotWebcam.config.name,
                }
            )
    else:
        data["webcam"] = {}

    return jsonify(data)
