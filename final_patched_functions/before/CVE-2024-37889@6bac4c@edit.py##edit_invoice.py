def edit_invoice(request: HtmxHttpRequest, invoice_id):
    try:
        invoice = Invoice.objects.get(id=invoice_id)
    except Invoice.DoesNotExist:
        return JsonResponse({"message": "Invoice not found"}, status=404)

    if request.user.logged_in_as_team and request.user.logged_in_as_team != invoice.organization:
        return JsonResponse(
            {"message": "You do not have permission to edit this invoice"},
            status=403,
        )
    elif request.user != invoice.user:
        return JsonResponse(
            {"message": "You do not have permission to edit this invoice"},
            status=403,
        )

    attributes_to_updates = {
        "date_due": datetime.strptime(request.POST.get("date_due"), "%Y-%m-%d").date(),  # type: ignore[arg-type]
        "date_issued": request.POST.get("date_issued"),
        "self_name": request.POST.get("from_name"),
        "self_company": request.POST.get("from_company"),
        "self_address": request.POST.get("from_address"),
        "self_city": request.POST.get("from_city"),
        "self_county": request.POST.get("from_county"),
        "self_country": request.POST.get("from_country"),
        "notes": request.POST.get("notes"),
        "invoice_number": request.POST.get("invoice_number"),
        "vat_number": request.POST.get("vat_number"),
        "reference": request.POST.get("reference"),
        "sort_code": request.POST.get("sort_code"),
        "account_number": request.POST.get("account_number"),
        "account_holder_name": request.POST.get("account_holder_name"),
    }

    client_to_id = request.POST.get("selected_client")
    try:
        client_to_obj = Client.objects.get(id=client_to_id, user=request.user)  # type: ignore[misc]
    except (Client.DoesNotExist, ValueError):
        client_to_obj = None

    if client_to_obj:
        invoice.client_to = client_to_obj
    else:
        attributes_to_updates.update(
            {
                "client_name": request.POST.get("to_name"),
                "client_company": request.POST.get("to_company"),
                "client_address": request.POST.get("to_address"),
                "client_city": request.POST.get("to_city"),
                "client_county": request.POST.get("to_county"),
                "client_country": request.POST.get("to_country"),
            }
        )

    for column_name, new_value in attributes_to_updates.items():
        setattr(invoice, column_name, new_value)

    invoice_items = [
        InvoiceItem.objects.create(name=row[0], description=row[1], hours=row[2], price_per_hour=row[3])
        for row in zip(
            request.POST.getlist("service_name[]"),
            request.POST.getlist("service_description[]"),
            request.POST.getlist("hours[]"),
            request.POST.getlist("price_per_hour[]"),
        )
    ]

    if invoice_items:
        invoice.items.set(invoice_items)

    invoice.save()

    messages.success(request, "Invoice edited")

    if request.htmx:
        return render(request, "base/toasts.html")

    return invoice_edit_page_get(request, invoice_id)
