  def post_reactions_users
    id = params.require(:id).to_i
    reaction_value = params[:reaction_value]
    post = Post.find_by(id: id)

    raise Discourse::InvalidParameters if !post

    reaction_users = []

    likes =
      post.post_actions.where(
        "deleted_at IS NULL AND post_action_type_id = ?",
        PostActionType.types[:like],
      ) if !reaction_value || reaction_value == DiscourseReactions::Reaction.main_reaction_id

    if likes.present?
      main_reaction =
        DiscourseReactions::Reaction.find_by(
          reaction_value: DiscourseReactions::Reaction.main_reaction_id,
          post_id: post.id,
        )
      count = likes.length
      users = format_likes_users(likes)

      if main_reaction && main_reaction[:reaction_users_count]
        (users << get_users(main_reaction)).flatten!
        users.sort_by! { |user| user[:created_at] }
        count += main_reaction.reaction_users_count.to_i
      end

      reaction_users << {
        id: DiscourseReactions::Reaction.main_reaction_id,
        count: count,
        users: users.reverse.slice(0, MAX_USERS_COUNT + 1),
      }
    end

    if !reaction_value
      post
        .reactions
        .select do |reaction|
          reaction[:reaction_users_count] &&
            reaction[:reaction_value] != DiscourseReactions::Reaction.main_reaction_id
        end
        .each { |reaction| reaction_users << format_reaction_user(reaction) }
    elsif reaction_value != DiscourseReactions::Reaction.main_reaction_id
      post
        .reactions
        .where(reaction_value: reaction_value)
        .select { |reaction| reaction[:reaction_users_count] }
        .each { |reaction| reaction_users << format_reaction_user(reaction) }
    end

    render_json_dump(reaction_users: reaction_users)
  end
