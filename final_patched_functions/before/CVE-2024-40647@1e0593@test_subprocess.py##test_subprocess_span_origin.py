def test_subprocess_span_origin(sentry_init, capture_events):
    sentry_init(integrations=[StdlibIntegration()], traces_sample_rate=1.0)
    events = capture_events()

    with start_transaction(name="foo"):
        args = [
            sys.executable,
            "-c",
            "print('hello world')",
        ]
        kw = {"args": args, "stdout": subprocess.PIPE}

        popen = subprocess.Popen(**kw)
        popen.communicate()
        popen.poll()

    (event,) = events

    assert event["contexts"]["trace"]["origin"] == "manual"

    assert event["spans"][0]["op"] == "subprocess"
    assert event["spans"][0]["origin"] == "auto.subprocess.stdlib.subprocess"

    assert event["spans"][1]["op"] == "subprocess.communicate"
    assert event["spans"][1]["origin"] == "auto.subprocess.stdlib.subprocess"

    assert event["spans"][2]["op"] == "subprocess.wait"
    assert event["spans"][2]["origin"] == "auto.subprocess.stdlib.subprocess"
