  def handle_secure_upload_request(upload, path_with_ext = nil)
    if upload.access_control_post_id.present?
      raise Discourse::InvalidAccess if !guardian.can_see?(upload.access_control_post)
    else
      return render_404 if current_user.nil?
    end

    # defaults to public: false, so only cached by the client browser
    cache_seconds =
      SiteSetting.s3_presigned_get_url_expires_after_seconds - SECURE_REDIRECT_GRACE_SECONDS
    expires_in cache_seconds.seconds

    # url_for figures out the full URL, handling multisite DBs,
    # and will return a presigned URL for the upload
    if path_with_ext.blank?
      return(
        redirect_to Discourse.store.url_for(upload, force_download: force_download?),
                    allow_other_host: true
      )
    end

    redirect_to Discourse.store.signed_url_for_path(
                  path_with_ext,
                  expires_in: SiteSetting.s3_presigned_get_url_expires_after_seconds,
                  force_download: force_download?,
                ),
                allow_other_host: true
  end
