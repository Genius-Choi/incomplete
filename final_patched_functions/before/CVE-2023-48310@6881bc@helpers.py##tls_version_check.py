def tls_version_check(domain: str, service):
    """
    Checks the version of TLS.
    """
    nmap = nmap3.Nmap()
    logger.info(f"tls scan: Scanning host/domain {domain}")
    tls_scans = nmap.nmap_version_detection(domain, args="--script ssl-enum-ciphers")
    ip, tls_scans = list(tls_scans.items())[0]
    tls_scans = list(
        filter(lambda element: element["state"] == "open", tls_scans["ports"])
    )

    results = None

    for port in tls_scans:
        logger.info(f"tls scan: Testing port {port.get('portid')}")
        if service == "web":
            if (
                (port.get("service").get("name") == "ssl")
                or (
                    port.get("portid") == "443"
                    and port.get("service").get("name") == "http"
                )
                or (port.get("service").get("name") == "https")
            ):
                for script in port["scripts"]:
                    if script.get("name") == "ssl-enum-ciphers":
                        results = script["data"]
        elif service == "mail":
            if port.get("portid") == "25":
                for script in port["scripts"]:
                    if script.get("name") == "ssl-enum-ciphers":
                        results = script["data"]

    try:
        results.pop("least strength", None)
    except AttributeError:
        pass
    for k in results.keys():
        results[k] = results[k]["ciphers"]["children"]

    lowest_sec_level = {}
    for tls_version in results:
        for ciphersuite in results[tls_version]:
            ciphersuite.pop("strength")
            try:
                cipher_info = json.loads(
                    requests.get(
                        f"https://ciphersuite.info/api/cs/{ciphersuite['name']}"
                    ).text
                )[ciphersuite["name"]]
            except Exception:
                continue
            for key in ["gnutls_name", "openssl_name", "hex_byte_1", "hex_byte_2"]:
                cipher_info.pop(key)
            cipher_info["tls_version"] = tls_version
            ciphersuite.update(cipher_info)
        ci = load_cipher_info(results[tls_version])
        results[tls_version] = ci["result"]
        lowest_sec_level.update({f"{tls_version}": ci["lowest_sec_level"]})
    logger.info("server scan: Done!")
    return {"result": results, "lowest_sec_level": lowest_sec_level}
