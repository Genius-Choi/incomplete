def run_cmd_in_pty(cmd, print_cmd=True, print_output=True, columns=120):
    """Similar to run_subprocess(), but the command is executed in a pseudo-terminal.

    The pseudo-terminal can be useful when a command prints out a different output with or without an active terminal
    session. E.g. yumdownloader does not print the name of the downloaded rpm if not executed from a terminal.
    Switching off printing the command can be useful in case it contains a password in plain text.

    :param cmd: The command to execute, including the options, e.g. "ls -al"
    :type cmd: string
    :param print_cmd: Log the command (to both logfile and stdout)
    :type print_cmd: bool
    :param print_output: Log the combined stdout and stderr of the executed command (to both logfile and stdout)
    :type print_output: bool
    :param columns: Number of columns of the pseudo-terminal (characters on a line). This may influence the output.
    :type columns: int
    :return: The output (combined stdout and stderr) and the return code of the executed command
    :rtype: tuple
    """
    # This check is here because we passed in strings in the past and changed to a list
    # for security hardening.  Remove this once everyone is comfortable with using a list
    # instead.
    if isinstance(cmd, str):
        raise TypeError("cmd should be a list, not a str")

    if print_cmd:
        loggerinst.debug("Calling command '%s'" % " ".join(cmd))

    class PexpectSizedWindowSpawn(pexpect.spawn):
        # https://github.com/pexpect/pexpect/issues/134
        def setwinsize(self, rows, cols):
            super(PexpectSizedWindowSpawn, self).setwinsize(0, columns)

    process = PexpectSizedWindowSpawn(cmd[0], cmd[1:], env={"LC_ALL": "C"}, timeout=None)

    # The setting of window size is super unreliable
    process.setwinsize(0, columns)
    loggerinst.debug("Pseudo-PTY columns set to: %s" % (process.getwinsize(),))

    process.expect(pexpect.EOF)
    output = process.before.decode()
    if print_output:
        loggerinst.info(output.rstrip("\n"))

    process.close()  # Per the pexpect API, this is necessary in order to get the return code
    return_code = process.exitstatus

    return output, return_code
