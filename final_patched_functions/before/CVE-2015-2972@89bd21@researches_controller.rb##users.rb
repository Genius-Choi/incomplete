  def users
    Log.add_info(request, params.inspect)

    con = []

    unless params[:keyword].blank?
      key_array = params[:keyword].split(nil)
      key_array.each do |key| 
        con << SqlHelper.get_sql_like([:name, :email, :fullname, :address, :organization], key)
      end
    end

    @group_id = nil
    if !params[:thetisBoxSelKeeper].nil?
      @group_id = params[:thetisBoxSelKeeper].split(':').last
    elsif !params[:group_id].blank?
      @group_id = params[:group_id]
    end
    unless @group_id.nil?
      con << SqlHelper.get_sql_like([:groups], "|#{@group_id}|")
    end

    include_research = false

    filter_status = params[:filter_status]

    unless filter_status.blank?
      SqlHelper.validate_token([filter_status])
      case filter_status
        when Research::U_STATUS_IN_ACTON.to_s, Research::U_STATUS_COMMITTED.to_s
          con << "((Research.user_id=User.id) and (Research.status=#{filter_status}))"
          include_research = true
        when (-1).to_s
          researches = Research.where(nil).to_a
          except_users = []
          unless researches.nil?
            researches.each do |research|
              except_users << research.user_id
            end
          end
          unless except_users.empty?
            con << '(User.id not in (' + except_users.join(',') + '))'
          end
        else
          ;
      end
    end

    where = ''
    unless con.empty?
      where = ' where ' + con.join(' and ')
    end

    order_by = nil
    @sort_col = params[:sort_col]
    @sort_type = params[:sort_type]

    if @sort_col.blank? or @sort_type.blank?
      @sort_col = 'id'
      @sort_type = 'ASC'
    end
    SqlHelper.validate_token([@sort_col, @sort_type])
    order_by = ' order by ' + @sort_col + ' ' + @sort_type

    sql = 'select distinct User.* from users User'
    if include_research
      sql << ', researches Research'
    end
    sql << where + order_by

    @user_pages, @users, @total_num = paginate_by_sql(User, sql, 50)
  end
