def validate_scim_bearer_token(request: HttpRequest) -> Optional[SCIMClient]:
    """
    This function verifies the request is allowed to make SCIM requests on this subdomain,
    by checking the provided bearer token and ensuring it matches a scim client configured
    for this subdomain in settings.SCIM_CONFIG.
    If successful, returns the corresponding SCIMClient object. Returns None otherwise.
    """

    subdomain = get_subdomain(request)
    scim_config_dict = settings.SCIM_CONFIG.get(subdomain)
    if not scim_config_dict:
        return None

    valid_bearer_token = scim_config_dict.get("bearer_token")
    scim_client_name = scim_config_dict.get("scim_client_name")
    # We really don't want a misconfiguration where this is unset,
    # allowing free access to the SCIM API:
    assert valid_bearer_token
    assert scim_client_name

    if request.headers.get("Authorization") != f"Bearer {valid_bearer_token}":
        return None

    request_notes = RequestNotes.get_notes(request)
    assert request_notes.realm

    # While API authentication code paths are sufficiently high
    # traffic that we prefer to use a cache, SCIM is much lower
    # traffic, and doing a database query is plenty fast.
    return SCIMClient.objects.get(realm=request_notes.realm, name=scim_client_name)
