def create_script(command):
    """Write out a script onto a target.

    This method should be backward compatible with Python 2.4+ when executing
    from within the container.

    :param command: command to run, this can be a script and can use spacing
                    with newlines as separation.
    :type command: ``str``
    """

    import os
    import os.path as path
    import subprocess
    import tempfile

    # Ensure that the directory /opt exists.
    if not path.isdir('/opt'):
        os.mkdir('/opt')

    # Create the script.
    script_file = path.join('/opt', '.lxc-attach-script')
    f = open(script_file, 'wb')
    try:
        f.write(ATTACH_TEMPLATE % {'container_command': command})
        f.flush()
    finally:
        f.close()

    # Ensure the script is executable.
    os.chmod(script_file, 0700)

    # Get temporary directory.
    tempdir = tempfile.gettempdir()

    # Output log file.
    stdout_file = open(path.join(tempdir, 'lxc-attach-script.log'), 'ab')

    # Error log file.
    stderr_file = open(path.join(tempdir, 'lxc-attach-script.err'), 'ab')

    # Execute the script command.
    try:
        subprocess.Popen(
            [script_file],
            stdout=stdout_file,
            stderr=stderr_file
        ).communicate()
    finally:
        # Close the log files.
        stderr_file.close()
        stdout_file.close()

        # Remove the script file upon completion of execution.
        os.remove(script_file)
