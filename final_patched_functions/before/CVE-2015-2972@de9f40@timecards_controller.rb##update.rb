  def update
    Log.add_info(request, params.inspect)

    if params[:id].nil? or params[:id].empty?
      @timecard = Timecard.new
    else
      @timecard = Timecard.find(params[:id])
    end

    options = params[:timecard]['options']
    if options.nil?
      params[:timecard]['options'] = nil
    else
      params[:timecard]['options'] = '|' + options.join('|') + '|'
    end

    if params[:user_id].nil? or params[:user_id].empty?
      @selected_user = @login_user
    elsif @login_user.id.to_s == params[:user_id]
      @selected_user = @login_user
    else
      unless @login_user.admin?(User::AUTH_TIMECARD)
        Log.add_check(request, '[User::AUTH_TIMECARD]'+request.to_s)
        redirect_to(:controller => 'frames', :action => 'http_error', :id => '401')
        return
      end

      @selected_user = User.find(params[:user_id])
    end

    if Timecard.off?(params[:timecard]['workcode'])
      params[:timecard]['start'] = nil
      params[:timecard]['end'] = nil
      params[:timecard]['options'] = nil
    else

      breaks = @timecard.get_breaks_a
      unless breaks.empty?
        check_error = false

        unless params[:timecard]['start'].nil? or params[:timecard]['start'].empty?
          start_t = UtilDateTime.parse(params[:timecard]['start']).to_time
          check_error = true if breaks.first.first < start_t
        end

        unless params[:timecard]['end'].nil? or params[:timecard]['end'].empty?
          end_t = UtilDateTime.parse(params[:timecard]['end']).to_time
          check_error = true if end_t < breaks.last.last
        end

        if check_error
          flash[:notice] = 'ERROR:' + t('timecard.break_out_of_labor')
          render(:partial => 'ajax_update_break', :layout => false)
          return
        end
      end
    end

    if (@login_user.id.to_s != params[:timecard][:user_id] and !@login_user.admin?(User::AUTH_TIMECARD)) \
        or (!@timecard.user_id.nil? and @timecard.user_id.to_s != params[:timecard][:user_id])
      Log.add_check(request, '[User::AUTH_TIMECARD]'+request.to_s)
      redirect_to(:controller => 'frames', :action => 'http_error', :id => '401')
      return
    end

    if @timecard.update_attributes(params.require(:timecard).permit(Timecard::PERMIT_BASE))

      if @timecard.off? and !@timecard.get_breaks_a.empty?
        @timecard.update_breaks(nil)
      end

      flash[:notice] = t('msg.update_success')

      unless @timecard.start.nil? or @timecard.end.nil?
        @timecard.set_default_breaks
      end
    end

    render(:partial => 'ajax_update_break', :layout => false)
  end
