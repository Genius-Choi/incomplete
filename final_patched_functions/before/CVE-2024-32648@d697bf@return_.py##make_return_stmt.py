def make_return_stmt(stmt, context, begin_pos, _size, loop_memory_position=None):
    # TODO check this out
    func_type = stmt.get_ancestor(vy_ast.FunctionDef)._metadata["type"]
    _, nonreentrant_post = get_nonreentrant_lock(func_type)

    if context.is_internal:
        if loop_memory_position is None:
            loop_memory_position = context.new_internal_variable(BaseType("uint256"))

        # Make label for stack push loop.
        label_id = "_".join([str(x) for x in (context.method_id, stmt.lineno, stmt.col_offset)])
        exit_label = f"make_return_loop_exit_{label_id}"
        start_label = f"make_return_loop_start_{label_id}"

        # Push prepared data onto the stack,
        # in reverse order so it can be popped of in order.
        if isinstance(begin_pos, int) and isinstance(_size, int):
            # static values, unroll the mloads instead.
            mloads = [["mload", pos] for pos in range(begin_pos, _size, 32)]
        else:
            mloads = [
                "seq_unchecked",
                ["mstore", loop_memory_position, _size],
                ["label", start_label],
                [  # maybe exit loop / break.
                    "if",
                    ["le", ["mload", loop_memory_position], 0],
                    ["goto", exit_label],
                ],
                [  # push onto stack
                    "mload",
                    ["add", begin_pos, ["sub", ["mload", loop_memory_position], 32]],
                ],
                [  # decrement i by 32.
                    "mstore",
                    loop_memory_position,
                    ["sub", ["mload", loop_memory_position], 32],
                ],
                ["goto", start_label],
                ["label", exit_label],
            ]

        # if we are in a for loop, we have to exit prior to returning
        exit_repeater = ["exit_repeater"] if context.forvars else []

        return (
            ["seq_unchecked"]
            + exit_repeater
            + mloads
            + nonreentrant_post
            + [["jump", ["mload", context.callback_ptr]]]
        )
    else:
        return ["seq_unchecked"] + nonreentrant_post + [["return", begin_pos, _size]]
