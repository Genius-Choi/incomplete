std::string unpack_kheaders_tar_xz(const struct utsname &utsname)
{
  std::error_code ec;
#if defined(__ANDROID__)
  std_filesystem::path path_prefix{ "/data/local/tmp" };
#else
  std_filesystem::path path_prefix{ "/tmp" };
#endif
  std_filesystem::path path_kheaders{ "/sys/kernel/kheaders.tar.xz" };
  if (const char *tmpdir = ::getenv("TMPDIR")) {
    path_prefix = tmpdir;
  }
  path_prefix /= "kheaders-";
  std_filesystem::path shared_path{ path_prefix.string() + utsname.release };

  if (std_filesystem::exists(shared_path, ec)) {
    // already unpacked
    return shared_path.string();
  }

  if (!std_filesystem::exists(path_kheaders, ec)) {
    StderrSilencer silencer;
    silencer.silence();

    FILE *modprobe = ::popen("modprobe kheaders", "w");
    if (modprobe == nullptr || pclose(modprobe) != 0) {
      return "";
    }

    if (!std_filesystem::exists(path_kheaders, ec)) {
      return "";
    }
  }

  KernelHeaderTmpDir tmpdir{ path_prefix };

  FILE *tar = ::popen(
      ("tar xf /sys/kernel/kheaders.tar.xz -C " + tmpdir.path).c_str(), "w");
  if (!tar) {
    return "";
  }

  int rc = ::pclose(tar);
  if (rc == 0) {
    tmpdir.move_to(shared_path);
    return shared_path;
  }

  return "";
}
