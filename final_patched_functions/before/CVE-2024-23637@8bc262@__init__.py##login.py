def login():
    data = request.get_json(silent=True)
    if not data:
        data = request.values

    if "user" in data and "pass" in data:
        username = data["user"]
        password = data["pass"]
        remote_addr = get_remote_address(request)

        if "remember" in data and data["remember"] in valid_boolean_trues:
            remember = True
        else:
            remember = False

        if "usersession.id" in session:
            _logout(current_user)

        user = octoprint.server.userManager.find_user(username)
        if user is not None:
            if octoprint.server.userManager.check_password(username, password):
                if not user.is_active:
                    auth_log(
                        f"Failed login attempt for user {username} from {remote_addr}, user is deactivated"
                    )
                    abort(403)

                user = octoprint.server.userManager.login_user(user)
                session["usersession.id"] = user.session
                session["usersession.signature"] = session_signature(
                    username, user.session
                )
                g.user = user

                login_user(user, remember=remember)
                identity_changed.send(
                    current_app._get_current_object(), identity=Identity(user.get_id())
                )
                session["login_mechanism"] = "http"

                logging.getLogger(__name__).info(
                    "Actively logging in user {} from {}".format(
                        user.get_id(), remote_addr
                    )
                )

                response = user.as_dict()
                response["_is_external_client"] = s().getBoolean(
                    ["server", "ipCheck", "enabled"]
                ) and not util_net.is_lan_address(
                    remote_addr,
                    additional_private=s().get(["server", "ipCheck", "trustedSubnets"]),
                )
                response["_login_mechanism"] = session["login_mechanism"]

                r = make_response(jsonify(response))
                r.delete_cookie("active_logout")

                eventManager().fire(
                    Events.USER_LOGGED_IN, payload={"username": user.get_id()}
                )
                auth_log(f"Logging in user {username} from {remote_addr} via credentials")

                return r

            else:
                auth_log(
                    f"Failed login attempt for user {username} from {remote_addr}, wrong password"
                )
        else:
            auth_log(
                f"Failed login attempt for user {username} from {remote_addr}, user is unknown"
            )

        abort(403)

    elif "passive" in data:
        return passive_login()

    abort(400, description="Neither user and pass attributes nor passive flag present")
