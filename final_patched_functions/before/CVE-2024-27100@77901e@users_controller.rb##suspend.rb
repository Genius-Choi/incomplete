  def suspend
    guardian.ensure_can_suspend!(@user)

    if @user.suspended?
      suspend_record = @user.suspend_record
      message =
        I18n.t(
          "user.already_suspended",
          staff: suspend_record.acting_user.username,
          time_ago:
            AgeWords.time_ago_in_words(
              suspend_record.created_at,
              true,
              scope: :"datetime.distance_in_words_verbose",
            ),
        )
      return render json: failed_json.merge(message: message), status: 409
    end

    params.require(%i[suspend_until reason])

    all_users = [@user]
    if Array === params[:other_user_ids]
      all_users.concat(User.where(id: params[:other_user_ids]).to_a)
      all_users.uniq!
    end

    user_history = nil

    all_users.each do |user|
      user.suspended_till = params[:suspend_until]
      user.suspended_at = DateTime.now

      message = params[:message]

      User.transaction do
        user.save!

        user_history =
          StaffActionLogger.new(current_user).log_user_suspend(
            user,
            params[:reason],
            message: message,
            post_id: params[:post_id],
          )
      end
      user.logged_out

      if message.present?
        Jobs.enqueue(
          :critical_user_email,
          type: "account_suspended",
          user_id: user.id,
          user_history_id: user_history.id,
        )
      end

      DiscourseEvent.trigger(
        :user_suspended,
        user: user,
        reason: params[:reason],
        message: message,
        user_history: user_history,
        post_id: params[:post_id],
        suspended_till: params[:suspend_until],
        suspended_at: DateTime.now,
      )
    end

    perform_post_action

    render_json_dump(
      suspension: {
        suspend_reason: params[:reason],
        full_suspend_reason: user_history.try(:details),
        suspended_till: @user.suspended_till,
        suspended_at: @user.suspended_at,
        suspended_by: BasicUserSerializer.new(current_user, root: false).as_json,
      },
    )
  end
