def test_multipart_upload_retry_part_upload(databricks_artifact_repo, large_file, mock_chunk_size):
    mock_credential_info = ArtifactCredentialInfo(
        signed_uri=MOCK_AWS_SIGNED_URI, type=ArtifactCredentialType.AWS_PRESIGNED_URL
    )
    mock_upload_id = "upload_id"
    create_mpu_response = CreateMultipartUpload.Response(
        upload_id=mock_upload_id,
        upload_credential_infos=[
            ArtifactCredentialInfo(
                signed_uri=f"{MOCK_AWS_SIGNED_URI}partNumber={i + 1}",
                type=ArtifactCredentialType.AWS_PRESIGNED_URL,
                headers=[ArtifactCredentialInfo.HttpHeader(name="header", value=f"part-{i + 1}")],
            )
            for i in range(2)
        ],
        abort_credential_info=ArtifactCredentialInfo(
            signed_uri=f"{MOCK_AWS_SIGNED_URI}uploadId=abort",
            type=ArtifactCredentialType.AWS_PRESIGNED_URL,
            headers=[ArtifactCredentialInfo.HttpHeader(name="header", value="abort")],
        ),
    )
    part_upload_url_response = GetPresignedUploadPartUrl.Response(
        upload_credential_info=ArtifactCredentialInfo(
            signed_uri=f"{MOCK_AWS_SIGNED_URI}partNumber=2",
            type=ArtifactCredentialType.AWS_PRESIGNED_URL,
            headers=[ArtifactCredentialInfo.HttpHeader(name="header", value="part-2")],
        ),
    )
    complete_mpu_response = CompleteMultipartUpload.Response()

    with mock.patch(
        f"{DATABRICKS_ARTIFACT_REPOSITORY}._get_write_credential_infos",
        return_value=[mock_credential_info],
    ), mock.patch(
        f"{DATABRICKS_ARTIFACT_REPOSITORY}._call_endpoint",
        side_effect=[create_mpu_response, part_upload_url_response, complete_mpu_response],
    ) as call_endpoint_mock, mock.patch(
        "requests.Session.request", side_effect=mock_request_retry
    ) as http_request_mock:
        databricks_artifact_repo.log_artifact(large_file)

        with large_file.open("rb") as f:
            expected_calls = [
                mock.call(
                    "put",
                    f"{MOCK_AWS_SIGNED_URI}partNumber={i + 1}",
                    data=f.read(mock_chunk_size),
                    headers={"header": f"part-{i + 1}"},
                    timeout=None,
                )
                for i in range(2)
            ]
        expected_calls += expected_calls[-1:]  # Append the second part upload call
        # The upload-part requests are sent in parallel, so the order of the calls is not
        # deterministic
        assert sorted(http_request_mock.call_args_list, key=lambda c: c.args[1]) == expected_calls
        complete_request_body = json.loads(call_endpoint_mock.call_args_list[-1].args[-1])
        assert complete_request_body["upload_id"] == mock_upload_id
        assert complete_request_body["part_etags"] == [
            {"part_number": 1, "etag": "etag-1"},
            {"part_number": 2, "etag": "etag-2"},
        ]
