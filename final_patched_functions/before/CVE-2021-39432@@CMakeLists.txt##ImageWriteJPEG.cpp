void ImageWriteJPEG(
      Image const& image,
      String const& filename,
      dip::uint jpegLevel
) {
   DIP_THROW_IF( !image.IsForged(), E::IMAGE_NOT_FORGED );
   DIP_THROW_IF( image.Dimensionality() != 2, E::DIMENSIONALITY_NOT_SUPPORTED );
   jpegLevel = clamp< dip::uint >( jpegLevel, 1, 100 );

   // Open the file
   JpegOutput jpeg( filename );

   // Set image properties
   int nchan = static_cast< int >( image.TensorElements() );
   jpeg.cinfo().image_width = static_cast< JDIMENSION >( image.Size( 0 ));
   jpeg.cinfo().image_height = static_cast< JDIMENSION >( image.Size( 1 ));
   jpeg.cinfo().input_components = nchan;
   jpeg.cinfo().in_color_space = nchan > 1 ? JCS_RGB : JCS_GRAYSCALE;
   jpeg_set_defaults( jpeg.cinfoptr() );
   jpeg_set_quality( jpeg.cinfoptr(), static_cast< int >( jpegLevel ), FALSE );
   jpeg.cinfo().density_unit = 2; // dots per cm
   jpeg.cinfo().X_density = static_cast< UINT16 >( 0.01 / image.PixelSize( 0 ).RemovePrefix().magnitude ); // let's assume it's meter
   jpeg.cinfo().Y_density = static_cast< UINT16 >( 0.01 / image.PixelSize( 1 ).RemovePrefix().magnitude );

   // Convert the image to uint8 if necessary
   Image image_u8 = image.QuickCopy();
   image_u8.Convert( DT_UINT8 );

   // Write data
   jpeg_start_compress( jpeg.cinfoptr(), TRUE );
   std::vector< JSAMPLE > buffer( image.Size( 0 ) * static_cast< dip::uint >( nchan ));
   dip::uint8* imagedata = static_cast< dip::uint8* >( image_u8.Origin() );
   auto stride = image_u8.Strides();
   auto tStride = image_u8.TensorStride();
   for( dip::uint ii = 0; ii < image.Size( 1 ); ++ii ) {
      JSAMPLE* outdata = buffer.data();
      dip::uint8* indata = imagedata;
      for( dip::uint jj = 0; jj < image.Size( 0 ); ++jj ) {
         for( int kk = 0; kk < nchan; ++kk ) {
            *outdata = *( indata + kk * tStride );
            ++outdata;
         }
         indata += stride[ 0 ];
      }
      outdata = buffer.data();
      jpeg_write_scanlines( jpeg.cinfoptr(), &outdata, 1 );
      imagedata += stride[ 1 ];
   }
   jpeg_finish_compress( jpeg.cinfoptr());
}
