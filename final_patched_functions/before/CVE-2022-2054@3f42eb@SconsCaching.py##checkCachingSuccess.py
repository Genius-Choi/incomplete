def checkCachingSuccess(source_dir):
    ccache_logfile = getSconsReportValue(source_dir=source_dir, key="CCACHE_LOGFILE")

    if ccache_logfile is not None:
        stats = _getCcacheStatistics(ccache_logfile)

        if not stats:
            scons_logger.warning("You are not using ccache.")
        else:
            counts = defaultdict(int)

            for _command, result in stats.items():
                # These are not important to our users, time based decisions differentiate these.
                if result in ("cache hit (direct)", "cache hit (preprocessed)"):
                    result = "cache hit"

                # Newer ccache has these, but they duplicate:
                if result in (
                    "direct_cache_hit",
                    "direct_cache_miss",
                    "preprocessed_cache_hit",
                    "preprocessed_cache_miss",
                    "primary_storage_miss",
                ):
                    continue
                if result == "primary_storage_hit":
                    result = "cache hit"
                if result == "cache_miss":
                    result = "cache miss"

                # Usage of incbin causes this for the constants blob integration.
                if result in ("unsupported code directive", "disabled"):
                    continue

                counts[result] += 1

            scons_logger.info("Compiled %d C files using ccache." % len(stats))
            for result, count in counts.items():
                scons_logger.info(
                    "Cached C files (using ccache) with result '%s': %d"
                    % (result, count)
                )

    if os.name == "nt":
        clcache_stats_filename = getSconsReportValue(
            source_dir=source_dir, key="CLCACHE_STATS"
        )

        if clcache_stats_filename is not None and os.path.exists(
            clcache_stats_filename
        ):
            stats = eval(  # lazy, pylint: disable=eval-used
                getFileContents(clcache_stats_filename)
            )

            clcache_hit = stats["CacheHits"]
            clcache_miss = stats["CacheMisses"]

            scons_logger.info(
                "Compiled %d C files using clcache with %d cache hits and %d cache misses."
                % (clcache_hit + clcache_miss, clcache_hit, clcache_miss)
            )
