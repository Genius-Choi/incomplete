TEST_F(IPFSRedirectNetworkDelegateHelperTest, HeadersIPFSWorkWithRedirect) {
  GURL url(
      "https://cloudflare-ipfs.com/ipfs/"
      "QmSrPmbaUKA3ZodhzPWZnpFgcPMFWF4QsxXbkWfEptTBJd");
  auto request_info = std::make_shared<brave::BraveRequestInfo>(url);
  request_info->browser_context = profile();
  request_info->ipfs_gateway_url = GetPublicGateway();
  request_info->initiator_url =
      GURL("ipfs://QmfM2r8seH2GiRaC4esTjeraXEachRt8ZsSeGaWTPLyMoG");
  request_info->resource_type = blink::mojom::ResourceType::kImage;
  request_info->ipfs_auto_fallback = true;
  request_info->tab_origin = GURL("https://cloudflare-ipfs.com/");

  scoped_refptr<net::HttpResponseHeaders> orig_response_headers =
      new net::HttpResponseHeaders(std::string());
  orig_response_headers->AddHeader("x-ipfs-path", "/test");
  scoped_refptr<net::HttpResponseHeaders> overwrite_response_headers =
      new net::HttpResponseHeaders(std::string());
  GURL allowed_unsafe_redirect_url;

  int rc = ipfs::OnHeadersReceived_IPFSRedirectWork(
      orig_response_headers.get(), &overwrite_response_headers,
      &allowed_unsafe_redirect_url, brave::ResponseCallback(), request_info);

  EXPECT_EQ(rc, net::OK);

  std::string location;
  EXPECT_TRUE(overwrite_response_headers->EnumerateHeader(nullptr, "Location",
                                                          &location));
  GURL converted_url = GURL("https://dweb.link/test");
  EXPECT_EQ(location, converted_url);
  EXPECT_EQ(allowed_unsafe_redirect_url, converted_url);
}
