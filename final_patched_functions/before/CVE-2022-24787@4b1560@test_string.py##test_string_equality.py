def test_string_equality(get_contract_with_gas_estimation):
    code = """
_compA: String[100]
_compB: String[100]

@external
def equal_true() -> bool:
    compA: String[100] = "The quick brown fox jumps over the lazy dog"
    compB: String[100] = "The quick brown fox jumps over the lazy dog"
    return compA == compB

@external
def equal_false() -> bool:
    compA: String[100] = "The quick brown fox jumps over the lazy dog"
    compB: String[100] = "The quick brown fox jumps over the lazy hog"
    return compA == compB

@external
def not_equal_true() -> bool:
    compA: String[100] = "The quick brown fox jumps over the lazy dog"
    compB: String[100] = "The quick brown fox jumps over the lazy hog"
    return compA != compB

@external
def not_equal_false() -> bool:
    compA: String[100] = "The quick brown fox jumps over the lazy dog"
    compB: String[100] = "The quick brown fox jumps over the lazy dog"
    return compA != compB

@external
def literal_equal_true() -> bool:
    return "The quick brown fox jumps over the lazy dog" == \
    "The quick brown fox jumps over the lazy dog"

@external
def literal_equal_false() -> bool:
    return "The quick brown fox jumps over the lazy dog" == \
    "The quick brown fox jumps over the lazy hog"

@external
def literal_not_equal_true() -> bool:
    return "The quick brown fox jumps over the lazy dog" != \
    "The quick brown fox jumps over the lazy hog"

@external
def literal_not_equal_false() -> bool:
    return "The quick brown fox jumps over the lazy dog" != \
    "The quick brown fox jumps over the lazy dog"

@external
def storage_equal_true() -> bool:
    self._compA = "The quick brown fox jumps over the lazy dog"
    self._compB = "The quick brown fox jumps over the lazy dog"
    return self._compA == self._compB

@external
def storage_equal_false() -> bool:
    self._compA = "The quick brown fox jumps over the lazy dog"
    self._compB = "The quick brown fox jumps over the lazy hog"
    return self._compA == self._compB

@external
def storage_not_equal_true() -> bool:
    self._compA = "The quick brown fox jumps over the lazy dog"
    self._compB = "The quick brown fox jumps over the lazy hog"
    return self._compA != self._compB

@external
def storage_not_equal_false() -> bool:
    self._compA = "The quick brown fox jumps over the lazy dog"
    self._compB = "The quick brown fox jumps over the lazy dog"
    return self._compA != self._compB

@external
def string_compare_equal(str1: String[100], str2: String[100]) -> bool:
    return str1 == str2

@external
def string_compare_not_equal(str1: String[100], str2: String[100]) -> bool:
    return str1 != str2

@external
def compare_passed_storage_equal(str: String[100]) -> bool:
    self._compA = "The quick brown fox jumps over the lazy dog"
    return self._compA == str

@external
def compare_passed_storage_not_equal(str: String[100]) -> bool:
    self._compA = "The quick brown fox jumps over the lazy dog"
    return self._compA != str

@external
def compare_var_storage_equal_true() -> bool:
    self._compA = "The quick brown fox jumps over the lazy dog"
    compB: String[100] = "The quick brown fox jumps over the lazy dog"
    return self._compA == compB

@external
def compare_var_storage_equal_false() -> bool:
    self._compA = "The quick brown fox jumps over the lazy dog"
    compB: String[100] = "The quick brown fox jumps over the lazy hog"
    return self._compA == compB

@external
def compare_var_storage_not_equal_true() -> bool:
    self._compA = "The quick brown fox jumps over the lazy dog"
    compB: String[100] = "The quick brown fox jumps over the lazy hog"
    return self._compA != compB

@external
def compare_var_storage_not_equal_false() -> bool:
    self._compA = "The quick brown fox jumps over the lazy dog"
    compB: String[100] = "The quick brown fox jumps over the lazy dog"
    return self._compA != compB
    """

    c = get_contract_with_gas_estimation(code)
    assert c.equal_true() is True
    assert c.equal_false() is False
    assert c.not_equal_true() is True
    assert c.not_equal_false() is False
    assert c.literal_equal_true() is True
    assert c.literal_equal_false() is False
    assert c.literal_not_equal_true() is True
    assert c.literal_not_equal_false() is False
    assert c.storage_equal_true() is True
    assert c.storage_equal_false() is False
    assert c.storage_not_equal_true() is True
    assert c.storage_not_equal_false() is False

    a = "The quick brown fox jumps over the lazy dog"
    b = "The quick brown fox jumps over the lazy hog"
    assert c.string_compare_equal(a, a) is True
    assert c.string_compare_equal(a, b) is False
    assert c.string_compare_not_equal(b, a) is True
    assert c.string_compare_not_equal(b, b) is False

    assert c.compare_passed_storage_equal(a) is True
    assert c.compare_passed_storage_equal(b) is False
    assert c.compare_passed_storage_not_equal(a) is False
    assert c.compare_passed_storage_not_equal(b) is True

    assert c.compare_var_storage_equal_true() is True
    assert c.compare_var_storage_equal_false() is False
    assert c.compare_var_storage_not_equal_true() is True
    assert c.compare_var_storage_not_equal_false() is False
