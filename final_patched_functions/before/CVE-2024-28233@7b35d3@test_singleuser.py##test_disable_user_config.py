async def test_disable_user_config(request, app, tmpdir, full_spawn):
    # login, start the server
    cookies = await app.login_user('nandy')
    user = app.users['nandy']
    # stop spawner, if running:
    if user.running:
        print("stopping")
        await user.stop()
    # start with new config:
    user.spawner.debug = True
    user.spawner.disable_user_config = True
    home_dir = tmpdir.join("home")
    home_dir.mkdir()
    # home_dir is defined on SimpleSpawner
    user.spawner.home_dir = home = str(home_dir)
    jupyter_config_dir = home_dir.join(".jupyter")
    jupyter_config_dir.mkdir()
    # verify config paths
    with jupyter_config_dir.join("jupyter_server_config.py").open("w") as f:
        f.write("c.TestSingleUser.jupyter_config_py = True")

    await user.spawn()
    await app.proxy.add_user(user)

    url = public_url(app, user)

    # with cookies, login successful
    r = await async_requests.get(url, cookies=cookies)
    r.raise_for_status()
    assert r.url.rstrip('/').endswith(
        url_path_join('/user/nandy', user.spawner.default_url or "/tree")
    )
    assert r.status_code == 200

    r = await async_requests.get(
        url_path_join(public_url(app, user), 'jupyterhub-test-info'), cookies=cookies
    )
    r.raise_for_status()
    info = r.json()
    pprint(info)
    assert info['disable_user_config']
    server_config = info['config']
    settings = info['settings']
    assert 'TestSingleUser' not in server_config
    # check config paths
    norm_home = os.path.realpath(os.path.abspath(home))

    def assert_not_in_home(path, name):
        path = os.path.realpath(os.path.abspath(path))
        assert not path.startswith(
            norm_home + os.path.sep
        ), f"{name}: {path} is in home {norm_home}"

    for path in info['config_file_paths']:
        assert_not_in_home(path, 'config_file_paths')

    # check every path setting for lookup in $HOME
    # is this too much?
    for key, setting in settings.items():
        if 'path' in key and isinstance(setting, list):
            for path in setting:
                assert_not_in_home(path, key)
