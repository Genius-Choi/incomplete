      def test_large_document_smoke_test
        skip_unless_libxml2("valgrind tests should only run with libxml2")

        refute_valgrind_errors do
          xml = []
          xml << "<elements>"
          10000.times { |j| xml << "<element id=\"#{j}\"/>" }
          xml << "</elements>"
          xml = xml.join("\n")

          Nokogiri::XML::Reader.from_memory(xml).each(&:attributes)
        end
      end

      def test_correct_outer_xml_inclusion
        xml = Nokogiri::XML::Reader.from_io(StringIO.new(<<-eoxml))
          <root-element>
            <children>
              <child n="1">
                <field>child-1</field>
              </child>
              <child n="2">
                <field>child-2</field>
              </child>
              <child n="3">
                <field>child-3</field>
              </child>
            </children>
          </root-element>
        eoxml

        nodelengths = []
        has_child2 = []

        xml.each do |node|
          if (node.node_type == Nokogiri::XML::Reader::TYPE_ELEMENT) && (node.name == "child")
            nodelengths << node.outer_xml.length
            has_child2 << !!node.outer_xml.include?("child-2")
          end
        end

        assert_equal(nodelengths[0], nodelengths[1])
        assert(has_child2[1])
        refute(has_child2[0])
      end

      def test_correct_inner_xml_inclusion
        xml = Nokogiri::XML::Reader.from_io(StringIO.new(<<-eoxml))
          <root-element>
            <children>
              <child n="1">
                <field>child-1</field>
              </child>
              <child n="2">
                <field>child-2</field>
              </child>
              <child n="3">
                <field>child-3</field>
              </child>
            </children>
          </root-element>
        eoxml

        nodelengths = []
        has_child2 = []

        xml.each do |node|
          if (node.node_type == Nokogiri::XML::Reader::TYPE_ELEMENT) && (node.name == "child")
            nodelengths << node.inner_xml.length
            has_child2 << !!node.inner_xml.include?("child-2")
          end
        end

        assert_equal(nodelengths[0], nodelengths[1])
        assert(has_child2[1])
        refute(has_child2[0])
      end

      def test_nonexistent_attribute
        require "nokogiri"
        reader = Nokogiri::XML::Reader("<root xmlns='bob'><el attr='fred' /></root>")
        reader.read # root
        reader.read # el
        assert_nil(reader.attribute("other"))
      end
    end
