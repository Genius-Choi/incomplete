GopherStateData::DelayAwareRead(GopherStateData *gopherState)
{
    const auto &conn = gopherState->serverConn;

    if (!Comm::IsConnOpen(conn) || fd_table[conn->fd].closing()) {
        debugs(10, 3, "will not read from " << conn);
        return;
    }

    const auto amountToRead = gopherState->entry->bytesWanted(Range<size_t>(0, BUFSIZ));

    if (amountToRead <= 0) {
        AsyncCall::Pointer delayCall = asyncCall(10, 3, "GopherStateData::DelayAwareRead",
                                       cbdataDialer(&GopherStateData::DelayAwareRead, gopherState));
        gopherState->entry->mem().delayRead(delayCall);
        return;
    }

    AsyncCall::Pointer readCall = commCbCall(5, 5, "gopherReadReply", CommIoCbPtrFun(gopherReadReply, gopherState));
    comm_read(conn, gopherState->replybuf, amountToRead, readCall);
}
