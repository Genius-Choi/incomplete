def test_get_user():
    """Tests getting a user account."""
    zen_store = Client().zen_store
    with UserContext() as user_account:
        user = zen_store.get_user(user_account.name)
        assert user.id == user_account.id
        assert user.name == user_account.name
        assert user.active is True
        assert user.email == user_account.email
        assert user.is_service_account is False
        assert user.full_name == user_account.full_name
        assert user.email_opted_in == user_account.email_opted_in

        # Get a user account as a service account by ID is not possible
        with pytest.raises(KeyError):
            zen_store.get_service_account(user_account.id)

        # Get a user account as a service account by name is not possible
        with pytest.raises(KeyError):
            zen_store.get_service_account(user_account.name)

        with ServiceAccountContext(name=user_account.name) as service_account:
            # Get the service account as a user account by ID is allowed
            # for backwards compatibility
            user = zen_store.get_user(service_account.id)
            assert user.id == service_account.id
            assert user.name == service_account.name
            assert user.is_service_account is True

            # Getting the user by name returns the user, not the service account
            user = zen_store.get_user(user_account.name)
            assert user.id == user_account.id
            assert user.name == user_account.name
            assert user.is_service_account is False
