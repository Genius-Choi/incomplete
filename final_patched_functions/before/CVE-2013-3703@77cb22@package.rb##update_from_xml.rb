  def update_from_xml( xmlhash )
    self.title = xmlhash.value('title')
    self.description = xmlhash.value('description')
    self.bcntsynctag = nil
    self.bcntsynctag = xmlhash.value('bcntsynctag')

    #--- devel project ---#
    self.develpackage = nil
    if devel = xmlhash['devel']
      prj_name = devel['project'] || xmlhash['project']
      pkg_name = devel['package'] || xmlhash['name']
      unless develprj = Project.find_by_name(prj_name)
        raise SaveError, "value of develproject has to be a existing project (project '#{prj_name}' does not exist)"
      end
      unless develpkg = develprj.packages.find_by_name(pkg_name)
        raise SaveError, "value of develpackage has to be a existing package (package '#{pkg_name}' does not exist)"
      end
      self.develpackage = develpkg
    end
    #--- end devel project ---#
    
    # just for cycle detection
    self.resolve_devel_package
    
    #--- update users ---#
    usercache = Hash.new
    self.package_user_role_relationships.each do |purr|
      h = usercache[purr.user.login] ||= Hash.new
      h[purr.role.title] = purr
    end

    # give ourselves an ID
    self.save!

    xmlhash.elements('person') do |person|
      if not Role.rolecache.has_key? person['role']
        raise SaveError, "illegal role name '#{person['role']}'"
      end
      user = User.get_by_login(person['userid'])
      if usercache.has_key? person['userid']
        #user has already a role in this package
        pcache = usercache[person['userid']]
        if pcache.has_key? person['role']
          #role already defined, only remove from cache
          pcache[person['role']] = :keep
        else
          #new role
          self.package_user_role_relationships.new(user: user, role: Role.rolecache[person['role']])
          pcache[person['role']] = :new
        end
      else
        self.package_user_role_relationships.new(user: user, role: Role.rolecache[person['role']])
        usercache[person['userid']] = { person['role'] => :new }
      end
    end
    
    #delete all roles that weren't found in uploaded xml
    usercache.each do |user, roles|
      roles.each do |role, object|
        next if [:keep, :new].include?(object)
        object.delete
      end
    end
    
    #--- end update users ---#
    
    #--- update group ---#
    groupcache = Hash.new
    self.package_group_role_relationships.each do |pgrr|
      h = groupcache[pgrr.group.title] ||= Hash.new
      h[pgrr.role.title] = pgrr
    end
    
    xmlhash.elements('group') do |ge|
      group = Group.find_by_title(ge['groupid'])
      if groupcache.has_key? ge['groupid']
        #group has already a role in this package
        pcache = groupcache[ge['groupid']]

        if pcache.has_key? ge['role']
          #role already defined, only remove from cache
          pcache[ge['role']] = :keep
        else
          #new role
          if not Role.rolecache.has_key? ge['role']
            raise SaveError, "illegal role name '#{ge['role']}'"
          end
          self.package_group_role_relationships.new(group: group, role: Role.rolecache[ge['role']])
          pcache[ge['role']] = :new
        end
      else
        unless group
          # check with LDAP
          if defined?( CONFIG['ldap_mode'] ) && CONFIG['ldap_mode'] == :on
            if defined?( CONFIG['ldap_group_support'] ) && CONFIG['ldap_group_support'] == :on
              if User.find_group_with_ldap(ge['groupid'])
                logger.debug "Find and Create group '#{ge['groupid']}' from LDAP"
                newgroup = Group.create( :title => ge['groupid'] )
                unless newgroup.errors.empty?
                  raise SaveError, "unknown group '#{ge['groupid']}', failed to create the ldap groupid on OBS"
                end
                group=Group.find_by_title(ge['groupid'])
              else
                raise SaveError, "unknown group '#{ge['groupid']}' on LDAP server"
              end
            end
          end

          unless group
            raise SaveError, "unknown group '#{ge['groupid']}'"
          end
        end

        self.package_group_role_relationships.new(group: group, role: Role.rolecache[ge['role']])
        groupcache[ge['groupid']] = { ge['role'] => :new }
      end
    end

    #delete all roles that weren't found in uploaded xml
    groupcache.each do |group, roles|
      roles.each do |role, object|
        next if [:keep, :new].include? object
        object.destroy
      end
    end
    #--- end update groups ---#

    #---begin enable / disable flags ---#
    update_all_flags(xmlhash)
    
    #--- update url ---#
    self.url = xmlhash.value('url')
    #--- end update url ---#
    
    save!
  end
