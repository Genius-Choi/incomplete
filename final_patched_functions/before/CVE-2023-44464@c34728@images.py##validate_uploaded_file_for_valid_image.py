def validate_uploaded_file_for_valid_image(f):
    if f is None:
        return None

    from PIL import Image

    # We need to get a file object for Pillow. We might have a path or we might
    # have to read the data into memory.
    if hasattr(f, 'temporary_file_path'):
        file = f.temporary_file_path()
    else:
        if hasattr(f, 'read'):
            file = BytesIO(f.read())
        else:
            file = BytesIO(f['content'])

    try:
        try:
            image = Image.open(file)
            # verify() must be called immediately after the constructor.
            image.verify()
        except DecompressionBombError:
            raise ValidationError(_(
                "The file you uploaded has a very large number of pixels, please upload a picture with smaller dimensions."
            ))

        # load() is a potential DoS vector (see Django bug #18520), so we verify the size first
        if image.width * image.height > MAX_IMAGE_PIXELS:
            raise ValidationError(_(
                "The file you uploaded has a very large number of pixels, please upload a picture with smaller dimensions."
            ))
    except Exception as exc:
        logger.exception('Could not parse image')
        # Pillow doesn't recognize it as an image.
        if isinstance(exc, ValidationError):
            raise
        raise ValidationError(_(
            "Upload a valid image. The file you uploaded was either not an image or a corrupted image."
        )) from exc
    if hasattr(f, 'seek') and callable(f.seek):
        f.seek(0)
