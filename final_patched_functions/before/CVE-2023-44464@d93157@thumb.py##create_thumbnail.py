def create_thumbnail(sourcename, size):
    source = default_storage.open(sourcename)
    image = Image.open(BytesIO(source.read()))
    try:
        image.load()
    except:
        raise ThumbnailError('Could not load image')

    frames = [resize_image(frame, size) for frame in ImageSequence.Iterator(image)]
    image_out = frames[0]
    save_kwargs = {}

    if source.name.lower().endswith('.jpg') or source.name.lower().endswith('.jpeg'):
        # Yields better file sizes for photos
        target_ext = 'jpeg'
        quality = 95
    elif source.name.lower().endswith('.gif') or source.name.lower().endswith('.png'):
        target_ext = source.name.lower()[-3:]
        quality = None
        image_out.info = image.info
        save_kwargs = {
            'append_images': frames[1:],
            'loop': image.info.get('loop', 0),
            'save_all': True,
        }
    else:
        target_ext = 'png'
        quality = None

    checksum = hashlib.md5(image.tobytes()).hexdigest()
    name = checksum + '.' + size.replace('^', 'c') + '.' + target_ext
    buffer = BytesIO()
    if image_out.mode == "P" and source.name.lower().endswith('.png'):
        image_out = image_out.convert('RGBA')
    if image_out.mode not in ("1", "L", "RGB", "RGBA"):
        image_out = image_out.convert('RGB')
    image_out.save(fp=buffer, format=target_ext.upper(), quality=quality, **save_kwargs)
    imgfile = ContentFile(buffer.getvalue())

    t = Thumbnail.objects.create(source=sourcename, size=size)
    t.thumb.save(name, imgfile)
    return t
