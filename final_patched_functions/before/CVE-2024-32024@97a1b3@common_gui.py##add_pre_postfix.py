def add_pre_postfix(
    folder: str = "",
    prefix: str = "",
    postfix: str = "",
    caption_file_ext: str = ".caption",
) -> None:
    """
    Add prefix and/or postfix to the content of caption files within a folder.
    If no caption files are found, create one with the requested prefix and/or postfix.

    Args:
        folder (str): Path to the folder containing caption files.
        prefix (str, optional): Prefix to add to the content of the caption files.
        postfix (str, optional): Postfix to add to the content of the caption files.
        caption_file_ext (str, optional): Extension of the caption files.
    """

    # If neither prefix nor postfix is provided, return early
    if prefix == "" and postfix == "":
        return

    # Define the image file extensions to filter
    image_extensions = (".jpg", ".jpeg", ".png", ".webp")

    # List all image files in the folder
    image_files = [
        f for f in os.listdir(folder) if f.lower().endswith(image_extensions)
    ]

    # Iterate over the list of image files
    for image_file in image_files:
        # Construct the caption file name by appending the caption file extension to the image file name
        caption_file_name = os.path.splitext(image_file)[0] + caption_file_ext
        # Construct the full path to the caption file
        caption_file_path = os.path.join(folder, caption_file_name)

        # Check if the caption file does not exist
        if not os.path.exists(caption_file_path):
            # Create a new caption file with the specified prefix and/or postfix
            with open(caption_file_path, "w", encoding="utf8") as f:
                # Determine the separator based on whether both prefix and postfix are provided
                separator = " " if prefix and postfix else ""
                f.write(f"{prefix}{separator}{postfix}")
        else:
            # Open the existing caption file for reading and writing
            with open(caption_file_path, "r+", encoding="utf8") as f:
                # Read the content of the caption file, stripping any trailing whitespace
                content = f.read().rstrip()
                # Move the file pointer to the beginning of the file
                f.seek(0, 0)

                # Determine the separator based on whether only prefix is provided
                prefix_separator = " " if prefix else ""
                # Determine the separator based on whether only postfix is provided
                postfix_separator = " " if postfix else ""
                # Write the updated content to the caption file, adding prefix and/or postfix
                f.write(
                    f"{prefix}{prefix_separator}{content}{postfix_separator}{postfix}"
                )
