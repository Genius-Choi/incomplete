def _pkcs7_verify(encoding, sig, msg, certs, options, backend):
    sig_bio = backend._bytes_to_bio(sig)
    if encoding is serialization.Encoding.DER:
        p7 = backend._lib.d2i_PKCS7_bio(sig_bio.bio, backend._ffi.NULL)
    elif encoding is serialization.Encoding.PEM:
        p7 = backend._lib.PEM_read_bio_PKCS7(
            sig_bio.bio,
            backend._ffi.NULL,
            backend._ffi.NULL,
            backend._ffi.NULL,
        )
    else:
        p7 = backend._lib.SMIME_read_PKCS7(sig_bio.bio, backend._ffi.NULL)
    backend.openssl_assert(p7 != backend._ffi.NULL)
    p7 = backend._ffi.gc(p7, backend._lib.PKCS7_free)
    flags = 0
    for option in options:
        if option is pkcs7.PKCS7Options.Text:
            flags |= backend._lib.PKCS7_TEXT
    store = backend._lib.X509_STORE_new()
    backend.openssl_assert(store != backend._ffi.NULL)
    store = backend._ffi.gc(store, backend._lib.X509_STORE_free)
    # This list is to keep the x509 values alive until end of function
    ossl_certs = []
    for cert in certs:
        ossl_cert = backend._cert2ossl(cert)
        ossl_certs.append(ossl_cert)
        res = backend._lib.X509_STORE_add_cert(store, ossl_cert)
        backend.openssl_assert(res == 1)
    if msg is None:
        res = backend._lib.PKCS7_verify(
            p7,
            backend._ffi.NULL,
            store,
            backend._ffi.NULL,
            backend._ffi.NULL,
            flags,
        )
    else:
        msg_bio = backend._bytes_to_bio(msg)
        # libressl 3.7.0 has a bug when NULL is passed as an `out_bio`. Work
        # around it for now.
        out_bio = backend._create_mem_bio_gc()
        res = backend._lib.PKCS7_verify(
            p7, backend._ffi.NULL, store, msg_bio.bio, out_bio, flags
        )
    backend.openssl_assert(res == 1)
    # OpenSSL 3.0 leaves a random bio error on the stack:
    # https://github.com/openssl/openssl/issues/16681
    if backend._lib.CRYPTOGRAPHY_OPENSSL_300_OR_GREATER:
        backend._consume_errors()
