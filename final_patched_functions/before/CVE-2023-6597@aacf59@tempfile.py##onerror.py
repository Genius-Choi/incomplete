        def onerror(func, path, exc_info):
            if issubclass(exc_info[0], PermissionError):
                def resetperms(path):
                    try:
                        _os.chflags(path, 0)
                    except AttributeError:
                        pass
                    _os.chmod(path, 0o700)

                try:
                    if path != name:
                        resetperms(_os.path.dirname(path))
                    resetperms(path)

                    try:
                        _os.unlink(path)
                    except IsADirectoryError:
                        cls._rmtree(path, ignore_errors=ignore_errors)
                    except PermissionError:
                        # The PermissionError handler was originally added for
                        # FreeBSD in directories, but it seems that it is raised
                        # on Windows too.
                        # bpo-43153: Calling _rmtree again may
                        # raise NotADirectoryError and mask the PermissionError.
                        # So we must re-raise the current PermissionError if
                        # path is not a directory.
                        try:
                            st = _os.lstat(path)
                        except OSError:
                            if ignore_errors:
                                return
                            raise
                        if (_stat.S_ISLNK(st.st_mode) or
                            not _stat.S_ISDIR(st.st_mode) or
                            (hasattr(st, 'st_file_attributes') and
                             st.st_file_attributes & _stat.FILE_ATTRIBUTE_REPARSE_POINT and
                             st.st_reparse_tag == _stat.IO_REPARSE_TAG_MOUNT_POINT)
                        ):
                            if ignore_errors:
                                return
                            raise
                        cls._rmtree(path, ignore_errors=ignore_errors)
                except FileNotFoundError:
                    pass
            elif issubclass(exc_info[0], FileNotFoundError):
                pass
            else:
                if not ignore_errors:
                    raise
