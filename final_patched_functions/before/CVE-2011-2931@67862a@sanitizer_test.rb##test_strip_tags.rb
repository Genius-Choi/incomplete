  def test_strip_tags
    sanitizer = HTML::FullSanitizer.new
    assert_equal("<<<bad html", sanitizer.sanitize("<<<bad html"))
    assert_equal("<<", sanitizer.sanitize("<<<bad html>"))
    assert_equal("Dont touch me", sanitizer.sanitize("Dont touch me"))
    assert_equal("This is a test.", sanitizer.sanitize("<p>This <u>is<u> a <a href='test.html'><strong>test</strong></a>.</p>"))
    assert_equal("Weirdos", sanitizer.sanitize("Wei<<a>a onclick='alert(document.cookie);'</a>/>rdos"))
    assert_equal("This is a test.", sanitizer.sanitize("This is a test."))
    assert_equal(
    %{This is a test.\n\n\nIt no longer contains any HTML.\n}, sanitizer.sanitize(
    %{<title>This is <b>a <a href="" target="_blank">test</a></b>.</title>\n\n<!-- it has a comment -->\n\n<p>It no <b>longer <strong>contains <em>any <strike>HTML</strike></em>.</strong></b></p>\n}))
    assert_equal "This has a  here.", sanitizer.sanitize("This has a <!-- comment --> here.")
    assert_equal "This has a  here.", sanitizer.sanitize("This has a <![CDATA[<section>]]> here.")
    assert_equal "This has an unclosed ", sanitizer.sanitize("This has an unclosed <![CDATA[<section>]] here...")
    [nil, '', '   '].each { |blank| assert_equal blank, sanitizer.sanitize(blank) }
    assert_nothing_raised { sanitizer.sanitize("This is a frozen string with no tags".freeze) }
  end
