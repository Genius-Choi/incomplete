def server_error(the_error):
    setup_translation()
    if hasattr(the_error, 'interview') and the_error.interview.debug and hasattr(the_error, 'interview_status'):
        the_history = get_history(the_error.interview, the_error.interview_status)
    else:
        the_history = None
    the_vars = None
    if isinstance(the_error, (DAError, DANotFoundError, DAInvalidFilename)):
        errmess = str(the_error)
        the_trace = None
        logmessage(errmess)
    elif isinstance(the_error, TemplateError):
        errmess = str(the_error)
        if hasattr(the_error, 'name') and the_error.name is not None:
            errmess += "\nName: " + str(the_error.name)
        if hasattr(the_error, 'filename') and the_error.filename is not None:
            errmess += "\nFilename: " + str(the_error.filename)
        if hasattr(the_error, 'docx_context'):
            errmess += "\n\nContext:\n" + "\n".join(map(lambda x: "  " + x, the_error.docx_context))
        the_trace = traceback.format_exc()
        try:
            logmessage(errmess)
        except:
            logmessage("Could not log the error message")
    else:
        try:
            errmess = str(type(the_error).__name__) + ": " + str(the_error)
        except:
            errmess = str(type(the_error).__name__)
        if hasattr(the_error, 'traceback'):
            the_trace = the_error.traceback
        else:
            the_trace = traceback.format_exc()
        if hasattr(docassemble.base.functions.this_thread, 'misc') and 'current_field' in docassemble.base.functions.this_thread.misc:
            errmess += "\nIn field index number " + str(docassemble.base.functions.this_thread.misc['current_field'])
        if hasattr(the_error, 'da_line_with_error'):
            errmess += "\nIn line: " + str(the_error.da_line_with_error)

        logmessage(the_trace)
    if isinstance(the_error, DAError):
        error_code = the_error.error_code
    if isinstance(the_error, DANotFoundError):
        error_code = 404
    elif isinstance(the_error, werkzeug.exceptions.HTTPException):
        error_code = the_error.code
    else:
        error_code = 501
    if hasattr(the_error, 'user_dict'):
        the_vars = the_error.user_dict
    if hasattr(the_error, 'interview'):
        special_error_markdown = the_error.interview.consolidated_metadata.get('error help', None)
        if isinstance(special_error_markdown, dict):
            language = docassemble.base.functions.get_language()
            if language in special_error_markdown:
                special_error_markdown = special_error_markdown[language]
            elif '*' in special_error_markdown:
                special_error_markdown = special_error_markdown['*']
            elif DEFAULT_LANGUAGE in special_error_markdown:
                special_error_markdown = special_error_markdown[DEFAULT_LANGUAGE]
            else:
                special_error_markdown = None
    else:
        special_error_markdown = None
    if special_error_markdown is None:
        special_error_markdown = daconfig.get('error help', None)
    if special_error_markdown is not None:
        special_error_html = docassemble.base.util.markdown_to_html(special_error_markdown)
    else:
        special_error_html = None
    flask_logtext = []
    if os.path.exists(LOGFILE):
        with open(LOGFILE, encoding='utf-8') as the_file:
            for line in the_file:
                if re.match('Exception', line):
                    flask_logtext = []
                flask_logtext.append(line)
    orig_errmess = errmess
    errmess = noquote(errmess)
    if re.search(r'\n', errmess):
        errmess = '<pre>' + errmess + '</pre>'
    else:
        errmess = '<blockquote class="blockquote">' + errmess + '</blockquote>'
    script = """
    <script>
      var daGlobalEval = eval;
      var daMessageLog = JSON.parse(atob(""" + json.dumps(safeid(json.dumps(docassemble.base.functions.get_message_log()))) + """));
      var daNotificationMessage = """ + json.dumps(NOTIFICATION_MESSAGE) + """;
      if (!String.prototype.daSprintf){
        Object.defineProperty(String.prototype, "daSprintf", {
          value: function () {
            var args = Array.from(arguments),
              i = 0;
            function defaultNumber(iValue) {
              return iValue != undefined && !isNaN(iValue) ? iValue : "0";
            }
            function defaultString(iValue) {
              return iValue == undefined ? "" : "" + iValue;
            }
            return this.replace(
              /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
              function (match, sign, filler, scale, precision, type) {
                var strOut, space, value;
                var asNumber = false;
                if (match == "%%") return "%";
                if (i >= args.length) return match;
                value = args[i];
                while (Array.isArray(value)) {
                  args.splice(i, 1);
                  for (var j = i; value.length > 0; j++)
                    args.splice(j, 0, value.shift());
                  value = args[i];
                }
                i++;
                if (filler == undefined) filler = " "; // default
                if (scale == undefined && !isNaN(filler)) {
                  scale = filler;
                  filler = " ";
                }
                if (sign == undefined) sign = "sqQ".indexOf(type) >= 0 ? "+" : "-"; // default
                if (scale == undefined) scale = 0; // default
                if (precision == undefined) precision = ".0"; // default
                scale = parseInt(scale);
                precision = parseInt(precision.substr(1));
                switch (type) {
                  case "d":
                  case "i":
                    // decimal integer
                    asNumber = true;
                    strOut = parseInt(defaultNumber(value));
                    if (precision > 0) strOut += "." + "0".repeat(precision);
                    break;
                  case "e":
                  case "E":
                    // float in exponential notation
                    asNumber = true;
                    strOut = parseFloat(defaultNumber(value));
                    if (precision == 0) strOut = strOut.toExponential();
                    else strOut = strOut.toExponential(precision);
                    if (type == "E") strOut = strOut.replace("e", "E");
                    break;
                  case "f":
                    // decimal float
                    asNumber = true;
                    strOut = parseFloat(defaultNumber(value));
                    if (precision != 0) strOut = strOut.toFixed(precision);
                    break;
                  case "o":
                  case "h":
                  case "H":
                    // Octal or Hexagesimal integer notation
                    strOut =
                      "\\\\" +
                      (type == "o" ? "0" : type) +
                      parseInt(defaultNumber(value)).toString(type == "o" ? 8 : 16);
                    break;
                  case "q":
                    // single quoted string
                    strOut = "'" + defaultString(value) + "'";
                    break;
                  case "Q":
                    // double quoted string
                    strOut = '"' + defaultString(value) + '"';
                    break;
                  default:
                    // string
                    strOut = defaultString(value);
                    break;
                }
                if (typeof strOut != "string") strOut = "" + strOut;
                if ((space = strOut.length) < scale) {
                  if (asNumber) {
                    if (sign == "-") {
                      if (strOut.indexOf("-") < 0)
                        strOut = filler.repeat(scale - space) + strOut;
                      else
                        strOut =
                          "-" +
                          filler.repeat(scale - space) +
                          strOut.replace("-", "");
                    } else {
                      if (strOut.indexOf("-") < 0)
                        strOut = "+" + filler.repeat(scale - space - 1) + strOut;
                      else
                        strOut =
                          "-" +
                          filler.repeat(scale - space) +
                          strOut.replace("-", "");
                    }
                  } else {
                    if (sign == "-") strOut = filler.repeat(scale - space) + strOut;
                    else strOut = strOut + filler.repeat(scale - space);
                  }
                } else if (asNumber && sign == "+" && strOut.indexOf("-") < 0)
                  strOut = "+" + strOut;
                return strOut;
              }
            );
          },
        });
        Object.defineProperty(window, "daSprintf", {
          value: function (str, ...rest) {
            if (typeof str == "string")
              return String.prototype.daSprintf.apply(str, rest);
            return "";
          },
        });
      }
      function flash(message, priority){
        if (priority == null){
          priority = 'info'
        }
        if (!$("#daflash").length){
          $("body").append(""" + json.dumps(NOTIFICATION_CONTAINER % ('',)) + """);
        }
        $("#daflash").append(daSprintf(daNotificationMessage, priority, message));
        if (priority == 'success'){
          setTimeout(function(){
            $("#daflash .alert-success").hide(300, function(){
              $(self).remove();
            });
          }, 3000);
        }
      }
      var da_flash = flash;
      function daShowNotifications(){
        var n = daMessageLog.length;
        for (var i = 0; i < n; i++){
          var message = daMessageLog[i];
          if (message.priority == 'console'){
            console.log(message.message);
          }
          else if (message.priority == 'javascript'){
            daGlobalEval(message.message);
          }
          else if (message.priority == 'success' || message.priority == 'warning' || message.priority == 'danger' || message.priority == 'secondary' || message.priority == 'tertiary' || message.priority == 'info' || message.priority == 'dark' || message.priority == 'light' || message.priority == 'primary'){
            da_flash(message.message, message.priority);
          }
          else{
            da_flash(message.message, 'info');
          }
        }
      }
      $( document ).ready(function() {
        $("#da-retry").on('click', function(e){
          location.reload();
          e.preventDefault();
          return false;
        });
        daShowNotifications();
      });
    </script>"""  # noqa: W605
    error_notification(the_error, message=errmess, history=the_history, trace=the_trace, the_request=request, the_vars=the_vars)
    if (request.path.endswith('/interview') or request.path.endswith('/start') or request.path.endswith('/run')) and docassemble.base.functions.interview_path() is not None:
        try:
            release_lock(docassemble.base.functions.this_thread.current_info['session'], docassemble.base.functions.this_thread.current_info['yaml_filename'])
        except:
            pass
        if 'in error' not in session and docassemble.base.functions.this_thread.interview is not None and 'error action' in docassemble.base.functions.this_thread.interview.consolidated_metadata:
            session['in error'] = True
            return index(action_argument={'action': docassemble.base.functions.this_thread.interview.consolidated_metadata['error action'], 'arguments': {'error_message': orig_errmess, 'error_history': the_history, 'error_trace': the_trace}}, refer=['error'])
    show_debug = not bool((not DEBUG) and isinstance(the_error, (DAError, DAInvalidFilename)))
    if int(int(error_code)/100) == 4:
        show_debug = False
    if error_code == 404:
        the_template = 'pages/404.html'
    else:
        the_template = 'pages/501.html'
    try:
        yaml_filename = docassemble.base.functions.interview_path()
    except:
        yaml_filename = None
    show_retry = request.path.endswith('/interview') or request.path.endswith('/start') or request.path.endswith('/run')
    return render_template(the_template, verbose=daconfig.get('verbose error messages', True), version_warning=None, tab_title=word("Error"), page_title=word("Error"), error=errmess, historytext=str(the_history), logtext=str(the_trace), extra_js=Markup(script), special_error=special_error_html, show_debug=show_debug, yaml_filename=yaml_filename, show_retry=show_retry), error_code
