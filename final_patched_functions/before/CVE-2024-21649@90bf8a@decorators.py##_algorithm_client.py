def _algorithm_client() -> callable:
    """
    Decorator that adds an algorithm client object to a function

    By adding @algorithm_client to a function, the ``algorithm_client``
    argument will be added to the front of the argument list. This client can
    be used to communicate with the server.

    There is one reserved argument `mock_client` in the function to be
    decorated. If this argument is provided, the decorator will add this
    MockAlgorithmClient to the front of the argument list instead of the
    regular AlgorithmClient.

    Parameters
    ----------
    func : callable
        Function to decorate

    Returns
    -------
    callable
        Decorated function

    Examples
    --------
    >>> @algorithm_client
    >>> def my_algorithm(algorithm_client: AlgorithmClient, <other arguments>):
    >>>     pass
    """
    def protection_decorator(func: callable, *args, **kwargs) -> callable:
        @wraps(func)
        def decorator(*args, mock_client: MockAlgorithmClient = None,
                      **kwargs) -> callable:
            """
            Wrap the function with the client object

            Parameters
            ----------
            mock_client : MockAlgorithmClient
                Mock client to use instead of the regular client
            """
            if mock_client is not None:
                return func(mock_client, *args, **kwargs)
            # read server address from the environment
            host = os.environ["HOST"]
            port = os.environ["PORT"]
            api_path = os.environ["API_PATH"]

            # read token from the environment
            token_file = os.environ["TOKEN_FILE"]
            info("Reading token")
            with open(token_file) as fp:
                token = fp.read().strip()

            client = AlgorithmClient(token=token, host=host, port=port,
                                     path=api_path)
            return func(client, *args, **kwargs)
        # set attribute that this function is wrapped in an algorithm client
        decorator.wrapped_in_algorithm_client_decorator = True
        return decorator
    return protection_decorator
