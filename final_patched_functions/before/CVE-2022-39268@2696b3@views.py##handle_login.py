    def handle_login(
        redirect_type: str = "client",
    ) -> Response | Tuple[Response, Literal[401]] | None:

        # Returns a shallow mutable copy of the immutable
        # multi dict.
        request_args = request.args.copy()
        redirect_url = request_args.pop("redirect_url", "/")
        query_args = "&".join(
            [arg + "=" + value for arg, value in request_args.items()]
        )
        if query_args:
            redirect_url += "?" + query_args

        if is_authenticated(request):
            return redirect_response(redirect_url, redirect_type)

        if request.method == "POST":
            token_creation_limit = datetime.datetime.utcnow() - datetime.timedelta(
                hours=app.config["TOKEN_DURATION_HOURS"]
            )
            # Remove outdated tokens.
            Token.query.filter(Token.created < token_creation_limit).delete()

            username = request.form.get("username")
            password = request.form.get("password")
            token = request.form.get("token")

            # Check whether the given user exists.
            user = User.query.filter(User.username == username).first()

            invalid_login_msg = "Username password combination does not exist."
            if user is None:
                return jsonify({"error": invalid_login_msg}), 401
            else:
                if password is not None:
                    can_login = check_password_hash(user.password_hash, password)
                elif token is not None and user.token_hash is not None:
                    can_login = check_password_hash(user.token_hash, token)
                else:
                    can_login = False

                if can_login:

                    token = Token(user=user.uuid, token=str(secrets.token_hex(16)))

                    db.session.add(token)
                    db.session.commit()

                    resp = redirect_response(redirect_url, redirect_type)
                    resp.set_cookie("auth_token", token.token)
                    resp.set_cookie("auth_username", username)

                    return resp

                else:
                    return jsonify({"error": invalid_login_msg}), 401
