def _refable_parameter_sets():
    sets = [
        # empties
        FindNodeSpec(nodes=[], sources=[], package=None, version=None, expected=None),
        FindNodeSpec(nodes=[], sources=[], package="root", version=None, expected=None),
    ]
    sets.extend(
        # only one model, no package specified -> find it in any package
        FindNodeSpec(
            nodes=[MockNode(project, "my_model")],
            sources=[],
            package=None,
            version=None,
            expected=(project, "my_model"),
        )
        for project in ["root", "dep"]
    )
    # only one model, no package specified -> find it in any package
    sets.extend(
        [
            FindNodeSpec(
                nodes=[MockNode("root", "my_model")],
                sources=[],
                package="root",
                version=None,
                expected=("root", "my_model"),
            ),
            FindNodeSpec(
                nodes=[MockNode("dep", "my_model")],
                sources=[],
                package="root",
                version=None,
                expected=None,
            ),
            # versioned model lookups
            FindNodeSpec(
                nodes=[MockNode("root", "my_model", version="2")],
                sources=[],
                package="root",
                version="2",
                expected=("root", "my_model", "2"),
            ),
            FindNodeSpec(
                nodes=[MockNode("root", "my_model", version="2")],
                sources=[],
                package="root",
                version=2,
                expected=("root", "my_model", "2"),
            ),
            FindNodeSpec(
                nodes=[MockNode("root", "my_model", version="3")],
                sources=[],
                package="root",
                version="2",
                expected=None,
            ),
            FindNodeSpec(
                nodes=[MockNode("root", "my_model", version="3", is_latest_version=True)],
                sources=[],
                package="root",
                version=None,
                expected=("root", "my_model", "3"),
            ),
            FindNodeSpec(
                nodes=[MockNode("root", "my_model", version="3", is_latest_version=False)],
                sources=[],
                package="root",
                version=None,
                expected=None,
            ),
            FindNodeSpec(
                nodes=[MockNode("root", "my_model", version="0", is_latest_version=False)],
                sources=[],
                package="root",
                version=None,
                expected=None,
            ),
            FindNodeSpec(
                nodes=[MockNode("root", "my_model", version="0", is_latest_version=True)],
                sources=[],
                package="root",
                version=None,
                expected=("root", "my_model", "0"),
            ),
            # a source with that name exists, but not a refable
            FindNodeSpec(
                nodes=[],
                sources=[MockSource("root", "my_source", "my_model")],
                package=None,
                version=None,
                expected=None,
            ),
            # a source with that name exists, and a refable
            FindNodeSpec(
                nodes=[MockNode("root", "my_model")],
                sources=[MockSource("root", "my_source", "my_model")],
                package=None,
                version=None,
                expected=("root", "my_model"),
            ),
            FindNodeSpec(
                nodes=[MockNode("root", "my_model")],
                sources=[MockSource("root", "my_source", "my_model")],
                package="root",
                version=None,
                expected=("root", "my_model"),
            ),
            FindNodeSpec(
                nodes=[MockNode("root", "my_model")],
                sources=[MockSource("root", "my_source", "my_model")],
                package="dep",
                version=None,
                expected=None,
            ),
            # duplicate node name across package
            FindNodeSpec(
                nodes=[MockNode("project_a", "my_model"), MockNode("project_b", "my_model")],
                sources=[],
                package="project_a",
                version=None,
                expected=("project_a", "my_model"),
            ),
            # duplicate node name across package: root node preferred to package node
            FindNodeSpec(
                nodes=[MockNode("root", "my_model"), MockNode("project_a", "my_model")],
                sources=[],
                package=None,
                version=None,
                expected=("root", "my_model"),
            ),
            FindNodeSpec(
                nodes=[MockNode("root", "my_model"), MockNode("project_a", "my_model")],
                sources=[],
                package="root",
                version=None,
                expected=("root", "my_model"),
            ),
            FindNodeSpec(
                nodes=[MockNode("root", "my_model"), MockNode("project_a", "my_model")],
                sources=[],
                package="project_a",
                version=None,
                expected=("project_a", "my_model"),
            ),
            # duplicate node name across package: resolved by version
            FindNodeSpec(
                nodes=[
                    MockNode("project_a", "my_model", version="1"),
                    MockNode("project_b", "my_model", version="2"),
                ],
                sources=[],
                package=None,
                version="1",
                expected=("project_a", "my_model", "1"),
            ),
        ]
    )
    return sets
