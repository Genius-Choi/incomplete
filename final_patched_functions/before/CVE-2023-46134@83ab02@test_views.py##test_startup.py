def test_startup(unittest):
    import dtale.views as views
    import dtale.global_state as global_state

    global_state.clear_store()

    instance = views.startup(URL)
    assert instance._data_id == "1"

    with pytest.raises(views.NoDataLoadedException) as error:
        views.startup(URL, data_loader=lambda: None)
    assert "No data has been loaded into this D-Tale session!" in str(
        error.value.args[0]
    )

    with pytest.raises(BaseException) as error:
        views.startup(URL, "bad type")
    assert (
        "data loaded must be one of the following types: pandas.DataFrame, pandas.Series, pandas.DatetimeIndex"
        in str(error.value)
    )

    test_data = pd.DataFrame([dict(date=pd.Timestamp("now"), security_id=1, foo=1.5)])
    test_data = test_data.set_index(["date", "security_id"])
    instance = views.startup(
        URL,
        data_loader=lambda: test_data,
        sort=[("security_id", "ASC")],
        hide_header_editor=True,
        hide_shutdown=True,
        lock_header_menu=True,
        hide_header_menu=True,
        hide_main_menu=True,
        hide_column_menus=True,
    )

    pdt.assert_frame_equal(instance.data, test_data.reset_index())
    unittest.assertEqual(
        global_state.get_settings(instance._data_id),
        dict(
            allow_cell_edits=True,
            columnFormats={},
            hide_shutdown=True,
            hide_header_editor=True,
            lock_header_menu=True,
            hide_header_menu=True,
            hide_main_menu=True,
            hide_column_menus=True,
            locked=["date", "security_id"],
            indexes=["date", "security_id"],
            precision=2,
            sortInfo=[("security_id", "ASC")],
            rangeHighlight=None,
            backgroundMode=None,
            verticalHeaders=False,
            highlightFilter=False,
        ),
        "should lock index columns",
    )

    global_state.set_app_settings(dict(hide_header_editor=False))
    unittest.assertEqual(
        global_state.get_settings(instance._data_id),
        dict(
            allow_cell_edits=True,
            columnFormats={},
            hide_shutdown=True,
            hide_header_editor=False,
            lock_header_menu=True,
            hide_header_menu=True,
            hide_main_menu=True,
            hide_column_menus=True,
            locked=["date", "security_id"],
            indexes=["date", "security_id"],
            precision=2,
            sortInfo=[("security_id", "ASC")],
            rangeHighlight=None,
            backgroundMode=None,
            verticalHeaders=False,
            highlightFilter=False,
        ),
        "should hide header editor",
    )

    test_data = test_data.reset_index()
    with pytest.raises(DuplicateDataError):
        views.startup(URL, data=test_data, ignore_duplicate=False)

    range_highlights = {
        "foo": {
            "active": True,
            "equals": {
                "active": True,
                "value": 3,
                "color": {"r": 255, "g": 245, "b": 157, "a": 1},
            },  # light yellow
            "greaterThan": {
                "active": True,
                "value": 3,
                "color": {"r": 80, "g": 227, "b": 194, "a": 1},
            },  # mint green
            "lessThan": {
                "active": True,
                "value": 3,
                "color": {"r": 245, "g": 166, "b": 35, "a": 1},
            },  # orange
        }
    }
    instance = views.startup(
        URL,
        data=test_data,
        ignore_duplicate=True,
        allow_cell_edits=False,
        precision=6,
        range_highlights=range_highlights,
    )
    pdt.assert_frame_equal(instance.data, test_data)
    unittest.assertEqual(
        global_state.get_settings(instance._data_id),
        dict(
            allow_cell_edits=False,
            columnFormats={},
            locked=[],
            indexes=[],
            precision=6,
            rangeHighlight=range_highlights,
            backgroundMode=None,
            verticalHeaders=False,
            highlightFilter=False,
        ),
        "no index = nothing locked",
    )

    test_data = pd.DataFrame([dict(date=pd.Timestamp("now"), security_id=1)])
    test_data = test_data.set_index("security_id").date
    instance = views.startup(URL, data_loader=lambda: test_data)
    pdt.assert_frame_equal(instance.data, test_data.reset_index())
    unittest.assertEqual(
        global_state.get_settings(instance._data_id),
        dict(
            allow_cell_edits=True,
            columnFormats={},
            locked=["security_id"],
            indexes=["security_id"],
            precision=2,
            rangeHighlight=None,
            backgroundMode=None,
            verticalHeaders=False,
            highlightFilter=False,
        ),
        "should lock index columns",
    )

    test_data = pd.DatetimeIndex([pd.Timestamp("now")], name="date")
    instance = views.startup(URL, data_loader=lambda: test_data)
    pdt.assert_frame_equal(instance.data, test_data.to_frame(index=False))
    unittest.assertEqual(
        global_state.get_settings(instance._data_id),
        dict(
            allow_cell_edits=True,
            locked=[],
            indexes=[],
            precision=2,
            columnFormats={},
            rangeHighlight=None,
            backgroundMode=None,
            verticalHeaders=False,
            highlightFilter=False,
        ),
        "should not lock index columns",
    )

    test_data = pd.MultiIndex.from_arrays([[1, 2], [3, 4]], names=("a", "b"))
    instance = views.startup(URL, data_loader=lambda: test_data)
    pdt.assert_frame_equal(instance.data, test_data.to_frame(index=False))
    unittest.assertEqual(
        global_state.get_settings(instance._data_id),
        dict(
            allow_cell_edits=True,
            locked=[],
            indexes=[],
            precision=2,
            columnFormats={},
            rangeHighlight=None,
            backgroundMode=None,
            verticalHeaders=False,
            highlightFilter=False,
        ),
        "should not lock index columns",
    )

    test_data = pd.DataFrame(
        [
            dict(date=pd.Timestamp("now"), security_id=1, foo=1.0, bar=2.0, baz=np.nan),
            dict(
                date=pd.Timestamp("now"), security_id=1, foo=2.0, bar=np.inf, baz=np.nan
            ),
        ],
        columns=["date", "security_id", "foo", "bar", "baz"],
    )
    instance = views.startup(
        URL, data_loader=lambda: test_data, auto_hide_empty_columns=True
    )
    unittest.assertEqual(
        {
            "name": "bar",
            "dtype": "float64",
            "index": 3,
            "visible": True,
            "hasMissing": 0,
            "hasOutliers": 0,
            "lowVariance": False,
            "unique_ct": 2,
            "kurt": "nan",
            "skew": "nan",
            "coord": None,
        },
        next(
            (
                dt
                for dt in global_state.get_dtypes(instance._data_id)
                if dt["name"] == "bar"
            ),
            None,
        ),
    )

    non_visible = [
        dt["name"]
        for dt in global_state.get_dtypes(instance._data_id)
        if not dt["visible"]
    ]
    unittest.assertEqual(non_visible, ["baz"])

    test_data = pd.DataFrame([dict(a=1, b=2)])
    test_data = test_data.rename(columns={"b": "a"})
    with pytest.raises(Exception) as error:
        views.startup(URL, data_loader=lambda: test_data)
    assert "data contains duplicated column names: a" in str(error)

    test_data = pd.DataFrame([dict(a=1, b=2)])
    test_data = test_data.set_index("a")
    views.startup(URL, data=test_data, inplace=True, drop_index=True)
    assert "a" not in test_data.columns

    test_data = np.array([1, 2, 3])
    instance = views.startup(URL, data_loader=lambda: test_data)
    unittest.assertEqual(list(instance.data.iloc[:, 0].tolist()), test_data.tolist())

    test_data = np.ndarray(shape=(2, 2), dtype=float, order="F")
    instance = views.startup(URL, data_loader=lambda: test_data)
    np.testing.assert_almost_equal(instance.data.values, test_data)

    test_data = [1, 2, 3]
    instance = views.startup(URL, data_loader=lambda: test_data, ignore_duplicate=True)
    unittest.assertEqual(instance.data.iloc[:, 0].tolist(), test_data)

    test_data = dict(a=[1, 2, 3], b=[4, 5, 6])
    instance = views.startup(URL, data_loader=lambda: test_data, ignore_duplicate=True)
    unittest.assertEqual(instance.data["a"].values.tolist(), test_data["a"])
    unittest.assertEqual(instance.data["b"].values.tolist(), test_data["b"])

    test_data = dict(a=1, b=2, c=3)
    instance = views.startup(URL, data_loader=lambda: test_data, ignore_duplicate=True)
    unittest.assertEqual(
        sorted(instance.data["index"].values.tolist()), sorted(test_data.keys())
    )
    unittest.assertEqual(
        sorted(instance.data["0"].values.tolist()), sorted(test_data.values())
    )

    test_data = pd.DataFrame(
        dict(
            a=["{}".format(i) for i in range(10)],
            b=["{}".format(i % 2) for i in range(10)],
        )
    )
    instance = views.startup(
        URL,
        data_loader=lambda: test_data,
        ignore_duplicate=True,
        optimize_dataframe=True,
    )
    unittest.assertEqual(
        list(instance.data.dtypes.apply(lambda x: x.name).values),
        ["object", "category"],
    )

    many_cols = pd.DataFrame({"sec{}".format(v): [1] for v in range(500)})
    instance = views.startup(URL, data=many_cols)
    unittest.assertEqual(
        len([v for v in global_state.get_dtypes(instance._data_id) if v["visible"]]),
        100,
    )

    if PY3 and check_pandas_version("0.25.0"):
        s_int = pd.Series([1, 2, 3, 4, 5], index=list("abcde"), dtype=pd.Int64Dtype())
        s2_int = s_int.reindex(["a", "b", "c", "f", "u"])
        ints = pd.Series([1, 2, 3, 4, 5], index=list("abcfu"))
        test_data = pd.DataFrame(dict(na=s2_int, int=ints))
        test_data.loc[:, "unsigned_int"] = pd.to_numeric(
            test_data["int"], downcast="unsigned"
        )
        instance = views.startup(
            URL, data_loader=lambda: test_data, ignore_duplicate=True
        )

        unittest.assertEqual(
            {
                "coord": None,
                "dtype": "Int64",
                "hasMissing": 2,
                "hasOutliers": 0,
                "index": 1,
                "kurt": "nan",
                "lowVariance": False,
                "max": 3,
                "min": 1,
                "name": "na",
                "skew": 0.0,
                "unique_ct": 3,
                "visible": True,
                "outlierRange": {"lower": 0.0, "upper": 4.0},
            },
            global_state.get_dtypes(instance._data_id)[1],
        )

        unittest.assertEqual(
            {
                "dtype": "uint8",
                "hasMissing": 0,
                "hasOutliers": 0,
                "index": 3,
                "name": "unsigned_int",
                "unique_ct": 5,
                "visible": True,
            },
            global_state.get_dtypes(instance._data_id)[-1],
        )
