  def check_import(mode, user_names)    #, user_emails

    err_msgs = []

    # Existing Users
    unless self.id.nil? or self.id == 0 or self.id == ''
      if mode == 'add'
        err_msgs << I18n.t('user.import.dont_specify_id')
      else
        begin
          org_user = User.find(self.id)
        rescue
        end
        if org_user.nil?
          err_msgs << I18n.t('user.import.not_found')
        end
      end
    end

    # Required
    if self.name.nil? or self.name.empty?
      err_msgs <<  User.human_attribute_name('name') + I18n.t('msg.is_required')
    end
    if self.pass_md5.nil? or self.pass_md5.empty?
      if mode == 'update' and !org_user.nil?
        self.pass_md5 = org_user.pass_md5
      end
    end
    if self.pass_md5.nil? or self.pass_md5.empty?
      err_msgs << I18n.t('password.name') + I18n.t('msg.is_required')
    end
    if self.email.nil? or self.email.empty?
      err_msgs <<  User.human_attribute_name('email') + I18n.t('msg.is_required')
    end

    # Duplicated
    if user_names.include?(self.name)
      err_msgs << User.human_attribute_name('name') + I18n.t('msg.is_duplicated')
    elsif !self.name.nil? and !self.name.empty?
      user_names << self.name
    end
# Comment out considering about administrative users.
#    if user_emails.include?(self.email)
#      err_msgs << User.human_attribute_name('email') + I18n.t('msg.is_duplicated')
#    elsif !self.email.nil? and !self.email.empty?
#      user_emails << self.email
#    end

    # Characters
    if (/^[01-9a-zA-Z]+$/ =~ self.name).nil?
      err_msgs << User.human_attribute_name('name') + I18n.t('activerecord.errors.models.user.attributes.name.invalid', :attribute => User.human_attribute_name('name'))
    end

    # Authority
    unless self.auth.nil? or self.auth.empty? or self.auth == User::AUTH_ALL

      if (/^|([a-z]+|)+$/ =~ self.auth) == 0

        keys = User.get_auth_names.keys()
        keys.delete(User::AUTH_ALL)

        self.get_auth_a.each do |auth|
          unless keys.include?(auth)
            err_msgs << I18n.t('user.import.not_valid_auth') + ': '+auth.to_s
            break
          end
        end

      else
        err_msgs << I18n.t('user.import.invalid_auth_format')
      end
    end

    # Groups
    unless self.groups.nil? or self.groups.empty?

      if (/^|([0-9]+|)+$/ =~ self.groups) == 0

        self.get_groups_a.each do |group_id|
          group = Group.find_by_id(group_id)
          if group.nil?
            err_msgs << I18n.t('user.import.not_valid_groups') + ': '+group_id.to_s
            break
          end
        end
      else
        err_msgs << I18n.t('user.import.invalid_groups_format')
      end
    end

    return err_msgs
  end
