  def test_to_ruby_nested_hash
    metadata = {}
    metadata[metadata] = metadata

    @a2.metadata = metadata

    ruby = @a2.to_ruby

    assert_match %r%^  s\.metadata = \{ "%, ruby
  end

  def test_to_ruby_platform
    @a2.platform = Gem::Platform.local
    @a2.instance_variable_set :@original_platform, 'old_platform'

    ruby_code = @a2.to_ruby

    same_spec = eval ruby_code

    assert_equal 'old_platform', same_spec.original_platform
  end

  def test_to_yaml
    yaml_str = @a1.to_yaml

    refute_match '!!null', yaml_str

    same_spec = Gem::Specification.from_yaml(yaml_str)

    assert_equal @a1, same_spec
  end

  def test_to_yaml_fancy
    @a1.platform = Gem::Platform.local
    yaml_str = @a1.to_yaml

    same_spec = Gem::Specification.from_yaml(yaml_str)

    assert_equal Gem::Platform.local, same_spec.platform

    assert_equal @a1, same_spec
  end

  def test_to_yaml_platform_empty_string
    @a1.instance_variable_set :@original_platform, ''

    assert_match %r|^platform: ruby$|, @a1.to_yaml
  end

  def test_to_yaml_platform_legacy
    @a1.platform = 'powerpc-darwin7.9.0'
    @a1.instance_variable_set :@original_platform, 'powerpc-darwin7.9.0'

    yaml_str = @a1.to_yaml

    same_spec = YAML.load yaml_str

    assert_equal Gem::Platform.new('powerpc-darwin7'), same_spec.platform
    assert_equal 'powerpc-darwin7.9.0', same_spec.original_platform
  end

  def test_to_yaml_platform_nil
    @a1.instance_variable_set :@original_platform, nil

    assert_match %r|^platform: ruby$|, @a1.to_yaml
  end

  def test_validate
    util_setup_validate

    Dir.chdir @tempdir do
      assert @a1.validate
    end
  end

  def x s; s.gsub(/xxx/, ''); end
  def w; x "WARxxxNING"; end
  def t; x "TOxxxDO"; end
  def f; x "FxxxIXME"; end

  def test_validate_authors
    util_setup_validate

    Dir.chdir @tempdir do
      @a1.authors = [""]

      use_ui @ui do
        @a1.validate
      end

      assert_match "#{w}:  no author specified\n", @ui.error, 'error'

      @a1.authors = [Object.new]

      assert_equal [], @a1.authors

      e = assert_raises Gem::InvalidSpecificationException do
        @a1.validate
      end

      assert_equal "authors may not be empty", e.message

      @a1.authors = ["#{f} (who is writing this software)"]

      e = assert_raises Gem::InvalidSpecificationException do
        @a1.validate
      end

      assert_equal %{"#{f}" or "#{t}" is not an author}, e.message

      @a1.authors = ["#{t} (who is writing this software)"]

      e = assert_raises Gem::InvalidSpecificationException do
        @a1.validate
      end

      assert_equal %{"#{f}" or "#{t}" is not an author}, e.message
    end
  end

  def test_validate_autorequire
    util_setup_validate

    Dir.chdir @tempdir do
      @a1.autorequire = 'code'

      use_ui @ui do
        @a1.validate
      end

      assert_match "#{w}:  deprecated autorequire specified\n",
                   @ui.error, 'error'
    end
  end

  def test_validate_dependencies
    util_setup_validate

    Dir.chdir @tempdir do
      @a1.add_runtime_dependency     'b', '>= 1.0.rc1'
      @a1.add_development_dependency 'c', '>= 2.0.rc2'
      @a1.add_runtime_dependency     'd', '~> 1.2.3'
      @a1.add_runtime_dependency     'e', '~> 1.2.3.4'
      @a1.add_runtime_dependency     'g', '~> 1.2.3', '>= 1.2.3.4'
      @a1.add_runtime_dependency     'h', '>= 1.2.3', '<= 2'
      @a1.add_runtime_dependency     'i', '>= 1.2'
      @a1.add_runtime_dependency     'j', '>= 1.2.3'
      @a1.add_runtime_dependency     'k', '> 1.2'
      @a1.add_runtime_dependency     'l', '> 1.2.3'
      @a1.add_runtime_dependency     'm', '~> 2.1.0'
      @a1.add_runtime_dependency     'n', '~> 0.1.0'

      use_ui @ui do
        @a1.validate
      end

      expected = <<-EXPECTED
#{w}:  prerelease dependency on b (>= 1.0.rc1) is not recommended
#{w}:  prerelease dependency on c (>= 2.0.rc2, development) is not recommended
#{w}:  pessimistic dependency on d (~> 1.2.3) may be overly strict
  if d is semantically versioned, use:
    add_runtime_dependency 'd', '~> 1.2', '>= 1.2.3'
#{w}:  pessimistic dependency on e (~> 1.2.3.4) may be overly strict
  if e is semantically versioned, use:
    add_runtime_dependency 'e', '~> 1.2', '>= 1.2.3.4'
#{w}:  open-ended dependency on i (>= 1.2) is not recommended
  if i is semantically versioned, use:
    add_runtime_dependency 'i', '~> 1.2'
#{w}:  open-ended dependency on j (>= 1.2.3) is not recommended
  if j is semantically versioned, use:
    add_runtime_dependency 'j', '~> 1.2', '>= 1.2.3'
#{w}:  open-ended dependency on k (> 1.2) is not recommended
  if k is semantically versioned, use:
    add_runtime_dependency 'k', '~> 1.2', '> 1.2'
#{w}:  open-ended dependency on l (> 1.2.3) is not recommended
  if l is semantically versioned, use:
    add_runtime_dependency 'l', '~> 1.2', '> 1.2.3'
#{w}:  pessimistic dependency on m (~> 2.1.0) may be overly strict
  if m is semantically versioned, use:
    add_runtime_dependency 'm', '~> 2.1', '>= 2.1.0'
#{w}:  See http://guides.rubygems.org/specification-reference/ for help
      EXPECTED

      assert_equal expected, @ui.error, 'warning'
    end
  end

  def test_validate_dependencies_duplicates
    util_setup_validate

    Dir.chdir @tempdir do
      @a1.add_runtime_dependency 'b', '~> 1.2'
      @a1.add_runtime_dependency 'b', '>= 1.2.3'
      @a1.add_development_dependency 'c', '~> 1.2'
      @a1.add_development_dependency 'c', '>= 1.2.3'

      use_ui @ui do
        e = assert_raises Gem::InvalidSpecificationException do
          @a1.validate
        end

        expected = <<-EXPECTED
duplicate dependency on b (>= 1.2.3), (~> 1.2) use:
    add_runtime_dependency 'b', '>= 1.2.3', '~> 1.2'
duplicate dependency on c (>= 1.2.3, development), (~> 1.2) use:
    add_development_dependency 'c', '>= 1.2.3', '~> 1.2'
        EXPECTED

        assert_equal expected, e.message
      end

      assert_equal <<-EXPECTED, @ui.error
#{w}:  See http://guides.rubygems.org/specification-reference/ for help
      EXPECTED
    end
  end

  def test_validate_dependencies_allowed_duplicates
    util_setup_validate

    Dir.chdir @tempdir do
      @a1.add_runtime_dependency 'b', '~> 1.2'
      @a1.add_development_dependency 'b', '= 1.2.3'

      use_ui @ui do
        @a1.validate
      end

      assert_equal '', @ui.error, 'warning'
    end
  end

  def test_validate_prerelease_dependencies_with_prerelease_version
    util_setup_validate

    Dir.chdir @tempdir do
      @a1.version = '1.0.0.beta.1'
      @a1.add_runtime_dependency 'b', '~> 1.2.0.beta.1'

      use_ui @ui do
        @a1.validate
      end

      assert_equal '', @ui.error, 'warning'
    end
  end

  def test_validate_description
    util_setup_validate

    Dir.chdir @tempdir do
      @a1.description = ''

      use_ui @ui do
        @a1.validate
      end

      @ui = Gem::MockGemUi.new
      @a1.summary = "this is my summary"
      @a1.description = @a1.summary

      use_ui @ui do
        @a1.validate
      end

      assert_match "#{w}:  description and summary are identical\n",
                   @ui.error, "error"

      @a1.description = "#{f} (describe your package)"

      e = assert_raises Gem::InvalidSpecificationException do
        @a1.validate
      end

      assert_equal %{"#{f}" or "#{t}" is not a description}, e.message

      @a1.description = "#{t} (describe your package)"

      e = assert_raises Gem::InvalidSpecificationException do
        @a1.validate
      end

      assert_equal %{"#{f}" or "#{t}" is not a description}, e.message
    end
  end

  def test_validate_email
    util_setup_validate

    Dir.chdir @tempdir do
      @a1.email = "FIxxxXME (your e-mail)".sub(/xxx/, "")

      e = assert_raises Gem::InvalidSpecificationException do
        @a1.validate
      end

      assert_equal %{"#{f}" or "#{t}" is not an email}, e.message

      @a1.email = "#{t} (your e-mail)"

      e = assert_raises Gem::InvalidSpecificationException do
        @a1.validate
      end

      assert_equal %{"#{f}" or "#{t}" is not an email}, e.message
    end
  end

  def test_validate_empty
    e = assert_raises Gem::InvalidSpecificationException do
      Gem::Specification.new.validate
    end

    assert_equal 'missing value for attribute name', e.message
  end

  def test_validate_error
    assert_raises Gem::InvalidSpecificationException do
      use_ui @ui do
        Gem::Specification.new.validate
      end
    end

    assert_match 'See http://guides.rubygems.org/specification-reference/ for help', @ui.error
  end

  def test_validate_executables
    util_setup_validate

    FileUtils.mkdir_p File.join(@tempdir, 'bin')
    File.open File.join(@tempdir, 'bin', 'exec'), 'w' do end
    FileUtils.mkdir_p File.join(@tempdir, 'exec')

    use_ui @ui do
      Dir.chdir @tempdir do
        assert @a1.validate
      end
    end

    assert_equal %w[exec], @a1.executables

    assert_equal '', @ui.output, 'output'
    assert_match "#{w}:  bin/exec is missing #! line\n", @ui.error, 'error'
  end

  def test_validate_empty_require_paths
    if win_platform? then
      skip 'test_validate_empty_require_paths skipped on MS Windows (symlink)'
    else
      util_setup_validate

      @a1.require_paths = []
      e = assert_raises Gem::InvalidSpecificationException do
        @a1.validate
      end

      assert_equal 'specification must have at least one require_path',
                   e.message
    end
  end

  def test_validate_files
    skip 'test_validate_files skipped on MS Windows (symlink)' if win_platform?
    util_setup_validate

    @a1.files += ['lib', 'lib2']
    @a1.extensions << 'ext/a/extconf.rb'

    Dir.chdir @tempdir do
      FileUtils.ln_s 'lib/code.rb', 'lib2' unless vc_windows?

      use_ui @ui do
        @a1.validate
      end

      assert_match 'WARNING:  lib2 is a symlink, which is not supported on all platforms', @ui.error
    end

    assert_equal %w[bin/exec ext/a/extconf.rb lib/code.rb lib2 test/suite.rb].sort,
                 @a1.files
  end

  def test_validate_files_recursive
    util_setup_validate
    FileUtils.touch @a1.file_name

    @a1.files = [@a1.file_name]

    e = assert_raises Gem::InvalidSpecificationException do
      @a1.validate
    end

    assert_equal "#{@a1.full_name} contains itself (#{@a1.file_name}), check your files list",
                 e.message
  end

  def test_validate_homepage
    util_setup_validate

    Dir.chdir @tempdir do
      @a1.homepage = nil

      use_ui @ui do
        @a1.validate
      end

      assert_match "#{w}:  no homepage specified\n", @ui.error, 'error'

      @ui = Gem::MockGemUi.new

      @a1.homepage = ''

      use_ui @ui do
        @a1.validate
      end

      assert_match "#{w}:  no homepage specified\n", @ui.error, 'error'

      @a1.homepage = 'over at my cool site'

      e = assert_raises Gem::InvalidSpecificationException do
        @a1.validate
      end

      assert_equal '"over at my cool site" is not a URI', e.message
    end
  end

  def test_validate_license
    util_setup_validate

    use_ui @ui do
      @a1.licenses.clear
      @a1.validate
    end

    assert_match <<-warning, @ui.error
WARNING:  licenses is empty, but is recommended.  Use a license identifier from
http://spdx.org/licenses or 'Nonstandard' for a nonstandard license.
    warning
  end

  def test_validate_license_values
    util_setup_validate

    use_ui @ui do
      @a1.licenses = ['BSD']
      @a1.validate
    end

    assert_match <<-warning, @ui.error
WARNING:  license value 'BSD' is invalid.  Use a license identifier from
http://spdx.org/licenses or 'Nonstandard' for a nonstandard license.
    warning
  end

  def test_validate_license_values_plus
    util_setup_validate

    use_ui @ui do
      @a1.licenses = ['GPL-2.0+']
      @a1.validate
    end

    assert_empty @ui.error
  end

  def test_validate_license_values_with
    util_setup_validate

    use_ui @ui do
      @a1.licenses = ['GPL-2.0+ WITH Autoconf-exception-2.0']
      @a1.validate
    end

    assert_empty @ui.error
  end

  def test_validate_license_with_nonsense_suffix
    util_setup_validate

    use_ui @ui do
      @a1.licenses = ['GPL-2.0+ FOO', 'GPL-2.0 FOO']
      @a1.validate
    end

    assert_match <<-warning, @ui.error
WARNING:  license value 'GPL-2.0+ FOO' is invalid.  Use a license identifier from
http://spdx.org/licenses or 'Nonstandard' for a nonstandard license.
    warning
    assert_match <<-warning, @ui.error
WARNING:  license value 'GPL-2.0 FOO' is invalid.  Use a license identifier from
http://spdx.org/licenses or 'Nonstandard' for a nonstandard license.
    warning
  end

  def test_validate_license_gives_suggestions
    util_setup_validate

    use_ui @ui do
      @a1.licenses = ['ruby']
      @a1.validate
    end

    assert_match <<-warning, @ui.error
WARNING:  license value 'ruby' is invalid.  Use a license identifier from
http://spdx.org/licenses or 'Nonstandard' for a nonstandard license.
Did you mean 'Ruby'?
    warning
  end

  def test_validate_empty_files
    util_setup_validate

    use_ui @ui do
      # we have to set all of these for #files to be empty
      @a1.files = []
      @a1.test_files = []
      @a1.executables = []

      @a1.validate
    end

    assert_match "no files specified", @ui.error
  end

  def test_validate_empty_homepage
    util_setup_validate

    use_ui @ui do
      @a1.homepage = nil
      @a1.validate
    end

    assert_match "no homepage specified", @ui.error
  end

  def test_validate_empty_summary
    util_setup_validate

    use_ui @ui do
      @a1.summary = nil
      @a1.validate
    end

    assert_match "no summary specified", @ui.error
  end

  def test_validate_name
    util_setup_validate

    e = assert_raises Gem::InvalidSpecificationException do
      @a1.name = :json
      @a1.validate
    end

    assert_equal 'invalid value for attribute name: ":json" must be a string', e.message

    @a1.name = []
    e = assert_raises Gem::InvalidSpecificationException do
      @a1.validate
    end
    assert_equal "invalid value for attribute name: \"[]\" must be a string", e.message

    @a1.name = ""
    e = assert_raises Gem::InvalidSpecificationException do
      @a1.validate
    end
    assert_equal "invalid value for attribute name: \"\" must include at least one letter", e.message

    @a1.name = "12345"
    e = assert_raises Gem::InvalidSpecificationException do
      @a1.validate
    end
    assert_equal "invalid value for attribute name: \"12345\" must include at least one letter", e.message

    @a1.name = "../malicious"
    e = assert_raises Gem::InvalidSpecificationException do
      @a1.validate
    end
    assert_equal "invalid value for attribute name: \"../malicious\" can only include letters, numbers, dashes, and underscores", e.message

    @a1.name = "\ba\t"
    e = assert_raises Gem::InvalidSpecificationException do
      @a1.validate
    end
    assert_equal "invalid value for attribute name: \"\\ba\\t\" can only include letters, numbers, dashes, and underscores", e.message
  end

  def test_validate_non_nil
    util_setup_validate

    Dir.chdir @tempdir do
      assert @a1.validate

      Gem::Specification.non_nil_attributes.each do |name|
        next if name == :files # set by #normalize
        spec = @a1.dup
        spec.instance_variable_set "@#{name}", nil

        e = assert_raises Gem::InvalidSpecificationException do
          spec.validate
        end

        assert_match %r%^#{name}%, e.message
      end
    end
  end

  def test_validate_permissions
    skip 'chmod not supported' if Gem.win_platform?

    util_setup_validate

    Dir.chdir @tempdir do
      File.chmod 0640, File.join('lib', 'code.rb')
      File.chmod 0640, File.join('bin', 'exec')

      use_ui @ui do
        @a1.validate
      end

      assert_match "#{w}:  lib/code.rb is not world-readable\n", @ui.error
      assert_match "#{w}:  bin/exec is not world-readable\n", @ui.error
      assert_match "#{w}:  bin/exec is not executable\n", @ui.error
    end
  end

  def test_validate_permissions_of_missing_file_non_packaging
    skip 'chmod not supported' if Gem.win_platform?

    util_setup_validate

    Dir.chdir @tempdir do
      File.delete File.join('lib', 'code.rb')

      use_ui @ui do
        assert @a1.validate(false)
      end
    end
  end

  def test_validate_platform_legacy
    util_setup_validate

    Dir.chdir @tempdir do
      @a1.platform = 'mswin32'
      assert @a1.validate

      @a1.platform = 'i586-linux'
      assert @a1.validate

      @a1.platform = 'powerpc-darwin'
      assert @a1.validate
    end
  end

  def test_validate_rubygems_version
    util_setup_validate

    @a1.rubygems_version = "3"
    e = assert_raises Gem::InvalidSpecificationException do
      @a1.validate
    end

    assert_equal "expected RubyGems version #{Gem::VERSION}, was 3",
                 e.message
  end

  def test_validate_specification_version
    util_setup_validate

    Dir.chdir @tempdir do
      @a1.specification_version = '1.0'

      e = assert_raises Gem::InvalidSpecificationException do
        use_ui @ui do
          @a1.validate
        end
      end

      err = 'specification_version must be an Integer (did you mean version?)'
      assert_equal err, e.message
    end
  end

  def test_validate_summary
    util_setup_validate

    Dir.chdir @tempdir do
      @a1.summary = ''

      use_ui @ui do
        @a1.validate
      end

      assert_match "#{w}:  no summary specified\n", @ui.error, 'error'

      @a1.summary = "#{f} (describe your package)"

      e = assert_raises Gem::InvalidSpecificationException do
        @a1.validate
      end

      assert_equal %{"#{f}" or "#{t}" is not a summary}, e.message

      @a1.summary = "#{t} (describe your package)"

      e = assert_raises Gem::InvalidSpecificationException do
        @a1.validate
      end

      assert_equal %{"#{f}" or "#{t}" is not a summary}, e.message
    end
  end

  def test_validate_warning
    util_setup_validate

    use_ui @ui do
      @a1.licenses.clear
      @a1.validate
    end

    assert_match 'See http://guides.rubygems.org/specification-reference/ for help', @ui.error
  end

  def test_version
    assert_equal Gem::Version.new('1'), @a1.version
  end

  def test_version_change_reset_full_name
    orig_full_name = @a1.full_name

    @a1.version = "2"

    refute_equal orig_full_name, @a1.full_name
  end

  def test_version_change_reset_cache_file
    orig_cache_file = @a1.cache_file

    @a1.version = "2"

    refute_equal orig_cache_file, @a1.cache_file
  end

  def test__load_fixes_Date_objects
    spec = new_spec "a", 1
    spec.instance_variable_set :@date, Date.today

    spec = Marshal.load Marshal.dump(spec)

    assert_kind_of Time, spec.date
  end

  def test_load_errors_contain_filename
    specfile = Tempfile.new(self.class.name.downcase)
    specfile.write "raise 'boom'"
    specfile.close
    begin
      capture_io do
        Gem::Specification.load(specfile.path)
      end
    rescue => e
      name_rexp = Regexp.new(Regexp.escape(specfile.path))
      assert e.backtrace.grep(name_rexp).any?
    end
  ensure
    specfile.delete
  end

  ##
  # KEEP p-1-x86-darwin-8
  # KEEP p-1
  # KEEP c-1.2
  # KEEP a_evil-9
  #      a-1
  #      a-1-x86-my_platform-1
  # KEEP a-2
  #      a-2-x86-other_platform-1
  # KEEP a-2-x86-my_platform-1
  #      a-3.a
  # KEEP a-3-x86-other_platform-1

  def test_latest_specs
    spec_fetcher do |fetcher|
      fetcher.spec 'a', 1 do |s|
        s.platform = Gem::Platform.new 'x86-my_platform1'
      end

      fetcher.spec 'a', 2

      fetcher.spec 'a', 2 do |s|
        s.platform = Gem::Platform.new 'x86-my_platform1'
      end

      fetcher.spec 'a', 2 do |s|
        s.platform = Gem::Platform.new 'x86-other_platform1'
      end

      fetcher.spec 'a', 3 do |s|
        s.platform = Gem::Platform.new 'x86-other_platform1'
      end
    end

    expected = %W[
                  a-2
                  a-2-x86-my_platform-1
                  a-3-x86-other_platform-1
                 ]

    latest_specs = Gem::Specification.latest_specs.map(&:full_name).sort

    assert_equal expected, latest_specs
  end

  def test_metadata_validates_ok
    util_setup_validate

    Dir.chdir @tempdir do
      @m1 = quick_gem 'm', '1' do |s|
        s.files = %w[lib/code.rb]
        s.metadata = {
          "one"          => "two",
          "home"         => "three",
          "homepage_uri" => "https://example.com/user/repo"
        }
      end

      use_ui @ui do
        @m1.validate
      end
    end
  end

  def test_metadata_key_type_validation_fails
    util_setup_validate

    Dir.chdir @tempdir do
      @m2 = quick_gem 'm', '2' do |s|
        s.files = %w[lib/code.rb]
        s.metadata = { 1 => "fail" }
      end

      e = assert_raises Gem::InvalidSpecificationException do
        @m2.validate
      end

      assert_equal "metadata keys must be a String", e.message
    end
  end

  def test_metadata_key_size_validation_fails
    util_setup_validate

    Dir.chdir @tempdir do
      @m2 = quick_gem 'm', '2' do |s|
        s.files = %w[lib/code.rb]
        s.metadata = { ("x" * 129) => "fail" }
      end

      e = assert_raises Gem::InvalidSpecificationException do
        @m2.validate
      end

      assert_equal "metadata key too large (129 > 128)", e.message
    end
  end

  def test_metadata_value_type_validation_fails
    util_setup_validate

    Dir.chdir @tempdir do
      @m2 = quick_gem 'm', '2' do |s|
        s.files = %w[lib/code.rb]
        s.metadata = { 'fail' => [] }
      end

      e = assert_raises Gem::InvalidSpecificationException do
        @m2.validate
      end

      assert_equal "metadata values must be a String", e.message
    end
  end

  def test_metadata_value_size_validation_fails
    util_setup_validate

    Dir.chdir @tempdir do
      @m2 = quick_gem 'm', '2' do |s|
        s.files = %w[lib/code.rb]
        s.metadata = { 'fail' => ("x" * 1025) }
      end

      e = assert_raises Gem::InvalidSpecificationException do
        @m2.validate
      end

      assert_equal "metadata value too large (1025 > 1024)", e.message
    end
  end

  def test_metadata_link_validation_fails
    util_setup_validate

    Dir.chdir @tempdir do
      @m2 = quick_gem 'm', '2' do |s|
        s.files = %w[lib/code.rb]
        s.metadata = { 'homepage_uri' => 'http:/example.com' }
      end

      e = assert_raises Gem::InvalidSpecificationException do
        @m2.validate
      end

      assert_equal "metadata['homepage_uri'] has invalid link: \"http:/example.com\"", e.message
    end
  end

  def test_metadata_specs
    valid_ruby_spec = <<-EOF
# -*- encoding: utf-8 -*-
# stub: m 1 ruby lib

Gem::Specification.new do |s|
  s.name = "m".freeze
  s.version = "1"

  s.required_rubygems_version = Gem::Requirement.new(">= 0".freeze) if s.respond_to? :required_rubygems_version=
  s.metadata = { "one" => "two", "two" => "three" } if s.respond_to? :metadata=
  s.require_paths = ["lib".freeze]
  s.authors = ["A User".freeze]
  s.date = "#{Gem::Specification::TODAY.strftime("%Y-%m-%d")}"
  s.description = "This is a test description".freeze
  s.email = "example@example.com".freeze
  s.files = ["lib/code.rb".freeze]
  s.homepage = "http://example.com".freeze
  s.rubygems_version = "#{Gem::VERSION}".freeze
  s.summary = "this is a summary".freeze
end
    EOF

    @m1 = quick_gem 'm', '1' do |s|
      s.files = %w[lib/code.rb]
      s.metadata = { 'one' => "two", 'two' => "three" }
    end

    assert_equal @m1.to_ruby, valid_ruby_spec
  end

  def test_missing_extensions_eh
    ext_spec

    assert @ext.missing_extensions?

    extconf_rb = File.join @ext.gem_dir, @ext.extensions.first
    FileUtils.mkdir_p File.dirname extconf_rb

    File.open extconf_rb, 'w' do |f|
      f.write <<-'RUBY'
        File.open 'Makefile', 'w' do |f|
          f.puts "clean:\n\techo clean"
          f.puts "default:\n\techo built"
          f.puts "install:\n\techo installed"
        end
      RUBY
    end

    @ext.build_extensions

    refute @ext.missing_extensions?
  end

  def test_missing_extensions_eh_default_gem
    spec = new_default_spec 'default', 1
    spec.extensions << 'extconf.rb'

    refute spec.missing_extensions?
  end

  def test_missing_extensions_eh_legacy
    ext_spec

    @ext.installed_by_version = v '2.2.0.preview.2'

    assert @ext.missing_extensions?

    @ext.installed_by_version = v '2.2.0.preview.1'

    refute @ext.missing_extensions?
  end

  def test_missing_extensions_eh_none
    refute @a1.missing_extensions?
  end

  def test_find_all_by_full_name
    pl = Gem::Platform.new 'i386-linux'

    a1 = util_spec "a", "1"
    a1_pre = util_spec "a", "1.0.0.pre.1"
    a_1_platform = util_spec("a", "1") {|s| s.platform = pl }
    a_b_1 = util_spec "a-b", "1"
    a_b_1_platform = util_spec("a-b", "1") {|s| s.platform = pl }

    a_b_1_1 = util_spec "a-b-1", "1"
    a_b_1_1_platform = util_spec("a-b-1", "1") {|s| s.platform = pl }

    install_specs(a1, a1_pre, a_1_platform, a_b_1, a_b_1_platform,
                  a_b_1_1, a_b_1_1_platform)

    assert_equal [a1], Gem::Specification.find_all_by_full_name("a-1")
    assert_equal [a1_pre], Gem::Specification.find_all_by_full_name("a-1.0.0.pre.1")
    assert_equal [a_1_platform], Gem::Specification.find_all_by_full_name("a-1-x86-linux")
    assert_equal [a_b_1_1], Gem::Specification.find_all_by_full_name("a-b-1-1")
    assert_equal [a_b_1_1_platform], Gem::Specification.find_all_by_full_name("a-b-1-1-x86-linux")

    assert_equal [], Gem::Specification.find_all_by_full_name("monkeys")
    assert_equal [], Gem::Specification.find_all_by_full_name("a-1-foo")
  end

  def test_find_by_name
    install_specs util_spec "a"
    install_specs util_spec "a", 1

    assert Gem::Specification.find_by_name "a"
    assert Gem::Specification.find_by_name "a", "1"
    assert Gem::Specification.find_by_name "a", ">1"

    assert_raises Gem::MissingSpecError do
      Gem::Specification.find_by_name "monkeys"
    end
  end

  def test_find_by_name_with_only_prereleases
    q = util_spec "q", "2.a"
    install_specs q

    assert Gem::Specification.find_by_name "q"
  end

  def test_find_by_name_prerelease
    b = util_spec "b", "2.a"

    b.activate

    install_specs b

    assert Gem::Specification.find_by_name "b"

    assert_raises Gem::MissingSpecVersionError do
      Gem::Specification.find_by_name "b", "1"
    end

    assert Gem::Specification.find_by_name "b", ">1"
  end

  def test_find_by_path
    a = new_spec "foo", "1", nil, "lib/foo.rb"

    install_specs a

    assert_equal a, Gem::Specification.find_by_path('foo')
    a.activate
    assert_equal a, Gem::Specification.find_by_path('foo')
  end

  def test_find_inactive_by_path
    a = new_spec "foo", "1", nil, "lib/foo.rb"

    install_specs a

    assert_equal a, Gem::Specification.find_inactive_by_path('foo')
    a.activate
    assert_equal nil, Gem::Specification.find_inactive_by_path('foo')
  end

  def test_load_default_gem
    Gem::Specification.reset
    assert_equal [], Gem::Specification.map(&:full_name)

    default_gem_spec = new_default_spec("default", "2.0.0.0",
                                        nil, "default/gem.rb")
    spec_path = File.join(@default_spec_dir, default_gem_spec.spec_name)
    write_file(spec_path) do |file|
      file.print(default_gem_spec.to_ruby)
    end
    Gem::Specification.reset
    assert_equal ["default-2.0.0.0"], Gem::Specification.map(&:full_name)
  end

  def test_detect_bundled_gem_in_old_ruby
    util_set_RUBY_VERSION '1.9.3', 551

    spec = new_spec 'bigdecimal', '1.1.0' do |s|
      s.summary = "This bigdecimal is bundled with Ruby"
    end

    assert spec.bundled_gem_in_old_ruby?
  ensure
    util_restore_RUBY_VERSION
  end

  def util_setup_deps
    @gem = util_spec "awesome", "1.0" do |awesome|
      awesome.add_runtime_dependency "bonobo", []
      awesome.add_development_dependency "monkey", []
    end

    @bonobo = Gem::Dependency.new("bonobo", [])
    @monkey = Gem::Dependency.new("monkey", [], :development)
  end

  def util_setup_validate
    Dir.chdir @tempdir do
      FileUtils.mkdir_p File.join("ext", "a")
      FileUtils.mkdir_p "lib"
      FileUtils.mkdir_p "test"
      FileUtils.mkdir_p "bin"

      FileUtils.touch File.join("ext", "a", "extconf.rb")
      FileUtils.touch File.join("lib", "code.rb")
      FileUtils.touch File.join("test", "suite.rb")

      File.open "bin/exec", "w", 0755 do |fp|
        fp.puts "#!#{Gem.ruby}"
      end
    end
  end

  def with_syck
    begin
      verbose, $VERBOSE = $VERBOSE, nil
      require "yaml"
      old_engine = YAML::ENGINE.yamler
      YAML::ENGINE.yamler = 'syck'
      load 'rubygems/syck_hack.rb'
    rescue NameError
      # probably on 1.8, ignore
    ensure
      $VERBOSE = verbose
    end

    yield
  ensure
    begin
      YAML::ENGINE.yamler = old_engine
      load 'rubygems/syck_hack.rb'
    rescue NameError
      # ignore
    end
  end

  def with_psych
    begin
      require "yaml"
      old_engine = YAML::ENGINE.yamler
      YAML::ENGINE.yamler = 'psych'
      load 'rubygems/syck_hack.rb'
    rescue NameError
      # probably on 1.8, ignore
    end

    yield
  ensure
    begin
      YAML::ENGINE.yamler = old_engine
      load 'rubygems/syck_hack.rb'
    rescue NameError
      # ignore
    end
  end

  def silence_warnings
    old_verbose, $VERBOSE = $VERBOSE, false
    yield
  ensure
    $VERBOSE = old_verbose
  end
end
