    bool normalizeSipUri( std::string& uri, int brackets ) {
        su_home_t* home = theOneAndOnlyController->getHome() ;
        char *s ;
        char buf[255];
        char obuf[255] ;
        char hp[64] ;
        char const *display = NULL;
        url_t url[1];
        msg_param_t const *params = NULL;
        char const *comment = NULL;
        int rc ;

        // buf gets passed into sip_name_addr_d which puts NULs in various locations so the url_t members can point to their bits
        s = strncpy( buf, uri.c_str(), 255 ) ;

        // first we decode the string
        rc = sip_name_addr_d(home, &s, &display, url, &params, &comment) ;
        if( rc < 0 ) {  
            // no go: if we can't decode it then we have an invalid input
            return false ;
        }

        /* we allow applications to just give us a phone number sometimes, and that ends up parsed into the host portion with no scheme */
        if( NULL == url->url_scheme && NULL == url->url_user && NULL != url->url_host ) {
            url->url_scheme = "sip" ;
            url->url_user = url->url_host ;
            url->url_host = "localhost" ;   //placeholder
         }

        // now we re-encode it
        int nChars = sip_name_addr_e(obuf, 255, 0, display, brackets, url, params, comment) ;

        // cleanup: free the msg_params if any were allocated        
        if( params ) {
            su_free(home, (void *) params) ;
        }

        if( nChars <= 0 ) {
            return false ;
        }
        uri.assign( obuf ) ;
        return true ;
    }
