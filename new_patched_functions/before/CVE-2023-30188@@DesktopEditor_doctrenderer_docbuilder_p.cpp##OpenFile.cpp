bool CV8RealTimeWorker::OpenFile(const std::wstring& sBasePath, const std::wstring& path, const std::string& sString, const std::wstring& sCachePath, CV8Params* pParams)
{
	LOGGER_SPEED_START

			JSSmart<CJSContextScope> context_scope = m_context->CreateContextScope();
	JSSmart<CJSTryCatch>         try_catch = m_context->GetExceptions();

	LOGGER_SPEED_LAP("compile");

	m_context->runScript(sString, try_catch, sCachePath);
	if(try_catch->Check())
		return false;

	LOGGER_SPEED_LAP("run")

			if (true)
	{
		std::string sArg = m_sUtf8ArgumentJSON;
		if (sArg.empty())
			sArg = "{}";
		NSStringUtils::string_replaceA(sArg, "\\", "\\\\");
		NSStringUtils::string_replaceA(sArg, "\"", "\\\"");
		std::string sArgument = "var Argument = JSON.parse(\"" + sArg + "\");";

		m_context->runScript(sArgument, try_catch);
		if (try_catch->Check())
			return false;
	}

	if (true)
	{
		std::string sArg = m_sGlobalVariable;
		if (sArg.empty())
			sArg = "{}";
		NSStringUtils::string_replaceA(sArg, "\\", "\\\\");
		NSStringUtils::string_replaceA(sArg, "\"", "\\\"");

		std::string sScriptVar = "var GlobalVariable = JSON.parse(\"" + sArg + "\");";

		m_context->runScript(sScriptVar, try_catch);
		if (try_catch->Check())
			return false;
	}

	NSNativeControl::CNativeControl* pNative = NULL;
	bool bIsBreak = false;

	JSSmart<CJSObject> global_js = m_context->GetGlobal();
	JSSmart<CJSValue> args[1];
	args[0] = CJSContext::createInt(0);

	// GET_NATIVE_ENGINE
	if (!bIsBreak)
	{
		JSSmart<CJSValue> js_result2 = global_js->call_func("GetNativeEngine", 1, args);
		if (try_catch->Check())
			bIsBreak = true;
		else
		{
			JSSmart<CJSObject> objNative = js_result2->toObject();
			pNative = (NSNativeControl::CNativeControl*)objNative->getNative()->getObject();
		}
	}

	if (pNative != NULL)
	{
		if (pParams)
		{
			pNative->m_oParams = *pParams;
		}

		pNative->m_strFontsDirectory = sBasePath + L"/sdkjs/common";
		pNative->m_strImagesDirectory = path + L"/media";

		pNative->CheckFonts();

		if (0 == m_nFileType)
			pNative->m_strEditorType = L"document";
		else if (1 == m_nFileType)
			pNative->m_strEditorType = L"presentation";
		else
			pNative->m_strEditorType = L"spreadsheet";

		pNative->SetFilePath(path + L"/Editor.bin");

		pNative->m_sChangesBuilderPath = path + L"/changes/changes0.json";

		pNative->m_nMaxChangesNumber = -1;
	}

	// OPEN
	if (!bIsBreak)
	{
		CChangesWorker oWorkerLoader;
		int nVersion = oWorkerLoader.OpenNative(pNative->GetFilePath());

		JSSmart<CJSValue> args_open[3];
		args_open[0] = oWorkerLoader.GetDataFull()->toObject()->toValue();
		args_open[1] = CJSContext::createInt(nVersion);
		std::wstring sXlsx = NSFile::GetDirectoryName(pNative->GetFilePath()) + L"/Editor.xlsx";
		args_open[2] = NSFile::CFileBinary::Exists(sXlsx) ? CJSContext::createString(sXlsx) : CJSContext::createUndefined();

		global_js->call_func("NativeOpenFileData", 3, args_open);
		if (try_catch->Check())
			bIsBreak = true;
	}

	if (!bIsBreak)
		bIsBreak = !this->ExecuteCommand(L"Api.asc_nativeInitBuilder();");
	if (!bIsBreak)
		bIsBreak = !this->ExecuteCommand(L"Api.asc_SetSilentMode(true);");

	LOGGER_SPEED_LAP("open")

			return !bIsBreak;
}
