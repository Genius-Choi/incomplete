  void SetUp() {
    std::unique_ptr<MockApiManagerEnvironment> env(
        new ::testing::NiceMock<MockApiManagerEnvironment>());
    // save the raw pointer of env before calling std::move(env).
    raw_env_ = env.get();

    std::unique_ptr<Config> config = Config::Create(raw_env_, kServiceConfig);
    ASSERT_NE(config.get(), nullptr);

    service_context_ = std::make_shared<context::ServiceContext>(
        std::move(env), "", std::move(config));
    ASSERT_NE(service_context_.get(), nullptr);

    std::unique_ptr<MockRequest> request(
        new ::testing::NiceMock<MockRequest>());
    // save the raw pointer of request before calling std::move(request).
    raw_request_ = request.get();

    EXPECT_CALL(*raw_request_, GetRequestHTTPMethod())
        .WillOnce(Return(std::string("GET")));
    EXPECT_CALL(*raw_request_, GetUnparsedRequestPath())
        .WillOnce(Return(std::string("/ListShelves")));
    EXPECT_CALL(*raw_request_, FindQuery(_, _))
        .WillOnce(Invoke([](const std::string &, std::string *apikey) {
          *apikey = "apikey";
          return true;
        }));
    EXPECT_CALL(*raw_request_, FindHeader("X-HTTP-Method-Override", _))
        .Times(1);
    EXPECT_CALL(*raw_request_, FindHeader("referer", _))
        .WillOnce(Invoke([](const std::string &, std::string *http_referer) {
          *http_referer = "";
          return true;
        }));
    EXPECT_CALL(*raw_request_, FindHeader("grpc-trace-bin", _))
        .WillOnce(Invoke([](const std::string &, std::string *trace_context) {
          *trace_context = "";
          return false;
        }));
    EXPECT_CALL(*raw_request_, FindHeader("X-Cloud-Trace-Context", _))
        .WillOnce(Invoke([](const std::string &, std::string *trace_context) {
          *trace_context = "";
          return true;
        }));

    context_ = std::make_shared<context::RequestContext>(service_context_,
                                                         std::move(request));
    EXPECT_TRUE(Mock::VerifyAndClearExpectations(raw_request_));
  }
