bool QODBCDriver::open(const QString & db,
                        const QString & user,
                        const QString & password,
                        const QString &,
                        int,
                        const QString& connOpts)
{
    Q_D(QODBCDriver);
    if (isOpen())
      close();
    SQLRETURN r;
    r = SQLAllocHandle(SQL_HANDLE_ENV,
                        SQL_NULL_HANDLE,
                        &d->hEnv);
    if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO) {
        qSqlWarning("QODBCDriver::open: Unable to allocate environment"_L1, d);
        setOpenError(true);
        return false;
    }
    r = SQLSetEnvAttr(d->hEnv,
                       SQL_ATTR_ODBC_VERSION,
                       (SQLPOINTER)qGetODBCVersion(connOpts),
                       SQL_IS_UINTEGER);
    r = SQLAllocHandle(SQL_HANDLE_DBC,
                        d->hEnv,
                        &d->hDbc);
    if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO) {
        qSqlWarning("QODBCDriver::open: Unable to allocate connection"_L1, d);
        setOpenError(true);
        cleanup();
        return false;
    }

    if (!d->setConnectionOptions(connOpts)) {
        cleanup();
        return false;
    }

    // Create the connection string
    QString connQStr;
    // support the "DRIVER={SQL SERVER};SERVER=blah" syntax
    if (db.contains(".dsn"_L1, Qt::CaseInsensitive))
        connQStr = "FILEDSN="_L1 + db;
    else if (db.contains("DRIVER="_L1, Qt::CaseInsensitive)
            || db.contains("SERVER="_L1, Qt::CaseInsensitive))
        connQStr = db;
    else
        connQStr = "DSN="_L1 + db;

    if (!user.isEmpty())
        connQStr += ";UID="_L1 + user;
    if (!password.isEmpty())
        connQStr += ";PWD="_L1 + password;

    SQLSMALLINT cb;
    QVarLengthArray<SQLTCHAR> connOut(1024);
    memset(connOut.data(), 0, connOut.size() * sizeof(SQLTCHAR));
    r = SQLDriverConnect(d->hDbc,
                          NULL,
                          toSQLTCHAR(connQStr).data(),
                          (SQLSMALLINT)connQStr.length(),
                          connOut.data(),
                          1024,
                          &cb,
                          /*SQL_DRIVER_NOPROMPT*/0);

    if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO) {
        setLastError(qMakeError(tr("Unable to connect"), QSqlError::ConnectionError, d));
        setOpenError(true);
        cleanup();
        return false;
    }

    if (!d->checkDriver()) {
        setLastError(qMakeError(tr("Unable to connect - Driver doesn't support all "
                     "functionality required"), QSqlError::ConnectionError, d));
        setOpenError(true);
        cleanup();
        return false;
    }

    d->checkUnicode();
    d->checkSchemaUsage();
    d->checkDBMS();
    d->checkHasSQLFetchScroll();
    d->checkHasMultiResults();
    d->checkDateTimePrecision();
    setOpen(true);
    setOpenError(false);
    if (d->dbmsType == MSSqlServer) {
        QSqlQuery i(createResult());
        i.exec("SET QUOTED_IDENTIFIER ON"_L1);
    }
    return true;
}
