void __fastcall TStoredSessionList::Load(THierarchicalStorage * Storage,
  bool AsModified, bool UseDefaults, bool PuttyImport)
{
  TStringList *SubKeys = new TStringList();
  TList * Loaded = new TList;
  try
  {
    DebugAssert(AutoSort);
    AutoSort = false;
    bool WasEmpty = (Count == 0);

    Storage->GetSubKeyNames(SubKeys);

    for (int Index = 0; Index < SubKeys->Count; Index++)
    {
      UnicodeString SessionName = SubKeys->Strings[Index];

      bool ValidName = true;
      try
      {
        TSessionData::ValidatePath(SessionName);
      }
      catch(...)
      {
        ValidName = false;
      }

      if (ValidName)
      {
        TSessionData * SessionData;
        if (SessionName == FDefaultSettings->Name)
        {
          SessionData = FDefaultSettings;
        }
        else
        {
          // if the list was empty before loading, do not waste time trying to
          // find existing sites to overwrite (we rely on underlying storage
          // to secure uniqueness of the key names)
          if (WasEmpty)
          {
            SessionData = NULL;
          }
          else
          {
            SessionData = (TSessionData*)FindByName(SessionName);
          }
        }

        if ((SessionData != FDefaultSettings) || !UseDefaults)
        {
          if (SessionData == NULL)
          {
            SessionData = new TSessionData(L"");
            if (UseDefaults)
            {
              SessionData->CopyData(DefaultSettings);
            }
            SessionData->Name = SessionName;
            Add(SessionData);
          }
          Loaded->Add(SessionData);
          SessionData->Load(Storage, PuttyImport);
          if (AsModified)
          {
            SessionData->Modified = true;
          }
        }
      }
    }

    if (!AsModified)
    {
      for (int Index = 0; Index < TObjectList::Count; Index++)
      {
        if (Loaded->IndexOf(Items[Index]) < 0)
        {
          Delete(Index);
          Index--;
        }
      }
    }
  }
  __finally
  {
    AutoSort = true;
    AlphaSort();
    delete SubKeys;
    delete Loaded;
  }
}
