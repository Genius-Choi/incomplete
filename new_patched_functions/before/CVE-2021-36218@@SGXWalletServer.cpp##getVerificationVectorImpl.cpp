Json::Value SGXWalletServer::getVerificationVectorImpl(const string &_polyName, int _t, int _n) {
    spdlog::info("Entering {}", __FUNCTION__);
    INIT_RESULT(result)

    vector <vector<string>> verifVector;
    try {
        if (!checkName(_polyName, "POLY")) {
            throw SGXException(INVALID_POLY_NAME, "Invalid polynomial name");
        }
        if (!check_n_t(_t, _n)) {
            throw SGXException(INVALID_DKG_PARAMS, "Invalid parameters: n or t ");
        }

        shared_ptr <string> encrPoly = readFromDb(_polyName);

        verifVector = get_verif_vect(encrPoly->c_str(), _t, _n);

        for (int i = 0; i < _t; i++) {
            vector <string> currentCoef = verifVector.at(i);
            for (int j = 0; j < 4; j++) {
                result["verificationVector"][i][j] = currentCoef.at(j);
            }
        }
    } HANDLE_SGX_EXCEPTION(result)

    RETURN_SUCCESS(result)

}
