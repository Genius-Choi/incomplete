void pickHyprPicker(sdbus::MethodCall& call) {
    const std::string HYPRPICKER_CMD = "hyprpicker --format=rgb --no-fancy";
    std::string       rgbColor       = execAndGet(HYPRPICKER_CMD.c_str());

    if (rgbColor.size() > 12) {
        Debug::log(ERR, "hyprpicker returned strange output: " + rgbColor);
        sendEmptyDbusMethodReply(call, 1);
        return;
    }

    std::array<uint8_t, 3> colors{0, 0, 0};

    try {
        for (uint8_t i = 0; i < 2; i++) {
            uint64_t next = rgbColor.find(' ');

            if (next == std::string::npos) {
                Debug::log(ERR, "hyprpicker returned strange output: " + rgbColor);
                sendEmptyDbusMethodReply(call, 1);
                return;
            }

            colors[i] = std::stoi(rgbColor.substr(0, next));
            rgbColor  = rgbColor.substr(next + 1, rgbColor.size() - next);
        }
        colors[2] = std::stoi(rgbColor);
    } catch (...) {
        Debug::log(ERR, "Reading RGB values from hyprpicker failed. This is likely a string to integer error.");
        sendEmptyDbusMethodReply(call, 1);
    }

    auto [r, g, b] = colors;
    std::unordered_map<std::string, sdbus::Variant> results;
    results["color"] = sdbus::Struct(std::tuple{r / 255.0, g / 255.0, b / 255.0});

    auto reply = call.createReply();

    reply << (uint32_t)0;
    reply << results;
    reply.send();
}
