void CodeBlock::lazyCompileImpl(Runtime &runtime) {
  assert(isLazy() && "Laziness has not been checked");
  PerfSection perf("Lazy function compilation");
  auto *provider = (hbc::BCProviderLazy *)runtimeModule_->getBytecode();
  auto *func = provider->getBytecodeFunction();
  auto *lazyData = func->getLazyCompilationData();
  auto bcModule = compileLazyFunction(lazyData);

  runtimeModule_->initializeLazyMayAllocate(
      hbc::BCProviderFromSrc::createBCProviderFromSrc(std::move(bcModule)));
  // Reset all meta lazyData of the CodeBlock to point to the newly
  // generated bytecode module.
  functionID_ = runtimeModule_->getBytecode()->getGlobalFunctionIndex();
  functionHeader_ =
      runtimeModule_->getBytecode()->getFunctionHeader(functionID_);
  bytecode_ = runtimeModule_->getBytecode()->getBytecode(functionID_);
}
