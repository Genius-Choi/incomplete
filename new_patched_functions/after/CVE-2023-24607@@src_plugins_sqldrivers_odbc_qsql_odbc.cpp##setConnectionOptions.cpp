bool QODBCDriverPrivate::setConnectionOptions(const QString& connOpts)
{
    // Set any connection attributes
    const QStringList opts(connOpts.split(u';', Qt::SkipEmptyParts));
    SQLRETURN r = SQL_SUCCESS;
    for (int i = 0; i < opts.count(); ++i) {
        const QString tmp(opts.at(i));
        int idx;
        if ((idx = tmp.indexOf(u'=')) == -1) {
            qWarning() << "QODBCDriver::open: Illegal connect option value '" << tmp << '\'';
            continue;
        }
        const QString opt(tmp.left(idx));
        const QString val(tmp.mid(idx + 1).simplified());
        SQLUINTEGER v = 0;

        r = SQL_SUCCESS;
        if (opt.toUpper() == "SQL_ATTR_ACCESS_MODE"_L1) {
            if (val.toUpper() == "SQL_MODE_READ_ONLY"_L1) {
                v = SQL_MODE_READ_ONLY;
            } else if (val.toUpper() == "SQL_MODE_READ_WRITE"_L1) {
                v = SQL_MODE_READ_WRITE;
            } else {
                qWarning() << "QODBCDriver::open: Unknown option value '" << val << '\'';
                continue;
            }
            r = SQLSetConnectAttr(hDbc, SQL_ATTR_ACCESS_MODE, (SQLPOINTER) size_t(v), 0);
        } else if (opt.toUpper() == "SQL_ATTR_CONNECTION_TIMEOUT"_L1) {
            v = val.toUInt();
            r = SQLSetConnectAttr(hDbc, SQL_ATTR_CONNECTION_TIMEOUT, (SQLPOINTER) size_t(v), 0);
        } else if (opt.toUpper() == "SQL_ATTR_LOGIN_TIMEOUT"_L1) {
            v = val.toUInt();
            r = SQLSetConnectAttr(hDbc, SQL_ATTR_LOGIN_TIMEOUT, (SQLPOINTER) size_t(v), 0);
        } else if (opt.toUpper() == "SQL_ATTR_CURRENT_CATALOG"_L1) {
            r = qt_string_SQLSetConnectAttr(hDbc, SQL_ATTR_CURRENT_CATALOG, val);
        } else if (opt.toUpper() == "SQL_ATTR_METADATA_ID"_L1) {
            if (val.toUpper() == "SQL_TRUE"_L1) {
                v = SQL_TRUE;
            } else if (val.toUpper() == "SQL_FALSE"_L1) {
                v = SQL_FALSE;
            } else {
                qWarning() << "QODBCDriver::open: Unknown option value '" << val << '\'';
                continue;
            }
            r = SQLSetConnectAttr(hDbc, SQL_ATTR_METADATA_ID, (SQLPOINTER) size_t(v), 0);
        } else if (opt.toUpper() == "SQL_ATTR_PACKET_SIZE"_L1) {
            v = val.toUInt();
            r = SQLSetConnectAttr(hDbc, SQL_ATTR_PACKET_SIZE, (SQLPOINTER) size_t(v), 0);
        } else if (opt.toUpper() == "SQL_ATTR_TRACEFILE"_L1) {
            r = qt_string_SQLSetConnectAttr(hDbc, SQL_ATTR_TRACEFILE, val);
        } else if (opt.toUpper() == "SQL_ATTR_TRACE"_L1) {
            if (val.toUpper() == "SQL_OPT_TRACE_OFF"_L1) {
                v = SQL_OPT_TRACE_OFF;
            } else if (val.toUpper() == "SQL_OPT_TRACE_ON"_L1) {
                v = SQL_OPT_TRACE_ON;
            } else {
                qWarning() << "QODBCDriver::open: Unknown option value '" << val << '\'';
                continue;
            }
            r = SQLSetConnectAttr(hDbc, SQL_ATTR_TRACE, (SQLPOINTER) size_t(v), 0);
        } else if (opt.toUpper() == "SQL_ATTR_CONNECTION_POOLING"_L1) {
            if (val == "SQL_CP_OFF"_L1)
                v = SQL_CP_OFF;
            else if (val.toUpper() == "SQL_CP_ONE_PER_DRIVER"_L1)
                v = SQL_CP_ONE_PER_DRIVER;
            else if (val.toUpper() == "SQL_CP_ONE_PER_HENV"_L1)
                v = SQL_CP_ONE_PER_HENV;
            else if (val.toUpper() == "SQL_CP_DEFAULT"_L1)
                v = SQL_CP_DEFAULT;
            else {
                qWarning() << "QODBCDriver::open: Unknown option value '" << val << '\'';
                continue;
            }
            r = SQLSetConnectAttr(hDbc, SQL_ATTR_CONNECTION_POOLING, (SQLPOINTER) size_t(v), 0);
        } else if (opt.toUpper() == "SQL_ATTR_CP_MATCH"_L1) {
            if (val.toUpper() == "SQL_CP_STRICT_MATCH"_L1)
                v = SQL_CP_STRICT_MATCH;
            else if (val.toUpper() == "SQL_CP_RELAXED_MATCH"_L1)
                v = SQL_CP_RELAXED_MATCH;
            else if (val.toUpper() == "SQL_CP_MATCH_DEFAULT"_L1)
                v = SQL_CP_MATCH_DEFAULT;
            else {
                qWarning() << "QODBCDriver::open: Unknown option value '" << val << '\'';
                continue;
            }
            r = SQLSetConnectAttr(hDbc, SQL_ATTR_CP_MATCH, (SQLPOINTER) size_t(v), 0);
        } else if (opt.toUpper() == "SQL_ATTR_ODBC_VERSION"_L1) {
            // Already handled in QODBCDriver::open()
            continue;
        } else {
                qWarning() << "QODBCDriver::open: Unknown connection attribute '" << opt << '\'';
        }
        if (r != SQL_SUCCESS && r != SQL_SUCCESS_WITH_INFO)
            qSqlWarning(QString::fromLatin1("QODBCDriver::open: Unable to set connection attribute'%1'").arg(
                        opt), this);
    }
    return true;
}
