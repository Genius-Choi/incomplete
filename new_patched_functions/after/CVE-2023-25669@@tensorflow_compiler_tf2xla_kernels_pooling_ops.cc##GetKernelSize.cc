  StatusOr<std::vector<int64_t>> GetKernelSize(XlaOpKernelContext* ctx) {
    std::vector<int64_t> ksize;
    if (ctx->num_inputs() == 1) {
      ksize = ksize_;
    } else {
      const TensorShape ksize_shape = ctx->InputShape(1);
      // Validate input sizes.
      if (!TensorShapeUtils::IsVector(ksize_shape)) {
        return errors::InvalidArgument("ksize must be a vector, not shape ",
                                       ksize_shape.DebugString());
      }
      if (ksize_shape.num_elements() != num_dims()) {
        return errors::InvalidArgument(
            "Sliding window ksize field must "
            "specify ",
            num_dims(), " dimensions");
      }
      auto status = ctx->ConstantInputAsIntVector(1, &ksize);
      if (!status.ok()) {
        return status;
      }
    }
    TF_RETURN_IF_ERROR(ValidateKernelSizes(ksize));
    return ksize;
  }
