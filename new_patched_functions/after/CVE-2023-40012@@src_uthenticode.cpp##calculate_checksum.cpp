std::string calculate_checksum(peparse::parsed_pe *pe, checksum_kind kind) {
  auto nid = checksum_type_to_nid(kind);
  if (nid == NID_undef) {
    return {};
  }

  /* In both PEs and PE32+s, the PE checksum is 64 bytes into the optional header,
   * which itself is 24 bytes after the PE magic and COFF header from the offset
   * specified in the DOS header.
   */
  auto pe_checksum_offset = pe->peHeader.dos.e_lfanew + 24 + 64;

  /* The certificate table directory entry offset is also in the optional header,
   * albeit at different offsets for PE32 and PE32+. See each of the cases below.
   */
  std::size_t cert_table_offset = pe->peHeader.dos.e_lfanew + 24;
  std::uint32_t size_of_headers = 0;
  peparse::data_directory security_dir;
  if (pe->peHeader.nt.OptionalMagic == peparse::NT_OPTIONAL_32_MAGIC) {
    security_dir = pe->peHeader.nt.OptionalHeader.DataDirectory[peparse::DIR_SECURITY];
    size_of_headers = pe->peHeader.nt.OptionalHeader.SizeOfHeaders;
    cert_table_offset += 128;
  } else if (pe->peHeader.nt.OptionalMagic == peparse::NT_OPTIONAL_64_MAGIC) {
    security_dir = pe->peHeader.nt.OptionalHeader64.DataDirectory[peparse::DIR_SECURITY];
    size_of_headers = pe->peHeader.nt.OptionalHeader64.SizeOfHeaders;
    cert_table_offset += 144;
  } else {
    /* Mystical future PE version?
     */
    return {};
  }

  /* "VirtualAddress" here is really an offset; an invalid one indicates a tampered input.
   * Similarly, a cert_table_offset beyond size_of_headers indicates a tampered input
   * (we get the pe_checksum_offset check for free, since it's always smaller).
   */
  if (security_dir.VirtualAddress + security_dir.Size > pe->fileBuffer->bufLen ||
      cert_table_offset + 8 > size_of_headers) {
    return {};
  }

  /* Copy everything up to the end of the headers into pe_bits.
   * Use a bounded_buffer to handle the range checks for us.
   */
  auto *header_buf = peparse::splitBuffer(pe->fileBuffer, 0, size_of_headers);
  if (header_buf == nullptr) {
    return {};
  }

  /* We'll stash the bits of the PE that we need to hash in this buffer.
   */
  std::vector<std::uint8_t> pe_bits;
  pe_bits.reserve(size_of_headers);

  pe_bits.insert(pe_bits.begin(), header_buf->buf, header_buf->buf + header_buf->bufLen);
  delete header_buf;

  /* This won't happen under normal conditions, but could with a tampered input.
   * We don't have to check pe_checksum_offset here since it'll always be strictly less
   * than cert_table_offset.
   */
  if (pe_bits.size() <= cert_table_offset + 8) {
    return {};
  }

  /* Erase the PE checksum and certificate table entry from pe_bits.
   * Do the certificate table entry first, so that we don't have to rescale the checksum's offset.
   */
  pe_bits.erase(pe_bits.begin() + cert_table_offset, pe_bits.begin() + cert_table_offset + 8);
  pe_bits.erase(pe_bits.begin() + pe_checksum_offset, pe_bits.begin() + pe_checksum_offset + 4);

  /* Hash pe_bits, which contains the rest of the header.
   */
  const auto *md = EVP_get_digestbynid(nid);
  auto *md_ctx = EVP_MD_CTX_new();
  EVP_DigestInit(md_ctx, md);
  EVP_DigestUpdate(md_ctx, pe_bits.data(), pe_bits.size());

  if (security_dir.VirtualAddress > 0) {
    /* If a certificate table exists, hash everything before and after it.
     */
    EVP_DigestUpdate(md_ctx,
                     pe->fileBuffer->buf + size_of_headers,
                     security_dir.VirtualAddress - size_of_headers);

    /* Most PEs won't have any trailing data but the Authenticode specification is explicit about
     * hashing any if it exists.
     */
    EVP_DigestUpdate(md_ctx,
                     pe->fileBuffer->buf + security_dir.VirtualAddress + security_dir.Size,
                     pe->fileBuffer->bufLen - (security_dir.VirtualAddress + security_dir.Size));
  } else {
    /* If there's no certificate table, just hash the rest of the file.
     */
    EVP_DigestUpdate(
        md_ctx, pe->fileBuffer->buf + size_of_headers, pe->fileBuffer->bufLen - size_of_headers);
  }

  /* Finally, finish hashing the damn thing.
   */
  std::array<std::uint8_t, EVP_MAX_MD_SIZE> md_buf;
  EVP_DigestFinal(md_ctx, md_buf.data(), nullptr);
  EVP_MD_CTX_free(md_ctx);

  return tohex(md_buf.data(), EVP_MD_size(md));
}
