std::vector<std::string> Utility::getSubjectAltNames(X509& cert, int type, bool skip_unsupported) {
  std::vector<std::string> subject_alt_names;
  bssl::UniquePtr<GENERAL_NAMES> san_names(
      static_cast<GENERAL_NAMES*>(X509_get_ext_d2i(&cert, NID_subject_alt_name, nullptr, nullptr)));
  if (san_names == nullptr) {
    return subject_alt_names;
  }
  for (const GENERAL_NAME* san : san_names.get()) {
    if (san->type == type) {
      if (skip_unsupported) {
        // An IP SAN for an unsupported IP version will throw an exception.
        // TODO(ggreenway): remove this when IP address construction no longer throws.
        TRY_NEEDS_AUDIT_ADDRESS { subject_alt_names.push_back(generalNameAsString(san)); }
        END_TRY CATCH(const EnvoyException& e,
                      { ENVOY_LOG_MISC(debug, "Error reading SAN, value skipped: {}", e.what()); });
      } else {
        subject_alt_names.push_back(generalNameAsString(san));
      }
    }
  }
  return subject_alt_names;
}
