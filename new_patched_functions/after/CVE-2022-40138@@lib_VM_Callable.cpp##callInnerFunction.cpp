CallResult<PseudoHandle<>> GeneratorInnerFunction::callInnerFunction(
    Handle<GeneratorInnerFunction> selfHandle,
    Runtime &runtime,
    Handle<> arg,
    Action action) {
  auto self = Handle<GeneratorInnerFunction>::vmcast(selfHandle);

  SmallHermesValue shv =
      SmallHermesValue::encodeHermesValue(arg.getHermesValue(), runtime);
  self->result_.set(shv, runtime.getHeap());
  self->action_ = action;

  auto ctx = runtime.makeMutableHandle(selfHandle->savedContext_);
  // Account for the `this` argument stored as the first element of ctx.
  const uint32_t argCount = self->argCount_;
  // Generators cannot be used as constructors, so newTarget is always
  // undefined.
  HermesValue newTarget = HermesValue::encodeUndefinedValue();
  ScopedNativeCallFrame frame{
      runtime,
      argCount, // Account for `this`.
      selfHandle.getHermesValue(),
      newTarget,
      ctx->at(0)};
  if (LLVM_UNLIKELY(frame.overflowed()))
    return runtime.raiseStackOverflow(Runtime::StackOverflowKind::NativeStack);
  for (ArrayStorage::size_type i = 0, e = argCount; i < e; ++i) {
    frame->getArgRef(i) = ctx->at(i + 1);
  }

  // Force lazy compilation immediately in order to size the context properly.
  // We're about to call the function anyway, so this doesn't reduce laziness.
  // Note that this will do nothing after the very first time a lazy function
  // is called, so we only resize before we save any registers at all.
  if (LLVM_UNLIKELY(selfHandle->getCodeBlock(runtime)->isLazy())) {
    if (LLVM_UNLIKELY(
            selfHandle->getCodeBlock(runtime)->lazyCompile(runtime) ==
            ExecutionStatus::EXCEPTION)) {
      return ExecutionStatus::EXCEPTION;
    }
    if (LLVM_UNLIKELY(
            ArrayStorage::resize(
                ctx,
                runtime,
                getContextSize(
                    selfHandle->getCodeBlock(runtime),
                    selfHandle->argCount_)) == ExecutionStatus::EXCEPTION)) {
      return ExecutionStatus::EXCEPTION;
    }
    selfHandle->savedContext_.set(runtime, ctx.get(), runtime.getHeap());
  }

  return JSFunction::_callImpl(selfHandle, runtime);
}
