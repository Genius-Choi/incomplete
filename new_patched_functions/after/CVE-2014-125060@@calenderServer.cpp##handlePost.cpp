string handlePost(map<string, string>* reqHeaders) {
  long long sessionId = -1;
  long uid = -1;
  string uri = (*reqHeaders)["uri"];
  cout << "handling post" << endl;
  if (reqHeaders->count("Cookie") != 0) {
    string cookies = (*reqHeaders)["Cookie"];
    string sessionIdString = cookies.substr(cookies.find("=") + 1);
    sessionId = stoll(sessionIdString, nullptr);
    auto sessionIt = sessionMap.find(sessionId);
    if(sessionIt != sessionMap.end())
      uid = sessionIt->second;
  }
  map<string, string> resHeaders;
  resHeaders["Server"] = "CSE461";
  resHeaders["Content-Type"] = "text/html; charset=UTF-8";

  //cout << "uri is " << uri << ", uid is " << uid << endl;

  string body;
  if (uri.compare("/createUser") == 0) {
    cout << "create user" << endl;
    string params = (*reqHeaders)["params"];
    string username = params.substr(9, params.find("&") - 9);
    string password = params.substr(params.find("&") + 10);

    cout << "username is " << username << " password is " << password << endl;

    long newId = makeUser(username, password);
    stringstream bodyStream;

    if (newId == -1) {
      bodyStream << "Error: Could not create user '" << username << "'" << endl;
    } else {
      bodyStream << "Successfully created user '" << username << "'! Please log in." << endl;
    }

    body = bodyStream.str();
  } else if (uri.compare("/login") == 0) {
    if (uid != -1)
      logout(uid);
    cout << "login" << endl;
    string params = (*reqHeaders)["params"];
    string username = params.substr(9, params.find("&") - 9);
    string password = params.substr(params.find("&") + 10);

    cout << "username is " << username << " password is " << password << endl;

    long long sess = login(username, password);

    stringstream bodyStream;
    if (sess == -1) {
      bodyStream << getLogin();
    } else {
      stringstream cookie;
      cookie << "sessionId=" << sess;
      resHeaders["Set-Cookie"] = cookie.str();

      bodyStream << getHeader(username);
      bodyStream << getEmptyCalendar();
      bodyStream << getFooter();
    }


    body = bodyStream.str();
    

  } else if (uri.compare("/createGroup") == 0 && uid != -1) {
    cout << "createGroup" << endl;
    string params = (*reqHeaders)["params"];
    string groupName = params.substr(11);
    replace(groupName.begin(), groupName.end(), '+', ' ');

    stringstream bodyStream;
    long groupId = makeGroup(uid, groupName);
    if (groupId != -1) {
      cout << "made group!" << endl;
      bodyStream << "Successfully created group '" << groupName << "'";
    } else {
      cout << "makeGroup was -1." << endl;
      bodyStream << "Error: could not create group '" << groupName << "'";
    }

    body = bodyStream.str();
    
  } else if (uri.compare("/addToGroup") == 0 && uid != -1) {
    cout << "addToGroup" << endl;
    string params = (*reqHeaders)["params"];
    string groupName = params.substr(11, params.find("&") - 11);
    params = params.substr(params.find("&") + 1);
    string addedName = params.substr(11, params.find("&") - 11);
    params = params.substr(params.find("&") + 1);
    bool admin = params.find("admin") != string::npos;
    long groupId = groupIdByName(groupName);
    long addedId = userIdByName(addedName);

    stringstream bodyStream;
    bool added = addToGroup(uid, addedId, groupId, admin);

    if (added) {
      cout << "added to group!" << endl;
      bodyStream << "Successfully added '" << addedName << "' to '" << groupName << "'";
    } else {
      cout << "Error: could not add '" << addedName << "' to '" << groupName << "'";
      bodyStream << "Error: could not add '" << addedName << "' to '" << groupName << "'";
    }

    body = bodyStream.str();
    
  } else if (uri.compare("/createEvent") == 0 && uid != -1) {
    cout << "createEvent" << endl;
    string params = (*reqHeaders)["params"];
    string eventName = params.substr(5, params.find("&") - 5);
    replace(eventName.begin(), eventName.end(), '+', ' ');
    params = params.substr(params.find("&") + 1);
    string timeString = params.substr(9, params.find("&") - 9);
    params = params.substr(params.find("&") + 1);
    bool withGroup = params.size() > 11;

    cout << "eName: " << eventName << " tS: " << timeString << " wG: " << withGroup << endl;

    stringstream timeStream;
    time_t eventTime;
    timeStream << timeString;
    timeStream >> eventTime;

    long eventId;
    if (withGroup) {
      string groupName = params.substr(11);
      long groupId = groupIdByName(groupName);
      cout << "gName: " << groupName << " gID: " << groupId << endl;

      eventId = makeEvent(uid, eventName, eventTime, groupId, true);
    } else {
      eventId = makeEvent(uid, eventName, eventTime);
    }

    stringstream bodyStream;
    if (eventId != -1) {
      cout << "made event!" << endl;
      bodyStream << "Successfully created event '" << eventName << "'";
    } else {
      cout << "couldn't make event." << endl;
      bodyStream << "Error: could not create event '" << eventName << "'";
    }

    body = bodyStream.str();
    
  } else if (uri.compare("/editEvent") == 0 && uid != -1) {
    cout << "editEvent" << endl;
    string params = (*reqHeaders)["params"];
    long eventId = stol(params.substr(3, params.find("&") - 3), nullptr);
    params = params.substr(params.find("&") + 1);
    string eventName = params.substr(5, params.find("&") - 5);
    params = params.substr(params.find("&") + 1);
    string timeString = params.substr(9, params.find("&") - 9);

    cout << "eID: " << eventId << " eName: " << eventName << " dt: " << timeString << endl;

    stringstream timeStream;
    time_t eventTime;
    timeStream << timeString;
    timeStream >> eventTime;

    renameEvent(uid, eventId, eventName);
    rescheduleEvent(uid, eventId, eventTime);

    stringstream bodyStream;
    cout << "edited event!" << endl;
    bodyStream << "Successfully edited event.";

    body = bodyStream.str();
  } else {
    // 404
    cout << "error page" << endl;

    string message = "404 Page Not Found";
    return getResponseHeader("HTTP/1.1 404 Not Found", &resHeaders, body.size())
      + "\r\n" + message;
  }
  
  return getResponseHeader("HTTP/1.1 200 OK", &resHeaders, body.size()) + "\r\n" + body;
}
