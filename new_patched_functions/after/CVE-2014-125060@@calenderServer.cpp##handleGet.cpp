string handleGet(map<string, string>* reqHeaders) {
  long long sessionId = -1;
  long uid = -1;
  string uri = (*reqHeaders)["uri"];
  string body;
  if (reqHeaders->count("Cookie") != 0) {
    string cookies = (*reqHeaders)["Cookie"];
    string sessionIdString = cookies.substr(cookies.find("=") + 1);
    sessionId = stoll(sessionIdString, nullptr);
    auto usersessionIt = sessionMap.find(sessionId);
    if (usersessionIt == sessionMap.end()){
      cout << "Bad session ID, redirecting to login." << endl;
      body = getLogin();
    } else
      uid = usersessionIt->second;
  }
  map<string, string> resHeaders;
  resHeaders["Server"] = "CSE461";
  resHeaders["Content-Type"] = "text/html; charset=UTF-8";

  if (uri.compare("/cal") == 0 && uid == -1) {
    cout << "login page" << endl;
    // login page
    body = getLogin();
  } else if (uri.compare("/cal") == 0 && uid != -1) {
    cout << "cal page" << endl;
    // cal page
    string username = userNameById(uid);
    body = getHeader(username);
    body += getEmptyCalendar();
    body += getFooter();

  } else if (uri.compare("/getEvents") == 0 && uid != -1) {
    //cout << "getevents" << endl;
    // getEvents, has uid
    body = getEventsJson(uid);
    resHeaders["Content-Type"] = "application/json; charset=UTF-8";
  } else {
    // 404
    cout << "error page" << endl;

    string message = "404 Page Not Found";
    return getResponseHeader("HTTP/1.1 404 Not Found", &resHeaders, body.size())
      + "\r\n" + message;
  }
  
  return getResponseHeader("HTTP/1.1 200 OK", &resHeaders, body.size()) + "\r\n" + body;
}
