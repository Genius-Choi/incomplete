static std::vector<path_t> fixpath_multiple(Computer *comp, std::string path) {
    std::vector<path_t> retval;
    path.erase(std::remove_if(path.begin(), path.end(), [](char c)->bool {return c == '"' || c == '*' || c == ':' || c == '<' || c == '>' || c == '?' || c == '|' || c < 32; }), path.end());
    std::vector<std::string> elems = split(path, "/\\");
    std::list<std::string> pathc;
    for (std::string s : elems) {
        if (s == "..") {
            if (pathc.empty()) return retval;
            else if (pathc.empty()) pathc.push_back("..");
            else pathc.pop_back();
        } else if (!s.empty() && !std::all_of(s.begin(), s.end(), [](const char c)->bool{return c == '.';})) {
            pathc.push_back(s);
        }
    }
    while (!pathc.empty() && pathc.front().empty()) pathc.pop_front();
    if (comp->isDebugger && pathc.size() == 1 && pathc.front() == "bios.lua")
#ifdef STANDALONE_ROM
        return {path_t(":bios.lua", path_t::format::generic_format)};
#else
        return {getROMPath()/"bios.lua"};
#endif
    std::pair<size_t, std::vector<_path_t> > max_path = std::make_pair(0, std::vector<_path_t>(1, comp->dataDir));
    std::list<std::string> * mount_list = NULL;
    for (auto& m : comp->mounts) {
        std::list<std::string> &pathlist = std::get<0>(m);
        if (pathc.size() >= pathlist.size() && std::equal(pathlist.begin(), pathlist.end(), pathc.begin())) {
            if (pathlist.size() > max_path.first) {
                max_path = std::make_pair(pathlist.size(), std::vector<_path_t>(1, std::get<1>(m)));
                mount_list = &pathlist;
            } else if (pathlist.size() == max_path.first) {
                max_path.second.push_back(std::get<1>(m));
            }
        }
    }
    for (size_t i = 0; i < max_path.first; i++) pathc.pop_front();
    for (const _path_t& p : max_path.second) {
        path_t sstmp = p;
        std::error_code e;
        for (const std::string& s : pathc) sstmp /= s;
        if (
            (isVFSPath(p) && nothrow(comp->virtualMounts[(unsigned)std::stoul(p.substr(0, p.size()-1))]->path(sstmp.string()))) ||
            (fs::exists(sstmp, e))) {
            if (path_t::preferred_separator != (path_t::value_type)'/' && isVFSPath(sstmp)) {
                path_t::string_type str = sstmp.native();
                std::replace(str.begin(), str.end(), path_t::preferred_separator, (path_t::value_type)'/');
                sstmp = path_t(str);
            }
            retval.push_back(sstmp);
        }
    }
    return retval;
}
