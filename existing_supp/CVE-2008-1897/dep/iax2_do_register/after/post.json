[
    {
        "line": 44,
        "fullcodeline": "reg->expire = iax2_sched_replace(reg->expire, sched,"
    },
    {
        "line": 47,
        "fullcodeline": "memset(&ied, 0, sizeof(ied));"
    },
    {
        "line": 48,
        "fullcodeline": "iax_ie_append_str(&ied, IAX_IE_USERNAME, reg->username);"
    },
    {
        "line": 49,
        "fullcodeline": "iax_ie_append_short(&ied, IAX_IE_REFRESH, reg->refresh);"
    },
    {
        "line": 50,
        "fullcodeline": "send_command(iaxs[reg->callno],AST_FRAME_IAX, IAX_COMMAND_REGREQ, 0, ied.buf, ied.pos, -1);"
    },
    {
        "line": 51,
        "fullcodeline": "reg->regstate = REG_STATE_REGSENT;"
    },
    {
        "line": 7,
        "fullcodeline": "if (reg->dnsmgr &&"
    },
    {
        "line": 17,
        "fullcodeline": "if (reg->dnsmgr && ast_dnsmgr_changed(reg->dnsmgr) && (reg->callno > 0)) {"
    },
    {
        "line": 23,
        "fullcodeline": "if (!reg->addr.sin_addr.s_addr) {"
    },
    {
        "line": 32,
        "fullcodeline": "if (!reg->callno) {"
    },
    {
        "line": 5,
        "fullcodeline": "ast_debug(1, \"Sending registration request for '%s'\\n\", reg->username);"
    },
    {
        "line": 8,
        "fullcodeline": "((reg->regstate == REG_STATE_TIMEOUT) || !reg->addr.sin_addr.s_addr)) {"
    },
    {
        "line": 10,
        "fullcodeline": "ast_dnsmgr_refresh(reg->dnsmgr);"
    },
    {
        "line": 19,
        "fullcodeline": "iax2_destroy(reg->callno);"
    },
    {
        "line": 20,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[reg->callno]);"
    },
    {
        "line": 21,
        "fullcodeline": "reg->callno = 0;"
    },
    {
        "line": 27,
        "fullcodeline": "reg->expire = iax2_sched_replace(reg->expire, sched,"
    },
    {
        "line": 33,
        "fullcodeline": "ast_debug(1, \"Allocate call number\\n\");"
    },
    {
        "line": 34,
        "fullcodeline": "reg->callno = find_callno_locked(0, 0, &reg->addr, NEW_FORCE, defaultsockfd, 0);"
    },
    {
        "line": 40,
        "fullcodeline": "iaxs[reg->callno]->reg = reg;"
    },
    {
        "line": 41,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[reg->callno]);"
    },
    {
        "line": 45,
        "fullcodeline": "(5 * reg->refresh / 6) * 1000, iax2_do_register_s, reg);"
    },
    {
        "line": 29,
        "fullcodeline": "return -1;"
    },
    {
        "line": 35,
        "fullcodeline": "if (reg->callno < 1) {"
    },
    {
        "line": 25,
        "fullcodeline": "ast_debug(1, \"Unable to send registration request for '%s' without IP address\\n\", reg->username);"
    },
    {
        "line": 28,
        "fullcodeline": "(5 * reg->refresh / 6) * 1000, iax2_do_register_s, reg);"
    },
    {
        "line": 36,
        "fullcodeline": "ast_log(LOG_WARNING, \"Unable to create call for registration\\n\");"
    },
    {
        "line": 37,
        "fullcodeline": "return -1;"
    },
    {
        "line": 39,
        "fullcodeline": "ast_debug(1, \"Registration created on call %d\\n\", reg->callno);"
    }
]