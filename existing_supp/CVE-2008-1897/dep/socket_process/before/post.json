[
    {
        "line": 5,
        "fullcodeline": "int updatehistory=1;"
    },
    {
        "line": 6,
        "fullcodeline": "int new = NEW_PREVENT;"
    },
    {
        "line": 7,
        "fullcodeline": "int dcallno = 0;"
    },
    {
        "line": 8,
        "fullcodeline": "struct ast_iax2_full_hdr *fh = (struct ast_iax2_full_hdr *)thread->buf;"
    },
    {
        "line": 9,
        "fullcodeline": "struct ast_iax2_mini_hdr *mh = (struct ast_iax2_mini_hdr *)thread->buf;"
    },
    {
        "line": 10,
        "fullcodeline": "struct ast_iax2_meta_hdr *meta = (struct ast_iax2_meta_hdr *)thread->buf;"
    },
    {
        "line": 11,
        "fullcodeline": "struct ast_iax2_video_hdr *vh = (struct ast_iax2_video_hdr *)thread->buf;"
    },
    {
        "line": 14,
        "fullcodeline": "struct ast_frame f = { 0, };"
    },
    {
        "line": 15,
        "fullcodeline": "struct ast_channel *c = NULL;"
    },
    {
        "line": 23,
        "fullcodeline": "int minivid = 0;"
    },
    {
        "line": 24,
        "fullcodeline": "char empty[32]=\"\";\t\t/* Safety measure */"
    },
    {
        "line": 26,
        "fullcodeline": "char host_pref_buf[128];"
    },
    {
        "line": 27,
        "fullcodeline": "char caller_pref_buf[128];"
    },
    {
        "line": 29,
        "fullcodeline": "char *using_prefs = \"mine\";"
    },
    {
        "line": 32,
        "fullcodeline": "fr = alloca(sizeof(*fr) + 4096);"
    },
    {
        "line": 33,
        "fullcodeline": "fr->callno = 0;"
    },
    {
        "line": 34,
        "fullcodeline": "fr->afdatalen = 4096; /* From alloca() above */"
    },
    {
        "line": 37,
        "fullcodeline": "res = thread->buf_len;"
    },
    {
        "line": 38,
        "fullcodeline": "fd = thread->iofd;"
    },
    {
        "line": 39,
        "fullcodeline": "memcpy(&sin, &thread->iosin, sizeof(sin));"
    },
    {
        "line": 1461,
        "fullcodeline": "f.src = \"IAX2\";"
    },
    {
        "line": 1462,
        "fullcodeline": "f.mallocd = 0;"
    },
    {
        "line": 1463,
        "fullcodeline": "f.offset = 0;"
    },
    {
        "line": 1464,
        "fullcodeline": "f.len = 0;"
    },
    {
        "line": 1472,
        "fullcodeline": "iax_frame_wrap(fr, &f);"
    },
    {
        "line": 1483,
        "fullcodeline": "fr->cacheable = ((f.frametype == AST_FRAME_VOICE) || (f.frametype == AST_FRAME_VIDEO));"
    },
    {
        "line": 1484,
        "fullcodeline": "duped_fr = iaxfrdup2(fr);"
    },
    {
        "line": 1497,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 41,
        "fullcodeline": "if (res < sizeof(*mh)) {"
    },
    {
        "line": 45,
        "fullcodeline": "if ((vh->zeros == 0) && (ntohs(vh->callno) & 0x8000)) {"
    },
    {
        "line": 61,
        "fullcodeline": "if (ntohs(mh->callno) & IAX_FLAG_FULL) {"
    },
    {
        "line": 86,
        "fullcodeline": "if (!fr->callno)"
    },
    {
        "line": 89,
        "fullcodeline": "if (fr->callno > 0)"
    },
    {
        "line": 92,
        "fullcodeline": "if (!fr->callno || !iaxs[fr->callno]) {"
    },
    {
        "line": 109,
        "fullcodeline": "if (ast_test_flag(iaxs[fr->callno], IAX_ENCRYPTED)) {"
    },
    {
        "line": 124,
        "fullcodeline": "if (!inaddrcmp(&sin, &iaxs[fr->callno]->addr) && !minivid &&"
    },
    {
        "line": 129,
        "fullcodeline": "if (ntohs(mh->callno) & IAX_FLAG_FULL) {"
    },
    {
        "line": 1456,
        "fullcodeline": "if (!ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {"
    },
    {
        "line": 1465,
        "fullcodeline": "if (f.datalen && (f.frametype == AST_FRAME_VOICE)) {"
    },
    {
        "line": 1475,
        "fullcodeline": "if (iaxs[fr->callno] && iaxs[fr->callno]->last < fr->ts) {"
    },
    {
        "line": 1488,
        "fullcodeline": "if (iaxs[fr->callno] && iaxs[fr->callno]->last < fr->ts) {"
    },
    {
        "line": 42,
        "fullcodeline": "ast_log(LOG_WARNING, \"midget packet received (%d of %d min)\\n\", res, (int) sizeof(*mh));"
    },
    {
        "line": 52,
        "fullcodeline": "fr->callno = find_callno(ntohs(vh->callno) & ~0x8000, dcallno, &sin, new, fd);"
    },
    {
        "line": 53,
        "fullcodeline": "minivid = 1;"
    },
    {
        "line": 68,
        "fullcodeline": "dcallno = ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS;"
    },
    {
        "line": 70,
        "fullcodeline": "f.frametype = fh->type;"
    },
    {
        "line": 87,
        "fullcodeline": "fr->callno = find_callno(ntohs(mh->callno) & ~IAX_FLAG_FULL, dcallno, &sin, new, fd);"
    },
    {
        "line": 126,
        "fullcodeline": "f.subclass != IAX_COMMAND_TXACC) {\t\t/* for attended transfer */"
    },
    {
        "line": 127,
        "fullcodeline": "iaxs[fr->callno]->peercallno = (unsigned short)(ntohs(mh->callno) & ~IAX_FLAG_FULL);"
    },
    {
        "line": 133,
        "fullcodeline": "fr->oseqno = fh->oseqno;"
    },
    {
        "line": 134,
        "fullcodeline": "fr->iseqno = fh->iseqno;"
    },
    {
        "line": 135,
        "fullcodeline": "fr->ts = ntohl(fh->ts);"
    },
    {
        "line": 214,
        "fullcodeline": "f.datalen = res - sizeof(*fh);"
    },
    {
        "line": 1457,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 1466,
        "fullcodeline": "f.samples = ast_codec_get_samples(&f);"
    },
    {
        "line": 1477,
        "fullcodeline": "fr->outoforder = 0;"
    },
    {
        "line": 1486,
        "fullcodeline": "schedule_delivery(duped_fr, updatehistory, 0, &fr->ts);"
    },
    {
        "line": 1489,
        "fullcodeline": "iaxs[fr->callno]->last = fr->ts;"
    },
    {
        "line": 46,
        "fullcodeline": "if (res < sizeof(*vh)) {"
    },
    {
        "line": 62,
        "fullcodeline": "if (res < sizeof(*fh)) {"
    },
    {
        "line": 71,
        "fullcodeline": "if (f.frametype == AST_FRAME_VIDEO) {"
    },
    {
        "line": 76,
        "fullcodeline": "if ((f.frametype == AST_FRAME_IAX) && ((f.subclass == IAX_COMMAND_NEW) || (f.subclass == IAX_COMMAND_REGREQ) ||"
    },
    {
        "line": 82,
        "fullcodeline": "f.frametype = AST_FRAME_NULL;"
    },
    {
        "line": 83,
        "fullcodeline": "f.subclass = 0;"
    },
    {
        "line": 95,
        "fullcodeline": "if (ntohs(mh->callno) & IAX_FLAG_FULL) {"
    },
    {
        "line": 105,
        "fullcodeline": "if (fr->callno > 0)"
    },
    {
        "line": 110,
        "fullcodeline": "if (decrypt_frame(fr->callno, fh, &f, &res)) {"
    },
    {
        "line": 125,
        "fullcodeline": "f.subclass != IAX_COMMAND_TXCNT &&\t\t/* for attended transfer */"
    },
    {
        "line": 150,
        "fullcodeline": "if ((ntohs(fh->dcallno) & IAX_FLAG_RETRANS) || (f.frametype != AST_FRAME_VOICE))"
    },
    {
        "line": 152,
        "fullcodeline": "if ((iaxs[fr->callno]->iseqno != fr->oseqno) &&"
    },
    {
        "line": 202,
        "fullcodeline": "if (res < sizeof(*fh)) {"
    },
    {
        "line": 208,
        "fullcodeline": "if (f.frametype == AST_FRAME_TEXT && thread->buf[res - 1] != '\\0') {"
    },
    {
        "line": 218,
        "fullcodeline": "if (!inaddrcmp(&sin, &iaxs[fr->callno]->addr) &&"
    },
    {
        "line": 268,
        "fullcodeline": "if (inaddrcmp(&sin, &iaxs[fr->callno]->addr) &&"
    },
    {
        "line": 299,
        "fullcodeline": "if ((f.frametype == AST_FRAME_VOICE) ||"
    },
    {
        "line": 344,
        "fullcodeline": "if (f.frametype == AST_FRAME_VOICE) {"
    },
    {
        "line": 377,
        "fullcodeline": "if (f.frametype == AST_FRAME_VIDEO) {"
    },
    {
        "line": 383,
        "fullcodeline": "if (f.frametype == AST_FRAME_IAX) {"
    },
    {
        "line": 1403,
        "fullcodeline": "if (iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)"
    },
    {
        "line": 1468,
        "fullcodeline": "if (f.subclass == AST_FORMAT_SLINEAR)"
    },
    {
        "line": 1471,
        "fullcodeline": "f.samples = 0;"
    },
    {
        "line": 1481,
        "fullcodeline": "fr->outoforder = -1;"
    },
    {
        "line": 47,
        "fullcodeline": "ast_log(LOG_WARNING, \"Rejecting packet from '%s.%d' that is flagged as a video frame but is too short\\n\", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));"
    },
    {
        "line": 54,
        "fullcodeline": "} else if ((meta->zeros == 0) && !(ntohs(meta->metacmd) & 0x8000))"
    },
    {
        "line": 63,
        "fullcodeline": "ast_log(LOG_WARNING, \"Rejecting packet from '%s.%d' that is flagged as a full frame but is too short\\n\", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));"
    },
    {
        "line": 72,
        "fullcodeline": "f.subclass = uncompress_subclass(fh->csub & ~0x40) | ((fh->csub >> 6) & 0x1);"
    },
    {
        "line": 79,
        "fullcodeline": "new = NEW_ALLOW;"
    },
    {
        "line": 106,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 111,
        "fullcodeline": "ast_log(LOG_NOTICE, \"Packet Decrypt Failed!\\n\");"
    },
    {
        "line": 112,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 131,
        "fullcodeline": "ast_debug(1, \"Received packet %d, (%d, %d)\\n\", fh->oseqno, f.frametype, f.subclass);"
    },
    {
        "line": 151,
        "fullcodeline": "updatehistory = 0;"
    },
    {
        "line": 153,
        "fullcodeline": "(iaxs[fr->callno]->iseqno ||"
    },
    {
        "line": 203,
        "fullcodeline": "ast_log(LOG_WARNING, \"midget packet received (%d of %d min)\\n\", res, (int) sizeof(*fh));"
    },
    {
        "line": 204,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 219,
        "fullcodeline": "((f.subclass != IAX_COMMAND_INVAL) ||"
    },
    {
        "line": 269,
        "fullcodeline": "((f.frametype != AST_FRAME_IAX) ||"
    },
    {
        "line": 273,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 301,
        "fullcodeline": "(f.frametype == AST_FRAME_IAX)) {"
    },
    {
        "line": 384,
        "fullcodeline": "AST_SCHED_DEL(sched, iaxs[fr->callno]->initid);"
    },
    {
        "line": 1399,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 1404,
        "fullcodeline": "send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);"
    },
    {
        "line": 1469,
        "fullcodeline": "ast_frame_byteswap_be(&f);"
    },
    {
        "line": 1479,
        "fullcodeline": "if (iaxdebug && iaxs[fr->callno])"
    },
    {
        "line": 1492,
        "fullcodeline": "ast_debug(1, \"For call=%d, set last=%d\\n\", fr->callno, fr->ts);"
    },
    {
        "line": 74,
        "fullcodeline": "f.subclass = uncompress_subclass(fh->csub);"
    },
    {
        "line": 78,
        "fullcodeline": "(f.subclass == IAX_COMMAND_REGREL)))"
    },
    {
        "line": 97,
        "fullcodeline": "if (((f.subclass != IAX_COMMAND_INVAL) &&"
    },
    {
        "line": 159,
        "fullcodeline": "(f.frametype != AST_FRAME_IAX))) {"
    },
    {
        "line": 161,
        "fullcodeline": "((f.subclass != IAX_COMMAND_ACK) &&"
    },
    {
        "line": 209,
        "fullcodeline": "if (res < thread->buf_size)"
    },
    {
        "line": 220,
        "fullcodeline": "(f.frametype != AST_FRAME_IAX))) {"
    },
    {
        "line": 226,
        "fullcodeline": "for (x=iaxs[fr->callno]->rseqno; x != iaxs[fr->callno]->oseqno; x++)"
    },
    {
        "line": 229,
        "fullcodeline": "if ((x != iaxs[fr->callno]->oseqno) || (iaxs[fr->callno]->oseqno == fr->iseqno)) {"
    },
    {
        "line": 270,
        "fullcodeline": "((f.subclass != IAX_COMMAND_TXACC) &&"
    },
    {
        "line": 278,
        "fullcodeline": "if (f.frametype == AST_FRAME_IAX) {"
    },
    {
        "line": 293,
        "fullcodeline": "memset(&ies, 0, sizeof(ies));"
    },
    {
        "line": 300,
        "fullcodeline": "(f.frametype == AST_FRAME_VIDEO) ||"
    },
    {
        "line": 302,
        "fullcodeline": "if (ast_test_flag(iaxs[fr->callno], IAX_DELAYPBXSTART)) {"
    },
    {
        "line": 345,
        "fullcodeline": "if (f.subclass != iaxs[fr->callno]->voiceformat) {"
    },
    {
        "line": 378,
        "fullcodeline": "if (f.subclass != iaxs[fr->callno]->videoformat) {"
    },
    {
        "line": 390,
        "fullcodeline": "if (iaxs[fr->callno]->last < fr->ts &&"
    },
    {
        "line": 1391,
        "fullcodeline": "if ((f.subclass != IAX_COMMAND_ACK) &&"
    },
    {
        "line": 1406,
        "fullcodeline": "f.frametype = AST_FRAME_VIDEO;"
    },
    {
        "line": 1415,
        "fullcodeline": "f.datalen = res - sizeof(*vh);"
    },
    {
        "line": 1425,
        "fullcodeline": "fr->ts = (iaxs[fr->callno]->last & 0xFFFF8000L) | (ntohs(vh->ts) & 0x7fff);"
    },
    {
        "line": 1480,
        "fullcodeline": "ast_debug(1, \"Received out of order packet... (type=%d, subclass %d, ts = %d, last = %d)\\n\", f.frametype, f.subclass, fr->ts, iaxs[fr->callno]->last);"
    },
    {
        "line": 55,
        "fullcodeline": "return socket_process_meta(res, meta, &sin, fd, fr);"
    },
    {
        "line": 77,
        "fullcodeline": "(f.subclass == IAX_COMMAND_POKE) || (f.subclass == IAX_COMMAND_FWDOWNL) ||"
    },
    {
        "line": 101,
        "fullcodeline": "(f.frametype != AST_FRAME_IAX))"
    },
    {
        "line": 102,
        "fullcodeline": "raw_hangup(&sin, ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS, ntohs(mh->callno) & ~IAX_FLAG_FULL,"
    },
    {
        "line": 154,
        "fullcodeline": "((f.subclass != IAX_COMMAND_TXCNT) &&"
    },
    {
        "line": 169,
        "fullcodeline": "(f.frametype != AST_FRAME_IAX)) {"
    },
    {
        "line": 171,
        "fullcodeline": "ast_debug(1, \"Packet arrived out of order (expecting %d, got %d) (frametype = %d, subclass = %d)\\n\","
    },
    {
        "line": 188,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 193,
        "fullcodeline": "if (((f.subclass != IAX_COMMAND_ACK) &&"
    },
    {
        "line": 210,
        "fullcodeline": "thread->buf[res++] = '\\0';"
    },
    {
        "line": 227,
        "fullcodeline": "if (fr->iseqno == x)"
    },
    {
        "line": 271,
        "fullcodeline": "(f.subclass != IAX_COMMAND_TXCNT)))) {"
    },
    {
        "line": 284,
        "fullcodeline": "f.data = NULL;"
    },
    {
        "line": 285,
        "fullcodeline": "f.datalen = 0;"
    },
    {
        "line": 289,
        "fullcodeline": "if (f.frametype == AST_FRAME_IAX)"
    },
    {
        "line": 303,
        "fullcodeline": "ast_clear_flag(iaxs[fr->callno], IAX_DELAYPBXSTART);"
    },
    {
        "line": 346,
        "fullcodeline": "iaxs[fr->callno]->voiceformat = f.subclass;"
    },
    {
        "line": 347,
        "fullcodeline": "ast_debug(1, \"Ooh, voice format changed to %d\\n\", f.subclass);"
    },
    {
        "line": 379,
        "fullcodeline": "ast_debug(1, \"Ooh, video format changed to %d\\n\", f.subclass & ~0x1);"
    },
    {
        "line": 380,
        "fullcodeline": "iaxs[fr->callno]->videoformat = f.subclass & ~0x1;"
    },
    {
        "line": 387,
        "fullcodeline": "ast_debug(1, \"IAX subclass %d received\\n\", f.subclass);"
    },
    {
        "line": 393,
        "fullcodeline": "f.subclass != IAX_COMMAND_LAGRP) {"
    },
    {
        "line": 394,
        "fullcodeline": "iaxs[fr->callno]->last = fr->ts;"
    },
    {
        "line": 516,
        "fullcodeline": "save_osptoken(fr, &ies);"
    },
    {
        "line": 687,
        "fullcodeline": "ast_set_flag(iaxs[fr->callno], IAX_ALREADYGONE);"
    },
    {
        "line": 688,
        "fullcodeline": "ast_debug(1, \"Immediately destroying %d, having received hangup\\n\", fr->callno);"
    },
    {
        "line": 693,
        "fullcodeline": "send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);"
    },
    {
        "line": 694,
        "fullcodeline": "iax2_destroy(fr->callno);"
    },
    {
        "line": 710,
        "fullcodeline": "send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK,"
    },
    {
        "line": 714,
        "fullcodeline": "iax2_destroy(fr->callno);"
    },
    {
        "line": 771,
        "fullcodeline": "ast_verb(3, \"Call accepted by %s (format %s)\\n\", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), ast_getformatname(iaxs[fr->callno]->peerformat));"
    },
    {
        "line": 817,
        "fullcodeline": "send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, NULL, 0, -1);"
    },
    {
        "line": 833,
        "fullcodeline": "iaxs[fr->callno]->pingtime =  calc_timestamp(iaxs[fr->callno], 0, &f) - fr->ts;"
    },
    {
        "line": 835,
        "fullcodeline": "save_rr(fr, &ies);"
    },
    {
        "line": 838,
        "fullcodeline": "log_jitterstats(fr->callno);"
    },
    {
        "line": 887,
        "fullcodeline": "f.src = \"LAGRQ\";"
    },
    {
        "line": 888,
        "fullcodeline": "f.mallocd = 0;"
    },
    {
        "line": 889,
        "fullcodeline": "f.offset = 0;"
    },
    {
        "line": 890,
        "fullcodeline": "f.samples = 0;"
    },
    {
        "line": 891,
        "fullcodeline": "iax_frame_wrap(fr, &f);"
    },
    {
        "line": 1185,
        "fullcodeline": "iaxs[fr->callno]->error = ENOTCONN;"
    },
    {
        "line": 1186,
        "fullcodeline": "ast_debug(1, \"Immediately destroying %d, having received INVAL\\n\", fr->callno);"
    },
    {
        "line": 1187,
        "fullcodeline": "iax2_destroy(fr->callno);"
    },
    {
        "line": 1188,
        "fullcodeline": "ast_debug(1, \"Destroying call %d\\n\", fr->callno);"
    },
    {
        "line": 1191,
        "fullcodeline": "ast_debug(1, \"Received VNAK: resending outstanding frames\\n\");"
    },
    {
        "line": 1193,
        "fullcodeline": "vnak_retransmit(fr->callno, fr->iseqno);"
    },
    {
        "line": 1234,
        "fullcodeline": "registry_authrequest(fr->callno);"
    },
    {
        "line": 1244,
        "fullcodeline": "send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);"
    },
    {
        "line": 1245,
        "fullcodeline": "iax2_destroy(fr->callno);"
    },
    {
        "line": 1256,
        "fullcodeline": "send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);"
    },
    {
        "line": 1257,
        "fullcodeline": "iax2_destroy(fr->callno);"
    },
    {
        "line": 1273,
        "fullcodeline": "iaxs[fr->callno]->transferring = 0;"
    },
    {
        "line": 1274,
        "fullcodeline": "ast_verb(3, \"Channel '%s' unable to transfer\\n\", iaxs[fr->callno]->owner ? iaxs[fr->callno]->owner->name : \"<Unknown>\");"
    },
    {
        "line": 1275,
        "fullcodeline": "memset(&iaxs[fr->callno]->transfer, 0, sizeof(iaxs[fr->callno]->transfer));"
    },
    {
        "line": 1334,
        "fullcodeline": "try_transfer(iaxs[fr->callno], &ies);"
    },
    {
        "line": 1342,
        "fullcodeline": "send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);"
    },
    {
        "line": 1343,
        "fullcodeline": "complete_transfer(fr->callno, &ies);"
    },
    {
        "line": 1344,
        "fullcodeline": "stop_stuff(fr->callno);\t/* for attended transfer to work with libiax */"
    },
    {
        "line": 1360,
        "fullcodeline": "complete_dpreply(iaxs[fr->callno], &ies);"
    },
    {
        "line": 1363,
        "fullcodeline": "ast_log(LOG_NOTICE, \"Peer did not understand our iax command '%d'\\n\", ies.iax_unknown);"
    },
    {
        "line": 1367,
        "fullcodeline": "memset(&ied0, 0, sizeof(ied0));"
    },
    {
        "line": 1368,
        "fullcodeline": "res = iax_firmware_append(&ied0, (unsigned char *)ies.devicetype, ies.fwdesc);"
    },
    {
        "line": 1381,
        "fullcodeline": "ast_debug(1, \"Unknown IAX command %d on %d/%d\\n\", f.subclass, fr->callno, iaxs[fr->callno]->peercallno);"
    },
    {
        "line": 1382,
        "fullcodeline": "memset(&ied0, 0, sizeof(ied0));"
    },
    {
        "line": 1383,
        "fullcodeline": "iax_ie_append_byte(&ied0, IAX_IE_IAX_UNKNOWN, f.subclass);"
    },
    {
        "line": 1384,
        "fullcodeline": "send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, ied0.buf, ied0.pos, -1);"
    },
    {
        "line": 1388,
        "fullcodeline": "ast_variables_destroy(ies.vars);"
    },
    {
        "line": 1395,
        "fullcodeline": "(f.subclass != IAX_COMMAND_VNAK)) {"
    },
    {
        "line": 1407,
        "fullcodeline": "if (iaxs[fr->callno]->videoformat > 0)"
    },
    {
        "line": 1428,
        "fullcodeline": "f.frametype = AST_FRAME_VOICE;"
    },
    {
        "line": 1437,
        "fullcodeline": "f.datalen = res - sizeof(struct ast_iax2_mini_hdr);"
    },
    {
        "line": 1452,
        "fullcodeline": "fr->ts = (iaxs[fr->callno]->last & 0xFFFF0000L) | ntohs(mh->ts);"
    },
    {
        "line": 100,
        "fullcodeline": "(f.subclass != IAX_COMMAND_FWDOWNL))||"
    },
    {
        "line": 158,
        "fullcodeline": "(f.subclass != IAX_COMMAND_TXACC)) ||"
    },
    {
        "line": 168,
        "fullcodeline": "(f.subclass != IAX_COMMAND_VNAK)) ||"
    },
    {
        "line": 175,
        "fullcodeline": "if ((unsigned char) (iaxs[fr->callno]->iseqno - fr->oseqno) < 128) {"
    },
    {
        "line": 198,
        "fullcodeline": "(f.frametype != AST_FRAME_IAX))"
    },
    {
        "line": 199,
        "fullcodeline": "iaxs[fr->callno]->iseqno++;"
    },
    {
        "line": 212,
        "fullcodeline": "thread->buf[res - 1] = '\\0';"
    },
    {
        "line": 232,
        "fullcodeline": "for (x=iaxs[fr->callno]->rseqno; x != fr->iseqno; x++) {"
    },
    {
        "line": 265,
        "fullcodeline": "ast_debug(1, \"Received iseqno %d not within window %d->%d\\n\", fr->iseqno, iaxs[fr->callno]->rseqno, iaxs[fr->callno]->oseqno);"
    },
    {
        "line": 279,
        "fullcodeline": "if (iax_parse_ies(&ies, thread->buf + sizeof(*fh), f.datalen)) {"
    },
    {
        "line": 287,
        "fullcodeline": "f.data = thread->buf + sizeof(*fh);"
    },
    {
        "line": 290,
        "fullcodeline": "f.data = NULL;"
    },
    {
        "line": 304,
        "fullcodeline": "if (!ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->chosenformat)) {"
    },
    {
        "line": 392,
        "fullcodeline": "f.subclass != IAX_COMMAND_PONG &&"
    },
    {
        "line": 404,
        "fullcodeline": "if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {"
    },
    {
        "line": 431,
        "fullcodeline": "if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {"
    },
    {
        "line": 453,
        "fullcodeline": "if (iaxs[fr->callno]->transferring == TRANSFER_BEGIN) {"
    },
    {
        "line": 470,
        "fullcodeline": "if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD))"
    },
    {
        "line": 472,
        "fullcodeline": "if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {"
    },
    {
        "line": 482,
        "fullcodeline": "if (ast_test_flag(iaxs[fr->callno], IAX_TRUNK)) {"
    },
    {
        "line": 490,
        "fullcodeline": "if (check_access(fr->callno, &sin, &ies)) {"
    },
    {
        "line": 497,
        "fullcodeline": "if (strcasecmp(iaxs[fr->callno]->exten, \"TBD\")) {"
    },
    {
        "line": 517,
        "fullcodeline": "if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) {"
    },
    {
        "line": 662,
        "fullcodeline": "if (iaxs[fr->callno]->authmethods & IAX_AUTH_MD5)"
    },
    {
        "line": 666,
        "fullcodeline": "if (!authenticate_request(fr->callno) && iaxs[fr->callno])"
    },
    {
        "line": 668,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 675,
        "fullcodeline": "if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD) &&"
    },
    {
        "line": 690,
        "fullcodeline": "if (ies.causecode && iaxs[fr->callno]->owner)"
    },
    {
        "line": 698,
        "fullcodeline": "if (ies.causecode && iaxs[fr->callno]->owner)"
    },
    {
        "line": 701,
        "fullcodeline": "if (!ast_test_flag(iaxs[fr->callno], IAX_PROVISION)) {"
    },
    {
        "line": 712,
        "fullcodeline": "if (!ast_test_flag(iaxs[fr->callno], IAX_PROVISION))"
    },
    {
        "line": 755,
        "fullcodeline": "if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD | IAX_STATE_AUTHENTICATED))"
    },
    {
        "line": 757,
        "fullcodeline": "if (ast_test_flag(iaxs[fr->callno], IAX_PROVISION)) {"
    },
    {
        "line": 772,
        "fullcodeline": "if (!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)) {"
    },
    {
        "line": 818,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 826,
        "fullcodeline": "construct_rr(iaxs[fr->callno], &pingied);"
    },
    {
        "line": 828,
        "fullcodeline": "send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, pingied.buf, pingied.pos, -1);"
    },
    {
        "line": 892,
        "fullcodeline": "if(f.subclass == IAX_COMMAND_LAGRQ) {"
    },
    {
        "line": 908,
        "fullcodeline": "if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {"
    },
    {
        "line": 912,
        "fullcodeline": "if (authenticate_reply(iaxs[fr->callno], &iaxs[fr->callno]->addr, &ies, iaxs[fr->callno]->secret, iaxs[fr->callno]->outkey)) {"
    },
    {
        "line": 921,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 931,
        "fullcodeline": "if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {"
    },
    {
        "line": 935,
        "fullcodeline": "if (authenticate_verify(iaxs[fr->callno], &ies)) {"
    },
    {
        "line": 942,
        "fullcodeline": "if (strcasecmp(iaxs[fr->callno]->exten, \"TBD\")) {"
    },
    {
        "line": 947,
        "fullcodeline": "if (strcmp(iaxs[fr->callno]->exten, \"TBD\") && !exists) {"
    },
    {
        "line": 1126,
        "fullcodeline": "if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)) {"
    },
    {
        "line": 1200,
        "fullcodeline": "if (register_verify(fr->callno, &sin, &ies)) {"
    },
    {
        "line": 1209,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 1213,
        "fullcodeline": "if ((ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) ||"
    },
    {
        "line": 1235,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 1241,
        "fullcodeline": "if (iax2_ack_registry(&ies, &sin, fr->callno))"
    },
    {
        "line": 1261,
        "fullcodeline": "if (registry_rerequest(&ies, fr->callno, &sin)) {"
    },
    {
        "line": 1284,
        "fullcodeline": "if ((iaxs[fr->callno]->transferring == TRANSFER_BEGIN) ||"
    },
    {
        "line": 1347,
        "fullcodeline": "if (iaxs[fr->callno]->transferring == TRANSFER_READY) {"
    },
    {
        "line": 1369,
        "fullcodeline": "if (res < 0)"
    },
    {
        "line": 1375,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 1394,
        "fullcodeline": "(f.subclass != IAX_COMMAND_INVAL) &&"
    },
    {
        "line": 1396,
        "fullcodeline": "if (iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)"
    },
    {
        "line": 1408,
        "fullcodeline": "f.subclass = iaxs[fr->callno]->videoformat | (ntohs(vh->ts) & 0x8000 ? 1 : 0);"
    },
    {
        "line": 1417,
        "fullcodeline": "f.data = thread->buf + sizeof(*vh);"
    },
    {
        "line": 1429,
        "fullcodeline": "if (iaxs[fr->callno]->voiceformat > 0)"
    },
    {
        "line": 1438,
        "fullcodeline": "if (f.datalen < 0) {"
    },
    {
        "line": 99,
        "fullcodeline": "(f.subclass != IAX_COMMAND_TXACC) &&"
    },
    {
        "line": 157,
        "fullcodeline": "(f.subclass != IAX_COMMAND_UNQUELCH ) &&\t/* for attended transfer */"
    },
    {
        "line": 167,
        "fullcodeline": "(f.subclass != IAX_COMMAND_TXACC) &&"
    },
    {
        "line": 197,
        "fullcodeline": "(f.subclass != IAX_COMMAND_VNAK)) ||"
    },
    {
        "line": 236,
        "fullcodeline": "call_to_destroy = 0;"
    },
    {
        "line": 237,
        "fullcodeline": "AST_LIST_LOCK(&frame_queue);"
    },
    {
        "line": 238,
        "fullcodeline": "AST_LIST_TRAVERSE(&frame_queue, cur, list) {"
    },
    {
        "line": 247,
        "fullcodeline": "AST_LIST_UNLOCK(&frame_queue);"
    },
    {
        "line": 258,
        "fullcodeline": "iaxs[fr->callno]->rseqno = fr->iseqno;"
    },
    {
        "line": 280,
        "fullcodeline": "ast_log(LOG_WARNING, \"Undecodable frame received from '%s'\\n\", ast_inet_ntoa(sin.sin_addr));"
    },
    {
        "line": 281,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 292,
        "fullcodeline": "f.data = empty;"
    },
    {
        "line": 305,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 391,
        "fullcodeline": "f.subclass != IAX_COMMAND_ACK &&"
    },
    {
        "line": 396,
        "fullcodeline": "ast_debug(1, \"For call=%d, set last=%d\\n\", fr->callno, fr->ts);"
    },
    {
        "line": 415,
        "fullcodeline": "ast_set_flag(iaxs[fr->callno], IAX_QUELCH);"
    },
    {
        "line": 442,
        "fullcodeline": "ast_clear_flag(iaxs[fr->callno], IAX_QUELCH);"
    },
    {
        "line": 455,
        "fullcodeline": "AST_LIST_LOCK(&frame_queue);"
    },
    {
        "line": 456,
        "fullcodeline": "AST_LIST_TRAVERSE(&frame_queue, cur, list) {"
    },
    {
        "line": 461,
        "fullcodeline": "AST_LIST_UNLOCK(&frame_queue);"
    },
    {
        "line": 462,
        "fullcodeline": "memset(&ied1, 0, sizeof(ied1));"
    },
    {
        "line": 463,
        "fullcodeline": "iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->callno);"
    },
    {
        "line": 464,
        "fullcodeline": "send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREADY, 0, ied1.buf, ied1.pos, -1);"
    },
    {
        "line": 465,
        "fullcodeline": "iaxs[fr->callno]->transferring = TRANSFER_READY;"
    },
    {
        "line": 473,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 474,
        "fullcodeline": "check_provisioning(&sin, fd, ies.serviceident, ies.provver);"
    },
    {
        "line": 475,
        "fullcodeline": "ast_mutex_lock(&iaxsl[fr->callno]);"
    },
    {
        "line": 489,
        "fullcodeline": "send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);"
    },
    {
        "line": 492,
        "fullcodeline": "auth_fail(fr->callno, IAX_COMMAND_REJECT);"
    },
    {
        "line": 500,
        "fullcodeline": "context = ast_strdupa(iaxs[fr->callno]->context);"
    },
    {
        "line": 501,
        "fullcodeline": "exten = ast_strdupa(iaxs[fr->callno]->exten);"
    },
    {
        "line": 502,
        "fullcodeline": "cid_num = ast_strdupa(iaxs[fr->callno]->cid_num);"
    },
    {
        "line": 505,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 506,
        "fullcodeline": "exists = ast_exists_extension(NULL, context, exten, 1, cid_num);"
    },
    {
        "line": 507,
        "fullcodeline": "ast_mutex_lock(&iaxsl[fr->callno]);"
    },
    {
        "line": 663,
        "fullcodeline": "merge_encryption(iaxs[fr->callno],ies.encmethods);"
    },
    {
        "line": 667,
        "fullcodeline": "ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED);"
    },
    {
        "line": 669,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 691,
        "fullcodeline": "iaxs[fr->callno]->owner->hangupcause = ies.causecode;"
    },
    {
        "line": 699,
        "fullcodeline": "iaxs[fr->callno]->owner->hangupcause = ies.causecode;"
    },
    {
        "line": 706,
        "fullcodeline": "ast_debug(1, \"Immediately destroying %d, having received reject\\n\","
    },
    {
        "line": 713,
        "fullcodeline": "iaxs[fr->callno]->error = EPERM;"
    },
    {
        "line": 720,
        "fullcodeline": "if (iaxs[fr->callno]->owner && (bridged_chan = ast_bridged_channel(iaxs[fr->callno]->owner)) && ies.called_number) {"
    },
    {
        "line": 759,
        "fullcodeline": "send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);"
    },
    {
        "line": 760,
        "fullcodeline": "iax2_destroy(fr->callno);"
    },
    {
        "line": 764,
        "fullcodeline": "iaxs[fr->callno]->peerformat = ies.format;"
    },
    {
        "line": 773,
        "fullcodeline": "memset(&ied0, 0, sizeof(ied0));"
    },
    {
        "line": 774,
        "fullcodeline": "iax_ie_append_str(&ied0, IAX_IE_CAUSE, \"Unable to negotiate codec\");"
    },
    {
        "line": 775,
        "fullcodeline": "iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);"
    },
    {
        "line": 776,
        "fullcodeline": "send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);"
    },
    {
        "line": 808,
        "fullcodeline": "AST_LIST_LOCK(&dpcache);"
    },
    {
        "line": 809,
        "fullcodeline": "AST_LIST_TRAVERSE(&iaxs[fr->callno]->dpentries, dp, peer_list)"
    },
    {
        "line": 812,
        "fullcodeline": "AST_LIST_UNLOCK(&dpcache);"
    },
    {
        "line": 819,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 855,
        "fullcodeline": "peer->lastms = iaxs[fr->callno]->pingtime;"
    },
    {
        "line": 878,
        "fullcodeline": "send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);"
    },
    {
        "line": 880,
        "fullcodeline": "iax2_destroy(fr->callno);"
    },
    {
        "line": 881,
        "fullcodeline": "peer->callno = 0;"
    },
    {
        "line": 882,
        "fullcodeline": "ast_debug(1, \"Peer %s: got pong, lastms %d, historicms %d, maxms %d\\n\", peer->name, peer->lastms, peer->historicms, peer->maxms);"
    },
    {
        "line": 894,
        "fullcodeline": "fr->af.subclass = IAX_COMMAND_LAGRP;"
    },
    {
        "line": 895,
        "fullcodeline": "iax2_send(iaxs[fr->callno], &fr->af, fr->ts, -1, 0, 0, 0);"
    },
    {
        "line": 909,
        "fullcodeline": "ast_log(LOG_WARNING, \"Call on %s is already up, can't start on it\\n\", iaxs[fr->callno]->owner ? iaxs[fr->callno]->owner->name : \"<Unknown>\");"
    },
    {
        "line": 913,
        "fullcodeline": "struct ast_frame hangup_fr = { .frametype = AST_FRAME_CONTROL,"
    },
    {
        "line": 916,
        "fullcodeline": "ast_log(LOG_WARNING,"
    },
    {
        "line": 919,
        "fullcodeline": "iax2_queue_frame(fr->callno, &hangup_fr);"
    },
    {
        "line": 922,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 929,
        "fullcodeline": "send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);"
    },
    {
        "line": 932,
        "fullcodeline": "ast_log(LOG_WARNING, \"Call on %s is already up, can't start on it\\n\", iaxs[fr->callno]->owner ? iaxs[fr->callno]->owner->name : \"<Unknown>\");"
    },
    {
        "line": 938,
        "fullcodeline": "memset(&ied0, 0, sizeof(ied0));"
    },
    {
        "line": 939,
        "fullcodeline": "auth_fail(fr->callno, IAX_COMMAND_REJECT);"
    },
    {
        "line": 944,
        "fullcodeline": "exists = ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num);"
    },
    {
        "line": 950,
        "fullcodeline": "memset(&ied0, 0, sizeof(ied0));"
    },
    {
        "line": 951,
        "fullcodeline": "iax_ie_append_str(&ied0, IAX_IE_CAUSE, \"No such context/extension\");"
    },
    {
        "line": 952,
        "fullcodeline": "iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);"
    },
    {
        "line": 953,
        "fullcodeline": "send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);"
    },
    {
        "line": 1127,
        "fullcodeline": "ast_clear_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);"
    },
    {
        "line": 1128,
        "fullcodeline": "ast_string_field_set(iaxs[fr->callno], exten, ies.called_number ? ies.called_number : \"s\");"
    },
    {
        "line": 1199,
        "fullcodeline": "send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);"
    },
    {
        "line": 1206,
        "fullcodeline": "auth_fail(fr->callno, IAX_COMMAND_REGREJ);"
    },
    {
        "line": 1210,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 1214,
        "fullcodeline": "ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED | IAX_STATE_UNCHANGED)) {"
    },
    {
        "line": 1236,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 1242,
        "fullcodeline": "ast_log(LOG_WARNING, \"Registration failure\\n\");"
    },
    {
        "line": 1253,
        "fullcodeline": "iaxs[fr->callno]->reg->regstate = REG_STATE_REJECTED;"
    },
    {
        "line": 1262,
        "fullcodeline": "memset(&ied0, 0, sizeof(ied0));"
    },
    {
        "line": 1263,
        "fullcodeline": "iax_ie_append_str(&ied0, IAX_IE_CAUSE, \"No authority found\");"
    },
    {
        "line": 1264,
        "fullcodeline": "iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_FACILITY_NOT_SUBSCRIBED);"
    },
    {
        "line": 1265,
        "fullcodeline": "send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);"
    },
    {
        "line": 1285,
        "fullcodeline": "(iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)) {"
    },
    {
        "line": 1290,
        "fullcodeline": "ast_verb(3, \"Channel '%s' ready to transfer\\n\", iaxs[fr->callno]->owner ? iaxs[fr->callno]->owner->name : \"<Unknown>\");"
    },
    {
        "line": 1338,
        "fullcodeline": "send_command_transfer(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXACC, 0, NULL, 0);"
    },
    {
        "line": 1348,
        "fullcodeline": "AST_LIST_LOCK(&frame_queue);"
    },
    {
        "line": 1349,
        "fullcodeline": "AST_LIST_TRAVERSE(&frame_queue, cur, list) {"
    },
    {
        "line": 1354,
        "fullcodeline": "AST_LIST_UNLOCK(&frame_queue);"
    },
    {
        "line": 1356,
        "fullcodeline": "iaxs[fr->callno]->transferring = TRANSFER_MEDIAPASS;"
    },
    {
        "line": 1370,
        "fullcodeline": "send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);"
    },
    {
        "line": 1376,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 1393,
        "fullcodeline": "(f.subclass != IAX_COMMAND_TXACC) &&"
    },
    {
        "line": 1397,
        "fullcodeline": "send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);"
    },
    {
        "line": 1410,
        "fullcodeline": "ast_log(LOG_WARNING, \"Received mini frame before first full video frame\\n \");"
    },
    {
        "line": 1411,
        "fullcodeline": "iax2_vnak(fr->callno);"
    },
    {
        "line": 1412,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 1419,
        "fullcodeline": "f.data = NULL;"
    },
    {
        "line": 1430,
        "fullcodeline": "f.subclass = iaxs[fr->callno]->voiceformat;"
    },
    {
        "line": 1439,
        "fullcodeline": "ast_log(LOG_WARNING, \"Datalen < 0?\\n\");"
    },
    {
        "line": 1440,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 1444,
        "fullcodeline": "f.data = thread->buf + sizeof(*mh);"
    },
    {
        "line": 98,
        "fullcodeline": "(f.subclass != IAX_COMMAND_TXCNT) &&"
    },
    {
        "line": 156,
        "fullcodeline": "(f.subclass != IAX_COMMAND_TXREL) &&\t\t/* for attended transfer */"
    },
    {
        "line": 166,
        "fullcodeline": "(f.subclass != IAX_COMMAND_UNQUELCH ) &&\t/* for attended transfer */"
    },
    {
        "line": 177,
        "fullcodeline": "if ((f.frametype != AST_FRAME_IAX) ||"
    },
    {
        "line": 186,
        "fullcodeline": "iax2_vnak(fr->callno);"
    },
    {
        "line": 196,
        "fullcodeline": "(f.subclass != IAX_COMMAND_TXACC) &&"
    },
    {
        "line": 261,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 351,
        "fullcodeline": "if (ast_channel_trylock(iaxs[fr->callno]->owner)) {"
    },
    {
        "line": 433,
        "fullcodeline": "if (iaxs[fr->callno]->owner && ast_test_flag(iaxs[fr->callno], IAX_QUELCH)) {"
    },
    {
        "line": 443,
        "fullcodeline": "if (iaxs[fr->callno]->owner && ast_bridged_channel(iaxs[fr->callno]->owner)) {"
    },
    {
        "line": 476,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 484,
        "fullcodeline": "if ((new_callno = make_trunk(fr->callno, 1)) != -1)"
    },
    {
        "line": 509,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 514,
        "fullcodeline": "exists = 0;"
    },
    {
        "line": 518,
        "fullcodeline": "if (strcmp(iaxs[fr->callno]->exten, \"TBD\") && !exists) {"
    },
    {
        "line": 665,
        "fullcodeline": "iaxs[fr->callno]->encmethods = 0;"
    },
    {
        "line": 676,
        "fullcodeline": "!ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED) && ies.called_number) {"
    },
    {
        "line": 702,
        "fullcodeline": "if (iaxs[fr->callno]->owner && authdebug)"
    },
    {
        "line": 723,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 724,
        "fullcodeline": "pbx_builtin_setvar_helper(iaxs[fr->callno]->owner, \"BLINDTRANSFER\", bridged_chan->name);"
    },
    {
        "line": 725,
        "fullcodeline": "ast_mutex_lock(&iaxsl[fr->callno]);"
    },
    {
        "line": 731,
        "fullcodeline": "pbx_builtin_setvar_helper(bridged_chan, \"BLINDTRANSFER\", iaxs[fr->callno]->owner->name);"
    },
    {
        "line": 777,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 784,
        "fullcodeline": "ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);"
    },
    {
        "line": 810,
        "fullcodeline": "if (!(dp->flags & CACHE_FLAG_TRANSMITTED))"
    },
    {
        "line": 842,
        "fullcodeline": "if ((peer->lastms < 0)  || (peer->historicms > peer->maxms)) {"
    },
    {
        "line": 856,
        "fullcodeline": "if (peer->smoothing && (peer->lastms > -1))"
    },
    {
        "line": 864,
        "fullcodeline": "if (peer->pokeexpire > -1) {"
    },
    {
        "line": 871,
        "fullcodeline": "if ((peer->lastms < 0)  || (peer->historicms > peer->maxms))"
    },
    {
        "line": 875,
        "fullcodeline": "if (peer->pokeexpire == -1)"
    },
    {
        "line": 900,
        "fullcodeline": "ts = calc_timestamp(iaxs[fr->callno], 0, &fr->af);"
    },
    {
        "line": 901,
        "fullcodeline": "iaxs[fr->callno]->lag = ts - fr->ts;"
    },
    {
        "line": 918,
        "fullcodeline": "ies.username ? ies.username : \"<unknown>\", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr));"
    },
    {
        "line": 946,
        "fullcodeline": "exists = 0;"
    },
    {
        "line": 954,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 1129,
        "fullcodeline": "if (!ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)) {"
    },
    {
        "line": 1201,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 1215,
        "fullcodeline": "if (f.subclass == IAX_COMMAND_REGREL)"
    },
    {
        "line": 1217,
        "fullcodeline": "if (update_registry(&sin, fr->callno, ies.devicetype, fd, ies.refresh))"
    },
    {
        "line": 1219,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 1223,
        "fullcodeline": "if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {"
    },
    {
        "line": 1266,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 1286,
        "fullcodeline": "if (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)"
    },
    {
        "line": 1392,
        "fullcodeline": "(f.subclass != IAX_COMMAND_TXCNT) &&"
    },
    {
        "line": 1432,
        "fullcodeline": "ast_debug(1, \"Received mini frame before first full voice frame\\n\");"
    },
    {
        "line": 1433,
        "fullcodeline": "iax2_vnak(fr->callno);"
    },
    {
        "line": 1434,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 1446,
        "fullcodeline": "f.data = NULL;"
    },
    {
        "line": 155,
        "fullcodeline": "(f.subclass != IAX_COMMAND_TXREADY) &&\t\t/* for attended transfer */"
    },
    {
        "line": 165,
        "fullcodeline": "(f.subclass != IAX_COMMAND_TXREL) &&\t\t/* for attended transfer */"
    },
    {
        "line": 178,
        "fullcodeline": "((f.subclass != IAX_COMMAND_ACK) && (f.subclass != IAX_COMMAND_INVAL))) {"
    },
    {
        "line": 179,
        "fullcodeline": "ast_debug(1, \"Acking anyway\\n\");"
    },
    {
        "line": 182,
        "fullcodeline": "send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);"
    },
    {
        "line": 195,
        "fullcodeline": "(f.subclass != IAX_COMMAND_TXCNT) &&"
    },
    {
        "line": 235,
        "fullcodeline": "ast_debug(1, \"Cancelling transmission of packet %d\\n\", x);"
    },
    {
        "line": 240,
        "fullcodeline": "if ((fr->callno == cur->callno) && (x == cur->oseqno)) {"
    },
    {
        "line": 251,
        "fullcodeline": "ast_mutex_lock(&iaxsl[call_to_destroy]);"
    },
    {
        "line": 252,
        "fullcodeline": "iax2_destroy(call_to_destroy);"
    },
    {
        "line": 253,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[call_to_destroy]);"
    },
    {
        "line": 352,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 353,
        "fullcodeline": "usleep(1);"
    },
    {
        "line": 354,
        "fullcodeline": "ast_mutex_lock(&iaxsl[fr->callno]);"
    },
    {
        "line": 407,
        "fullcodeline": "manager_event(EVENT_FLAG_CALL, \"Hold\","
    },
    {
        "line": 434,
        "fullcodeline": "manager_event(EVENT_FLAG_CALL, \"Hold\","
    },
    {
        "line": 444,
        "fullcodeline": "iax2_queue_control_data(fr->callno, AST_CONTROL_UNHOLD, NULL, 0);"
    },
    {
        "line": 458,
        "fullcodeline": "if ((fr->callno == cur->callno) && (cur->transfer))"
    },
    {
        "line": 477,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 485,
        "fullcodeline": "fr->callno = new_callno;"
    },
    {
        "line": 494,
        "fullcodeline": "ast_log(LOG_NOTICE, \"Rejected connect attempt from %s, who was trying to reach '%s@%s'\\n\", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);"
    },
    {
        "line": 510,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 519,
        "fullcodeline": "memset(&ied0, 0, sizeof(ied0));"
    },
    {
        "line": 520,
        "fullcodeline": "iax_ie_append_str(&ied0, IAX_IE_CAUSE, \"No such context/extension\");"
    },
    {
        "line": 521,
        "fullcodeline": "iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);"
    },
    {
        "line": 522,
        "fullcodeline": "send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);"
    },
    {
        "line": 679,
        "fullcodeline": "spawn_dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num);"
    },
    {
        "line": 703,
        "fullcodeline": "ast_log(LOG_WARNING, \"Call rejected by %s: %s\\n\","
    },
    {
        "line": 726,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 732,
        "fullcodeline": "if (!strcmp(ies.called_number, ast_parking_ext())) {"
    },
    {
        "line": 748,
        "fullcodeline": "ast_debug(1, \"Async goto not applicable on call %d\\n\", fr->callno);"
    },
    {
        "line": 778,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 782,
        "fullcodeline": "ast_log(LOG_NOTICE, \"Rejected call to %s, format 0x%x incompatible with our capability 0x%x.\\n\", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->peerformat, iaxs[fr->callno]->capability);"
    },
    {
        "line": 811,
        "fullcodeline": "iax2_dprequest(dp, fr->callno);"
    },
    {
        "line": 857,
        "fullcodeline": "peer->historicms = (iaxs[fr->callno]->pingtime + peer->historicms) / 2;"
    },
    {
        "line": 872,
        "fullcodeline": "peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));"
    },
    {
        "line": 876,
        "fullcodeline": "peer_unref(peer);"
    },
    {
        "line": 937,
        "fullcodeline": "ast_log(LOG_NOTICE, \"Host %s failed to authenticate as %s\\n\", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->username);"
    },
    {
        "line": 949,
        "fullcodeline": "ast_log(LOG_NOTICE, \"Rejected connect attempt from %s, request '%s@%s' does not exist\\n\", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);"
    },
    {
        "line": 955,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 960,
        "fullcodeline": "if(ast_test_flag(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {"
    },
    {
        "line": 988,
        "fullcodeline": "if (!format) {"
    },
    {
        "line": 1132,
        "fullcodeline": "memset(&ied0, 0, sizeof(ied0));"
    },
    {
        "line": 1133,
        "fullcodeline": "iax_ie_append_str(&ied0, IAX_IE_CAUSE, \"No such context/extension\");"
    },
    {
        "line": 1134,
        "fullcodeline": "iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);"
    },
    {
        "line": 1135,
        "fullcodeline": "send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);"
    },
    {
        "line": 1202,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 1216,
        "fullcodeline": "memset(&sin, 0, sizeof(sin));"
    },
    {
        "line": 1218,
        "fullcodeline": "ast_log(LOG_WARNING, \"Registry error\\n\");"
    },
    {
        "line": 1220,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 1224,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 1225,
        "fullcodeline": "check_provisioning(&sin, fd, ies.serviceident, ies.provver);"
    },
    {
        "line": 1226,
        "fullcodeline": "ast_mutex_lock(&iaxsl[fr->callno]);"
    },
    {
        "line": 1250,
        "fullcodeline": "ast_log(LOG_NOTICE, \"Registration of '%s' rejected: '%s' from: '%s'\\n\", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : \"<unknown>\", ast_inet_ntoa(sin.sin_addr));"
    },
    {
        "line": 1251,
        "fullcodeline": "manager_event(EVENT_FLAG_SYSTEM, \"Registry\", \"ChannelType: IAX2\\r\\nUsername: %s\\r\\nStatus: Rejected\\r\\nCause: %s\\r\\n\", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : \"<unknown>\");"
    },
    {
        "line": 1267,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 1278,
        "fullcodeline": "iaxs[iaxs[fr->callno]->bridgecallno]->transferring = 0;"
    },
    {
        "line": 1279,
        "fullcodeline": "send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREJ, 0, NULL, 0, -1);"
    },
    {
        "line": 1287,
        "fullcodeline": "iaxs[fr->callno]->transferring = TRANSFER_MREADY;"
    },
    {
        "line": 1351,
        "fullcodeline": "if ((fr->callno == cur->callno) && (cur->transfer))"
    },
    {
        "line": 1371,
        "fullcodeline": "else if (res > 0)"
    },
    {
        "line": 164,
        "fullcodeline": "(f.subclass != IAX_COMMAND_TXREADY) &&\t\t/* for attended transfer */"
    },
    {
        "line": 194,
        "fullcodeline": "(f.subclass != IAX_COMMAND_INVAL) &&"
    },
    {
        "line": 241,
        "fullcodeline": "cur->retries = -1;"
    },
    {
        "line": 309,
        "fullcodeline": "struct ast_variable *var, *prev = NULL;"
    },
    {
        "line": 311,
        "fullcodeline": "varlist = ast_calloc(1, sizeof(*varlist));"
    },
    {
        "line": 312,
        "fullcodeline": "variablestore = ast_channel_datastore_alloc(&iax2_variable_datastore_info, NULL);"
    },
    {
        "line": 355,
        "fullcodeline": "if (iaxs[fr->callno] && iaxs[fr->callno]->owner) goto retryowner;"
    },
    {
        "line": 367,
        "fullcodeline": "ast_debug(1, \"Neat, somebody took away the channel at a magical time but i found it!\\n\");"
    },
    {
        "line": 371,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 417,
        "fullcodeline": "if (iaxs[fr->callno]->owner && ast_bridged_channel(iaxs[fr->callno]->owner)) {"
    },
    {
        "line": 445,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 459,
        "fullcodeline": "cur->retries = -1;"
    },
    {
        "line": 523,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 682,
        "fullcodeline": "dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num, 1);"
    },
    {
        "line": 705,
        "fullcodeline": "ies.cause ? ies.cause : \"<Unknown>\");"
    },
    {
        "line": 727,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 767,
        "fullcodeline": "iaxs[fr->callno]->peerformat = iaxs[fr->callno]->owner->nativeformats;"
    },
    {
        "line": 787,
        "fullcodeline": "iaxs[fr->callno]->owner->nativeformats = iaxs[fr->callno]->peerformat;"
    },
    {
        "line": 788,
        "fullcodeline": "ast_verb(3, \"Format for call is %s\\n\", ast_getformatname(iaxs[fr->callno]->owner->nativeformats));"
    },
    {
        "line": 843,
        "fullcodeline": "if (iaxs[fr->callno]->pingtime <= peer->maxms) {"
    },
    {
        "line": 865,
        "fullcodeline": "if (!ast_sched_del(sched, peer->pokeexpire)) {"
    },
    {
        "line": 874,
        "fullcodeline": "peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqok, iax2_poke_peer_s, peer_ref(peer));"
    },
    {
        "line": 903,
        "fullcodeline": "ast_debug(1, \"Peer %s lag measured as %dms\\n\","
    },
    {
        "line": 914,
        "fullcodeline": ".subclass = AST_CONTROL_HANGUP,"
    },
    {
        "line": 966,
        "fullcodeline": "format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;"
    },
    {
        "line": 967,
        "fullcodeline": "memset(&pref, 0, sizeof(pref));"
    },
    {
        "line": 968,
        "fullcodeline": "strcpy(caller_pref_buf, \"disabled\");"
    },
    {
        "line": 969,
        "fullcodeline": "strcpy(host_pref_buf, \"disabled\");"
    },
    {
        "line": 1057,
        "fullcodeline": "memset(&ied1, 0, sizeof(ied1));"
    },
    {
        "line": 1058,
        "fullcodeline": "iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);"
    },
    {
        "line": 1059,
        "fullcodeline": "send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);"
    },
    {
        "line": 1136,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 1141,
        "fullcodeline": "ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);"
    },
    {
        "line": 1142,
        "fullcodeline": "ast_verb(3, \"Accepting DIAL from %s, formats = 0x%x\\n\", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->peerformat);"
    },
    {
        "line": 1143,
        "fullcodeline": "ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);"
    },
    {
        "line": 1144,
        "fullcodeline": "send_command(iaxs[fr->callno], AST_FRAME_CONTROL, AST_CONTROL_PROGRESS, 0, NULL, 0, -1);"
    },
    {
        "line": 1227,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 1289,
        "fullcodeline": "iaxs[fr->callno]->transferring = TRANSFER_READY;"
    },
    {
        "line": 1292,
        "fullcodeline": "if ((iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_READY) ||"
    },
    {
        "line": 1352,
        "fullcodeline": "cur->retries = -1;"
    },
    {
        "line": 1372,
        "fullcodeline": "send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);"
    },
    {
        "line": 163,
        "fullcodeline": "(f.subclass != IAX_COMMAND_TXCNT) &&"
    },
    {
        "line": 250,
        "fullcodeline": "ast_debug(1, \"Really destroying %d, having been acked on final message\\n\", call_to_destroy);"
    },
    {
        "line": 313,
        "fullcodeline": "if (variablestore && varlist) {"
    },
    {
        "line": 360,
        "fullcodeline": "iaxs[fr->callno]->owner->nativeformats = f.subclass;"
    },
    {
        "line": 363,
        "fullcodeline": "iaxs[fr->callno]->owner->nativeformats = orignative;"
    },
    {
        "line": 364,
        "fullcodeline": "ast_channel_unlock(iaxs[fr->callno]->owner);"
    },
    {
        "line": 419,
        "fullcodeline": "iax2_queue_control_data(fr->callno, AST_CONTROL_HOLD,"
    },
    {
        "line": 446,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 524,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 528,
        "fullcodeline": "ast_log(LOG_NOTICE, \"Rejected connect attempt from %s, request '%s@%s' does not exist\\n\", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);"
    },
    {
        "line": 532,
        "fullcodeline": "if(ast_test_flag(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {"
    },
    {
        "line": 562,
        "fullcodeline": "if (!format) {"
    },
    {
        "line": 733,
        "fullcodeline": "if (iax_park(bridged_chan, iaxs[fr->callno]->owner)) {"
    },
    {
        "line": 790,
        "fullcodeline": "if (ast_channel_trylock(iaxs[fr->callno]->owner)) {"
    },
    {
        "line": 797,
        "fullcodeline": "if (iaxs[fr->callno] && iaxs[fr->callno]->owner) {"
    },
    {
        "line": 844,
        "fullcodeline": "ast_log(LOG_NOTICE, \"Peer '%s' is now REACHABLE! Time: %d\\n\", peer->name, iaxs[fr->callno]->pingtime);"
    },
    {
        "line": 845,
        "fullcodeline": "manager_event(EVENT_FLAG_SYSTEM, \"PeerStatus\", \"ChannelType: IAX2\\r\\nPeer: IAX2/%s\\r\\nPeerStatus: Reachable\\r\\nTime: %d\\r\\n\", peer->name, iaxs[fr->callno]->pingtime);"
    },
    {
        "line": 846,
        "fullcodeline": "ast_device_state_changed(\"IAX2/%s\", peer->name); /* Activate notification */"
    },
    {
        "line": 848,
        "fullcodeline": "} else if ((peer->historicms > 0) && (peer->historicms <= peer->maxms)) {"
    },
    {
        "line": 858,
        "fullcodeline": "else if (peer->smoothing && peer->lastms < 0)"
    },
    {
        "line": 866,
        "fullcodeline": "peer_unref(peer);"
    },
    {
        "line": 867,
        "fullcodeline": "peer->pokeexpire = -1;"
    },
    {
        "line": 961,
        "fullcodeline": "if(ast_test_flag(iaxs[fr->callno], IAX_CODEC_NOCAP)) {"
    },
    {
        "line": 971,
        "fullcodeline": "using_prefs = \"mine\";"
    },
    {
        "line": 984,
        "fullcodeline": "format = ast_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);"
    },
    {
        "line": 985,
        "fullcodeline": "ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);"
    },
    {
        "line": 986,
        "fullcodeline": "ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);"
    },
    {
        "line": 989,
        "fullcodeline": "if(!ast_test_flag(iaxs[fr->callno], IAX_CODEC_NOCAP)) {"
    },
    {
        "line": 993,
        "fullcodeline": "if (!format) {"
    },
    {
        "line": 1060,
        "fullcodeline": "if (strcmp(iaxs[fr->callno]->exten, \"TBD\")) {"
    },
    {
        "line": 1131,
        "fullcodeline": "ast_log(LOG_NOTICE, \"Rejected dial attempt from %s, request '%s@%s' does not exist\\n\", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);"
    },
    {
        "line": 1137,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 1145,
        "fullcodeline": "if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat)))"
    },
    {
        "line": 1228,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 1293,
        "fullcodeline": "(iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_MREADY)) {"
    },
    {
        "line": 1374,
        "fullcodeline": "send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);"
    },
    {
        "line": 162,
        "fullcodeline": "(f.subclass != IAX_COMMAND_INVAL) &&"
    },
    {
        "line": 244,
        "fullcodeline": "call_to_destroy = fr->callno;"
    },
    {
        "line": 314,
        "fullcodeline": "variablestore->data = varlist;"
    },
    {
        "line": 315,
        "fullcodeline": "variablestore->inheritance = DATASTORE_INHERIT_FOREVER;"
    },
    {
        "line": 316,
        "fullcodeline": "AST_LIST_HEAD_INIT(varlist);"
    },
    {
        "line": 331,
        "fullcodeline": "ies.vars = NULL;"
    },
    {
        "line": 332,
        "fullcodeline": "ast_channel_datastore_add(c, variablestore);"
    },
    {
        "line": 370,
        "fullcodeline": "ast_variables_destroy(ies.vars);"
    },
    {
        "line": 420,
        "fullcodeline": "S_OR(mohsuggest, NULL),"
    },
    {
        "line": 421,
        "fullcodeline": "!ast_strlen_zero(mohsuggest) ? strlen(mohsuggest) + 1 : 0);"
    },
    {
        "line": 422,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 538,
        "fullcodeline": "format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;"
    },
    {
        "line": 539,
        "fullcodeline": "memset(&pref, 0, sizeof(pref));"
    },
    {
        "line": 540,
        "fullcodeline": "strcpy(caller_pref_buf, \"disabled\");"
    },
    {
        "line": 541,
        "fullcodeline": "strcpy(host_pref_buf, \"disabled\");"
    },
    {
        "line": 628,
        "fullcodeline": "memset(&ied1, 0, sizeof(ied1));"
    },
    {
        "line": 629,
        "fullcodeline": "iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);"
    },
    {
        "line": 630,
        "fullcodeline": "send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);"
    },
    {
        "line": 734,
        "fullcodeline": "ast_log(LOG_WARNING, \"Failed to park call on '%s'\\n\", bridged_chan->name);"
    },
    {
        "line": 739,
        "fullcodeline": "if (ast_async_goto(bridged_chan, iaxs[fr->callno]->context, ies.called_number, 1))"
    },
    {
        "line": 791,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 792,
        "fullcodeline": "usleep(1);"
    },
    {
        "line": 793,
        "fullcodeline": "ast_mutex_lock(&iaxsl[fr->callno]);"
    },
    {
        "line": 803,
        "fullcodeline": "ast_channel_unlock(iaxs[fr->callno]->owner);"
    },
    {
        "line": 859,
        "fullcodeline": "peer->historicms = (0 + peer->historicms) / 2;"
    },
    {
        "line": 962,
        "fullcodeline": "using_prefs = \"reqonly\";"
    },
    {
        "line": 974,
        "fullcodeline": "if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0)) {"
    },
    {
        "line": 990,
        "fullcodeline": "ast_debug(1, \"We don't do requested format %s, falling back to peer capability %d\\n\", ast_getformatname(iaxs[fr->callno]->peerformat), iaxs[fr->callno]->peercapability);"
    },
    {
        "line": 991,
        "fullcodeline": "format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;"
    },
    {
        "line": 1000,
        "fullcodeline": "memset(&ied0, 0, sizeof(ied0));"
    },
    {
        "line": 1001,
        "fullcodeline": "iax_ie_append_str(&ied0, IAX_IE_CAUSE, \"Unable to negotiate codec\");"
    },
    {
        "line": 1002,
        "fullcodeline": "iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);"
    },
    {
        "line": 1003,
        "fullcodeline": "send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);"
    },
    {
        "line": 1061,
        "fullcodeline": "ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);"
    },
    {
        "line": 1062,
        "fullcodeline": "ast_verb(3, \"Accepting AUTHENTICATED call from %s:\\n\""
    },
    {
        "line": 1080,
        "fullcodeline": "ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);"
    },
    {
        "line": 1146,
        "fullcodeline": "iax2_destroy(fr->callno);"
    },
    {
        "line": 1295,
        "fullcodeline": "if (iaxs[fr->callno]->transferring == TRANSFER_MREADY) {"
    },
    {
        "line": 317,
        "fullcodeline": "for (var = ies.vars; var; var = var->next) {"
    },
    {
        "line": 334,
        "fullcodeline": "ast_log(LOG_ERROR, \"Memory allocation error while processing IAX2 variables\\n\");"
    },
    {
        "line": 362,
        "fullcodeline": "ast_set_read_format(iaxs[fr->callno]->owner, iaxs[fr->callno]->owner->readformat);"
    },
    {
        "line": 423,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 533,
        "fullcodeline": "if(ast_test_flag(iaxs[fr->callno], IAX_CODEC_NOCAP)) {"
    },
    {
        "line": 543,
        "fullcodeline": "using_prefs = \"mine\";"
    },
    {
        "line": 558,
        "fullcodeline": "format = ast_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);"
    },
    {
        "line": 559,
        "fullcodeline": "ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);"
    },
    {
        "line": 560,
        "fullcodeline": "ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);"
    },
    {
        "line": 563,
        "fullcodeline": "if(!ast_test_flag(iaxs[fr->callno], IAX_CODEC_NOCAP))"
    },
    {
        "line": 565,
        "fullcodeline": "if (!format) {"
    },
    {
        "line": 631,
        "fullcodeline": "if (strcmp(iaxs[fr->callno]->exten, \"TBD\")) {"
    },
    {
        "line": 736,
        "fullcodeline": "ast_debug(1, \"Parked call on '%s'\\n\", ast_bridged_channel(iaxs[fr->callno]->owner)->name);"
    },
    {
        "line": 740,
        "fullcodeline": "ast_log(LOG_WARNING, \"Async goto of '%s' to '%s@%s' failed\\n\", bridged_chan->name,"
    },
    {
        "line": 794,
        "fullcodeline": "if (iaxs[fr->callno] && iaxs[fr->callno]->owner) goto retryowner2;"
    },
    {
        "line": 849,
        "fullcodeline": "if (iaxs[fr->callno]->pingtime > peer->maxms) {"
    },
    {
        "line": 861,
        "fullcodeline": "peer->historicms = iaxs[fr->callno]->pingtime;"
    },
    {
        "line": 964,
        "fullcodeline": "using_prefs = \"disabled\";"
    },
    {
        "line": 973,
        "fullcodeline": "ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);"
    },
    {
        "line": 1004,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 1068,
        "fullcodeline": "ast_inet_ntoa(sin.sin_addr),"
    },
    {
        "line": 1070,
        "fullcodeline": "ast_getformatname(iaxs[fr->callno]->peerformat),"
    },
    {
        "line": 1074,
        "fullcodeline": "ast_getformatname(format),"
    },
    {
        "line": 1081,
        "fullcodeline": "if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, format)))"
    },
    {
        "line": 1118,
        "fullcodeline": "ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);"
    },
    {
        "line": 1120,
        "fullcodeline": "ast_verb(3, \"Accepted AUTHENTICATED TBD call from %s\\n\", ast_inet_ntoa(sin.sin_addr));"
    },
    {
        "line": 1296,
        "fullcodeline": "ast_verb(3, \"Attempting media bridge of %s and %s\\n\", iaxs[fr->callno]->owner ? iaxs[fr->callno]->owner->name : \"<Unknown>\","
    },
    {
        "line": 1299,
        "fullcodeline": "iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_MEDIA;"
    },
    {
        "line": 1300,
        "fullcodeline": "iaxs[fr->callno]->transferring = TRANSFER_MEDIA;"
    },
    {
        "line": 1302,
        "fullcodeline": "memset(&ied0, 0, sizeof(ied0));"
    },
    {
        "line": 1303,
        "fullcodeline": "memset(&ied1, 0, sizeof(ied1));"
    },
    {
        "line": 1304,
        "fullcodeline": "iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);"
    },
    {
        "line": 1305,
        "fullcodeline": "iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);"
    },
    {
        "line": 1306,
        "fullcodeline": "send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied0.buf, ied0.pos, -1);"
    },
    {
        "line": 1307,
        "fullcodeline": "send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied1.buf, ied1.pos, -1);"
    },
    {
        "line": 318,
        "fullcodeline": "struct ast_var_t *newvar = ast_var_assign(var->name, var->value);"
    },
    {
        "line": 321,
        "fullcodeline": "prev = var;"
    },
    {
        "line": 330,
        "fullcodeline": "ast_free(prev);"
    },
    {
        "line": 534,
        "fullcodeline": "using_prefs = \"reqonly\";"
    },
    {
        "line": 547,
        "fullcodeline": "if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0)) {"
    },
    {
        "line": 564,
        "fullcodeline": "format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;"
    },
    {
        "line": 566,
        "fullcodeline": "memset(&ied0, 0, sizeof(ied0));"
    },
    {
        "line": 567,
        "fullcodeline": "iax_ie_append_str(&ied0, IAX_IE_CAUSE, \"Unable to negotiate codec\");"
    },
    {
        "line": 568,
        "fullcodeline": "iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);"
    },
    {
        "line": 569,
        "fullcodeline": "send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);"
    },
    {
        "line": 632,
        "fullcodeline": "ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);"
    },
    {
        "line": 633,
        "fullcodeline": "ast_verb(3, \"Accepting UNAUTHENTICATED call from %s:\\n\""
    },
    {
        "line": 651,
        "fullcodeline": "iaxs[fr->callno]->chosenformat = format;"
    },
    {
        "line": 652,
        "fullcodeline": "ast_set_flag(iaxs[fr->callno], IAX_DELAYPBXSTART);"
    },
    {
        "line": 743,
        "fullcodeline": "ast_debug(1, \"Async goto of '%s' to '%s@%s' started\\n\", bridged_chan->name,"
    },
    {
        "line": 800,
        "fullcodeline": "ast_set_write_format(iaxs[fr->callno]->owner, iaxs[fr->callno]->owner->writeformat);"
    },
    {
        "line": 802,
        "fullcodeline": "ast_set_read_format(iaxs[fr->callno]->owner, iaxs[fr->callno]->owner->readformat);"
    },
    {
        "line": 850,
        "fullcodeline": "ast_log(LOG_NOTICE, \"Peer '%s' is now TOO LAGGED (%d ms)!\\n\", peer->name, iaxs[fr->callno]->pingtime);"
    },
    {
        "line": 851,
        "fullcodeline": "manager_event(EVENT_FLAG_SYSTEM, \"PeerStatus\", \"ChannelType: IAX2\\r\\nPeer: IAX2/%s\\r\\nPeerStatus: Lagged\\r\\nTime: %d\\r\\n\", peer->name, iaxs[fr->callno]->pingtime);"
    },
    {
        "line": 852,
        "fullcodeline": "ast_device_state_changed(\"IAX2/%s\", peer->name); /* Activate notification */"
    },
    {
        "line": 975,
        "fullcodeline": "if (ast_test_flag(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {"
    },
    {
        "line": 1005,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 1010,
        "fullcodeline": "if(ast_test_flag(iaxs[fr->callno], IAX_CODEC_NOCAP)) {"
    },
    {
        "line": 1036,
        "fullcodeline": "if (!format) {"
    },
    {
        "line": 1082,
        "fullcodeline": "iax2_destroy(fr->callno);"
    },
    {
        "line": 1297,
        "fullcodeline": "iaxs[iaxs[fr->callno]->bridgecallno]->owner ? iaxs[iaxs[fr->callno]->bridgecallno]->owner->name : \"<Unknown>\");"
    },
    {
        "line": 1309,
        "fullcodeline": "ast_verb(3, \"Releasing %s and %s\\n\", iaxs[fr->callno]->owner ? iaxs[fr->callno]->owner->name : \"<Unknown>\","
    },
    {
        "line": 1312,
        "fullcodeline": "iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_RELEASED;"
    },
    {
        "line": 1313,
        "fullcodeline": "iaxs[fr->callno]->transferring = TRANSFER_RELEASED;"
    },
    {
        "line": 1314,
        "fullcodeline": "ast_set_flag(iaxs[iaxs[fr->callno]->bridgecallno], IAX_ALREADYGONE);"
    },
    {
        "line": 1315,
        "fullcodeline": "ast_set_flag(iaxs[fr->callno], IAX_ALREADYGONE);"
    },
    {
        "line": 1318,
        "fullcodeline": "stop_stuff(fr->callno);"
    },
    {
        "line": 1321,
        "fullcodeline": "memset(&ied0, 0, sizeof(ied0));"
    },
    {
        "line": 1322,
        "fullcodeline": "memset(&ied1, 0, sizeof(ied1));"
    },
    {
        "line": 1323,
        "fullcodeline": "iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);"
    },
    {
        "line": 1324,
        "fullcodeline": "iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);"
    },
    {
        "line": 1325,
        "fullcodeline": "send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied0.buf, ied0.pos, -1);"
    },
    {
        "line": 1326,
        "fullcodeline": "send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied1.buf, ied1.pos, -1);"
    },
    {
        "line": 322,
        "fullcodeline": "if (!newvar) {"
    },
    {
        "line": 336,
        "fullcodeline": "ast_channel_datastore_free(variablestore);"
    },
    {
        "line": 338,
        "fullcodeline": "ast_free(varlist);"
    },
    {
        "line": 536,
        "fullcodeline": "using_prefs = \"disabled\";"
    },
    {
        "line": 546,
        "fullcodeline": "ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);"
    },
    {
        "line": 570,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 639,
        "fullcodeline": "ast_inet_ntoa(sin.sin_addr),"
    },
    {
        "line": 641,
        "fullcodeline": "ast_getformatname(iaxs[fr->callno]->peerformat),"
    },
    {
        "line": 645,
        "fullcodeline": "ast_getformatname(format),"
    },
    {
        "line": 654,
        "fullcodeline": "ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);"
    },
    {
        "line": 656,
        "fullcodeline": "ast_verb(3, \"Accepted unauthenticated TBD call from %s\\n\", ast_inet_ntoa(sin.sin_addr));"
    },
    {
        "line": 976,
        "fullcodeline": "pref = iaxs[fr->callno]->rprefs;"
    },
    {
        "line": 977,
        "fullcodeline": "using_prefs = \"caller\";"
    },
    {
        "line": 995,
        "fullcodeline": "if(ast_test_flag(iaxs[fr->callno], IAX_CODEC_NOCAP))"
    },
    {
        "line": 1037,
        "fullcodeline": "ast_log(LOG_ERROR, \"No best format in 0x%x???\\n\", iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);"
    },
    {
        "line": 1044,
        "fullcodeline": "memset(&ied0, 0, sizeof(ied0));"
    },
    {
        "line": 1045,
        "fullcodeline": "iax_ie_append_str(&ied0, IAX_IE_CAUSE, \"Unable to negotiate codec\");"
    },
    {
        "line": 1046,
        "fullcodeline": "iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);"
    },
    {
        "line": 1047,
        "fullcodeline": "send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);"
    },
    {
        "line": 1149,
        "fullcodeline": "struct ast_variable *var, *prev = NULL;"
    },
    {
        "line": 1151,
        "fullcodeline": "varlist = ast_calloc(1, sizeof(*varlist));"
    },
    {
        "line": 1152,
        "fullcodeline": "variablestore = ast_channel_datastore_alloc(&iax2_variable_datastore_info, NULL);"
    },
    {
        "line": 1310,
        "fullcodeline": "iaxs[iaxs[fr->callno]->bridgecallno]->owner ? iaxs[iaxs[fr->callno]->bridgecallno]->owner->name : \"<Unknown>\");"
    },
    {
        "line": 320,
        "fullcodeline": "ast_free(prev);"
    },
    {
        "line": 324,
        "fullcodeline": "ast_log(LOG_ERROR, \"Memory allocation error while processing IAX2 variables\\n\");"
    },
    {
        "line": 549,
        "fullcodeline": "if (ast_test_flag(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {"
    },
    {
        "line": 571,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 582,
        "fullcodeline": "if(ast_test_flag(iaxs[fr->callno], IAX_CODEC_NOCAP)) {"
    },
    {
        "line": 609,
        "fullcodeline": "if (!format) {"
    },
    {
        "line": 996,
        "fullcodeline": "ast_log(LOG_NOTICE, \"Rejected connect attempt from %s, requested 0x%x incompatible with our capability 0x%x.\\n\", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->peerformat, iaxs[fr->callno]->capability);"
    },
    {
        "line": 1011,
        "fullcodeline": "if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))"
    },
    {
        "line": 1048,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 1153,
        "fullcodeline": "if (variablestore && varlist) {"
    },
    {
        "line": 326,
        "fullcodeline": "AST_LIST_INSERT_TAIL(varlist, newvar, entries);"
    },
    {
        "line": 550,
        "fullcodeline": "pref = iaxs[fr->callno]->rprefs;"
    },
    {
        "line": 551,
        "fullcodeline": "using_prefs = \"caller\";"
    },
    {
        "line": 575,
        "fullcodeline": "if(ast_test_flag(iaxs[fr->callno], IAX_CODEC_NOCAP))"
    },
    {
        "line": 610,
        "fullcodeline": "memset(&ied0, 0, sizeof(ied0));"
    },
    {
        "line": 611,
        "fullcodeline": "iax_ie_append_str(&ied0, IAX_IE_CAUSE, \"Unable to negotiate codec\");"
    },
    {
        "line": 612,
        "fullcodeline": "iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);"
    },
    {
        "line": 613,
        "fullcodeline": "ast_log(LOG_ERROR, \"No best format in 0x%x???\\n\", iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);"
    },
    {
        "line": 614,
        "fullcodeline": "send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);"
    },
    {
        "line": 621,
        "fullcodeline": "ast_set_flag(iaxs[fr->callno], IAX_ALREADYGONE);"
    },
    {
        "line": 998,
        "fullcodeline": "ast_log(LOG_NOTICE, \"Rejected connect attempt from %s, requested/capability 0x%x/0x%x incompatible with our capability 0x%x.\\n\", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->peerformat, iaxs[fr->callno]->peercapability, iaxs[fr->callno]->capability);"
    },
    {
        "line": 1012,
        "fullcodeline": "format = 0;"
    },
    {
        "line": 1014,
        "fullcodeline": "if(ast_test_flag(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {"
    },
    {
        "line": 1049,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 1085,
        "fullcodeline": "struct ast_variable *var, *prev = NULL;"
    },
    {
        "line": 1087,
        "fullcodeline": "varlist = ast_calloc(1, sizeof(*varlist));"
    },
    {
        "line": 1088,
        "fullcodeline": "variablestore = ast_channel_datastore_alloc(&iax2_variable_datastore_info, NULL);"
    },
    {
        "line": 1154,
        "fullcodeline": "variablestore->data = varlist;"
    },
    {
        "line": 1155,
        "fullcodeline": "variablestore->inheritance = DATASTORE_INHERIT_FOREVER;"
    },
    {
        "line": 1156,
        "fullcodeline": "AST_LIST_HEAD_INIT(varlist);"
    },
    {
        "line": 1171,
        "fullcodeline": "ies.vars = NULL;"
    },
    {
        "line": 1172,
        "fullcodeline": "ast_channel_datastore_add(c, variablestore);"
    },
    {
        "line": 576,
        "fullcodeline": "ast_log(LOG_NOTICE, \"Rejected connect attempt from %s, requested 0x%x incompatible with our capability 0x%x.\\n\", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->peerformat, iaxs[fr->callno]->capability);"
    },
    {
        "line": 583,
        "fullcodeline": "if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))"
    },
    {
        "line": 615,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 1015,
        "fullcodeline": "using_prefs = ast_test_flag(iaxs[fr->callno], IAX_CODEC_NOCAP) ? \"reqonly\" : \"disabled\";"
    },
    {
        "line": 1016,
        "fullcodeline": "memset(&pref, 0, sizeof(pref));"
    },
    {
        "line": 1017,
        "fullcodeline": "format = ast_test_flag(iaxs[fr->callno], IAX_CODEC_NOCAP) ?"
    },
    {
        "line": 1019,
        "fullcodeline": "strcpy(caller_pref_buf,\"disabled\");"
    },
    {
        "line": 1020,
        "fullcodeline": "strcpy(host_pref_buf,\"disabled\");"
    },
    {
        "line": 1039,
        "fullcodeline": "if(ast_test_flag(iaxs[fr->callno], IAX_CODEC_NOCAP))"
    },
    {
        "line": 1089,
        "fullcodeline": "if (variablestore && varlist) {"
    },
    {
        "line": 1157,
        "fullcodeline": "for (var = ies.vars; var; var = var->next) {"
    },
    {
        "line": 1174,
        "fullcodeline": "ast_log(LOG_ERROR, \"Memory allocation error while processing IAX2 variables\\n\");"
    },
    {
        "line": 578,
        "fullcodeline": "ast_log(LOG_NOTICE, \"Rejected connect attempt from %s, requested/capability 0x%x/0x%x incompatible with our capability 0x%x.\\n\", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->peerformat, iaxs[fr->callno]->peercapability, iaxs[fr->callno]->capability);"
    },
    {
        "line": 584,
        "fullcodeline": "format = 0;"
    },
    {
        "line": 586,
        "fullcodeline": "if(ast_test_flag(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {"
    },
    {
        "line": 616,
        "fullcodeline": "ast_mutex_unlock(&iaxsl[fr->callno]);"
    },
    {
        "line": 620,
        "fullcodeline": "ast_log(LOG_NOTICE, \"Rejected connect attempt from %s, requested/capability 0x%x/0x%x incompatible with our capability 0x%x.\\n\", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->peerformat, iaxs[fr->callno]->peercapability, iaxs[fr->callno]->capability);"
    },
    {
        "line": 1022,
        "fullcodeline": "using_prefs = \"mine\";"
    },
    {
        "line": 1040,
        "fullcodeline": "ast_log(LOG_NOTICE, \"Rejected connect attempt from %s, requested 0x%x incompatible with our capability 0x%x.\\n\", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->peerformat, iaxs[fr->callno]->capability);"
    },
    {
        "line": 1090,
        "fullcodeline": "variablestore->data = varlist;"
    },
    {
        "line": 1091,
        "fullcodeline": "variablestore->inheritance = DATASTORE_INHERIT_FOREVER;"
    },
    {
        "line": 1092,
        "fullcodeline": "AST_LIST_HEAD_INIT(varlist);"
    },
    {
        "line": 1107,
        "fullcodeline": "ies.vars = NULL;"
    },
    {
        "line": 1108,
        "fullcodeline": "ast_channel_datastore_add(c, variablestore);"
    },
    {
        "line": 1158,
        "fullcodeline": "struct ast_var_t *newvar = ast_var_assign(var->name, var->value);"
    },
    {
        "line": 1161,
        "fullcodeline": "prev = var;"
    },
    {
        "line": 1170,
        "fullcodeline": "ast_free(prev);"
    },
    {
        "line": 587,
        "fullcodeline": "using_prefs = ast_test_flag(iaxs[fr->callno], IAX_CODEC_NOCAP) ? \"reqonly\" : \"disabled\";"
    },
    {
        "line": 588,
        "fullcodeline": "memset(&pref, 0, sizeof(pref));"
    },
    {
        "line": 589,
        "fullcodeline": "format = ast_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);"
    },
    {
        "line": 590,
        "fullcodeline": "strcpy(caller_pref_buf,\"disabled\");"
    },
    {
        "line": 591,
        "fullcodeline": "strcpy(host_pref_buf,\"disabled\");"
    },
    {
        "line": 1018,
        "fullcodeline": "iaxs[fr->callno]->peerformat : ast_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);"
    },
    {
        "line": 1023,
        "fullcodeline": "if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0)) {"
    },
    {
        "line": 1042,
        "fullcodeline": "ast_log(LOG_NOTICE, \"Rejected connect attempt from %s, requested/capability 0x%x/0x%x incompatible with our capability 0x%x.\\n\", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->peerformat, iaxs[fr->callno]->peercapability, iaxs[fr->callno]->capability);"
    },
    {
        "line": 1093,
        "fullcodeline": "for (var = ies.vars; var; var = var->next) {"
    },
    {
        "line": 1110,
        "fullcodeline": "ast_log(LOG_ERROR, \"Memory allocation error while processing IAX2 variables\\n\");"
    },
    {
        "line": 1162,
        "fullcodeline": "if (!newvar) {"
    },
    {
        "line": 1176,
        "fullcodeline": "ast_channel_datastore_free(variablestore);"
    },
    {
        "line": 1178,
        "fullcodeline": "ast_free(varlist);"
    },
    {
        "line": 593,
        "fullcodeline": "using_prefs = \"mine\";"
    },
    {
        "line": 1031,
        "fullcodeline": "format = ast_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);"
    },
    {
        "line": 1094,
        "fullcodeline": "struct ast_var_t *newvar = ast_var_assign(var->name, var->value);"
    },
    {
        "line": 1097,
        "fullcodeline": "prev = var;"
    },
    {
        "line": 1106,
        "fullcodeline": "ast_free(prev);"
    },
    {
        "line": 1160,
        "fullcodeline": "ast_free(prev);"
    },
    {
        "line": 1164,
        "fullcodeline": "ast_log(LOG_ERROR, \"Memory allocation error while processing IAX2 variables\\n\");"
    },
    {
        "line": 594,
        "fullcodeline": "if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0)) {"
    },
    {
        "line": 1025,
        "fullcodeline": "if (ast_test_flag(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {"
    },
    {
        "line": 1033,
        "fullcodeline": "format = ast_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);"
    },
    {
        "line": 1098,
        "fullcodeline": "if (!newvar) {"
    },
    {
        "line": 1112,
        "fullcodeline": "ast_channel_datastore_free(variablestore);"
    },
    {
        "line": 1114,
        "fullcodeline": "ast_free(varlist);"
    },
    {
        "line": 1166,
        "fullcodeline": "AST_LIST_INSERT_TAIL(varlist, newvar, entries);"
    },
    {
        "line": 602,
        "fullcodeline": "format = ast_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);"
    },
    {
        "line": 1026,
        "fullcodeline": "pref = iaxs[fr->callno]->prefs;"
    },
    {
        "line": 1096,
        "fullcodeline": "ast_free(prev);"
    },
    {
        "line": 1100,
        "fullcodeline": "ast_log(LOG_ERROR, \"Memory allocation error while processing IAX2 variables\\n\");"
    },
    {
        "line": 596,
        "fullcodeline": "if (ast_test_flag(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {"
    },
    {
        "line": 605,
        "fullcodeline": "format = ast_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);"
    },
    {
        "line": 1028,
        "fullcodeline": "pref = iaxs[fr->callno]->rprefs;"
    },
    {
        "line": 1029,
        "fullcodeline": "using_prefs = \"caller\";"
    },
    {
        "line": 1102,
        "fullcodeline": "AST_LIST_INSERT_TAIL(varlist, newvar, entries);"
    },
    {
        "line": 597,
        "fullcodeline": "pref = iaxs[fr->callno]->prefs;"
    },
    {
        "line": 599,
        "fullcodeline": "pref = iaxs[fr->callno]->rprefs;"
    },
    {
        "line": 600,
        "fullcodeline": "using_prefs = \"caller\";"
    }
]