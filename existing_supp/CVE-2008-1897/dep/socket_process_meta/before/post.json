[
    {
        "line": 12,
        "fullcodeline": "struct ast_frame f = { 0, };"
    },
    {
        "line": 28,
        "fullcodeline": "mth = (struct ast_iax2_meta_trunk_hdr *)(meta->data);"
    },
    {
        "line": 29,
        "fullcodeline": "ts = ntohl(mth->ts);"
    },
    {
        "line": 30,
        "fullcodeline": "metatype = meta->cmddata;"
    },
    {
        "line": 31,
        "fullcodeline": "packet_len -= (sizeof(*meta) + sizeof(*mth));"
    },
    {
        "line": 32,
        "fullcodeline": "ptr = mth->data;"
    },
    {
        "line": 33,
        "fullcodeline": "tpeer = find_tpeer(sin, sockfd);"
    },
    {
        "line": 39,
        "fullcodeline": "tpeer->trunkact = ast_tvnow();"
    },
    {
        "line": 42,
        "fullcodeline": "rxtrunktime = tpeer->rxtrunktime;"
    },
    {
        "line": 43,
        "fullcodeline": "ast_mutex_unlock(&tpeer->lock);"
    },
    {
        "line": 14,
        "fullcodeline": "if (packet_len < sizeof(*meta)) {"
    },
    {
        "line": 20,
        "fullcodeline": "if (meta->metacmd != IAX_META_TRUNK)"
    },
    {
        "line": 23,
        "fullcodeline": "if (packet_len < (sizeof(*meta) + sizeof(*mth))) {"
    },
    {
        "line": 34,
        "fullcodeline": "if (!tpeer) {"
    },
    {
        "line": 40,
        "fullcodeline": "if (!ts || ast_tvzero(tpeer->rxtrunktime))"
    },
    {
        "line": 44,
        "fullcodeline": "while (packet_len >= sizeof(*mte)) {"
    },
    {
        "line": 15,
        "fullcodeline": "ast_log(LOG_WARNING, \"Rejecting packet from '%s.%d' that is flagged as a meta frame but is too short\\n\","
    },
    {
        "line": 24,
        "fullcodeline": "ast_log(LOG_WARNING, \"midget meta trunk packet received (%d of %d min)\\n\", packet_len,"
    },
    {
        "line": 35,
        "fullcodeline": "ast_log(LOG_WARNING, \"Unable to accept trunked packet from '%s:%d': No matching peer\\n\","
    },
    {
        "line": 41,
        "fullcodeline": "tpeer->rxtrunktime = tpeer->trunkact;"
    },
    {
        "line": 69,
        "fullcodeline": "fr->callno = find_callno_locked(callno & ~IAX_FLAG_FULL, 0, sin, NEW_PREVENT, sockfd);"
    },
    {
        "line": 76,
        "fullcodeline": "memset(&f, 0, sizeof(f));"
    },
    {
        "line": 77,
        "fullcodeline": "f.frametype = AST_FRAME_VOICE;"
    },
    {
        "line": 120,
        "fullcodeline": "ptr += len;"
    },
    {
        "line": 121,
        "fullcodeline": "packet_len -= len;"
    },
    {
        "line": 16,
        "fullcodeline": "ast_inet_ntoa(sin->sin_addr), ntohs(sin->sin_port));"
    },
    {
        "line": 36,
        "fullcodeline": "ast_inet_ntoa(sin->sin_addr), ntohs(sin->sin_port));"
    },
    {
        "line": 48,
        "fullcodeline": "if (metatype == IAX_META_TRUNK_MINI) {"
    },
    {
        "line": 67,
        "fullcodeline": "if (len > packet_len)"
    },
    {
        "line": 70,
        "fullcodeline": "if (!fr->callno)"
    },
    {
        "line": 78,
        "fullcodeline": "if (!iaxs[fr->callno]) {"
    },
    {
        "line": 49,
        "fullcodeline": "mtm = (struct ast_iax2_meta_trunk_mini *) ptr;"
    },
    {
        "line": 50,
        "fullcodeline": "ptr += sizeof(*mtm);"
    },
    {
        "line": 51,
        "fullcodeline": "packet_len -= sizeof(*mtm);"
    },
    {
        "line": 52,
        "fullcodeline": "len = ntohs(mtm->len);"
    },
    {
        "line": 53,
        "fullcodeline": "callno = ntohs(mtm->mini.callno);"
    },
    {
        "line": 54,
        "fullcodeline": "trunked_ts = ntohs(mtm->mini.ts);"
    },
    {
        "line": 55,
        "fullcodeline": "} else if (metatype == IAX_META_TRUNK_SUPERMINI) {"
    },
    {
        "line": 80,
        "fullcodeline": "} else if (iaxs[fr->callno]->voiceformat == 0) {"
    },
    {
        "line": 56,
        "fullcodeline": "mte = (struct ast_iax2_meta_trunk_entry *)ptr;"
    },
    {
        "line": 57,
        "fullcodeline": "ptr += sizeof(*mte);"
    },
    {
        "line": 58,
        "fullcodeline": "packet_len -= sizeof(*mte);"
    },
    {
        "line": 59,
        "fullcodeline": "len = ntohs(mte->len);"
    },
    {
        "line": 60,
        "fullcodeline": "callno = ntohs(mte->callno);"
    },
    {
        "line": 61,
        "fullcodeline": "trunked_ts = 0;"
    },
    {
        "line": 81,
        "fullcodeline": "ast_log(LOG_WARNING, \"Received trunked frame before first full voice frame\\n \");"
    },
    {
        "line": 82,
        "fullcodeline": "iax2_vnak(fr->callno);"
    },
    {
        "line": 63,
        "fullcodeline": "ast_log(LOG_WARNING, \"Unknown meta trunk cmd from '%s:%d': dropping\\n\", ast_inet_ntoa(sin->sin_addr), ntohs(sin->sin_port));"
    },
    {
        "line": 84,
        "fullcodeline": "f.subclass = iaxs[fr->callno]->voiceformat;"
    },
    {
        "line": 85,
        "fullcodeline": "f.datalen = len;"
    },
    {
        "line": 86,
        "fullcodeline": "if (f.datalen >= 0) {"
    },
    {
        "line": 96,
        "fullcodeline": "if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {"
    },
    {
        "line": 116,
        "fullcodeline": "ast_log(LOG_WARNING, \"Datalen < 0?\\n\");"
    },
    {
        "line": 88,
        "fullcodeline": "f.data = ptr;"
    },
    {
        "line": 92,
        "fullcodeline": "fr->ts = (iaxs[fr->callno]->last & 0xFFFF0000L) | (trunked_ts & 0xffff);"
    },
    {
        "line": 100,
        "fullcodeline": "f.src = \"IAX2\";"
    },
    {
        "line": 101,
        "fullcodeline": "f.mallocd = 0;"
    },
    {
        "line": 102,
        "fullcodeline": "f.offset = 0;"
    },
    {
        "line": 107,
        "fullcodeline": "fr->outoforder = 0;"
    },
    {
        "line": 108,
        "fullcodeline": "iax_frame_wrap(fr, &f);"
    },
    {
        "line": 109,
        "fullcodeline": "duped_fr = iaxfrdup2(fr);"
    },
    {
        "line": 90,
        "fullcodeline": "f.data = NULL;"
    },
    {
        "line": 94,
        "fullcodeline": "fr->ts = fix_peerts(&rxtrunktime, fr->callno, ts);"
    },
    {
        "line": 103,
        "fullcodeline": "if (f.datalen && (f.frametype == AST_FRAME_VOICE))"
    },
    {
        "line": 112,
        "fullcodeline": "if (iaxs[fr->callno] && iaxs[fr->callno]->last < fr->ts)"
    },
    {
        "line": 104,
        "fullcodeline": "f.samples = ast_codec_get_samples(&f);"
    },
    {
        "line": 111,
        "fullcodeline": "schedule_delivery(duped_fr, 1, 1, &fr->ts);"
    },
    {
        "line": 113,
        "fullcodeline": "iaxs[fr->callno]->last = fr->ts;"
    },
    {
        "line": 106,
        "fullcodeline": "f.samples = 0;"
    }
]