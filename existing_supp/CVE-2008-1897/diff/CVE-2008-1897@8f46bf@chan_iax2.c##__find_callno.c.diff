--- before
+++ after
@@ -1,4 +1,4 @@
-static int __find_callno(unsigned short callno, unsigned short dcallno, struct sockaddr_in *sin, int new, int sockfd, int return_locked)

+static int __find_callno(unsigned short callno, unsigned short dcallno, struct sockaddr_in *sin, int new, int sockfd, int return_locked, int full_frame)

 {

 	int res = 0;

 	int x;

@@ -10,7 +10,7 @@
 			ast_mutex_lock(&iaxsl[x]);

 			if (iaxs[x]) {

 				/* Look for an exact match */

-				if (match(sin, callno, dcallno, iaxs[x])) {

+				if (match(sin, callno, dcallno, iaxs[x], full_frame)) {

 					res = x;

 				}

 			}

@@ -20,7 +20,7 @@
 			ast_mutex_lock(&iaxsl[x]);

 			if (iaxs[x]) {

 				/* Look for an exact match */

-				if (match(sin, callno, dcallno, iaxs[x])) {

+				if (match(sin, callno, dcallno, iaxs[x], full_frame)) {

 					res = x;

 				}

 			}

@@ -28,6 +28,8 @@
 		}

 	}

 	if ((res < 1) && (new >= NEW_ALLOW)) {

+		int start, found = 0;

+

 		/* It may seem odd that we look through the peer list for a name for

 		 * this *incoming* call.  Well, it is weird.  However, users don't

 		 * have an IP address/port number that we can match against.  So,

@@ -36,15 +38,29 @@
 		 * correct, but it will be changed if needed after authentication. */

 		if (!iax2_getpeername(*sin, host, sizeof(host)))

 			snprintf(host, sizeof(host), "%s:%d", ast_inet_ntoa(sin->sin_addr), ntohs(sin->sin_port));

+

 		now = ast_tvnow();

-		for (x=1;x<TRUNK_CALL_START;x++) {

+		start = 1 + (ast_random() % (TRUNK_CALL_START - 1));

+		for (x = start; 1; x++) {

+			if (x == TRUNK_CALL_START) {

+				x = 0;

+				continue;

+			}

+

 			/* Find first unused call number that hasn't been used in a while */

 			ast_mutex_lock(&iaxsl[x]);

-			if (!iaxs[x] && ((now.tv_sec - lastused[x].tv_sec) > MIN_REUSE_TIME)) break;

+			if (!iaxs[x] && ((now.tv_sec - lastused[x].tv_sec) > MIN_REUSE_TIME)) {

+				found = 1;

+				break;

+			}

 			ast_mutex_unlock(&iaxsl[x]);

+			

+			if (x == start - 1) {

+				break;

+			}

 		}

 		/* We've still got lock held if we found a spot */

-		if (x >= TRUNK_CALL_START) {

+		if (x == start - 1 && !found) {

 			ast_log(LOG_WARNING, "No more space\n");

 			return 0;

 		}

