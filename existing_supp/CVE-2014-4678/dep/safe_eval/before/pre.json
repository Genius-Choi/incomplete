[
    {
        "line": 17,
        "fullcodeline": "SAFE_NODES = set("
    },
    {
        "line": 47,
        "fullcodeline": "INVALID_CALLS = ("
    },
    {
        "line": 39,
        "fullcodeline": "if not sys.version.startswith('2.6'):"
    },
    {
        "line": 53,
        "fullcodeline": "class CleansingNodeVisitor(ast.NodeVisitor):"
    },
    {
        "line": 63,
        "fullcodeline": "if not isinstance(expr, basestring):"
    },
    {
        "line": 18,
        "fullcodeline": "("
    },
    {
        "line": 40,
        "fullcodeline": "SAFE_NODES.union("
    },
    {
        "line": 70,
        "fullcodeline": "parsed_tree = ast.parse(expr, mode='eval')"
    },
    {
        "line": 71,
        "fullcodeline": "cnv = CleansingNodeVisitor()"
    },
    {
        "line": 72,
        "fullcodeline": "cnv.visit(parsed_tree)"
    },
    {
        "line": 73,
        "fullcodeline": "compiled = compile(parsed_tree, expr, 'eval')"
    },
    {
        "line": 74,
        "fullcodeline": "result = eval(compiled, {}, locals)"
    },
    {
        "line": 41,
        "fullcodeline": "set("
    },
    {
        "line": 42,
        "fullcodeline": "(ast.Set,)"
    },
    {
        "line": 66,
        "fullcodeline": "return (expr, None)"
    },
    {
        "line": 77,
        "fullcodeline": "return (result, None)"
    },
    {
        "line": 84,
        "fullcodeline": "return (expr, None)"
    },
    {
        "line": 88,
        "fullcodeline": "return (expr, e)"
    }
]