[
    {
        "line": 4,
        "fullcodeline": "gboolean go_on=TRUE;"
    },
    {
        "line": 8,
        "fullcodeline": "negotiate(client->net, client, NULL);"
    },
    {
        "line": 9,
        "fullcodeline": "DEBUG(\"Entering request loop!\\n\");"
    },
    {
        "line": 10,
        "fullcodeline": "reply.magic = htonl(NBD_REPLY_MAGIC);"
    },
    {
        "line": 11,
        "fullcodeline": "reply.error = 0;"
    },
    {
        "line": 13,
        "fullcodeline": "char buf[BUFSIZE];"
    },
    {
        "line": 19,
        "fullcodeline": "readit(client->net, &request, sizeof(request));"
    },
    {
        "line": 20,
        "fullcodeline": "request.from = ntohll(request.from);"
    },
    {
        "line": 21,
        "fullcodeline": "request.type = ntohl(request.type);"
    },
    {
        "line": 35,
        "fullcodeline": "len = ntohl(request.len);"
    },
    {
        "line": 46,
        "fullcodeline": "memcpy(reply.handle, request.handle, sizeof(reply.handle));"
    },
    {
        "line": 80,
        "fullcodeline": "DEBUG(\"exp->buf, \");"
    },
    {
        "line": 87,
        "fullcodeline": "DEBUG(\"buf->net, \");"
    },
    {
        "line": 88,
        "fullcodeline": "memcpy(buf, &reply, sizeof(struct nbd_reply));"
    },
    {
        "line": 89,
        "fullcodeline": "writeit(client->net, buf, len + sizeof(struct nbd_reply));"
    },
    {
        "line": 90,
        "fullcodeline": "DEBUG(\"OK!\\n\");"
    },
    {
        "line": 23,
        "fullcodeline": "if (request.type==NBD_CMD_DISC) {"
    },
    {
        "line": 37,
        "fullcodeline": "if (request.magic != htonl(NBD_REQUEST_MAGIC))"
    },
    {
        "line": 39,
        "fullcodeline": "if (len > BUFSIZE - sizeof(struct nbd_reply))"
    },
    {
        "line": 47,
        "fullcodeline": "if ((request.from + len) > (OFFT_MAX)) {"
    },
    {
        "line": 53,
        "fullcodeline": "if (((ssize_t)((off_t)request.from + len) > client->exportsize)) {"
    },
    {
        "line": 59,
        "fullcodeline": "if (request.type==NBD_CMD_WRITE) {"
    },
    {
        "line": 81,
        "fullcodeline": "if (expread(request.from, buf + sizeof(struct nbd_reply), len, client)) {"
    },
    {
        "line": 24,
        "fullcodeline": "msg2(LOG_INFO, \"Disconnect request received.\");"
    },
    {
        "line": 31,
        "fullcodeline": "go_on=FALSE;"
    },
    {
        "line": 38,
        "fullcodeline": "err(\"Not enough magic.\");"
    },
    {
        "line": 40,
        "fullcodeline": "err(\"Request too big!\");"
    },
    {
        "line": 48,
        "fullcodeline": "DEBUG(\"[Number too large!]\");"
    },
    {
        "line": 49,
        "fullcodeline": "ERROR(client, reply, EINVAL);"
    },
    {
        "line": 54,
        "fullcodeline": "DEBUG(\"[RANGE!]\");"
    },
    {
        "line": 55,
        "fullcodeline": "ERROR(client, reply, EINVAL);"
    },
    {
        "line": 60,
        "fullcodeline": "DEBUG(\"wr: net->buf, \");"
    },
    {
        "line": 61,
        "fullcodeline": "readit(client->net, buf, len);"
    },
    {
        "line": 62,
        "fullcodeline": "DEBUG(\"buf->exp, \");"
    },
    {
        "line": 74,
        "fullcodeline": "SEND(client->net, reply);"
    },
    {
        "line": 75,
        "fullcodeline": "DEBUG(\"OK!\\n\");"
    },
    {
        "line": 82,
        "fullcodeline": "DEBUG(\"Read failed: %m\");"
    },
    {
        "line": 83,
        "fullcodeline": "ERROR(client, reply, errno);"
    },
    {
        "line": 25,
        "fullcodeline": "if (client->server->flags & F_COPYONWRITE) {"
    },
    {
        "line": 63,
        "fullcodeline": "if ((client->server->flags & F_READONLY) ||"
    },
    {
        "line": 69,
        "fullcodeline": "if (expwrite(request.from, buf, len, client)) {"
    },
    {
        "line": 27,
        "fullcodeline": "close(client->difffile);"
    },
    {
        "line": 28,
        "fullcodeline": "unlink(client->difffilename);"
    },
    {
        "line": 29,
        "fullcodeline": "free(client->difffilename);"
    },
    {
        "line": 64,
        "fullcodeline": "(client->server->flags & F_AUTOREADONLY)) {"
    },
    {
        "line": 65,
        "fullcodeline": "DEBUG(\"[WRITE to READONLY!]\");"
    },
    {
        "line": 66,
        "fullcodeline": "ERROR(client, reply, EPERM);"
    },
    {
        "line": 70,
        "fullcodeline": "DEBUG(\"Write failed: %m\" );"
    },
    {
        "line": 71,
        "fullcodeline": "ERROR(client, reply, errno);"
    },
    {
        "line": 26,
        "fullcodeline": "if (client->difmap) g_free(client->difmap) ;"
    }
]