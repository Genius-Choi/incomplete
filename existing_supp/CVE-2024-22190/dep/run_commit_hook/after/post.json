[
    {
        "line": 9,
        "fullcodeline": "hp = hook_path(name, index.repo.git_dir)"
    },
    {
        "line": 13,
        "fullcodeline": "env = os.environ.copy()"
    },
    {
        "line": 14,
        "fullcodeline": "env[\"GIT_INDEX_FILE\"] = safe_decode(str(index.path))"
    },
    {
        "line": 15,
        "fullcodeline": "env[\"GIT_EDITOR\"] = \":\""
    },
    {
        "line": 16,
        "fullcodeline": "cmd = [hp]"
    },
    {
        "line": 10,
        "fullcodeline": "if not os.access(hp, os.X_OK):"
    },
    {
        "line": 24,
        "fullcodeline": "process = safer_popen("
    },
    {
        "line": 18,
        "fullcodeline": "if os.name == \"nt\" and not _has_file_extension(hp):"
    },
    {
        "line": 34,
        "fullcodeline": "stdout_list: List[str] = []"
    },
    {
        "line": 35,
        "fullcodeline": "stderr_list: List[str] = []"
    },
    {
        "line": 36,
        "fullcodeline": "handle_process_output(process, stdout_list.append, stderr_list.append, finalize_process)"
    },
    {
        "line": 37,
        "fullcodeline": "stdout = \"\".join(stdout_list)"
    },
    {
        "line": 38,
        "fullcodeline": "stderr = \"\".join(stderr_list)"
    },
    {
        "line": 21,
        "fullcodeline": "relative_hp = Path(hp).relative_to(index.repo.working_dir).as_posix()"
    },
    {
        "line": 22,
        "fullcodeline": "cmd = [\"bash.exe\", relative_hp]"
    },
    {
        "line": 25,
        "fullcodeline": "cmd + list(args),"
    },
    {
        "line": 32,
        "fullcodeline": "raise HookExecutionError(hp, ex) from ex"
    },
    {
        "line": 39,
        "fullcodeline": "if process.returncode != 0:"
    },
    {
        "line": 40,
        "fullcodeline": "stdout = force_text(stdout, defenc)"
    },
    {
        "line": 41,
        "fullcodeline": "stderr = force_text(stderr, defenc)"
    },
    {
        "line": 42,
        "fullcodeline": "raise HookExecutionError(hp, process.returncode, stderr, stdout)"
    }
]