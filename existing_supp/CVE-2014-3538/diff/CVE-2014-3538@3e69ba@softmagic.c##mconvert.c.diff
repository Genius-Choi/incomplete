--- before
+++ after
@@ -1,8 +1,9 @@
 mconvert(struct magic_set *ms, struct magic *m, int flip)

 {

 	union VALUETYPE *p = &ms->ms_value;

+	uint8_t type;

 

-	switch (cvt_flip(m->type, flip)) {

+	switch (type = cvt_flip(m->type, flip)) {

 	case FILE_BYTE:

 		cvt_8(p, m);

 		return 1;

@@ -46,7 +47,8 @@
 	case FILE_BELDATE:

 		p->l = (int32_t)

 		    ((p->hl[0]<<24)|(p->hl[1]<<16)|(p->hl[2]<<8)|(p->hl[3]));

-		cvt_32(p, m);

+		if (type == FILE_BELONG)

+			cvt_32(p, m);

 		return 1;

 	case FILE_BEQUAD:

 	case FILE_BEQDATE:

@@ -57,7 +59,8 @@
 		     ((uint64_t)p->hq[2]<<40)|((uint64_t)p->hq[3]<<32)|

 		     ((uint64_t)p->hq[4]<<24)|((uint64_t)p->hq[5]<<16)|

 		     ((uint64_t)p->hq[6]<<8)|((uint64_t)p->hq[7]));

-		cvt_64(p, m);

+		if (type == FILE_BEQUAD)

+			cvt_64(p, m);

 		return 1;

 	case FILE_LESHORT:

 		p->h = (short)((p->hs[1]<<8)|(p->hs[0]));

@@ -68,7 +71,8 @@
 	case FILE_LELDATE:

 		p->l = (int32_t)

 		    ((p->hl[3]<<24)|(p->hl[2]<<16)|(p->hl[1]<<8)|(p->hl[0]));

-		cvt_32(p, m);

+		if (type == FILE_LELONG)

+			cvt_32(p, m);

 		return 1;

 	case FILE_LEQUAD:

 	case FILE_LEQDATE:

@@ -79,14 +83,16 @@
 		     ((uint64_t)p->hq[5]<<40)|((uint64_t)p->hq[4]<<32)|

 		     ((uint64_t)p->hq[3]<<24)|((uint64_t)p->hq[2]<<16)|

 		     ((uint64_t)p->hq[1]<<8)|((uint64_t)p->hq[0]));

-		cvt_64(p, m);

+		if (type == FILE_LEQUAD)

+			cvt_64(p, m);

 		return 1;

 	case FILE_MELONG:

 	case FILE_MEDATE:

 	case FILE_MELDATE:

 		p->l = (int32_t)

 		    ((p->hl[1]<<24)|(p->hl[0]<<16)|(p->hl[3]<<8)|(p->hl[2]));

-		cvt_32(p, m);

+		if (type == FILE_MELONG)

+			cvt_32(p, m);

 		return 1;

 	case FILE_FLOAT:

 		cvt_float(p, m);

