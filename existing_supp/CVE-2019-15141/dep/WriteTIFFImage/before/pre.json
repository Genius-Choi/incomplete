[
    {
        "line": 55,
        "fullcodeline": "assert(image_info != (const ImageInfo *) NULL);"
    },
    {
        "line": 56,
        "fullcodeline": "assert(image_info->signature == MagickCoreSignature);"
    },
    {
        "line": 57,
        "fullcodeline": "assert(image != (Image *) NULL);"
    },
    {
        "line": 58,
        "fullcodeline": "assert(image->signature == MagickCoreSignature);"
    },
    {
        "line": 61,
        "fullcodeline": "status=OpenBlob(image_info,image,WriteBinaryBlobMode,&image->exception);"
    },
    {
        "line": 65,
        "fullcodeline": "endian_type=UndefinedEndian;"
    },
    {
        "line": 66,
        "fullcodeline": "option=GetImageOption(image_info,\"tiff:endian\");"
    },
    {
        "line": 89,
        "fullcodeline": "tiff=TIFFClientOpen(image->filename,mode,(thandle_t) image,TIFFReadBlob,"
    },
    {
        "line": 100,
        "fullcodeline": "scene=0;"
    },
    {
        "line": 101,
        "fullcodeline": "debug=IsEventLogging();"
    },
    {
        "line": 103,
        "fullcodeline": "imageListLength=GetImageListLength(image);"
    },
    {
        "line": 59,
        "fullcodeline": "if (image->debug != MagickFalse)"
    },
    {
        "line": 62,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 64,
        "fullcodeline": "(void) SetMagickThreadValue(tiff_exception,&image->exception);"
    },
    {
        "line": 67,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 92,
        "fullcodeline": "if (tiff == (TIFF *) NULL)"
    },
    {
        "line": 94,
        "fullcodeline": "if (image->exception.severity > ErrorException)"
    },
    {
        "line": 99,
        "fullcodeline": "(void) DeleteImageProfile(image,\"tiff:37724\");"
    },
    {
        "line": 906,
        "fullcodeline": "} while (image_info->adjoin != MagickFalse);"
    },
    {
        "line": 908,
        "fullcodeline": "return(image->exception.severity > ErrorException ? MagickFalse : MagickTrue);"
    },
    {
        "line": 60,
        "fullcodeline": "(void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);"
    },
    {
        "line": 76,
        "fullcodeline": "case LSBEndian: mode=\"wl\"; break;"
    },
    {
        "line": 77,
        "fullcodeline": "case MSBEndian: mode=\"wb\"; break;"
    },
    {
        "line": 78,
        "fullcodeline": "default: mode=\"w\"; break;"
    },
    {
        "line": 112,
        "fullcodeline": "compression=UndefinedCompression;"
    },
    {
        "line": 135,
        "fullcodeline": "quantum_info=AcquireQuantumInfo(image_info,image);"
    },
    {
        "line": 345,
        "fullcodeline": "option=GetImageOption(image_info,\"tiff:fill-order\");"
    },
    {
        "line": 413,
        "fullcodeline": "predictor=0;"
    },
    {
        "line": 550,
        "fullcodeline": "option=GetImageOption(image_info,\"tiff:predictor\");"
    },
    {
        "line": 646,
        "fullcodeline": "quantum_info->endian=LSBEndian;"
    },
    {
        "line": 647,
        "fullcodeline": "pixels=GetQuantumPixels(quantum_info);"
    },
    {
        "line": 648,
        "fullcodeline": "tiff_info.scanline=GetQuantumPixels(quantum_info);"
    },
    {
        "line": 892,
        "fullcodeline": "DestroyTIFFInfo(&tiff_info);"
    },
    {
        "line": 900,
        "fullcodeline": "image=SyncNextImageInList(image);"
    },
    {
        "line": 903,
        "fullcodeline": "status=SetImageProgress(image,SaveImagesTag,scene++,imageListLength);"
    },
    {
        "line": 113,
        "fullcodeline": "if (image->compression != JPEGCompression)"
    },
    {
        "line": 115,
        "fullcodeline": "if (image_info->compression != UndefinedCompression)"
    },
    {
        "line": 136,
        "fullcodeline": "if (quantum_info == (QuantumInfo *) NULL)"
    },
    {
        "line": 155,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_IMAGELENGTH,(uint32) image->rows);"
    },
    {
        "line": 156,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_IMAGEWIDTH,(uint32) image->columns);"
    },
    {
        "line": 273,
        "fullcodeline": "if (image->colorspace == CMYKColorspace)"
    },
    {
        "line": 334,
        "fullcodeline": "(void) TIFFGetFieldDefaulted(tiff,TIFFTAG_FILLORDER,&endian);"
    },
    {
        "line": 346,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 353,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_COMPRESSION,compress_tag);"
    },
    {
        "line": 354,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_FILLORDER,endian);"
    },
    {
        "line": 355,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_BITSPERSAMPLE,quantum_info->depth);"
    },
    {
        "line": 356,
        "fullcodeline": "if (image->matte != MagickFalse)"
    },
    {
        "line": 385,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_PHOTOMETRIC,photometric);"
    },
    {
        "line": 408,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_PLANARCONFIG,PLANARCONFIG_CONTIG);"
    },
    {
        "line": 409,
        "fullcodeline": "if (photometric == PHOTOMETRIC_RGB)"
    },
    {
        "line": 551,
        "fullcodeline": "if (option != (const char * ) NULL)"
    },
    {
        "line": 553,
        "fullcodeline": "if (predictor != 0)"
    },
    {
        "line": 592,
        "fullcodeline": "if (image->chromaticity.white_point.x != 0.0)"
    },
    {
        "line": 619,
        "fullcodeline": "if (image->orientation != UndefinedOrientation)"
    },
    {
        "line": 623,
        "fullcodeline": "(void) TIFFSetProfiles(tiff,image);"
    },
    {
        "line": 629,
        "fullcodeline": "page=(uint16) scene;"
    },
    {
        "line": 630,
        "fullcodeline": "pages=(uint16) imageListLength;"
    },
    {
        "line": 636,
        "fullcodeline": "(void) TIFFSetProperties(tiff,image_info,image);"
    },
    {
        "line": 644,
        "fullcodeline": "if (GetTIFFInfo(image_info,tiff,&tiff_info) == MagickFalse)"
    },
    {
        "line": 889,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 890,
        "fullcodeline": "if (image->colorspace == LabColorspace)"
    },
    {
        "line": 893,
        "fullcodeline": "if (image->exception.severity > ErrorException)"
    },
    {
        "line": 899,
        "fullcodeline": "(void) TIFFWriteDirectory(tiff);"
    },
    {
        "line": 901,
        "fullcodeline": "if (image == (Image *) NULL)"
    },
    {
        "line": 904,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 69,
        "fullcodeline": "if (LocaleNCompare(option,\"msb\",3) == 0)"
    },
    {
        "line": 70,
        "fullcodeline": "endian_type=MSBEndian;"
    },
    {
        "line": 71,
        "fullcodeline": "if (LocaleNCompare(option,\"lsb\",3) == 0)"
    },
    {
        "line": 109,
        "fullcodeline": "if ((image_info->type != UndefinedType) &&"
    },
    {
        "line": 110,
        "fullcodeline": "(image_info->type != OptimizeType))"
    },
    {
        "line": 114,
        "fullcodeline": "compression=image->compression;"
    },
    {
        "line": 116,
        "fullcodeline": "compression=image_info->compression;"
    },
    {
        "line": 137,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 138,
        "fullcodeline": "if ((image->storage_class != PseudoClass) && (image->depth >= 32) &&"
    },
    {
        "line": 140,
        "fullcodeline": "(IsHighDynamicRangeImage(image,&image->exception) != MagickFalse))"
    },
    {
        "line": 142,
        "fullcodeline": "status=SetQuantumFormat(image,quantum_info,FloatingPointQuantumFormat);"
    },
    {
        "line": 149,
        "fullcodeline": "if ((LocaleCompare(image_info->magick,\"PTIF\") == 0) &&"
    },
    {
        "line": 150,
        "fullcodeline": "(GetPreviousImageInList(image) != (Image *) NULL))"
    },
    {
        "line": 152,
        "fullcodeline": "if ((image->columns != (uint32) image->columns) ||"
    },
    {
        "line": 153,
        "fullcodeline": "(image->rows != (uint32) image->rows))"
    },
    {
        "line": 154,
        "fullcodeline": "ThrowWriterException(ImageError,\"WidthOrHeightExceedsLimit\");"
    },
    {
        "line": 275,
        "fullcodeline": "photometric=PHOTOMETRIC_SEPARATED;"
    },
    {
        "line": 335,
        "fullcodeline": "if ((compress_tag == COMPRESSION_CCITTFAX3) ||"
    },
    {
        "line": 336,
        "fullcodeline": "(compress_tag == COMPRESSION_CCITTFAX4))"
    },
    {
        "line": 360,
        "fullcodeline": "sample_info[1],"
    },
    {
        "line": 366,
        "fullcodeline": "extra_samples=1;"
    },
    {
        "line": 367,
        "fullcodeline": "sample_info[0]=EXTRASAMPLE_UNASSALPHA;"
    },
    {
        "line": 368,
        "fullcodeline": "option=GetImageOption(image_info,\"tiff:alpha\");"
    },
    {
        "line": 552,
        "fullcodeline": "predictor=(size_t) strtol(option,(char **) NULL,10);"
    },
    {
        "line": 555,
        "fullcodeline": "if ((image->x_resolution != 0.0) && (image->y_resolution != 0.0))"
    },
    {
        "line": 563,
        "fullcodeline": "units=RESUNIT_NONE;"
    },
    {
        "line": 595,
        "fullcodeline": "chromaticity[6];"
    },
    {
        "line": 600,
        "fullcodeline": "chromaticity[0]=(float) image->chromaticity.red_primary.x;"
    },
    {
        "line": 601,
        "fullcodeline": "chromaticity[1]=(float) image->chromaticity.red_primary.y;"
    },
    {
        "line": 602,
        "fullcodeline": "chromaticity[2]=(float) image->chromaticity.green_primary.x;"
    },
    {
        "line": 603,
        "fullcodeline": "chromaticity[3]=(float) image->chromaticity.green_primary.y;"
    },
    {
        "line": 604,
        "fullcodeline": "chromaticity[4]=(float) image->chromaticity.blue_primary.x;"
    },
    {
        "line": 605,
        "fullcodeline": "chromaticity[5]=(float) image->chromaticity.blue_primary.y;"
    },
    {
        "line": 607,
        "fullcodeline": "chromaticity[0]=(float) image->chromaticity.white_point.x;"
    },
    {
        "line": 608,
        "fullcodeline": "chromaticity[1]=(float) image->chromaticity.white_point.y;"
    },
    {
        "line": 611,
        "fullcodeline": "if ((LocaleCompare(image_info->magick,\"PTIF\") != 0) &&"
    },
    {
        "line": 612,
        "fullcodeline": "(image_info->adjoin != MagickFalse) && (imageListLength > 1))"
    },
    {
        "line": 634,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_PAGENUMBER,page,pages);"
    },
    {
        "line": 645,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 891,
        "fullcodeline": "DecodeLabImage(image,&image->exception);"
    },
    {
        "line": 896,
        "fullcodeline": "if (0 && (image_info->verbose != MagickFalse))"
    },
    {
        "line": 111,
        "fullcodeline": "(void) SetImageType(image,image_info->type);"
    },
    {
        "line": 139,
        "fullcodeline": "(quantum_info->format == UndefinedQuantumFormat) &&"
    },
    {
        "line": 143,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 151,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SUBFILETYPE,FILETYPE_REDUCEDIMAGE);"
    },
    {
        "line": 161,
        "fullcodeline": "compress_tag=COMPRESSION_CCITTFAX3;"
    },
    {
        "line": 162,
        "fullcodeline": "option=GetImageOption(image_info,\"quantum:polarity\");"
    },
    {
        "line": 169,
        "fullcodeline": "compress_tag=COMPRESSION_CCITTFAX4;"
    },
    {
        "line": 170,
        "fullcodeline": "option=GetImageOption(image_info,\"quantum:polarity\");"
    },
    {
        "line": 184,
        "fullcodeline": "compress_tag=COMPRESSION_JPEG;"
    },
    {
        "line": 196,
        "fullcodeline": "compress_tag=COMPRESSION_LZW;"
    },
    {
        "line": 201,
        "fullcodeline": "compress_tag=COMPRESSION_PACKBITS;"
    },
    {
        "line": 213,
        "fullcodeline": "compress_tag=COMPRESSION_ADOBE_DEFLATE;"
    },
    {
        "line": 226,
        "fullcodeline": "compress_tag=COMPRESSION_NONE;"
    },
    {
        "line": 268,
        "fullcodeline": "compress_tag=COMPRESSION_NONE;"
    },
    {
        "line": 276,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SAMPLESPERPIXEL,4);"
    },
    {
        "line": 277,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_INKSET,INKSET_CMYK);"
    },
    {
        "line": 369,
        "fullcodeline": "if (option != (const char *) NULL)"
    },
    {
        "line": 377,
        "fullcodeline": "(void) TIFFGetFieldDefaulted(tiff,TIFFTAG_SAMPLESPERPIXEL,"
    },
    {
        "line": 379,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SAMPLESPERPIXEL,samples_per_pixel+1);"
    },
    {
        "line": 380,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_EXTRASAMPLES,extra_samples,"
    },
    {
        "line": 382,
        "fullcodeline": "if (sample_info[0] == EXTRASAMPLE_ASSOCALPHA)"
    },
    {
        "line": 554,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_PREDICTOR,predictor);"
    },
    {
        "line": 564,
        "fullcodeline": "if (image->units == PixelsPerInchResolution)"
    },
    {
        "line": 566,
        "fullcodeline": "if (image->units == PixelsPerCentimeterResolution)"
    },
    {
        "line": 568,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_RESOLUTIONUNIT,(uint16) units);"
    },
    {
        "line": 569,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_XRESOLUTION,image->x_resolution);"
    },
    {
        "line": 570,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_YRESOLUTION,image->y_resolution);"
    },
    {
        "line": 606,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_PRIMARYCHROMATICITIES,chromaticity);"
    },
    {
        "line": 609,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_WHITEPOINT,chromaticity);"
    },
    {
        "line": 614,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SUBFILETYPE,FILETYPE_PAGE);"
    },
    {
        "line": 615,
        "fullcodeline": "if (image->scene != 0)"
    },
    {
        "line": 620,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_ORIENTATION,(uint16) image->orientation);"
    },
    {
        "line": 631,
        "fullcodeline": "if ((LocaleCompare(image_info->magick,\"PTIF\") != 0) &&"
    },
    {
        "line": 632,
        "fullcodeline": "(image_info->adjoin != MagickFalse) && (pages > 1))"
    },
    {
        "line": 782,
        "fullcodeline": "quantum_type=CMYKQuantum;"
    },
    {
        "line": 819,
        "fullcodeline": "red=(uint16 *) AcquireQuantumMemory(65536,sizeof(*red));"
    },
    {
        "line": 820,
        "fullcodeline": "green=(uint16 *) AcquireQuantumMemory(65536,sizeof(*green));"
    },
    {
        "line": 821,
        "fullcodeline": "blue=(uint16 *) AcquireQuantumMemory(65536,sizeof(*blue));"
    },
    {
        "line": 855,
        "fullcodeline": "quantum_type=IndexQuantum;"
    },
    {
        "line": 122,
        "fullcodeline": "(void) SetImageType(image,BilevelType);"
    },
    {
        "line": 123,
        "fullcodeline": "(void) SetImageDepth(image,1);"
    },
    {
        "line": 128,
        "fullcodeline": "(void) SetImageStorageClass(image,DirectClass);"
    },
    {
        "line": 129,
        "fullcodeline": "(void) SetImageDepth(image,8);"
    },
    {
        "line": 145,
        "fullcodeline": "quantum_info=DestroyQuantumInfo(quantum_info);"
    },
    {
        "line": 146,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 265,
        "fullcodeline": "(void) ThrowMagickException(&image->exception,GetMagickModule(),"
    },
    {
        "line": 284,
        "fullcodeline": "if (image->colorspace == LabColorspace)"
    },
    {
        "line": 299,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SAMPLESPERPIXEL,3);"
    },
    {
        "line": 338,
        "fullcodeline": "if ((photometric != PHOTOMETRIC_MINISWHITE) &&"
    },
    {
        "line": 339,
        "fullcodeline": "(photometric != PHOTOMETRIC_MINISBLACK))"
    },
    {
        "line": 341,
        "fullcodeline": "compress_tag=COMPRESSION_NONE;"
    },
    {
        "line": 342,
        "fullcodeline": "endian=FILLORDER_MSB2LSB;"
    },
    {
        "line": 348,
        "fullcodeline": "if (LocaleNCompare(option,\"msb\",3) == 0)"
    },
    {
        "line": 349,
        "fullcodeline": "endian=FILLORDER_MSB2LSB;"
    },
    {
        "line": 350,
        "fullcodeline": "if (LocaleNCompare(option,\"lsb\",3) == 0)"
    },
    {
        "line": 351,
        "fullcodeline": "endian=FILLORDER_LSB2MSB;"
    },
    {
        "line": 383,
        "fullcodeline": "SetQuantumAlphaType(quantum_info,AssociatedQuantumAlpha);"
    },
    {
        "line": 390,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SAMPLEFORMAT,SAMPLEFORMAT_IEEEFP);"
    },
    {
        "line": 391,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SMINSAMPLEVALUE,quantum_info->minimum);"
    },
    {
        "line": 392,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SMAXSAMPLEVALUE,quantum_info->maximum);"
    },
    {
        "line": 397,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SAMPLEFORMAT,SAMPLEFORMAT_INT);"
    },
    {
        "line": 402,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SAMPLEFORMAT,SAMPLEFORMAT_UINT);"
    },
    {
        "line": 410,
        "fullcodeline": "if ((image_info->interlace == PlaneInterlace) ||"
    },
    {
        "line": 411,
        "fullcodeline": "(image_info->interlace == PartitionInterlace))"
    },
    {
        "line": 469,
        "fullcodeline": "(void) TIFFGetFieldDefaulted(tiff,TIFFTAG_BITSPERSAMPLE,"
    },
    {
        "line": 471,
        "fullcodeline": "if (((photometric == PHOTOMETRIC_RGB) ||"
    },
    {
        "line": 476,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_ZIPQUALITY,(long) ("
    },
    {
        "line": 486,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_GROUP3OPTIONS,4);"
    },
    {
        "line": 507,
        "fullcodeline": "(void) TIFFGetFieldDefaulted(tiff,TIFFTAG_BITSPERSAMPLE,"
    },
    {
        "line": 509,
        "fullcodeline": "if (((photometric == PHOTOMETRIC_RGB) ||"
    },
    {
        "line": 565,
        "fullcodeline": "units=RESUNIT_INCH;"
    },
    {
        "line": 567,
        "fullcodeline": "units=RESUNIT_CENTIMETER;"
    },
    {
        "line": 571,
        "fullcodeline": "if ((image->page.x < 0) || (image->page.y < 0))"
    },
    {
        "line": 575,
        "fullcodeline": "if ((image->page.x > 0) && (image->x_resolution > 0.0))"
    },
    {
        "line": 583,
        "fullcodeline": "if ((image->page.y > 0) && (image->y_resolution > 0.0))"
    },
    {
        "line": 622,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_ORIENTATION,ORIENTATION_TOPLEFT);"
    },
    {
        "line": 633,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SUBFILETYPE,FILETYPE_PAGE);"
    },
    {
        "line": 783,
        "fullcodeline": "if (image->matte != MagickFalse)"
    },
    {
        "line": 785,
        "fullcodeline": "if (image->colorspace != CMYKColorspace)"
    },
    {
        "line": 787,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 836,
        "fullcodeline": "(void) memset(red,0,65536*sizeof(*red));"
    },
    {
        "line": 837,
        "fullcodeline": "(void) memset(green,0,65536*sizeof(*green));"
    },
    {
        "line": 838,
        "fullcodeline": "(void) memset(blue,0,65536*sizeof(*blue));"
    },
    {
        "line": 839,
        "fullcodeline": "for (i=0; i < (ssize_t) image->colors; i++)"
    },
    {
        "line": 845,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_COLORMAP,red,green,blue);"
    },
    {
        "line": 856,
        "fullcodeline": "if (image->matte != MagickFalse)"
    },
    {
        "line": 866,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 164,
        "fullcodeline": "SetQuantumMinIsWhite(quantum_info,MagickTrue);"
    },
    {
        "line": 172,
        "fullcodeline": "SetQuantumMinIsWhite(quantum_info,MagickTrue);"
    },
    {
        "line": 266,
        "fullcodeline": "CoderError,\"CompressionNotSupported\",\"`%s'\",CommandOptionToMnemonic("
    },
    {
        "line": 286,
        "fullcodeline": "photometric=PHOTOMETRIC_CIELAB;"
    },
    {
        "line": 287,
        "fullcodeline": "EncodeLabImage(image,&image->exception);"
    },
    {
        "line": 300,
        "fullcodeline": "if ((image_info->type != TrueColorType) &&"
    },
    {
        "line": 301,
        "fullcodeline": "(image_info->type != TrueColorMatteType))"
    },
    {
        "line": 412,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_PLANARCONFIG,PLANARCONFIG_SEPARATE);"
    },
    {
        "line": 474,
        "fullcodeline": "((bits_per_sample == 8) || (bits_per_sample == 16)))"
    },
    {
        "line": 475,
        "fullcodeline": "predictor=PREDICTOR_HORIZONTAL;"
    },
    {
        "line": 512,
        "fullcodeline": "((bits_per_sample == 8) || (bits_per_sample == 16)))"
    },
    {
        "line": 513,
        "fullcodeline": "predictor=PREDICTOR_HORIZONTAL;"
    },
    {
        "line": 572,
        "fullcodeline": "(void) ThrowMagickException(&image->exception,GetMagickModule(),"
    },
    {
        "line": 580,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_XPOSITION,(float) image->page.x/"
    },
    {
        "line": 588,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_YPOSITION,(float) image->page.y/"
    },
    {
        "line": 616,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_PAGENUMBER,(uint16) image->scene,"
    },
    {
        "line": 784,
        "fullcodeline": "quantum_type=CMYKAQuantum;"
    },
    {
        "line": 792,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,&image->exception);"
    },
    {
        "line": 822,
        "fullcodeline": "if ((red == (uint16 *) NULL) || (green == (uint16 *) NULL) ||"
    },
    {
        "line": 823,
        "fullcodeline": "(blue == (uint16 *) NULL))"
    },
    {
        "line": 831,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");"
    },
    {
        "line": 841,
        "fullcodeline": "red[i]=ScaleQuantumToShort(image->colormap[i].red);"
    },
    {
        "line": 842,
        "fullcodeline": "green[i]=ScaleQuantumToShort(image->colormap[i].green);"
    },
    {
        "line": 843,
        "fullcodeline": "blue[i]=ScaleQuantumToShort(image->colormap[i].blue);"
    },
    {
        "line": 846,
        "fullcodeline": "red=(uint16 *) RelinquishMagickMemory(red);"
    },
    {
        "line": 847,
        "fullcodeline": "green=(uint16 *) RelinquishMagickMemory(green);"
    },
    {
        "line": 848,
        "fullcodeline": "blue=(uint16 *) RelinquishMagickMemory(blue);"
    },
    {
        "line": 871,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,&image->exception);"
    },
    {
        "line": 371,
        "fullcodeline": "if (LocaleCompare(option,\"associated\") == 0)"
    },
    {
        "line": 372,
        "fullcodeline": "sample_info[0]=EXTRASAMPLE_ASSOCALPHA;"
    },
    {
        "line": 473,
        "fullcodeline": "(photometric == PHOTOMETRIC_MINISBLACK)) &&"
    },
    {
        "line": 511,
        "fullcodeline": "(photometric == PHOTOMETRIC_MINISBLACK)) &&"
    },
    {
        "line": 663,
        "fullcodeline": "quantum_type=RGBQuantum;"
    },
    {
        "line": 786,
        "fullcodeline": "(void) TransformImageColorspace(image,CMYKColorspace);"
    },
    {
        "line": 795,
        "fullcodeline": "(void) ExportQuantumPixels(image,(const CacheView *) NULL,"
    },
    {
        "line": 799,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 825,
        "fullcodeline": "if (red != (uint16 *) NULL)"
    },
    {
        "line": 827,
        "fullcodeline": "if (green != (uint16 *) NULL)"
    },
    {
        "line": 829,
        "fullcodeline": "if (blue != (uint16 *) NULL)"
    },
    {
        "line": 858,
        "fullcodeline": "if (photometric != PHOTOMETRIC_PALETTE)"
    },
    {
        "line": 874,
        "fullcodeline": "(void) ExportQuantumPixels(image,(const CacheView *) NULL,"
    },
    {
        "line": 878,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 290,
        "fullcodeline": "if (image->colorspace == YCbCrColorspace)"
    },
    {
        "line": 303,
        "fullcodeline": "if ((image_info->type != PaletteType) &&"
    },
    {
        "line": 304,
        "fullcodeline": "(SetImageGray(image,&image->exception) != MagickFalse))"
    },
    {
        "line": 306,
        "fullcodeline": "photometric=(uint16) (quantum_info->min_is_white !="
    },
    {
        "line": 472,
        "fullcodeline": "(photometric == PHOTOMETRIC_SEPARATED) ||"
    },
    {
        "line": 477,
        "fullcodeline": "image_info->quality == UndefinedCompressionQuality ? 7 :"
    },
    {
        "line": 478,
        "fullcodeline": "MagickMin((ssize_t) image_info->quality/10,9)));"
    },
    {
        "line": 510,
        "fullcodeline": "(photometric == PHOTOMETRIC_SEPARATED) ||"
    },
    {
        "line": 664,
        "fullcodeline": "if (image->matte != MagickFalse)"
    },
    {
        "line": 666,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 694,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 707,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 713,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 726,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 732,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 745,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 751,
        "fullcodeline": "if (image->matte != MagickFalse)"
    },
    {
        "line": 766,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 797,
        "fullcodeline": "if (TIFFWritePixels(tiff,&tiff_info,y,0,image) == -1)"
    },
    {
        "line": 801,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 826,
        "fullcodeline": "red=(uint16 *) RelinquishMagickMemory(red);"
    },
    {
        "line": 828,
        "fullcodeline": "green=(uint16 *) RelinquishMagickMemory(green);"
    },
    {
        "line": 830,
        "fullcodeline": "blue=(uint16 *) RelinquishMagickMemory(blue);"
    },
    {
        "line": 859,
        "fullcodeline": "quantum_type=GrayAlphaQuantum;"
    },
    {
        "line": 864,
        "fullcodeline": "if (photometric != PHOTOMETRIC_PALETTE)"
    },
    {
        "line": 876,
        "fullcodeline": "if (TIFFWritePixels(tiff,&tiff_info,y,0,image) == -1)"
    },
    {
        "line": 880,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,"
    },
    {
        "line": 292,
        "fullcodeline": "photometric=PHOTOMETRIC_YCBCR;"
    },
    {
        "line": 309,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SAMPLESPERPIXEL,1);"
    },
    {
        "line": 665,
        "fullcodeline": "quantum_type=RGBAQuantum;"
    },
    {
        "line": 671,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,&image->exception);"
    },
    {
        "line": 699,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,&image->exception);"
    },
    {
        "line": 709,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,100,400);"
    },
    {
        "line": 718,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,&image->exception);"
    },
    {
        "line": 728,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,200,400);"
    },
    {
        "line": 737,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,&image->exception);"
    },
    {
        "line": 747,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,300,400);"
    },
    {
        "line": 768,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,400,400);"
    },
    {
        "line": 803,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 861,
        "fullcodeline": "quantum_type=IndexAlphaQuantum;"
    },
    {
        "line": 865,
        "fullcodeline": "quantum_type=GrayQuantum;"
    },
    {
        "line": 882,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 293,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_YCBCRSUBSAMPLING,1,1);"
    },
    {
        "line": 294,
        "fullcodeline": "(void) SetImageStorageClass(image,DirectClass);"
    },
    {
        "line": 295,
        "fullcodeline": "(void) SetImageDepth(image,8);"
    },
    {
        "line": 298,
        "fullcodeline": "photometric=PHOTOMETRIC_RGB;"
    },
    {
        "line": 310,
        "fullcodeline": "if ((image->depth == 1) && (image->matte == MagickFalse))"
    },
    {
        "line": 311,
        "fullcodeline": "SetImageMonochrome(image,&image->exception);"
    },
    {
        "line": 314,
        "fullcodeline": "if (image->storage_class == PseudoClass)"
    },
    {
        "line": 374,
        "fullcodeline": "if (LocaleCompare(option,\"unspecified\") == 0)"
    },
    {
        "line": 375,
        "fullcodeline": "sample_info[0]=EXTRASAMPLE_UNSPECIFIED;"
    },
    {
        "line": 674,
        "fullcodeline": "(void) ExportQuantumPixels(image,(const CacheView *) NULL,"
    },
    {
        "line": 678,
        "fullcodeline": "if (image->previous == (Image *) NULL)"
    },
    {
        "line": 702,
        "fullcodeline": "(void) ExportQuantumPixels(image,(const CacheView *) NULL,"
    },
    {
        "line": 710,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 721,
        "fullcodeline": "(void) ExportQuantumPixels(image,(const CacheView *) NULL,"
    },
    {
        "line": 729,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 740,
        "fullcodeline": "(void) ExportQuantumPixels(image,(const CacheView *) NULL,"
    },
    {
        "line": 748,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 752,
        "fullcodeline": "for (y=0; y < (ssize_t) image->rows; y++)"
    },
    {
        "line": 769,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 323,
        "fullcodeline": "photometric=PHOTOMETRIC_PALETTE;"
    },
    {
        "line": 324,
        "fullcodeline": "depth=1;"
    },
    {
        "line": 327,
        "fullcodeline": "status=SetQuantumDepth(image,quantum_info,depth);"
    },
    {
        "line": 676,
        "fullcodeline": "if (TIFFWritePixels(tiff,&tiff_info,y,0,image) == -1)"
    },
    {
        "line": 680,
        "fullcodeline": "status=SetImageProgress(image,SaveImageTag,(MagickOffsetType)"
    },
    {
        "line": 704,
        "fullcodeline": "if (TIFFWritePixels(tiff,&tiff_info,y,0,image) == -1)"
    },
    {
        "line": 723,
        "fullcodeline": "if (TIFFWritePixels(tiff,&tiff_info,y,1,image) == -1)"
    },
    {
        "line": 742,
        "fullcodeline": "if (TIFFWritePixels(tiff,&tiff_info,y,2,image) == -1)"
    },
    {
        "line": 757,
        "fullcodeline": "p=GetVirtualPixels(image,0,y,image->columns,1,"
    },
    {
        "line": 322,
        "fullcodeline": "(void) TIFFSetField(tiff,TIFFTAG_SAMPLESPERPIXEL,1);"
    },
    {
        "line": 325,
        "fullcodeline": "while ((GetQuantumRange(depth)+1) < image->colors)"
    },
    {
        "line": 326,
        "fullcodeline": "depth<<=1;"
    },
    {
        "line": 328,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 682,
        "fullcodeline": "if (status == MagickFalse)"
    },
    {
        "line": 761,
        "fullcodeline": "(void) ExportQuantumPixels(image,(const CacheView *) NULL,"
    },
    {
        "line": 329,
        "fullcodeline": "ThrowWriterException(ResourceLimitError,"
    },
    {
        "line": 763,
        "fullcodeline": "if (TIFFWritePixels(tiff,&tiff_info,y,3,image) == -1)"
    }
]