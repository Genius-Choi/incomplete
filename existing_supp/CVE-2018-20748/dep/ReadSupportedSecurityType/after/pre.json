[
    {
        "line": 3,
        "fullcodeline": "uint8_t count=0;"
    },
    {
        "line": 4,
        "fullcodeline": "uint8_t loop=0;"
    },
    {
        "line": 5,
        "fullcodeline": "uint8_t flag=0;"
    },
    {
        "line": 7,
        "fullcodeline": "uint8_t tAuth[256];"
    },
    {
        "line": 8,
        "fullcodeline": "char buf1[500],buf2[10];"
    },
    {
        "line": 21,
        "fullcodeline": "rfbClientLog(\"We have %d security types to read\\n\", count);"
    },
    {
        "line": 22,
        "fullcodeline": "authScheme=0;"
    },
    {
        "line": 12,
        "fullcodeline": "if (!ReadFromRFBServer(client, (char *)&count, 1)) return FALSE;"
    },
    {
        "line": 14,
        "fullcodeline": "if (count==0)"
    },
    {
        "line": 24,
        "fullcodeline": "for (loop=0;loop<count;loop++)"
    },
    {
        "line": 76,
        "fullcodeline": "if (authScheme==0)"
    },
    {
        "line": 27,
        "fullcodeline": "rfbClientLog(\"%d) Received security type %d\\n\", loop, tAuth[loop]);"
    },
    {
        "line": 29,
        "fullcodeline": "extAuthHandler=FALSE;"
    },
    {
        "line": 78,
        "fullcodeline": "memset(buf1, 0, sizeof(buf1));"
    },
    {
        "line": 30,
        "fullcodeline": "for (e = rfbClientExtensions; e; e = e->next) {"
    },
    {
        "line": 79,
        "fullcodeline": "for (loop=0;loop<count;loop++)"
    },
    {
        "line": 26,
        "fullcodeline": "if (!ReadFromRFBServer(client, (char *)&tAuth[loop], 1)) return FALSE;"
    },
    {
        "line": 39,
        "fullcodeline": "if (tAuth[loop]==rfbVncAuth || tAuth[loop]==rfbNoAuth ||"
    },
    {
        "line": 48,
        "fullcodeline": "(!subAuth && (tAuth[loop]==rfbTLS || (tAuth[loop]==rfbVeNCrypt && client->GetCredential))))"
    },
    {
        "line": 82,
        "fullcodeline": "snprintf(buf2, sizeof(buf2), (loop>0 ? \", %d\" : \"%d\"), (int)tAuth[loop]);"
    },
    {
        "line": 83,
        "fullcodeline": "strncat(buf1, buf2, sizeof(buf1)-strlen(buf1)-1);"
    },
    {
        "line": 33,
        "fullcodeline": "for (secType = e->securityTypes; secType && *secType; secType++) {"
    },
    {
        "line": 47,
        "fullcodeline": "(tAuth[loop]==rfbARD && client->GetCredential) ||"
    },
    {
        "line": 50,
        "fullcodeline": "if (!subAuth && client->clientAuthSchemes)"
    },
    {
        "line": 70,
        "fullcodeline": "rfbClientLog(\"Selecting security type %d (%d/%d in the list)\\n\", authScheme, loop, count);"
    },
    {
        "line": 81,
        "fullcodeline": "if (strlen(buf1)>=sizeof(buf1)-1) break;"
    },
    {
        "line": 34,
        "fullcodeline": "if (tAuth[loop]==*secType) {"
    },
    {
        "line": 65,
        "fullcodeline": "flag++;"
    },
    {
        "line": 66,
        "fullcodeline": "authScheme=tAuth[loop];"
    },
    {
        "line": 35,
        "fullcodeline": "extAuthHandler=TRUE;"
    },
    {
        "line": 53,
        "fullcodeline": "for (i=0;client->clientAuthSchemes[i];i++)"
    },
    {
        "line": 72,
        "fullcodeline": "if (!WriteToRFBServer(client, (char *)&tAuth[loop], 1)) return FALSE;"
    },
    {
        "line": 55,
        "fullcodeline": "if (client->clientAuthSchemes[i]==(uint32_t)tAuth[loop])"
    },
    {
        "line": 57,
        "fullcodeline": "flag++;"
    },
    {
        "line": 58,
        "fullcodeline": "authScheme=tAuth[loop];"
    }
]