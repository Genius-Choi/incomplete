[33mval[0m [36mres1458[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "CalculateTensorSize" {  
"111669149697" [label = <(METHOD,CalculateTensorSize)<SUB>1</SUB>> ]
"115964116992" [label = <(PARAM,const OpInfo::TensorProperties&amp; tensor)<SUB>2</SUB>> ]
"115964116993" [label = <(PARAM,bool* found_unknown_shapes)<SUB>2</SUB>> ]
"25769803777" [label = <(BLOCK,{
  int64_t count = CalculateTensorElementCount...,{
  int64_t count = CalculateTensorElementCount...)<SUB>2</SUB>> ]
"94489280512" [label = <(LOCAL,int64_t count: int64_t)<SUB>3</SUB>> ]
"30064771072" [label = <(&lt;operator&gt;.assignment,count = CalculateTensorElementCount(tensor, fou...)<SUB>3</SUB>> ]
"68719476736" [label = <(IDENTIFIER,count,count = CalculateTensorElementCount(tensor, fou...)<SUB>3</SUB>> ]
"30064771073" [label = <(CalculateTensorElementCount,CalculateTensorElementCount(tensor, found_unkno...)<SUB>3</SUB>> ]
"68719476737" [label = <(IDENTIFIER,tensor,CalculateTensorElementCount(tensor, found_unkno...)<SUB>3</SUB>> ]
"68719476738" [label = <(IDENTIFIER,found_unknown_shapes,CalculateTensorElementCount(tensor, found_unkno...)<SUB>3</SUB>> ]
"94489280513" [label = <(LOCAL,int size: int)<SUB>4</SUB>> ]
"30064771074" [label = <(&lt;operator&gt;.assignment,size = DataTypeSize(BaseType(tensor.dtype())))<SUB>4</SUB>> ]
"68719476739" [label = <(IDENTIFIER,size,size = DataTypeSize(BaseType(tensor.dtype())))<SUB>4</SUB>> ]
"30064771075" [label = <(DataTypeSize,DataTypeSize(BaseType(tensor.dtype())))<SUB>4</SUB>> ]
"30064771076" [label = <(BaseType,BaseType(tensor.dtype()))<SUB>4</SUB>> ]
"30064771077" [label = <(dtype,tensor.dtype())<SUB>4</SUB>> ]
"68719476740" [label = <(IDENTIFIER,tensor,tensor.dtype())<SUB>4</SUB>> ]
"30064771078" [label = <(&lt;operator&gt;.shiftLeft,VLOG(2) &lt;&lt; &quot;Count: &quot; &lt;&lt; count &lt;&lt; &quot; DataTypeSize...)<SUB>5</SUB>> ]
"30064771079" [label = <(&lt;operator&gt;.shiftLeft,VLOG(2) &lt;&lt; &quot;Count: &quot; &lt;&lt; count &lt;&lt; &quot; DataTypeSize: &quot;)<SUB>5</SUB>> ]
"30064771080" [label = <(&lt;operator&gt;.shiftLeft,VLOG(2) &lt;&lt; &quot;Count: &quot; &lt;&lt; count)<SUB>5</SUB>> ]
"30064771081" [label = <(&lt;operator&gt;.shiftLeft,VLOG(2) &lt;&lt; &quot;Count: &quot;)<SUB>5</SUB>> ]
"30064771082" [label = <(VLOG,VLOG(2))<SUB>5</SUB>> ]
"90194313216" [label = <(LITERAL,2,VLOG(2))<SUB>5</SUB>> ]
"90194313217" [label = <(LITERAL,&quot;Count: &quot;,VLOG(2) &lt;&lt; &quot;Count: &quot;)<SUB>5</SUB>> ]
"68719476741" [label = <(IDENTIFIER,count,VLOG(2) &lt;&lt; &quot;Count: &quot; &lt;&lt; count)<SUB>5</SUB>> ]
"90194313218" [label = <(LITERAL,&quot; DataTypeSize: &quot;,VLOG(2) &lt;&lt; &quot;Count: &quot; &lt;&lt; count &lt;&lt; &quot; DataTypeSize: &quot;)<SUB>5</SUB>> ]
"68719476742" [label = <(IDENTIFIER,size,VLOG(2) &lt;&lt; &quot;Count: &quot; &lt;&lt; count &lt;&lt; &quot; DataTypeSize...)<SUB>5</SUB>> ]
"94489280514" [label = <(LOCAL,int64_t tensor_size: int64_t)<SUB>6</SUB>> ]
"30064771083" [label = <(&lt;operator&gt;.assignment,tensor_size = MultiplyWithoutOverflow(count, size))<SUB>6</SUB>> ]
"68719476743" [label = <(IDENTIFIER,tensor_size,tensor_size = MultiplyWithoutOverflow(count, size))<SUB>6</SUB>> ]
"30064771084" [label = <(MultiplyWithoutOverflow,MultiplyWithoutOverflow(count, size))<SUB>6</SUB>> ]
"68719476744" [label = <(IDENTIFIER,count,MultiplyWithoutOverflow(count, size))<SUB>6</SUB>> ]
"68719476745" [label = <(IDENTIFIER,size,MultiplyWithoutOverflow(count, size))<SUB>6</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,IF,if (tensor_size &lt; 0))<SUB>7</SUB>> ]
"30064771085" [label = <(&lt;operator&gt;.lessThan,tensor_size &lt; 0)<SUB>7</SUB>> ]
"68719476746" [label = <(IDENTIFIER,tensor_size,tensor_size &lt; 0)<SUB>7</SUB>> ]
"90194313219" [label = <(LITERAL,0,tensor_size &lt; 0)<SUB>7</SUB>> ]
"25769803778" [label = <(BLOCK,{
    VLOG(1) &lt;&lt; &quot;Overflow encountered when com...,{
    VLOG(1) &lt;&lt; &quot;Overflow encountered when com...)<SUB>7</SUB>> ]
"30064771086" [label = <(&lt;operator&gt;.shiftLeft,VLOG(1) &lt;&lt; &quot;Overflow encountered when computing...)<SUB>8</SUB>> ]
"30064771087" [label = <(&lt;operator&gt;.shiftLeft,VLOG(1) &lt;&lt; &quot;Overflow encountered when computing...)<SUB>8</SUB>> ]
"30064771088" [label = <(&lt;operator&gt;.shiftLeft,VLOG(1) &lt;&lt; &quot;Overflow encountered when computing...)<SUB>8</SUB>> ]
"30064771089" [label = <(&lt;operator&gt;.shiftLeft,VLOG(1) &lt;&lt; &quot;Overflow encountered when computing...)<SUB>8</SUB>> ]
"30064771090" [label = <(VLOG,VLOG(1))<SUB>8</SUB>> ]
"90194313220" [label = <(LITERAL,1,VLOG(1))<SUB>8</SUB>> ]
"90194313221" [label = <(LITERAL,&quot;Overflow encountered when computing tensor siz...,VLOG(1) &lt;&lt; &quot;Overflow encountered when computing...)<SUB>8</SUB>> ]
"68719476747" [label = <(IDENTIFIER,count,VLOG(1) &lt;&lt; &quot;Overflow encountered when computing...)<SUB>9</SUB>> ]
"90194313222" [label = <(LITERAL,&quot; with &quot;,VLOG(1) &lt;&lt; &quot;Overflow encountered when computing...)<SUB>9</SUB>> ]
"68719476748" [label = <(IDENTIFIER,size,VLOG(1) &lt;&lt; &quot;Overflow encountered when computing...)<SUB>9</SUB>> ]
"146028888064" [label = <(RETURN,return -1;,return -1;)<SUB>10</SUB>> ]
"30064771091" [label = <(&lt;operator&gt;.minus,-1)<SUB>10</SUB>> ]
"90194313223" [label = <(LITERAL,1,-1)<SUB>10</SUB>> ]
"146028888065" [label = <(RETURN,return tensor_size;,return tensor_size;)<SUB>12</SUB>> ]
"68719476749" [label = <(IDENTIFIER,tensor_size,return tensor_size;)<SUB>12</SUB>> ]
"128849018880" [label = <(METHOD_RETURN,int64_t)<SUB>1</SUB>> ]
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "115964116993"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "128849018880"  [ label = "AST: "] 
  "25769803777" -> "94489280512"  [ label = "AST: "] 
  "25769803777" -> "30064771072"  [ label = "AST: "] 
  "25769803777" -> "94489280513"  [ label = "AST: "] 
  "25769803777" -> "30064771074"  [ label = "AST: "] 
  "25769803777" -> "30064771078"  [ label = "AST: "] 
  "25769803777" -> "94489280514"  [ label = "AST: "] 
  "25769803777" -> "30064771083"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "25769803777" -> "146028888065"  [ label = "AST: "] 
  "30064771072" -> "68719476736"  [ label = "AST: "] 
  "30064771072" -> "30064771073"  [ label = "AST: "] 
  "30064771073" -> "68719476737"  [ label = "AST: "] 
  "30064771073" -> "68719476738"  [ label = "AST: "] 
  "30064771074" -> "68719476739"  [ label = "AST: "] 
  "30064771074" -> "30064771075"  [ label = "AST: "] 
  "30064771075" -> "30064771076"  [ label = "AST: "] 
  "30064771076" -> "30064771077"  [ label = "AST: "] 
  "30064771077" -> "68719476740"  [ label = "AST: "] 
  "30064771078" -> "30064771079"  [ label = "AST: "] 
  "30064771078" -> "68719476742"  [ label = "AST: "] 
  "30064771079" -> "30064771080"  [ label = "AST: "] 
  "30064771079" -> "90194313218"  [ label = "AST: "] 
  "30064771080" -> "30064771081"  [ label = "AST: "] 
  "30064771080" -> "68719476741"  [ label = "AST: "] 
  "30064771081" -> "30064771082"  [ label = "AST: "] 
  "30064771081" -> "90194313217"  [ label = "AST: "] 
  "30064771082" -> "90194313216"  [ label = "AST: "] 
  "30064771083" -> "68719476743"  [ label = "AST: "] 
  "30064771083" -> "30064771084"  [ label = "AST: "] 
  "30064771084" -> "68719476744"  [ label = "AST: "] 
  "30064771084" -> "68719476745"  [ label = "AST: "] 
  "47244640256" -> "30064771085"  [ label = "AST: "] 
  "47244640256" -> "25769803778"  [ label = "AST: "] 
  "30064771085" -> "68719476746"  [ label = "AST: "] 
  "30064771085" -> "90194313219"  [ label = "AST: "] 
  "25769803778" -> "30064771086"  [ label = "AST: "] 
  "25769803778" -> "146028888064"  [ label = "AST: "] 
  "30064771086" -> "30064771087"  [ label = "AST: "] 
  "30064771086" -> "68719476748"  [ label = "AST: "] 
  "30064771087" -> "30064771088"  [ label = "AST: "] 
  "30064771087" -> "90194313222"  [ label = "AST: "] 
  "30064771088" -> "30064771089"  [ label = "AST: "] 
  "30064771088" -> "68719476747"  [ label = "AST: "] 
  "30064771089" -> "30064771090"  [ label = "AST: "] 
  "30064771089" -> "90194313221"  [ label = "AST: "] 
  "30064771090" -> "90194313220"  [ label = "AST: "] 
  "146028888064" -> "30064771091"  [ label = "AST: "] 
  "30064771091" -> "90194313223"  [ label = "AST: "] 
  "146028888065" -> "68719476749"  [ label = "AST: "] 
  "30064771072" -> "30064771077"  [ label = "CFG: "] 
  "30064771074" -> "30064771082"  [ label = "CFG: "] 
  "30064771078" -> "30064771084"  [ label = "CFG: "] 
  "30064771083" -> "30064771085"  [ label = "CFG: "] 
  "146028888065" -> "128849018880"  [ label = "CFG: "] 
  "30064771073" -> "30064771072"  [ label = "CFG: "] 
  "30064771075" -> "30064771074"  [ label = "CFG: "] 
  "30064771079" -> "30064771078"  [ label = "CFG: "] 
  "30064771084" -> "30064771083"  [ label = "CFG: "] 
  "30064771085" -> "30064771090"  [ label = "CFG: "] 
  "30064771085" -> "146028888065"  [ label = "CFG: "] 
  "30064771076" -> "30064771075"  [ label = "CFG: "] 
  "30064771080" -> "30064771079"  [ label = "CFG: "] 
  "30064771086" -> "30064771091"  [ label = "CFG: "] 
  "146028888064" -> "128849018880"  [ label = "CFG: "] 
  "30064771077" -> "30064771076"  [ label = "CFG: "] 
  "30064771081" -> "30064771080"  [ label = "CFG: "] 
  "30064771087" -> "30064771086"  [ label = "CFG: "] 
  "30064771091" -> "146028888064"  [ label = "CFG: "] 
  "30064771082" -> "30064771081"  [ label = "CFG: "] 
  "30064771088" -> "30064771087"  [ label = "CFG: "] 
  "30064771089" -> "30064771088"  [ label = "CFG: "] 
  "30064771090" -> "30064771089"  [ label = "CFG: "] 
  "111669149697" -> "30064771073"  [ label = "CFG: "] 
  "146028888065" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888064" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "30064771073" -> "128849018880"  [ label = "DDG: found_unknown_shapes"] 
  "30064771072" -> "128849018880"  [ label = "DDG: CalculateTensorElementCount(tensor, found_unknown_shapes)"] 
  "30064771072" -> "128849018880"  [ label = "DDG: count = CalculateTensorElementCount(tensor, found_unknown_shapes)"] 
  "30064771077" -> "128849018880"  [ label = "DDG: tensor"] 
  "30064771076" -> "128849018880"  [ label = "DDG: tensor.dtype()"] 
  "30064771075" -> "128849018880"  [ label = "DDG: BaseType(tensor.dtype())"] 
  "30064771074" -> "128849018880"  [ label = "DDG: DataTypeSize(BaseType(tensor.dtype()))"] 
  "30064771074" -> "128849018880"  [ label = "DDG: size = DataTypeSize(BaseType(tensor.dtype()))"] 
  "30064771081" -> "128849018880"  [ label = "DDG: VLOG(2)"] 
  "30064771080" -> "128849018880"  [ label = "DDG: VLOG(2) &lt;&lt; &quot;Count: &quot;"] 
  "30064771079" -> "128849018880"  [ label = "DDG: VLOG(2) &lt;&lt; &quot;Count: &quot; &lt;&lt; count"] 
  "30064771078" -> "128849018880"  [ label = "DDG: VLOG(2) &lt;&lt; &quot;Count: &quot; &lt;&lt; count &lt;&lt; &quot; DataTypeSize: &quot;"] 
  "30064771078" -> "128849018880"  [ label = "DDG: VLOG(2) &lt;&lt; &quot;Count: &quot; &lt;&lt; count &lt;&lt; &quot; DataTypeSize: &quot; &lt;&lt; size"] 
  "30064771083" -> "128849018880"  [ label = "DDG: MultiplyWithoutOverflow(count, size)"] 
  "30064771083" -> "128849018880"  [ label = "DDG: tensor_size = MultiplyWithoutOverflow(count, size)"] 
  "30064771085" -> "128849018880"  [ label = "DDG: tensor_size"] 
  "30064771085" -> "128849018880"  [ label = "DDG: tensor_size &lt; 0"] 
  "30064771089" -> "128849018880"  [ label = "DDG: VLOG(1)"] 
  "30064771088" -> "128849018880"  [ label = "DDG: VLOG(1) &lt;&lt; &quot;Overflow encountered when computing tensor size, multiplying &quot;"] 
  "30064771088" -> "128849018880"  [ label = "DDG: count"] 
  "30064771087" -> "128849018880"  [ label = "DDG: VLOG(1) &lt;&lt; &quot;Overflow encountered when computing tensor size, multiplying &quot;
            &lt;&lt; count"] 
  "30064771086" -> "128849018880"  [ label = "DDG: VLOG(1) &lt;&lt; &quot;Overflow encountered when computing tensor size, multiplying &quot;
            &lt;&lt; count &lt;&lt; &quot; with &quot;"] 
  "30064771086" -> "128849018880"  [ label = "DDG: size"] 
  "30064771086" -> "128849018880"  [ label = "DDG: VLOG(1) &lt;&lt; &quot;Overflow encountered when computing tensor size, multiplying &quot;
            &lt;&lt; count &lt;&lt; &quot; with &quot; &lt;&lt; size"] 
  "30064771091" -> "128849018880"  [ label = "DDG: -1"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "111669149697" -> "115964116993"  [ label = "DDG: "] 
  "30064771073" -> "30064771072"  [ label = "DDG: tensor"] 
  "30064771073" -> "30064771072"  [ label = "DDG: found_unknown_shapes"] 
  "30064771075" -> "30064771074"  [ label = "DDG: BaseType(tensor.dtype())"] 
  "30064771084" -> "30064771083"  [ label = "DDG: count"] 
  "30064771084" -> "30064771083"  [ label = "DDG: size"] 
  "68719476749" -> "146028888065"  [ label = "DDG: tensor_size"] 
  "30064771079" -> "30064771078"  [ label = "DDG: VLOG(2) &lt;&lt; &quot;Count: &quot; &lt;&lt; count"] 
  "30064771079" -> "30064771078"  [ label = "DDG: &quot; DataTypeSize: &quot;"] 
  "30064771074" -> "30064771078"  [ label = "DDG: size"] 
  "111669149697" -> "30064771078"  [ label = "DDG: "] 
  "30064771085" -> "68719476749"  [ label = "DDG: tensor_size"] 
  "111669149697" -> "68719476749"  [ label = "DDG: "] 
  "115964116992" -> "30064771073"  [ label = "DDG: tensor"] 
  "111669149697" -> "30064771073"  [ label = "DDG: "] 
  "115964116993" -> "30064771073"  [ label = "DDG: found_unknown_shapes"] 
  "30064771076" -> "30064771075"  [ label = "DDG: tensor.dtype()"] 
  "30064771080" -> "30064771079"  [ label = "DDG: VLOG(2) &lt;&lt; &quot;Count: &quot;"] 
  "30064771080" -> "30064771079"  [ label = "DDG: count"] 
  "111669149697" -> "30064771079"  [ label = "DDG: "] 
  "30064771080" -> "30064771084"  [ label = "DDG: count"] 
  "111669149697" -> "30064771084"  [ label = "DDG: "] 
  "30064771078" -> "30064771084"  [ label = "DDG: size"] 
  "30064771083" -> "30064771085"  [ label = "DDG: tensor_size"] 
  "111669149697" -> "30064771085"  [ label = "DDG: "] 
  "30064771091" -> "146028888064"  [ label = "DDG: -1"] 
  "30064771077" -> "30064771076"  [ label = "DDG: tensor"] 
  "30064771081" -> "30064771080"  [ label = "DDG: VLOG(2)"] 
  "30064771081" -> "30064771080"  [ label = "DDG: &quot;Count: &quot;"] 
  "30064771072" -> "30064771080"  [ label = "DDG: count"] 
  "111669149697" -> "30064771080"  [ label = "DDG: "] 
  "30064771087" -> "30064771086"  [ label = "DDG: VLOG(1) &lt;&lt; &quot;Overflow encountered when computing tensor size, multiplying &quot;
            &lt;&lt; count"] 
  "30064771087" -> "30064771086"  [ label = "DDG: &quot; with &quot;"] 
  "30064771084" -> "30064771086"  [ label = "DDG: size"] 
  "111669149697" -> "30064771086"  [ label = "DDG: "] 
  "30064771073" -> "30064771077"  [ label = "DDG: tensor"] 
  "111669149697" -> "30064771077"  [ label = "DDG: "] 
  "30064771082" -> "30064771081"  [ label = "DDG: 2"] 
  "111669149697" -> "30064771081"  [ label = "DDG: "] 
  "30064771088" -> "30064771087"  [ label = "DDG: VLOG(1) &lt;&lt; &quot;Overflow encountered when computing tensor size, multiplying &quot;"] 
  "30064771088" -> "30064771087"  [ label = "DDG: count"] 
  "111669149697" -> "30064771087"  [ label = "DDG: "] 
  "111669149697" -> "30064771091"  [ label = "DDG: "] 
  "111669149697" -> "30064771082"  [ label = "DDG: "] 
  "30064771089" -> "30064771088"  [ label = "DDG: VLOG(1)"] 
  "30064771089" -> "30064771088"  [ label = "DDG: &quot;Overflow encountered when computing tensor size, multiplying &quot;"] 
  "30064771084" -> "30064771088"  [ label = "DDG: count"] 
  "111669149697" -> "30064771088"  [ label = "DDG: "] 
  "30064771090" -> "30064771089"  [ label = "DDG: 1"] 
  "111669149697" -> "30064771089"  [ label = "DDG: "] 
  "111669149697" -> "30064771090"  [ label = "DDG: "] 
  "30064771085" -> "30064771091"  [ label = "CDG: "] 
  "30064771085" -> "30064771090"  [ label = "CDG: "] 
  "30064771085" -> "30064771089"  [ label = "CDG: "] 
  "30064771085" -> "30064771088"  [ label = "CDG: "] 
  "30064771085" -> "30064771087"  [ label = "CDG: "] 
  "30064771085" -> "30064771086"  [ label = "CDG: "] 
  "30064771085" -> "146028888065"  [ label = "CDG: "] 
  "30064771085" -> "146028888064"  [ label = "CDG: "] 
}
"""
)
