[33mval[0m [36mres1872[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "SpaceToBatch" {  
"111669149697" [label = <(METHOD,SpaceToBatch)<SUB>1</SUB>> ]
"115964116992" [label = <(PARAM,XlaOpKernelContext* ctx)<SUB>1</SUB>> ]
"115964116993" [label = <(PARAM,const xla::XlaOp&amp; input)<SUB>1</SUB>> ]
"115964116994" [label = <(PARAM,DataType input_dtype)<SUB>2</SUB>> ]
"115964116995" [label = <(PARAM,const TensorShape&amp; input_tensor_shape)<SUB>2</SUB>> ]
"115964116996" [label = <(PARAM,absl::Span&lt;const int64_t&gt; block_shape)<SUB>3</SUB>> ]
"115964116997" [label = <(PARAM,const xla::Literal&amp; paddings)<SUB>4</SUB>> ]
"25769803777" [label = <(BLOCK,{
  const int input_rank = input_tensor_shape.d...,{
  const int input_rank = input_tensor_shape.d...)<SUB>4</SUB>> ]
"94489280512" [label = <(LOCAL,const int input_rank: int)<SUB>5</SUB>> ]
"30064771072" [label = <(&lt;operator&gt;.assignment,input_rank = input_tensor_shape.dims())<SUB>5</SUB>> ]
"68719476736" [label = <(IDENTIFIER,input_rank,input_rank = input_tensor_shape.dims())<SUB>5</SUB>> ]
"30064771073" [label = <(dims,input_tensor_shape.dims())<SUB>5</SUB>> ]
"68719476737" [label = <(IDENTIFIER,input_tensor_shape,input_tensor_shape.dims())<SUB>5</SUB>> ]
"94489280513" [label = <(LOCAL,constabsl.InlinedVector&lt;int64_t,4&gt; input_shape: absl.InlinedVector&lt;int64_t,4&gt;)<SUB>6</SUB>> ]
"30064771074" [label = <(&lt;operator&gt;.assignment,input_shape =
      input_tensor_shape.dim_sizes())<SUB>6</SUB>> ]
"68719476738" [label = <(IDENTIFIER,input_shape,input_shape =
      input_tensor_shape.dim_sizes())<SUB>6</SUB>> ]
"30064771075" [label = <(dim_sizes,input_tensor_shape.dim_sizes())<SUB>7</SUB>> ]
"68719476739" [label = <(IDENTIFIER,input_tensor_shape,input_tensor_shape.dim_sizes())<SUB>7</SUB>> ]
"94489280514" [label = <(LOCAL,const int block_rank: int)<SUB>8</SUB>> ]
"30064771076" [label = <(&lt;operator&gt;.assignment,block_rank = block_shape.size())<SUB>8</SUB>> ]
"68719476740" [label = <(IDENTIFIER,block_rank,block_rank = block_shape.size())<SUB>8</SUB>> ]
"30064771077" [label = <(size,block_shape.size())<SUB>8</SUB>> ]
"68719476741" [label = <(IDENTIFIER,block_shape,block_shape.size())<SUB>8</SUB>> ]
"30064771078" [label = <(OP_REQUIRES,OP_REQUIRES(
      ctx, input_rank &gt;= 1 + block...)<SUB>10</SUB>> ]
"68719476742" [label = <(IDENTIFIER,ctx,OP_REQUIRES(
      ctx, input_rank &gt;= 1 + block...)<SUB>11</SUB>> ]
"30064771079" [label = <(&lt;operator&gt;.greaterEqualsThan,input_rank &gt;= 1 + block_rank)<SUB>11</SUB>> ]
"68719476743" [label = <(IDENTIFIER,input_rank,input_rank &gt;= 1 + block_rank)<SUB>11</SUB>> ]
"30064771080" [label = <(&lt;operator&gt;.addition,1 + block_rank)<SUB>11</SUB>> ]
"90194313216" [label = <(LITERAL,1,1 + block_rank)<SUB>11</SUB>> ]
"68719476744" [label = <(IDENTIFIER,block_rank,1 + block_rank)<SUB>11</SUB>> ]
"30064771081" [label = <(InvalidArgument,errors::InvalidArgument(&quot;input rank should be &gt;...)<SUB>12</SUB>> ]
"90194313217" [label = <(LITERAL,&quot;input rank should be &gt;= &quot;,errors::InvalidArgument(&quot;input rank should be &gt;...)<SUB>12</SUB>> ]
"30064771082" [label = <(&lt;operator&gt;.addition,1 + block_rank)<SUB>12</SUB>> ]
"90194313218" [label = <(LITERAL,1,1 + block_rank)<SUB>12</SUB>> ]
"68719476745" [label = <(IDENTIFIER,block_rank,1 + block_rank)<SUB>12</SUB>> ]
"90194313219" [label = <(LITERAL,&quot; instead of &quot;,errors::InvalidArgument(&quot;input rank should be &gt;...)<SUB>13</SUB>> ]
"68719476746" [label = <(IDENTIFIER,input_rank,errors::InvalidArgument(&quot;input rank should be &gt;...)<SUB>13</SUB>> ]
"94489280515" [label = <(LOCAL,absl.Span&lt;constint64_t&gt; remainder_shape: absl.Span&lt;int64_t&gt;)<SUB>14</SUB>> ]
"30064771083" [label = <(remainder_shape,remainder_shape(input_shape))<SUB>14</SUB>> ]
"68719476747" [label = <(IDENTIFIER,input_shape,remainder_shape(input_shape))<SUB>14</SUB>> ]
"30064771084" [label = <(remove_prefix,remainder_shape.remove_prefix(1 + block_rank))<SUB>15</SUB>> ]
"68719476748" [label = <(IDENTIFIER,remainder_shape,remainder_shape.remove_prefix(1 + block_rank))<SUB>15</SUB>> ]
"30064771085" [label = <(&lt;operator&gt;.addition,1 + block_rank)<SUB>15</SUB>> ]
"90194313220" [label = <(LITERAL,1,1 + block_rank)<SUB>15</SUB>> ]
"68719476749" [label = <(IDENTIFIER,block_rank,1 + block_rank)<SUB>15</SUB>> ]
"30064771086" [label = <(OP_REQUIRES,OP_REQUIRES(
      ctx,
      paddings.shape()....)<SUB>17</SUB>> ]
"68719476750" [label = <(IDENTIFIER,ctx,OP_REQUIRES(
      ctx,
      paddings.shape()....)<SUB>18</SUB>> ]
"30064771087" [label = <(&lt;operator&gt;.logicalAnd,paddings.shape().rank() == 2 &amp;&amp;
          block...)<SUB>19</SUB>> ]
"30064771088" [label = <(&lt;operator&gt;.logicalAnd,paddings.shape().rank() == 2 &amp;&amp;
          block...)<SUB>19</SUB>> ]
"30064771089" [label = <(&lt;operator&gt;.equals,paddings.shape().rank() == 2)<SUB>19</SUB>> ]
"30064771090" [label = <(rank,paddings.shape().rank())<SUB>19</SUB>> ]
"30064771091" [label = <(shape,paddings.shape())<SUB>19</SUB>> ]
"68719476751" [label = <(IDENTIFIER,paddings,paddings.shape())<SUB>19</SUB>> ]
"90194313221" [label = <(LITERAL,2,paddings.shape().rank() == 2)<SUB>19</SUB>> ]
"30064771092" [label = <(&lt;operator&gt;.equals,block_rank == xla::ShapeUtil::GetDimension(padd...)<SUB>20</SUB>> ]
"68719476752" [label = <(IDENTIFIER,block_rank,block_rank == xla::ShapeUtil::GetDimension(padd...)<SUB>20</SUB>> ]
"30064771093" [label = <(GetDimension,xla::ShapeUtil::GetDimension(paddings.shape(), 0))<SUB>20</SUB>> ]
"30064771094" [label = <(shape,paddings.shape())<SUB>20</SUB>> ]
"68719476753" [label = <(IDENTIFIER,paddings,paddings.shape())<SUB>20</SUB>> ]
"90194313222" [label = <(LITERAL,0,xla::ShapeUtil::GetDimension(paddings.shape(), 0))<SUB>20</SUB>> ]
"30064771095" [label = <(&lt;operator&gt;.equals,2 == xla::ShapeUtil::GetDimension(paddings.shap...)<SUB>21</SUB>> ]
"90194313223" [label = <(LITERAL,2,2 == xla::ShapeUtil::GetDimension(paddings.shap...)<SUB>21</SUB>> ]
"30064771096" [label = <(GetDimension,xla::ShapeUtil::GetDimension(paddings.shape(), 1))<SUB>21</SUB>> ]
"30064771097" [label = <(shape,paddings.shape())<SUB>21</SUB>> ]
"68719476754" [label = <(IDENTIFIER,paddings,paddings.shape())<SUB>21</SUB>> ]
"90194313224" [label = <(LITERAL,1,xla::ShapeUtil::GetDimension(paddings.shape(), 1))<SUB>21</SUB>> ]
"30064771098" [label = <(InvalidArgument,errors::InvalidArgument(&quot;paddings should have s...)<SUB>22</SUB>> ]
"90194313225" [label = <(LITERAL,&quot;paddings should have shape [&quot;,errors::InvalidArgument(&quot;paddings should have s...)<SUB>22</SUB>> ]
"68719476755" [label = <(IDENTIFIER,block_rank,errors::InvalidArgument(&quot;paddings should have s...)<SUB>22</SUB>> ]
"90194313226" [label = <(LITERAL,&quot;, 2] instead of &quot;,errors::InvalidArgument(&quot;paddings should have s...)<SUB>23</SUB>> ]
"30064771099" [label = <(HumanString,xla::ShapeUtil::HumanString(paddings.shape()))<SUB>24</SUB>> ]
"30064771100" [label = <(shape,paddings.shape())<SUB>24</SUB>> ]
"68719476756" [label = <(IDENTIFIER,paddings,paddings.shape())<SUB>24</SUB>> ]
"94489280516" [label = <(LOCAL,xla.XlaBuilder* b: xla.XlaBuilder*)<SUB>26</SUB>> ]
"30064771101" [label = <(&lt;operator&gt;.assignment,* b = ctx-&gt;builder())<SUB>26</SUB>> ]
"68719476757" [label = <(IDENTIFIER,b,* b = ctx-&gt;builder())<SUB>26</SUB>> ]
"30064771102" [label = <(builder,ctx-&gt;builder())<SUB>26</SUB>> ]
"68719476758" [label = <(IDENTIFIER,ctx,ctx-&gt;builder())<SUB>26</SUB>> ]
"94489280517" [label = <(LOCAL,xla.PaddingConfig padding_config: xla.PaddingConfig)<SUB>30</SUB>> ]
"30064771103" [label = <(&lt;operator&gt;.greaterThan,std::vector&lt;int64_t&gt; padded_shape(input_shape.b...)<SUB>31</SUB>> ]
"30064771104" [label = <(&lt;operator&gt;.lessThan,std::vector&lt;int64_t)<SUB>31</SUB>> ]
"30064771105" [label = <(&lt;operator&gt;.fieldAccess,std::vector)<SUB>31</SUB>> ]
"68719476759" [label = <(IDENTIFIER,std,std::vector&lt;int64_t)<SUB>31</SUB>> ]
"55834574848" [label = <(FIELD_IDENTIFIER,vector,vector)<SUB>31</SUB>> ]
"68719476760" [label = <(IDENTIFIER,int64_t,std::vector&lt;int64_t)<SUB>31</SUB>> ]
"30064771106" [label = <(padded_shape,padded_shape(input_shape.begin(), input_shape.e...)<SUB>31</SUB>> ]
"30064771107" [label = <(begin,input_shape.begin())<SUB>31</SUB>> ]
"68719476761" [label = <(IDENTIFIER,input_shape,input_shape.begin())<SUB>31</SUB>> ]
"30064771108" [label = <(end,input_shape.end())<SUB>31</SUB>> ]
"68719476762" [label = <(IDENTIFIER,input_shape,input_shape.end())<SUB>31</SUB>> ]
"94489280518" [label = <(LOCAL,int64_t block_num_elems: int64_t)<SUB>32</SUB>> ]
"30064771109" [label = <(&lt;operator&gt;.assignment,block_num_elems = 1LL)<SUB>32</SUB>> ]
"68719476763" [label = <(IDENTIFIER,block_num_elems,block_num_elems = 1LL)<SUB>32</SUB>> ]
"90194313227" [label = <(LITERAL,1LL,block_num_elems = 1LL)<SUB>32</SUB>> ]
"30064771110" [label = <(add_dimensions,padding_config.add_dimensions())<SUB>33</SUB>> ]
"68719476764" [label = <(IDENTIFIER,padding_config,padding_config.add_dimensions())<SUB>33</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,FOR,for (int i = 0;i &lt; block_rank;++i))<SUB>34</SUB>> ]
"25769803778" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>34</SUB>> ]
"94489280519" [label = <(LOCAL,int i: int)<SUB>34</SUB>> ]
"30064771111" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>34</SUB>> ]
"68719476765" [label = <(IDENTIFIER,i,i = 0)<SUB>34</SUB>> ]
"90194313228" [label = <(LITERAL,0,i = 0)<SUB>34</SUB>> ]
"30064771112" [label = <(&lt;operator&gt;.lessThan,i &lt; block_rank)<SUB>34</SUB>> ]
"68719476766" [label = <(IDENTIFIER,i,i &lt; block_rank)<SUB>34</SUB>> ]
"68719476767" [label = <(IDENTIFIER,block_rank,i &lt; block_rank)<SUB>34</SUB>> ]
"30064771113" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>34</SUB>> ]
"68719476768" [label = <(IDENTIFIER,i,++i)<SUB>34</SUB>> ]
"25769803779" [label = <(BLOCK,{
    auto* dim = padding_config.add_dimensions...,{
    auto* dim = padding_config.add_dimensions...)<SUB>34</SUB>> ]
"94489280520" [label = <(LOCAL,auto* dim: auto*)<SUB>35</SUB>> ]
"30064771114" [label = <(&lt;operator&gt;.assignment,* dim = padding_config.add_dimensions())<SUB>35</SUB>> ]
"68719476769" [label = <(IDENTIFIER,dim,* dim = padding_config.add_dimensions())<SUB>35</SUB>> ]
"30064771115" [label = <(add_dimensions,padding_config.add_dimensions())<SUB>35</SUB>> ]
"68719476770" [label = <(IDENTIFIER,padding_config,padding_config.add_dimensions())<SUB>35</SUB>> ]
"94489280521" [label = <(LOCAL,int64_t pad_start: int64_t)<SUB>36</SUB>> ]
"30064771116" [label = <(&lt;operator&gt;.assignment,pad_start = paddings.Get&lt;int64_t&gt;({i, 0}))<SUB>36</SUB>> ]
"68719476771" [label = <(IDENTIFIER,pad_start,pad_start = paddings.Get&lt;int64_t&gt;({i, 0}))<SUB>36</SUB>> ]
"30064771117" [label = <(&lt;operator&gt;.greaterThan,paddings.Get&lt;int64_t&gt;({i, 0}))<SUB>36</SUB>> ]
"30064771118" [label = <(&lt;operator&gt;.lessThan,paddings.Get&lt;int64_t)<SUB>36</SUB>> ]
"30064771119" [label = <(&lt;operator&gt;.fieldAccess,paddings.Get)<SUB>36</SUB>> ]
"68719476772" [label = <(IDENTIFIER,paddings,paddings.Get&lt;int64_t)<SUB>36</SUB>> ]
"55834574849" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>36</SUB>> ]
"68719476773" [label = <(IDENTIFIER,int64_t,paddings.Get&lt;int64_t)<SUB>36</SUB>> ]
"25769803780" [label = <(BLOCK,{i, 0},{i, 0})<SUB>36</SUB>> ]
"30064771120" [label = <(&lt;operator&gt;.expressionList,i, 0)<SUB>36</SUB>> ]
"68719476774" [label = <(IDENTIFIER,i,i, 0)<SUB>36</SUB>> ]
"90194313229" [label = <(LITERAL,0,i, 0)<SUB>36</SUB>> ]
"94489280522" [label = <(LOCAL,int64_t pad_end: int64_t)<SUB>37</SUB>> ]
"30064771121" [label = <(&lt;operator&gt;.assignment,pad_end = paddings.Get&lt;int64_t&gt;({i, 1}))<SUB>37</SUB>> ]
"68719476775" [label = <(IDENTIFIER,pad_end,pad_end = paddings.Get&lt;int64_t&gt;({i, 1}))<SUB>37</SUB>> ]
"30064771122" [label = <(&lt;operator&gt;.greaterThan,paddings.Get&lt;int64_t&gt;({i, 1}))<SUB>37</SUB>> ]
"30064771123" [label = <(&lt;operator&gt;.lessThan,paddings.Get&lt;int64_t)<SUB>37</SUB>> ]
"30064771124" [label = <(&lt;operator&gt;.fieldAccess,paddings.Get)<SUB>37</SUB>> ]
"68719476776" [label = <(IDENTIFIER,paddings,paddings.Get&lt;int64_t)<SUB>37</SUB>> ]
"55834574850" [label = <(FIELD_IDENTIFIER,Get,Get)<SUB>37</SUB>> ]
"68719476777" [label = <(IDENTIFIER,int64_t,paddings.Get&lt;int64_t)<SUB>37</SUB>> ]
"25769803781" [label = <(BLOCK,{i, 1},{i, 1})<SUB>37</SUB>> ]
"30064771125" [label = <(&lt;operator&gt;.expressionList,i, 1)<SUB>37</SUB>> ]
"68719476778" [label = <(IDENTIFIER,i,i, 1)<SUB>37</SUB>> ]
"90194313230" [label = <(LITERAL,1,i, 1)<SUB>37</SUB>> ]
"30064771126" [label = <(OP_REQUIRES,OP_REQUIRES(ctx, pad_start &gt;= 0 &amp;&amp; pad_end &gt;= 0...)<SUB>38</SUB>> ]
"68719476779" [label = <(IDENTIFIER,ctx,OP_REQUIRES(ctx, pad_start &gt;= 0 &amp;&amp; pad_end &gt;= 0...)<SUB>38</SUB>> ]
"30064771127" [label = <(&lt;operator&gt;.logicalAnd,pad_start &gt;= 0 &amp;&amp; pad_end &gt;= 0)<SUB>38</SUB>> ]
"30064771128" [label = <(&lt;operator&gt;.greaterEqualsThan,pad_start &gt;= 0)<SUB>38</SUB>> ]
"68719476780" [label = <(IDENTIFIER,pad_start,pad_start &gt;= 0)<SUB>38</SUB>> ]
"90194313231" [label = <(LITERAL,0,pad_start &gt;= 0)<SUB>38</SUB>> ]
"30064771129" [label = <(&lt;operator&gt;.greaterEqualsThan,pad_end &gt;= 0)<SUB>38</SUB>> ]
"68719476781" [label = <(IDENTIFIER,pad_end,pad_end &gt;= 0)<SUB>38</SUB>> ]
"90194313232" [label = <(LITERAL,0,pad_end &gt;= 0)<SUB>38</SUB>> ]
"30064771130" [label = <(InvalidArgument,errors::InvalidArgument(&quot;Paddings must be non-n...)<SUB>39</SUB>> ]
"90194313233" [label = <(LITERAL,&quot;Paddings must be non-negative&quot;,errors::InvalidArgument(&quot;Paddings must be non-n...)<SUB>39</SUB>> ]
"30064771131" [label = <(OP_REQUIRES,OP_REQUIRES(ctx, block_shape[i] &gt;= 1,
         ...)<SUB>40</SUB>> ]
"68719476782" [label = <(IDENTIFIER,ctx,OP_REQUIRES(ctx, block_shape[i] &gt;= 1,
         ...)<SUB>40</SUB>> ]
"30064771132" [label = <(&lt;operator&gt;.greaterEqualsThan,block_shape[i] &gt;= 1)<SUB>40</SUB>> ]
"30064771133" [label = <(&lt;operator&gt;.indirectIndexAccess,block_shape[i])<SUB>40</SUB>> ]
"68719476783" [label = <(IDENTIFIER,block_shape,block_shape[i] &gt;= 1)<SUB>40</SUB>> ]
"68719476784" [label = <(IDENTIFIER,i,block_shape[i] &gt;= 1)<SUB>40</SUB>> ]
"90194313234" [label = <(LITERAL,1,block_shape[i] &gt;= 1)<SUB>40</SUB>> ]
"30064771134" [label = <(InvalidArgument,errors::InvalidArgument(
                    &quot;A...)<SUB>41</SUB>> ]
"90194313235" [label = <(LITERAL,&quot;All values in block_shape must be positive, go...,errors::InvalidArgument(
                    &quot;A...)<SUB>42</SUB>> ]
"30064771135" [label = <(&lt;operator&gt;.indirectIndexAccess,block_shape[i])<SUB>43</SUB>> ]
"68719476785" [label = <(IDENTIFIER,block_shape,errors::InvalidArgument(
                    &quot;A...)<SUB>43</SUB>> ]
"68719476786" [label = <(IDENTIFIER,i,errors::InvalidArgument(
                    &quot;A...)<SUB>43</SUB>> ]
"90194313236" [label = <(LITERAL,&quot; at index &quot;,errors::InvalidArgument(
                    &quot;A...)<SUB>43</SUB>> ]
"68719476787" [label = <(IDENTIFIER,i,errors::InvalidArgument(
                    &quot;A...)<SUB>43</SUB>> ]
"90194313237" [label = <(LITERAL,&quot;.&quot;,errors::InvalidArgument(
                    &quot;A...)<SUB>43</SUB>> ]
"30064771136" [label = <(set_edge_padding_low,dim-&gt;set_edge_padding_low(pad_start))<SUB>44</SUB>> ]
"68719476788" [label = <(IDENTIFIER,dim,dim-&gt;set_edge_padding_low(pad_start))<SUB>44</SUB>> ]
"68719476789" [label = <(IDENTIFIER,pad_start,dim-&gt;set_edge_padding_low(pad_start))<SUB>44</SUB>> ]
"30064771137" [label = <(set_edge_padding_high,dim-&gt;set_edge_padding_high(pad_end))<SUB>45</SUB>> ]
"68719476790" [label = <(IDENTIFIER,dim,dim-&gt;set_edge_padding_high(pad_end))<SUB>45</SUB>> ]
"68719476791" [label = <(IDENTIFIER,pad_end,dim-&gt;set_edge_padding_high(pad_end))<SUB>45</SUB>> ]
"30064771138" [label = <(&lt;operator&gt;.assignmentPlus,padded_shape[1 + i] += pad_start + pad_end)<SUB>46</SUB>> ]
"30064771139" [label = <(&lt;operator&gt;.indirectIndexAccess,padded_shape[1 + i])<SUB>46</SUB>> ]
"68719476792" [label = <(IDENTIFIER,padded_shape,padded_shape[1 + i] += pad_start + pad_end)<SUB>46</SUB>> ]
"30064771140" [label = <(&lt;operator&gt;.addition,1 + i)<SUB>46</SUB>> ]
"90194313238" [label = <(LITERAL,1,1 + i)<SUB>46</SUB>> ]
"68719476793" [label = <(IDENTIFIER,i,1 + i)<SUB>46</SUB>> ]
"30064771141" [label = <(&lt;operator&gt;.addition,pad_start + pad_end)<SUB>46</SUB>> ]
"68719476794" [label = <(IDENTIFIER,pad_start,pad_start + pad_end)<SUB>46</SUB>> ]
"68719476795" [label = <(IDENTIFIER,pad_end,pad_start + pad_end)<SUB>46</SUB>> ]
"30064771142" [label = <(&lt;operator&gt;.assignment,block_num_elems = MultiplyWithoutOverflow(block...)<SUB>47</SUB>> ]
"68719476796" [label = <(IDENTIFIER,block_num_elems,block_num_elems = MultiplyWithoutOverflow(block...)<SUB>47</SUB>> ]
"30064771143" [label = <(MultiplyWithoutOverflow,MultiplyWithoutOverflow(block_num_elems, block_...)<SUB>47</SUB>> ]
"68719476797" [label = <(IDENTIFIER,block_num_elems,MultiplyWithoutOverflow(block_num_elems, block_...)<SUB>47</SUB>> ]
"30064771144" [label = <(&lt;operator&gt;.indirectIndexAccess,block_shape[i])<SUB>47</SUB>> ]
"68719476798" [label = <(IDENTIFIER,block_shape,MultiplyWithoutOverflow(block_num_elems, block_...)<SUB>47</SUB>> ]
"68719476799" [label = <(IDENTIFIER,i,MultiplyWithoutOverflow(block_num_elems, block_...)<SUB>47</SUB>> ]
"47244640257" [label = <(CONTROL_STRUCTURE,FOR,for (int i = 0;i &lt; remainder_shape.size();++i))<SUB>50</SUB>> ]
"25769803782" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>50</SUB>> ]
"94489280523" [label = <(LOCAL,int i: int)<SUB>50</SUB>> ]
"30064771145" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>50</SUB>> ]
"68719476800" [label = <(IDENTIFIER,i,i = 0)<SUB>50</SUB>> ]
"90194313239" [label = <(LITERAL,0,i = 0)<SUB>50</SUB>> ]
"30064771146" [label = <(&lt;operator&gt;.lessThan,i &lt; remainder_shape.size())<SUB>50</SUB>> ]
"68719476801" [label = <(IDENTIFIER,i,i &lt; remainder_shape.size())<SUB>50</SUB>> ]
"30064771147" [label = <(size,remainder_shape.size())<SUB>50</SUB>> ]
"68719476802" [label = <(IDENTIFIER,remainder_shape,remainder_shape.size())<SUB>50</SUB>> ]
"30064771148" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>50</SUB>> ]
"68719476803" [label = <(IDENTIFIER,i,++i)<SUB>50</SUB>> ]
"25769803783" [label = <(BLOCK,{
    padding_config.add_dimensions();
  },{
    padding_config.add_dimensions();
  })<SUB>50</SUB>> ]
"30064771149" [label = <(add_dimensions,padding_config.add_dimensions())<SUB>51</SUB>> ]
"68719476804" [label = <(IDENTIFIER,padding_config,padding_config.add_dimensions())<SUB>51</SUB>> ]
"30064771150" [label = <(OP_REQUIRES,OP_REQUIRES(ctx, block_num_elems &gt; 0,
         ...)<SUB>53</SUB>> ]
"68719476805" [label = <(IDENTIFIER,ctx,OP_REQUIRES(ctx, block_num_elems &gt; 0,
         ...)<SUB>53</SUB>> ]
"30064771151" [label = <(&lt;operator&gt;.greaterThan,block_num_elems &gt; 0)<SUB>53</SUB>> ]
"68719476806" [label = <(IDENTIFIER,block_num_elems,block_num_elems &gt; 0)<SUB>53</SUB>> ]
"90194313240" [label = <(LITERAL,0,block_num_elems &gt; 0)<SUB>53</SUB>> ]
"30064771152" [label = <(InvalidArgument,errors::InvalidArgument(
                  &quot;The...)<SUB>54</SUB>> ]
"90194313241" [label = <(LITERAL,&quot;The product of the block dimensions must be po...,errors::InvalidArgument(
                  &quot;The...)<SUB>55</SUB>> ]
"94489280524" [label = <(LOCAL,const int64_t batch_size: int64_t)<SUB>56</SUB>> ]
"30064771153" [label = <(&lt;operator&gt;.assignment,batch_size = input_shape[0])<SUB>56</SUB>> ]
"68719476807" [label = <(IDENTIFIER,batch_size,batch_size = input_shape[0])<SUB>56</SUB>> ]
"30064771154" [label = <(&lt;operator&gt;.indirectIndexAccess,input_shape[0])<SUB>56</SUB>> ]
"68719476808" [label = <(IDENTIFIER,input_shape,batch_size = input_shape[0])<SUB>56</SUB>> ]
"90194313242" [label = <(LITERAL,0,batch_size = input_shape[0])<SUB>56</SUB>> ]
"94489280525" [label = <(LOCAL,const int64_t output_dim: int64_t)<SUB>57</SUB>> ]
"30064771155" [label = <(&lt;operator&gt;.assignment,output_dim =
      MultiplyWithoutOverflow(batc...)<SUB>57</SUB>> ]
"68719476809" [label = <(IDENTIFIER,output_dim,output_dim =
      MultiplyWithoutOverflow(batc...)<SUB>57</SUB>> ]
"30064771156" [label = <(MultiplyWithoutOverflow,MultiplyWithoutOverflow(batch_size, block_num_e...)<SUB>58</SUB>> ]
"68719476810" [label = <(IDENTIFIER,batch_size,MultiplyWithoutOverflow(batch_size, block_num_e...)<SUB>58</SUB>> ]
"68719476811" [label = <(IDENTIFIER,block_num_elems,MultiplyWithoutOverflow(batch_size, block_num_e...)<SUB>58</SUB>> ]
"47244640258" [label = <(CONTROL_STRUCTURE,IF,if (output_dim &lt; 0))<SUB>59</SUB>> ]
"30064771157" [label = <(&lt;operator&gt;.lessThan,output_dim &lt; 0)<SUB>59</SUB>> ]
"68719476812" [label = <(IDENTIFIER,output_dim,output_dim &lt; 0)<SUB>59</SUB>> ]
"90194313243" [label = <(LITERAL,0,output_dim &lt; 0)<SUB>59</SUB>> ]
"25769803784" [label = <(BLOCK,{
    OP_REQUIRES(
        ctx, output_dim &gt;= 0...,{
    OP_REQUIRES(
        ctx, output_dim &gt;= 0...)<SUB>59</SUB>> ]
"30064771158" [label = <(OP_REQUIRES,OP_REQUIRES(
        ctx, output_dim &gt;= 0,
    ...)<SUB>60</SUB>> ]
"68719476813" [label = <(IDENTIFIER,ctx,OP_REQUIRES(
        ctx, output_dim &gt;= 0,
    ...)<SUB>61</SUB>> ]
"30064771159" [label = <(&lt;operator&gt;.greaterEqualsThan,output_dim &gt;= 0)<SUB>61</SUB>> ]
"68719476814" [label = <(IDENTIFIER,output_dim,output_dim &gt;= 0)<SUB>61</SUB>> ]
"90194313244" [label = <(LITERAL,0,output_dim &gt;= 0)<SUB>61</SUB>> ]
"30064771160" [label = <(InvalidArgument,errors::InvalidArgument(&quot;Negative output dimens...)<SUB>62</SUB>> ]
"90194313245" [label = <(LITERAL,&quot;Negative output dimension size caused by &quot;
   ...,errors::InvalidArgument(&quot;Negative output dimens...)<SUB>62</SUB>> ]
"68719476815" [label = <(IDENTIFIER,batch_size,errors::InvalidArgument(&quot;Negative output dimens...)<SUB>64</SUB>> ]
"90194313246" [label = <(LITERAL,&quot; and &quot;,errors::InvalidArgument(&quot;Negative output dimens...)<SUB>64</SUB>> ]
"68719476816" [label = <(IDENTIFIER,block_num_elems,errors::InvalidArgument(&quot;Negative output dimens...)<SUB>64</SUB>> ]
"94489280526" [label = <(LOCAL,xla.XlaOp padded: xla.XlaOp)<SUB>67</SUB>> ]
"30064771161" [label = <(&lt;operator&gt;.assignment,padded =
      xla::Pad(input, XlaHelpers::Zero...)<SUB>67</SUB>> ]
"68719476817" [label = <(IDENTIFIER,padded,padded =
      xla::Pad(input, XlaHelpers::Zero...)<SUB>67</SUB>> ]
"30064771162" [label = <(Pad,xla::Pad(input, XlaHelpers::Zero(b, input_dtype...)<SUB>68</SUB>> ]
"68719476818" [label = <(IDENTIFIER,input,xla::Pad(input, XlaHelpers::Zero(b, input_dtype...)<SUB>68</SUB>> ]
"30064771163" [label = <(Zero,XlaHelpers::Zero(b, input_dtype))<SUB>68</SUB>> ]
"68719476819" [label = <(IDENTIFIER,b,XlaHelpers::Zero(b, input_dtype))<SUB>68</SUB>> ]
"68719476820" [label = <(IDENTIFIER,input_dtype,XlaHelpers::Zero(b, input_dtype))<SUB>68</SUB>> ]
"68719476821" [label = <(IDENTIFIER,padding_config,xla::Pad(input, XlaHelpers::Zero(b, input_dtype...)<SUB>68</SUB>> ]
"30064771164" [label = <(&lt;operator&gt;.greaterThan,std::vector&lt;int64_t&gt; reshaped_padded_shape(inpu...)<SUB>79</SUB>> ]
"30064771165" [label = <(&lt;operator&gt;.lessThan,std::vector&lt;int64_t)<SUB>79</SUB>> ]
"30064771166" [label = <(&lt;operator&gt;.fieldAccess,std::vector)<SUB>79</SUB>> ]
"68719476822" [label = <(IDENTIFIER,std,std::vector&lt;int64_t)<SUB>79</SUB>> ]
"55834574851" [label = <(FIELD_IDENTIFIER,vector,vector)<SUB>79</SUB>> ]
"68719476823" [label = <(IDENTIFIER,int64_t,std::vector&lt;int64_t)<SUB>79</SUB>> ]
"30064771167" [label = <(reshaped_padded_shape,reshaped_padded_shape(input_rank + block_rank))<SUB>79</SUB>> ]
"30064771168" [label = <(&lt;operator&gt;.addition,input_rank + block_rank)<SUB>79</SUB>> ]
"68719476824" [label = <(IDENTIFIER,input_rank,input_rank + block_rank)<SUB>79</SUB>> ]
"68719476825" [label = <(IDENTIFIER,block_rank,input_rank + block_rank)<SUB>79</SUB>> ]
"30064771169" [label = <(&lt;operator&gt;.assignment,reshaped_padded_shape[0] = batch_size)<SUB>80</SUB>> ]
"30064771170" [label = <(&lt;operator&gt;.indirectIndexAccess,reshaped_padded_shape[0])<SUB>80</SUB>> ]
"68719476826" [label = <(IDENTIFIER,reshaped_padded_shape,reshaped_padded_shape[0] = batch_size)<SUB>80</SUB>> ]
"90194313247" [label = <(LITERAL,0,reshaped_padded_shape[0] = batch_size)<SUB>80</SUB>> ]
"68719476827" [label = <(IDENTIFIER,batch_size,reshaped_padded_shape[0] = batch_size)<SUB>80</SUB>> ]
"47244640259" [label = <(CONTROL_STRUCTURE,FOR,for (int i = 0;i &lt; block_rank;++i))<SUB>81</SUB>> ]
"25769803785" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>81</SUB>> ]
"94489280527" [label = <(LOCAL,int i: int)<SUB>81</SUB>> ]
"30064771171" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>81</SUB>> ]
"68719476828" [label = <(IDENTIFIER,i,i = 0)<SUB>81</SUB>> ]
"90194313248" [label = <(LITERAL,0,i = 0)<SUB>81</SUB>> ]
"30064771172" [label = <(&lt;operator&gt;.lessThan,i &lt; block_rank)<SUB>81</SUB>> ]
"68719476829" [label = <(IDENTIFIER,i,i &lt; block_rank)<SUB>81</SUB>> ]
"68719476830" [label = <(IDENTIFIER,block_rank,i &lt; block_rank)<SUB>81</SUB>> ]
"30064771173" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>81</SUB>> ]
"68719476831" [label = <(IDENTIFIER,i,++i)<SUB>81</SUB>> ]
"25769803786" [label = <(BLOCK,{
    OP_REQUIRES(ctx, padded_shape[1 + i] % bl...,{
    OP_REQUIRES(ctx, padded_shape[1 + i] % bl...)<SUB>81</SUB>> ]
"30064771174" [label = <(OP_REQUIRES,OP_REQUIRES(ctx, padded_shape[1 + i] % block_sh...)<SUB>82</SUB>> ]
"68719476832" [label = <(IDENTIFIER,ctx,OP_REQUIRES(ctx, padded_shape[1 + i] % block_sh...)<SUB>82</SUB>> ]
"30064771175" [label = <(&lt;operator&gt;.equals,padded_shape[1 + i] % block_shape[i] == 0)<SUB>82</SUB>> ]
"30064771176" [label = <(&lt;operator&gt;.modulo,padded_shape[1 + i] % block_shape[i])<SUB>82</SUB>> ]
"30064771177" [label = <(&lt;operator&gt;.indirectIndexAccess,padded_shape[1 + i])<SUB>82</SUB>> ]
"68719476833" [label = <(IDENTIFIER,padded_shape,padded_shape[1 + i] % block_shape[i])<SUB>82</SUB>> ]
"30064771178" [label = <(&lt;operator&gt;.addition,1 + i)<SUB>82</SUB>> ]
"90194313249" [label = <(LITERAL,1,1 + i)<SUB>82</SUB>> ]
"68719476834" [label = <(IDENTIFIER,i,1 + i)<SUB>82</SUB>> ]
"30064771179" [label = <(&lt;operator&gt;.indirectIndexAccess,block_shape[i])<SUB>82</SUB>> ]
"68719476835" [label = <(IDENTIFIER,block_shape,padded_shape[1 + i] % block_shape[i])<SUB>82</SUB>> ]
"68719476836" [label = <(IDENTIFIER,i,padded_shape[1 + i] % block_shape[i])<SUB>82</SUB>> ]
"90194313250" [label = <(LITERAL,0,padded_shape[1 + i] % block_shape[i] == 0)<SUB>82</SUB>> ]
"30064771180" [label = <(InvalidArgument,errors::InvalidArgument(&quot;padded_shape[&quot;, 1 + i,...)<SUB>83</SUB>> ]
"90194313251" [label = <(LITERAL,&quot;padded_shape[&quot;,errors::InvalidArgument(&quot;padded_shape[&quot;, 1 + i,...)<SUB>83</SUB>> ]
"30064771181" [label = <(&lt;operator&gt;.addition,1 + i)<SUB>83</SUB>> ]
"90194313252" [label = <(LITERAL,1,1 + i)<SUB>83</SUB>> ]
"68719476837" [label = <(IDENTIFIER,i,1 + i)<SUB>83</SUB>> ]
"90194313253" [label = <(LITERAL,&quot;]=&quot;,errors::InvalidArgument(&quot;padded_shape[&quot;, 1 + i,...)<SUB>84</SUB>> ]
"30064771182" [label = <(&lt;operator&gt;.indirectIndexAccess,padded_shape[1 + i])<SUB>84</SUB>> ]
"68719476838" [label = <(IDENTIFIER,padded_shape,errors::InvalidArgument(&quot;padded_shape[&quot;, 1 + i,...)<SUB>84</SUB>> ]
"30064771183" [label = <(&lt;operator&gt;.addition,1 + i)<SUB>84</SUB>> ]
"90194313254" [label = <(LITERAL,1,1 + i)<SUB>84</SUB>> ]
"68719476839" [label = <(IDENTIFIER,i,1 + i)<SUB>84</SUB>> ]
"90194313255" [label = <(LITERAL,&quot; is not divisible by block_shape[&quot;,errors::InvalidArgument(&quot;padded_shape[&quot;, 1 + i,...)<SUB>85</SUB>> ]
"68719476840" [label = <(IDENTIFIER,i,errors::InvalidArgument(&quot;padded_shape[&quot;, 1 + i,...)<SUB>85</SUB>> ]
"90194313256" [label = <(LITERAL,&quot;]=&quot;,errors::InvalidArgument(&quot;padded_shape[&quot;, 1 + i,...)<SUB>86</SUB>> ]
"30064771184" [label = <(&lt;operator&gt;.indirectIndexAccess,block_shape[i])<SUB>86</SUB>> ]
"68719476841" [label = <(IDENTIFIER,block_shape,errors::InvalidArgument(&quot;padded_shape[&quot;, 1 + i,...)<SUB>86</SUB>> ]
"68719476842" [label = <(IDENTIFIER,i,errors::InvalidArgument(&quot;padded_shape[&quot;, 1 + i,...)<SUB>86</SUB>> ]
"30064771185" [label = <(&lt;operator&gt;.assignment,reshaped_padded_shape[1 + i * 2] = padded_shape...)<SUB>88</SUB>> ]
"30064771186" [label = <(&lt;operator&gt;.indirectIndexAccess,reshaped_padded_shape[1 + i * 2])<SUB>88</SUB>> ]
"68719476843" [label = <(IDENTIFIER,reshaped_padded_shape,reshaped_padded_shape[1 + i * 2] = padded_shape...)<SUB>88</SUB>> ]
"30064771187" [label = <(&lt;operator&gt;.addition,1 + i * 2)<SUB>88</SUB>> ]
"90194313257" [label = <(LITERAL,1,1 + i * 2)<SUB>88</SUB>> ]
"30064771188" [label = <(&lt;operator&gt;.multiplication,i * 2)<SUB>88</SUB>> ]
"68719476844" [label = <(IDENTIFIER,i,i * 2)<SUB>88</SUB>> ]
"90194313258" [label = <(LITERAL,2,i * 2)<SUB>88</SUB>> ]
"30064771189" [label = <(&lt;operator&gt;.division,padded_shape[1 + i] / block_shape[i])<SUB>88</SUB>> ]
"30064771190" [label = <(&lt;operator&gt;.indirectIndexAccess,padded_shape[1 + i])<SUB>88</SUB>> ]
"68719476845" [label = <(IDENTIFIER,padded_shape,padded_shape[1 + i] / block_shape[i])<SUB>88</SUB>> ]
"30064771191" [label = <(&lt;operator&gt;.addition,1 + i)<SUB>88</SUB>> ]
"90194313259" [label = <(LITERAL,1,1 + i)<SUB>88</SUB>> ]
"68719476846" [label = <(IDENTIFIER,i,1 + i)<SUB>88</SUB>> ]
"30064771192" [label = <(&lt;operator&gt;.indirectIndexAccess,block_shape[i])<SUB>88</SUB>> ]
"68719476847" [label = <(IDENTIFIER,block_shape,padded_shape[1 + i] / block_shape[i])<SUB>88</SUB>> ]
"68719476848" [label = <(IDENTIFIER,i,padded_shape[1 + i] / block_shape[i])<SUB>88</SUB>> ]
"30064771193" [label = <(&lt;operator&gt;.assignment,reshaped_padded_shape[1 + i * 2 + 1] = block_sh...)<SUB>89</SUB>> ]
"30064771194" [label = <(&lt;operator&gt;.indirectIndexAccess,reshaped_padded_shape[1 + i * 2 + 1])<SUB>89</SUB>> ]
"68719476849" [label = <(IDENTIFIER,reshaped_padded_shape,reshaped_padded_shape[1 + i * 2 + 1] = block_sh...)<SUB>89</SUB>> ]
"30064771195" [label = <(&lt;operator&gt;.addition,1 + i * 2 + 1)<SUB>89</SUB>> ]
"30064771196" [label = <(&lt;operator&gt;.addition,1 + i * 2)<SUB>89</SUB>> ]
"90194313260" [label = <(LITERAL,1,1 + i * 2)<SUB>89</SUB>> ]
"30064771197" [label = <(&lt;operator&gt;.multiplication,i * 2)<SUB>89</SUB>> ]
"68719476850" [label = <(IDENTIFIER,i,i * 2)<SUB>89</SUB>> ]
"90194313261" [label = <(LITERAL,2,i * 2)<SUB>89</SUB>> ]
"90194313262" [label = <(LITERAL,1,1 + i * 2 + 1)<SUB>89</SUB>> ]
"30064771198" [label = <(&lt;operator&gt;.indirectIndexAccess,block_shape[i])<SUB>89</SUB>> ]
"68719476851" [label = <(IDENTIFIER,block_shape,reshaped_padded_shape[1 + i * 2 + 1] = block_sh...)<SUB>89</SUB>> ]
"68719476852" [label = <(IDENTIFIER,i,reshaped_padded_shape[1 + i * 2 + 1] = block_sh...)<SUB>89</SUB>> ]
"30064771199" [label = <(copy,std::copy(remainder_shape.begin(), remainder_sh...)<SUB>91</SUB>> ]
"30064771200" [label = <(begin,remainder_shape.begin())<SUB>91</SUB>> ]
"68719476853" [label = <(IDENTIFIER,remainder_shape,remainder_shape.begin())<SUB>91</SUB>> ]
"30064771201" [label = <(end,remainder_shape.end())<SUB>91</SUB>> ]
"68719476854" [label = <(IDENTIFIER,remainder_shape,remainder_shape.end())<SUB>91</SUB>> ]
"30064771202" [label = <(&lt;operator&gt;.addition,reshaped_padded_shape.begin() + 1 + 2 * block_rank)<SUB>92</SUB>> ]
"30064771203" [label = <(&lt;operator&gt;.addition,reshaped_padded_shape.begin() + 1)<SUB>92</SUB>> ]
"30064771204" [label = <(begin,reshaped_padded_shape.begin())<SUB>92</SUB>> ]
"68719476855" [label = <(IDENTIFIER,reshaped_padded_shape,reshaped_padded_shape.begin())<SUB>92</SUB>> ]
"90194313263" [label = <(LITERAL,1,reshaped_padded_shape.begin() + 1)<SUB>92</SUB>> ]
"30064771205" [label = <(&lt;operator&gt;.multiplication,2 * block_rank)<SUB>92</SUB>> ]
"90194313264" [label = <(LITERAL,2,2 * block_rank)<SUB>92</SUB>> ]
"68719476856" [label = <(IDENTIFIER,block_rank,2 * block_rank)<SUB>92</SUB>> ]
"94489280528" [label = <(LOCAL,xla.XlaOp reshaped_padded: xla.XlaOp)<SUB>94</SUB>> ]
"30064771206" [label = <(&lt;operator&gt;.assignment,reshaped_padded = xla::Reshape(padded, reshaped...)<SUB>94</SUB>> ]
"68719476857" [label = <(IDENTIFIER,reshaped_padded,reshaped_padded = xla::Reshape(padded, reshaped...)<SUB>94</SUB>> ]
"30064771207" [label = <(Reshape,xla::Reshape(padded, reshaped_padded_shape))<SUB>94</SUB>> ]
"68719476858" [label = <(IDENTIFIER,padded,xla::Reshape(padded, reshaped_padded_shape))<SUB>94</SUB>> ]
"68719476859" [label = <(IDENTIFIER,reshaped_padded_shape,xla::Reshape(padded, reshaped_padded_shape))<SUB>94</SUB>> ]
"30064771208" [label = <(&lt;operator&gt;.greaterThan,std::vector&lt;int64_t&gt; permutation(reshaped_padde...)<SUB>105</SUB>> ]
"30064771209" [label = <(&lt;operator&gt;.lessThan,std::vector&lt;int64_t)<SUB>105</SUB>> ]
"30064771210" [label = <(&lt;operator&gt;.fieldAccess,std::vector)<SUB>105</SUB>> ]
"68719476860" [label = <(IDENTIFIER,std,std::vector&lt;int64_t)<SUB>105</SUB>> ]
"55834574852" [label = <(FIELD_IDENTIFIER,vector,vector)<SUB>105</SUB>> ]
"68719476861" [label = <(IDENTIFIER,int64_t,std::vector&lt;int64_t)<SUB>105</SUB>> ]
"30064771211" [label = <(permutation,permutation(reshaped_padded_shape.size()))<SUB>105</SUB>> ]
"30064771212" [label = <(size,reshaped_padded_shape.size())<SUB>105</SUB>> ]
"68719476862" [label = <(IDENTIFIER,reshaped_padded_shape,reshaped_padded_shape.size())<SUB>105</SUB>> ]
"47244640260" [label = <(CONTROL_STRUCTURE,FOR,for (int i = 0;i &lt; block_rank;++i))<SUB>106</SUB>> ]
"25769803787" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>106</SUB>> ]
"94489280529" [label = <(LOCAL,int i: int)<SUB>106</SUB>> ]
"30064771213" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>106</SUB>> ]
"68719476863" [label = <(IDENTIFIER,i,i = 0)<SUB>106</SUB>> ]
"90194313265" [label = <(LITERAL,0,i = 0)<SUB>106</SUB>> ]
"30064771214" [label = <(&lt;operator&gt;.lessThan,i &lt; block_rank)<SUB>106</SUB>> ]
"68719476864" [label = <(IDENTIFIER,i,i &lt; block_rank)<SUB>106</SUB>> ]
"68719476865" [label = <(IDENTIFIER,block_rank,i &lt; block_rank)<SUB>106</SUB>> ]
"30064771215" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>106</SUB>> ]
"68719476866" [label = <(IDENTIFIER,i,++i)<SUB>106</SUB>> ]
"25769803788" [label = <(BLOCK,{
    permutation[i] = 1 + 2 * i + 1;
    permu...,{
    permutation[i] = 1 + 2 * i + 1;
    permu...)<SUB>106</SUB>> ]
"30064771216" [label = <(&lt;operator&gt;.assignment,permutation[i] = 1 + 2 * i + 1)<SUB>107</SUB>> ]
"30064771217" [label = <(&lt;operator&gt;.indirectIndexAccess,permutation[i])<SUB>107</SUB>> ]
"68719476867" [label = <(IDENTIFIER,permutation,permutation[i] = 1 + 2 * i + 1)<SUB>107</SUB>> ]
"68719476868" [label = <(IDENTIFIER,i,permutation[i] = 1 + 2 * i + 1)<SUB>107</SUB>> ]
"30064771218" [label = <(&lt;operator&gt;.addition,1 + 2 * i + 1)<SUB>107</SUB>> ]
"30064771219" [label = <(&lt;operator&gt;.addition,1 + 2 * i)<SUB>107</SUB>> ]
"90194313266" [label = <(LITERAL,1,1 + 2 * i)<SUB>107</SUB>> ]
"30064771220" [label = <(&lt;operator&gt;.multiplication,2 * i)<SUB>107</SUB>> ]
"90194313267" [label = <(LITERAL,2,2 * i)<SUB>107</SUB>> ]
"68719476869" [label = <(IDENTIFIER,i,2 * i)<SUB>107</SUB>> ]
"90194313268" [label = <(LITERAL,1,1 + 2 * i + 1)<SUB>107</SUB>> ]
"30064771221" [label = <(&lt;operator&gt;.assignment,permutation[block_rank + 1 + i] = 1 + 2 * i)<SUB>108</SUB>> ]
"30064771222" [label = <(&lt;operator&gt;.indirectIndexAccess,permutation[block_rank + 1 + i])<SUB>108</SUB>> ]
"68719476870" [label = <(IDENTIFIER,permutation,permutation[block_rank + 1 + i] = 1 + 2 * i)<SUB>108</SUB>> ]
"30064771223" [label = <(&lt;operator&gt;.addition,block_rank + 1 + i)<SUB>108</SUB>> ]
"30064771224" [label = <(&lt;operator&gt;.addition,block_rank + 1)<SUB>108</SUB>> ]
"68719476871" [label = <(IDENTIFIER,block_rank,block_rank + 1)<SUB>108</SUB>> ]
"90194313269" [label = <(LITERAL,1,block_rank + 1)<SUB>108</SUB>> ]
"68719476872" [label = <(IDENTIFIER,i,block_rank + 1 + i)<SUB>108</SUB>> ]
"30064771225" [label = <(&lt;operator&gt;.addition,1 + 2 * i)<SUB>108</SUB>> ]
"90194313270" [label = <(LITERAL,1,1 + 2 * i)<SUB>108</SUB>> ]
"30064771226" [label = <(&lt;operator&gt;.multiplication,2 * i)<SUB>108</SUB>> ]
"90194313271" [label = <(LITERAL,2,2 * i)<SUB>108</SUB>> ]
"68719476873" [label = <(IDENTIFIER,i,2 * i)<SUB>108</SUB>> ]
"30064771227" [label = <(&lt;operator&gt;.assignment,permutation[block_rank] = 0)<SUB>110</SUB>> ]
"30064771228" [label = <(&lt;operator&gt;.indirectIndexAccess,permutation[block_rank])<SUB>110</SUB>> ]
"68719476874" [label = <(IDENTIFIER,permutation,permutation[block_rank] = 0)<SUB>110</SUB>> ]
"68719476875" [label = <(IDENTIFIER,block_rank,permutation[block_rank] = 0)<SUB>110</SUB>> ]
"90194313272" [label = <(LITERAL,0,permutation[block_rank] = 0)<SUB>110</SUB>> ]
"30064771229" [label = <(iota,std::iota(permutation.begin() + 1 + block_rank ...)<SUB>111</SUB>> ]
"30064771230" [label = <(&lt;operator&gt;.addition,permutation.begin() + 1 + block_rank * 2)<SUB>111</SUB>> ]
"30064771231" [label = <(&lt;operator&gt;.addition,permutation.begin() + 1)<SUB>111</SUB>> ]
"30064771232" [label = <(begin,permutation.begin())<SUB>111</SUB>> ]
"68719476876" [label = <(IDENTIFIER,permutation,permutation.begin())<SUB>111</SUB>> ]
"90194313273" [label = <(LITERAL,1,permutation.begin() + 1)<SUB>111</SUB>> ]
"30064771233" [label = <(&lt;operator&gt;.multiplication,block_rank * 2)<SUB>111</SUB>> ]
"68719476877" [label = <(IDENTIFIER,block_rank,block_rank * 2)<SUB>111</SUB>> ]
"90194313274" [label = <(LITERAL,2,block_rank * 2)<SUB>111</SUB>> ]
"30064771234" [label = <(end,permutation.end())<SUB>111</SUB>> ]
"68719476878" [label = <(IDENTIFIER,permutation,permutation.end())<SUB>111</SUB>> ]
"30064771235" [label = <(&lt;operator&gt;.addition,1 + block_rank * 2)<SUB>112</SUB>> ]
"90194313275" [label = <(LITERAL,1,1 + block_rank * 2)<SUB>112</SUB>> ]
"30064771236" [label = <(&lt;operator&gt;.multiplication,block_rank * 2)<SUB>112</SUB>> ]
"68719476879" [label = <(IDENTIFIER,block_rank,block_rank * 2)<SUB>112</SUB>> ]
"90194313276" [label = <(LITERAL,2,block_rank * 2)<SUB>112</SUB>> ]
"94489280530" [label = <(LOCAL,xla.XlaOp permuted_reshaped_padded: xla.XlaOp)<SUB>113</SUB>> ]
"30064771237" [label = <(&lt;operator&gt;.assignment,permuted_reshaped_padded =
      xla::Transpose...)<SUB>113</SUB>> ]
"68719476880" [label = <(IDENTIFIER,permuted_reshaped_padded,permuted_reshaped_padded =
      xla::Transpose...)<SUB>113</SUB>> ]
"30064771238" [label = <(Transpose,xla::Transpose(reshaped_padded, permutation))<SUB>114</SUB>> ]
"68719476881" [label = <(IDENTIFIER,reshaped_padded,xla::Transpose(reshaped_padded, permutation))<SUB>114</SUB>> ]
"68719476882" [label = <(IDENTIFIER,permutation,xla::Transpose(reshaped_padded, permutation))<SUB>114</SUB>> ]
"30064771239" [label = <(&lt;operator&gt;.greaterThan,std::vector&lt;int64_t&gt; output_shape(input_rank))<SUB>126</SUB>> ]
"30064771240" [label = <(&lt;operator&gt;.lessThan,std::vector&lt;int64_t)<SUB>126</SUB>> ]
"30064771241" [label = <(&lt;operator&gt;.fieldAccess,std::vector)<SUB>126</SUB>> ]
"68719476883" [label = <(IDENTIFIER,std,std::vector&lt;int64_t)<SUB>126</SUB>> ]
"55834574853" [label = <(FIELD_IDENTIFIER,vector,vector)<SUB>126</SUB>> ]
"68719476884" [label = <(IDENTIFIER,int64_t,std::vector&lt;int64_t)<SUB>126</SUB>> ]
"30064771242" [label = <(output_shape,output_shape(input_rank))<SUB>126</SUB>> ]
"68719476885" [label = <(IDENTIFIER,input_rank,output_shape(input_rank))<SUB>126</SUB>> ]
"30064771243" [label = <(&lt;operator&gt;.assignment,output_shape[0] = output_dim)<SUB>127</SUB>> ]
"30064771244" [label = <(&lt;operator&gt;.indirectIndexAccess,output_shape[0])<SUB>127</SUB>> ]
"68719476886" [label = <(IDENTIFIER,output_shape,output_shape[0] = output_dim)<SUB>127</SUB>> ]
"90194313277" [label = <(LITERAL,0,output_shape[0] = output_dim)<SUB>127</SUB>> ]
"68719476887" [label = <(IDENTIFIER,output_dim,output_shape[0] = output_dim)<SUB>127</SUB>> ]
"47244640261" [label = <(CONTROL_STRUCTURE,FOR,for (int i = 0;i &lt; block_rank;++i))<SUB>128</SUB>> ]
"25769803789" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>128</SUB>> ]
"94489280531" [label = <(LOCAL,int i: int)<SUB>128</SUB>> ]
"30064771245" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>128</SUB>> ]
"68719476888" [label = <(IDENTIFIER,i,i = 0)<SUB>128</SUB>> ]
"90194313278" [label = <(LITERAL,0,i = 0)<SUB>128</SUB>> ]
"30064771246" [label = <(&lt;operator&gt;.lessThan,i &lt; block_rank)<SUB>128</SUB>> ]
"68719476889" [label = <(IDENTIFIER,i,i &lt; block_rank)<SUB>128</SUB>> ]
"68719476890" [label = <(IDENTIFIER,block_rank,i &lt; block_rank)<SUB>128</SUB>> ]
"30064771247" [label = <(&lt;operator&gt;.preIncrement,++i)<SUB>128</SUB>> ]
"68719476891" [label = <(IDENTIFIER,i,++i)<SUB>128</SUB>> ]
"25769803790" [label = <(BLOCK,{
    output_shape[1 + i] = padded_shape[1 + i]...,{
    output_shape[1 + i] = padded_shape[1 + i]...)<SUB>128</SUB>> ]
"30064771248" [label = <(&lt;operator&gt;.assignment,output_shape[1 + i] = padded_shape[1 + i] / blo...)<SUB>129</SUB>> ]
"30064771249" [label = <(&lt;operator&gt;.indirectIndexAccess,output_shape[1 + i])<SUB>129</SUB>> ]
"68719476892" [label = <(IDENTIFIER,output_shape,output_shape[1 + i] = padded_shape[1 + i] / blo...)<SUB>129</SUB>> ]
"30064771250" [label = <(&lt;operator&gt;.addition,1 + i)<SUB>129</SUB>> ]
"90194313279" [label = <(LITERAL,1,1 + i)<SUB>129</SUB>> ]
"68719476893" [label = <(IDENTIFIER,i,1 + i)<SUB>129</SUB>> ]
"30064771251" [label = <(&lt;operator&gt;.division,padded_shape[1 + i] / block_shape[i])<SUB>129</SUB>> ]
"30064771252" [label = <(&lt;operator&gt;.indirectIndexAccess,padded_shape[1 + i])<SUB>129</SUB>> ]
"68719476894" [label = <(IDENTIFIER,padded_shape,padded_shape[1 + i] / block_shape[i])<SUB>129</SUB>> ]
"30064771253" [label = <(&lt;operator&gt;.addition,1 + i)<SUB>129</SUB>> ]
"90194313280" [label = <(LITERAL,1,1 + i)<SUB>129</SUB>> ]
"68719476895" [label = <(IDENTIFIER,i,1 + i)<SUB>129</SUB>> ]
"30064771254" [label = <(&lt;operator&gt;.indirectIndexAccess,block_shape[i])<SUB>129</SUB>> ]
"68719476896" [label = <(IDENTIFIER,block_shape,padded_shape[1 + i] / block_shape[i])<SUB>129</SUB>> ]
"68719476897" [label = <(IDENTIFIER,i,padded_shape[1 + i] / block_shape[i])<SUB>129</SUB>> ]
"30064771255" [label = <(copy,std::copy(remainder_shape.begin(), remainder_sh...)<SUB>131</SUB>> ]
"30064771256" [label = <(begin,remainder_shape.begin())<SUB>131</SUB>> ]
"68719476898" [label = <(IDENTIFIER,remainder_shape,remainder_shape.begin())<SUB>131</SUB>> ]
"30064771257" [label = <(end,remainder_shape.end())<SUB>131</SUB>> ]
"68719476899" [label = <(IDENTIFIER,remainder_shape,remainder_shape.end())<SUB>131</SUB>> ]
"30064771258" [label = <(&lt;operator&gt;.addition,output_shape.begin() + 1 + block_rank)<SUB>132</SUB>> ]
"30064771259" [label = <(&lt;operator&gt;.addition,output_shape.begin() + 1)<SUB>132</SUB>> ]
"30064771260" [label = <(begin,output_shape.begin())<SUB>132</SUB>> ]
"68719476900" [label = <(IDENTIFIER,output_shape,output_shape.begin())<SUB>132</SUB>> ]
"90194313281" [label = <(LITERAL,1,output_shape.begin() + 1)<SUB>132</SUB>> ]
"68719476901" [label = <(IDENTIFIER,block_rank,output_shape.begin() + 1 + block_rank)<SUB>132</SUB>> ]
"94489280532" [label = <(LOCAL,xla.XlaOp output: xla.XlaOp)<SUB>134</SUB>> ]
"30064771261" [label = <(&lt;operator&gt;.assignment,output = xla::Reshape(permuted_reshaped_padded,...)<SUB>134</SUB>> ]
"68719476902" [label = <(IDENTIFIER,output,output = xla::Reshape(permuted_reshaped_padded,...)<SUB>134</SUB>> ]
"30064771262" [label = <(Reshape,xla::Reshape(permuted_reshaped_padded, output_s...)<SUB>134</SUB>> ]
"68719476903" [label = <(IDENTIFIER,permuted_reshaped_padded,xla::Reshape(permuted_reshaped_padded, output_s...)<SUB>134</SUB>> ]
"68719476904" [label = <(IDENTIFIER,output_shape,xla::Reshape(permuted_reshaped_padded, output_s...)<SUB>134</SUB>> ]
"30064771263" [label = <(SetOutput,ctx-&gt;SetOutput(0, output))<SUB>135</SUB>> ]
"68719476905" [label = <(IDENTIFIER,ctx,ctx-&gt;SetOutput(0, output))<SUB>135</SUB>> ]
"90194313282" [label = <(LITERAL,0,ctx-&gt;SetOutput(0, output))<SUB>135</SUB>> ]
"68719476906" [label = <(IDENTIFIER,output,ctx-&gt;SetOutput(0, output))<SUB>135</SUB>> ]
"128849018880" [label = <(METHOD_RETURN,void)<SUB>1</SUB>> ]
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "115964116993"  [ label = "AST: "] 
  "111669149697" -> "115964116994"  [ label = "AST: "] 
  "111669149697" -> "115964116995"  [ label = "AST: "] 
  "111669149697" -> "115964116996"  [ label = "AST: "] 
  "111669149697" -> "115964116997"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "128849018880"  [ label = "AST: "] 
  "25769803777" -> "94489280512"  [ label = "AST: "] 
  "25769803777" -> "30064771072"  [ label = "AST: "] 
  "25769803777" -> "94489280513"  [ label = "AST: "] 
  "25769803777" -> "30064771074"  [ label = "AST: "] 
  "25769803777" -> "94489280514"  [ label = "AST: "] 
  "25769803777" -> "30064771076"  [ label = "AST: "] 
  "25769803777" -> "30064771078"  [ label = "AST: "] 
  "25769803777" -> "94489280515"  [ label = "AST: "] 
  "25769803777" -> "30064771083"  [ label = "AST: "] 
  "25769803777" -> "30064771084"  [ label = "AST: "] 
  "25769803777" -> "30064771086"  [ label = "AST: "] 
  "25769803777" -> "94489280516"  [ label = "AST: "] 
  "25769803777" -> "30064771101"  [ label = "AST: "] 
  "25769803777" -> "94489280517"  [ label = "AST: "] 
  "25769803777" -> "30064771103"  [ label = "AST: "] 
  "25769803777" -> "94489280518"  [ label = "AST: "] 
  "25769803777" -> "30064771109"  [ label = "AST: "] 
  "25769803777" -> "30064771110"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "25769803777" -> "47244640257"  [ label = "AST: "] 
  "25769803777" -> "30064771150"  [ label = "AST: "] 
  "25769803777" -> "94489280524"  [ label = "AST: "] 
  "25769803777" -> "30064771153"  [ label = "AST: "] 
  "25769803777" -> "94489280525"  [ label = "AST: "] 
  "25769803777" -> "30064771155"  [ label = "AST: "] 
  "25769803777" -> "47244640258"  [ label = "AST: "] 
  "25769803777" -> "94489280526"  [ label = "AST: "] 
  "25769803777" -> "30064771161"  [ label = "AST: "] 
  "25769803777" -> "30064771164"  [ label = "AST: "] 
  "25769803777" -> "30064771169"  [ label = "AST: "] 
  "25769803777" -> "47244640259"  [ label = "AST: "] 
  "25769803777" -> "30064771199"  [ label = "AST: "] 
  "25769803777" -> "94489280528"  [ label = "AST: "] 
  "25769803777" -> "30064771206"  [ label = "AST: "] 
  "25769803777" -> "30064771208"  [ label = "AST: "] 
  "25769803777" -> "47244640260"  [ label = "AST: "] 
  "25769803777" -> "30064771227"  [ label = "AST: "] 
  "25769803777" -> "30064771229"  [ label = "AST: "] 
  "25769803777" -> "94489280530"  [ label = "AST: "] 
  "25769803777" -> "30064771237"  [ label = "AST: "] 
  "25769803777" -> "30064771239"  [ label = "AST: "] 
  "25769803777" -> "30064771243"  [ label = "AST: "] 
  "25769803777" -> "47244640261"  [ label = "AST: "] 
  "25769803777" -> "30064771255"  [ label = "AST: "] 
  "25769803777" -> "94489280532"  [ label = "AST: "] 
  "25769803777" -> "30064771261"  [ label = "AST: "] 
  "25769803777" -> "30064771263"  [ label = "AST: "] 
  "30064771072" -> "68719476736"  [ label = "AST: "] 
  "30064771072" -> "30064771073"  [ label = "AST: "] 
  "30064771073" -> "68719476737"  [ label = "AST: "] 
  "30064771074" -> "68719476738"  [ label = "AST: "] 
  "30064771074" -> "30064771075"  [ label = "AST: "] 
  "30064771075" -> "68719476739"  [ label = "AST: "] 
  "30064771076" -> "68719476740"  [ label = "AST: "] 
  "30064771076" -> "30064771077"  [ label = "AST: "] 
  "30064771077" -> "68719476741"  [ label = "AST: "] 
  "30064771078" -> "68719476742"  [ label = "AST: "] 
  "30064771078" -> "30064771079"  [ label = "AST: "] 
  "30064771078" -> "30064771081"  [ label = "AST: "] 
  "30064771079" -> "68719476743"  [ label = "AST: "] 
  "30064771079" -> "30064771080"  [ label = "AST: "] 
  "30064771080" -> "90194313216"  [ label = "AST: "] 
  "30064771080" -> "68719476744"  [ label = "AST: "] 
  "30064771081" -> "90194313217"  [ label = "AST: "] 
  "30064771081" -> "30064771082"  [ label = "AST: "] 
  "30064771081" -> "90194313219"  [ label = "AST: "] 
  "30064771081" -> "68719476746"  [ label = "AST: "] 
  "30064771082" -> "90194313218"  [ label = "AST: "] 
  "30064771082" -> "68719476745"  [ label = "AST: "] 
  "30064771083" -> "68719476747"  [ label = "AST: "] 
  "30064771084" -> "68719476748"  [ label = "AST: "] 
  "30064771084" -> "30064771085"  [ label = "AST: "] 
  "30064771085" -> "90194313220"  [ label = "AST: "] 
  "30064771085" -> "68719476749"  [ label = "AST: "] 
  "30064771086" -> "68719476750"  [ label = "AST: "] 
  "30064771086" -> "30064771087"  [ label = "AST: "] 
  "30064771086" -> "30064771098"  [ label = "AST: "] 
  "30064771087" -> "30064771088"  [ label = "AST: "] 
  "30064771087" -> "30064771095"  [ label = "AST: "] 
  "30064771088" -> "30064771089"  [ label = "AST: "] 
  "30064771088" -> "30064771092"  [ label = "AST: "] 
  "30064771089" -> "30064771090"  [ label = "AST: "] 
  "30064771089" -> "90194313221"  [ label = "AST: "] 
  "30064771090" -> "30064771091"  [ label = "AST: "] 
  "30064771091" -> "68719476751"  [ label = "AST: "] 
  "30064771092" -> "68719476752"  [ label = "AST: "] 
  "30064771092" -> "30064771093"  [ label = "AST: "] 
  "30064771093" -> "30064771094"  [ label = "AST: "] 
  "30064771093" -> "90194313222"  [ label = "AST: "] 
  "30064771094" -> "68719476753"  [ label = "AST: "] 
  "30064771095" -> "90194313223"  [ label = "AST: "] 
  "30064771095" -> "30064771096"  [ label = "AST: "] 
  "30064771096" -> "30064771097"  [ label = "AST: "] 
  "30064771096" -> "90194313224"  [ label = "AST: "] 
  "30064771097" -> "68719476754"  [ label = "AST: "] 
  "30064771098" -> "90194313225"  [ label = "AST: "] 
  "30064771098" -> "68719476755"  [ label = "AST: "] 
  "30064771098" -> "90194313226"  [ label = "AST: "] 
  "30064771098" -> "30064771099"  [ label = "AST: "] 
  "30064771099" -> "30064771100"  [ label = "AST: "] 
  "30064771100" -> "68719476756"  [ label = "AST: "] 
  "30064771101" -> "68719476757"  [ label = "AST: "] 
  "30064771101" -> "30064771102"  [ label = "AST: "] 
  "30064771102" -> "68719476758"  [ label = "AST: "] 
  "30064771103" -> "30064771104"  [ label = "AST: "] 
  "30064771103" -> "30064771106"  [ label = "AST: "] 
  "30064771104" -> "30064771105"  [ label = "AST: "] 
  "30064771104" -> "68719476760"  [ label = "AST: "] 
  "30064771105" -> "68719476759"  [ label = "AST: "] 
  "30064771105" -> "55834574848"  [ label = "AST: "] 
  "30064771106" -> "30064771107"  [ label = "AST: "] 
  "30064771106" -> "30064771108"  [ label = "AST: "] 
  "30064771107" -> "68719476761"  [ label = "AST: "] 
  "30064771108" -> "68719476762"  [ label = "AST: "] 
  "30064771109" -> "68719476763"  [ label = "AST: "] 
  "30064771109" -> "90194313227"  [ label = "AST: "] 
  "30064771110" -> "68719476764"  [ label = "AST: "] 
  "47244640256" -> "25769803778"  [ label = "AST: "] 
  "47244640256" -> "30064771112"  [ label = "AST: "] 
  "47244640256" -> "30064771113"  [ label = "AST: "] 
  "47244640256" -> "25769803779"  [ label = "AST: "] 
  "25769803778" -> "94489280519"  [ label = "AST: "] 
  "25769803778" -> "30064771111"  [ label = "AST: "] 
  "30064771111" -> "68719476765"  [ label = "AST: "] 
  "30064771111" -> "90194313228"  [ label = "AST: "] 
  "30064771112" -> "68719476766"  [ label = "AST: "] 
  "30064771112" -> "68719476767"  [ label = "AST: "] 
  "30064771113" -> "68719476768"  [ label = "AST: "] 
  "25769803779" -> "94489280520"  [ label = "AST: "] 
  "25769803779" -> "30064771114"  [ label = "AST: "] 
  "25769803779" -> "94489280521"  [ label = "AST: "] 
  "25769803779" -> "30064771116"  [ label = "AST: "] 
  "25769803779" -> "94489280522"  [ label = "AST: "] 
  "25769803779" -> "30064771121"  [ label = "AST: "] 
  "25769803779" -> "30064771126"  [ label = "AST: "] 
  "25769803779" -> "30064771131"  [ label = "AST: "] 
  "25769803779" -> "30064771136"  [ label = "AST: "] 
  "25769803779" -> "30064771137"  [ label = "AST: "] 
  "25769803779" -> "30064771138"  [ label = "AST: "] 
  "25769803779" -> "30064771142"  [ label = "AST: "] 
  "30064771114" -> "68719476769"  [ label = "AST: "] 
  "30064771114" -> "30064771115"  [ label = "AST: "] 
  "30064771115" -> "68719476770"  [ label = "AST: "] 
  "30064771116" -> "68719476771"  [ label = "AST: "] 
  "30064771116" -> "30064771117"  [ label = "AST: "] 
  "30064771117" -> "30064771118"  [ label = "AST: "] 
  "30064771117" -> "25769803780"  [ label = "AST: "] 
  "30064771118" -> "30064771119"  [ label = "AST: "] 
  "30064771118" -> "68719476773"  [ label = "AST: "] 
  "30064771119" -> "68719476772"  [ label = "AST: "] 
  "30064771119" -> "55834574849"  [ label = "AST: "] 
  "25769803780" -> "30064771120"  [ label = "AST: "] 
  "30064771120" -> "68719476774"  [ label = "AST: "] 
  "30064771120" -> "90194313229"  [ label = "AST: "] 
  "30064771121" -> "68719476775"  [ label = "AST: "] 
  "30064771121" -> "30064771122"  [ label = "AST: "] 
  "30064771122" -> "30064771123"  [ label = "AST: "] 
  "30064771122" -> "25769803781"  [ label = "AST: "] 
  "30064771123" -> "30064771124"  [ label = "AST: "] 
  "30064771123" -> "68719476777"  [ label = "AST: "] 
  "30064771124" -> "68719476776"  [ label = "AST: "] 
  "30064771124" -> "55834574850"  [ label = "AST: "] 
  "25769803781" -> "30064771125"  [ label = "AST: "] 
  "30064771125" -> "68719476778"  [ label = "AST: "] 
  "30064771125" -> "90194313230"  [ label = "AST: "] 
  "30064771126" -> "68719476779"  [ label = "AST: "] 
  "30064771126" -> "30064771127"  [ label = "AST: "] 
  "30064771126" -> "30064771130"  [ label = "AST: "] 
  "30064771127" -> "30064771128"  [ label = "AST: "] 
  "30064771127" -> "30064771129"  [ label = "AST: "] 
  "30064771128" -> "68719476780"  [ label = "AST: "] 
  "30064771128" -> "90194313231"  [ label = "AST: "] 
  "30064771129" -> "68719476781"  [ label = "AST: "] 
  "30064771129" -> "90194313232"  [ label = "AST: "] 
  "30064771130" -> "90194313233"  [ label = "AST: "] 
  "30064771131" -> "68719476782"  [ label = "AST: "] 
  "30064771131" -> "30064771132"  [ label = "AST: "] 
  "30064771131" -> "30064771134"  [ label = "AST: "] 
  "30064771132" -> "30064771133"  [ label = "AST: "] 
  "30064771132" -> "90194313234"  [ label = "AST: "] 
  "30064771133" -> "68719476783"  [ label = "AST: "] 
  "30064771133" -> "68719476784"  [ label = "AST: "] 
  "30064771134" -> "90194313235"  [ label = "AST: "] 
  "30064771134" -> "30064771135"  [ label = "AST: "] 
  "30064771134" -> "90194313236"  [ label = "AST: "] 
  "30064771134" -> "68719476787"  [ label = "AST: "] 
  "30064771134" -> "90194313237"  [ label = "AST: "] 
  "30064771135" -> "68719476785"  [ label = "AST: "] 
  "30064771135" -> "68719476786"  [ label = "AST: "] 
  "30064771136" -> "68719476788"  [ label = "AST: "] 
  "30064771136" -> "68719476789"  [ label = "AST: "] 
  "30064771137" -> "68719476790"  [ label = "AST: "] 
  "30064771137" -> "68719476791"  [ label = "AST: "] 
  "30064771138" -> "30064771139"  [ label = "AST: "] 
  "30064771138" -> "30064771141"  [ label = "AST: "] 
  "30064771139" -> "68719476792"  [ label = "AST: "] 
  "30064771139" -> "30064771140"  [ label = "AST: "] 
  "30064771140" -> "90194313238"  [ label = "AST: "] 
  "30064771140" -> "68719476793"  [ label = "AST: "] 
  "30064771141" -> "68719476794"  [ label = "AST: "] 
  "30064771141" -> "68719476795"  [ label = "AST: "] 
  "30064771142" -> "68719476796"  [ label = "AST: "] 
  "30064771142" -> "30064771143"  [ label = "AST: "] 
  "30064771143" -> "68719476797"  [ label = "AST: "] 
  "30064771143" -> "30064771144"  [ label = "AST: "] 
  "30064771144" -> "68719476798"  [ label = "AST: "] 
  "30064771144" -> "68719476799"  [ label = "AST: "] 
  "47244640257" -> "25769803782"  [ label = "AST: "] 
  "47244640257" -> "30064771146"  [ label = "AST: "] 
  "47244640257" -> "30064771148"  [ label = "AST: "] 
  "47244640257" -> "25769803783"  [ label = "AST: "] 
  "25769803782" -> "94489280523"  [ label = "AST: "] 
  "25769803782" -> "30064771145"  [ label = "AST: "] 
  "30064771145" -> "68719476800"  [ label = "AST: "] 
  "30064771145" -> "90194313239"  [ label = "AST: "] 
  "30064771146" -> "68719476801"  [ label = "AST: "] 
  "30064771146" -> "30064771147"  [ label = "AST: "] 
  "30064771147" -> "68719476802"  [ label = "AST: "] 
  "30064771148" -> "68719476803"  [ label = "AST: "] 
  "25769803783" -> "30064771149"  [ label = "AST: "] 
  "30064771149" -> "68719476804"  [ label = "AST: "] 
  "30064771150" -> "68719476805"  [ label = "AST: "] 
  "30064771150" -> "30064771151"  [ label = "AST: "] 
  "30064771150" -> "30064771152"  [ label = "AST: "] 
  "30064771151" -> "68719476806"  [ label = "AST: "] 
  "30064771151" -> "90194313240"  [ label = "AST: "] 
  "30064771152" -> "90194313241"  [ label = "AST: "] 
  "30064771153" -> "68719476807"  [ label = "AST: "] 
  "30064771153" -> "30064771154"  [ label = "AST: "] 
  "30064771154" -> "68719476808"  [ label = "AST: "] 
  "30064771154" -> "90194313242"  [ label = "AST: "] 
  "30064771155" -> "68719476809"  [ label = "AST: "] 
  "30064771155" -> "30064771156"  [ label = "AST: "] 
  "30064771156" -> "68719476810"  [ label = "AST: "] 
  "30064771156" -> "68719476811"  [ label = "AST: "] 
  "47244640258" -> "30064771157"  [ label = "AST: "] 
  "47244640258" -> "25769803784"  [ label = "AST: "] 
  "30064771157" -> "68719476812"  [ label = "AST: "] 
  "30064771157" -> "90194313243"  [ label = "AST: "] 
  "25769803784" -> "30064771158"  [ label = "AST: "] 
  "30064771158" -> "68719476813"  [ label = "AST: "] 
  "30064771158" -> "30064771159"  [ label = "AST: "] 
  "30064771158" -> "30064771160"  [ label = "AST: "] 
  "30064771159" -> "68719476814"  [ label = "AST: "] 
  "30064771159" -> "90194313244"  [ label = "AST: "] 
  "30064771160" -> "90194313245"  [ label = "AST: "] 
  "30064771160" -> "68719476815"  [ label = "AST: "] 
  "30064771160" -> "90194313246"  [ label = "AST: "] 
  "30064771160" -> "68719476816"  [ label = "AST: "] 
  "30064771161" -> "68719476817"  [ label = "AST: "] 
  "30064771161" -> "30064771162"  [ label = "AST: "] 
  "30064771162" -> "68719476818"  [ label = "AST: "] 
  "30064771162" -> "30064771163"  [ label = "AST: "] 
  "30064771162" -> "68719476821"  [ label = "AST: "] 
  "30064771163" -> "68719476819"  [ label = "AST: "] 
  "30064771163" -> "68719476820"  [ label = "AST: "] 
  "30064771164" -> "30064771165"  [ label = "AST: "] 
  "30064771164" -> "30064771167"  [ label = "AST: "] 
  "30064771165" -> "30064771166"  [ label = "AST: "] 
  "30064771165" -> "68719476823"  [ label = "AST: "] 
  "30064771166" -> "68719476822"  [ label = "AST: "] 
  "30064771166" -> "55834574851"  [ label = "AST: "] 
  "30064771167" -> "30064771168"  [ label = "AST: "] 
  "30064771168" -> "68719476824"  [ label = "AST: "] 
  "30064771168" -> "68719476825"  [ label = "AST: "] 
  "30064771169" -> "30064771170"  [ label = "AST: "] 
  "30064771169" -> "68719476827"  [ label = "AST: "] 
  "30064771170" -> "68719476826"  [ label = "AST: "] 
  "30064771170" -> "90194313247"  [ label = "AST: "] 
  "47244640259" -> "25769803785"  [ label = "AST: "] 
  "47244640259" -> "30064771172"  [ label = "AST: "] 
  "47244640259" -> "30064771173"  [ label = "AST: "] 
  "47244640259" -> "25769803786"  [ label = "AST: "] 
  "25769803785" -> "94489280527"  [ label = "AST: "] 
  "25769803785" -> "30064771171"  [ label = "AST: "] 
  "30064771171" -> "68719476828"  [ label = "AST: "] 
  "30064771171" -> "90194313248"  [ label = "AST: "] 
  "30064771172" -> "68719476829"  [ label = "AST: "] 
  "30064771172" -> "68719476830"  [ label = "AST: "] 
  "30064771173" -> "68719476831"  [ label = "AST: "] 
  "25769803786" -> "30064771174"  [ label = "AST: "] 
  "25769803786" -> "30064771185"  [ label = "AST: "] 
  "25769803786" -> "30064771193"  [ label = "AST: "] 
  "30064771174" -> "68719476832"  [ label = "AST: "] 
  "30064771174" -> "30064771175"  [ label = "AST: "] 
  "30064771174" -> "30064771180"  [ label = "AST: "] 
  "30064771175" -> "30064771176"  [ label = "AST: "] 
  "30064771175" -> "90194313250"  [ label = "AST: "] 
  "30064771176" -> "30064771177"  [ label = "AST: "] 
  "30064771176" -> "30064771179"  [ label = "AST: "] 
  "30064771177" -> "68719476833"  [ label = "AST: "] 
  "30064771177" -> "30064771178"  [ label = "AST: "] 
  "30064771178" -> "90194313249"  [ label = "AST: "] 
  "30064771178" -> "68719476834"  [ label = "AST: "] 
  "30064771179" -> "68719476835"  [ label = "AST: "] 
  "30064771179" -> "68719476836"  [ label = "AST: "] 
  "30064771180" -> "90194313251"  [ label = "AST: "] 
  "30064771180" -> "30064771181"  [ label = "AST: "] 
  "30064771180" -> "90194313253"  [ label = "AST: "] 
  "30064771180" -> "30064771182"  [ label = "AST: "] 
  "30064771180" -> "90194313255"  [ label = "AST: "] 
  "30064771180" -> "68719476840"  [ label = "AST: "] 
  "30064771180" -> "90194313256"  [ label = "AST: "] 
  "30064771180" -> "30064771184"  [ label = "AST: "] 
  "30064771181" -> "90194313252"  [ label = "AST: "] 
  "30064771181" -> "68719476837"  [ label = "AST: "] 
  "30064771182" -> "68719476838"  [ label = "AST: "] 
  "30064771182" -> "30064771183"  [ label = "AST: "] 
  "30064771183" -> "90194313254"  [ label = "AST: "] 
  "30064771183" -> "68719476839"  [ label = "AST: "] 
  "30064771184" -> "68719476841"  [ label = "AST: "] 
  "30064771184" -> "68719476842"  [ label = "AST: "] 
  "30064771185" -> "30064771186"  [ label = "AST: "] 
  "30064771185" -> "30064771189"  [ label = "AST: "] 
  "30064771186" -> "68719476843"  [ label = "AST: "] 
  "30064771186" -> "30064771187"  [ label = "AST: "] 
  "30064771187" -> "90194313257"  [ label = "AST: "] 
  "30064771187" -> "30064771188"  [ label = "AST: "] 
  "30064771188" -> "68719476844"  [ label = "AST: "] 
  "30064771188" -> "90194313258"  [ label = "AST: "] 
  "30064771189" -> "30064771190"  [ label = "AST: "] 
  "30064771189" -> "30064771192"  [ label = "AST: "] 
  "30064771190" -> "68719476845"  [ label = "AST: "] 
  "30064771190" -> "30064771191"  [ label = "AST: "] 
  "30064771191" -> "90194313259"  [ label = "AST: "] 
  "30064771191" -> "68719476846"  [ label = "AST: "] 
  "30064771192" -> "68719476847"  [ label = "AST: "] 
  "30064771192" -> "68719476848"  [ label = "AST: "] 
  "30064771193" -> "30064771194"  [ label = "AST: "] 
  "30064771193" -> "30064771198"  [ label = "AST: "] 
  "30064771194" -> "68719476849"  [ label = "AST: "] 
  "30064771194" -> "30064771195"  [ label = "AST: "] 
  "30064771195" -> "30064771196"  [ label = "AST: "] 
  "30064771195" -> "90194313262"  [ label = "AST: "] 
  "30064771196" -> "90194313260"  [ label = "AST: "] 
  "30064771196" -> "30064771197"  [ label = "AST: "] 
  "30064771197" -> "68719476850"  [ label = "AST: "] 
  "30064771197" -> "90194313261"  [ label = "AST: "] 
  "30064771198" -> "68719476851"  [ label = "AST: "] 
  "30064771198" -> "68719476852"  [ label = "AST: "] 
  "30064771199" -> "30064771200"  [ label = "AST: "] 
  "30064771199" -> "30064771201"  [ label = "AST: "] 
  "30064771199" -> "30064771202"  [ label = "AST: "] 
  "30064771200" -> "68719476853"  [ label = "AST: "] 
  "30064771201" -> "68719476854"  [ label = "AST: "] 
  "30064771202" -> "30064771203"  [ label = "AST: "] 
  "30064771202" -> "30064771205"  [ label = "AST: "] 
  "30064771203" -> "30064771204"  [ label = "AST: "] 
  "30064771203" -> "90194313263"  [ label = "AST: "] 
  "30064771204" -> "68719476855"  [ label = "AST: "] 
  "30064771205" -> "90194313264"  [ label = "AST: "] 
  "30064771205" -> "68719476856"  [ label = "AST: "] 
  "30064771206" -> "68719476857"  [ label = "AST: "] 
  "30064771206" -> "30064771207"  [ label = "AST: "] 
  "30064771207" -> "68719476858"  [ label = "AST: "] 
  "30064771207" -> "68719476859"  [ label = "AST: "] 
  "30064771208" -> "30064771209"  [ label = "AST: "] 
  "30064771208" -> "30064771211"  [ label = "AST: "] 
  "30064771209" -> "30064771210"  [ label = "AST: "] 
  "30064771209" -> "68719476861"  [ label = "AST: "] 
  "30064771210" -> "68719476860"  [ label = "AST: "] 
  "30064771210" -> "55834574852"  [ label = "AST: "] 
  "30064771211" -> "30064771212"  [ label = "AST: "] 
  "30064771212" -> "68719476862"  [ label = "AST: "] 
  "47244640260" -> "25769803787"  [ label = "AST: "] 
  "47244640260" -> "30064771214"  [ label = "AST: "] 
  "47244640260" -> "30064771215"  [ label = "AST: "] 
  "47244640260" -> "25769803788"  [ label = "AST: "] 
  "25769803787" -> "94489280529"  [ label = "AST: "] 
  "25769803787" -> "30064771213"  [ label = "AST: "] 
  "30064771213" -> "68719476863"  [ label = "AST: "] 
  "30064771213" -> "90194313265"  [ label = "AST: "] 
  "30064771214" -> "68719476864"  [ label = "AST: "] 
  "30064771214" -> "68719476865"  [ label = "AST: "] 
  "30064771215" -> "68719476866"  [ label = "AST: "] 
  "25769803788" -> "30064771216"  [ label = "AST: "] 
  "25769803788" -> "30064771221"  [ label = "AST: "] 
  "30064771216" -> "30064771217"  [ label = "AST: "] 
  "30064771216" -> "30064771218"  [ label = "AST: "] 
  "30064771217" -> "68719476867"  [ label = "AST: "] 
  "30064771217" -> "68719476868"  [ label = "AST: "] 
  "30064771218" -> "30064771219"  [ label = "AST: "] 
  "30064771218" -> "90194313268"  [ label = "AST: "] 
  "30064771219" -> "90194313266"  [ label = "AST: "] 
  "30064771219" -> "30064771220"  [ label = "AST: "] 
  "30064771220" -> "90194313267"  [ label = "AST: "] 
  "30064771220" -> "68719476869"  [ label = "AST: "] 
  "30064771221" -> "30064771222"  [ label = "AST: "] 
  "30064771221" -> "30064771225"  [ label = "AST: "] 
  "30064771222" -> "68719476870"  [ label = "AST: "] 
  "30064771222" -> "30064771223"  [ label = "AST: "] 
  "30064771223" -> "30064771224"  [ label = "AST: "] 
  "30064771223" -> "68719476872"  [ label = "AST: "] 
  "30064771224" -> "68719476871"  [ label = "AST: "] 
  "30064771224" -> "90194313269"  [ label = "AST: "] 
  "30064771225" -> "90194313270"  [ label = "AST: "] 
  "30064771225" -> "30064771226"  [ label = "AST: "] 
  "30064771226" -> "90194313271"  [ label = "AST: "] 
  "30064771226" -> "68719476873"  [ label = "AST: "] 
  "30064771227" -> "30064771228"  [ label = "AST: "] 
  "30064771227" -> "90194313272"  [ label = "AST: "] 
  "30064771228" -> "68719476874"  [ label = "AST: "] 
  "30064771228" -> "68719476875"  [ label = "AST: "] 
  "30064771229" -> "30064771230"  [ label = "AST: "] 
  "30064771229" -> "30064771234"  [ label = "AST: "] 
  "30064771229" -> "30064771235"  [ label = "AST: "] 
  "30064771230" -> "30064771231"  [ label = "AST: "] 
  "30064771230" -> "30064771233"  [ label = "AST: "] 
  "30064771231" -> "30064771232"  [ label = "AST: "] 
  "30064771231" -> "90194313273"  [ label = "AST: "] 
  "30064771232" -> "68719476876"  [ label = "AST: "] 
  "30064771233" -> "68719476877"  [ label = "AST: "] 
  "30064771233" -> "90194313274"  [ label = "AST: "] 
  "30064771234" -> "68719476878"  [ label = "AST: "] 
  "30064771235" -> "90194313275"  [ label = "AST: "] 
  "30064771235" -> "30064771236"  [ label = "AST: "] 
  "30064771236" -> "68719476879"  [ label = "AST: "] 
  "30064771236" -> "90194313276"  [ label = "AST: "] 
  "30064771237" -> "68719476880"  [ label = "AST: "] 
  "30064771237" -> "30064771238"  [ label = "AST: "] 
  "30064771238" -> "68719476881"  [ label = "AST: "] 
  "30064771238" -> "68719476882"  [ label = "AST: "] 
  "30064771239" -> "30064771240"  [ label = "AST: "] 
  "30064771239" -> "30064771242"  [ label = "AST: "] 
  "30064771240" -> "30064771241"  [ label = "AST: "] 
  "30064771240" -> "68719476884"  [ label = "AST: "] 
  "30064771241" -> "68719476883"  [ label = "AST: "] 
  "30064771241" -> "55834574853"  [ label = "AST: "] 
  "30064771242" -> "68719476885"  [ label = "AST: "] 
  "30064771243" -> "30064771244"  [ label = "AST: "] 
  "30064771243" -> "68719476887"  [ label = "AST: "] 
  "30064771244" -> "68719476886"  [ label = "AST: "] 
  "30064771244" -> "90194313277"  [ label = "AST: "] 
  "47244640261" -> "25769803789"  [ label = "AST: "] 
  "47244640261" -> "30064771246"  [ label = "AST: "] 
  "47244640261" -> "30064771247"  [ label = "AST: "] 
  "47244640261" -> "25769803790"  [ label = "AST: "] 
  "25769803789" -> "94489280531"  [ label = "AST: "] 
  "25769803789" -> "30064771245"  [ label = "AST: "] 
  "30064771245" -> "68719476888"  [ label = "AST: "] 
  "30064771245" -> "90194313278"  [ label = "AST: "] 
  "30064771246" -> "68719476889"  [ label = "AST: "] 
  "30064771246" -> "68719476890"  [ label = "AST: "] 
  "30064771247" -> "68719476891"  [ label = "AST: "] 
  "25769803790" -> "30064771248"  [ label = "AST: "] 
  "30064771248" -> "30064771249"  [ label = "AST: "] 
  "30064771248" -> "30064771251"  [ label = "AST: "] 
  "30064771249" -> "68719476892"  [ label = "AST: "] 
  "30064771249" -> "30064771250"  [ label = "AST: "] 
  "30064771250" -> "90194313279"  [ label = "AST: "] 
  "30064771250" -> "68719476893"  [ label = "AST: "] 
  "30064771251" -> "30064771252"  [ label = "AST: "] 
  "30064771251" -> "30064771254"  [ label = "AST: "] 
  "30064771252" -> "68719476894"  [ label = "AST: "] 
  "30064771252" -> "30064771253"  [ label = "AST: "] 
  "30064771253" -> "90194313280"  [ label = "AST: "] 
  "30064771253" -> "68719476895"  [ label = "AST: "] 
  "30064771254" -> "68719476896"  [ label = "AST: "] 
  "30064771254" -> "68719476897"  [ label = "AST: "] 
  "30064771255" -> "30064771256"  [ label = "AST: "] 
  "30064771255" -> "30064771257"  [ label = "AST: "] 
  "30064771255" -> "30064771258"  [ label = "AST: "] 
  "30064771256" -> "68719476898"  [ label = "AST: "] 
  "30064771257" -> "68719476899"  [ label = "AST: "] 
  "30064771258" -> "30064771259"  [ label = "AST: "] 
  "30064771258" -> "68719476901"  [ label = "AST: "] 
  "30064771259" -> "30064771260"  [ label = "AST: "] 
  "30064771259" -> "90194313281"  [ label = "AST: "] 
  "30064771260" -> "68719476900"  [ label = "AST: "] 
  "30064771261" -> "68719476902"  [ label = "AST: "] 
  "30064771261" -> "30064771262"  [ label = "AST: "] 
  "30064771262" -> "68719476903"  [ label = "AST: "] 
  "30064771262" -> "68719476904"  [ label = "AST: "] 
  "30064771263" -> "68719476905"  [ label = "AST: "] 
  "30064771263" -> "90194313282"  [ label = "AST: "] 
  "30064771263" -> "68719476906"  [ label = "AST: "] 
  "30064771072" -> "30064771075"  [ label = "CFG: "] 
  "30064771074" -> "30064771077"  [ label = "CFG: "] 
  "30064771076" -> "30064771080"  [ label = "CFG: "] 
  "30064771078" -> "30064771083"  [ label = "CFG: "] 
  "30064771083" -> "30064771085"  [ label = "CFG: "] 
  "30064771084" -> "30064771091"  [ label = "CFG: "] 
  "30064771086" -> "30064771102"  [ label = "CFG: "] 
  "30064771101" -> "55834574848"  [ label = "CFG: "] 
  "30064771103" -> "30064771109"  [ label = "CFG: "] 
  "30064771109" -> "30064771110"  [ label = "CFG: "] 
  "30064771110" -> "30064771111"  [ label = "CFG: "] 
  "30064771150" -> "30064771154"  [ label = "CFG: "] 
  "30064771153" -> "30064771156"  [ label = "CFG: "] 
  "30064771155" -> "30064771157"  [ label = "CFG: "] 
  "30064771161" -> "55834574851"  [ label = "CFG: "] 
  "30064771164" -> "30064771170"  [ label = "CFG: "] 
  "30064771169" -> "30064771171"  [ label = "CFG: "] 
  "30064771199" -> "30064771207"  [ label = "CFG: "] 
  "30064771206" -> "55834574852"  [ label = "CFG: "] 
  "30064771208" -> "30064771213"  [ label = "CFG: "] 
  "30064771227" -> "30064771232"  [ label = "CFG: "] 
  "30064771229" -> "30064771238"  [ label = "CFG: "] 
  "30064771237" -> "55834574853"  [ label = "CFG: "] 
  "30064771239" -> "30064771244"  [ label = "CFG: "] 
  "30064771243" -> "30064771245"  [ label = "CFG: "] 
  "30064771255" -> "30064771262"  [ label = "CFG: "] 
  "30064771261" -> "30064771263"  [ label = "CFG: "] 
  "30064771263" -> "128849018880"  [ label = "CFG: "] 
  "30064771073" -> "30064771072"  [ label = "CFG: "] 
  "30064771075" -> "30064771074"  [ label = "CFG: "] 
  "30064771077" -> "30064771076"  [ label = "CFG: "] 
  "30064771079" -> "30064771082"  [ label = "CFG: "] 
  "30064771081" -> "30064771078"  [ label = "CFG: "] 
  "30064771085" -> "30064771084"  [ label = "CFG: "] 
  "30064771087" -> "30064771100"  [ label = "CFG: "] 
  "30064771098" -> "30064771086"  [ label = "CFG: "] 
  "30064771102" -> "30064771101"  [ label = "CFG: "] 
  "30064771104" -> "30064771107"  [ label = "CFG: "] 
  "30064771106" -> "30064771103"  [ label = "CFG: "] 
  "30064771112" -> "30064771115"  [ label = "CFG: "] 
  "30064771112" -> "30064771145"  [ label = "CFG: "] 
  "30064771113" -> "30064771112"  [ label = "CFG: "] 
  "30064771146" -> "30064771149"  [ label = "CFG: "] 
  "30064771146" -> "30064771151"  [ label = "CFG: "] 
  "30064771148" -> "30064771147"  [ label = "CFG: "] 
  "30064771151" -> "30064771152"  [ label = "CFG: "] 
  "30064771152" -> "30064771150"  [ label = "CFG: "] 
  "30064771154" -> "30064771153"  [ label = "CFG: "] 
  "30064771156" -> "30064771155"  [ label = "CFG: "] 
  "30064771157" -> "30064771159"  [ label = "CFG: "] 
  "30064771157" -> "30064771163"  [ label = "CFG: "] 
  "30064771162" -> "30064771161"  [ label = "CFG: "] 
  "30064771165" -> "30064771168"  [ label = "CFG: "] 
  "30064771167" -> "30064771164"  [ label = "CFG: "] 
  "30064771170" -> "30064771169"  [ label = "CFG: "] 
  "30064771172" -> "30064771178"  [ label = "CFG: "] 
  "30064771172" -> "30064771200"  [ label = "CFG: "] 
  "30064771173" -> "30064771172"  [ label = "CFG: "] 
  "30064771200" -> "30064771201"  [ label = "CFG: "] 
  "30064771201" -> "30064771204"  [ label = "CFG: "] 
  "30064771202" -> "30064771199"  [ label = "CFG: "] 
  "30064771207" -> "30064771206"  [ label = "CFG: "] 
  "30064771209" -> "30064771212"  [ label = "CFG: "] 
  "30064771211" -> "30064771208"  [ label = "CFG: "] 
  "30064771214" -> "30064771217"  [ label = "CFG: "] 
  "30064771214" -> "30064771228"  [ label = "CFG: "] 
  "30064771215" -> "30064771214"  [ label = "CFG: "] 
  "30064771228" -> "30064771227"  [ label = "CFG: "] 
  "30064771230" -> "30064771234"  [ label = "CFG: "] 
  "30064771234" -> "30064771236"  [ label = "CFG: "] 
  "30064771235" -> "30064771229"  [ label = "CFG: "] 
  "30064771238" -> "30064771237"  [ label = "CFG: "] 
  "30064771240" -> "30064771242"  [ label = "CFG: "] 
  "30064771242" -> "30064771239"  [ label = "CFG: "] 
  "30064771244" -> "30064771243"  [ label = "CFG: "] 
  "30064771246" -> "30064771250"  [ label = "CFG: "] 
  "30064771246" -> "30064771256"  [ label = "CFG: "] 
  "30064771247" -> "30064771246"  [ label = "CFG: "] 
  "30064771256" -> "30064771257"  [ label = "CFG: "] 
  "30064771257" -> "30064771260"  [ label = "CFG: "] 
  "30064771258" -> "30064771255"  [ label = "CFG: "] 
  "30064771262" -> "30064771261"  [ label = "CFG: "] 
  "30064771080" -> "30064771079"  [ label = "CFG: "] 
  "30064771082" -> "30064771081"  [ label = "CFG: "] 
  "30064771088" -> "30064771087"  [ label = "CFG: "] 
  "30064771088" -> "30064771097"  [ label = "CFG: "] 
  "30064771095" -> "30064771087"  [ label = "CFG: "] 
  "30064771099" -> "30064771098"  [ label = "CFG: "] 
  "30064771105" -> "30064771104"  [ label = "CFG: "] 
  "30064771107" -> "30064771108"  [ label = "CFG: "] 
  "30064771108" -> "30064771106"  [ label = "CFG: "] 
  "30064771111" -> "30064771112"  [ label = "CFG: "] 
  "30064771114" -> "55834574849"  [ label = "CFG: "] 
  "30064771116" -> "55834574850"  [ label = "CFG: "] 
  "30064771121" -> "30064771128"  [ label = "CFG: "] 
  "30064771126" -> "30064771133"  [ label = "CFG: "] 
  "30064771131" -> "30064771136"  [ label = "CFG: "] 
  "30064771136" -> "30064771137"  [ label = "CFG: "] 
  "30064771137" -> "30064771140"  [ label = "CFG: "] 
  "30064771138" -> "30064771144"  [ label = "CFG: "] 
  "30064771142" -> "30064771113"  [ label = "CFG: "] 
  "30064771145" -> "30064771147"  [ label = "CFG: "] 
  "30064771147" -> "30064771146"  [ label = "CFG: "] 
  "30064771149" -> "30064771148"  [ label = "CFG: "] 
  "30064771158" -> "30064771163"  [ label = "CFG: "] 
  "30064771163" -> "30064771162"  [ label = "CFG: "] 
  "30064771166" -> "30064771165"  [ label = "CFG: "] 
  "30064771168" -> "30064771167"  [ label = "CFG: "] 
  "30064771171" -> "30064771172"  [ label = "CFG: "] 
  "30064771174" -> "30064771188"  [ label = "CFG: "] 
  "30064771185" -> "30064771197"  [ label = "CFG: "] 
  "30064771193" -> "30064771173"  [ label = "CFG: "] 
  "30064771203" -> "30064771205"  [ label = "CFG: "] 
  "30064771205" -> "30064771202"  [ label = "CFG: "] 
  "30064771210" -> "30064771209"  [ label = "CFG: "] 
  "30064771212" -> "30064771211"  [ label = "CFG: "] 
  "30064771213" -> "30064771214"  [ label = "CFG: "] 
  "30064771216" -> "30064771224"  [ label = "CFG: "] 
  "30064771221" -> "30064771215"  [ label = "CFG: "] 
  "30064771231" -> "30064771233"  [ label = "CFG: "] 
  "30064771233" -> "30064771230"  [ label = "CFG: "] 
  "30064771236" -> "30064771235"  [ label = "CFG: "] 
  "30064771241" -> "30064771240"  [ label = "CFG: "] 
  "30064771245" -> "30064771246"  [ label = "CFG: "] 
  "30064771248" -> "30064771247"  [ label = "CFG: "] 
  "30064771259" -> "30064771258"  [ label = "CFG: "] 
  "30064771089" -> "30064771088"  [ label = "CFG: "] 
  "30064771089" -> "30064771094"  [ label = "CFG: "] 
  "30064771092" -> "30064771088"  [ label = "CFG: "] 
  "30064771096" -> "30064771095"  [ label = "CFG: "] 
  "30064771100" -> "30064771099"  [ label = "CFG: "] 
  "55834574848" -> "30064771105"  [ label = "CFG: "] 
  "30064771115" -> "30064771114"  [ label = "CFG: "] 
  "30064771117" -> "30064771116"  [ label = "CFG: "] 
  "30064771122" -> "30064771121"  [ label = "CFG: "] 
  "30064771127" -> "30064771130"  [ label = "CFG: "] 
  "30064771130" -> "30064771126"  [ label = "CFG: "] 
  "30064771132" -> "30064771135"  [ label = "CFG: "] 
  "30064771134" -> "30064771131"  [ label = "CFG: "] 
  "30064771139" -> "30064771141"  [ label = "CFG: "] 
  "30064771141" -> "30064771138"  [ label = "CFG: "] 
  "30064771143" -> "30064771142"  [ label = "CFG: "] 
  "30064771159" -> "30064771160"  [ label = "CFG: "] 
  "30064771160" -> "30064771158"  [ label = "CFG: "] 
  "55834574851" -> "30064771166"  [ label = "CFG: "] 
  "30064771175" -> "30064771181"  [ label = "CFG: "] 
  "30064771180" -> "30064771174"  [ label = "CFG: "] 
  "30064771186" -> "30064771191"  [ label = "CFG: "] 
  "30064771189" -> "30064771185"  [ label = "CFG: "] 
  "30064771194" -> "30064771198"  [ label = "CFG: "] 
  "30064771198" -> "30064771193"  [ label = "CFG: "] 
  "30064771204" -> "30064771203"  [ label = "CFG: "] 
  "55834574852" -> "30064771210"  [ label = "CFG: "] 
  "30064771217" -> "30064771220"  [ label = "CFG: "] 
  "30064771218" -> "30064771216"  [ label = "CFG: "] 
  "30064771222" -> "30064771226"  [ label = "CFG: "] 
  "30064771225" -> "30064771221"  [ label = "CFG: "] 
  "30064771232" -> "30064771231"  [ label = "CFG: "] 
  "55834574853" -> "30064771241"  [ label = "CFG: "] 
  "30064771249" -> "30064771253"  [ label = "CFG: "] 
  "30064771251" -> "30064771248"  [ label = "CFG: "] 
  "30064771260" -> "30064771259"  [ label = "CFG: "] 
  "30064771090" -> "30064771089"  [ label = "CFG: "] 
  "30064771093" -> "30064771092"  [ label = "CFG: "] 
  "30064771097" -> "30064771096"  [ label = "CFG: "] 
  "30064771118" -> "30064771120"  [ label = "CFG: "] 
  "30064771123" -> "30064771125"  [ label = "CFG: "] 
  "30064771128" -> "30064771127"  [ label = "CFG: "] 
  "30064771128" -> "30064771129"  [ label = "CFG: "] 
  "30064771129" -> "30064771127"  [ label = "CFG: "] 
  "30064771133" -> "30064771132"  [ label = "CFG: "] 
  "30064771135" -> "30064771134"  [ label = "CFG: "] 
  "30064771140" -> "30064771139"  [ label = "CFG: "] 
  "30064771144" -> "30064771143"  [ label = "CFG: "] 
  "30064771176" -> "30064771175"  [ label = "CFG: "] 
  "30064771181" -> "30064771183"  [ label = "CFG: "] 
  "30064771182" -> "30064771184"  [ label = "CFG: "] 
  "30064771184" -> "30064771180"  [ label = "CFG: "] 
  "30064771187" -> "30064771186"  [ label = "CFG: "] 
  "30064771190" -> "30064771192"  [ label = "CFG: "] 
  "30064771192" -> "30064771189"  [ label = "CFG: "] 
  "30064771195" -> "30064771194"  [ label = "CFG: "] 
  "30064771219" -> "30064771218"  [ label = "CFG: "] 
  "30064771223" -> "30064771222"  [ label = "CFG: "] 
  "30064771226" -> "30064771225"  [ label = "CFG: "] 
  "30064771250" -> "30064771249"  [ label = "CFG: "] 
  "30064771252" -> "30064771254"  [ label = "CFG: "] 
  "30064771254" -> "30064771251"  [ label = "CFG: "] 
  "30064771091" -> "30064771090"  [ label = "CFG: "] 
  "30064771094" -> "30064771093"  [ label = "CFG: "] 
  "30064771119" -> "30064771118"  [ label = "CFG: "] 
  "30064771120" -> "30064771117"  [ label = "CFG: "] 
  "30064771124" -> "30064771123"  [ label = "CFG: "] 
  "30064771125" -> "30064771122"  [ label = "CFG: "] 
  "30064771177" -> "30064771179"  [ label = "CFG: "] 
  "30064771179" -> "30064771176"  [ label = "CFG: "] 
  "30064771183" -> "30064771182"  [ label = "CFG: "] 
  "30064771188" -> "30064771187"  [ label = "CFG: "] 
  "30064771191" -> "30064771190"  [ label = "CFG: "] 
  "30064771196" -> "30064771195"  [ label = "CFG: "] 
  "30064771220" -> "30064771219"  [ label = "CFG: "] 
  "30064771224" -> "30064771223"  [ label = "CFG: "] 
  "30064771253" -> "30064771252"  [ label = "CFG: "] 
  "55834574849" -> "30064771119"  [ label = "CFG: "] 
  "55834574850" -> "30064771124"  [ label = "CFG: "] 
  "30064771178" -> "30064771177"  [ label = "CFG: "] 
  "30064771197" -> "30064771196"  [ label = "CFG: "] 
  "111669149697" -> "30064771073"  [ label = "CFG: "] 
  "30064771072" -> "128849018880"  [ label = "DDG: input_tensor_shape.dims()"] 
  "30064771072" -> "128849018880"  [ label = "DDG: input_rank = input_tensor_shape.dims()"] 
  "30064771075" -> "128849018880"  [ label = "DDG: input_tensor_shape"] 
  "30064771074" -> "128849018880"  [ label = "DDG: input_tensor_shape.dim_sizes()"] 
  "30064771074" -> "128849018880"  [ label = "DDG: input_shape =
      input_tensor_shape.dim_sizes()"] 
  "30064771077" -> "128849018880"  [ label = "DDG: block_shape"] 
  "30064771076" -> "128849018880"  [ label = "DDG: block_shape.size()"] 
  "30064771076" -> "128849018880"  [ label = "DDG: block_rank = block_shape.size()"] 
  "30064771078" -> "128849018880"  [ label = "DDG: input_rank &gt;= 1 + block_rank"] 
  "30064771078" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(&quot;input rank should be &gt;= &quot;, 1 + block_rank,
                              &quot; instead of &quot;, input_rank)"] 
  "30064771078" -> "128849018880"  [ label = "DDG: OP_REQUIRES(
      ctx, input_rank &gt;= 1 + block_rank,
      errors::InvalidArgument(&quot;input rank should be &gt;= &quot;, 1 + block_rank,
                              &quot; instead of &quot;, input_rank))"] 
  "30064771083" -> "128849018880"  [ label = "DDG: remainder_shape(input_shape)"] 
  "30064771084" -> "128849018880"  [ label = "DDG: 1 + block_rank"] 
  "30064771084" -> "128849018880"  [ label = "DDG: remainder_shape.remove_prefix(1 + block_rank)"] 
  "30064771089" -> "128849018880"  [ label = "DDG: paddings.shape().rank()"] 
  "30064771088" -> "128849018880"  [ label = "DDG: paddings.shape().rank() == 2"] 
  "30064771092" -> "128849018880"  [ label = "DDG: xla::ShapeUtil::GetDimension(paddings.shape(), 0)"] 
  "30064771088" -> "128849018880"  [ label = "DDG: block_rank == xla::ShapeUtil::GetDimension(paddings.shape(), 0)"] 
  "30064771087" -> "128849018880"  [ label = "DDG: paddings.shape().rank() == 2 &amp;&amp;
          block_rank == xla::ShapeUtil::GetDimension(paddings.shape(), 0)"] 
  "30064771095" -> "128849018880"  [ label = "DDG: xla::ShapeUtil::GetDimension(paddings.shape(), 1)"] 
  "30064771087" -> "128849018880"  [ label = "DDG: 2 == xla::ShapeUtil::GetDimension(paddings.shape(), 1)"] 
  "30064771086" -> "128849018880"  [ label = "DDG: paddings.shape().rank() == 2 &amp;&amp;
          block_rank == xla::ShapeUtil::GetDimension(paddings.shape(), 0) &amp;&amp;
          2 == xla::ShapeUtil::GetDimension(paddings.shape(), 1)"] 
  "30064771100" -> "128849018880"  [ label = "DDG: paddings"] 
  "30064771099" -> "128849018880"  [ label = "DDG: paddings.shape()"] 
  "30064771098" -> "128849018880"  [ label = "DDG: xla::ShapeUtil::HumanString(paddings.shape())"] 
  "30064771086" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(&quot;paddings should have shape [&quot;, block_rank,
                              &quot;, 2] instead of &quot;,
                              xla::ShapeUtil::HumanString(paddings.shape()))"] 
  "30064771086" -> "128849018880"  [ label = "DDG: OP_REQUIRES(
      ctx,
      paddings.shape().rank() == 2 &amp;&amp;
          block_rank == xla::ShapeUtil::GetDimension(paddings.shape(), 0) &amp;&amp;
          2 == xla::ShapeUtil::GetDimension(paddings.shape(), 1),
      errors::InvalidArgument(&quot;paddings should have shape [&quot;, block_rank,
                              &quot;, 2] instead of &quot;,
                              xla::ShapeUtil::HumanString(paddings.shape())))"] 
  "30064771101" -> "128849018880"  [ label = "DDG: ctx-&gt;builder()"] 
  "30064771101" -> "128849018880"  [ label = "DDG: * b = ctx-&gt;builder()"] 
  "30064771106" -> "128849018880"  [ label = "DDG: input_shape.begin()"] 
  "30064771108" -> "128849018880"  [ label = "DDG: input_shape"] 
  "30064771106" -> "128849018880"  [ label = "DDG: input_shape.end()"] 
  "30064771103" -> "128849018880"  [ label = "DDG: padded_shape(input_shape.begin(), input_shape.end())"] 
  "30064771103" -> "128849018880"  [ label = "DDG: std::vector&lt;int64_t&gt; padded_shape(input_shape.begin(), input_shape.end())"] 
  "30064771109" -> "128849018880"  [ label = "DDG: block_num_elems = 1LL"] 
  "30064771110" -> "128849018880"  [ label = "DDG: padding_config.add_dimensions()"] 
  "30064771146" -> "128849018880"  [ label = "DDG: remainder_shape.size()"] 
  "30064771146" -> "128849018880"  [ label = "DDG: i &lt; remainder_shape.size()"] 
  "30064771150" -> "128849018880"  [ label = "DDG: block_num_elems &gt; 0"] 
  "30064771150" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(
                  &quot;The product of the block dimensions must be positive&quot;)"] 
  "30064771150" -> "128849018880"  [ label = "DDG: OP_REQUIRES(ctx, block_num_elems &gt; 0,
              errors::InvalidArgument(
                  &quot;The product of the block dimensions must be positive&quot;))"] 
  "30064771153" -> "128849018880"  [ label = "DDG: input_shape[0]"] 
  "30064771153" -> "128849018880"  [ label = "DDG: batch_size = input_shape[0]"] 
  "30064771156" -> "128849018880"  [ label = "DDG: block_num_elems"] 
  "30064771155" -> "128849018880"  [ label = "DDG: MultiplyWithoutOverflow(batch_size, block_num_elems)"] 
  "30064771155" -> "128849018880"  [ label = "DDG: output_dim =
      MultiplyWithoutOverflow(batch_size, block_num_elems)"] 
  "30064771157" -> "128849018880"  [ label = "DDG: output_dim &lt; 0"] 
  "30064771158" -> "128849018880"  [ label = "DDG: output_dim &gt;= 0"] 
  "30064771160" -> "128849018880"  [ label = "DDG: block_num_elems"] 
  "30064771158" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(&quot;Negative output dimension size caused by &quot;
                                &quot;overflow when multiplying &quot;,
                                batch_size, &quot; and &quot;, block_num_elems)"] 
  "30064771158" -> "128849018880"  [ label = "DDG: OP_REQUIRES(
        ctx, output_dim &gt;= 0,
        errors::InvalidArgument(&quot;Negative output dimension size caused by &quot;
                                &quot;overflow when multiplying &quot;,
                                batch_size, &quot; and &quot;, block_num_elems))"] 
  "30064771162" -> "128849018880"  [ label = "DDG: input"] 
  "30064771163" -> "128849018880"  [ label = "DDG: b"] 
  "30064771163" -> "128849018880"  [ label = "DDG: input_dtype"] 
  "30064771162" -> "128849018880"  [ label = "DDG: XlaHelpers::Zero(b, input_dtype)"] 
  "30064771162" -> "128849018880"  [ label = "DDG: padding_config"] 
  "30064771161" -> "128849018880"  [ label = "DDG: xla::Pad(input, XlaHelpers::Zero(b, input_dtype), padding_config)"] 
  "30064771161" -> "128849018880"  [ label = "DDG: padded =
      xla::Pad(input, XlaHelpers::Zero(b, input_dtype), padding_config)"] 
  "30064771167" -> "128849018880"  [ label = "DDG: input_rank + block_rank"] 
  "30064771164" -> "128849018880"  [ label = "DDG: reshaped_padded_shape(input_rank + block_rank)"] 
  "30064771164" -> "128849018880"  [ label = "DDG: std::vector&lt;int64_t&gt; reshaped_padded_shape(input_rank + block_rank)"] 
  "30064771169" -> "128849018880"  [ label = "DDG: reshaped_padded_shape[0]"] 
  "30064771169" -> "128849018880"  [ label = "DDG: batch_size"] 
  "30064771169" -> "128849018880"  [ label = "DDG: reshaped_padded_shape[0] = batch_size"] 
  "30064771203" -> "128849018880"  [ label = "DDG: reshaped_padded_shape.begin()"] 
  "30064771202" -> "128849018880"  [ label = "DDG: reshaped_padded_shape.begin() + 1"] 
  "30064771202" -> "128849018880"  [ label = "DDG: 2 * block_rank"] 
  "30064771199" -> "128849018880"  [ label = "DDG: reshaped_padded_shape.begin() + 1 + 2 * block_rank"] 
  "30064771199" -> "128849018880"  [ label = "DDG: std::copy(remainder_shape.begin(), remainder_shape.end(),
            reshaped_padded_shape.begin() + 1 + 2 * block_rank)"] 
  "30064771207" -> "128849018880"  [ label = "DDG: padded"] 
  "30064771206" -> "128849018880"  [ label = "DDG: xla::Reshape(padded, reshaped_padded_shape)"] 
  "30064771206" -> "128849018880"  [ label = "DDG: reshaped_padded = xla::Reshape(padded, reshaped_padded_shape)"] 
  "30064771212" -> "128849018880"  [ label = "DDG: reshaped_padded_shape"] 
  "30064771211" -> "128849018880"  [ label = "DDG: reshaped_padded_shape.size()"] 
  "30064771208" -> "128849018880"  [ label = "DDG: permutation(reshaped_padded_shape.size())"] 
  "30064771208" -> "128849018880"  [ label = "DDG: std::vector&lt;int64_t&gt; permutation(reshaped_padded_shape.size())"] 
  "30064771227" -> "128849018880"  [ label = "DDG: permutation[block_rank]"] 
  "30064771227" -> "128849018880"  [ label = "DDG: permutation[block_rank] = 0"] 
  "30064771231" -> "128849018880"  [ label = "DDG: permutation.begin()"] 
  "30064771230" -> "128849018880"  [ label = "DDG: permutation.begin() + 1"] 
  "30064771229" -> "128849018880"  [ label = "DDG: permutation.begin() + 1 + block_rank * 2"] 
  "30064771229" -> "128849018880"  [ label = "DDG: permutation.end()"] 
  "30064771235" -> "128849018880"  [ label = "DDG: block_rank * 2"] 
  "30064771229" -> "128849018880"  [ label = "DDG: 1 + block_rank * 2"] 
  "30064771229" -> "128849018880"  [ label = "DDG: std::iota(permutation.begin() + 1 + block_rank * 2, permutation.end(),
            1 + block_rank * 2)"] 
  "30064771238" -> "128849018880"  [ label = "DDG: reshaped_padded"] 
  "30064771238" -> "128849018880"  [ label = "DDG: permutation"] 
  "30064771237" -> "128849018880"  [ label = "DDG: xla::Transpose(reshaped_padded, permutation)"] 
  "30064771237" -> "128849018880"  [ label = "DDG: permuted_reshaped_padded =
      xla::Transpose(reshaped_padded, permutation)"] 
  "30064771240" -> "128849018880"  [ label = "DDG: std::vector"] 
  "30064771240" -> "128849018880"  [ label = "DDG: int64_t"] 
  "30064771239" -> "128849018880"  [ label = "DDG: std::vector&lt;int64_t"] 
  "30064771242" -> "128849018880"  [ label = "DDG: input_rank"] 
  "30064771239" -> "128849018880"  [ label = "DDG: output_shape(input_rank)"] 
  "30064771239" -> "128849018880"  [ label = "DDG: std::vector&lt;int64_t&gt; output_shape(input_rank)"] 
  "30064771243" -> "128849018880"  [ label = "DDG: output_shape[0]"] 
  "30064771243" -> "128849018880"  [ label = "DDG: output_dim"] 
  "30064771243" -> "128849018880"  [ label = "DDG: output_shape[0] = output_dim"] 
  "30064771245" -> "128849018880"  [ label = "DDG: i = 0"] 
  "30064771246" -> "128849018880"  [ label = "DDG: i"] 
  "30064771246" -> "128849018880"  [ label = "DDG: i &lt; block_rank"] 
  "30064771255" -> "128849018880"  [ label = "DDG: remainder_shape.begin()"] 
  "30064771257" -> "128849018880"  [ label = "DDG: remainder_shape"] 
  "30064771255" -> "128849018880"  [ label = "DDG: remainder_shape.end()"] 
  "30064771259" -> "128849018880"  [ label = "DDG: output_shape.begin()"] 
  "30064771258" -> "128849018880"  [ label = "DDG: output_shape.begin() + 1"] 
  "30064771258" -> "128849018880"  [ label = "DDG: block_rank"] 
  "30064771255" -> "128849018880"  [ label = "DDG: output_shape.begin() + 1 + block_rank"] 
  "30064771255" -> "128849018880"  [ label = "DDG: std::copy(remainder_shape.begin(), remainder_shape.end(),
            output_shape.begin() + 1 + block_rank)"] 
  "30064771262" -> "128849018880"  [ label = "DDG: permuted_reshaped_padded"] 
  "30064771262" -> "128849018880"  [ label = "DDG: output_shape"] 
  "30064771261" -> "128849018880"  [ label = "DDG: xla::Reshape(permuted_reshaped_padded, output_shape)"] 
  "30064771261" -> "128849018880"  [ label = "DDG: output = xla::Reshape(permuted_reshaped_padded, output_shape)"] 
  "30064771263" -> "128849018880"  [ label = "DDG: ctx"] 
  "30064771263" -> "128849018880"  [ label = "DDG: output"] 
  "30064771263" -> "128849018880"  [ label = "DDG: ctx-&gt;SetOutput(0, output)"] 
  "30064771248" -> "128849018880"  [ label = "DDG: output_shape[1 + i]"] 
  "30064771251" -> "128849018880"  [ label = "DDG: padded_shape[1 + i]"] 
  "30064771251" -> "128849018880"  [ label = "DDG: block_shape[i]"] 
  "30064771248" -> "128849018880"  [ label = "DDG: padded_shape[1 + i] / block_shape[i]"] 
  "30064771248" -> "128849018880"  [ label = "DDG: output_shape[1 + i] = padded_shape[1 + i] / block_shape[i]"] 
  "30064771247" -> "128849018880"  [ label = "DDG: ++i"] 
  "30064771216" -> "128849018880"  [ label = "DDG: permutation[i]"] 
  "30064771216" -> "128849018880"  [ label = "DDG: 1 + 2 * i + 1"] 
  "30064771216" -> "128849018880"  [ label = "DDG: permutation[i] = 1 + 2 * i + 1"] 
  "30064771223" -> "128849018880"  [ label = "DDG: block_rank + 1"] 
  "30064771221" -> "128849018880"  [ label = "DDG: permutation[block_rank + 1 + i]"] 
  "30064771225" -> "128849018880"  [ label = "DDG: 2 * i"] 
  "30064771221" -> "128849018880"  [ label = "DDG: 1 + 2 * i"] 
  "30064771221" -> "128849018880"  [ label = "DDG: permutation[block_rank + 1 + i] = 1 + 2 * i"] 
  "30064771215" -> "128849018880"  [ label = "DDG: ++i"] 
  "30064771175" -> "128849018880"  [ label = "DDG: padded_shape[1 + i] % block_shape[i]"] 
  "30064771174" -> "128849018880"  [ label = "DDG: padded_shape[1 + i] % block_shape[i] == 0"] 
  "30064771174" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(&quot;padded_shape[&quot;, 1 + i,
                                        &quot;]=&quot;, padded_shape[1 + i],
                                        &quot; is not divisible by block_shape[&quot;, i,
                                        &quot;]=&quot;, block_shape[i])"] 
  "30064771174" -> "128849018880"  [ label = "DDG: OP_REQUIRES(ctx, padded_shape[1 + i] % block_shape[i] == 0,
                errors::InvalidArgument(&quot;padded_shape[&quot;, 1 + i,
                                        &quot;]=&quot;, padded_shape[1 + i],
                                        &quot; is not divisible by block_shape[&quot;, i,
                                        &quot;]=&quot;, block_shape[i]))"] 
  "30064771185" -> "128849018880"  [ label = "DDG: reshaped_padded_shape[1 + i * 2]"] 
  "30064771189" -> "128849018880"  [ label = "DDG: padded_shape[1 + i]"] 
  "30064771185" -> "128849018880"  [ label = "DDG: padded_shape[1 + i] / block_shape[i]"] 
  "30064771185" -> "128849018880"  [ label = "DDG: reshaped_padded_shape[1 + i * 2] = padded_shape[1 + i] / block_shape[i]"] 
  "30064771196" -> "128849018880"  [ label = "DDG: i * 2"] 
  "30064771195" -> "128849018880"  [ label = "DDG: 1 + i * 2"] 
  "30064771193" -> "128849018880"  [ label = "DDG: reshaped_padded_shape[1 + i * 2 + 1]"] 
  "30064771193" -> "128849018880"  [ label = "DDG: block_shape[i]"] 
  "30064771193" -> "128849018880"  [ label = "DDG: reshaped_padded_shape[1 + i * 2 + 1] = block_shape[i]"] 
  "30064771173" -> "128849018880"  [ label = "DDG: ++i"] 
  "30064771149" -> "128849018880"  [ label = "DDG: padding_config.add_dimensions()"] 
  "30064771148" -> "128849018880"  [ label = "DDG: ++i"] 
  "30064771114" -> "128849018880"  [ label = "DDG: padding_config.add_dimensions()"] 
  "30064771114" -> "128849018880"  [ label = "DDG: * dim = padding_config.add_dimensions()"] 
  "30064771120" -> "128849018880"  [ label = "DDG: i, 0"] 
  "30064771116" -> "128849018880"  [ label = "DDG: paddings.Get&lt;int64_t&gt;({i, 0})"] 
  "30064771116" -> "128849018880"  [ label = "DDG: pad_start = paddings.Get&lt;int64_t&gt;({i, 0})"] 
  "30064771123" -> "128849018880"  [ label = "DDG: paddings.Get"] 
  "30064771122" -> "128849018880"  [ label = "DDG: paddings.Get&lt;int64_t"] 
  "30064771125" -> "128849018880"  [ label = "DDG: i, 1"] 
  "30064771121" -> "128849018880"  [ label = "DDG: paddings.Get&lt;int64_t&gt;({i, 1})"] 
  "30064771121" -> "128849018880"  [ label = "DDG: pad_end = paddings.Get&lt;int64_t&gt;({i, 1})"] 
  "30064771127" -> "128849018880"  [ label = "DDG: pad_start &gt;= 0"] 
  "30064771127" -> "128849018880"  [ label = "DDG: pad_end &gt;= 0"] 
  "30064771126" -> "128849018880"  [ label = "DDG: pad_start &gt;= 0 &amp;&amp; pad_end &gt;= 0"] 
  "30064771126" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(&quot;Paddings must be non-negative&quot;)"] 
  "30064771126" -> "128849018880"  [ label = "DDG: OP_REQUIRES(ctx, pad_start &gt;= 0 &amp;&amp; pad_end &gt;= 0,
                errors::InvalidArgument(&quot;Paddings must be non-negative&quot;))"] 
  "30064771131" -> "128849018880"  [ label = "DDG: block_shape[i] &gt;= 1"] 
  "30064771131" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(
                    &quot;All values in block_shape must be positive, got value, &quot;,
                    block_shape[i], &quot; at index &quot;, i, &quot;.&quot;)"] 
  "30064771131" -> "128849018880"  [ label = "DDG: OP_REQUIRES(ctx, block_shape[i] &gt;= 1,
                errors::InvalidArgument(
                    &quot;All values in block_shape must be positive, got value, &quot;,
                    block_shape[i], &quot; at index &quot;, i, &quot;.&quot;))"] 
  "30064771136" -> "128849018880"  [ label = "DDG: dim-&gt;set_edge_padding_low(pad_start)"] 
  "30064771137" -> "128849018880"  [ label = "DDG: dim"] 
  "30064771137" -> "128849018880"  [ label = "DDG: dim-&gt;set_edge_padding_high(pad_end)"] 
  "30064771138" -> "128849018880"  [ label = "DDG: padded_shape[1 + i]"] 
  "30064771141" -> "128849018880"  [ label = "DDG: pad_start"] 
  "30064771141" -> "128849018880"  [ label = "DDG: pad_end"] 
  "30064771138" -> "128849018880"  [ label = "DDG: pad_start + pad_end"] 
  "30064771138" -> "128849018880"  [ label = "DDG: padded_shape[1 + i] += pad_start + pad_end"] 
  "30064771143" -> "128849018880"  [ label = "DDG: block_shape[i]"] 
  "30064771142" -> "128849018880"  [ label = "DDG: MultiplyWithoutOverflow(block_num_elems, block_shape[i])"] 
  "30064771142" -> "128849018880"  [ label = "DDG: block_num_elems = MultiplyWithoutOverflow(block_num_elems, block_shape[i])"] 
  "30064771113" -> "128849018880"  [ label = "DDG: ++i"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "111669149697" -> "115964116993"  [ label = "DDG: "] 
  "111669149697" -> "115964116994"  [ label = "DDG: "] 
  "111669149697" -> "115964116995"  [ label = "DDG: "] 
  "111669149697" -> "115964116996"  [ label = "DDG: "] 
  "111669149697" -> "115964116997"  [ label = "DDG: "] 
  "30064771073" -> "30064771072"  [ label = "DDG: input_tensor_shape"] 
  "30064771075" -> "30064771074"  [ label = "DDG: input_tensor_shape"] 
  "30064771077" -> "30064771076"  [ label = "DDG: block_shape"] 
  "30064771102" -> "30064771101"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771109"  [ label = "DDG: "] 
  "30064771108" -> "30064771153"  [ label = "DDG: input_shape"] 
  "30064771156" -> "30064771155"  [ label = "DDG: batch_size"] 
  "30064771156" -> "30064771155"  [ label = "DDG: block_num_elems"] 
  "30064771162" -> "30064771161"  [ label = "DDG: input"] 
  "30064771162" -> "30064771161"  [ label = "DDG: XlaHelpers::Zero(b, input_dtype)"] 
  "30064771162" -> "30064771161"  [ label = "DDG: padding_config"] 
  "30064771156" -> "30064771169"  [ label = "DDG: batch_size"] 
  "30064771160" -> "30064771169"  [ label = "DDG: batch_size"] 
  "111669149697" -> "30064771169"  [ label = "DDG: "] 
  "30064771207" -> "30064771206"  [ label = "DDG: padded"] 
  "30064771207" -> "30064771206"  [ label = "DDG: reshaped_padded_shape"] 
  "111669149697" -> "30064771227"  [ label = "DDG: "] 
  "30064771238" -> "30064771237"  [ label = "DDG: reshaped_padded"] 
  "30064771238" -> "30064771237"  [ label = "DDG: permutation"] 
  "30064771157" -> "30064771243"  [ label = "DDG: output_dim"] 
  "30064771159" -> "30064771243"  [ label = "DDG: output_dim"] 
  "111669149697" -> "30064771243"  [ label = "DDG: "] 
  "30064771262" -> "30064771261"  [ label = "DDG: permuted_reshaped_padded"] 
  "30064771262" -> "30064771261"  [ label = "DDG: output_shape"] 
  "115964116992" -> "30064771078"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771078"  [ label = "DDG: "] 
  "30064771079" -> "30064771078"  [ label = "DDG: input_rank"] 
  "30064771079" -> "30064771078"  [ label = "DDG: 1 + block_rank"] 
  "30064771081" -> "30064771078"  [ label = "DDG: &quot;input rank should be &gt;= &quot;"] 
  "30064771081" -> "30064771078"  [ label = "DDG: 1 + block_rank"] 
  "30064771081" -> "30064771078"  [ label = "DDG: &quot; instead of &quot;"] 
  "30064771081" -> "30064771078"  [ label = "DDG: input_rank"] 
  "30064771074" -> "30064771083"  [ label = "DDG: input_shape"] 
  "111669149697" -> "30064771083"  [ label = "DDG: "] 
  "111669149697" -> "30064771084"  [ label = "DDG: "] 
  "30064771076" -> "30064771084"  [ label = "DDG: block_rank"] 
  "30064771078" -> "30064771086"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771086"  [ label = "DDG: "] 
  "30064771087" -> "30064771086"  [ label = "DDG: paddings.shape().rank() == 2 &amp;&amp;
          block_rank == xla::ShapeUtil::GetDimension(paddings.shape(), 0)"] 
  "30064771087" -> "30064771086"  [ label = "DDG: 2 == xla::ShapeUtil::GetDimension(paddings.shape(), 1)"] 
  "30064771098" -> "30064771086"  [ label = "DDG: &quot;paddings should have shape [&quot;"] 
  "30064771098" -> "30064771086"  [ label = "DDG: block_rank"] 
  "30064771098" -> "30064771086"  [ label = "DDG: &quot;, 2] instead of &quot;"] 
  "30064771098" -> "30064771086"  [ label = "DDG: xla::ShapeUtil::HumanString(paddings.shape())"] 
  "30064771104" -> "30064771103"  [ label = "DDG: std::vector"] 
  "30064771104" -> "30064771103"  [ label = "DDG: int64_t"] 
  "30064771106" -> "30064771103"  [ label = "DDG: input_shape.begin()"] 
  "30064771106" -> "30064771103"  [ label = "DDG: input_shape.end()"] 
  "111669149697" -> "30064771110"  [ label = "DDG: "] 
  "30064771102" -> "30064771150"  [ label = "DDG: ctx"] 
  "30064771131" -> "30064771150"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771150"  [ label = "DDG: "] 
  "30064771151" -> "30064771150"  [ label = "DDG: block_num_elems"] 
  "30064771151" -> "30064771150"  [ label = "DDG: 0"] 
  "30064771152" -> "30064771150"  [ label = "DDG: &quot;The product of the block dimensions must be positive&quot;"] 
  "30064771165" -> "30064771164"  [ label = "DDG: std::vector"] 
  "30064771165" -> "30064771164"  [ label = "DDG: int64_t"] 
  "30064771167" -> "30064771164"  [ label = "DDG: input_rank + block_rank"] 
  "30064771200" -> "30064771199"  [ label = "DDG: remainder_shape"] 
  "30064771201" -> "30064771199"  [ label = "DDG: remainder_shape"] 
  "30064771204" -> "30064771199"  [ label = "DDG: reshaped_padded_shape"] 
  "111669149697" -> "30064771199"  [ label = "DDG: "] 
  "30064771205" -> "30064771199"  [ label = "DDG: 2"] 
  "30064771205" -> "30064771199"  [ label = "DDG: block_rank"] 
  "30064771209" -> "30064771208"  [ label = "DDG: std::vector"] 
  "30064771209" -> "30064771208"  [ label = "DDG: int64_t"] 
  "30064771211" -> "30064771208"  [ label = "DDG: reshaped_padded_shape.size()"] 
  "30064771232" -> "30064771229"  [ label = "DDG: permutation"] 
  "111669149697" -> "30064771229"  [ label = "DDG: "] 
  "30064771233" -> "30064771229"  [ label = "DDG: block_rank"] 
  "30064771233" -> "30064771229"  [ label = "DDG: 2"] 
  "30064771234" -> "30064771229"  [ label = "DDG: permutation"] 
  "30064771236" -> "30064771229"  [ label = "DDG: block_rank"] 
  "30064771236" -> "30064771229"  [ label = "DDG: 2"] 
  "30064771240" -> "30064771239"  [ label = "DDG: std::vector"] 
  "30064771240" -> "30064771239"  [ label = "DDG: int64_t"] 
  "30064771242" -> "30064771239"  [ label = "DDG: input_rank"] 
  "30064771256" -> "30064771255"  [ label = "DDG: remainder_shape"] 
  "30064771257" -> "30064771255"  [ label = "DDG: remainder_shape"] 
  "30064771260" -> "30064771255"  [ label = "DDG: output_shape"] 
  "111669149697" -> "30064771255"  [ label = "DDG: "] 
  "30064771246" -> "30064771255"  [ label = "DDG: block_rank"] 
  "30064771150" -> "30064771263"  [ label = "DDG: ctx"] 
  "30064771158" -> "30064771263"  [ label = "DDG: ctx"] 
  "30064771174" -> "30064771263"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771263"  [ label = "DDG: "] 
  "30064771261" -> "30064771263"  [ label = "DDG: output"] 
  "115964116995" -> "30064771073"  [ label = "DDG: input_tensor_shape"] 
  "111669149697" -> "30064771073"  [ label = "DDG: "] 
  "30064771073" -> "30064771075"  [ label = "DDG: input_tensor_shape"] 
  "111669149697" -> "30064771075"  [ label = "DDG: "] 
  "115964116996" -> "30064771077"  [ label = "DDG: block_shape"] 
  "111669149697" -> "30064771077"  [ label = "DDG: "] 
  "30064771072" -> "30064771079"  [ label = "DDG: input_rank"] 
  "111669149697" -> "30064771079"  [ label = "DDG: "] 
  "30064771076" -> "30064771079"  [ label = "DDG: block_rank"] 
  "111669149697" -> "30064771081"  [ label = "DDG: "] 
  "30064771076" -> "30064771081"  [ label = "DDG: block_rank"] 
  "30064771079" -> "30064771081"  [ label = "DDG: input_rank"] 
  "111669149697" -> "30064771085"  [ label = "DDG: "] 
  "30064771076" -> "30064771085"  [ label = "DDG: block_rank"] 
  "30064771088" -> "30064771087"  [ label = "DDG: paddings.shape().rank() == 2"] 
  "30064771088" -> "30064771087"  [ label = "DDG: block_rank == xla::ShapeUtil::GetDimension(paddings.shape(), 0)"] 
  "30064771095" -> "30064771087"  [ label = "DDG: 2"] 
  "30064771095" -> "30064771087"  [ label = "DDG: xla::ShapeUtil::GetDimension(paddings.shape(), 1)"] 
  "111669149697" -> "30064771098"  [ label = "DDG: "] 
  "30064771092" -> "30064771098"  [ label = "DDG: block_rank"] 
  "30064771076" -> "30064771098"  [ label = "DDG: block_rank"] 
  "30064771099" -> "30064771098"  [ label = "DDG: paddings.shape()"] 
  "30064771086" -> "30064771102"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771102"  [ label = "DDG: "] 
  "111669149697" -> "30064771104"  [ label = "DDG: "] 
  "30064771107" -> "30064771106"  [ label = "DDG: input_shape"] 
  "30064771108" -> "30064771106"  [ label = "DDG: input_shape"] 
  "111669149697" -> "30064771111"  [ label = "DDG: "] 
  "30064771111" -> "30064771112"  [ label = "DDG: i"] 
  "30064771113" -> "30064771112"  [ label = "DDG: i"] 
  "111669149697" -> "30064771112"  [ label = "DDG: "] 
  "30064771098" -> "30064771112"  [ label = "DDG: block_rank"] 
  "111669149697" -> "30064771113"  [ label = "DDG: "] 
  "30064771134" -> "30064771113"  [ label = "DDG: i"] 
  "30064771115" -> "30064771114"  [ label = "DDG: padding_config"] 
  "30064771117" -> "30064771116"  [ label = "DDG: paddings.Get&lt;int64_t"] 
  "30064771117" -> "30064771116"  [ label = "DDG: {i, 0}"] 
  "30064771117" -> "30064771116"  [ label = "DDG: "] 
  "30064771122" -> "30064771121"  [ label = "DDG: paddings.Get&lt;int64_t"] 
  "30064771122" -> "30064771121"  [ label = "DDG: {i, 1}"] 
  "30064771122" -> "30064771121"  [ label = "DDG: "] 
  "30064771136" -> "30064771138"  [ label = "DDG: pad_start"] 
  "111669149697" -> "30064771138"  [ label = "DDG: "] 
  "30064771137" -> "30064771138"  [ label = "DDG: pad_end"] 
  "30064771143" -> "30064771142"  [ label = "DDG: block_num_elems"] 
  "30064771143" -> "30064771142"  [ label = "DDG: block_shape[i]"] 
  "111669149697" -> "30064771145"  [ label = "DDG: "] 
  "30064771145" -> "30064771146"  [ label = "DDG: i"] 
  "30064771148" -> "30064771146"  [ label = "DDG: i"] 
  "111669149697" -> "30064771146"  [ label = "DDG: "] 
  "30064771147" -> "30064771146"  [ label = "DDG: remainder_shape"] 
  "30064771146" -> "30064771148"  [ label = "DDG: i"] 
  "111669149697" -> "30064771148"  [ label = "DDG: "] 
  "30064771109" -> "30064771151"  [ label = "DDG: block_num_elems"] 
  "30064771142" -> "30064771151"  [ label = "DDG: block_num_elems"] 
  "111669149697" -> "30064771151"  [ label = "DDG: "] 
  "111669149697" -> "30064771152"  [ label = "DDG: "] 
  "30064771153" -> "30064771156"  [ label = "DDG: batch_size"] 
  "111669149697" -> "30064771156"  [ label = "DDG: "] 
  "30064771151" -> "30064771156"  [ label = "DDG: block_num_elems"] 
  "30064771155" -> "30064771157"  [ label = "DDG: output_dim"] 
  "111669149697" -> "30064771157"  [ label = "DDG: "] 
  "115964116993" -> "30064771162"  [ label = "DDG: input"] 
  "111669149697" -> "30064771162"  [ label = "DDG: "] 
  "30064771163" -> "30064771162"  [ label = "DDG: b"] 
  "30064771163" -> "30064771162"  [ label = "DDG: input_dtype"] 
  "30064771110" -> "30064771162"  [ label = "DDG: padding_config"] 
  "30064771149" -> "30064771162"  [ label = "DDG: padding_config"] 
  "30064771115" -> "30064771162"  [ label = "DDG: padding_config"] 
  "30064771104" -> "30064771165"  [ label = "DDG: std::vector"] 
  "30064771104" -> "30064771165"  [ label = "DDG: int64_t"] 
  "30064771123" -> "30064771165"  [ label = "DDG: int64_t"] 
  "111669149697" -> "30064771165"  [ label = "DDG: "] 
  "30064771081" -> "30064771167"  [ label = "DDG: input_rank"] 
  "111669149697" -> "30064771167"  [ label = "DDG: "] 
  "30064771112" -> "30064771167"  [ label = "DDG: block_rank"] 
  "111669149697" -> "30064771171"  [ label = "DDG: "] 
  "30064771171" -> "30064771172"  [ label = "DDG: i"] 
  "30064771173" -> "30064771172"  [ label = "DDG: i"] 
  "111669149697" -> "30064771172"  [ label = "DDG: "] 
  "30064771112" -> "30064771172"  [ label = "DDG: block_rank"] 
  "30064771197" -> "30064771173"  [ label = "DDG: i"] 
  "111669149697" -> "30064771173"  [ label = "DDG: "] 
  "30064771189" -> "30064771185"  [ label = "DDG: padded_shape[1 + i]"] 
  "30064771189" -> "30064771185"  [ label = "DDG: block_shape[i]"] 
  "30064771077" -> "30064771193"  [ label = "DDG: block_shape"] 
  "30064771189" -> "30064771193"  [ label = "DDG: block_shape[i]"] 
  "30064771147" -> "30064771200"  [ label = "DDG: remainder_shape"] 
  "111669149697" -> "30064771200"  [ label = "DDG: "] 
  "30064771200" -> "30064771201"  [ label = "DDG: remainder_shape"] 
  "111669149697" -> "30064771201"  [ label = "DDG: "] 
  "30064771204" -> "30064771202"  [ label = "DDG: reshaped_padded_shape"] 
  "111669149697" -> "30064771202"  [ label = "DDG: "] 
  "30064771205" -> "30064771202"  [ label = "DDG: 2"] 
  "30064771205" -> "30064771202"  [ label = "DDG: block_rank"] 
  "30064771161" -> "30064771207"  [ label = "DDG: padded"] 
  "111669149697" -> "30064771207"  [ label = "DDG: "] 
  "30064771169" -> "30064771207"  [ label = "DDG: reshaped_padded_shape[0]"] 
  "30064771204" -> "30064771207"  [ label = "DDG: reshaped_padded_shape"] 
  "30064771185" -> "30064771207"  [ label = "DDG: reshaped_padded_shape[1 + i * 2]"] 
  "30064771193" -> "30064771207"  [ label = "DDG: reshaped_padded_shape[1 + i * 2 + 1]"] 
  "30064771165" -> "30064771209"  [ label = "DDG: std::vector"] 
  "30064771165" -> "30064771209"  [ label = "DDG: int64_t"] 
  "111669149697" -> "30064771209"  [ label = "DDG: "] 
  "30064771212" -> "30064771211"  [ label = "DDG: reshaped_padded_shape"] 
  "111669149697" -> "30064771213"  [ label = "DDG: "] 
  "30064771213" -> "30064771214"  [ label = "DDG: i"] 
  "30064771215" -> "30064771214"  [ label = "DDG: i"] 
  "111669149697" -> "30064771214"  [ label = "DDG: "] 
  "30064771205" -> "30064771214"  [ label = "DDG: block_rank"] 
  "30064771226" -> "30064771215"  [ label = "DDG: i"] 
  "111669149697" -> "30064771215"  [ label = "DDG: "] 
  "111669149697" -> "30064771216"  [ label = "DDG: "] 
  "30064771220" -> "30064771216"  [ label = "DDG: 2"] 
  "30064771220" -> "30064771216"  [ label = "DDG: i"] 
  "111669149697" -> "30064771221"  [ label = "DDG: "] 
  "30064771226" -> "30064771221"  [ label = "DDG: 2"] 
  "30064771226" -> "30064771221"  [ label = "DDG: i"] 
  "30064771232" -> "30064771230"  [ label = "DDG: permutation"] 
  "111669149697" -> "30064771230"  [ label = "DDG: "] 
  "30064771233" -> "30064771230"  [ label = "DDG: block_rank"] 
  "30064771233" -> "30064771230"  [ label = "DDG: 2"] 
  "30064771227" -> "30064771234"  [ label = "DDG: permutation[block_rank]"] 
  "30064771232" -> "30064771234"  [ label = "DDG: permutation"] 
  "30064771216" -> "30064771234"  [ label = "DDG: permutation[i]"] 
  "30064771221" -> "30064771234"  [ label = "DDG: permutation[block_rank + 1 + i]"] 
  "111669149697" -> "30064771234"  [ label = "DDG: "] 
  "111669149697" -> "30064771235"  [ label = "DDG: "] 
  "30064771236" -> "30064771235"  [ label = "DDG: block_rank"] 
  "30064771236" -> "30064771235"  [ label = "DDG: 2"] 
  "30064771206" -> "30064771238"  [ label = "DDG: reshaped_padded"] 
  "111669149697" -> "30064771238"  [ label = "DDG: "] 
  "30064771227" -> "30064771238"  [ label = "DDG: permutation[block_rank]"] 
  "30064771234" -> "30064771238"  [ label = "DDG: permutation"] 
  "30064771216" -> "30064771238"  [ label = "DDG: permutation[i]"] 
  "30064771221" -> "30064771238"  [ label = "DDG: permutation[block_rank + 1 + i]"] 
  "30064771209" -> "30064771240"  [ label = "DDG: std::vector"] 
  "30064771209" -> "30064771240"  [ label = "DDG: int64_t"] 
  "111669149697" -> "30064771240"  [ label = "DDG: "] 
  "111669149697" -> "30064771242"  [ label = "DDG: "] 
  "30064771081" -> "30064771242"  [ label = "DDG: input_rank"] 
  "111669149697" -> "30064771245"  [ label = "DDG: "] 
  "30064771245" -> "30064771246"  [ label = "DDG: i"] 
  "30064771247" -> "30064771246"  [ label = "DDG: i"] 
  "111669149697" -> "30064771246"  [ label = "DDG: "] 
  "30064771236" -> "30064771246"  [ label = "DDG: block_rank"] 
  "111669149697" -> "30064771247"  [ label = "DDG: "] 
  "30064771246" -> "30064771247"  [ label = "DDG: i"] 
  "30064771251" -> "30064771248"  [ label = "DDG: padded_shape[1 + i]"] 
  "30064771251" -> "30064771248"  [ label = "DDG: block_shape[i]"] 
  "30064771201" -> "30064771256"  [ label = "DDG: remainder_shape"] 
  "111669149697" -> "30064771256"  [ label = "DDG: "] 
  "30064771256" -> "30064771257"  [ label = "DDG: remainder_shape"] 
  "111669149697" -> "30064771257"  [ label = "DDG: "] 
  "30064771260" -> "30064771258"  [ label = "DDG: output_shape"] 
  "111669149697" -> "30064771258"  [ label = "DDG: "] 
  "30064771246" -> "30064771258"  [ label = "DDG: block_rank"] 
  "30064771237" -> "30064771262"  [ label = "DDG: permuted_reshaped_padded"] 
  "111669149697" -> "30064771262"  [ label = "DDG: "] 
  "30064771243" -> "30064771262"  [ label = "DDG: output_shape[0]"] 
  "30064771260" -> "30064771262"  [ label = "DDG: output_shape"] 
  "30064771248" -> "30064771262"  [ label = "DDG: output_shape[1 + i]"] 
  "111669149697" -> "30064771080"  [ label = "DDG: "] 
  "30064771076" -> "30064771080"  [ label = "DDG: block_rank"] 
  "111669149697" -> "30064771082"  [ label = "DDG: "] 
  "30064771076" -> "30064771082"  [ label = "DDG: block_rank"] 
  "30064771089" -> "30064771088"  [ label = "DDG: paddings.shape().rank()"] 
  "30064771089" -> "30064771088"  [ label = "DDG: 2"] 
  "30064771092" -> "30064771088"  [ label = "DDG: block_rank"] 
  "30064771092" -> "30064771088"  [ label = "DDG: xla::ShapeUtil::GetDimension(paddings.shape(), 0)"] 
  "111669149697" -> "30064771095"  [ label = "DDG: "] 
  "30064771096" -> "30064771095"  [ label = "DDG: paddings.shape()"] 
  "30064771096" -> "30064771095"  [ label = "DDG: 1"] 
  "30064771100" -> "30064771099"  [ label = "DDG: paddings"] 
  "30064771083" -> "30064771107"  [ label = "DDG: input_shape"] 
  "111669149697" -> "30064771107"  [ label = "DDG: "] 
  "30064771107" -> "30064771108"  [ label = "DDG: input_shape"] 
  "111669149697" -> "30064771108"  [ label = "DDG: "] 
  "30064771102" -> "30064771126"  [ label = "DDG: ctx"] 
  "30064771131" -> "30064771126"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771126"  [ label = "DDG: "] 
  "30064771127" -> "30064771126"  [ label = "DDG: pad_start &gt;= 0"] 
  "30064771127" -> "30064771126"  [ label = "DDG: pad_end &gt;= 0"] 
  "30064771130" -> "30064771126"  [ label = "DDG: &quot;Paddings must be non-negative&quot;"] 
  "30064771126" -> "30064771131"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771131"  [ label = "DDG: "] 
  "30064771132" -> "30064771131"  [ label = "DDG: block_shape[i]"] 
  "30064771132" -> "30064771131"  [ label = "DDG: 1"] 
  "30064771134" -> "30064771131"  [ label = "DDG: &quot;.&quot;"] 
  "30064771134" -> "30064771131"  [ label = "DDG: &quot;All values in block_shape must be positive, got value, &quot;"] 
  "30064771134" -> "30064771131"  [ label = "DDG: &quot; at index &quot;"] 
  "30064771134" -> "30064771131"  [ label = "DDG: block_shape[i]"] 
  "30064771134" -> "30064771131"  [ label = "DDG: i"] 
  "30064771114" -> "30064771136"  [ label = "DDG: dim"] 
  "111669149697" -> "30064771136"  [ label = "DDG: "] 
  "30064771128" -> "30064771136"  [ label = "DDG: pad_start"] 
  "30064771136" -> "30064771137"  [ label = "DDG: dim"] 
  "111669149697" -> "30064771137"  [ label = "DDG: "] 
  "30064771121" -> "30064771137"  [ label = "DDG: pad_end"] 
  "30064771129" -> "30064771137"  [ label = "DDG: pad_end"] 
  "30064771084" -> "30064771147"  [ label = "DDG: remainder_shape"] 
  "111669149697" -> "30064771147"  [ label = "DDG: "] 
  "30064771110" -> "30064771149"  [ label = "DDG: padding_config"] 
  "30064771115" -> "30064771149"  [ label = "DDG: padding_config"] 
  "111669149697" -> "30064771149"  [ label = "DDG: "] 
  "30064771150" -> "30064771158"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771158"  [ label = "DDG: "] 
  "30064771159" -> "30064771158"  [ label = "DDG: output_dim"] 
  "30064771159" -> "30064771158"  [ label = "DDG: 0"] 
  "30064771160" -> "30064771158"  [ label = "DDG: &quot;Negative output dimension size caused by &quot;
                                &quot;overflow when multiplying &quot;"] 
  "30064771160" -> "30064771158"  [ label = "DDG: batch_size"] 
  "30064771160" -> "30064771158"  [ label = "DDG: &quot; and &quot;"] 
  "30064771160" -> "30064771158"  [ label = "DDG: block_num_elems"] 
  "30064771101" -> "30064771163"  [ label = "DDG: b"] 
  "111669149697" -> "30064771163"  [ label = "DDG: "] 
  "115964116994" -> "30064771163"  [ label = "DDG: input_dtype"] 
  "30064771081" -> "30064771168"  [ label = "DDG: input_rank"] 
  "111669149697" -> "30064771168"  [ label = "DDG: "] 
  "30064771112" -> "30064771168"  [ label = "DDG: block_rank"] 
  "30064771150" -> "30064771174"  [ label = "DDG: ctx"] 
  "30064771158" -> "30064771174"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771174"  [ label = "DDG: "] 
  "30064771175" -> "30064771174"  [ label = "DDG: padded_shape[1 + i] % block_shape[i]"] 
  "30064771175" -> "30064771174"  [ label = "DDG: 0"] 
  "30064771180" -> "30064771174"  [ label = "DDG: &quot;padded_shape[&quot;"] 
  "30064771180" -> "30064771174"  [ label = "DDG: i"] 
  "30064771180" -> "30064771174"  [ label = "DDG: block_shape[i]"] 
  "30064771180" -> "30064771174"  [ label = "DDG: &quot;]=&quot;"] 
  "30064771180" -> "30064771174"  [ label = "DDG: 1 + i"] 
  "30064771180" -> "30064771174"  [ label = "DDG: &quot; is not divisible by block_shape[&quot;"] 
  "30064771180" -> "30064771174"  [ label = "DDG: padded_shape[1 + i]"] 
  "30064771204" -> "30064771203"  [ label = "DDG: reshaped_padded_shape"] 
  "111669149697" -> "30064771203"  [ label = "DDG: "] 
  "111669149697" -> "30064771205"  [ label = "DDG: "] 
  "30064771172" -> "30064771205"  [ label = "DDG: block_rank"] 
  "30064771169" -> "30064771212"  [ label = "DDG: reshaped_padded_shape[0]"] 
  "30064771207" -> "30064771212"  [ label = "DDG: reshaped_padded_shape"] 
  "30064771185" -> "30064771212"  [ label = "DDG: reshaped_padded_shape[1 + i * 2]"] 
  "30064771193" -> "30064771212"  [ label = "DDG: reshaped_padded_shape[1 + i * 2 + 1]"] 
  "111669149697" -> "30064771212"  [ label = "DDG: "] 
  "30064771232" -> "30064771231"  [ label = "DDG: permutation"] 
  "111669149697" -> "30064771231"  [ label = "DDG: "] 
  "30064771214" -> "30064771233"  [ label = "DDG: block_rank"] 
  "111669149697" -> "30064771233"  [ label = "DDG: "] 
  "30064771233" -> "30064771236"  [ label = "DDG: block_rank"] 
  "111669149697" -> "30064771236"  [ label = "DDG: "] 
  "30064771260" -> "30064771259"  [ label = "DDG: output_shape"] 
  "111669149697" -> "30064771259"  [ label = "DDG: "] 
  "30064771090" -> "30064771089"  [ label = "DDG: paddings.shape()"] 
  "111669149697" -> "30064771089"  [ label = "DDG: "] 
  "111669149697" -> "30064771092"  [ label = "DDG: "] 
  "30064771076" -> "30064771092"  [ label = "DDG: block_rank"] 
  "30064771093" -> "30064771092"  [ label = "DDG: paddings.shape()"] 
  "30064771093" -> "30064771092"  [ label = "DDG: 0"] 
  "30064771097" -> "30064771096"  [ label = "DDG: paddings"] 
  "111669149697" -> "30064771096"  [ label = "DDG: "] 
  "30064771091" -> "30064771100"  [ label = "DDG: paddings"] 
  "30064771094" -> "30064771100"  [ label = "DDG: paddings"] 
  "30064771097" -> "30064771100"  [ label = "DDG: paddings"] 
  "111669149697" -> "30064771100"  [ label = "DDG: "] 
  "30064771110" -> "30064771115"  [ label = "DDG: padding_config"] 
  "111669149697" -> "30064771115"  [ label = "DDG: "] 
  "30064771118" -> "30064771117"  [ label = "DDG: paddings.Get"] 
  "30064771118" -> "30064771117"  [ label = "DDG: int64_t"] 
  "30064771120" -> "30064771117"  [ label = "DDG: i, 0"] 
  "111669149697" -> "30064771117"  [ label = "DDG: "] 
  "30064771123" -> "30064771122"  [ label = "DDG: paddings.Get"] 
  "30064771123" -> "30064771122"  [ label = "DDG: int64_t"] 
  "30064771125" -> "30064771122"  [ label = "DDG: i, 1"] 
  "111669149697" -> "30064771122"  [ label = "DDG: "] 
  "30064771128" -> "30064771127"  [ label = "DDG: pad_start"] 
  "30064771128" -> "30064771127"  [ label = "DDG: 0"] 
  "30064771129" -> "30064771127"  [ label = "DDG: pad_end"] 
  "30064771129" -> "30064771127"  [ label = "DDG: 0"] 
  "111669149697" -> "30064771130"  [ label = "DDG: "] 
  "30064771077" -> "30064771132"  [ label = "DDG: block_shape"] 
  "30064771143" -> "30064771132"  [ label = "DDG: block_shape[i]"] 
  "111669149697" -> "30064771132"  [ label = "DDG: "] 
  "111669149697" -> "30064771134"  [ label = "DDG: "] 
  "30064771077" -> "30064771134"  [ label = "DDG: block_shape"] 
  "30064771132" -> "30064771134"  [ label = "DDG: block_shape[i]"] 
  "30064771125" -> "30064771134"  [ label = "DDG: i"] 
  "30064771136" -> "30064771141"  [ label = "DDG: pad_start"] 
  "111669149697" -> "30064771141"  [ label = "DDG: "] 
  "30064771137" -> "30064771141"  [ label = "DDG: pad_end"] 
  "30064771109" -> "30064771143"  [ label = "DDG: block_num_elems"] 
  "30064771142" -> "30064771143"  [ label = "DDG: block_num_elems"] 
  "111669149697" -> "30064771143"  [ label = "DDG: "] 
  "30064771077" -> "30064771143"  [ label = "DDG: block_shape"] 
  "30064771134" -> "30064771143"  [ label = "DDG: block_shape[i]"] 
  "30064771157" -> "30064771159"  [ label = "DDG: output_dim"] 
  "111669149697" -> "30064771159"  [ label = "DDG: "] 
  "111669149697" -> "30064771160"  [ label = "DDG: "] 
  "30064771156" -> "30064771160"  [ label = "DDG: batch_size"] 
  "30064771156" -> "30064771160"  [ label = "DDG: block_num_elems"] 
  "30064771176" -> "30064771175"  [ label = "DDG: padded_shape[1 + i]"] 
  "30064771176" -> "30064771175"  [ label = "DDG: block_shape[i]"] 
  "111669149697" -> "30064771175"  [ label = "DDG: "] 
  "111669149697" -> "30064771180"  [ label = "DDG: "] 
  "30064771172" -> "30064771180"  [ label = "DDG: i"] 
  "30064771176" -> "30064771180"  [ label = "DDG: padded_shape[1 + i]"] 
  "30064771077" -> "30064771180"  [ label = "DDG: block_shape"] 
  "30064771176" -> "30064771180"  [ label = "DDG: block_shape[i]"] 
  "30064771180" -> "30064771189"  [ label = "DDG: padded_shape[1 + i]"] 
  "30064771077" -> "30064771189"  [ label = "DDG: block_shape"] 
  "30064771180" -> "30064771189"  [ label = "DDG: block_shape[i]"] 
  "30064771169" -> "30064771204"  [ label = "DDG: reshaped_padded_shape[0]"] 
  "30064771185" -> "30064771204"  [ label = "DDG: reshaped_padded_shape[1 + i * 2]"] 
  "30064771193" -> "30064771204"  [ label = "DDG: reshaped_padded_shape[1 + i * 2 + 1]"] 
  "111669149697" -> "30064771204"  [ label = "DDG: "] 
  "111669149697" -> "30064771218"  [ label = "DDG: "] 
  "30064771220" -> "30064771218"  [ label = "DDG: 2"] 
  "30064771220" -> "30064771218"  [ label = "DDG: i"] 
  "111669149697" -> "30064771225"  [ label = "DDG: "] 
  "30064771226" -> "30064771225"  [ label = "DDG: 2"] 
  "30064771226" -> "30064771225"  [ label = "DDG: i"] 
  "30064771227" -> "30064771232"  [ label = "DDG: permutation[block_rank]"] 
  "30064771216" -> "30064771232"  [ label = "DDG: permutation[i]"] 
  "30064771221" -> "30064771232"  [ label = "DDG: permutation[block_rank + 1 + i]"] 
  "111669149697" -> "30064771232"  [ label = "DDG: "] 
  "30064771189" -> "30064771251"  [ label = "DDG: padded_shape[1 + i]"] 
  "30064771138" -> "30064771251"  [ label = "DDG: padded_shape[1 + i]"] 
  "30064771077" -> "30064771251"  [ label = "DDG: block_shape"] 
  "30064771143" -> "30064771251"  [ label = "DDG: block_shape[i]"] 
  "30064771189" -> "30064771251"  [ label = "DDG: block_shape[i]"] 
  "30064771243" -> "30064771260"  [ label = "DDG: output_shape[0]"] 
  "30064771248" -> "30064771260"  [ label = "DDG: output_shape[1 + i]"] 
  "111669149697" -> "30064771260"  [ label = "DDG: "] 
  "30064771091" -> "30064771090"  [ label = "DDG: paddings"] 
  "30064771094" -> "30064771093"  [ label = "DDG: paddings"] 
  "111669149697" -> "30064771093"  [ label = "DDG: "] 
  "30064771091" -> "30064771097"  [ label = "DDG: paddings"] 
  "30064771094" -> "30064771097"  [ label = "DDG: paddings"] 
  "111669149697" -> "30064771097"  [ label = "DDG: "] 
  "30064771100" -> "30064771118"  [ label = "DDG: paddings"] 
  "30064771123" -> "30064771118"  [ label = "DDG: paddings.Get"] 
  "30064771104" -> "30064771118"  [ label = "DDG: int64_t"] 
  "30064771123" -> "30064771118"  [ label = "DDG: int64_t"] 
  "111669149697" -> "30064771118"  [ label = "DDG: "] 
  "30064771100" -> "30064771123"  [ label = "DDG: paddings"] 
  "30064771118" -> "30064771123"  [ label = "DDG: paddings.Get"] 
  "30064771118" -> "30064771123"  [ label = "DDG: int64_t"] 
  "111669149697" -> "30064771123"  [ label = "DDG: "] 
  "30064771116" -> "30064771128"  [ label = "DDG: pad_start"] 
  "111669149697" -> "30064771128"  [ label = "DDG: "] 
  "30064771121" -> "30064771129"  [ label = "DDG: pad_end"] 
  "111669149697" -> "30064771129"  [ label = "DDG: "] 
  "111669149697" -> "30064771140"  [ label = "DDG: "] 
  "30064771134" -> "30064771140"  [ label = "DDG: i"] 
  "30064771189" -> "30064771176"  [ label = "DDG: padded_shape[1 + i]"] 
  "30064771138" -> "30064771176"  [ label = "DDG: padded_shape[1 + i]"] 
  "30064771077" -> "30064771176"  [ label = "DDG: block_shape"] 
  "30064771143" -> "30064771176"  [ label = "DDG: block_shape[i]"] 
  "30064771189" -> "30064771176"  [ label = "DDG: block_shape[i]"] 
  "111669149697" -> "30064771181"  [ label = "DDG: "] 
  "30064771172" -> "30064771181"  [ label = "DDG: i"] 
  "111669149697" -> "30064771187"  [ label = "DDG: "] 
  "30064771188" -> "30064771187"  [ label = "DDG: i"] 
  "30064771188" -> "30064771187"  [ label = "DDG: 2"] 
  "111669149697" -> "30064771195"  [ label = "DDG: "] 
  "30064771197" -> "30064771195"  [ label = "DDG: i"] 
  "30064771197" -> "30064771195"  [ label = "DDG: 2"] 
  "111669149697" -> "30064771219"  [ label = "DDG: "] 
  "30064771220" -> "30064771219"  [ label = "DDG: 2"] 
  "30064771220" -> "30064771219"  [ label = "DDG: i"] 
  "30064771214" -> "30064771223"  [ label = "DDG: block_rank"] 
  "111669149697" -> "30064771223"  [ label = "DDG: "] 
  "30064771220" -> "30064771223"  [ label = "DDG: i"] 
  "111669149697" -> "30064771226"  [ label = "DDG: "] 
  "30064771220" -> "30064771226"  [ label = "DDG: i"] 
  "111669149697" -> "30064771250"  [ label = "DDG: "] 
  "30064771246" -> "30064771250"  [ label = "DDG: i"] 
  "115964116997" -> "30064771091"  [ label = "DDG: paddings"] 
  "111669149697" -> "30064771091"  [ label = "DDG: "] 
  "30064771091" -> "30064771094"  [ label = "DDG: paddings"] 
  "111669149697" -> "30064771094"  [ label = "DDG: "] 
  "30064771112" -> "30064771120"  [ label = "DDG: i"] 
  "111669149697" -> "30064771120"  [ label = "DDG: "] 
  "30064771120" -> "30064771125"  [ label = "DDG: i"] 
  "111669149697" -> "30064771125"  [ label = "DDG: "] 
  "111669149697" -> "30064771183"  [ label = "DDG: "] 
  "30064771172" -> "30064771183"  [ label = "DDG: i"] 
  "30064771180" -> "30064771188"  [ label = "DDG: i"] 
  "111669149697" -> "30064771188"  [ label = "DDG: "] 
  "111669149697" -> "30064771191"  [ label = "DDG: "] 
  "30064771188" -> "30064771191"  [ label = "DDG: i"] 
  "111669149697" -> "30064771196"  [ label = "DDG: "] 
  "30064771197" -> "30064771196"  [ label = "DDG: i"] 
  "30064771197" -> "30064771196"  [ label = "DDG: 2"] 
  "111669149697" -> "30064771220"  [ label = "DDG: "] 
  "30064771214" -> "30064771220"  [ label = "DDG: i"] 
  "30064771214" -> "30064771224"  [ label = "DDG: block_rank"] 
  "111669149697" -> "30064771224"  [ label = "DDG: "] 
  "111669149697" -> "30064771253"  [ label = "DDG: "] 
  "30064771246" -> "30064771253"  [ label = "DDG: i"] 
  "111669149697" -> "30064771178"  [ label = "DDG: "] 
  "30064771172" -> "30064771178"  [ label = "DDG: i"] 
  "111669149697" -> "30064771197"  [ label = "DDG: "] 
  "30064771188" -> "30064771197"  [ label = "DDG: i"] 
  "30064771112" -> "30064771124"  [ label = "CDG: "] 
  "30064771112" -> "30064771125"  [ label = "CDG: "] 
  "30064771112" -> "30064771122"  [ label = "CDG: "] 
  "30064771112" -> "30064771123"  [ label = "CDG: "] 
  "30064771112" -> "30064771120"  [ label = "CDG: "] 
  "30064771112" -> "30064771121"  [ label = "CDG: "] 
  "30064771112" -> "30064771118"  [ label = "CDG: "] 
  "30064771112" -> "30064771119"  [ label = "CDG: "] 
  "30064771112" -> "30064771116"  [ label = "CDG: "] 
  "30064771112" -> "30064771117"  [ label = "CDG: "] 
  "30064771112" -> "30064771114"  [ label = "CDG: "] 
  "30064771112" -> "30064771115"  [ label = "CDG: "] 
  "30064771112" -> "30064771112"  [ label = "CDG: "] 
  "30064771112" -> "30064771113"  [ label = "CDG: "] 
  "30064771112" -> "55834574850"  [ label = "CDG: "] 
  "30064771112" -> "55834574849"  [ label = "CDG: "] 
  "30064771112" -> "30064771144"  [ label = "CDG: "] 
  "30064771112" -> "30064771142"  [ label = "CDG: "] 
  "30064771112" -> "30064771143"  [ label = "CDG: "] 
  "30064771112" -> "30064771140"  [ label = "CDG: "] 
  "30064771112" -> "30064771141"  [ label = "CDG: "] 
  "30064771112" -> "30064771138"  [ label = "CDG: "] 
  "30064771112" -> "30064771139"  [ label = "CDG: "] 
  "30064771112" -> "30064771136"  [ label = "CDG: "] 
  "30064771112" -> "30064771137"  [ label = "CDG: "] 
  "30064771112" -> "30064771134"  [ label = "CDG: "] 
  "30064771112" -> "30064771135"  [ label = "CDG: "] 
  "30064771112" -> "30064771132"  [ label = "CDG: "] 
  "30064771112" -> "30064771133"  [ label = "CDG: "] 
  "30064771112" -> "30064771130"  [ label = "CDG: "] 
  "30064771112" -> "30064771131"  [ label = "CDG: "] 
  "30064771112" -> "30064771128"  [ label = "CDG: "] 
  "30064771112" -> "30064771126"  [ label = "CDG: "] 
  "30064771112" -> "30064771127"  [ label = "CDG: "] 
  "30064771146" -> "30064771148"  [ label = "CDG: "] 
  "30064771146" -> "30064771149"  [ label = "CDG: "] 
  "30064771146" -> "30064771146"  [ label = "CDG: "] 
  "30064771146" -> "30064771147"  [ label = "CDG: "] 
  "30064771157" -> "30064771160"  [ label = "CDG: "] 
  "30064771157" -> "30064771158"  [ label = "CDG: "] 
  "30064771157" -> "30064771159"  [ label = "CDG: "] 
  "30064771172" -> "30064771198"  [ label = "CDG: "] 
  "30064771172" -> "30064771196"  [ label = "CDG: "] 
  "30064771172" -> "30064771197"  [ label = "CDG: "] 
  "30064771172" -> "30064771194"  [ label = "CDG: "] 
  "30064771172" -> "30064771195"  [ label = "CDG: "] 
  "30064771172" -> "30064771192"  [ label = "CDG: "] 
  "30064771172" -> "30064771193"  [ label = "CDG: "] 
  "30064771172" -> "30064771190"  [ label = "CDG: "] 
  "30064771172" -> "30064771191"  [ label = "CDG: "] 
  "30064771172" -> "30064771188"  [ label = "CDG: "] 
  "30064771172" -> "30064771189"  [ label = "CDG: "] 
  "30064771172" -> "30064771186"  [ label = "CDG: "] 
  "30064771172" -> "30064771187"  [ label = "CDG: "] 
  "30064771172" -> "30064771184"  [ label = "CDG: "] 
  "30064771172" -> "30064771185"  [ label = "CDG: "] 
  "30064771172" -> "30064771182"  [ label = "CDG: "] 
  "30064771172" -> "30064771183"  [ label = "CDG: "] 
  "30064771172" -> "30064771180"  [ label = "CDG: "] 
  "30064771172" -> "30064771181"  [ label = "CDG: "] 
  "30064771172" -> "30064771178"  [ label = "CDG: "] 
  "30064771172" -> "30064771179"  [ label = "CDG: "] 
  "30064771172" -> "30064771176"  [ label = "CDG: "] 
  "30064771172" -> "30064771177"  [ label = "CDG: "] 
  "30064771172" -> "30064771174"  [ label = "CDG: "] 
  "30064771172" -> "30064771175"  [ label = "CDG: "] 
  "30064771172" -> "30064771172"  [ label = "CDG: "] 
  "30064771172" -> "30064771173"  [ label = "CDG: "] 
  "30064771214" -> "30064771220"  [ label = "CDG: "] 
  "30064771214" -> "30064771221"  [ label = "CDG: "] 
  "30064771214" -> "30064771218"  [ label = "CDG: "] 
  "30064771214" -> "30064771219"  [ label = "CDG: "] 
  "30064771214" -> "30064771216"  [ label = "CDG: "] 
  "30064771214" -> "30064771217"  [ label = "CDG: "] 
  "30064771214" -> "30064771214"  [ label = "CDG: "] 
  "30064771214" -> "30064771215"  [ label = "CDG: "] 
  "30064771214" -> "30064771226"  [ label = "CDG: "] 
  "30064771214" -> "30064771224"  [ label = "CDG: "] 
  "30064771214" -> "30064771225"  [ label = "CDG: "] 
  "30064771214" -> "30064771222"  [ label = "CDG: "] 
  "30064771214" -> "30064771223"  [ label = "CDG: "] 
  "30064771246" -> "30064771254"  [ label = "CDG: "] 
  "30064771246" -> "30064771252"  [ label = "CDG: "] 
  "30064771246" -> "30064771253"  [ label = "CDG: "] 
  "30064771246" -> "30064771250"  [ label = "CDG: "] 
  "30064771246" -> "30064771251"  [ label = "CDG: "] 
  "30064771246" -> "30064771248"  [ label = "CDG: "] 
  "30064771246" -> "30064771249"  [ label = "CDG: "] 
  "30064771246" -> "30064771246"  [ label = "CDG: "] 
  "30064771246" -> "30064771247"  [ label = "CDG: "] 
  "30064771088" -> "30064771096"  [ label = "CDG: "] 
  "30064771088" -> "30064771097"  [ label = "CDG: "] 
  "30064771088" -> "30064771095"  [ label = "CDG: "] 
  "30064771089" -> "30064771092"  [ label = "CDG: "] 
  "30064771089" -> "30064771093"  [ label = "CDG: "] 
  "30064771089" -> "30064771094"  [ label = "CDG: "] 
  "30064771128" -> "30064771129"  [ label = "CDG: "] 
}
"""
)
