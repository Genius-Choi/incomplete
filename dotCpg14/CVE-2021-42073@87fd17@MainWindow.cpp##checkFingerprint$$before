[33mval[0m [36mres1273[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "checkFingerprint" {  
"111669149697" [label = <(METHOD,checkFingerprint)<SUB>1</SUB>> ]
"115964116992" [label = <(PARAM,const QString&amp; line)<SUB>1</SUB>> ]
"25769803777" [label = <(BLOCK,{
    QRegExp fingerprintRegex(&quot;.*server finger...,{
    QRegExp fingerprintRegex(&quot;.*server finger...)<SUB>2</SUB>> ]
"94489280512" [label = <(LOCAL,QRegExp fingerprintRegex: QRegExp)<SUB>3</SUB>> ]
"30064771072" [label = <(fingerprintRegex,fingerprintRegex(&quot;.*server fingerprint \\(SHA1\...)<SUB>3</SUB>> ]
"90194313216" [label = <(LITERAL,&quot;.*server fingerprint \\(SHA1\\): ([A-F0-9:]+) ...,fingerprintRegex(&quot;.*server fingerprint \\(SHA1\...)<SUB>3</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,IF,if (!fingerprintRegex.exactMatch(line)))<SUB>4</SUB>> ]
"30064771073" [label = <(&lt;operator&gt;.logicalNot,!fingerprintRegex.exactMatch(line))<SUB>4</SUB>> ]
"30064771074" [label = <(exactMatch,fingerprintRegex.exactMatch(line))<SUB>4</SUB>> ]
"68719476736" [label = <(IDENTIFIER,fingerprintRegex,fingerprintRegex.exactMatch(line))<SUB>4</SUB>> ]
"68719476737" [label = <(IDENTIFIER,line,fingerprintRegex.exactMatch(line))<SUB>4</SUB>> ]
"25769803778" [label = <(BLOCK,{
        return;
    },{
        return;
    })<SUB>4</SUB>> ]
"146028888064" [label = <(RETURN,return;,return;)<SUB>5</SUB>> ]
"94489280513" [label = <(LOCAL,barrier.FingerprintData fingerprint_sha1: barrier.FingerprintData)<SUB>8</SUB>> ]
"30064771075" [label = <(&lt;operator&gt;.assignment,fingerprint_sha1 = {
        barrier::fingerpri...)<SUB>8</SUB>> ]
"68719476738" [label = <(IDENTIFIER,fingerprint_sha1,fingerprint_sha1 = {
        barrier::fingerpri...)<SUB>8</SUB>> ]
"30064771076" [label = <(&lt;operator&gt;.arrayInitializer,{
        barrier::fingerprint_type_to_string(b...)<SUB>8</SUB>> ]
"30064771077" [label = <(fingerprint_type_to_string,barrier::fingerprint_type_to_string(barrier::Fi...)<SUB>9</SUB>> ]
"30064771078" [label = <(&lt;operator&gt;.fieldAccess,barrier::FingerprintType::SHA1)<SUB>9</SUB>> ]
"30064771079" [label = <(&lt;operator&gt;.fieldAccess,barrier::FingerprintType)<SUB>9</SUB>> ]
"68719476739" [label = <(IDENTIFIER,barrier,barrier::fingerprint_type_to_string(barrier::Fi...)<SUB>9</SUB>> ]
"68719476740" [label = <(IDENTIFIER,FingerprintType,barrier::fingerprint_type_to_string(barrier::Fi...)<SUB>9</SUB>> ]
"55834574848" [label = <(FIELD_IDENTIFIER,SHA1,SHA1)<SUB>9</SUB>> ]
"30064771080" [label = <(from_hex,barrier::string::from_hex(fingerprintRegex.cap(...)<SUB>10</SUB>> ]
"30064771081" [label = <(toStdString,fingerprintRegex.cap(1).toStdString())<SUB>10</SUB>> ]
"30064771082" [label = <(cap,fingerprintRegex.cap(1))<SUB>10</SUB>> ]
"68719476741" [label = <(IDENTIFIER,fingerprintRegex,fingerprintRegex.cap(1))<SUB>10</SUB>> ]
"90194313217" [label = <(LITERAL,1,fingerprintRegex.cap(1))<SUB>10</SUB>> ]
"94489280514" [label = <(LOCAL,barrier.FingerprintData fingerprint_sha256: barrier.FingerprintData)<SUB>13</SUB>> ]
"30064771083" [label = <(&lt;operator&gt;.assignment,fingerprint_sha256 = {
        barrier::fingerp...)<SUB>13</SUB>> ]
"68719476742" [label = <(IDENTIFIER,fingerprint_sha256,fingerprint_sha256 = {
        barrier::fingerp...)<SUB>13</SUB>> ]
"30064771084" [label = <(&lt;operator&gt;.arrayInitializer,{
        barrier::fingerprint_type_to_string(b...)<SUB>13</SUB>> ]
"30064771085" [label = <(fingerprint_type_to_string,barrier::fingerprint_type_to_string(barrier::Fi...)<SUB>14</SUB>> ]
"30064771086" [label = <(&lt;operator&gt;.fieldAccess,barrier::FingerprintType::SHA256)<SUB>14</SUB>> ]
"30064771087" [label = <(&lt;operator&gt;.fieldAccess,barrier::FingerprintType)<SUB>14</SUB>> ]
"68719476743" [label = <(IDENTIFIER,barrier,barrier::fingerprint_type_to_string(barrier::Fi...)<SUB>14</SUB>> ]
"68719476744" [label = <(IDENTIFIER,FingerprintType,barrier::fingerprint_type_to_string(barrier::Fi...)<SUB>14</SUB>> ]
"55834574849" [label = <(FIELD_IDENTIFIER,SHA256,SHA256)<SUB>14</SUB>> ]
"30064771088" [label = <(from_hex,barrier::string::from_hex(fingerprintRegex.cap(...)<SUB>15</SUB>> ]
"30064771089" [label = <(toStdString,fingerprintRegex.cap(2).toStdString())<SUB>15</SUB>> ]
"30064771090" [label = <(cap,fingerprintRegex.cap(2))<SUB>15</SUB>> ]
"68719476745" [label = <(IDENTIFIER,fingerprintRegex,fingerprintRegex.cap(2))<SUB>15</SUB>> ]
"90194313218" [label = <(LITERAL,2,fingerprintRegex.cap(2))<SUB>15</SUB>> ]
"94489280515" [label = <(LOCAL,auto db_path: auto)<SUB>18</SUB>> ]
"30064771091" [label = <(&lt;operator&gt;.assignment,db_path = barrier::DataDirectories::trusted_ser...)<SUB>18</SUB>> ]
"68719476746" [label = <(IDENTIFIER,db_path,db_path = barrier::DataDirectories::trusted_ser...)<SUB>18</SUB>> ]
"30064771092" [label = <(trusted_servers_ssl_fingerprints_path,barrier::DataDirectories::trusted_servers_ssl_f...)<SUB>18</SUB>> ]
"94489280516" [label = <(LOCAL,barrier.FingerprintDatabase db: barrier.FingerprintDatabase)<SUB>23</SUB>> ]
"30064771093" [label = <(read,db.read(db_path))<SUB>24</SUB>> ]
"68719476747" [label = <(IDENTIFIER,db,db.read(db_path))<SUB>24</SUB>> ]
"68719476748" [label = <(IDENTIFIER,db_path,db.read(db_path))<SUB>24</SUB>> ]
"47244640257" [label = <(CONTROL_STRUCTURE,IF,if (db.is_trusted(fingerprint_sha256)))<SUB>25</SUB>> ]
"30064771094" [label = <(is_trusted,db.is_trusted(fingerprint_sha256))<SUB>25</SUB>> ]
"68719476749" [label = <(IDENTIFIER,db,db.is_trusted(fingerprint_sha256))<SUB>25</SUB>> ]
"68719476750" [label = <(IDENTIFIER,fingerprint_sha256,db.is_trusted(fingerprint_sha256))<SUB>25</SUB>> ]
"25769803779" [label = <(BLOCK,{
        return;
    },{
        return;
    })<SUB>25</SUB>> ]
"146028888065" [label = <(RETURN,return;,return;)<SUB>26</SUB>> ]
"94489280517" [label = <(LOCAL,static bool messageBoxAlreadyShown: bool)<SUB>29</SUB>> ]
"30064771095" [label = <(&lt;operator&gt;.assignment,messageBoxAlreadyShown = false)<SUB>29</SUB>> ]
"68719476751" [label = <(IDENTIFIER,messageBoxAlreadyShown,messageBoxAlreadyShown = false)<SUB>29</SUB>> ]
"90194313219" [label = <(LITERAL,false,messageBoxAlreadyShown = false)<SUB>29</SUB>> ]
"47244640258" [label = <(CONTROL_STRUCTURE,IF,if (!messageBoxAlreadyShown))<SUB>31</SUB>> ]
"30064771096" [label = <(&lt;operator&gt;.logicalNot,!messageBoxAlreadyShown)<SUB>31</SUB>> ]
"68719476752" [label = <(IDENTIFIER,messageBoxAlreadyShown,!messageBoxAlreadyShown)<SUB>31</SUB>> ]
"25769803780" [label = <(BLOCK,{
        stopBarrier();

        messageBoxAlr...,{
        stopBarrier();

        messageBoxAlr...)<SUB>31</SUB>> ]
"30064771097" [label = <(stopBarrier,stopBarrier())<SUB>32</SUB>> ]
"30064771098" [label = <(&lt;operator&gt;.assignment,messageBoxAlreadyShown = true)<SUB>34</SUB>> ]
"68719476753" [label = <(IDENTIFIER,messageBoxAlreadyShown,messageBoxAlreadyShown = true)<SUB>34</SUB>> ]
"90194313220" [label = <(LITERAL,true,messageBoxAlreadyShown = true)<SUB>34</SUB>> ]
"94489280518" [label = <(LOCAL,QMessageBox.StandardButton fingerprintReply: QMessageBox.StandardButton)<SUB>35</SUB>> ]
"30064771099" [label = <(&lt;operator&gt;.assignment,fingerprintReply =
            QMessageBox::inf...)<SUB>35</SUB>> ]
"68719476754" [label = <(IDENTIFIER,fingerprintReply,fingerprintReply =
            QMessageBox::inf...)<SUB>35</SUB>> ]
"30064771100" [label = <(information,QMessageBox::information(
            this, tr(...)<SUB>36</SUB>> ]
"68719476755" [label = <(IDENTIFIER,this,QMessageBox::information(
            this, tr(...)<SUB>37</SUB>> ]
"30064771101" [label = <(tr,tr(&quot;Security question&quot;))<SUB>37</SUB>> ]
"90194313221" [label = <(LITERAL,&quot;Security question&quot;,tr(&quot;Security question&quot;))<SUB>37</SUB>> ]
"30064771102" [label = <(arg,tr(&quot;Do you trust this fingerprint?\n\n&quot;
       ...)<SUB>38</SUB>> ]
"30064771103" [label = <(arg,tr(&quot;Do you trust this fingerprint?\n\n&quot;
       ...)<SUB>38</SUB>> ]
"30064771104" [label = <(arg,tr(&quot;Do you trust this fingerprint?\n\n&quot;
       ...)<SUB>38</SUB>> ]
"30064771105" [label = <(tr,tr(&quot;Do you trust this fingerprint?\n\n&quot;
       ...)<SUB>38</SUB>> ]
"90194313222" [label = <(LITERAL,&quot;Do you trust this fingerprint?\n\n&quot;
          ...,tr(&quot;Do you trust this fingerprint?\n\n&quot;
       ...)<SUB>38</SUB>> ]
"30064771106" [label = <(fromStdString,QString::fromStdString(barrier::format_ssl_fing...)<SUB>51</SUB>> ]
"30064771107" [label = <(format_ssl_fingerprint,barrier::format_ssl_fingerprint(fingerprint_sha...)<SUB>51</SUB>> ]
"30064771108" [label = <(&lt;operator&gt;.fieldAccess,fingerprint_sha256.data)<SUB>51</SUB>> ]
"68719476756" [label = <(IDENTIFIER,fingerprint_sha256,barrier::format_ssl_fingerprint(fingerprint_sha...)<SUB>51</SUB>> ]
"55834574850" [label = <(FIELD_IDENTIFIER,data,data)<SUB>51</SUB>> ]
"30064771109" [label = <(fromStdString,QString::fromStdString(
                     ba...)<SUB>52</SUB>> ]
"30064771110" [label = <(create_fingerprint_randomart,barrier::create_fingerprint_randomart(fingerpri...)<SUB>53</SUB>> ]
"30064771111" [label = <(&lt;operator&gt;.fieldAccess,fingerprint_sha256.data)<SUB>53</SUB>> ]
"68719476757" [label = <(IDENTIFIER,fingerprint_sha256,barrier::create_fingerprint_randomart(fingerpri...)<SUB>53</SUB>> ]
"55834574851" [label = <(FIELD_IDENTIFIER,data,data)<SUB>53</SUB>> ]
"30064771112" [label = <(fromStdString,QString::fromStdString(barrier::format_ssl_fing...)<SUB>54</SUB>> ]
"30064771113" [label = <(format_ssl_fingerprint,barrier::format_ssl_fingerprint(fingerprint_sha...)<SUB>54</SUB>> ]
"30064771114" [label = <(&lt;operator&gt;.fieldAccess,fingerprint_sha1.data)<SUB>54</SUB>> ]
"68719476758" [label = <(IDENTIFIER,fingerprint_sha1,barrier::format_ssl_fingerprint(fingerprint_sha...)<SUB>54</SUB>> ]
"55834574852" [label = <(FIELD_IDENTIFIER,data,data)<SUB>54</SUB>> ]
"30064771115" [label = <(&lt;operator&gt;.or,QMessageBox::Yes | QMessageBox::No)<SUB>55</SUB>> ]
"30064771116" [label = <(&lt;operator&gt;.fieldAccess,QMessageBox::Yes)<SUB>55</SUB>> ]
"68719476759" [label = <(IDENTIFIER,QMessageBox,QMessageBox::Yes | QMessageBox::No)<SUB>55</SUB>> ]
"55834574853" [label = <(FIELD_IDENTIFIER,Yes,Yes)<SUB>55</SUB>> ]
"30064771117" [label = <(&lt;operator&gt;.fieldAccess,QMessageBox::No)<SUB>55</SUB>> ]
"68719476760" [label = <(IDENTIFIER,QMessageBox,QMessageBox::Yes | QMessageBox::No)<SUB>55</SUB>> ]
"55834574854" [label = <(FIELD_IDENTIFIER,No,No)<SUB>55</SUB>> ]
"47244640259" [label = <(CONTROL_STRUCTURE,IF,if (fingerprintReply == QMessageBox::Yes))<SUB>57</SUB>> ]
"30064771118" [label = <(&lt;operator&gt;.equals,fingerprintReply == QMessageBox::Yes)<SUB>57</SUB>> ]
"68719476761" [label = <(IDENTIFIER,fingerprintReply,fingerprintReply == QMessageBox::Yes)<SUB>57</SUB>> ]
"30064771119" [label = <(&lt;operator&gt;.fieldAccess,QMessageBox::Yes)<SUB>57</SUB>> ]
"68719476762" [label = <(IDENTIFIER,QMessageBox,fingerprintReply == QMessageBox::Yes)<SUB>57</SUB>> ]
"55834574855" [label = <(FIELD_IDENTIFIER,Yes,Yes)<SUB>57</SUB>> ]
"25769803781" [label = <(BLOCK,{
            // restart core process after tru...,{
            // restart core process after tru...)<SUB>57</SUB>> ]
"30064771120" [label = <(add_trusted,db.add_trusted(fingerprint_sha256))<SUB>59</SUB>> ]
"68719476763" [label = <(IDENTIFIER,db,db.add_trusted(fingerprint_sha256))<SUB>59</SUB>> ]
"68719476764" [label = <(IDENTIFIER,fingerprint_sha256,db.add_trusted(fingerprint_sha256))<SUB>59</SUB>> ]
"30064771121" [label = <(write,db.write(db_path))<SUB>60</SUB>> ]
"68719476765" [label = <(IDENTIFIER,db,db.write(db_path))<SUB>60</SUB>> ]
"68719476766" [label = <(IDENTIFIER,db_path,db.write(db_path))<SUB>60</SUB>> ]
"30064771122" [label = <(startBarrier,startBarrier())<SUB>61</SUB>> ]
"30064771123" [label = <(&lt;operator&gt;.assignment,messageBoxAlreadyShown = false)<SUB>64</SUB>> ]
"68719476767" [label = <(IDENTIFIER,messageBoxAlreadyShown,messageBoxAlreadyShown = false)<SUB>64</SUB>> ]
"90194313223" [label = <(LITERAL,false,messageBoxAlreadyShown = false)<SUB>64</SUB>> ]
"128849018880" [label = <(METHOD_RETURN,void)<SUB>1</SUB>> ]
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "128849018880"  [ label = "AST: "] 
  "25769803777" -> "94489280512"  [ label = "AST: "] 
  "25769803777" -> "30064771072"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "25769803777" -> "94489280513"  [ label = "AST: "] 
  "25769803777" -> "30064771075"  [ label = "AST: "] 
  "25769803777" -> "94489280514"  [ label = "AST: "] 
  "25769803777" -> "30064771083"  [ label = "AST: "] 
  "25769803777" -> "94489280515"  [ label = "AST: "] 
  "25769803777" -> "30064771091"  [ label = "AST: "] 
  "25769803777" -> "94489280516"  [ label = "AST: "] 
  "25769803777" -> "30064771093"  [ label = "AST: "] 
  "25769803777" -> "47244640257"  [ label = "AST: "] 
  "25769803777" -> "94489280517"  [ label = "AST: "] 
  "25769803777" -> "30064771095"  [ label = "AST: "] 
  "25769803777" -> "47244640258"  [ label = "AST: "] 
  "30064771072" -> "90194313216"  [ label = "AST: "] 
  "47244640256" -> "30064771073"  [ label = "AST: "] 
  "47244640256" -> "25769803778"  [ label = "AST: "] 
  "30064771073" -> "30064771074"  [ label = "AST: "] 
  "30064771074" -> "68719476736"  [ label = "AST: "] 
  "30064771074" -> "68719476737"  [ label = "AST: "] 
  "25769803778" -> "146028888064"  [ label = "AST: "] 
  "30064771075" -> "68719476738"  [ label = "AST: "] 
  "30064771075" -> "30064771076"  [ label = "AST: "] 
  "30064771076" -> "30064771077"  [ label = "AST: "] 
  "30064771076" -> "30064771080"  [ label = "AST: "] 
  "30064771077" -> "30064771078"  [ label = "AST: "] 
  "30064771078" -> "30064771079"  [ label = "AST: "] 
  "30064771078" -> "55834574848"  [ label = "AST: "] 
  "30064771079" -> "68719476739"  [ label = "AST: "] 
  "30064771079" -> "68719476740"  [ label = "AST: "] 
  "30064771080" -> "30064771081"  [ label = "AST: "] 
  "30064771081" -> "30064771082"  [ label = "AST: "] 
  "30064771082" -> "68719476741"  [ label = "AST: "] 
  "30064771082" -> "90194313217"  [ label = "AST: "] 
  "30064771083" -> "68719476742"  [ label = "AST: "] 
  "30064771083" -> "30064771084"  [ label = "AST: "] 
  "30064771084" -> "30064771085"  [ label = "AST: "] 
  "30064771084" -> "30064771088"  [ label = "AST: "] 
  "30064771085" -> "30064771086"  [ label = "AST: "] 
  "30064771086" -> "30064771087"  [ label = "AST: "] 
  "30064771086" -> "55834574849"  [ label = "AST: "] 
  "30064771087" -> "68719476743"  [ label = "AST: "] 
  "30064771087" -> "68719476744"  [ label = "AST: "] 
  "30064771088" -> "30064771089"  [ label = "AST: "] 
  "30064771089" -> "30064771090"  [ label = "AST: "] 
  "30064771090" -> "68719476745"  [ label = "AST: "] 
  "30064771090" -> "90194313218"  [ label = "AST: "] 
  "30064771091" -> "68719476746"  [ label = "AST: "] 
  "30064771091" -> "30064771092"  [ label = "AST: "] 
  "30064771093" -> "68719476747"  [ label = "AST: "] 
  "30064771093" -> "68719476748"  [ label = "AST: "] 
  "47244640257" -> "30064771094"  [ label = "AST: "] 
  "47244640257" -> "25769803779"  [ label = "AST: "] 
  "30064771094" -> "68719476749"  [ label = "AST: "] 
  "30064771094" -> "68719476750"  [ label = "AST: "] 
  "25769803779" -> "146028888065"  [ label = "AST: "] 
  "30064771095" -> "68719476751"  [ label = "AST: "] 
  "30064771095" -> "90194313219"  [ label = "AST: "] 
  "47244640258" -> "30064771096"  [ label = "AST: "] 
  "47244640258" -> "25769803780"  [ label = "AST: "] 
  "30064771096" -> "68719476752"  [ label = "AST: "] 
  "25769803780" -> "30064771097"  [ label = "AST: "] 
  "25769803780" -> "30064771098"  [ label = "AST: "] 
  "25769803780" -> "94489280518"  [ label = "AST: "] 
  "25769803780" -> "30064771099"  [ label = "AST: "] 
  "25769803780" -> "47244640259"  [ label = "AST: "] 
  "25769803780" -> "30064771123"  [ label = "AST: "] 
  "30064771098" -> "68719476753"  [ label = "AST: "] 
  "30064771098" -> "90194313220"  [ label = "AST: "] 
  "30064771099" -> "68719476754"  [ label = "AST: "] 
  "30064771099" -> "30064771100"  [ label = "AST: "] 
  "30064771100" -> "68719476755"  [ label = "AST: "] 
  "30064771100" -> "30064771101"  [ label = "AST: "] 
  "30064771100" -> "30064771102"  [ label = "AST: "] 
  "30064771100" -> "30064771115"  [ label = "AST: "] 
  "30064771101" -> "90194313221"  [ label = "AST: "] 
  "30064771102" -> "30064771103"  [ label = "AST: "] 
  "30064771102" -> "30064771112"  [ label = "AST: "] 
  "30064771103" -> "30064771104"  [ label = "AST: "] 
  "30064771103" -> "30064771109"  [ label = "AST: "] 
  "30064771104" -> "30064771105"  [ label = "AST: "] 
  "30064771104" -> "30064771106"  [ label = "AST: "] 
  "30064771105" -> "90194313222"  [ label = "AST: "] 
  "30064771106" -> "30064771107"  [ label = "AST: "] 
  "30064771107" -> "30064771108"  [ label = "AST: "] 
  "30064771108" -> "68719476756"  [ label = "AST: "] 
  "30064771108" -> "55834574850"  [ label = "AST: "] 
  "30064771109" -> "30064771110"  [ label = "AST: "] 
  "30064771110" -> "30064771111"  [ label = "AST: "] 
  "30064771111" -> "68719476757"  [ label = "AST: "] 
  "30064771111" -> "55834574851"  [ label = "AST: "] 
  "30064771112" -> "30064771113"  [ label = "AST: "] 
  "30064771113" -> "30064771114"  [ label = "AST: "] 
  "30064771114" -> "68719476758"  [ label = "AST: "] 
  "30064771114" -> "55834574852"  [ label = "AST: "] 
  "30064771115" -> "30064771116"  [ label = "AST: "] 
  "30064771115" -> "30064771117"  [ label = "AST: "] 
  "30064771116" -> "68719476759"  [ label = "AST: "] 
  "30064771116" -> "55834574853"  [ label = "AST: "] 
  "30064771117" -> "68719476760"  [ label = "AST: "] 
  "30064771117" -> "55834574854"  [ label = "AST: "] 
  "47244640259" -> "30064771118"  [ label = "AST: "] 
  "47244640259" -> "25769803781"  [ label = "AST: "] 
  "30064771118" -> "68719476761"  [ label = "AST: "] 
  "30064771118" -> "30064771119"  [ label = "AST: "] 
  "30064771119" -> "68719476762"  [ label = "AST: "] 
  "30064771119" -> "55834574855"  [ label = "AST: "] 
  "25769803781" -> "30064771120"  [ label = "AST: "] 
  "25769803781" -> "30064771121"  [ label = "AST: "] 
  "25769803781" -> "30064771122"  [ label = "AST: "] 
  "30064771120" -> "68719476763"  [ label = "AST: "] 
  "30064771120" -> "68719476764"  [ label = "AST: "] 
  "30064771121" -> "68719476765"  [ label = "AST: "] 
  "30064771121" -> "68719476766"  [ label = "AST: "] 
  "30064771123" -> "68719476767"  [ label = "AST: "] 
  "30064771123" -> "90194313223"  [ label = "AST: "] 
  "30064771072" -> "30064771074"  [ label = "CFG: "] 
  "30064771075" -> "30064771087"  [ label = "CFG: "] 
  "30064771083" -> "30064771092"  [ label = "CFG: "] 
  "30064771091" -> "30064771093"  [ label = "CFG: "] 
  "30064771093" -> "30064771094"  [ label = "CFG: "] 
  "30064771095" -> "30064771096"  [ label = "CFG: "] 
  "30064771073" -> "146028888064"  [ label = "CFG: "] 
  "30064771073" -> "30064771079"  [ label = "CFG: "] 
  "30064771076" -> "30064771075"  [ label = "CFG: "] 
  "30064771084" -> "30064771083"  [ label = "CFG: "] 
  "30064771092" -> "30064771091"  [ label = "CFG: "] 
  "30064771094" -> "146028888065"  [ label = "CFG: "] 
  "30064771094" -> "30064771095"  [ label = "CFG: "] 
  "30064771096" -> "30064771097"  [ label = "CFG: "] 
  "30064771096" -> "128849018880"  [ label = "CFG: "] 
  "30064771074" -> "30064771073"  [ label = "CFG: "] 
  "146028888064" -> "128849018880"  [ label = "CFG: "] 
  "30064771077" -> "30064771082"  [ label = "CFG: "] 
  "30064771080" -> "30064771076"  [ label = "CFG: "] 
  "30064771085" -> "30064771090"  [ label = "CFG: "] 
  "30064771088" -> "30064771084"  [ label = "CFG: "] 
  "146028888065" -> "128849018880"  [ label = "CFG: "] 
  "30064771097" -> "30064771098"  [ label = "CFG: "] 
  "30064771098" -> "30064771101"  [ label = "CFG: "] 
  "30064771099" -> "55834574855"  [ label = "CFG: "] 
  "30064771123" -> "128849018880"  [ label = "CFG: "] 
  "30064771078" -> "30064771077"  [ label = "CFG: "] 
  "30064771081" -> "30064771080"  [ label = "CFG: "] 
  "30064771086" -> "30064771085"  [ label = "CFG: "] 
  "30064771089" -> "30064771088"  [ label = "CFG: "] 
  "30064771100" -> "30064771099"  [ label = "CFG: "] 
  "30064771118" -> "30064771120"  [ label = "CFG: "] 
  "30064771118" -> "30064771123"  [ label = "CFG: "] 
  "30064771079" -> "55834574848"  [ label = "CFG: "] 
  "55834574848" -> "30064771078"  [ label = "CFG: "] 
  "30064771082" -> "30064771081"  [ label = "CFG: "] 
  "30064771087" -> "55834574849"  [ label = "CFG: "] 
  "55834574849" -> "30064771086"  [ label = "CFG: "] 
  "30064771090" -> "30064771089"  [ label = "CFG: "] 
  "30064771101" -> "30064771105"  [ label = "CFG: "] 
  "30064771102" -> "55834574853"  [ label = "CFG: "] 
  "30064771115" -> "30064771100"  [ label = "CFG: "] 
  "30064771119" -> "30064771118"  [ label = "CFG: "] 
  "30064771120" -> "30064771121"  [ label = "CFG: "] 
  "30064771121" -> "30064771122"  [ label = "CFG: "] 
  "30064771122" -> "30064771123"  [ label = "CFG: "] 
  "30064771103" -> "55834574852"  [ label = "CFG: "] 
  "30064771112" -> "30064771102"  [ label = "CFG: "] 
  "30064771116" -> "55834574854"  [ label = "CFG: "] 
  "30064771117" -> "30064771115"  [ label = "CFG: "] 
  "55834574855" -> "30064771119"  [ label = "CFG: "] 
  "30064771104" -> "55834574851"  [ label = "CFG: "] 
  "30064771109" -> "30064771103"  [ label = "CFG: "] 
  "30064771113" -> "30064771112"  [ label = "CFG: "] 
  "55834574853" -> "30064771116"  [ label = "CFG: "] 
  "55834574854" -> "30064771117"  [ label = "CFG: "] 
  "30064771105" -> "55834574850"  [ label = "CFG: "] 
  "30064771106" -> "30064771104"  [ label = "CFG: "] 
  "30064771110" -> "30064771109"  [ label = "CFG: "] 
  "30064771114" -> "30064771113"  [ label = "CFG: "] 
  "30064771107" -> "30064771106"  [ label = "CFG: "] 
  "30064771111" -> "30064771110"  [ label = "CFG: "] 
  "55834574852" -> "30064771114"  [ label = "CFG: "] 
  "30064771108" -> "30064771107"  [ label = "CFG: "] 
  "55834574851" -> "30064771111"  [ label = "CFG: "] 
  "55834574850" -> "30064771108"  [ label = "CFG: "] 
  "111669149697" -> "30064771072"  [ label = "CFG: "] 
  "146028888065" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888064" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "30064771072" -> "128849018880"  [ label = "DDG: fingerprintRegex(&quot;.*server fingerprint \\(SHA1\\): ([A-F0-9:]+) \\(SHA256\\): ([A-F0-9:]+)&quot;)"] 
  "30064771074" -> "128849018880"  [ label = "DDG: fingerprintRegex"] 
  "30064771074" -> "128849018880"  [ label = "DDG: line"] 
  "30064771073" -> "128849018880"  [ label = "DDG: fingerprintRegex.exactMatch(line)"] 
  "30064771073" -> "128849018880"  [ label = "DDG: !fingerprintRegex.exactMatch(line)"] 
  "30064771100" -> "128849018880"  [ label = "DDG: this"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "30064771076" -> "30064771075"  [ label = "DDG: barrier::fingerprint_type_to_string(barrier::FingerprintType::SHA1)"] 
  "30064771076" -> "30064771075"  [ label = "DDG: barrier::string::from_hex(fingerprintRegex.cap(1).toStdString())"] 
  "30064771084" -> "30064771083"  [ label = "DDG: barrier::fingerprint_type_to_string(barrier::FingerprintType::SHA256)"] 
  "30064771084" -> "30064771083"  [ label = "DDG: barrier::string::from_hex(fingerprintRegex.cap(2).toStdString())"] 
  "111669149697" -> "30064771091"  [ label = "DDG: "] 
  "111669149697" -> "30064771095"  [ label = "DDG: "] 
  "111669149697" -> "30064771072"  [ label = "DDG: "] 
  "111669149697" -> "30064771093"  [ label = "DDG: "] 
  "30064771091" -> "30064771093"  [ label = "DDG: db_path"] 
  "30064771074" -> "30064771073"  [ label = "DDG: fingerprintRegex"] 
  "30064771074" -> "30064771073"  [ label = "DDG: line"] 
  "111669149697" -> "146028888064"  [ label = "DDG: "] 
  "30064771077" -> "30064771076"  [ label = "DDG: barrier::FingerprintType::SHA1"] 
  "30064771080" -> "30064771076"  [ label = "DDG: fingerprintRegex.cap(1).toStdString()"] 
  "30064771085" -> "30064771084"  [ label = "DDG: barrier::FingerprintType::SHA256"] 
  "30064771088" -> "30064771084"  [ label = "DDG: fingerprintRegex.cap(2).toStdString()"] 
  "30064771093" -> "30064771094"  [ label = "DDG: db"] 
  "111669149697" -> "30064771094"  [ label = "DDG: "] 
  "30064771083" -> "30064771094"  [ label = "DDG: fingerprint_sha256"] 
  "111669149697" -> "146028888065"  [ label = "DDG: "] 
  "30064771095" -> "30064771096"  [ label = "DDG: messageBoxAlreadyShown"] 
  "111669149697" -> "30064771096"  [ label = "DDG: "] 
  "111669149697" -> "30064771097"  [ label = "DDG: "] 
  "111669149697" -> "30064771098"  [ label = "DDG: "] 
  "30064771100" -> "30064771099"  [ label = "DDG: this"] 
  "30064771100" -> "30064771099"  [ label = "DDG: tr(&quot;Security question&quot;)"] 
  "30064771100" -> "30064771099"  [ label = "DDG: tr(&quot;Do you trust this fingerprint?\n\n&quot;
               &quot;SHA256:\n&quot;
               &quot;%1\n&quot;
               &quot;%2\n\n&quot;
               &quot;SHA1 (obsolete, when using old Barrier server):\n&quot;
               &quot;%3\n\n&quot;
               &quot;This is a server fingerprint. You should compare this &quot;
               &quot;fingerprint to the one on your server's screen. If the &quot;
               &quot;two don't match exactly, then it's probably not the server &quot;
               &quot;you're expecting (it could be a malicious user).\n\n&quot;
               &quot;To automatically trust this fingerprint for future &quot;
               &quot;connections, click Yes. To reject this fingerprint and &quot;
               &quot;disconnect from the server, click No.&quot;)
            .arg(QString::fromStdString(barrier::format_ssl_fingerprint(fingerprint_sha256.data)))
            .arg(QString::fromStdString(
                     barrier::create_fingerprint_randomart(fingerprint_sha256.data)))
            .arg(QString::fromStdString(barrier::format_ssl_fingerprint(finge..."] 
  "30064771100" -> "30064771099"  [ label = "DDG: QMessageBox::Yes | QMessageBox::No"] 
  "111669149697" -> "30064771123"  [ label = "DDG: "] 
  "111669149697" -> "30064771074"  [ label = "DDG: "] 
  "115964116992" -> "30064771074"  [ label = "DDG: line"] 
  "30064771081" -> "30064771080"  [ label = "DDG: fingerprintRegex.cap(1)"] 
  "30064771089" -> "30064771088"  [ label = "DDG: fingerprintRegex.cap(2)"] 
  "30064771082" -> "30064771081"  [ label = "DDG: fingerprintRegex"] 
  "30064771082" -> "30064771081"  [ label = "DDG: 1"] 
  "30064771090" -> "30064771089"  [ label = "DDG: fingerprintRegex"] 
  "30064771090" -> "30064771089"  [ label = "DDG: 2"] 
  "111669149697" -> "30064771100"  [ label = "DDG: "] 
  "30064771101" -> "30064771100"  [ label = "DDG: &quot;Security question&quot;"] 
  "30064771102" -> "30064771100"  [ label = "DDG: tr(&quot;Do you trust this fingerprint?\n\n&quot;
               &quot;SHA256:\n&quot;
               &quot;%1\n&quot;
               &quot;%2\n\n&quot;
               &quot;SHA1 (obsolete, when using old Barrier server):\n&quot;
               &quot;%3\n\n&quot;
               &quot;This is a server fingerprint. You should compare this &quot;
               &quot;fingerprint to the one on your server's screen. If the &quot;
               &quot;two don't match exactly, then it's probably not the server &quot;
               &quot;you're expecting (it could be a malicious user).\n\n&quot;
               &quot;To automatically trust this fingerprint for future &quot;
               &quot;connections, click Yes. To reject this fingerprint and &quot;
               &quot;disconnect from the server, click No.&quot;)
            .arg(QString::fromStdString(barrier::format_ssl_fingerprint(fingerprint_sha256.data)))
            .arg(QString::fromStdString(
                     barrier::create_fingerprint_randomart(fingerprint_sha256.data)))"] 
  "30064771102" -> "30064771100"  [ label = "DDG: QString::fromStdString(barrier::format_ssl_fingerprint(fingerprint_sha1.data))"] 
  "30064771115" -> "30064771100"  [ label = "DDG: QMessageBox::Yes"] 
  "30064771115" -> "30064771100"  [ label = "DDG: QMessageBox::No"] 
  "30064771099" -> "30064771118"  [ label = "DDG: fingerprintReply"] 
  "111669149697" -> "30064771118"  [ label = "DDG: "] 
  "30064771115" -> "30064771118"  [ label = "DDG: QMessageBox::Yes"] 
  "111669149697" -> "30064771122"  [ label = "DDG: "] 
  "30064771074" -> "30064771082"  [ label = "DDG: fingerprintRegex"] 
  "111669149697" -> "30064771082"  [ label = "DDG: "] 
  "30064771082" -> "30064771090"  [ label = "DDG: fingerprintRegex"] 
  "111669149697" -> "30064771090"  [ label = "DDG: "] 
  "111669149697" -> "30064771101"  [ label = "DDG: "] 
  "30064771103" -> "30064771102"  [ label = "DDG: tr(&quot;Do you trust this fingerprint?\n\n&quot;
               &quot;SHA256:\n&quot;
               &quot;%1\n&quot;
               &quot;%2\n\n&quot;
               &quot;SHA1 (obsolete, when using old Barrier server):\n&quot;
               &quot;%3\n\n&quot;
               &quot;This is a server fingerprint. You should compare this &quot;
               &quot;fingerprint to the one on your server's screen. If the &quot;
               &quot;two don't match exactly, then it's probably not the server &quot;
               &quot;you're expecting (it could be a malicious user).\n\n&quot;
               &quot;To automatically trust this fingerprint for future &quot;
               &quot;connections, click Yes. To reject this fingerprint and &quot;
               &quot;disconnect from the server, click No.&quot;)
            .arg(QString::fromStdString(barrier::format_ssl_fingerprint(fingerprint_sha256.data)))"] 
  "30064771103" -> "30064771102"  [ label = "DDG: QString::fromStdString(
                     barrier::create_fingerprint_randomart(fingerprint_sha256.data))"] 
  "30064771112" -> "30064771102"  [ label = "DDG: barrier::format_ssl_fingerprint(fingerprint_sha1.data)"] 
  "30064771094" -> "30064771120"  [ label = "DDG: db"] 
  "111669149697" -> "30064771120"  [ label = "DDG: "] 
  "30064771094" -> "30064771120"  [ label = "DDG: fingerprint_sha256"] 
  "30064771110" -> "30064771120"  [ label = "DDG: fingerprint_sha256.data"] 
  "30064771120" -> "30064771121"  [ label = "DDG: db"] 
  "111669149697" -> "30064771121"  [ label = "DDG: "] 
  "30064771093" -> "30064771121"  [ label = "DDG: db_path"] 
  "30064771104" -> "30064771103"  [ label = "DDG: tr(&quot;Do you trust this fingerprint?\n\n&quot;
               &quot;SHA256:\n&quot;
               &quot;%1\n&quot;
               &quot;%2\n\n&quot;
               &quot;SHA1 (obsolete, when using old Barrier server):\n&quot;
               &quot;%3\n\n&quot;
               &quot;This is a server fingerprint. You should compare this &quot;
               &quot;fingerprint to the one on your server's screen. If the &quot;
               &quot;two don't match exactly, then it's probably not the server &quot;
               &quot;you're expecting (it could be a malicious user).\n\n&quot;
               &quot;To automatically trust this fingerprint for future &quot;
               &quot;connections, click Yes. To reject this fingerprint and &quot;
               &quot;disconnect from the server, click No.&quot;)"] 
  "30064771104" -> "30064771103"  [ label = "DDG: QString::fromStdString(barrier::format_ssl_fingerprint(fingerprint_sha256.data))"] 
  "30064771109" -> "30064771103"  [ label = "DDG: barrier::create_fingerprint_randomart(fingerprint_sha256.data)"] 
  "30064771113" -> "30064771112"  [ label = "DDG: fingerprint_sha1.data"] 
  "30064771105" -> "30064771104"  [ label = "DDG: &quot;Do you trust this fingerprint?\n\n&quot;
               &quot;SHA256:\n&quot;
               &quot;%1\n&quot;
               &quot;%2\n\n&quot;
               &quot;SHA1 (obsolete, when using old Barrier server):\n&quot;
               &quot;%3\n\n&quot;
               &quot;This is a server fingerprint. You should compare this &quot;
               &quot;fingerprint to the one on your server's screen. If the &quot;
               &quot;two don't match exactly, then it's probably not the server &quot;
               &quot;you're expecting (it could be a malicious user).\n\n&quot;
               &quot;To automatically trust this fingerprint for future &quot;
               &quot;connections, click Yes. To reject this fingerprint and &quot;
               &quot;disconnect from the server, click No.&quot;"] 
  "30064771106" -> "30064771104"  [ label = "DDG: barrier::format_ssl_fingerprint(fingerprint_sha256.data)"] 
  "30064771110" -> "30064771109"  [ label = "DDG: fingerprint_sha256.data"] 
  "30064771075" -> "30064771113"  [ label = "DDG: fingerprint_sha1"] 
  "111669149697" -> "30064771105"  [ label = "DDG: "] 
  "30064771107" -> "30064771106"  [ label = "DDG: fingerprint_sha256.data"] 
  "30064771094" -> "30064771110"  [ label = "DDG: fingerprint_sha256"] 
  "30064771107" -> "30064771110"  [ label = "DDG: fingerprint_sha256.data"] 
  "30064771094" -> "30064771107"  [ label = "DDG: fingerprint_sha256"] 
  "30064771073" -> "55834574848"  [ label = "CDG: "] 
  "30064771073" -> "55834574849"  [ label = "CDG: "] 
  "30064771073" -> "146028888064"  [ label = "CDG: "] 
  "30064771073" -> "30064771079"  [ label = "CDG: "] 
  "30064771073" -> "30064771080"  [ label = "CDG: "] 
  "30064771073" -> "30064771081"  [ label = "CDG: "] 
  "30064771073" -> "30064771082"  [ label = "CDG: "] 
  "30064771073" -> "30064771075"  [ label = "CDG: "] 
  "30064771073" -> "30064771076"  [ label = "CDG: "] 
  "30064771073" -> "30064771077"  [ label = "CDG: "] 
  "30064771073" -> "30064771078"  [ label = "CDG: "] 
  "30064771073" -> "30064771087"  [ label = "CDG: "] 
  "30064771073" -> "30064771088"  [ label = "CDG: "] 
  "30064771073" -> "30064771089"  [ label = "CDG: "] 
  "30064771073" -> "30064771090"  [ label = "CDG: "] 
  "30064771073" -> "30064771083"  [ label = "CDG: "] 
  "30064771073" -> "30064771084"  [ label = "CDG: "] 
  "30064771073" -> "30064771085"  [ label = "CDG: "] 
  "30064771073" -> "30064771086"  [ label = "CDG: "] 
  "30064771073" -> "30064771091"  [ label = "CDG: "] 
  "30064771073" -> "30064771092"  [ label = "CDG: "] 
  "30064771073" -> "30064771093"  [ label = "CDG: "] 
  "30064771073" -> "30064771094"  [ label = "CDG: "] 
  "30064771094" -> "146028888065"  [ label = "CDG: "] 
  "30064771094" -> "30064771095"  [ label = "CDG: "] 
  "30064771094" -> "30064771096"  [ label = "CDG: "] 
  "30064771096" -> "55834574853"  [ label = "CDG: "] 
  "30064771096" -> "55834574854"  [ label = "CDG: "] 
  "30064771096" -> "55834574855"  [ label = "CDG: "] 
  "30064771096" -> "55834574850"  [ label = "CDG: "] 
  "30064771096" -> "55834574851"  [ label = "CDG: "] 
  "30064771096" -> "55834574852"  [ label = "CDG: "] 
  "30064771096" -> "30064771097"  [ label = "CDG: "] 
  "30064771096" -> "30064771098"  [ label = "CDG: "] 
  "30064771096" -> "30064771103"  [ label = "CDG: "] 
  "30064771096" -> "30064771104"  [ label = "CDG: "] 
  "30064771096" -> "30064771105"  [ label = "CDG: "] 
  "30064771096" -> "30064771106"  [ label = "CDG: "] 
  "30064771096" -> "30064771099"  [ label = "CDG: "] 
  "30064771096" -> "30064771100"  [ label = "CDG: "] 
  "30064771096" -> "30064771101"  [ label = "CDG: "] 
  "30064771096" -> "30064771102"  [ label = "CDG: "] 
  "30064771096" -> "30064771111"  [ label = "CDG: "] 
  "30064771096" -> "30064771112"  [ label = "CDG: "] 
  "30064771096" -> "30064771113"  [ label = "CDG: "] 
  "30064771096" -> "30064771114"  [ label = "CDG: "] 
  "30064771096" -> "30064771107"  [ label = "CDG: "] 
  "30064771096" -> "30064771108"  [ label = "CDG: "] 
  "30064771096" -> "30064771109"  [ label = "CDG: "] 
  "30064771096" -> "30064771110"  [ label = "CDG: "] 
  "30064771096" -> "30064771119"  [ label = "CDG: "] 
  "30064771096" -> "30064771115"  [ label = "CDG: "] 
  "30064771096" -> "30064771116"  [ label = "CDG: "] 
  "30064771096" -> "30064771117"  [ label = "CDG: "] 
  "30064771096" -> "30064771118"  [ label = "CDG: "] 
  "30064771096" -> "30064771123"  [ label = "CDG: "] 
  "30064771118" -> "30064771120"  [ label = "CDG: "] 
  "30064771118" -> "30064771121"  [ label = "CDG: "] 
  "30064771118" -> "30064771122"  [ label = "CDG: "] 
}
"""
)
