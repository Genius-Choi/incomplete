[33mval[0m [36mres1070[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "test_choose_tls_port_under_netns" {  
"111669149697" [label = <(METHOD,test_choose_tls_port_under_netns)<SUB>1</SUB>> ]
"25769803777" [label = <(BLOCK,,)<SUB>1</SUB>> ]
"30064771073" [label = <(patch,mocker.patch(&quot;builtins.open&quot;))<SUB>2</SUB>> ]
"30064771072" [label = <(&lt;operator&gt;.fieldAccess,mocker.patch)<SUB>2</SUB>> ]
"68719476737" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;builtins.open&quot;))<SUB>2</SUB>> ]
"55834574848" [label = <(FIELD_IDENTIFIER,patch,patch)<SUB>2</SUB>> ]
"68719476738" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;builtins.open&quot;))<SUB>2</SUB>> ]
"90194313216" [label = <(LITERAL,&quot;builtins.open&quot;,mocker.patch(&quot;builtins.open&quot;))<SUB>2</SUB>> ]
"30064771077" [label = <(&lt;operator&gt;.assignment,setns_mock = mocker.patch(&quot;mount_efs.setns&quot;, re...)<SUB>3</SUB>> ]
"68719476741" [label = <(IDENTIFIER,setns_mock,setns_mock = mocker.patch(&quot;mount_efs.setns&quot;, re...)<SUB>3</SUB>> ]
"30064771076" [label = <(patch,mocker.patch(&quot;mount_efs.setns&quot;, return_value = ...)<SUB>3</SUB>> ]
"30064771075" [label = <(&lt;operator&gt;.fieldAccess,mocker.patch)<SUB>3</SUB>> ]
"68719476739" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;mount_efs.setns&quot;, return_value = ...)<SUB>3</SUB>> ]
"55834574849" [label = <(FIELD_IDENTIFIER,patch,patch)<SUB>3</SUB>> ]
"68719476740" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;mount_efs.setns&quot;, return_value = ...)<SUB>3</SUB>> ]
"90194313217" [label = <(LITERAL,&quot;mount_efs.setns&quot;,mocker.patch(&quot;mount_efs.setns&quot;, return_value = ...)<SUB>3</SUB>> ]
"30064771074" [label = <(&lt;operator&gt;.tupleLiteral,(None, None))<SUB>3</SUB>> ]
"90194313218" [label = <(LITERAL,None,(None, None))<SUB>3</SUB>> ]
"90194313219" [label = <(LITERAL,None,(None, None))<SUB>3</SUB>> ]
"30064771080" [label = <(patch,mocker.patch(&quot;socket.socket&quot;, return_value = Ma...)<SUB>4</SUB>> ]
"30064771079" [label = <(&lt;operator&gt;.fieldAccess,mocker.patch)<SUB>4</SUB>> ]
"68719476743" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;socket.socket&quot;, return_value = Ma...)<SUB>4</SUB>> ]
"55834574850" [label = <(FIELD_IDENTIFIER,patch,patch)<SUB>4</SUB>> ]
"68719476744" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;socket.socket&quot;, return_value = Ma...)<SUB>4</SUB>> ]
"90194313220" [label = <(LITERAL,&quot;socket.socket&quot;,mocker.patch(&quot;socket.socket&quot;, return_value = Ma...)<SUB>4</SUB>> ]
"30064771078" [label = <(MagicMock,MagicMock())<SUB>4</SUB>> ]
"68719476742" [label = <(IDENTIFIER,MagicMock,MagicMock())<SUB>4</SUB>> ]
"30064771085" [label = <(&lt;operator&gt;.assignment,options = tmp0 = {}
tmp0[&quot;netns&quot;] = &quot;/proc/1000...)<SUB>5</SUB>> ]
"68719476748" [label = <(IDENTIFIER,options,options = tmp0 = {}
tmp0[&quot;netns&quot;] = &quot;/proc/1000...)<SUB>5</SUB>> ]
"25769803778" [label = <(BLOCK,tmp0 = {}
tmp0[&quot;netns&quot;] = &quot;/proc/1000/ns/net&quot;
tmp0,tmp0 = {}
tmp0[&quot;netns&quot;] = &quot;/proc/1000/ns/net&quot;
tmp0)<SUB>5</SUB>> ]
"30064771082" [label = <(&lt;operator&gt;.assignment,tmp0 = {})<SUB>5</SUB>> ]
"68719476745" [label = <(IDENTIFIER,tmp0,tmp0 = {})<SUB>5</SUB>> ]
"30064771081" [label = <(&lt;operator&gt;.dictLiteral,{})<SUB>5</SUB>> ]
"30064771084" [label = <(&lt;operator&gt;.assignment,tmp0[&quot;netns&quot;] = &quot;/proc/1000/ns/net&quot;)<SUB>5</SUB>> ]
"30064771083" [label = <(&lt;operator&gt;.indexAccess,tmp0[&quot;netns&quot;])<SUB>5</SUB>> ]
"68719476746" [label = <(IDENTIFIER,tmp0,tmp0[&quot;netns&quot;] = &quot;/proc/1000/ns/net&quot;)<SUB>5</SUB>> ]
"90194313221" [label = <(LITERAL,&quot;netns&quot;,tmp0[&quot;netns&quot;] = &quot;/proc/1000/ns/net&quot;)<SUB>5</SUB>> ]
"90194313222" [label = <(LITERAL,&quot;/proc/1000/ns/net&quot;,tmp0[&quot;netns&quot;] = &quot;/proc/1000/ns/net&quot;)<SUB>5</SUB>> ]
"68719476747" [label = <(IDENTIFIER,tmp0,tmp0 = {}
tmp0[&quot;netns&quot;] = &quot;/proc/1000/ns/net&quot;
tmp0)<SUB>5</SUB>> ]
"30064771088" [label = <(choose_tls_port_and_get_bind_sock,mount_efs.choose_tls_port_and_get_bind_sock(_ge...)<SUB>7</SUB>> ]
"30064771087" [label = <(&lt;operator&gt;.fieldAccess,mount_efs.choose_tls_port_and_get_bind_sock)<SUB>7</SUB>> ]
"68719476751" [label = <(IDENTIFIER,mount_efs,mount_efs.choose_tls_port_and_get_bind_sock(_ge...)<SUB>7</SUB>> ]
"55834574851" [label = <(FIELD_IDENTIFIER,choose_tls_port_and_get_bind_sock,choose_tls_port_and_get_bind_sock)<SUB>7</SUB>> ]
"68719476752" [label = <(IDENTIFIER,mount_efs,mount_efs.choose_tls_port_and_get_bind_sock(_ge...)<SUB>7</SUB>> ]
"30064771086" [label = <(_get_config,_get_config())<SUB>7</SUB>> ]
"68719476749" [label = <(IDENTIFIER,_get_config,_get_config())<SUB>7</SUB>> ]
"68719476750" [label = <(IDENTIFIER,options,mount_efs.choose_tls_port_and_get_bind_sock(_ge...)<SUB>7</SUB>> ]
"30064771090" [label = <(assert_called,utils.assert_called(setns_mock))<SUB>8</SUB>> ]
"30064771089" [label = <(&lt;operator&gt;.fieldAccess,utils.assert_called)<SUB>8</SUB>> ]
"68719476754" [label = <(IDENTIFIER,utils,utils.assert_called(setns_mock))<SUB>8</SUB>> ]
"55834574852" [label = <(FIELD_IDENTIFIER,assert_called,assert_called)<SUB>8</SUB>> ]
"68719476755" [label = <(IDENTIFIER,utils,utils.assert_called(setns_mock))<SUB>8</SUB>> ]
"68719476753" [label = <(IDENTIFIER,setns_mock,utils.assert_called(setns_mock))<SUB>8</SUB>> ]
"94489280513" [label = <(LOCAL,setns_mock: ANY)<SUB>3</SUB>> ]
"94489280514" [label = <(LOCAL,MagicMock: ANY)<SUB>4</SUB>> ]
"94489280516" [label = <(LOCAL,tmp0: __builtin.dict)<SUB>5</SUB>> ]
"94489280517" [label = <(LOCAL,options: __builtin.dict)<SUB>5</SUB>> ]
"94489280518" [label = <(LOCAL,_get_config: ANY)<SUB>7</SUB>> ]
"94489280520" [label = <(LOCAL,mount_efs: ANY)<SUB>7</SUB>> ]
"94489280522" [label = <(LOCAL,utils: ANY)<SUB>8</SUB>> ]
"133143986178" [label = <(MODIFIER,VIRTUAL)> ]
"115964116992" [label = <(PARAM,mocker)<SUB>1</SUB>> ]
"115964116993" [label = <(PARAM,capsys)<SUB>1</SUB>> ]
"128849018881" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
  "111669149697" -> "133143986178"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "115964116993"  [ label = "AST: "] 
  "111669149697" -> "128849018881"  [ label = "AST: "] 
  "25769803777" -> "30064771073"  [ label = "AST: "] 
  "25769803777" -> "94489280513"  [ label = "AST: "] 
  "25769803777" -> "30064771077"  [ label = "AST: "] 
  "25769803777" -> "94489280514"  [ label = "AST: "] 
  "25769803777" -> "30064771080"  [ label = "AST: "] 
  "25769803777" -> "94489280516"  [ label = "AST: "] 
  "25769803777" -> "30064771085"  [ label = "AST: "] 
  "25769803777" -> "94489280517"  [ label = "AST: "] 
  "25769803777" -> "30064771088"  [ label = "AST: "] 
  "25769803777" -> "94489280518"  [ label = "AST: "] 
  "25769803777" -> "30064771090"  [ label = "AST: "] 
  "25769803777" -> "94489280520"  [ label = "AST: "] 
  "25769803777" -> "94489280522"  [ label = "AST: "] 
  "30064771073" -> "30064771072"  [ label = "AST: "] 
  "30064771073" -> "68719476738"  [ label = "AST: "] 
  "30064771073" -> "90194313216"  [ label = "AST: "] 
  "30064771072" -> "68719476737"  [ label = "AST: "] 
  "30064771072" -> "55834574848"  [ label = "AST: "] 
  "30064771077" -> "68719476741"  [ label = "AST: "] 
  "30064771077" -> "30064771076"  [ label = "AST: "] 
  "30064771076" -> "30064771075"  [ label = "AST: "] 
  "30064771076" -> "68719476740"  [ label = "AST: "] 
  "30064771076" -> "90194313217"  [ label = "AST: "] 
  "30064771076" -> "30064771074"  [ label = "AST: "] 
  "30064771075" -> "68719476739"  [ label = "AST: "] 
  "30064771075" -> "55834574849"  [ label = "AST: "] 
  "30064771074" -> "90194313218"  [ label = "AST: "] 
  "30064771074" -> "90194313219"  [ label = "AST: "] 
  "30064771080" -> "30064771079"  [ label = "AST: "] 
  "30064771080" -> "68719476744"  [ label = "AST: "] 
  "30064771080" -> "90194313220"  [ label = "AST: "] 
  "30064771080" -> "30064771078"  [ label = "AST: "] 
  "30064771079" -> "68719476743"  [ label = "AST: "] 
  "30064771079" -> "55834574850"  [ label = "AST: "] 
  "30064771078" -> "68719476742"  [ label = "AST: "] 
  "30064771085" -> "68719476748"  [ label = "AST: "] 
  "30064771085" -> "25769803778"  [ label = "AST: "] 
  "25769803778" -> "30064771082"  [ label = "AST: "] 
  "25769803778" -> "30064771084"  [ label = "AST: "] 
  "25769803778" -> "68719476747"  [ label = "AST: "] 
  "30064771082" -> "68719476745"  [ label = "AST: "] 
  "30064771082" -> "30064771081"  [ label = "AST: "] 
  "30064771084" -> "30064771083"  [ label = "AST: "] 
  "30064771084" -> "90194313222"  [ label = "AST: "] 
  "30064771083" -> "68719476746"  [ label = "AST: "] 
  "30064771083" -> "90194313221"  [ label = "AST: "] 
  "30064771088" -> "30064771087"  [ label = "AST: "] 
  "30064771088" -> "68719476752"  [ label = "AST: "] 
  "30064771088" -> "30064771086"  [ label = "AST: "] 
  "30064771088" -> "68719476750"  [ label = "AST: "] 
  "30064771087" -> "68719476751"  [ label = "AST: "] 
  "30064771087" -> "55834574851"  [ label = "AST: "] 
  "30064771086" -> "68719476749"  [ label = "AST: "] 
  "30064771090" -> "30064771089"  [ label = "AST: "] 
  "30064771090" -> "68719476755"  [ label = "AST: "] 
  "30064771090" -> "68719476753"  [ label = "AST: "] 
  "30064771089" -> "68719476754"  [ label = "AST: "] 
  "30064771089" -> "55834574852"  [ label = "AST: "] 
  "30064771073" -> "55834574849"  [ label = "CFG: "] 
  "30064771077" -> "55834574850"  [ label = "CFG: "] 
  "30064771080" -> "30064771081"  [ label = "CFG: "] 
  "30064771085" -> "55834574851"  [ label = "CFG: "] 
  "30064771088" -> "55834574852"  [ label = "CFG: "] 
  "30064771090" -> "128849018881"  [ label = "CFG: "] 
  "30064771072" -> "30064771073"  [ label = "CFG: "] 
  "30064771076" -> "30064771077"  [ label = "CFG: "] 
  "30064771079" -> "30064771078"  [ label = "CFG: "] 
  "30064771078" -> "30064771080"  [ label = "CFG: "] 
  "30064771087" -> "30064771086"  [ label = "CFG: "] 
  "30064771086" -> "30064771088"  [ label = "CFG: "] 
  "30064771089" -> "30064771090"  [ label = "CFG: "] 
  "55834574848" -> "30064771072"  [ label = "CFG: "] 
  "30064771075" -> "30064771074"  [ label = "CFG: "] 
  "30064771074" -> "30064771076"  [ label = "CFG: "] 
  "55834574850" -> "30064771079"  [ label = "CFG: "] 
  "30064771082" -> "30064771083"  [ label = "CFG: "] 
  "30064771084" -> "30064771085"  [ label = "CFG: "] 
  "55834574851" -> "30064771087"  [ label = "CFG: "] 
  "55834574852" -> "30064771089"  [ label = "CFG: "] 
  "55834574849" -> "30064771075"  [ label = "CFG: "] 
  "30064771081" -> "30064771082"  [ label = "CFG: "] 
  "30064771083" -> "30064771084"  [ label = "CFG: "] 
  "111669149697" -> "55834574848"  [ label = "CFG: "] 
  "115964116993" -> "128849018881"  [ label = "DDG: capsys"] 
  "30064771073" -> "128849018881"  [ label = "DDG: mocker.patch(&quot;builtins.open&quot;)"] 
  "30064771076" -> "128849018881"  [ label = "DDG: (None, None)"] 
  "30064771077" -> "128849018881"  [ label = "DDG: mocker.patch(&quot;mount_efs.setns&quot;, return_value = (None, None))"] 
  "30064771077" -> "128849018881"  [ label = "DDG: setns_mock = mocker.patch(&quot;mount_efs.setns&quot;, return_value = (None, None))"] 
  "30064771080" -> "128849018881"  [ label = "DDG: mocker"] 
  "30064771080" -> "128849018881"  [ label = "DDG: MagicMock()"] 
  "30064771080" -> "128849018881"  [ label = "DDG: mocker.patch(&quot;socket.socket&quot;, return_value = MagicMock())"] 
  "30064771082" -> "128849018881"  [ label = "DDG: tmp0"] 
  "30064771082" -> "128849018881"  [ label = "DDG: {}"] 
  "30064771082" -> "128849018881"  [ label = "DDG: tmp0 = {}"] 
  "30064771084" -> "128849018881"  [ label = "DDG: tmp0[&quot;netns&quot;]"] 
  "30064771084" -> "128849018881"  [ label = "DDG: tmp0[&quot;netns&quot;] = &quot;/proc/1000/ns/net&quot;"] 
  "30064771085" -> "128849018881"  [ label = "DDG: options = tmp0 = {}
tmp0[&quot;netns&quot;] = &quot;/proc/1000/ns/net&quot;
tmp0"] 
  "30064771088" -> "128849018881"  [ label = "DDG: mount_efs"] 
  "30064771088" -> "128849018881"  [ label = "DDG: _get_config()"] 
  "30064771088" -> "128849018881"  [ label = "DDG: options"] 
  "30064771088" -> "128849018881"  [ label = "DDG: mount_efs.choose_tls_port_and_get_bind_sock(_get_config(), options)"] 
  "30064771090" -> "128849018881"  [ label = "DDG: utils"] 
  "30064771090" -> "128849018881"  [ label = "DDG: setns_mock"] 
  "30064771090" -> "128849018881"  [ label = "DDG: utils.assert_called(setns_mock)"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "111669149697" -> "115964116993"  [ label = "DDG: "] 
  "30064771076" -> "30064771077"  [ label = "DDG: mocker"] 
  "30064771076" -> "30064771077"  [ label = "DDG: &quot;mount_efs.setns&quot;"] 
  "30064771076" -> "30064771077"  [ label = "DDG: (None, None)"] 
  "30064771082" -> "30064771085"  [ label = "DDG: tmp0"] 
  "30064771084" -> "30064771085"  [ label = "DDG: tmp0[&quot;netns&quot;]"] 
  "111669149697" -> "30064771085"  [ label = "DDG: "] 
  "115964116992" -> "30064771073"  [ label = "DDG: mocker"] 
  "111669149697" -> "30064771073"  [ label = "DDG: "] 
  "30064771076" -> "30064771080"  [ label = "DDG: mocker"] 
  "111669149697" -> "30064771080"  [ label = "DDG: "] 
  "111669149697" -> "30064771088"  [ label = "DDG: "] 
  "30064771085" -> "30064771088"  [ label = "DDG: options"] 
  "111669149697" -> "30064771090"  [ label = "DDG: "] 
  "30064771077" -> "30064771090"  [ label = "DDG: setns_mock"] 
  "30064771073" -> "30064771076"  [ label = "DDG: mocker"] 
  "111669149697" -> "30064771076"  [ label = "DDG: "] 
  "30064771074" -> "30064771076"  [ label = "DDG: None"] 
  "111669149697" -> "68719476742"  [ label = "DDG: "] 
  "111669149697" -> "30064771082"  [ label = "DDG: "] 
  "111669149697" -> "30064771084"  [ label = "DDG: "] 
  "111669149697" -> "68719476747"  [ label = "DDG: "] 
  "111669149697" -> "68719476749"  [ label = "DDG: "] 
  "111669149697" -> "30064771074"  [ label = "DDG: "] 
}
"""
)
