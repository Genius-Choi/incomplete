[33mval[0m [36mres2368[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "test_count_binary_occurrences" {  
"111669149697" [label = <(METHOD,test_count_binary_occurrences)<SUB>1</SUB>> ]
"25769803777" [label = <(BLOCK,,)<SUB>1</SUB>> ]
"30064771073" [label = <(&lt;operator&gt;.assignment,test_data = [&quot;aaabc&quot;, &quot;abbde&quot;])<SUB>3</SUB>> ]
"68719476737" [label = <(IDENTIFIER,test_data,test_data = [&quot;aaabc&quot;, &quot;abbde&quot;])<SUB>3</SUB>> ]
"30064771072" [label = <(&lt;operator&gt;.listLiteral,[&quot;aaabc&quot;, &quot;abbde&quot;])<SUB>3</SUB>> ]
"90194313216" [label = <(LITERAL,&quot;aaabc&quot;,[&quot;aaabc&quot;, &quot;abbde&quot;])<SUB>3</SUB>> ]
"90194313217" [label = <(LITERAL,&quot;abbde&quot;,[&quot;aaabc&quot;, &quot;abbde&quot;])<SUB>3</SUB>> ]
"30064771075" [label = <(&lt;operator&gt;.assignment,vect = CountVectorizer(analyzer = &quot;char&quot;, max_d...)<SUB>4</SUB>> ]
"68719476739" [label = <(IDENTIFIER,vect,vect = CountVectorizer(analyzer = &quot;char&quot;, max_d...)<SUB>4</SUB>> ]
"30064771074" [label = <(CountVectorizer,CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0))<SUB>4</SUB>> ]
"68719476738" [label = <(IDENTIFIER,CountVectorizer,CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0))<SUB>4</SUB>> ]
"90194313218" [label = <(LITERAL,&quot;char&quot;,CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0))<SUB>4</SUB>> ]
"90194313219" [label = <(LITERAL,1.0,CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0))<SUB>4</SUB>> ]
"30064771081" [label = <(&lt;operator&gt;.assignment,X = tmp0 = vect.fit_transform(test_data)
tmp0.t...)<SUB>5</SUB>> ]
"68719476746" [label = <(IDENTIFIER,X,X = tmp0 = vect.fit_transform(test_data)
tmp0.t...)<SUB>5</SUB>> ]
"25769803778" [label = <(BLOCK,tmp0 = vect.fit_transform(test_data)
tmp0.toarr...,tmp0 = vect.fit_transform(test_data)
tmp0.toarr...)<SUB>5</SUB>> ]
"30064771078" [label = <(&lt;operator&gt;.assignment,tmp0 = vect.fit_transform(test_data))<SUB>5</SUB>> ]
"68719476743" [label = <(IDENTIFIER,tmp0,tmp0 = vect.fit_transform(test_data))<SUB>5</SUB>> ]
"30064771077" [label = <(fit_transform,vect.fit_transform(test_data))<SUB>5</SUB>> ]
"30064771076" [label = <(&lt;operator&gt;.fieldAccess,vect.fit_transform)<SUB>5</SUB>> ]
"68719476741" [label = <(IDENTIFIER,vect,vect.fit_transform(test_data))<SUB>5</SUB>> ]
"55834574848" [label = <(FIELD_IDENTIFIER,fit_transform,fit_transform)<SUB>5</SUB>> ]
"68719476742" [label = <(IDENTIFIER,vect,vect.fit_transform(test_data))<SUB>5</SUB>> ]
"68719476740" [label = <(IDENTIFIER,test_data,vect.fit_transform(test_data))<SUB>5</SUB>> ]
"30064771080" [label = <(toarray,tmp0.toarray())<SUB>5</SUB>> ]
"30064771079" [label = <(&lt;operator&gt;.fieldAccess,tmp0.toarray)<SUB>5</SUB>> ]
"68719476744" [label = <(IDENTIFIER,tmp0,tmp0.toarray())<SUB>5</SUB>> ]
"55834574849" [label = <(FIELD_IDENTIFIER,toarray,toarray)<SUB>5</SUB>> ]
"68719476745" [label = <(IDENTIFIER,tmp0,tmp0.toarray())<SUB>5</SUB>> ]
"30064771085" [label = <(assert_array_equal,assert_array_equal([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;], v...)<SUB>6</SUB>> ]
"68719476749" [label = <(IDENTIFIER,assert_array_equal,assert_array_equal([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;], v...)<SUB>6</SUB>> ]
"30064771082" [label = <(&lt;operator&gt;.listLiteral,[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;])<SUB>6</SUB>> ]
"90194313220" [label = <(LITERAL,&quot;a&quot;,[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;])<SUB>6</SUB>> ]
"90194313221" [label = <(LITERAL,&quot;b&quot;,[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;])<SUB>6</SUB>> ]
"90194313222" [label = <(LITERAL,&quot;c&quot;,[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;])<SUB>6</SUB>> ]
"90194313223" [label = <(LITERAL,&quot;d&quot;,[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;])<SUB>6</SUB>> ]
"90194313224" [label = <(LITERAL,&quot;e&quot;,[&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;])<SUB>6</SUB>> ]
"30064771084" [label = <(get_feature_names_out,vect.get_feature_names_out())<SUB>6</SUB>> ]
"30064771083" [label = <(&lt;operator&gt;.fieldAccess,vect.get_feature_names_out)<SUB>6</SUB>> ]
"68719476747" [label = <(IDENTIFIER,vect,vect.get_feature_names_out())<SUB>6</SUB>> ]
"55834574850" [label = <(FIELD_IDENTIFIER,get_feature_names_out,get_feature_names_out)<SUB>6</SUB>> ]
"68719476748" [label = <(IDENTIFIER,vect,vect.get_feature_names_out())<SUB>6</SUB>> ]
"30064771089" [label = <(assert_array_equal,assert_array_equal([[3, 1, 1, 0, 0], [1, 2, 0, ...)<SUB>7</SUB>> ]
"68719476751" [label = <(IDENTIFIER,assert_array_equal,assert_array_equal([[3, 1, 1, 0, 0], [1, 2, 0, ...)<SUB>7</SUB>> ]
"30064771088" [label = <(&lt;operator&gt;.listLiteral,[[3, 1, 1, 0, 0], [1, 2, 0, 1, 1]])<SUB>7</SUB>> ]
"30064771086" [label = <(&lt;operator&gt;.listLiteral,[3, 1, 1, 0, 0])<SUB>7</SUB>> ]
"90194313225" [label = <(LITERAL,3,[3, 1, 1, 0, 0])<SUB>7</SUB>> ]
"90194313226" [label = <(LITERAL,1,[3, 1, 1, 0, 0])<SUB>7</SUB>> ]
"90194313227" [label = <(LITERAL,1,[3, 1, 1, 0, 0])<SUB>7</SUB>> ]
"90194313228" [label = <(LITERAL,0,[3, 1, 1, 0, 0])<SUB>7</SUB>> ]
"90194313229" [label = <(LITERAL,0,[3, 1, 1, 0, 0])<SUB>7</SUB>> ]
"30064771087" [label = <(&lt;operator&gt;.listLiteral,[1, 2, 0, 1, 1])<SUB>7</SUB>> ]
"90194313230" [label = <(LITERAL,1,[1, 2, 0, 1, 1])<SUB>7</SUB>> ]
"90194313231" [label = <(LITERAL,2,[1, 2, 0, 1, 1])<SUB>7</SUB>> ]
"90194313232" [label = <(LITERAL,0,[1, 2, 0, 1, 1])<SUB>7</SUB>> ]
"90194313233" [label = <(LITERAL,1,[1, 2, 0, 1, 1])<SUB>7</SUB>> ]
"90194313234" [label = <(LITERAL,1,[1, 2, 0, 1, 1])<SUB>7</SUB>> ]
"68719476750" [label = <(IDENTIFIER,X,assert_array_equal([[3, 1, 1, 0, 0], [1, 2, 0, ...)<SUB>7</SUB>> ]
"30064771091" [label = <(&lt;operator&gt;.assignment,vect = CountVectorizer(analyzer = &quot;char&quot;, max_d...)<SUB>11</SUB>> ]
"68719476753" [label = <(IDENTIFIER,vect,vect = CountVectorizer(analyzer = &quot;char&quot;, max_d...)<SUB>11</SUB>> ]
"30064771090" [label = <(CountVectorizer,CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0...)<SUB>11</SUB>> ]
"68719476752" [label = <(IDENTIFIER,CountVectorizer,CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0...)<SUB>11</SUB>> ]
"90194313235" [label = <(LITERAL,&quot;char&quot;,CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0...)<SUB>11</SUB>> ]
"90194313236" [label = <(LITERAL,1.0,CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0...)<SUB>11</SUB>> ]
"90194313237" [label = <(LITERAL,True,CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0...)<SUB>11</SUB>> ]
"30064771097" [label = <(&lt;operator&gt;.assignment,X = tmp1 = vect.fit_transform(test_data)
tmp1.t...)<SUB>12</SUB>> ]
"68719476760" [label = <(IDENTIFIER,X,X = tmp1 = vect.fit_transform(test_data)
tmp1.t...)<SUB>12</SUB>> ]
"25769803779" [label = <(BLOCK,tmp1 = vect.fit_transform(test_data)
tmp1.toarr...,tmp1 = vect.fit_transform(test_data)
tmp1.toarr...)<SUB>12</SUB>> ]
"30064771094" [label = <(&lt;operator&gt;.assignment,tmp1 = vect.fit_transform(test_data))<SUB>12</SUB>> ]
"68719476757" [label = <(IDENTIFIER,tmp1,tmp1 = vect.fit_transform(test_data))<SUB>12</SUB>> ]
"30064771093" [label = <(fit_transform,vect.fit_transform(test_data))<SUB>12</SUB>> ]
"30064771092" [label = <(&lt;operator&gt;.fieldAccess,vect.fit_transform)<SUB>12</SUB>> ]
"68719476755" [label = <(IDENTIFIER,vect,vect.fit_transform(test_data))<SUB>12</SUB>> ]
"55834574851" [label = <(FIELD_IDENTIFIER,fit_transform,fit_transform)<SUB>12</SUB>> ]
"68719476756" [label = <(IDENTIFIER,vect,vect.fit_transform(test_data))<SUB>12</SUB>> ]
"68719476754" [label = <(IDENTIFIER,test_data,vect.fit_transform(test_data))<SUB>12</SUB>> ]
"30064771096" [label = <(toarray,tmp1.toarray())<SUB>12</SUB>> ]
"30064771095" [label = <(&lt;operator&gt;.fieldAccess,tmp1.toarray)<SUB>12</SUB>> ]
"68719476758" [label = <(IDENTIFIER,tmp1,tmp1.toarray())<SUB>12</SUB>> ]
"55834574852" [label = <(FIELD_IDENTIFIER,toarray,toarray)<SUB>12</SUB>> ]
"68719476759" [label = <(IDENTIFIER,tmp1,tmp1.toarray())<SUB>12</SUB>> ]
"30064771101" [label = <(assert_array_equal,assert_array_equal([[1, 1, 1, 0, 0], [1, 1, 0, ...)<SUB>13</SUB>> ]
"68719476762" [label = <(IDENTIFIER,assert_array_equal,assert_array_equal([[1, 1, 1, 0, 0], [1, 1, 0, ...)<SUB>13</SUB>> ]
"30064771100" [label = <(&lt;operator&gt;.listLiteral,[[1, 1, 1, 0, 0], [1, 1, 0, 1, 1]])<SUB>13</SUB>> ]
"30064771098" [label = <(&lt;operator&gt;.listLiteral,[1, 1, 1, 0, 0])<SUB>13</SUB>> ]
"90194313238" [label = <(LITERAL,1,[1, 1, 1, 0, 0])<SUB>13</SUB>> ]
"90194313239" [label = <(LITERAL,1,[1, 1, 1, 0, 0])<SUB>13</SUB>> ]
"90194313240" [label = <(LITERAL,1,[1, 1, 1, 0, 0])<SUB>13</SUB>> ]
"90194313241" [label = <(LITERAL,0,[1, 1, 1, 0, 0])<SUB>13</SUB>> ]
"90194313242" [label = <(LITERAL,0,[1, 1, 1, 0, 0])<SUB>13</SUB>> ]
"30064771099" [label = <(&lt;operator&gt;.listLiteral,[1, 1, 0, 1, 1])<SUB>13</SUB>> ]
"90194313243" [label = <(LITERAL,1,[1, 1, 0, 1, 1])<SUB>13</SUB>> ]
"90194313244" [label = <(LITERAL,1,[1, 1, 0, 1, 1])<SUB>13</SUB>> ]
"90194313245" [label = <(LITERAL,0,[1, 1, 0, 1, 1])<SUB>13</SUB>> ]
"90194313246" [label = <(LITERAL,1,[1, 1, 0, 1, 1])<SUB>13</SUB>> ]
"90194313247" [label = <(LITERAL,1,[1, 1, 0, 1, 1])<SUB>13</SUB>> ]
"68719476761" [label = <(IDENTIFIER,X,assert_array_equal([[1, 1, 1, 0, 0], [1, 1, 0, ...)<SUB>13</SUB>> ]
"30064771104" [label = <(&lt;operator&gt;.assignment,vect = CountVectorizer(analyzer = &quot;char&quot;, max_d...)<SUB>16</SUB>> ]
"68719476765" [label = <(IDENTIFIER,vect,vect = CountVectorizer(analyzer = &quot;char&quot;, max_d...)<SUB>16</SUB>> ]
"30064771103" [label = <(CountVectorizer,CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0...)<SUB>16</SUB>> ]
"68719476764" [label = <(IDENTIFIER,CountVectorizer,CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0...)<SUB>16</SUB>> ]
"90194313248" [label = <(LITERAL,&quot;char&quot;,CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0...)<SUB>16</SUB>> ]
"90194313249" [label = <(LITERAL,1.0,CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0...)<SUB>16</SUB>> ]
"90194313250" [label = <(LITERAL,True,CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0...)<SUB>16</SUB>> ]
"30064771102" [label = <(&lt;operator&gt;.fieldAccess,np.float32)<SUB>16</SUB>> ]
"68719476763" [label = <(IDENTIFIER,np,CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0...)<SUB>16</SUB>> ]
"55834574853" [label = <(FIELD_IDENTIFIER,float32,float32)<SUB>16</SUB>> ]
"30064771107" [label = <(&lt;operator&gt;.assignment,X_sparse = vect.fit_transform(test_data))<SUB>17</SUB>> ]
"68719476769" [label = <(IDENTIFIER,X_sparse,X_sparse = vect.fit_transform(test_data))<SUB>17</SUB>> ]
"30064771106" [label = <(fit_transform,vect.fit_transform(test_data))<SUB>17</SUB>> ]
"30064771105" [label = <(&lt;operator&gt;.fieldAccess,vect.fit_transform)<SUB>17</SUB>> ]
"68719476767" [label = <(IDENTIFIER,vect,vect.fit_transform(test_data))<SUB>17</SUB>> ]
"55834574854" [label = <(FIELD_IDENTIFIER,fit_transform,fit_transform)<SUB>17</SUB>> ]
"68719476768" [label = <(IDENTIFIER,vect,vect.fit_transform(test_data))<SUB>17</SUB>> ]
"68719476766" [label = <(IDENTIFIER,test_data,vect.fit_transform(test_data))<SUB>17</SUB>> ]
"30064771111" [label = <(&lt;operator&gt;.assert,assert X_sparse.dtype == np.float32)<SUB>18</SUB>> ]
"30064771110" [label = <(&lt;operator&gt;.equals,X_sparse.dtype == np.float32)<SUB>18</SUB>> ]
"30064771108" [label = <(&lt;operator&gt;.fieldAccess,X_sparse.dtype)<SUB>18</SUB>> ]
"68719476770" [label = <(IDENTIFIER,X_sparse,X_sparse.dtype == np.float32)<SUB>18</SUB>> ]
"55834574855" [label = <(FIELD_IDENTIFIER,dtype,dtype)<SUB>18</SUB>> ]
"30064771109" [label = <(&lt;operator&gt;.fieldAccess,np.float32)<SUB>18</SUB>> ]
"68719476771" [label = <(IDENTIFIER,np,X_sparse.dtype == np.float32)<SUB>18</SUB>> ]
"55834574856" [label = <(FIELD_IDENTIFIER,float32,float32)<SUB>18</SUB>> ]
"94489280513" [label = <(LOCAL,test_data: __builtin.list)<SUB>3</SUB>> ]
"94489280514" [label = <(LOCAL,CountVectorizer: ANY)<SUB>4</SUB>> ]
"94489280516" [label = <(LOCAL,vect: CountVectorizer.&lt;returnValue&gt;)<SUB>4</SUB>> ]
"94489280517" [label = <(LOCAL,tmp0: CountVectorizer.&lt;returnValue&gt;.fit_transform.&lt;returnValue&gt;)<SUB>5</SUB>> ]
"94489280518" [label = <(LOCAL,X: CountVectorizer.&lt;returnValue&gt;.fit_transform.&lt;returnValue&gt;.toarray)<SUB>5</SUB>> ]
"94489280519" [label = <(LOCAL,assert_array_equal: ANY)<SUB>6</SUB>> ]
"94489280521" [label = <(LOCAL,tmp1: CountVectorizer.&lt;returnValue&gt;.fit_transform.&lt;returnValue&gt;)<SUB>12</SUB>> ]
"94489280522" [label = <(LOCAL,np: ANY)<SUB>16</SUB>> ]
"94489280524" [label = <(LOCAL,X_sparse: CountVectorizer.&lt;returnValue&gt;.fit_transform.&lt;returnValue&gt;)<SUB>17</SUB>> ]
"133143986178" [label = <(MODIFIER,VIRTUAL)> ]
"128849018881" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
  "111669149697" -> "133143986178"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "128849018881"  [ label = "AST: "] 
  "25769803777" -> "30064771073"  [ label = "AST: "] 
  "25769803777" -> "94489280513"  [ label = "AST: "] 
  "25769803777" -> "30064771075"  [ label = "AST: "] 
  "25769803777" -> "94489280514"  [ label = "AST: "] 
  "25769803777" -> "30064771081"  [ label = "AST: "] 
  "25769803777" -> "94489280516"  [ label = "AST: "] 
  "25769803777" -> "30064771085"  [ label = "AST: "] 
  "25769803777" -> "94489280517"  [ label = "AST: "] 
  "25769803777" -> "30064771089"  [ label = "AST: "] 
  "25769803777" -> "94489280518"  [ label = "AST: "] 
  "25769803777" -> "30064771091"  [ label = "AST: "] 
  "25769803777" -> "94489280519"  [ label = "AST: "] 
  "25769803777" -> "30064771097"  [ label = "AST: "] 
  "25769803777" -> "94489280521"  [ label = "AST: "] 
  "25769803777" -> "30064771101"  [ label = "AST: "] 
  "25769803777" -> "94489280522"  [ label = "AST: "] 
  "25769803777" -> "30064771104"  [ label = "AST: "] 
  "25769803777" -> "94489280524"  [ label = "AST: "] 
  "25769803777" -> "30064771107"  [ label = "AST: "] 
  "25769803777" -> "30064771111"  [ label = "AST: "] 
  "30064771073" -> "68719476737"  [ label = "AST: "] 
  "30064771073" -> "30064771072"  [ label = "AST: "] 
  "30064771072" -> "90194313216"  [ label = "AST: "] 
  "30064771072" -> "90194313217"  [ label = "AST: "] 
  "30064771075" -> "68719476739"  [ label = "AST: "] 
  "30064771075" -> "30064771074"  [ label = "AST: "] 
  "30064771074" -> "68719476738"  [ label = "AST: "] 
  "30064771074" -> "90194313218"  [ label = "AST: "] 
  "30064771074" -> "90194313219"  [ label = "AST: "] 
  "30064771081" -> "68719476746"  [ label = "AST: "] 
  "30064771081" -> "25769803778"  [ label = "AST: "] 
  "25769803778" -> "30064771078"  [ label = "AST: "] 
  "25769803778" -> "30064771080"  [ label = "AST: "] 
  "30064771078" -> "68719476743"  [ label = "AST: "] 
  "30064771078" -> "30064771077"  [ label = "AST: "] 
  "30064771077" -> "30064771076"  [ label = "AST: "] 
  "30064771077" -> "68719476742"  [ label = "AST: "] 
  "30064771077" -> "68719476740"  [ label = "AST: "] 
  "30064771076" -> "68719476741"  [ label = "AST: "] 
  "30064771076" -> "55834574848"  [ label = "AST: "] 
  "30064771080" -> "30064771079"  [ label = "AST: "] 
  "30064771080" -> "68719476745"  [ label = "AST: "] 
  "30064771079" -> "68719476744"  [ label = "AST: "] 
  "30064771079" -> "55834574849"  [ label = "AST: "] 
  "30064771085" -> "68719476749"  [ label = "AST: "] 
  "30064771085" -> "30064771082"  [ label = "AST: "] 
  "30064771085" -> "30064771084"  [ label = "AST: "] 
  "30064771082" -> "90194313220"  [ label = "AST: "] 
  "30064771082" -> "90194313221"  [ label = "AST: "] 
  "30064771082" -> "90194313222"  [ label = "AST: "] 
  "30064771082" -> "90194313223"  [ label = "AST: "] 
  "30064771082" -> "90194313224"  [ label = "AST: "] 
  "30064771084" -> "30064771083"  [ label = "AST: "] 
  "30064771084" -> "68719476748"  [ label = "AST: "] 
  "30064771083" -> "68719476747"  [ label = "AST: "] 
  "30064771083" -> "55834574850"  [ label = "AST: "] 
  "30064771089" -> "68719476751"  [ label = "AST: "] 
  "30064771089" -> "30064771088"  [ label = "AST: "] 
  "30064771089" -> "68719476750"  [ label = "AST: "] 
  "30064771088" -> "30064771086"  [ label = "AST: "] 
  "30064771088" -> "30064771087"  [ label = "AST: "] 
  "30064771086" -> "90194313225"  [ label = "AST: "] 
  "30064771086" -> "90194313226"  [ label = "AST: "] 
  "30064771086" -> "90194313227"  [ label = "AST: "] 
  "30064771086" -> "90194313228"  [ label = "AST: "] 
  "30064771086" -> "90194313229"  [ label = "AST: "] 
  "30064771087" -> "90194313230"  [ label = "AST: "] 
  "30064771087" -> "90194313231"  [ label = "AST: "] 
  "30064771087" -> "90194313232"  [ label = "AST: "] 
  "30064771087" -> "90194313233"  [ label = "AST: "] 
  "30064771087" -> "90194313234"  [ label = "AST: "] 
  "30064771091" -> "68719476753"  [ label = "AST: "] 
  "30064771091" -> "30064771090"  [ label = "AST: "] 
  "30064771090" -> "68719476752"  [ label = "AST: "] 
  "30064771090" -> "90194313235"  [ label = "AST: "] 
  "30064771090" -> "90194313236"  [ label = "AST: "] 
  "30064771090" -> "90194313237"  [ label = "AST: "] 
  "30064771097" -> "68719476760"  [ label = "AST: "] 
  "30064771097" -> "25769803779"  [ label = "AST: "] 
  "25769803779" -> "30064771094"  [ label = "AST: "] 
  "25769803779" -> "30064771096"  [ label = "AST: "] 
  "30064771094" -> "68719476757"  [ label = "AST: "] 
  "30064771094" -> "30064771093"  [ label = "AST: "] 
  "30064771093" -> "30064771092"  [ label = "AST: "] 
  "30064771093" -> "68719476756"  [ label = "AST: "] 
  "30064771093" -> "68719476754"  [ label = "AST: "] 
  "30064771092" -> "68719476755"  [ label = "AST: "] 
  "30064771092" -> "55834574851"  [ label = "AST: "] 
  "30064771096" -> "30064771095"  [ label = "AST: "] 
  "30064771096" -> "68719476759"  [ label = "AST: "] 
  "30064771095" -> "68719476758"  [ label = "AST: "] 
  "30064771095" -> "55834574852"  [ label = "AST: "] 
  "30064771101" -> "68719476762"  [ label = "AST: "] 
  "30064771101" -> "30064771100"  [ label = "AST: "] 
  "30064771101" -> "68719476761"  [ label = "AST: "] 
  "30064771100" -> "30064771098"  [ label = "AST: "] 
  "30064771100" -> "30064771099"  [ label = "AST: "] 
  "30064771098" -> "90194313238"  [ label = "AST: "] 
  "30064771098" -> "90194313239"  [ label = "AST: "] 
  "30064771098" -> "90194313240"  [ label = "AST: "] 
  "30064771098" -> "90194313241"  [ label = "AST: "] 
  "30064771098" -> "90194313242"  [ label = "AST: "] 
  "30064771099" -> "90194313243"  [ label = "AST: "] 
  "30064771099" -> "90194313244"  [ label = "AST: "] 
  "30064771099" -> "90194313245"  [ label = "AST: "] 
  "30064771099" -> "90194313246"  [ label = "AST: "] 
  "30064771099" -> "90194313247"  [ label = "AST: "] 
  "30064771104" -> "68719476765"  [ label = "AST: "] 
  "30064771104" -> "30064771103"  [ label = "AST: "] 
  "30064771103" -> "68719476764"  [ label = "AST: "] 
  "30064771103" -> "90194313248"  [ label = "AST: "] 
  "30064771103" -> "90194313249"  [ label = "AST: "] 
  "30064771103" -> "90194313250"  [ label = "AST: "] 
  "30064771103" -> "30064771102"  [ label = "AST: "] 
  "30064771102" -> "68719476763"  [ label = "AST: "] 
  "30064771102" -> "55834574853"  [ label = "AST: "] 
  "30064771107" -> "68719476769"  [ label = "AST: "] 
  "30064771107" -> "30064771106"  [ label = "AST: "] 
  "30064771106" -> "30064771105"  [ label = "AST: "] 
  "30064771106" -> "68719476768"  [ label = "AST: "] 
  "30064771106" -> "68719476766"  [ label = "AST: "] 
  "30064771105" -> "68719476767"  [ label = "AST: "] 
  "30064771105" -> "55834574854"  [ label = "AST: "] 
  "30064771111" -> "30064771110"  [ label = "AST: "] 
  "30064771110" -> "30064771108"  [ label = "AST: "] 
  "30064771110" -> "30064771109"  [ label = "AST: "] 
  "30064771108" -> "68719476770"  [ label = "AST: "] 
  "30064771108" -> "55834574855"  [ label = "AST: "] 
  "30064771109" -> "68719476771"  [ label = "AST: "] 
  "30064771109" -> "55834574856"  [ label = "AST: "] 
  "30064771073" -> "30064771074"  [ label = "CFG: "] 
  "30064771075" -> "55834574848"  [ label = "CFG: "] 
  "30064771081" -> "30064771082"  [ label = "CFG: "] 
  "30064771085" -> "30064771086"  [ label = "CFG: "] 
  "30064771089" -> "30064771090"  [ label = "CFG: "] 
  "30064771091" -> "55834574851"  [ label = "CFG: "] 
  "30064771097" -> "30064771098"  [ label = "CFG: "] 
  "30064771101" -> "55834574853"  [ label = "CFG: "] 
  "30064771104" -> "55834574854"  [ label = "CFG: "] 
  "30064771107" -> "55834574855"  [ label = "CFG: "] 
  "30064771111" -> "128849018881"  [ label = "CFG: "] 
  "30064771072" -> "30064771073"  [ label = "CFG: "] 
  "30064771074" -> "30064771075"  [ label = "CFG: "] 
  "30064771082" -> "55834574850"  [ label = "CFG: "] 
  "30064771084" -> "30064771085"  [ label = "CFG: "] 
  "30064771088" -> "30064771089"  [ label = "CFG: "] 
  "30064771090" -> "30064771091"  [ label = "CFG: "] 
  "30064771100" -> "30064771101"  [ label = "CFG: "] 
  "30064771103" -> "30064771104"  [ label = "CFG: "] 
  "30064771106" -> "30064771107"  [ label = "CFG: "] 
  "30064771110" -> "30064771111"  [ label = "CFG: "] 
  "30064771078" -> "55834574849"  [ label = "CFG: "] 
  "30064771080" -> "30064771081"  [ label = "CFG: "] 
  "30064771083" -> "30064771084"  [ label = "CFG: "] 
  "30064771086" -> "30064771087"  [ label = "CFG: "] 
  "30064771087" -> "30064771088"  [ label = "CFG: "] 
  "30064771094" -> "55834574852"  [ label = "CFG: "] 
  "30064771096" -> "30064771097"  [ label = "CFG: "] 
  "30064771098" -> "30064771099"  [ label = "CFG: "] 
  "30064771099" -> "30064771100"  [ label = "CFG: "] 
  "30064771102" -> "30064771103"  [ label = "CFG: "] 
  "30064771105" -> "30064771106"  [ label = "CFG: "] 
  "30064771108" -> "55834574856"  [ label = "CFG: "] 
  "30064771109" -> "30064771110"  [ label = "CFG: "] 
  "30064771077" -> "30064771078"  [ label = "CFG: "] 
  "30064771079" -> "30064771080"  [ label = "CFG: "] 
  "55834574850" -> "30064771083"  [ label = "CFG: "] 
  "30064771093" -> "30064771094"  [ label = "CFG: "] 
  "30064771095" -> "30064771096"  [ label = "CFG: "] 
  "55834574853" -> "30064771102"  [ label = "CFG: "] 
  "55834574854" -> "30064771105"  [ label = "CFG: "] 
  "55834574855" -> "30064771108"  [ label = "CFG: "] 
  "55834574856" -> "30064771109"  [ label = "CFG: "] 
  "30064771076" -> "30064771077"  [ label = "CFG: "] 
  "55834574849" -> "30064771079"  [ label = "CFG: "] 
  "30064771092" -> "30064771093"  [ label = "CFG: "] 
  "55834574852" -> "30064771095"  [ label = "CFG: "] 
  "55834574848" -> "30064771076"  [ label = "CFG: "] 
  "55834574851" -> "30064771092"  [ label = "CFG: "] 
  "111669149697" -> "30064771072"  [ label = "CFG: "] 
  "30064771073" -> "128849018881"  [ label = "DDG: [&quot;aaabc&quot;, &quot;abbde&quot;]"] 
  "30064771073" -> "128849018881"  [ label = "DDG: test_data = [&quot;aaabc&quot;, &quot;abbde&quot;]"] 
  "30064771075" -> "128849018881"  [ label = "DDG: CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0)"] 
  "30064771075" -> "128849018881"  [ label = "DDG: vect = CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0)"] 
  "30064771078" -> "128849018881"  [ label = "DDG: tmp0 = vect.fit_transform(test_data)"] 
  "30064771080" -> "128849018881"  [ label = "DDG: tmp0"] 
  "30064771080" -> "128849018881"  [ label = "DDG: tmp0.toarray()"] 
  "30064771081" -> "128849018881"  [ label = "DDG: X = tmp0 = vect.fit_transform(test_data)
tmp0.toarray()"] 
  "30064771085" -> "128849018881"  [ label = "DDG: [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;]"] 
  "30064771085" -> "128849018881"  [ label = "DDG: vect.get_feature_names_out()"] 
  "30064771085" -> "128849018881"  [ label = "DDG: assert_array_equal([&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;], vect.get_feature_names_out())"] 
  "30064771088" -> "128849018881"  [ label = "DDG: [3, 1, 1, 0, 0]"] 
  "30064771088" -> "128849018881"  [ label = "DDG: [1, 2, 0, 1, 1]"] 
  "30064771089" -> "128849018881"  [ label = "DDG: [[3, 1, 1, 0, 0], [1, 2, 0, 1, 1]]"] 
  "30064771089" -> "128849018881"  [ label = "DDG: assert_array_equal([[3, 1, 1, 0, 0], [1, 2, 0, 1, 1]], X)"] 
  "30064771091" -> "128849018881"  [ label = "DDG: CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0, binary = True)"] 
  "30064771091" -> "128849018881"  [ label = "DDG: vect = CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0, binary = True)"] 
  "30064771094" -> "128849018881"  [ label = "DDG: tmp1 = vect.fit_transform(test_data)"] 
  "30064771096" -> "128849018881"  [ label = "DDG: tmp1"] 
  "30064771096" -> "128849018881"  [ label = "DDG: tmp1.toarray()"] 
  "30064771097" -> "128849018881"  [ label = "DDG: X = tmp1 = vect.fit_transform(test_data)
tmp1.toarray()"] 
  "30064771100" -> "128849018881"  [ label = "DDG: [1, 1, 1, 0, 0]"] 
  "30064771100" -> "128849018881"  [ label = "DDG: [1, 1, 0, 1, 1]"] 
  "30064771101" -> "128849018881"  [ label = "DDG: [[1, 1, 1, 0, 0], [1, 1, 0, 1, 1]]"] 
  "30064771101" -> "128849018881"  [ label = "DDG: X"] 
  "30064771101" -> "128849018881"  [ label = "DDG: assert_array_equal([[1, 1, 1, 0, 0], [1, 1, 0, 1, 1]], X)"] 
  "30064771104" -> "128849018881"  [ label = "DDG: CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0, binary = True, dtype = np.float32)"] 
  "30064771104" -> "128849018881"  [ label = "DDG: vect = CountVectorizer(analyzer = &quot;char&quot;, max_df = 1.0, binary = True, dtype = np.float32)"] 
  "30064771107" -> "128849018881"  [ label = "DDG: X_sparse"] 
  "30064771106" -> "128849018881"  [ label = "DDG: vect"] 
  "30064771106" -> "128849018881"  [ label = "DDG: test_data"] 
  "30064771107" -> "128849018881"  [ label = "DDG: vect.fit_transform(test_data)"] 
  "30064771107" -> "128849018881"  [ label = "DDG: X_sparse = vect.fit_transform(test_data)"] 
  "30064771110" -> "128849018881"  [ label = "DDG: X_sparse.dtype"] 
  "30064771110" -> "128849018881"  [ label = "DDG: np.float32"] 
  "30064771111" -> "128849018881"  [ label = "DDG: X_sparse.dtype == np.float32"] 
  "30064771111" -> "128849018881"  [ label = "DDG: assert X_sparse.dtype == np.float32"] 
  "30064771072" -> "30064771073"  [ label = "DDG: &quot;aaabc&quot;"] 
  "30064771072" -> "30064771073"  [ label = "DDG: &quot;abbde&quot;"] 
  "30064771074" -> "30064771075"  [ label = "DDG: &quot;char&quot;"] 
  "30064771074" -> "30064771075"  [ label = "DDG: 1.0"] 
  "30064771080" -> "30064771081"  [ label = "DDG: tmp0.toarray()"] 
  "111669149697" -> "30064771081"  [ label = "DDG: "] 
  "30064771090" -> "30064771091"  [ label = "DDG: &quot;char&quot;"] 
  "30064771090" -> "30064771091"  [ label = "DDG: 1.0"] 
  "30064771090" -> "30064771091"  [ label = "DDG: True"] 
  "30064771096" -> "30064771097"  [ label = "DDG: tmp1.toarray()"] 
  "111669149697" -> "30064771097"  [ label = "DDG: "] 
  "30064771103" -> "30064771104"  [ label = "DDG: &quot;char&quot;"] 
  "30064771103" -> "30064771104"  [ label = "DDG: 1.0"] 
  "30064771103" -> "30064771104"  [ label = "DDG: True"] 
  "30064771103" -> "30064771104"  [ label = "DDG: np.float32"] 
  "30064771106" -> "30064771107"  [ label = "DDG: vect"] 
  "30064771106" -> "30064771107"  [ label = "DDG: test_data"] 
  "111669149697" -> "68719476749"  [ label = "DDG: "] 
  "30064771082" -> "30064771085"  [ label = "DDG: &quot;c&quot;"] 
  "30064771082" -> "30064771085"  [ label = "DDG: &quot;d&quot;"] 
  "30064771082" -> "30064771085"  [ label = "DDG: &quot;a&quot;"] 
  "30064771082" -> "30064771085"  [ label = "DDG: &quot;b&quot;"] 
  "30064771082" -> "30064771085"  [ label = "DDG: &quot;e&quot;"] 
  "30064771084" -> "30064771085"  [ label = "DDG: vect"] 
  "111669149697" -> "68719476751"  [ label = "DDG: "] 
  "30064771088" -> "30064771089"  [ label = "DDG: [3, 1, 1, 0, 0]"] 
  "30064771088" -> "30064771089"  [ label = "DDG: [1, 2, 0, 1, 1]"] 
  "30064771081" -> "30064771089"  [ label = "DDG: X"] 
  "111669149697" -> "30064771089"  [ label = "DDG: "] 
  "111669149697" -> "68719476762"  [ label = "DDG: "] 
  "30064771100" -> "30064771101"  [ label = "DDG: [1, 1, 1, 0, 0]"] 
  "30064771100" -> "30064771101"  [ label = "DDG: [1, 1, 0, 1, 1]"] 
  "30064771097" -> "30064771101"  [ label = "DDG: X"] 
  "111669149697" -> "30064771101"  [ label = "DDG: "] 
  "30064771110" -> "30064771111"  [ label = "DDG: X_sparse.dtype"] 
  "30064771110" -> "30064771111"  [ label = "DDG: np.float32"] 
  "111669149697" -> "30064771072"  [ label = "DDG: "] 
  "111669149697" -> "68719476738"  [ label = "DDG: "] 
  "111669149697" -> "30064771074"  [ label = "DDG: "] 
  "30064771077" -> "30064771078"  [ label = "DDG: vect"] 
  "30064771077" -> "30064771078"  [ label = "DDG: test_data"] 
  "111669149697" -> "30064771082"  [ label = "DDG: "] 
  "30064771077" -> "30064771084"  [ label = "DDG: vect"] 
  "111669149697" -> "30064771084"  [ label = "DDG: "] 
  "30064771086" -> "30064771088"  [ label = "DDG: 1"] 
  "30064771086" -> "30064771088"  [ label = "DDG: 3"] 
  "30064771086" -> "30064771088"  [ label = "DDG: 0"] 
  "30064771087" -> "30064771088"  [ label = "DDG: 0"] 
  "30064771087" -> "30064771088"  [ label = "DDG: 1"] 
  "30064771087" -> "30064771088"  [ label = "DDG: 2"] 
  "111669149697" -> "68719476752"  [ label = "DDG: "] 
  "111669149697" -> "30064771090"  [ label = "DDG: "] 
  "30064771093" -> "30064771094"  [ label = "DDG: vect"] 
  "30064771093" -> "30064771094"  [ label = "DDG: test_data"] 
  "30064771098" -> "30064771100"  [ label = "DDG: 0"] 
  "30064771098" -> "30064771100"  [ label = "DDG: 1"] 
  "30064771099" -> "30064771100"  [ label = "DDG: 1"] 
  "30064771099" -> "30064771100"  [ label = "DDG: 0"] 
  "111669149697" -> "68719476764"  [ label = "DDG: "] 
  "111669149697" -> "30064771103"  [ label = "DDG: "] 
  "30064771104" -> "30064771106"  [ label = "DDG: vect"] 
  "111669149697" -> "30064771106"  [ label = "DDG: "] 
  "30064771093" -> "30064771106"  [ label = "DDG: test_data"] 
  "30064771107" -> "30064771110"  [ label = "DDG: X_sparse"] 
  "30064771103" -> "30064771110"  [ label = "DDG: np.float32"] 
  "30064771078" -> "30064771080"  [ label = "DDG: tmp0"] 
  "111669149697" -> "30064771080"  [ label = "DDG: "] 
  "111669149697" -> "30064771086"  [ label = "DDG: "] 
  "111669149697" -> "30064771087"  [ label = "DDG: "] 
  "30064771094" -> "30064771096"  [ label = "DDG: tmp1"] 
  "111669149697" -> "30064771096"  [ label = "DDG: "] 
  "111669149697" -> "30064771098"  [ label = "DDG: "] 
  "111669149697" -> "30064771099"  [ label = "DDG: "] 
  "30064771075" -> "30064771077"  [ label = "DDG: vect"] 
  "111669149697" -> "30064771077"  [ label = "DDG: "] 
  "30064771073" -> "30064771077"  [ label = "DDG: test_data"] 
  "30064771091" -> "30064771093"  [ label = "DDG: vect"] 
  "111669149697" -> "30064771093"  [ label = "DDG: "] 
  "30064771077" -> "30064771093"  [ label = "DDG: test_data"] 
}
"""
)
