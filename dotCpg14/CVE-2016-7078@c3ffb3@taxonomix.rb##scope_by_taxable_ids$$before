[33mval[0m [36mres1247[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "scope_by_taxable_ids" {  
"111669149696" [label = <(METHOD,scope_by_taxable_ids)<SUB>1</SUB>> ]
"115964116992" [label = <(PARAM,self)<SUB>1</SUB>> ]
"115964116993" [label = <(PARAM,scope)<SUB>1</SUB>> ]
"25769803776" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>1</SUB>> ]
"94489280512" [label = <(LOCAL,&lt;tmp-0&gt;: ANY)<SUB>2</SUB>> ]
"94489280513" [label = <(LOCAL,cached_ids: :&lt;main&gt;.&lt;member&gt;(@taxable_ids))<SUB>2</SUB>> ]
"25769803777" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>2</SUB>> ]
"30064771072" [label = <(&lt;operator&gt;.assignment,cached_ids = taxable_ids)<SUB>2</SUB>> ]
"68719476736" [label = <(IDENTIFIER,&lt;tmp-0&gt;,cached_ids = taxable_ids)<SUB>2</SUB>> ]
"30064771073" [label = <(&lt;operator&gt;.assignment,cached_ids = taxable_ids)<SUB>2</SUB>> ]
"68719476737" [label = <(IDENTIFIER,cached_ids,cached_ids = taxable_ids)<SUB>2</SUB>> ]
"30064771074" [label = <(&lt;operator&gt;.fieldAccess,self.taxable_ids)<SUB>2</SUB>> ]
"68719476738" [label = <(IDENTIFIER,self,cached_ids = taxable_ids)<SUB>2</SUB>> ]
"55834574848" [label = <(FIELD_IDENTIFIER,taxable_ids,taxable_ids)<SUB>2</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,IF,case (cached_ids = taxable_ids)
      when nil
        scope
      when []
        # If *no* taxable ids were found, then don't show any resources
        scope.where(:id =&gt; [])
      else
        # We need to generate the WHERE part of the SQL query as a string,
        # otherwise the default scope would set id on each new instance
        # and the same taxable_id on taxable_taxonomy objects
        scope.where(&quot;#{self.table_name}.id IN (#{cached_ids.join(',')})&quot;)
      end)<SUB>2</SUB>> ]
"30064771075" [label = <(&lt;operator&gt;.equals,nil)<SUB>3</SUB>> ]
"90194313216" [label = <(LITERAL,nil,nil)<SUB>3</SUB>> ]
"68719476739" [label = <(IDENTIFIER,&lt;tmp-0&gt;,nil)<SUB>2</SUB>> ]
"25769803778" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>4</SUB>> ]
"146028888064" [label = <(RETURN,scope,scope)<SUB>4</SUB>> ]
"68719476740" [label = <(IDENTIFIER,scope,scope)<SUB>4</SUB>> ]
"25769803779" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>2</SUB>> ]
"47244640257" [label = <(CONTROL_STRUCTURE,IF,case (cached_ids = taxable_ids)
      when nil
        scope
      when []
        # If *no* taxable ids were found, then don't show any resources
        scope.where(:id =&gt; [])
      else
        # We need to generate the WHERE part of the SQL query as a string,
        # otherwise the default scope would set id on each new instance
        # and the same taxable_id on taxable_taxonomy objects
        scope.where(&quot;#{self.table_name}.id IN (#{cached_ids.join(',')})&quot;)
      end)<SUB>2</SUB>> ]
"30064771076" [label = <(&lt;operator&gt;.equals,[])<SUB>5</SUB>> ]
"30064771077" [label = <(&lt;operator&gt;.arrayInitializer,[])<SUB>5</SUB>> ]
"68719476741" [label = <(IDENTIFIER,&lt;tmp-0&gt;,[])<SUB>2</SUB>> ]
"25769803780" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>7</SUB>> ]
"146028888065" [label = <(RETURN,scope.where(:id =&gt; []),scope.where(:id =&gt; []))<SUB>7</SUB>> ]
"30064771078" [label = <(where,scope.where(:id =&gt; []))<SUB>7</SUB>> ]
"30064771079" [label = <(&lt;operator&gt;.fieldAccess,scope.where)<SUB>7</SUB>> ]
"68719476742" [label = <(IDENTIFIER,scope,scope.where(:id =&gt; []))<SUB>7</SUB>> ]
"55834574849" [label = <(FIELD_IDENTIFIER,where,where)<SUB>7</SUB>> ]
"68719476743" [label = <(IDENTIFIER,scope,scope.where(:id =&gt; []))<SUB>7</SUB>> ]
"30064771080" [label = <(&lt;operator&gt;.arrayInitializer,[])<SUB>7</SUB>> ]
"25769803781" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>8</SUB>> ]
"146028888066" [label = <(RETURN,scope.where(&quot;#{self.table_name}.id IN (#{cached...,scope.where(&quot;#{self.table_name}.id IN (#{cached...)<SUB>12</SUB>> ]
"30064771081" [label = <(where,scope.where(&quot;#{self.table_name}.id IN (#{cached...)<SUB>12</SUB>> ]
"30064771082" [label = <(&lt;operator&gt;.fieldAccess,scope.where)<SUB>12</SUB>> ]
"68719476744" [label = <(IDENTIFIER,scope,scope.where(&quot;#{self.table_name}.id IN (#{cached...)<SUB>12</SUB>> ]
"55834574850" [label = <(FIELD_IDENTIFIER,where,where)<SUB>12</SUB>> ]
"68719476745" [label = <(IDENTIFIER,scope,scope.where(&quot;#{self.table_name}.id IN (#{cached...)<SUB>12</SUB>> ]
"30064771083" [label = <(&lt;operator&gt;.formatString,&quot;#{self.table_name}.id IN (#{cached_ids.join(',...)<SUB>12</SUB>> ]
"30064771084" [label = <(&lt;operator&gt;.formattedValue,self.table_name)<SUB>12</SUB>> ]
"30064771085" [label = <(&lt;operator&gt;.fieldAccess,self.table_name)<SUB>12</SUB>> ]
"68719476746" [label = <(IDENTIFIER,self,self.table_name)<SUB>12</SUB>> ]
"55834574851" [label = <(FIELD_IDENTIFIER,table_name,table_name)<SUB>12</SUB>> ]
"30064771086" [label = <(&lt;operator&gt;.formattedValue,cached_ids.join(','))<SUB>12</SUB>> ]
"30064771087" [label = <(join,cached_ids.join(','))<SUB>12</SUB>> ]
"30064771088" [label = <(&lt;operator&gt;.fieldAccess,cached_ids.join)<SUB>12</SUB>> ]
"68719476747" [label = <(IDENTIFIER,cached_ids,cached_ids.join(','))<SUB>12</SUB>> ]
"55834574852" [label = <(FIELD_IDENTIFIER,join,join)<SUB>12</SUB>> ]
"68719476748" [label = <(IDENTIFIER,cached_ids,cached_ids.join(','))<SUB>12</SUB>> ]
"90194313217" [label = <(LITERAL,',',cached_ids.join(','))<SUB>12</SUB>> ]
"133143986176" [label = <(MODIFIER,VIRTUAL)> ]
"133143986177" [label = <(MODIFIER,PRIVATE)> ]
"128849018880" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
  "111669149696" -> "115964116992"  [ label = "AST: "] 
  "111669149696" -> "115964116993"  [ label = "AST: "] 
  "111669149696" -> "25769803776"  [ label = "AST: "] 
  "111669149696" -> "133143986176"  [ label = "AST: "] 
  "111669149696" -> "133143986177"  [ label = "AST: "] 
  "111669149696" -> "128849018880"  [ label = "AST: "] 
  "25769803776" -> "94489280512"  [ label = "AST: "] 
  "25769803776" -> "94489280513"  [ label = "AST: "] 
  "25769803776" -> "25769803777"  [ label = "AST: "] 
  "25769803777" -> "30064771072"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "30064771072" -> "68719476736"  [ label = "AST: "] 
  "30064771072" -> "30064771073"  [ label = "AST: "] 
  "30064771073" -> "68719476737"  [ label = "AST: "] 
  "30064771073" -> "30064771074"  [ label = "AST: "] 
  "30064771074" -> "68719476738"  [ label = "AST: "] 
  "30064771074" -> "55834574848"  [ label = "AST: "] 
  "47244640256" -> "30064771075"  [ label = "AST: "] 
  "47244640256" -> "25769803778"  [ label = "AST: "] 
  "47244640256" -> "25769803779"  [ label = "AST: "] 
  "30064771075" -> "90194313216"  [ label = "AST: "] 
  "30064771075" -> "68719476739"  [ label = "AST: "] 
  "25769803778" -> "146028888064"  [ label = "AST: "] 
  "146028888064" -> "68719476740"  [ label = "AST: "] 
  "25769803779" -> "47244640257"  [ label = "AST: "] 
  "47244640257" -> "30064771076"  [ label = "AST: "] 
  "47244640257" -> "25769803780"  [ label = "AST: "] 
  "47244640257" -> "25769803781"  [ label = "AST: "] 
  "30064771076" -> "30064771077"  [ label = "AST: "] 
  "30064771076" -> "68719476741"  [ label = "AST: "] 
  "25769803780" -> "146028888065"  [ label = "AST: "] 
  "146028888065" -> "30064771078"  [ label = "AST: "] 
  "30064771078" -> "30064771079"  [ label = "AST: "] 
  "30064771078" -> "68719476743"  [ label = "AST: "] 
  "30064771078" -> "30064771080"  [ label = "AST: "] 
  "30064771079" -> "68719476742"  [ label = "AST: "] 
  "30064771079" -> "55834574849"  [ label = "AST: "] 
  "25769803781" -> "146028888066"  [ label = "AST: "] 
  "146028888066" -> "30064771081"  [ label = "AST: "] 
  "30064771081" -> "30064771082"  [ label = "AST: "] 
  "30064771081" -> "68719476745"  [ label = "AST: "] 
  "30064771081" -> "30064771083"  [ label = "AST: "] 
  "30064771082" -> "68719476744"  [ label = "AST: "] 
  "30064771082" -> "55834574850"  [ label = "AST: "] 
  "30064771083" -> "30064771084"  [ label = "AST: "] 
  "30064771083" -> "30064771086"  [ label = "AST: "] 
  "30064771084" -> "30064771085"  [ label = "AST: "] 
  "30064771085" -> "68719476746"  [ label = "AST: "] 
  "30064771085" -> "55834574851"  [ label = "AST: "] 
  "30064771086" -> "30064771087"  [ label = "AST: "] 
  "30064771087" -> "30064771088"  [ label = "AST: "] 
  "30064771087" -> "68719476748"  [ label = "AST: "] 
  "30064771087" -> "90194313217"  [ label = "AST: "] 
  "30064771088" -> "68719476747"  [ label = "AST: "] 
  "30064771088" -> "55834574852"  [ label = "AST: "] 
  "30064771072" -> "30064771075"  [ label = "CFG: "] 
  "30064771073" -> "30064771072"  [ label = "CFG: "] 
  "30064771075" -> "30064771077"  [ label = "CFG: "] 
  "30064771075" -> "146028888064"  [ label = "CFG: "] 
  "30064771074" -> "30064771073"  [ label = "CFG: "] 
  "146028888064" -> "128849018880"  [ label = "CFG: "] 
  "55834574848" -> "30064771074"  [ label = "CFG: "] 
  "30064771076" -> "55834574849"  [ label = "CFG: "] 
  "30064771076" -> "55834574850"  [ label = "CFG: "] 
  "30064771077" -> "30064771076"  [ label = "CFG: "] 
  "146028888065" -> "128849018880"  [ label = "CFG: "] 
  "146028888066" -> "128849018880"  [ label = "CFG: "] 
  "30064771078" -> "146028888065"  [ label = "CFG: "] 
  "30064771081" -> "146028888066"  [ label = "CFG: "] 
  "30064771079" -> "30064771080"  [ label = "CFG: "] 
  "30064771080" -> "30064771078"  [ label = "CFG: "] 
  "30064771082" -> "55834574851"  [ label = "CFG: "] 
  "30064771083" -> "30064771081"  [ label = "CFG: "] 
  "55834574849" -> "30064771079"  [ label = "CFG: "] 
  "55834574850" -> "30064771082"  [ label = "CFG: "] 
  "30064771084" -> "55834574852"  [ label = "CFG: "] 
  "30064771086" -> "30064771083"  [ label = "CFG: "] 
  "30064771085" -> "30064771084"  [ label = "CFG: "] 
  "30064771087" -> "30064771086"  [ label = "CFG: "] 
  "55834574851" -> "30064771085"  [ label = "CFG: "] 
  "30064771088" -> "30064771087"  [ label = "CFG: "] 
  "55834574852" -> "30064771088"  [ label = "CFG: "] 
  "111669149696" -> "55834574848"  [ label = "CFG: "] 
  "146028888065" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888064" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888066" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "115964116992" -> "128849018880"  [ label = "DDG: self"] 
  "115964116993" -> "128849018880"  [ label = "DDG: scope"] 
  "30064771073" -> "128849018880"  [ label = "DDG: cached_ids"] 
  "30064771073" -> "128849018880"  [ label = "DDG: self.taxable_ids"] 
  "30064771072" -> "128849018880"  [ label = "DDG: cached_ids = taxable_ids"] 
  "30064771075" -> "128849018880"  [ label = "DDG: &lt;tmp-0&gt;"] 
  "30064771075" -> "128849018880"  [ label = "DDG: nil"] 
  "111669149696" -> "115964116992"  [ label = "DDG: "] 
  "111669149696" -> "115964116993"  [ label = "DDG: "] 
  "30064771073" -> "30064771072"  [ label = "DDG: cached_ids"] 
  "115964116992" -> "30064771072"  [ label = "DDG: self"] 
  "115964116992" -> "30064771073"  [ label = "DDG: self"] 
  "111669149696" -> "30064771075"  [ label = "DDG: "] 
  "30064771072" -> "30064771075"  [ label = "DDG: &lt;tmp-0&gt;"] 
  "68719476740" -> "146028888064"  [ label = "DDG: scope"] 
  "115964116993" -> "68719476740"  [ label = "DDG: scope"] 
  "111669149696" -> "68719476740"  [ label = "DDG: "] 
  "111669149696" -> "30064771076"  [ label = "DDG: "] 
  "30064771075" -> "30064771076"  [ label = "DDG: &lt;tmp-0&gt;"] 
  "30064771078" -> "146028888065"  [ label = "DDG: scope.where(:id =&gt; [])"] 
  "30064771081" -> "146028888066"  [ label = "DDG: scope.where(&quot;#{self.table_name}.id IN (#{cached_ids.join(',')})&quot;)"] 
  "115964116993" -> "30064771078"  [ label = "DDG: scope"] 
  "111669149696" -> "30064771078"  [ label = "DDG: "] 
  "115964116993" -> "30064771081"  [ label = "DDG: scope"] 
  "111669149696" -> "30064771081"  [ label = "DDG: "] 
  "30064771083" -> "30064771081"  [ label = "DDG: self.table_name"] 
  "30064771083" -> "30064771081"  [ label = "DDG: cached_ids.join(',')"] 
  "30064771084" -> "30064771083"  [ label = "DDG: self.table_name"] 
  "30064771086" -> "30064771083"  [ label = "DDG: cached_ids.join(',')"] 
  "115964116992" -> "30064771084"  [ label = "DDG: self"] 
  "30064771087" -> "30064771086"  [ label = "DDG: cached_ids"] 
  "30064771087" -> "30064771086"  [ label = "DDG: ','"] 
  "30064771073" -> "30064771087"  [ label = "DDG: cached_ids"] 
  "111669149696" -> "30064771087"  [ label = "DDG: "] 
  "30064771075" -> "30064771076"  [ label = "CDG: "] 
  "30064771075" -> "30064771077"  [ label = "CDG: "] 
  "30064771075" -> "146028888064"  [ label = "CDG: "] 
  "30064771076" -> "30064771082"  [ label = "CDG: "] 
  "30064771076" -> "30064771081"  [ label = "CDG: "] 
  "30064771076" -> "30064771084"  [ label = "CDG: "] 
  "30064771076" -> "30064771083"  [ label = "CDG: "] 
  "30064771076" -> "30064771086"  [ label = "CDG: "] 
  "30064771076" -> "30064771085"  [ label = "CDG: "] 
  "30064771076" -> "30064771088"  [ label = "CDG: "] 
  "30064771076" -> "30064771087"  [ label = "CDG: "] 
  "30064771076" -> "30064771078"  [ label = "CDG: "] 
  "30064771076" -> "146028888065"  [ label = "CDG: "] 
  "30064771076" -> "30064771080"  [ label = "CDG: "] 
  "30064771076" -> "30064771079"  [ label = "CDG: "] 
  "30064771076" -> "146028888066"  [ label = "CDG: "] 
  "30064771076" -> "55834574850"  [ label = "CDG: "] 
  "30064771076" -> "55834574849"  [ label = "CDG: "] 
  "30064771076" -> "55834574852"  [ label = "CDG: "] 
  "30064771076" -> "55834574851"  [ label = "CDG: "] 
}
"""
)
