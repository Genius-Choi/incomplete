[33mval[0m [36mres1545[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "CONSTBUFFER_Create_Internal" {  
"111669149697" [label = <(METHOD,CONSTBUFFER_Create_Internal)<SUB>1</SUB>> ]
"115964116992" [label = <(PARAM,const unsigned char* source)<SUB>1</SUB>> ]
"115964116993" [label = <(PARAM,size_t size)<SUB>1</SUB>> ]
"25769803777" [label = <(BLOCK,{
    CONSTBUFFER_HANDLE result;
    /*Codes_SR...,{
    CONSTBUFFER_HANDLE result;
    /*Codes_SR...)<SUB>2</SUB>> ]
"94489280512" [label = <(LOCAL,CONSTBUFFER_HANDLE result: CONSTBUFFER_HANDLE)<SUB>3</SUB>> ]
"94489280513" [label = <(LOCAL,size_t malloc_size: size_t)<SUB>6</SUB>> ]
"30064771072" [label = <(&lt;operator&gt;.assignment,malloc_size = sizeof(CONSTBUFFER_HANDLE_DATA) +...)<SUB>6</SUB>> ]
"68719476736" [label = <(IDENTIFIER,malloc_size,malloc_size = sizeof(CONSTBUFFER_HANDLE_DATA) +...)<SUB>6</SUB>> ]
"30064771073" [label = <(&lt;operator&gt;.addition,sizeof(CONSTBUFFER_HANDLE_DATA) + size)<SUB>6</SUB>> ]
"30064771074" [label = <(&lt;operator&gt;.sizeOf,sizeof(CONSTBUFFER_HANDLE_DATA))<SUB>6</SUB>> ]
"68719476737" [label = <(IDENTIFIER,CONSTBUFFER_HANDLE_DATA,sizeof(CONSTBUFFER_HANDLE_DATA))<SUB>6</SUB>> ]
"68719476738" [label = <(IDENTIFIER,size,sizeof(CONSTBUFFER_HANDLE_DATA) + size)<SUB>6</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,IF,if (malloc_size &lt; size))<SUB>7</SUB>> ]
"30064771075" [label = <(&lt;operator&gt;.lessThan,malloc_size &lt; size)<SUB>7</SUB>> ]
"68719476739" [label = <(IDENTIFIER,malloc_size,malloc_size &lt; size)<SUB>7</SUB>> ]
"68719476740" [label = <(IDENTIFIER,size,malloc_size &lt; size)<SUB>7</SUB>> ]
"25769803778" [label = <(BLOCK,{
        result = NULL;
        LogError(&quot;inva...,{
        result = NULL;
        LogError(&quot;inva...)<SUB>8</SUB>> ]
"30064771076" [label = <(&lt;operator&gt;.assignment,result = NULL)<SUB>9</SUB>> ]
"68719476741" [label = <(IDENTIFIER,result,result = NULL)<SUB>9</SUB>> ]
"68719476742" [label = <(IDENTIFIER,NULL,result = NULL)<SUB>9</SUB>> ]
"30064771077" [label = <(LogError,LogError(&quot;invalid size parameter&quot;))<SUB>10</SUB>> ]
"90194313216" [label = <(LITERAL,&quot;invalid size parameter&quot;,LogError(&quot;invalid size parameter&quot;))<SUB>10</SUB>> ]
"47244640257" [label = <(CONTROL_STRUCTURE,ELSE,else)<SUB>14</SUB>> ]
"25769803779" [label = <(BLOCK,{
        result = (CONSTBUFFER_HANDLE)calloc(1...,{
        result = (CONSTBUFFER_HANDLE)calloc(1...)<SUB>14</SUB>> ]
"30064771078" [label = <(&lt;operator&gt;.assignment,result = (CONSTBUFFER_HANDLE)calloc(1, malloc_s...)<SUB>15</SUB>> ]
"68719476743" [label = <(IDENTIFIER,result,result = (CONSTBUFFER_HANDLE)calloc(1, malloc_s...)<SUB>15</SUB>> ]
"30064771079" [label = <(&lt;operator&gt;.cast,(CONSTBUFFER_HANDLE)calloc(1, malloc_size))<SUB>15</SUB>> ]
"184683593728" [label = <(UNKNOWN,CONSTBUFFER_HANDLE,CONSTBUFFER_HANDLE)<SUB>15</SUB>> ]
"30064771080" [label = <(calloc,calloc(1, malloc_size))<SUB>15</SUB>> ]
"90194313217" [label = <(LITERAL,1,calloc(1, malloc_size))<SUB>15</SUB>> ]
"68719476744" [label = <(IDENTIFIER,malloc_size,calloc(1, malloc_size))<SUB>15</SUB>> ]
"47244640258" [label = <(CONTROL_STRUCTURE,IF,if (result == NULL))<SUB>18</SUB>> ]
"30064771081" [label = <(&lt;operator&gt;.equals,result == NULL)<SUB>18</SUB>> ]
"68719476745" [label = <(IDENTIFIER,result,result == NULL)<SUB>18</SUB>> ]
"68719476746" [label = <(IDENTIFIER,NULL,result == NULL)<SUB>18</SUB>> ]
"25769803780" [label = <(BLOCK,{
        /*Codes_SRS_CONSTBUFFER_02_003: [If c...,{
        /*Codes_SRS_CONSTBUFFER_02_003: [If c...)<SUB>19</SUB>> ]
"30064771082" [label = <(LogError,LogError(&quot;unable to malloc&quot;))<SUB>22</SUB>> ]
"90194313218" [label = <(LITERAL,&quot;unable to malloc&quot;,LogError(&quot;unable to malloc&quot;))<SUB>22</SUB>> ]
"47244640259" [label = <(CONTROL_STRUCTURE,ELSE,else)<SUB>26</SUB>> ]
"25769803781" [label = <(BLOCK,{
        INIT_REF_VAR(result-&gt;count);

       ...,{
        INIT_REF_VAR(result-&gt;count);

       ...)<SUB>26</SUB>> ]
"30064771083" [label = <(INIT_REF_VAR,INIT_REF_VAR(result-&gt;count))<SUB>27</SUB>> ]
"30064771084" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;count)<SUB>27</SUB>> ]
"68719476747" [label = <(IDENTIFIER,result,INIT_REF_VAR(result-&gt;count))<SUB>27</SUB>> ]
"55834574848" [label = <(FIELD_IDENTIFIER,count,count)<SUB>27</SUB>> ]
"30064771085" [label = <(&lt;operator&gt;.assignment,result-&gt;alias.size = size)<SUB>30</SUB>> ]
"30064771086" [label = <(&lt;operator&gt;.fieldAccess,result-&gt;alias.size)<SUB>30</SUB>> ]
"30064771087" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;alias)<SUB>30</SUB>> ]
"68719476748" [label = <(IDENTIFIER,result,result-&gt;alias.size = size)<SUB>30</SUB>> ]
"55834574849" [label = <(FIELD_IDENTIFIER,alias,alias)<SUB>30</SUB>> ]
"55834574850" [label = <(FIELD_IDENTIFIER,size,size)<SUB>30</SUB>> ]
"68719476749" [label = <(IDENTIFIER,size,result-&gt;alias.size = size)<SUB>30</SUB>> ]
"47244640260" [label = <(CONTROL_STRUCTURE,IF,if (size == 0))<SUB>31</SUB>> ]
"30064771088" [label = <(&lt;operator&gt;.equals,size == 0)<SUB>31</SUB>> ]
"68719476750" [label = <(IDENTIFIER,size,size == 0)<SUB>31</SUB>> ]
"90194313219" [label = <(LITERAL,0,size == 0)<SUB>31</SUB>> ]
"25769803782" [label = <(BLOCK,{
            result-&gt;alias.buffer = NULL;
    ...,{
            result-&gt;alias.buffer = NULL;
    ...)<SUB>32</SUB>> ]
"30064771089" [label = <(&lt;operator&gt;.assignment,result-&gt;alias.buffer = NULL)<SUB>33</SUB>> ]
"30064771090" [label = <(&lt;operator&gt;.fieldAccess,result-&gt;alias.buffer)<SUB>33</SUB>> ]
"30064771091" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;alias)<SUB>33</SUB>> ]
"68719476751" [label = <(IDENTIFIER,result,result-&gt;alias.buffer = NULL)<SUB>33</SUB>> ]
"55834574851" [label = <(FIELD_IDENTIFIER,alias,alias)<SUB>33</SUB>> ]
"55834574852" [label = <(FIELD_IDENTIFIER,buffer,buffer)<SUB>33</SUB>> ]
"68719476752" [label = <(IDENTIFIER,NULL,result-&gt;alias.buffer = NULL)<SUB>33</SUB>> ]
"47244640261" [label = <(CONTROL_STRUCTURE,ELSE,else)<SUB>36</SUB>> ]
"25769803783" [label = <(BLOCK,{
            unsigned char* temp = (unsigned c...,{
            unsigned char* temp = (unsigned c...)<SUB>36</SUB>> ]
"94489280514" [label = <(LOCAL,unsigned char* temp: unsigned char*)<SUB>37</SUB>> ]
"30064771092" [label = <(&lt;operator&gt;.assignment,* temp = (unsigned char*)(result + 1))<SUB>37</SUB>> ]
"68719476753" [label = <(IDENTIFIER,temp,* temp = (unsigned char*)(result + 1))<SUB>37</SUB>> ]
"30064771093" [label = <(&lt;operator&gt;.cast,(unsigned char*)(result + 1))<SUB>37</SUB>> ]
"184683593729" [label = <(UNKNOWN,unsigned char*,unsigned char*)<SUB>37</SUB>> ]
"30064771094" [label = <(&lt;operator&gt;.addition,result + 1)<SUB>37</SUB>> ]
"68719476754" [label = <(IDENTIFIER,result,result + 1)<SUB>37</SUB>> ]
"90194313220" [label = <(LITERAL,1,result + 1)<SUB>37</SUB>> ]
"30064771095" [label = <(&lt;operator&gt;.cast,(void)memcpy(temp, source, size))<SUB>41</SUB>> ]
"184683593730" [label = <(UNKNOWN,void,void)<SUB>41</SUB>> ]
"30064771096" [label = <(memcpy,memcpy(temp, source, size))<SUB>41</SUB>> ]
"68719476755" [label = <(IDENTIFIER,temp,memcpy(temp, source, size))<SUB>41</SUB>> ]
"68719476756" [label = <(IDENTIFIER,source,memcpy(temp, source, size))<SUB>41</SUB>> ]
"68719476757" [label = <(IDENTIFIER,size,memcpy(temp, source, size))<SUB>41</SUB>> ]
"30064771097" [label = <(&lt;operator&gt;.assignment,result-&gt;alias.buffer = temp)<SUB>42</SUB>> ]
"30064771098" [label = <(&lt;operator&gt;.fieldAccess,result-&gt;alias.buffer)<SUB>42</SUB>> ]
"30064771099" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;alias)<SUB>42</SUB>> ]
"68719476758" [label = <(IDENTIFIER,result,result-&gt;alias.buffer = temp)<SUB>42</SUB>> ]
"55834574853" [label = <(FIELD_IDENTIFIER,alias,alias)<SUB>42</SUB>> ]
"55834574854" [label = <(FIELD_IDENTIFIER,buffer,buffer)<SUB>42</SUB>> ]
"68719476759" [label = <(IDENTIFIER,temp,result-&gt;alias.buffer = temp)<SUB>42</SUB>> ]
"30064771100" [label = <(&lt;operator&gt;.assignment,result-&gt;buffer_type = CONSTBUFFER_TYPE_COPIED)<SUB>45</SUB>> ]
"30064771101" [label = <(&lt;operator&gt;.indirectFieldAccess,result-&gt;buffer_type)<SUB>45</SUB>> ]
"68719476760" [label = <(IDENTIFIER,result,result-&gt;buffer_type = CONSTBUFFER_TYPE_COPIED)<SUB>45</SUB>> ]
"55834574855" [label = <(FIELD_IDENTIFIER,buffer_type,buffer_type)<SUB>45</SUB>> ]
"68719476761" [label = <(IDENTIFIER,CONSTBUFFER_TYPE_COPIED,result-&gt;buffer_type = CONSTBUFFER_TYPE_COPIED)<SUB>45</SUB>> ]
"146028888064" [label = <(RETURN,return result;,return result;)<SUB>47</SUB>> ]
"68719476762" [label = <(IDENTIFIER,result,return result;)<SUB>47</SUB>> ]
"133143986176" [label = <(MODIFIER,STATIC)> ]
"128849018880" [label = <(METHOD_RETURN,CONSTBUFFER_HANDLE)<SUB>1</SUB>> ]
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "115964116993"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "133143986176"  [ label = "AST: "] 
  "111669149697" -> "128849018880"  [ label = "AST: "] 
  "25769803777" -> "94489280512"  [ label = "AST: "] 
  "25769803777" -> "94489280513"  [ label = "AST: "] 
  "25769803777" -> "30064771072"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "25769803777" -> "47244640258"  [ label = "AST: "] 
  "25769803777" -> "146028888064"  [ label = "AST: "] 
  "30064771072" -> "68719476736"  [ label = "AST: "] 
  "30064771072" -> "30064771073"  [ label = "AST: "] 
  "30064771073" -> "30064771074"  [ label = "AST: "] 
  "30064771073" -> "68719476738"  [ label = "AST: "] 
  "30064771074" -> "68719476737"  [ label = "AST: "] 
  "47244640256" -> "30064771075"  [ label = "AST: "] 
  "47244640256" -> "25769803778"  [ label = "AST: "] 
  "47244640256" -> "47244640257"  [ label = "AST: "] 
  "30064771075" -> "68719476739"  [ label = "AST: "] 
  "30064771075" -> "68719476740"  [ label = "AST: "] 
  "25769803778" -> "30064771076"  [ label = "AST: "] 
  "25769803778" -> "30064771077"  [ label = "AST: "] 
  "30064771076" -> "68719476741"  [ label = "AST: "] 
  "30064771076" -> "68719476742"  [ label = "AST: "] 
  "30064771077" -> "90194313216"  [ label = "AST: "] 
  "47244640257" -> "25769803779"  [ label = "AST: "] 
  "25769803779" -> "30064771078"  [ label = "AST: "] 
  "30064771078" -> "68719476743"  [ label = "AST: "] 
  "30064771078" -> "30064771079"  [ label = "AST: "] 
  "30064771079" -> "184683593728"  [ label = "AST: "] 
  "30064771079" -> "30064771080"  [ label = "AST: "] 
  "30064771080" -> "90194313217"  [ label = "AST: "] 
  "30064771080" -> "68719476744"  [ label = "AST: "] 
  "47244640258" -> "30064771081"  [ label = "AST: "] 
  "47244640258" -> "25769803780"  [ label = "AST: "] 
  "47244640258" -> "47244640259"  [ label = "AST: "] 
  "30064771081" -> "68719476745"  [ label = "AST: "] 
  "30064771081" -> "68719476746"  [ label = "AST: "] 
  "25769803780" -> "30064771082"  [ label = "AST: "] 
  "30064771082" -> "90194313218"  [ label = "AST: "] 
  "47244640259" -> "25769803781"  [ label = "AST: "] 
  "25769803781" -> "30064771083"  [ label = "AST: "] 
  "25769803781" -> "30064771085"  [ label = "AST: "] 
  "25769803781" -> "47244640260"  [ label = "AST: "] 
  "25769803781" -> "30064771100"  [ label = "AST: "] 
  "30064771083" -> "30064771084"  [ label = "AST: "] 
  "30064771084" -> "68719476747"  [ label = "AST: "] 
  "30064771084" -> "55834574848"  [ label = "AST: "] 
  "30064771085" -> "30064771086"  [ label = "AST: "] 
  "30064771085" -> "68719476749"  [ label = "AST: "] 
  "30064771086" -> "30064771087"  [ label = "AST: "] 
  "30064771086" -> "55834574850"  [ label = "AST: "] 
  "30064771087" -> "68719476748"  [ label = "AST: "] 
  "30064771087" -> "55834574849"  [ label = "AST: "] 
  "47244640260" -> "30064771088"  [ label = "AST: "] 
  "47244640260" -> "25769803782"  [ label = "AST: "] 
  "47244640260" -> "47244640261"  [ label = "AST: "] 
  "30064771088" -> "68719476750"  [ label = "AST: "] 
  "30064771088" -> "90194313219"  [ label = "AST: "] 
  "25769803782" -> "30064771089"  [ label = "AST: "] 
  "30064771089" -> "30064771090"  [ label = "AST: "] 
  "30064771089" -> "68719476752"  [ label = "AST: "] 
  "30064771090" -> "30064771091"  [ label = "AST: "] 
  "30064771090" -> "55834574852"  [ label = "AST: "] 
  "30064771091" -> "68719476751"  [ label = "AST: "] 
  "30064771091" -> "55834574851"  [ label = "AST: "] 
  "47244640261" -> "25769803783"  [ label = "AST: "] 
  "25769803783" -> "94489280514"  [ label = "AST: "] 
  "25769803783" -> "30064771092"  [ label = "AST: "] 
  "25769803783" -> "30064771095"  [ label = "AST: "] 
  "25769803783" -> "30064771097"  [ label = "AST: "] 
  "30064771092" -> "68719476753"  [ label = "AST: "] 
  "30064771092" -> "30064771093"  [ label = "AST: "] 
  "30064771093" -> "184683593729"  [ label = "AST: "] 
  "30064771093" -> "30064771094"  [ label = "AST: "] 
  "30064771094" -> "68719476754"  [ label = "AST: "] 
  "30064771094" -> "90194313220"  [ label = "AST: "] 
  "30064771095" -> "184683593730"  [ label = "AST: "] 
  "30064771095" -> "30064771096"  [ label = "AST: "] 
  "30064771096" -> "68719476755"  [ label = "AST: "] 
  "30064771096" -> "68719476756"  [ label = "AST: "] 
  "30064771096" -> "68719476757"  [ label = "AST: "] 
  "30064771097" -> "30064771098"  [ label = "AST: "] 
  "30064771097" -> "68719476759"  [ label = "AST: "] 
  "30064771098" -> "30064771099"  [ label = "AST: "] 
  "30064771098" -> "55834574854"  [ label = "AST: "] 
  "30064771099" -> "68719476758"  [ label = "AST: "] 
  "30064771099" -> "55834574853"  [ label = "AST: "] 
  "30064771100" -> "30064771101"  [ label = "AST: "] 
  "30064771100" -> "68719476761"  [ label = "AST: "] 
  "30064771101" -> "68719476760"  [ label = "AST: "] 
  "30064771101" -> "55834574855"  [ label = "AST: "] 
  "146028888064" -> "68719476762"  [ label = "AST: "] 
  "30064771072" -> "30064771075"  [ label = "CFG: "] 
  "146028888064" -> "128849018880"  [ label = "CFG: "] 
  "30064771073" -> "30064771072"  [ label = "CFG: "] 
  "30064771075" -> "30064771076"  [ label = "CFG: "] 
  "30064771075" -> "184683593728"  [ label = "CFG: "] 
  "30064771081" -> "30064771082"  [ label = "CFG: "] 
  "30064771081" -> "55834574848"  [ label = "CFG: "] 
  "30064771074" -> "30064771073"  [ label = "CFG: "] 
  "30064771076" -> "30064771077"  [ label = "CFG: "] 
  "30064771077" -> "30064771081"  [ label = "CFG: "] 
  "30064771082" -> "146028888064"  [ label = "CFG: "] 
  "30064771078" -> "30064771081"  [ label = "CFG: "] 
  "30064771083" -> "55834574849"  [ label = "CFG: "] 
  "30064771085" -> "30064771088"  [ label = "CFG: "] 
  "30064771100" -> "146028888064"  [ label = "CFG: "] 
  "30064771079" -> "30064771078"  [ label = "CFG: "] 
  "30064771084" -> "30064771083"  [ label = "CFG: "] 
  "30064771086" -> "30064771085"  [ label = "CFG: "] 
  "30064771088" -> "55834574851"  [ label = "CFG: "] 
  "30064771088" -> "184683593729"  [ label = "CFG: "] 
  "30064771101" -> "30064771100"  [ label = "CFG: "] 
  "184683593728" -> "30064771080"  [ label = "CFG: "] 
  "30064771080" -> "30064771079"  [ label = "CFG: "] 
  "55834574848" -> "30064771084"  [ label = "CFG: "] 
  "30064771087" -> "55834574850"  [ label = "CFG: "] 
  "55834574850" -> "30064771086"  [ label = "CFG: "] 
  "30064771089" -> "55834574855"  [ label = "CFG: "] 
  "55834574855" -> "30064771101"  [ label = "CFG: "] 
  "55834574849" -> "30064771087"  [ label = "CFG: "] 
  "30064771090" -> "30064771089"  [ label = "CFG: "] 
  "30064771092" -> "184683593730"  [ label = "CFG: "] 
  "30064771095" -> "55834574853"  [ label = "CFG: "] 
  "30064771097" -> "55834574855"  [ label = "CFG: "] 
  "30064771091" -> "55834574852"  [ label = "CFG: "] 
  "55834574852" -> "30064771090"  [ label = "CFG: "] 
  "30064771093" -> "30064771092"  [ label = "CFG: "] 
  "184683593730" -> "30064771096"  [ label = "CFG: "] 
  "30064771096" -> "30064771095"  [ label = "CFG: "] 
  "30064771098" -> "30064771097"  [ label = "CFG: "] 
  "55834574851" -> "30064771091"  [ label = "CFG: "] 
  "184683593729" -> "30064771094"  [ label = "CFG: "] 
  "30064771094" -> "30064771093"  [ label = "CFG: "] 
  "30064771099" -> "55834574854"  [ label = "CFG: "] 
  "55834574854" -> "30064771098"  [ label = "CFG: "] 
  "55834574853" -> "30064771099"  [ label = "CFG: "] 
  "111669149697" -> "30064771074"  [ label = "CFG: "] 
  "146028888064" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "115964116992" -> "128849018880"  [ label = "DDG: source"] 
  "30064771072" -> "128849018880"  [ label = "DDG: sizeof(CONSTBUFFER_HANDLE_DATA) + size"] 
  "30064771072" -> "128849018880"  [ label = "DDG: malloc_size = sizeof(CONSTBUFFER_HANDLE_DATA) + size"] 
  "30064771075" -> "128849018880"  [ label = "DDG: malloc_size"] 
  "30064771075" -> "128849018880"  [ label = "DDG: size"] 
  "30064771075" -> "128849018880"  [ label = "DDG: malloc_size &lt; size"] 
  "30064771080" -> "128849018880"  [ label = "DDG: malloc_size"] 
  "30064771079" -> "128849018880"  [ label = "DDG: calloc(1, malloc_size)"] 
  "30064771078" -> "128849018880"  [ label = "DDG: (CONSTBUFFER_HANDLE)calloc(1, malloc_size)"] 
  "30064771078" -> "128849018880"  [ label = "DDG: result = (CONSTBUFFER_HANDLE)calloc(1, malloc_size)"] 
  "30064771076" -> "128849018880"  [ label = "DDG: result = NULL"] 
  "30064771077" -> "128849018880"  [ label = "DDG: LogError(&quot;invalid size parameter&quot;)"] 
  "30064771081" -> "128849018880"  [ label = "DDG: result"] 
  "30064771081" -> "128849018880"  [ label = "DDG: NULL"] 
  "30064771081" -> "128849018880"  [ label = "DDG: result == NULL"] 
  "30064771083" -> "128849018880"  [ label = "DDG: result-&gt;count"] 
  "30064771083" -> "128849018880"  [ label = "DDG: INIT_REF_VAR(result-&gt;count)"] 
  "30064771085" -> "128849018880"  [ label = "DDG: result-&gt;alias.size"] 
  "30064771085" -> "128849018880"  [ label = "DDG: result-&gt;alias.size = size"] 
  "30064771088" -> "128849018880"  [ label = "DDG: size"] 
  "30064771088" -> "128849018880"  [ label = "DDG: size == 0"] 
  "30064771094" -> "128849018880"  [ label = "DDG: result"] 
  "30064771093" -> "128849018880"  [ label = "DDG: result + 1"] 
  "30064771092" -> "128849018880"  [ label = "DDG: (unsigned char*)(result + 1)"] 
  "30064771092" -> "128849018880"  [ label = "DDG: * temp = (unsigned char*)(result + 1)"] 
  "30064771096" -> "128849018880"  [ label = "DDG: source"] 
  "30064771096" -> "128849018880"  [ label = "DDG: size"] 
  "30064771095" -> "128849018880"  [ label = "DDG: memcpy(temp, source, size)"] 
  "30064771095" -> "128849018880"  [ label = "DDG: (void)memcpy(temp, source, size)"] 
  "30064771097" -> "128849018880"  [ label = "DDG: result-&gt;alias.buffer"] 
  "30064771097" -> "128849018880"  [ label = "DDG: temp"] 
  "30064771097" -> "128849018880"  [ label = "DDG: result-&gt;alias.buffer = temp"] 
  "30064771089" -> "128849018880"  [ label = "DDG: result-&gt;alias.buffer"] 
  "30064771089" -> "128849018880"  [ label = "DDG: NULL"] 
  "30064771089" -> "128849018880"  [ label = "DDG: result-&gt;alias.buffer = NULL"] 
  "30064771100" -> "128849018880"  [ label = "DDG: result-&gt;buffer_type"] 
  "30064771100" -> "128849018880"  [ label = "DDG: result-&gt;buffer_type = CONSTBUFFER_TYPE_COPIED"] 
  "30064771082" -> "128849018880"  [ label = "DDG: LogError(&quot;unable to malloc&quot;)"] 
  "30064771074" -> "128849018880"  [ label = "DDG: CONSTBUFFER_HANDLE_DATA"] 
  "30064771100" -> "128849018880"  [ label = "DDG: CONSTBUFFER_TYPE_COPIED"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "111669149697" -> "115964116993"  [ label = "DDG: "] 
  "115964116993" -> "30064771072"  [ label = "DDG: size"] 
  "111669149697" -> "30064771072"  [ label = "DDG: "] 
  "68719476762" -> "146028888064"  [ label = "DDG: result"] 
  "30064771100" -> "68719476762"  [ label = "DDG: result-&gt;buffer_type"] 
  "30064771083" -> "68719476762"  [ label = "DDG: result-&gt;count"] 
  "30064771081" -> "68719476762"  [ label = "DDG: result"] 
  "111669149697" -> "68719476762"  [ label = "DDG: "] 
  "115964116993" -> "30064771073"  [ label = "DDG: size"] 
  "111669149697" -> "30064771073"  [ label = "DDG: "] 
  "30064771072" -> "30064771075"  [ label = "DDG: malloc_size"] 
  "111669149697" -> "30064771075"  [ label = "DDG: "] 
  "115964116993" -> "30064771075"  [ label = "DDG: size"] 
  "111669149697" -> "30064771076"  [ label = "DDG: "] 
  "30064771078" -> "30064771081"  [ label = "DDG: result"] 
  "30064771076" -> "30064771081"  [ label = "DDG: result"] 
  "111669149697" -> "30064771081"  [ label = "DDG: "] 
  "111669149697" -> "30064771077"  [ label = "DDG: "] 
  "111669149697" -> "30064771078"  [ label = "DDG: "] 
  "30064771075" -> "30064771078"  [ label = "DDG: malloc_size"] 
  "111669149697" -> "30064771082"  [ label = "DDG: "] 
  "30064771075" -> "30064771085"  [ label = "DDG: size"] 
  "111669149697" -> "30064771085"  [ label = "DDG: "] 
  "111669149697" -> "30064771100"  [ label = "DDG: "] 
  "30064771081" -> "30064771083"  [ label = "DDG: result"] 
  "111669149697" -> "30064771079"  [ label = "DDG: "] 
  "30064771075" -> "30064771079"  [ label = "DDG: malloc_size"] 
  "111669149697" -> "30064771088"  [ label = "DDG: "] 
  "30064771075" -> "30064771088"  [ label = "DDG: size"] 
  "30064771081" -> "30064771089"  [ label = "DDG: NULL"] 
  "111669149697" -> "30064771089"  [ label = "DDG: "] 
  "111669149697" -> "30064771080"  [ label = "DDG: "] 
  "30064771075" -> "30064771080"  [ label = "DDG: malloc_size"] 
  "30064771081" -> "30064771092"  [ label = "DDG: result"] 
  "30064771083" -> "30064771092"  [ label = "DDG: result-&gt;count"] 
  "111669149697" -> "30064771092"  [ label = "DDG: "] 
  "30064771096" -> "30064771095"  [ label = "DDG: temp"] 
  "30064771096" -> "30064771095"  [ label = "DDG: source"] 
  "30064771096" -> "30064771095"  [ label = "DDG: size"] 
  "30064771096" -> "30064771097"  [ label = "DDG: temp"] 
  "111669149697" -> "30064771097"  [ label = "DDG: "] 
  "30064771081" -> "30064771093"  [ label = "DDG: result"] 
  "30064771083" -> "30064771093"  [ label = "DDG: result-&gt;count"] 
  "111669149697" -> "30064771093"  [ label = "DDG: "] 
  "30064771092" -> "30064771096"  [ label = "DDG: temp"] 
  "111669149697" -> "30064771096"  [ label = "DDG: "] 
  "115964116992" -> "30064771096"  [ label = "DDG: source"] 
  "30064771088" -> "30064771096"  [ label = "DDG: size"] 
  "30064771081" -> "30064771094"  [ label = "DDG: result"] 
  "30064771083" -> "30064771094"  [ label = "DDG: result-&gt;count"] 
  "111669149697" -> "30064771094"  [ label = "DDG: "] 
  "30064771075" -> "30064771077"  [ label = "CDG: "] 
  "30064771075" -> "30064771076"  [ label = "CDG: "] 
  "30064771075" -> "30064771079"  [ label = "CDG: "] 
  "30064771075" -> "30064771078"  [ label = "CDG: "] 
  "30064771075" -> "30064771080"  [ label = "CDG: "] 
  "30064771075" -> "184683593728"  [ label = "CDG: "] 
  "30064771081" -> "30064771083"  [ label = "CDG: "] 
  "30064771081" -> "30064771082"  [ label = "CDG: "] 
  "30064771081" -> "30064771085"  [ label = "CDG: "] 
  "30064771081" -> "30064771084"  [ label = "CDG: "] 
  "30064771081" -> "30064771087"  [ label = "CDG: "] 
  "30064771081" -> "30064771086"  [ label = "CDG: "] 
  "30064771081" -> "30064771088"  [ label = "CDG: "] 
  "30064771081" -> "30064771101"  [ label = "CDG: "] 
  "30064771081" -> "30064771100"  [ label = "CDG: "] 
  "30064771081" -> "55834574849"  [ label = "CDG: "] 
  "30064771081" -> "55834574848"  [ label = "CDG: "] 
  "30064771081" -> "55834574850"  [ label = "CDG: "] 
  "30064771081" -> "55834574855"  [ label = "CDG: "] 
  "30064771088" -> "30064771091"  [ label = "CDG: "] 
  "30064771088" -> "30064771090"  [ label = "CDG: "] 
  "30064771088" -> "30064771093"  [ label = "CDG: "] 
  "30064771088" -> "30064771092"  [ label = "CDG: "] 
  "30064771088" -> "30064771089"  [ label = "CDG: "] 
  "30064771088" -> "30064771099"  [ label = "CDG: "] 
  "30064771088" -> "30064771098"  [ label = "CDG: "] 
  "30064771088" -> "30064771095"  [ label = "CDG: "] 
  "30064771088" -> "30064771094"  [ label = "CDG: "] 
  "30064771088" -> "30064771097"  [ label = "CDG: "] 
  "30064771088" -> "30064771096"  [ label = "CDG: "] 
  "30064771088" -> "55834574851"  [ label = "CDG: "] 
  "30064771088" -> "55834574853"  [ label = "CDG: "] 
  "30064771088" -> "55834574852"  [ label = "CDG: "] 
  "30064771088" -> "55834574854"  [ label = "CDG: "] 
  "30064771088" -> "184683593729"  [ label = "CDG: "] 
  "30064771088" -> "184683593730"  [ label = "CDG: "] 
}
"""
)
