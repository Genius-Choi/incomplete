[33mval[0m [36mres1470[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "openssl_static_locks_install" {  
"111669149697" [label = <(METHOD,openssl_static_locks_install)<SUB>1</SUB>> ]
"115964116992" [label = <(PARAM,void)<SUB>1</SUB>> ]
"25769803777" [label = <(BLOCK,{
    int result;

    if (openssl_locks != NUL...,{
    int result;

    if (openssl_locks != NUL...)<SUB>2</SUB>> ]
"94489280512" [label = <(LOCAL,int result: int)<SUB>3</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,IF,if (openssl_locks != NULL))<SUB>5</SUB>> ]
"30064771072" [label = <(&lt;operator&gt;.notEquals,openssl_locks != NULL)<SUB>5</SUB>> ]
"68719476736" [label = <(IDENTIFIER,openssl_locks,openssl_locks != NULL)<SUB>5</SUB>> ]
"68719476737" [label = <(IDENTIFIER,NULL,openssl_locks != NULL)<SUB>5</SUB>> ]
"25769803778" [label = <(BLOCK,{
        LogInfo(&quot;Locks already initialized&quot;);...,{
        LogInfo(&quot;Locks already initialized&quot;);...)<SUB>6</SUB>> ]
"30064771073" [label = <(LogInfo,LogInfo(&quot;Locks already initialized&quot;))<SUB>7</SUB>> ]
"90194313216" [label = <(LITERAL,&quot;Locks already initialized&quot;,LogInfo(&quot;Locks already initialized&quot;))<SUB>7</SUB>> ]
"30064771074" [label = <(&lt;operator&gt;.assignment,result = MU_FAILURE)<SUB>8</SUB>> ]
"68719476738" [label = <(IDENTIFIER,result,result = MU_FAILURE)<SUB>8</SUB>> ]
"68719476739" [label = <(IDENTIFIER,MU_FAILURE,result = MU_FAILURE)<SUB>8</SUB>> ]
"47244640257" [label = <(CONTROL_STRUCTURE,ELSE,else)<SUB>11</SUB>> ]
"25769803779" [label = <(BLOCK,{
        size_t malloc_size = safe_multiply_si...,{
        size_t malloc_size = safe_multiply_si...)<SUB>11</SUB>> ]
"94489280513" [label = <(LOCAL,size_t malloc_size: size_t)<SUB>12</SUB>> ]
"30064771075" [label = <(&lt;operator&gt;.assignment,malloc_size = safe_multiply_size_t(CRYPTO_num_l...)<SUB>12</SUB>> ]
"68719476740" [label = <(IDENTIFIER,malloc_size,malloc_size = safe_multiply_size_t(CRYPTO_num_l...)<SUB>12</SUB>> ]
"30064771076" [label = <(safe_multiply_size_t,safe_multiply_size_t(CRYPTO_num_locks(), sizeof...)<SUB>12</SUB>> ]
"30064771077" [label = <(CRYPTO_num_locks,CRYPTO_num_locks())<SUB>12</SUB>> ]
"30064771078" [label = <(&lt;operator&gt;.sizeOf,sizeof(LOCK_HANDLE))<SUB>12</SUB>> ]
"68719476741" [label = <(IDENTIFIER,LOCK_HANDLE,sizeof(LOCK_HANDLE))<SUB>12</SUB>> ]
"47244640258" [label = <(CONTROL_STRUCTURE,IF,if (malloc_size == SIZE_MAX ||
            (openssl_locks = malloc(malloc_size)) == NULL))<SUB>13</SUB>> ]
"30064771079" [label = <(&lt;operator&gt;.logicalOr,malloc_size == SIZE_MAX ||
            (openssl...)<SUB>13</SUB>> ]
"30064771080" [label = <(&lt;operator&gt;.equals,malloc_size == SIZE_MAX)<SUB>13</SUB>> ]
"68719476742" [label = <(IDENTIFIER,malloc_size,malloc_size == SIZE_MAX)<SUB>13</SUB>> ]
"68719476743" [label = <(IDENTIFIER,SIZE_MAX,malloc_size == SIZE_MAX)<SUB>13</SUB>> ]
"30064771081" [label = <(&lt;operator&gt;.equals,(openssl_locks = malloc(malloc_size)) == NULL)<SUB>14</SUB>> ]
"30064771082" [label = <(&lt;operator&gt;.assignment,openssl_locks = malloc(malloc_size))<SUB>14</SUB>> ]
"68719476744" [label = <(IDENTIFIER,openssl_locks,openssl_locks = malloc(malloc_size))<SUB>14</SUB>> ]
"30064771083" [label = <(malloc,malloc(malloc_size))<SUB>14</SUB>> ]
"68719476745" [label = <(IDENTIFIER,malloc_size,malloc(malloc_size))<SUB>14</SUB>> ]
"68719476746" [label = <(IDENTIFIER,NULL,(openssl_locks = malloc(malloc_size)) == NULL)<SUB>14</SUB>> ]
"25769803780" [label = <(BLOCK,{
            LogError(&quot;Failed to allocate lock...,{
            LogError(&quot;Failed to allocate lock...)<SUB>15</SUB>> ]
"30064771084" [label = <(LogError,LogError(&quot;Failed to allocate locks, size:%zu&quot;, ...)<SUB>16</SUB>> ]
"90194313217" [label = <(LITERAL,&quot;Failed to allocate locks, size:%zu&quot;,LogError(&quot;Failed to allocate locks, size:%zu&quot;, ...)<SUB>16</SUB>> ]
"68719476747" [label = <(IDENTIFIER,malloc_size,LogError(&quot;Failed to allocate locks, size:%zu&quot;, ...)<SUB>16</SUB>> ]
"30064771085" [label = <(&lt;operator&gt;.assignment,result = MU_FAILURE)<SUB>17</SUB>> ]
"68719476748" [label = <(IDENTIFIER,result,result = MU_FAILURE)<SUB>17</SUB>> ]
"68719476749" [label = <(IDENTIFIER,MU_FAILURE,result = MU_FAILURE)<SUB>17</SUB>> ]
"47244640259" [label = <(CONTROL_STRUCTURE,ELSE,else)<SUB>20</SUB>> ]
"25769803781" [label = <(BLOCK,{
            int i;
            for (i = 0; i ...,{
            int i;
            for (i = 0; i ...)<SUB>20</SUB>> ]
"94489280514" [label = <(LOCAL,int i: int)<SUB>21</SUB>> ]
"47244640260" [label = <(CONTROL_STRUCTURE,FOR,for (i = 0;i &lt; CRYPTO_num_locks();i++))<SUB>22</SUB>> ]
"25769803782" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>22</SUB>> ]
"30064771086" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>22</SUB>> ]
"68719476750" [label = <(IDENTIFIER,i,i = 0)<SUB>22</SUB>> ]
"90194313218" [label = <(LITERAL,0,i = 0)<SUB>22</SUB>> ]
"30064771087" [label = <(&lt;operator&gt;.lessThan,i &lt; CRYPTO_num_locks())<SUB>22</SUB>> ]
"68719476751" [label = <(IDENTIFIER,i,i &lt; CRYPTO_num_locks())<SUB>22</SUB>> ]
"30064771088" [label = <(CRYPTO_num_locks,CRYPTO_num_locks())<SUB>22</SUB>> ]
"30064771089" [label = <(&lt;operator&gt;.postIncrement,i++)<SUB>22</SUB>> ]
"68719476752" [label = <(IDENTIFIER,i,i++)<SUB>22</SUB>> ]
"25769803783" [label = <(BLOCK,{
                openssl_locks[i] = Lock_Init(...,{
                openssl_locks[i] = Lock_Init(...)<SUB>23</SUB>> ]
"30064771090" [label = <(&lt;operator&gt;.assignment,openssl_locks[i] = Lock_Init())<SUB>24</SUB>> ]
"30064771091" [label = <(&lt;operator&gt;.indirectIndexAccess,openssl_locks[i])<SUB>24</SUB>> ]
"68719476753" [label = <(IDENTIFIER,openssl_locks,openssl_locks[i] = Lock_Init())<SUB>24</SUB>> ]
"68719476754" [label = <(IDENTIFIER,i,openssl_locks[i] = Lock_Init())<SUB>24</SUB>> ]
"30064771092" [label = <(Lock_Init,Lock_Init())<SUB>24</SUB>> ]
"47244640261" [label = <(CONTROL_STRUCTURE,IF,if (openssl_locks[i] == NULL))<SUB>25</SUB>> ]
"30064771093" [label = <(&lt;operator&gt;.equals,openssl_locks[i] == NULL)<SUB>25</SUB>> ]
"30064771094" [label = <(&lt;operator&gt;.indirectIndexAccess,openssl_locks[i])<SUB>25</SUB>> ]
"68719476755" [label = <(IDENTIFIER,openssl_locks,openssl_locks[i] == NULL)<SUB>25</SUB>> ]
"68719476756" [label = <(IDENTIFIER,i,openssl_locks[i] == NULL)<SUB>25</SUB>> ]
"68719476757" [label = <(IDENTIFIER,NULL,openssl_locks[i] == NULL)<SUB>25</SUB>> ]
"25769803784" [label = <(BLOCK,{
                    LogError(&quot;Failed to alloc...,{
                    LogError(&quot;Failed to alloc...)<SUB>26</SUB>> ]
"30064771095" [label = <(LogError,LogError(&quot;Failed to allocate lock %d&quot;, i))<SUB>27</SUB>> ]
"90194313219" [label = <(LITERAL,&quot;Failed to allocate lock %d&quot;,LogError(&quot;Failed to allocate lock %d&quot;, i))<SUB>27</SUB>> ]
"68719476758" [label = <(IDENTIFIER,i,LogError(&quot;Failed to allocate lock %d&quot;, i))<SUB>27</SUB>> ]
"47244640262" [label = <(CONTROL_STRUCTURE,BREAK,break;)<SUB>28</SUB>> ]
"47244640263" [label = <(CONTROL_STRUCTURE,IF,if (i != CRYPTO_num_locks()))<SUB>32</SUB>> ]
"30064771096" [label = <(&lt;operator&gt;.notEquals,i != CRYPTO_num_locks())<SUB>32</SUB>> ]
"68719476759" [label = <(IDENTIFIER,i,i != CRYPTO_num_locks())<SUB>32</SUB>> ]
"30064771097" [label = <(CRYPTO_num_locks,CRYPTO_num_locks())<SUB>32</SUB>> ]
"25769803785" [label = <(BLOCK,{
                int j;
                for (j...,{
                int j;
                for (j...)<SUB>33</SUB>> ]
"94489280515" [label = <(LOCAL,int j: int)<SUB>34</SUB>> ]
"47244640264" [label = <(CONTROL_STRUCTURE,FOR,for (j = 0;j &lt; i;j++))<SUB>35</SUB>> ]
"25769803786" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>35</SUB>> ]
"30064771098" [label = <(&lt;operator&gt;.assignment,j = 0)<SUB>35</SUB>> ]
"68719476760" [label = <(IDENTIFIER,j,j = 0)<SUB>35</SUB>> ]
"90194313220" [label = <(LITERAL,0,j = 0)<SUB>35</SUB>> ]
"30064771099" [label = <(&lt;operator&gt;.lessThan,j &lt; i)<SUB>35</SUB>> ]
"68719476761" [label = <(IDENTIFIER,j,j &lt; i)<SUB>35</SUB>> ]
"68719476762" [label = <(IDENTIFIER,i,j &lt; i)<SUB>35</SUB>> ]
"30064771100" [label = <(&lt;operator&gt;.postIncrement,j++)<SUB>35</SUB>> ]
"68719476763" [label = <(IDENTIFIER,j,j++)<SUB>35</SUB>> ]
"25769803787" [label = <(BLOCK,{
                    Lock_Deinit(openssl_locks...,{
                    Lock_Deinit(openssl_locks...)<SUB>36</SUB>> ]
"30064771101" [label = <(Lock_Deinit,Lock_Deinit(openssl_locks[j]))<SUB>37</SUB>> ]
"30064771102" [label = <(&lt;operator&gt;.indirectIndexAccess,openssl_locks[j])<SUB>37</SUB>> ]
"68719476764" [label = <(IDENTIFIER,openssl_locks,Lock_Deinit(openssl_locks[j]))<SUB>37</SUB>> ]
"68719476765" [label = <(IDENTIFIER,j,Lock_Deinit(openssl_locks[j]))<SUB>37</SUB>> ]
"30064771103" [label = <(&lt;operator&gt;.assignment,result = MU_FAILURE)<SUB>39</SUB>> ]
"68719476766" [label = <(IDENTIFIER,result,result = MU_FAILURE)<SUB>39</SUB>> ]
"68719476767" [label = <(IDENTIFIER,MU_FAILURE,result = MU_FAILURE)<SUB>39</SUB>> ]
"47244640265" [label = <(CONTROL_STRUCTURE,ELSE,else)<SUB>42</SUB>> ]
"25769803788" [label = <(BLOCK,{
                CRYPTO_set_locking_callback(o...,{
                CRYPTO_set_locking_callback(o...)<SUB>42</SUB>> ]
"30064771104" [label = <(CRYPTO_set_locking_callback,CRYPTO_set_locking_callback(openssl_static_lock...)<SUB>43</SUB>> ]
"68719476768" [label = <(IDENTIFIER,openssl_static_locks_lock_unlock_cb,CRYPTO_set_locking_callback(openssl_static_lock...)<SUB>43</SUB>> ]
"30064771105" [label = <(&lt;operator&gt;.assignment,result = 0)<SUB>45</SUB>> ]
"68719476769" [label = <(IDENTIFIER,result,result = 0)<SUB>45</SUB>> ]
"90194313221" [label = <(LITERAL,0,result = 0)<SUB>45</SUB>> ]
"146028888064" [label = <(RETURN,return result;,return result;)<SUB>49</SUB>> ]
"68719476770" [label = <(IDENTIFIER,result,return result;)<SUB>49</SUB>> ]
"133143986176" [label = <(MODIFIER,STATIC)> ]
"128849018880" [label = <(METHOD_RETURN,int)<SUB>1</SUB>> ]
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "133143986176"  [ label = "AST: "] 
  "111669149697" -> "128849018880"  [ label = "AST: "] 
  "25769803777" -> "94489280512"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "25769803777" -> "146028888064"  [ label = "AST: "] 
  "47244640256" -> "30064771072"  [ label = "AST: "] 
  "47244640256" -> "25769803778"  [ label = "AST: "] 
  "47244640256" -> "47244640257"  [ label = "AST: "] 
  "30064771072" -> "68719476736"  [ label = "AST: "] 
  "30064771072" -> "68719476737"  [ label = "AST: "] 
  "25769803778" -> "30064771073"  [ label = "AST: "] 
  "25769803778" -> "30064771074"  [ label = "AST: "] 
  "30064771073" -> "90194313216"  [ label = "AST: "] 
  "30064771074" -> "68719476738"  [ label = "AST: "] 
  "30064771074" -> "68719476739"  [ label = "AST: "] 
  "47244640257" -> "25769803779"  [ label = "AST: "] 
  "25769803779" -> "94489280513"  [ label = "AST: "] 
  "25769803779" -> "30064771075"  [ label = "AST: "] 
  "25769803779" -> "47244640258"  [ label = "AST: "] 
  "30064771075" -> "68719476740"  [ label = "AST: "] 
  "30064771075" -> "30064771076"  [ label = "AST: "] 
  "30064771076" -> "30064771077"  [ label = "AST: "] 
  "30064771076" -> "30064771078"  [ label = "AST: "] 
  "30064771078" -> "68719476741"  [ label = "AST: "] 
  "47244640258" -> "30064771079"  [ label = "AST: "] 
  "47244640258" -> "25769803780"  [ label = "AST: "] 
  "47244640258" -> "47244640259"  [ label = "AST: "] 
  "30064771079" -> "30064771080"  [ label = "AST: "] 
  "30064771079" -> "30064771081"  [ label = "AST: "] 
  "30064771080" -> "68719476742"  [ label = "AST: "] 
  "30064771080" -> "68719476743"  [ label = "AST: "] 
  "30064771081" -> "30064771082"  [ label = "AST: "] 
  "30064771081" -> "68719476746"  [ label = "AST: "] 
  "30064771082" -> "68719476744"  [ label = "AST: "] 
  "30064771082" -> "30064771083"  [ label = "AST: "] 
  "30064771083" -> "68719476745"  [ label = "AST: "] 
  "25769803780" -> "30064771084"  [ label = "AST: "] 
  "25769803780" -> "30064771085"  [ label = "AST: "] 
  "30064771084" -> "90194313217"  [ label = "AST: "] 
  "30064771084" -> "68719476747"  [ label = "AST: "] 
  "30064771085" -> "68719476748"  [ label = "AST: "] 
  "30064771085" -> "68719476749"  [ label = "AST: "] 
  "47244640259" -> "25769803781"  [ label = "AST: "] 
  "25769803781" -> "94489280514"  [ label = "AST: "] 
  "25769803781" -> "47244640260"  [ label = "AST: "] 
  "25769803781" -> "47244640263"  [ label = "AST: "] 
  "47244640260" -> "25769803782"  [ label = "AST: "] 
  "47244640260" -> "30064771087"  [ label = "AST: "] 
  "47244640260" -> "30064771089"  [ label = "AST: "] 
  "47244640260" -> "25769803783"  [ label = "AST: "] 
  "25769803782" -> "30064771086"  [ label = "AST: "] 
  "30064771086" -> "68719476750"  [ label = "AST: "] 
  "30064771086" -> "90194313218"  [ label = "AST: "] 
  "30064771087" -> "68719476751"  [ label = "AST: "] 
  "30064771087" -> "30064771088"  [ label = "AST: "] 
  "30064771089" -> "68719476752"  [ label = "AST: "] 
  "25769803783" -> "30064771090"  [ label = "AST: "] 
  "25769803783" -> "47244640261"  [ label = "AST: "] 
  "30064771090" -> "30064771091"  [ label = "AST: "] 
  "30064771090" -> "30064771092"  [ label = "AST: "] 
  "30064771091" -> "68719476753"  [ label = "AST: "] 
  "30064771091" -> "68719476754"  [ label = "AST: "] 
  "47244640261" -> "30064771093"  [ label = "AST: "] 
  "47244640261" -> "25769803784"  [ label = "AST: "] 
  "30064771093" -> "30064771094"  [ label = "AST: "] 
  "30064771093" -> "68719476757"  [ label = "AST: "] 
  "30064771094" -> "68719476755"  [ label = "AST: "] 
  "30064771094" -> "68719476756"  [ label = "AST: "] 
  "25769803784" -> "30064771095"  [ label = "AST: "] 
  "25769803784" -> "47244640262"  [ label = "AST: "] 
  "30064771095" -> "90194313219"  [ label = "AST: "] 
  "30064771095" -> "68719476758"  [ label = "AST: "] 
  "47244640263" -> "30064771096"  [ label = "AST: "] 
  "47244640263" -> "25769803785"  [ label = "AST: "] 
  "47244640263" -> "47244640265"  [ label = "AST: "] 
  "30064771096" -> "68719476759"  [ label = "AST: "] 
  "30064771096" -> "30064771097"  [ label = "AST: "] 
  "25769803785" -> "94489280515"  [ label = "AST: "] 
  "25769803785" -> "47244640264"  [ label = "AST: "] 
  "25769803785" -> "30064771103"  [ label = "AST: "] 
  "47244640264" -> "25769803786"  [ label = "AST: "] 
  "47244640264" -> "30064771099"  [ label = "AST: "] 
  "47244640264" -> "30064771100"  [ label = "AST: "] 
  "47244640264" -> "25769803787"  [ label = "AST: "] 
  "25769803786" -> "30064771098"  [ label = "AST: "] 
  "30064771098" -> "68719476760"  [ label = "AST: "] 
  "30064771098" -> "90194313220"  [ label = "AST: "] 
  "30064771099" -> "68719476761"  [ label = "AST: "] 
  "30064771099" -> "68719476762"  [ label = "AST: "] 
  "30064771100" -> "68719476763"  [ label = "AST: "] 
  "25769803787" -> "30064771101"  [ label = "AST: "] 
  "30064771101" -> "30064771102"  [ label = "AST: "] 
  "30064771102" -> "68719476764"  [ label = "AST: "] 
  "30064771102" -> "68719476765"  [ label = "AST: "] 
  "30064771103" -> "68719476766"  [ label = "AST: "] 
  "30064771103" -> "68719476767"  [ label = "AST: "] 
  "47244640265" -> "25769803788"  [ label = "AST: "] 
  "25769803788" -> "30064771104"  [ label = "AST: "] 
  "25769803788" -> "30064771105"  [ label = "AST: "] 
  "30064771104" -> "68719476768"  [ label = "AST: "] 
  "30064771105" -> "68719476769"  [ label = "AST: "] 
  "30064771105" -> "90194313221"  [ label = "AST: "] 
  "146028888064" -> "68719476770"  [ label = "AST: "] 
  "146028888064" -> "128849018880"  [ label = "CFG: "] 
  "30064771072" -> "30064771073"  [ label = "CFG: "] 
  "30064771072" -> "30064771077"  [ label = "CFG: "] 
  "30064771073" -> "30064771074"  [ label = "CFG: "] 
  "30064771074" -> "146028888064"  [ label = "CFG: "] 
  "30064771075" -> "30064771080"  [ label = "CFG: "] 
  "30064771076" -> "30064771075"  [ label = "CFG: "] 
  "30064771079" -> "30064771084"  [ label = "CFG: "] 
  "30064771079" -> "30064771086"  [ label = "CFG: "] 
  "30064771077" -> "30064771078"  [ label = "CFG: "] 
  "30064771078" -> "30064771076"  [ label = "CFG: "] 
  "30064771080" -> "30064771079"  [ label = "CFG: "] 
  "30064771080" -> "30064771083"  [ label = "CFG: "] 
  "30064771081" -> "30064771079"  [ label = "CFG: "] 
  "30064771084" -> "30064771085"  [ label = "CFG: "] 
  "30064771085" -> "146028888064"  [ label = "CFG: "] 
  "30064771082" -> "30064771081"  [ label = "CFG: "] 
  "30064771083" -> "30064771082"  [ label = "CFG: "] 
  "30064771087" -> "30064771091"  [ label = "CFG: "] 
  "30064771087" -> "30064771097"  [ label = "CFG: "] 
  "30064771089" -> "30064771088"  [ label = "CFG: "] 
  "30064771096" -> "30064771098"  [ label = "CFG: "] 
  "30064771096" -> "30064771104"  [ label = "CFG: "] 
  "30064771086" -> "30064771088"  [ label = "CFG: "] 
  "30064771088" -> "30064771087"  [ label = "CFG: "] 
  "30064771090" -> "30064771094"  [ label = "CFG: "] 
  "30064771097" -> "30064771096"  [ label = "CFG: "] 
  "30064771103" -> "146028888064"  [ label = "CFG: "] 
  "30064771091" -> "30064771092"  [ label = "CFG: "] 
  "30064771092" -> "30064771090"  [ label = "CFG: "] 
  "30064771093" -> "30064771095"  [ label = "CFG: "] 
  "30064771093" -> "30064771089"  [ label = "CFG: "] 
  "30064771099" -> "30064771102"  [ label = "CFG: "] 
  "30064771099" -> "30064771103"  [ label = "CFG: "] 
  "30064771100" -> "30064771099"  [ label = "CFG: "] 
  "30064771104" -> "30064771105"  [ label = "CFG: "] 
  "30064771105" -> "146028888064"  [ label = "CFG: "] 
  "30064771094" -> "30064771093"  [ label = "CFG: "] 
  "30064771095" -> "30064771097"  [ label = "CFG: "] 
  "30064771098" -> "30064771099"  [ label = "CFG: "] 
  "30064771101" -> "30064771100"  [ label = "CFG: "] 
  "30064771102" -> "30064771101"  [ label = "CFG: "] 
  "111669149697" -> "30064771072"  [ label = "CFG: "] 
  "146028888064" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "115964116992" -> "128849018880"  [ label = "DDG: "] 
  "30064771072" -> "128849018880"  [ label = "DDG: openssl_locks"] 
  "30064771072" -> "128849018880"  [ label = "DDG: NULL"] 
  "30064771072" -> "128849018880"  [ label = "DDG: openssl_locks != NULL"] 
  "30064771076" -> "128849018880"  [ label = "DDG: CRYPTO_num_locks()"] 
  "30064771075" -> "128849018880"  [ label = "DDG: safe_multiply_size_t(CRYPTO_num_locks(), sizeof(LOCK_HANDLE))"] 
  "30064771075" -> "128849018880"  [ label = "DDG: malloc_size = safe_multiply_size_t(CRYPTO_num_locks(), sizeof(LOCK_HANDLE))"] 
  "30064771080" -> "128849018880"  [ label = "DDG: malloc_size"] 
  "30064771079" -> "128849018880"  [ label = "DDG: malloc_size == SIZE_MAX"] 
  "30064771082" -> "128849018880"  [ label = "DDG: openssl_locks"] 
  "30064771083" -> "128849018880"  [ label = "DDG: malloc_size"] 
  "30064771082" -> "128849018880"  [ label = "DDG: malloc(malloc_size)"] 
  "30064771081" -> "128849018880"  [ label = "DDG: openssl_locks = malloc(malloc_size)"] 
  "30064771081" -> "128849018880"  [ label = "DDG: NULL"] 
  "30064771079" -> "128849018880"  [ label = "DDG: (openssl_locks = malloc(malloc_size)) == NULL"] 
  "30064771079" -> "128849018880"  [ label = "DDG: malloc_size == SIZE_MAX ||
            (openssl_locks = malloc(malloc_size)) == NULL"] 
  "30064771086" -> "128849018880"  [ label = "DDG: i = 0"] 
  "30064771087" -> "128849018880"  [ label = "DDG: i &lt; CRYPTO_num_locks()"] 
  "30064771090" -> "128849018880"  [ label = "DDG: Lock_Init()"] 
  "30064771090" -> "128849018880"  [ label = "DDG: openssl_locks[i] = Lock_Init()"] 
  "30064771093" -> "128849018880"  [ label = "DDG: openssl_locks[i]"] 
  "30064771093" -> "128849018880"  [ label = "DDG: NULL"] 
  "30064771093" -> "128849018880"  [ label = "DDG: openssl_locks[i] == NULL"] 
  "30064771089" -> "128849018880"  [ label = "DDG: i++"] 
  "30064771095" -> "128849018880"  [ label = "DDG: LogError(&quot;Failed to allocate lock %d&quot;, i)"] 
  "30064771096" -> "128849018880"  [ label = "DDG: i"] 
  "30064771096" -> "128849018880"  [ label = "DDG: CRYPTO_num_locks()"] 
  "30064771096" -> "128849018880"  [ label = "DDG: i != CRYPTO_num_locks()"] 
  "30064771104" -> "128849018880"  [ label = "DDG: CRYPTO_set_locking_callback(openssl_static_locks_lock_unlock_cb)"] 
  "30064771105" -> "128849018880"  [ label = "DDG: result"] 
  "30064771105" -> "128849018880"  [ label = "DDG: result = 0"] 
  "30064771098" -> "128849018880"  [ label = "DDG: j = 0"] 
  "30064771099" -> "128849018880"  [ label = "DDG: j"] 
  "30064771099" -> "128849018880"  [ label = "DDG: i"] 
  "30064771099" -> "128849018880"  [ label = "DDG: j &lt; i"] 
  "30064771103" -> "128849018880"  [ label = "DDG: result"] 
  "30064771103" -> "128849018880"  [ label = "DDG: MU_FAILURE"] 
  "30064771103" -> "128849018880"  [ label = "DDG: result = MU_FAILURE"] 
  "30064771101" -> "128849018880"  [ label = "DDG: openssl_locks[j]"] 
  "30064771101" -> "128849018880"  [ label = "DDG: Lock_Deinit(openssl_locks[j])"] 
  "30064771100" -> "128849018880"  [ label = "DDG: j++"] 
  "30064771084" -> "128849018880"  [ label = "DDG: malloc_size"] 
  "30064771084" -> "128849018880"  [ label = "DDG: LogError(&quot;Failed to allocate locks, size:%zu&quot;, malloc_size)"] 
  "30064771085" -> "128849018880"  [ label = "DDG: result"] 
  "30064771085" -> "128849018880"  [ label = "DDG: MU_FAILURE"] 
  "30064771085" -> "128849018880"  [ label = "DDG: result = MU_FAILURE"] 
  "30064771073" -> "128849018880"  [ label = "DDG: LogInfo(&quot;Locks already initialized&quot;)"] 
  "30064771074" -> "128849018880"  [ label = "DDG: result"] 
  "30064771074" -> "128849018880"  [ label = "DDG: MU_FAILURE"] 
  "30064771074" -> "128849018880"  [ label = "DDG: result = MU_FAILURE"] 
  "30064771104" -> "128849018880"  [ label = "DDG: openssl_static_locks_lock_unlock_cb"] 
  "30064771078" -> "128849018880"  [ label = "DDG: LOCK_HANDLE"] 
  "30064771080" -> "128849018880"  [ label = "DDG: SIZE_MAX"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "68719476770" -> "146028888064"  [ label = "DDG: result"] 
  "30064771074" -> "68719476770"  [ label = "DDG: result"] 
  "30064771105" -> "68719476770"  [ label = "DDG: result"] 
  "30064771085" -> "68719476770"  [ label = "DDG: result"] 
  "30064771103" -> "68719476770"  [ label = "DDG: result"] 
  "111669149697" -> "68719476770"  [ label = "DDG: "] 
  "111669149697" -> "30064771072"  [ label = "DDG: "] 
  "111669149697" -> "30064771074"  [ label = "DDG: "] 
  "111669149697" -> "30064771073"  [ label = "DDG: "] 
  "30064771076" -> "30064771075"  [ label = "DDG: CRYPTO_num_locks()"] 
  "111669149697" -> "30064771076"  [ label = "DDG: "] 
  "30064771080" -> "30064771079"  [ label = "DDG: malloc_size"] 
  "30064771080" -> "30064771079"  [ label = "DDG: SIZE_MAX"] 
  "30064771081" -> "30064771079"  [ label = "DDG: openssl_locks = malloc(malloc_size)"] 
  "30064771081" -> "30064771079"  [ label = "DDG: NULL"] 
  "111669149697" -> "30064771085"  [ label = "DDG: "] 
  "30064771075" -> "30064771080"  [ label = "DDG: malloc_size"] 
  "111669149697" -> "30064771080"  [ label = "DDG: "] 
  "30064771082" -> "30064771081"  [ label = "DDG: openssl_locks"] 
  "30064771083" -> "30064771081"  [ label = "DDG: malloc_size"] 
  "30064771072" -> "30064771081"  [ label = "DDG: NULL"] 
  "111669149697" -> "30064771081"  [ label = "DDG: "] 
  "111669149697" -> "30064771084"  [ label = "DDG: "] 
  "30064771080" -> "30064771084"  [ label = "DDG: malloc_size"] 
  "30064771083" -> "30064771084"  [ label = "DDG: malloc_size"] 
  "30064771083" -> "30064771082"  [ label = "DDG: malloc_size"] 
  "30064771080" -> "30064771083"  [ label = "DDG: malloc_size"] 
  "111669149697" -> "30064771083"  [ label = "DDG: "] 
  "111669149697" -> "30064771086"  [ label = "DDG: "] 
  "30064771086" -> "30064771087"  [ label = "DDG: i"] 
  "30064771089" -> "30064771087"  [ label = "DDG: i"] 
  "111669149697" -> "30064771087"  [ label = "DDG: "] 
  "30064771087" -> "30064771089"  [ label = "DDG: i"] 
  "111669149697" -> "30064771089"  [ label = "DDG: "] 
  "111669149697" -> "30064771090"  [ label = "DDG: "] 
  "30064771087" -> "30064771096"  [ label = "DDG: i"] 
  "30064771095" -> "30064771096"  [ label = "DDG: i"] 
  "111669149697" -> "30064771096"  [ label = "DDG: "] 
  "111669149697" -> "30064771103"  [ label = "DDG: "] 
  "111669149697" -> "30064771105"  [ label = "DDG: "] 
  "30064771072" -> "30064771093"  [ label = "DDG: openssl_locks"] 
  "30064771082" -> "30064771093"  [ label = "DDG: openssl_locks"] 
  "30064771090" -> "30064771093"  [ label = "DDG: openssl_locks[i]"] 
  "30064771072" -> "30064771093"  [ label = "DDG: NULL"] 
  "30064771081" -> "30064771093"  [ label = "DDG: NULL"] 
  "111669149697" -> "30064771093"  [ label = "DDG: "] 
  "111669149697" -> "30064771098"  [ label = "DDG: "] 
  "30064771098" -> "30064771099"  [ label = "DDG: j"] 
  "30064771100" -> "30064771099"  [ label = "DDG: j"] 
  "111669149697" -> "30064771099"  [ label = "DDG: "] 
  "30064771096" -> "30064771099"  [ label = "DDG: i"] 
  "30064771099" -> "30064771100"  [ label = "DDG: j"] 
  "111669149697" -> "30064771100"  [ label = "DDG: "] 
  "111669149697" -> "30064771104"  [ label = "DDG: "] 
  "111669149697" -> "30064771095"  [ label = "DDG: "] 
  "30064771087" -> "30064771095"  [ label = "DDG: i"] 
  "30064771072" -> "30064771101"  [ label = "DDG: openssl_locks"] 
  "30064771082" -> "30064771101"  [ label = "DDG: openssl_locks"] 
  "30064771072" -> "30064771075"  [ label = "CDG: "] 
  "30064771072" -> "30064771074"  [ label = "CDG: "] 
  "30064771072" -> "30064771077"  [ label = "CDG: "] 
  "30064771072" -> "30064771076"  [ label = "CDG: "] 
  "30064771072" -> "30064771073"  [ label = "CDG: "] 
  "30064771072" -> "30064771079"  [ label = "CDG: "] 
  "30064771072" -> "30064771078"  [ label = "CDG: "] 
  "30064771072" -> "30064771080"  [ label = "CDG: "] 
  "30064771079" -> "30064771097"  [ label = "CDG: "] 
  "30064771079" -> "30064771096"  [ label = "CDG: "] 
  "30064771079" -> "30064771085"  [ label = "CDG: "] 
  "30064771079" -> "30064771084"  [ label = "CDG: "] 
  "30064771079" -> "30064771087"  [ label = "CDG: "] 
  "30064771079" -> "30064771086"  [ label = "CDG: "] 
  "30064771079" -> "30064771088"  [ label = "CDG: "] 
  "30064771080" -> "30064771083"  [ label = "CDG: "] 
  "30064771080" -> "30064771082"  [ label = "CDG: "] 
  "30064771080" -> "30064771081"  [ label = "CDG: "] 
  "30064771087" -> "30064771094"  [ label = "CDG: "] 
  "30064771087" -> "30064771091"  [ label = "CDG: "] 
  "30064771087" -> "30064771090"  [ label = "CDG: "] 
  "30064771087" -> "30064771093"  [ label = "CDG: "] 
  "30064771087" -> "30064771092"  [ label = "CDG: "] 
  "30064771096" -> "30064771099"  [ label = "CDG: "] 
  "30064771096" -> "30064771098"  [ label = "CDG: "] 
  "30064771096" -> "30064771103"  [ label = "CDG: "] 
  "30064771096" -> "30064771105"  [ label = "CDG: "] 
  "30064771096" -> "30064771104"  [ label = "CDG: "] 
  "30064771093" -> "30064771095"  [ label = "CDG: "] 
  "30064771093" -> "30064771087"  [ label = "CDG: "] 
  "30064771093" -> "30064771089"  [ label = "CDG: "] 
  "30064771093" -> "30064771088"  [ label = "CDG: "] 
  "30064771099" -> "30064771099"  [ label = "CDG: "] 
  "30064771099" -> "30064771101"  [ label = "CDG: "] 
  "30064771099" -> "30064771100"  [ label = "CDG: "] 
  "30064771099" -> "30064771102"  [ label = "CDG: "] 
}
"""
)
