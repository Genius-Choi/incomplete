[33mval[0m [36mres1606[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "ast_for_ifexpr" {  
"111669149697" [label = <(METHOD,ast_for_ifexpr)<SUB>1</SUB>> ]
"115964116992" [label = <(PARAM,struct compiling *c)<SUB>1</SUB>> ]
"115964116993" [label = <(PARAM,const node *n)<SUB>1</SUB>> ]
"25769803777" [label = <(BLOCK,{
    /* test: or_test 'if' or_test 'else' test...,{
    /* test: or_test 'if' or_test 'else' test...)<SUB>2</SUB>> ]
"94489280512" [label = <(LOCAL,expr_ty expression: expr_ty)<SUB>4</SUB>> ]
"94489280513" [label = <(LOCAL,expr_ty body: expr_ty)<SUB>4</SUB>> ]
"94489280514" [label = <(LOCAL,expr_ty orelse: expr_ty)<SUB>4</SUB>> ]
"30064771072" [label = <(assert,assert(NCH(n) == 5))<SUB>6</SUB>> ]
"30064771073" [label = <(&lt;operator&gt;.equals,NCH(n) == 5)<SUB>6</SUB>> ]
"30064771074" [label = <(NCH,NCH(n))<SUB>6</SUB>> ]
"68719476736" [label = <(IDENTIFIER,n,NCH(n))<SUB>6</SUB>> ]
"90194313216" [label = <(LITERAL,5,NCH(n) == 5)<SUB>6</SUB>> ]
"30064771075" [label = <(&lt;operator&gt;.assignment,body = ast_for_expr(c, CHILD(n, 0)))<SUB>7</SUB>> ]
"68719476737" [label = <(IDENTIFIER,body,body = ast_for_expr(c, CHILD(n, 0)))<SUB>7</SUB>> ]
"30064771076" [label = <(ast_for_expr,ast_for_expr(c, CHILD(n, 0)))<SUB>7</SUB>> ]
"68719476738" [label = <(IDENTIFIER,c,ast_for_expr(c, CHILD(n, 0)))<SUB>7</SUB>> ]
"30064771077" [label = <(CHILD,CHILD(n, 0))<SUB>7</SUB>> ]
"68719476739" [label = <(IDENTIFIER,n,CHILD(n, 0))<SUB>7</SUB>> ]
"90194313217" [label = <(LITERAL,0,CHILD(n, 0))<SUB>7</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,IF,if (!body))<SUB>8</SUB>> ]
"30064771078" [label = <(&lt;operator&gt;.logicalNot,!body)<SUB>8</SUB>> ]
"68719476740" [label = <(IDENTIFIER,body,!body)<SUB>8</SUB>> ]
"25769803778" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>9</SUB>> ]
"146028888064" [label = <(RETURN,return NULL;,return NULL;)<SUB>9</SUB>> ]
"68719476741" [label = <(IDENTIFIER,NULL,return NULL;)<SUB>9</SUB>> ]
"30064771079" [label = <(&lt;operator&gt;.assignment,expression = ast_for_expr(c, CHILD(n, 2)))<SUB>10</SUB>> ]
"68719476742" [label = <(IDENTIFIER,expression,expression = ast_for_expr(c, CHILD(n, 2)))<SUB>10</SUB>> ]
"30064771080" [label = <(ast_for_expr,ast_for_expr(c, CHILD(n, 2)))<SUB>10</SUB>> ]
"68719476743" [label = <(IDENTIFIER,c,ast_for_expr(c, CHILD(n, 2)))<SUB>10</SUB>> ]
"30064771081" [label = <(CHILD,CHILD(n, 2))<SUB>10</SUB>> ]
"68719476744" [label = <(IDENTIFIER,n,CHILD(n, 2))<SUB>10</SUB>> ]
"90194313218" [label = <(LITERAL,2,CHILD(n, 2))<SUB>10</SUB>> ]
"47244640257" [label = <(CONTROL_STRUCTURE,IF,if (!expression))<SUB>11</SUB>> ]
"30064771082" [label = <(&lt;operator&gt;.logicalNot,!expression)<SUB>11</SUB>> ]
"68719476745" [label = <(IDENTIFIER,expression,!expression)<SUB>11</SUB>> ]
"25769803779" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>12</SUB>> ]
"146028888065" [label = <(RETURN,return NULL;,return NULL;)<SUB>12</SUB>> ]
"68719476746" [label = <(IDENTIFIER,NULL,return NULL;)<SUB>12</SUB>> ]
"30064771083" [label = <(&lt;operator&gt;.assignment,orelse = ast_for_expr(c, CHILD(n, 4)))<SUB>13</SUB>> ]
"68719476747" [label = <(IDENTIFIER,orelse,orelse = ast_for_expr(c, CHILD(n, 4)))<SUB>13</SUB>> ]
"30064771084" [label = <(ast_for_expr,ast_for_expr(c, CHILD(n, 4)))<SUB>13</SUB>> ]
"68719476748" [label = <(IDENTIFIER,c,ast_for_expr(c, CHILD(n, 4)))<SUB>13</SUB>> ]
"30064771085" [label = <(CHILD,CHILD(n, 4))<SUB>13</SUB>> ]
"68719476749" [label = <(IDENTIFIER,n,CHILD(n, 4))<SUB>13</SUB>> ]
"90194313219" [label = <(LITERAL,4,CHILD(n, 4))<SUB>13</SUB>> ]
"47244640258" [label = <(CONTROL_STRUCTURE,IF,if (!orelse))<SUB>14</SUB>> ]
"30064771086" [label = <(&lt;operator&gt;.logicalNot,!orelse)<SUB>14</SUB>> ]
"68719476750" [label = <(IDENTIFIER,orelse,!orelse)<SUB>14</SUB>> ]
"25769803780" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>15</SUB>> ]
"146028888066" [label = <(RETURN,return NULL;,return NULL;)<SUB>15</SUB>> ]
"68719476751" [label = <(IDENTIFIER,NULL,return NULL;)<SUB>15</SUB>> ]
"146028888067" [label = <(RETURN,return IfExp(expression, body, orelse, LINENO(n...,return IfExp(expression, body, orelse, LINENO(n...)<SUB>16</SUB>> ]
"30064771087" [label = <(IfExp,IfExp(expression, body, orelse, LINENO(n), n-&gt;n...)<SUB>16</SUB>> ]
"68719476752" [label = <(IDENTIFIER,expression,IfExp(expression, body, orelse, LINENO(n), n-&gt;n...)<SUB>16</SUB>> ]
"68719476753" [label = <(IDENTIFIER,body,IfExp(expression, body, orelse, LINENO(n), n-&gt;n...)<SUB>16</SUB>> ]
"68719476754" [label = <(IDENTIFIER,orelse,IfExp(expression, body, orelse, LINENO(n), n-&gt;n...)<SUB>16</SUB>> ]
"30064771088" [label = <(LINENO,LINENO(n))<SUB>16</SUB>> ]
"68719476755" [label = <(IDENTIFIER,n,LINENO(n))<SUB>16</SUB>> ]
"30064771089" [label = <(&lt;operator&gt;.indirectFieldAccess,n-&gt;n_col_offset)<SUB>16</SUB>> ]
"68719476756" [label = <(IDENTIFIER,n,IfExp(expression, body, orelse, LINENO(n), n-&gt;n...)<SUB>16</SUB>> ]
"55834574848" [label = <(FIELD_IDENTIFIER,n_col_offset,n_col_offset)<SUB>16</SUB>> ]
"30064771090" [label = <(&lt;operator&gt;.indirectFieldAccess,c-&gt;c_arena)<SUB>17</SUB>> ]
"68719476757" [label = <(IDENTIFIER,c,IfExp(expression, body, orelse, LINENO(n), n-&gt;n...)<SUB>17</SUB>> ]
"55834574849" [label = <(FIELD_IDENTIFIER,c_arena,c_arena)<SUB>17</SUB>> ]
"128849018880" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "115964116993"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "128849018880"  [ label = "AST: "] 
  "25769803777" -> "94489280512"  [ label = "AST: "] 
  "25769803777" -> "94489280513"  [ label = "AST: "] 
  "25769803777" -> "94489280514"  [ label = "AST: "] 
  "25769803777" -> "30064771072"  [ label = "AST: "] 
  "25769803777" -> "30064771075"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "25769803777" -> "30064771079"  [ label = "AST: "] 
  "25769803777" -> "47244640257"  [ label = "AST: "] 
  "25769803777" -> "30064771083"  [ label = "AST: "] 
  "25769803777" -> "47244640258"  [ label = "AST: "] 
  "25769803777" -> "146028888067"  [ label = "AST: "] 
  "30064771072" -> "30064771073"  [ label = "AST: "] 
  "30064771073" -> "30064771074"  [ label = "AST: "] 
  "30064771073" -> "90194313216"  [ label = "AST: "] 
  "30064771074" -> "68719476736"  [ label = "AST: "] 
  "30064771075" -> "68719476737"  [ label = "AST: "] 
  "30064771075" -> "30064771076"  [ label = "AST: "] 
  "30064771076" -> "68719476738"  [ label = "AST: "] 
  "30064771076" -> "30064771077"  [ label = "AST: "] 
  "30064771077" -> "68719476739"  [ label = "AST: "] 
  "30064771077" -> "90194313217"  [ label = "AST: "] 
  "47244640256" -> "30064771078"  [ label = "AST: "] 
  "47244640256" -> "25769803778"  [ label = "AST: "] 
  "30064771078" -> "68719476740"  [ label = "AST: "] 
  "25769803778" -> "146028888064"  [ label = "AST: "] 
  "146028888064" -> "68719476741"  [ label = "AST: "] 
  "30064771079" -> "68719476742"  [ label = "AST: "] 
  "30064771079" -> "30064771080"  [ label = "AST: "] 
  "30064771080" -> "68719476743"  [ label = "AST: "] 
  "30064771080" -> "30064771081"  [ label = "AST: "] 
  "30064771081" -> "68719476744"  [ label = "AST: "] 
  "30064771081" -> "90194313218"  [ label = "AST: "] 
  "47244640257" -> "30064771082"  [ label = "AST: "] 
  "47244640257" -> "25769803779"  [ label = "AST: "] 
  "30064771082" -> "68719476745"  [ label = "AST: "] 
  "25769803779" -> "146028888065"  [ label = "AST: "] 
  "146028888065" -> "68719476746"  [ label = "AST: "] 
  "30064771083" -> "68719476747"  [ label = "AST: "] 
  "30064771083" -> "30064771084"  [ label = "AST: "] 
  "30064771084" -> "68719476748"  [ label = "AST: "] 
  "30064771084" -> "30064771085"  [ label = "AST: "] 
  "30064771085" -> "68719476749"  [ label = "AST: "] 
  "30064771085" -> "90194313219"  [ label = "AST: "] 
  "47244640258" -> "30064771086"  [ label = "AST: "] 
  "47244640258" -> "25769803780"  [ label = "AST: "] 
  "30064771086" -> "68719476750"  [ label = "AST: "] 
  "25769803780" -> "146028888066"  [ label = "AST: "] 
  "146028888066" -> "68719476751"  [ label = "AST: "] 
  "146028888067" -> "30064771087"  [ label = "AST: "] 
  "30064771087" -> "68719476752"  [ label = "AST: "] 
  "30064771087" -> "68719476753"  [ label = "AST: "] 
  "30064771087" -> "68719476754"  [ label = "AST: "] 
  "30064771087" -> "30064771088"  [ label = "AST: "] 
  "30064771087" -> "30064771089"  [ label = "AST: "] 
  "30064771087" -> "30064771090"  [ label = "AST: "] 
  "30064771088" -> "68719476755"  [ label = "AST: "] 
  "30064771089" -> "68719476756"  [ label = "AST: "] 
  "30064771089" -> "55834574848"  [ label = "AST: "] 
  "30064771090" -> "68719476757"  [ label = "AST: "] 
  "30064771090" -> "55834574849"  [ label = "AST: "] 
  "30064771072" -> "30064771077"  [ label = "CFG: "] 
  "30064771075" -> "30064771078"  [ label = "CFG: "] 
  "30064771079" -> "30064771082"  [ label = "CFG: "] 
  "30064771083" -> "30064771086"  [ label = "CFG: "] 
  "146028888067" -> "128849018880"  [ label = "CFG: "] 
  "30064771073" -> "30064771072"  [ label = "CFG: "] 
  "30064771076" -> "30064771075"  [ label = "CFG: "] 
  "30064771078" -> "146028888064"  [ label = "CFG: "] 
  "30064771078" -> "30064771081"  [ label = "CFG: "] 
  "30064771080" -> "30064771079"  [ label = "CFG: "] 
  "30064771082" -> "146028888065"  [ label = "CFG: "] 
  "30064771082" -> "30064771085"  [ label = "CFG: "] 
  "30064771084" -> "30064771083"  [ label = "CFG: "] 
  "30064771086" -> "146028888066"  [ label = "CFG: "] 
  "30064771086" -> "30064771088"  [ label = "CFG: "] 
  "30064771087" -> "146028888067"  [ label = "CFG: "] 
  "30064771074" -> "30064771073"  [ label = "CFG: "] 
  "30064771077" -> "30064771076"  [ label = "CFG: "] 
  "146028888064" -> "128849018880"  [ label = "CFG: "] 
  "30064771081" -> "30064771080"  [ label = "CFG: "] 
  "146028888065" -> "128849018880"  [ label = "CFG: "] 
  "30064771085" -> "30064771084"  [ label = "CFG: "] 
  "146028888066" -> "128849018880"  [ label = "CFG: "] 
  "30064771088" -> "55834574848"  [ label = "CFG: "] 
  "30064771089" -> "55834574849"  [ label = "CFG: "] 
  "30064771090" -> "30064771087"  [ label = "CFG: "] 
  "55834574848" -> "30064771089"  [ label = "CFG: "] 
  "55834574849" -> "30064771090"  [ label = "CFG: "] 
  "111669149697" -> "30064771074"  [ label = "CFG: "] 
  "146028888064" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888067" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888066" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888065" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "30064771073" -> "128849018880"  [ label = "DDG: NCH(n)"] 
  "30064771072" -> "128849018880"  [ label = "DDG: NCH(n) == 5"] 
  "30064771072" -> "128849018880"  [ label = "DDG: assert(NCH(n) == 5)"] 
  "30064771076" -> "128849018880"  [ label = "DDG: c"] 
  "30064771077" -> "128849018880"  [ label = "DDG: n"] 
  "30064771076" -> "128849018880"  [ label = "DDG: CHILD(n, 0)"] 
  "30064771075" -> "128849018880"  [ label = "DDG: ast_for_expr(c, CHILD(n, 0))"] 
  "30064771075" -> "128849018880"  [ label = "DDG: body = ast_for_expr(c, CHILD(n, 0))"] 
  "30064771078" -> "128849018880"  [ label = "DDG: body"] 
  "30064771078" -> "128849018880"  [ label = "DDG: !body"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "111669149697" -> "115964116993"  [ label = "DDG: "] 
  "30064771076" -> "30064771075"  [ label = "DDG: c"] 
  "30064771076" -> "30064771075"  [ label = "DDG: CHILD(n, 0)"] 
  "30064771080" -> "30064771079"  [ label = "DDG: c"] 
  "30064771080" -> "30064771079"  [ label = "DDG: CHILD(n, 2)"] 
  "30064771084" -> "30064771083"  [ label = "DDG: c"] 
  "30064771084" -> "30064771083"  [ label = "DDG: CHILD(n, 4)"] 
  "30064771087" -> "146028888067"  [ label = "DDG: IfExp(expression, body, orelse, LINENO(n), n-&gt;n_col_offset,
                 c-&gt;c_arena)"] 
  "30064771073" -> "30064771072"  [ label = "DDG: NCH(n)"] 
  "30064771073" -> "30064771072"  [ label = "DDG: 5"] 
  "30064771074" -> "30064771073"  [ label = "DDG: n"] 
  "111669149697" -> "30064771073"  [ label = "DDG: "] 
  "115964116992" -> "30064771076"  [ label = "DDG: c"] 
  "111669149697" -> "30064771076"  [ label = "DDG: "] 
  "30064771077" -> "30064771076"  [ label = "DDG: n"] 
  "30064771077" -> "30064771076"  [ label = "DDG: 0"] 
  "30064771075" -> "30064771078"  [ label = "DDG: body"] 
  "111669149697" -> "30064771078"  [ label = "DDG: "] 
  "68719476741" -> "146028888064"  [ label = "DDG: NULL"] 
  "111669149697" -> "146028888064"  [ label = "DDG: "] 
  "30064771076" -> "30064771080"  [ label = "DDG: c"] 
  "111669149697" -> "30064771080"  [ label = "DDG: "] 
  "30064771081" -> "30064771080"  [ label = "DDG: n"] 
  "30064771081" -> "30064771080"  [ label = "DDG: 2"] 
  "30064771079" -> "30064771082"  [ label = "DDG: expression"] 
  "111669149697" -> "30064771082"  [ label = "DDG: "] 
  "68719476746" -> "146028888065"  [ label = "DDG: NULL"] 
  "111669149697" -> "146028888065"  [ label = "DDG: "] 
  "30064771080" -> "30064771084"  [ label = "DDG: c"] 
  "111669149697" -> "30064771084"  [ label = "DDG: "] 
  "30064771085" -> "30064771084"  [ label = "DDG: n"] 
  "30064771085" -> "30064771084"  [ label = "DDG: 4"] 
  "30064771083" -> "30064771086"  [ label = "DDG: orelse"] 
  "111669149697" -> "30064771086"  [ label = "DDG: "] 
  "68719476751" -> "146028888066"  [ label = "DDG: NULL"] 
  "111669149697" -> "146028888066"  [ label = "DDG: "] 
  "30064771082" -> "30064771087"  [ label = "DDG: expression"] 
  "111669149697" -> "30064771087"  [ label = "DDG: "] 
  "30064771078" -> "30064771087"  [ label = "DDG: body"] 
  "30064771086" -> "30064771087"  [ label = "DDG: orelse"] 
  "30064771088" -> "30064771087"  [ label = "DDG: n"] 
  "30064771084" -> "30064771087"  [ label = "DDG: c"] 
  "115964116993" -> "30064771074"  [ label = "DDG: n"] 
  "111669149697" -> "30064771074"  [ label = "DDG: "] 
  "30064771074" -> "30064771077"  [ label = "DDG: n"] 
  "111669149697" -> "30064771077"  [ label = "DDG: "] 
  "111669149697" -> "68719476741"  [ label = "DDG: "] 
  "30064771077" -> "30064771081"  [ label = "DDG: n"] 
  "111669149697" -> "30064771081"  [ label = "DDG: "] 
  "111669149697" -> "68719476746"  [ label = "DDG: "] 
  "30064771081" -> "30064771085"  [ label = "DDG: n"] 
  "111669149697" -> "30064771085"  [ label = "DDG: "] 
  "111669149697" -> "68719476751"  [ label = "DDG: "] 
  "30064771085" -> "30064771088"  [ label = "DDG: n"] 
  "111669149697" -> "30064771088"  [ label = "DDG: "] 
  "30064771078" -> "30064771079"  [ label = "CDG: "] 
  "30064771078" -> "30064771080"  [ label = "CDG: "] 
  "30064771078" -> "146028888064"  [ label = "CDG: "] 
  "30064771078" -> "30064771081"  [ label = "CDG: "] 
  "30064771078" -> "30064771082"  [ label = "CDG: "] 
  "30064771082" -> "30064771085"  [ label = "CDG: "] 
  "30064771082" -> "30064771086"  [ label = "CDG: "] 
  "30064771082" -> "146028888065"  [ label = "CDG: "] 
  "30064771082" -> "30064771083"  [ label = "CDG: "] 
  "30064771082" -> "30064771084"  [ label = "CDG: "] 
  "30064771086" -> "30064771087"  [ label = "CDG: "] 
  "30064771086" -> "30064771088"  [ label = "CDG: "] 
  "30064771086" -> "30064771089"  [ label = "CDG: "] 
  "30064771086" -> "30064771090"  [ label = "CDG: "] 
  "30064771086" -> "55834574849"  [ label = "CDG: "] 
  "30064771086" -> "55834574848"  [ label = "CDG: "] 
  "30064771086" -> "146028888066"  [ label = "CDG: "] 
  "30064771086" -> "146028888067"  [ label = "CDG: "] 
}
"""
)
