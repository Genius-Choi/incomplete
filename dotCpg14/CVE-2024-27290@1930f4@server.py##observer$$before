[33mval[0m [36mres1518[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "observer" {  
"111669149697" [label = <(METHOD,observer)<SUB>1</SUB>> ]
"25769803777" [label = <(BLOCK,,)<SUB>1</SUB>> ]
"30064771073" [label = <(setup_translation,setup_translation())<SUB>2</SUB>> ]
"68719476738" [label = <(IDENTIFIER,setup_translation,setup_translation())<SUB>2</SUB>> ]
"30064771075" [label = <(&lt;operator&gt;.assignment,session['observer'] = 1)<SUB>3</SUB>> ]
"30064771074" [label = <(&lt;operator&gt;.indexAccess,session['observer'])<SUB>3</SUB>> ]
"68719476739" [label = <(IDENTIFIER,session,session['observer'] = 1)<SUB>3</SUB>> ]
"90194313217" [label = <(LITERAL,'observer',session['observer'] = 1)<SUB>3</SUB>> ]
"90194313216" [label = <(LITERAL,1,session['observer'] = 1)<SUB>3</SUB>> ]
"30064771080" [label = <(&lt;operator&gt;.assignment,i = tmp0 = request.args
tmp0.get('i', None))<SUB>4</SUB>> ]
"68719476744" [label = <(IDENTIFIER,i,i = tmp0 = request.args
tmp0.get('i', None))<SUB>4</SUB>> ]
"25769803778" [label = <(BLOCK,tmp0 = request.args
tmp0.get('i', None),tmp0 = request.args
tmp0.get('i', None))<SUB>4</SUB>> ]
"30064771077" [label = <(&lt;operator&gt;.assignment,tmp0 = request.args)<SUB>4</SUB>> ]
"68719476741" [label = <(IDENTIFIER,tmp0,tmp0 = request.args)<SUB>4</SUB>> ]
"30064771076" [label = <(&lt;operator&gt;.fieldAccess,request.args)<SUB>4</SUB>> ]
"68719476740" [label = <(IDENTIFIER,request,tmp0 = request.args)<SUB>4</SUB>> ]
"55834574848" [label = <(FIELD_IDENTIFIER,args,args)<SUB>4</SUB>> ]
"30064771079" [label = <(get,tmp0.get('i', None))<SUB>4</SUB>> ]
"30064771078" [label = <(&lt;operator&gt;.fieldAccess,tmp0.get)<SUB>4</SUB>> ]
"68719476742" [label = <(IDENTIFIER,tmp0,tmp0.get('i', None))<SUB>4</SUB>> ]
"55834574849" [label = <(FIELD_IDENTIFIER,get,get)<SUB>4</SUB>> ]
"68719476743" [label = <(IDENTIFIER,tmp0,tmp0.get('i', None))<SUB>4</SUB>> ]
"90194313218" [label = <(LITERAL,'i',tmp0.get('i', None))<SUB>4</SUB>> ]
"90194313219" [label = <(LITERAL,None,tmp0.get('i', None))<SUB>4</SUB>> ]
"30064771085" [label = <(&lt;operator&gt;.assignment,uid = tmp1 = request.args
tmp1.get('uid', None))<SUB>5</SUB>> ]
"68719476749" [label = <(IDENTIFIER,uid,uid = tmp1 = request.args
tmp1.get('uid', None))<SUB>5</SUB>> ]
"25769803779" [label = <(BLOCK,tmp1 = request.args
tmp1.get('uid', None),tmp1 = request.args
tmp1.get('uid', None))<SUB>5</SUB>> ]
"30064771082" [label = <(&lt;operator&gt;.assignment,tmp1 = request.args)<SUB>5</SUB>> ]
"68719476746" [label = <(IDENTIFIER,tmp1,tmp1 = request.args)<SUB>5</SUB>> ]
"30064771081" [label = <(&lt;operator&gt;.fieldAccess,request.args)<SUB>5</SUB>> ]
"68719476745" [label = <(IDENTIFIER,request,tmp1 = request.args)<SUB>5</SUB>> ]
"55834574850" [label = <(FIELD_IDENTIFIER,args,args)<SUB>5</SUB>> ]
"30064771084" [label = <(get,tmp1.get('uid', None))<SUB>5</SUB>> ]
"30064771083" [label = <(&lt;operator&gt;.fieldAccess,tmp1.get)<SUB>5</SUB>> ]
"68719476747" [label = <(IDENTIFIER,tmp1,tmp1.get('uid', None))<SUB>5</SUB>> ]
"55834574851" [label = <(FIELD_IDENTIFIER,get,get)<SUB>5</SUB>> ]
"68719476748" [label = <(IDENTIFIER,tmp1,tmp1.get('uid', None))<SUB>5</SUB>> ]
"90194313220" [label = <(LITERAL,'uid',tmp1.get('uid', None))<SUB>5</SUB>> ]
"90194313221" [label = <(LITERAL,None,tmp1.get('uid', None))<SUB>5</SUB>> ]
"30064771090" [label = <(&lt;operator&gt;.assignment,userid = tmp2 = request.args
tmp2.get('userid',...)<SUB>6</SUB>> ]
"68719476754" [label = <(IDENTIFIER,userid,userid = tmp2 = request.args
tmp2.get('userid',...)<SUB>6</SUB>> ]
"25769803780" [label = <(BLOCK,tmp2 = request.args
tmp2.get('userid', None),tmp2 = request.args
tmp2.get('userid', None))<SUB>6</SUB>> ]
"30064771087" [label = <(&lt;operator&gt;.assignment,tmp2 = request.args)<SUB>6</SUB>> ]
"68719476751" [label = <(IDENTIFIER,tmp2,tmp2 = request.args)<SUB>6</SUB>> ]
"30064771086" [label = <(&lt;operator&gt;.fieldAccess,request.args)<SUB>6</SUB>> ]
"68719476750" [label = <(IDENTIFIER,request,tmp2 = request.args)<SUB>6</SUB>> ]
"55834574852" [label = <(FIELD_IDENTIFIER,args,args)<SUB>6</SUB>> ]
"30064771089" [label = <(get,tmp2.get('userid', None))<SUB>6</SUB>> ]
"30064771088" [label = <(&lt;operator&gt;.fieldAccess,tmp2.get)<SUB>6</SUB>> ]
"68719476752" [label = <(IDENTIFIER,tmp2,tmp2.get('userid', None))<SUB>6</SUB>> ]
"55834574853" [label = <(FIELD_IDENTIFIER,get,get)<SUB>6</SUB>> ]
"68719476753" [label = <(IDENTIFIER,tmp2,tmp2.get('userid', None))<SUB>6</SUB>> ]
"90194313222" [label = <(LITERAL,'userid',tmp2.get('userid', None))<SUB>6</SUB>> ]
"90194313223" [label = <(LITERAL,None,tmp2.get('userid', None))<SUB>6</SUB>> ]
"30064771219" [label = <(&lt;operator&gt;.assignment,observation_script = &quot;&quot;&quot;
    &lt;script&gt;
      var...)<SUB>7</SUB>> ]
"68719476841" [label = <(IDENTIFIER,observation_script,observation_script = &quot;&quot;&quot;
    &lt;script&gt;
      var...)<SUB>7</SUB>> ]
"30064771218" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771217" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771215" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771214" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771210" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771209" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771206" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771205" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771204" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771203" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771202" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771201" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771198" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771197" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771194" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771193" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771190" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771189" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771185" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771184" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771180" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771179" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771178" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771176" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771175" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771174" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771170" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771169" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771166" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771165" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771162" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771161" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771157" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771156" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771153" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771152" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771149" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771148" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771146" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771145" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771143" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771142" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771138" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771137" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771134" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771133" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771130" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771129" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771125" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771124" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771121" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771120" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771117" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771116" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771113" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771112" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771109" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771108" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771105" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771104" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771100" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771099" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771095" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771094" [label = <(&lt;operator&gt;.addition,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"90194313224" [label = <(LITERAL,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>7</SUB>> ]
"30064771093" [label = <(dumps,json.dumps(generate_csrf()))<SUB>23</SUB>> ]
"30064771092" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>23</SUB>> ]
"68719476756" [label = <(IDENTIFIER,json,json.dumps(generate_csrf()))<SUB>23</SUB>> ]
"55834574854" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>23</SUB>> ]
"68719476757" [label = <(IDENTIFIER,json,json.dumps(generate_csrf()))<SUB>23</SUB>> ]
"30064771091" [label = <(generate_csrf,generate_csrf())<SUB>23</SUB>> ]
"68719476755" [label = <(IDENTIFIER,generate_csrf,generate_csrf())<SUB>23</SUB>> ]
"90194313225" [label = <(LITERAL,&quot;&quot;&quot;;
      var daShowIfInProcess = false;
     ...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>23</SUB>> ]
"30064771098" [label = <(dumps,json.dumps(url_for('index', i = i)))<SUB>35</SUB>> ]
"30064771097" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>35</SUB>> ]
"68719476760" [label = <(IDENTIFIER,json,json.dumps(url_for('index', i = i)))<SUB>35</SUB>> ]
"55834574855" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>35</SUB>> ]
"68719476761" [label = <(IDENTIFIER,json,json.dumps(url_for('index', i = i)))<SUB>35</SUB>> ]
"30064771096" [label = <(url_for,url_for('index', i = i))<SUB>35</SUB>> ]
"68719476759" [label = <(IDENTIFIER,url_for,url_for('index', i = i))<SUB>35</SUB>> ]
"90194313226" [label = <(LITERAL,'index',url_for('index', i = i))<SUB>35</SUB>> ]
"68719476758" [label = <(IDENTIFIER,i,url_for('index', i = i))<SUB>35</SUB>> ]
"90194313227" [label = <(LITERAL,&quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot;,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>35</SUB>> ]
"30064771103" [label = <(dumps,json.dumps(url_for('index', i = i, _external = ...)<SUB>36</SUB>> ]
"30064771102" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>36</SUB>> ]
"68719476764" [label = <(IDENTIFIER,json,json.dumps(url_for('index', i = i, _external = ...)<SUB>36</SUB>> ]
"55834574856" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>36</SUB>> ]
"68719476765" [label = <(IDENTIFIER,json,json.dumps(url_for('index', i = i, _external = ...)<SUB>36</SUB>> ]
"30064771101" [label = <(url_for,url_for('index', i = i, _external = True))<SUB>36</SUB>> ]
"68719476763" [label = <(IDENTIFIER,url_for,url_for('index', i = i, _external = True))<SUB>36</SUB>> ]
"90194313228" [label = <(LITERAL,'index',url_for('index', i = i, _external = True))<SUB>36</SUB>> ]
"68719476762" [label = <(IDENTIFIER,i,url_for('index', i = i, _external = True))<SUB>36</SUB>> ]
"90194313229" [label = <(LITERAL,True,url_for('index', i = i, _external = True))<SUB>36</SUB>> ]
"90194313230" [label = <(LITERAL,&quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot;,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>36</SUB>> ]
"30064771107" [label = <(dumps,json.dumps(i))<SUB>37</SUB>> ]
"30064771106" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>37</SUB>> ]
"68719476767" [label = <(IDENTIFIER,json,json.dumps(i))<SUB>37</SUB>> ]
"55834574857" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>37</SUB>> ]
"68719476768" [label = <(IDENTIFIER,json,json.dumps(i))<SUB>37</SUB>> ]
"68719476766" [label = <(IDENTIFIER,i,json.dumps(i))<SUB>37</SUB>> ]
"90194313231" [label = <(LITERAL,&quot;&quot;&quot;;
      var daGlobalEval = eval;
      var d...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>37</SUB>> ]
"30064771111" [label = <(dumps,json.dumps(NOTIFICATION_CONTAINER))<SUB>147</SUB>> ]
"30064771110" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>147</SUB>> ]
"68719476770" [label = <(IDENTIFIER,json,json.dumps(NOTIFICATION_CONTAINER))<SUB>147</SUB>> ]
"55834574858" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>147</SUB>> ]
"68719476771" [label = <(IDENTIFIER,json,json.dumps(NOTIFICATION_CONTAINER))<SUB>147</SUB>> ]
"68719476769" [label = <(IDENTIFIER,NOTIFICATION_CONTAINER,json.dumps(NOTIFICATION_CONTAINER))<SUB>147</SUB>> ]
"90194313232" [label = <(LITERAL,&quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot;,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>147</SUB>> ]
"30064771115" [label = <(dumps,json.dumps(NOTIFICATION_MESSAGE))<SUB>148</SUB>> ]
"30064771114" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>148</SUB>> ]
"68719476773" [label = <(IDENTIFIER,json,json.dumps(NOTIFICATION_MESSAGE))<SUB>148</SUB>> ]
"55834574859" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>148</SUB>> ]
"68719476774" [label = <(IDENTIFIER,json,json.dumps(NOTIFICATION_MESSAGE))<SUB>148</SUB>> ]
"68719476772" [label = <(IDENTIFIER,NOTIFICATION_MESSAGE,json.dumps(NOTIFICATION_MESSAGE))<SUB>148</SUB>> ]
"90194313233" [label = <(LITERAL,&quot;&quot;&quot;;
      Object.defineProperty(String.prototy...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>148</SUB>> ]
"30064771119" [label = <(dumps,json.dumps(uid))<SUB>633</SUB>> ]
"30064771118" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>633</SUB>> ]
"68719476776" [label = <(IDENTIFIER,json,json.dumps(uid))<SUB>633</SUB>> ]
"55834574860" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>633</SUB>> ]
"68719476777" [label = <(IDENTIFIER,json,json.dumps(uid))<SUB>633</SUB>> ]
"68719476775" [label = <(IDENTIFIER,uid,json.dumps(uid))<SUB>633</SUB>> ]
"90194313234" [label = <(LITERAL,&quot;&quot;&quot;, i: &quot;&quot;&quot;,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>633</SUB>> ]
"30064771123" [label = <(dumps,json.dumps(i))<SUB>633</SUB>> ]
"30064771122" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>633</SUB>> ]
"68719476779" [label = <(IDENTIFIER,json,json.dumps(i))<SUB>633</SUB>> ]
"55834574861" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>633</SUB>> ]
"68719476780" [label = <(IDENTIFIER,json,json.dumps(i))<SUB>633</SUB>> ]
"68719476778" [label = <(IDENTIFIER,i,json.dumps(i))<SUB>633</SUB>> ]
"90194313235" [label = <(LITERAL,&quot;&quot;&quot;, userid: &quot;&quot;&quot;,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>633</SUB>> ]
"30064771128" [label = <(dumps,json.dumps(str(userid)))<SUB>633</SUB>> ]
"30064771127" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>633</SUB>> ]
"68719476783" [label = <(IDENTIFIER,json,json.dumps(str(userid)))<SUB>633</SUB>> ]
"55834574862" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>633</SUB>> ]
"68719476784" [label = <(IDENTIFIER,json,json.dumps(str(userid)))<SUB>633</SUB>> ]
"30064771126" [label = <(str,str(userid))<SUB>633</SUB>> ]
"68719476782" [label = <(IDENTIFIER,str,str(userid))<SUB>633</SUB>> ]
"68719476781" [label = <(IDENTIFIER,userid,str(userid))<SUB>633</SUB>> ]
"90194313236" [label = <(LITERAL,&quot;&quot;&quot;});
      }
      window.daTurnOffControl = ...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>633</SUB>> ]
"30064771132" [label = <(dumps,json.dumps(uid))<SUB>644</SUB>> ]
"30064771131" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>644</SUB>> ]
"68719476786" [label = <(IDENTIFIER,json,json.dumps(uid))<SUB>644</SUB>> ]
"55834574863" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>644</SUB>> ]
"68719476787" [label = <(IDENTIFIER,json,json.dumps(uid))<SUB>644</SUB>> ]
"68719476785" [label = <(IDENTIFIER,uid,json.dumps(uid))<SUB>644</SUB>> ]
"90194313237" [label = <(LITERAL,&quot;&quot;&quot;, i: &quot;&quot;&quot;,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>644</SUB>> ]
"30064771136" [label = <(dumps,json.dumps(i))<SUB>644</SUB>> ]
"30064771135" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>644</SUB>> ]
"68719476789" [label = <(IDENTIFIER,json,json.dumps(i))<SUB>644</SUB>> ]
"55834574864" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>644</SUB>> ]
"68719476790" [label = <(IDENTIFIER,json,json.dumps(i))<SUB>644</SUB>> ]
"68719476788" [label = <(IDENTIFIER,i,json.dumps(i))<SUB>644</SUB>> ]
"90194313238" [label = <(LITERAL,&quot;&quot;&quot;, userid: &quot;&quot;&quot;,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>644</SUB>> ]
"30064771141" [label = <(dumps,json.dumps(str(userid)))<SUB>644</SUB>> ]
"30064771140" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>644</SUB>> ]
"68719476793" [label = <(IDENTIFIER,json,json.dumps(str(userid)))<SUB>644</SUB>> ]
"55834574865" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>644</SUB>> ]
"68719476794" [label = <(IDENTIFIER,json,json.dumps(str(userid)))<SUB>644</SUB>> ]
"30064771139" [label = <(str,str(userid))<SUB>644</SUB>> ]
"68719476792" [label = <(IDENTIFIER,str,str(userid))<SUB>644</SUB>> ]
"68719476791" [label = <(IDENTIFIER,userid,str(userid))<SUB>644</SUB>> ]
"90194313239" [label = <(LITERAL,&quot;&quot;&quot;});
        return;
      }
      function d...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>644</SUB>> ]
"30064771144" [label = <(str,str(CHECKIN_INTERVAL))<SUB>694</SUB>> ]
"68719476796" [label = <(IDENTIFIER,str,str(CHECKIN_INTERVAL))<SUB>694</SUB>> ]
"68719476795" [label = <(IDENTIFIER,CHECKIN_INTERVAL,str(CHECKIN_INTERVAL))<SUB>694</SUB>> ]
"90194313240" [label = <(LITERAL,&quot;&quot;&quot;);
      }
      function daOnChange(){
    ...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>694</SUB>> ]
"30064771147" [label = <(str,str(CHECKIN_INTERVAL))<SUB>706</SUB>> ]
"68719476798" [label = <(IDENTIFIER,str,str(CHECKIN_INTERVAL))<SUB>706</SUB>> ]
"68719476797" [label = <(IDENTIFIER,CHECKIN_INTERVAL,str(CHECKIN_INTERVAL))<SUB>706</SUB>> ]
"90194313241" [label = <(LITERAL,&quot;&quot;&quot;);
        daSocket.emit('observerChanges', ...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>706</SUB>> ]
"30064771151" [label = <(dumps,json.dumps(uid))<SUB>707</SUB>> ]
"30064771150" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>707</SUB>> ]
"68719476800" [label = <(IDENTIFIER,json,json.dumps(uid))<SUB>707</SUB>> ]
"55834574866" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>707</SUB>> ]
"68719476801" [label = <(IDENTIFIER,json,json.dumps(uid))<SUB>707</SUB>> ]
"68719476799" [label = <(IDENTIFIER,uid,json.dumps(uid))<SUB>707</SUB>> ]
"90194313242" [label = <(LITERAL,&quot;&quot;&quot;, i: &quot;&quot;&quot;,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>707</SUB>> ]
"30064771155" [label = <(dumps,json.dumps(i))<SUB>707</SUB>> ]
"30064771154" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>707</SUB>> ]
"68719476803" [label = <(IDENTIFIER,json,json.dumps(i))<SUB>707</SUB>> ]
"55834574867" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>707</SUB>> ]
"68719476804" [label = <(IDENTIFIER,json,json.dumps(i))<SUB>707</SUB>> ]
"68719476802" [label = <(IDENTIFIER,i,json.dumps(i))<SUB>707</SUB>> ]
"90194313243" [label = <(LITERAL,&quot;&quot;&quot;, userid: &quot;&quot;&quot;,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>707</SUB>> ]
"30064771160" [label = <(dumps,json.dumps(str(userid)))<SUB>707</SUB>> ]
"30064771159" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>707</SUB>> ]
"68719476807" [label = <(IDENTIFIER,json,json.dumps(str(userid)))<SUB>707</SUB>> ]
"55834574868" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>707</SUB>> ]
"68719476808" [label = <(IDENTIFIER,json,json.dumps(str(userid)))<SUB>707</SUB>> ]
"30064771158" [label = <(str,str(userid))<SUB>707</SUB>> ]
"68719476806" [label = <(IDENTIFIER,str,str(userid))<SUB>707</SUB>> ]
"68719476805" [label = <(IDENTIFIER,userid,str(userid))<SUB>707</SUB>> ]
"90194313244" [label = <(LITERAL,&quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).se...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>707</SUB>> ]
"30064771164" [label = <(dumps,json.dumps(uid))<SUB>783</SUB>> ]
"30064771163" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>783</SUB>> ]
"68719476810" [label = <(IDENTIFIER,json,json.dumps(uid))<SUB>783</SUB>> ]
"55834574869" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>783</SUB>> ]
"68719476811" [label = <(IDENTIFIER,json,json.dumps(uid))<SUB>783</SUB>> ]
"68719476809" [label = <(IDENTIFIER,uid,json.dumps(uid))<SUB>783</SUB>> ]
"90194313245" [label = <(LITERAL,&quot;&quot;&quot;, i: &quot;&quot;&quot;,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>783</SUB>> ]
"30064771168" [label = <(dumps,json.dumps(i))<SUB>783</SUB>> ]
"30064771167" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>783</SUB>> ]
"68719476813" [label = <(IDENTIFIER,json,json.dumps(i))<SUB>783</SUB>> ]
"55834574870" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>783</SUB>> ]
"68719476814" [label = <(IDENTIFIER,json,json.dumps(i))<SUB>783</SUB>> ]
"68719476812" [label = <(IDENTIFIER,i,json.dumps(i))<SUB>783</SUB>> ]
"90194313246" [label = <(LITERAL,&quot;&quot;&quot;, userid: &quot;&quot;&quot;,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>783</SUB>> ]
"30064771173" [label = <(dumps,json.dumps(str(userid)))<SUB>783</SUB>> ]
"30064771172" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>783</SUB>> ]
"68719476817" [label = <(IDENTIFIER,json,json.dumps(str(userid)))<SUB>783</SUB>> ]
"55834574871" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>783</SUB>> ]
"68719476818" [label = <(IDENTIFIER,json,json.dumps(str(userid)))<SUB>783</SUB>> ]
"30064771171" [label = <(str,str(userid))<SUB>783</SUB>> ]
"68719476816" [label = <(IDENTIFIER,str,str(userid))<SUB>783</SUB>> ]
"68719476815" [label = <(IDENTIFIER,userid,str(userid))<SUB>783</SUB>> ]
"90194313247" [label = <(LITERAL,&quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify(...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>783</SUB>> ]
"90194313248" [label = <(LITERAL,'&quot;',&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>956</SUB>> ]
"30064771177" [label = <(url_for,url_for('get_variables', i = i))<SUB>956</SUB>> ]
"68719476820" [label = <(IDENTIFIER,url_for,url_for('get_variables', i = i))<SUB>956</SUB>> ]
"90194313249" [label = <(LITERAL,'get_variables',url_for('get_variables', i = i))<SUB>956</SUB>> ]
"68719476819" [label = <(IDENTIFIER,i,url_for('get_variables', i = i))<SUB>956</SUB>> ]
"90194313250" [label = <(LITERAL,'&quot;',&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>956</SUB>> ]
"90194313251" [label = <(LITERAL,&quot;&quot;&quot;,
          success: callback,
          err...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>956</SUB>> ]
"30064771183" [label = <(str,str(daconfig.get('currency decimal places', 2)))<SUB>1123</SUB>> ]
"68719476823" [label = <(IDENTIFIER,str,str(daconfig.get('currency decimal places', 2)))<SUB>1123</SUB>> ]
"30064771182" [label = <(get,daconfig.get('currency decimal places', 2))<SUB>1123</SUB>> ]
"30064771181" [label = <(&lt;operator&gt;.fieldAccess,daconfig.get)<SUB>1123</SUB>> ]
"68719476821" [label = <(IDENTIFIER,daconfig,daconfig.get('currency decimal places', 2))<SUB>1123</SUB>> ]
"55834574872" [label = <(FIELD_IDENTIFIER,get,get)<SUB>1123</SUB>> ]
"68719476822" [label = <(IDENTIFIER,daconfig,daconfig.get('currency decimal places', 2))<SUB>1123</SUB>> ]
"90194313252" [label = <(LITERAL,'currency decimal places',daconfig.get('currency decimal places', 2))<SUB>1123</SUB>> ]
"90194313253" [label = <(LITERAL,2,daconfig.get('currency decimal places', 2))<SUB>1123</SUB>> ]
"90194313254" [label = <(LITERAL,&quot;&quot;&quot;);
            $(this).val(cleanNum);
      ...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>1123</SUB>> ]
"30064771188" [label = <(str,str(daconfig.get('currency decimal places', 2)))<SUB>1131</SUB>> ]
"68719476826" [label = <(IDENTIFIER,str,str(daconfig.get('currency decimal places', 2)))<SUB>1131</SUB>> ]
"30064771187" [label = <(get,daconfig.get('currency decimal places', 2))<SUB>1131</SUB>> ]
"30064771186" [label = <(&lt;operator&gt;.fieldAccess,daconfig.get)<SUB>1131</SUB>> ]
"68719476824" [label = <(IDENTIFIER,daconfig,daconfig.get('currency decimal places', 2))<SUB>1131</SUB>> ]
"55834574873" [label = <(FIELD_IDENTIFIER,get,get)<SUB>1131</SUB>> ]
"68719476825" [label = <(IDENTIFIER,daconfig,daconfig.get('currency decimal places', 2))<SUB>1131</SUB>> ]
"90194313255" [label = <(LITERAL,'currency decimal places',daconfig.get('currency decimal places', 2))<SUB>1131</SUB>> ]
"90194313256" [label = <(LITERAL,2,daconfig.get('currency decimal places', 2))<SUB>1131</SUB>> ]
"90194313257" [label = <(LITERAL,&quot;&quot;&quot;);
            if (cleanNum != 'NaN') {
    ...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>1131</SUB>> ]
"30064771192" [label = <(&lt;operator&gt;.indexAccess,app.config['BUTTON_STYLE'])<SUB>1534</SUB>> ]
"30064771191" [label = <(&lt;operator&gt;.fieldAccess,app.config)<SUB>1534</SUB>> ]
"68719476827" [label = <(IDENTIFIER,app,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>1534</SUB>> ]
"55834574874" [label = <(FIELD_IDENTIFIER,config,config)<SUB>1534</SUB>> ]
"90194313258" [label = <(LITERAL,'BUTTON_STYLE',&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>1534</SUB>> ]
"90194313259" [label = <(LITERAL,&quot;&quot;&quot;secondary');
              if ($(the_a).hasC...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>1534</SUB>> ]
"30064771196" [label = <(&lt;operator&gt;.indexAccess,app.config['BUTTON_STYLE'])<SUB>1536</SUB>> ]
"30064771195" [label = <(&lt;operator&gt;.fieldAccess,app.config)<SUB>1536</SUB>> ]
"68719476828" [label = <(IDENTIFIER,app,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>1536</SUB>> ]
"55834574875" [label = <(FIELD_IDENTIFIER,config,config)<SUB>1536</SUB>> ]
"90194313260" [label = <(LITERAL,'BUTTON_STYLE',&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>1536</SUB>> ]
"90194313261" [label = <(LITERAL,&quot;&quot;&quot;success');
              }
              els...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>1536</SUB>> ]
"30064771200" [label = <(&lt;operator&gt;.indexAccess,app.config['BUTTON_STYLE'])<SUB>1539</SUB>> ]
"30064771199" [label = <(&lt;operator&gt;.fieldAccess,app.config)<SUB>1539</SUB>> ]
"68719476829" [label = <(IDENTIFIER,app,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>1539</SUB>> ]
"55834574876" [label = <(FIELD_IDENTIFIER,config,config)<SUB>1539</SUB>> ]
"90194313262" [label = <(LITERAL,'BUTTON_STYLE',&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>1539</SUB>> ]
"90194313263" [label = <(LITERAL,&quot;&quot;&quot;warning');
              }
            }, th...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>1539</SUB>> ]
"68719476830" [label = <(IDENTIFIER,ROOT,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>1572</SUB>> ]
"90194313264" [label = <(LITERAL,&quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename}...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>1572</SUB>> ]
"68719476831" [label = <(IDENTIFIER,ROOT,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>1575</SUB>> ]
"90194313265" [label = <(LITERAL,&quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename}...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>1575</SUB>> ]
"30064771208" [label = <(dumps,json.dumps(uid))<SUB>1580</SUB>> ]
"30064771207" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>1580</SUB>> ]
"68719476833" [label = <(IDENTIFIER,json,json.dumps(uid))<SUB>1580</SUB>> ]
"55834574877" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>1580</SUB>> ]
"68719476834" [label = <(IDENTIFIER,json,json.dumps(uid))<SUB>1580</SUB>> ]
"68719476832" [label = <(IDENTIFIER,uid,json.dumps(uid))<SUB>1580</SUB>> ]
"90194313266" [label = <(LITERAL,&quot;&quot;&quot;, i: daYamlFilename, userid: &quot;&quot;&quot;,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>1580</SUB>> ]
"30064771213" [label = <(dumps,json.dumps(str(userid)))<SUB>1580</SUB>> ]
"30064771212" [label = <(&lt;operator&gt;.fieldAccess,json.dumps)<SUB>1580</SUB>> ]
"68719476837" [label = <(IDENTIFIER,json,json.dumps(str(userid)))<SUB>1580</SUB>> ]
"55834574878" [label = <(FIELD_IDENTIFIER,dumps,dumps)<SUB>1580</SUB>> ]
"68719476838" [label = <(IDENTIFIER,json,json.dumps(str(userid)))<SUB>1580</SUB>> ]
"30064771211" [label = <(str,str(userid))<SUB>1580</SUB>> ]
"68719476836" [label = <(IDENTIFIER,str,str(userid))<SUB>1580</SUB>> ]
"68719476835" [label = <(IDENTIFIER,userid,str(userid))<SUB>1580</SUB>> ]
"90194313267" [label = <(LITERAL,&quot;&quot;&quot;});
                daConnected = true;
    ...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>1580</SUB>> ]
"30064771216" [label = <(str,str(CHECKIN_INTERVAL))<SUB>1703</SUB>> ]
"68719476840" [label = <(IDENTIFIER,str,str(CHECKIN_INTERVAL))<SUB>1703</SUB>> ]
"68719476839" [label = <(IDENTIFIER,CHECKIN_INTERVAL,str(CHECKIN_INTERVAL))<SUB>1703</SUB>> ]
"90194313268" [label = <(LITERAL,&quot;&quot;&quot;);
        $(document).trigger('daPageLoad')...,&quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android...)<SUB>1703</SUB>> ]
"30064771228" [label = <(&lt;operator&gt;.assignment,the_key = 'da:html:uid:' + str(uid) + ':i:' + s...)<SUB>1708</SUB>> ]
"68719476848" [label = <(IDENTIFIER,the_key,the_key = 'da:html:uid:' + str(uid) + ':i:' + s...)<SUB>1708</SUB>> ]
"30064771227" [label = <(&lt;operator&gt;.addition,'da:html:uid:' + str(uid) + ':i:' + str(i) + ':...)<SUB>1708</SUB>> ]
"30064771225" [label = <(&lt;operator&gt;.addition,'da:html:uid:' + str(uid) + ':i:' + str(i) + ':...)<SUB>1708</SUB>> ]
"30064771224" [label = <(&lt;operator&gt;.addition,'da:html:uid:' + str(uid) + ':i:' + str(i))<SUB>1708</SUB>> ]
"30064771222" [label = <(&lt;operator&gt;.addition,'da:html:uid:' + str(uid) + ':i:')<SUB>1708</SUB>> ]
"30064771221" [label = <(&lt;operator&gt;.addition,'da:html:uid:' + str(uid))<SUB>1708</SUB>> ]
"90194313269" [label = <(LITERAL,'da:html:uid:','da:html:uid:' + str(uid))<SUB>1708</SUB>> ]
"30064771220" [label = <(str,str(uid))<SUB>1708</SUB>> ]
"68719476843" [label = <(IDENTIFIER,str,str(uid))<SUB>1708</SUB>> ]
"68719476842" [label = <(IDENTIFIER,uid,str(uid))<SUB>1708</SUB>> ]
"90194313270" [label = <(LITERAL,':i:','da:html:uid:' + str(uid) + ':i:')<SUB>1708</SUB>> ]
"30064771223" [label = <(str,str(i))<SUB>1708</SUB>> ]
"68719476845" [label = <(IDENTIFIER,str,str(i))<SUB>1708</SUB>> ]
"68719476844" [label = <(IDENTIFIER,i,str(i))<SUB>1708</SUB>> ]
"90194313271" [label = <(LITERAL,':userid:','da:html:uid:' + str(uid) + ':i:' + str(i) + ':...)<SUB>1708</SUB>> ]
"30064771226" [label = <(str,str(userid))<SUB>1708</SUB>> ]
"68719476847" [label = <(IDENTIFIER,str,str(userid))<SUB>1708</SUB>> ]
"68719476846" [label = <(IDENTIFIER,userid,str(userid))<SUB>1708</SUB>> ]
"30064771231" [label = <(&lt;operator&gt;.assignment,html = r.get(the_key))<SUB>1709</SUB>> ]
"68719476852" [label = <(IDENTIFIER,html,html = r.get(the_key))<SUB>1709</SUB>> ]
"30064771230" [label = <(get,r.get(the_key))<SUB>1709</SUB>> ]
"30064771229" [label = <(&lt;operator&gt;.fieldAccess,r.get)<SUB>1709</SUB>> ]
"68719476850" [label = <(IDENTIFIER,r,r.get(the_key))<SUB>1709</SUB>> ]
"55834574879" [label = <(FIELD_IDENTIFIER,get,get)<SUB>1709</SUB>> ]
"68719476851" [label = <(IDENTIFIER,r,r.get(the_key))<SUB>1709</SUB>> ]
"68719476849" [label = <(IDENTIFIER,the_key,r.get(the_key))<SUB>1709</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,IF,if ... : ...)<SUB>1710</SUB>> ]
"30064771232" [label = <(&lt;operator&gt;.isNot,html is not None)<SUB>1710</SUB>> ]
"68719476853" [label = <(IDENTIFIER,html,html is not None)<SUB>1710</SUB>> ]
"90194313272" [label = <(LITERAL,None,html is not None)<SUB>1710</SUB>> ]
"25769803781" [label = <(BLOCK,obj = json.loads(html.decode()),obj = json.loads(html.decode()))<SUB>1710</SUB>> ]
"30064771237" [label = <(&lt;operator&gt;.assignment,obj = json.loads(html.decode()))<SUB>1711</SUB>> ]
"68719476858" [label = <(IDENTIFIER,obj,obj = json.loads(html.decode()))<SUB>1711</SUB>> ]
"30064771236" [label = <(loads,json.loads(html.decode()))<SUB>1711</SUB>> ]
"30064771235" [label = <(&lt;operator&gt;.fieldAccess,json.loads)<SUB>1711</SUB>> ]
"68719476856" [label = <(IDENTIFIER,json,json.loads(html.decode()))<SUB>1711</SUB>> ]
"55834574881" [label = <(FIELD_IDENTIFIER,loads,loads)<SUB>1711</SUB>> ]
"68719476857" [label = <(IDENTIFIER,json,json.loads(html.decode()))<SUB>1711</SUB>> ]
"30064771234" [label = <(decode,html.decode())<SUB>1711</SUB>> ]
"30064771233" [label = <(&lt;operator&gt;.fieldAccess,html.decode)<SUB>1711</SUB>> ]
"68719476854" [label = <(IDENTIFIER,html,html.decode())<SUB>1711</SUB>> ]
"55834574880" [label = <(FIELD_IDENTIFIER,decode,decode)<SUB>1711</SUB>> ]
"68719476855" [label = <(IDENTIFIER,html,html.decode())<SUB>1711</SUB>> ]
"25769803783" [label = <(BLOCK,logmessage(&quot;observer: failed to load JSON from ...,logmessage(&quot;observer: failed to load JSON from ...)<SUB>1713</SUB>> ]
"30064771239" [label = <(logmessage,logmessage(&quot;observer: failed to load JSON from ...)<SUB>1713</SUB>> ]
"68719476860" [label = <(IDENTIFIER,logmessage,logmessage(&quot;observer: failed to load JSON from ...)<SUB>1713</SUB>> ]
"30064771238" [label = <(&lt;operator&gt;.addition,&quot;observer: failed to load JSON from key &quot; + the...)<SUB>1713</SUB>> ]
"90194313273" [label = <(LITERAL,&quot;observer: failed to load JSON from key &quot;,&quot;observer: failed to load JSON from key &quot; + the...)<SUB>1713</SUB>> ]
"68719476859" [label = <(IDENTIFIER,the_key,&quot;observer: failed to load JSON from key &quot; + the...)<SUB>1713</SUB>> ]
"30064771242" [label = <(&lt;operator&gt;.assignment,obj = tmp3 = {}
tmp3)<SUB>1714</SUB>> ]
"68719476863" [label = <(IDENTIFIER,obj,obj = tmp3 = {}
tmp3)<SUB>1714</SUB>> ]
"25769803782" [label = <(BLOCK,tmp3 = {}
tmp3,tmp3 = {}
tmp3)<SUB>1714</SUB>> ]
"30064771241" [label = <(&lt;operator&gt;.assignment,tmp3 = {})<SUB>1714</SUB>> ]
"68719476861" [label = <(IDENTIFIER,tmp3,tmp3 = {})<SUB>1714</SUB>> ]
"30064771240" [label = <(&lt;operator&gt;.dictLiteral,{})<SUB>1714</SUB>> ]
"68719476862" [label = <(IDENTIFIER,tmp3,tmp3 = {}
tmp3)<SUB>1714</SUB>> ]
"30064771244" [label = <(&lt;operator&gt;.assignment,page_title = word('Observation'))<SUB>1715</SUB>> ]
"68719476865" [label = <(IDENTIFIER,page_title,page_title = word('Observation'))<SUB>1715</SUB>> ]
"30064771243" [label = <(word,word('Observation'))<SUB>1715</SUB>> ]
"68719476864" [label = <(IDENTIFIER,word,word('Observation'))<SUB>1715</SUB>> ]
"90194313274" [label = <(LITERAL,'Observation',word('Observation'))<SUB>1715</SUB>> ]
"30064771250" [label = <(&lt;operator&gt;.assignment,output = standard_html_start(interview_language...)<SUB>1716</SUB>> ]
"68719476872" [label = <(IDENTIFIER,output,output = standard_html_start(interview_language...)<SUB>1716</SUB>> ]
"30064771249" [label = <(standard_html_start,standard_html_start(interview_language = obj.ge...)<SUB>1716</SUB>> ]
"68719476871" [label = <(IDENTIFIER,standard_html_start,standard_html_start(interview_language = obj.ge...)<SUB>1716</SUB>> ]
"30064771246" [label = <(get,obj.get('lang', 'en'))<SUB>1716</SUB>> ]
"30064771245" [label = <(&lt;operator&gt;.fieldAccess,obj.get)<SUB>1716</SUB>> ]
"68719476866" [label = <(IDENTIFIER,obj,obj.get('lang', 'en'))<SUB>1716</SUB>> ]
"55834574882" [label = <(FIELD_IDENTIFIER,get,get)<SUB>1716</SUB>> ]
"68719476867" [label = <(IDENTIFIER,obj,obj.get('lang', 'en'))<SUB>1716</SUB>> ]
"90194313275" [label = <(LITERAL,'lang',obj.get('lang', 'en'))<SUB>1716</SUB>> ]
"90194313276" [label = <(LITERAL,'en',obj.get('lang', 'en'))<SUB>1716</SUB>> ]
"68719476868" [label = <(IDENTIFIER,DEBUG,standard_html_start(interview_language = obj.ge...)<SUB>1716</SUB>> ]
"30064771248" [label = <(get,obj.get('bootstrap_theme', None))<SUB>1716</SUB>> ]
"30064771247" [label = <(&lt;operator&gt;.fieldAccess,obj.get)<SUB>1716</SUB>> ]
"68719476869" [label = <(IDENTIFIER,obj,obj.get('bootstrap_theme', None))<SUB>1716</SUB>> ]
"55834574883" [label = <(FIELD_IDENTIFIER,get,get)<SUB>1716</SUB>> ]
"68719476870" [label = <(IDENTIFIER,obj,obj.get('bootstrap_theme', None))<SUB>1716</SUB>> ]
"90194313277" [label = <(LITERAL,'bootstrap_theme',obj.get('bootstrap_theme', None))<SUB>1716</SUB>> ]
"90194313278" [label = <(LITERAL,None,obj.get('bootstrap_theme', None))<SUB>1716</SUB>> ]
"30064771262" [label = <(&lt;operator&gt;.assignmentPlus,output += obj.get('global_css', '') + &quot;\n&quot; + in...)<SUB>1717</SUB>> ]
"68719476873" [label = <(IDENTIFIER,output,output += obj.get('global_css', '') + &quot;\n&quot; + in...)<SUB>1717</SUB>> ]
"30064771261" [label = <(&lt;operator&gt;.addition,obj.get('global_css', '') + &quot;\n&quot; + indent_by(tm...)<SUB>1717</SUB>> ]
"30064771253" [label = <(&lt;operator&gt;.addition,obj.get('global_css', '') + &quot;\n&quot;)<SUB>1717</SUB>> ]
"30064771252" [label = <(get,obj.get('global_css', ''))<SUB>1717</SUB>> ]
"30064771251" [label = <(&lt;operator&gt;.fieldAccess,obj.get)<SUB>1717</SUB>> ]
"68719476874" [label = <(IDENTIFIER,obj,obj.get('global_css', ''))<SUB>1717</SUB>> ]
"55834574884" [label = <(FIELD_IDENTIFIER,get,get)<SUB>1717</SUB>> ]
"68719476875" [label = <(IDENTIFIER,obj,obj.get('global_css', ''))<SUB>1717</SUB>> ]
"90194313279" [label = <(LITERAL,'global_css',obj.get('global_css', ''))<SUB>1717</SUB>> ]
"90194313280" [label = <(LITERAL,'',obj.get('global_css', ''))<SUB>1717</SUB>> ]
"90194313281" [label = <(LITERAL,&quot;\n&quot;,obj.get('global_css', '') + &quot;\n&quot;)<SUB>1717</SUB>> ]
"30064771260" [label = <(indent_by,indent_by(tmp4 = &quot;&quot;
tmp4.join(obj.get('extra_cs...)<SUB>1717</SUB>> ]
"68719476881" [label = <(IDENTIFIER,indent_by,indent_by(tmp4 = &quot;&quot;
tmp4.join(obj.get('extra_cs...)<SUB>1717</SUB>> ]
"25769803784" [label = <(BLOCK,tmp4 = &quot;&quot;
tmp4.join(obj.get('extra_css', [])),tmp4 = &quot;&quot;
tmp4.join(obj.get('extra_css', [])))<SUB>1717</SUB>> ]
"30064771257" [label = <(&lt;operator&gt;.assignment,tmp4 = &quot;&quot;)<SUB>1717</SUB>> ]
"68719476878" [label = <(IDENTIFIER,tmp4,tmp4 = &quot;&quot;)<SUB>1717</SUB>> ]
"90194313283" [label = <(LITERAL,&quot;&quot;,tmp4 = &quot;&quot;)<SUB>1717</SUB>> ]
"30064771259" [label = <(join,tmp4.join(obj.get('extra_css', [])))<SUB>1717</SUB>> ]
"30064771258" [label = <(&lt;operator&gt;.fieldAccess,tmp4.join)<SUB>1717</SUB>> ]
"68719476879" [label = <(IDENTIFIER,tmp4,tmp4.join(obj.get('extra_css', [])))<SUB>1717</SUB>> ]
"55834574886" [label = <(FIELD_IDENTIFIER,join,join)<SUB>1717</SUB>> ]
"68719476880" [label = <(IDENTIFIER,tmp4,tmp4.join(obj.get('extra_css', [])))<SUB>1717</SUB>> ]
"30064771256" [label = <(get,obj.get('extra_css', []))<SUB>1717</SUB>> ]
"30064771255" [label = <(&lt;operator&gt;.fieldAccess,obj.get)<SUB>1717</SUB>> ]
"68719476876" [label = <(IDENTIFIER,obj,obj.get('extra_css', []))<SUB>1717</SUB>> ]
"55834574885" [label = <(FIELD_IDENTIFIER,get,get)<SUB>1717</SUB>> ]
"68719476877" [label = <(IDENTIFIER,obj,obj.get('extra_css', []))<SUB>1717</SUB>> ]
"90194313282" [label = <(LITERAL,'extra_css',obj.get('extra_css', []))<SUB>1717</SUB>> ]
"30064771254" [label = <(&lt;operator&gt;.listLiteral,[])<SUB>1717</SUB>> ]
"90194313284" [label = <(LITERAL,4,indent_by(tmp4 = &quot;&quot;
tmp4.join(obj.get('extra_cs...)<SUB>1717</SUB>> ]
"30064771269" [label = <(&lt;operator&gt;.assignmentPlus,output += '\n    &lt;title&gt;' + page_title + '&lt;/tit...)<SUB>1718</SUB>> ]
"68719476882" [label = <(IDENTIFIER,output,output += '\n    &lt;title&gt;' + page_title + '&lt;/tit...)<SUB>1718</SUB>> ]
"30064771268" [label = <(&lt;operator&gt;.addition,'\n    &lt;title&gt;' + page_title + '&lt;/title&gt;\n  &lt;/h...)<SUB>1718</SUB>> ]
"30064771267" [label = <(&lt;operator&gt;.addition,'\n    &lt;title&gt;' + page_title + '&lt;/title&gt;\n  &lt;/h...)<SUB>1718</SUB>> ]
"30064771264" [label = <(&lt;operator&gt;.addition,'\n    &lt;title&gt;' + page_title + '&lt;/title&gt;\n  &lt;/h...)<SUB>1718</SUB>> ]
"30064771263" [label = <(&lt;operator&gt;.addition,'\n    &lt;title&gt;' + page_title)<SUB>1718</SUB>> ]
"90194313285" [label = <(LITERAL,'\n    &lt;title&gt;','\n    &lt;title&gt;' + page_title)<SUB>1718</SUB>> ]
"68719476883" [label = <(IDENTIFIER,page_title,'\n    &lt;title&gt;' + page_title)<SUB>1718</SUB>> ]
"90194313286" [label = <(LITERAL,'&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body class=&quot;','\n    &lt;title&gt;' + page_title + '&lt;/title&gt;\n  &lt;/h...)<SUB>1718</SUB>> ]
"30064771266" [label = <(get,obj.get('bodyclass', 'dabody da-pad-for-navbar ...)<SUB>1718</SUB>> ]
"30064771265" [label = <(&lt;operator&gt;.fieldAccess,obj.get)<SUB>1718</SUB>> ]
"68719476884" [label = <(IDENTIFIER,obj,obj.get('bodyclass', 'dabody da-pad-for-navbar ...)<SUB>1718</SUB>> ]
"55834574887" [label = <(FIELD_IDENTIFIER,get,get)<SUB>1718</SUB>> ]
"68719476885" [label = <(IDENTIFIER,obj,obj.get('bodyclass', 'dabody da-pad-for-navbar ...)<SUB>1718</SUB>> ]
"90194313287" [label = <(LITERAL,'bodyclass',obj.get('bodyclass', 'dabody da-pad-for-navbar ...)<SUB>1718</SUB>> ]
"90194313288" [label = <(LITERAL,'dabody da-pad-for-navbar da-pad-for-footer',obj.get('bodyclass', 'dabody da-pad-for-navbar ...)<SUB>1718</SUB>> ]
"90194313289" [label = <(LITERAL,'&quot;&gt;\n  &lt;div id=&quot;dabody&quot;&gt;\n  ','\n    &lt;title&gt;' + page_title + '&lt;/title&gt;\n  &lt;/h...)<SUB>1718</SUB>> ]
"30064771272" [label = <(&lt;operator&gt;.assignmentPlus,output += obj.get('body', ''))<SUB>1719</SUB>> ]
"68719476886" [label = <(IDENTIFIER,output,output += obj.get('body', ''))<SUB>1719</SUB>> ]
"30064771271" [label = <(get,obj.get('body', ''))<SUB>1719</SUB>> ]
"30064771270" [label = <(&lt;operator&gt;.fieldAccess,obj.get)<SUB>1719</SUB>> ]
"68719476887" [label = <(IDENTIFIER,obj,obj.get('body', ''))<SUB>1719</SUB>> ]
"55834574888" [label = <(FIELD_IDENTIFIER,get,get)<SUB>1719</SUB>> ]
"68719476888" [label = <(IDENTIFIER,obj,obj.get('body', ''))<SUB>1719</SUB>> ]
"90194313290" [label = <(LITERAL,'body',obj.get('body', ''))<SUB>1719</SUB>> ]
"90194313291" [label = <(LITERAL,'',obj.get('body', ''))<SUB>1719</SUB>> ]
"30064771287" [label = <(&lt;operator&gt;.assignmentPlus,output += &quot;    &lt;/div&gt;\n    &lt;/div&gt;&quot; + standard_s...)<SUB>1720</SUB>> ]
"68719476889" [label = <(IDENTIFIER,output,output += &quot;    &lt;/div&gt;\n    &lt;/div&gt;&quot; + standard_s...)<SUB>1720</SUB>> ]
"30064771286" [label = <(&lt;operator&gt;.addition,&quot;    &lt;/div&gt;\n    &lt;/div&gt;&quot; + standard_scripts(int...)<SUB>1720</SUB>> ]
"30064771285" [label = <(&lt;operator&gt;.addition,&quot;    &lt;/div&gt;\n    &lt;/div&gt;&quot; + standard_scripts(int...)<SUB>1720</SUB>> ]
"30064771278" [label = <(&lt;operator&gt;.addition,&quot;    &lt;/div&gt;\n    &lt;/div&gt;&quot; + standard_scripts(int...)<SUB>1720</SUB>> ]
"30064771277" [label = <(&lt;operator&gt;.addition,&quot;    &lt;/div&gt;\n    &lt;/div&gt;&quot; + standard_scripts(int...)<SUB>1720</SUB>> ]
"30064771276" [label = <(&lt;operator&gt;.addition,&quot;    &lt;/div&gt;\n    &lt;/div&gt;&quot; + standard_scripts(int...)<SUB>1720</SUB>> ]
"90194313292" [label = <(LITERAL,&quot;    &lt;/div&gt;\n    &lt;/div&gt;&quot;,&quot;    &lt;/div&gt;\n    &lt;/div&gt;&quot; + standard_scripts(int...)<SUB>1720</SUB>> ]
"30064771275" [label = <(standard_scripts,standard_scripts(interview_language = obj.get('...)<SUB>1720</SUB>> ]
"68719476892" [label = <(IDENTIFIER,standard_scripts,standard_scripts(interview_language = obj.get('...)<SUB>1720</SUB>> ]
"30064771274" [label = <(get,obj.get('lang', 'en'))<SUB>1720</SUB>> ]
"30064771273" [label = <(&lt;operator&gt;.fieldAccess,obj.get)<SUB>1720</SUB>> ]
"68719476890" [label = <(IDENTIFIER,obj,obj.get('lang', 'en'))<SUB>1720</SUB>> ]
"55834574889" [label = <(FIELD_IDENTIFIER,get,get)<SUB>1720</SUB>> ]
"68719476891" [label = <(IDENTIFIER,obj,obj.get('lang', 'en'))<SUB>1720</SUB>> ]
"90194313293" [label = <(LITERAL,'lang',obj.get('lang', 'en'))<SUB>1720</SUB>> ]
"90194313294" [label = <(LITERAL,'en',obj.get('lang', 'en'))<SUB>1720</SUB>> ]
"68719476893" [label = <(IDENTIFIER,observation_script,&quot;    &lt;/div&gt;\n    &lt;/div&gt;&quot; + standard_scripts(int...)<SUB>1720</SUB>> ]
"90194313295" [label = <(LITERAL,&quot;\n    &quot;,&quot;    &lt;/div&gt;\n    &lt;/div&gt;&quot; + standard_scripts(int...)<SUB>1720</SUB>> ]
"25769803785" [label = <(BLOCK,tmp5 = &quot;&quot;
tmp5.join(obj.get('extra_scripts', [])),tmp5 = &quot;&quot;
tmp5.join(obj.get('extra_scripts', [])))<SUB>1720</SUB>> ]
"30064771282" [label = <(&lt;operator&gt;.assignment,tmp5 = &quot;&quot;)<SUB>1720</SUB>> ]
"68719476896" [label = <(IDENTIFIER,tmp5,tmp5 = &quot;&quot;)<SUB>1720</SUB>> ]
"90194313297" [label = <(LITERAL,&quot;&quot;,tmp5 = &quot;&quot;)<SUB>1720</SUB>> ]
"30064771284" [label = <(join,tmp5.join(obj.get('extra_scripts', [])))<SUB>1720</SUB>> ]
"30064771283" [label = <(&lt;operator&gt;.fieldAccess,tmp5.join)<SUB>1720</SUB>> ]
"68719476897" [label = <(IDENTIFIER,tmp5,tmp5.join(obj.get('extra_scripts', [])))<SUB>1720</SUB>> ]
"55834574891" [label = <(FIELD_IDENTIFIER,join,join)<SUB>1720</SUB>> ]
"68719476898" [label = <(IDENTIFIER,tmp5,tmp5.join(obj.get('extra_scripts', [])))<SUB>1720</SUB>> ]
"30064771281" [label = <(get,obj.get('extra_scripts', []))<SUB>1720</SUB>> ]
"30064771280" [label = <(&lt;operator&gt;.fieldAccess,obj.get)<SUB>1720</SUB>> ]
"68719476894" [label = <(IDENTIFIER,obj,obj.get('extra_scripts', []))<SUB>1720</SUB>> ]
"55834574890" [label = <(FIELD_IDENTIFIER,get,get)<SUB>1720</SUB>> ]
"68719476895" [label = <(IDENTIFIER,obj,obj.get('extra_scripts', []))<SUB>1720</SUB>> ]
"90194313296" [label = <(LITERAL,'extra_scripts',obj.get('extra_scripts', []))<SUB>1720</SUB>> ]
"30064771279" [label = <(&lt;operator&gt;.listLiteral,[])<SUB>1720</SUB>> ]
"90194313298" [label = <(LITERAL,&quot;\n  &lt;/body&gt;\n&lt;/html&gt;&quot;,&quot;    &lt;/div&gt;\n    &lt;/div&gt;&quot; + standard_scripts(int...)<SUB>1720</SUB>> ]
"30064771291" [label = <(&lt;operator&gt;.assignment,response = make_response(output.encode('utf-8')...)<SUB>1721</SUB>> ]
"68719476902" [label = <(IDENTIFIER,response,response = make_response(output.encode('utf-8')...)<SUB>1721</SUB>> ]
"30064771290" [label = <(make_response,make_response(output.encode('utf-8'), '200 OK'))<SUB>1721</SUB>> ]
"68719476901" [label = <(IDENTIFIER,make_response,make_response(output.encode('utf-8'), '200 OK'))<SUB>1721</SUB>> ]
"30064771289" [label = <(encode,output.encode('utf-8'))<SUB>1721</SUB>> ]
"30064771288" [label = <(&lt;operator&gt;.fieldAccess,output.encode)<SUB>1721</SUB>> ]
"68719476899" [label = <(IDENTIFIER,output,output.encode('utf-8'))<SUB>1721</SUB>> ]
"55834574892" [label = <(FIELD_IDENTIFIER,encode,encode)<SUB>1721</SUB>> ]
"68719476900" [label = <(IDENTIFIER,output,output.encode('utf-8'))<SUB>1721</SUB>> ]
"90194313299" [label = <(LITERAL,'utf-8',output.encode('utf-8'))<SUB>1721</SUB>> ]
"90194313300" [label = <(LITERAL,'200 OK',make_response(output.encode('utf-8'), '200 OK'))<SUB>1721</SUB>> ]
"30064771294" [label = <(&lt;operator&gt;.assignment,response.headers['Content-type'] = 'text/html; ...)<SUB>1722</SUB>> ]
"30064771293" [label = <(&lt;operator&gt;.indexAccess,response.headers['Content-type'])<SUB>1722</SUB>> ]
"30064771292" [label = <(&lt;operator&gt;.fieldAccess,response.headers)<SUB>1722</SUB>> ]
"68719476903" [label = <(IDENTIFIER,response,response.headers['Content-type'] = 'text/html; ...)<SUB>1722</SUB>> ]
"55834574893" [label = <(FIELD_IDENTIFIER,headers,headers)<SUB>1722</SUB>> ]
"90194313302" [label = <(LITERAL,'Content-type',response.headers['Content-type'] = 'text/html; ...)<SUB>1722</SUB>> ]
"90194313301" [label = <(LITERAL,'text/html; charset=utf-8',response.headers['Content-type'] = 'text/html; ...)<SUB>1722</SUB>> ]
"146028888064" [label = <(RETURN,return response,return response)<SUB>1723</SUB>> ]
"68719476904" [label = <(IDENTIFIER,response,return response)<SUB>1723</SUB>> ]
"94489280514" [label = <(LOCAL,setup_translation: ANY)<SUB>2</SUB>> ]
"94489280516" [label = <(LOCAL,session: ANY)<SUB>3</SUB>> ]
"94489280518" [label = <(LOCAL,request: ANY)<SUB>4</SUB>> ]
"94489280520" [label = <(LOCAL,tmp0: request.args.&lt;returnValue&gt;.&lt;member&gt;(args))<SUB>4</SUB>> ]
"94489280521" [label = <(LOCAL,i: request.args.&lt;returnValue&gt;.&lt;member&gt;(args).get)<SUB>4</SUB>> ]
"94489280522" [label = <(LOCAL,tmp1: request.args.&lt;returnValue&gt;.&lt;member&gt;(args))<SUB>5</SUB>> ]
"94489280523" [label = <(LOCAL,uid: request.args.&lt;returnValue&gt;.&lt;member&gt;(args).get)<SUB>5</SUB>> ]
"94489280524" [label = <(LOCAL,tmp2: request.args.&lt;returnValue&gt;.&lt;member&gt;(args))<SUB>6</SUB>> ]
"94489280525" [label = <(LOCAL,userid: request.args.&lt;returnValue&gt;.&lt;member&gt;(args).get)<SUB>6</SUB>> ]
"94489280526" [label = <(LOCAL,generate_csrf: ANY)<SUB>23</SUB>> ]
"94489280528" [label = <(LOCAL,json: ANY)<SUB>23</SUB>> ]
"94489280530" [label = <(LOCAL,url_for: ANY)<SUB>35</SUB>> ]
"94489280532" [label = <(LOCAL,NOTIFICATION_CONTAINER: ANY)<SUB>147</SUB>> ]
"94489280534" [label = <(LOCAL,NOTIFICATION_MESSAGE: ANY)<SUB>148</SUB>> ]
"94489280536" [label = <(LOCAL,str: ANY)<SUB>633</SUB>> ]
"94489280537" [label = <(LOCAL,CHECKIN_INTERVAL: ANY)<SUB>694</SUB>> ]
"94489280539" [label = <(LOCAL,daconfig: ANY)<SUB>1123</SUB>> ]
"94489280541" [label = <(LOCAL,app: ANY)<SUB>1534</SUB>> ]
"94489280543" [label = <(LOCAL,ROOT: ANY)<SUB>1572</SUB>> ]
"94489280545" [label = <(LOCAL,observation_script: ANY)<SUB>7</SUB>> ]
"94489280546" [label = <(LOCAL,the_key: ANY)<SUB>1708</SUB>> ]
"94489280547" [label = <(LOCAL,r: ANY)<SUB>1709</SUB>> ]
"94489280549" [label = <(LOCAL,html: ANY)<SUB>1709</SUB>> ]
"94489280550" [label = <(LOCAL,obj: __builtin.dict)<SUB>1711</SUB>> ]
"94489280551" [label = <(LOCAL,logmessage: ANY)<SUB>1713</SUB>> ]
"94489280553" [label = <(LOCAL,tmp3: __builtin.dict)<SUB>1714</SUB>> ]
"94489280554" [label = <(LOCAL,word: ANY)<SUB>1715</SUB>> ]
"94489280556" [label = <(LOCAL,page_title: word.&lt;returnValue&gt;)<SUB>1715</SUB>> ]
"94489280557" [label = <(LOCAL,DEBUG: ANY)<SUB>1716</SUB>> ]
"94489280559" [label = <(LOCAL,standard_html_start: ANY)<SUB>1716</SUB>> ]
"94489280561" [label = <(LOCAL,output: standard_html_start.&lt;returnValue&gt;)<SUB>1716</SUB>> ]
"94489280562" [label = <(LOCAL,tmp4: __builtin.str)<SUB>1717</SUB>> ]
"94489280563" [label = <(LOCAL,indent_by: ANY)<SUB>1717</SUB>> ]
"94489280565" [label = <(LOCAL,standard_scripts: ANY)<SUB>1720</SUB>> ]
"94489280567" [label = <(LOCAL,tmp5: __builtin.str)<SUB>1720</SUB>> ]
"94489280568" [label = <(LOCAL,make_response: ANY)<SUB>1721</SUB>> ]
"94489280570" [label = <(LOCAL,response: make_response.&lt;returnValue&gt;)<SUB>1721</SUB>> ]
"133143986178" [label = <(MODIFIER,VIRTUAL)> ]
"128849018881" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
  "111669149697" -> "133143986178"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "128849018881"  [ label = "AST: "] 
  "25769803777" -> "30064771073"  [ label = "AST: "] 
  "25769803777" -> "94489280514"  [ label = "AST: "] 
  "25769803777" -> "30064771075"  [ label = "AST: "] 
  "25769803777" -> "94489280516"  [ label = "AST: "] 
  "25769803777" -> "30064771080"  [ label = "AST: "] 
  "25769803777" -> "94489280518"  [ label = "AST: "] 
  "25769803777" -> "30064771085"  [ label = "AST: "] 
  "25769803777" -> "94489280520"  [ label = "AST: "] 
  "25769803777" -> "30064771090"  [ label = "AST: "] 
  "25769803777" -> "94489280521"  [ label = "AST: "] 
  "25769803777" -> "30064771219"  [ label = "AST: "] 
  "25769803777" -> "94489280522"  [ label = "AST: "] 
  "25769803777" -> "30064771228"  [ label = "AST: "] 
  "25769803777" -> "94489280523"  [ label = "AST: "] 
  "25769803777" -> "30064771231"  [ label = "AST: "] 
  "25769803777" -> "94489280524"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "25769803777" -> "94489280525"  [ label = "AST: "] 
  "25769803777" -> "30064771244"  [ label = "AST: "] 
  "25769803777" -> "94489280526"  [ label = "AST: "] 
  "25769803777" -> "30064771250"  [ label = "AST: "] 
  "25769803777" -> "94489280528"  [ label = "AST: "] 
  "25769803777" -> "30064771262"  [ label = "AST: "] 
  "25769803777" -> "94489280530"  [ label = "AST: "] 
  "25769803777" -> "30064771269"  [ label = "AST: "] 
  "25769803777" -> "94489280532"  [ label = "AST: "] 
  "25769803777" -> "30064771272"  [ label = "AST: "] 
  "25769803777" -> "94489280534"  [ label = "AST: "] 
  "25769803777" -> "30064771287"  [ label = "AST: "] 
  "25769803777" -> "94489280536"  [ label = "AST: "] 
  "25769803777" -> "30064771291"  [ label = "AST: "] 
  "25769803777" -> "94489280537"  [ label = "AST: "] 
  "25769803777" -> "30064771294"  [ label = "AST: "] 
  "25769803777" -> "94489280539"  [ label = "AST: "] 
  "25769803777" -> "146028888064"  [ label = "AST: "] 
  "25769803777" -> "94489280541"  [ label = "AST: "] 
  "25769803777" -> "94489280543"  [ label = "AST: "] 
  "25769803777" -> "94489280545"  [ label = "AST: "] 
  "25769803777" -> "94489280546"  [ label = "AST: "] 
  "25769803777" -> "94489280547"  [ label = "AST: "] 
  "25769803777" -> "94489280549"  [ label = "AST: "] 
  "25769803777" -> "94489280550"  [ label = "AST: "] 
  "25769803777" -> "94489280551"  [ label = "AST: "] 
  "25769803777" -> "94489280553"  [ label = "AST: "] 
  "25769803777" -> "94489280554"  [ label = "AST: "] 
  "25769803777" -> "94489280556"  [ label = "AST: "] 
  "25769803777" -> "94489280557"  [ label = "AST: "] 
  "25769803777" -> "94489280559"  [ label = "AST: "] 
  "25769803777" -> "94489280561"  [ label = "AST: "] 
  "25769803777" -> "94489280562"  [ label = "AST: "] 
  "25769803777" -> "94489280563"  [ label = "AST: "] 
  "25769803777" -> "94489280565"  [ label = "AST: "] 
  "25769803777" -> "94489280567"  [ label = "AST: "] 
  "25769803777" -> "94489280568"  [ label = "AST: "] 
  "25769803777" -> "94489280570"  [ label = "AST: "] 
  "30064771073" -> "68719476738"  [ label = "AST: "] 
  "30064771075" -> "30064771074"  [ label = "AST: "] 
  "30064771075" -> "90194313216"  [ label = "AST: "] 
  "30064771074" -> "68719476739"  [ label = "AST: "] 
  "30064771074" -> "90194313217"  [ label = "AST: "] 
  "30064771080" -> "68719476744"  [ label = "AST: "] 
  "30064771080" -> "25769803778"  [ label = "AST: "] 
  "25769803778" -> "30064771077"  [ label = "AST: "] 
  "25769803778" -> "30064771079"  [ label = "AST: "] 
  "30064771077" -> "68719476741"  [ label = "AST: "] 
  "30064771077" -> "30064771076"  [ label = "AST: "] 
  "30064771076" -> "68719476740"  [ label = "AST: "] 
  "30064771076" -> "55834574848"  [ label = "AST: "] 
  "30064771079" -> "30064771078"  [ label = "AST: "] 
  "30064771079" -> "68719476743"  [ label = "AST: "] 
  "30064771079" -> "90194313218"  [ label = "AST: "] 
  "30064771079" -> "90194313219"  [ label = "AST: "] 
  "30064771078" -> "68719476742"  [ label = "AST: "] 
  "30064771078" -> "55834574849"  [ label = "AST: "] 
  "30064771085" -> "68719476749"  [ label = "AST: "] 
  "30064771085" -> "25769803779"  [ label = "AST: "] 
  "25769803779" -> "30064771082"  [ label = "AST: "] 
  "25769803779" -> "30064771084"  [ label = "AST: "] 
  "30064771082" -> "68719476746"  [ label = "AST: "] 
  "30064771082" -> "30064771081"  [ label = "AST: "] 
  "30064771081" -> "68719476745"  [ label = "AST: "] 
  "30064771081" -> "55834574850"  [ label = "AST: "] 
  "30064771084" -> "30064771083"  [ label = "AST: "] 
  "30064771084" -> "68719476748"  [ label = "AST: "] 
  "30064771084" -> "90194313220"  [ label = "AST: "] 
  "30064771084" -> "90194313221"  [ label = "AST: "] 
  "30064771083" -> "68719476747"  [ label = "AST: "] 
  "30064771083" -> "55834574851"  [ label = "AST: "] 
  "30064771090" -> "68719476754"  [ label = "AST: "] 
  "30064771090" -> "25769803780"  [ label = "AST: "] 
  "25769803780" -> "30064771087"  [ label = "AST: "] 
  "25769803780" -> "30064771089"  [ label = "AST: "] 
  "30064771087" -> "68719476751"  [ label = "AST: "] 
  "30064771087" -> "30064771086"  [ label = "AST: "] 
  "30064771086" -> "68719476750"  [ label = "AST: "] 
  "30064771086" -> "55834574852"  [ label = "AST: "] 
  "30064771089" -> "30064771088"  [ label = "AST: "] 
  "30064771089" -> "68719476753"  [ label = "AST: "] 
  "30064771089" -> "90194313222"  [ label = "AST: "] 
  "30064771089" -> "90194313223"  [ label = "AST: "] 
  "30064771088" -> "68719476752"  [ label = "AST: "] 
  "30064771088" -> "55834574853"  [ label = "AST: "] 
  "30064771219" -> "68719476841"  [ label = "AST: "] 
  "30064771219" -> "30064771218"  [ label = "AST: "] 
  "30064771218" -> "30064771217"  [ label = "AST: "] 
  "30064771218" -> "90194313268"  [ label = "AST: "] 
  "30064771217" -> "30064771215"  [ label = "AST: "] 
  "30064771217" -> "30064771216"  [ label = "AST: "] 
  "30064771215" -> "30064771214"  [ label = "AST: "] 
  "30064771215" -> "90194313267"  [ label = "AST: "] 
  "30064771214" -> "30064771210"  [ label = "AST: "] 
  "30064771214" -> "30064771213"  [ label = "AST: "] 
  "30064771210" -> "30064771209"  [ label = "AST: "] 
  "30064771210" -> "90194313266"  [ label = "AST: "] 
  "30064771209" -> "30064771206"  [ label = "AST: "] 
  "30064771209" -> "30064771208"  [ label = "AST: "] 
  "30064771206" -> "30064771205"  [ label = "AST: "] 
  "30064771206" -> "90194313265"  [ label = "AST: "] 
  "30064771205" -> "30064771204"  [ label = "AST: "] 
  "30064771205" -> "68719476831"  [ label = "AST: "] 
  "30064771204" -> "30064771203"  [ label = "AST: "] 
  "30064771204" -> "90194313264"  [ label = "AST: "] 
  "30064771203" -> "30064771202"  [ label = "AST: "] 
  "30064771203" -> "68719476830"  [ label = "AST: "] 
  "30064771202" -> "30064771201"  [ label = "AST: "] 
  "30064771202" -> "90194313263"  [ label = "AST: "] 
  "30064771201" -> "30064771198"  [ label = "AST: "] 
  "30064771201" -> "30064771200"  [ label = "AST: "] 
  "30064771198" -> "30064771197"  [ label = "AST: "] 
  "30064771198" -> "90194313261"  [ label = "AST: "] 
  "30064771197" -> "30064771194"  [ label = "AST: "] 
  "30064771197" -> "30064771196"  [ label = "AST: "] 
  "30064771194" -> "30064771193"  [ label = "AST: "] 
  "30064771194" -> "90194313259"  [ label = "AST: "] 
  "30064771193" -> "30064771190"  [ label = "AST: "] 
  "30064771193" -> "30064771192"  [ label = "AST: "] 
  "30064771190" -> "30064771189"  [ label = "AST: "] 
  "30064771190" -> "90194313257"  [ label = "AST: "] 
  "30064771189" -> "30064771185"  [ label = "AST: "] 
  "30064771189" -> "30064771188"  [ label = "AST: "] 
  "30064771185" -> "30064771184"  [ label = "AST: "] 
  "30064771185" -> "90194313254"  [ label = "AST: "] 
  "30064771184" -> "30064771180"  [ label = "AST: "] 
  "30064771184" -> "30064771183"  [ label = "AST: "] 
  "30064771180" -> "30064771179"  [ label = "AST: "] 
  "30064771180" -> "90194313251"  [ label = "AST: "] 
  "30064771179" -> "30064771178"  [ label = "AST: "] 
  "30064771179" -> "90194313250"  [ label = "AST: "] 
  "30064771178" -> "30064771176"  [ label = "AST: "] 
  "30064771178" -> "30064771177"  [ label = "AST: "] 
  "30064771176" -> "30064771175"  [ label = "AST: "] 
  "30064771176" -> "90194313248"  [ label = "AST: "] 
  "30064771175" -> "30064771174"  [ label = "AST: "] 
  "30064771175" -> "90194313247"  [ label = "AST: "] 
  "30064771174" -> "30064771170"  [ label = "AST: "] 
  "30064771174" -> "30064771173"  [ label = "AST: "] 
  "30064771170" -> "30064771169"  [ label = "AST: "] 
  "30064771170" -> "90194313246"  [ label = "AST: "] 
  "30064771169" -> "30064771166"  [ label = "AST: "] 
  "30064771169" -> "30064771168"  [ label = "AST: "] 
  "30064771166" -> "30064771165"  [ label = "AST: "] 
  "30064771166" -> "90194313245"  [ label = "AST: "] 
  "30064771165" -> "30064771162"  [ label = "AST: "] 
  "30064771165" -> "30064771164"  [ label = "AST: "] 
  "30064771162" -> "30064771161"  [ label = "AST: "] 
  "30064771162" -> "90194313244"  [ label = "AST: "] 
  "30064771161" -> "30064771157"  [ label = "AST: "] 
  "30064771161" -> "30064771160"  [ label = "AST: "] 
  "30064771157" -> "30064771156"  [ label = "AST: "] 
  "30064771157" -> "90194313243"  [ label = "AST: "] 
  "30064771156" -> "30064771153"  [ label = "AST: "] 
  "30064771156" -> "30064771155"  [ label = "AST: "] 
  "30064771153" -> "30064771152"  [ label = "AST: "] 
  "30064771153" -> "90194313242"  [ label = "AST: "] 
  "30064771152" -> "30064771149"  [ label = "AST: "] 
  "30064771152" -> "30064771151"  [ label = "AST: "] 
  "30064771149" -> "30064771148"  [ label = "AST: "] 
  "30064771149" -> "90194313241"  [ label = "AST: "] 
  "30064771148" -> "30064771146"  [ label = "AST: "] 
  "30064771148" -> "30064771147"  [ label = "AST: "] 
  "30064771146" -> "30064771145"  [ label = "AST: "] 
  "30064771146" -> "90194313240"  [ label = "AST: "] 
  "30064771145" -> "30064771143"  [ label = "AST: "] 
  "30064771145" -> "30064771144"  [ label = "AST: "] 
  "30064771143" -> "30064771142"  [ label = "AST: "] 
  "30064771143" -> "90194313239"  [ label = "AST: "] 
  "30064771142" -> "30064771138"  [ label = "AST: "] 
  "30064771142" -> "30064771141"  [ label = "AST: "] 
  "30064771138" -> "30064771137"  [ label = "AST: "] 
  "30064771138" -> "90194313238"  [ label = "AST: "] 
  "30064771137" -> "30064771134"  [ label = "AST: "] 
  "30064771137" -> "30064771136"  [ label = "AST: "] 
  "30064771134" -> "30064771133"  [ label = "AST: "] 
  "30064771134" -> "90194313237"  [ label = "AST: "] 
  "30064771133" -> "30064771130"  [ label = "AST: "] 
  "30064771133" -> "30064771132"  [ label = "AST: "] 
  "30064771130" -> "30064771129"  [ label = "AST: "] 
  "30064771130" -> "90194313236"  [ label = "AST: "] 
  "30064771129" -> "30064771125"  [ label = "AST: "] 
  "30064771129" -> "30064771128"  [ label = "AST: "] 
  "30064771125" -> "30064771124"  [ label = "AST: "] 
  "30064771125" -> "90194313235"  [ label = "AST: "] 
  "30064771124" -> "30064771121"  [ label = "AST: "] 
  "30064771124" -> "30064771123"  [ label = "AST: "] 
  "30064771121" -> "30064771120"  [ label = "AST: "] 
  "30064771121" -> "90194313234"  [ label = "AST: "] 
  "30064771120" -> "30064771117"  [ label = "AST: "] 
  "30064771120" -> "30064771119"  [ label = "AST: "] 
  "30064771117" -> "30064771116"  [ label = "AST: "] 
  "30064771117" -> "90194313233"  [ label = "AST: "] 
  "30064771116" -> "30064771113"  [ label = "AST: "] 
  "30064771116" -> "30064771115"  [ label = "AST: "] 
  "30064771113" -> "30064771112"  [ label = "AST: "] 
  "30064771113" -> "90194313232"  [ label = "AST: "] 
  "30064771112" -> "30064771109"  [ label = "AST: "] 
  "30064771112" -> "30064771111"  [ label = "AST: "] 
  "30064771109" -> "30064771108"  [ label = "AST: "] 
  "30064771109" -> "90194313231"  [ label = "AST: "] 
  "30064771108" -> "30064771105"  [ label = "AST: "] 
  "30064771108" -> "30064771107"  [ label = "AST: "] 
  "30064771105" -> "30064771104"  [ label = "AST: "] 
  "30064771105" -> "90194313230"  [ label = "AST: "] 
  "30064771104" -> "30064771100"  [ label = "AST: "] 
  "30064771104" -> "30064771103"  [ label = "AST: "] 
  "30064771100" -> "30064771099"  [ label = "AST: "] 
  "30064771100" -> "90194313227"  [ label = "AST: "] 
  "30064771099" -> "30064771095"  [ label = "AST: "] 
  "30064771099" -> "30064771098"  [ label = "AST: "] 
  "30064771095" -> "30064771094"  [ label = "AST: "] 
  "30064771095" -> "90194313225"  [ label = "AST: "] 
  "30064771094" -> "90194313224"  [ label = "AST: "] 
  "30064771094" -> "30064771093"  [ label = "AST: "] 
  "30064771093" -> "30064771092"  [ label = "AST: "] 
  "30064771093" -> "68719476757"  [ label = "AST: "] 
  "30064771093" -> "30064771091"  [ label = "AST: "] 
  "30064771092" -> "68719476756"  [ label = "AST: "] 
  "30064771092" -> "55834574854"  [ label = "AST: "] 
  "30064771091" -> "68719476755"  [ label = "AST: "] 
  "30064771098" -> "30064771097"  [ label = "AST: "] 
  "30064771098" -> "68719476761"  [ label = "AST: "] 
  "30064771098" -> "30064771096"  [ label = "AST: "] 
  "30064771097" -> "68719476760"  [ label = "AST: "] 
  "30064771097" -> "55834574855"  [ label = "AST: "] 
  "30064771096" -> "68719476759"  [ label = "AST: "] 
  "30064771096" -> "90194313226"  [ label = "AST: "] 
  "30064771096" -> "68719476758"  [ label = "AST: "] 
  "30064771103" -> "30064771102"  [ label = "AST: "] 
  "30064771103" -> "68719476765"  [ label = "AST: "] 
  "30064771103" -> "30064771101"  [ label = "AST: "] 
  "30064771102" -> "68719476764"  [ label = "AST: "] 
  "30064771102" -> "55834574856"  [ label = "AST: "] 
  "30064771101" -> "68719476763"  [ label = "AST: "] 
  "30064771101" -> "90194313228"  [ label = "AST: "] 
  "30064771101" -> "68719476762"  [ label = "AST: "] 
  "30064771101" -> "90194313229"  [ label = "AST: "] 
  "30064771107" -> "30064771106"  [ label = "AST: "] 
  "30064771107" -> "68719476768"  [ label = "AST: "] 
  "30064771107" -> "68719476766"  [ label = "AST: "] 
  "30064771106" -> "68719476767"  [ label = "AST: "] 
  "30064771106" -> "55834574857"  [ label = "AST: "] 
  "30064771111" -> "30064771110"  [ label = "AST: "] 
  "30064771111" -> "68719476771"  [ label = "AST: "] 
  "30064771111" -> "68719476769"  [ label = "AST: "] 
  "30064771110" -> "68719476770"  [ label = "AST: "] 
  "30064771110" -> "55834574858"  [ label = "AST: "] 
  "30064771115" -> "30064771114"  [ label = "AST: "] 
  "30064771115" -> "68719476774"  [ label = "AST: "] 
  "30064771115" -> "68719476772"  [ label = "AST: "] 
  "30064771114" -> "68719476773"  [ label = "AST: "] 
  "30064771114" -> "55834574859"  [ label = "AST: "] 
  "30064771119" -> "30064771118"  [ label = "AST: "] 
  "30064771119" -> "68719476777"  [ label = "AST: "] 
  "30064771119" -> "68719476775"  [ label = "AST: "] 
  "30064771118" -> "68719476776"  [ label = "AST: "] 
  "30064771118" -> "55834574860"  [ label = "AST: "] 
  "30064771123" -> "30064771122"  [ label = "AST: "] 
  "30064771123" -> "68719476780"  [ label = "AST: "] 
  "30064771123" -> "68719476778"  [ label = "AST: "] 
  "30064771122" -> "68719476779"  [ label = "AST: "] 
  "30064771122" -> "55834574861"  [ label = "AST: "] 
  "30064771128" -> "30064771127"  [ label = "AST: "] 
  "30064771128" -> "68719476784"  [ label = "AST: "] 
  "30064771128" -> "30064771126"  [ label = "AST: "] 
  "30064771127" -> "68719476783"  [ label = "AST: "] 
  "30064771127" -> "55834574862"  [ label = "AST: "] 
  "30064771126" -> "68719476782"  [ label = "AST: "] 
  "30064771126" -> "68719476781"  [ label = "AST: "] 
  "30064771132" -> "30064771131"  [ label = "AST: "] 
  "30064771132" -> "68719476787"  [ label = "AST: "] 
  "30064771132" -> "68719476785"  [ label = "AST: "] 
  "30064771131" -> "68719476786"  [ label = "AST: "] 
  "30064771131" -> "55834574863"  [ label = "AST: "] 
  "30064771136" -> "30064771135"  [ label = "AST: "] 
  "30064771136" -> "68719476790"  [ label = "AST: "] 
  "30064771136" -> "68719476788"  [ label = "AST: "] 
  "30064771135" -> "68719476789"  [ label = "AST: "] 
  "30064771135" -> "55834574864"  [ label = "AST: "] 
  "30064771141" -> "30064771140"  [ label = "AST: "] 
  "30064771141" -> "68719476794"  [ label = "AST: "] 
  "30064771141" -> "30064771139"  [ label = "AST: "] 
  "30064771140" -> "68719476793"  [ label = "AST: "] 
  "30064771140" -> "55834574865"  [ label = "AST: "] 
  "30064771139" -> "68719476792"  [ label = "AST: "] 
  "30064771139" -> "68719476791"  [ label = "AST: "] 
  "30064771144" -> "68719476796"  [ label = "AST: "] 
  "30064771144" -> "68719476795"  [ label = "AST: "] 
  "30064771147" -> "68719476798"  [ label = "AST: "] 
  "30064771147" -> "68719476797"  [ label = "AST: "] 
  "30064771151" -> "30064771150"  [ label = "AST: "] 
  "30064771151" -> "68719476801"  [ label = "AST: "] 
  "30064771151" -> "68719476799"  [ label = "AST: "] 
  "30064771150" -> "68719476800"  [ label = "AST: "] 
  "30064771150" -> "55834574866"  [ label = "AST: "] 
  "30064771155" -> "30064771154"  [ label = "AST: "] 
  "30064771155" -> "68719476804"  [ label = "AST: "] 
  "30064771155" -> "68719476802"  [ label = "AST: "] 
  "30064771154" -> "68719476803"  [ label = "AST: "] 
  "30064771154" -> "55834574867"  [ label = "AST: "] 
  "30064771160" -> "30064771159"  [ label = "AST: "] 
  "30064771160" -> "68719476808"  [ label = "AST: "] 
  "30064771160" -> "30064771158"  [ label = "AST: "] 
  "30064771159" -> "68719476807"  [ label = "AST: "] 
  "30064771159" -> "55834574868"  [ label = "AST: "] 
  "30064771158" -> "68719476806"  [ label = "AST: "] 
  "30064771158" -> "68719476805"  [ label = "AST: "] 
  "30064771164" -> "30064771163"  [ label = "AST: "] 
  "30064771164" -> "68719476811"  [ label = "AST: "] 
  "30064771164" -> "68719476809"  [ label = "AST: "] 
  "30064771163" -> "68719476810"  [ label = "AST: "] 
  "30064771163" -> "55834574869"  [ label = "AST: "] 
  "30064771168" -> "30064771167"  [ label = "AST: "] 
  "30064771168" -> "68719476814"  [ label = "AST: "] 
  "30064771168" -> "68719476812"  [ label = "AST: "] 
  "30064771167" -> "68719476813"  [ label = "AST: "] 
  "30064771167" -> "55834574870"  [ label = "AST: "] 
  "30064771173" -> "30064771172"  [ label = "AST: "] 
  "30064771173" -> "68719476818"  [ label = "AST: "] 
  "30064771173" -> "30064771171"  [ label = "AST: "] 
  "30064771172" -> "68719476817"  [ label = "AST: "] 
  "30064771172" -> "55834574871"  [ label = "AST: "] 
  "30064771171" -> "68719476816"  [ label = "AST: "] 
  "30064771171" -> "68719476815"  [ label = "AST: "] 
  "30064771177" -> "68719476820"  [ label = "AST: "] 
  "30064771177" -> "90194313249"  [ label = "AST: "] 
  "30064771177" -> "68719476819"  [ label = "AST: "] 
  "30064771183" -> "68719476823"  [ label = "AST: "] 
  "30064771183" -> "30064771182"  [ label = "AST: "] 
  "30064771182" -> "30064771181"  [ label = "AST: "] 
  "30064771182" -> "68719476822"  [ label = "AST: "] 
  "30064771182" -> "90194313252"  [ label = "AST: "] 
  "30064771182" -> "90194313253"  [ label = "AST: "] 
  "30064771181" -> "68719476821"  [ label = "AST: "] 
  "30064771181" -> "55834574872"  [ label = "AST: "] 
  "30064771188" -> "68719476826"  [ label = "AST: "] 
  "30064771188" -> "30064771187"  [ label = "AST: "] 
  "30064771187" -> "30064771186"  [ label = "AST: "] 
  "30064771187" -> "68719476825"  [ label = "AST: "] 
  "30064771187" -> "90194313255"  [ label = "AST: "] 
  "30064771187" -> "90194313256"  [ label = "AST: "] 
  "30064771186" -> "68719476824"  [ label = "AST: "] 
  "30064771186" -> "55834574873"  [ label = "AST: "] 
  "30064771192" -> "30064771191"  [ label = "AST: "] 
  "30064771192" -> "90194313258"  [ label = "AST: "] 
  "30064771191" -> "68719476827"  [ label = "AST: "] 
  "30064771191" -> "55834574874"  [ label = "AST: "] 
  "30064771196" -> "30064771195"  [ label = "AST: "] 
  "30064771196" -> "90194313260"  [ label = "AST: "] 
  "30064771195" -> "68719476828"  [ label = "AST: "] 
  "30064771195" -> "55834574875"  [ label = "AST: "] 
  "30064771200" -> "30064771199"  [ label = "AST: "] 
  "30064771200" -> "90194313262"  [ label = "AST: "] 
  "30064771199" -> "68719476829"  [ label = "AST: "] 
  "30064771199" -> "55834574876"  [ label = "AST: "] 
  "30064771208" -> "30064771207"  [ label = "AST: "] 
  "30064771208" -> "68719476834"  [ label = "AST: "] 
  "30064771208" -> "68719476832"  [ label = "AST: "] 
  "30064771207" -> "68719476833"  [ label = "AST: "] 
  "30064771207" -> "55834574877"  [ label = "AST: "] 
  "30064771213" -> "30064771212"  [ label = "AST: "] 
  "30064771213" -> "68719476838"  [ label = "AST: "] 
  "30064771213" -> "30064771211"  [ label = "AST: "] 
  "30064771212" -> "68719476837"  [ label = "AST: "] 
  "30064771212" -> "55834574878"  [ label = "AST: "] 
  "30064771211" -> "68719476836"  [ label = "AST: "] 
  "30064771211" -> "68719476835"  [ label = "AST: "] 
  "30064771216" -> "68719476840"  [ label = "AST: "] 
  "30064771216" -> "68719476839"  [ label = "AST: "] 
  "30064771228" -> "68719476848"  [ label = "AST: "] 
  "30064771228" -> "30064771227"  [ label = "AST: "] 
  "30064771227" -> "30064771225"  [ label = "AST: "] 
  "30064771227" -> "30064771226"  [ label = "AST: "] 
  "30064771225" -> "30064771224"  [ label = "AST: "] 
  "30064771225" -> "90194313271"  [ label = "AST: "] 
  "30064771224" -> "30064771222"  [ label = "AST: "] 
  "30064771224" -> "30064771223"  [ label = "AST: "] 
  "30064771222" -> "30064771221"  [ label = "AST: "] 
  "30064771222" -> "90194313270"  [ label = "AST: "] 
  "30064771221" -> "90194313269"  [ label = "AST: "] 
  "30064771221" -> "30064771220"  [ label = "AST: "] 
  "30064771220" -> "68719476843"  [ label = "AST: "] 
  "30064771220" -> "68719476842"  [ label = "AST: "] 
  "30064771223" -> "68719476845"  [ label = "AST: "] 
  "30064771223" -> "68719476844"  [ label = "AST: "] 
  "30064771226" -> "68719476847"  [ label = "AST: "] 
  "30064771226" -> "68719476846"  [ label = "AST: "] 
  "30064771231" -> "68719476852"  [ label = "AST: "] 
  "30064771231" -> "30064771230"  [ label = "AST: "] 
  "30064771230" -> "30064771229"  [ label = "AST: "] 
  "30064771230" -> "68719476851"  [ label = "AST: "] 
  "30064771230" -> "68719476849"  [ label = "AST: "] 
  "30064771229" -> "68719476850"  [ label = "AST: "] 
  "30064771229" -> "55834574879"  [ label = "AST: "] 
  "47244640256" -> "30064771232"  [ label = "AST: "] 
  "47244640256" -> "25769803781"  [ label = "AST: "] 
  "47244640256" -> "25769803783"  [ label = "AST: "] 
  "30064771232" -> "68719476853"  [ label = "AST: "] 
  "30064771232" -> "90194313272"  [ label = "AST: "] 
  "25769803781" -> "30064771237"  [ label = "AST: "] 
  "30064771237" -> "68719476858"  [ label = "AST: "] 
  "30064771237" -> "30064771236"  [ label = "AST: "] 
  "30064771236" -> "30064771235"  [ label = "AST: "] 
  "30064771236" -> "68719476857"  [ label = "AST: "] 
  "30064771236" -> "30064771234"  [ label = "AST: "] 
  "30064771235" -> "68719476856"  [ label = "AST: "] 
  "30064771235" -> "55834574881"  [ label = "AST: "] 
  "30064771234" -> "30064771233"  [ label = "AST: "] 
  "30064771234" -> "68719476855"  [ label = "AST: "] 
  "30064771233" -> "68719476854"  [ label = "AST: "] 
  "30064771233" -> "55834574880"  [ label = "AST: "] 
  "25769803783" -> "30064771239"  [ label = "AST: "] 
  "25769803783" -> "30064771242"  [ label = "AST: "] 
  "30064771239" -> "68719476860"  [ label = "AST: "] 
  "30064771239" -> "30064771238"  [ label = "AST: "] 
  "30064771238" -> "90194313273"  [ label = "AST: "] 
  "30064771238" -> "68719476859"  [ label = "AST: "] 
  "30064771242" -> "68719476863"  [ label = "AST: "] 
  "30064771242" -> "25769803782"  [ label = "AST: "] 
  "25769803782" -> "30064771241"  [ label = "AST: "] 
  "25769803782" -> "68719476862"  [ label = "AST: "] 
  "30064771241" -> "68719476861"  [ label = "AST: "] 
  "30064771241" -> "30064771240"  [ label = "AST: "] 
  "30064771244" -> "68719476865"  [ label = "AST: "] 
  "30064771244" -> "30064771243"  [ label = "AST: "] 
  "30064771243" -> "68719476864"  [ label = "AST: "] 
  "30064771243" -> "90194313274"  [ label = "AST: "] 
  "30064771250" -> "68719476872"  [ label = "AST: "] 
  "30064771250" -> "30064771249"  [ label = "AST: "] 
  "30064771249" -> "68719476871"  [ label = "AST: "] 
  "30064771249" -> "30064771246"  [ label = "AST: "] 
  "30064771249" -> "68719476868"  [ label = "AST: "] 
  "30064771249" -> "30064771248"  [ label = "AST: "] 
  "30064771246" -> "30064771245"  [ label = "AST: "] 
  "30064771246" -> "68719476867"  [ label = "AST: "] 
  "30064771246" -> "90194313275"  [ label = "AST: "] 
  "30064771246" -> "90194313276"  [ label = "AST: "] 
  "30064771245" -> "68719476866"  [ label = "AST: "] 
  "30064771245" -> "55834574882"  [ label = "AST: "] 
  "30064771248" -> "30064771247"  [ label = "AST: "] 
  "30064771248" -> "68719476870"  [ label = "AST: "] 
  "30064771248" -> "90194313277"  [ label = "AST: "] 
  "30064771248" -> "90194313278"  [ label = "AST: "] 
  "30064771247" -> "68719476869"  [ label = "AST: "] 
  "30064771247" -> "55834574883"  [ label = "AST: "] 
  "30064771262" -> "68719476873"  [ label = "AST: "] 
  "30064771262" -> "30064771261"  [ label = "AST: "] 
  "30064771261" -> "30064771253"  [ label = "AST: "] 
  "30064771261" -> "30064771260"  [ label = "AST: "] 
  "30064771253" -> "30064771252"  [ label = "AST: "] 
  "30064771253" -> "90194313281"  [ label = "AST: "] 
  "30064771252" -> "30064771251"  [ label = "AST: "] 
  "30064771252" -> "68719476875"  [ label = "AST: "] 
  "30064771252" -> "90194313279"  [ label = "AST: "] 
  "30064771252" -> "90194313280"  [ label = "AST: "] 
  "30064771251" -> "68719476874"  [ label = "AST: "] 
  "30064771251" -> "55834574884"  [ label = "AST: "] 
  "30064771260" -> "68719476881"  [ label = "AST: "] 
  "30064771260" -> "25769803784"  [ label = "AST: "] 
  "30064771260" -> "90194313284"  [ label = "AST: "] 
  "25769803784" -> "30064771257"  [ label = "AST: "] 
  "25769803784" -> "30064771259"  [ label = "AST: "] 
  "30064771257" -> "68719476878"  [ label = "AST: "] 
  "30064771257" -> "90194313283"  [ label = "AST: "] 
  "30064771259" -> "30064771258"  [ label = "AST: "] 
  "30064771259" -> "68719476880"  [ label = "AST: "] 
  "30064771259" -> "30064771256"  [ label = "AST: "] 
  "30064771258" -> "68719476879"  [ label = "AST: "] 
  "30064771258" -> "55834574886"  [ label = "AST: "] 
  "30064771256" -> "30064771255"  [ label = "AST: "] 
  "30064771256" -> "68719476877"  [ label = "AST: "] 
  "30064771256" -> "90194313282"  [ label = "AST: "] 
  "30064771256" -> "30064771254"  [ label = "AST: "] 
  "30064771255" -> "68719476876"  [ label = "AST: "] 
  "30064771255" -> "55834574885"  [ label = "AST: "] 
  "30064771269" -> "68719476882"  [ label = "AST: "] 
  "30064771269" -> "30064771268"  [ label = "AST: "] 
  "30064771268" -> "30064771267"  [ label = "AST: "] 
  "30064771268" -> "90194313289"  [ label = "AST: "] 
  "30064771267" -> "30064771264"  [ label = "AST: "] 
  "30064771267" -> "30064771266"  [ label = "AST: "] 
  "30064771264" -> "30064771263"  [ label = "AST: "] 
  "30064771264" -> "90194313286"  [ label = "AST: "] 
  "30064771263" -> "90194313285"  [ label = "AST: "] 
  "30064771263" -> "68719476883"  [ label = "AST: "] 
  "30064771266" -> "30064771265"  [ label = "AST: "] 
  "30064771266" -> "68719476885"  [ label = "AST: "] 
  "30064771266" -> "90194313287"  [ label = "AST: "] 
  "30064771266" -> "90194313288"  [ label = "AST: "] 
  "30064771265" -> "68719476884"  [ label = "AST: "] 
  "30064771265" -> "55834574887"  [ label = "AST: "] 
  "30064771272" -> "68719476886"  [ label = "AST: "] 
  "30064771272" -> "30064771271"  [ label = "AST: "] 
  "30064771271" -> "30064771270"  [ label = "AST: "] 
  "30064771271" -> "68719476888"  [ label = "AST: "] 
  "30064771271" -> "90194313290"  [ label = "AST: "] 
  "30064771271" -> "90194313291"  [ label = "AST: "] 
  "30064771270" -> "68719476887"  [ label = "AST: "] 
  "30064771270" -> "55834574888"  [ label = "AST: "] 
  "30064771287" -> "68719476889"  [ label = "AST: "] 
  "30064771287" -> "30064771286"  [ label = "AST: "] 
  "30064771286" -> "30064771285"  [ label = "AST: "] 
  "30064771286" -> "90194313298"  [ label = "AST: "] 
  "30064771285" -> "30064771278"  [ label = "AST: "] 
  "30064771285" -> "25769803785"  [ label = "AST: "] 
  "30064771278" -> "30064771277"  [ label = "AST: "] 
  "30064771278" -> "90194313295"  [ label = "AST: "] 
  "30064771277" -> "30064771276"  [ label = "AST: "] 
  "30064771277" -> "68719476893"  [ label = "AST: "] 
  "30064771276" -> "90194313292"  [ label = "AST: "] 
  "30064771276" -> "30064771275"  [ label = "AST: "] 
  "30064771275" -> "68719476892"  [ label = "AST: "] 
  "30064771275" -> "30064771274"  [ label = "AST: "] 
  "30064771274" -> "30064771273"  [ label = "AST: "] 
  "30064771274" -> "68719476891"  [ label = "AST: "] 
  "30064771274" -> "90194313293"  [ label = "AST: "] 
  "30064771274" -> "90194313294"  [ label = "AST: "] 
  "30064771273" -> "68719476890"  [ label = "AST: "] 
  "30064771273" -> "55834574889"  [ label = "AST: "] 
  "25769803785" -> "30064771282"  [ label = "AST: "] 
  "25769803785" -> "30064771284"  [ label = "AST: "] 
  "30064771282" -> "68719476896"  [ label = "AST: "] 
  "30064771282" -> "90194313297"  [ label = "AST: "] 
  "30064771284" -> "30064771283"  [ label = "AST: "] 
  "30064771284" -> "68719476898"  [ label = "AST: "] 
  "30064771284" -> "30064771281"  [ label = "AST: "] 
  "30064771283" -> "68719476897"  [ label = "AST: "] 
  "30064771283" -> "55834574891"  [ label = "AST: "] 
  "30064771281" -> "30064771280"  [ label = "AST: "] 
  "30064771281" -> "68719476895"  [ label = "AST: "] 
  "30064771281" -> "90194313296"  [ label = "AST: "] 
  "30064771281" -> "30064771279"  [ label = "AST: "] 
  "30064771280" -> "68719476894"  [ label = "AST: "] 
  "30064771280" -> "55834574890"  [ label = "AST: "] 
  "30064771291" -> "68719476902"  [ label = "AST: "] 
  "30064771291" -> "30064771290"  [ label = "AST: "] 
  "30064771290" -> "68719476901"  [ label = "AST: "] 
  "30064771290" -> "30064771289"  [ label = "AST: "] 
  "30064771290" -> "90194313300"  [ label = "AST: "] 
  "30064771289" -> "30064771288"  [ label = "AST: "] 
  "30064771289" -> "68719476900"  [ label = "AST: "] 
  "30064771289" -> "90194313299"  [ label = "AST: "] 
  "30064771288" -> "68719476899"  [ label = "AST: "] 
  "30064771288" -> "55834574892"  [ label = "AST: "] 
  "30064771294" -> "30064771293"  [ label = "AST: "] 
  "30064771294" -> "90194313301"  [ label = "AST: "] 
  "30064771293" -> "30064771292"  [ label = "AST: "] 
  "30064771293" -> "90194313302"  [ label = "AST: "] 
  "30064771292" -> "68719476903"  [ label = "AST: "] 
  "30064771292" -> "55834574893"  [ label = "AST: "] 
  "146028888064" -> "68719476904"  [ label = "AST: "] 
  "30064771073" -> "30064771074"  [ label = "CFG: "] 
  "30064771075" -> "55834574848"  [ label = "CFG: "] 
  "30064771080" -> "55834574850"  [ label = "CFG: "] 
  "30064771085" -> "55834574852"  [ label = "CFG: "] 
  "30064771090" -> "55834574854"  [ label = "CFG: "] 
  "30064771219" -> "30064771220"  [ label = "CFG: "] 
  "30064771228" -> "55834574879"  [ label = "CFG: "] 
  "30064771231" -> "30064771232"  [ label = "CFG: "] 
  "30064771244" -> "55834574882"  [ label = "CFG: "] 
  "30064771250" -> "55834574884"  [ label = "CFG: "] 
  "30064771262" -> "30064771263"  [ label = "CFG: "] 
  "30064771269" -> "55834574888"  [ label = "CFG: "] 
  "30064771272" -> "55834574889"  [ label = "CFG: "] 
  "30064771287" -> "55834574892"  [ label = "CFG: "] 
  "30064771291" -> "55834574893"  [ label = "CFG: "] 
  "30064771294" -> "146028888064"  [ label = "CFG: "] 
  "146028888064" -> "128849018881"  [ label = "CFG: "] 
  "30064771074" -> "30064771075"  [ label = "CFG: "] 
  "30064771218" -> "30064771219"  [ label = "CFG: "] 
  "30064771227" -> "30064771228"  [ label = "CFG: "] 
  "30064771230" -> "30064771231"  [ label = "CFG: "] 
  "30064771232" -> "55834574881"  [ label = "CFG: "] 
  "30064771232" -> "30064771238"  [ label = "CFG: "] 
  "30064771243" -> "30064771244"  [ label = "CFG: "] 
  "30064771249" -> "30064771250"  [ label = "CFG: "] 
  "30064771261" -> "30064771262"  [ label = "CFG: "] 
  "30064771268" -> "30064771269"  [ label = "CFG: "] 
  "30064771271" -> "30064771272"  [ label = "CFG: "] 
  "30064771286" -> "30064771287"  [ label = "CFG: "] 
  "30064771290" -> "30064771291"  [ label = "CFG: "] 
  "30064771293" -> "30064771294"  [ label = "CFG: "] 
  "30064771077" -> "55834574849"  [ label = "CFG: "] 
  "30064771079" -> "30064771080"  [ label = "CFG: "] 
  "30064771082" -> "55834574851"  [ label = "CFG: "] 
  "30064771084" -> "30064771085"  [ label = "CFG: "] 
  "30064771087" -> "55834574853"  [ label = "CFG: "] 
  "30064771089" -> "30064771090"  [ label = "CFG: "] 
  "30064771217" -> "30064771218"  [ label = "CFG: "] 
  "30064771225" -> "30064771226"  [ label = "CFG: "] 
  "30064771226" -> "30064771227"  [ label = "CFG: "] 
  "30064771229" -> "30064771230"  [ label = "CFG: "] 
  "30064771237" -> "30064771243"  [ label = "CFG: "] 
  "30064771239" -> "30064771240"  [ label = "CFG: "] 
  "30064771242" -> "30064771243"  [ label = "CFG: "] 
  "30064771246" -> "55834574883"  [ label = "CFG: "] 
  "30064771248" -> "30064771249"  [ label = "CFG: "] 
  "30064771253" -> "30064771257"  [ label = "CFG: "] 
  "30064771260" -> "30064771261"  [ label = "CFG: "] 
  "30064771267" -> "30064771268"  [ label = "CFG: "] 
  "30064771270" -> "30064771271"  [ label = "CFG: "] 
  "30064771285" -> "30064771286"  [ label = "CFG: "] 
  "30064771289" -> "30064771290"  [ label = "CFG: "] 
  "30064771292" -> "30064771293"  [ label = "CFG: "] 
  "30064771076" -> "30064771077"  [ label = "CFG: "] 
  "30064771078" -> "30064771079"  [ label = "CFG: "] 
  "30064771081" -> "30064771082"  [ label = "CFG: "] 
  "30064771083" -> "30064771084"  [ label = "CFG: "] 
  "30064771086" -> "30064771087"  [ label = "CFG: "] 
  "30064771088" -> "30064771089"  [ label = "CFG: "] 
  "30064771215" -> "30064771216"  [ label = "CFG: "] 
  "30064771216" -> "30064771217"  [ label = "CFG: "] 
  "30064771224" -> "30064771225"  [ label = "CFG: "] 
  "55834574879" -> "30064771229"  [ label = "CFG: "] 
  "30064771236" -> "30064771237"  [ label = "CFG: "] 
  "30064771238" -> "30064771239"  [ label = "CFG: "] 
  "30064771245" -> "30064771246"  [ label = "CFG: "] 
  "30064771247" -> "30064771248"  [ label = "CFG: "] 
  "30064771252" -> "30064771253"  [ label = "CFG: "] 
  "30064771264" -> "55834574887"  [ label = "CFG: "] 
  "30064771266" -> "30064771267"  [ label = "CFG: "] 
  "55834574888" -> "30064771270"  [ label = "CFG: "] 
  "30064771278" -> "30064771282"  [ label = "CFG: "] 
  "30064771288" -> "30064771289"  [ label = "CFG: "] 
  "55834574893" -> "30064771292"  [ label = "CFG: "] 
  "55834574848" -> "30064771076"  [ label = "CFG: "] 
  "55834574849" -> "30064771078"  [ label = "CFG: "] 
  "55834574850" -> "30064771081"  [ label = "CFG: "] 
  "55834574851" -> "30064771083"  [ label = "CFG: "] 
  "55834574852" -> "30064771086"  [ label = "CFG: "] 
  "55834574853" -> "30064771088"  [ label = "CFG: "] 
  "30064771214" -> "30064771215"  [ label = "CFG: "] 
  "30064771222" -> "30064771223"  [ label = "CFG: "] 
  "30064771223" -> "30064771224"  [ label = "CFG: "] 
  "30064771235" -> "55834574880"  [ label = "CFG: "] 
  "30064771234" -> "30064771236"  [ label = "CFG: "] 
  "30064771241" -> "30064771242"  [ label = "CFG: "] 
  "55834574882" -> "30064771245"  [ label = "CFG: "] 
  "55834574883" -> "30064771247"  [ label = "CFG: "] 
  "30064771251" -> "30064771252"  [ label = "CFG: "] 
  "30064771257" -> "55834574886"  [ label = "CFG: "] 
  "30064771259" -> "30064771260"  [ label = "CFG: "] 
  "30064771263" -> "30064771264"  [ label = "CFG: "] 
  "30064771265" -> "30064771266"  [ label = "CFG: "] 
  "30064771277" -> "30064771278"  [ label = "CFG: "] 
  "30064771282" -> "55834574891"  [ label = "CFG: "] 
  "30064771284" -> "30064771285"  [ label = "CFG: "] 
  "55834574892" -> "30064771288"  [ label = "CFG: "] 
  "30064771210" -> "55834574878"  [ label = "CFG: "] 
  "30064771213" -> "30064771214"  [ label = "CFG: "] 
  "30064771221" -> "30064771222"  [ label = "CFG: "] 
  "55834574881" -> "30064771235"  [ label = "CFG: "] 
  "30064771233" -> "30064771234"  [ label = "CFG: "] 
  "30064771240" -> "30064771241"  [ label = "CFG: "] 
  "55834574884" -> "30064771251"  [ label = "CFG: "] 
  "30064771258" -> "55834574885"  [ label = "CFG: "] 
  "30064771256" -> "30064771259"  [ label = "CFG: "] 
  "55834574887" -> "30064771265"  [ label = "CFG: "] 
  "30064771276" -> "30064771277"  [ label = "CFG: "] 
  "30064771283" -> "55834574890"  [ label = "CFG: "] 
  "30064771281" -> "30064771284"  [ label = "CFG: "] 
  "30064771209" -> "30064771210"  [ label = "CFG: "] 
  "30064771212" -> "30064771211"  [ label = "CFG: "] 
  "30064771211" -> "30064771213"  [ label = "CFG: "] 
  "30064771220" -> "30064771221"  [ label = "CFG: "] 
  "55834574880" -> "30064771233"  [ label = "CFG: "] 
  "55834574886" -> "30064771258"  [ label = "CFG: "] 
  "30064771255" -> "30064771254"  [ label = "CFG: "] 
  "30064771254" -> "30064771256"  [ label = "CFG: "] 
  "30064771275" -> "30064771276"  [ label = "CFG: "] 
  "55834574891" -> "30064771283"  [ label = "CFG: "] 
  "30064771280" -> "30064771279"  [ label = "CFG: "] 
  "30064771279" -> "30064771281"  [ label = "CFG: "] 
  "30064771206" -> "55834574877"  [ label = "CFG: "] 
  "30064771208" -> "30064771209"  [ label = "CFG: "] 
  "55834574878" -> "30064771212"  [ label = "CFG: "] 
  "55834574885" -> "30064771255"  [ label = "CFG: "] 
  "30064771274" -> "30064771275"  [ label = "CFG: "] 
  "55834574890" -> "30064771280"  [ label = "CFG: "] 
  "30064771205" -> "30064771206"  [ label = "CFG: "] 
  "30064771207" -> "30064771208"  [ label = "CFG: "] 
  "30064771273" -> "30064771274"  [ label = "CFG: "] 
  "30064771204" -> "30064771205"  [ label = "CFG: "] 
  "55834574877" -> "30064771207"  [ label = "CFG: "] 
  "55834574889" -> "30064771273"  [ label = "CFG: "] 
  "30064771203" -> "30064771204"  [ label = "CFG: "] 
  "30064771202" -> "30064771203"  [ label = "CFG: "] 
  "30064771201" -> "30064771202"  [ label = "CFG: "] 
  "30064771198" -> "55834574876"  [ label = "CFG: "] 
  "30064771200" -> "30064771201"  [ label = "CFG: "] 
  "30064771197" -> "30064771198"  [ label = "CFG: "] 
  "30064771199" -> "30064771200"  [ label = "CFG: "] 
  "30064771194" -> "55834574875"  [ label = "CFG: "] 
  "30064771196" -> "30064771197"  [ label = "CFG: "] 
  "55834574876" -> "30064771199"  [ label = "CFG: "] 
  "30064771193" -> "30064771194"  [ label = "CFG: "] 
  "30064771195" -> "30064771196"  [ label = "CFG: "] 
  "30064771190" -> "55834574874"  [ label = "CFG: "] 
  "30064771192" -> "30064771193"  [ label = "CFG: "] 
  "55834574875" -> "30064771195"  [ label = "CFG: "] 
  "30064771189" -> "30064771190"  [ label = "CFG: "] 
  "30064771191" -> "30064771192"  [ label = "CFG: "] 
  "30064771185" -> "55834574873"  [ label = "CFG: "] 
  "30064771188" -> "30064771189"  [ label = "CFG: "] 
  "55834574874" -> "30064771191"  [ label = "CFG: "] 
  "30064771184" -> "30064771185"  [ label = "CFG: "] 
  "30064771187" -> "30064771188"  [ label = "CFG: "] 
  "30064771180" -> "55834574872"  [ label = "CFG: "] 
  "30064771183" -> "30064771184"  [ label = "CFG: "] 
  "30064771186" -> "30064771187"  [ label = "CFG: "] 
  "30064771179" -> "30064771180"  [ label = "CFG: "] 
  "30064771182" -> "30064771183"  [ label = "CFG: "] 
  "55834574873" -> "30064771186"  [ label = "CFG: "] 
  "30064771178" -> "30064771179"  [ label = "CFG: "] 
  "30064771181" -> "30064771182"  [ label = "CFG: "] 
  "30064771176" -> "30064771177"  [ label = "CFG: "] 
  "30064771177" -> "30064771178"  [ label = "CFG: "] 
  "55834574872" -> "30064771181"  [ label = "CFG: "] 
  "30064771175" -> "30064771176"  [ label = "CFG: "] 
  "30064771174" -> "30064771175"  [ label = "CFG: "] 
  "30064771170" -> "55834574871"  [ label = "CFG: "] 
  "30064771173" -> "30064771174"  [ label = "CFG: "] 
  "30064771169" -> "30064771170"  [ label = "CFG: "] 
  "30064771172" -> "30064771171"  [ label = "CFG: "] 
  "30064771171" -> "30064771173"  [ label = "CFG: "] 
  "30064771166" -> "55834574870"  [ label = "CFG: "] 
  "30064771168" -> "30064771169"  [ label = "CFG: "] 
  "55834574871" -> "30064771172"  [ label = "CFG: "] 
  "30064771165" -> "30064771166"  [ label = "CFG: "] 
  "30064771167" -> "30064771168"  [ label = "CFG: "] 
  "30064771162" -> "55834574869"  [ label = "CFG: "] 
  "30064771164" -> "30064771165"  [ label = "CFG: "] 
  "55834574870" -> "30064771167"  [ label = "CFG: "] 
  "30064771161" -> "30064771162"  [ label = "CFG: "] 
  "30064771163" -> "30064771164"  [ label = "CFG: "] 
  "30064771157" -> "55834574868"  [ label = "CFG: "] 
  "30064771160" -> "30064771161"  [ label = "CFG: "] 
  "55834574869" -> "30064771163"  [ label = "CFG: "] 
  "30064771156" -> "30064771157"  [ label = "CFG: "] 
  "30064771159" -> "30064771158"  [ label = "CFG: "] 
  "30064771158" -> "30064771160"  [ label = "CFG: "] 
  "30064771153" -> "55834574867"  [ label = "CFG: "] 
  "30064771155" -> "30064771156"  [ label = "CFG: "] 
  "55834574868" -> "30064771159"  [ label = "CFG: "] 
  "30064771152" -> "30064771153"  [ label = "CFG: "] 
  "30064771154" -> "30064771155"  [ label = "CFG: "] 
  "30064771149" -> "55834574866"  [ label = "CFG: "] 
  "30064771151" -> "30064771152"  [ label = "CFG: "] 
  "55834574867" -> "30064771154"  [ label = "CFG: "] 
  "30064771148" -> "30064771149"  [ label = "CFG: "] 
  "30064771150" -> "30064771151"  [ label = "CFG: "] 
  "30064771146" -> "30064771147"  [ label = "CFG: "] 
  "30064771147" -> "30064771148"  [ label = "CFG: "] 
  "55834574866" -> "30064771150"  [ label = "CFG: "] 
  "30064771145" -> "30064771146"  [ label = "CFG: "] 
  "30064771143" -> "30064771144"  [ label = "CFG: "] 
  "30064771144" -> "30064771145"  [ label = "CFG: "] 
  "30064771142" -> "30064771143"  [ label = "CFG: "] 
  "30064771138" -> "55834574865"  [ label = "CFG: "] 
  "30064771141" -> "30064771142"  [ label = "CFG: "] 
  "30064771137" -> "30064771138"  [ label = "CFG: "] 
  "30064771140" -> "30064771139"  [ label = "CFG: "] 
  "30064771139" -> "30064771141"  [ label = "CFG: "] 
  "30064771134" -> "55834574864"  [ label = "CFG: "] 
  "30064771136" -> "30064771137"  [ label = "CFG: "] 
  "55834574865" -> "30064771140"  [ label = "CFG: "] 
  "30064771133" -> "30064771134"  [ label = "CFG: "] 
  "30064771135" -> "30064771136"  [ label = "CFG: "] 
  "30064771130" -> "55834574863"  [ label = "CFG: "] 
  "30064771132" -> "30064771133"  [ label = "CFG: "] 
  "55834574864" -> "30064771135"  [ label = "CFG: "] 
  "30064771129" -> "30064771130"  [ label = "CFG: "] 
  "30064771131" -> "30064771132"  [ label = "CFG: "] 
  "30064771125" -> "55834574862"  [ label = "CFG: "] 
  "30064771128" -> "30064771129"  [ label = "CFG: "] 
  "55834574863" -> "30064771131"  [ label = "CFG: "] 
  "30064771124" -> "30064771125"  [ label = "CFG: "] 
  "30064771127" -> "30064771126"  [ label = "CFG: "] 
  "30064771126" -> "30064771128"  [ label = "CFG: "] 
  "30064771121" -> "55834574861"  [ label = "CFG: "] 
  "30064771123" -> "30064771124"  [ label = "CFG: "] 
  "55834574862" -> "30064771127"  [ label = "CFG: "] 
  "30064771120" -> "30064771121"  [ label = "CFG: "] 
  "30064771122" -> "30064771123"  [ label = "CFG: "] 
  "30064771117" -> "55834574860"  [ label = "CFG: "] 
  "30064771119" -> "30064771120"  [ label = "CFG: "] 
  "55834574861" -> "30064771122"  [ label = "CFG: "] 
  "30064771116" -> "30064771117"  [ label = "CFG: "] 
  "30064771118" -> "30064771119"  [ label = "CFG: "] 
  "30064771113" -> "55834574859"  [ label = "CFG: "] 
  "30064771115" -> "30064771116"  [ label = "CFG: "] 
  "55834574860" -> "30064771118"  [ label = "CFG: "] 
  "30064771112" -> "30064771113"  [ label = "CFG: "] 
  "30064771114" -> "30064771115"  [ label = "CFG: "] 
  "30064771109" -> "55834574858"  [ label = "CFG: "] 
  "30064771111" -> "30064771112"  [ label = "CFG: "] 
  "55834574859" -> "30064771114"  [ label = "CFG: "] 
  "30064771108" -> "30064771109"  [ label = "CFG: "] 
  "30064771110" -> "30064771111"  [ label = "CFG: "] 
  "30064771105" -> "55834574857"  [ label = "CFG: "] 
  "30064771107" -> "30064771108"  [ label = "CFG: "] 
  "55834574858" -> "30064771110"  [ label = "CFG: "] 
  "30064771104" -> "30064771105"  [ label = "CFG: "] 
  "30064771106" -> "30064771107"  [ label = "CFG: "] 
  "30064771100" -> "55834574856"  [ label = "CFG: "] 
  "30064771103" -> "30064771104"  [ label = "CFG: "] 
  "55834574857" -> "30064771106"  [ label = "CFG: "] 
  "30064771099" -> "30064771100"  [ label = "CFG: "] 
  "30064771102" -> "30064771101"  [ label = "CFG: "] 
  "30064771101" -> "30064771103"  [ label = "CFG: "] 
  "30064771095" -> "55834574855"  [ label = "CFG: "] 
  "30064771098" -> "30064771099"  [ label = "CFG: "] 
  "55834574856" -> "30064771102"  [ label = "CFG: "] 
  "30064771094" -> "30064771095"  [ label = "CFG: "] 
  "30064771097" -> "30064771096"  [ label = "CFG: "] 
  "30064771096" -> "30064771098"  [ label = "CFG: "] 
  "30064771093" -> "30064771094"  [ label = "CFG: "] 
  "55834574855" -> "30064771097"  [ label = "CFG: "] 
  "30064771092" -> "30064771091"  [ label = "CFG: "] 
  "30064771091" -> "30064771093"  [ label = "CFG: "] 
  "55834574854" -> "30064771092"  [ label = "CFG: "] 
  "111669149697" -> "30064771073"  [ label = "CFG: "] 
  "146028888064" -> "128849018881"  [ label = "DDG: &lt;RET&gt;"] 
  "30064771073" -> "128849018881"  [ label = "DDG: setup_translation()"] 
  "30064771075" -> "128849018881"  [ label = "DDG: session['observer']"] 
  "30064771075" -> "128849018881"  [ label = "DDG: session['observer'] = 1"] 
  "30064771077" -> "128849018881"  [ label = "DDG: tmp0 = request.args"] 
  "30064771079" -> "128849018881"  [ label = "DDG: tmp0"] 
  "30064771079" -> "128849018881"  [ label = "DDG: tmp0.get('i', None)"] 
  "30064771080" -> "128849018881"  [ label = "DDG: i = tmp0 = request.args
tmp0.get('i', None)"] 
  "30064771082" -> "128849018881"  [ label = "DDG: tmp1 = request.args"] 
  "30064771084" -> "128849018881"  [ label = "DDG: tmp1"] 
  "30064771084" -> "128849018881"  [ label = "DDG: tmp1.get('uid', None)"] 
  "30064771085" -> "128849018881"  [ label = "DDG: uid = tmp1 = request.args
tmp1.get('uid', None)"] 
  "30064771087" -> "128849018881"  [ label = "DDG: request.args"] 
  "30064771087" -> "128849018881"  [ label = "DDG: tmp2 = request.args"] 
  "30064771089" -> "128849018881"  [ label = "DDG: tmp2"] 
  "30064771089" -> "128849018881"  [ label = "DDG: tmp2.get('userid', None)"] 
  "30064771090" -> "128849018881"  [ label = "DDG: userid = tmp2 = request.args
tmp2.get('userid', None)"] 
  "30064771093" -> "128849018881"  [ label = "DDG: generate_csrf()"] 
  "30064771094" -> "128849018881"  [ label = "DDG: json.dumps(generate_csrf())"] 
  "30064771095" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf())"] 
  "30064771099" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot;"] 
  "30064771098" -> "128849018881"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771099" -> "128849018881"  [ label = "DDG: json.dumps(url_for('index', i = i))"] 
  "30064771100" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i))"] 
  "30064771104" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot;"] 
  "30064771103" -> "128849018881"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771104" -> "128849018881"  [ label = "DDG: json.dumps(url_for('index', i = i, _external = True))"] 
  "30064771105" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True))"] 
  "30064771108" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot;"] 
  "30064771109" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i)"] 
  "30064771112" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot;"] 
  "30064771111" -> "128849018881"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771112" -> "128849018881"  [ label = "DDG: json.dumps(NOTIFICATION_CONTAINER)"] 
  "30064771113" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER)"] 
  "30064771116" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot;"] 
  "30064771115" -> "128849018881"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771116" -> "128849018881"  [ label = "DDG: json.dumps(NOTIFICATION_MESSAGE)"] 
  "30064771117" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE)"] 
  "30064771120" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot;"] 
  "30064771121" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid)"] 
  "30064771124" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot;"] 
  "30064771125" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i)"] 
  "30064771129" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot;"] 
  "30064771130" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid))"] 
  "30064771133" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot;"] 
  "30064771134" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid)"] 
  "30064771137" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot;"] 
  "30064771138" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i)"] 
  "30064771142" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot;"] 
  "30064771143" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid))"] 
  "30064771145" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot;"] 
  "30064771146" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL)"] 
  "30064771148" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot;"] 
  "30064771149" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL)"] 
  "30064771152" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot;"] 
  "30064771153" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid)"] 
  "30064771156" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot;"] 
  "30064771157" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i)"] 
  "30064771161" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot;"] 
  "30064771162" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid))"] 
  "30064771165" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot;"] 
  "30064771166" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid)"] 
  "30064771169" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot;"] 
  "30064771169" -> "128849018881"  [ label = "DDG: json.dumps(i)"] 
  "30064771170" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i)"] 
  "30064771174" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot;"] 
  "30064771175" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid))"] 
  "30064771176" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot;"] 
  "30064771178" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;'"] 
  "30064771178" -> "128849018881"  [ label = "DDG: url_for('get_variables', i = i)"] 
  "30064771179" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i)"] 
  "30064771180" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;'"] 
  "30064771184" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot;"] 
  "30064771185" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2))"] 
  "30064771189" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot;"] 
  "30064771187" -> "128849018881"  [ label = "DDG: daconfig"] 
  "30064771188" -> "128849018881"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771189" -> "128849018881"  [ label = "DDG: str(daconfig.get('currency decimal places', 2))"] 
  "30064771190" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2))"] 
  "30064771193" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            if (cleanNum != 'NaN') {
              $(this).val(cleanNum);
            }
          }
        });
        $(&quot;#dahelp&quot;).on(&quot;shown.bs.tab&quot;, function(){
          window.scrollTo(0, 1);
          $(&quot;#dahelptoggle&quot;).removeClass('daactivetext')
          $(&quot;#dahelptoggle&quot;).blur();
        });
        $(&quot;#dasourcetoggle&quot;).on(&quot;click&quot;, function(){
          $(this).parent().toggleClass(&quot;active&quot;);
          $(this).blur();
        });
        $('#dabackToQuestion').click(function(event){
          $('#daquestionlabel').tab('show');
        });
        daShowIfInProcess = true;
        var daTriggerQueries = [];
        var daInputsSeen = {};
        function daOnlyUnique(value, index, self){
          return self.indexOf(value) === index;
        }
        $(&quot;.dajsshowif&quot;).each(function(){
          var showIfDiv = this;
          var jsInfo = JSON.parse(atou($(this).data('jsshowif')));
          var showIfSign = jsInfo['sign'];
          var showIfMode = jsInfo['mode'];
          var jsExpression = jsInfo['expression'];
          jsInfo['vars'].forEach(function(infoItem, i){
            var showIfVars = [];
            var initShowIfVar = utoa(infoItem).replace(/[\\n=]/g, '');
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
            if (elem.length &gt; 0){
              showIfVars.push(initShowIfVar);
            }
            if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
              for (var j = 0; j &lt; daVarLookupMulti[initShowIfVar].length; j++){
                var altShowIfVar = daVarLookupMulti[initShowIfVar][j];
                var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
                var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
                if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                  showIfVars.push(altShowIfVar);
                }
              }
            }
            if (showIfVars.length == 0){
              console.log(&quot;ERROR: reference to non-existent field &quot; + infoItem);
            }
            showIfVars.forEach(function(showIfVar){
              var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var varToUse = infoItem;
              var showHideDiv = function(speed){
                var elem = daGetField(varToUse);
                if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                  return;
                }
                var resultt = eval(jsExpression);
                if(resultt){
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                }
                else{
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                var leader = false;
                if (!daShowIfInProcess){
                  daShowIfInProcess = true;
                  daInputsSeen = {};
                  leader = true;
                }
                $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                  if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                    $(this).trigger('change');
                  }
                  daInputsSeen[$(this).attr('id')] = true;
                });
                if (leader){
                  daShowIfInProcess = false;
                }
              };
              var showHideDivImmediate = function(){
                showHideDiv.apply(this, [null]);
              }
              var showHideDivFast = function(){
                showHideDiv.apply(this, ['fast']);
              }
              daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
              daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
              $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            });
          });
        });
        $(&quot;.dashowif&quot;).each(function(){
          var showIfVars = [];
          var showIfSign = $(this).data('showif-sign');
          var showIfMode = parseInt($(this).data('showif-mode'));
          var initShowIfVar = $(this).data('showif-var');
          var varName = atou(initShowIfVar);
          var elem = [];
          if (varName.endsWith('[nota]') || varName.endsWith('[aota]')){
            var signifier = varName.endsWith('[nota]') ? 'nota' : 'aota';
            var cbVarName = varName.replace(/\[[na]ota\]$/, '');
            $('fieldset.da-field-checkboxes').each(function(){
              var thisVarName = atou($(this).data('varname'));
              if (thisVarName == cbVarName){
                elem = $(this).find('input.da' + signifier + '-checkbox');
                initShowIfVar = $(elem).attr('name');
              }
            });
          }
          else {
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
          }
          if (elem.length &gt; 0){
            showIfVars.push(initShowIfVar);
          }
          if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
            var n = daVarLookupMulti[initShowIfVar].length;
            for (var i = 0; i &lt; n; i++){
              var altShowIfVar = daVarLookupMulti[initShowIfVar][i];
              var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
              if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                showIfVars.push(altShowIfVar);
              }
            }
          }
          var showIfVal = $(this).data('showif-val');
          var saveAs = $(this).data('saveas');
          var showIfDiv = this;
          showIfVars.forEach(function(showIfVar){
            var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var showHideDiv = function(speed){
              var elem = daGetField(varName, showIfDiv);
              if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                return;
              }
              var theVal;
              var showifParents = $(this).parents(&quot;.dashowif&quot;);
              if (showifParents.length !== 0 &amp;&amp; !($(showifParents[0]).data(&quot;isVisible&quot;) == '1')){
                theVal = '';
                //console.log(&quot;Setting theVal to blank.&quot;);
              }
              else if ($(this).attr('type') == &quot;checkbox&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  //console.log('manually setting checkbox value to False');
                  theVal = 'False';
                }
              }
              else if ($(this).attr('type') == &quot;radio&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  theVal = '';
                }
                else if (theVal != '' &amp;&amp; $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              else{
                theVal = $(this).val();
                if (theVal != '' &amp;&amp; $(this).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              //console.log(&quot;this is &quot; + $(this).attr('id') + &quot; and saveAs is &quot; + atou(saveAs) + &quot; and showIfVar is &quot; + atou(showIfVar) + &quot; and val is &quot; + String(theVal) + &quot; and showIfVal is &quot; + String(showIfVal));
              if(daShowIfCompare(theVal, showIfVal)){
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
              }
              else{
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
              }
              var leader = false;
              if (!daShowIfInProcess){
                daShowIfInProcess = true;
                daInputsSeen = {};
                leader = true;
              }
              $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                  $(this).trigger('change');
                }
                daInputsSeen[$(this).attr('id')] = true;
              });
              if (leader){
                daShowIfInProcess = false;
              }
            };
            var showHideDivImmediate = function(){
              showHideDiv.apply(this, [null]);
            }
            var showHideDivFast = function(){
              showHideDiv.apply(this, ['fast']);
            }
            daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
            daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
            $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
          });
        });
        function daTriggerAllShowHides(){
          var daUniqueTriggerQueries = daTriggerQueries.filter(daOnlyUnique);
          var daFirstTime = true;
          var daTries = 0;
          while ((daFirstTime || daShowHideHappened) &amp;&amp; ++daTries &lt; 100){
            daShowHideHappened = false;
            daFirstTime = false;
            var n = daUniqueTriggerQueries.length;
            for (var i = 0; i &lt; n; ++i){
              $(daUniqueTriggerQueries[i]).trigger('daManualTrigger');
            }
          }
          if (daTries &gt;= 100){
            console.log(&quot;Too many contradictory 'show if' conditions&quot;);
          }
        }
        if (daTriggerQueries.length &gt; 0){
          daTriggerAllShowHides();
        }
        $(&quot;.danavlink&quot;).last().addClass('thelast');
        $(&quot;.danavlink&quot;).each(function(){
          if ($(this).hasClass('btn') &amp;&amp; !$(this).hasClass('danotavailableyet')){
            var the_a = $(this);
            var the_delay = 1000 + 250 * parseInt($(this).data('index'));
            setTimeout(function(){
              $(the_a).removeClass('&quot;&quot;&quot;"] 
  "30064771194" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            if (cleanNum != 'NaN') {
              $(this).val(cleanNum);
            }
          }
        });
        $(&quot;#dahelp&quot;).on(&quot;shown.bs.tab&quot;, function(){
          window.scrollTo(0, 1);
          $(&quot;#dahelptoggle&quot;).removeClass('daactivetext')
          $(&quot;#dahelptoggle&quot;).blur();
        });
        $(&quot;#dasourcetoggle&quot;).on(&quot;click&quot;, function(){
          $(this).parent().toggleClass(&quot;active&quot;);
          $(this).blur();
        });
        $('#dabackToQuestion').click(function(event){
          $('#daquestionlabel').tab('show');
        });
        daShowIfInProcess = true;
        var daTriggerQueries = [];
        var daInputsSeen = {};
        function daOnlyUnique(value, index, self){
          return self.indexOf(value) === index;
        }
        $(&quot;.dajsshowif&quot;).each(function(){
          var showIfDiv = this;
          var jsInfo = JSON.parse(atou($(this).data('jsshowif')));
          var showIfSign = jsInfo['sign'];
          var showIfMode = jsInfo['mode'];
          var jsExpression = jsInfo['expression'];
          jsInfo['vars'].forEach(function(infoItem, i){
            var showIfVars = [];
            var initShowIfVar = utoa(infoItem).replace(/[\\n=]/g, '');
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
            if (elem.length &gt; 0){
              showIfVars.push(initShowIfVar);
            }
            if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
              for (var j = 0; j &lt; daVarLookupMulti[initShowIfVar].length; j++){
                var altShowIfVar = daVarLookupMulti[initShowIfVar][j];
                var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
                var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
                if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                  showIfVars.push(altShowIfVar);
                }
              }
            }
            if (showIfVars.length == 0){
              console.log(&quot;ERROR: reference to non-existent field &quot; + infoItem);
            }
            showIfVars.forEach(function(showIfVar){
              var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var varToUse = infoItem;
              var showHideDiv = function(speed){
                var elem = daGetField(varToUse);
                if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                  return;
                }
                var resultt = eval(jsExpression);
                if(resultt){
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                }
                else{
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                var leader = false;
                if (!daShowIfInProcess){
                  daShowIfInProcess = true;
                  daInputsSeen = {};
                  leader = true;
                }
                $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                  if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                    $(this).trigger('change');
                  }
                  daInputsSeen[$(this).attr('id')] = true;
                });
                if (leader){
                  daShowIfInProcess = false;
                }
              };
              var showHideDivImmediate = function(){
                showHideDiv.apply(this, [null]);
              }
              var showHideDivFast = function(){
                showHideDiv.apply(this, ['fast']);
              }
              daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
              daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
              $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            });
          });
        });
        $(&quot;.dashowif&quot;).each(function(){
          var showIfVars = [];
          var showIfSign = $(this).data('showif-sign');
          var showIfMode = parseInt($(this).data('showif-mode'));
          var initShowIfVar = $(this).data('showif-var');
          var varName = atou(initShowIfVar);
          var elem = [];
          if (varName.endsWith('[nota]') || varName.endsWith('[aota]')){
            var signifier = varName.endsWith('[nota]') ? 'nota' : 'aota';
            var cbVarName = varName.replace(/\[[na]ota\]$/, '');
            $('fieldset.da-field-checkboxes').each(function(){
              var thisVarName = atou($(this).data('varname'));
              if (thisVarName == cbVarName){
                elem = $(this).find('input.da' + signifier + '-checkbox');
                initShowIfVar = $(elem).attr('name');
              }
            });
          }
          else {
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
          }
          if (elem.length &gt; 0){
            showIfVars.push(initShowIfVar);
          }
          if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
            var n = daVarLookupMulti[initShowIfVar].length;
            for (var i = 0; i &lt; n; i++){
              var altShowIfVar = daVarLookupMulti[initShowIfVar][i];
              var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
              if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                showIfVars.push(altShowIfVar);
              }
            }
          }
          var showIfVal = $(this).data('showif-val');
          var saveAs = $(this).data('saveas');
          var showIfDiv = this;
          showIfVars.forEach(function(showIfVar){
            var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var showHideDiv = function(speed){
              var elem = daGetField(varName, showIfDiv);
              if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                return;
              }
              var theVal;
              var showifParents = $(this).parents(&quot;.dashowif&quot;);
              if (showifParents.length !== 0 &amp;&amp; !($(showifParents[0]).data(&quot;isVisible&quot;) == '1')){
                theVal = '';
                //console.log(&quot;Setting theVal to blank.&quot;);
              }
              else if ($(this).attr('type') == &quot;checkbox&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  //console.log('manually setting checkbox value to False');
                  theVal = 'False';
                }
              }
              else if ($(this).attr('type') == &quot;radio&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  theVal = '';
                }
                else if (theVal != '' &amp;&amp; $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              else{
                theVal = $(this).val();
                if (theVal != '' &amp;&amp; $(this).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              //console.log(&quot;this is &quot; + $(this).attr('id') + &quot; and saveAs is &quot; + atou(saveAs) + &quot; and showIfVar is &quot; + atou(showIfVar) + &quot; and val is &quot; + String(theVal) + &quot; and showIfVal is &quot; + String(showIfVal));
              if(daShowIfCompare(theVal, showIfVal)){
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
              }
              else{
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
              }
              var leader = false;
              if (!daShowIfInProcess){
                daShowIfInProcess = true;
                daInputsSeen = {};
                leader = true;
              }
              $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                  $(this).trigger('change');
                }
                daInputsSeen[$(this).attr('id')] = true;
              });
              if (leader){
                daShowIfInProcess = false;
              }
            };
            var showHideDivImmediate = function(){
              showHideDiv.apply(this, [null]);
            }
            var showHideDivFast = function(){
              showHideDiv.apply(this, ['fast']);
            }
            daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
            daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
            $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
          });
        });
        function daTriggerAllShowHides(){
          var daUniqueTriggerQueries = daTriggerQueries.filter(daOnlyUnique);
          var daFirstTime = true;
          var daTries = 0;
          while ((daFirstTime || daShowHideHappened) &amp;&amp; ++daTries &lt; 100){
            daShowHideHappened = false;
            daFirstTime = false;
            var n = daUniqueTriggerQueries.length;
            for (var i = 0; i &lt; n; ++i){
              $(daUniqueTriggerQueries[i]).trigger('daManualTrigger');
            }
          }
          if (daTries &gt;= 100){
            console.log(&quot;Too many contradictory 'show if' conditions&quot;);
          }
        }
        if (daTriggerQueries.length &gt; 0){
          daTriggerAllShowHides();
        }
        $(&quot;.danavlink&quot;).last().addClass('thelast');
        $(&quot;.danavlink&quot;).each(function(){
          if ($(this).hasClass('btn') &amp;&amp; !$(this).hasClass('danotavailableyet')){
            var the_a = $(this);
            var the_delay = 1000 + 250 * parseInt($(this).data('index'));
            setTimeout(function(){
              $(the_a).removeClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE']"] 
  "30064771197" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            if (cleanNum != 'NaN') {
              $(this).val(cleanNum);
            }
          }
        });
        $(&quot;#dahelp&quot;).on(&quot;shown.bs.tab&quot;, function(){
          window.scrollTo(0, 1);
          $(&quot;#dahelptoggle&quot;).removeClass('daactivetext')
          $(&quot;#dahelptoggle&quot;).blur();
        });
        $(&quot;#dasourcetoggle&quot;).on(&quot;click&quot;, function(){
          $(this).parent().toggleClass(&quot;active&quot;);
          $(this).blur();
        });
        $('#dabackToQuestion').click(function(event){
          $('#daquestionlabel').tab('show');
        });
        daShowIfInProcess = true;
        var daTriggerQueries = [];
        var daInputsSeen = {};
        function daOnlyUnique(value, index, self){
          return self.indexOf(value) === index;
        }
        $(&quot;.dajsshowif&quot;).each(function(){
          var showIfDiv = this;
          var jsInfo = JSON.parse(atou($(this).data('jsshowif')));
          var showIfSign = jsInfo['sign'];
          var showIfMode = jsInfo['mode'];
          var jsExpression = jsInfo['expression'];
          jsInfo['vars'].forEach(function(infoItem, i){
            var showIfVars = [];
            var initShowIfVar = utoa(infoItem).replace(/[\\n=]/g, '');
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
            if (elem.length &gt; 0){
              showIfVars.push(initShowIfVar);
            }
            if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
              for (var j = 0; j &lt; daVarLookupMulti[initShowIfVar].length; j++){
                var altShowIfVar = daVarLookupMulti[initShowIfVar][j];
                var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
                var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
                if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                  showIfVars.push(altShowIfVar);
                }
              }
            }
            if (showIfVars.length == 0){
              console.log(&quot;ERROR: reference to non-existent field &quot; + infoItem);
            }
            showIfVars.forEach(function(showIfVar){
              var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var varToUse = infoItem;
              var showHideDiv = function(speed){
                var elem = daGetField(varToUse);
                if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                  return;
                }
                var resultt = eval(jsExpression);
                if(resultt){
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                }
                else{
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                var leader = false;
                if (!daShowIfInProcess){
                  daShowIfInProcess = true;
                  daInputsSeen = {};
                  leader = true;
                }
                $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                  if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                    $(this).trigger('change');
                  }
                  daInputsSeen[$(this).attr('id')] = true;
                });
                if (leader){
                  daShowIfInProcess = false;
                }
              };
              var showHideDivImmediate = function(){
                showHideDiv.apply(this, [null]);
              }
              var showHideDivFast = function(){
                showHideDiv.apply(this, ['fast']);
              }
              daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
              daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
              $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            });
          });
        });
        $(&quot;.dashowif&quot;).each(function(){
          var showIfVars = [];
          var showIfSign = $(this).data('showif-sign');
          var showIfMode = parseInt($(this).data('showif-mode'));
          var initShowIfVar = $(this).data('showif-var');
          var varName = atou(initShowIfVar);
          var elem = [];
          if (varName.endsWith('[nota]') || varName.endsWith('[aota]')){
            var signifier = varName.endsWith('[nota]') ? 'nota' : 'aota';
            var cbVarName = varName.replace(/\[[na]ota\]$/, '');
            $('fieldset.da-field-checkboxes').each(function(){
              var thisVarName = atou($(this).data('varname'));
              if (thisVarName == cbVarName){
                elem = $(this).find('input.da' + signifier + '-checkbox');
                initShowIfVar = $(elem).attr('name');
              }
            });
          }
          else {
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
          }
          if (elem.length &gt; 0){
            showIfVars.push(initShowIfVar);
          }
          if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
            var n = daVarLookupMulti[initShowIfVar].length;
            for (var i = 0; i &lt; n; i++){
              var altShowIfVar = daVarLookupMulti[initShowIfVar][i];
              var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
              if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                showIfVars.push(altShowIfVar);
              }
            }
          }
          var showIfVal = $(this).data('showif-val');
          var saveAs = $(this).data('saveas');
          var showIfDiv = this;
          showIfVars.forEach(function(showIfVar){
            var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var showHideDiv = function(speed){
              var elem = daGetField(varName, showIfDiv);
              if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                return;
              }
              var theVal;
              var showifParents = $(this).parents(&quot;.dashowif&quot;);
              if (showifParents.length !== 0 &amp;&amp; !($(showifParents[0]).data(&quot;isVisible&quot;) == '1')){
                theVal = '';
                //console.log(&quot;Setting theVal to blank.&quot;);
              }
              else if ($(this).attr('type') == &quot;checkbox&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  //console.log('manually setting checkbox value to False');
                  theVal = 'False';
                }
              }
              else if ($(this).attr('type') == &quot;radio&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  theVal = '';
                }
                else if (theVal != '' &amp;&amp; $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              else{
                theVal = $(this).val();
                if (theVal != '' &amp;&amp; $(this).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              //console.log(&quot;this is &quot; + $(this).attr('id') + &quot; and saveAs is &quot; + atou(saveAs) + &quot; and showIfVar is &quot; + atou(showIfVar) + &quot; and val is &quot; + String(theVal) + &quot; and showIfVal is &quot; + String(showIfVal));
              if(daShowIfCompare(theVal, showIfVal)){
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
              }
              else{
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
              }
              var leader = false;
              if (!daShowIfInProcess){
                daShowIfInProcess = true;
                daInputsSeen = {};
                leader = true;
              }
              $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                  $(this).trigger('change');
                }
                daInputsSeen[$(this).attr('id')] = true;
              });
              if (leader){
                daShowIfInProcess = false;
              }
            };
            var showHideDivImmediate = function(){
              showHideDiv.apply(this, [null]);
            }
            var showHideDivFast = function(){
              showHideDiv.apply(this, ['fast']);
            }
            daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
            daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
            $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
          });
        });
        function daTriggerAllShowHides(){
          var daUniqueTriggerQueries = daTriggerQueries.filter(daOnlyUnique);
          var daFirstTime = true;
          var daTries = 0;
          while ((daFirstTime || daShowHideHappened) &amp;&amp; ++daTries &lt; 100){
            daShowHideHappened = false;
            daFirstTime = false;
            var n = daUniqueTriggerQueries.length;
            for (var i = 0; i &lt; n; ++i){
              $(daUniqueTriggerQueries[i]).trigger('daManualTrigger');
            }
          }
          if (daTries &gt;= 100){
            console.log(&quot;Too many contradictory 'show if' conditions&quot;);
          }
        }
        if (daTriggerQueries.length &gt; 0){
          daTriggerAllShowHides();
        }
        $(&quot;.danavlink&quot;).last().addClass('thelast');
        $(&quot;.danavlink&quot;).each(function(){
          if ($(this).hasClass('btn') &amp;&amp; !$(this).hasClass('danotavailableyet')){
            var the_a = $(this);
            var the_delay = 1000 + 250 * parseInt($(this).data('index'));
            setTimeout(function(){
              $(the_a).removeClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;secondary');
              if ($(the_a).hasClass('active')){
                $(the_a).addClass('&quot;&quot;&quot;"] 
  "30064771198" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            if (cleanNum != 'NaN') {
              $(this).val(cleanNum);
            }
          }
        });
        $(&quot;#dahelp&quot;).on(&quot;shown.bs.tab&quot;, function(){
          window.scrollTo(0, 1);
          $(&quot;#dahelptoggle&quot;).removeClass('daactivetext')
          $(&quot;#dahelptoggle&quot;).blur();
        });
        $(&quot;#dasourcetoggle&quot;).on(&quot;click&quot;, function(){
          $(this).parent().toggleClass(&quot;active&quot;);
          $(this).blur();
        });
        $('#dabackToQuestion').click(function(event){
          $('#daquestionlabel').tab('show');
        });
        daShowIfInProcess = true;
        var daTriggerQueries = [];
        var daInputsSeen = {};
        function daOnlyUnique(value, index, self){
          return self.indexOf(value) === index;
        }
        $(&quot;.dajsshowif&quot;).each(function(){
          var showIfDiv = this;
          var jsInfo = JSON.parse(atou($(this).data('jsshowif')));
          var showIfSign = jsInfo['sign'];
          var showIfMode = jsInfo['mode'];
          var jsExpression = jsInfo['expression'];
          jsInfo['vars'].forEach(function(infoItem, i){
            var showIfVars = [];
            var initShowIfVar = utoa(infoItem).replace(/[\\n=]/g, '');
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
            if (elem.length &gt; 0){
              showIfVars.push(initShowIfVar);
            }
            if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
              for (var j = 0; j &lt; daVarLookupMulti[initShowIfVar].length; j++){
                var altShowIfVar = daVarLookupMulti[initShowIfVar][j];
                var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
                var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
                if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                  showIfVars.push(altShowIfVar);
                }
              }
            }
            if (showIfVars.length == 0){
              console.log(&quot;ERROR: reference to non-existent field &quot; + infoItem);
            }
            showIfVars.forEach(function(showIfVar){
              var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var varToUse = infoItem;
              var showHideDiv = function(speed){
                var elem = daGetField(varToUse);
                if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                  return;
                }
                var resultt = eval(jsExpression);
                if(resultt){
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                }
                else{
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                var leader = false;
                if (!daShowIfInProcess){
                  daShowIfInProcess = true;
                  daInputsSeen = {};
                  leader = true;
                }
                $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                  if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                    $(this).trigger('change');
                  }
                  daInputsSeen[$(this).attr('id')] = true;
                });
                if (leader){
                  daShowIfInProcess = false;
                }
              };
              var showHideDivImmediate = function(){
                showHideDiv.apply(this, [null]);
              }
              var showHideDivFast = function(){
                showHideDiv.apply(this, ['fast']);
              }
              daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
              daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
              $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            });
          });
        });
        $(&quot;.dashowif&quot;).each(function(){
          var showIfVars = [];
          var showIfSign = $(this).data('showif-sign');
          var showIfMode = parseInt($(this).data('showif-mode'));
          var initShowIfVar = $(this).data('showif-var');
          var varName = atou(initShowIfVar);
          var elem = [];
          if (varName.endsWith('[nota]') || varName.endsWith('[aota]')){
            var signifier = varName.endsWith('[nota]') ? 'nota' : 'aota';
            var cbVarName = varName.replace(/\[[na]ota\]$/, '');
            $('fieldset.da-field-checkboxes').each(function(){
              var thisVarName = atou($(this).data('varname'));
              if (thisVarName == cbVarName){
                elem = $(this).find('input.da' + signifier + '-checkbox');
                initShowIfVar = $(elem).attr('name');
              }
            });
          }
          else {
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
          }
          if (elem.length &gt; 0){
            showIfVars.push(initShowIfVar);
          }
          if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
            var n = daVarLookupMulti[initShowIfVar].length;
            for (var i = 0; i &lt; n; i++){
              var altShowIfVar = daVarLookupMulti[initShowIfVar][i];
              var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
              if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                showIfVars.push(altShowIfVar);
              }
            }
          }
          var showIfVal = $(this).data('showif-val');
          var saveAs = $(this).data('saveas');
          var showIfDiv = this;
          showIfVars.forEach(function(showIfVar){
            var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var showHideDiv = function(speed){
              var elem = daGetField(varName, showIfDiv);
              if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                return;
              }
              var theVal;
              var showifParents = $(this).parents(&quot;.dashowif&quot;);
              if (showifParents.length !== 0 &amp;&amp; !($(showifParents[0]).data(&quot;isVisible&quot;) == '1')){
                theVal = '';
                //console.log(&quot;Setting theVal to blank.&quot;);
              }
              else if ($(this).attr('type') == &quot;checkbox&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  //console.log('manually setting checkbox value to False');
                  theVal = 'False';
                }
              }
              else if ($(this).attr('type') == &quot;radio&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  theVal = '';
                }
                else if (theVal != '' &amp;&amp; $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              else{
                theVal = $(this).val();
                if (theVal != '' &amp;&amp; $(this).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              //console.log(&quot;this is &quot; + $(this).attr('id') + &quot; and saveAs is &quot; + atou(saveAs) + &quot; and showIfVar is &quot; + atou(showIfVar) + &quot; and val is &quot; + String(theVal) + &quot; and showIfVal is &quot; + String(showIfVal));
              if(daShowIfCompare(theVal, showIfVal)){
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
              }
              else{
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
              }
              var leader = false;
              if (!daShowIfInProcess){
                daShowIfInProcess = true;
                daInputsSeen = {};
                leader = true;
              }
              $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                  $(this).trigger('change');
                }
                daInputsSeen[$(this).attr('id')] = true;
              });
              if (leader){
                daShowIfInProcess = false;
              }
            };
            var showHideDivImmediate = function(){
              showHideDiv.apply(this, [null]);
            }
            var showHideDivFast = function(){
              showHideDiv.apply(this, ['fast']);
            }
            daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
            daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
            $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
          });
        });
        function daTriggerAllShowHides(){
          var daUniqueTriggerQueries = daTriggerQueries.filter(daOnlyUnique);
          var daFirstTime = true;
          var daTries = 0;
          while ((daFirstTime || daShowHideHappened) &amp;&amp; ++daTries &lt; 100){
            daShowHideHappened = false;
            daFirstTime = false;
            var n = daUniqueTriggerQueries.length;
            for (var i = 0; i &lt; n; ++i){
              $(daUniqueTriggerQueries[i]).trigger('daManualTrigger');
            }
          }
          if (daTries &gt;= 100){
            console.log(&quot;Too many contradictory 'show if' conditions&quot;);
          }
        }
        if (daTriggerQueries.length &gt; 0){
          daTriggerAllShowHides();
        }
        $(&quot;.danavlink&quot;).last().addClass('thelast');
        $(&quot;.danavlink&quot;).each(function(){
          if ($(this).hasClass('btn') &amp;&amp; !$(this).hasClass('danotavailableyet')){
            var the_a = $(this);
            var the_delay = 1000 + 250 * parseInt($(this).data('index'));
            setTimeout(function(){
              $(the_a).removeClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;secondary');
              if ($(the_a).hasClass('active')){
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE']"] 
  "30064771201" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            if (cleanNum != 'NaN') {
              $(this).val(cleanNum);
            }
          }
        });
        $(&quot;#dahelp&quot;).on(&quot;shown.bs.tab&quot;, function(){
          window.scrollTo(0, 1);
          $(&quot;#dahelptoggle&quot;).removeClass('daactivetext')
          $(&quot;#dahelptoggle&quot;).blur();
        });
        $(&quot;#dasourcetoggle&quot;).on(&quot;click&quot;, function(){
          $(this).parent().toggleClass(&quot;active&quot;);
          $(this).blur();
        });
        $('#dabackToQuestion').click(function(event){
          $('#daquestionlabel').tab('show');
        });
        daShowIfInProcess = true;
        var daTriggerQueries = [];
        var daInputsSeen = {};
        function daOnlyUnique(value, index, self){
          return self.indexOf(value) === index;
        }
        $(&quot;.dajsshowif&quot;).each(function(){
          var showIfDiv = this;
          var jsInfo = JSON.parse(atou($(this).data('jsshowif')));
          var showIfSign = jsInfo['sign'];
          var showIfMode = jsInfo['mode'];
          var jsExpression = jsInfo['expression'];
          jsInfo['vars'].forEach(function(infoItem, i){
            var showIfVars = [];
            var initShowIfVar = utoa(infoItem).replace(/[\\n=]/g, '');
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
            if (elem.length &gt; 0){
              showIfVars.push(initShowIfVar);
            }
            if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
              for (var j = 0; j &lt; daVarLookupMulti[initShowIfVar].length; j++){
                var altShowIfVar = daVarLookupMulti[initShowIfVar][j];
                var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
                var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
                if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                  showIfVars.push(altShowIfVar);
                }
              }
            }
            if (showIfVars.length == 0){
              console.log(&quot;ERROR: reference to non-existent field &quot; + infoItem);
            }
            showIfVars.forEach(function(showIfVar){
              var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var varToUse = infoItem;
              var showHideDiv = function(speed){
                var elem = daGetField(varToUse);
                if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                  return;
                }
                var resultt = eval(jsExpression);
                if(resultt){
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                }
                else{
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                var leader = false;
                if (!daShowIfInProcess){
                  daShowIfInProcess = true;
                  daInputsSeen = {};
                  leader = true;
                }
                $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                  if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                    $(this).trigger('change');
                  }
                  daInputsSeen[$(this).attr('id')] = true;
                });
                if (leader){
                  daShowIfInProcess = false;
                }
              };
              var showHideDivImmediate = function(){
                showHideDiv.apply(this, [null]);
              }
              var showHideDivFast = function(){
                showHideDiv.apply(this, ['fast']);
              }
              daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
              daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
              $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            });
          });
        });
        $(&quot;.dashowif&quot;).each(function(){
          var showIfVars = [];
          var showIfSign = $(this).data('showif-sign');
          var showIfMode = parseInt($(this).data('showif-mode'));
          var initShowIfVar = $(this).data('showif-var');
          var varName = atou(initShowIfVar);
          var elem = [];
          if (varName.endsWith('[nota]') || varName.endsWith('[aota]')){
            var signifier = varName.endsWith('[nota]') ? 'nota' : 'aota';
            var cbVarName = varName.replace(/\[[na]ota\]$/, '');
            $('fieldset.da-field-checkboxes').each(function(){
              var thisVarName = atou($(this).data('varname'));
              if (thisVarName == cbVarName){
                elem = $(this).find('input.da' + signifier + '-checkbox');
                initShowIfVar = $(elem).attr('name');
              }
            });
          }
          else {
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
          }
          if (elem.length &gt; 0){
            showIfVars.push(initShowIfVar);
          }
          if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
            var n = daVarLookupMulti[initShowIfVar].length;
            for (var i = 0; i &lt; n; i++){
              var altShowIfVar = daVarLookupMulti[initShowIfVar][i];
              var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
              if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                showIfVars.push(altShowIfVar);
              }
            }
          }
          var showIfVal = $(this).data('showif-val');
          var saveAs = $(this).data('saveas');
          var showIfDiv = this;
          showIfVars.forEach(function(showIfVar){
            var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var showHideDiv = function(speed){
              var elem = daGetField(varName, showIfDiv);
              if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                return;
              }
              var theVal;
              var showifParents = $(this).parents(&quot;.dashowif&quot;);
              if (showifParents.length !== 0 &amp;&amp; !($(showifParents[0]).data(&quot;isVisible&quot;) == '1')){
                theVal = '';
                //console.log(&quot;Setting theVal to blank.&quot;);
              }
              else if ($(this).attr('type') == &quot;checkbox&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  //console.log('manually setting checkbox value to False');
                  theVal = 'False';
                }
              }
              else if ($(this).attr('type') == &quot;radio&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  theVal = '';
                }
                else if (theVal != '' &amp;&amp; $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              else{
                theVal = $(this).val();
                if (theVal != '' &amp;&amp; $(this).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              //console.log(&quot;this is &quot; + $(this).attr('id') + &quot; and saveAs is &quot; + atou(saveAs) + &quot; and showIfVar is &quot; + atou(showIfVar) + &quot; and val is &quot; + String(theVal) + &quot; and showIfVal is &quot; + String(showIfVal));
              if(daShowIfCompare(theVal, showIfVal)){
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
              }
              else{
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
              }
              var leader = false;
              if (!daShowIfInProcess){
                daShowIfInProcess = true;
                daInputsSeen = {};
                leader = true;
              }
              $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                  $(this).trigger('change');
                }
                daInputsSeen[$(this).attr('id')] = true;
              });
              if (leader){
                daShowIfInProcess = false;
              }
            };
            var showHideDivImmediate = function(){
              showHideDiv.apply(this, [null]);
            }
            var showHideDivFast = function(){
              showHideDiv.apply(this, ['fast']);
            }
            daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
            daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
            $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
          });
        });
        function daTriggerAllShowHides(){
          var daUniqueTriggerQueries = daTriggerQueries.filter(daOnlyUnique);
          var daFirstTime = true;
          var daTries = 0;
          while ((daFirstTime || daShowHideHappened) &amp;&amp; ++daTries &lt; 100){
            daShowHideHappened = false;
            daFirstTime = false;
            var n = daUniqueTriggerQueries.length;
            for (var i = 0; i &lt; n; ++i){
              $(daUniqueTriggerQueries[i]).trigger('daManualTrigger');
            }
          }
          if (daTries &gt;= 100){
            console.log(&quot;Too many contradictory 'show if' conditions&quot;);
          }
        }
        if (daTriggerQueries.length &gt; 0){
          daTriggerAllShowHides();
        }
        $(&quot;.danavlink&quot;).last().addClass('thelast');
        $(&quot;.danavlink&quot;).each(function(){
          if ($(this).hasClass('btn') &amp;&amp; !$(this).hasClass('danotavailableyet')){
            var the_a = $(this);
            var the_delay = 1000 + 250 * parseInt($(this).data('index'));
            setTimeout(function(){
              $(the_a).removeClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;secondary');
              if ($(the_a).hasClass('active')){
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;success');
              }
              else{
                $(the_a).addClass('&quot;&quot;&quot;"] 
  "30064771201" -> "128849018881"  [ label = "DDG: app.config['BUTTON_STYLE']"] 
  "30064771202" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            if (cleanNum != 'NaN') {
              $(this).val(cleanNum);
            }
          }
        });
        $(&quot;#dahelp&quot;).on(&quot;shown.bs.tab&quot;, function(){
          window.scrollTo(0, 1);
          $(&quot;#dahelptoggle&quot;).removeClass('daactivetext')
          $(&quot;#dahelptoggle&quot;).blur();
        });
        $(&quot;#dasourcetoggle&quot;).on(&quot;click&quot;, function(){
          $(this).parent().toggleClass(&quot;active&quot;);
          $(this).blur();
        });
        $('#dabackToQuestion').click(function(event){
          $('#daquestionlabel').tab('show');
        });
        daShowIfInProcess = true;
        var daTriggerQueries = [];
        var daInputsSeen = {};
        function daOnlyUnique(value, index, self){
          return self.indexOf(value) === index;
        }
        $(&quot;.dajsshowif&quot;).each(function(){
          var showIfDiv = this;
          var jsInfo = JSON.parse(atou($(this).data('jsshowif')));
          var showIfSign = jsInfo['sign'];
          var showIfMode = jsInfo['mode'];
          var jsExpression = jsInfo['expression'];
          jsInfo['vars'].forEach(function(infoItem, i){
            var showIfVars = [];
            var initShowIfVar = utoa(infoItem).replace(/[\\n=]/g, '');
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
            if (elem.length &gt; 0){
              showIfVars.push(initShowIfVar);
            }
            if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
              for (var j = 0; j &lt; daVarLookupMulti[initShowIfVar].length; j++){
                var altShowIfVar = daVarLookupMulti[initShowIfVar][j];
                var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
                var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
                if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                  showIfVars.push(altShowIfVar);
                }
              }
            }
            if (showIfVars.length == 0){
              console.log(&quot;ERROR: reference to non-existent field &quot; + infoItem);
            }
            showIfVars.forEach(function(showIfVar){
              var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var varToUse = infoItem;
              var showHideDiv = function(speed){
                var elem = daGetField(varToUse);
                if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                  return;
                }
                var resultt = eval(jsExpression);
                if(resultt){
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                }
                else{
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                var leader = false;
                if (!daShowIfInProcess){
                  daShowIfInProcess = true;
                  daInputsSeen = {};
                  leader = true;
                }
                $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                  if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                    $(this).trigger('change');
                  }
                  daInputsSeen[$(this).attr('id')] = true;
                });
                if (leader){
                  daShowIfInProcess = false;
                }
              };
              var showHideDivImmediate = function(){
                showHideDiv.apply(this, [null]);
              }
              var showHideDivFast = function(){
                showHideDiv.apply(this, ['fast']);
              }
              daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
              daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
              $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            });
          });
        });
        $(&quot;.dashowif&quot;).each(function(){
          var showIfVars = [];
          var showIfSign = $(this).data('showif-sign');
          var showIfMode = parseInt($(this).data('showif-mode'));
          var initShowIfVar = $(this).data('showif-var');
          var varName = atou(initShowIfVar);
          var elem = [];
          if (varName.endsWith('[nota]') || varName.endsWith('[aota]')){
            var signifier = varName.endsWith('[nota]') ? 'nota' : 'aota';
            var cbVarName = varName.replace(/\[[na]ota\]$/, '');
            $('fieldset.da-field-checkboxes').each(function(){
              var thisVarName = atou($(this).data('varname'));
              if (thisVarName == cbVarName){
                elem = $(this).find('input.da' + signifier + '-checkbox');
                initShowIfVar = $(elem).attr('name');
              }
            });
          }
          else {
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
          }
          if (elem.length &gt; 0){
            showIfVars.push(initShowIfVar);
          }
          if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
            var n = daVarLookupMulti[initShowIfVar].length;
            for (var i = 0; i &lt; n; i++){
              var altShowIfVar = daVarLookupMulti[initShowIfVar][i];
              var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
              if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                showIfVars.push(altShowIfVar);
              }
            }
          }
          var showIfVal = $(this).data('showif-val');
          var saveAs = $(this).data('saveas');
          var showIfDiv = this;
          showIfVars.forEach(function(showIfVar){
            var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var showHideDiv = function(speed){
              var elem = daGetField(varName, showIfDiv);
              if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                return;
              }
              var theVal;
              var showifParents = $(this).parents(&quot;.dashowif&quot;);
              if (showifParents.length !== 0 &amp;&amp; !($(showifParents[0]).data(&quot;isVisible&quot;) == '1')){
                theVal = '';
                //console.log(&quot;Setting theVal to blank.&quot;);
              }
              else if ($(this).attr('type') == &quot;checkbox&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  //console.log('manually setting checkbox value to False');
                  theVal = 'False';
                }
              }
              else if ($(this).attr('type') == &quot;radio&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  theVal = '';
                }
                else if (theVal != '' &amp;&amp; $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              else{
                theVal = $(this).val();
                if (theVal != '' &amp;&amp; $(this).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              //console.log(&quot;this is &quot; + $(this).attr('id') + &quot; and saveAs is &quot; + atou(saveAs) + &quot; and showIfVar is &quot; + atou(showIfVar) + &quot; and val is &quot; + String(theVal) + &quot; and showIfVal is &quot; + String(showIfVal));
              if(daShowIfCompare(theVal, showIfVal)){
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
              }
              else{
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
              }
              var leader = false;
              if (!daShowIfInProcess){
                daShowIfInProcess = true;
                daInputsSeen = {};
                leader = true;
              }
              $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                  $(this).trigger('change');
                }
                daInputsSeen[$(this).attr('id')] = true;
              });
              if (leader){
                daShowIfInProcess = false;
              }
            };
            var showHideDivImmediate = function(){
              showHideDiv.apply(this, [null]);
            }
            var showHideDivFast = function(){
              showHideDiv.apply(this, ['fast']);
            }
            daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
            daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
            $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
          });
        });
        function daTriggerAllShowHides(){
          var daUniqueTriggerQueries = daTriggerQueries.filter(daOnlyUnique);
          var daFirstTime = true;
          var daTries = 0;
          while ((daFirstTime || daShowHideHappened) &amp;&amp; ++daTries &lt; 100){
            daShowHideHappened = false;
            daFirstTime = false;
            var n = daUniqueTriggerQueries.length;
            for (var i = 0; i &lt; n; ++i){
              $(daUniqueTriggerQueries[i]).trigger('daManualTrigger');
            }
          }
          if (daTries &gt;= 100){
            console.log(&quot;Too many contradictory 'show if' conditions&quot;);
          }
        }
        if (daTriggerQueries.length &gt; 0){
          daTriggerAllShowHides();
        }
        $(&quot;.danavlink&quot;).last().addClass('thelast');
        $(&quot;.danavlink&quot;).each(function(){
          if ($(this).hasClass('btn') &amp;&amp; !$(this).hasClass('danotavailableyet')){
            var the_a = $(this);
            var the_delay = 1000 + 250 * parseInt($(this).data('index'));
            setTimeout(function(){
              $(the_a).removeClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;secondary');
              if ($(the_a).hasClass('active')){
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;success');
              }
              else{
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE']"] 
  "30064771203" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            if (cleanNum != 'NaN') {
              $(this).val(cleanNum);
            }
          }
        });
        $(&quot;#dahelp&quot;).on(&quot;shown.bs.tab&quot;, function(){
          window.scrollTo(0, 1);
          $(&quot;#dahelptoggle&quot;).removeClass('daactivetext')
          $(&quot;#dahelptoggle&quot;).blur();
        });
        $(&quot;#dasourcetoggle&quot;).on(&quot;click&quot;, function(){
          $(this).parent().toggleClass(&quot;active&quot;);
          $(this).blur();
        });
        $('#dabackToQuestion').click(function(event){
          $('#daquestionlabel').tab('show');
        });
        daShowIfInProcess = true;
        var daTriggerQueries = [];
        var daInputsSeen = {};
        function daOnlyUnique(value, index, self){
          return self.indexOf(value) === index;
        }
        $(&quot;.dajsshowif&quot;).each(function(){
          var showIfDiv = this;
          var jsInfo = JSON.parse(atou($(this).data('jsshowif')));
          var showIfSign = jsInfo['sign'];
          var showIfMode = jsInfo['mode'];
          var jsExpression = jsInfo['expression'];
          jsInfo['vars'].forEach(function(infoItem, i){
            var showIfVars = [];
            var initShowIfVar = utoa(infoItem).replace(/[\\n=]/g, '');
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
            if (elem.length &gt; 0){
              showIfVars.push(initShowIfVar);
            }
            if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
              for (var j = 0; j &lt; daVarLookupMulti[initShowIfVar].length; j++){
                var altShowIfVar = daVarLookupMulti[initShowIfVar][j];
                var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
                var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
                if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                  showIfVars.push(altShowIfVar);
                }
              }
            }
            if (showIfVars.length == 0){
              console.log(&quot;ERROR: reference to non-existent field &quot; + infoItem);
            }
            showIfVars.forEach(function(showIfVar){
              var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var varToUse = infoItem;
              var showHideDiv = function(speed){
                var elem = daGetField(varToUse);
                if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                  return;
                }
                var resultt = eval(jsExpression);
                if(resultt){
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                }
                else{
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                var leader = false;
                if (!daShowIfInProcess){
                  daShowIfInProcess = true;
                  daInputsSeen = {};
                  leader = true;
                }
                $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                  if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                    $(this).trigger('change');
                  }
                  daInputsSeen[$(this).attr('id')] = true;
                });
                if (leader){
                  daShowIfInProcess = false;
                }
              };
              var showHideDivImmediate = function(){
                showHideDiv.apply(this, [null]);
              }
              var showHideDivFast = function(){
                showHideDiv.apply(this, ['fast']);
              }
              daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
              daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
              $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            });
          });
        });
        $(&quot;.dashowif&quot;).each(function(){
          var showIfVars = [];
          var showIfSign = $(this).data('showif-sign');
          var showIfMode = parseInt($(this).data('showif-mode'));
          var initShowIfVar = $(this).data('showif-var');
          var varName = atou(initShowIfVar);
          var elem = [];
          if (varName.endsWith('[nota]') || varName.endsWith('[aota]')){
            var signifier = varName.endsWith('[nota]') ? 'nota' : 'aota';
            var cbVarName = varName.replace(/\[[na]ota\]$/, '');
            $('fieldset.da-field-checkboxes').each(function(){
              var thisVarName = atou($(this).data('varname'));
              if (thisVarName == cbVarName){
                elem = $(this).find('input.da' + signifier + '-checkbox');
                initShowIfVar = $(elem).attr('name');
              }
            });
          }
          else {
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
          }
          if (elem.length &gt; 0){
            showIfVars.push(initShowIfVar);
          }
          if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
            var n = daVarLookupMulti[initShowIfVar].length;
            for (var i = 0; i &lt; n; i++){
              var altShowIfVar = daVarLookupMulti[initShowIfVar][i];
              var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
              if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                showIfVars.push(altShowIfVar);
              }
            }
          }
          var showIfVal = $(this).data('showif-val');
          var saveAs = $(this).data('saveas');
          var showIfDiv = this;
          showIfVars.forEach(function(showIfVar){
            var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var showHideDiv = function(speed){
              var elem = daGetField(varName, showIfDiv);
              if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                return;
              }
              var theVal;
              var showifParents = $(this).parents(&quot;.dashowif&quot;);
              if (showifParents.length !== 0 &amp;&amp; !($(showifParents[0]).data(&quot;isVisible&quot;) == '1')){
                theVal = '';
                //console.log(&quot;Setting theVal to blank.&quot;);
              }
              else if ($(this).attr('type') == &quot;checkbox&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  //console.log('manually setting checkbox value to False');
                  theVal = 'False';
                }
              }
              else if ($(this).attr('type') == &quot;radio&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  theVal = '';
                }
                else if (theVal != '' &amp;&amp; $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              else{
                theVal = $(this).val();
                if (theVal != '' &amp;&amp; $(this).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              //console.log(&quot;this is &quot; + $(this).attr('id') + &quot; and saveAs is &quot; + atou(saveAs) + &quot; and showIfVar is &quot; + atou(showIfVar) + &quot; and val is &quot; + String(theVal) + &quot; and showIfVal is &quot; + String(showIfVal));
              if(daShowIfCompare(theVal, showIfVal)){
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
              }
              else{
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
              }
              var leader = false;
              if (!daShowIfInProcess){
                daShowIfInProcess = true;
                daInputsSeen = {};
                leader = true;
              }
              $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                  $(this).trigger('change');
                }
                daInputsSeen[$(this).attr('id')] = true;
              });
              if (leader){
                daShowIfInProcess = false;
              }
            };
            var showHideDivImmediate = function(){
              showHideDiv.apply(this, [null]);
            }
            var showHideDivFast = function(){
              showHideDiv.apply(this, ['fast']);
            }
            daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
            daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
            $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
          });
        });
        function daTriggerAllShowHides(){
          var daUniqueTriggerQueries = daTriggerQueries.filter(daOnlyUnique);
          var daFirstTime = true;
          var daTries = 0;
          while ((daFirstTime || daShowHideHappened) &amp;&amp; ++daTries &lt; 100){
            daShowHideHappened = false;
            daFirstTime = false;
            var n = daUniqueTriggerQueries.length;
            for (var i = 0; i &lt; n; ++i){
              $(daUniqueTriggerQueries[i]).trigger('daManualTrigger');
            }
          }
          if (daTries &gt;= 100){
            console.log(&quot;Too many contradictory 'show if' conditions&quot;);
          }
        }
        if (daTriggerQueries.length &gt; 0){
          daTriggerAllShowHides();
        }
        $(&quot;.danavlink&quot;).last().addClass('thelast');
        $(&quot;.danavlink&quot;).each(function(){
          if ($(this).hasClass('btn') &amp;&amp; !$(this).hasClass('danotavailableyet')){
            var the_a = $(this);
            var the_delay = 1000 + 250 * parseInt($(this).data('index'));
            setTimeout(function(){
              $(the_a).removeClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;secondary');
              if ($(the_a).hasClass('active')){
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;success');
              }
              else{
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;warning');
              }
            }, the_delay);
          }
        });
        daShowIfInProcess = false;
        // daDisable = setTimeout(function(){
        //   $(&quot;#daform&quot;).find('button[type=&quot;submit&quot;]').prop(&quot;disabled&quot;, true);
        //   //$(&quot;#daform&quot;).find(':input').prop(&quot;disabled&quot;, true);
        // }, 1);
        $(&quot;#daform&quot;).each(function(){
          $(this).find(':input').on('change', daOnChange);
        });
        daInitialized = true;
        daShowingHelp = 0;
        setTimeout(function(){
          $(&quot;#daflash .alert-success&quot;).hide(300, function(){
            $(self).remove();
          });
        }, 3000);
      }
      $( document ).ready(function(){
        daInitialize(1);
        var daDefaultAllowList = bootstrap.Tooltip.Default.allowList;
        daDefaultAllowList['*'].push('style');
        daDefaultAllowList['a'].push('style');
        daDefaultAllowList['img'].push('style');
        $( window ).bind('unload', function() {
          if (daSocket != null &amp;&amp; daSocket.connected){
            daSocket.emit('terminate');
          }
        });
        if (location.protocol === 'http:' || document.location.protocol === 'http:'){
            daSocket = io.connect('http://' + document.domain + '/observer', {path: '&quot;&quot;&quot;"] 
  "30064771204" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            if (cleanNum != 'NaN') {
              $(this).val(cleanNum);
            }
          }
        });
        $(&quot;#dahelp&quot;).on(&quot;shown.bs.tab&quot;, function(){
          window.scrollTo(0, 1);
          $(&quot;#dahelptoggle&quot;).removeClass('daactivetext')
          $(&quot;#dahelptoggle&quot;).blur();
        });
        $(&quot;#dasourcetoggle&quot;).on(&quot;click&quot;, function(){
          $(this).parent().toggleClass(&quot;active&quot;);
          $(this).blur();
        });
        $('#dabackToQuestion').click(function(event){
          $('#daquestionlabel').tab('show');
        });
        daShowIfInProcess = true;
        var daTriggerQueries = [];
        var daInputsSeen = {};
        function daOnlyUnique(value, index, self){
          return self.indexOf(value) === index;
        }
        $(&quot;.dajsshowif&quot;).each(function(){
          var showIfDiv = this;
          var jsInfo = JSON.parse(atou($(this).data('jsshowif')));
          var showIfSign = jsInfo['sign'];
          var showIfMode = jsInfo['mode'];
          var jsExpression = jsInfo['expression'];
          jsInfo['vars'].forEach(function(infoItem, i){
            var showIfVars = [];
            var initShowIfVar = utoa(infoItem).replace(/[\\n=]/g, '');
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
            if (elem.length &gt; 0){
              showIfVars.push(initShowIfVar);
            }
            if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
              for (var j = 0; j &lt; daVarLookupMulti[initShowIfVar].length; j++){
                var altShowIfVar = daVarLookupMulti[initShowIfVar][j];
                var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
                var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
                if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                  showIfVars.push(altShowIfVar);
                }
              }
            }
            if (showIfVars.length == 0){
              console.log(&quot;ERROR: reference to non-existent field &quot; + infoItem);
            }
            showIfVars.forEach(function(showIfVar){
              var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var varToUse = infoItem;
              var showHideDiv = function(speed){
                var elem = daGetField(varToUse);
                if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                  return;
                }
                var resultt = eval(jsExpression);
                if(resultt){
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                }
                else{
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                var leader = false;
                if (!daShowIfInProcess){
                  daShowIfInProcess = true;
                  daInputsSeen = {};
                  leader = true;
                }
                $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                  if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                    $(this).trigger('change');
                  }
                  daInputsSeen[$(this).attr('id')] = true;
                });
                if (leader){
                  daShowIfInProcess = false;
                }
              };
              var showHideDivImmediate = function(){
                showHideDiv.apply(this, [null]);
              }
              var showHideDivFast = function(){
                showHideDiv.apply(this, ['fast']);
              }
              daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
              daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
              $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            });
          });
        });
        $(&quot;.dashowif&quot;).each(function(){
          var showIfVars = [];
          var showIfSign = $(this).data('showif-sign');
          var showIfMode = parseInt($(this).data('showif-mode'));
          var initShowIfVar = $(this).data('showif-var');
          var varName = atou(initShowIfVar);
          var elem = [];
          if (varName.endsWith('[nota]') || varName.endsWith('[aota]')){
            var signifier = varName.endsWith('[nota]') ? 'nota' : 'aota';
            var cbVarName = varName.replace(/\[[na]ota\]$/, '');
            $('fieldset.da-field-checkboxes').each(function(){
              var thisVarName = atou($(this).data('varname'));
              if (thisVarName == cbVarName){
                elem = $(this).find('input.da' + signifier + '-checkbox');
                initShowIfVar = $(elem).attr('name');
              }
            });
          }
          else {
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
          }
          if (elem.length &gt; 0){
            showIfVars.push(initShowIfVar);
          }
          if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
            var n = daVarLookupMulti[initShowIfVar].length;
            for (var i = 0; i &lt; n; i++){
              var altShowIfVar = daVarLookupMulti[initShowIfVar][i];
              var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
              if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                showIfVars.push(altShowIfVar);
              }
            }
          }
          var showIfVal = $(this).data('showif-val');
          var saveAs = $(this).data('saveas');
          var showIfDiv = this;
          showIfVars.forEach(function(showIfVar){
            var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var showHideDiv = function(speed){
              var elem = daGetField(varName, showIfDiv);
              if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                return;
              }
              var theVal;
              var showifParents = $(this).parents(&quot;.dashowif&quot;);
              if (showifParents.length !== 0 &amp;&amp; !($(showifParents[0]).data(&quot;isVisible&quot;) == '1')){
                theVal = '';
                //console.log(&quot;Setting theVal to blank.&quot;);
              }
              else if ($(this).attr('type') == &quot;checkbox&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  //console.log('manually setting checkbox value to False');
                  theVal = 'False';
                }
              }
              else if ($(this).attr('type') == &quot;radio&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  theVal = '';
                }
                else if (theVal != '' &amp;&amp; $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              else{
                theVal = $(this).val();
                if (theVal != '' &amp;&amp; $(this).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              //console.log(&quot;this is &quot; + $(this).attr('id') + &quot; and saveAs is &quot; + atou(saveAs) + &quot; and showIfVar is &quot; + atou(showIfVar) + &quot; and val is &quot; + String(theVal) + &quot; and showIfVal is &quot; + String(showIfVal));
              if(daShowIfCompare(theVal, showIfVal)){
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
              }
              else{
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
              }
              var leader = false;
              if (!daShowIfInProcess){
                daShowIfInProcess = true;
                daInputsSeen = {};
                leader = true;
              }
              $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                  $(this).trigger('change');
                }
                daInputsSeen[$(this).attr('id')] = true;
              });
              if (leader){
                daShowIfInProcess = false;
              }
            };
            var showHideDivImmediate = function(){
              showHideDiv.apply(this, [null]);
            }
            var showHideDivFast = function(){
              showHideDiv.apply(this, ['fast']);
            }
            daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
            daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
            $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
          });
        });
        function daTriggerAllShowHides(){
          var daUniqueTriggerQueries = daTriggerQueries.filter(daOnlyUnique);
          var daFirstTime = true;
          var daTries = 0;
          while ((daFirstTime || daShowHideHappened) &amp;&amp; ++daTries &lt; 100){
            daShowHideHappened = false;
            daFirstTime = false;
            var n = daUniqueTriggerQueries.length;
            for (var i = 0; i &lt; n; ++i){
              $(daUniqueTriggerQueries[i]).trigger('daManualTrigger');
            }
          }
          if (daTries &gt;= 100){
            console.log(&quot;Too many contradictory 'show if' conditions&quot;);
          }
        }
        if (daTriggerQueries.length &gt; 0){
          daTriggerAllShowHides();
        }
        $(&quot;.danavlink&quot;).last().addClass('thelast');
        $(&quot;.danavlink&quot;).each(function(){
          if ($(this).hasClass('btn') &amp;&amp; !$(this).hasClass('danotavailableyet')){
            var the_a = $(this);
            var the_delay = 1000 + 250 * parseInt($(this).data('index'));
            setTimeout(function(){
              $(the_a).removeClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;secondary');
              if ($(the_a).hasClass('active')){
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;success');
              }
              else{
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;warning');
              }
            }, the_delay);
          }
        });
        daShowIfInProcess = false;
        // daDisable = setTimeout(function(){
        //   $(&quot;#daform&quot;).find('button[type=&quot;submit&quot;]').prop(&quot;disabled&quot;, true);
        //   //$(&quot;#daform&quot;).find(':input').prop(&quot;disabled&quot;, true);
        // }, 1);
        $(&quot;#daform&quot;).each(function(){
          $(this).find(':input').on('change', daOnChange);
        });
        daInitialized = true;
        daShowingHelp = 0;
        setTimeout(function(){
          $(&quot;#daflash .alert-success&quot;).hide(300, function(){
            $(self).remove();
          });
        }, 3000);
      }
      $( document ).ready(function(){
        daInitialize(1);
        var daDefaultAllowList = bootstrap.Tooltip.Default.allowList;
        daDefaultAllowList['*'].push('style');
        daDefaultAllowList['a'].push('style');
        daDefaultAllowList['img'].push('style');
        $( window ).bind('unload', function() {
          if (daSocket != null &amp;&amp; daSocket.connected){
            daSocket.emit('terminate');
          }
        });
        if (location.protocol === 'http:' || document.location.protocol === 'http:'){
            daSocket = io.connect('http://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT"] 
  "30064771205" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            if (cleanNum != 'NaN') {
              $(this).val(cleanNum);
            }
          }
        });
        $(&quot;#dahelp&quot;).on(&quot;shown.bs.tab&quot;, function(){
          window.scrollTo(0, 1);
          $(&quot;#dahelptoggle&quot;).removeClass('daactivetext')
          $(&quot;#dahelptoggle&quot;).blur();
        });
        $(&quot;#dasourcetoggle&quot;).on(&quot;click&quot;, function(){
          $(this).parent().toggleClass(&quot;active&quot;);
          $(this).blur();
        });
        $('#dabackToQuestion').click(function(event){
          $('#daquestionlabel').tab('show');
        });
        daShowIfInProcess = true;
        var daTriggerQueries = [];
        var daInputsSeen = {};
        function daOnlyUnique(value, index, self){
          return self.indexOf(value) === index;
        }
        $(&quot;.dajsshowif&quot;).each(function(){
          var showIfDiv = this;
          var jsInfo = JSON.parse(atou($(this).data('jsshowif')));
          var showIfSign = jsInfo['sign'];
          var showIfMode = jsInfo['mode'];
          var jsExpression = jsInfo['expression'];
          jsInfo['vars'].forEach(function(infoItem, i){
            var showIfVars = [];
            var initShowIfVar = utoa(infoItem).replace(/[\\n=]/g, '');
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
            if (elem.length &gt; 0){
              showIfVars.push(initShowIfVar);
            }
            if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
              for (var j = 0; j &lt; daVarLookupMulti[initShowIfVar].length; j++){
                var altShowIfVar = daVarLookupMulti[initShowIfVar][j];
                var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
                var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
                if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                  showIfVars.push(altShowIfVar);
                }
              }
            }
            if (showIfVars.length == 0){
              console.log(&quot;ERROR: reference to non-existent field &quot; + infoItem);
            }
            showIfVars.forEach(function(showIfVar){
              var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var varToUse = infoItem;
              var showHideDiv = function(speed){
                var elem = daGetField(varToUse);
                if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                  return;
                }
                var resultt = eval(jsExpression);
                if(resultt){
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                }
                else{
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                var leader = false;
                if (!daShowIfInProcess){
                  daShowIfInProcess = true;
                  daInputsSeen = {};
                  leader = true;
                }
                $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                  if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                    $(this).trigger('change');
                  }
                  daInputsSeen[$(this).attr('id')] = true;
                });
                if (leader){
                  daShowIfInProcess = false;
                }
              };
              var showHideDivImmediate = function(){
                showHideDiv.apply(this, [null]);
              }
              var showHideDivFast = function(){
                showHideDiv.apply(this, ['fast']);
              }
              daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
              daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
              $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            });
          });
        });
        $(&quot;.dashowif&quot;).each(function(){
          var showIfVars = [];
          var showIfSign = $(this).data('showif-sign');
          var showIfMode = parseInt($(this).data('showif-mode'));
          var initShowIfVar = $(this).data('showif-var');
          var varName = atou(initShowIfVar);
          var elem = [];
          if (varName.endsWith('[nota]') || varName.endsWith('[aota]')){
            var signifier = varName.endsWith('[nota]') ? 'nota' : 'aota';
            var cbVarName = varName.replace(/\[[na]ota\]$/, '');
            $('fieldset.da-field-checkboxes').each(function(){
              var thisVarName = atou($(this).data('varname'));
              if (thisVarName == cbVarName){
                elem = $(this).find('input.da' + signifier + '-checkbox');
                initShowIfVar = $(elem).attr('name');
              }
            });
          }
          else {
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
          }
          if (elem.length &gt; 0){
            showIfVars.push(initShowIfVar);
          }
          if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
            var n = daVarLookupMulti[initShowIfVar].length;
            for (var i = 0; i &lt; n; i++){
              var altShowIfVar = daVarLookupMulti[initShowIfVar][i];
              var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
              if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                showIfVars.push(altShowIfVar);
              }
            }
          }
          var showIfVal = $(this).data('showif-val');
          var saveAs = $(this).data('saveas');
          var showIfDiv = this;
          showIfVars.forEach(function(showIfVar){
            var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var showHideDiv = function(speed){
              var elem = daGetField(varName, showIfDiv);
              if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                return;
              }
              var theVal;
              var showifParents = $(this).parents(&quot;.dashowif&quot;);
              if (showifParents.length !== 0 &amp;&amp; !($(showifParents[0]).data(&quot;isVisible&quot;) == '1')){
                theVal = '';
                //console.log(&quot;Setting theVal to blank.&quot;);
              }
              else if ($(this).attr('type') == &quot;checkbox&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  //console.log('manually setting checkbox value to False');
                  theVal = 'False';
                }
              }
              else if ($(this).attr('type') == &quot;radio&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  theVal = '';
                }
                else if (theVal != '' &amp;&amp; $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              else{
                theVal = $(this).val();
                if (theVal != '' &amp;&amp; $(this).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              //console.log(&quot;this is &quot; + $(this).attr('id') + &quot; and saveAs is &quot; + atou(saveAs) + &quot; and showIfVar is &quot; + atou(showIfVar) + &quot; and val is &quot; + String(theVal) + &quot; and showIfVal is &quot; + String(showIfVal));
              if(daShowIfCompare(theVal, showIfVal)){
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
              }
              else{
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
              }
              var leader = false;
              if (!daShowIfInProcess){
                daShowIfInProcess = true;
                daInputsSeen = {};
                leader = true;
              }
              $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                  $(this).trigger('change');
                }
                daInputsSeen[$(this).attr('id')] = true;
              });
              if (leader){
                daShowIfInProcess = false;
              }
            };
            var showHideDivImmediate = function(){
              showHideDiv.apply(this, [null]);
            }
            var showHideDivFast = function(){
              showHideDiv.apply(this, ['fast']);
            }
            daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
            daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
            $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
          });
        });
        function daTriggerAllShowHides(){
          var daUniqueTriggerQueries = daTriggerQueries.filter(daOnlyUnique);
          var daFirstTime = true;
          var daTries = 0;
          while ((daFirstTime || daShowHideHappened) &amp;&amp; ++daTries &lt; 100){
            daShowHideHappened = false;
            daFirstTime = false;
            var n = daUniqueTriggerQueries.length;
            for (var i = 0; i &lt; n; ++i){
              $(daUniqueTriggerQueries[i]).trigger('daManualTrigger');
            }
          }
          if (daTries &gt;= 100){
            console.log(&quot;Too many contradictory 'show if' conditions&quot;);
          }
        }
        if (daTriggerQueries.length &gt; 0){
          daTriggerAllShowHides();
        }
        $(&quot;.danavlink&quot;).last().addClass('thelast');
        $(&quot;.danavlink&quot;).each(function(){
          if ($(this).hasClass('btn') &amp;&amp; !$(this).hasClass('danotavailableyet')){
            var the_a = $(this);
            var the_delay = 1000 + 250 * parseInt($(this).data('index'));
            setTimeout(function(){
              $(the_a).removeClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;secondary');
              if ($(the_a).hasClass('active')){
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;success');
              }
              else{
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;warning');
              }
            }, the_delay);
          }
        });
        daShowIfInProcess = false;
        // daDisable = setTimeout(function(){
        //   $(&quot;#daform&quot;).find('button[type=&quot;submit&quot;]').prop(&quot;disabled&quot;, true);
        //   //$(&quot;#daform&quot;).find(':input').prop(&quot;disabled&quot;, true);
        // }, 1);
        $(&quot;#daform&quot;).each(function(){
          $(this).find(':input').on('change', daOnChange);
        });
        daInitialized = true;
        daShowingHelp = 0;
        setTimeout(function(){
          $(&quot;#daflash .alert-success&quot;).hide(300, function(){
            $(self).remove();
          });
        }, 3000);
      }
      $( document ).ready(function(){
        daInitialize(1);
        var daDefaultAllowList = bootstrap.Tooltip.Default.allowList;
        daDefaultAllowList['*'].push('style');
        daDefaultAllowList['a'].push('style');
        daDefaultAllowList['img'].push('style');
        $( window ).bind('unload', function() {
          if (daSocket != null &amp;&amp; daSocket.connected){
            daSocket.emit('terminate');
          }
        });
        if (location.protocol === 'http:' || document.location.protocol === 'http:'){
            daSocket = io.connect('http://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT + &quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename});
        }
        if (location.protocol === 'https:' || document.location.protocol === 'https:'){
            daSocket = io.connect('https://' + document.domain + '/observer', {path: '&quot;&quot;&quot;"] 
  "30064771205" -> "128849018881"  [ label = "DDG: ROOT"] 
  "30064771206" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            if (cleanNum != 'NaN') {
              $(this).val(cleanNum);
            }
          }
        });
        $(&quot;#dahelp&quot;).on(&quot;shown.bs.tab&quot;, function(){
          window.scrollTo(0, 1);
          $(&quot;#dahelptoggle&quot;).removeClass('daactivetext')
          $(&quot;#dahelptoggle&quot;).blur();
        });
        $(&quot;#dasourcetoggle&quot;).on(&quot;click&quot;, function(){
          $(this).parent().toggleClass(&quot;active&quot;);
          $(this).blur();
        });
        $('#dabackToQuestion').click(function(event){
          $('#daquestionlabel').tab('show');
        });
        daShowIfInProcess = true;
        var daTriggerQueries = [];
        var daInputsSeen = {};
        function daOnlyUnique(value, index, self){
          return self.indexOf(value) === index;
        }
        $(&quot;.dajsshowif&quot;).each(function(){
          var showIfDiv = this;
          var jsInfo = JSON.parse(atou($(this).data('jsshowif')));
          var showIfSign = jsInfo['sign'];
          var showIfMode = jsInfo['mode'];
          var jsExpression = jsInfo['expression'];
          jsInfo['vars'].forEach(function(infoItem, i){
            var showIfVars = [];
            var initShowIfVar = utoa(infoItem).replace(/[\\n=]/g, '');
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
            if (elem.length &gt; 0){
              showIfVars.push(initShowIfVar);
            }
            if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
              for (var j = 0; j &lt; daVarLookupMulti[initShowIfVar].length; j++){
                var altShowIfVar = daVarLookupMulti[initShowIfVar][j];
                var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
                var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
                if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                  showIfVars.push(altShowIfVar);
                }
              }
            }
            if (showIfVars.length == 0){
              console.log(&quot;ERROR: reference to non-existent field &quot; + infoItem);
            }
            showIfVars.forEach(function(showIfVar){
              var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var varToUse = infoItem;
              var showHideDiv = function(speed){
                var elem = daGetField(varToUse);
                if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                  return;
                }
                var resultt = eval(jsExpression);
                if(resultt){
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                }
                else{
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                var leader = false;
                if (!daShowIfInProcess){
                  daShowIfInProcess = true;
                  daInputsSeen = {};
                  leader = true;
                }
                $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                  if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                    $(this).trigger('change');
                  }
                  daInputsSeen[$(this).attr('id')] = true;
                });
                if (leader){
                  daShowIfInProcess = false;
                }
              };
              var showHideDivImmediate = function(){
                showHideDiv.apply(this, [null]);
              }
              var showHideDivFast = function(){
                showHideDiv.apply(this, ['fast']);
              }
              daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
              daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
              $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            });
          });
        });
        $(&quot;.dashowif&quot;).each(function(){
          var showIfVars = [];
          var showIfSign = $(this).data('showif-sign');
          var showIfMode = parseInt($(this).data('showif-mode'));
          var initShowIfVar = $(this).data('showif-var');
          var varName = atou(initShowIfVar);
          var elem = [];
          if (varName.endsWith('[nota]') || varName.endsWith('[aota]')){
            var signifier = varName.endsWith('[nota]') ? 'nota' : 'aota';
            var cbVarName = varName.replace(/\[[na]ota\]$/, '');
            $('fieldset.da-field-checkboxes').each(function(){
              var thisVarName = atou($(this).data('varname'));
              if (thisVarName == cbVarName){
                elem = $(this).find('input.da' + signifier + '-checkbox');
                initShowIfVar = $(elem).attr('name');
              }
            });
          }
          else {
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
          }
          if (elem.length &gt; 0){
            showIfVars.push(initShowIfVar);
          }
          if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
            var n = daVarLookupMulti[initShowIfVar].length;
            for (var i = 0; i &lt; n; i++){
              var altShowIfVar = daVarLookupMulti[initShowIfVar][i];
              var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
              if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                showIfVars.push(altShowIfVar);
              }
            }
          }
          var showIfVal = $(this).data('showif-val');
          var saveAs = $(this).data('saveas');
          var showIfDiv = this;
          showIfVars.forEach(function(showIfVar){
            var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var showHideDiv = function(speed){
              var elem = daGetField(varName, showIfDiv);
              if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                return;
              }
              var theVal;
              var showifParents = $(this).parents(&quot;.dashowif&quot;);
              if (showifParents.length !== 0 &amp;&amp; !($(showifParents[0]).data(&quot;isVisible&quot;) == '1')){
                theVal = '';
                //console.log(&quot;Setting theVal to blank.&quot;);
              }
              else if ($(this).attr('type') == &quot;checkbox&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  //console.log('manually setting checkbox value to False');
                  theVal = 'False';
                }
              }
              else if ($(this).attr('type') == &quot;radio&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  theVal = '';
                }
                else if (theVal != '' &amp;&amp; $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              else{
                theVal = $(this).val();
                if (theVal != '' &amp;&amp; $(this).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              //console.log(&quot;this is &quot; + $(this).attr('id') + &quot; and saveAs is &quot; + atou(saveAs) + &quot; and showIfVar is &quot; + atou(showIfVar) + &quot; and val is &quot; + String(theVal) + &quot; and showIfVal is &quot; + String(showIfVal));
              if(daShowIfCompare(theVal, showIfVal)){
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
              }
              else{
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
              }
              var leader = false;
              if (!daShowIfInProcess){
                daShowIfInProcess = true;
                daInputsSeen = {};
                leader = true;
              }
              $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                  $(this).trigger('change');
                }
                daInputsSeen[$(this).attr('id')] = true;
              });
              if (leader){
                daShowIfInProcess = false;
              }
            };
            var showHideDivImmediate = function(){
              showHideDiv.apply(this, [null]);
            }
            var showHideDivFast = function(){
              showHideDiv.apply(this, ['fast']);
            }
            daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
            daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
            $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
          });
        });
        function daTriggerAllShowHides(){
          var daUniqueTriggerQueries = daTriggerQueries.filter(daOnlyUnique);
          var daFirstTime = true;
          var daTries = 0;
          while ((daFirstTime || daShowHideHappened) &amp;&amp; ++daTries &lt; 100){
            daShowHideHappened = false;
            daFirstTime = false;
            var n = daUniqueTriggerQueries.length;
            for (var i = 0; i &lt; n; ++i){
              $(daUniqueTriggerQueries[i]).trigger('daManualTrigger');
            }
          }
          if (daTries &gt;= 100){
            console.log(&quot;Too many contradictory 'show if' conditions&quot;);
          }
        }
        if (daTriggerQueries.length &gt; 0){
          daTriggerAllShowHides();
        }
        $(&quot;.danavlink&quot;).last().addClass('thelast');
        $(&quot;.danavlink&quot;).each(function(){
          if ($(this).hasClass('btn') &amp;&amp; !$(this).hasClass('danotavailableyet')){
            var the_a = $(this);
            var the_delay = 1000 + 250 * parseInt($(this).data('index'));
            setTimeout(function(){
              $(the_a).removeClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;secondary');
              if ($(the_a).hasClass('active')){
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;success');
              }
              else{
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;warning');
              }
            }, the_delay);
          }
        });
        daShowIfInProcess = false;
        // daDisable = setTimeout(function(){
        //   $(&quot;#daform&quot;).find('button[type=&quot;submit&quot;]').prop(&quot;disabled&quot;, true);
        //   //$(&quot;#daform&quot;).find(':input').prop(&quot;disabled&quot;, true);
        // }, 1);
        $(&quot;#daform&quot;).each(function(){
          $(this).find(':input').on('change', daOnChange);
        });
        daInitialized = true;
        daShowingHelp = 0;
        setTimeout(function(){
          $(&quot;#daflash .alert-success&quot;).hide(300, function(){
            $(self).remove();
          });
        }, 3000);
      }
      $( document ).ready(function(){
        daInitialize(1);
        var daDefaultAllowList = bootstrap.Tooltip.Default.allowList;
        daDefaultAllowList['*'].push('style');
        daDefaultAllowList['a'].push('style');
        daDefaultAllowList['img'].push('style');
        $( window ).bind('unload', function() {
          if (daSocket != null &amp;&amp; daSocket.connected){
            daSocket.emit('terminate');
          }
        });
        if (location.protocol === 'http:' || document.location.protocol === 'http:'){
            daSocket = io.connect('http://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT + &quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename});
        }
        if (location.protocol === 'https:' || document.location.protocol === 'https:'){
            daSocket = io.connect('https://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT"] 
  "30064771209" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            if (cleanNum != 'NaN') {
              $(this).val(cleanNum);
            }
          }
        });
        $(&quot;#dahelp&quot;).on(&quot;shown.bs.tab&quot;, function(){
          window.scrollTo(0, 1);
          $(&quot;#dahelptoggle&quot;).removeClass('daactivetext')
          $(&quot;#dahelptoggle&quot;).blur();
        });
        $(&quot;#dasourcetoggle&quot;).on(&quot;click&quot;, function(){
          $(this).parent().toggleClass(&quot;active&quot;);
          $(this).blur();
        });
        $('#dabackToQuestion').click(function(event){
          $('#daquestionlabel').tab('show');
        });
        daShowIfInProcess = true;
        var daTriggerQueries = [];
        var daInputsSeen = {};
        function daOnlyUnique(value, index, self){
          return self.indexOf(value) === index;
        }
        $(&quot;.dajsshowif&quot;).each(function(){
          var showIfDiv = this;
          var jsInfo = JSON.parse(atou($(this).data('jsshowif')));
          var showIfSign = jsInfo['sign'];
          var showIfMode = jsInfo['mode'];
          var jsExpression = jsInfo['expression'];
          jsInfo['vars'].forEach(function(infoItem, i){
            var showIfVars = [];
            var initShowIfVar = utoa(infoItem).replace(/[\\n=]/g, '');
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
            if (elem.length &gt; 0){
              showIfVars.push(initShowIfVar);
            }
            if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
              for (var j = 0; j &lt; daVarLookupMulti[initShowIfVar].length; j++){
                var altShowIfVar = daVarLookupMulti[initShowIfVar][j];
                var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
                var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
                if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                  showIfVars.push(altShowIfVar);
                }
              }
            }
            if (showIfVars.length == 0){
              console.log(&quot;ERROR: reference to non-existent field &quot; + infoItem);
            }
            showIfVars.forEach(function(showIfVar){
              var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var varToUse = infoItem;
              var showHideDiv = function(speed){
                var elem = daGetField(varToUse);
                if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                  return;
                }
                var resultt = eval(jsExpression);
                if(resultt){
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                }
                else{
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                var leader = false;
                if (!daShowIfInProcess){
                  daShowIfInProcess = true;
                  daInputsSeen = {};
                  leader = true;
                }
                $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                  if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                    $(this).trigger('change');
                  }
                  daInputsSeen[$(this).attr('id')] = true;
                });
                if (leader){
                  daShowIfInProcess = false;
                }
              };
              var showHideDivImmediate = function(){
                showHideDiv.apply(this, [null]);
              }
              var showHideDivFast = function(){
                showHideDiv.apply(this, ['fast']);
              }
              daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
              daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
              $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            });
          });
        });
        $(&quot;.dashowif&quot;).each(function(){
          var showIfVars = [];
          var showIfSign = $(this).data('showif-sign');
          var showIfMode = parseInt($(this).data('showif-mode'));
          var initShowIfVar = $(this).data('showif-var');
          var varName = atou(initShowIfVar);
          var elem = [];
          if (varName.endsWith('[nota]') || varName.endsWith('[aota]')){
            var signifier = varName.endsWith('[nota]') ? 'nota' : 'aota';
            var cbVarName = varName.replace(/\[[na]ota\]$/, '');
            $('fieldset.da-field-checkboxes').each(function(){
              var thisVarName = atou($(this).data('varname'));
              if (thisVarName == cbVarName){
                elem = $(this).find('input.da' + signifier + '-checkbox');
                initShowIfVar = $(elem).attr('name');
              }
            });
          }
          else {
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
          }
          if (elem.length &gt; 0){
            showIfVars.push(initShowIfVar);
          }
          if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
            var n = daVarLookupMulti[initShowIfVar].length;
            for (var i = 0; i &lt; n; i++){
              var altShowIfVar = daVarLookupMulti[initShowIfVar][i];
              var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
              if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                showIfVars.push(altShowIfVar);
              }
            }
          }
          var showIfVal = $(this).data('showif-val');
          var saveAs = $(this).data('saveas');
          var showIfDiv = this;
          showIfVars.forEach(function(showIfVar){
            var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var showHideDiv = function(speed){
              var elem = daGetField(varName, showIfDiv);
              if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                return;
              }
              var theVal;
              var showifParents = $(this).parents(&quot;.dashowif&quot;);
              if (showifParents.length !== 0 &amp;&amp; !($(showifParents[0]).data(&quot;isVisible&quot;) == '1')){
                theVal = '';
                //console.log(&quot;Setting theVal to blank.&quot;);
              }
              else if ($(this).attr('type') == &quot;checkbox&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  //console.log('manually setting checkbox value to False');
                  theVal = 'False';
                }
              }
              else if ($(this).attr('type') == &quot;radio&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  theVal = '';
                }
                else if (theVal != '' &amp;&amp; $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              else{
                theVal = $(this).val();
                if (theVal != '' &amp;&amp; $(this).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              //console.log(&quot;this is &quot; + $(this).attr('id') + &quot; and saveAs is &quot; + atou(saveAs) + &quot; and showIfVar is &quot; + atou(showIfVar) + &quot; and val is &quot; + String(theVal) + &quot; and showIfVal is &quot; + String(showIfVal));
              if(daShowIfCompare(theVal, showIfVal)){
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
              }
              else{
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
              }
              var leader = false;
              if (!daShowIfInProcess){
                daShowIfInProcess = true;
                daInputsSeen = {};
                leader = true;
              }
              $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                  $(this).trigger('change');
                }
                daInputsSeen[$(this).attr('id')] = true;
              });
              if (leader){
                daShowIfInProcess = false;
              }
            };
            var showHideDivImmediate = function(){
              showHideDiv.apply(this, [null]);
            }
            var showHideDivFast = function(){
              showHideDiv.apply(this, ['fast']);
            }
            daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
            daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
            $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
          });
        });
        function daTriggerAllShowHides(){
          var daUniqueTriggerQueries = daTriggerQueries.filter(daOnlyUnique);
          var daFirstTime = true;
          var daTries = 0;
          while ((daFirstTime || daShowHideHappened) &amp;&amp; ++daTries &lt; 100){
            daShowHideHappened = false;
            daFirstTime = false;
            var n = daUniqueTriggerQueries.length;
            for (var i = 0; i &lt; n; ++i){
              $(daUniqueTriggerQueries[i]).trigger('daManualTrigger');
            }
          }
          if (daTries &gt;= 100){
            console.log(&quot;Too many contradictory 'show if' conditions&quot;);
          }
        }
        if (daTriggerQueries.length &gt; 0){
          daTriggerAllShowHides();
        }
        $(&quot;.danavlink&quot;).last().addClass('thelast');
        $(&quot;.danavlink&quot;).each(function(){
          if ($(this).hasClass('btn') &amp;&amp; !$(this).hasClass('danotavailableyet')){
            var the_a = $(this);
            var the_delay = 1000 + 250 * parseInt($(this).data('index'));
            setTimeout(function(){
              $(the_a).removeClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;secondary');
              if ($(the_a).hasClass('active')){
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;success');
              }
              else{
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;warning');
              }
            }, the_delay);
          }
        });
        daShowIfInProcess = false;
        // daDisable = setTimeout(function(){
        //   $(&quot;#daform&quot;).find('button[type=&quot;submit&quot;]').prop(&quot;disabled&quot;, true);
        //   //$(&quot;#daform&quot;).find(':input').prop(&quot;disabled&quot;, true);
        // }, 1);
        $(&quot;#daform&quot;).each(function(){
          $(this).find(':input').on('change', daOnChange);
        });
        daInitialized = true;
        daShowingHelp = 0;
        setTimeout(function(){
          $(&quot;#daflash .alert-success&quot;).hide(300, function(){
            $(self).remove();
          });
        }, 3000);
      }
      $( document ).ready(function(){
        daInitialize(1);
        var daDefaultAllowList = bootstrap.Tooltip.Default.allowList;
        daDefaultAllowList['*'].push('style');
        daDefaultAllowList['a'].push('style');
        daDefaultAllowList['img'].push('style');
        $( window ).bind('unload', function() {
          if (daSocket != null &amp;&amp; daSocket.connected){
            daSocket.emit('terminate');
          }
        });
        if (location.protocol === 'http:' || document.location.protocol === 'http:'){
            daSocket = io.connect('http://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT + &quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename});
        }
        if (location.protocol === 'https:' || document.location.protocol === 'https:'){
            daSocket = io.connect('https://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT + &quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename});
        }
        if (typeof daSocket !== 'undefined') {
            daSocket.on('connect', function() {
                //console.log(&quot;Connected!&quot;);
                daSocket.emit('observe', {uid: &quot;&quot;&quot;"] 
  "30064771209" -> "128849018881"  [ label = "DDG: json.dumps(uid)"] 
  "30064771210" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            if (cleanNum != 'NaN') {
              $(this).val(cleanNum);
            }
          }
        });
        $(&quot;#dahelp&quot;).on(&quot;shown.bs.tab&quot;, function(){
          window.scrollTo(0, 1);
          $(&quot;#dahelptoggle&quot;).removeClass('daactivetext')
          $(&quot;#dahelptoggle&quot;).blur();
        });
        $(&quot;#dasourcetoggle&quot;).on(&quot;click&quot;, function(){
          $(this).parent().toggleClass(&quot;active&quot;);
          $(this).blur();
        });
        $('#dabackToQuestion').click(function(event){
          $('#daquestionlabel').tab('show');
        });
        daShowIfInProcess = true;
        var daTriggerQueries = [];
        var daInputsSeen = {};
        function daOnlyUnique(value, index, self){
          return self.indexOf(value) === index;
        }
        $(&quot;.dajsshowif&quot;).each(function(){
          var showIfDiv = this;
          var jsInfo = JSON.parse(atou($(this).data('jsshowif')));
          var showIfSign = jsInfo['sign'];
          var showIfMode = jsInfo['mode'];
          var jsExpression = jsInfo['expression'];
          jsInfo['vars'].forEach(function(infoItem, i){
            var showIfVars = [];
            var initShowIfVar = utoa(infoItem).replace(/[\\n=]/g, '');
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
            if (elem.length &gt; 0){
              showIfVars.push(initShowIfVar);
            }
            if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
              for (var j = 0; j &lt; daVarLookupMulti[initShowIfVar].length; j++){
                var altShowIfVar = daVarLookupMulti[initShowIfVar][j];
                var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
                var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
                if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                  showIfVars.push(altShowIfVar);
                }
              }
            }
            if (showIfVars.length == 0){
              console.log(&quot;ERROR: reference to non-existent field &quot; + infoItem);
            }
            showIfVars.forEach(function(showIfVar){
              var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var varToUse = infoItem;
              var showHideDiv = function(speed){
                var elem = daGetField(varToUse);
                if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                  return;
                }
                var resultt = eval(jsExpression);
                if(resultt){
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                }
                else{
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                var leader = false;
                if (!daShowIfInProcess){
                  daShowIfInProcess = true;
                  daInputsSeen = {};
                  leader = true;
                }
                $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                  if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                    $(this).trigger('change');
                  }
                  daInputsSeen[$(this).attr('id')] = true;
                });
                if (leader){
                  daShowIfInProcess = false;
                }
              };
              var showHideDivImmediate = function(){
                showHideDiv.apply(this, [null]);
              }
              var showHideDivFast = function(){
                showHideDiv.apply(this, ['fast']);
              }
              daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
              daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
              $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            });
          });
        });
        $(&quot;.dashowif&quot;).each(function(){
          var showIfVars = [];
          var showIfSign = $(this).data('showif-sign');
          var showIfMode = parseInt($(this).data('showif-mode'));
          var initShowIfVar = $(this).data('showif-var');
          var varName = atou(initShowIfVar);
          var elem = [];
          if (varName.endsWith('[nota]') || varName.endsWith('[aota]')){
            var signifier = varName.endsWith('[nota]') ? 'nota' : 'aota';
            var cbVarName = varName.replace(/\[[na]ota\]$/, '');
            $('fieldset.da-field-checkboxes').each(function(){
              var thisVarName = atou($(this).data('varname'));
              if (thisVarName == cbVarName){
                elem = $(this).find('input.da' + signifier + '-checkbox');
                initShowIfVar = $(elem).attr('name');
              }
            });
          }
          else {
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
          }
          if (elem.length &gt; 0){
            showIfVars.push(initShowIfVar);
          }
          if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
            var n = daVarLookupMulti[initShowIfVar].length;
            for (var i = 0; i &lt; n; i++){
              var altShowIfVar = daVarLookupMulti[initShowIfVar][i];
              var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
              if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                showIfVars.push(altShowIfVar);
              }
            }
          }
          var showIfVal = $(this).data('showif-val');
          var saveAs = $(this).data('saveas');
          var showIfDiv = this;
          showIfVars.forEach(function(showIfVar){
            var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var showHideDiv = function(speed){
              var elem = daGetField(varName, showIfDiv);
              if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                return;
              }
              var theVal;
              var showifParents = $(this).parents(&quot;.dashowif&quot;);
              if (showifParents.length !== 0 &amp;&amp; !($(showifParents[0]).data(&quot;isVisible&quot;) == '1')){
                theVal = '';
                //console.log(&quot;Setting theVal to blank.&quot;);
              }
              else if ($(this).attr('type') == &quot;checkbox&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  //console.log('manually setting checkbox value to False');
                  theVal = 'False';
                }
              }
              else if ($(this).attr('type') == &quot;radio&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  theVal = '';
                }
                else if (theVal != '' &amp;&amp; $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              else{
                theVal = $(this).val();
                if (theVal != '' &amp;&amp; $(this).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              //console.log(&quot;this is &quot; + $(this).attr('id') + &quot; and saveAs is &quot; + atou(saveAs) + &quot; and showIfVar is &quot; + atou(showIfVar) + &quot; and val is &quot; + String(theVal) + &quot; and showIfVal is &quot; + String(showIfVal));
              if(daShowIfCompare(theVal, showIfVal)){
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
              }
              else{
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
              }
              var leader = false;
              if (!daShowIfInProcess){
                daShowIfInProcess = true;
                daInputsSeen = {};
                leader = true;
              }
              $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                  $(this).trigger('change');
                }
                daInputsSeen[$(this).attr('id')] = true;
              });
              if (leader){
                daShowIfInProcess = false;
              }
            };
            var showHideDivImmediate = function(){
              showHideDiv.apply(this, [null]);
            }
            var showHideDivFast = function(){
              showHideDiv.apply(this, ['fast']);
            }
            daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
            daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
            $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
          });
        });
        function daTriggerAllShowHides(){
          var daUniqueTriggerQueries = daTriggerQueries.filter(daOnlyUnique);
          var daFirstTime = true;
          var daTries = 0;
          while ((daFirstTime || daShowHideHappened) &amp;&amp; ++daTries &lt; 100){
            daShowHideHappened = false;
            daFirstTime = false;
            var n = daUniqueTriggerQueries.length;
            for (var i = 0; i &lt; n; ++i){
              $(daUniqueTriggerQueries[i]).trigger('daManualTrigger');
            }
          }
          if (daTries &gt;= 100){
            console.log(&quot;Too many contradictory 'show if' conditions&quot;);
          }
        }
        if (daTriggerQueries.length &gt; 0){
          daTriggerAllShowHides();
        }
        $(&quot;.danavlink&quot;).last().addClass('thelast');
        $(&quot;.danavlink&quot;).each(function(){
          if ($(this).hasClass('btn') &amp;&amp; !$(this).hasClass('danotavailableyet')){
            var the_a = $(this);
            var the_delay = 1000 + 250 * parseInt($(this).data('index'));
            setTimeout(function(){
              $(the_a).removeClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;secondary');
              if ($(the_a).hasClass('active')){
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;success');
              }
              else{
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;warning');
              }
            }, the_delay);
          }
        });
        daShowIfInProcess = false;
        // daDisable = setTimeout(function(){
        //   $(&quot;#daform&quot;).find('button[type=&quot;submit&quot;]').prop(&quot;disabled&quot;, true);
        //   //$(&quot;#daform&quot;).find(':input').prop(&quot;disabled&quot;, true);
        // }, 1);
        $(&quot;#daform&quot;).each(function(){
          $(this).find(':input').on('change', daOnChange);
        });
        daInitialized = true;
        daShowingHelp = 0;
        setTimeout(function(){
          $(&quot;#daflash .alert-success&quot;).hide(300, function(){
            $(self).remove();
          });
        }, 3000);
      }
      $( document ).ready(function(){
        daInitialize(1);
        var daDefaultAllowList = bootstrap.Tooltip.Default.allowList;
        daDefaultAllowList['*'].push('style');
        daDefaultAllowList['a'].push('style');
        daDefaultAllowList['img'].push('style');
        $( window ).bind('unload', function() {
          if (daSocket != null &amp;&amp; daSocket.connected){
            daSocket.emit('terminate');
          }
        });
        if (location.protocol === 'http:' || document.location.protocol === 'http:'){
            daSocket = io.connect('http://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT + &quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename});
        }
        if (location.protocol === 'https:' || document.location.protocol === 'https:'){
            daSocket = io.connect('https://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT + &quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename});
        }
        if (typeof daSocket !== 'undefined') {
            daSocket.on('connect', function() {
                //console.log(&quot;Connected!&quot;);
                daSocket.emit('observe', {uid: &quot;&quot;&quot; + json.dumps(uid)"] 
  "30064771214" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            if (cleanNum != 'NaN') {
              $(this).val(cleanNum);
            }
          }
        });
        $(&quot;#dahelp&quot;).on(&quot;shown.bs.tab&quot;, function(){
          window.scrollTo(0, 1);
          $(&quot;#dahelptoggle&quot;).removeClass('daactivetext')
          $(&quot;#dahelptoggle&quot;).blur();
        });
        $(&quot;#dasourcetoggle&quot;).on(&quot;click&quot;, function(){
          $(this).parent().toggleClass(&quot;active&quot;);
          $(this).blur();
        });
        $('#dabackToQuestion').click(function(event){
          $('#daquestionlabel').tab('show');
        });
        daShowIfInProcess = true;
        var daTriggerQueries = [];
        var daInputsSeen = {};
        function daOnlyUnique(value, index, self){
          return self.indexOf(value) === index;
        }
        $(&quot;.dajsshowif&quot;).each(function(){
          var showIfDiv = this;
          var jsInfo = JSON.parse(atou($(this).data('jsshowif')));
          var showIfSign = jsInfo['sign'];
          var showIfMode = jsInfo['mode'];
          var jsExpression = jsInfo['expression'];
          jsInfo['vars'].forEach(function(infoItem, i){
            var showIfVars = [];
            var initShowIfVar = utoa(infoItem).replace(/[\\n=]/g, '');
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
            if (elem.length &gt; 0){
              showIfVars.push(initShowIfVar);
            }
            if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
              for (var j = 0; j &lt; daVarLookupMulti[initShowIfVar].length; j++){
                var altShowIfVar = daVarLookupMulti[initShowIfVar][j];
                var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
                var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
                if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                  showIfVars.push(altShowIfVar);
                }
              }
            }
            if (showIfVars.length == 0){
              console.log(&quot;ERROR: reference to non-existent field &quot; + infoItem);
            }
            showIfVars.forEach(function(showIfVar){
              var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var varToUse = infoItem;
              var showHideDiv = function(speed){
                var elem = daGetField(varToUse);
                if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                  return;
                }
                var resultt = eval(jsExpression);
                if(resultt){
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                }
                else{
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                var leader = false;
                if (!daShowIfInProcess){
                  daShowIfInProcess = true;
                  daInputsSeen = {};
                  leader = true;
                }
                $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                  if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                    $(this).trigger('change');
                  }
                  daInputsSeen[$(this).attr('id')] = true;
                });
                if (leader){
                  daShowIfInProcess = false;
                }
              };
              var showHideDivImmediate = function(){
                showHideDiv.apply(this, [null]);
              }
              var showHideDivFast = function(){
                showHideDiv.apply(this, ['fast']);
              }
              daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
              daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
              $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            });
          });
        });
        $(&quot;.dashowif&quot;).each(function(){
          var showIfVars = [];
          var showIfSign = $(this).data('showif-sign');
          var showIfMode = parseInt($(this).data('showif-mode'));
          var initShowIfVar = $(this).data('showif-var');
          var varName = atou(initShowIfVar);
          var elem = [];
          if (varName.endsWith('[nota]') || varName.endsWith('[aota]')){
            var signifier = varName.endsWith('[nota]') ? 'nota' : 'aota';
            var cbVarName = varName.replace(/\[[na]ota\]$/, '');
            $('fieldset.da-field-checkboxes').each(function(){
              var thisVarName = atou($(this).data('varname'));
              if (thisVarName == cbVarName){
                elem = $(this).find('input.da' + signifier + '-checkbox');
                initShowIfVar = $(elem).attr('name');
              }
            });
          }
          else {
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
          }
          if (elem.length &gt; 0){
            showIfVars.push(initShowIfVar);
          }
          if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
            var n = daVarLookupMulti[initShowIfVar].length;
            for (var i = 0; i &lt; n; i++){
              var altShowIfVar = daVarLookupMulti[initShowIfVar][i];
              var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
              if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                showIfVars.push(altShowIfVar);
              }
            }
          }
          var showIfVal = $(this).data('showif-val');
          var saveAs = $(this).data('saveas');
          var showIfDiv = this;
          showIfVars.forEach(function(showIfVar){
            var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var showHideDiv = function(speed){
              var elem = daGetField(varName, showIfDiv);
              if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                return;
              }
              var theVal;
              var showifParents = $(this).parents(&quot;.dashowif&quot;);
              if (showifParents.length !== 0 &amp;&amp; !($(showifParents[0]).data(&quot;isVisible&quot;) == '1')){
                theVal = '';
                //console.log(&quot;Setting theVal to blank.&quot;);
              }
              else if ($(this).attr('type') == &quot;checkbox&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  //console.log('manually setting checkbox value to False');
                  theVal = 'False';
                }
              }
              else if ($(this).attr('type') == &quot;radio&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  theVal = '';
                }
                else if (theVal != '' &amp;&amp; $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              else{
                theVal = $(this).val();
                if (theVal != '' &amp;&amp; $(this).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              //console.log(&quot;this is &quot; + $(this).attr('id') + &quot; and saveAs is &quot; + atou(saveAs) + &quot; and showIfVar is &quot; + atou(showIfVar) + &quot; and val is &quot; + String(theVal) + &quot; and showIfVal is &quot; + String(showIfVal));
              if(daShowIfCompare(theVal, showIfVal)){
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
              }
              else{
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
              }
              var leader = false;
              if (!daShowIfInProcess){
                daShowIfInProcess = true;
                daInputsSeen = {};
                leader = true;
              }
              $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                  $(this).trigger('change');
                }
                daInputsSeen[$(this).attr('id')] = true;
              });
              if (leader){
                daShowIfInProcess = false;
              }
            };
            var showHideDivImmediate = function(){
              showHideDiv.apply(this, [null]);
            }
            var showHideDivFast = function(){
              showHideDiv.apply(this, ['fast']);
            }
            daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
            daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
            $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
          });
        });
        function daTriggerAllShowHides(){
          var daUniqueTriggerQueries = daTriggerQueries.filter(daOnlyUnique);
          var daFirstTime = true;
          var daTries = 0;
          while ((daFirstTime || daShowHideHappened) &amp;&amp; ++daTries &lt; 100){
            daShowHideHappened = false;
            daFirstTime = false;
            var n = daUniqueTriggerQueries.length;
            for (var i = 0; i &lt; n; ++i){
              $(daUniqueTriggerQueries[i]).trigger('daManualTrigger');
            }
          }
          if (daTries &gt;= 100){
            console.log(&quot;Too many contradictory 'show if' conditions&quot;);
          }
        }
        if (daTriggerQueries.length &gt; 0){
          daTriggerAllShowHides();
        }
        $(&quot;.danavlink&quot;).last().addClass('thelast');
        $(&quot;.danavlink&quot;).each(function(){
          if ($(this).hasClass('btn') &amp;&amp; !$(this).hasClass('danotavailableyet')){
            var the_a = $(this);
            var the_delay = 1000 + 250 * parseInt($(this).data('index'));
            setTimeout(function(){
              $(the_a).removeClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;secondary');
              if ($(the_a).hasClass('active')){
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;success');
              }
              else{
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;warning');
              }
            }, the_delay);
          }
        });
        daShowIfInProcess = false;
        // daDisable = setTimeout(function(){
        //   $(&quot;#daform&quot;).find('button[type=&quot;submit&quot;]').prop(&quot;disabled&quot;, true);
        //   //$(&quot;#daform&quot;).find(':input').prop(&quot;disabled&quot;, true);
        // }, 1);
        $(&quot;#daform&quot;).each(function(){
          $(this).find(':input').on('change', daOnChange);
        });
        daInitialized = true;
        daShowingHelp = 0;
        setTimeout(function(){
          $(&quot;#daflash .alert-success&quot;).hide(300, function(){
            $(self).remove();
          });
        }, 3000);
      }
      $( document ).ready(function(){
        daInitialize(1);
        var daDefaultAllowList = bootstrap.Tooltip.Default.allowList;
        daDefaultAllowList['*'].push('style');
        daDefaultAllowList['a'].push('style');
        daDefaultAllowList['img'].push('style');
        $( window ).bind('unload', function() {
          if (daSocket != null &amp;&amp; daSocket.connected){
            daSocket.emit('terminate');
          }
        });
        if (location.protocol === 'http:' || document.location.protocol === 'http:'){
            daSocket = io.connect('http://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT + &quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename});
        }
        if (location.protocol === 'https:' || document.location.protocol === 'https:'){
            daSocket = io.connect('https://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT + &quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename});
        }
        if (typeof daSocket !== 'undefined') {
            daSocket.on('connect', function() {
                //console.log(&quot;Connected!&quot;);
                daSocket.emit('observe', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: daYamlFilename, userid: &quot;&quot;&quot;"] 
  "30064771213" -> "128849018881"  [ label = "DDG: json"] 
  "30064771214" -> "128849018881"  [ label = "DDG: json.dumps(str(userid))"] 
  "30064771215" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            if (cleanNum != 'NaN') {
              $(this).val(cleanNum);
            }
          }
        });
        $(&quot;#dahelp&quot;).on(&quot;shown.bs.tab&quot;, function(){
          window.scrollTo(0, 1);
          $(&quot;#dahelptoggle&quot;).removeClass('daactivetext')
          $(&quot;#dahelptoggle&quot;).blur();
        });
        $(&quot;#dasourcetoggle&quot;).on(&quot;click&quot;, function(){
          $(this).parent().toggleClass(&quot;active&quot;);
          $(this).blur();
        });
        $('#dabackToQuestion').click(function(event){
          $('#daquestionlabel').tab('show');
        });
        daShowIfInProcess = true;
        var daTriggerQueries = [];
        var daInputsSeen = {};
        function daOnlyUnique(value, index, self){
          return self.indexOf(value) === index;
        }
        $(&quot;.dajsshowif&quot;).each(function(){
          var showIfDiv = this;
          var jsInfo = JSON.parse(atou($(this).data('jsshowif')));
          var showIfSign = jsInfo['sign'];
          var showIfMode = jsInfo['mode'];
          var jsExpression = jsInfo['expression'];
          jsInfo['vars'].forEach(function(infoItem, i){
            var showIfVars = [];
            var initShowIfVar = utoa(infoItem).replace(/[\\n=]/g, '');
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
            if (elem.length &gt; 0){
              showIfVars.push(initShowIfVar);
            }
            if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
              for (var j = 0; j &lt; daVarLookupMulti[initShowIfVar].length; j++){
                var altShowIfVar = daVarLookupMulti[initShowIfVar][j];
                var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
                var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
                if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                  showIfVars.push(altShowIfVar);
                }
              }
            }
            if (showIfVars.length == 0){
              console.log(&quot;ERROR: reference to non-existent field &quot; + infoItem);
            }
            showIfVars.forEach(function(showIfVar){
              var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var varToUse = infoItem;
              var showHideDiv = function(speed){
                var elem = daGetField(varToUse);
                if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                  return;
                }
                var resultt = eval(jsExpression);
                if(resultt){
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                }
                else{
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                var leader = false;
                if (!daShowIfInProcess){
                  daShowIfInProcess = true;
                  daInputsSeen = {};
                  leader = true;
                }
                $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                  if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                    $(this).trigger('change');
                  }
                  daInputsSeen[$(this).attr('id')] = true;
                });
                if (leader){
                  daShowIfInProcess = false;
                }
              };
              var showHideDivImmediate = function(){
                showHideDiv.apply(this, [null]);
              }
              var showHideDivFast = function(){
                showHideDiv.apply(this, ['fast']);
              }
              daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
              daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
              $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            });
          });
        });
        $(&quot;.dashowif&quot;).each(function(){
          var showIfVars = [];
          var showIfSign = $(this).data('showif-sign');
          var showIfMode = parseInt($(this).data('showif-mode'));
          var initShowIfVar = $(this).data('showif-var');
          var varName = atou(initShowIfVar);
          var elem = [];
          if (varName.endsWith('[nota]') || varName.endsWith('[aota]')){
            var signifier = varName.endsWith('[nota]') ? 'nota' : 'aota';
            var cbVarName = varName.replace(/\[[na]ota\]$/, '');
            $('fieldset.da-field-checkboxes').each(function(){
              var thisVarName = atou($(this).data('varname'));
              if (thisVarName == cbVarName){
                elem = $(this).find('input.da' + signifier + '-checkbox');
                initShowIfVar = $(elem).attr('name');
              }
            });
          }
          else {
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
          }
          if (elem.length &gt; 0){
            showIfVars.push(initShowIfVar);
          }
          if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
            var n = daVarLookupMulti[initShowIfVar].length;
            for (var i = 0; i &lt; n; i++){
              var altShowIfVar = daVarLookupMulti[initShowIfVar][i];
              var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
              if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                showIfVars.push(altShowIfVar);
              }
            }
          }
          var showIfVal = $(this).data('showif-val');
          var saveAs = $(this).data('saveas');
          var showIfDiv = this;
          showIfVars.forEach(function(showIfVar){
            var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var showHideDiv = function(speed){
              var elem = daGetField(varName, showIfDiv);
              if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                return;
              }
              var theVal;
              var showifParents = $(this).parents(&quot;.dashowif&quot;);
              if (showifParents.length !== 0 &amp;&amp; !($(showifParents[0]).data(&quot;isVisible&quot;) == '1')){
                theVal = '';
                //console.log(&quot;Setting theVal to blank.&quot;);
              }
              else if ($(this).attr('type') == &quot;checkbox&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  //console.log('manually setting checkbox value to False');
                  theVal = 'False';
                }
              }
              else if ($(this).attr('type') == &quot;radio&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  theVal = '';
                }
                else if (theVal != '' &amp;&amp; $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              else{
                theVal = $(this).val();
                if (theVal != '' &amp;&amp; $(this).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              //console.log(&quot;this is &quot; + $(this).attr('id') + &quot; and saveAs is &quot; + atou(saveAs) + &quot; and showIfVar is &quot; + atou(showIfVar) + &quot; and val is &quot; + String(theVal) + &quot; and showIfVal is &quot; + String(showIfVal));
              if(daShowIfCompare(theVal, showIfVal)){
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
              }
              else{
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
              }
              var leader = false;
              if (!daShowIfInProcess){
                daShowIfInProcess = true;
                daInputsSeen = {};
                leader = true;
              }
              $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                  $(this).trigger('change');
                }
                daInputsSeen[$(this).attr('id')] = true;
              });
              if (leader){
                daShowIfInProcess = false;
              }
            };
            var showHideDivImmediate = function(){
              showHideDiv.apply(this, [null]);
            }
            var showHideDivFast = function(){
              showHideDiv.apply(this, ['fast']);
            }
            daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
            daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
            $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
          });
        });
        function daTriggerAllShowHides(){
          var daUniqueTriggerQueries = daTriggerQueries.filter(daOnlyUnique);
          var daFirstTime = true;
          var daTries = 0;
          while ((daFirstTime || daShowHideHappened) &amp;&amp; ++daTries &lt; 100){
            daShowHideHappened = false;
            daFirstTime = false;
            var n = daUniqueTriggerQueries.length;
            for (var i = 0; i &lt; n; ++i){
              $(daUniqueTriggerQueries[i]).trigger('daManualTrigger');
            }
          }
          if (daTries &gt;= 100){
            console.log(&quot;Too many contradictory 'show if' conditions&quot;);
          }
        }
        if (daTriggerQueries.length &gt; 0){
          daTriggerAllShowHides();
        }
        $(&quot;.danavlink&quot;).last().addClass('thelast');
        $(&quot;.danavlink&quot;).each(function(){
          if ($(this).hasClass('btn') &amp;&amp; !$(this).hasClass('danotavailableyet')){
            var the_a = $(this);
            var the_delay = 1000 + 250 * parseInt($(this).data('index'));
            setTimeout(function(){
              $(the_a).removeClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;secondary');
              if ($(the_a).hasClass('active')){
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;success');
              }
              else{
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;warning');
              }
            }, the_delay);
          }
        });
        daShowIfInProcess = false;
        // daDisable = setTimeout(function(){
        //   $(&quot;#daform&quot;).find('button[type=&quot;submit&quot;]').prop(&quot;disabled&quot;, true);
        //   //$(&quot;#daform&quot;).find(':input').prop(&quot;disabled&quot;, true);
        // }, 1);
        $(&quot;#daform&quot;).each(function(){
          $(this).find(':input').on('change', daOnChange);
        });
        daInitialized = true;
        daShowingHelp = 0;
        setTimeout(function(){
          $(&quot;#daflash .alert-success&quot;).hide(300, function(){
            $(self).remove();
          });
        }, 3000);
      }
      $( document ).ready(function(){
        daInitialize(1);
        var daDefaultAllowList = bootstrap.Tooltip.Default.allowList;
        daDefaultAllowList['*'].push('style');
        daDefaultAllowList['a'].push('style');
        daDefaultAllowList['img'].push('style');
        $( window ).bind('unload', function() {
          if (daSocket != null &amp;&amp; daSocket.connected){
            daSocket.emit('terminate');
          }
        });
        if (location.protocol === 'http:' || document.location.protocol === 'http:'){
            daSocket = io.connect('http://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT + &quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename});
        }
        if (location.protocol === 'https:' || document.location.protocol === 'https:'){
            daSocket = io.connect('https://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT + &quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename});
        }
        if (typeof daSocket !== 'undefined') {
            daSocket.on('connect', function() {
                //console.log(&quot;Connected!&quot;);
                daSocket.emit('observe', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: daYamlFilename, userid: &quot;&quot;&quot; + json.dumps(str(userid))"] 
  "30064771217" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            if (cleanNum != 'NaN') {
              $(this).val(cleanNum);
            }
          }
        });
        $(&quot;#dahelp&quot;).on(&quot;shown.bs.tab&quot;, function(){
          window.scrollTo(0, 1);
          $(&quot;#dahelptoggle&quot;).removeClass('daactivetext')
          $(&quot;#dahelptoggle&quot;).blur();
        });
        $(&quot;#dasourcetoggle&quot;).on(&quot;click&quot;, function(){
          $(this).parent().toggleClass(&quot;active&quot;);
          $(this).blur();
        });
        $('#dabackToQuestion').click(function(event){
          $('#daquestionlabel').tab('show');
        });
        daShowIfInProcess = true;
        var daTriggerQueries = [];
        var daInputsSeen = {};
        function daOnlyUnique(value, index, self){
          return self.indexOf(value) === index;
        }
        $(&quot;.dajsshowif&quot;).each(function(){
          var showIfDiv = this;
          var jsInfo = JSON.parse(atou($(this).data('jsshowif')));
          var showIfSign = jsInfo['sign'];
          var showIfMode = jsInfo['mode'];
          var jsExpression = jsInfo['expression'];
          jsInfo['vars'].forEach(function(infoItem, i){
            var showIfVars = [];
            var initShowIfVar = utoa(infoItem).replace(/[\\n=]/g, '');
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
            if (elem.length &gt; 0){
              showIfVars.push(initShowIfVar);
            }
            if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
              for (var j = 0; j &lt; daVarLookupMulti[initShowIfVar].length; j++){
                var altShowIfVar = daVarLookupMulti[initShowIfVar][j];
                var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
                var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
                if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                  showIfVars.push(altShowIfVar);
                }
              }
            }
            if (showIfVars.length == 0){
              console.log(&quot;ERROR: reference to non-existent field &quot; + infoItem);
            }
            showIfVars.forEach(function(showIfVar){
              var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var varToUse = infoItem;
              var showHideDiv = function(speed){
                var elem = daGetField(varToUse);
                if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                  return;
                }
                var resultt = eval(jsExpression);
                if(resultt){
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                }
                else{
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                var leader = false;
                if (!daShowIfInProcess){
                  daShowIfInProcess = true;
                  daInputsSeen = {};
                  leader = true;
                }
                $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                  if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                    $(this).trigger('change');
                  }
                  daInputsSeen[$(this).attr('id')] = true;
                });
                if (leader){
                  daShowIfInProcess = false;
                }
              };
              var showHideDivImmediate = function(){
                showHideDiv.apply(this, [null]);
              }
              var showHideDivFast = function(){
                showHideDiv.apply(this, ['fast']);
              }
              daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
              daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
              $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            });
          });
        });
        $(&quot;.dashowif&quot;).each(function(){
          var showIfVars = [];
          var showIfSign = $(this).data('showif-sign');
          var showIfMode = parseInt($(this).data('showif-mode'));
          var initShowIfVar = $(this).data('showif-var');
          var varName = atou(initShowIfVar);
          var elem = [];
          if (varName.endsWith('[nota]') || varName.endsWith('[aota]')){
            var signifier = varName.endsWith('[nota]') ? 'nota' : 'aota';
            var cbVarName = varName.replace(/\[[na]ota\]$/, '');
            $('fieldset.da-field-checkboxes').each(function(){
              var thisVarName = atou($(this).data('varname'));
              if (thisVarName == cbVarName){
                elem = $(this).find('input.da' + signifier + '-checkbox');
                initShowIfVar = $(elem).attr('name');
              }
            });
          }
          else {
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
          }
          if (elem.length &gt; 0){
            showIfVars.push(initShowIfVar);
          }
          if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
            var n = daVarLookupMulti[initShowIfVar].length;
            for (var i = 0; i &lt; n; i++){
              var altShowIfVar = daVarLookupMulti[initShowIfVar][i];
              var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
              if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                showIfVars.push(altShowIfVar);
              }
            }
          }
          var showIfVal = $(this).data('showif-val');
          var saveAs = $(this).data('saveas');
          var showIfDiv = this;
          showIfVars.forEach(function(showIfVar){
            var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var showHideDiv = function(speed){
              var elem = daGetField(varName, showIfDiv);
              if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                return;
              }
              var theVal;
              var showifParents = $(this).parents(&quot;.dashowif&quot;);
              if (showifParents.length !== 0 &amp;&amp; !($(showifParents[0]).data(&quot;isVisible&quot;) == '1')){
                theVal = '';
                //console.log(&quot;Setting theVal to blank.&quot;);
              }
              else if ($(this).attr('type') == &quot;checkbox&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  //console.log('manually setting checkbox value to False');
                  theVal = 'False';
                }
              }
              else if ($(this).attr('type') == &quot;radio&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  theVal = '';
                }
                else if (theVal != '' &amp;&amp; $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              else{
                theVal = $(this).val();
                if (theVal != '' &amp;&amp; $(this).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              //console.log(&quot;this is &quot; + $(this).attr('id') + &quot; and saveAs is &quot; + atou(saveAs) + &quot; and showIfVar is &quot; + atou(showIfVar) + &quot; and val is &quot; + String(theVal) + &quot; and showIfVal is &quot; + String(showIfVal));
              if(daShowIfCompare(theVal, showIfVal)){
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
              }
              else{
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
              }
              var leader = false;
              if (!daShowIfInProcess){
                daShowIfInProcess = true;
                daInputsSeen = {};
                leader = true;
              }
              $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                  $(this).trigger('change');
                }
                daInputsSeen[$(this).attr('id')] = true;
              });
              if (leader){
                daShowIfInProcess = false;
              }
            };
            var showHideDivImmediate = function(){
              showHideDiv.apply(this, [null]);
            }
            var showHideDivFast = function(){
              showHideDiv.apply(this, ['fast']);
            }
            daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
            daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
            $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
          });
        });
        function daTriggerAllShowHides(){
          var daUniqueTriggerQueries = daTriggerQueries.filter(daOnlyUnique);
          var daFirstTime = true;
          var daTries = 0;
          while ((daFirstTime || daShowHideHappened) &amp;&amp; ++daTries &lt; 100){
            daShowHideHappened = false;
            daFirstTime = false;
            var n = daUniqueTriggerQueries.length;
            for (var i = 0; i &lt; n; ++i){
              $(daUniqueTriggerQueries[i]).trigger('daManualTrigger');
            }
          }
          if (daTries &gt;= 100){
            console.log(&quot;Too many contradictory 'show if' conditions&quot;);
          }
        }
        if (daTriggerQueries.length &gt; 0){
          daTriggerAllShowHides();
        }
        $(&quot;.danavlink&quot;).last().addClass('thelast');
        $(&quot;.danavlink&quot;).each(function(){
          if ($(this).hasClass('btn') &amp;&amp; !$(this).hasClass('danotavailableyet')){
            var the_a = $(this);
            var the_delay = 1000 + 250 * parseInt($(this).data('index'));
            setTimeout(function(){
              $(the_a).removeClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;secondary');
              if ($(the_a).hasClass('active')){
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;success');
              }
              else{
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;warning');
              }
            }, the_delay);
          }
        });
        daShowIfInProcess = false;
        // daDisable = setTimeout(function(){
        //   $(&quot;#daform&quot;).find('button[type=&quot;submit&quot;]').prop(&quot;disabled&quot;, true);
        //   //$(&quot;#daform&quot;).find(':input').prop(&quot;disabled&quot;, true);
        // }, 1);
        $(&quot;#daform&quot;).each(function(){
          $(this).find(':input').on('change', daOnChange);
        });
        daInitialized = true;
        daShowingHelp = 0;
        setTimeout(function(){
          $(&quot;#daflash .alert-success&quot;).hide(300, function(){
            $(self).remove();
          });
        }, 3000);
      }
      $( document ).ready(function(){
        daInitialize(1);
        var daDefaultAllowList = bootstrap.Tooltip.Default.allowList;
        daDefaultAllowList['*'].push('style');
        daDefaultAllowList['a'].push('style');
        daDefaultAllowList['img'].push('style');
        $( window ).bind('unload', function() {
          if (daSocket != null &amp;&amp; daSocket.connected){
            daSocket.emit('terminate');
          }
        });
        if (location.protocol === 'http:' || document.location.protocol === 'http:'){
            daSocket = io.connect('http://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT + &quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename});
        }
        if (location.protocol === 'https:' || document.location.protocol === 'https:'){
            daSocket = io.connect('https://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT + &quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename});
        }
        if (typeof daSocket !== 'undefined') {
            daSocket.on('connect', function() {
                //console.log(&quot;Connected!&quot;);
                daSocket.emit('observe', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: daYamlFilename, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
                daConnected = true;
            });
            daSocket.on('terminate', function() {
                //console.log(&quot;Terminating socket&quot;);
                daSocket.disconnect();
            });
            daSocket.on('disconnect', function() {
                //console.log(&quot;Disconnected socket&quot;);
                //daSocket = null;
            });
            daSocket.on('stopcontrolling', function(data) {
                window.parent.daStopControlling(data.key);
            });
            daSocket.on('start_being_controlled', function(data) {
                //console.log(&quot;Got start_being_controlled&quot;);
                daConfirmed = true;
                daPushChanges();
                window.parent.daGotConfirmation(data.key);
            });
            daSocket.on('abortcontrolling', function(data) {
                //console.log(&quot;Got abortcontrolling&quot;);
                //daSendChanges = false;
                //daConfirmed = false;
                //daStopPushChanges();
                window.parent.daAbortControlling(data.key);
            });
            daSocket.on('noconnection', function(data) {
                //console.log(&quot;warning: no connection&quot;);
                if (daNoConnectionCount++ &gt; 2){
                    //console.log(&quot;error: no connection&quot;);
                    window.parent.daStopControlling(data.key);
                }
            });
            daSocket.on('newpage', function(incoming) {
                //console.log(&quot;Got newpage&quot;)
                var data = incoming.obj;
                $(daTargetDiv).html(data.body);
                $(daTargetDiv).parent().removeClass();
                $(daTargetDiv).parent().addClass(data.bodyclass);
                daInitialize(1);
                var tempDiv = document.createElement('div');
                tempDiv.innerHTML = data.extra_scripts;
                var scripts = tempDiv.getElementsByTagName('script');
                for (var i = 0; i &lt; scripts.length; i++){
                  if (scripts[i].src != &quot;&quot;){
                    daAddScriptToHead(scripts[i].src);
                  }
                  else{
                    daGlobalEval(scripts[i].innerHTML);
                  }
                }
                for (var i = 0; i &lt; data.extra_css.length; i++){
                  $(&quot;head&quot;).append(data.extra_css[i]);
                }
                document.title = data.browser_title;
                if ($(&quot;html&quot;).attr(&quot;lang&quot;) != data.lang){
                  $(&quot;html&quot;).attr(&quot;lang&quot;, data.lang);
                }
                daPushChanges();
            });
            daSocket.on('pushchanges', function(data) {
                //console.log(&quot;Got pushchanges: &quot; + JSON.stringify(data));
                var valArray = Object();
                var values = data.parameters;
                for (var i = 0; i &lt; values.length; i++) {
                    valArray[values[i].name] = values[i].value;
                }
                $(&quot;#daform&quot;).each(function(){
                    $(this).find(':input').each(function(){
                        var type = $(this).attr('type');
                        var id = $(this).attr('id');
                        var name = $(this).attr('name');
                        if (type == 'checkbox'){
                            if (name in valArray){
                                if (valArray[name] == 'True'){
                                    if ($(this).prop('checked') != true){
                                        $(this).prop('checked', true);
                                        $(this).trigger('change');
                                    }
                                }
                                else{
                                    if ($(this).prop('checked') != false){
                                        $(this).prop('checked', false);
                                        $(this).trigger('change');
                                    }
                                }
                            }
                            else{
                                if ($(this).prop('checked') != false){
                                    $(this).prop('checked', false);
                                    $(this).trigger('change');
                                }
                            }
                        }
                        else if (type == 'radio'){
                            if (name in valArray){
                                if (valArray[name] == $(this).val()){
                                    if ($(this).prop('checked') != true){
                                        $(this).prop('checked', true);
                                        $(this).trigger('change');
                                    }
                                }
                                else{
                                    if ($(this).prop('checked') != false){
                                        $(this).prop('checked', false);
                                        $(this).trigger('change');
                                    }
                                }
                            }
                        }
                        else if ($(this).data().hasOwnProperty('sliderMax')){
                            $(this).slider('setValue', parseInt(valArray[name]));
                        }
                        else{
                            if (name in valArray){
                                $(this).val(valArray[name]);
                            }
                        }
                    });
                });
            });
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot;"] 
  "30064771216" -> "128849018881"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771217" -> "128849018881"  [ label = "DDG: str(CHECKIN_INTERVAL)"] 
  "30064771218" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            if (cleanNum != 'NaN') {
              $(this).val(cleanNum);
            }
          }
        });
        $(&quot;#dahelp&quot;).on(&quot;shown.bs.tab&quot;, function(){
          window.scrollTo(0, 1);
          $(&quot;#dahelptoggle&quot;).removeClass('daactivetext')
          $(&quot;#dahelptoggle&quot;).blur();
        });
        $(&quot;#dasourcetoggle&quot;).on(&quot;click&quot;, function(){
          $(this).parent().toggleClass(&quot;active&quot;);
          $(this).blur();
        });
        $('#dabackToQuestion').click(function(event){
          $('#daquestionlabel').tab('show');
        });
        daShowIfInProcess = true;
        var daTriggerQueries = [];
        var daInputsSeen = {};
        function daOnlyUnique(value, index, self){
          return self.indexOf(value) === index;
        }
        $(&quot;.dajsshowif&quot;).each(function(){
          var showIfDiv = this;
          var jsInfo = JSON.parse(atou($(this).data('jsshowif')));
          var showIfSign = jsInfo['sign'];
          var showIfMode = jsInfo['mode'];
          var jsExpression = jsInfo['expression'];
          jsInfo['vars'].forEach(function(infoItem, i){
            var showIfVars = [];
            var initShowIfVar = utoa(infoItem).replace(/[\\n=]/g, '');
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
            if (elem.length &gt; 0){
              showIfVars.push(initShowIfVar);
            }
            if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
              for (var j = 0; j &lt; daVarLookupMulti[initShowIfVar].length; j++){
                var altShowIfVar = daVarLookupMulti[initShowIfVar][j];
                var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
                var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
                if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                  showIfVars.push(altShowIfVar);
                }
              }
            }
            if (showIfVars.length == 0){
              console.log(&quot;ERROR: reference to non-existent field &quot; + infoItem);
            }
            showIfVars.forEach(function(showIfVar){
              var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var varToUse = infoItem;
              var showHideDiv = function(speed){
                var elem = daGetField(varToUse);
                if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                  return;
                }
                var resultt = eval(jsExpression);
                if(resultt){
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                }
                else{
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                var leader = false;
                if (!daShowIfInProcess){
                  daShowIfInProcess = true;
                  daInputsSeen = {};
                  leader = true;
                }
                $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                  if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                    $(this).trigger('change');
                  }
                  daInputsSeen[$(this).attr('id')] = true;
                });
                if (leader){
                  daShowIfInProcess = false;
                }
              };
              var showHideDivImmediate = function(){
                showHideDiv.apply(this, [null]);
              }
              var showHideDivFast = function(){
                showHideDiv.apply(this, ['fast']);
              }
              daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
              daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
              $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            });
          });
        });
        $(&quot;.dashowif&quot;).each(function(){
          var showIfVars = [];
          var showIfSign = $(this).data('showif-sign');
          var showIfMode = parseInt($(this).data('showif-mode'));
          var initShowIfVar = $(this).data('showif-var');
          var varName = atou(initShowIfVar);
          var elem = [];
          if (varName.endsWith('[nota]') || varName.endsWith('[aota]')){
            var signifier = varName.endsWith('[nota]') ? 'nota' : 'aota';
            var cbVarName = varName.replace(/\[[na]ota\]$/, '');
            $('fieldset.da-field-checkboxes').each(function(){
              var thisVarName = atou($(this).data('varname'));
              if (thisVarName == cbVarName){
                elem = $(this).find('input.da' + signifier + '-checkbox');
                initShowIfVar = $(elem).attr('name');
              }
            });
          }
          else {
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
          }
          if (elem.length &gt; 0){
            showIfVars.push(initShowIfVar);
          }
          if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
            var n = daVarLookupMulti[initShowIfVar].length;
            for (var i = 0; i &lt; n; i++){
              var altShowIfVar = daVarLookupMulti[initShowIfVar][i];
              var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
              if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                showIfVars.push(altShowIfVar);
              }
            }
          }
          var showIfVal = $(this).data('showif-val');
          var saveAs = $(this).data('saveas');
          var showIfDiv = this;
          showIfVars.forEach(function(showIfVar){
            var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var showHideDiv = function(speed){
              var elem = daGetField(varName, showIfDiv);
              if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                return;
              }
              var theVal;
              var showifParents = $(this).parents(&quot;.dashowif&quot;);
              if (showifParents.length !== 0 &amp;&amp; !($(showifParents[0]).data(&quot;isVisible&quot;) == '1')){
                theVal = '';
                //console.log(&quot;Setting theVal to blank.&quot;);
              }
              else if ($(this).attr('type') == &quot;checkbox&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  //console.log('manually setting checkbox value to False');
                  theVal = 'False';
                }
              }
              else if ($(this).attr('type') == &quot;radio&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  theVal = '';
                }
                else if (theVal != '' &amp;&amp; $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              else{
                theVal = $(this).val();
                if (theVal != '' &amp;&amp; $(this).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              //console.log(&quot;this is &quot; + $(this).attr('id') + &quot; and saveAs is &quot; + atou(saveAs) + &quot; and showIfVar is &quot; + atou(showIfVar) + &quot; and val is &quot; + String(theVal) + &quot; and showIfVal is &quot; + String(showIfVal));
              if(daShowIfCompare(theVal, showIfVal)){
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
              }
              else{
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
              }
              var leader = false;
              if (!daShowIfInProcess){
                daShowIfInProcess = true;
                daInputsSeen = {};
                leader = true;
              }
              $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                  $(this).trigger('change');
                }
                daInputsSeen[$(this).attr('id')] = true;
              });
              if (leader){
                daShowIfInProcess = false;
              }
            };
            var showHideDivImmediate = function(){
              showHideDiv.apply(this, [null]);
            }
            var showHideDivFast = function(){
              showHideDiv.apply(this, ['fast']);
            }
            daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
            daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
            $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
          });
        });
        function daTriggerAllShowHides(){
          var daUniqueTriggerQueries = daTriggerQueries.filter(daOnlyUnique);
          var daFirstTime = true;
          var daTries = 0;
          while ((daFirstTime || daShowHideHappened) &amp;&amp; ++daTries &lt; 100){
            daShowHideHappened = false;
            daFirstTime = false;
            var n = daUniqueTriggerQueries.length;
            for (var i = 0; i &lt; n; ++i){
              $(daUniqueTriggerQueries[i]).trigger('daManualTrigger');
            }
          }
          if (daTries &gt;= 100){
            console.log(&quot;Too many contradictory 'show if' conditions&quot;);
          }
        }
        if (daTriggerQueries.length &gt; 0){
          daTriggerAllShowHides();
        }
        $(&quot;.danavlink&quot;).last().addClass('thelast');
        $(&quot;.danavlink&quot;).each(function(){
          if ($(this).hasClass('btn') &amp;&amp; !$(this).hasClass('danotavailableyet')){
            var the_a = $(this);
            var the_delay = 1000 + 250 * parseInt($(this).data('index'));
            setTimeout(function(){
              $(the_a).removeClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;secondary');
              if ($(the_a).hasClass('active')){
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;success');
              }
              else{
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;warning');
              }
            }, the_delay);
          }
        });
        daShowIfInProcess = false;
        // daDisable = setTimeout(function(){
        //   $(&quot;#daform&quot;).find('button[type=&quot;submit&quot;]').prop(&quot;disabled&quot;, true);
        //   //$(&quot;#daform&quot;).find(':input').prop(&quot;disabled&quot;, true);
        // }, 1);
        $(&quot;#daform&quot;).each(function(){
          $(this).find(':input').on('change', daOnChange);
        });
        daInitialized = true;
        daShowingHelp = 0;
        setTimeout(function(){
          $(&quot;#daflash .alert-success&quot;).hide(300, function(){
            $(self).remove();
          });
        }, 3000);
      }
      $( document ).ready(function(){
        daInitialize(1);
        var daDefaultAllowList = bootstrap.Tooltip.Default.allowList;
        daDefaultAllowList['*'].push('style');
        daDefaultAllowList['a'].push('style');
        daDefaultAllowList['img'].push('style');
        $( window ).bind('unload', function() {
          if (daSocket != null &amp;&amp; daSocket.connected){
            daSocket.emit('terminate');
          }
        });
        if (location.protocol === 'http:' || document.location.protocol === 'http:'){
            daSocket = io.connect('http://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT + &quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename});
        }
        if (location.protocol === 'https:' || document.location.protocol === 'https:'){
            daSocket = io.connect('https://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT + &quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename});
        }
        if (typeof daSocket !== 'undefined') {
            daSocket.on('connect', function() {
                //console.log(&quot;Connected!&quot;);
                daSocket.emit('observe', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: daYamlFilename, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
                daConnected = true;
            });
            daSocket.on('terminate', function() {
                //console.log(&quot;Terminating socket&quot;);
                daSocket.disconnect();
            });
            daSocket.on('disconnect', function() {
                //console.log(&quot;Disconnected socket&quot;);
                //daSocket = null;
            });
            daSocket.on('stopcontrolling', function(data) {
                window.parent.daStopControlling(data.key);
            });
            daSocket.on('start_being_controlled', function(data) {
                //console.log(&quot;Got start_being_controlled&quot;);
                daConfirmed = true;
                daPushChanges();
                window.parent.daGotConfirmation(data.key);
            });
            daSocket.on('abortcontrolling', function(data) {
                //console.log(&quot;Got abortcontrolling&quot;);
                //daSendChanges = false;
                //daConfirmed = false;
                //daStopPushChanges();
                window.parent.daAbortControlling(data.key);
            });
            daSocket.on('noconnection', function(data) {
                //console.log(&quot;warning: no connection&quot;);
                if (daNoConnectionCount++ &gt; 2){
                    //console.log(&quot;error: no connection&quot;);
                    window.parent.daStopControlling(data.key);
                }
            });
            daSocket.on('newpage', function(incoming) {
                //console.log(&quot;Got newpage&quot;)
                var data = incoming.obj;
                $(daTargetDiv).html(data.body);
                $(daTargetDiv).parent().removeClass();
                $(daTargetDiv).parent().addClass(data.bodyclass);
                daInitialize(1);
                var tempDiv = document.createElement('div');
                tempDiv.innerHTML = data.extra_scripts;
                var scripts = tempDiv.getElementsByTagName('script');
                for (var i = 0; i &lt; scripts.length; i++){
                  if (scripts[i].src != &quot;&quot;){
                    daAddScriptToHead(scripts[i].src);
                  }
                  else{
                    daGlobalEval(scripts[i].innerHTML);
                  }
                }
                for (var i = 0; i &lt; data.extra_css.length; i++){
                  $(&quot;head&quot;).append(data.extra_css[i]);
                }
                document.title = data.browser_title;
                if ($(&quot;html&quot;).attr(&quot;lang&quot;) != data.lang){
                  $(&quot;html&quot;).attr(&quot;lang&quot;, data.lang);
                }
                daPushChanges();
            });
            daSocket.on('pushchanges', function(data) {
                //console.log(&quot;Got pushchanges: &quot; + JSON.stringify(data));
                var valArray = Object();
                var values = data.parameters;
                for (var i = 0; i &lt; values.length; i++) {
                    valArray[values[i].name] = values[i].value;
                }
                $(&quot;#daform&quot;).each(function(){
                    $(this).find(':input').each(function(){
                        var type = $(this).attr('type');
                        var id = $(this).attr('id');
                        var name = $(this).attr('name');
                        if (type == 'checkbox'){
                            if (name in valArray){
                                if (valArray[name] == 'True'){
                                    if ($(this).prop('checked') != true){
                                        $(this).prop('checked', true);
                                        $(this).trigger('change');
                                    }
                                }
                                else{
                                    if ($(this).prop('checked') != false){
                                        $(this).prop('checked', false);
                                        $(this).trigger('change');
                                    }
                                }
                            }
                            else{
                                if ($(this).prop('checked') != false){
                                    $(this).prop('checked', false);
                                    $(this).trigger('change');
                                }
                            }
                        }
                        else if (type == 'radio'){
                            if (name in valArray){
                                if (valArray[name] == $(this).val()){
                                    if ($(this).prop('checked') != true){
                                        $(this).prop('checked', true);
                                        $(this).trigger('change');
                                    }
                                }
                                else{
                                    if ($(this).prop('checked') != false){
                                        $(this).prop('checked', false);
                                        $(this).trigger('change');
                                    }
                                }
                            }
                        }
                        else if ($(this).data().hasOwnProperty('sliderMax')){
                            $(this).slider('setValue', parseInt(valArray[name]));
                        }
                        else{
                            if (name in valArray){
                                $(this).val(valArray[name]);
                            }
                        }
                    });
                });
            });
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL)"] 
  "30064771219" -> "128849018881"  [ label = "DDG: &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            if (cleanNum != 'NaN') {
              $(this).val(cleanNum);
            }
          }
        });
        $(&quot;#dahelp&quot;).on(&quot;shown.bs.tab&quot;, function(){
          window.scrollTo(0, 1);
          $(&quot;#dahelptoggle&quot;).removeClass('daactivetext')
          $(&quot;#dahelptoggle&quot;).blur();
        });
        $(&quot;#dasourcetoggle&quot;).on(&quot;click&quot;, function(){
          $(this).parent().toggleClass(&quot;active&quot;);
          $(this).blur();
        });
        $('#dabackToQuestion').click(function(event){
          $('#daquestionlabel').tab('show');
        });
        daShowIfInProcess = true;
        var daTriggerQueries = [];
        var daInputsSeen = {};
        function daOnlyUnique(value, index, self){
          return self.indexOf(value) === index;
        }
        $(&quot;.dajsshowif&quot;).each(function(){
          var showIfDiv = this;
          var jsInfo = JSON.parse(atou($(this).data('jsshowif')));
          var showIfSign = jsInfo['sign'];
          var showIfMode = jsInfo['mode'];
          var jsExpression = jsInfo['expression'];
          jsInfo['vars'].forEach(function(infoItem, i){
            var showIfVars = [];
            var initShowIfVar = utoa(infoItem).replace(/[\\n=]/g, '');
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
            if (elem.length &gt; 0){
              showIfVars.push(initShowIfVar);
            }
            if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
              for (var j = 0; j &lt; daVarLookupMulti[initShowIfVar].length; j++){
                var altShowIfVar = daVarLookupMulti[initShowIfVar][j];
                var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
                var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
                if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                  showIfVars.push(altShowIfVar);
                }
              }
            }
            if (showIfVars.length == 0){
              console.log(&quot;ERROR: reference to non-existent field &quot; + infoItem);
            }
            showIfVars.forEach(function(showIfVar){
              var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var varToUse = infoItem;
              var showHideDiv = function(speed){
                var elem = daGetField(varToUse);
                if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                  return;
                }
                var resultt = eval(jsExpression);
                if(resultt){
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                }
                else{
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                var leader = false;
                if (!daShowIfInProcess){
                  daShowIfInProcess = true;
                  daInputsSeen = {};
                  leader = true;
                }
                $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                  if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                    $(this).trigger('change');
                  }
                  daInputsSeen[$(this).attr('id')] = true;
                });
                if (leader){
                  daShowIfInProcess = false;
                }
              };
              var showHideDivImmediate = function(){
                showHideDiv.apply(this, [null]);
              }
              var showHideDivFast = function(){
                showHideDiv.apply(this, ['fast']);
              }
              daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
              daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
              $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            });
          });
        });
        $(&quot;.dashowif&quot;).each(function(){
          var showIfVars = [];
          var showIfSign = $(this).data('showif-sign');
          var showIfMode = parseInt($(this).data('showif-mode'));
          var initShowIfVar = $(this).data('showif-var');
          var varName = atou(initShowIfVar);
          var elem = [];
          if (varName.endsWith('[nota]') || varName.endsWith('[aota]')){
            var signifier = varName.endsWith('[nota]') ? 'nota' : 'aota';
            var cbVarName = varName.replace(/\[[na]ota\]$/, '');
            $('fieldset.da-field-checkboxes').each(function(){
              var thisVarName = atou($(this).data('varname'));
              if (thisVarName == cbVarName){
                elem = $(this).find('input.da' + signifier + '-checkbox');
                initShowIfVar = $(elem).attr('name');
              }
            });
          }
          else {
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
          }
          if (elem.length &gt; 0){
            showIfVars.push(initShowIfVar);
          }
          if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
            var n = daVarLookupMulti[initShowIfVar].length;
            for (var i = 0; i &lt; n; i++){
              var altShowIfVar = daVarLookupMulti[initShowIfVar][i];
              var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
              if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                showIfVars.push(altShowIfVar);
              }
            }
          }
          var showIfVal = $(this).data('showif-val');
          var saveAs = $(this).data('saveas');
          var showIfDiv = this;
          showIfVars.forEach(function(showIfVar){
            var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var showHideDiv = function(speed){
              var elem = daGetField(varName, showIfDiv);
              if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                return;
              }
              var theVal;
              var showifParents = $(this).parents(&quot;.dashowif&quot;);
              if (showifParents.length !== 0 &amp;&amp; !($(showifParents[0]).data(&quot;isVisible&quot;) == '1')){
                theVal = '';
                //console.log(&quot;Setting theVal to blank.&quot;);
              }
              else if ($(this).attr('type') == &quot;checkbox&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  //console.log('manually setting checkbox value to False');
                  theVal = 'False';
                }
              }
              else if ($(this).attr('type') == &quot;radio&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  theVal = '';
                }
                else if (theVal != '' &amp;&amp; $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              else{
                theVal = $(this).val();
                if (theVal != '' &amp;&amp; $(this).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              //console.log(&quot;this is &quot; + $(this).attr('id') + &quot; and saveAs is &quot; + atou(saveAs) + &quot; and showIfVar is &quot; + atou(showIfVar) + &quot; and val is &quot; + String(theVal) + &quot; and showIfVal is &quot; + String(showIfVal));
              if(daShowIfCompare(theVal, showIfVal)){
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
              }
              else{
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
              }
              var leader = false;
              if (!daShowIfInProcess){
                daShowIfInProcess = true;
                daInputsSeen = {};
                leader = true;
              }
              $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                  $(this).trigger('change');
                }
                daInputsSeen[$(this).attr('id')] = true;
              });
              if (leader){
                daShowIfInProcess = false;
              }
            };
            var showHideDivImmediate = function(){
              showHideDiv.apply(this, [null]);
            }
            var showHideDivFast = function(){
              showHideDiv.apply(this, ['fast']);
            }
            daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
            daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
            $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
          });
        });
        function daTriggerAllShowHides(){
          var daUniqueTriggerQueries = daTriggerQueries.filter(daOnlyUnique);
          var daFirstTime = true;
          var daTries = 0;
          while ((daFirstTime || daShowHideHappened) &amp;&amp; ++daTries &lt; 100){
            daShowHideHappened = false;
            daFirstTime = false;
            var n = daUniqueTriggerQueries.length;
            for (var i = 0; i &lt; n; ++i){
              $(daUniqueTriggerQueries[i]).trigger('daManualTrigger');
            }
          }
          if (daTries &gt;= 100){
            console.log(&quot;Too many contradictory 'show if' conditions&quot;);
          }
        }
        if (daTriggerQueries.length &gt; 0){
          daTriggerAllShowHides();
        }
        $(&quot;.danavlink&quot;).last().addClass('thelast');
        $(&quot;.danavlink&quot;).each(function(){
          if ($(this).hasClass('btn') &amp;&amp; !$(this).hasClass('danotavailableyet')){
            var the_a = $(this);
            var the_delay = 1000 + 250 * parseInt($(this).data('index'));
            setTimeout(function(){
              $(the_a).removeClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;secondary');
              if ($(the_a).hasClass('active')){
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;success');
              }
              else{
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;warning');
              }
            }, the_delay);
          }
        });
        daShowIfInProcess = false;
        // daDisable = setTimeout(function(){
        //   $(&quot;#daform&quot;).find('button[type=&quot;submit&quot;]').prop(&quot;disabled&quot;, true);
        //   //$(&quot;#daform&quot;).find(':input').prop(&quot;disabled&quot;, true);
        // }, 1);
        $(&quot;#daform&quot;).each(function(){
          $(this).find(':input').on('change', daOnChange);
        });
        daInitialized = true;
        daShowingHelp = 0;
        setTimeout(function(){
          $(&quot;#daflash .alert-success&quot;).hide(300, function(){
            $(self).remove();
          });
        }, 3000);
      }
      $( document ).ready(function(){
        daInitialize(1);
        var daDefaultAllowList = bootstrap.Tooltip.Default.allowList;
        daDefaultAllowList['*'].push('style');
        daDefaultAllowList['a'].push('style');
        daDefaultAllowList['img'].push('style');
        $( window ).bind('unload', function() {
          if (daSocket != null &amp;&amp; daSocket.connected){
            daSocket.emit('terminate');
          }
        });
        if (location.protocol === 'http:' || document.location.protocol === 'http:'){
            daSocket = io.connect('http://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT + &quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename});
        }
        if (location.protocol === 'https:' || document.location.protocol === 'https:'){
            daSocket = io.connect('https://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT + &quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename});
        }
        if (typeof daSocket !== 'undefined') {
            daSocket.on('connect', function() {
                //console.log(&quot;Connected!&quot;);
                daSocket.emit('observe', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: daYamlFilename, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
                daConnected = true;
            });
            daSocket.on('terminate', function() {
                //console.log(&quot;Terminating socket&quot;);
                daSocket.disconnect();
            });
            daSocket.on('disconnect', function() {
                //console.log(&quot;Disconnected socket&quot;);
                //daSocket = null;
            });
            daSocket.on('stopcontrolling', function(data) {
                window.parent.daStopControlling(data.key);
            });
            daSocket.on('start_being_controlled', function(data) {
                //console.log(&quot;Got start_being_controlled&quot;);
                daConfirmed = true;
                daPushChanges();
                window.parent.daGotConfirmation(data.key);
            });
            daSocket.on('abortcontrolling', function(data) {
                //console.log(&quot;Got abortcontrolling&quot;);
                //daSendChanges = false;
                //daConfirmed = false;
                //daStopPushChanges();
                window.parent.daAbortControlling(data.key);
            });
            daSocket.on('noconnection', function(data) {
                //console.log(&quot;warning: no connection&quot;);
                if (daNoConnectionCount++ &gt; 2){
                    //console.log(&quot;error: no connection&quot;);
                    window.parent.daStopControlling(data.key);
                }
            });
            daSocket.on('newpage', function(incoming) {
                //console.log(&quot;Got newpage&quot;)
                var data = incoming.obj;
                $(daTargetDiv).html(data.body);
                $(daTargetDiv).parent().removeClass();
                $(daTargetDiv).parent().addClass(data.bodyclass);
                daInitialize(1);
                var tempDiv = document.createElement('div');
                tempDiv.innerHTML = data.extra_scripts;
                var scripts = tempDiv.getElementsByTagName('script');
                for (var i = 0; i &lt; scripts.length; i++){
                  if (scripts[i].src != &quot;&quot;){
                    daAddScriptToHead(scripts[i].src);
                  }
                  else{
                    daGlobalEval(scripts[i].innerHTML);
                  }
                }
                for (var i = 0; i &lt; data.extra_css.length; i++){
                  $(&quot;head&quot;).append(data.extra_css[i]);
                }
                document.title = data.browser_title;
                if ($(&quot;html&quot;).attr(&quot;lang&quot;) != data.lang){
                  $(&quot;html&quot;).attr(&quot;lang&quot;, data.lang);
                }
                daPushChanges();
            });
            daSocket.on('pushchanges', function(data) {
                //console.log(&quot;Got pushchanges: &quot; + JSON.stringify(data));
                var valArray = Object();
                var values = data.parameters;
                for (var i = 0; i &lt; values.length; i++) {
                    valArray[values[i].name] = values[i].value;
                }
                $(&quot;#daform&quot;).each(function(){
                    $(this).find(':input').each(function(){
                        var type = $(this).attr('type');
                        var id = $(this).attr('id');
                        var name = $(this).attr('name');
                        if (type == 'checkbox'){
                            if (name in valArray){
                                if (valArray[name] == 'True'){
                                    if ($(this).prop('checked') != true){
                                        $(this).prop('checked', true);
                                        $(this).trigger('change');
                                    }
                                }
                                else{
                                    if ($(this).prop('checked') != false){
                                        $(this).prop('checked', false);
                                        $(this).trigger('change');
                                    }
                                }
                            }
                            else{
                                if ($(this).prop('checked') != false){
                                    $(this).prop('checked', false);
                                    $(this).trigger('change');
                                }
                            }
                        }
                        else if (type == 'radio'){
                            if (name in valArray){
                                if (valArray[name] == $(this).val()){
                                    if ($(this).prop('checked') != true){
                                        $(this).prop('checked', true);
                                        $(this).trigger('change');
                                    }
                                }
                                else{
                                    if ($(this).prop('checked') != false){
                                        $(this).prop('checked', false);
                                        $(this).trigger('change');
                                    }
                                }
                            }
                        }
                        else if ($(this).data().hasOwnProperty('sliderMax')){
                            $(this).slider('setValue', parseInt(valArray[name]));
                        }
                        else{
                            if (name in valArray){
                                $(this).val(valArray[name]);
                            }
                        }
                    });
                });
            });
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        $(document).trigger('daPageLoad');
    });
    &lt;/script&gt;
&quot;&quot;&quot;"] 
  "30064771219" -> "128849018881"  [ label = "DDG: observation_script = &quot;&quot;&quot;
    &lt;script&gt;
      var isAndroid = /android/i.test(navigator.userAgent.toLowerCase());
      var daMapInfo = null;
      var daWhichButton = null;
      var daSendChanges = false;
      var daNoConnectionCount = 0;
      var daConnected = false;
      var daConfirmed = false;
      var daObserverChangesInterval = null;
      var daInitialized = false;
      var daShowingSpinner = false;
      var daSpinnerTimeout = null;
      var daShowingHelp = false;
      var daInformedChanged = false;
      var daDisable = null;
      var daCsrf = &quot;&quot;&quot; + json.dumps(generate_csrf()) + &quot;&quot;&quot;;
      var daShowIfInProcess = false;
      var daFieldsToSkip = ['_checkboxes', '_empties', '_ml_info', '_back_one', '_files', '_files_inline', '_question_name', '_the_image', '_save_as', '_success', '_datatypes', '_event', '_visible', '_tracker', '_track_location', '_varnames', '_next_action', '_next_action_to_set', 'ajax', 'json', 'informed', 'csrf_token', '_action', '_order_changes', '_collect', '_list_collect_list', '_null_question'];
      var daVarLookup = Object();
      var daVarLookupRev = Object();
      var daVarLookupMulti = Object();
      var daVarLookupRevMulti = Object();
      var daVarLookupSelect = Object();
      var daVarLookupCheckbox = Object();
      var daVarLookupOption = Object();
      var daTargetDiv = &quot;#dabody&quot;;
      var daComboBoxes = Object();
      var daLocationBar = &quot;&quot;&quot; + json.dumps(url_for('index', i = i)) + &quot;&quot;&quot;;
      var daPostURL = &quot;&quot;&quot; + json.dumps(url_for('index', i = i, _external = True)) + &quot;&quot;&quot;;
      var daYamlFilename = &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;;
      var daGlobalEval = eval;
      var daShowHideHappened = false;
      function daShowSpinner(){
        if ($(&quot;#daquestion&quot;).length &gt; 0){
          $('&lt;div id=&quot;daSpinner&quot; class=&quot;da-spinner-container da-top-for-navbar&quot;&gt;&lt;div class=&quot;container&quot;&gt;&lt;div class=&quot;row&quot;&gt;&lt;div class=&quot;col text-center&quot;&gt;&lt;span class=&quot;da-spinner&quot;&gt;&lt;i class=&quot;fas fa-spinner fa-spin&quot;&gt;&lt;\/i&gt;&lt;\/span&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;&lt;\/div&gt;').appendTo(daTargetDiv);
        }
        else{
          var newSpan = document.createElement('span');
          var newI = document.createElement('i');
          $(newI).addClass(&quot;fas fa-spinner fa-spin&quot;);
          $(newI).appendTo(newSpan);
          $(newSpan).attr(&quot;id&quot;, &quot;daSpinner&quot;);
          $(newSpan).addClass(&quot;da-sig-spinner da-top-for-navbar&quot;);
          $(newSpan).appendTo(&quot;#dasigtoppart&quot;);
        }
        daShowingSpinner = true;
      }
      function daHideSpinner(){
        $(&quot;#daSpinner&quot;).remove();
        daShowingSpinner = false;
        daSpinnerTimeout = null;
      }
      function daDisableIfNotHidden(query, value){
        $(query).each(function(){
          var showIfParent = $(this).parents('.dashowif, .dajsshowif');
          if (!(showIfParent.length &amp;&amp; ($(showIfParent[0]).data('isVisible') == '0' || !$(showIfParent[0]).is(&quot;:visible&quot;)))){
            if ($(this).hasClass('combobox')){
              if (value){
                daComboBoxes[$(this).attr('id')].disable();
              }
              else {
                daComboBoxes[$(this).attr('id')].enable();
              }
            }
            else if ($(this).hasClass('dafile')){
              if (value){
                $(this).data(&quot;fileinput&quot;).disable();
              }
              else{
                $(this).data(&quot;fileinput&quot;).enable();
              }
            }
            else if ($(this).hasClass('daslider')){
              if (value){
                $(this).slider('disable');
              }
              else{
                $(this).slider('enable');
              }
            }
            else {
              $(this).prop(&quot;disabled&quot;, value);
            }
          }
        });
      }
      function daShowIfCompare(theVal, showIfVal){
        if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+\.\d+$/)){
          theVal = parseFloat(theVal);
        }
        else if (typeof theVal == 'string' &amp;&amp; theVal.match(/^-?\d+$/)){
          theVal = parseInt(theVal);
        }
        if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+\.\d+$/)){
          showIfVal = parseFloat(showIfVal);
        }
        else if (typeof showIfVal == 'string' &amp;&amp; showIfVal.match(/^-?\d+$/)){
          showIfVal = parseInt(showIfVal);
        }
        if (typeof theVal == 'string' || typeof showIfVal == 'string'){
          if (String(showIfVal) == 'None' &amp;&amp; String(theVal) == ''){
            return true;
          }
          return (String(theVal) == String(showIfVal));
        }
        return (theVal == showIfVal);
      }
      function rationalizeListCollect(){
        var finalNum = $(&quot;.dacollectextraheader&quot;).last().data('collectnum');
        var num = $(&quot;.dacollectextraheader:visible&quot;).last().data('collectnum');
        if (parseInt(num) &lt; parseInt(finalNum)){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + num + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
            $('div.dacollectextraheader[data-collectnum=&quot;' + (num + 1) + '&quot;]').show('fast');
          }
        }
        var n = parseInt(finalNum);
        var firstNum = parseInt($(&quot;.dacollectextraheader&quot;).first().data('collectnum'));
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible') &amp;&amp; $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]').find(&quot;.dacollectremove&quot;).hasClass('dainvisible')){
              $('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').hide();
            }
          }
        }
        var n = parseInt(finalNum);
        var seenAddAnother = false;
        while (n-- &gt; firstNum){
          if ($('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]:visible').length &gt; 0){
            if (!$('div.dacollectextraheader[data-collectnum=&quot;' + (n + 1) + '&quot;]').find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              seenAddAnother = true;
            }
            var current = $('div.dacollectextraheader[data-collectnum=&quot;' + n + '&quot;]');
            if (seenAddAnother &amp;&amp; !$(current).find(&quot;.dacollectadd&quot;).hasClass('dainvisible')){
              $(current).find(&quot;.dacollectadd&quot;).addClass('dainvisible');
              $(current).find(&quot;.dacollectunremove&quot;).removeClass('dainvisible');
            }
          }
        }
      }
      var daNotificationContainer = &quot;&quot;&quot; + json.dumps(NOTIFICATION_CONTAINER) + &quot;&quot;&quot;;
      var daNotificationMessage = &quot;&quot;&quot; + json.dumps(NOTIFICATION_MESSAGE) + &quot;&quot;&quot;;
      Object.defineProperty(String.prototype, &quot;daSprintf&quot;, {
        value: function () {
          var args = Array.from(arguments),
            i = 0;
          function defaultNumber(iValue) {
            return iValue != undefined &amp;&amp; !isNaN(iValue) ? iValue : &quot;0&quot;;
          }
          function defaultString(iValue) {
            return iValue == undefined ? &quot;&quot; : &quot;&quot; + iValue;
          }
          return this.replace(
            /%%|%([+\\-])?([^1-9])?(\\d+)?(\\.\\d+)?([deEfhHioQqs])/g,
            function (match, sign, filler, scale, precision, type) {
              var strOut, space, value;
              var asNumber = false;
              if (match == &quot;%%&quot;) return &quot;%&quot;;
              if (i &gt;= args.length) return match;
              value = args[i];
              while (Array.isArray(value)) {
                args.splice(i, 1);
                for (var j = i; value.length &gt; 0; j++)
                  args.splice(j, 0, value.shift());
                value = args[i];
              }
              i++;
              if (filler == undefined) filler = &quot; &quot;; // default
              if (scale == undefined &amp;&amp; !isNaN(filler)) {
                scale = filler;
                filler = &quot; &quot;;
              }
              if (sign == undefined) sign = &quot;sqQ&quot;.indexOf(type) &gt;= 0 ? &quot;+&quot; : &quot;-&quot;; // default
              if (scale == undefined) scale = 0; // default
              if (precision == undefined) precision = &quot;.0&quot;; // default
              scale = parseInt(scale);
              precision = parseInt(precision.substr(1));
              switch (type) {
                case &quot;d&quot;:
                case &quot;i&quot;:
                  // decimal integer
                  asNumber = true;
                  strOut = parseInt(defaultNumber(value));
                  if (precision &gt; 0) strOut += &quot;.&quot; + &quot;0&quot;.repeat(precision);
                  break;
                case &quot;e&quot;:
                case &quot;E&quot;:
                  // float in exponential notation
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision == 0) strOut = strOut.toExponential();
                  else strOut = strOut.toExponential(precision);
                  if (type == &quot;E&quot;) strOut = strOut.replace(&quot;e&quot;, &quot;E&quot;);
                  break;
                case &quot;f&quot;:
                  // decimal float
                  asNumber = true;
                  strOut = parseFloat(defaultNumber(value));
                  if (precision != 0) strOut = strOut.toFixed(precision);
                  break;
                case &quot;o&quot;:
                case &quot;h&quot;:
                case &quot;H&quot;:
                  // Octal or Hexagesimal integer notation
                  strOut =
                    &quot;\\\\&quot; +
                    (type == &quot;o&quot; ? &quot;0&quot; : type) +
                    parseInt(defaultNumber(value)).toString(type == &quot;o&quot; ? 8 : 16);
                  break;
                case &quot;q&quot;:
                  // single quoted string
                  strOut = &quot;'&quot; + defaultString(value) + &quot;'&quot;;
                  break;
                case &quot;Q&quot;:
                  // double quoted string
                  strOut = '&quot;' + defaultString(value) + '&quot;';
                  break;
                default:
                  // string
                  strOut = defaultString(value);
                  break;
              }
              if (typeof strOut != &quot;string&quot;) strOut = &quot;&quot; + strOut;
              if ((space = strOut.length) &lt; scale) {
                if (asNumber) {
                  if (sign == &quot;-&quot;) {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = filler.repeat(scale - space) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  } else {
                    if (strOut.indexOf(&quot;-&quot;) &lt; 0)
                      strOut = &quot;+&quot; + filler.repeat(scale - space - 1) + strOut;
                    else
                      strOut =
                        &quot;-&quot; +
                        filler.repeat(scale - space) +
                        strOut.replace(&quot;-&quot;, &quot;&quot;);
                  }
                } else {
                  if (sign == &quot;-&quot;) strOut = filler.repeat(scale - space) + strOut;
                  else strOut = strOut + filler.repeat(scale - space);
                }
              } else if (asNumber &amp;&amp; sign == &quot;+&quot; &amp;&amp; strOut.indexOf(&quot;-&quot;) &lt; 0)
                strOut = &quot;+&quot; + strOut;
              return strOut;
            }
          );
        },
      });
      Object.defineProperty(window, &quot;daSprintf&quot;, {
        value: function (str, ...rest) {
          if (typeof str == &quot;string&quot;)
            return String.prototype.daSprintf.apply(str, rest);
          return &quot;&quot;;
        },
      });
      function daGoToAnchor(target){
        scrollTarget = $(target).first().offset().top - 60;
        if (scrollTarget != null){
          $(&quot;html, body&quot;).animate({
            scrollTop: scrollTarget
          }, 500);
        }
      }
      function atou(b64) {
        return decodeURIComponent(escape(atob(b64)));
      }
      function utoa(data) {
        return btoa(unescape(encodeURIComponent(data)));
      }
      function dabtoa(str) {
        return utoa(str).replace(/[\\n=]/g, '');
      }
      function daatob(str) {
        return atou(str);
      }
      function getFields(){
        var allFields = [];
        for (var rawFieldName in daVarLookup){
          if (daVarLookup.hasOwnProperty(rawFieldName)){
            var fieldName = atou(rawFieldName);
            if (allFields.indexOf(fieldName) == -1){
              allFields.push(fieldName);
            }
          }
        }
        return allFields;
      }
      var daGetFields = getFields;
      function daAppendIfExists(fieldName, theArray){
        var elem = $(&quot;[name='&quot; + fieldName + &quot;']&quot;);
        if (elem.length &gt; 0){
          for (var i = 0; i &lt; theArray.length; ++i){
            if (theArray[i] == elem[0]){
              return;
            }
          }
          theArray.push(elem[0]);
        }
      }
      function getField(fieldName, notInDiv){
        if (daVarLookupCheckbox[fieldName]){
          var n = daVarLookupCheckbox[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupCheckbox[fieldName][i].checkboxes[0].elem;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return daVarLookupCheckbox[fieldName][i].elem;
              }
            }
          }
        }
        if (daVarLookupSelect[fieldName]){
          var n = daVarLookupSelect[fieldName].length;
          for (var i = 0; i &lt; n; ++i){
            var elem = daVarLookupSelect[fieldName][i].select;
            if (!$(elem).prop('disabled')){
              var showifParents = $(elem).parents(&quot;.dajsshowif,.dashowif&quot;);
              if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
                if (notInDiv &amp;&amp; $.contains(notInDiv, elem)){
                  continue;
                }
                return elem;
              }
            }
          }
        }
        var fieldNameEscaped = dabtoa(fieldName);
        var possibleElements = [];
        daAppendIfExists(fieldNameEscaped, possibleElements);
        if (daVarLookupMulti.hasOwnProperty(fieldNameEscaped)){
          for (var i = 0; i &lt; daVarLookupMulti[fieldNameEscaped].length; ++i){
            daAppendIfExists(daVarLookupMulti[fieldNameEscaped][i], possibleElements);
          }
        }
        var returnVal = null;
        for (var i = 0; i &lt; possibleElements.length; ++i){
          if (!$(possibleElements[i]).prop('disabled') || $(possibleElements[i]).parents(&quot;.file-input.is-locked&quot;).length &gt; 0 ){
            var showifParents = $(possibleElements[i]).parents(&quot;.dajsshowif,.dashowif&quot;);
            if (showifParents.length == 0 || $(showifParents[0]).data(&quot;isVisible&quot;) == '1'){
              if (notInDiv &amp;&amp; $.contains(notInDiv, possibleElements[i])){
                continue;
              }
              returnVal = possibleElements[i];
            }
          }
        }
        if ($(returnVal).hasClass('da-to-labelauty') &amp;&amp; $(returnVal).parents('fieldset').length &gt; 0){
          var fieldSet = $(returnVal).parents('fieldset')[0];
          if (!$(fieldSet).hasClass('da-field-checkbox') &amp;&amp; !$(fieldSet).hasClass('da-field-checkboxes')){
            return fieldSet;
          }
        }
        return returnVal;
      }
      var daGetField = getField;
      function setChoices(fieldName, choices){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log(&quot;setChoices: reference to non-existent field &quot; + fieldName);
          return;
        }
        var isCombobox = ($(elem).attr('type') == &quot;hidden&quot; &amp;&amp; $(elem).parents('.combobox-container').length &gt; 0);
        if (isCombobox){
          var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
          var comboObject = daComboBoxes[$(comboInput).attr('id')];
          var oldComboVal = comboObject.$target.val();
          elem = comboObject.$source;
        }
        if ($(elem).prop('tagName') != &quot;SELECT&quot;){
          console.log(&quot;setField: field &quot; + fieldName + &quot; is not a dropdown field&quot;);
          return;
        }
        var oldVal = $(elem).val();
        $(elem).find(&quot;option[value!='']&quot;).each(function(){
          $(this).remove();
        });
        var n = choices.length;
        for (var i = 0; i &lt; n; i++){
          var opt = $(&quot;&lt;option&gt;&quot;);
          opt.val(choices[i][0]);
          opt.text(choices[i][1]);
          if (oldVal == choices[i][0]){
            opt.attr(&quot;selected&quot;, &quot;selected&quot;)
          }
          $(elem).append(opt);
        }
        if (isCombobox){
          comboObject.refresh();
          comboObject.clearTarget();
          if (oldComboVal != &quot;&quot;){
            daSetField(fieldName, oldComboVal);
          }
        }
      }
      var daSetChoices = setChoices;
      function setField(fieldName, theValue){
        var elem = daGetField(fieldName);
        if (elem == null){
          console.log('setField: reference to non-existent field ' + fieldName);
          return;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if (theValue){
            if ($(elem).prop('checked') != true){
              $(elem).click();
            }
          }
          else{
            if ($(elem).prop('checked') != false){
              $(elem).click();
            }
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          var wasSet = false;
          if (theValue === true){
            theValue = 'True';
          }
          if (theValue === false){
            theValue = 'False';
          }
          $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']&quot;).each(function(){
            if ($(this).val() == theValue){
              if ($(this).prop('checked') != true){
                $(this).prop('checked', true);
                $(this).trigger('change');
              }
              wasSet = true;
              return false;
            }
          });
          if (!wasSet){
            console.log('setField: could not set radio button ' + fieldName + ' to ' + theValue);
          }
        }
        else if ($(elem).attr('type') == &quot;hidden&quot;){
          if ($(elem).val() != theValue){
            if ($(elem).parents('.combobox-container').length &gt; 0){
              var comboInput = $(elem).parents('.combobox-container').first().find('input.combobox').first();
              daComboBoxes[$(comboInput).attr('id')].manualSelect(theValue);
            }
            else{
              $(elem).val(theValue);
              $(elem).trigger('change');
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          if (!Array.isArray(theValue)){
            throw new Error('setField: value must be an array');
          }
          var n = theValue.length;
          $(elem).find('input').each(function(){
            if ($(this).hasClass('danota-checkbox')){
              $(this).prop('checked', n == 0);
              $(this).trigger('change');
              return;
            }
            if ($(this).hasClass('daaota-checkbox')){
              $(this).prop('checked', false);
              $(this).trigger('change');
              return;
            }
            if ($(this).attr('name').substr(0, 7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            var oldVal = $(this).prop('checked') == true;
            var newVal = false;
            for (var i = 0; i &lt; n; ++i){
              if (theValue[i] == theVal){
                newVal = true;
              }
            }
            if (oldVal != newVal){
              $(this).click();
            }
          });
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                var oldValue = $(daVarLookupSelect[fieldName][i].option).prop('selected') == true;
                if (oldValue != theValue){
                  $(daVarLookupSelect[fieldName][i].option).prop('selected', theValue);
                  $(elem).trigger('change');
                }
              }
            }
          }
          else{
            if (!Array.isArray(theValue)){
              throw new Error('setField: value must be an array');
            }
            var n = theValue.length;
            var changed = false;
            $(elem).find('option').each(function(){
              var thisVal = daVarLookupOption[$(this).val()];
              var oldVal = $(this).prop('selected') == true;
              var newVal = false;
              for (var i = 0; i &lt; n; ++i){
                if (thisVal == theValue[i]){
                  newVal = true;
                }
              }
              if (newVal !== oldVal){
                changed = true;
                $(this).prop('selected', newVal);
              }
            });
            if (changed){
              $(elem).trigger('change');
            }
          }
        }
        else{
          if ($(elem).val() != theValue){
            $(elem).val(theValue);
            $(elem).trigger('change');
          }
        }
      }
      var daSetField = setField;
      function val(fieldName){
        var elem = daGetField(fieldName);
        if (elem == null){
          return null;
        }
        if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-radio&quot;)){
          elem = $(elem).find('input')[0];
        }
        if ($(elem).attr('type') == &quot;checkbox&quot;){
          if ($(elem).prop('checked')){
            theVal = true;
          }
          else{
            theVal = false;
          }
        }
        else if ($(elem).attr('type') == &quot;radio&quot;){
          var fieldNameEscaped = $(elem).attr('name').replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
          theVal = $(&quot;input[name='&quot; + fieldNameEscaped + &quot;']:checked&quot;).val();
          if (typeof(theVal) == 'undefined'){
            theVal = null;
          }
          else{
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            else if (theVal == 'True'){
              theVal = true;
            }
            else if (theVal == 'False'){
              theVal = false;
            }
          }
        }
        else if ($(elem).prop('tagName') == &quot;FIELDSET&quot; &amp;&amp; $(elem).hasClass(&quot;da-field-checkboxes&quot;)){
          var cbSelected = [];
          $(elem).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            if ($(elem).hasClass(&quot;daobject&quot;)){
              theVal = atou(theVal);
            }
            if ($(this).prop('checked')){
              cbSelected.push(theVal);
            }
          });
          return cbSelected;
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('damultiselect')){
          if (daVarLookupSelect[fieldName]){
            var n = daVarLookupSelect[fieldName].length;
            for (var i = 0; i &lt; n; ++i){
              if (daVarLookupSelect[fieldName][i].select === elem){
                return $(daVarLookupSelect[fieldName][i].option).prop('selected');
              }
            }
          }
          else{
            var selectedVals = [];
            $(elem).find('option').each(function(){
              if ($(this).prop('selected')){
                if (daVarLookupOption[$(this).val()]){
                  selectedVals.push(daVarLookupOption[$(this).val()]);
                }
              }
            });
            return selectedVals;
          }
        }
        else if ($(elem).prop('tagName') == &quot;SELECT&quot; &amp;&amp; $(elem).hasClass('daobject')){
          theVal = atou($(elem).val());
        }
        else{
          theVal = $(elem).val();
        }
        return theVal;
      }
      var da_val = val;
      window.daTurnOnControl = function(){
        //console.log(&quot;Turning on control&quot;);
        daSendChanges = true;
        daNoConnectionCount = 0;
        daResetPushChanges();
        daSocket.emit('observerStartControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
      }
      window.daTurnOffControl = function(){
        //console.log(&quot;Turning off control&quot;);
        if (!daSendChanges){
          //console.log(&quot;Already turned off&quot;);
          return;
        }
        daSendChanges = false;
        daConfirmed = false;
        daStopPushChanges();
        daSocket.emit('observerStopControl', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
        return;
      }
      function daInjectTrim(handler){
        return function (element, event) {
          if (element.tagName === &quot;TEXTAREA&quot; || (element.tagName === &quot;INPUT&quot; &amp;&amp; element.type !== &quot;password&quot; &amp;&amp; element.type !== &quot;date&quot; &amp;&amp; element.type !== &quot;datetime&quot; &amp;&amp; element.type !== &quot;file&quot;)) {
            setTimeout(function(){
              element.value = $.trim(element.value);
            }, 10);
          }
          return handler.call(this, element, event);
        };
      }
      function daInvalidHandler(form, validator){
        var errors = validator.numberOfInvalids();
        var scrollTarget = null;
        if (errors &amp;&amp; $(validator.errorList[0].element).parents('.da-form-group').length &gt; 0) {
          if (daJsEmbed){
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().position().top - 60;
          }
          else{
            scrollTarget = $(validator.errorList[0].element).parents('.da-form-group').first().offset().top - 60;
          }
        }
        if (scrollTarget != null){
          if (daJsEmbed){
            $(daTargetDiv).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
          else{
            $(&quot;html, body&quot;).animate({
              scrollTop: scrollTarget
            }, 1000);
          }
        }
      }
      function daValidationHandler(form){
        //console.log(&quot;observer: daValidationHandler&quot;);
        return(false);
      }
      function daStopPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
      }
      function daResetPushChanges(){
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
      }
      function daOnChange(){
      }
      function daPushChanges(){
        //console.log(&quot;Pushing changes&quot;);
        if (daObserverChangesInterval != null){
          clearInterval(daObserverChangesInterval);
        }
        if (!daSendChanges || !daConnected){
          return;
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
      }
      function daProcessAjaxError(xhr, status, error){
        if (xhr.responseType == undefined || xhr.responseType == '' || xhr.responseType == 'text'){
          var theHtml = xhr.responseText;
          if (theHtml == undefined){
            $(daTargetDiv).html(&quot;error&quot;);
          }
          else{
            theHtml = theHtml.replace(/&lt;script[^&gt;]*&gt;[^&lt;]*&lt;\/script&gt;/g, '');
            $(daTargetDiv).html(theHtml);
          }
          if (daJsEmbed){
            $(daTargetDiv)[0].scrollTo(0, 1);
          }
          else{
            window.scrollTo(0, 1);
          }
        }
        else {
          console.log(&quot;daProcessAjaxError: response was not text&quot;);
        }
      }
      function daAddScriptToHead(src){
        var head = document.getElementsByTagName(&quot;head&quot;)[0];
        var script = document.createElement(&quot;script&quot;);
        script.type = &quot;text/javascript&quot;;
        script.src = src;
        script.async = true;
        script.defer = true;
        head.appendChild(script);
      }
      function daSubmitter(event){
        if (!daSendChanges || !daConnected){
          event.preventDefault();
          return false;
        }
        var theAction = null;
        if ($(this).hasClass('da-review-action')){
          theAction = $(this).data('action');
        }
        var embeddedJs = $(this).data('js');
        var embeddedAction = $(this).data('embaction');
        var linkNum = $(this).data('linknum');
        var theId = $(this).attr('id');
        if (theId == 'dapagetitle'){
          theId = 'daquestionlabel';
        }
        var theName = $(this).attr('name');
        var theValue = $(this).val();
        var skey;
        if (linkNum){
          skey = 'a[data-linknum=&quot;' + linkNum + '&quot;]';
        }
        else if (embeddedAction){
          skey = 'a[data-embaction=&quot;' + embeddedAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theAction){
          skey = 'a[data-action=&quot;' + theAction.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1') + '&quot;]';
        }
        else if (theId){
          skey = '#' + theId.replace(/(:|\.|\[|\]|,|=|\/|\&quot;)/g, '\\\\$1');
        }
        else if (theName){
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[name=&quot;' + theName.replace(/(:|\.|\[|\]|,|=|\/)/g, '\\\\$1') + '&quot;]';
          if (typeof theValue !== 'undefined'){
            skey += '[value=&quot;' + theValue + '&quot;]'
          }
        }
        else{
          skey = '#' + $(this).parents(&quot;form&quot;).attr('id') + ' ' + $(this).prop('tagName').toLowerCase() + '[type=&quot;submit&quot;]';
        }
        //console.log(&quot;Need to click on &quot; + skey);
        if (daObserverChangesInterval != null &amp;&amp; embeddedJs == null &amp;&amp; theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          clearInterval(daObserverChangesInterval);
        }
        daSocket.emit('observerChanges', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: &quot;&quot;&quot; + json.dumps(i) + &quot;&quot;&quot;, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;, clicked: skey, parameters: JSON.stringify($(&quot;#daform&quot;).serializeArray())});
        if (embeddedJs != null){
          //console.log(&quot;Running the embedded js&quot;);
          daGlobalEval(decodeURIComponent(embeddedJs));
        }
        if (theId != &quot;dabackToQuestion&quot; &amp;&amp; theId != &quot;dahelptoggle&quot; &amp;&amp; theId != &quot;daquestionlabel&quot;){
          event.preventDefault();
          return false;
        }
      }
      function daAdjustInputWidth(e){
        var contents = $(this).val();
        var leftBracket = new RegExp('&lt;', 'g');
        var rightBracket = new RegExp('&gt;', 'g');
        contents = contents.replace(/&amp;/g,'&amp;amp;').replace(leftBracket,'&amp;lt;').replace(rightBracket,'&amp;gt;').replace(/ /g, '&amp;nbsp;');
        $('&lt;span class=&quot;dainput-embedded&quot; id=&quot;dawidth&quot;&gt;').html( contents ).appendTo('#daquestion');
        $(&quot;#dawidth&quot;).css('min-width', $(this).css('min-width'));
        $(&quot;#dawidth&quot;).css('background-color', $(daTargetDiv).css('background-color'));
        $(&quot;#dawidth&quot;).css('color', $(daTargetDiv).css('background-color'));
        $(this).width($('#dawidth').width() + 16);
        setTimeout(function(){
          $(&quot;#dawidth&quot;).remove();
        }, 0);
      }
      function daShowHelpTab(){
          //$('#dahelptoggle').tab('show');
      }
      function flash(message, priority, clear){
        if (priority == null){
          priority = 'info'
        }
        if (!$(&quot;#daflash&quot;).length){
          $(daTargetDiv).append(daSprintf(daNotificationContainer, &quot;&quot;));
        }
        if (clear){
          $(&quot;#daflash&quot;).empty();
        }
        if (message != null){
          $(&quot;#daflash&quot;).append(daSprintf(daNotificationMessage, priority, message));
          if (priority == 'success'){
            setTimeout(function(){
              $(&quot;#daflash .alert-success&quot;).hide(300, function(){
                $(this).remove();
              });
            }, 3000);
          }
        }
      }
      var da_flash = flash;
      function JSON_stringify(s){
         var json = JSON.stringify(s);
         return json.replace(/[\\u007f-\\uffff]/g,
            function(c) {
              return '\\\\u'+('0000'+c.charCodeAt(0).toString(16)).slice(-4);
            }
         );
      }
      function url_action(action, args){
        //redo?
        if (args == null){
            args = {};
        }
        data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return url;
      }
      var da_url_action = url_action;
      function action_call(action, args, callback, forgetPrior=false){
        //redo?
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        if (callback == null){
            callback = function(){};
        }
        var data = {action: action, arguments: args};
        var url;
        if (daJsEmbed){
          url = daPostURL + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        else{
          url = daLocationBar + &quot;&amp;action=&quot; + encodeURIComponent(utoa(JSON_stringify(data)))
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: url,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_action_call = action_call;
      var url_action_call = action_call;
      function action_perform(action, args, forgetPrior=false){
        //redo
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform = action_perform;
      var url_action_perform = action_perform;
      function action_perform_with_next(action, args, next_data, forgetPrior=false){
        //redo
        //console.log(&quot;action_perform_with_next: &quot; + action + &quot; | &quot; + next_data)
        if (args == null){
            args = {};
        }
        if (forgetPrior){
          args = {_action: action, _arguments: args};
          action = '_da_priority_action';
        }
        var data = {action: action, arguments: args};
        daSpinnerTimeout = setTimeout(daShowSpinner, 1000);
        return $.ajax({
          type: &quot;POST&quot;,
          url: daLocationBar,
          data: $.param({_action: utoa(JSON_stringify(data)), _next_action_to_set: utoa(JSON_stringify(next_data)), csrf_token: daCsrf, ajax: 1}),
          success: function(data){
            setTimeout(function(){
              daProcessAjax(data, $(&quot;#daform&quot;), 1);
            }, 0);
          },
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          },
          dataType: 'json'
        });
      }
      var da_action_perform_with_next = action_perform_with_next;
      var url_action_perform_with_next = action_perform_with_next;
      function get_interview_variables(callback){
        if (callback == null){
          callback = function(){};
        }
        return $.ajax({
          type: &quot;GET&quot;,
          url: &quot;&quot;&quot; + '&quot;' + url_for('get_variables', i = i) + '&quot;' + &quot;&quot;&quot;,
          success: callback,
          error: function(xhr, status, error){
            setTimeout(function(){
              daProcessAjaxError(xhr, status, error);
            }, 0);
          }
        });
      }
      var da_get_interview_variables = get_interview_variables;
      function daInitialize(doScroll){
        daComboBoxes = Object();
        daVarLookupSelect = Object();
        daVarLookupCheckbox = Object();
        if (daSpinnerTimeout != null){
          clearTimeout(daSpinnerTimeout);
          daSpinnerTimeout = null;
        }
        if (daShowingSpinner){
          daHideSpinner();
        }
        $('button[type=&quot;submit&quot;], input[type=&quot;submit&quot;], a.da-review-action, #dabackToQuestion, #daquestionlabel, #dapagetitle, #dahelptoggle, a[data-linknum], a[data-embaction], #dabackbutton').click(daSubmitter);
        $(&quot;.da-to-labelauty&quot;).labelauty({ class: &quot;labelauty da-active-invisible dafullwidth&quot; });
        //$(&quot;.da-to-labelauty-icon&quot;).labelauty({ label: false });
        var navMain = $(&quot;#danavbar-collapse&quot;);
        navMain.on(&quot;click&quot;, &quot;a&quot;, null, function () {
          if (!($(this).hasClass(&quot;dropdown-toggle&quot;))){
            navMain.collapse('hide');
          }
        });
        var daPopoverTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle=&quot;popover&quot;]'));
        var daPopoverList = daPopoverTriggerList.map(function (daPopoverTriggerEl) {
          return new bootstrap.Popover(daPopoverTriggerEl, {trigger: &quot;focus&quot;, html: true});
        });
        $(&quot;input.daaota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', true);
            if (existing_val != true){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danota-checkbox&quot;).click(function(){
          var anyChanged = false;
          var firstEncountered = null;
          $(this).parents('fieldset').find('input.danon-nota-checkbox').each(function(){
            if (firstEncountered === null){
              firstEncountered = this;
            }
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
              anyChanged = true;
            }
          });
          if (firstEncountered !== null &amp;&amp; anyChanged === false){
            $(firstEncountered).trigger('change');
          }
          $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
        });
        $(&quot;input.danon-nota-checkbox&quot;).click(function(){
          $(this).parents('fieldset').find('input.danota-checkbox').each(function(){
            var existing_val = $(this).prop('checked');
            $(this).prop('checked', false);
            if (existing_val != false){
              $(this).trigger('change');
            }
          });
          if (!$(this).prop('checked')){
            $(this).parents('fieldset').find('input.daaota-checkbox').each(function(){
              var existing_val = $(this).prop('checked');
              $(this).prop('checked', false);
              if (existing_val != false){
                $(this).trigger('change');
              }
            });
          }
        });
        $(&quot;input.dainput-embedded&quot;).on('keyup', daAdjustInputWidth);
        $(&quot;input.dainput-embedded&quot;).each(daAdjustInputWidth);
        // $(&quot;.dahelptrigger&quot;).click(function(e) {
        //   e.preventDefault();
        //   $(this).tab('show');
        // });
        //$(&quot;#daquestionlabel&quot;).click(function(e) {
        //  e.preventDefault();
        //  $(this).tab('show');
        //});
        $('#dapagetitle').click(function(e) {
          if ($(this).prop('href') == '#'){
            e.preventDefault();
            //$('#daquestionlabel').tab('show');
          }
        });
        $('select.damultiselect').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var theSelect = this;
          $(this).find('option').each(function(){
            var theVal = atou($(this).data('valname'));
            if (isObject){
              theVal = atou(theVal);
            }
            var key = varname + '[&quot;' + theVal + '&quot;]';
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
            key = varname + &quot;['&quot; + theVal + &quot;']&quot;
            if (!daVarLookupSelect[key]){
              daVarLookupSelect[key] = [];
            }
            daVarLookupSelect[key].push({'select': theSelect, 'option': this, 'value': theVal});
          });
        })
        $('fieldset.da-field-checkboxes').each(function(){
          var isObject = $(this).hasClass('daobject');
          var varname = atou($(this).data('varname'));
          var cbList = [];
          if (!daVarLookupCheckbox[varname]){
            daVarLookupCheckbox[varname] = [];
          }
          $(this).find('input').each(function(){
            if ($(this).attr('name').substr(0,7) === '_ignore'){
              return;
            }
            var theVal = atou($(this).data('cbvalue'));
            var theType = $(this).data('cbtype');
            var key;
            if (theType == 'R'){
              key = varname + '[' + theVal + ']';
            }
            else {
              key = varname + '[&quot;' + theVal + '&quot;]';
            }
            cbList.push({'variable': key, 'value': theVal, 'type': theType, 'elem': this})
          });
          daVarLookupCheckbox[varname].push({'elem': this, 'checkboxes': cbList, 'isObject': isObject});
        });
        $('.dacurrency').each(function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            $(this).val(cleanNum);
          }
        });
        $('.dacurrency').on('blur', function(){
          var theVal = $(this).val().toString();
          if (theVal.indexOf('.') &gt;= 0 || theVal.indexOf(',') &gt;= 0){
            var num = parseFloat(theVal);
            var cleanNum = num.toFixed(&quot;&quot;&quot; + str(daconfig.get('currency decimal places', 2)) + &quot;&quot;&quot;);
            if (cleanNum != 'NaN') {
              $(this).val(cleanNum);
            }
          }
        });
        $(&quot;#dahelp&quot;).on(&quot;shown.bs.tab&quot;, function(){
          window.scrollTo(0, 1);
          $(&quot;#dahelptoggle&quot;).removeClass('daactivetext')
          $(&quot;#dahelptoggle&quot;).blur();
        });
        $(&quot;#dasourcetoggle&quot;).on(&quot;click&quot;, function(){
          $(this).parent().toggleClass(&quot;active&quot;);
          $(this).blur();
        });
        $('#dabackToQuestion').click(function(event){
          $('#daquestionlabel').tab('show');
        });
        daShowIfInProcess = true;
        var daTriggerQueries = [];
        var daInputsSeen = {};
        function daOnlyUnique(value, index, self){
          return self.indexOf(value) === index;
        }
        $(&quot;.dajsshowif&quot;).each(function(){
          var showIfDiv = this;
          var jsInfo = JSON.parse(atou($(this).data('jsshowif')));
          var showIfSign = jsInfo['sign'];
          var showIfMode = jsInfo['mode'];
          var jsExpression = jsInfo['expression'];
          jsInfo['vars'].forEach(function(infoItem, i){
            var showIfVars = [];
            var initShowIfVar = utoa(infoItem).replace(/[\\n=]/g, '');
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
            if (elem.length &gt; 0){
              showIfVars.push(initShowIfVar);
            }
            if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
              for (var j = 0; j &lt; daVarLookupMulti[initShowIfVar].length; j++){
                var altShowIfVar = daVarLookupMulti[initShowIfVar][j];
                var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
                var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
                if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                  showIfVars.push(altShowIfVar);
                }
              }
            }
            if (showIfVars.length == 0){
              console.log(&quot;ERROR: reference to non-existent field &quot; + infoItem);
            }
            showIfVars.forEach(function(showIfVar){
              var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var varToUse = infoItem;
              var showHideDiv = function(speed){
                var elem = daGetField(varToUse);
                if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                  return;
                }
                var resultt = eval(jsExpression);
                if(resultt){
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                }
                else{
                  if (showIfSign){
                    if ($(showIfDiv).data('isVisible') != '0'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).hide(speed);
                    }
                    $(showIfDiv).data('isVisible', '0');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].disable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('disable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).disable();
                    });
                  }
                  else{
                    if ($(showIfDiv).data('isVisible') != '1'){
                      daShowHideHappened = true;
                    }
                    if (showIfMode == 0){
                      $(showIfDiv).show(speed);
                    }
                    $(showIfDiv).data('isVisible', '1');
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                var leader = false;
                if (!daShowIfInProcess){
                  daShowIfInProcess = true;
                  daInputsSeen = {};
                  leader = true;
                }
                $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                  if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                    $(this).trigger('change');
                  }
                  daInputsSeen[$(this).attr('id')] = true;
                });
                if (leader){
                  daShowIfInProcess = false;
                }
              };
              var showHideDivImmediate = function(){
                showHideDiv.apply(this, [null]);
              }
              var showHideDivFast = function(){
                showHideDiv.apply(this, ['fast']);
              }
              daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
              daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
              $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
              $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
              $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
              $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            });
          });
        });
        $(&quot;.dashowif&quot;).each(function(){
          var showIfVars = [];
          var showIfSign = $(this).data('showif-sign');
          var showIfMode = parseInt($(this).data('showif-mode'));
          var initShowIfVar = $(this).data('showif-var');
          var varName = atou(initShowIfVar);
          var elem = [];
          if (varName.endsWith('[nota]') || varName.endsWith('[aota]')){
            var signifier = varName.endsWith('[nota]') ? 'nota' : 'aota';
            var cbVarName = varName.replace(/\[[na]ota\]$/, '');
            $('fieldset.da-field-checkboxes').each(function(){
              var thisVarName = atou($(this).data('varname'));
              if (thisVarName == cbVarName){
                elem = $(this).find('input.da' + signifier + '-checkbox');
                initShowIfVar = $(elem).attr('name');
              }
            });
          }
          else {
            var initShowIfVarEscaped = initShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            elem = $(&quot;[name='&quot; + initShowIfVarEscaped + &quot;']&quot;);
          }
          if (elem.length &gt; 0){
            showIfVars.push(initShowIfVar);
          }
          if (daVarLookupMulti.hasOwnProperty(initShowIfVar)){
            var n = daVarLookupMulti[initShowIfVar].length;
            for (var i = 0; i &lt; n; i++){
              var altShowIfVar = daVarLookupMulti[initShowIfVar][i];
              var altShowIfVarEscaped = altShowIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
              var altElem = $(&quot;[name='&quot; + altShowIfVarEscaped + &quot;']&quot;);
              if (altElem.length &gt; 0 &amp;&amp; !$.contains(this, altElem[0])){
                showIfVars.push(altShowIfVar);
              }
            }
          }
          var showIfVal = $(this).data('showif-val');
          var saveAs = $(this).data('saveas');
          var showIfDiv = this;
          showIfVars.forEach(function(showIfVar){
            var showIfVarEscaped = showIfVar.replace(/(:|\.|\[|\]|,|=)/g, &quot;\\\\$1&quot;);
            var showHideDiv = function(speed){
              var elem = daGetField(varName, showIfDiv);
              if (elem != null &amp;&amp; !$(elem).parents('.da-form-group').first().is($(this).parents('.da-form-group').first())){
                return;
              }
              var theVal;
              var showifParents = $(this).parents(&quot;.dashowif&quot;);
              if (showifParents.length !== 0 &amp;&amp; !($(showifParents[0]).data(&quot;isVisible&quot;) == '1')){
                theVal = '';
                //console.log(&quot;Setting theVal to blank.&quot;);
              }
              else if ($(this).attr('type') == &quot;checkbox&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  //console.log('manually setting checkbox value to False');
                  theVal = 'False';
                }
              }
              else if ($(this).attr('type') == &quot;radio&quot;){
                theVal = $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).val();
                if (typeof(theVal) == 'undefined'){
                  theVal = '';
                }
                else if (theVal != '' &amp;&amp; $(&quot;input[name='&quot; + showIfVarEscaped + &quot;']:checked&quot;).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              else{
                theVal = $(this).val();
                if (theVal != '' &amp;&amp; $(this).hasClass(&quot;daobject&quot;)){
                  try{
                    theVal = atou(theVal);
                  }
                  catch(e){
                  }
                }
              }
              //console.log(&quot;this is &quot; + $(this).attr('id') + &quot; and saveAs is &quot; + atou(saveAs) + &quot; and showIfVar is &quot; + atou(showIfVar) + &quot; and val is &quot; + String(theVal) + &quot; and showIfVal is &quot; + String(showIfVal));
              if(daShowIfCompare(theVal, showIfVal)){
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
              }
              else{
                if (showIfSign){
                  if ($(showIfDiv).data('isVisible') != '0'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).hide(speed);
                  }
                  $(showIfDiv).data('isVisible', '0');
                  $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, true);
                  $(showIfDiv).find('input.combobox').each(function(){
                    daComboBoxes[$(this).attr('id')].disable();
                  });
                  $(showIfDiv).find('input.daslider').each(function(){
                    $(this).slider('disable');
                  });
                  $(showIfDiv).find('input.dafile').each(function(){
                    $(this).data(&quot;fileinput&quot;).disable();
                  });
                }
                else{
                  if ($(showIfDiv).data('isVisible') != '1'){
                    daShowHideHappened = true;
                  }
                  if (showIfMode == 0){
                    $(showIfDiv).show(speed);
                  }
                  $(showIfDiv).data('isVisible', '1');
                  var firstChild = $(showIfDiv).children()[0];
                  if (!$(firstChild).hasClass('dacollectextra') || $(firstChild).is(&quot;:visible&quot;)){
                    $(showIfDiv).find('input, textarea, select').prop(&quot;disabled&quot;, false);
                    $(showIfDiv).find('input.combobox').each(function(){
                      daComboBoxes[$(this).attr('id')].enable();
                    });
                    $(showIfDiv).find('input.daslider').each(function(){
                      $(this).slider('enable');
                    });
                    $(showIfDiv).find('input.dafile').each(function(){
                      $(this).data(&quot;fileinput&quot;).enable();
                    });
                  }
                }
              }
              var leader = false;
              if (!daShowIfInProcess){
                daShowIfInProcess = true;
                daInputsSeen = {};
                leader = true;
              }
              $(showIfDiv).find(&quot;:input&quot;).not(&quot;[type='file']&quot;).each(function(){
                if (!daInputsSeen.hasOwnProperty($(this).attr('id'))){
                  $(this).trigger('change');
                }
                daInputsSeen[$(this).attr('id')] = true;
              });
              if (leader){
                daShowIfInProcess = false;
              }
            };
            var showHideDivImmediate = function(){
              showHideDiv.apply(this, [null]);
            }
            var showHideDivFast = function(){
              showHideDiv.apply(this, ['fast']);
            }
            daTriggerQueries.push(&quot;#&quot; + showIfVarEscaped);
            daTriggerQueries.push(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            daTriggerQueries.push(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;);
            $(&quot;#&quot; + showIfVarEscaped).change(showHideDivFast);
            $(&quot;#&quot; + showIfVarEscaped).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='radio'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).change(showHideDivFast);
            $(&quot;input[type='checkbox'][name='&quot; + showIfVarEscaped + &quot;']&quot;).on('daManualTrigger', showHideDivImmediate);
            $(&quot;input.dafile[name='&quot; + showIfVarEscaped + &quot;']&quot;).on('filecleared', showHideDivFast);
          });
        });
        function daTriggerAllShowHides(){
          var daUniqueTriggerQueries = daTriggerQueries.filter(daOnlyUnique);
          var daFirstTime = true;
          var daTries = 0;
          while ((daFirstTime || daShowHideHappened) &amp;&amp; ++daTries &lt; 100){
            daShowHideHappened = false;
            daFirstTime = false;
            var n = daUniqueTriggerQueries.length;
            for (var i = 0; i &lt; n; ++i){
              $(daUniqueTriggerQueries[i]).trigger('daManualTrigger');
            }
          }
          if (daTries &gt;= 100){
            console.log(&quot;Too many contradictory 'show if' conditions&quot;);
          }
        }
        if (daTriggerQueries.length &gt; 0){
          daTriggerAllShowHides();
        }
        $(&quot;.danavlink&quot;).last().addClass('thelast');
        $(&quot;.danavlink&quot;).each(function(){
          if ($(this).hasClass('btn') &amp;&amp; !$(this).hasClass('danotavailableyet')){
            var the_a = $(this);
            var the_delay = 1000 + 250 * parseInt($(this).data('index'));
            setTimeout(function(){
              $(the_a).removeClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;secondary');
              if ($(the_a).hasClass('active')){
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;success');
              }
              else{
                $(the_a).addClass('&quot;&quot;&quot; + app.config['BUTTON_STYLE'] + &quot;&quot;&quot;warning');
              }
            }, the_delay);
          }
        });
        daShowIfInProcess = false;
        // daDisable = setTimeout(function(){
        //   $(&quot;#daform&quot;).find('button[type=&quot;submit&quot;]').prop(&quot;disabled&quot;, true);
        //   //$(&quot;#daform&quot;).find(':input').prop(&quot;disabled&quot;, true);
        // }, 1);
        $(&quot;#daform&quot;).each(function(){
          $(this).find(':input').on('change', daOnChange);
        });
        daInitialized = true;
        daShowingHelp = 0;
        setTimeout(function(){
          $(&quot;#daflash .alert-success&quot;).hide(300, function(){
            $(self).remove();
          });
        }, 3000);
      }
      $( document ).ready(function(){
        daInitialize(1);
        var daDefaultAllowList = bootstrap.Tooltip.Default.allowList;
        daDefaultAllowList['*'].push('style');
        daDefaultAllowList['a'].push('style');
        daDefaultAllowList['img'].push('style');
        $( window ).bind('unload', function() {
          if (daSocket != null &amp;&amp; daSocket.connected){
            daSocket.emit('terminate');
          }
        });
        if (location.protocol === 'http:' || document.location.protocol === 'http:'){
            daSocket = io.connect('http://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT + &quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename});
        }
        if (location.protocol === 'https:' || document.location.protocol === 'https:'){
            daSocket = io.connect('https://' + document.domain + '/observer', {path: '&quot;&quot;&quot; + ROOT + &quot;&quot;&quot;ws/socket.io', query: &quot;i=&quot; + daYamlFilename});
        }
        if (typeof daSocket !== 'undefined') {
            daSocket.on('connect', function() {
                //console.log(&quot;Connected!&quot;);
                daSocket.emit('observe', {uid: &quot;&quot;&quot; + json.dumps(uid) + &quot;&quot;&quot;, i: daYamlFilename, userid: &quot;&quot;&quot; + json.dumps(str(userid)) + &quot;&quot;&quot;});
                daConnected = true;
            });
            daSocket.on('terminate', function() {
                //console.log(&quot;Terminating socket&quot;);
                daSocket.disconnect();
            });
            daSocket.on('disconnect', function() {
                //console.log(&quot;Disconnected socket&quot;);
                //daSocket = null;
            });
            daSocket.on('stopcontrolling', function(data) {
                window.parent.daStopControlling(data.key);
            });
            daSocket.on('start_being_controlled', function(data) {
                //console.log(&quot;Got start_being_controlled&quot;);
                daConfirmed = true;
                daPushChanges();
                window.parent.daGotConfirmation(data.key);
            });
            daSocket.on('abortcontrolling', function(data) {
                //console.log(&quot;Got abortcontrolling&quot;);
                //daSendChanges = false;
                //daConfirmed = false;
                //daStopPushChanges();
                window.parent.daAbortControlling(data.key);
            });
            daSocket.on('noconnection', function(data) {
                //console.log(&quot;warning: no connection&quot;);
                if (daNoConnectionCount++ &gt; 2){
                    //console.log(&quot;error: no connection&quot;);
                    window.parent.daStopControlling(data.key);
                }
            });
            daSocket.on('newpage', function(incoming) {
                //console.log(&quot;Got newpage&quot;)
                var data = incoming.obj;
                $(daTargetDiv).html(data.body);
                $(daTargetDiv).parent().removeClass();
                $(daTargetDiv).parent().addClass(data.bodyclass);
                daInitialize(1);
                var tempDiv = document.createElement('div');
                tempDiv.innerHTML = data.extra_scripts;
                var scripts = tempDiv.getElementsByTagName('script');
                for (var i = 0; i &lt; scripts.length; i++){
                  if (scripts[i].src != &quot;&quot;){
                    daAddScriptToHead(scripts[i].src);
                  }
                  else{
                    daGlobalEval(scripts[i].innerHTML);
                  }
                }
                for (var i = 0; i &lt; data.extra_css.length; i++){
                  $(&quot;head&quot;).append(data.extra_css[i]);
                }
                document.title = data.browser_title;
                if ($(&quot;html&quot;).attr(&quot;lang&quot;) != data.lang){
                  $(&quot;html&quot;).attr(&quot;lang&quot;, data.lang);
                }
                daPushChanges();
            });
            daSocket.on('pushchanges', function(data) {
                //console.log(&quot;Got pushchanges: &quot; + JSON.stringify(data));
                var valArray = Object();
                var values = data.parameters;
                for (var i = 0; i &lt; values.length; i++) {
                    valArray[values[i].name] = values[i].value;
                }
                $(&quot;#daform&quot;).each(function(){
                    $(this).find(':input').each(function(){
                        var type = $(this).attr('type');
                        var id = $(this).attr('id');
                        var name = $(this).attr('name');
                        if (type == 'checkbox'){
                            if (name in valArray){
                                if (valArray[name] == 'True'){
                                    if ($(this).prop('checked') != true){
                                        $(this).prop('checked', true);
                                        $(this).trigger('change');
                                    }
                                }
                                else{
                                    if ($(this).prop('checked') != false){
                                        $(this).prop('checked', false);
                                        $(this).trigger('change');
                                    }
                                }
                            }
                            else{
                                if ($(this).prop('checked') != false){
                                    $(this).prop('checked', false);
                                    $(this).trigger('change');
                                }
                            }
                        }
                        else if (type == 'radio'){
                            if (name in valArray){
                                if (valArray[name] == $(this).val()){
                                    if ($(this).prop('checked') != true){
                                        $(this).prop('checked', true);
                                        $(this).trigger('change');
                                    }
                                }
                                else{
                                    if ($(this).prop('checked') != false){
                                        $(this).prop('checked', false);
                                        $(this).trigger('change');
                                    }
                                }
                            }
                        }
                        else if ($(this).data().hasOwnProperty('sliderMax')){
                            $(this).slider('setValue', parseInt(valArray[name]));
                        }
                        else{
                            if (name in valArray){
                                $(this).val(valArray[name]);
                            }
                        }
                    });
                });
            });
        }
        daObserverChangesInterval = setInterval(daPushChanges, &quot;&quot;&quot; + str(CHECKIN_INTERVAL) + &quot;&quot;&quot;);
        $(document).trigger('daPageLoad');
    });
    &lt;/script&gt;
&quot;&quot;&quot;"] 
  "30064771220" -> "128849018881"  [ label = "DDG: uid"] 
  "30064771221" -> "128849018881"  [ label = "DDG: str(uid)"] 
  "30064771222" -> "128849018881"  [ label = "DDG: 'da:html:uid:' + str(uid)"] 
  "30064771224" -> "128849018881"  [ label = "DDG: 'da:html:uid:' + str(uid) + ':i:'"] 
  "30064771223" -> "128849018881"  [ label = "DDG: i"] 
  "30064771224" -> "128849018881"  [ label = "DDG: str(i)"] 
  "30064771225" -> "128849018881"  [ label = "DDG: 'da:html:uid:' + str(uid) + ':i:' + str(i)"] 
  "30064771227" -> "128849018881"  [ label = "DDG: 'da:html:uid:' + str(uid) + ':i:' + str(i) + ':userid:'"] 
  "30064771226" -> "128849018881"  [ label = "DDG: userid"] 
  "30064771227" -> "128849018881"  [ label = "DDG: str(userid)"] 
  "30064771228" -> "128849018881"  [ label = "DDG: 'da:html:uid:' + str(uid) + ':i:' + str(i) + ':userid:' + str(userid)"] 
  "30064771228" -> "128849018881"  [ label = "DDG: the_key = 'da:html:uid:' + str(uid) + ':i:' + str(i) + ':userid:' + str(userid)"] 
  "30064771230" -> "128849018881"  [ label = "DDG: r"] 
  "30064771230" -> "128849018881"  [ label = "DDG: the_key"] 
  "30064771231" -> "128849018881"  [ label = "DDG: r.get(the_key)"] 
  "30064771231" -> "128849018881"  [ label = "DDG: html = r.get(the_key)"] 
  "30064771232" -> "128849018881"  [ label = "DDG: html"] 
  "30064771232" -> "128849018881"  [ label = "DDG: html is not None"] 
  "30064771238" -> "128849018881"  [ label = "DDG: the_key"] 
  "30064771239" -> "128849018881"  [ label = "DDG: &quot;observer: failed to load JSON from key &quot; + the_key"] 
  "30064771239" -> "128849018881"  [ label = "DDG: logmessage(&quot;observer: failed to load JSON from key &quot; + the_key)"] 
  "30064771241" -> "128849018881"  [ label = "DDG: tmp3"] 
  "30064771241" -> "128849018881"  [ label = "DDG: {}"] 
  "30064771241" -> "128849018881"  [ label = "DDG: tmp3 = {}"] 
  "30064771242" -> "128849018881"  [ label = "DDG: obj = tmp3 = {}
tmp3"] 
  "30064771236" -> "128849018881"  [ label = "DDG: json"] 
  "30064771234" -> "128849018881"  [ label = "DDG: html"] 
  "30064771236" -> "128849018881"  [ label = "DDG: html.decode()"] 
  "30064771237" -> "128849018881"  [ label = "DDG: json.loads(html.decode())"] 
  "30064771237" -> "128849018881"  [ label = "DDG: obj = json.loads(html.decode())"] 
  "30064771244" -> "128849018881"  [ label = "DDG: word('Observation')"] 
  "30064771244" -> "128849018881"  [ label = "DDG: page_title = word('Observation')"] 
  "30064771249" -> "128849018881"  [ label = "DDG: DEBUG"] 
  "30064771249" -> "128849018881"  [ label = "DDG: obj.get('bootstrap_theme', None)"] 
  "30064771250" -> "128849018881"  [ label = "DDG: standard_html_start(interview_language = obj.get('lang', 'en'), debug = DEBUG, bootstrap_theme = obj.get('bootstrap_theme', None))"] 
  "30064771250" -> "128849018881"  [ label = "DDG: output = standard_html_start(interview_language = obj.get('lang', 'en'), debug = DEBUG, bootstrap_theme = obj.get('bootstrap_theme', None))"] 
  "30064771253" -> "128849018881"  [ label = "DDG: obj.get('global_css', '')"] 
  "30064771261" -> "128849018881"  [ label = "DDG: obj.get('global_css', '') + &quot;\n&quot;"] 
  "30064771257" -> "128849018881"  [ label = "DDG: tmp4 = &quot;&quot;"] 
  "30064771259" -> "128849018881"  [ label = "DDG: tmp4"] 
  "30064771259" -> "128849018881"  [ label = "DDG: obj.get('extra_css', [])"] 
  "30064771259" -> "128849018881"  [ label = "DDG: tmp4.join(obj.get('extra_css', []))"] 
  "30064771261" -> "128849018881"  [ label = "DDG: indent_by(tmp4 = &quot;&quot;
tmp4.join(obj.get('extra_css', [])), 4)"] 
  "30064771262" -> "128849018881"  [ label = "DDG: obj.get('global_css', '') + &quot;\n&quot; + indent_by(tmp4 = &quot;&quot;
tmp4.join(obj.get('extra_css', [])), 4)"] 
  "30064771262" -> "128849018881"  [ label = "DDG: output += obj.get('global_css', '') + &quot;\n&quot; + indent_by(tmp4 = &quot;&quot;
tmp4.join(obj.get('extra_css', [])), 4)"] 
  "30064771263" -> "128849018881"  [ label = "DDG: page_title"] 
  "30064771264" -> "128849018881"  [ label = "DDG: '\n    &lt;title&gt;' + page_title"] 
  "30064771267" -> "128849018881"  [ label = "DDG: '\n    &lt;title&gt;' + page_title + '&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body class=&quot;'"] 
  "30064771267" -> "128849018881"  [ label = "DDG: obj.get('bodyclass', 'dabody da-pad-for-navbar da-pad-for-footer')"] 
  "30064771268" -> "128849018881"  [ label = "DDG: '\n    &lt;title&gt;' + page_title + '&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body class=&quot;' + obj.get('bodyclass', 'dabody da-pad-for-navbar da-pad-for-footer')"] 
  "30064771269" -> "128849018881"  [ label = "DDG: '\n    &lt;title&gt;' + page_title + '&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body class=&quot;' + obj.get('bodyclass', 'dabody da-pad-for-navbar da-pad-for-footer') + '&quot;&gt;\n  &lt;div id=&quot;dabody&quot;&gt;\n  '"] 
  "30064771269" -> "128849018881"  [ label = "DDG: output += '\n    &lt;title&gt;' + page_title + '&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body class=&quot;' + obj.get('bodyclass', 'dabody da-pad-for-navbar da-pad-for-footer') + '&quot;&gt;\n  &lt;div id=&quot;dabody&quot;&gt;\n  '"] 
  "30064771272" -> "128849018881"  [ label = "DDG: obj.get('body', '')"] 
  "30064771272" -> "128849018881"  [ label = "DDG: output += obj.get('body', '')"] 
  "30064771275" -> "128849018881"  [ label = "DDG: obj.get('lang', 'en')"] 
  "30064771276" -> "128849018881"  [ label = "DDG: standard_scripts(interview_language = obj.get('lang', 'en'))"] 
  "30064771277" -> "128849018881"  [ label = "DDG: &quot;    &lt;/div&gt;\n    &lt;/div&gt;&quot; + standard_scripts(interview_language = obj.get('lang', 'en'))"] 
  "30064771277" -> "128849018881"  [ label = "DDG: observation_script"] 
  "30064771278" -> "128849018881"  [ label = "DDG: &quot;    &lt;/div&gt;\n    &lt;/div&gt;&quot; + standard_scripts(interview_language = obj.get('lang', 'en')) + observation_script"] 
  "30064771285" -> "128849018881"  [ label = "DDG: &quot;    &lt;/div&gt;\n    &lt;/div&gt;&quot; + standard_scripts(interview_language = obj.get('lang', 'en')) + observation_script + &quot;\n    &quot;"] 
  "30064771282" -> "128849018881"  [ label = "DDG: tmp5 = &quot;&quot;"] 
  "30064771284" -> "128849018881"  [ label = "DDG: tmp5"] 
  "30064771281" -> "128849018881"  [ label = "DDG: obj"] 
  "30064771281" -> "128849018881"  [ label = "DDG: []"] 
  "30064771284" -> "128849018881"  [ label = "DDG: obj.get('extra_scripts', [])"] 
  "30064771284" -> "128849018881"  [ label = "DDG: tmp5.join(obj.get('extra_scripts', []))"] 
  "30064771286" -> "128849018881"  [ label = "DDG: &quot;    &lt;/div&gt;\n    &lt;/div&gt;&quot; + standard_scripts(interview_language = obj.get('lang', 'en')) + observation_script + &quot;\n    &quot; + tmp5 = &quot;&quot;
tmp5.join(obj.get('extra_scripts', []))"] 
  "30064771287" -> "128849018881"  [ label = "DDG: &quot;    &lt;/div&gt;\n    &lt;/div&gt;&quot; + standard_scripts(interview_language = obj.get('lang', 'en')) + observation_script + &quot;\n    &quot; + tmp5 = &quot;&quot;
tmp5.join(obj.get('extra_scripts', [])) + &quot;\n  &lt;/body&gt;\n&lt;/html&gt;&quot;"] 
  "30064771287" -> "128849018881"  [ label = "DDG: output += &quot;    &lt;/div&gt;\n    &lt;/div&gt;&quot; + standard_scripts(interview_language = obj.get('lang', 'en')) + observation_script + &quot;\n    &quot; + tmp5 = &quot;&quot;
tmp5.join(obj.get('extra_scripts', [])) + &quot;\n  &lt;/body&gt;\n&lt;/html&gt;&quot;"] 
  "30064771291" -> "128849018881"  [ label = "DDG: response"] 
  "30064771289" -> "128849018881"  [ label = "DDG: output"] 
  "30064771290" -> "128849018881"  [ label = "DDG: output.encode('utf-8')"] 
  "30064771291" -> "128849018881"  [ label = "DDG: make_response(output.encode('utf-8'), '200 OK')"] 
  "30064771291" -> "128849018881"  [ label = "DDG: response = make_response(output.encode('utf-8'), '200 OK')"] 
  "30064771294" -> "128849018881"  [ label = "DDG: response.headers['Content-type']"] 
  "30064771294" -> "128849018881"  [ label = "DDG: response.headers['Content-type'] = 'text/html; charset=utf-8'"] 
  "111669149697" -> "30064771073"  [ label = "DDG: "] 
  "111669149697" -> "30064771075"  [ label = "DDG: "] 
  "30064771079" -> "30064771080"  [ label = "DDG: tmp0.get('i', None)"] 
  "111669149697" -> "30064771080"  [ label = "DDG: "] 
  "30064771084" -> "30064771085"  [ label = "DDG: tmp1.get('uid', None)"] 
  "111669149697" -> "30064771085"  [ label = "DDG: "] 
  "30064771089" -> "30064771090"  [ label = "DDG: tmp2.get('userid', None)"] 
  "111669149697" -> "30064771090"  [ label = "DDG: "] 
  "111669149697" -> "30064771219"  [ label = "DDG: "] 
  "30064771093" -> "30064771219"  [ label = "DDG: json"] 
  "30064771093" -> "30064771219"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771219"  [ label = "DDG: json"] 
  "30064771098" -> "30064771219"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771219"  [ label = "DDG: json"] 
  "30064771103" -> "30064771219"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771219"  [ label = "DDG: json"] 
  "30064771107" -> "30064771219"  [ label = "DDG: i"] 
  "30064771111" -> "30064771219"  [ label = "DDG: json"] 
  "30064771111" -> "30064771219"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771219"  [ label = "DDG: json"] 
  "30064771115" -> "30064771219"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771219"  [ label = "DDG: json"] 
  "30064771119" -> "30064771219"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771219"  [ label = "DDG: json"] 
  "30064771123" -> "30064771219"  [ label = "DDG: i"] 
  "30064771128" -> "30064771219"  [ label = "DDG: json"] 
  "30064771128" -> "30064771219"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771219"  [ label = "DDG: json"] 
  "30064771132" -> "30064771219"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771219"  [ label = "DDG: json"] 
  "30064771136" -> "30064771219"  [ label = "DDG: i"] 
  "30064771141" -> "30064771219"  [ label = "DDG: json"] 
  "30064771141" -> "30064771219"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771219"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771219"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771219"  [ label = "DDG: json"] 
  "30064771151" -> "30064771219"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771219"  [ label = "DDG: json"] 
  "30064771155" -> "30064771219"  [ label = "DDG: i"] 
  "30064771160" -> "30064771219"  [ label = "DDG: json"] 
  "30064771160" -> "30064771219"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771219"  [ label = "DDG: json"] 
  "30064771164" -> "30064771219"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771219"  [ label = "DDG: json"] 
  "30064771168" -> "30064771219"  [ label = "DDG: i"] 
  "30064771173" -> "30064771219"  [ label = "DDG: json"] 
  "30064771173" -> "30064771219"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771219"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771219"  [ label = "DDG: i"] 
  "30064771183" -> "30064771219"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771188" -> "30064771219"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771208" -> "30064771219"  [ label = "DDG: json"] 
  "30064771208" -> "30064771219"  [ label = "DDG: uid"] 
  "30064771213" -> "30064771219"  [ label = "DDG: json"] 
  "30064771213" -> "30064771219"  [ label = "DDG: str(userid)"] 
  "30064771216" -> "30064771219"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "111669149697" -> "30064771228"  [ label = "DDG: "] 
  "30064771220" -> "30064771228"  [ label = "DDG: uid"] 
  "30064771223" -> "30064771228"  [ label = "DDG: i"] 
  "30064771226" -> "30064771228"  [ label = "DDG: userid"] 
  "30064771230" -> "30064771231"  [ label = "DDG: r"] 
  "30064771230" -> "30064771231"  [ label = "DDG: the_key"] 
  "30064771243" -> "30064771244"  [ label = "DDG: 'Observation'"] 
  "30064771249" -> "30064771250"  [ label = "DDG: obj.get('lang', 'en')"] 
  "30064771249" -> "30064771250"  [ label = "DDG: DEBUG"] 
  "30064771249" -> "30064771250"  [ label = "DDG: obj.get('bootstrap_theme', None)"] 
  "30064771252" -> "30064771262"  [ label = "DDG: obj"] 
  "30064771252" -> "30064771262"  [ label = "DDG: 'global_css'"] 
  "30064771252" -> "30064771262"  [ label = "DDG: ''"] 
  "111669149697" -> "30064771262"  [ label = "DDG: "] 
  "30064771260" -> "30064771262"  [ label = "DDG: tmp4 = &quot;&quot;
tmp4.join(obj.get('extra_css', []))"] 
  "30064771260" -> "30064771262"  [ label = "DDG: 4"] 
  "30064771260" -> "30064771262"  [ label = "DDG: "] 
  "111669149697" -> "30064771269"  [ label = "DDG: "] 
  "30064771244" -> "30064771269"  [ label = "DDG: page_title"] 
  "30064771266" -> "30064771269"  [ label = "DDG: obj"] 
  "30064771266" -> "30064771269"  [ label = "DDG: 'bodyclass'"] 
  "30064771266" -> "30064771269"  [ label = "DDG: 'dabody da-pad-for-navbar da-pad-for-footer'"] 
  "30064771271" -> "30064771272"  [ label = "DDG: obj"] 
  "30064771271" -> "30064771272"  [ label = "DDG: 'body'"] 
  "30064771271" -> "30064771272"  [ label = "DDG: ''"] 
  "111669149697" -> "30064771287"  [ label = "DDG: "] 
  "30064771275" -> "30064771287"  [ label = "DDG: obj.get('lang', 'en')"] 
  "30064771219" -> "30064771287"  [ label = "DDG: observation_script"] 
  "30064771284" -> "30064771287"  [ label = "DDG: tmp5.join(obj.get('extra_scripts', []))"] 
  "30064771290" -> "30064771291"  [ label = "DDG: output.encode('utf-8')"] 
  "30064771290" -> "30064771291"  [ label = "DDG: '200 OK'"] 
  "111669149697" -> "30064771294"  [ label = "DDG: "] 
  "68719476904" -> "146028888064"  [ label = "DDG: response"] 
  "111669149697" -> "68719476738"  [ label = "DDG: "] 
  "30064771250" -> "30064771262"  [ label = "DDG: output"] 
  "30064771262" -> "30064771269"  [ label = "DDG: output"] 
  "30064771269" -> "30064771272"  [ label = "DDG: output"] 
  "111669149697" -> "30064771272"  [ label = "DDG: "] 
  "30064771272" -> "30064771287"  [ label = "DDG: output"] 
  "30064771291" -> "68719476904"  [ label = "DDG: response"] 
  "111669149697" -> "68719476904"  [ label = "DDG: "] 
  "111669149697" -> "30064771218"  [ label = "DDG: "] 
  "30064771093" -> "30064771218"  [ label = "DDG: json"] 
  "30064771093" -> "30064771218"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771218"  [ label = "DDG: json"] 
  "30064771098" -> "30064771218"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771218"  [ label = "DDG: json"] 
  "30064771103" -> "30064771218"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771218"  [ label = "DDG: json"] 
  "30064771107" -> "30064771218"  [ label = "DDG: i"] 
  "30064771111" -> "30064771218"  [ label = "DDG: json"] 
  "30064771111" -> "30064771218"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771218"  [ label = "DDG: json"] 
  "30064771115" -> "30064771218"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771218"  [ label = "DDG: json"] 
  "30064771119" -> "30064771218"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771218"  [ label = "DDG: json"] 
  "30064771123" -> "30064771218"  [ label = "DDG: i"] 
  "30064771128" -> "30064771218"  [ label = "DDG: json"] 
  "30064771128" -> "30064771218"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771218"  [ label = "DDG: json"] 
  "30064771132" -> "30064771218"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771218"  [ label = "DDG: json"] 
  "30064771136" -> "30064771218"  [ label = "DDG: i"] 
  "30064771141" -> "30064771218"  [ label = "DDG: json"] 
  "30064771141" -> "30064771218"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771218"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771218"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771218"  [ label = "DDG: json"] 
  "30064771151" -> "30064771218"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771218"  [ label = "DDG: json"] 
  "30064771155" -> "30064771218"  [ label = "DDG: i"] 
  "30064771160" -> "30064771218"  [ label = "DDG: json"] 
  "30064771160" -> "30064771218"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771218"  [ label = "DDG: json"] 
  "30064771164" -> "30064771218"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771218"  [ label = "DDG: json"] 
  "30064771168" -> "30064771218"  [ label = "DDG: i"] 
  "30064771173" -> "30064771218"  [ label = "DDG: json"] 
  "30064771173" -> "30064771218"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771218"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771218"  [ label = "DDG: i"] 
  "30064771183" -> "30064771218"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771188" -> "30064771218"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771208" -> "30064771218"  [ label = "DDG: json"] 
  "30064771208" -> "30064771218"  [ label = "DDG: uid"] 
  "30064771213" -> "30064771218"  [ label = "DDG: json"] 
  "30064771213" -> "30064771218"  [ label = "DDG: str(userid)"] 
  "30064771216" -> "30064771218"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "111669149697" -> "30064771227"  [ label = "DDG: "] 
  "30064771220" -> "30064771227"  [ label = "DDG: uid"] 
  "30064771223" -> "30064771227"  [ label = "DDG: i"] 
  "30064771226" -> "30064771227"  [ label = "DDG: userid"] 
  "111669149697" -> "30064771230"  [ label = "DDG: "] 
  "30064771228" -> "30064771230"  [ label = "DDG: the_key"] 
  "30064771231" -> "30064771232"  [ label = "DDG: html"] 
  "111669149697" -> "30064771232"  [ label = "DDG: "] 
  "30064771236" -> "30064771237"  [ label = "DDG: json"] 
  "30064771236" -> "30064771237"  [ label = "DDG: html.decode()"] 
  "30064771241" -> "30064771242"  [ label = "DDG: tmp3"] 
  "111669149697" -> "30064771242"  [ label = "DDG: "] 
  "111669149697" -> "68719476864"  [ label = "DDG: "] 
  "111669149697" -> "30064771243"  [ label = "DDG: "] 
  "111669149697" -> "68719476871"  [ label = "DDG: "] 
  "30064771246" -> "30064771249"  [ label = "DDG: obj"] 
  "30064771246" -> "30064771249"  [ label = "DDG: 'lang'"] 
  "30064771246" -> "30064771249"  [ label = "DDG: 'en'"] 
  "111669149697" -> "30064771249"  [ label = "DDG: "] 
  "30064771248" -> "30064771249"  [ label = "DDG: obj"] 
  "30064771248" -> "30064771249"  [ label = "DDG: 'bootstrap_theme'"] 
  "30064771248" -> "30064771249"  [ label = "DDG: None"] 
  "30064771252" -> "30064771261"  [ label = "DDG: obj"] 
  "30064771252" -> "30064771261"  [ label = "DDG: 'global_css'"] 
  "30064771252" -> "30064771261"  [ label = "DDG: ''"] 
  "111669149697" -> "30064771261"  [ label = "DDG: "] 
  "30064771260" -> "30064771261"  [ label = "DDG: tmp4 = &quot;&quot;
tmp4.join(obj.get('extra_css', []))"] 
  "30064771260" -> "30064771261"  [ label = "DDG: 4"] 
  "30064771260" -> "30064771261"  [ label = "DDG: "] 
  "111669149697" -> "30064771268"  [ label = "DDG: "] 
  "30064771244" -> "30064771268"  [ label = "DDG: page_title"] 
  "30064771266" -> "30064771268"  [ label = "DDG: obj"] 
  "30064771266" -> "30064771268"  [ label = "DDG: 'bodyclass'"] 
  "30064771266" -> "30064771268"  [ label = "DDG: 'dabody da-pad-for-navbar da-pad-for-footer'"] 
  "30064771266" -> "30064771271"  [ label = "DDG: obj"] 
  "111669149697" -> "30064771271"  [ label = "DDG: "] 
  "111669149697" -> "30064771286"  [ label = "DDG: "] 
  "30064771275" -> "30064771286"  [ label = "DDG: obj.get('lang', 'en')"] 
  "30064771219" -> "30064771286"  [ label = "DDG: observation_script"] 
  "30064771284" -> "30064771286"  [ label = "DDG: tmp5.join(obj.get('extra_scripts', []))"] 
  "111669149697" -> "68719476901"  [ label = "DDG: "] 
  "30064771289" -> "30064771290"  [ label = "DDG: output"] 
  "30064771289" -> "30064771290"  [ label = "DDG: 'utf-8'"] 
  "111669149697" -> "30064771290"  [ label = "DDG: "] 
  "30064771077" -> "30064771079"  [ label = "DDG: tmp0"] 
  "111669149697" -> "30064771079"  [ label = "DDG: "] 
  "30064771082" -> "30064771084"  [ label = "DDG: tmp1"] 
  "111669149697" -> "30064771084"  [ label = "DDG: "] 
  "30064771087" -> "30064771089"  [ label = "DDG: tmp2"] 
  "111669149697" -> "30064771089"  [ label = "DDG: "] 
  "111669149697" -> "30064771217"  [ label = "DDG: "] 
  "30064771093" -> "30064771217"  [ label = "DDG: json"] 
  "30064771093" -> "30064771217"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771217"  [ label = "DDG: json"] 
  "30064771098" -> "30064771217"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771217"  [ label = "DDG: json"] 
  "30064771103" -> "30064771217"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771217"  [ label = "DDG: json"] 
  "30064771107" -> "30064771217"  [ label = "DDG: i"] 
  "30064771111" -> "30064771217"  [ label = "DDG: json"] 
  "30064771111" -> "30064771217"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771217"  [ label = "DDG: json"] 
  "30064771115" -> "30064771217"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771217"  [ label = "DDG: json"] 
  "30064771119" -> "30064771217"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771217"  [ label = "DDG: json"] 
  "30064771123" -> "30064771217"  [ label = "DDG: i"] 
  "30064771128" -> "30064771217"  [ label = "DDG: json"] 
  "30064771128" -> "30064771217"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771217"  [ label = "DDG: json"] 
  "30064771132" -> "30064771217"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771217"  [ label = "DDG: json"] 
  "30064771136" -> "30064771217"  [ label = "DDG: i"] 
  "30064771141" -> "30064771217"  [ label = "DDG: json"] 
  "30064771141" -> "30064771217"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771217"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771217"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771217"  [ label = "DDG: json"] 
  "30064771151" -> "30064771217"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771217"  [ label = "DDG: json"] 
  "30064771155" -> "30064771217"  [ label = "DDG: i"] 
  "30064771160" -> "30064771217"  [ label = "DDG: json"] 
  "30064771160" -> "30064771217"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771217"  [ label = "DDG: json"] 
  "30064771164" -> "30064771217"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771217"  [ label = "DDG: json"] 
  "30064771168" -> "30064771217"  [ label = "DDG: i"] 
  "30064771173" -> "30064771217"  [ label = "DDG: json"] 
  "30064771173" -> "30064771217"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771217"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771217"  [ label = "DDG: i"] 
  "30064771183" -> "30064771217"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771188" -> "30064771217"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771208" -> "30064771217"  [ label = "DDG: json"] 
  "30064771208" -> "30064771217"  [ label = "DDG: uid"] 
  "30064771213" -> "30064771217"  [ label = "DDG: json"] 
  "30064771213" -> "30064771217"  [ label = "DDG: str(userid)"] 
  "30064771216" -> "30064771217"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "111669149697" -> "30064771225"  [ label = "DDG: "] 
  "30064771220" -> "30064771225"  [ label = "DDG: uid"] 
  "30064771223" -> "30064771225"  [ label = "DDG: i"] 
  "111669149697" -> "68719476847"  [ label = "DDG: "] 
  "30064771211" -> "30064771226"  [ label = "DDG: userid"] 
  "111669149697" -> "30064771226"  [ label = "DDG: "] 
  "111669149697" -> "68719476860"  [ label = "DDG: "] 
  "111669149697" -> "30064771239"  [ label = "DDG: "] 
  "30064771230" -> "30064771239"  [ label = "DDG: the_key"] 
  "30064771242" -> "30064771246"  [ label = "DDG: obj"] 
  "30064771237" -> "30064771246"  [ label = "DDG: obj"] 
  "111669149697" -> "30064771246"  [ label = "DDG: "] 
  "30064771246" -> "30064771248"  [ label = "DDG: obj"] 
  "111669149697" -> "30064771248"  [ label = "DDG: "] 
  "30064771252" -> "30064771253"  [ label = "DDG: obj"] 
  "30064771252" -> "30064771253"  [ label = "DDG: 'global_css'"] 
  "30064771252" -> "30064771253"  [ label = "DDG: ''"] 
  "111669149697" -> "30064771253"  [ label = "DDG: "] 
  "111669149697" -> "68719476881"  [ label = "DDG: "] 
  "30064771259" -> "30064771260"  [ label = "DDG: tmp4.join(obj.get('extra_css', []))"] 
  "111669149697" -> "30064771260"  [ label = "DDG: "] 
  "111669149697" -> "30064771267"  [ label = "DDG: "] 
  "30064771244" -> "30064771267"  [ label = "DDG: page_title"] 
  "30064771266" -> "30064771267"  [ label = "DDG: obj"] 
  "30064771266" -> "30064771267"  [ label = "DDG: 'bodyclass'"] 
  "30064771266" -> "30064771267"  [ label = "DDG: 'dabody da-pad-for-navbar da-pad-for-footer'"] 
  "111669149697" -> "30064771285"  [ label = "DDG: "] 
  "30064771275" -> "30064771285"  [ label = "DDG: obj.get('lang', 'en')"] 
  "30064771219" -> "30064771285"  [ label = "DDG: observation_script"] 
  "30064771284" -> "30064771285"  [ label = "DDG: tmp5.join(obj.get('extra_scripts', []))"] 
  "30064771287" -> "30064771289"  [ label = "DDG: output"] 
  "111669149697" -> "30064771289"  [ label = "DDG: "] 
  "111669149697" -> "30064771215"  [ label = "DDG: "] 
  "30064771093" -> "30064771215"  [ label = "DDG: json"] 
  "30064771093" -> "30064771215"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771215"  [ label = "DDG: json"] 
  "30064771098" -> "30064771215"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771215"  [ label = "DDG: json"] 
  "30064771103" -> "30064771215"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771215"  [ label = "DDG: json"] 
  "30064771107" -> "30064771215"  [ label = "DDG: i"] 
  "30064771111" -> "30064771215"  [ label = "DDG: json"] 
  "30064771111" -> "30064771215"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771215"  [ label = "DDG: json"] 
  "30064771115" -> "30064771215"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771215"  [ label = "DDG: json"] 
  "30064771119" -> "30064771215"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771215"  [ label = "DDG: json"] 
  "30064771123" -> "30064771215"  [ label = "DDG: i"] 
  "30064771128" -> "30064771215"  [ label = "DDG: json"] 
  "30064771128" -> "30064771215"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771215"  [ label = "DDG: json"] 
  "30064771132" -> "30064771215"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771215"  [ label = "DDG: json"] 
  "30064771136" -> "30064771215"  [ label = "DDG: i"] 
  "30064771141" -> "30064771215"  [ label = "DDG: json"] 
  "30064771141" -> "30064771215"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771215"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771215"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771215"  [ label = "DDG: json"] 
  "30064771151" -> "30064771215"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771215"  [ label = "DDG: json"] 
  "30064771155" -> "30064771215"  [ label = "DDG: i"] 
  "30064771160" -> "30064771215"  [ label = "DDG: json"] 
  "30064771160" -> "30064771215"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771215"  [ label = "DDG: json"] 
  "30064771164" -> "30064771215"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771215"  [ label = "DDG: json"] 
  "30064771168" -> "30064771215"  [ label = "DDG: i"] 
  "30064771173" -> "30064771215"  [ label = "DDG: json"] 
  "30064771173" -> "30064771215"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771215"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771215"  [ label = "DDG: i"] 
  "30064771183" -> "30064771215"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771188" -> "30064771215"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771208" -> "30064771215"  [ label = "DDG: json"] 
  "30064771208" -> "30064771215"  [ label = "DDG: uid"] 
  "30064771213" -> "30064771215"  [ label = "DDG: json"] 
  "30064771213" -> "30064771215"  [ label = "DDG: str(userid)"] 
  "111669149697" -> "68719476840"  [ label = "DDG: "] 
  "30064771147" -> "30064771216"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "111669149697" -> "30064771216"  [ label = "DDG: "] 
  "111669149697" -> "30064771224"  [ label = "DDG: "] 
  "30064771220" -> "30064771224"  [ label = "DDG: uid"] 
  "30064771223" -> "30064771224"  [ label = "DDG: i"] 
  "30064771213" -> "30064771236"  [ label = "DDG: json"] 
  "111669149697" -> "30064771236"  [ label = "DDG: "] 
  "30064771234" -> "30064771236"  [ label = "DDG: html"] 
  "111669149697" -> "30064771238"  [ label = "DDG: "] 
  "30064771230" -> "30064771238"  [ label = "DDG: the_key"] 
  "111669149697" -> "30064771241"  [ label = "DDG: "] 
  "111669149697" -> "68719476862"  [ label = "DDG: "] 
  "30064771248" -> "30064771252"  [ label = "DDG: obj"] 
  "111669149697" -> "30064771252"  [ label = "DDG: "] 
  "111669149697" -> "30064771257"  [ label = "DDG: "] 
  "111669149697" -> "30064771264"  [ label = "DDG: "] 
  "30064771244" -> "30064771264"  [ label = "DDG: page_title"] 
  "30064771256" -> "30064771266"  [ label = "DDG: obj"] 
  "111669149697" -> "30064771266"  [ label = "DDG: "] 
  "111669149697" -> "30064771278"  [ label = "DDG: "] 
  "30064771275" -> "30064771278"  [ label = "DDG: obj.get('lang', 'en')"] 
  "30064771219" -> "30064771278"  [ label = "DDG: observation_script"] 
  "111669149697" -> "30064771282"  [ label = "DDG: "] 
  "111669149697" -> "30064771214"  [ label = "DDG: "] 
  "30064771093" -> "30064771214"  [ label = "DDG: json"] 
  "30064771093" -> "30064771214"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771214"  [ label = "DDG: json"] 
  "30064771098" -> "30064771214"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771214"  [ label = "DDG: json"] 
  "30064771103" -> "30064771214"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771214"  [ label = "DDG: json"] 
  "30064771107" -> "30064771214"  [ label = "DDG: i"] 
  "30064771111" -> "30064771214"  [ label = "DDG: json"] 
  "30064771111" -> "30064771214"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771214"  [ label = "DDG: json"] 
  "30064771115" -> "30064771214"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771214"  [ label = "DDG: json"] 
  "30064771119" -> "30064771214"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771214"  [ label = "DDG: json"] 
  "30064771123" -> "30064771214"  [ label = "DDG: i"] 
  "30064771128" -> "30064771214"  [ label = "DDG: json"] 
  "30064771128" -> "30064771214"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771214"  [ label = "DDG: json"] 
  "30064771132" -> "30064771214"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771214"  [ label = "DDG: json"] 
  "30064771136" -> "30064771214"  [ label = "DDG: i"] 
  "30064771141" -> "30064771214"  [ label = "DDG: json"] 
  "30064771141" -> "30064771214"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771214"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771214"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771214"  [ label = "DDG: json"] 
  "30064771151" -> "30064771214"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771214"  [ label = "DDG: json"] 
  "30064771155" -> "30064771214"  [ label = "DDG: i"] 
  "30064771160" -> "30064771214"  [ label = "DDG: json"] 
  "30064771160" -> "30064771214"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771214"  [ label = "DDG: json"] 
  "30064771164" -> "30064771214"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771214"  [ label = "DDG: json"] 
  "30064771168" -> "30064771214"  [ label = "DDG: i"] 
  "30064771173" -> "30064771214"  [ label = "DDG: json"] 
  "30064771173" -> "30064771214"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771214"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771214"  [ label = "DDG: i"] 
  "30064771183" -> "30064771214"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771188" -> "30064771214"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771208" -> "30064771214"  [ label = "DDG: json"] 
  "30064771208" -> "30064771214"  [ label = "DDG: uid"] 
  "30064771213" -> "30064771214"  [ label = "DDG: json"] 
  "30064771213" -> "30064771214"  [ label = "DDG: str(userid)"] 
  "111669149697" -> "30064771222"  [ label = "DDG: "] 
  "30064771220" -> "30064771222"  [ label = "DDG: uid"] 
  "111669149697" -> "68719476845"  [ label = "DDG: "] 
  "30064771177" -> "30064771223"  [ label = "DDG: i"] 
  "111669149697" -> "30064771223"  [ label = "DDG: "] 
  "30064771232" -> "30064771234"  [ label = "DDG: html"] 
  "111669149697" -> "30064771234"  [ label = "DDG: "] 
  "30064771257" -> "30064771259"  [ label = "DDG: tmp4"] 
  "111669149697" -> "30064771259"  [ label = "DDG: "] 
  "30064771256" -> "30064771259"  [ label = "DDG: obj"] 
  "30064771256" -> "30064771259"  [ label = "DDG: 'extra_css'"] 
  "30064771256" -> "30064771259"  [ label = "DDG: []"] 
  "111669149697" -> "30064771263"  [ label = "DDG: "] 
  "30064771244" -> "30064771263"  [ label = "DDG: page_title"] 
  "111669149697" -> "30064771277"  [ label = "DDG: "] 
  "30064771275" -> "30064771277"  [ label = "DDG: obj.get('lang', 'en')"] 
  "30064771219" -> "30064771277"  [ label = "DDG: observation_script"] 
  "30064771282" -> "30064771284"  [ label = "DDG: tmp5"] 
  "111669149697" -> "30064771284"  [ label = "DDG: "] 
  "30064771281" -> "30064771284"  [ label = "DDG: obj"] 
  "30064771281" -> "30064771284"  [ label = "DDG: 'extra_scripts'"] 
  "30064771281" -> "30064771284"  [ label = "DDG: []"] 
  "111669149697" -> "30064771210"  [ label = "DDG: "] 
  "30064771093" -> "30064771210"  [ label = "DDG: json"] 
  "30064771093" -> "30064771210"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771210"  [ label = "DDG: json"] 
  "30064771098" -> "30064771210"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771210"  [ label = "DDG: json"] 
  "30064771103" -> "30064771210"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771210"  [ label = "DDG: json"] 
  "30064771107" -> "30064771210"  [ label = "DDG: i"] 
  "30064771111" -> "30064771210"  [ label = "DDG: json"] 
  "30064771111" -> "30064771210"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771210"  [ label = "DDG: json"] 
  "30064771115" -> "30064771210"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771210"  [ label = "DDG: json"] 
  "30064771119" -> "30064771210"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771210"  [ label = "DDG: json"] 
  "30064771123" -> "30064771210"  [ label = "DDG: i"] 
  "30064771128" -> "30064771210"  [ label = "DDG: json"] 
  "30064771128" -> "30064771210"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771210"  [ label = "DDG: json"] 
  "30064771132" -> "30064771210"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771210"  [ label = "DDG: json"] 
  "30064771136" -> "30064771210"  [ label = "DDG: i"] 
  "30064771141" -> "30064771210"  [ label = "DDG: json"] 
  "30064771141" -> "30064771210"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771210"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771210"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771210"  [ label = "DDG: json"] 
  "30064771151" -> "30064771210"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771210"  [ label = "DDG: json"] 
  "30064771155" -> "30064771210"  [ label = "DDG: i"] 
  "30064771160" -> "30064771210"  [ label = "DDG: json"] 
  "30064771160" -> "30064771210"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771210"  [ label = "DDG: json"] 
  "30064771164" -> "30064771210"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771210"  [ label = "DDG: json"] 
  "30064771168" -> "30064771210"  [ label = "DDG: i"] 
  "30064771173" -> "30064771210"  [ label = "DDG: json"] 
  "30064771173" -> "30064771210"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771210"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771210"  [ label = "DDG: i"] 
  "30064771183" -> "30064771210"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771188" -> "30064771210"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771208" -> "30064771210"  [ label = "DDG: json"] 
  "30064771208" -> "30064771210"  [ label = "DDG: uid"] 
  "30064771208" -> "30064771213"  [ label = "DDG: json"] 
  "111669149697" -> "30064771213"  [ label = "DDG: "] 
  "30064771211" -> "30064771213"  [ label = "DDG: userid"] 
  "111669149697" -> "30064771221"  [ label = "DDG: "] 
  "30064771220" -> "30064771221"  [ label = "DDG: uid"] 
  "30064771252" -> "30064771256"  [ label = "DDG: obj"] 
  "111669149697" -> "30064771256"  [ label = "DDG: "] 
  "111669149697" -> "30064771276"  [ label = "DDG: "] 
  "30064771275" -> "30064771276"  [ label = "DDG: obj.get('lang', 'en')"] 
  "30064771274" -> "30064771281"  [ label = "DDG: obj"] 
  "111669149697" -> "30064771281"  [ label = "DDG: "] 
  "111669149697" -> "30064771209"  [ label = "DDG: "] 
  "30064771093" -> "30064771209"  [ label = "DDG: json"] 
  "30064771093" -> "30064771209"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771209"  [ label = "DDG: json"] 
  "30064771098" -> "30064771209"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771209"  [ label = "DDG: json"] 
  "30064771103" -> "30064771209"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771209"  [ label = "DDG: json"] 
  "30064771107" -> "30064771209"  [ label = "DDG: i"] 
  "30064771111" -> "30064771209"  [ label = "DDG: json"] 
  "30064771111" -> "30064771209"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771209"  [ label = "DDG: json"] 
  "30064771115" -> "30064771209"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771209"  [ label = "DDG: json"] 
  "30064771119" -> "30064771209"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771209"  [ label = "DDG: json"] 
  "30064771123" -> "30064771209"  [ label = "DDG: i"] 
  "30064771128" -> "30064771209"  [ label = "DDG: json"] 
  "30064771128" -> "30064771209"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771209"  [ label = "DDG: json"] 
  "30064771132" -> "30064771209"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771209"  [ label = "DDG: json"] 
  "30064771136" -> "30064771209"  [ label = "DDG: i"] 
  "30064771141" -> "30064771209"  [ label = "DDG: json"] 
  "30064771141" -> "30064771209"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771209"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771209"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771209"  [ label = "DDG: json"] 
  "30064771151" -> "30064771209"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771209"  [ label = "DDG: json"] 
  "30064771155" -> "30064771209"  [ label = "DDG: i"] 
  "30064771160" -> "30064771209"  [ label = "DDG: json"] 
  "30064771160" -> "30064771209"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771209"  [ label = "DDG: json"] 
  "30064771164" -> "30064771209"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771209"  [ label = "DDG: json"] 
  "30064771168" -> "30064771209"  [ label = "DDG: i"] 
  "30064771173" -> "30064771209"  [ label = "DDG: json"] 
  "30064771173" -> "30064771209"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771209"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771209"  [ label = "DDG: i"] 
  "30064771183" -> "30064771209"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771188" -> "30064771209"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771208" -> "30064771209"  [ label = "DDG: json"] 
  "30064771208" -> "30064771209"  [ label = "DDG: uid"] 
  "111669149697" -> "68719476836"  [ label = "DDG: "] 
  "30064771171" -> "30064771211"  [ label = "DDG: userid"] 
  "111669149697" -> "30064771211"  [ label = "DDG: "] 
  "111669149697" -> "68719476843"  [ label = "DDG: "] 
  "30064771208" -> "30064771220"  [ label = "DDG: uid"] 
  "111669149697" -> "30064771220"  [ label = "DDG: "] 
  "111669149697" -> "68719476892"  [ label = "DDG: "] 
  "30064771274" -> "30064771275"  [ label = "DDG: obj"] 
  "30064771274" -> "30064771275"  [ label = "DDG: 'lang'"] 
  "30064771274" -> "30064771275"  [ label = "DDG: 'en'"] 
  "111669149697" -> "30064771206"  [ label = "DDG: "] 
  "30064771093" -> "30064771206"  [ label = "DDG: json"] 
  "30064771093" -> "30064771206"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771206"  [ label = "DDG: json"] 
  "30064771098" -> "30064771206"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771206"  [ label = "DDG: json"] 
  "30064771103" -> "30064771206"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771206"  [ label = "DDG: json"] 
  "30064771107" -> "30064771206"  [ label = "DDG: i"] 
  "30064771111" -> "30064771206"  [ label = "DDG: json"] 
  "30064771111" -> "30064771206"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771206"  [ label = "DDG: json"] 
  "30064771115" -> "30064771206"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771206"  [ label = "DDG: json"] 
  "30064771119" -> "30064771206"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771206"  [ label = "DDG: json"] 
  "30064771123" -> "30064771206"  [ label = "DDG: i"] 
  "30064771128" -> "30064771206"  [ label = "DDG: json"] 
  "30064771128" -> "30064771206"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771206"  [ label = "DDG: json"] 
  "30064771132" -> "30064771206"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771206"  [ label = "DDG: json"] 
  "30064771136" -> "30064771206"  [ label = "DDG: i"] 
  "30064771141" -> "30064771206"  [ label = "DDG: json"] 
  "30064771141" -> "30064771206"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771206"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771206"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771206"  [ label = "DDG: json"] 
  "30064771151" -> "30064771206"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771206"  [ label = "DDG: json"] 
  "30064771155" -> "30064771206"  [ label = "DDG: i"] 
  "30064771160" -> "30064771206"  [ label = "DDG: json"] 
  "30064771160" -> "30064771206"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771206"  [ label = "DDG: json"] 
  "30064771164" -> "30064771206"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771206"  [ label = "DDG: json"] 
  "30064771168" -> "30064771206"  [ label = "DDG: i"] 
  "30064771173" -> "30064771206"  [ label = "DDG: json"] 
  "30064771173" -> "30064771206"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771206"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771206"  [ label = "DDG: i"] 
  "30064771183" -> "30064771206"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771188" -> "30064771206"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771173" -> "30064771208"  [ label = "DDG: json"] 
  "111669149697" -> "30064771208"  [ label = "DDG: "] 
  "30064771164" -> "30064771208"  [ label = "DDG: uid"] 
  "30064771271" -> "30064771274"  [ label = "DDG: obj"] 
  "111669149697" -> "30064771274"  [ label = "DDG: "] 
  "111669149697" -> "30064771205"  [ label = "DDG: "] 
  "30064771093" -> "30064771205"  [ label = "DDG: json"] 
  "30064771093" -> "30064771205"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771205"  [ label = "DDG: json"] 
  "30064771098" -> "30064771205"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771205"  [ label = "DDG: json"] 
  "30064771103" -> "30064771205"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771205"  [ label = "DDG: json"] 
  "30064771107" -> "30064771205"  [ label = "DDG: i"] 
  "30064771111" -> "30064771205"  [ label = "DDG: json"] 
  "30064771111" -> "30064771205"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771205"  [ label = "DDG: json"] 
  "30064771115" -> "30064771205"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771205"  [ label = "DDG: json"] 
  "30064771119" -> "30064771205"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771205"  [ label = "DDG: json"] 
  "30064771123" -> "30064771205"  [ label = "DDG: i"] 
  "30064771128" -> "30064771205"  [ label = "DDG: json"] 
  "30064771128" -> "30064771205"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771205"  [ label = "DDG: json"] 
  "30064771132" -> "30064771205"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771205"  [ label = "DDG: json"] 
  "30064771136" -> "30064771205"  [ label = "DDG: i"] 
  "30064771141" -> "30064771205"  [ label = "DDG: json"] 
  "30064771141" -> "30064771205"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771205"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771205"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771205"  [ label = "DDG: json"] 
  "30064771151" -> "30064771205"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771205"  [ label = "DDG: json"] 
  "30064771155" -> "30064771205"  [ label = "DDG: i"] 
  "30064771160" -> "30064771205"  [ label = "DDG: json"] 
  "30064771160" -> "30064771205"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771205"  [ label = "DDG: json"] 
  "30064771164" -> "30064771205"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771205"  [ label = "DDG: json"] 
  "30064771168" -> "30064771205"  [ label = "DDG: i"] 
  "30064771173" -> "30064771205"  [ label = "DDG: json"] 
  "30064771173" -> "30064771205"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771205"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771205"  [ label = "DDG: i"] 
  "30064771183" -> "30064771205"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771188" -> "30064771205"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "111669149697" -> "30064771204"  [ label = "DDG: "] 
  "30064771093" -> "30064771204"  [ label = "DDG: json"] 
  "30064771093" -> "30064771204"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771204"  [ label = "DDG: json"] 
  "30064771098" -> "30064771204"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771204"  [ label = "DDG: json"] 
  "30064771103" -> "30064771204"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771204"  [ label = "DDG: json"] 
  "30064771107" -> "30064771204"  [ label = "DDG: i"] 
  "30064771111" -> "30064771204"  [ label = "DDG: json"] 
  "30064771111" -> "30064771204"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771204"  [ label = "DDG: json"] 
  "30064771115" -> "30064771204"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771204"  [ label = "DDG: json"] 
  "30064771119" -> "30064771204"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771204"  [ label = "DDG: json"] 
  "30064771123" -> "30064771204"  [ label = "DDG: i"] 
  "30064771128" -> "30064771204"  [ label = "DDG: json"] 
  "30064771128" -> "30064771204"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771204"  [ label = "DDG: json"] 
  "30064771132" -> "30064771204"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771204"  [ label = "DDG: json"] 
  "30064771136" -> "30064771204"  [ label = "DDG: i"] 
  "30064771141" -> "30064771204"  [ label = "DDG: json"] 
  "30064771141" -> "30064771204"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771204"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771204"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771204"  [ label = "DDG: json"] 
  "30064771151" -> "30064771204"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771204"  [ label = "DDG: json"] 
  "30064771155" -> "30064771204"  [ label = "DDG: i"] 
  "30064771160" -> "30064771204"  [ label = "DDG: json"] 
  "30064771160" -> "30064771204"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771204"  [ label = "DDG: json"] 
  "30064771164" -> "30064771204"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771204"  [ label = "DDG: json"] 
  "30064771168" -> "30064771204"  [ label = "DDG: i"] 
  "30064771173" -> "30064771204"  [ label = "DDG: json"] 
  "30064771173" -> "30064771204"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771204"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771204"  [ label = "DDG: i"] 
  "30064771183" -> "30064771204"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771188" -> "30064771204"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "111669149697" -> "30064771203"  [ label = "DDG: "] 
  "30064771093" -> "30064771203"  [ label = "DDG: json"] 
  "30064771093" -> "30064771203"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771203"  [ label = "DDG: json"] 
  "30064771098" -> "30064771203"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771203"  [ label = "DDG: json"] 
  "30064771103" -> "30064771203"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771203"  [ label = "DDG: json"] 
  "30064771107" -> "30064771203"  [ label = "DDG: i"] 
  "30064771111" -> "30064771203"  [ label = "DDG: json"] 
  "30064771111" -> "30064771203"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771203"  [ label = "DDG: json"] 
  "30064771115" -> "30064771203"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771203"  [ label = "DDG: json"] 
  "30064771119" -> "30064771203"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771203"  [ label = "DDG: json"] 
  "30064771123" -> "30064771203"  [ label = "DDG: i"] 
  "30064771128" -> "30064771203"  [ label = "DDG: json"] 
  "30064771128" -> "30064771203"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771203"  [ label = "DDG: json"] 
  "30064771132" -> "30064771203"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771203"  [ label = "DDG: json"] 
  "30064771136" -> "30064771203"  [ label = "DDG: i"] 
  "30064771141" -> "30064771203"  [ label = "DDG: json"] 
  "30064771141" -> "30064771203"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771203"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771203"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771203"  [ label = "DDG: json"] 
  "30064771151" -> "30064771203"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771203"  [ label = "DDG: json"] 
  "30064771155" -> "30064771203"  [ label = "DDG: i"] 
  "30064771160" -> "30064771203"  [ label = "DDG: json"] 
  "30064771160" -> "30064771203"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771203"  [ label = "DDG: json"] 
  "30064771164" -> "30064771203"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771203"  [ label = "DDG: json"] 
  "30064771168" -> "30064771203"  [ label = "DDG: i"] 
  "30064771173" -> "30064771203"  [ label = "DDG: json"] 
  "30064771173" -> "30064771203"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771203"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771203"  [ label = "DDG: i"] 
  "30064771183" -> "30064771203"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771188" -> "30064771203"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "111669149697" -> "30064771202"  [ label = "DDG: "] 
  "30064771093" -> "30064771202"  [ label = "DDG: json"] 
  "30064771093" -> "30064771202"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771202"  [ label = "DDG: json"] 
  "30064771098" -> "30064771202"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771202"  [ label = "DDG: json"] 
  "30064771103" -> "30064771202"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771202"  [ label = "DDG: json"] 
  "30064771107" -> "30064771202"  [ label = "DDG: i"] 
  "30064771111" -> "30064771202"  [ label = "DDG: json"] 
  "30064771111" -> "30064771202"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771202"  [ label = "DDG: json"] 
  "30064771115" -> "30064771202"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771202"  [ label = "DDG: json"] 
  "30064771119" -> "30064771202"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771202"  [ label = "DDG: json"] 
  "30064771123" -> "30064771202"  [ label = "DDG: i"] 
  "30064771128" -> "30064771202"  [ label = "DDG: json"] 
  "30064771128" -> "30064771202"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771202"  [ label = "DDG: json"] 
  "30064771132" -> "30064771202"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771202"  [ label = "DDG: json"] 
  "30064771136" -> "30064771202"  [ label = "DDG: i"] 
  "30064771141" -> "30064771202"  [ label = "DDG: json"] 
  "30064771141" -> "30064771202"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771202"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771202"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771202"  [ label = "DDG: json"] 
  "30064771151" -> "30064771202"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771202"  [ label = "DDG: json"] 
  "30064771155" -> "30064771202"  [ label = "DDG: i"] 
  "30064771160" -> "30064771202"  [ label = "DDG: json"] 
  "30064771160" -> "30064771202"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771202"  [ label = "DDG: json"] 
  "30064771164" -> "30064771202"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771202"  [ label = "DDG: json"] 
  "30064771168" -> "30064771202"  [ label = "DDG: i"] 
  "30064771173" -> "30064771202"  [ label = "DDG: json"] 
  "30064771173" -> "30064771202"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771202"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771202"  [ label = "DDG: i"] 
  "30064771183" -> "30064771202"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771188" -> "30064771202"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "111669149697" -> "30064771201"  [ label = "DDG: "] 
  "30064771093" -> "30064771201"  [ label = "DDG: json"] 
  "30064771093" -> "30064771201"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771201"  [ label = "DDG: json"] 
  "30064771098" -> "30064771201"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771201"  [ label = "DDG: json"] 
  "30064771103" -> "30064771201"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771201"  [ label = "DDG: json"] 
  "30064771107" -> "30064771201"  [ label = "DDG: i"] 
  "30064771111" -> "30064771201"  [ label = "DDG: json"] 
  "30064771111" -> "30064771201"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771201"  [ label = "DDG: json"] 
  "30064771115" -> "30064771201"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771201"  [ label = "DDG: json"] 
  "30064771119" -> "30064771201"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771201"  [ label = "DDG: json"] 
  "30064771123" -> "30064771201"  [ label = "DDG: i"] 
  "30064771128" -> "30064771201"  [ label = "DDG: json"] 
  "30064771128" -> "30064771201"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771201"  [ label = "DDG: json"] 
  "30064771132" -> "30064771201"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771201"  [ label = "DDG: json"] 
  "30064771136" -> "30064771201"  [ label = "DDG: i"] 
  "30064771141" -> "30064771201"  [ label = "DDG: json"] 
  "30064771141" -> "30064771201"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771201"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771201"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771201"  [ label = "DDG: json"] 
  "30064771151" -> "30064771201"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771201"  [ label = "DDG: json"] 
  "30064771155" -> "30064771201"  [ label = "DDG: i"] 
  "30064771160" -> "30064771201"  [ label = "DDG: json"] 
  "30064771160" -> "30064771201"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771201"  [ label = "DDG: json"] 
  "30064771164" -> "30064771201"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771201"  [ label = "DDG: json"] 
  "30064771168" -> "30064771201"  [ label = "DDG: i"] 
  "30064771173" -> "30064771201"  [ label = "DDG: json"] 
  "30064771173" -> "30064771201"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771201"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771201"  [ label = "DDG: i"] 
  "30064771183" -> "30064771201"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771188" -> "30064771201"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "111669149697" -> "30064771198"  [ label = "DDG: "] 
  "30064771093" -> "30064771198"  [ label = "DDG: json"] 
  "30064771093" -> "30064771198"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771198"  [ label = "DDG: json"] 
  "30064771098" -> "30064771198"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771198"  [ label = "DDG: json"] 
  "30064771103" -> "30064771198"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771198"  [ label = "DDG: json"] 
  "30064771107" -> "30064771198"  [ label = "DDG: i"] 
  "30064771111" -> "30064771198"  [ label = "DDG: json"] 
  "30064771111" -> "30064771198"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771198"  [ label = "DDG: json"] 
  "30064771115" -> "30064771198"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771198"  [ label = "DDG: json"] 
  "30064771119" -> "30064771198"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771198"  [ label = "DDG: json"] 
  "30064771123" -> "30064771198"  [ label = "DDG: i"] 
  "30064771128" -> "30064771198"  [ label = "DDG: json"] 
  "30064771128" -> "30064771198"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771198"  [ label = "DDG: json"] 
  "30064771132" -> "30064771198"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771198"  [ label = "DDG: json"] 
  "30064771136" -> "30064771198"  [ label = "DDG: i"] 
  "30064771141" -> "30064771198"  [ label = "DDG: json"] 
  "30064771141" -> "30064771198"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771198"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771198"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771198"  [ label = "DDG: json"] 
  "30064771151" -> "30064771198"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771198"  [ label = "DDG: json"] 
  "30064771155" -> "30064771198"  [ label = "DDG: i"] 
  "30064771160" -> "30064771198"  [ label = "DDG: json"] 
  "30064771160" -> "30064771198"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771198"  [ label = "DDG: json"] 
  "30064771164" -> "30064771198"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771198"  [ label = "DDG: json"] 
  "30064771168" -> "30064771198"  [ label = "DDG: i"] 
  "30064771173" -> "30064771198"  [ label = "DDG: json"] 
  "30064771173" -> "30064771198"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771198"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771198"  [ label = "DDG: i"] 
  "30064771183" -> "30064771198"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771188" -> "30064771198"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "111669149697" -> "30064771197"  [ label = "DDG: "] 
  "30064771093" -> "30064771197"  [ label = "DDG: json"] 
  "30064771093" -> "30064771197"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771197"  [ label = "DDG: json"] 
  "30064771098" -> "30064771197"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771197"  [ label = "DDG: json"] 
  "30064771103" -> "30064771197"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771197"  [ label = "DDG: json"] 
  "30064771107" -> "30064771197"  [ label = "DDG: i"] 
  "30064771111" -> "30064771197"  [ label = "DDG: json"] 
  "30064771111" -> "30064771197"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771197"  [ label = "DDG: json"] 
  "30064771115" -> "30064771197"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771197"  [ label = "DDG: json"] 
  "30064771119" -> "30064771197"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771197"  [ label = "DDG: json"] 
  "30064771123" -> "30064771197"  [ label = "DDG: i"] 
  "30064771128" -> "30064771197"  [ label = "DDG: json"] 
  "30064771128" -> "30064771197"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771197"  [ label = "DDG: json"] 
  "30064771132" -> "30064771197"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771197"  [ label = "DDG: json"] 
  "30064771136" -> "30064771197"  [ label = "DDG: i"] 
  "30064771141" -> "30064771197"  [ label = "DDG: json"] 
  "30064771141" -> "30064771197"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771197"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771197"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771197"  [ label = "DDG: json"] 
  "30064771151" -> "30064771197"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771197"  [ label = "DDG: json"] 
  "30064771155" -> "30064771197"  [ label = "DDG: i"] 
  "30064771160" -> "30064771197"  [ label = "DDG: json"] 
  "30064771160" -> "30064771197"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771197"  [ label = "DDG: json"] 
  "30064771164" -> "30064771197"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771197"  [ label = "DDG: json"] 
  "30064771168" -> "30064771197"  [ label = "DDG: i"] 
  "30064771173" -> "30064771197"  [ label = "DDG: json"] 
  "30064771173" -> "30064771197"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771197"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771197"  [ label = "DDG: i"] 
  "30064771183" -> "30064771197"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771188" -> "30064771197"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "111669149697" -> "30064771194"  [ label = "DDG: "] 
  "30064771093" -> "30064771194"  [ label = "DDG: json"] 
  "30064771093" -> "30064771194"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771194"  [ label = "DDG: json"] 
  "30064771098" -> "30064771194"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771194"  [ label = "DDG: json"] 
  "30064771103" -> "30064771194"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771194"  [ label = "DDG: json"] 
  "30064771107" -> "30064771194"  [ label = "DDG: i"] 
  "30064771111" -> "30064771194"  [ label = "DDG: json"] 
  "30064771111" -> "30064771194"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771194"  [ label = "DDG: json"] 
  "30064771115" -> "30064771194"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771194"  [ label = "DDG: json"] 
  "30064771119" -> "30064771194"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771194"  [ label = "DDG: json"] 
  "30064771123" -> "30064771194"  [ label = "DDG: i"] 
  "30064771128" -> "30064771194"  [ label = "DDG: json"] 
  "30064771128" -> "30064771194"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771194"  [ label = "DDG: json"] 
  "30064771132" -> "30064771194"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771194"  [ label = "DDG: json"] 
  "30064771136" -> "30064771194"  [ label = "DDG: i"] 
  "30064771141" -> "30064771194"  [ label = "DDG: json"] 
  "30064771141" -> "30064771194"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771194"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771194"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771194"  [ label = "DDG: json"] 
  "30064771151" -> "30064771194"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771194"  [ label = "DDG: json"] 
  "30064771155" -> "30064771194"  [ label = "DDG: i"] 
  "30064771160" -> "30064771194"  [ label = "DDG: json"] 
  "30064771160" -> "30064771194"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771194"  [ label = "DDG: json"] 
  "30064771164" -> "30064771194"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771194"  [ label = "DDG: json"] 
  "30064771168" -> "30064771194"  [ label = "DDG: i"] 
  "30064771173" -> "30064771194"  [ label = "DDG: json"] 
  "30064771173" -> "30064771194"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771194"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771194"  [ label = "DDG: i"] 
  "30064771183" -> "30064771194"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771188" -> "30064771194"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "111669149697" -> "30064771193"  [ label = "DDG: "] 
  "30064771093" -> "30064771193"  [ label = "DDG: json"] 
  "30064771093" -> "30064771193"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771193"  [ label = "DDG: json"] 
  "30064771098" -> "30064771193"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771193"  [ label = "DDG: json"] 
  "30064771103" -> "30064771193"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771193"  [ label = "DDG: json"] 
  "30064771107" -> "30064771193"  [ label = "DDG: i"] 
  "30064771111" -> "30064771193"  [ label = "DDG: json"] 
  "30064771111" -> "30064771193"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771193"  [ label = "DDG: json"] 
  "30064771115" -> "30064771193"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771193"  [ label = "DDG: json"] 
  "30064771119" -> "30064771193"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771193"  [ label = "DDG: json"] 
  "30064771123" -> "30064771193"  [ label = "DDG: i"] 
  "30064771128" -> "30064771193"  [ label = "DDG: json"] 
  "30064771128" -> "30064771193"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771193"  [ label = "DDG: json"] 
  "30064771132" -> "30064771193"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771193"  [ label = "DDG: json"] 
  "30064771136" -> "30064771193"  [ label = "DDG: i"] 
  "30064771141" -> "30064771193"  [ label = "DDG: json"] 
  "30064771141" -> "30064771193"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771193"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771193"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771193"  [ label = "DDG: json"] 
  "30064771151" -> "30064771193"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771193"  [ label = "DDG: json"] 
  "30064771155" -> "30064771193"  [ label = "DDG: i"] 
  "30064771160" -> "30064771193"  [ label = "DDG: json"] 
  "30064771160" -> "30064771193"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771193"  [ label = "DDG: json"] 
  "30064771164" -> "30064771193"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771193"  [ label = "DDG: json"] 
  "30064771168" -> "30064771193"  [ label = "DDG: i"] 
  "30064771173" -> "30064771193"  [ label = "DDG: json"] 
  "30064771173" -> "30064771193"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771193"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771193"  [ label = "DDG: i"] 
  "30064771183" -> "30064771193"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771188" -> "30064771193"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "111669149697" -> "30064771190"  [ label = "DDG: "] 
  "30064771093" -> "30064771190"  [ label = "DDG: json"] 
  "30064771093" -> "30064771190"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771190"  [ label = "DDG: json"] 
  "30064771098" -> "30064771190"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771190"  [ label = "DDG: json"] 
  "30064771103" -> "30064771190"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771190"  [ label = "DDG: json"] 
  "30064771107" -> "30064771190"  [ label = "DDG: i"] 
  "30064771111" -> "30064771190"  [ label = "DDG: json"] 
  "30064771111" -> "30064771190"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771190"  [ label = "DDG: json"] 
  "30064771115" -> "30064771190"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771190"  [ label = "DDG: json"] 
  "30064771119" -> "30064771190"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771190"  [ label = "DDG: json"] 
  "30064771123" -> "30064771190"  [ label = "DDG: i"] 
  "30064771128" -> "30064771190"  [ label = "DDG: json"] 
  "30064771128" -> "30064771190"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771190"  [ label = "DDG: json"] 
  "30064771132" -> "30064771190"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771190"  [ label = "DDG: json"] 
  "30064771136" -> "30064771190"  [ label = "DDG: i"] 
  "30064771141" -> "30064771190"  [ label = "DDG: json"] 
  "30064771141" -> "30064771190"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771190"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771190"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771190"  [ label = "DDG: json"] 
  "30064771151" -> "30064771190"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771190"  [ label = "DDG: json"] 
  "30064771155" -> "30064771190"  [ label = "DDG: i"] 
  "30064771160" -> "30064771190"  [ label = "DDG: json"] 
  "30064771160" -> "30064771190"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771190"  [ label = "DDG: json"] 
  "30064771164" -> "30064771190"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771190"  [ label = "DDG: json"] 
  "30064771168" -> "30064771190"  [ label = "DDG: i"] 
  "30064771173" -> "30064771190"  [ label = "DDG: json"] 
  "30064771173" -> "30064771190"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771190"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771190"  [ label = "DDG: i"] 
  "30064771183" -> "30064771190"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771188" -> "30064771190"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "111669149697" -> "30064771189"  [ label = "DDG: "] 
  "30064771093" -> "30064771189"  [ label = "DDG: json"] 
  "30064771093" -> "30064771189"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771189"  [ label = "DDG: json"] 
  "30064771098" -> "30064771189"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771189"  [ label = "DDG: json"] 
  "30064771103" -> "30064771189"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771189"  [ label = "DDG: json"] 
  "30064771107" -> "30064771189"  [ label = "DDG: i"] 
  "30064771111" -> "30064771189"  [ label = "DDG: json"] 
  "30064771111" -> "30064771189"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771189"  [ label = "DDG: json"] 
  "30064771115" -> "30064771189"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771189"  [ label = "DDG: json"] 
  "30064771119" -> "30064771189"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771189"  [ label = "DDG: json"] 
  "30064771123" -> "30064771189"  [ label = "DDG: i"] 
  "30064771128" -> "30064771189"  [ label = "DDG: json"] 
  "30064771128" -> "30064771189"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771189"  [ label = "DDG: json"] 
  "30064771132" -> "30064771189"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771189"  [ label = "DDG: json"] 
  "30064771136" -> "30064771189"  [ label = "DDG: i"] 
  "30064771141" -> "30064771189"  [ label = "DDG: json"] 
  "30064771141" -> "30064771189"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771189"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771189"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771189"  [ label = "DDG: json"] 
  "30064771151" -> "30064771189"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771189"  [ label = "DDG: json"] 
  "30064771155" -> "30064771189"  [ label = "DDG: i"] 
  "30064771160" -> "30064771189"  [ label = "DDG: json"] 
  "30064771160" -> "30064771189"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771189"  [ label = "DDG: json"] 
  "30064771164" -> "30064771189"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771189"  [ label = "DDG: json"] 
  "30064771168" -> "30064771189"  [ label = "DDG: i"] 
  "30064771173" -> "30064771189"  [ label = "DDG: json"] 
  "30064771173" -> "30064771189"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771189"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771189"  [ label = "DDG: i"] 
  "30064771183" -> "30064771189"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771188" -> "30064771189"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "111669149697" -> "30064771185"  [ label = "DDG: "] 
  "30064771093" -> "30064771185"  [ label = "DDG: json"] 
  "30064771093" -> "30064771185"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771185"  [ label = "DDG: json"] 
  "30064771098" -> "30064771185"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771185"  [ label = "DDG: json"] 
  "30064771103" -> "30064771185"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771185"  [ label = "DDG: json"] 
  "30064771107" -> "30064771185"  [ label = "DDG: i"] 
  "30064771111" -> "30064771185"  [ label = "DDG: json"] 
  "30064771111" -> "30064771185"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771185"  [ label = "DDG: json"] 
  "30064771115" -> "30064771185"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771185"  [ label = "DDG: json"] 
  "30064771119" -> "30064771185"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771185"  [ label = "DDG: json"] 
  "30064771123" -> "30064771185"  [ label = "DDG: i"] 
  "30064771128" -> "30064771185"  [ label = "DDG: json"] 
  "30064771128" -> "30064771185"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771185"  [ label = "DDG: json"] 
  "30064771132" -> "30064771185"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771185"  [ label = "DDG: json"] 
  "30064771136" -> "30064771185"  [ label = "DDG: i"] 
  "30064771141" -> "30064771185"  [ label = "DDG: json"] 
  "30064771141" -> "30064771185"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771185"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771185"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771185"  [ label = "DDG: json"] 
  "30064771151" -> "30064771185"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771185"  [ label = "DDG: json"] 
  "30064771155" -> "30064771185"  [ label = "DDG: i"] 
  "30064771160" -> "30064771185"  [ label = "DDG: json"] 
  "30064771160" -> "30064771185"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771185"  [ label = "DDG: json"] 
  "30064771164" -> "30064771185"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771185"  [ label = "DDG: json"] 
  "30064771168" -> "30064771185"  [ label = "DDG: i"] 
  "30064771173" -> "30064771185"  [ label = "DDG: json"] 
  "30064771173" -> "30064771185"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771185"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771185"  [ label = "DDG: i"] 
  "30064771183" -> "30064771185"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "111669149697" -> "68719476826"  [ label = "DDG: "] 
  "30064771187" -> "30064771188"  [ label = "DDG: daconfig"] 
  "30064771187" -> "30064771188"  [ label = "DDG: 'currency decimal places'"] 
  "30064771187" -> "30064771188"  [ label = "DDG: 2"] 
  "111669149697" -> "30064771184"  [ label = "DDG: "] 
  "30064771093" -> "30064771184"  [ label = "DDG: json"] 
  "30064771093" -> "30064771184"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771184"  [ label = "DDG: json"] 
  "30064771098" -> "30064771184"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771184"  [ label = "DDG: json"] 
  "30064771103" -> "30064771184"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771184"  [ label = "DDG: json"] 
  "30064771107" -> "30064771184"  [ label = "DDG: i"] 
  "30064771111" -> "30064771184"  [ label = "DDG: json"] 
  "30064771111" -> "30064771184"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771184"  [ label = "DDG: json"] 
  "30064771115" -> "30064771184"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771184"  [ label = "DDG: json"] 
  "30064771119" -> "30064771184"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771184"  [ label = "DDG: json"] 
  "30064771123" -> "30064771184"  [ label = "DDG: i"] 
  "30064771128" -> "30064771184"  [ label = "DDG: json"] 
  "30064771128" -> "30064771184"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771184"  [ label = "DDG: json"] 
  "30064771132" -> "30064771184"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771184"  [ label = "DDG: json"] 
  "30064771136" -> "30064771184"  [ label = "DDG: i"] 
  "30064771141" -> "30064771184"  [ label = "DDG: json"] 
  "30064771141" -> "30064771184"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771184"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771184"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771184"  [ label = "DDG: json"] 
  "30064771151" -> "30064771184"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771184"  [ label = "DDG: json"] 
  "30064771155" -> "30064771184"  [ label = "DDG: i"] 
  "30064771160" -> "30064771184"  [ label = "DDG: json"] 
  "30064771160" -> "30064771184"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771184"  [ label = "DDG: json"] 
  "30064771164" -> "30064771184"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771184"  [ label = "DDG: json"] 
  "30064771168" -> "30064771184"  [ label = "DDG: i"] 
  "30064771173" -> "30064771184"  [ label = "DDG: json"] 
  "30064771173" -> "30064771184"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771184"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771184"  [ label = "DDG: i"] 
  "30064771183" -> "30064771184"  [ label = "DDG: daconfig.get('currency decimal places', 2)"] 
  "30064771182" -> "30064771187"  [ label = "DDG: daconfig"] 
  "111669149697" -> "30064771187"  [ label = "DDG: "] 
  "111669149697" -> "30064771180"  [ label = "DDG: "] 
  "30064771093" -> "30064771180"  [ label = "DDG: json"] 
  "30064771093" -> "30064771180"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771180"  [ label = "DDG: json"] 
  "30064771098" -> "30064771180"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771180"  [ label = "DDG: json"] 
  "30064771103" -> "30064771180"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771180"  [ label = "DDG: json"] 
  "30064771107" -> "30064771180"  [ label = "DDG: i"] 
  "30064771111" -> "30064771180"  [ label = "DDG: json"] 
  "30064771111" -> "30064771180"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771180"  [ label = "DDG: json"] 
  "30064771115" -> "30064771180"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771180"  [ label = "DDG: json"] 
  "30064771119" -> "30064771180"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771180"  [ label = "DDG: json"] 
  "30064771123" -> "30064771180"  [ label = "DDG: i"] 
  "30064771128" -> "30064771180"  [ label = "DDG: json"] 
  "30064771128" -> "30064771180"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771180"  [ label = "DDG: json"] 
  "30064771132" -> "30064771180"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771180"  [ label = "DDG: json"] 
  "30064771136" -> "30064771180"  [ label = "DDG: i"] 
  "30064771141" -> "30064771180"  [ label = "DDG: json"] 
  "30064771141" -> "30064771180"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771180"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771180"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771180"  [ label = "DDG: json"] 
  "30064771151" -> "30064771180"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771180"  [ label = "DDG: json"] 
  "30064771155" -> "30064771180"  [ label = "DDG: i"] 
  "30064771160" -> "30064771180"  [ label = "DDG: json"] 
  "30064771160" -> "30064771180"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771180"  [ label = "DDG: json"] 
  "30064771164" -> "30064771180"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771180"  [ label = "DDG: json"] 
  "30064771168" -> "30064771180"  [ label = "DDG: i"] 
  "30064771173" -> "30064771180"  [ label = "DDG: json"] 
  "30064771173" -> "30064771180"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771180"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771180"  [ label = "DDG: i"] 
  "111669149697" -> "68719476823"  [ label = "DDG: "] 
  "30064771182" -> "30064771183"  [ label = "DDG: daconfig"] 
  "30064771182" -> "30064771183"  [ label = "DDG: 'currency decimal places'"] 
  "30064771182" -> "30064771183"  [ label = "DDG: 2"] 
  "111669149697" -> "30064771179"  [ label = "DDG: "] 
  "30064771093" -> "30064771179"  [ label = "DDG: json"] 
  "30064771093" -> "30064771179"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771179"  [ label = "DDG: json"] 
  "30064771098" -> "30064771179"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771179"  [ label = "DDG: json"] 
  "30064771103" -> "30064771179"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771179"  [ label = "DDG: json"] 
  "30064771107" -> "30064771179"  [ label = "DDG: i"] 
  "30064771111" -> "30064771179"  [ label = "DDG: json"] 
  "30064771111" -> "30064771179"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771179"  [ label = "DDG: json"] 
  "30064771115" -> "30064771179"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771179"  [ label = "DDG: json"] 
  "30064771119" -> "30064771179"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771179"  [ label = "DDG: json"] 
  "30064771123" -> "30064771179"  [ label = "DDG: i"] 
  "30064771128" -> "30064771179"  [ label = "DDG: json"] 
  "30064771128" -> "30064771179"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771179"  [ label = "DDG: json"] 
  "30064771132" -> "30064771179"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771179"  [ label = "DDG: json"] 
  "30064771136" -> "30064771179"  [ label = "DDG: i"] 
  "30064771141" -> "30064771179"  [ label = "DDG: json"] 
  "30064771141" -> "30064771179"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771179"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771179"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771179"  [ label = "DDG: json"] 
  "30064771151" -> "30064771179"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771179"  [ label = "DDG: json"] 
  "30064771155" -> "30064771179"  [ label = "DDG: i"] 
  "30064771160" -> "30064771179"  [ label = "DDG: json"] 
  "30064771160" -> "30064771179"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771179"  [ label = "DDG: json"] 
  "30064771164" -> "30064771179"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771179"  [ label = "DDG: json"] 
  "30064771168" -> "30064771179"  [ label = "DDG: i"] 
  "30064771173" -> "30064771179"  [ label = "DDG: json"] 
  "30064771173" -> "30064771179"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771179"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771179"  [ label = "DDG: i"] 
  "111669149697" -> "30064771182"  [ label = "DDG: "] 
  "111669149697" -> "30064771178"  [ label = "DDG: "] 
  "30064771093" -> "30064771178"  [ label = "DDG: json"] 
  "30064771093" -> "30064771178"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771178"  [ label = "DDG: json"] 
  "30064771098" -> "30064771178"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771178"  [ label = "DDG: json"] 
  "30064771103" -> "30064771178"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771178"  [ label = "DDG: json"] 
  "30064771107" -> "30064771178"  [ label = "DDG: i"] 
  "30064771111" -> "30064771178"  [ label = "DDG: json"] 
  "30064771111" -> "30064771178"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771178"  [ label = "DDG: json"] 
  "30064771115" -> "30064771178"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771178"  [ label = "DDG: json"] 
  "30064771119" -> "30064771178"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771178"  [ label = "DDG: json"] 
  "30064771123" -> "30064771178"  [ label = "DDG: i"] 
  "30064771128" -> "30064771178"  [ label = "DDG: json"] 
  "30064771128" -> "30064771178"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771178"  [ label = "DDG: json"] 
  "30064771132" -> "30064771178"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771178"  [ label = "DDG: json"] 
  "30064771136" -> "30064771178"  [ label = "DDG: i"] 
  "30064771141" -> "30064771178"  [ label = "DDG: json"] 
  "30064771141" -> "30064771178"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771178"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771178"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771178"  [ label = "DDG: json"] 
  "30064771151" -> "30064771178"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771178"  [ label = "DDG: json"] 
  "30064771155" -> "30064771178"  [ label = "DDG: i"] 
  "30064771160" -> "30064771178"  [ label = "DDG: json"] 
  "30064771160" -> "30064771178"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771178"  [ label = "DDG: json"] 
  "30064771164" -> "30064771178"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771178"  [ label = "DDG: json"] 
  "30064771168" -> "30064771178"  [ label = "DDG: i"] 
  "30064771173" -> "30064771178"  [ label = "DDG: json"] 
  "30064771173" -> "30064771178"  [ label = "DDG: str(userid)"] 
  "30064771177" -> "30064771178"  [ label = "DDG: 'get_variables'"] 
  "30064771177" -> "30064771178"  [ label = "DDG: i"] 
  "111669149697" -> "30064771176"  [ label = "DDG: "] 
  "30064771093" -> "30064771176"  [ label = "DDG: json"] 
  "30064771093" -> "30064771176"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771176"  [ label = "DDG: json"] 
  "30064771098" -> "30064771176"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771176"  [ label = "DDG: json"] 
  "30064771103" -> "30064771176"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771176"  [ label = "DDG: json"] 
  "30064771107" -> "30064771176"  [ label = "DDG: i"] 
  "30064771111" -> "30064771176"  [ label = "DDG: json"] 
  "30064771111" -> "30064771176"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771176"  [ label = "DDG: json"] 
  "30064771115" -> "30064771176"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771176"  [ label = "DDG: json"] 
  "30064771119" -> "30064771176"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771176"  [ label = "DDG: json"] 
  "30064771123" -> "30064771176"  [ label = "DDG: i"] 
  "30064771128" -> "30064771176"  [ label = "DDG: json"] 
  "30064771128" -> "30064771176"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771176"  [ label = "DDG: json"] 
  "30064771132" -> "30064771176"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771176"  [ label = "DDG: json"] 
  "30064771136" -> "30064771176"  [ label = "DDG: i"] 
  "30064771141" -> "30064771176"  [ label = "DDG: json"] 
  "30064771141" -> "30064771176"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771176"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771176"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771176"  [ label = "DDG: json"] 
  "30064771151" -> "30064771176"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771176"  [ label = "DDG: json"] 
  "30064771155" -> "30064771176"  [ label = "DDG: i"] 
  "30064771160" -> "30064771176"  [ label = "DDG: json"] 
  "30064771160" -> "30064771176"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771176"  [ label = "DDG: json"] 
  "30064771164" -> "30064771176"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771176"  [ label = "DDG: json"] 
  "30064771168" -> "30064771176"  [ label = "DDG: i"] 
  "30064771173" -> "30064771176"  [ label = "DDG: json"] 
  "30064771173" -> "30064771176"  [ label = "DDG: str(userid)"] 
  "111669149697" -> "68719476820"  [ label = "DDG: "] 
  "111669149697" -> "30064771177"  [ label = "DDG: "] 
  "30064771168" -> "30064771177"  [ label = "DDG: i"] 
  "111669149697" -> "30064771175"  [ label = "DDG: "] 
  "30064771093" -> "30064771175"  [ label = "DDG: json"] 
  "30064771093" -> "30064771175"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771175"  [ label = "DDG: json"] 
  "30064771098" -> "30064771175"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771175"  [ label = "DDG: json"] 
  "30064771103" -> "30064771175"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771175"  [ label = "DDG: json"] 
  "30064771107" -> "30064771175"  [ label = "DDG: i"] 
  "30064771111" -> "30064771175"  [ label = "DDG: json"] 
  "30064771111" -> "30064771175"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771175"  [ label = "DDG: json"] 
  "30064771115" -> "30064771175"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771175"  [ label = "DDG: json"] 
  "30064771119" -> "30064771175"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771175"  [ label = "DDG: json"] 
  "30064771123" -> "30064771175"  [ label = "DDG: i"] 
  "30064771128" -> "30064771175"  [ label = "DDG: json"] 
  "30064771128" -> "30064771175"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771175"  [ label = "DDG: json"] 
  "30064771132" -> "30064771175"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771175"  [ label = "DDG: json"] 
  "30064771136" -> "30064771175"  [ label = "DDG: i"] 
  "30064771141" -> "30064771175"  [ label = "DDG: json"] 
  "30064771141" -> "30064771175"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771175"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771175"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771175"  [ label = "DDG: json"] 
  "30064771151" -> "30064771175"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771175"  [ label = "DDG: json"] 
  "30064771155" -> "30064771175"  [ label = "DDG: i"] 
  "30064771160" -> "30064771175"  [ label = "DDG: json"] 
  "30064771160" -> "30064771175"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771175"  [ label = "DDG: json"] 
  "30064771164" -> "30064771175"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771175"  [ label = "DDG: json"] 
  "30064771168" -> "30064771175"  [ label = "DDG: i"] 
  "30064771173" -> "30064771175"  [ label = "DDG: json"] 
  "30064771173" -> "30064771175"  [ label = "DDG: str(userid)"] 
  "111669149697" -> "30064771174"  [ label = "DDG: "] 
  "30064771093" -> "30064771174"  [ label = "DDG: json"] 
  "30064771093" -> "30064771174"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771174"  [ label = "DDG: json"] 
  "30064771098" -> "30064771174"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771174"  [ label = "DDG: json"] 
  "30064771103" -> "30064771174"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771174"  [ label = "DDG: json"] 
  "30064771107" -> "30064771174"  [ label = "DDG: i"] 
  "30064771111" -> "30064771174"  [ label = "DDG: json"] 
  "30064771111" -> "30064771174"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771174"  [ label = "DDG: json"] 
  "30064771115" -> "30064771174"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771174"  [ label = "DDG: json"] 
  "30064771119" -> "30064771174"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771174"  [ label = "DDG: json"] 
  "30064771123" -> "30064771174"  [ label = "DDG: i"] 
  "30064771128" -> "30064771174"  [ label = "DDG: json"] 
  "30064771128" -> "30064771174"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771174"  [ label = "DDG: json"] 
  "30064771132" -> "30064771174"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771174"  [ label = "DDG: json"] 
  "30064771136" -> "30064771174"  [ label = "DDG: i"] 
  "30064771141" -> "30064771174"  [ label = "DDG: json"] 
  "30064771141" -> "30064771174"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771174"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771174"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771174"  [ label = "DDG: json"] 
  "30064771151" -> "30064771174"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771174"  [ label = "DDG: json"] 
  "30064771155" -> "30064771174"  [ label = "DDG: i"] 
  "30064771160" -> "30064771174"  [ label = "DDG: json"] 
  "30064771160" -> "30064771174"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771174"  [ label = "DDG: json"] 
  "30064771164" -> "30064771174"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771174"  [ label = "DDG: json"] 
  "30064771168" -> "30064771174"  [ label = "DDG: i"] 
  "30064771173" -> "30064771174"  [ label = "DDG: json"] 
  "30064771173" -> "30064771174"  [ label = "DDG: str(userid)"] 
  "111669149697" -> "30064771170"  [ label = "DDG: "] 
  "30064771093" -> "30064771170"  [ label = "DDG: json"] 
  "30064771093" -> "30064771170"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771170"  [ label = "DDG: json"] 
  "30064771098" -> "30064771170"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771170"  [ label = "DDG: json"] 
  "30064771103" -> "30064771170"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771170"  [ label = "DDG: json"] 
  "30064771107" -> "30064771170"  [ label = "DDG: i"] 
  "30064771111" -> "30064771170"  [ label = "DDG: json"] 
  "30064771111" -> "30064771170"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771170"  [ label = "DDG: json"] 
  "30064771115" -> "30064771170"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771170"  [ label = "DDG: json"] 
  "30064771119" -> "30064771170"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771170"  [ label = "DDG: json"] 
  "30064771123" -> "30064771170"  [ label = "DDG: i"] 
  "30064771128" -> "30064771170"  [ label = "DDG: json"] 
  "30064771128" -> "30064771170"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771170"  [ label = "DDG: json"] 
  "30064771132" -> "30064771170"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771170"  [ label = "DDG: json"] 
  "30064771136" -> "30064771170"  [ label = "DDG: i"] 
  "30064771141" -> "30064771170"  [ label = "DDG: json"] 
  "30064771141" -> "30064771170"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771170"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771170"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771170"  [ label = "DDG: json"] 
  "30064771151" -> "30064771170"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771170"  [ label = "DDG: json"] 
  "30064771155" -> "30064771170"  [ label = "DDG: i"] 
  "30064771160" -> "30064771170"  [ label = "DDG: json"] 
  "30064771160" -> "30064771170"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771170"  [ label = "DDG: json"] 
  "30064771164" -> "30064771170"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771170"  [ label = "DDG: json"] 
  "30064771168" -> "30064771170"  [ label = "DDG: i"] 
  "30064771168" -> "30064771173"  [ label = "DDG: json"] 
  "111669149697" -> "30064771173"  [ label = "DDG: "] 
  "30064771171" -> "30064771173"  [ label = "DDG: userid"] 
  "111669149697" -> "30064771169"  [ label = "DDG: "] 
  "30064771093" -> "30064771169"  [ label = "DDG: json"] 
  "30064771093" -> "30064771169"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771169"  [ label = "DDG: json"] 
  "30064771098" -> "30064771169"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771169"  [ label = "DDG: json"] 
  "30064771103" -> "30064771169"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771169"  [ label = "DDG: json"] 
  "30064771107" -> "30064771169"  [ label = "DDG: i"] 
  "30064771111" -> "30064771169"  [ label = "DDG: json"] 
  "30064771111" -> "30064771169"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771169"  [ label = "DDG: json"] 
  "30064771115" -> "30064771169"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771169"  [ label = "DDG: json"] 
  "30064771119" -> "30064771169"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771169"  [ label = "DDG: json"] 
  "30064771123" -> "30064771169"  [ label = "DDG: i"] 
  "30064771128" -> "30064771169"  [ label = "DDG: json"] 
  "30064771128" -> "30064771169"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771169"  [ label = "DDG: json"] 
  "30064771132" -> "30064771169"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771169"  [ label = "DDG: json"] 
  "30064771136" -> "30064771169"  [ label = "DDG: i"] 
  "30064771141" -> "30064771169"  [ label = "DDG: json"] 
  "30064771141" -> "30064771169"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771169"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771169"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771169"  [ label = "DDG: json"] 
  "30064771151" -> "30064771169"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771169"  [ label = "DDG: json"] 
  "30064771155" -> "30064771169"  [ label = "DDG: i"] 
  "30064771160" -> "30064771169"  [ label = "DDG: json"] 
  "30064771160" -> "30064771169"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771169"  [ label = "DDG: json"] 
  "30064771164" -> "30064771169"  [ label = "DDG: uid"] 
  "30064771168" -> "30064771169"  [ label = "DDG: json"] 
  "30064771168" -> "30064771169"  [ label = "DDG: i"] 
  "111669149697" -> "68719476816"  [ label = "DDG: "] 
  "30064771158" -> "30064771171"  [ label = "DDG: userid"] 
  "111669149697" -> "30064771171"  [ label = "DDG: "] 
  "111669149697" -> "30064771166"  [ label = "DDG: "] 
  "30064771093" -> "30064771166"  [ label = "DDG: json"] 
  "30064771093" -> "30064771166"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771166"  [ label = "DDG: json"] 
  "30064771098" -> "30064771166"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771166"  [ label = "DDG: json"] 
  "30064771103" -> "30064771166"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771166"  [ label = "DDG: json"] 
  "30064771107" -> "30064771166"  [ label = "DDG: i"] 
  "30064771111" -> "30064771166"  [ label = "DDG: json"] 
  "30064771111" -> "30064771166"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771166"  [ label = "DDG: json"] 
  "30064771115" -> "30064771166"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771166"  [ label = "DDG: json"] 
  "30064771119" -> "30064771166"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771166"  [ label = "DDG: json"] 
  "30064771123" -> "30064771166"  [ label = "DDG: i"] 
  "30064771128" -> "30064771166"  [ label = "DDG: json"] 
  "30064771128" -> "30064771166"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771166"  [ label = "DDG: json"] 
  "30064771132" -> "30064771166"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771166"  [ label = "DDG: json"] 
  "30064771136" -> "30064771166"  [ label = "DDG: i"] 
  "30064771141" -> "30064771166"  [ label = "DDG: json"] 
  "30064771141" -> "30064771166"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771166"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771166"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771166"  [ label = "DDG: json"] 
  "30064771151" -> "30064771166"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771166"  [ label = "DDG: json"] 
  "30064771155" -> "30064771166"  [ label = "DDG: i"] 
  "30064771160" -> "30064771166"  [ label = "DDG: json"] 
  "30064771160" -> "30064771166"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771166"  [ label = "DDG: json"] 
  "30064771164" -> "30064771166"  [ label = "DDG: uid"] 
  "30064771164" -> "30064771168"  [ label = "DDG: json"] 
  "111669149697" -> "30064771168"  [ label = "DDG: "] 
  "30064771155" -> "30064771168"  [ label = "DDG: i"] 
  "111669149697" -> "30064771165"  [ label = "DDG: "] 
  "30064771093" -> "30064771165"  [ label = "DDG: json"] 
  "30064771093" -> "30064771165"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771165"  [ label = "DDG: json"] 
  "30064771098" -> "30064771165"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771165"  [ label = "DDG: json"] 
  "30064771103" -> "30064771165"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771165"  [ label = "DDG: json"] 
  "30064771107" -> "30064771165"  [ label = "DDG: i"] 
  "30064771111" -> "30064771165"  [ label = "DDG: json"] 
  "30064771111" -> "30064771165"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771165"  [ label = "DDG: json"] 
  "30064771115" -> "30064771165"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771165"  [ label = "DDG: json"] 
  "30064771119" -> "30064771165"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771165"  [ label = "DDG: json"] 
  "30064771123" -> "30064771165"  [ label = "DDG: i"] 
  "30064771128" -> "30064771165"  [ label = "DDG: json"] 
  "30064771128" -> "30064771165"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771165"  [ label = "DDG: json"] 
  "30064771132" -> "30064771165"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771165"  [ label = "DDG: json"] 
  "30064771136" -> "30064771165"  [ label = "DDG: i"] 
  "30064771141" -> "30064771165"  [ label = "DDG: json"] 
  "30064771141" -> "30064771165"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771165"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771165"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771165"  [ label = "DDG: json"] 
  "30064771151" -> "30064771165"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771165"  [ label = "DDG: json"] 
  "30064771155" -> "30064771165"  [ label = "DDG: i"] 
  "30064771160" -> "30064771165"  [ label = "DDG: json"] 
  "30064771160" -> "30064771165"  [ label = "DDG: str(userid)"] 
  "30064771164" -> "30064771165"  [ label = "DDG: json"] 
  "30064771164" -> "30064771165"  [ label = "DDG: uid"] 
  "111669149697" -> "30064771162"  [ label = "DDG: "] 
  "30064771093" -> "30064771162"  [ label = "DDG: json"] 
  "30064771093" -> "30064771162"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771162"  [ label = "DDG: json"] 
  "30064771098" -> "30064771162"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771162"  [ label = "DDG: json"] 
  "30064771103" -> "30064771162"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771162"  [ label = "DDG: json"] 
  "30064771107" -> "30064771162"  [ label = "DDG: i"] 
  "30064771111" -> "30064771162"  [ label = "DDG: json"] 
  "30064771111" -> "30064771162"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771162"  [ label = "DDG: json"] 
  "30064771115" -> "30064771162"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771162"  [ label = "DDG: json"] 
  "30064771119" -> "30064771162"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771162"  [ label = "DDG: json"] 
  "30064771123" -> "30064771162"  [ label = "DDG: i"] 
  "30064771128" -> "30064771162"  [ label = "DDG: json"] 
  "30064771128" -> "30064771162"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771162"  [ label = "DDG: json"] 
  "30064771132" -> "30064771162"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771162"  [ label = "DDG: json"] 
  "30064771136" -> "30064771162"  [ label = "DDG: i"] 
  "30064771141" -> "30064771162"  [ label = "DDG: json"] 
  "30064771141" -> "30064771162"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771162"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771162"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771162"  [ label = "DDG: json"] 
  "30064771151" -> "30064771162"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771162"  [ label = "DDG: json"] 
  "30064771155" -> "30064771162"  [ label = "DDG: i"] 
  "30064771160" -> "30064771162"  [ label = "DDG: json"] 
  "30064771160" -> "30064771162"  [ label = "DDG: str(userid)"] 
  "30064771160" -> "30064771164"  [ label = "DDG: json"] 
  "111669149697" -> "30064771164"  [ label = "DDG: "] 
  "30064771151" -> "30064771164"  [ label = "DDG: uid"] 
  "111669149697" -> "30064771161"  [ label = "DDG: "] 
  "30064771093" -> "30064771161"  [ label = "DDG: json"] 
  "30064771093" -> "30064771161"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771161"  [ label = "DDG: json"] 
  "30064771098" -> "30064771161"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771161"  [ label = "DDG: json"] 
  "30064771103" -> "30064771161"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771161"  [ label = "DDG: json"] 
  "30064771107" -> "30064771161"  [ label = "DDG: i"] 
  "30064771111" -> "30064771161"  [ label = "DDG: json"] 
  "30064771111" -> "30064771161"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771161"  [ label = "DDG: json"] 
  "30064771115" -> "30064771161"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771161"  [ label = "DDG: json"] 
  "30064771119" -> "30064771161"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771161"  [ label = "DDG: json"] 
  "30064771123" -> "30064771161"  [ label = "DDG: i"] 
  "30064771128" -> "30064771161"  [ label = "DDG: json"] 
  "30064771128" -> "30064771161"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771161"  [ label = "DDG: json"] 
  "30064771132" -> "30064771161"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771161"  [ label = "DDG: json"] 
  "30064771136" -> "30064771161"  [ label = "DDG: i"] 
  "30064771141" -> "30064771161"  [ label = "DDG: json"] 
  "30064771141" -> "30064771161"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771161"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771161"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771161"  [ label = "DDG: json"] 
  "30064771151" -> "30064771161"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771161"  [ label = "DDG: json"] 
  "30064771155" -> "30064771161"  [ label = "DDG: i"] 
  "30064771160" -> "30064771161"  [ label = "DDG: json"] 
  "30064771160" -> "30064771161"  [ label = "DDG: str(userid)"] 
  "111669149697" -> "30064771157"  [ label = "DDG: "] 
  "30064771093" -> "30064771157"  [ label = "DDG: json"] 
  "30064771093" -> "30064771157"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771157"  [ label = "DDG: json"] 
  "30064771098" -> "30064771157"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771157"  [ label = "DDG: json"] 
  "30064771103" -> "30064771157"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771157"  [ label = "DDG: json"] 
  "30064771107" -> "30064771157"  [ label = "DDG: i"] 
  "30064771111" -> "30064771157"  [ label = "DDG: json"] 
  "30064771111" -> "30064771157"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771157"  [ label = "DDG: json"] 
  "30064771115" -> "30064771157"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771157"  [ label = "DDG: json"] 
  "30064771119" -> "30064771157"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771157"  [ label = "DDG: json"] 
  "30064771123" -> "30064771157"  [ label = "DDG: i"] 
  "30064771128" -> "30064771157"  [ label = "DDG: json"] 
  "30064771128" -> "30064771157"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771157"  [ label = "DDG: json"] 
  "30064771132" -> "30064771157"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771157"  [ label = "DDG: json"] 
  "30064771136" -> "30064771157"  [ label = "DDG: i"] 
  "30064771141" -> "30064771157"  [ label = "DDG: json"] 
  "30064771141" -> "30064771157"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771157"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771157"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771157"  [ label = "DDG: json"] 
  "30064771151" -> "30064771157"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771157"  [ label = "DDG: json"] 
  "30064771155" -> "30064771157"  [ label = "DDG: i"] 
  "30064771155" -> "30064771160"  [ label = "DDG: json"] 
  "111669149697" -> "30064771160"  [ label = "DDG: "] 
  "30064771158" -> "30064771160"  [ label = "DDG: userid"] 
  "111669149697" -> "30064771156"  [ label = "DDG: "] 
  "30064771093" -> "30064771156"  [ label = "DDG: json"] 
  "30064771093" -> "30064771156"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771156"  [ label = "DDG: json"] 
  "30064771098" -> "30064771156"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771156"  [ label = "DDG: json"] 
  "30064771103" -> "30064771156"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771156"  [ label = "DDG: json"] 
  "30064771107" -> "30064771156"  [ label = "DDG: i"] 
  "30064771111" -> "30064771156"  [ label = "DDG: json"] 
  "30064771111" -> "30064771156"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771156"  [ label = "DDG: json"] 
  "30064771115" -> "30064771156"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771156"  [ label = "DDG: json"] 
  "30064771119" -> "30064771156"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771156"  [ label = "DDG: json"] 
  "30064771123" -> "30064771156"  [ label = "DDG: i"] 
  "30064771128" -> "30064771156"  [ label = "DDG: json"] 
  "30064771128" -> "30064771156"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771156"  [ label = "DDG: json"] 
  "30064771132" -> "30064771156"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771156"  [ label = "DDG: json"] 
  "30064771136" -> "30064771156"  [ label = "DDG: i"] 
  "30064771141" -> "30064771156"  [ label = "DDG: json"] 
  "30064771141" -> "30064771156"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771156"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771156"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771156"  [ label = "DDG: json"] 
  "30064771151" -> "30064771156"  [ label = "DDG: uid"] 
  "30064771155" -> "30064771156"  [ label = "DDG: json"] 
  "30064771155" -> "30064771156"  [ label = "DDG: i"] 
  "111669149697" -> "68719476806"  [ label = "DDG: "] 
  "30064771139" -> "30064771158"  [ label = "DDG: userid"] 
  "111669149697" -> "30064771158"  [ label = "DDG: "] 
  "111669149697" -> "30064771153"  [ label = "DDG: "] 
  "30064771093" -> "30064771153"  [ label = "DDG: json"] 
  "30064771093" -> "30064771153"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771153"  [ label = "DDG: json"] 
  "30064771098" -> "30064771153"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771153"  [ label = "DDG: json"] 
  "30064771103" -> "30064771153"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771153"  [ label = "DDG: json"] 
  "30064771107" -> "30064771153"  [ label = "DDG: i"] 
  "30064771111" -> "30064771153"  [ label = "DDG: json"] 
  "30064771111" -> "30064771153"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771153"  [ label = "DDG: json"] 
  "30064771115" -> "30064771153"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771153"  [ label = "DDG: json"] 
  "30064771119" -> "30064771153"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771153"  [ label = "DDG: json"] 
  "30064771123" -> "30064771153"  [ label = "DDG: i"] 
  "30064771128" -> "30064771153"  [ label = "DDG: json"] 
  "30064771128" -> "30064771153"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771153"  [ label = "DDG: json"] 
  "30064771132" -> "30064771153"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771153"  [ label = "DDG: json"] 
  "30064771136" -> "30064771153"  [ label = "DDG: i"] 
  "30064771141" -> "30064771153"  [ label = "DDG: json"] 
  "30064771141" -> "30064771153"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771153"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771153"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771153"  [ label = "DDG: json"] 
  "30064771151" -> "30064771153"  [ label = "DDG: uid"] 
  "30064771151" -> "30064771155"  [ label = "DDG: json"] 
  "111669149697" -> "30064771155"  [ label = "DDG: "] 
  "30064771136" -> "30064771155"  [ label = "DDG: i"] 
  "111669149697" -> "30064771152"  [ label = "DDG: "] 
  "30064771093" -> "30064771152"  [ label = "DDG: json"] 
  "30064771093" -> "30064771152"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771152"  [ label = "DDG: json"] 
  "30064771098" -> "30064771152"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771152"  [ label = "DDG: json"] 
  "30064771103" -> "30064771152"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771152"  [ label = "DDG: json"] 
  "30064771107" -> "30064771152"  [ label = "DDG: i"] 
  "30064771111" -> "30064771152"  [ label = "DDG: json"] 
  "30064771111" -> "30064771152"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771152"  [ label = "DDG: json"] 
  "30064771115" -> "30064771152"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771152"  [ label = "DDG: json"] 
  "30064771119" -> "30064771152"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771152"  [ label = "DDG: json"] 
  "30064771123" -> "30064771152"  [ label = "DDG: i"] 
  "30064771128" -> "30064771152"  [ label = "DDG: json"] 
  "30064771128" -> "30064771152"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771152"  [ label = "DDG: json"] 
  "30064771132" -> "30064771152"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771152"  [ label = "DDG: json"] 
  "30064771136" -> "30064771152"  [ label = "DDG: i"] 
  "30064771141" -> "30064771152"  [ label = "DDG: json"] 
  "30064771141" -> "30064771152"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771152"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771152"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771151" -> "30064771152"  [ label = "DDG: json"] 
  "30064771151" -> "30064771152"  [ label = "DDG: uid"] 
  "111669149697" -> "30064771149"  [ label = "DDG: "] 
  "30064771093" -> "30064771149"  [ label = "DDG: json"] 
  "30064771093" -> "30064771149"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771149"  [ label = "DDG: json"] 
  "30064771098" -> "30064771149"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771149"  [ label = "DDG: json"] 
  "30064771103" -> "30064771149"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771149"  [ label = "DDG: json"] 
  "30064771107" -> "30064771149"  [ label = "DDG: i"] 
  "30064771111" -> "30064771149"  [ label = "DDG: json"] 
  "30064771111" -> "30064771149"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771149"  [ label = "DDG: json"] 
  "30064771115" -> "30064771149"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771149"  [ label = "DDG: json"] 
  "30064771119" -> "30064771149"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771149"  [ label = "DDG: json"] 
  "30064771123" -> "30064771149"  [ label = "DDG: i"] 
  "30064771128" -> "30064771149"  [ label = "DDG: json"] 
  "30064771128" -> "30064771149"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771149"  [ label = "DDG: json"] 
  "30064771132" -> "30064771149"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771149"  [ label = "DDG: json"] 
  "30064771136" -> "30064771149"  [ label = "DDG: i"] 
  "30064771141" -> "30064771149"  [ label = "DDG: json"] 
  "30064771141" -> "30064771149"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771149"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771149"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771141" -> "30064771151"  [ label = "DDG: json"] 
  "111669149697" -> "30064771151"  [ label = "DDG: "] 
  "30064771132" -> "30064771151"  [ label = "DDG: uid"] 
  "111669149697" -> "30064771148"  [ label = "DDG: "] 
  "30064771093" -> "30064771148"  [ label = "DDG: json"] 
  "30064771093" -> "30064771148"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771148"  [ label = "DDG: json"] 
  "30064771098" -> "30064771148"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771148"  [ label = "DDG: json"] 
  "30064771103" -> "30064771148"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771148"  [ label = "DDG: json"] 
  "30064771107" -> "30064771148"  [ label = "DDG: i"] 
  "30064771111" -> "30064771148"  [ label = "DDG: json"] 
  "30064771111" -> "30064771148"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771148"  [ label = "DDG: json"] 
  "30064771115" -> "30064771148"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771148"  [ label = "DDG: json"] 
  "30064771119" -> "30064771148"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771148"  [ label = "DDG: json"] 
  "30064771123" -> "30064771148"  [ label = "DDG: i"] 
  "30064771128" -> "30064771148"  [ label = "DDG: json"] 
  "30064771128" -> "30064771148"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771148"  [ label = "DDG: json"] 
  "30064771132" -> "30064771148"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771148"  [ label = "DDG: json"] 
  "30064771136" -> "30064771148"  [ label = "DDG: i"] 
  "30064771141" -> "30064771148"  [ label = "DDG: json"] 
  "30064771141" -> "30064771148"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771148"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "30064771147" -> "30064771148"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "111669149697" -> "30064771146"  [ label = "DDG: "] 
  "30064771093" -> "30064771146"  [ label = "DDG: json"] 
  "30064771093" -> "30064771146"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771146"  [ label = "DDG: json"] 
  "30064771098" -> "30064771146"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771146"  [ label = "DDG: json"] 
  "30064771103" -> "30064771146"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771146"  [ label = "DDG: json"] 
  "30064771107" -> "30064771146"  [ label = "DDG: i"] 
  "30064771111" -> "30064771146"  [ label = "DDG: json"] 
  "30064771111" -> "30064771146"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771146"  [ label = "DDG: json"] 
  "30064771115" -> "30064771146"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771146"  [ label = "DDG: json"] 
  "30064771119" -> "30064771146"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771146"  [ label = "DDG: json"] 
  "30064771123" -> "30064771146"  [ label = "DDG: i"] 
  "30064771128" -> "30064771146"  [ label = "DDG: json"] 
  "30064771128" -> "30064771146"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771146"  [ label = "DDG: json"] 
  "30064771132" -> "30064771146"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771146"  [ label = "DDG: json"] 
  "30064771136" -> "30064771146"  [ label = "DDG: i"] 
  "30064771141" -> "30064771146"  [ label = "DDG: json"] 
  "30064771141" -> "30064771146"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771146"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "111669149697" -> "68719476798"  [ label = "DDG: "] 
  "30064771144" -> "30064771147"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "111669149697" -> "30064771147"  [ label = "DDG: "] 
  "111669149697" -> "30064771145"  [ label = "DDG: "] 
  "30064771093" -> "30064771145"  [ label = "DDG: json"] 
  "30064771093" -> "30064771145"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771145"  [ label = "DDG: json"] 
  "30064771098" -> "30064771145"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771145"  [ label = "DDG: json"] 
  "30064771103" -> "30064771145"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771145"  [ label = "DDG: json"] 
  "30064771107" -> "30064771145"  [ label = "DDG: i"] 
  "30064771111" -> "30064771145"  [ label = "DDG: json"] 
  "30064771111" -> "30064771145"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771145"  [ label = "DDG: json"] 
  "30064771115" -> "30064771145"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771145"  [ label = "DDG: json"] 
  "30064771119" -> "30064771145"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771145"  [ label = "DDG: json"] 
  "30064771123" -> "30064771145"  [ label = "DDG: i"] 
  "30064771128" -> "30064771145"  [ label = "DDG: json"] 
  "30064771128" -> "30064771145"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771145"  [ label = "DDG: json"] 
  "30064771132" -> "30064771145"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771145"  [ label = "DDG: json"] 
  "30064771136" -> "30064771145"  [ label = "DDG: i"] 
  "30064771141" -> "30064771145"  [ label = "DDG: json"] 
  "30064771141" -> "30064771145"  [ label = "DDG: str(userid)"] 
  "30064771144" -> "30064771145"  [ label = "DDG: CHECKIN_INTERVAL"] 
  "111669149697" -> "30064771143"  [ label = "DDG: "] 
  "30064771093" -> "30064771143"  [ label = "DDG: json"] 
  "30064771093" -> "30064771143"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771143"  [ label = "DDG: json"] 
  "30064771098" -> "30064771143"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771143"  [ label = "DDG: json"] 
  "30064771103" -> "30064771143"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771143"  [ label = "DDG: json"] 
  "30064771107" -> "30064771143"  [ label = "DDG: i"] 
  "30064771111" -> "30064771143"  [ label = "DDG: json"] 
  "30064771111" -> "30064771143"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771143"  [ label = "DDG: json"] 
  "30064771115" -> "30064771143"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771143"  [ label = "DDG: json"] 
  "30064771119" -> "30064771143"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771143"  [ label = "DDG: json"] 
  "30064771123" -> "30064771143"  [ label = "DDG: i"] 
  "30064771128" -> "30064771143"  [ label = "DDG: json"] 
  "30064771128" -> "30064771143"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771143"  [ label = "DDG: json"] 
  "30064771132" -> "30064771143"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771143"  [ label = "DDG: json"] 
  "30064771136" -> "30064771143"  [ label = "DDG: i"] 
  "30064771141" -> "30064771143"  [ label = "DDG: json"] 
  "30064771141" -> "30064771143"  [ label = "DDG: str(userid)"] 
  "111669149697" -> "68719476796"  [ label = "DDG: "] 
  "111669149697" -> "30064771144"  [ label = "DDG: "] 
  "111669149697" -> "30064771142"  [ label = "DDG: "] 
  "30064771093" -> "30064771142"  [ label = "DDG: json"] 
  "30064771093" -> "30064771142"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771142"  [ label = "DDG: json"] 
  "30064771098" -> "30064771142"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771142"  [ label = "DDG: json"] 
  "30064771103" -> "30064771142"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771142"  [ label = "DDG: json"] 
  "30064771107" -> "30064771142"  [ label = "DDG: i"] 
  "30064771111" -> "30064771142"  [ label = "DDG: json"] 
  "30064771111" -> "30064771142"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771142"  [ label = "DDG: json"] 
  "30064771115" -> "30064771142"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771142"  [ label = "DDG: json"] 
  "30064771119" -> "30064771142"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771142"  [ label = "DDG: json"] 
  "30064771123" -> "30064771142"  [ label = "DDG: i"] 
  "30064771128" -> "30064771142"  [ label = "DDG: json"] 
  "30064771128" -> "30064771142"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771142"  [ label = "DDG: json"] 
  "30064771132" -> "30064771142"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771142"  [ label = "DDG: json"] 
  "30064771136" -> "30064771142"  [ label = "DDG: i"] 
  "30064771141" -> "30064771142"  [ label = "DDG: json"] 
  "30064771141" -> "30064771142"  [ label = "DDG: str(userid)"] 
  "111669149697" -> "30064771138"  [ label = "DDG: "] 
  "30064771093" -> "30064771138"  [ label = "DDG: json"] 
  "30064771093" -> "30064771138"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771138"  [ label = "DDG: json"] 
  "30064771098" -> "30064771138"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771138"  [ label = "DDG: json"] 
  "30064771103" -> "30064771138"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771138"  [ label = "DDG: json"] 
  "30064771107" -> "30064771138"  [ label = "DDG: i"] 
  "30064771111" -> "30064771138"  [ label = "DDG: json"] 
  "30064771111" -> "30064771138"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771138"  [ label = "DDG: json"] 
  "30064771115" -> "30064771138"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771138"  [ label = "DDG: json"] 
  "30064771119" -> "30064771138"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771138"  [ label = "DDG: json"] 
  "30064771123" -> "30064771138"  [ label = "DDG: i"] 
  "30064771128" -> "30064771138"  [ label = "DDG: json"] 
  "30064771128" -> "30064771138"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771138"  [ label = "DDG: json"] 
  "30064771132" -> "30064771138"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771138"  [ label = "DDG: json"] 
  "30064771136" -> "30064771138"  [ label = "DDG: i"] 
  "30064771136" -> "30064771141"  [ label = "DDG: json"] 
  "111669149697" -> "30064771141"  [ label = "DDG: "] 
  "30064771139" -> "30064771141"  [ label = "DDG: userid"] 
  "111669149697" -> "30064771137"  [ label = "DDG: "] 
  "30064771093" -> "30064771137"  [ label = "DDG: json"] 
  "30064771093" -> "30064771137"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771137"  [ label = "DDG: json"] 
  "30064771098" -> "30064771137"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771137"  [ label = "DDG: json"] 
  "30064771103" -> "30064771137"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771137"  [ label = "DDG: json"] 
  "30064771107" -> "30064771137"  [ label = "DDG: i"] 
  "30064771111" -> "30064771137"  [ label = "DDG: json"] 
  "30064771111" -> "30064771137"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771137"  [ label = "DDG: json"] 
  "30064771115" -> "30064771137"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771137"  [ label = "DDG: json"] 
  "30064771119" -> "30064771137"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771137"  [ label = "DDG: json"] 
  "30064771123" -> "30064771137"  [ label = "DDG: i"] 
  "30064771128" -> "30064771137"  [ label = "DDG: json"] 
  "30064771128" -> "30064771137"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771137"  [ label = "DDG: json"] 
  "30064771132" -> "30064771137"  [ label = "DDG: uid"] 
  "30064771136" -> "30064771137"  [ label = "DDG: json"] 
  "30064771136" -> "30064771137"  [ label = "DDG: i"] 
  "111669149697" -> "68719476792"  [ label = "DDG: "] 
  "30064771126" -> "30064771139"  [ label = "DDG: userid"] 
  "111669149697" -> "30064771139"  [ label = "DDG: "] 
  "111669149697" -> "30064771134"  [ label = "DDG: "] 
  "30064771093" -> "30064771134"  [ label = "DDG: json"] 
  "30064771093" -> "30064771134"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771134"  [ label = "DDG: json"] 
  "30064771098" -> "30064771134"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771134"  [ label = "DDG: json"] 
  "30064771103" -> "30064771134"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771134"  [ label = "DDG: json"] 
  "30064771107" -> "30064771134"  [ label = "DDG: i"] 
  "30064771111" -> "30064771134"  [ label = "DDG: json"] 
  "30064771111" -> "30064771134"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771134"  [ label = "DDG: json"] 
  "30064771115" -> "30064771134"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771134"  [ label = "DDG: json"] 
  "30064771119" -> "30064771134"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771134"  [ label = "DDG: json"] 
  "30064771123" -> "30064771134"  [ label = "DDG: i"] 
  "30064771128" -> "30064771134"  [ label = "DDG: json"] 
  "30064771128" -> "30064771134"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771134"  [ label = "DDG: json"] 
  "30064771132" -> "30064771134"  [ label = "DDG: uid"] 
  "30064771132" -> "30064771136"  [ label = "DDG: json"] 
  "111669149697" -> "30064771136"  [ label = "DDG: "] 
  "30064771123" -> "30064771136"  [ label = "DDG: i"] 
  "111669149697" -> "30064771133"  [ label = "DDG: "] 
  "30064771093" -> "30064771133"  [ label = "DDG: json"] 
  "30064771093" -> "30064771133"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771133"  [ label = "DDG: json"] 
  "30064771098" -> "30064771133"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771133"  [ label = "DDG: json"] 
  "30064771103" -> "30064771133"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771133"  [ label = "DDG: json"] 
  "30064771107" -> "30064771133"  [ label = "DDG: i"] 
  "30064771111" -> "30064771133"  [ label = "DDG: json"] 
  "30064771111" -> "30064771133"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771133"  [ label = "DDG: json"] 
  "30064771115" -> "30064771133"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771133"  [ label = "DDG: json"] 
  "30064771119" -> "30064771133"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771133"  [ label = "DDG: json"] 
  "30064771123" -> "30064771133"  [ label = "DDG: i"] 
  "30064771128" -> "30064771133"  [ label = "DDG: json"] 
  "30064771128" -> "30064771133"  [ label = "DDG: str(userid)"] 
  "30064771132" -> "30064771133"  [ label = "DDG: json"] 
  "30064771132" -> "30064771133"  [ label = "DDG: uid"] 
  "111669149697" -> "30064771130"  [ label = "DDG: "] 
  "30064771093" -> "30064771130"  [ label = "DDG: json"] 
  "30064771093" -> "30064771130"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771130"  [ label = "DDG: json"] 
  "30064771098" -> "30064771130"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771130"  [ label = "DDG: json"] 
  "30064771103" -> "30064771130"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771130"  [ label = "DDG: json"] 
  "30064771107" -> "30064771130"  [ label = "DDG: i"] 
  "30064771111" -> "30064771130"  [ label = "DDG: json"] 
  "30064771111" -> "30064771130"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771130"  [ label = "DDG: json"] 
  "30064771115" -> "30064771130"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771130"  [ label = "DDG: json"] 
  "30064771119" -> "30064771130"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771130"  [ label = "DDG: json"] 
  "30064771123" -> "30064771130"  [ label = "DDG: i"] 
  "30064771128" -> "30064771130"  [ label = "DDG: json"] 
  "30064771128" -> "30064771130"  [ label = "DDG: str(userid)"] 
  "30064771128" -> "30064771132"  [ label = "DDG: json"] 
  "111669149697" -> "30064771132"  [ label = "DDG: "] 
  "30064771119" -> "30064771132"  [ label = "DDG: uid"] 
  "111669149697" -> "30064771129"  [ label = "DDG: "] 
  "30064771093" -> "30064771129"  [ label = "DDG: json"] 
  "30064771093" -> "30064771129"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771129"  [ label = "DDG: json"] 
  "30064771098" -> "30064771129"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771129"  [ label = "DDG: json"] 
  "30064771103" -> "30064771129"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771129"  [ label = "DDG: json"] 
  "30064771107" -> "30064771129"  [ label = "DDG: i"] 
  "30064771111" -> "30064771129"  [ label = "DDG: json"] 
  "30064771111" -> "30064771129"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771129"  [ label = "DDG: json"] 
  "30064771115" -> "30064771129"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771129"  [ label = "DDG: json"] 
  "30064771119" -> "30064771129"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771129"  [ label = "DDG: json"] 
  "30064771123" -> "30064771129"  [ label = "DDG: i"] 
  "30064771128" -> "30064771129"  [ label = "DDG: json"] 
  "30064771128" -> "30064771129"  [ label = "DDG: str(userid)"] 
  "111669149697" -> "30064771125"  [ label = "DDG: "] 
  "30064771093" -> "30064771125"  [ label = "DDG: json"] 
  "30064771093" -> "30064771125"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771125"  [ label = "DDG: json"] 
  "30064771098" -> "30064771125"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771125"  [ label = "DDG: json"] 
  "30064771103" -> "30064771125"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771125"  [ label = "DDG: json"] 
  "30064771107" -> "30064771125"  [ label = "DDG: i"] 
  "30064771111" -> "30064771125"  [ label = "DDG: json"] 
  "30064771111" -> "30064771125"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771125"  [ label = "DDG: json"] 
  "30064771115" -> "30064771125"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771125"  [ label = "DDG: json"] 
  "30064771119" -> "30064771125"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771125"  [ label = "DDG: json"] 
  "30064771123" -> "30064771125"  [ label = "DDG: i"] 
  "30064771123" -> "30064771128"  [ label = "DDG: json"] 
  "111669149697" -> "30064771128"  [ label = "DDG: "] 
  "30064771126" -> "30064771128"  [ label = "DDG: userid"] 
  "111669149697" -> "30064771124"  [ label = "DDG: "] 
  "30064771093" -> "30064771124"  [ label = "DDG: json"] 
  "30064771093" -> "30064771124"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771124"  [ label = "DDG: json"] 
  "30064771098" -> "30064771124"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771124"  [ label = "DDG: json"] 
  "30064771103" -> "30064771124"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771124"  [ label = "DDG: json"] 
  "30064771107" -> "30064771124"  [ label = "DDG: i"] 
  "30064771111" -> "30064771124"  [ label = "DDG: json"] 
  "30064771111" -> "30064771124"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771124"  [ label = "DDG: json"] 
  "30064771115" -> "30064771124"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771124"  [ label = "DDG: json"] 
  "30064771119" -> "30064771124"  [ label = "DDG: uid"] 
  "30064771123" -> "30064771124"  [ label = "DDG: json"] 
  "30064771123" -> "30064771124"  [ label = "DDG: i"] 
  "30064771072" -> "68719476782"  [ label = "DDG: str"] 
  "111669149697" -> "68719476782"  [ label = "DDG: "] 
  "30064771090" -> "30064771126"  [ label = "DDG: userid"] 
  "111669149697" -> "30064771126"  [ label = "DDG: "] 
  "111669149697" -> "30064771121"  [ label = "DDG: "] 
  "30064771093" -> "30064771121"  [ label = "DDG: json"] 
  "30064771093" -> "30064771121"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771121"  [ label = "DDG: json"] 
  "30064771098" -> "30064771121"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771121"  [ label = "DDG: json"] 
  "30064771103" -> "30064771121"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771121"  [ label = "DDG: json"] 
  "30064771107" -> "30064771121"  [ label = "DDG: i"] 
  "30064771111" -> "30064771121"  [ label = "DDG: json"] 
  "30064771111" -> "30064771121"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771121"  [ label = "DDG: json"] 
  "30064771115" -> "30064771121"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771121"  [ label = "DDG: json"] 
  "30064771119" -> "30064771121"  [ label = "DDG: uid"] 
  "30064771119" -> "30064771123"  [ label = "DDG: json"] 
  "111669149697" -> "30064771123"  [ label = "DDG: "] 
  "30064771107" -> "30064771123"  [ label = "DDG: i"] 
  "111669149697" -> "30064771120"  [ label = "DDG: "] 
  "30064771093" -> "30064771120"  [ label = "DDG: json"] 
  "30064771093" -> "30064771120"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771120"  [ label = "DDG: json"] 
  "30064771098" -> "30064771120"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771120"  [ label = "DDG: json"] 
  "30064771103" -> "30064771120"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771120"  [ label = "DDG: json"] 
  "30064771107" -> "30064771120"  [ label = "DDG: i"] 
  "30064771111" -> "30064771120"  [ label = "DDG: json"] 
  "30064771111" -> "30064771120"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771120"  [ label = "DDG: json"] 
  "30064771115" -> "30064771120"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771119" -> "30064771120"  [ label = "DDG: json"] 
  "30064771119" -> "30064771120"  [ label = "DDG: uid"] 
  "111669149697" -> "30064771117"  [ label = "DDG: "] 
  "30064771093" -> "30064771117"  [ label = "DDG: json"] 
  "30064771093" -> "30064771117"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771117"  [ label = "DDG: json"] 
  "30064771098" -> "30064771117"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771117"  [ label = "DDG: json"] 
  "30064771103" -> "30064771117"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771117"  [ label = "DDG: json"] 
  "30064771107" -> "30064771117"  [ label = "DDG: i"] 
  "30064771111" -> "30064771117"  [ label = "DDG: json"] 
  "30064771111" -> "30064771117"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771117"  [ label = "DDG: json"] 
  "30064771115" -> "30064771117"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "30064771115" -> "30064771119"  [ label = "DDG: json"] 
  "111669149697" -> "30064771119"  [ label = "DDG: "] 
  "30064771085" -> "30064771119"  [ label = "DDG: uid"] 
  "111669149697" -> "30064771116"  [ label = "DDG: "] 
  "30064771093" -> "30064771116"  [ label = "DDG: json"] 
  "30064771093" -> "30064771116"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771116"  [ label = "DDG: json"] 
  "30064771098" -> "30064771116"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771116"  [ label = "DDG: json"] 
  "30064771103" -> "30064771116"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771116"  [ label = "DDG: json"] 
  "30064771107" -> "30064771116"  [ label = "DDG: i"] 
  "30064771111" -> "30064771116"  [ label = "DDG: json"] 
  "30064771111" -> "30064771116"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771115" -> "30064771116"  [ label = "DDG: json"] 
  "30064771115" -> "30064771116"  [ label = "DDG: NOTIFICATION_MESSAGE"] 
  "111669149697" -> "30064771113"  [ label = "DDG: "] 
  "30064771093" -> "30064771113"  [ label = "DDG: json"] 
  "30064771093" -> "30064771113"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771113"  [ label = "DDG: json"] 
  "30064771098" -> "30064771113"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771113"  [ label = "DDG: json"] 
  "30064771103" -> "30064771113"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771113"  [ label = "DDG: json"] 
  "30064771107" -> "30064771113"  [ label = "DDG: i"] 
  "30064771111" -> "30064771113"  [ label = "DDG: json"] 
  "30064771111" -> "30064771113"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "30064771111" -> "30064771115"  [ label = "DDG: json"] 
  "111669149697" -> "30064771115"  [ label = "DDG: "] 
  "111669149697" -> "30064771112"  [ label = "DDG: "] 
  "30064771093" -> "30064771112"  [ label = "DDG: json"] 
  "30064771093" -> "30064771112"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771112"  [ label = "DDG: json"] 
  "30064771098" -> "30064771112"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771112"  [ label = "DDG: json"] 
  "30064771103" -> "30064771112"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771112"  [ label = "DDG: json"] 
  "30064771107" -> "30064771112"  [ label = "DDG: i"] 
  "30064771111" -> "30064771112"  [ label = "DDG: json"] 
  "30064771111" -> "30064771112"  [ label = "DDG: NOTIFICATION_CONTAINER"] 
  "111669149697" -> "30064771109"  [ label = "DDG: "] 
  "30064771093" -> "30064771109"  [ label = "DDG: json"] 
  "30064771093" -> "30064771109"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771109"  [ label = "DDG: json"] 
  "30064771098" -> "30064771109"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771109"  [ label = "DDG: json"] 
  "30064771103" -> "30064771109"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771109"  [ label = "DDG: json"] 
  "30064771107" -> "30064771109"  [ label = "DDG: i"] 
  "30064771107" -> "30064771111"  [ label = "DDG: json"] 
  "111669149697" -> "30064771111"  [ label = "DDG: "] 
  "111669149697" -> "30064771108"  [ label = "DDG: "] 
  "30064771093" -> "30064771108"  [ label = "DDG: json"] 
  "30064771093" -> "30064771108"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771108"  [ label = "DDG: json"] 
  "30064771098" -> "30064771108"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771108"  [ label = "DDG: json"] 
  "30064771103" -> "30064771108"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771107" -> "30064771108"  [ label = "DDG: json"] 
  "30064771107" -> "30064771108"  [ label = "DDG: i"] 
  "111669149697" -> "30064771105"  [ label = "DDG: "] 
  "30064771093" -> "30064771105"  [ label = "DDG: json"] 
  "30064771093" -> "30064771105"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771105"  [ label = "DDG: json"] 
  "30064771098" -> "30064771105"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771105"  [ label = "DDG: json"] 
  "30064771103" -> "30064771105"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "30064771103" -> "30064771107"  [ label = "DDG: json"] 
  "111669149697" -> "30064771107"  [ label = "DDG: "] 
  "30064771101" -> "30064771107"  [ label = "DDG: i"] 
  "111669149697" -> "30064771104"  [ label = "DDG: "] 
  "30064771093" -> "30064771104"  [ label = "DDG: json"] 
  "30064771093" -> "30064771104"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771104"  [ label = "DDG: json"] 
  "30064771098" -> "30064771104"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771103" -> "30064771104"  [ label = "DDG: json"] 
  "30064771103" -> "30064771104"  [ label = "DDG: url_for('index', i = i, _external = True)"] 
  "111669149697" -> "30064771100"  [ label = "DDG: "] 
  "30064771093" -> "30064771100"  [ label = "DDG: json"] 
  "30064771093" -> "30064771100"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771100"  [ label = "DDG: json"] 
  "30064771098" -> "30064771100"  [ label = "DDG: url_for('index', i = i)"] 
  "30064771098" -> "30064771103"  [ label = "DDG: json"] 
  "111669149697" -> "30064771103"  [ label = "DDG: "] 
  "30064771101" -> "30064771103"  [ label = "DDG: 'index'"] 
  "30064771101" -> "30064771103"  [ label = "DDG: i"] 
  "30064771101" -> "30064771103"  [ label = "DDG: True"] 
  "111669149697" -> "30064771099"  [ label = "DDG: "] 
  "30064771093" -> "30064771099"  [ label = "DDG: json"] 
  "30064771093" -> "30064771099"  [ label = "DDG: generate_csrf()"] 
  "30064771098" -> "30064771099"  [ label = "DDG: json"] 
  "30064771098" -> "30064771099"  [ label = "DDG: url_for('index', i = i)"] 
  "111669149697" -> "68719476763"  [ label = "DDG: "] 
  "111669149697" -> "30064771101"  [ label = "DDG: "] 
  "30064771096" -> "30064771101"  [ label = "DDG: i"] 
  "111669149697" -> "30064771095"  [ label = "DDG: "] 
  "30064771093" -> "30064771095"  [ label = "DDG: json"] 
  "30064771093" -> "30064771095"  [ label = "DDG: generate_csrf()"] 
  "30064771093" -> "30064771098"  [ label = "DDG: json"] 
  "111669149697" -> "30064771098"  [ label = "DDG: "] 
  "30064771096" -> "30064771098"  [ label = "DDG: 'index'"] 
  "30064771096" -> "30064771098"  [ label = "DDG: i"] 
  "111669149697" -> "30064771094"  [ label = "DDG: "] 
  "30064771093" -> "30064771094"  [ label = "DDG: json"] 
  "30064771093" -> "30064771094"  [ label = "DDG: generate_csrf()"] 
  "111669149697" -> "68719476759"  [ label = "DDG: "] 
  "111669149697" -> "30064771096"  [ label = "DDG: "] 
  "30064771080" -> "30064771096"  [ label = "DDG: i"] 
  "111669149697" -> "30064771093"  [ label = "DDG: "] 
  "111669149697" -> "68719476755"  [ label = "DDG: "] 
  "30064771232" -> "30064771241"  [ label = "CDG: "] 
  "30064771232" -> "30064771240"  [ label = "CDG: "] 
  "30064771232" -> "30064771239"  [ label = "CDG: "] 
  "30064771232" -> "30064771238"  [ label = "CDG: "] 
  "30064771232" -> "30064771242"  [ label = "CDG: "] 
  "30064771232" -> "55834574881"  [ label = "CDG: "] 
  "30064771232" -> "55834574880"  [ label = "CDG: "] 
  "30064771232" -> "30064771233"  [ label = "CDG: "] 
  "30064771232" -> "30064771237"  [ label = "CDG: "] 
  "30064771232" -> "30064771236"  [ label = "CDG: "] 
  "30064771232" -> "30064771235"  [ label = "CDG: "] 
  "30064771232" -> "30064771234"  [ label = "CDG: "] 
}
"""
)
