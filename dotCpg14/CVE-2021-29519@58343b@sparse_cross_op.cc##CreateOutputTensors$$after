[33mval[0m [36mres1392[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "CreateOutputTensors" {  
"111669149697" [label = <(METHOD,CreateOutputTensors)<SUB>1</SUB>> ]
"115964116992" [label = <(PARAM,const std::vector&lt;std::unique_ptr&lt;ColumnInterface&lt;InternalType&gt;&gt;&gt;&amp; columns)<SUB>2</SUB>> ]
"115964116993" [label = <(PARAM,int64 batch_size)<SUB>3</SUB>> ]
"115964116994" [label = <(PARAM,OpKernelContext* context)<SUB>3</SUB>> ]
"115964116995" [label = <(PARAM,Tensor** indices_out)<SUB>3</SUB>> ]
"115964116996" [label = <(PARAM,Tensor** values_out)<SUB>4</SUB>> ]
"115964116997" [label = <(PARAM,Tensor** shape_out)<SUB>4</SUB>> ]
"115964116998" [label = <(PARAM,std::vector&lt;int64&gt;* output_start_indices)<SUB>5</SUB>> ]
"25769803777" [label = <(BLOCK,{
  // Calculates dimensions for output tensors...,{
  // Calculates dimensions for output tensors...)<SUB>5</SUB>> ]
"94489280512" [label = <(LOCAL,int64 cross_count_total: int64)<SUB>7</SUB>> ]
"30064771072" [label = <(&lt;operator&gt;.assignment,cross_count_total = 0)<SUB>7</SUB>> ]
"68719476736" [label = <(IDENTIFIER,cross_count_total,cross_count_total = 0)<SUB>7</SUB>> ]
"90194313216" [label = <(LITERAL,0,cross_count_total = 0)<SUB>7</SUB>> ]
"94489280513" [label = <(LOCAL,int64 max_cross_count: int64)<SUB>8</SUB>> ]
"30064771073" [label = <(&lt;operator&gt;.assignment,max_cross_count = 0)<SUB>8</SUB>> ]
"68719476737" [label = <(IDENTIFIER,max_cross_count,max_cross_count = 0)<SUB>8</SUB>> ]
"90194313217" [label = <(LITERAL,0,max_cross_count = 0)<SUB>8</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,FOR,for (int64 b = 0;b &lt; batch_size;b++))<SUB>9</SUB>> ]
"25769803778" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>9</SUB>> ]
"94489280514" [label = <(LOCAL,int64 b: int64)<SUB>9</SUB>> ]
"30064771074" [label = <(&lt;operator&gt;.assignment,b = 0)<SUB>9</SUB>> ]
"68719476738" [label = <(IDENTIFIER,b,b = 0)<SUB>9</SUB>> ]
"90194313218" [label = <(LITERAL,0,b = 0)<SUB>9</SUB>> ]
"30064771075" [label = <(&lt;operator&gt;.lessThan,b &lt; batch_size)<SUB>9</SUB>> ]
"68719476739" [label = <(IDENTIFIER,b,b &lt; batch_size)<SUB>9</SUB>> ]
"68719476740" [label = <(IDENTIFIER,batch_size,b &lt; batch_size)<SUB>9</SUB>> ]
"30064771076" [label = <(&lt;operator&gt;.postIncrement,b++)<SUB>9</SUB>> ]
"68719476741" [label = <(IDENTIFIER,b,b++)<SUB>9</SUB>> ]
"25769803779" [label = <(BLOCK,{
    // For each input, sets starting indices ...,{
    // For each input, sets starting indices ...)<SUB>9</SUB>> ]
"30064771077" [label = <(&lt;operator&gt;.assignment,(*output_start_indices)[b] = cross_count_total)<SUB>11</SUB>> ]
"30064771078" [label = <(&lt;operator&gt;.indirectIndexAccess,(*output_start_indices)[b])<SUB>11</SUB>> ]
"30064771079" [label = <(&lt;operator&gt;.indirection,*output_start_indices)<SUB>11</SUB>> ]
"68719476742" [label = <(IDENTIFIER,output_start_indices,(*output_start_indices)[b] = cross_count_total)<SUB>11</SUB>> ]
"68719476743" [label = <(IDENTIFIER,b,(*output_start_indices)[b] = cross_count_total)<SUB>11</SUB>> ]
"68719476744" [label = <(IDENTIFIER,cross_count_total,(*output_start_indices)[b] = cross_count_total)<SUB>11</SUB>> ]
"94489280515" [label = <(LOCAL,const auto cross_count: auto)<SUB>12</SUB>> ]
"30064771080" [label = <(&lt;operator&gt;.assignment,cross_count = CrossCountByBatchIndex(columns, b))<SUB>12</SUB>> ]
"68719476745" [label = <(IDENTIFIER,cross_count,cross_count = CrossCountByBatchIndex(columns, b))<SUB>12</SUB>> ]
"30064771081" [label = <(CrossCountByBatchIndex,CrossCountByBatchIndex(columns, b))<SUB>12</SUB>> ]
"68719476746" [label = <(IDENTIFIER,columns,CrossCountByBatchIndex(columns, b))<SUB>12</SUB>> ]
"68719476747" [label = <(IDENTIFIER,b,CrossCountByBatchIndex(columns, b))<SUB>12</SUB>> ]
"30064771082" [label = <(&lt;operator&gt;.assignment,max_cross_count = std::max(max_cross_count, cro...)<SUB>13</SUB>> ]
"68719476748" [label = <(IDENTIFIER,max_cross_count,max_cross_count = std::max(max_cross_count, cro...)<SUB>13</SUB>> ]
"30064771083" [label = <(max,std::max(max_cross_count, cross_count))<SUB>13</SUB>> ]
"68719476749" [label = <(IDENTIFIER,max_cross_count,std::max(max_cross_count, cross_count))<SUB>13</SUB>> ]
"68719476750" [label = <(IDENTIFIER,cross_count,std::max(max_cross_count, cross_count))<SUB>13</SUB>> ]
"30064771084" [label = <(&lt;operator&gt;.assignmentPlus,cross_count_total += cross_count)<SUB>14</SUB>> ]
"68719476751" [label = <(IDENTIFIER,cross_count_total,cross_count_total += cross_count)<SUB>14</SUB>> ]
"68719476752" [label = <(IDENTIFIER,cross_count,cross_count_total += cross_count)<SUB>14</SUB>> ]
"30064771085" [label = <(TF_RETURN_IF_ERROR,TF_RETURN_IF_ERROR(context-&gt;allocate_output(
  ...)<SUB>18</SUB>> ]
"30064771086" [label = <(allocate_output,context-&gt;allocate_output(
      0, TensorShape(...)<SUB>18</SUB>> ]
"68719476753" [label = <(IDENTIFIER,context,context-&gt;allocate_output(
      0, TensorShape(...)<SUB>18</SUB>> ]
"90194313219" [label = <(LITERAL,0,context-&gt;allocate_output(
      0, TensorShape(...)<SUB>19</SUB>> ]
"30064771087" [label = <(TensorShape,TensorShape({cross_count_total, 2}))<SUB>19</SUB>> ]
"30064771088" [label = <(&lt;operator&gt;.arrayInitializer,{cross_count_total, 2})<SUB>19</SUB>> ]
"68719476754" [label = <(IDENTIFIER,cross_count_total,{cross_count_total, 2})<SUB>19</SUB>> ]
"90194313220" [label = <(LITERAL,2,{cross_count_total, 2})<SUB>19</SUB>> ]
"68719476755" [label = <(IDENTIFIER,indices_out,context-&gt;allocate_output(
      0, TensorShape(...)<SUB>19</SUB>> ]
"30064771089" [label = <(TF_RETURN_IF_ERROR,TF_RETURN_IF_ERROR(context-&gt;allocate_output(
  ...)<SUB>20</SUB>> ]
"30064771090" [label = <(allocate_output,context-&gt;allocate_output(
      1, TensorShape(...)<SUB>20</SUB>> ]
"68719476756" [label = <(IDENTIFIER,context,context-&gt;allocate_output(
      1, TensorShape(...)<SUB>20</SUB>> ]
"90194313221" [label = <(LITERAL,1,context-&gt;allocate_output(
      1, TensorShape(...)<SUB>21</SUB>> ]
"30064771091" [label = <(TensorShape,TensorShape({cross_count_total}))<SUB>21</SUB>> ]
"30064771092" [label = <(&lt;operator&gt;.arrayInitializer,{cross_count_total})<SUB>21</SUB>> ]
"68719476757" [label = <(IDENTIFIER,cross_count_total,{cross_count_total})<SUB>21</SUB>> ]
"68719476758" [label = <(IDENTIFIER,values_out,context-&gt;allocate_output(
      1, TensorShape(...)<SUB>21</SUB>> ]
"30064771093" [label = <(TF_RETURN_IF_ERROR,TF_RETURN_IF_ERROR(context-&gt;allocate_output(2, ...)<SUB>22</SUB>> ]
"30064771094" [label = <(allocate_output,context-&gt;allocate_output(2, TensorShape({2}), s...)<SUB>22</SUB>> ]
"68719476759" [label = <(IDENTIFIER,context,context-&gt;allocate_output(2, TensorShape({2}), s...)<SUB>22</SUB>> ]
"90194313222" [label = <(LITERAL,2,context-&gt;allocate_output(2, TensorShape({2}), s...)<SUB>22</SUB>> ]
"30064771095" [label = <(TensorShape,TensorShape({2}))<SUB>22</SUB>> ]
"30064771096" [label = <(&lt;operator&gt;.arrayInitializer,{2})<SUB>22</SUB>> ]
"90194313223" [label = <(LITERAL,2,{2})<SUB>22</SUB>> ]
"68719476760" [label = <(IDENTIFIER,shape_out,context-&gt;allocate_output(2, TensorShape({2}), s...)<SUB>22</SUB>> ]
"94489280516" [label = <(LOCAL,auto shape_vec: auto)<SUB>25</SUB>> ]
"30064771097" [label = <(&lt;operator&gt;.assignment,shape_vec = (*shape_out)-&gt;vec&lt;int64&gt;())<SUB>25</SUB>> ]
"68719476761" [label = <(IDENTIFIER,shape_vec,shape_vec = (*shape_out)-&gt;vec&lt;int64&gt;())<SUB>25</SUB>> ]
"30064771098" [label = <(vec&lt;int64&gt;,(*shape_out)-&gt;vec&lt;int64&gt;())<SUB>25</SUB>> ]
"30064771099" [label = <(&lt;operator&gt;.indirection,*shape_out)<SUB>25</SUB>> ]
"68719476762" [label = <(IDENTIFIER,shape_out,(*shape_out)-&gt;vec&lt;int64&gt;())<SUB>25</SUB>> ]
"30064771100" [label = <(&lt;operator&gt;.assignment,shape_vec(0) = batch_size)<SUB>26</SUB>> ]
"30064771101" [label = <(shape_vec,shape_vec(0))<SUB>26</SUB>> ]
"90194313224" [label = <(LITERAL,0,shape_vec(0))<SUB>26</SUB>> ]
"68719476763" [label = <(IDENTIFIER,batch_size,shape_vec(0) = batch_size)<SUB>26</SUB>> ]
"30064771102" [label = <(&lt;operator&gt;.assignment,shape_vec(1) = max_cross_count)<SUB>27</SUB>> ]
"30064771103" [label = <(shape_vec,shape_vec(1))<SUB>27</SUB>> ]
"90194313225" [label = <(LITERAL,1,shape_vec(1))<SUB>27</SUB>> ]
"68719476764" [label = <(IDENTIFIER,max_cross_count,shape_vec(1) = max_cross_count)<SUB>27</SUB>> ]
"146028888064" [label = <(RETURN,return Status::OK();,return Status::OK();)<SUB>29</SUB>> ]
"30064771104" [label = <(OK,Status::OK())<SUB>29</SUB>> ]
"128849018880" [label = <(METHOD_RETURN,Status)<SUB>1</SUB>> ]
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "115964116993"  [ label = "AST: "] 
  "111669149697" -> "115964116994"  [ label = "AST: "] 
  "111669149697" -> "115964116995"  [ label = "AST: "] 
  "111669149697" -> "115964116996"  [ label = "AST: "] 
  "111669149697" -> "115964116997"  [ label = "AST: "] 
  "111669149697" -> "115964116998"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "128849018880"  [ label = "AST: "] 
  "25769803777" -> "94489280512"  [ label = "AST: "] 
  "25769803777" -> "30064771072"  [ label = "AST: "] 
  "25769803777" -> "94489280513"  [ label = "AST: "] 
  "25769803777" -> "30064771073"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "25769803777" -> "30064771085"  [ label = "AST: "] 
  "25769803777" -> "30064771089"  [ label = "AST: "] 
  "25769803777" -> "30064771093"  [ label = "AST: "] 
  "25769803777" -> "94489280516"  [ label = "AST: "] 
  "25769803777" -> "30064771097"  [ label = "AST: "] 
  "25769803777" -> "30064771100"  [ label = "AST: "] 
  "25769803777" -> "30064771102"  [ label = "AST: "] 
  "25769803777" -> "146028888064"  [ label = "AST: "] 
  "30064771072" -> "68719476736"  [ label = "AST: "] 
  "30064771072" -> "90194313216"  [ label = "AST: "] 
  "30064771073" -> "68719476737"  [ label = "AST: "] 
  "30064771073" -> "90194313217"  [ label = "AST: "] 
  "47244640256" -> "25769803778"  [ label = "AST: "] 
  "47244640256" -> "30064771075"  [ label = "AST: "] 
  "47244640256" -> "30064771076"  [ label = "AST: "] 
  "47244640256" -> "25769803779"  [ label = "AST: "] 
  "25769803778" -> "94489280514"  [ label = "AST: "] 
  "25769803778" -> "30064771074"  [ label = "AST: "] 
  "30064771074" -> "68719476738"  [ label = "AST: "] 
  "30064771074" -> "90194313218"  [ label = "AST: "] 
  "30064771075" -> "68719476739"  [ label = "AST: "] 
  "30064771075" -> "68719476740"  [ label = "AST: "] 
  "30064771076" -> "68719476741"  [ label = "AST: "] 
  "25769803779" -> "30064771077"  [ label = "AST: "] 
  "25769803779" -> "94489280515"  [ label = "AST: "] 
  "25769803779" -> "30064771080"  [ label = "AST: "] 
  "25769803779" -> "30064771082"  [ label = "AST: "] 
  "25769803779" -> "30064771084"  [ label = "AST: "] 
  "30064771077" -> "30064771078"  [ label = "AST: "] 
  "30064771077" -> "68719476744"  [ label = "AST: "] 
  "30064771078" -> "30064771079"  [ label = "AST: "] 
  "30064771078" -> "68719476743"  [ label = "AST: "] 
  "30064771079" -> "68719476742"  [ label = "AST: "] 
  "30064771080" -> "68719476745"  [ label = "AST: "] 
  "30064771080" -> "30064771081"  [ label = "AST: "] 
  "30064771081" -> "68719476746"  [ label = "AST: "] 
  "30064771081" -> "68719476747"  [ label = "AST: "] 
  "30064771082" -> "68719476748"  [ label = "AST: "] 
  "30064771082" -> "30064771083"  [ label = "AST: "] 
  "30064771083" -> "68719476749"  [ label = "AST: "] 
  "30064771083" -> "68719476750"  [ label = "AST: "] 
  "30064771084" -> "68719476751"  [ label = "AST: "] 
  "30064771084" -> "68719476752"  [ label = "AST: "] 
  "30064771085" -> "30064771086"  [ label = "AST: "] 
  "30064771086" -> "68719476753"  [ label = "AST: "] 
  "30064771086" -> "90194313219"  [ label = "AST: "] 
  "30064771086" -> "30064771087"  [ label = "AST: "] 
  "30064771086" -> "68719476755"  [ label = "AST: "] 
  "30064771087" -> "30064771088"  [ label = "AST: "] 
  "30064771088" -> "68719476754"  [ label = "AST: "] 
  "30064771088" -> "90194313220"  [ label = "AST: "] 
  "30064771089" -> "30064771090"  [ label = "AST: "] 
  "30064771090" -> "68719476756"  [ label = "AST: "] 
  "30064771090" -> "90194313221"  [ label = "AST: "] 
  "30064771090" -> "30064771091"  [ label = "AST: "] 
  "30064771090" -> "68719476758"  [ label = "AST: "] 
  "30064771091" -> "30064771092"  [ label = "AST: "] 
  "30064771092" -> "68719476757"  [ label = "AST: "] 
  "30064771093" -> "30064771094"  [ label = "AST: "] 
  "30064771094" -> "68719476759"  [ label = "AST: "] 
  "30064771094" -> "90194313222"  [ label = "AST: "] 
  "30064771094" -> "30064771095"  [ label = "AST: "] 
  "30064771094" -> "68719476760"  [ label = "AST: "] 
  "30064771095" -> "30064771096"  [ label = "AST: "] 
  "30064771096" -> "90194313223"  [ label = "AST: "] 
  "30064771097" -> "68719476761"  [ label = "AST: "] 
  "30064771097" -> "30064771098"  [ label = "AST: "] 
  "30064771098" -> "30064771099"  [ label = "AST: "] 
  "30064771099" -> "68719476762"  [ label = "AST: "] 
  "30064771100" -> "30064771101"  [ label = "AST: "] 
  "30064771100" -> "68719476763"  [ label = "AST: "] 
  "30064771101" -> "90194313224"  [ label = "AST: "] 
  "30064771102" -> "30064771103"  [ label = "AST: "] 
  "30064771102" -> "68719476764"  [ label = "AST: "] 
  "30064771103" -> "90194313225"  [ label = "AST: "] 
  "146028888064" -> "30064771104"  [ label = "AST: "] 
  "30064771072" -> "30064771073"  [ label = "CFG: "] 
  "30064771073" -> "30064771074"  [ label = "CFG: "] 
  "30064771085" -> "30064771092"  [ label = "CFG: "] 
  "30064771089" -> "30064771096"  [ label = "CFG: "] 
  "30064771093" -> "30064771099"  [ label = "CFG: "] 
  "30064771097" -> "30064771101"  [ label = "CFG: "] 
  "30064771100" -> "30064771103"  [ label = "CFG: "] 
  "30064771102" -> "30064771104"  [ label = "CFG: "] 
  "146028888064" -> "128849018880"  [ label = "CFG: "] 
  "30064771075" -> "30064771079"  [ label = "CFG: "] 
  "30064771075" -> "30064771088"  [ label = "CFG: "] 
  "30064771076" -> "30064771075"  [ label = "CFG: "] 
  "30064771086" -> "30064771085"  [ label = "CFG: "] 
  "30064771090" -> "30064771089"  [ label = "CFG: "] 
  "30064771094" -> "30064771093"  [ label = "CFG: "] 
  "30064771098" -> "30064771097"  [ label = "CFG: "] 
  "30064771101" -> "30064771100"  [ label = "CFG: "] 
  "30064771103" -> "30064771102"  [ label = "CFG: "] 
  "30064771104" -> "146028888064"  [ label = "CFG: "] 
  "30064771074" -> "30064771075"  [ label = "CFG: "] 
  "30064771077" -> "30064771081"  [ label = "CFG: "] 
  "30064771080" -> "30064771083"  [ label = "CFG: "] 
  "30064771082" -> "30064771084"  [ label = "CFG: "] 
  "30064771084" -> "30064771076"  [ label = "CFG: "] 
  "30064771087" -> "30064771086"  [ label = "CFG: "] 
  "30064771091" -> "30064771090"  [ label = "CFG: "] 
  "30064771095" -> "30064771094"  [ label = "CFG: "] 
  "30064771099" -> "30064771098"  [ label = "CFG: "] 
  "30064771078" -> "30064771077"  [ label = "CFG: "] 
  "30064771081" -> "30064771080"  [ label = "CFG: "] 
  "30064771083" -> "30064771082"  [ label = "CFG: "] 
  "30064771088" -> "30064771087"  [ label = "CFG: "] 
  "30064771092" -> "30064771091"  [ label = "CFG: "] 
  "30064771096" -> "30064771095"  [ label = "CFG: "] 
  "30064771079" -> "30064771078"  [ label = "CFG: "] 
  "111669149697" -> "30064771072"  [ label = "CFG: "] 
  "146028888064" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "115964116992" -> "128849018880"  [ label = "DDG: columns"] 
  "115964116998" -> "128849018880"  [ label = "DDG: output_start_indices"] 
  "30064771072" -> "128849018880"  [ label = "DDG: cross_count_total = 0"] 
  "30064771073" -> "128849018880"  [ label = "DDG: max_cross_count = 0"] 
  "30064771074" -> "128849018880"  [ label = "DDG: b = 0"] 
  "30064771075" -> "128849018880"  [ label = "DDG: b"] 
  "30064771075" -> "128849018880"  [ label = "DDG: b &lt; batch_size"] 
  "30064771087" -> "128849018880"  [ label = "DDG: {cross_count_total, 2}"] 
  "30064771086" -> "128849018880"  [ label = "DDG: TensorShape({cross_count_total, 2})"] 
  "30064771086" -> "128849018880"  [ label = "DDG: indices_out"] 
  "30064771085" -> "128849018880"  [ label = "DDG: context-&gt;allocate_output(
      0, TensorShape({cross_count_total, 2}), indices_out)"] 
  "30064771085" -> "128849018880"  [ label = "DDG: TF_RETURN_IF_ERROR(context-&gt;allocate_output(
      0, TensorShape({cross_count_total, 2}), indices_out))"] 
  "30064771092" -> "128849018880"  [ label = "DDG: cross_count_total"] 
  "30064771091" -> "128849018880"  [ label = "DDG: {cross_count_total}"] 
  "30064771090" -> "128849018880"  [ label = "DDG: TensorShape({cross_count_total})"] 
  "30064771090" -> "128849018880"  [ label = "DDG: values_out"] 
  "30064771089" -> "128849018880"  [ label = "DDG: context-&gt;allocate_output(
      1, TensorShape({cross_count_total}), values_out)"] 
  "30064771089" -> "128849018880"  [ label = "DDG: TF_RETURN_IF_ERROR(context-&gt;allocate_output(
      1, TensorShape({cross_count_total}), values_out))"] 
  "30064771094" -> "128849018880"  [ label = "DDG: context"] 
  "30064771095" -> "128849018880"  [ label = "DDG: {2}"] 
  "30064771094" -> "128849018880"  [ label = "DDG: TensorShape({2})"] 
  "30064771094" -> "128849018880"  [ label = "DDG: shape_out"] 
  "30064771093" -> "128849018880"  [ label = "DDG: context-&gt;allocate_output(2, TensorShape({2}), shape_out)"] 
  "30064771093" -> "128849018880"  [ label = "DDG: TF_RETURN_IF_ERROR(context-&gt;allocate_output(2, TensorShape({2}), shape_out))"] 
  "30064771097" -> "128849018880"  [ label = "DDG: shape_vec"] 
  "30064771098" -> "128849018880"  [ label = "DDG: *shape_out"] 
  "30064771097" -> "128849018880"  [ label = "DDG: (*shape_out)-&gt;vec&lt;int64&gt;()"] 
  "30064771097" -> "128849018880"  [ label = "DDG: shape_vec = (*shape_out)-&gt;vec&lt;int64&gt;()"] 
  "30064771100" -> "128849018880"  [ label = "DDG: shape_vec(0)"] 
  "30064771100" -> "128849018880"  [ label = "DDG: batch_size"] 
  "30064771100" -> "128849018880"  [ label = "DDG: shape_vec(0) = batch_size"] 
  "30064771102" -> "128849018880"  [ label = "DDG: shape_vec(1)"] 
  "30064771102" -> "128849018880"  [ label = "DDG: max_cross_count"] 
  "30064771102" -> "128849018880"  [ label = "DDG: shape_vec(1) = max_cross_count"] 
  "30064771104" -> "128849018880"  [ label = "DDG: Status::OK()"] 
  "30064771077" -> "128849018880"  [ label = "DDG: (*output_start_indices)[b]"] 
  "30064771077" -> "128849018880"  [ label = "DDG: (*output_start_indices)[b] = cross_count_total"] 
  "30064771081" -> "128849018880"  [ label = "DDG: columns"] 
  "30064771080" -> "128849018880"  [ label = "DDG: CrossCountByBatchIndex(columns, b)"] 
  "30064771080" -> "128849018880"  [ label = "DDG: cross_count = CrossCountByBatchIndex(columns, b)"] 
  "30064771082" -> "128849018880"  [ label = "DDG: std::max(max_cross_count, cross_count)"] 
  "30064771082" -> "128849018880"  [ label = "DDG: max_cross_count = std::max(max_cross_count, cross_count)"] 
  "30064771084" -> "128849018880"  [ label = "DDG: cross_count"] 
  "30064771084" -> "128849018880"  [ label = "DDG: cross_count_total += cross_count"] 
  "30064771076" -> "128849018880"  [ label = "DDG: b++"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "111669149697" -> "115964116993"  [ label = "DDG: "] 
  "111669149697" -> "115964116994"  [ label = "DDG: "] 
  "111669149697" -> "115964116995"  [ label = "DDG: "] 
  "111669149697" -> "115964116996"  [ label = "DDG: "] 
  "111669149697" -> "115964116997"  [ label = "DDG: "] 
  "111669149697" -> "115964116998"  [ label = "DDG: "] 
  "111669149697" -> "30064771072"  [ label = "DDG: "] 
  "111669149697" -> "30064771073"  [ label = "DDG: "] 
  "30064771098" -> "30064771097"  [ label = "DDG: *shape_out"] 
  "30064771075" -> "30064771100"  [ label = "DDG: batch_size"] 
  "111669149697" -> "30064771100"  [ label = "DDG: "] 
  "30064771073" -> "30064771102"  [ label = "DDG: max_cross_count"] 
  "30064771082" -> "30064771102"  [ label = "DDG: max_cross_count"] 
  "111669149697" -> "30064771102"  [ label = "DDG: "] 
  "30064771104" -> "146028888064"  [ label = "DDG: Status::OK()"] 
  "30064771086" -> "30064771085"  [ label = "DDG: context"] 
  "30064771086" -> "30064771085"  [ label = "DDG: 0"] 
  "30064771086" -> "30064771085"  [ label = "DDG: TensorShape({cross_count_total, 2})"] 
  "30064771086" -> "30064771085"  [ label = "DDG: indices_out"] 
  "30064771090" -> "30064771089"  [ label = "DDG: context"] 
  "30064771090" -> "30064771089"  [ label = "DDG: 1"] 
  "30064771090" -> "30064771089"  [ label = "DDG: TensorShape({cross_count_total})"] 
  "30064771090" -> "30064771089"  [ label = "DDG: values_out"] 
  "30064771094" -> "30064771093"  [ label = "DDG: context"] 
  "30064771094" -> "30064771093"  [ label = "DDG: 2"] 
  "30064771094" -> "30064771093"  [ label = "DDG: TensorShape({2})"] 
  "30064771094" -> "30064771093"  [ label = "DDG: shape_out"] 
  "111669149697" -> "30064771104"  [ label = "DDG: "] 
  "111669149697" -> "30064771074"  [ label = "DDG: "] 
  "30064771074" -> "30064771075"  [ label = "DDG: b"] 
  "30064771076" -> "30064771075"  [ label = "DDG: b"] 
  "111669149697" -> "30064771075"  [ label = "DDG: "] 
  "115964116993" -> "30064771075"  [ label = "DDG: batch_size"] 
  "30064771081" -> "30064771076"  [ label = "DDG: b"] 
  "111669149697" -> "30064771076"  [ label = "DDG: "] 
  "30064771072" -> "30064771077"  [ label = "DDG: cross_count_total"] 
  "30064771084" -> "30064771077"  [ label = "DDG: cross_count_total"] 
  "111669149697" -> "30064771077"  [ label = "DDG: "] 
  "30064771081" -> "30064771080"  [ label = "DDG: columns"] 
  "30064771081" -> "30064771080"  [ label = "DDG: b"] 
  "30064771083" -> "30064771082"  [ label = "DDG: max_cross_count"] 
  "30064771083" -> "30064771082"  [ label = "DDG: cross_count"] 
  "30064771083" -> "30064771084"  [ label = "DDG: cross_count"] 
  "111669149697" -> "30064771084"  [ label = "DDG: "] 
  "115964116994" -> "30064771086"  [ label = "DDG: context"] 
  "111669149697" -> "30064771086"  [ label = "DDG: "] 
  "30064771087" -> "30064771086"  [ label = "DDG: {cross_count_total, 2}"] 
  "115964116995" -> "30064771086"  [ label = "DDG: indices_out"] 
  "30064771086" -> "30064771090"  [ label = "DDG: context"] 
  "111669149697" -> "30064771090"  [ label = "DDG: "] 
  "30064771091" -> "30064771090"  [ label = "DDG: {cross_count_total}"] 
  "115964116996" -> "30064771090"  [ label = "DDG: values_out"] 
  "30064771090" -> "30064771094"  [ label = "DDG: context"] 
  "111669149697" -> "30064771094"  [ label = "DDG: "] 
  "30064771095" -> "30064771094"  [ label = "DDG: {2}"] 
  "115964116997" -> "30064771094"  [ label = "DDG: shape_out"] 
  "111669149697" -> "30064771101"  [ label = "DDG: "] 
  "111669149697" -> "30064771103"  [ label = "DDG: "] 
  "30064771072" -> "30064771084"  [ label = "DDG: cross_count_total"] 
  "30064771088" -> "30064771087"  [ label = "DDG: cross_count_total"] 
  "30064771088" -> "30064771087"  [ label = "DDG: 2"] 
  "30064771092" -> "30064771091"  [ label = "DDG: cross_count_total"] 
  "30064771096" -> "30064771095"  [ label = "DDG: 2"] 
  "115964116992" -> "30064771081"  [ label = "DDG: columns"] 
  "111669149697" -> "30064771081"  [ label = "DDG: "] 
  "30064771075" -> "30064771081"  [ label = "DDG: b"] 
  "30064771073" -> "30064771083"  [ label = "DDG: max_cross_count"] 
  "30064771082" -> "30064771083"  [ label = "DDG: max_cross_count"] 
  "111669149697" -> "30064771083"  [ label = "DDG: "] 
  "30064771080" -> "30064771083"  [ label = "DDG: cross_count"] 
  "30064771072" -> "30064771088"  [ label = "DDG: cross_count_total"] 
  "30064771084" -> "30064771088"  [ label = "DDG: cross_count_total"] 
  "111669149697" -> "30064771088"  [ label = "DDG: "] 
  "30064771088" -> "30064771092"  [ label = "DDG: cross_count_total"] 
  "111669149697" -> "30064771092"  [ label = "DDG: "] 
  "111669149697" -> "30064771096"  [ label = "DDG: "] 
  "30064771075" -> "30064771083"  [ label = "CDG: "] 
  "30064771075" -> "30064771084"  [ label = "CDG: "] 
  "30064771075" -> "30064771077"  [ label = "CDG: "] 
  "30064771075" -> "30064771078"  [ label = "CDG: "] 
  "30064771075" -> "30064771075"  [ label = "CDG: "] 
  "30064771075" -> "30064771076"  [ label = "CDG: "] 
  "30064771075" -> "30064771081"  [ label = "CDG: "] 
  "30064771075" -> "30064771082"  [ label = "CDG: "] 
  "30064771075" -> "30064771079"  [ label = "CDG: "] 
  "30064771075" -> "30064771080"  [ label = "CDG: "] 
}
"""
)
