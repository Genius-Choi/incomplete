[33mval[0m [36mres2368[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "launch" {  
"111669149697" [label = <(METHOD,launch)<SUB>1</SUB>> ]
"115964116992" [label = <(PARAM,OpKernelContext* context)<SUB>1</SUB>> ]
"115964116993" [label = <(PARAM,bool cudnn_use_autotune)<SUB>1</SUB>> ]
"115964116994" [label = <(PARAM,const Tensor&amp; input)<SUB>2</SUB>> ]
"115964116995" [label = <(PARAM,const Tensor&amp; filter)<SUB>2</SUB>> ]
"115964116996" [label = <(PARAM,const std::array&lt;int64, 3&gt;&amp; dilations)<SUB>3</SUB>> ]
"115964116997" [label = <(PARAM,const std::array&lt;int64, 3&gt;&amp; strides)<SUB>4</SUB>> ]
"115964116998" [label = <(PARAM,const Padding padding)<SUB>4</SUB>> ]
"115964116999" [label = <(PARAM,TensorFormat data_format)<SUB>5</SUB>> ]
"115964117000" [label = <(PARAM,Tensor* output)<SUB>5</SUB>> ]
"25769803777" [label = <(BLOCK,{
    OP_REQUIRES(context, data_format == FORMA...,{
    OP_REQUIRES(context, data_format == FORMA...)<SUB>5</SUB>> ]
"30064771072" [label = <(OP_REQUIRES,OP_REQUIRES(context, data_format == FORMAT_NHWC...)<SUB>6</SUB>> ]
"68719476736" [label = <(IDENTIFIER,context,OP_REQUIRES(context, data_format == FORMAT_NHWC...)<SUB>6</SUB>> ]
"30064771073" [label = <(&lt;operator&gt;.equals,data_format == FORMAT_NHWC)<SUB>6</SUB>> ]
"68719476737" [label = <(IDENTIFIER,data_format,data_format == FORMAT_NHWC)<SUB>6</SUB>> ]
"68719476738" [label = <(IDENTIFIER,FORMAT_NHWC,data_format == FORMAT_NHWC)<SUB>6</SUB>> ]
"30064771074" [label = <(InvalidArgument,errors::InvalidArgument(&quot;CPU implementation of ...)<SUB>7</SUB>> ]
"90194313216" [label = <(LITERAL,&quot;CPU implementation of Conv3D &quot;
               ...,errors::InvalidArgument(&quot;CPU implementation of ...)<SUB>7</SUB>> ]
"30064771075" [label = <(OP_REQUIRES,OP_REQUIRES(context,
                dilations[...)<SUB>10</SUB>> ]
"68719476739" [label = <(IDENTIFIER,context,OP_REQUIRES(context,
                dilations[...)<SUB>10</SUB>> ]
"30064771076" [label = <(&lt;operator&gt;.logicalAnd,dilations[0] == 1 &amp;&amp; dilations[1] == 1 &amp;&amp; dilat...)<SUB>11</SUB>> ]
"30064771077" [label = <(&lt;operator&gt;.logicalAnd,dilations[0] == 1 &amp;&amp; dilations[1] == 1)<SUB>11</SUB>> ]
"30064771078" [label = <(&lt;operator&gt;.equals,dilations[0] == 1)<SUB>11</SUB>> ]
"30064771079" [label = <(&lt;operator&gt;.indirectIndexAccess,dilations[0])<SUB>11</SUB>> ]
"68719476740" [label = <(IDENTIFIER,dilations,dilations[0] == 1)<SUB>11</SUB>> ]
"90194313217" [label = <(LITERAL,0,dilations[0] == 1)<SUB>11</SUB>> ]
"90194313218" [label = <(LITERAL,1,dilations[0] == 1)<SUB>11</SUB>> ]
"30064771080" [label = <(&lt;operator&gt;.equals,dilations[1] == 1)<SUB>11</SUB>> ]
"30064771081" [label = <(&lt;operator&gt;.indirectIndexAccess,dilations[1])<SUB>11</SUB>> ]
"68719476741" [label = <(IDENTIFIER,dilations,dilations[1] == 1)<SUB>11</SUB>> ]
"90194313219" [label = <(LITERAL,1,dilations[1] == 1)<SUB>11</SUB>> ]
"90194313220" [label = <(LITERAL,1,dilations[1] == 1)<SUB>11</SUB>> ]
"30064771082" [label = <(&lt;operator&gt;.equals,dilations[2] == 1)<SUB>11</SUB>> ]
"30064771083" [label = <(&lt;operator&gt;.indirectIndexAccess,dilations[2])<SUB>11</SUB>> ]
"68719476742" [label = <(IDENTIFIER,dilations,dilations[2] == 1)<SUB>11</SUB>> ]
"90194313221" [label = <(LITERAL,2,dilations[2] == 1)<SUB>11</SUB>> ]
"90194313222" [label = <(LITERAL,1,dilations[2] == 1)<SUB>11</SUB>> ]
"30064771084" [label = <(InvalidArgument,errors::InvalidArgument(&quot;CPU implementation of ...)<SUB>12</SUB>> ]
"90194313223" [label = <(LITERAL,&quot;CPU implementation of Conv3D &quot;
               ...,errors::InvalidArgument(&quot;CPU implementation of ...)<SUB>12</SUB>> ]
"30064771085" [label = <(OP_REQUIRES,OP_REQUIRES(context, filter.dim_size(3) == inpu...)<SUB>15</SUB>> ]
"68719476743" [label = <(IDENTIFIER,context,OP_REQUIRES(context, filter.dim_size(3) == inpu...)<SUB>15</SUB>> ]
"30064771086" [label = <(&lt;operator&gt;.equals,filter.dim_size(3) == input.dim_size(input.dims...)<SUB>15</SUB>> ]
"30064771087" [label = <(dim_size,filter.dim_size(3))<SUB>15</SUB>> ]
"68719476744" [label = <(IDENTIFIER,filter,filter.dim_size(3))<SUB>15</SUB>> ]
"90194313224" [label = <(LITERAL,3,filter.dim_size(3))<SUB>15</SUB>> ]
"30064771088" [label = <(dim_size,input.dim_size(input.dims() - 1))<SUB>15</SUB>> ]
"68719476745" [label = <(IDENTIFIER,input,input.dim_size(input.dims() - 1))<SUB>15</SUB>> ]
"30064771089" [label = <(&lt;operator&gt;.subtraction,input.dims() - 1)<SUB>15</SUB>> ]
"30064771090" [label = <(dims,input.dims())<SUB>15</SUB>> ]
"68719476746" [label = <(IDENTIFIER,input,input.dims())<SUB>15</SUB>> ]
"90194313225" [label = <(LITERAL,1,input.dims() - 1)<SUB>15</SUB>> ]
"30064771091" [label = <(InvalidArgument,errors::InvalidArgument(
                    &quot;N...)<SUB>16</SUB>> ]
"90194313226" [label = <(LITERAL,&quot;Number of channels in filter (&quot;,errors::InvalidArgument(
                    &quot;N...)<SUB>17</SUB>> ]
"30064771092" [label = <(dim_size,filter.dim_size(3))<SUB>17</SUB>> ]
"68719476747" [label = <(IDENTIFIER,filter,filter.dim_size(3))<SUB>17</SUB>> ]
"90194313227" [label = <(LITERAL,3,filter.dim_size(3))<SUB>17</SUB>> ]
"90194313228" [label = <(LITERAL,&quot;) must match last dimension of input (&quot;,errors::InvalidArgument(
                    &quot;N...)<SUB>18</SUB>> ]
"30064771093" [label = <(dim_size,input.dim_size(input.dims() - 1))<SUB>19</SUB>> ]
"68719476748" [label = <(IDENTIFIER,input,input.dim_size(input.dims() - 1))<SUB>19</SUB>> ]
"30064771094" [label = <(&lt;operator&gt;.subtraction,input.dims() - 1)<SUB>19</SUB>> ]
"30064771095" [label = <(dims,input.dims())<SUB>19</SUB>> ]
"68719476749" [label = <(IDENTIFIER,input,input.dims())<SUB>19</SUB>> ]
"90194313229" [label = <(LITERAL,1,input.dims() - 1)<SUB>19</SUB>> ]
"90194313230" [label = <(LITERAL,&quot;)&quot;,errors::InvalidArgument(
                    &quot;N...)<SUB>19</SUB>> ]
"30064771096" [label = <(&lt;operator&gt;(),functor::CuboidConvolution&lt;CPUDevice, T&gt;()(
   ...)<SUB>20</SUB>> ]
"30064771097" [label = <(CuboidConvolution&lt;CPUDevice, T&gt;,functor::CuboidConvolution&lt;CPUDevice, T&gt;())<SUB>20</SUB>> ]
"30064771098" [label = <(eigen_device&lt;CPUDevice&gt;,context-&gt;eigen_device&lt;CPUDevice&gt;())<SUB>21</SUB>> ]
"68719476750" [label = <(IDENTIFIER,context,context-&gt;eigen_device&lt;CPUDevice&gt;())<SUB>21</SUB>> ]
"30064771099" [label = <(tensor&lt;T, 5&gt;,output-&gt;tensor&lt;T, 5&gt;())<SUB>21</SUB>> ]
"68719476751" [label = <(IDENTIFIER,output,output-&gt;tensor&lt;T, 5&gt;())<SUB>21</SUB>> ]
"30064771100" [label = <(tensor&lt;T, 5&gt;,input.tensor&lt;T, 5&gt;())<SUB>22</SUB>> ]
"68719476752" [label = <(IDENTIFIER,input,input.tensor&lt;T, 5&gt;())<SUB>22</SUB>> ]
"30064771101" [label = <(tensor&lt;T, 5&gt;,filter.tensor&lt;T, 5&gt;())<SUB>22</SUB>> ]
"68719476753" [label = <(IDENTIFIER,filter,filter.tensor&lt;T, 5&gt;())<SUB>22</SUB>> ]
"30064771102" [label = <(&lt;operator&gt;.indirectIndexAccess,strides[2])<SUB>22</SUB>> ]
"68719476754" [label = <(IDENTIFIER,strides,functor::CuboidConvolution&lt;CPUDevice, T&gt;()(
   ...)<SUB>22</SUB>> ]
"90194313231" [label = <(LITERAL,2,functor::CuboidConvolution&lt;CPUDevice, T&gt;()(
   ...)<SUB>22</SUB>> ]
"30064771103" [label = <(&lt;operator&gt;.indirectIndexAccess,strides[1])<SUB>22</SUB>> ]
"68719476755" [label = <(IDENTIFIER,strides,functor::CuboidConvolution&lt;CPUDevice, T&gt;()(
   ...)<SUB>22</SUB>> ]
"90194313232" [label = <(LITERAL,1,functor::CuboidConvolution&lt;CPUDevice, T&gt;()(
   ...)<SUB>22</SUB>> ]
"30064771104" [label = <(&lt;operator&gt;.indirectIndexAccess,strides[0])<SUB>23</SUB>> ]
"68719476756" [label = <(IDENTIFIER,strides,functor::CuboidConvolution&lt;CPUDevice, T&gt;()(
   ...)<SUB>23</SUB>> ]
"90194313233" [label = <(LITERAL,0,functor::CuboidConvolution&lt;CPUDevice, T&gt;()(
   ...)<SUB>23</SUB>> ]
"30064771105" [label = <(BrainPadding2EigenPadding,BrainPadding2EigenPadding(padding))<SUB>23</SUB>> ]
"68719476757" [label = <(IDENTIFIER,padding,BrainPadding2EigenPadding(padding))<SUB>23</SUB>> ]
"133143986176" [label = <(MODIFIER,STATIC)> ]
"128849018880" [label = <(METHOD_RETURN,void)<SUB>1</SUB>> ]
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "115964116993"  [ label = "AST: "] 
  "111669149697" -> "115964116994"  [ label = "AST: "] 
  "111669149697" -> "115964116995"  [ label = "AST: "] 
  "111669149697" -> "115964116996"  [ label = "AST: "] 
  "111669149697" -> "115964116997"  [ label = "AST: "] 
  "111669149697" -> "115964116998"  [ label = "AST: "] 
  "111669149697" -> "115964116999"  [ label = "AST: "] 
  "111669149697" -> "115964117000"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "133143986176"  [ label = "AST: "] 
  "111669149697" -> "128849018880"  [ label = "AST: "] 
  "25769803777" -> "30064771072"  [ label = "AST: "] 
  "25769803777" -> "30064771075"  [ label = "AST: "] 
  "25769803777" -> "30064771085"  [ label = "AST: "] 
  "25769803777" -> "30064771096"  [ label = "AST: "] 
  "30064771072" -> "68719476736"  [ label = "AST: "] 
  "30064771072" -> "30064771073"  [ label = "AST: "] 
  "30064771072" -> "30064771074"  [ label = "AST: "] 
  "30064771073" -> "68719476737"  [ label = "AST: "] 
  "30064771073" -> "68719476738"  [ label = "AST: "] 
  "30064771074" -> "90194313216"  [ label = "AST: "] 
  "30064771075" -> "68719476739"  [ label = "AST: "] 
  "30064771075" -> "30064771076"  [ label = "AST: "] 
  "30064771075" -> "30064771084"  [ label = "AST: "] 
  "30064771076" -> "30064771077"  [ label = "AST: "] 
  "30064771076" -> "30064771082"  [ label = "AST: "] 
  "30064771077" -> "30064771078"  [ label = "AST: "] 
  "30064771077" -> "30064771080"  [ label = "AST: "] 
  "30064771078" -> "30064771079"  [ label = "AST: "] 
  "30064771078" -> "90194313218"  [ label = "AST: "] 
  "30064771079" -> "68719476740"  [ label = "AST: "] 
  "30064771079" -> "90194313217"  [ label = "AST: "] 
  "30064771080" -> "30064771081"  [ label = "AST: "] 
  "30064771080" -> "90194313220"  [ label = "AST: "] 
  "30064771081" -> "68719476741"  [ label = "AST: "] 
  "30064771081" -> "90194313219"  [ label = "AST: "] 
  "30064771082" -> "30064771083"  [ label = "AST: "] 
  "30064771082" -> "90194313222"  [ label = "AST: "] 
  "30064771083" -> "68719476742"  [ label = "AST: "] 
  "30064771083" -> "90194313221"  [ label = "AST: "] 
  "30064771084" -> "90194313223"  [ label = "AST: "] 
  "30064771085" -> "68719476743"  [ label = "AST: "] 
  "30064771085" -> "30064771086"  [ label = "AST: "] 
  "30064771085" -> "30064771091"  [ label = "AST: "] 
  "30064771086" -> "30064771087"  [ label = "AST: "] 
  "30064771086" -> "30064771088"  [ label = "AST: "] 
  "30064771087" -> "68719476744"  [ label = "AST: "] 
  "30064771087" -> "90194313224"  [ label = "AST: "] 
  "30064771088" -> "68719476745"  [ label = "AST: "] 
  "30064771088" -> "30064771089"  [ label = "AST: "] 
  "30064771089" -> "30064771090"  [ label = "AST: "] 
  "30064771089" -> "90194313225"  [ label = "AST: "] 
  "30064771090" -> "68719476746"  [ label = "AST: "] 
  "30064771091" -> "90194313226"  [ label = "AST: "] 
  "30064771091" -> "30064771092"  [ label = "AST: "] 
  "30064771091" -> "90194313228"  [ label = "AST: "] 
  "30064771091" -> "30064771093"  [ label = "AST: "] 
  "30064771091" -> "90194313230"  [ label = "AST: "] 
  "30064771092" -> "68719476747"  [ label = "AST: "] 
  "30064771092" -> "90194313227"  [ label = "AST: "] 
  "30064771093" -> "68719476748"  [ label = "AST: "] 
  "30064771093" -> "30064771094"  [ label = "AST: "] 
  "30064771094" -> "30064771095"  [ label = "AST: "] 
  "30064771094" -> "90194313229"  [ label = "AST: "] 
  "30064771095" -> "68719476749"  [ label = "AST: "] 
  "30064771096" -> "30064771097"  [ label = "AST: "] 
  "30064771096" -> "30064771098"  [ label = "AST: "] 
  "30064771096" -> "30064771099"  [ label = "AST: "] 
  "30064771096" -> "30064771100"  [ label = "AST: "] 
  "30064771096" -> "30064771101"  [ label = "AST: "] 
  "30064771096" -> "30064771102"  [ label = "AST: "] 
  "30064771096" -> "30064771103"  [ label = "AST: "] 
  "30064771096" -> "30064771104"  [ label = "AST: "] 
  "30064771096" -> "30064771105"  [ label = "AST: "] 
  "30064771098" -> "68719476750"  [ label = "AST: "] 
  "30064771099" -> "68719476751"  [ label = "AST: "] 
  "30064771100" -> "68719476752"  [ label = "AST: "] 
  "30064771101" -> "68719476753"  [ label = "AST: "] 
  "30064771102" -> "68719476754"  [ label = "AST: "] 
  "30064771102" -> "90194313231"  [ label = "AST: "] 
  "30064771103" -> "68719476755"  [ label = "AST: "] 
  "30064771103" -> "90194313232"  [ label = "AST: "] 
  "30064771104" -> "68719476756"  [ label = "AST: "] 
  "30064771104" -> "90194313233"  [ label = "AST: "] 
  "30064771105" -> "68719476757"  [ label = "AST: "] 
  "30064771072" -> "30064771079"  [ label = "CFG: "] 
  "30064771075" -> "30064771087"  [ label = "CFG: "] 
  "30064771085" -> "30064771097"  [ label = "CFG: "] 
  "30064771096" -> "128849018880"  [ label = "CFG: "] 
  "30064771073" -> "30064771074"  [ label = "CFG: "] 
  "30064771074" -> "30064771072"  [ label = "CFG: "] 
  "30064771076" -> "30064771084"  [ label = "CFG: "] 
  "30064771084" -> "30064771075"  [ label = "CFG: "] 
  "30064771086" -> "30064771092"  [ label = "CFG: "] 
  "30064771091" -> "30064771085"  [ label = "CFG: "] 
  "30064771097" -> "30064771098"  [ label = "CFG: "] 
  "30064771098" -> "30064771099"  [ label = "CFG: "] 
  "30064771099" -> "30064771100"  [ label = "CFG: "] 
  "30064771100" -> "30064771101"  [ label = "CFG: "] 
  "30064771101" -> "30064771102"  [ label = "CFG: "] 
  "30064771102" -> "30064771103"  [ label = "CFG: "] 
  "30064771103" -> "30064771104"  [ label = "CFG: "] 
  "30064771104" -> "30064771105"  [ label = "CFG: "] 
  "30064771105" -> "30064771096"  [ label = "CFG: "] 
  "30064771077" -> "30064771076"  [ label = "CFG: "] 
  "30064771077" -> "30064771083"  [ label = "CFG: "] 
  "30064771082" -> "30064771076"  [ label = "CFG: "] 
  "30064771087" -> "30064771090"  [ label = "CFG: "] 
  "30064771088" -> "30064771086"  [ label = "CFG: "] 
  "30064771092" -> "30064771095"  [ label = "CFG: "] 
  "30064771093" -> "30064771091"  [ label = "CFG: "] 
  "30064771078" -> "30064771077"  [ label = "CFG: "] 
  "30064771078" -> "30064771081"  [ label = "CFG: "] 
  "30064771080" -> "30064771077"  [ label = "CFG: "] 
  "30064771083" -> "30064771082"  [ label = "CFG: "] 
  "30064771089" -> "30064771088"  [ label = "CFG: "] 
  "30064771094" -> "30064771093"  [ label = "CFG: "] 
  "30064771079" -> "30064771078"  [ label = "CFG: "] 
  "30064771081" -> "30064771080"  [ label = "CFG: "] 
  "30064771090" -> "30064771089"  [ label = "CFG: "] 
  "30064771095" -> "30064771094"  [ label = "CFG: "] 
  "111669149697" -> "30064771073"  [ label = "CFG: "] 
  "115964116993" -> "128849018880"  [ label = "DDG: cudnn_use_autotune"] 
  "115964116996" -> "128849018880"  [ label = "DDG: dilations"] 
  "115964116997" -> "128849018880"  [ label = "DDG: strides"] 
  "30064771073" -> "128849018880"  [ label = "DDG: data_format"] 
  "30064771072" -> "128849018880"  [ label = "DDG: data_format == FORMAT_NHWC"] 
  "30064771072" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(&quot;CPU implementation of Conv3D &quot;
                                        &quot;currently only supports the NHWC &quot;
                                        &quot;tensor format.&quot;)"] 
  "30064771072" -> "128849018880"  [ label = "DDG: OP_REQUIRES(context, data_format == FORMAT_NHWC,
                errors::InvalidArgument(&quot;CPU implementation of Conv3D &quot;
                                        &quot;currently only supports the NHWC &quot;
                                        &quot;tensor format.&quot;))"] 
  "30064771078" -> "128849018880"  [ label = "DDG: dilations[0]"] 
  "30064771077" -> "128849018880"  [ label = "DDG: dilations[0] == 1"] 
  "30064771080" -> "128849018880"  [ label = "DDG: dilations[1]"] 
  "30064771077" -> "128849018880"  [ label = "DDG: dilations[1] == 1"] 
  "30064771076" -> "128849018880"  [ label = "DDG: dilations[0] == 1 &amp;&amp; dilations[1] == 1"] 
  "30064771082" -> "128849018880"  [ label = "DDG: dilations[2]"] 
  "30064771076" -> "128849018880"  [ label = "DDG: dilations[2] == 1"] 
  "30064771075" -> "128849018880"  [ label = "DDG: dilations[0] == 1 &amp;&amp; dilations[1] == 1 &amp;&amp; dilations[2] == 1"] 
  "30064771075" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(&quot;CPU implementation of Conv3D &quot;
                                        &quot;currently only supports dilated rates &quot;
                                        &quot;of 1.&quot;)"] 
  "30064771075" -> "128849018880"  [ label = "DDG: OP_REQUIRES(context,
                dilations[0] == 1 &amp;&amp; dilations[1] == 1 &amp;&amp; dilations[2] == 1,
                errors::InvalidArgument(&quot;CPU implementation of Conv3D &quot;
                                        &quot;currently only supports dilated rates &quot;
                                        &quot;of 1.&quot;))"] 
  "30064771085" -> "128849018880"  [ label = "DDG: filter.dim_size(3) == input.dim_size(input.dims() - 1)"] 
  "30064771091" -> "128849018880"  [ label = "DDG: filter.dim_size(3)"] 
  "30064771094" -> "128849018880"  [ label = "DDG: input.dims()"] 
  "30064771093" -> "128849018880"  [ label = "DDG: input.dims() - 1"] 
  "30064771091" -> "128849018880"  [ label = "DDG: input.dim_size(input.dims() - 1)"] 
  "30064771085" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(
                    &quot;Number of channels in filter (&quot;, filter.dim_size(3),
                    &quot;) must match last dimension of input (&quot;,
                    input.dim_size(input.dims() - 1), &quot;)&quot;)"] 
  "30064771085" -> "128849018880"  [ label = "DDG: OP_REQUIRES(context, filter.dim_size(3) == input.dim_size(input.dims() - 1),
                errors::InvalidArgument(
                    &quot;Number of channels in filter (&quot;, filter.dim_size(3),
                    &quot;) must match last dimension of input (&quot;,
                    input.dim_size(input.dims() - 1), &quot;)&quot;))"] 
  "30064771096" -> "128849018880"  [ label = "DDG: functor::CuboidConvolution&lt;CPUDevice, T&gt;()"] 
  "30064771098" -> "128849018880"  [ label = "DDG: context"] 
  "30064771096" -> "128849018880"  [ label = "DDG: context-&gt;eigen_device&lt;CPUDevice&gt;()"] 
  "30064771099" -> "128849018880"  [ label = "DDG: output"] 
  "30064771096" -> "128849018880"  [ label = "DDG: output-&gt;tensor&lt;T, 5&gt;()"] 
  "30064771100" -> "128849018880"  [ label = "DDG: input"] 
  "30064771096" -> "128849018880"  [ label = "DDG: input.tensor&lt;T, 5&gt;()"] 
  "30064771101" -> "128849018880"  [ label = "DDG: filter"] 
  "30064771096" -> "128849018880"  [ label = "DDG: filter.tensor&lt;T, 5&gt;()"] 
  "30064771096" -> "128849018880"  [ label = "DDG: strides[2]"] 
  "30064771096" -> "128849018880"  [ label = "DDG: strides[1]"] 
  "30064771096" -> "128849018880"  [ label = "DDG: strides[0]"] 
  "30064771105" -> "128849018880"  [ label = "DDG: padding"] 
  "30064771096" -> "128849018880"  [ label = "DDG: BrainPadding2EigenPadding(padding)"] 
  "30064771096" -> "128849018880"  [ label = "DDG: functor::CuboidConvolution&lt;CPUDevice, T&gt;()(
        context-&gt;eigen_device&lt;CPUDevice&gt;(), output-&gt;tensor&lt;T, 5&gt;(),
        input.tensor&lt;T, 5&gt;(), filter.tensor&lt;T, 5&gt;(), strides[2], strides[1],
        strides[0], BrainPadding2EigenPadding(padding))"] 
  "30064771073" -> "128849018880"  [ label = "DDG: FORMAT_NHWC"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "111669149697" -> "115964116993"  [ label = "DDG: "] 
  "111669149697" -> "115964116994"  [ label = "DDG: "] 
  "111669149697" -> "115964116995"  [ label = "DDG: "] 
  "111669149697" -> "115964116996"  [ label = "DDG: "] 
  "111669149697" -> "115964116997"  [ label = "DDG: "] 
  "111669149697" -> "115964116998"  [ label = "DDG: "] 
  "111669149697" -> "115964116999"  [ label = "DDG: "] 
  "111669149697" -> "115964117000"  [ label = "DDG: "] 
  "115964116992" -> "30064771072"  [ label = "DDG: context"] 
  "111669149697" -> "30064771072"  [ label = "DDG: "] 
  "30064771073" -> "30064771072"  [ label = "DDG: data_format"] 
  "30064771073" -> "30064771072"  [ label = "DDG: FORMAT_NHWC"] 
  "30064771074" -> "30064771072"  [ label = "DDG: &quot;CPU implementation of Conv3D &quot;
                                        &quot;currently only supports the NHWC &quot;
                                        &quot;tensor format.&quot;"] 
  "30064771072" -> "30064771075"  [ label = "DDG: context"] 
  "111669149697" -> "30064771075"  [ label = "DDG: "] 
  "30064771076" -> "30064771075"  [ label = "DDG: dilations[0] == 1 &amp;&amp; dilations[1] == 1"] 
  "30064771076" -> "30064771075"  [ label = "DDG: dilations[2] == 1"] 
  "30064771084" -> "30064771075"  [ label = "DDG: &quot;CPU implementation of Conv3D &quot;
                                        &quot;currently only supports dilated rates &quot;
                                        &quot;of 1.&quot;"] 
  "30064771075" -> "30064771085"  [ label = "DDG: context"] 
  "111669149697" -> "30064771085"  [ label = "DDG: "] 
  "30064771086" -> "30064771085"  [ label = "DDG: filter.dim_size(3)"] 
  "30064771086" -> "30064771085"  [ label = "DDG: input.dim_size(input.dims() - 1)"] 
  "30064771091" -> "30064771085"  [ label = "DDG: filter.dim_size(3)"] 
  "30064771091" -> "30064771085"  [ label = "DDG: input.dim_size(input.dims() - 1)"] 
  "30064771091" -> "30064771085"  [ label = "DDG: &quot;)&quot;"] 
  "30064771091" -> "30064771085"  [ label = "DDG: &quot;Number of channels in filter (&quot;"] 
  "30064771091" -> "30064771085"  [ label = "DDG: &quot;) must match last dimension of input (&quot;"] 
  "111669149697" -> "30064771096"  [ label = "DDG: "] 
  "30064771098" -> "30064771096"  [ label = "DDG: context"] 
  "30064771099" -> "30064771096"  [ label = "DDG: output"] 
  "30064771100" -> "30064771096"  [ label = "DDG: input"] 
  "30064771101" -> "30064771096"  [ label = "DDG: filter"] 
  "115964116997" -> "30064771096"  [ label = "DDG: strides"] 
  "30064771105" -> "30064771096"  [ label = "DDG: padding"] 
  "115964116999" -> "30064771073"  [ label = "DDG: data_format"] 
  "111669149697" -> "30064771073"  [ label = "DDG: "] 
  "111669149697" -> "30064771074"  [ label = "DDG: "] 
  "30064771077" -> "30064771076"  [ label = "DDG: dilations[0] == 1"] 
  "30064771077" -> "30064771076"  [ label = "DDG: dilations[1] == 1"] 
  "30064771082" -> "30064771076"  [ label = "DDG: dilations[2]"] 
  "30064771082" -> "30064771076"  [ label = "DDG: 1"] 
  "111669149697" -> "30064771084"  [ label = "DDG: "] 
  "30064771087" -> "30064771086"  [ label = "DDG: filter"] 
  "30064771087" -> "30064771086"  [ label = "DDG: 3"] 
  "30064771088" -> "30064771086"  [ label = "DDG: input"] 
  "30064771088" -> "30064771086"  [ label = "DDG: input.dims() - 1"] 
  "111669149697" -> "30064771091"  [ label = "DDG: "] 
  "30064771092" -> "30064771091"  [ label = "DDG: filter"] 
  "30064771092" -> "30064771091"  [ label = "DDG: 3"] 
  "30064771093" -> "30064771091"  [ label = "DDG: input"] 
  "30064771093" -> "30064771091"  [ label = "DDG: input.dims() - 1"] 
  "30064771085" -> "30064771098"  [ label = "DDG: context"] 
  "111669149697" -> "30064771098"  [ label = "DDG: "] 
  "115964117000" -> "30064771099"  [ label = "DDG: output"] 
  "111669149697" -> "30064771099"  [ label = "DDG: "] 
  "30064771093" -> "30064771100"  [ label = "DDG: input"] 
  "111669149697" -> "30064771100"  [ label = "DDG: "] 
  "30064771092" -> "30064771101"  [ label = "DDG: filter"] 
  "111669149697" -> "30064771101"  [ label = "DDG: "] 
  "115964116998" -> "30064771105"  [ label = "DDG: padding"] 
  "111669149697" -> "30064771105"  [ label = "DDG: "] 
  "30064771078" -> "30064771077"  [ label = "DDG: dilations[0]"] 
  "30064771078" -> "30064771077"  [ label = "DDG: 1"] 
  "30064771080" -> "30064771077"  [ label = "DDG: dilations[1]"] 
  "30064771080" -> "30064771077"  [ label = "DDG: 1"] 
  "115964116996" -> "30064771082"  [ label = "DDG: dilations"] 
  "111669149697" -> "30064771082"  [ label = "DDG: "] 
  "115964116995" -> "30064771087"  [ label = "DDG: filter"] 
  "111669149697" -> "30064771087"  [ label = "DDG: "] 
  "30064771090" -> "30064771088"  [ label = "DDG: input"] 
  "111669149697" -> "30064771088"  [ label = "DDG: "] 
  "30064771089" -> "30064771088"  [ label = "DDG: input.dims()"] 
  "30064771089" -> "30064771088"  [ label = "DDG: 1"] 
  "30064771087" -> "30064771092"  [ label = "DDG: filter"] 
  "111669149697" -> "30064771092"  [ label = "DDG: "] 
  "30064771095" -> "30064771093"  [ label = "DDG: input"] 
  "111669149697" -> "30064771093"  [ label = "DDG: "] 
  "30064771094" -> "30064771093"  [ label = "DDG: input.dims()"] 
  "30064771094" -> "30064771093"  [ label = "DDG: 1"] 
  "115964116996" -> "30064771078"  [ label = "DDG: dilations"] 
  "111669149697" -> "30064771078"  [ label = "DDG: "] 
  "115964116996" -> "30064771080"  [ label = "DDG: dilations"] 
  "111669149697" -> "30064771080"  [ label = "DDG: "] 
  "30064771090" -> "30064771089"  [ label = "DDG: input"] 
  "111669149697" -> "30064771089"  [ label = "DDG: "] 
  "30064771095" -> "30064771094"  [ label = "DDG: input"] 
  "111669149697" -> "30064771094"  [ label = "DDG: "] 
  "115964116994" -> "30064771090"  [ label = "DDG: input"] 
  "111669149697" -> "30064771090"  [ label = "DDG: "] 
  "30064771088" -> "30064771095"  [ label = "DDG: input"] 
  "111669149697" -> "30064771095"  [ label = "DDG: "] 
  "30064771077" -> "30064771083"  [ label = "CDG: "] 
  "30064771077" -> "30064771082"  [ label = "CDG: "] 
  "30064771078" -> "30064771081"  [ label = "CDG: "] 
  "30064771078" -> "30064771080"  [ label = "CDG: "] 
}
"""
)
