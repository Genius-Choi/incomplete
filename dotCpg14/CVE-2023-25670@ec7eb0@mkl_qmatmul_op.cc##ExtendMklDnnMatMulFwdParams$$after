[33mval[0m [36mres1901[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "ExtendMklDnnMatMulFwdParams" {  
"111669149697" [label = <(METHOD,ExtendMklDnnMatMulFwdParams)<SUB>1</SUB>> ]
"115964116992" [label = <(PARAM,OpKernelContext* context)<SUB>1</SUB>> ]
"115964116993" [label = <(PARAM,MklDnnMatMulFwdParams&amp; params)<SUB>2</SUB>> ]
"25769803777" [label = <(BLOCK,{
    // Append data type names of input, weigh...,{
    // Append data type names of input, weigh...)<SUB>2</SUB>> ]
"30064771072" [label = <(append,params.dtypes.append(typeid(Tinput).name()))<SUB>4</SUB>> ]
"30064771073" [label = <(&lt;operator&gt;.fieldAccess,params.dtypes)<SUB>4</SUB>> ]
"68719476736" [label = <(IDENTIFIER,params,params.dtypes.append(typeid(Tinput).name()))<SUB>4</SUB>> ]
"55834574848" [label = <(FIELD_IDENTIFIER,dtypes,dtypes)<SUB>4</SUB>> ]
"30064771074" [label = <(name,typeid(Tinput).name())<SUB>4</SUB>> ]
"30064771075" [label = <(&lt;operator&gt;.sizeOf,typeid(Tinput))<SUB>4</SUB>> ]
"68719476737" [label = <(IDENTIFIER,Tinput,typeid(Tinput))<SUB>4</SUB>> ]
"30064771076" [label = <(append,params.dtypes.append(typeid(Tweight).name()))<SUB>5</SUB>> ]
"30064771077" [label = <(&lt;operator&gt;.fieldAccess,params.dtypes)<SUB>5</SUB>> ]
"68719476738" [label = <(IDENTIFIER,params,params.dtypes.append(typeid(Tweight).name()))<SUB>5</SUB>> ]
"55834574849" [label = <(FIELD_IDENTIFIER,dtypes,dtypes)<SUB>5</SUB>> ]
"30064771078" [label = <(name,typeid(Tweight).name())<SUB>5</SUB>> ]
"30064771079" [label = <(&lt;operator&gt;.sizeOf,typeid(Tweight))<SUB>5</SUB>> ]
"68719476739" [label = <(IDENTIFIER,Tweight,typeid(Tweight))<SUB>5</SUB>> ]
"30064771080" [label = <(append,params.dtypes.append(typeid(Tbias).name()))<SUB>6</SUB>> ]
"30064771081" [label = <(&lt;operator&gt;.fieldAccess,params.dtypes)<SUB>6</SUB>> ]
"68719476740" [label = <(IDENTIFIER,params,params.dtypes.append(typeid(Tbias).name()))<SUB>6</SUB>> ]
"55834574850" [label = <(FIELD_IDENTIFIER,dtypes,dtypes)<SUB>6</SUB>> ]
"30064771082" [label = <(name,typeid(Tbias).name())<SUB>6</SUB>> ]
"30064771083" [label = <(&lt;operator&gt;.sizeOf,typeid(Tbias))<SUB>6</SUB>> ]
"68719476741" [label = <(IDENTIFIER,Tbias,typeid(Tbias))<SUB>6</SUB>> ]
"30064771084" [label = <(append,params.dtypes.append(typeid(Toutput).name()))<SUB>7</SUB>> ]
"30064771085" [label = <(&lt;operator&gt;.fieldAccess,params.dtypes)<SUB>7</SUB>> ]
"68719476742" [label = <(IDENTIFIER,params,params.dtypes.append(typeid(Toutput).name()))<SUB>7</SUB>> ]
"55834574851" [label = <(FIELD_IDENTIFIER,dtypes,dtypes)<SUB>7</SUB>> ]
"30064771086" [label = <(name,typeid(Toutput).name())<SUB>7</SUB>> ]
"30064771087" [label = <(&lt;operator&gt;.sizeOf,typeid(Toutput))<SUB>7</SUB>> ]
"68719476743" [label = <(IDENTIFIER,Toutput,typeid(Toutput))<SUB>7</SUB>> ]
"94489280512" [label = <(LOCAL,const Tensor&amp; min_input_tensor: Tensor&amp;)<SUB>10</SUB>> ]
"30064771088" [label = <(&lt;operator&gt;.assignment,&amp; min_input_tensor = context-&gt;input(3))<SUB>10</SUB>> ]
"68719476744" [label = <(IDENTIFIER,min_input_tensor,&amp; min_input_tensor = context-&gt;input(3))<SUB>10</SUB>> ]
"30064771089" [label = <(input,context-&gt;input(3))<SUB>10</SUB>> ]
"68719476745" [label = <(IDENTIFIER,context,context-&gt;input(3))<SUB>10</SUB>> ]
"90194313216" [label = <(LITERAL,3,context-&gt;input(3))<SUB>10</SUB>> ]
"94489280513" [label = <(LOCAL,const Tensor&amp; max_input_tensor: Tensor&amp;)<SUB>11</SUB>> ]
"30064771090" [label = <(&lt;operator&gt;.assignment,&amp; max_input_tensor = context-&gt;input(4))<SUB>11</SUB>> ]
"68719476746" [label = <(IDENTIFIER,max_input_tensor,&amp; max_input_tensor = context-&gt;input(4))<SUB>11</SUB>> ]
"30064771091" [label = <(input,context-&gt;input(4))<SUB>11</SUB>> ]
"68719476747" [label = <(IDENTIFIER,context,context-&gt;input(4))<SUB>11</SUB>> ]
"90194313217" [label = <(LITERAL,4,context-&gt;input(4))<SUB>11</SUB>> ]
"94489280514" [label = <(LOCAL,const Tensor&amp; min_weight_tensor: Tensor&amp;)<SUB>12</SUB>> ]
"30064771092" [label = <(&lt;operator&gt;.assignment,&amp; min_weight_tensor = context-&gt;input(5))<SUB>12</SUB>> ]
"68719476748" [label = <(IDENTIFIER,min_weight_tensor,&amp; min_weight_tensor = context-&gt;input(5))<SUB>12</SUB>> ]
"30064771093" [label = <(input,context-&gt;input(5))<SUB>12</SUB>> ]
"68719476749" [label = <(IDENTIFIER,context,context-&gt;input(5))<SUB>12</SUB>> ]
"90194313218" [label = <(LITERAL,5,context-&gt;input(5))<SUB>12</SUB>> ]
"94489280515" [label = <(LOCAL,const Tensor&amp; max_weight_tensor: Tensor&amp;)<SUB>13</SUB>> ]
"30064771094" [label = <(&lt;operator&gt;.assignment,&amp; max_weight_tensor = context-&gt;input(6))<SUB>13</SUB>> ]
"68719476750" [label = <(IDENTIFIER,max_weight_tensor,&amp; max_weight_tensor = context-&gt;input(6))<SUB>13</SUB>> ]
"30064771095" [label = <(input,context-&gt;input(6))<SUB>13</SUB>> ]
"68719476751" [label = <(IDENTIFIER,context,context-&gt;input(6))<SUB>13</SUB>> ]
"90194313219" [label = <(LITERAL,6,context-&gt;input(6))<SUB>13</SUB>> ]
"30064771096" [label = <(OP_REQUIRES,OP_REQUIRES(context, TensorShapeUtils::IsScalar...)<SUB>15</SUB>> ]
"68719476752" [label = <(IDENTIFIER,context,OP_REQUIRES(context, TensorShapeUtils::IsScalar...)<SUB>15</SUB>> ]
"30064771097" [label = <(IsScalar,TensorShapeUtils::IsScalar(min_input_tensor.sha...)<SUB>15</SUB>> ]
"30064771098" [label = <(shape,min_input_tensor.shape())<SUB>15</SUB>> ]
"68719476753" [label = <(IDENTIFIER,min_input_tensor,min_input_tensor.shape())<SUB>15</SUB>> ]
"30064771099" [label = <(InvalidArgument,errors::InvalidArgument(&quot;`min_a` must be rank 0...)<SUB>16</SUB>> ]
"90194313220" [label = <(LITERAL,&quot;`min_a` must be rank 0 but is rank &quot;,errors::InvalidArgument(&quot;`min_a` must be rank 0...)<SUB>16</SUB>> ]
"30064771100" [label = <(dims,min_input_tensor.dims())<SUB>17</SUB>> ]
"68719476754" [label = <(IDENTIFIER,min_input_tensor,min_input_tensor.dims())<SUB>17</SUB>> ]
"30064771101" [label = <(OP_REQUIRES,OP_REQUIRES(context, TensorShapeUtils::IsScalar...)<SUB>18</SUB>> ]
"68719476755" [label = <(IDENTIFIER,context,OP_REQUIRES(context, TensorShapeUtils::IsScalar...)<SUB>18</SUB>> ]
"30064771102" [label = <(IsScalar,TensorShapeUtils::IsScalar(max_input_tensor.sha...)<SUB>18</SUB>> ]
"30064771103" [label = <(shape,max_input_tensor.shape())<SUB>18</SUB>> ]
"68719476756" [label = <(IDENTIFIER,max_input_tensor,max_input_tensor.shape())<SUB>18</SUB>> ]
"30064771104" [label = <(InvalidArgument,errors::InvalidArgument(&quot;`max_a` must be rank 0...)<SUB>19</SUB>> ]
"90194313221" [label = <(LITERAL,&quot;`max_a` must be rank 0 but is rank &quot;,errors::InvalidArgument(&quot;`max_a` must be rank 0...)<SUB>19</SUB>> ]
"30064771105" [label = <(dims,max_input_tensor.dims())<SUB>20</SUB>> ]
"68719476757" [label = <(IDENTIFIER,max_input_tensor,max_input_tensor.dims())<SUB>20</SUB>> ]
"30064771106" [label = <(OP_REQUIRES,OP_REQUIRES(context, TensorShapeUtils::IsScalar...)<SUB>21</SUB>> ]
"68719476758" [label = <(IDENTIFIER,context,OP_REQUIRES(context, TensorShapeUtils::IsScalar...)<SUB>21</SUB>> ]
"30064771107" [label = <(IsScalar,TensorShapeUtils::IsScalar(min_weight_tensor.sh...)<SUB>21</SUB>> ]
"30064771108" [label = <(shape,min_weight_tensor.shape())<SUB>21</SUB>> ]
"68719476759" [label = <(IDENTIFIER,min_weight_tensor,min_weight_tensor.shape())<SUB>21</SUB>> ]
"30064771109" [label = <(InvalidArgument,errors::InvalidArgument(&quot;`min_b` must be rank 0...)<SUB>22</SUB>> ]
"90194313222" [label = <(LITERAL,&quot;`min_b` must be rank 0 but is rank &quot;,errors::InvalidArgument(&quot;`min_b` must be rank 0...)<SUB>22</SUB>> ]
"30064771110" [label = <(dims,min_weight_tensor.dims())<SUB>23</SUB>> ]
"68719476760" [label = <(IDENTIFIER,min_weight_tensor,min_weight_tensor.dims())<SUB>23</SUB>> ]
"30064771111" [label = <(OP_REQUIRES,OP_REQUIRES(context, TensorShapeUtils::IsScalar...)<SUB>24</SUB>> ]
"68719476761" [label = <(IDENTIFIER,context,OP_REQUIRES(context, TensorShapeUtils::IsScalar...)<SUB>24</SUB>> ]
"30064771112" [label = <(IsScalar,TensorShapeUtils::IsScalar(max_weight_tensor.sh...)<SUB>24</SUB>> ]
"30064771113" [label = <(shape,max_weight_tensor.shape())<SUB>24</SUB>> ]
"68719476762" [label = <(IDENTIFIER,max_weight_tensor,max_weight_tensor.shape())<SUB>24</SUB>> ]
"30064771114" [label = <(InvalidArgument,errors::InvalidArgument(&quot;`max_b` must be rank 0...)<SUB>25</SUB>> ]
"90194313223" [label = <(LITERAL,&quot;`max_b` must be rank 0 but is rank &quot;,errors::InvalidArgument(&quot;`max_b` must be rank 0...)<SUB>25</SUB>> ]
"30064771115" [label = <(dims,max_weight_tensor.dims())<SUB>26</SUB>> ]
"68719476763" [label = <(IDENTIFIER,max_weight_tensor,max_weight_tensor.dims())<SUB>26</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,IF,if (std::is_same&lt;Toutput, quint8&gt;::value ||
        std::is_same&lt;Toutput, qint8&gt;::value ||
        std::is_same&lt;Toutput, float&gt;::value))<SUB>30</SUB>> ]
"30064771116" [label = <(&lt;operator&gt;.logicalOr,std::is_same&lt;Toutput, quint8&gt;::value ||
       ...)<SUB>30</SUB>> ]
"30064771117" [label = <(&lt;operator&gt;.logicalOr,std::is_same&lt;Toutput, quint8&gt;::value ||
       ...)<SUB>30</SUB>> ]
"30064771118" [label = <(&lt;operator&gt;.fieldAccess,std::is_same&lt;Toutput, quint8&gt;::value)<SUB>30</SUB>> ]
"30064771119" [label = <(&lt;operator&gt;.fieldAccess,std::is_same&lt;Toutput, quint8&gt;)<SUB>30</SUB>> ]
"68719476764" [label = <(IDENTIFIER,std,std::is_same&lt;Toutput, quint8&gt;::value ||
       ...)<SUB>30</SUB>> ]
"68719476765" [label = <(IDENTIFIER,is_same&lt;Toutput, quint8&gt;,std::is_same&lt;Toutput, quint8&gt;::value ||
       ...)<SUB>30</SUB>> ]
"55834574852" [label = <(FIELD_IDENTIFIER,value,value)<SUB>30</SUB>> ]
"30064771120" [label = <(&lt;operator&gt;.fieldAccess,std::is_same&lt;Toutput, qint8&gt;::value)<SUB>31</SUB>> ]
"30064771121" [label = <(&lt;operator&gt;.fieldAccess,std::is_same&lt;Toutput, qint8&gt;)<SUB>31</SUB>> ]
"68719476766" [label = <(IDENTIFIER,std,std::is_same&lt;Toutput, quint8&gt;::value ||
       ...)<SUB>31</SUB>> ]
"68719476767" [label = <(IDENTIFIER,is_same&lt;Toutput, qint8&gt;,std::is_same&lt;Toutput, quint8&gt;::value ||
       ...)<SUB>31</SUB>> ]
"55834574853" [label = <(FIELD_IDENTIFIER,value,value)<SUB>31</SUB>> ]
"30064771122" [label = <(&lt;operator&gt;.fieldAccess,std::is_same&lt;Toutput, float&gt;::value)<SUB>32</SUB>> ]
"30064771123" [label = <(&lt;operator&gt;.fieldAccess,std::is_same&lt;Toutput, float&gt;)<SUB>32</SUB>> ]
"68719476768" [label = <(IDENTIFIER,std,std::is_same&lt;Toutput, quint8&gt;::value ||
       ...)<SUB>32</SUB>> ]
"68719476769" [label = <(IDENTIFIER,is_same&lt;Toutput, float&gt;,std::is_same&lt;Toutput, quint8&gt;::value ||
       ...)<SUB>32</SUB>> ]
"55834574854" [label = <(FIELD_IDENTIFIER,value,value)<SUB>32</SUB>> ]
"25769803778" [label = <(BLOCK,{
      float min_output_value;
      float max...,{
      float min_output_value;
      float max...)<SUB>32</SUB>> ]
"94489280516" [label = <(LOCAL,float min_output_value: float)<SUB>33</SUB>> ]
"94489280517" [label = <(LOCAL,float max_output_value: float)<SUB>34</SUB>> ]
"30064771124" [label = <(ComputeOutputRangeForInt32,ComputeOutputRangeForInt32(context, &amp;min_output...)<SUB>35</SUB>> ]
"68719476770" [label = <(IDENTIFIER,context,ComputeOutputRangeForInt32(context, &amp;min_output...)<SUB>35</SUB>> ]
"30064771125" [label = <(&lt;operator&gt;.addressOf,&amp;min_output_value)<SUB>35</SUB>> ]
"68719476771" [label = <(IDENTIFIER,min_output_value,ComputeOutputRangeForInt32(context, &amp;min_output...)<SUB>35</SUB>> ]
"30064771126" [label = <(&lt;operator&gt;.addressOf,&amp;max_output_value)<SUB>35</SUB>> ]
"68719476772" [label = <(IDENTIFIER,max_output_value,ComputeOutputRangeForInt32(context, &amp;min_output...)<SUB>35</SUB>> ]
"94489280518" [label = <(LOCAL,float scale_int32: float)<SUB>36</SUB>> ]
"30064771127" [label = <(&lt;operator&gt;.assignment,scale_int32 =
          std::max(std::abs(min_o...)<SUB>36</SUB>> ]
"68719476773" [label = <(IDENTIFIER,scale_int32,scale_int32 =
          std::max(std::abs(min_o...)<SUB>36</SUB>> ]
"30064771128" [label = <(max,std::max(std::abs(min_output_value), std::abs(m...)<SUB>37</SUB>> ]
"30064771129" [label = <(abs,std::abs(min_output_value))<SUB>37</SUB>> ]
"68719476774" [label = <(IDENTIFIER,min_output_value,std::abs(min_output_value))<SUB>37</SUB>> ]
"30064771130" [label = <(abs,std::abs(max_output_value))<SUB>37</SUB>> ]
"68719476775" [label = <(IDENTIFIER,max_output_value,std::abs(max_output_value))<SUB>37</SUB>> ]
"94489280519" [label = <(LOCAL,const Tensor&amp; min_freezed_tensor: Tensor&amp;)<SUB>38</SUB>> ]
"30064771131" [label = <(&lt;operator&gt;.assignment,&amp; min_freezed_tensor = context-&gt;input(7))<SUB>38</SUB>> ]
"68719476776" [label = <(IDENTIFIER,min_freezed_tensor,&amp; min_freezed_tensor = context-&gt;input(7))<SUB>38</SUB>> ]
"30064771132" [label = <(input,context-&gt;input(7))<SUB>38</SUB>> ]
"68719476777" [label = <(IDENTIFIER,context,context-&gt;input(7))<SUB>38</SUB>> ]
"90194313224" [label = <(LITERAL,7,context-&gt;input(7))<SUB>38</SUB>> ]
"94489280520" [label = <(LOCAL,const Tensor&amp; max_freezed_tensor: Tensor&amp;)<SUB>39</SUB>> ]
"30064771133" [label = <(&lt;operator&gt;.assignment,&amp; max_freezed_tensor = context-&gt;input(8))<SUB>39</SUB>> ]
"68719476778" [label = <(IDENTIFIER,max_freezed_tensor,&amp; max_freezed_tensor = context-&gt;input(8))<SUB>39</SUB>> ]
"30064771134" [label = <(input,context-&gt;input(8))<SUB>39</SUB>> ]
"68719476779" [label = <(IDENTIFIER,context,context-&gt;input(8))<SUB>39</SUB>> ]
"90194313225" [label = <(LITERAL,8,context-&gt;input(8))<SUB>39</SUB>> ]
"30064771135" [label = <(OP_REQUIRES,OP_REQUIRES(context,
                  TensorSh...)<SUB>41</SUB>> ]
"68719476780" [label = <(IDENTIFIER,context,OP_REQUIRES(context,
                  TensorSh...)<SUB>41</SUB>> ]
"30064771136" [label = <(IsScalar,TensorShapeUtils::IsScalar(min_freezed_tensor.s...)<SUB>42</SUB>> ]
"30064771137" [label = <(shape,min_freezed_tensor.shape())<SUB>42</SUB>> ]
"68719476781" [label = <(IDENTIFIER,min_freezed_tensor,min_freezed_tensor.shape())<SUB>42</SUB>> ]
"30064771138" [label = <(InvalidArgument,errors::InvalidArgument(
                      ...)<SUB>43</SUB>> ]
"90194313226" [label = <(LITERAL,&quot;`min_freezed_output` must be rank 0 but is rank &quot;,errors::InvalidArgument(
                      ...)<SUB>44</SUB>> ]
"30064771139" [label = <(dims,min_freezed_tensor.dims())<SUB>45</SUB>> ]
"68719476782" [label = <(IDENTIFIER,min_freezed_tensor,min_freezed_tensor.dims())<SUB>45</SUB>> ]
"30064771140" [label = <(OP_REQUIRES,OP_REQUIRES(context,
                  TensorSh...)<SUB>46</SUB>> ]
"68719476783" [label = <(IDENTIFIER,context,OP_REQUIRES(context,
                  TensorSh...)<SUB>46</SUB>> ]
"30064771141" [label = <(IsScalar,TensorShapeUtils::IsScalar(max_freezed_tensor.s...)<SUB>47</SUB>> ]
"30064771142" [label = <(shape,max_freezed_tensor.shape())<SUB>47</SUB>> ]
"68719476784" [label = <(IDENTIFIER,max_freezed_tensor,max_freezed_tensor.shape())<SUB>47</SUB>> ]
"30064771143" [label = <(InvalidArgument,errors::InvalidArgument(
                      ...)<SUB>48</SUB>> ]
"90194313227" [label = <(LITERAL,&quot;`max_freezed_output` must be rank 0 but is rank &quot;,errors::InvalidArgument(
                      ...)<SUB>49</SUB>> ]
"30064771144" [label = <(dims,max_freezed_tensor.dims())<SUB>50</SUB>> ]
"68719476785" [label = <(IDENTIFIER,max_freezed_tensor,max_freezed_tensor.dims())<SUB>50</SUB>> ]
"94489280521" [label = <(LOCAL,const float min_freezed_output: float)<SUB>51</SUB>> ]
"30064771145" [label = <(&lt;operator&gt;.assignment,min_freezed_output = min_freezed_tensor.scalar&lt;...)<SUB>51</SUB>> ]
"68719476786" [label = <(IDENTIFIER,min_freezed_output,min_freezed_output = min_freezed_tensor.scalar&lt;...)<SUB>51</SUB>> ]
"30064771146" [label = <(&lt;operator&gt;(),min_freezed_tensor.scalar&lt;float&gt;()())<SUB>51</SUB>> ]
"30064771147" [label = <(scalar&lt;float&gt;,min_freezed_tensor.scalar&lt;float&gt;())<SUB>51</SUB>> ]
"68719476787" [label = <(IDENTIFIER,min_freezed_tensor,min_freezed_tensor.scalar&lt;float&gt;())<SUB>51</SUB>> ]
"94489280522" [label = <(LOCAL,const float max_freezed_output: float)<SUB>52</SUB>> ]
"30064771148" [label = <(&lt;operator&gt;.assignment,max_freezed_output = max_freezed_tensor.scalar&lt;...)<SUB>52</SUB>> ]
"68719476788" [label = <(IDENTIFIER,max_freezed_output,max_freezed_output = max_freezed_tensor.scalar&lt;...)<SUB>52</SUB>> ]
"30064771149" [label = <(&lt;operator&gt;(),max_freezed_tensor.scalar&lt;float&gt;()())<SUB>52</SUB>> ]
"30064771150" [label = <(scalar&lt;float&gt;,max_freezed_tensor.scalar&lt;float&gt;())<SUB>52</SUB>> ]
"68719476789" [label = <(IDENTIFIER,max_freezed_tensor,max_freezed_tensor.scalar&lt;float&gt;())<SUB>52</SUB>> ]
"94489280523" [label = <(LOCAL,float scale_eightbit: float)<SUB>53</SUB>> ]
"30064771151" [label = <(&lt;operator&gt;.assignment,scale_eightbit =
          std::max(std::abs(mi...)<SUB>53</SUB>> ]
"68719476790" [label = <(IDENTIFIER,scale_eightbit,scale_eightbit =
          std::max(std::abs(mi...)<SUB>53</SUB>> ]
"30064771152" [label = <(max,std::max(std::abs(min_freezed_output), std::abs...)<SUB>54</SUB>> ]
"30064771153" [label = <(abs,std::abs(min_freezed_output))<SUB>54</SUB>> ]
"68719476791" [label = <(IDENTIFIER,min_freezed_output,std::abs(min_freezed_output))<SUB>54</SUB>> ]
"30064771154" [label = <(abs,std::abs(max_freezed_output))<SUB>54</SUB>> ]
"68719476792" [label = <(IDENTIFIER,max_freezed_output,std::abs(max_freezed_output))<SUB>54</SUB>> ]
"94489280524" [label = <(LOCAL,float scale: float)<SUB>55</SUB>> ]
"30064771155" [label = <(&lt;operator&gt;.assignment,scale = 1.0)<SUB>55</SUB>> ]
"68719476793" [label = <(IDENTIFIER,scale,scale = 1.0)<SUB>55</SUB>> ]
"90194313228" [label = <(LITERAL,1.0,scale = 1.0)<SUB>55</SUB>> ]
"47244640257" [label = <(CONTROL_STRUCTURE,IF,if (std::is_same&lt;Toutput, quint8&gt;::value))<SUB>56</SUB>> ]
"30064771156" [label = <(&lt;operator&gt;.fieldAccess,std::is_same&lt;Toutput, quint8&gt;::value)<SUB>56</SUB>> ]
"30064771157" [label = <(&lt;operator&gt;.fieldAccess,std::is_same&lt;Toutput, quint8&gt;)<SUB>56</SUB>> ]
"68719476794" [label = <(IDENTIFIER,std,if (std::is_same&lt;Toutput, quint8&gt;::value))<SUB>56</SUB>> ]
"68719476795" [label = <(IDENTIFIER,is_same&lt;Toutput, quint8&gt;,if (std::is_same&lt;Toutput, quint8&gt;::value))<SUB>56</SUB>> ]
"55834574855" [label = <(FIELD_IDENTIFIER,value,value)<SUB>56</SUB>> ]
"25769803779" [label = <(BLOCK,{
        scale = scale_int32 / scale_eightbit ...,{
        scale = scale_int32 / scale_eightbit ...)<SUB>56</SUB>> ]
"30064771158" [label = <(&lt;operator&gt;.assignment,scale = scale_int32 / scale_eightbit / static_c...)<SUB>57</SUB>> ]
"68719476796" [label = <(IDENTIFIER,scale,scale = scale_int32 / scale_eightbit / static_c...)<SUB>57</SUB>> ]
"30064771159" [label = <(&lt;operator&gt;.division,scale_int32 / scale_eightbit / static_cast&lt;floa...)<SUB>57</SUB>> ]
"30064771160" [label = <(&lt;operator&gt;.division,scale_int32 / scale_eightbit)<SUB>57</SUB>> ]
"68719476797" [label = <(IDENTIFIER,scale_int32,scale_int32 / scale_eightbit)<SUB>57</SUB>> ]
"68719476798" [label = <(IDENTIFIER,scale_eightbit,scale_int32 / scale_eightbit)<SUB>57</SUB>> ]
"30064771161" [label = <(&lt;operator&gt;.cast,static_cast&lt;float&gt;(1u &lt;&lt; 23))<SUB>57</SUB>> ]
"184683593728" [label = <(UNKNOWN,float,float)<SUB>57</SUB>> ]
"30064771162" [label = <(&lt;operator&gt;.shiftLeft,1u &lt;&lt; 23)<SUB>57</SUB>> ]
"90194313229" [label = <(LITERAL,1u,1u &lt;&lt; 23)<SUB>57</SUB>> ]
"90194313230" [label = <(LITERAL,23,1u &lt;&lt; 23)<SUB>57</SUB>> ]
"47244640258" [label = <(CONTROL_STRUCTURE,ELSE,else)<SUB>58</SUB>> ]
"25769803780" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>58</SUB>> ]
"47244640259" [label = <(CONTROL_STRUCTURE,IF,if (std::is_same&lt;Toutput, qint8&gt;::value))<SUB>58</SUB>> ]
"30064771163" [label = <(&lt;operator&gt;.fieldAccess,std::is_same&lt;Toutput, qint8&gt;::value)<SUB>58</SUB>> ]
"30064771164" [label = <(&lt;operator&gt;.fieldAccess,std::is_same&lt;Toutput, qint8&gt;)<SUB>58</SUB>> ]
"68719476799" [label = <(IDENTIFIER,std,if (std::is_same&lt;Toutput, qint8&gt;::value))<SUB>58</SUB>> ]
"68719476800" [label = <(IDENTIFIER,is_same&lt;Toutput, qint8&gt;,if (std::is_same&lt;Toutput, qint8&gt;::value))<SUB>58</SUB>> ]
"55834574856" [label = <(FIELD_IDENTIFIER,value,value)<SUB>58</SUB>> ]
"25769803781" [label = <(BLOCK,{
        scale = scale_int32 / scale_eightbit ...,{
        scale = scale_int32 / scale_eightbit ...)<SUB>58</SUB>> ]
"30064771165" [label = <(&lt;operator&gt;.assignment,scale = scale_int32 / scale_eightbit / static_c...)<SUB>59</SUB>> ]
"68719476801" [label = <(IDENTIFIER,scale,scale = scale_int32 / scale_eightbit / static_c...)<SUB>59</SUB>> ]
"30064771166" [label = <(&lt;operator&gt;.division,scale_int32 / scale_eightbit / static_cast&lt;floa...)<SUB>59</SUB>> ]
"30064771167" [label = <(&lt;operator&gt;.division,scale_int32 / scale_eightbit)<SUB>59</SUB>> ]
"68719476802" [label = <(IDENTIFIER,scale_int32,scale_int32 / scale_eightbit)<SUB>59</SUB>> ]
"68719476803" [label = <(IDENTIFIER,scale_eightbit,scale_int32 / scale_eightbit)<SUB>59</SUB>> ]
"30064771168" [label = <(&lt;operator&gt;.cast,static_cast&lt;float&gt;(1u &lt;&lt; 24))<SUB>59</SUB>> ]
"184683593729" [label = <(UNKNOWN,float,float)<SUB>59</SUB>> ]
"30064771169" [label = <(&lt;operator&gt;.shiftLeft,1u &lt;&lt; 24)<SUB>59</SUB>> ]
"90194313231" [label = <(LITERAL,1u,1u &lt;&lt; 24)<SUB>59</SUB>> ]
"90194313232" [label = <(LITERAL,24,1u &lt;&lt; 24)<SUB>59</SUB>> ]
"47244640260" [label = <(CONTROL_STRUCTURE,ELSE,else)<SUB>60</SUB>> ]
"25769803782" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>60</SUB>> ]
"47244640261" [label = <(CONTROL_STRUCTURE,IF,if (std::is_same&lt;Toutput, float&gt;::value))<SUB>60</SUB>> ]
"30064771170" [label = <(&lt;operator&gt;.fieldAccess,std::is_same&lt;Toutput, float&gt;::value)<SUB>60</SUB>> ]
"30064771171" [label = <(&lt;operator&gt;.fieldAccess,std::is_same&lt;Toutput, float&gt;)<SUB>60</SUB>> ]
"68719476804" [label = <(IDENTIFIER,std,if (std::is_same&lt;Toutput, float&gt;::value))<SUB>60</SUB>> ]
"68719476805" [label = <(IDENTIFIER,is_same&lt;Toutput, float&gt;,if (std::is_same&lt;Toutput, float&gt;::value))<SUB>60</SUB>> ]
"55834574857" [label = <(FIELD_IDENTIFIER,value,value)<SUB>60</SUB>> ]
"25769803783" [label = <(BLOCK,{
        scale = scale_int32 / static_cast&lt;flo...,{
        scale = scale_int32 / static_cast&lt;flo...)<SUB>60</SUB>> ]
"30064771172" [label = <(&lt;operator&gt;.assignment,scale = scale_int32 / static_cast&lt;float&gt;(1u &lt;&lt; 31))<SUB>61</SUB>> ]
"68719476806" [label = <(IDENTIFIER,scale,scale = scale_int32 / static_cast&lt;float&gt;(1u &lt;&lt; 31))<SUB>61</SUB>> ]
"30064771173" [label = <(&lt;operator&gt;.division,scale_int32 / static_cast&lt;float&gt;(1u &lt;&lt; 31))<SUB>61</SUB>> ]
"68719476807" [label = <(IDENTIFIER,scale_int32,scale_int32 / static_cast&lt;float&gt;(1u &lt;&lt; 31))<SUB>61</SUB>> ]
"30064771174" [label = <(&lt;operator&gt;.cast,static_cast&lt;float&gt;(1u &lt;&lt; 31))<SUB>61</SUB>> ]
"184683593730" [label = <(UNKNOWN,float,float)<SUB>61</SUB>> ]
"30064771175" [label = <(&lt;operator&gt;.shiftLeft,1u &lt;&lt; 31)<SUB>61</SUB>> ]
"90194313233" [label = <(LITERAL,1u,1u &lt;&lt; 31)<SUB>61</SUB>> ]
"90194313234" [label = <(LITERAL,31,1u &lt;&lt; 31)<SUB>61</SUB>> ]
"47244640262" [label = <(CONTROL_STRUCTURE,ELSE,else)<SUB>62</SUB>> ]
"25769803784" [label = <(BLOCK,{
        // TODO(intel-tf): Keep the default q...,{
        // TODO(intel-tf): Keep the default q...)<SUB>62</SUB>> ]
"30064771176" [label = <(&lt;operator&gt;.assignment,scale = scale_int32 / scale_eightbit / static_c...)<SUB>65</SUB>> ]
"68719476808" [label = <(IDENTIFIER,scale,scale = scale_int32 / scale_eightbit / static_c...)<SUB>65</SUB>> ]
"30064771177" [label = <(&lt;operator&gt;.division,scale_int32 / scale_eightbit / static_cast&lt;floa...)<SUB>65</SUB>> ]
"30064771178" [label = <(&lt;operator&gt;.division,scale_int32 / scale_eightbit)<SUB>65</SUB>> ]
"68719476809" [label = <(IDENTIFIER,scale_int32,scale_int32 / scale_eightbit)<SUB>65</SUB>> ]
"68719476810" [label = <(IDENTIFIER,scale_eightbit,scale_int32 / scale_eightbit)<SUB>65</SUB>> ]
"30064771179" [label = <(&lt;operator&gt;.cast,static_cast&lt;float&gt;(1u &lt;&lt; 24))<SUB>65</SUB>> ]
"184683593731" [label = <(UNKNOWN,float,float)<SUB>65</SUB>> ]
"30064771180" [label = <(&lt;operator&gt;.shiftLeft,1u &lt;&lt; 24)<SUB>65</SUB>> ]
"90194313235" [label = <(LITERAL,1u,1u &lt;&lt; 24)<SUB>65</SUB>> ]
"90194313236" [label = <(LITERAL,24,1u &lt;&lt; 24)<SUB>65</SUB>> ]
"94489280525" [label = <(LOCAL,std.vector&lt;float&gt; output_scale: std.vector&lt;float&gt;)<SUB>67</SUB>> ]
"30064771181" [label = <(push_back,output_scale.push_back(scale))<SUB>68</SUB>> ]
"68719476811" [label = <(IDENTIFIER,output_scale,output_scale.push_back(scale))<SUB>68</SUB>> ]
"68719476812" [label = <(IDENTIFIER,scale,output_scale.push_back(scale))<SUB>68</SUB>> ]
"30064771182" [label = <(push_back,params.post_op_params.push_back({&quot;output_scale&quot;...)<SUB>69</SUB>> ]
"30064771183" [label = <(&lt;operator&gt;.fieldAccess,params.post_op_params)<SUB>69</SUB>> ]
"68719476813" [label = <(IDENTIFIER,params,params.post_op_params.push_back({&quot;output_scale&quot;...)<SUB>69</SUB>> ]
"55834574858" [label = <(FIELD_IDENTIFIER,post_op_params,post_op_params)<SUB>69</SUB>> ]
"30064771184" [label = <(&lt;operator&gt;.arrayInitializer,{&quot;output_scale&quot;, output_scale})<SUB>69</SUB>> ]
"90194313237" [label = <(LITERAL,&quot;output_scale&quot;,{&quot;output_scale&quot;, output_scale})<SUB>69</SUB>> ]
"68719476814" [label = <(IDENTIFIER,output_scale,{&quot;output_scale&quot;, output_scale})<SUB>69</SUB>> ]
"128849018880" [label = <(METHOD_RETURN,void)<SUB>1</SUB>> ]
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "115964116993"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "128849018880"  [ label = "AST: "] 
  "25769803777" -> "30064771072"  [ label = "AST: "] 
  "25769803777" -> "30064771076"  [ label = "AST: "] 
  "25769803777" -> "30064771080"  [ label = "AST: "] 
  "25769803777" -> "30064771084"  [ label = "AST: "] 
  "25769803777" -> "94489280512"  [ label = "AST: "] 
  "25769803777" -> "30064771088"  [ label = "AST: "] 
  "25769803777" -> "94489280513"  [ label = "AST: "] 
  "25769803777" -> "30064771090"  [ label = "AST: "] 
  "25769803777" -> "94489280514"  [ label = "AST: "] 
  "25769803777" -> "30064771092"  [ label = "AST: "] 
  "25769803777" -> "94489280515"  [ label = "AST: "] 
  "25769803777" -> "30064771094"  [ label = "AST: "] 
  "25769803777" -> "30064771096"  [ label = "AST: "] 
  "25769803777" -> "30064771101"  [ label = "AST: "] 
  "25769803777" -> "30064771106"  [ label = "AST: "] 
  "25769803777" -> "30064771111"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "30064771072" -> "30064771073"  [ label = "AST: "] 
  "30064771072" -> "30064771074"  [ label = "AST: "] 
  "30064771073" -> "68719476736"  [ label = "AST: "] 
  "30064771073" -> "55834574848"  [ label = "AST: "] 
  "30064771074" -> "30064771075"  [ label = "AST: "] 
  "30064771075" -> "68719476737"  [ label = "AST: "] 
  "30064771076" -> "30064771077"  [ label = "AST: "] 
  "30064771076" -> "30064771078"  [ label = "AST: "] 
  "30064771077" -> "68719476738"  [ label = "AST: "] 
  "30064771077" -> "55834574849"  [ label = "AST: "] 
  "30064771078" -> "30064771079"  [ label = "AST: "] 
  "30064771079" -> "68719476739"  [ label = "AST: "] 
  "30064771080" -> "30064771081"  [ label = "AST: "] 
  "30064771080" -> "30064771082"  [ label = "AST: "] 
  "30064771081" -> "68719476740"  [ label = "AST: "] 
  "30064771081" -> "55834574850"  [ label = "AST: "] 
  "30064771082" -> "30064771083"  [ label = "AST: "] 
  "30064771083" -> "68719476741"  [ label = "AST: "] 
  "30064771084" -> "30064771085"  [ label = "AST: "] 
  "30064771084" -> "30064771086"  [ label = "AST: "] 
  "30064771085" -> "68719476742"  [ label = "AST: "] 
  "30064771085" -> "55834574851"  [ label = "AST: "] 
  "30064771086" -> "30064771087"  [ label = "AST: "] 
  "30064771087" -> "68719476743"  [ label = "AST: "] 
  "30064771088" -> "68719476744"  [ label = "AST: "] 
  "30064771088" -> "30064771089"  [ label = "AST: "] 
  "30064771089" -> "68719476745"  [ label = "AST: "] 
  "30064771089" -> "90194313216"  [ label = "AST: "] 
  "30064771090" -> "68719476746"  [ label = "AST: "] 
  "30064771090" -> "30064771091"  [ label = "AST: "] 
  "30064771091" -> "68719476747"  [ label = "AST: "] 
  "30064771091" -> "90194313217"  [ label = "AST: "] 
  "30064771092" -> "68719476748"  [ label = "AST: "] 
  "30064771092" -> "30064771093"  [ label = "AST: "] 
  "30064771093" -> "68719476749"  [ label = "AST: "] 
  "30064771093" -> "90194313218"  [ label = "AST: "] 
  "30064771094" -> "68719476750"  [ label = "AST: "] 
  "30064771094" -> "30064771095"  [ label = "AST: "] 
  "30064771095" -> "68719476751"  [ label = "AST: "] 
  "30064771095" -> "90194313219"  [ label = "AST: "] 
  "30064771096" -> "68719476752"  [ label = "AST: "] 
  "30064771096" -> "30064771097"  [ label = "AST: "] 
  "30064771096" -> "30064771099"  [ label = "AST: "] 
  "30064771097" -> "30064771098"  [ label = "AST: "] 
  "30064771098" -> "68719476753"  [ label = "AST: "] 
  "30064771099" -> "90194313220"  [ label = "AST: "] 
  "30064771099" -> "30064771100"  [ label = "AST: "] 
  "30064771100" -> "68719476754"  [ label = "AST: "] 
  "30064771101" -> "68719476755"  [ label = "AST: "] 
  "30064771101" -> "30064771102"  [ label = "AST: "] 
  "30064771101" -> "30064771104"  [ label = "AST: "] 
  "30064771102" -> "30064771103"  [ label = "AST: "] 
  "30064771103" -> "68719476756"  [ label = "AST: "] 
  "30064771104" -> "90194313221"  [ label = "AST: "] 
  "30064771104" -> "30064771105"  [ label = "AST: "] 
  "30064771105" -> "68719476757"  [ label = "AST: "] 
  "30064771106" -> "68719476758"  [ label = "AST: "] 
  "30064771106" -> "30064771107"  [ label = "AST: "] 
  "30064771106" -> "30064771109"  [ label = "AST: "] 
  "30064771107" -> "30064771108"  [ label = "AST: "] 
  "30064771108" -> "68719476759"  [ label = "AST: "] 
  "30064771109" -> "90194313222"  [ label = "AST: "] 
  "30064771109" -> "30064771110"  [ label = "AST: "] 
  "30064771110" -> "68719476760"  [ label = "AST: "] 
  "30064771111" -> "68719476761"  [ label = "AST: "] 
  "30064771111" -> "30064771112"  [ label = "AST: "] 
  "30064771111" -> "30064771114"  [ label = "AST: "] 
  "30064771112" -> "30064771113"  [ label = "AST: "] 
  "30064771113" -> "68719476762"  [ label = "AST: "] 
  "30064771114" -> "90194313223"  [ label = "AST: "] 
  "30064771114" -> "30064771115"  [ label = "AST: "] 
  "30064771115" -> "68719476763"  [ label = "AST: "] 
  "47244640256" -> "30064771116"  [ label = "AST: "] 
  "47244640256" -> "25769803778"  [ label = "AST: "] 
  "30064771116" -> "30064771117"  [ label = "AST: "] 
  "30064771116" -> "30064771122"  [ label = "AST: "] 
  "30064771117" -> "30064771118"  [ label = "AST: "] 
  "30064771117" -> "30064771120"  [ label = "AST: "] 
  "30064771118" -> "30064771119"  [ label = "AST: "] 
  "30064771118" -> "55834574852"  [ label = "AST: "] 
  "30064771119" -> "68719476764"  [ label = "AST: "] 
  "30064771119" -> "68719476765"  [ label = "AST: "] 
  "30064771120" -> "30064771121"  [ label = "AST: "] 
  "30064771120" -> "55834574853"  [ label = "AST: "] 
  "30064771121" -> "68719476766"  [ label = "AST: "] 
  "30064771121" -> "68719476767"  [ label = "AST: "] 
  "30064771122" -> "30064771123"  [ label = "AST: "] 
  "30064771122" -> "55834574854"  [ label = "AST: "] 
  "30064771123" -> "68719476768"  [ label = "AST: "] 
  "30064771123" -> "68719476769"  [ label = "AST: "] 
  "25769803778" -> "94489280516"  [ label = "AST: "] 
  "25769803778" -> "94489280517"  [ label = "AST: "] 
  "25769803778" -> "30064771124"  [ label = "AST: "] 
  "25769803778" -> "94489280518"  [ label = "AST: "] 
  "25769803778" -> "30064771127"  [ label = "AST: "] 
  "25769803778" -> "94489280519"  [ label = "AST: "] 
  "25769803778" -> "30064771131"  [ label = "AST: "] 
  "25769803778" -> "94489280520"  [ label = "AST: "] 
  "25769803778" -> "30064771133"  [ label = "AST: "] 
  "25769803778" -> "30064771135"  [ label = "AST: "] 
  "25769803778" -> "30064771140"  [ label = "AST: "] 
  "25769803778" -> "94489280521"  [ label = "AST: "] 
  "25769803778" -> "30064771145"  [ label = "AST: "] 
  "25769803778" -> "94489280522"  [ label = "AST: "] 
  "25769803778" -> "30064771148"  [ label = "AST: "] 
  "25769803778" -> "94489280523"  [ label = "AST: "] 
  "25769803778" -> "30064771151"  [ label = "AST: "] 
  "25769803778" -> "94489280524"  [ label = "AST: "] 
  "25769803778" -> "30064771155"  [ label = "AST: "] 
  "25769803778" -> "47244640257"  [ label = "AST: "] 
  "25769803778" -> "94489280525"  [ label = "AST: "] 
  "25769803778" -> "30064771181"  [ label = "AST: "] 
  "25769803778" -> "30064771182"  [ label = "AST: "] 
  "30064771124" -> "68719476770"  [ label = "AST: "] 
  "30064771124" -> "30064771125"  [ label = "AST: "] 
  "30064771124" -> "30064771126"  [ label = "AST: "] 
  "30064771125" -> "68719476771"  [ label = "AST: "] 
  "30064771126" -> "68719476772"  [ label = "AST: "] 
  "30064771127" -> "68719476773"  [ label = "AST: "] 
  "30064771127" -> "30064771128"  [ label = "AST: "] 
  "30064771128" -> "30064771129"  [ label = "AST: "] 
  "30064771128" -> "30064771130"  [ label = "AST: "] 
  "30064771129" -> "68719476774"  [ label = "AST: "] 
  "30064771130" -> "68719476775"  [ label = "AST: "] 
  "30064771131" -> "68719476776"  [ label = "AST: "] 
  "30064771131" -> "30064771132"  [ label = "AST: "] 
  "30064771132" -> "68719476777"  [ label = "AST: "] 
  "30064771132" -> "90194313224"  [ label = "AST: "] 
  "30064771133" -> "68719476778"  [ label = "AST: "] 
  "30064771133" -> "30064771134"  [ label = "AST: "] 
  "30064771134" -> "68719476779"  [ label = "AST: "] 
  "30064771134" -> "90194313225"  [ label = "AST: "] 
  "30064771135" -> "68719476780"  [ label = "AST: "] 
  "30064771135" -> "30064771136"  [ label = "AST: "] 
  "30064771135" -> "30064771138"  [ label = "AST: "] 
  "30064771136" -> "30064771137"  [ label = "AST: "] 
  "30064771137" -> "68719476781"  [ label = "AST: "] 
  "30064771138" -> "90194313226"  [ label = "AST: "] 
  "30064771138" -> "30064771139"  [ label = "AST: "] 
  "30064771139" -> "68719476782"  [ label = "AST: "] 
  "30064771140" -> "68719476783"  [ label = "AST: "] 
  "30064771140" -> "30064771141"  [ label = "AST: "] 
  "30064771140" -> "30064771143"  [ label = "AST: "] 
  "30064771141" -> "30064771142"  [ label = "AST: "] 
  "30064771142" -> "68719476784"  [ label = "AST: "] 
  "30064771143" -> "90194313227"  [ label = "AST: "] 
  "30064771143" -> "30064771144"  [ label = "AST: "] 
  "30064771144" -> "68719476785"  [ label = "AST: "] 
  "30064771145" -> "68719476786"  [ label = "AST: "] 
  "30064771145" -> "30064771146"  [ label = "AST: "] 
  "30064771146" -> "30064771147"  [ label = "AST: "] 
  "30064771147" -> "68719476787"  [ label = "AST: "] 
  "30064771148" -> "68719476788"  [ label = "AST: "] 
  "30064771148" -> "30064771149"  [ label = "AST: "] 
  "30064771149" -> "30064771150"  [ label = "AST: "] 
  "30064771150" -> "68719476789"  [ label = "AST: "] 
  "30064771151" -> "68719476790"  [ label = "AST: "] 
  "30064771151" -> "30064771152"  [ label = "AST: "] 
  "30064771152" -> "30064771153"  [ label = "AST: "] 
  "30064771152" -> "30064771154"  [ label = "AST: "] 
  "30064771153" -> "68719476791"  [ label = "AST: "] 
  "30064771154" -> "68719476792"  [ label = "AST: "] 
  "30064771155" -> "68719476793"  [ label = "AST: "] 
  "30064771155" -> "90194313228"  [ label = "AST: "] 
  "47244640257" -> "30064771156"  [ label = "AST: "] 
  "47244640257" -> "25769803779"  [ label = "AST: "] 
  "47244640257" -> "47244640258"  [ label = "AST: "] 
  "30064771156" -> "30064771157"  [ label = "AST: "] 
  "30064771156" -> "55834574855"  [ label = "AST: "] 
  "30064771157" -> "68719476794"  [ label = "AST: "] 
  "30064771157" -> "68719476795"  [ label = "AST: "] 
  "25769803779" -> "30064771158"  [ label = "AST: "] 
  "30064771158" -> "68719476796"  [ label = "AST: "] 
  "30064771158" -> "30064771159"  [ label = "AST: "] 
  "30064771159" -> "30064771160"  [ label = "AST: "] 
  "30064771159" -> "30064771161"  [ label = "AST: "] 
  "30064771160" -> "68719476797"  [ label = "AST: "] 
  "30064771160" -> "68719476798"  [ label = "AST: "] 
  "30064771161" -> "184683593728"  [ label = "AST: "] 
  "30064771161" -> "30064771162"  [ label = "AST: "] 
  "30064771162" -> "90194313229"  [ label = "AST: "] 
  "30064771162" -> "90194313230"  [ label = "AST: "] 
  "47244640258" -> "25769803780"  [ label = "AST: "] 
  "25769803780" -> "47244640259"  [ label = "AST: "] 
  "47244640259" -> "30064771163"  [ label = "AST: "] 
  "47244640259" -> "25769803781"  [ label = "AST: "] 
  "47244640259" -> "47244640260"  [ label = "AST: "] 
  "30064771163" -> "30064771164"  [ label = "AST: "] 
  "30064771163" -> "55834574856"  [ label = "AST: "] 
  "30064771164" -> "68719476799"  [ label = "AST: "] 
  "30064771164" -> "68719476800"  [ label = "AST: "] 
  "25769803781" -> "30064771165"  [ label = "AST: "] 
  "30064771165" -> "68719476801"  [ label = "AST: "] 
  "30064771165" -> "30064771166"  [ label = "AST: "] 
  "30064771166" -> "30064771167"  [ label = "AST: "] 
  "30064771166" -> "30064771168"  [ label = "AST: "] 
  "30064771167" -> "68719476802"  [ label = "AST: "] 
  "30064771167" -> "68719476803"  [ label = "AST: "] 
  "30064771168" -> "184683593729"  [ label = "AST: "] 
  "30064771168" -> "30064771169"  [ label = "AST: "] 
  "30064771169" -> "90194313231"  [ label = "AST: "] 
  "30064771169" -> "90194313232"  [ label = "AST: "] 
  "47244640260" -> "25769803782"  [ label = "AST: "] 
  "25769803782" -> "47244640261"  [ label = "AST: "] 
  "47244640261" -> "30064771170"  [ label = "AST: "] 
  "47244640261" -> "25769803783"  [ label = "AST: "] 
  "47244640261" -> "47244640262"  [ label = "AST: "] 
  "30064771170" -> "30064771171"  [ label = "AST: "] 
  "30064771170" -> "55834574857"  [ label = "AST: "] 
  "30064771171" -> "68719476804"  [ label = "AST: "] 
  "30064771171" -> "68719476805"  [ label = "AST: "] 
  "25769803783" -> "30064771172"  [ label = "AST: "] 
  "30064771172" -> "68719476806"  [ label = "AST: "] 
  "30064771172" -> "30064771173"  [ label = "AST: "] 
  "30064771173" -> "68719476807"  [ label = "AST: "] 
  "30064771173" -> "30064771174"  [ label = "AST: "] 
  "30064771174" -> "184683593730"  [ label = "AST: "] 
  "30064771174" -> "30064771175"  [ label = "AST: "] 
  "30064771175" -> "90194313233"  [ label = "AST: "] 
  "30064771175" -> "90194313234"  [ label = "AST: "] 
  "47244640262" -> "25769803784"  [ label = "AST: "] 
  "25769803784" -> "30064771176"  [ label = "AST: "] 
  "30064771176" -> "68719476808"  [ label = "AST: "] 
  "30064771176" -> "30064771177"  [ label = "AST: "] 
  "30064771177" -> "30064771178"  [ label = "AST: "] 
  "30064771177" -> "30064771179"  [ label = "AST: "] 
  "30064771178" -> "68719476809"  [ label = "AST: "] 
  "30064771178" -> "68719476810"  [ label = "AST: "] 
  "30064771179" -> "184683593731"  [ label = "AST: "] 
  "30064771179" -> "30064771180"  [ label = "AST: "] 
  "30064771180" -> "90194313235"  [ label = "AST: "] 
  "30064771180" -> "90194313236"  [ label = "AST: "] 
  "30064771181" -> "68719476811"  [ label = "AST: "] 
  "30064771181" -> "68719476812"  [ label = "AST: "] 
  "30064771182" -> "30064771183"  [ label = "AST: "] 
  "30064771182" -> "30064771184"  [ label = "AST: "] 
  "30064771183" -> "68719476813"  [ label = "AST: "] 
  "30064771183" -> "55834574858"  [ label = "AST: "] 
  "30064771184" -> "90194313237"  [ label = "AST: "] 
  "30064771184" -> "68719476814"  [ label = "AST: "] 
  "30064771072" -> "55834574849"  [ label = "CFG: "] 
  "30064771076" -> "55834574850"  [ label = "CFG: "] 
  "30064771080" -> "55834574851"  [ label = "CFG: "] 
  "30064771084" -> "30064771089"  [ label = "CFG: "] 
  "30064771088" -> "30064771091"  [ label = "CFG: "] 
  "30064771090" -> "30064771093"  [ label = "CFG: "] 
  "30064771092" -> "30064771095"  [ label = "CFG: "] 
  "30064771094" -> "30064771098"  [ label = "CFG: "] 
  "30064771096" -> "30064771103"  [ label = "CFG: "] 
  "30064771101" -> "30064771108"  [ label = "CFG: "] 
  "30064771106" -> "30064771113"  [ label = "CFG: "] 
  "30064771111" -> "30064771119"  [ label = "CFG: "] 
  "30064771073" -> "30064771075"  [ label = "CFG: "] 
  "30064771074" -> "30064771072"  [ label = "CFG: "] 
  "30064771077" -> "30064771079"  [ label = "CFG: "] 
  "30064771078" -> "30064771076"  [ label = "CFG: "] 
  "30064771081" -> "30064771083"  [ label = "CFG: "] 
  "30064771082" -> "30064771080"  [ label = "CFG: "] 
  "30064771085" -> "30064771087"  [ label = "CFG: "] 
  "30064771086" -> "30064771084"  [ label = "CFG: "] 
  "30064771089" -> "30064771088"  [ label = "CFG: "] 
  "30064771091" -> "30064771090"  [ label = "CFG: "] 
  "30064771093" -> "30064771092"  [ label = "CFG: "] 
  "30064771095" -> "30064771094"  [ label = "CFG: "] 
  "30064771097" -> "30064771100"  [ label = "CFG: "] 
  "30064771099" -> "30064771096"  [ label = "CFG: "] 
  "30064771102" -> "30064771105"  [ label = "CFG: "] 
  "30064771104" -> "30064771101"  [ label = "CFG: "] 
  "30064771107" -> "30064771110"  [ label = "CFG: "] 
  "30064771109" -> "30064771106"  [ label = "CFG: "] 
  "30064771112" -> "30064771115"  [ label = "CFG: "] 
  "30064771114" -> "30064771111"  [ label = "CFG: "] 
  "30064771116" -> "128849018880"  [ label = "CFG: "] 
  "30064771116" -> "30064771125"  [ label = "CFG: "] 
  "55834574848" -> "30064771073"  [ label = "CFG: "] 
  "30064771075" -> "30064771074"  [ label = "CFG: "] 
  "55834574849" -> "30064771077"  [ label = "CFG: "] 
  "30064771079" -> "30064771078"  [ label = "CFG: "] 
  "55834574850" -> "30064771081"  [ label = "CFG: "] 
  "30064771083" -> "30064771082"  [ label = "CFG: "] 
  "55834574851" -> "30064771085"  [ label = "CFG: "] 
  "30064771087" -> "30064771086"  [ label = "CFG: "] 
  "30064771098" -> "30064771097"  [ label = "CFG: "] 
  "30064771100" -> "30064771099"  [ label = "CFG: "] 
  "30064771103" -> "30064771102"  [ label = "CFG: "] 
  "30064771105" -> "30064771104"  [ label = "CFG: "] 
  "30064771108" -> "30064771107"  [ label = "CFG: "] 
  "30064771110" -> "30064771109"  [ label = "CFG: "] 
  "30064771113" -> "30064771112"  [ label = "CFG: "] 
  "30064771115" -> "30064771114"  [ label = "CFG: "] 
  "30064771117" -> "30064771116"  [ label = "CFG: "] 
  "30064771117" -> "30064771123"  [ label = "CFG: "] 
  "30064771122" -> "30064771116"  [ label = "CFG: "] 
  "30064771124" -> "30064771129"  [ label = "CFG: "] 
  "30064771127" -> "30064771132"  [ label = "CFG: "] 
  "30064771131" -> "30064771134"  [ label = "CFG: "] 
  "30064771133" -> "30064771137"  [ label = "CFG: "] 
  "30064771135" -> "30064771142"  [ label = "CFG: "] 
  "30064771140" -> "30064771147"  [ label = "CFG: "] 
  "30064771145" -> "30064771150"  [ label = "CFG: "] 
  "30064771148" -> "30064771153"  [ label = "CFG: "] 
  "30064771151" -> "30064771155"  [ label = "CFG: "] 
  "30064771155" -> "30064771157"  [ label = "CFG: "] 
  "30064771181" -> "55834574858"  [ label = "CFG: "] 
  "30064771182" -> "128849018880"  [ label = "CFG: "] 
  "30064771118" -> "30064771117"  [ label = "CFG: "] 
  "30064771118" -> "30064771121"  [ label = "CFG: "] 
  "30064771120" -> "30064771117"  [ label = "CFG: "] 
  "30064771123" -> "55834574854"  [ label = "CFG: "] 
  "55834574854" -> "30064771122"  [ label = "CFG: "] 
  "30064771125" -> "30064771126"  [ label = "CFG: "] 
  "30064771126" -> "30064771124"  [ label = "CFG: "] 
  "30064771128" -> "30064771127"  [ label = "CFG: "] 
  "30064771132" -> "30064771131"  [ label = "CFG: "] 
  "30064771134" -> "30064771133"  [ label = "CFG: "] 
  "30064771136" -> "30064771139"  [ label = "CFG: "] 
  "30064771138" -> "30064771135"  [ label = "CFG: "] 
  "30064771141" -> "30064771144"  [ label = "CFG: "] 
  "30064771143" -> "30064771140"  [ label = "CFG: "] 
  "30064771146" -> "30064771145"  [ label = "CFG: "] 
  "30064771149" -> "30064771148"  [ label = "CFG: "] 
  "30064771152" -> "30064771151"  [ label = "CFG: "] 
  "30064771156" -> "30064771160"  [ label = "CFG: "] 
  "30064771156" -> "30064771164"  [ label = "CFG: "] 
  "30064771183" -> "30064771184"  [ label = "CFG: "] 
  "30064771184" -> "30064771182"  [ label = "CFG: "] 
  "30064771119" -> "55834574852"  [ label = "CFG: "] 
  "55834574852" -> "30064771118"  [ label = "CFG: "] 
  "30064771121" -> "55834574853"  [ label = "CFG: "] 
  "55834574853" -> "30064771120"  [ label = "CFG: "] 
  "30064771129" -> "30064771130"  [ label = "CFG: "] 
  "30064771130" -> "30064771128"  [ label = "CFG: "] 
  "30064771137" -> "30064771136"  [ label = "CFG: "] 
  "30064771139" -> "30064771138"  [ label = "CFG: "] 
  "30064771142" -> "30064771141"  [ label = "CFG: "] 
  "30064771144" -> "30064771143"  [ label = "CFG: "] 
  "30064771147" -> "30064771146"  [ label = "CFG: "] 
  "30064771150" -> "30064771149"  [ label = "CFG: "] 
  "30064771153" -> "30064771154"  [ label = "CFG: "] 
  "30064771154" -> "30064771152"  [ label = "CFG: "] 
  "30064771157" -> "55834574855"  [ label = "CFG: "] 
  "55834574855" -> "30064771156"  [ label = "CFG: "] 
  "30064771158" -> "30064771181"  [ label = "CFG: "] 
  "55834574858" -> "30064771183"  [ label = "CFG: "] 
  "30064771159" -> "30064771158"  [ label = "CFG: "] 
  "30064771160" -> "184683593728"  [ label = "CFG: "] 
  "30064771161" -> "30064771159"  [ label = "CFG: "] 
  "30064771163" -> "30064771167"  [ label = "CFG: "] 
  "30064771163" -> "30064771171"  [ label = "CFG: "] 
  "184683593728" -> "30064771162"  [ label = "CFG: "] 
  "30064771162" -> "30064771161"  [ label = "CFG: "] 
  "30064771164" -> "55834574856"  [ label = "CFG: "] 
  "55834574856" -> "30064771163"  [ label = "CFG: "] 
  "30064771165" -> "30064771181"  [ label = "CFG: "] 
  "30064771166" -> "30064771165"  [ label = "CFG: "] 
  "30064771167" -> "184683593729"  [ label = "CFG: "] 
  "30064771168" -> "30064771166"  [ label = "CFG: "] 
  "30064771170" -> "184683593730"  [ label = "CFG: "] 
  "30064771170" -> "30064771178"  [ label = "CFG: "] 
  "184683593729" -> "30064771169"  [ label = "CFG: "] 
  "30064771169" -> "30064771168"  [ label = "CFG: "] 
  "30064771171" -> "55834574857"  [ label = "CFG: "] 
  "55834574857" -> "30064771170"  [ label = "CFG: "] 
  "30064771172" -> "30064771181"  [ label = "CFG: "] 
  "30064771173" -> "30064771172"  [ label = "CFG: "] 
  "30064771176" -> "30064771181"  [ label = "CFG: "] 
  "30064771174" -> "30064771173"  [ label = "CFG: "] 
  "30064771177" -> "30064771176"  [ label = "CFG: "] 
  "184683593730" -> "30064771175"  [ label = "CFG: "] 
  "30064771175" -> "30064771174"  [ label = "CFG: "] 
  "30064771178" -> "184683593731"  [ label = "CFG: "] 
  "30064771179" -> "30064771177"  [ label = "CFG: "] 
  "184683593731" -> "30064771180"  [ label = "CFG: "] 
  "30064771180" -> "30064771179"  [ label = "CFG: "] 
  "111669149697" -> "55834574848"  [ label = "CFG: "] 
  "115964116993" -> "128849018880"  [ label = "DDG: params"] 
  "30064771072" -> "128849018880"  [ label = "DDG: typeid(Tinput).name()"] 
  "30064771072" -> "128849018880"  [ label = "DDG: params.dtypes.append(typeid(Tinput).name())"] 
  "30064771076" -> "128849018880"  [ label = "DDG: typeid(Tweight).name()"] 
  "30064771076" -> "128849018880"  [ label = "DDG: params.dtypes.append(typeid(Tweight).name())"] 
  "30064771080" -> "128849018880"  [ label = "DDG: typeid(Tbias).name()"] 
  "30064771080" -> "128849018880"  [ label = "DDG: params.dtypes.append(typeid(Tbias).name())"] 
  "30064771084" -> "128849018880"  [ label = "DDG: params.dtypes"] 
  "30064771084" -> "128849018880"  [ label = "DDG: typeid(Toutput).name()"] 
  "30064771084" -> "128849018880"  [ label = "DDG: params.dtypes.append(typeid(Toutput).name())"] 
  "30064771088" -> "128849018880"  [ label = "DDG: context-&gt;input(3)"] 
  "30064771088" -> "128849018880"  [ label = "DDG: &amp; min_input_tensor = context-&gt;input(3)"] 
  "30064771090" -> "128849018880"  [ label = "DDG: context-&gt;input(4)"] 
  "30064771090" -> "128849018880"  [ label = "DDG: &amp; max_input_tensor = context-&gt;input(4)"] 
  "30064771092" -> "128849018880"  [ label = "DDG: context-&gt;input(5)"] 
  "30064771092" -> "128849018880"  [ label = "DDG: &amp; min_weight_tensor = context-&gt;input(5)"] 
  "30064771094" -> "128849018880"  [ label = "DDG: context-&gt;input(6)"] 
  "30064771094" -> "128849018880"  [ label = "DDG: &amp; max_weight_tensor = context-&gt;input(6)"] 
  "30064771097" -> "128849018880"  [ label = "DDG: min_input_tensor.shape()"] 
  "30064771096" -> "128849018880"  [ label = "DDG: TensorShapeUtils::IsScalar(min_input_tensor.shape())"] 
  "30064771100" -> "128849018880"  [ label = "DDG: min_input_tensor"] 
  "30064771099" -> "128849018880"  [ label = "DDG: min_input_tensor.dims()"] 
  "30064771096" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(&quot;`min_a` must be rank 0 but is rank &quot;,
                                        min_input_tensor.dims())"] 
  "30064771096" -> "128849018880"  [ label = "DDG: OP_REQUIRES(context, TensorShapeUtils::IsScalar(min_input_tensor.shape()),
                errors::InvalidArgument(&quot;`min_a` must be rank 0 but is rank &quot;,
                                        min_input_tensor.dims()))"] 
  "30064771102" -> "128849018880"  [ label = "DDG: max_input_tensor.shape()"] 
  "30064771101" -> "128849018880"  [ label = "DDG: TensorShapeUtils::IsScalar(max_input_tensor.shape())"] 
  "30064771105" -> "128849018880"  [ label = "DDG: max_input_tensor"] 
  "30064771104" -> "128849018880"  [ label = "DDG: max_input_tensor.dims()"] 
  "30064771101" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(&quot;`max_a` must be rank 0 but is rank &quot;,
                                        max_input_tensor.dims())"] 
  "30064771101" -> "128849018880"  [ label = "DDG: OP_REQUIRES(context, TensorShapeUtils::IsScalar(max_input_tensor.shape()),
                errors::InvalidArgument(&quot;`max_a` must be rank 0 but is rank &quot;,
                                        max_input_tensor.dims()))"] 
  "30064771107" -> "128849018880"  [ label = "DDG: min_weight_tensor.shape()"] 
  "30064771106" -> "128849018880"  [ label = "DDG: TensorShapeUtils::IsScalar(min_weight_tensor.shape())"] 
  "30064771110" -> "128849018880"  [ label = "DDG: min_weight_tensor"] 
  "30064771109" -> "128849018880"  [ label = "DDG: min_weight_tensor.dims()"] 
  "30064771106" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(&quot;`min_b` must be rank 0 but is rank &quot;,
                                        min_weight_tensor.dims())"] 
  "30064771106" -> "128849018880"  [ label = "DDG: OP_REQUIRES(context, TensorShapeUtils::IsScalar(min_weight_tensor.shape()),
                errors::InvalidArgument(&quot;`min_b` must be rank 0 but is rank &quot;,
                                        min_weight_tensor.dims()))"] 
  "30064771112" -> "128849018880"  [ label = "DDG: max_weight_tensor.shape()"] 
  "30064771111" -> "128849018880"  [ label = "DDG: TensorShapeUtils::IsScalar(max_weight_tensor.shape())"] 
  "30064771115" -> "128849018880"  [ label = "DDG: max_weight_tensor"] 
  "30064771114" -> "128849018880"  [ label = "DDG: max_weight_tensor.dims()"] 
  "30064771111" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(&quot;`max_b` must be rank 0 but is rank &quot;,
                                        max_weight_tensor.dims())"] 
  "30064771111" -> "128849018880"  [ label = "DDG: OP_REQUIRES(context, TensorShapeUtils::IsScalar(max_weight_tensor.shape()),
                errors::InvalidArgument(&quot;`max_b` must be rank 0 but is rank &quot;,
                                        max_weight_tensor.dims()))"] 
  "30064771117" -> "128849018880"  [ label = "DDG: std::is_same&lt;Toutput, quint8&gt;::value"] 
  "30064771117" -> "128849018880"  [ label = "DDG: std::is_same&lt;Toutput, qint8&gt;::value"] 
  "30064771116" -> "128849018880"  [ label = "DDG: std::is_same&lt;Toutput, quint8&gt;::value ||
        std::is_same&lt;Toutput, qint8&gt;::value"] 
  "30064771116" -> "128849018880"  [ label = "DDG: std::is_same&lt;Toutput, float&gt;::value"] 
  "30064771116" -> "128849018880"  [ label = "DDG: std::is_same&lt;Toutput, quint8&gt;::value ||
        std::is_same&lt;Toutput, qint8&gt;::value ||
        std::is_same&lt;Toutput, float&gt;::value"] 
  "30064771124" -> "128849018880"  [ label = "DDG: &amp;min_output_value"] 
  "30064771124" -> "128849018880"  [ label = "DDG: &amp;max_output_value"] 
  "30064771124" -> "128849018880"  [ label = "DDG: ComputeOutputRangeForInt32(context, &amp;min_output_value, &amp;max_output_value)"] 
  "30064771129" -> "128849018880"  [ label = "DDG: min_output_value"] 
  "30064771128" -> "128849018880"  [ label = "DDG: std::abs(min_output_value)"] 
  "30064771130" -> "128849018880"  [ label = "DDG: max_output_value"] 
  "30064771128" -> "128849018880"  [ label = "DDG: std::abs(max_output_value)"] 
  "30064771127" -> "128849018880"  [ label = "DDG: std::max(std::abs(min_output_value), std::abs(max_output_value))"] 
  "30064771127" -> "128849018880"  [ label = "DDG: scale_int32 =
          std::max(std::abs(min_output_value), std::abs(max_output_value))"] 
  "30064771131" -> "128849018880"  [ label = "DDG: context-&gt;input(7)"] 
  "30064771131" -> "128849018880"  [ label = "DDG: &amp; min_freezed_tensor = context-&gt;input(7)"] 
  "30064771133" -> "128849018880"  [ label = "DDG: context-&gt;input(8)"] 
  "30064771133" -> "128849018880"  [ label = "DDG: &amp; max_freezed_tensor = context-&gt;input(8)"] 
  "30064771136" -> "128849018880"  [ label = "DDG: min_freezed_tensor.shape()"] 
  "30064771135" -> "128849018880"  [ label = "DDG: TensorShapeUtils::IsScalar(min_freezed_tensor.shape())"] 
  "30064771138" -> "128849018880"  [ label = "DDG: min_freezed_tensor.dims()"] 
  "30064771135" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(
                      &quot;`min_freezed_output` must be rank 0 but is rank &quot;,
                      min_freezed_tensor.dims())"] 
  "30064771135" -> "128849018880"  [ label = "DDG: OP_REQUIRES(context,
                  TensorShapeUtils::IsScalar(min_freezed_tensor.shape()),
                  errors::InvalidArgument(
                      &quot;`min_freezed_output` must be rank 0 but is rank &quot;,
                      min_freezed_tensor.dims()))"] 
  "30064771140" -> "128849018880"  [ label = "DDG: context"] 
  "30064771141" -> "128849018880"  [ label = "DDG: max_freezed_tensor.shape()"] 
  "30064771140" -> "128849018880"  [ label = "DDG: TensorShapeUtils::IsScalar(max_freezed_tensor.shape())"] 
  "30064771143" -> "128849018880"  [ label = "DDG: max_freezed_tensor.dims()"] 
  "30064771140" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(
                      &quot;`max_freezed_output` must be rank 0 but is rank &quot;,
                      max_freezed_tensor.dims())"] 
  "30064771140" -> "128849018880"  [ label = "DDG: OP_REQUIRES(context,
                  TensorShapeUtils::IsScalar(max_freezed_tensor.shape()),
                  errors::InvalidArgument(
                      &quot;`max_freezed_output` must be rank 0 but is rank &quot;,
                      max_freezed_tensor.dims()))"] 
  "30064771147" -> "128849018880"  [ label = "DDG: min_freezed_tensor"] 
  "30064771146" -> "128849018880"  [ label = "DDG: min_freezed_tensor.scalar&lt;float&gt;()"] 
  "30064771145" -> "128849018880"  [ label = "DDG: min_freezed_tensor.scalar&lt;float&gt;()()"] 
  "30064771145" -> "128849018880"  [ label = "DDG: min_freezed_output = min_freezed_tensor.scalar&lt;float&gt;()()"] 
  "30064771150" -> "128849018880"  [ label = "DDG: max_freezed_tensor"] 
  "30064771149" -> "128849018880"  [ label = "DDG: max_freezed_tensor.scalar&lt;float&gt;()"] 
  "30064771148" -> "128849018880"  [ label = "DDG: max_freezed_tensor.scalar&lt;float&gt;()()"] 
  "30064771148" -> "128849018880"  [ label = "DDG: max_freezed_output = max_freezed_tensor.scalar&lt;float&gt;()()"] 
  "30064771151" -> "128849018880"  [ label = "DDG: scale_eightbit"] 
  "30064771153" -> "128849018880"  [ label = "DDG: min_freezed_output"] 
  "30064771152" -> "128849018880"  [ label = "DDG: std::abs(min_freezed_output)"] 
  "30064771154" -> "128849018880"  [ label = "DDG: max_freezed_output"] 
  "30064771152" -> "128849018880"  [ label = "DDG: std::abs(max_freezed_output)"] 
  "30064771151" -> "128849018880"  [ label = "DDG: std::max(std::abs(min_freezed_output), std::abs(max_freezed_output))"] 
  "30064771151" -> "128849018880"  [ label = "DDG: scale_eightbit =
          std::max(std::abs(min_freezed_output), std::abs(max_freezed_output))"] 
  "30064771155" -> "128849018880"  [ label = "DDG: scale = 1.0"] 
  "30064771178" -> "128849018880"  [ label = "DDG: scale_int32"] 
  "30064771178" -> "128849018880"  [ label = "DDG: scale_eightbit"] 
  "30064771177" -> "128849018880"  [ label = "DDG: scale_int32 / scale_eightbit"] 
  "30064771179" -> "128849018880"  [ label = "DDG: 1u &lt;&lt; 24"] 
  "30064771177" -> "128849018880"  [ label = "DDG: static_cast&lt;float&gt;(1u &lt;&lt; 24)"] 
  "30064771176" -> "128849018880"  [ label = "DDG: scale_int32 / scale_eightbit / static_cast&lt;float&gt;(1u &lt;&lt; 24)"] 
  "30064771176" -> "128849018880"  [ label = "DDG: scale = scale_int32 / scale_eightbit / static_cast&lt;float&gt;(1u &lt;&lt; 24)"] 
  "30064771173" -> "128849018880"  [ label = "DDG: scale_int32"] 
  "30064771174" -> "128849018880"  [ label = "DDG: 1u &lt;&lt; 31"] 
  "30064771173" -> "128849018880"  [ label = "DDG: static_cast&lt;float&gt;(1u &lt;&lt; 31)"] 
  "30064771172" -> "128849018880"  [ label = "DDG: scale_int32 / static_cast&lt;float&gt;(1u &lt;&lt; 31)"] 
  "30064771172" -> "128849018880"  [ label = "DDG: scale = scale_int32 / static_cast&lt;float&gt;(1u &lt;&lt; 31)"] 
  "30064771167" -> "128849018880"  [ label = "DDG: scale_int32"] 
  "30064771167" -> "128849018880"  [ label = "DDG: scale_eightbit"] 
  "30064771166" -> "128849018880"  [ label = "DDG: scale_int32 / scale_eightbit"] 
  "30064771168" -> "128849018880"  [ label = "DDG: 1u &lt;&lt; 24"] 
  "30064771166" -> "128849018880"  [ label = "DDG: static_cast&lt;float&gt;(1u &lt;&lt; 24)"] 
  "30064771165" -> "128849018880"  [ label = "DDG: scale_int32 / scale_eightbit / static_cast&lt;float&gt;(1u &lt;&lt; 24)"] 
  "30064771165" -> "128849018880"  [ label = "DDG: scale = scale_int32 / scale_eightbit / static_cast&lt;float&gt;(1u &lt;&lt; 24)"] 
  "30064771160" -> "128849018880"  [ label = "DDG: scale_int32"] 
  "30064771160" -> "128849018880"  [ label = "DDG: scale_eightbit"] 
  "30064771159" -> "128849018880"  [ label = "DDG: scale_int32 / scale_eightbit"] 
  "30064771161" -> "128849018880"  [ label = "DDG: 1u &lt;&lt; 23"] 
  "30064771159" -> "128849018880"  [ label = "DDG: static_cast&lt;float&gt;(1u &lt;&lt; 23)"] 
  "30064771158" -> "128849018880"  [ label = "DDG: scale_int32 / scale_eightbit / static_cast&lt;float&gt;(1u &lt;&lt; 23)"] 
  "30064771158" -> "128849018880"  [ label = "DDG: scale = scale_int32 / scale_eightbit / static_cast&lt;float&gt;(1u &lt;&lt; 23)"] 
  "30064771181" -> "128849018880"  [ label = "DDG: scale"] 
  "30064771181" -> "128849018880"  [ label = "DDG: output_scale.push_back(scale)"] 
  "30064771182" -> "128849018880"  [ label = "DDG: params.post_op_params"] 
  "30064771184" -> "128849018880"  [ label = "DDG: output_scale"] 
  "30064771182" -> "128849018880"  [ label = "DDG: {&quot;output_scale&quot;, output_scale}"] 
  "30064771182" -> "128849018880"  [ label = "DDG: params.post_op_params.push_back({&quot;output_scale&quot;, output_scale})"] 
  "30064771087" -> "128849018880"  [ label = "DDG: Toutput"] 
  "30064771075" -> "128849018880"  [ label = "DDG: Tinput"] 
  "30064771083" -> "128849018880"  [ label = "DDG: Tbias"] 
  "30064771079" -> "128849018880"  [ label = "DDG: Tweight"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "111669149697" -> "115964116993"  [ label = "DDG: "] 
  "30064771089" -> "30064771088"  [ label = "DDG: context"] 
  "30064771089" -> "30064771088"  [ label = "DDG: 3"] 
  "30064771091" -> "30064771090"  [ label = "DDG: context"] 
  "30064771091" -> "30064771090"  [ label = "DDG: 4"] 
  "30064771093" -> "30064771092"  [ label = "DDG: context"] 
  "30064771093" -> "30064771092"  [ label = "DDG: 5"] 
  "30064771095" -> "30064771094"  [ label = "DDG: context"] 
  "30064771095" -> "30064771094"  [ label = "DDG: 6"] 
  "115964116993" -> "30064771072"  [ label = "DDG: params"] 
  "115964116993" -> "30064771076"  [ label = "DDG: params"] 
  "30064771072" -> "30064771076"  [ label = "DDG: params.dtypes"] 
  "115964116993" -> "30064771080"  [ label = "DDG: params"] 
  "30064771076" -> "30064771080"  [ label = "DDG: params.dtypes"] 
  "115964116993" -> "30064771084"  [ label = "DDG: params"] 
  "30064771080" -> "30064771084"  [ label = "DDG: params.dtypes"] 
  "30064771095" -> "30064771096"  [ label = "DDG: context"] 
  "111669149697" -> "30064771096"  [ label = "DDG: "] 
  "30064771097" -> "30064771096"  [ label = "DDG: min_input_tensor.shape()"] 
  "30064771099" -> "30064771096"  [ label = "DDG: &quot;`min_a` must be rank 0 but is rank &quot;"] 
  "30064771099" -> "30064771096"  [ label = "DDG: min_input_tensor.dims()"] 
  "30064771096" -> "30064771101"  [ label = "DDG: context"] 
  "111669149697" -> "30064771101"  [ label = "DDG: "] 
  "30064771102" -> "30064771101"  [ label = "DDG: max_input_tensor.shape()"] 
  "30064771104" -> "30064771101"  [ label = "DDG: &quot;`max_a` must be rank 0 but is rank &quot;"] 
  "30064771104" -> "30064771101"  [ label = "DDG: max_input_tensor.dims()"] 
  "30064771101" -> "30064771106"  [ label = "DDG: context"] 
  "111669149697" -> "30064771106"  [ label = "DDG: "] 
  "30064771107" -> "30064771106"  [ label = "DDG: min_weight_tensor.shape()"] 
  "30064771109" -> "30064771106"  [ label = "DDG: &quot;`min_b` must be rank 0 but is rank &quot;"] 
  "30064771109" -> "30064771106"  [ label = "DDG: min_weight_tensor.dims()"] 
  "30064771106" -> "30064771111"  [ label = "DDG: context"] 
  "111669149697" -> "30064771111"  [ label = "DDG: "] 
  "30064771112" -> "30064771111"  [ label = "DDG: max_weight_tensor.shape()"] 
  "30064771114" -> "30064771111"  [ label = "DDG: &quot;`max_b` must be rank 0 but is rank &quot;"] 
  "30064771114" -> "30064771111"  [ label = "DDG: max_weight_tensor.dims()"] 
  "115964116992" -> "30064771089"  [ label = "DDG: context"] 
  "111669149697" -> "30064771089"  [ label = "DDG: "] 
  "30064771089" -> "30064771091"  [ label = "DDG: context"] 
  "111669149697" -> "30064771091"  [ label = "DDG: "] 
  "30064771091" -> "30064771093"  [ label = "DDG: context"] 
  "111669149697" -> "30064771093"  [ label = "DDG: "] 
  "30064771093" -> "30064771095"  [ label = "DDG: context"] 
  "111669149697" -> "30064771095"  [ label = "DDG: "] 
  "30064771098" -> "30064771097"  [ label = "DDG: min_input_tensor"] 
  "111669149697" -> "30064771099"  [ label = "DDG: "] 
  "30064771100" -> "30064771099"  [ label = "DDG: min_input_tensor"] 
  "30064771103" -> "30064771102"  [ label = "DDG: max_input_tensor"] 
  "111669149697" -> "30064771104"  [ label = "DDG: "] 
  "30064771105" -> "30064771104"  [ label = "DDG: max_input_tensor"] 
  "30064771108" -> "30064771107"  [ label = "DDG: min_weight_tensor"] 
  "111669149697" -> "30064771109"  [ label = "DDG: "] 
  "30064771110" -> "30064771109"  [ label = "DDG: min_weight_tensor"] 
  "30064771113" -> "30064771112"  [ label = "DDG: max_weight_tensor"] 
  "111669149697" -> "30064771114"  [ label = "DDG: "] 
  "30064771115" -> "30064771114"  [ label = "DDG: max_weight_tensor"] 
  "30064771117" -> "30064771116"  [ label = "DDG: std::is_same&lt;Toutput, quint8&gt;::value"] 
  "30064771117" -> "30064771116"  [ label = "DDG: std::is_same&lt;Toutput, qint8&gt;::value"] 
  "30064771128" -> "30064771127"  [ label = "DDG: std::abs(min_output_value)"] 
  "30064771128" -> "30064771127"  [ label = "DDG: std::abs(max_output_value)"] 
  "30064771132" -> "30064771131"  [ label = "DDG: context"] 
  "30064771132" -> "30064771131"  [ label = "DDG: 7"] 
  "30064771134" -> "30064771133"  [ label = "DDG: context"] 
  "30064771134" -> "30064771133"  [ label = "DDG: 8"] 
  "30064771146" -> "30064771145"  [ label = "DDG: min_freezed_tensor.scalar&lt;float&gt;()"] 
  "30064771149" -> "30064771148"  [ label = "DDG: max_freezed_tensor.scalar&lt;float&gt;()"] 
  "30064771152" -> "30064771151"  [ label = "DDG: std::abs(min_freezed_output)"] 
  "30064771152" -> "30064771151"  [ label = "DDG: std::abs(max_freezed_output)"] 
  "111669149697" -> "30064771155"  [ label = "DDG: "] 
  "30064771088" -> "30064771098"  [ label = "DDG: min_input_tensor"] 
  "111669149697" -> "30064771098"  [ label = "DDG: "] 
  "30064771098" -> "30064771100"  [ label = "DDG: min_input_tensor"] 
  "111669149697" -> "30064771100"  [ label = "DDG: "] 
  "30064771090" -> "30064771103"  [ label = "DDG: max_input_tensor"] 
  "111669149697" -> "30064771103"  [ label = "DDG: "] 
  "30064771103" -> "30064771105"  [ label = "DDG: max_input_tensor"] 
  "111669149697" -> "30064771105"  [ label = "DDG: "] 
  "30064771092" -> "30064771108"  [ label = "DDG: min_weight_tensor"] 
  "111669149697" -> "30064771108"  [ label = "DDG: "] 
  "30064771108" -> "30064771110"  [ label = "DDG: min_weight_tensor"] 
  "111669149697" -> "30064771110"  [ label = "DDG: "] 
  "30064771094" -> "30064771113"  [ label = "DDG: max_weight_tensor"] 
  "111669149697" -> "30064771113"  [ label = "DDG: "] 
  "30064771113" -> "30064771115"  [ label = "DDG: max_weight_tensor"] 
  "111669149697" -> "30064771115"  [ label = "DDG: "] 
  "30064771111" -> "30064771124"  [ label = "DDG: context"] 
  "111669149697" -> "30064771124"  [ label = "DDG: "] 
  "30064771134" -> "30064771135"  [ label = "DDG: context"] 
  "111669149697" -> "30064771135"  [ label = "DDG: "] 
  "30064771136" -> "30064771135"  [ label = "DDG: min_freezed_tensor.shape()"] 
  "30064771138" -> "30064771135"  [ label = "DDG: &quot;`min_freezed_output` must be rank 0 but is rank &quot;"] 
  "30064771138" -> "30064771135"  [ label = "DDG: min_freezed_tensor.dims()"] 
  "30064771135" -> "30064771140"  [ label = "DDG: context"] 
  "111669149697" -> "30064771140"  [ label = "DDG: "] 
  "30064771141" -> "30064771140"  [ label = "DDG: max_freezed_tensor.shape()"] 
  "30064771143" -> "30064771140"  [ label = "DDG: &quot;`max_freezed_output` must be rank 0 but is rank &quot;"] 
  "30064771143" -> "30064771140"  [ label = "DDG: max_freezed_tensor.dims()"] 
  "111669149697" -> "30064771181"  [ label = "DDG: "] 
  "30064771176" -> "30064771181"  [ label = "DDG: scale"] 
  "30064771172" -> "30064771181"  [ label = "DDG: scale"] 
  "30064771165" -> "30064771181"  [ label = "DDG: scale"] 
  "30064771158" -> "30064771181"  [ label = "DDG: scale"] 
  "115964116993" -> "30064771182"  [ label = "DDG: params"] 
  "30064771184" -> "30064771182"  [ label = "DDG: &quot;output_scale&quot;"] 
  "30064771184" -> "30064771182"  [ label = "DDG: output_scale"] 
  "30064771129" -> "30064771128"  [ label = "DDG: min_output_value"] 
  "30064771130" -> "30064771128"  [ label = "DDG: max_output_value"] 
  "30064771124" -> "30064771132"  [ label = "DDG: context"] 
  "111669149697" -> "30064771132"  [ label = "DDG: "] 
  "30064771132" -> "30064771134"  [ label = "DDG: context"] 
  "111669149697" -> "30064771134"  [ label = "DDG: "] 
  "30064771137" -> "30064771136"  [ label = "DDG: min_freezed_tensor"] 
  "111669149697" -> "30064771138"  [ label = "DDG: "] 
  "30064771139" -> "30064771138"  [ label = "DDG: min_freezed_tensor"] 
  "30064771142" -> "30064771141"  [ label = "DDG: max_freezed_tensor"] 
  "111669149697" -> "30064771143"  [ label = "DDG: "] 
  "30064771144" -> "30064771143"  [ label = "DDG: max_freezed_tensor"] 
  "30064771147" -> "30064771146"  [ label = "DDG: min_freezed_tensor"] 
  "30064771150" -> "30064771149"  [ label = "DDG: max_freezed_tensor"] 
  "30064771153" -> "30064771152"  [ label = "DDG: min_freezed_output"] 
  "30064771154" -> "30064771152"  [ label = "DDG: max_freezed_output"] 
  "30064771159" -> "30064771158"  [ label = "DDG: scale_int32 / scale_eightbit"] 
  "30064771159" -> "30064771158"  [ label = "DDG: static_cast&lt;float&gt;(1u &lt;&lt; 23)"] 
  "111669149697" -> "30064771184"  [ label = "DDG: "] 
  "30064771181" -> "30064771184"  [ label = "DDG: output_scale"] 
  "30064771124" -> "30064771129"  [ label = "DDG: &amp;min_output_value"] 
  "111669149697" -> "30064771129"  [ label = "DDG: "] 
  "30064771124" -> "30064771130"  [ label = "DDG: &amp;max_output_value"] 
  "111669149697" -> "30064771130"  [ label = "DDG: "] 
  "30064771131" -> "30064771137"  [ label = "DDG: min_freezed_tensor"] 
  "111669149697" -> "30064771137"  [ label = "DDG: "] 
  "30064771137" -> "30064771139"  [ label = "DDG: min_freezed_tensor"] 
  "111669149697" -> "30064771139"  [ label = "DDG: "] 
  "30064771133" -> "30064771142"  [ label = "DDG: max_freezed_tensor"] 
  "111669149697" -> "30064771142"  [ label = "DDG: "] 
  "30064771142" -> "30064771144"  [ label = "DDG: max_freezed_tensor"] 
  "111669149697" -> "30064771144"  [ label = "DDG: "] 
  "30064771139" -> "30064771147"  [ label = "DDG: min_freezed_tensor"] 
  "111669149697" -> "30064771147"  [ label = "DDG: "] 
  "30064771144" -> "30064771150"  [ label = "DDG: max_freezed_tensor"] 
  "111669149697" -> "30064771150"  [ label = "DDG: "] 
  "30064771145" -> "30064771153"  [ label = "DDG: min_freezed_output"] 
  "111669149697" -> "30064771153"  [ label = "DDG: "] 
  "30064771148" -> "30064771154"  [ label = "DDG: max_freezed_output"] 
  "111669149697" -> "30064771154"  [ label = "DDG: "] 
  "30064771160" -> "30064771159"  [ label = "DDG: scale_int32"] 
  "30064771160" -> "30064771159"  [ label = "DDG: scale_eightbit"] 
  "30064771162" -> "30064771159"  [ label = "DDG: 1u"] 
  "30064771162" -> "30064771159"  [ label = "DDG: 23"] 
  "30064771127" -> "30064771160"  [ label = "DDG: scale_int32"] 
  "111669149697" -> "30064771160"  [ label = "DDG: "] 
  "30064771151" -> "30064771160"  [ label = "DDG: scale_eightbit"] 
  "30064771162" -> "30064771161"  [ label = "DDG: 1u"] 
  "30064771162" -> "30064771161"  [ label = "DDG: 23"] 
  "30064771166" -> "30064771165"  [ label = "DDG: scale_int32 / scale_eightbit"] 
  "30064771166" -> "30064771165"  [ label = "DDG: static_cast&lt;float&gt;(1u &lt;&lt; 24)"] 
  "111669149697" -> "30064771162"  [ label = "DDG: "] 
  "30064771167" -> "30064771166"  [ label = "DDG: scale_int32"] 
  "30064771167" -> "30064771166"  [ label = "DDG: scale_eightbit"] 
  "30064771169" -> "30064771166"  [ label = "DDG: 1u"] 
  "30064771169" -> "30064771166"  [ label = "DDG: 24"] 
  "30064771127" -> "30064771167"  [ label = "DDG: scale_int32"] 
  "111669149697" -> "30064771167"  [ label = "DDG: "] 
  "30064771151" -> "30064771167"  [ label = "DDG: scale_eightbit"] 
  "30064771169" -> "30064771168"  [ label = "DDG: 1u"] 
  "30064771169" -> "30064771168"  [ label = "DDG: 24"] 
  "30064771173" -> "30064771172"  [ label = "DDG: scale_int32"] 
  "30064771173" -> "30064771172"  [ label = "DDG: static_cast&lt;float&gt;(1u &lt;&lt; 31)"] 
  "111669149697" -> "30064771169"  [ label = "DDG: "] 
  "30064771177" -> "30064771176"  [ label = "DDG: scale_int32 / scale_eightbit"] 
  "30064771177" -> "30064771176"  [ label = "DDG: static_cast&lt;float&gt;(1u &lt;&lt; 24)"] 
  "30064771127" -> "30064771173"  [ label = "DDG: scale_int32"] 
  "111669149697" -> "30064771173"  [ label = "DDG: "] 
  "30064771175" -> "30064771173"  [ label = "DDG: 1u"] 
  "30064771175" -> "30064771173"  [ label = "DDG: 31"] 
  "30064771175" -> "30064771174"  [ label = "DDG: 1u"] 
  "30064771175" -> "30064771174"  [ label = "DDG: 31"] 
  "30064771178" -> "30064771177"  [ label = "DDG: scale_int32"] 
  "30064771178" -> "30064771177"  [ label = "DDG: scale_eightbit"] 
  "30064771180" -> "30064771177"  [ label = "DDG: 1u"] 
  "30064771180" -> "30064771177"  [ label = "DDG: 24"] 
  "111669149697" -> "30064771175"  [ label = "DDG: "] 
  "30064771127" -> "30064771178"  [ label = "DDG: scale_int32"] 
  "111669149697" -> "30064771178"  [ label = "DDG: "] 
  "30064771151" -> "30064771178"  [ label = "DDG: scale_eightbit"] 
  "30064771180" -> "30064771179"  [ label = "DDG: 1u"] 
  "30064771180" -> "30064771179"  [ label = "DDG: 24"] 
  "111669149697" -> "30064771180"  [ label = "DDG: "] 
  "30064771116" -> "30064771124"  [ label = "CDG: "] 
  "30064771116" -> "30064771125"  [ label = "CDG: "] 
  "30064771116" -> "30064771126"  [ label = "CDG: "] 
  "30064771116" -> "30064771135"  [ label = "CDG: "] 
  "30064771116" -> "30064771136"  [ label = "CDG: "] 
  "30064771116" -> "30064771137"  [ label = "CDG: "] 
  "30064771116" -> "30064771138"  [ label = "CDG: "] 
  "30064771116" -> "30064771139"  [ label = "CDG: "] 
  "30064771116" -> "30064771140"  [ label = "CDG: "] 
  "30064771116" -> "30064771141"  [ label = "CDG: "] 
  "30064771116" -> "30064771142"  [ label = "CDG: "] 
  "30064771116" -> "30064771127"  [ label = "CDG: "] 
  "30064771116" -> "30064771128"  [ label = "CDG: "] 
  "30064771116" -> "30064771129"  [ label = "CDG: "] 
  "30064771116" -> "30064771130"  [ label = "CDG: "] 
  "30064771116" -> "30064771131"  [ label = "CDG: "] 
  "30064771116" -> "30064771132"  [ label = "CDG: "] 
  "30064771116" -> "30064771133"  [ label = "CDG: "] 
  "30064771116" -> "30064771134"  [ label = "CDG: "] 
  "30064771116" -> "30064771151"  [ label = "CDG: "] 
  "30064771116" -> "30064771152"  [ label = "CDG: "] 
  "30064771116" -> "30064771153"  [ label = "CDG: "] 
  "30064771116" -> "30064771154"  [ label = "CDG: "] 
  "30064771116" -> "30064771155"  [ label = "CDG: "] 
  "30064771116" -> "30064771156"  [ label = "CDG: "] 
  "30064771116" -> "30064771157"  [ label = "CDG: "] 
  "30064771116" -> "30064771143"  [ label = "CDG: "] 
  "30064771116" -> "30064771144"  [ label = "CDG: "] 
  "30064771116" -> "30064771145"  [ label = "CDG: "] 
  "30064771116" -> "30064771146"  [ label = "CDG: "] 
  "30064771116" -> "30064771147"  [ label = "CDG: "] 
  "30064771116" -> "30064771148"  [ label = "CDG: "] 
  "30064771116" -> "30064771149"  [ label = "CDG: "] 
  "30064771116" -> "30064771150"  [ label = "CDG: "] 
  "30064771116" -> "30064771183"  [ label = "CDG: "] 
  "30064771116" -> "30064771184"  [ label = "CDG: "] 
  "30064771116" -> "30064771181"  [ label = "CDG: "] 
  "30064771116" -> "30064771182"  [ label = "CDG: "] 
  "30064771116" -> "55834574855"  [ label = "CDG: "] 
  "30064771116" -> "55834574858"  [ label = "CDG: "] 
  "30064771117" -> "30064771122"  [ label = "CDG: "] 
  "30064771117" -> "30064771123"  [ label = "CDG: "] 
  "30064771117" -> "55834574854"  [ label = "CDG: "] 
  "30064771118" -> "30064771120"  [ label = "CDG: "] 
  "30064771118" -> "30064771121"  [ label = "CDG: "] 
  "30064771118" -> "55834574853"  [ label = "CDG: "] 
  "30064771156" -> "30064771158"  [ label = "CDG: "] 
  "30064771156" -> "30064771159"  [ label = "CDG: "] 
  "30064771156" -> "30064771160"  [ label = "CDG: "] 
  "30064771156" -> "30064771161"  [ label = "CDG: "] 
  "30064771156" -> "30064771162"  [ label = "CDG: "] 
  "30064771156" -> "30064771163"  [ label = "CDG: "] 
  "30064771156" -> "184683593728"  [ label = "CDG: "] 
  "30064771156" -> "30064771164"  [ label = "CDG: "] 
  "30064771156" -> "55834574856"  [ label = "CDG: "] 
  "30064771163" -> "30064771167"  [ label = "CDG: "] 
  "30064771163" -> "30064771168"  [ label = "CDG: "] 
  "30064771163" -> "30064771169"  [ label = "CDG: "] 
  "30064771163" -> "30064771170"  [ label = "CDG: "] 
  "30064771163" -> "30064771171"  [ label = "CDG: "] 
  "30064771163" -> "184683593729"  [ label = "CDG: "] 
  "30064771163" -> "30064771165"  [ label = "CDG: "] 
  "30064771163" -> "30064771166"  [ label = "CDG: "] 
  "30064771163" -> "55834574857"  [ label = "CDG: "] 
  "30064771170" -> "184683593731"  [ label = "CDG: "] 
  "30064771170" -> "30064771172"  [ label = "CDG: "] 
  "30064771170" -> "30064771173"  [ label = "CDG: "] 
  "30064771170" -> "30064771174"  [ label = "CDG: "] 
  "30064771170" -> "184683593730"  [ label = "CDG: "] 
  "30064771170" -> "30064771175"  [ label = "CDG: "] 
  "30064771170" -> "30064771176"  [ label = "CDG: "] 
  "30064771170" -> "30064771177"  [ label = "CDG: "] 
  "30064771170" -> "30064771178"  [ label = "CDG: "] 
  "30064771170" -> "30064771179"  [ label = "CDG: "] 
  "30064771170" -> "30064771180"  [ label = "CDG: "] 
}
"""
)
