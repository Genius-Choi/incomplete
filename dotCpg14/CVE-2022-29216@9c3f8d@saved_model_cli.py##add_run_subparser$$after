[33mval[0m [36mres607[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "add_run_subparser" {  
"111669149697" [label = <(METHOD,add_run_subparser)<SUB>1</SUB>> ]
"25769803777" [label = <(BLOCK,,)<SUB>1</SUB>> ]
"90194313216" [label = <(LITERAL,&quot;&quot;&quot;Add parser for `run`.&quot;&quot;&quot;,)<SUB>2</SUB>> ]
"30064771074" [label = <(&lt;operator&gt;.assignment,run_msg = 'Usage example:\n' 'To run input tens...)<SUB>3</SUB>> ]
"68719476738" [label = <(IDENTIFIER,run_msg,run_msg = 'Usage example:\n' 'To run input tens...)<SUB>3</SUB>> ]
"30064771073" [label = <(&lt;operator&gt;.stringExpressionList,'Usage example:\n' 'To run input tensors from f...)<SUB>3</SUB>> ]
"90194313217" [label = <(LITERAL,'Usage example:\n','Usage example:\n' 'To run input tensors from f...)<SUB>3</SUB>> ]
"90194313218" [label = <(LITERAL,'To run input tensors from files through a Meta...,'Usage example:\n' 'To run input tensors from f...)<SUB>4</SUB>> ]
"90194313219" [label = <(LITERAL,' the output tensors to files:\n','Usage example:\n' 'To run input tensors from f...)<SUB>5</SUB>> ]
"90194313220" [label = <(LITERAL,'$saved_model_cli show --dir /tmp/saved_model -...,'Usage example:\n' 'To run input tensors from f...)<SUB>6</SUB>> ]
"90194313221" [label = <(LITERAL,'   --signature_def serving_default \\\n','Usage example:\n' 'To run input tensors from f...)<SUB>7</SUB>> ]
"90194313222" [label = <(LITERAL,'   --inputs input1_key=/tmp/124.npz[x],input2_...,'Usage example:\n' 'To run input tensors from f...)<SUB>8</SUB>> ]
"90194313223" [label = <(LITERAL,'\\\n','Usage example:\n' 'To run input tensors from f...)<SUB>9</SUB>> ]
"90194313224" [label = <(LITERAL,'   --input_exprs \'input3_key=np.ones(2)\' \\\n','Usage example:\n' 'To run input tensors from f...)<SUB>10</SUB>> ]
"90194313225" [label = <(LITERAL,'   --input_examples ','Usage example:\n' 'To run input tensors from f...)<SUB>11</SUB>> ]
"90194313226" [label = <(LITERAL,'\'input4_key=[{&quot;id&quot;:[26],&quot;weights&quot;:[0.5, 0.5]}...,'Usage example:\n' 'To run input tensors from f...)<SUB>12</SUB>> ]
"90194313227" [label = <(LITERAL,'   --outdir=/out\n\n','Usage example:\n' 'To run input tensors from f...)<SUB>13</SUB>> ]
"90194313228" [label = <(LITERAL,'For more information about input file format, ...,'Usage example:\n' 'To run input tensors from f...)<SUB>14</SUB>> ]
"90194313229" [label = <(LITERAL,'https://www.tensorflow.org/guide/saved_model_c...,'Usage example:\n' 'To run input tensors from f...)<SUB>15</SUB>> ]
"30064771078" [label = <(&lt;operator&gt;.assignment,parser_run = subparsers.add_parser('run', descr...)<SUB>16</SUB>> ]
"68719476743" [label = <(IDENTIFIER,parser_run,parser_run = subparsers.add_parser('run', descr...)<SUB>16</SUB>> ]
"30064771077" [label = <(add_parser,subparsers.add_parser('run', description = run_...)<SUB>16</SUB>> ]
"30064771076" [label = <(&lt;operator&gt;.fieldAccess,subparsers.add_parser)<SUB>16</SUB>> ]
"68719476741" [label = <(IDENTIFIER,subparsers,subparsers.add_parser('run', description = run_...)<SUB>16</SUB>> ]
"55834574849" [label = <(FIELD_IDENTIFIER,add_parser,add_parser)<SUB>16</SUB>> ]
"68719476742" [label = <(IDENTIFIER,subparsers,subparsers.add_parser('run', description = run_...)<SUB>16</SUB>> ]
"90194313230" [label = <(LITERAL,'run',subparsers.add_parser('run', description = run_...)<SUB>17</SUB>> ]
"68719476739" [label = <(IDENTIFIER,run_msg,subparsers.add_parser('run', description = run_...)<SUB>17</SUB>> ]
"30064771075" [label = <(&lt;operator&gt;.fieldAccess,argparse.RawTextHelpFormatter)<SUB>17</SUB>> ]
"68719476740" [label = <(IDENTIFIER,argparse,subparsers.add_parser('run', description = run_...)<SUB>17</SUB>> ]
"55834574848" [label = <(FIELD_IDENTIFIER,RawTextHelpFormatter,RawTextHelpFormatter)<SUB>17</SUB>> ]
"30064771080" [label = <(add_argument,parser_run.add_argument('--dir', type = str, re...)<SUB>18</SUB>> ]
"30064771079" [label = <(&lt;operator&gt;.fieldAccess,parser_run.add_argument)<SUB>18</SUB>> ]
"68719476745" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--dir', type = str, re...)<SUB>18</SUB>> ]
"55834574850" [label = <(FIELD_IDENTIFIER,add_argument,add_argument)<SUB>18</SUB>> ]
"68719476746" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--dir', type = str, re...)<SUB>18</SUB>> ]
"90194313231" [label = <(LITERAL,'--dir',parser_run.add_argument('--dir', type = str, re...)<SUB>19</SUB>> ]
"68719476744" [label = <(IDENTIFIER,str,parser_run.add_argument('--dir', type = str, re...)<SUB>20</SUB>> ]
"90194313232" [label = <(LITERAL,True,parser_run.add_argument('--dir', type = str, re...)<SUB>21</SUB>> ]
"90194313233" [label = <(LITERAL,'directory containing the SavedModel to execute',parser_run.add_argument('--dir', type = str, re...)<SUB>22</SUB>> ]
"30064771082" [label = <(add_argument,parser_run.add_argument('--tag_set', type = str...)<SUB>23</SUB>> ]
"30064771081" [label = <(&lt;operator&gt;.fieldAccess,parser_run.add_argument)<SUB>23</SUB>> ]
"68719476748" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--tag_set', type = str...)<SUB>23</SUB>> ]
"55834574851" [label = <(FIELD_IDENTIFIER,add_argument,add_argument)<SUB>23</SUB>> ]
"68719476749" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--tag_set', type = str...)<SUB>23</SUB>> ]
"90194313234" [label = <(LITERAL,'--tag_set',parser_run.add_argument('--tag_set', type = str...)<SUB>24</SUB>> ]
"68719476747" [label = <(IDENTIFIER,str,parser_run.add_argument('--tag_set', type = str...)<SUB>25</SUB>> ]
"90194313235" [label = <(LITERAL,True,parser_run.add_argument('--tag_set', type = str...)<SUB>26</SUB>> ]
"90194313236" [label = <(LITERAL,'tag-set of graph in SavedModel to load, separa...,parser_run.add_argument('--tag_set', type = str...)<SUB>27</SUB>> ]
"30064771084" [label = <(add_argument,parser_run.add_argument('--signature_def', type...)<SUB>28</SUB>> ]
"30064771083" [label = <(&lt;operator&gt;.fieldAccess,parser_run.add_argument)<SUB>28</SUB>> ]
"68719476751" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--signature_def', type...)<SUB>28</SUB>> ]
"55834574852" [label = <(FIELD_IDENTIFIER,add_argument,add_argument)<SUB>28</SUB>> ]
"68719476752" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--signature_def', type...)<SUB>28</SUB>> ]
"90194313237" [label = <(LITERAL,'--signature_def',parser_run.add_argument('--signature_def', type...)<SUB>29</SUB>> ]
"68719476750" [label = <(IDENTIFIER,str,parser_run.add_argument('--signature_def', type...)<SUB>30</SUB>> ]
"90194313238" [label = <(LITERAL,True,parser_run.add_argument('--signature_def', type...)<SUB>31</SUB>> ]
"90194313239" [label = <(LITERAL,'SIGNATURE_DEF_KEY',parser_run.add_argument('--signature_def', type...)<SUB>32</SUB>> ]
"90194313240" [label = <(LITERAL,'key of SignatureDef to run',parser_run.add_argument('--signature_def', type...)<SUB>33</SUB>> ]
"30064771086" [label = <(&lt;operator&gt;.assignment,msg = 'Loading inputs from files, in the format...)<SUB>34</SUB>> ]
"68719476753" [label = <(IDENTIFIER,msg,msg = 'Loading inputs from files, in the format...)<SUB>34</SUB>> ]
"30064771085" [label = <(&lt;operator&gt;.stringExpressionList,'Loading inputs from files, in the format of \'...)<SUB>34</SUB>> ]
"90194313241" [label = <(LITERAL,'Loading inputs from files, in the format of \'...,'Loading inputs from files, in the format of \'...)<SUB>34</SUB>> ]
"90194313242" [label = <(LITERAL,' or \'&lt;input_key&gt;=&lt;filename&gt;[&lt;variable_name&gt;]\...,'Loading inputs from files, in the format of \'...)<SUB>35</SUB>> ]
"90194313243" [label = <(LITERAL,' The file format can only be from .npy, .npz o...,'Loading inputs from files, in the format of \'...)<SUB>36</SUB>> ]
"30064771088" [label = <(add_argument,parser_run.add_argument('--inputs', type = str,...)<SUB>37</SUB>> ]
"30064771087" [label = <(&lt;operator&gt;.fieldAccess,parser_run.add_argument)<SUB>37</SUB>> ]
"68719476756" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--inputs', type = str,...)<SUB>37</SUB>> ]
"55834574853" [label = <(FIELD_IDENTIFIER,add_argument,add_argument)<SUB>37</SUB>> ]
"68719476757" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--inputs', type = str,...)<SUB>37</SUB>> ]
"90194313244" [label = <(LITERAL,'--inputs',parser_run.add_argument('--inputs', type = str,...)<SUB>37</SUB>> ]
"68719476754" [label = <(IDENTIFIER,str,parser_run.add_argument('--inputs', type = str,...)<SUB>37</SUB>> ]
"90194313245" [label = <(LITERAL,'',parser_run.add_argument('--inputs', type = str,...)<SUB>37</SUB>> ]
"68719476755" [label = <(IDENTIFIER,msg,parser_run.add_argument('--inputs', type = str,...)<SUB>37</SUB>> ]
"30064771090" [label = <(&lt;operator&gt;.assignment,msg = 'Specifying inputs by python expressions,...)<SUB>38</SUB>> ]
"68719476758" [label = <(IDENTIFIER,msg,msg = 'Specifying inputs by python expressions,...)<SUB>38</SUB>> ]
"30064771089" [label = <(&lt;operator&gt;.stringExpressionList,'Specifying inputs by python expressions, in th...)<SUB>38</SUB>> ]
"90194313246" [label = <(LITERAL,'Specifying inputs by python expressions, in th...,'Specifying inputs by python expressions, in th...)<SUB>38</SUB>> ]
"90194313247" [label = <(LITERAL,' &quot;&lt;input_key&gt;=\'&lt;python expression&gt;\'&quot;, separa...,'Specifying inputs by python expressions, in th...)<SUB>39</SUB>> ]
"90194313248" [label = <(LITERAL,'numpy module is available as \'np\'. Please no...,'Specifying inputs by python expressions, in th...)<SUB>40</SUB>> ]
"90194313249" [label = <(LITERAL,'will be evaluated as-is, and is susceptible to...,'Specifying inputs by python expressions, in th...)<SUB>41</SUB>> ]
"90194313250" [label = <(LITERAL,'When this is set, the value will override dupl...,'Specifying inputs by python expressions, in th...)<SUB>42</SUB>> ]
"90194313251" [label = <(LITERAL,'--inputs option.','Specifying inputs by python expressions, in th...)<SUB>43</SUB>> ]
"30064771092" [label = <(add_argument,parser_run.add_argument('--input_exprs', type =...)<SUB>44</SUB>> ]
"30064771091" [label = <(&lt;operator&gt;.fieldAccess,parser_run.add_argument)<SUB>44</SUB>> ]
"68719476761" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--input_exprs', type =...)<SUB>44</SUB>> ]
"55834574854" [label = <(FIELD_IDENTIFIER,add_argument,add_argument)<SUB>44</SUB>> ]
"68719476762" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--input_exprs', type =...)<SUB>44</SUB>> ]
"90194313252" [label = <(LITERAL,'--input_exprs',parser_run.add_argument('--input_exprs', type =...)<SUB>44</SUB>> ]
"68719476759" [label = <(IDENTIFIER,str,parser_run.add_argument('--input_exprs', type =...)<SUB>44</SUB>> ]
"90194313253" [label = <(LITERAL,'',parser_run.add_argument('--input_exprs', type =...)<SUB>44</SUB>> ]
"68719476760" [label = <(IDENTIFIER,msg,parser_run.add_argument('--input_exprs', type =...)<SUB>44</SUB>> ]
"30064771094" [label = <(&lt;operator&gt;.assignment,msg = 'Specifying tf.Example inputs as list of ...)<SUB>45</SUB>> ]
"68719476763" [label = <(IDENTIFIER,msg,msg = 'Specifying tf.Example inputs as list of ...)<SUB>45</SUB>> ]
"30064771093" [label = <(&lt;operator&gt;.stringExpressionList,'Specifying tf.Example inputs as list of dictio...)<SUB>46</SUB>> ]
"90194313254" [label = <(LITERAL,'Specifying tf.Example inputs as list of dictio...,'Specifying tf.Example inputs as list of dictio...)<SUB>46</SUB>> ]
"90194313255" [label = <(LITERAL,'&lt;input_key&gt;=[{feature0:value_list,feature1:val...,'Specifying tf.Example inputs as list of dictio...)<SUB>47</SUB>> ]
"90194313256" [label = <(LITERAL,'separate input keys. Will override duplicate i...,'Specifying tf.Example inputs as list of dictio...)<SUB>48</SUB>> ]
"90194313257" [label = <(LITERAL,'and --input_exprs option.','Specifying tf.Example inputs as list of dictio...)<SUB>49</SUB>> ]
"30064771096" [label = <(add_argument,parser_run.add_argument('--input_examples', typ...)<SUB>50</SUB>> ]
"30064771095" [label = <(&lt;operator&gt;.fieldAccess,parser_run.add_argument)<SUB>50</SUB>> ]
"68719476766" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--input_examples', typ...)<SUB>50</SUB>> ]
"55834574855" [label = <(FIELD_IDENTIFIER,add_argument,add_argument)<SUB>50</SUB>> ]
"68719476767" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--input_examples', typ...)<SUB>50</SUB>> ]
"90194313258" [label = <(LITERAL,'--input_examples',parser_run.add_argument('--input_examples', typ...)<SUB>50</SUB>> ]
"68719476764" [label = <(IDENTIFIER,str,parser_run.add_argument('--input_examples', typ...)<SUB>50</SUB>> ]
"90194313259" [label = <(LITERAL,'',parser_run.add_argument('--input_examples', typ...)<SUB>50</SUB>> ]
"68719476765" [label = <(IDENTIFIER,msg,parser_run.add_argument('--input_examples', typ...)<SUB>50</SUB>> ]
"30064771098" [label = <(add_argument,parser_run.add_argument('--outdir', type = str,...)<SUB>51</SUB>> ]
"30064771097" [label = <(&lt;operator&gt;.fieldAccess,parser_run.add_argument)<SUB>51</SUB>> ]
"68719476769" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--outdir', type = str,...)<SUB>51</SUB>> ]
"55834574856" [label = <(FIELD_IDENTIFIER,add_argument,add_argument)<SUB>51</SUB>> ]
"68719476770" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--outdir', type = str,...)<SUB>51</SUB>> ]
"90194313260" [label = <(LITERAL,'--outdir',parser_run.add_argument('--outdir', type = str,...)<SUB>52</SUB>> ]
"68719476768" [label = <(IDENTIFIER,str,parser_run.add_argument('--outdir', type = str,...)<SUB>53</SUB>> ]
"90194313261" [label = <(LITERAL,None,parser_run.add_argument('--outdir', type = str,...)<SUB>54</SUB>> ]
"90194313262" [label = <(LITERAL,'if specified, output tensor(s) will be saved t...,parser_run.add_argument('--outdir', type = str,...)<SUB>55</SUB>> ]
"30064771100" [label = <(add_argument,parser_run.add_argument('--overwrite', action =...)<SUB>56</SUB>> ]
"30064771099" [label = <(&lt;operator&gt;.fieldAccess,parser_run.add_argument)<SUB>56</SUB>> ]
"68719476771" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--overwrite', action =...)<SUB>56</SUB>> ]
"55834574857" [label = <(FIELD_IDENTIFIER,add_argument,add_argument)<SUB>56</SUB>> ]
"68719476772" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--overwrite', action =...)<SUB>56</SUB>> ]
"90194313263" [label = <(LITERAL,'--overwrite',parser_run.add_argument('--overwrite', action =...)<SUB>57</SUB>> ]
"90194313264" [label = <(LITERAL,'store_true',parser_run.add_argument('--overwrite', action =...)<SUB>58</SUB>> ]
"90194313265" [label = <(LITERAL,'if set, output file will be overwritten if it ...,parser_run.add_argument('--overwrite', action =...)<SUB>59</SUB>> ]
"30064771103" [label = <(add_argument,parser_run.add_argument('--tf_debug', action = ...)<SUB>60</SUB>> ]
"30064771102" [label = <(&lt;operator&gt;.fieldAccess,parser_run.add_argument)<SUB>60</SUB>> ]
"68719476773" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--tf_debug', action = ...)<SUB>60</SUB>> ]
"55834574858" [label = <(FIELD_IDENTIFIER,add_argument,add_argument)<SUB>60</SUB>> ]
"68719476774" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--tf_debug', action = ...)<SUB>60</SUB>> ]
"90194313266" [label = <(LITERAL,'--tf_debug',parser_run.add_argument('--tf_debug', action = ...)<SUB>61</SUB>> ]
"90194313267" [label = <(LITERAL,'store_true',parser_run.add_argument('--tf_debug', action = ...)<SUB>62</SUB>> ]
"30064771101" [label = <(&lt;operator&gt;.stringExpressionList,'if set, will use TensorFlow Debugger (tfdbg) t...)<SUB>63</SUB>> ]
"90194313268" [label = <(LITERAL,'if set, will use TensorFlow Debugger (tfdbg) t...,'if set, will use TensorFlow Debugger (tfdbg) t...)<SUB>63</SUB>> ]
"90194313269" [label = <(LITERAL,'intermediate Tensors and runtime GraphDefs whi...,'if set, will use TensorFlow Debugger (tfdbg) t...)<SUB>64</SUB>> ]
"90194313270" [label = <(LITERAL,'SavedModel.','if set, will use TensorFlow Debugger (tfdbg) t...)<SUB>65</SUB>> ]
"30064771106" [label = <(add_argument,parser_run.add_argument('--worker', type = str,...)<SUB>66</SUB>> ]
"30064771105" [label = <(&lt;operator&gt;.fieldAccess,parser_run.add_argument)<SUB>66</SUB>> ]
"68719476776" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--worker', type = str,...)<SUB>66</SUB>> ]
"55834574859" [label = <(FIELD_IDENTIFIER,add_argument,add_argument)<SUB>66</SUB>> ]
"68719476777" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--worker', type = str,...)<SUB>66</SUB>> ]
"90194313271" [label = <(LITERAL,'--worker',parser_run.add_argument('--worker', type = str,...)<SUB>67</SUB>> ]
"68719476775" [label = <(IDENTIFIER,str,parser_run.add_argument('--worker', type = str,...)<SUB>68</SUB>> ]
"90194313272" [label = <(LITERAL,None,parser_run.add_argument('--worker', type = str,...)<SUB>69</SUB>> ]
"30064771104" [label = <(&lt;operator&gt;.stringExpressionList,'if specified, a Session will be run on the wor...)<SUB>70</SUB>> ]
"90194313273" [label = <(LITERAL,'if specified, a Session will be run on the wor...,'if specified, a Session will be run on the wor...)<SUB>70</SUB>> ]
"90194313274" [label = <(LITERAL,'Valid worker specification is a bns or gRPC pa...,'if specified, a Session will be run on the wor...)<SUB>71</SUB>> ]
"30064771109" [label = <(add_argument,parser_run.add_argument('--init_tpu', action = ...)<SUB>72</SUB>> ]
"30064771108" [label = <(&lt;operator&gt;.fieldAccess,parser_run.add_argument)<SUB>72</SUB>> ]
"68719476778" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--init_tpu', action = ...)<SUB>72</SUB>> ]
"55834574860" [label = <(FIELD_IDENTIFIER,add_argument,add_argument)<SUB>72</SUB>> ]
"68719476779" [label = <(IDENTIFIER,parser_run,parser_run.add_argument('--init_tpu', action = ...)<SUB>72</SUB>> ]
"90194313275" [label = <(LITERAL,'--init_tpu',parser_run.add_argument('--init_tpu', action = ...)<SUB>73</SUB>> ]
"90194313276" [label = <(LITERAL,'store_true',parser_run.add_argument('--init_tpu', action = ...)<SUB>74</SUB>> ]
"90194313277" [label = <(LITERAL,None,parser_run.add_argument('--init_tpu', action = ...)<SUB>75</SUB>> ]
"30064771107" [label = <(&lt;operator&gt;.stringExpressionList,'if specified, tpu.initialize_system will be ca...)<SUB>76</SUB>> ]
"90194313278" [label = <(LITERAL,'if specified, tpu.initialize_system will be ca...,'if specified, tpu.initialize_system will be ca...)<SUB>76</SUB>> ]
"90194313279" [label = <(LITERAL,'This option should be only used if the worker ...,'if specified, tpu.initialize_system will be ca...)<SUB>77</SUB>> ]
"30064771111" [label = <(set_defaults,parser_run.set_defaults(func = run))<SUB>78</SUB>> ]
"30064771110" [label = <(&lt;operator&gt;.fieldAccess,parser_run.set_defaults)<SUB>78</SUB>> ]
"68719476781" [label = <(IDENTIFIER,parser_run,parser_run.set_defaults(func = run))<SUB>78</SUB>> ]
"55834574861" [label = <(FIELD_IDENTIFIER,set_defaults,set_defaults)<SUB>78</SUB>> ]
"68719476782" [label = <(IDENTIFIER,parser_run,parser_run.set_defaults(func = run))<SUB>78</SUB>> ]
"68719476780" [label = <(IDENTIFIER,run,parser_run.set_defaults(func = run))<SUB>78</SUB>> ]
"94489280514" [label = <(LOCAL,run_msg: ANY)<SUB>3</SUB>> ]
"94489280515" [label = <(LOCAL,argparse: ANY)<SUB>17</SUB>> ]
"94489280517" [label = <(LOCAL,parser_run: ANY)<SUB>16</SUB>> ]
"94489280518" [label = <(LOCAL,str: ANY)<SUB>20</SUB>> ]
"94489280519" [label = <(LOCAL,msg: ANY)<SUB>34</SUB>> ]
"94489280520" [label = <(LOCAL,run: ANY)<SUB>78</SUB>> ]
"133143986178" [label = <(MODIFIER,VIRTUAL)> ]
"115964116992" [label = <(PARAM,subparsers)<SUB>1</SUB>> ]
"128849018881" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
  "111669149697" -> "133143986178"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "128849018881"  [ label = "AST: "] 
  "25769803777" -> "90194313216"  [ label = "AST: "] 
  "25769803777" -> "94489280514"  [ label = "AST: "] 
  "25769803777" -> "30064771074"  [ label = "AST: "] 
  "25769803777" -> "94489280515"  [ label = "AST: "] 
  "25769803777" -> "30064771078"  [ label = "AST: "] 
  "25769803777" -> "94489280517"  [ label = "AST: "] 
  "25769803777" -> "30064771080"  [ label = "AST: "] 
  "25769803777" -> "94489280518"  [ label = "AST: "] 
  "25769803777" -> "30064771082"  [ label = "AST: "] 
  "25769803777" -> "94489280519"  [ label = "AST: "] 
  "25769803777" -> "30064771084"  [ label = "AST: "] 
  "25769803777" -> "94489280520"  [ label = "AST: "] 
  "25769803777" -> "30064771086"  [ label = "AST: "] 
  "25769803777" -> "30064771088"  [ label = "AST: "] 
  "25769803777" -> "30064771090"  [ label = "AST: "] 
  "25769803777" -> "30064771092"  [ label = "AST: "] 
  "25769803777" -> "30064771094"  [ label = "AST: "] 
  "25769803777" -> "30064771096"  [ label = "AST: "] 
  "25769803777" -> "30064771098"  [ label = "AST: "] 
  "25769803777" -> "30064771100"  [ label = "AST: "] 
  "25769803777" -> "30064771103"  [ label = "AST: "] 
  "25769803777" -> "30064771106"  [ label = "AST: "] 
  "25769803777" -> "30064771109"  [ label = "AST: "] 
  "25769803777" -> "30064771111"  [ label = "AST: "] 
  "30064771074" -> "68719476738"  [ label = "AST: "] 
  "30064771074" -> "30064771073"  [ label = "AST: "] 
  "30064771073" -> "90194313217"  [ label = "AST: "] 
  "30064771073" -> "90194313218"  [ label = "AST: "] 
  "30064771073" -> "90194313219"  [ label = "AST: "] 
  "30064771073" -> "90194313220"  [ label = "AST: "] 
  "30064771073" -> "90194313221"  [ label = "AST: "] 
  "30064771073" -> "90194313222"  [ label = "AST: "] 
  "30064771073" -> "90194313223"  [ label = "AST: "] 
  "30064771073" -> "90194313224"  [ label = "AST: "] 
  "30064771073" -> "90194313225"  [ label = "AST: "] 
  "30064771073" -> "90194313226"  [ label = "AST: "] 
  "30064771073" -> "90194313227"  [ label = "AST: "] 
  "30064771073" -> "90194313228"  [ label = "AST: "] 
  "30064771073" -> "90194313229"  [ label = "AST: "] 
  "30064771078" -> "68719476743"  [ label = "AST: "] 
  "30064771078" -> "30064771077"  [ label = "AST: "] 
  "30064771077" -> "30064771076"  [ label = "AST: "] 
  "30064771077" -> "68719476742"  [ label = "AST: "] 
  "30064771077" -> "90194313230"  [ label = "AST: "] 
  "30064771077" -> "68719476739"  [ label = "AST: "] 
  "30064771077" -> "30064771075"  [ label = "AST: "] 
  "30064771076" -> "68719476741"  [ label = "AST: "] 
  "30064771076" -> "55834574849"  [ label = "AST: "] 
  "30064771075" -> "68719476740"  [ label = "AST: "] 
  "30064771075" -> "55834574848"  [ label = "AST: "] 
  "30064771080" -> "30064771079"  [ label = "AST: "] 
  "30064771080" -> "68719476746"  [ label = "AST: "] 
  "30064771080" -> "90194313231"  [ label = "AST: "] 
  "30064771080" -> "68719476744"  [ label = "AST: "] 
  "30064771080" -> "90194313232"  [ label = "AST: "] 
  "30064771080" -> "90194313233"  [ label = "AST: "] 
  "30064771079" -> "68719476745"  [ label = "AST: "] 
  "30064771079" -> "55834574850"  [ label = "AST: "] 
  "30064771082" -> "30064771081"  [ label = "AST: "] 
  "30064771082" -> "68719476749"  [ label = "AST: "] 
  "30064771082" -> "90194313234"  [ label = "AST: "] 
  "30064771082" -> "68719476747"  [ label = "AST: "] 
  "30064771082" -> "90194313235"  [ label = "AST: "] 
  "30064771082" -> "90194313236"  [ label = "AST: "] 
  "30064771081" -> "68719476748"  [ label = "AST: "] 
  "30064771081" -> "55834574851"  [ label = "AST: "] 
  "30064771084" -> "30064771083"  [ label = "AST: "] 
  "30064771084" -> "68719476752"  [ label = "AST: "] 
  "30064771084" -> "90194313237"  [ label = "AST: "] 
  "30064771084" -> "68719476750"  [ label = "AST: "] 
  "30064771084" -> "90194313238"  [ label = "AST: "] 
  "30064771084" -> "90194313239"  [ label = "AST: "] 
  "30064771084" -> "90194313240"  [ label = "AST: "] 
  "30064771083" -> "68719476751"  [ label = "AST: "] 
  "30064771083" -> "55834574852"  [ label = "AST: "] 
  "30064771086" -> "68719476753"  [ label = "AST: "] 
  "30064771086" -> "30064771085"  [ label = "AST: "] 
  "30064771085" -> "90194313241"  [ label = "AST: "] 
  "30064771085" -> "90194313242"  [ label = "AST: "] 
  "30064771085" -> "90194313243"  [ label = "AST: "] 
  "30064771088" -> "30064771087"  [ label = "AST: "] 
  "30064771088" -> "68719476757"  [ label = "AST: "] 
  "30064771088" -> "90194313244"  [ label = "AST: "] 
  "30064771088" -> "68719476754"  [ label = "AST: "] 
  "30064771088" -> "90194313245"  [ label = "AST: "] 
  "30064771088" -> "68719476755"  [ label = "AST: "] 
  "30064771087" -> "68719476756"  [ label = "AST: "] 
  "30064771087" -> "55834574853"  [ label = "AST: "] 
  "30064771090" -> "68719476758"  [ label = "AST: "] 
  "30064771090" -> "30064771089"  [ label = "AST: "] 
  "30064771089" -> "90194313246"  [ label = "AST: "] 
  "30064771089" -> "90194313247"  [ label = "AST: "] 
  "30064771089" -> "90194313248"  [ label = "AST: "] 
  "30064771089" -> "90194313249"  [ label = "AST: "] 
  "30064771089" -> "90194313250"  [ label = "AST: "] 
  "30064771089" -> "90194313251"  [ label = "AST: "] 
  "30064771092" -> "30064771091"  [ label = "AST: "] 
  "30064771092" -> "68719476762"  [ label = "AST: "] 
  "30064771092" -> "90194313252"  [ label = "AST: "] 
  "30064771092" -> "68719476759"  [ label = "AST: "] 
  "30064771092" -> "90194313253"  [ label = "AST: "] 
  "30064771092" -> "68719476760"  [ label = "AST: "] 
  "30064771091" -> "68719476761"  [ label = "AST: "] 
  "30064771091" -> "55834574854"  [ label = "AST: "] 
  "30064771094" -> "68719476763"  [ label = "AST: "] 
  "30064771094" -> "30064771093"  [ label = "AST: "] 
  "30064771093" -> "90194313254"  [ label = "AST: "] 
  "30064771093" -> "90194313255"  [ label = "AST: "] 
  "30064771093" -> "90194313256"  [ label = "AST: "] 
  "30064771093" -> "90194313257"  [ label = "AST: "] 
  "30064771096" -> "30064771095"  [ label = "AST: "] 
  "30064771096" -> "68719476767"  [ label = "AST: "] 
  "30064771096" -> "90194313258"  [ label = "AST: "] 
  "30064771096" -> "68719476764"  [ label = "AST: "] 
  "30064771096" -> "90194313259"  [ label = "AST: "] 
  "30064771096" -> "68719476765"  [ label = "AST: "] 
  "30064771095" -> "68719476766"  [ label = "AST: "] 
  "30064771095" -> "55834574855"  [ label = "AST: "] 
  "30064771098" -> "30064771097"  [ label = "AST: "] 
  "30064771098" -> "68719476770"  [ label = "AST: "] 
  "30064771098" -> "90194313260"  [ label = "AST: "] 
  "30064771098" -> "68719476768"  [ label = "AST: "] 
  "30064771098" -> "90194313261"  [ label = "AST: "] 
  "30064771098" -> "90194313262"  [ label = "AST: "] 
  "30064771097" -> "68719476769"  [ label = "AST: "] 
  "30064771097" -> "55834574856"  [ label = "AST: "] 
  "30064771100" -> "30064771099"  [ label = "AST: "] 
  "30064771100" -> "68719476772"  [ label = "AST: "] 
  "30064771100" -> "90194313263"  [ label = "AST: "] 
  "30064771100" -> "90194313264"  [ label = "AST: "] 
  "30064771100" -> "90194313265"  [ label = "AST: "] 
  "30064771099" -> "68719476771"  [ label = "AST: "] 
  "30064771099" -> "55834574857"  [ label = "AST: "] 
  "30064771103" -> "30064771102"  [ label = "AST: "] 
  "30064771103" -> "68719476774"  [ label = "AST: "] 
  "30064771103" -> "90194313266"  [ label = "AST: "] 
  "30064771103" -> "90194313267"  [ label = "AST: "] 
  "30064771103" -> "30064771101"  [ label = "AST: "] 
  "30064771102" -> "68719476773"  [ label = "AST: "] 
  "30064771102" -> "55834574858"  [ label = "AST: "] 
  "30064771101" -> "90194313268"  [ label = "AST: "] 
  "30064771101" -> "90194313269"  [ label = "AST: "] 
  "30064771101" -> "90194313270"  [ label = "AST: "] 
  "30064771106" -> "30064771105"  [ label = "AST: "] 
  "30064771106" -> "68719476777"  [ label = "AST: "] 
  "30064771106" -> "90194313271"  [ label = "AST: "] 
  "30064771106" -> "68719476775"  [ label = "AST: "] 
  "30064771106" -> "90194313272"  [ label = "AST: "] 
  "30064771106" -> "30064771104"  [ label = "AST: "] 
  "30064771105" -> "68719476776"  [ label = "AST: "] 
  "30064771105" -> "55834574859"  [ label = "AST: "] 
  "30064771104" -> "90194313273"  [ label = "AST: "] 
  "30064771104" -> "90194313274"  [ label = "AST: "] 
  "30064771109" -> "30064771108"  [ label = "AST: "] 
  "30064771109" -> "68719476779"  [ label = "AST: "] 
  "30064771109" -> "90194313275"  [ label = "AST: "] 
  "30064771109" -> "90194313276"  [ label = "AST: "] 
  "30064771109" -> "90194313277"  [ label = "AST: "] 
  "30064771109" -> "30064771107"  [ label = "AST: "] 
  "30064771108" -> "68719476778"  [ label = "AST: "] 
  "30064771108" -> "55834574860"  [ label = "AST: "] 
  "30064771107" -> "90194313278"  [ label = "AST: "] 
  "30064771107" -> "90194313279"  [ label = "AST: "] 
  "30064771111" -> "30064771110"  [ label = "AST: "] 
  "30064771111" -> "68719476782"  [ label = "AST: "] 
  "30064771111" -> "68719476780"  [ label = "AST: "] 
  "30064771110" -> "68719476781"  [ label = "AST: "] 
  "30064771110" -> "55834574861"  [ label = "AST: "] 
  "30064771074" -> "55834574849"  [ label = "CFG: "] 
  "30064771078" -> "55834574850"  [ label = "CFG: "] 
  "30064771080" -> "55834574851"  [ label = "CFG: "] 
  "30064771082" -> "55834574852"  [ label = "CFG: "] 
  "30064771084" -> "30064771085"  [ label = "CFG: "] 
  "30064771086" -> "55834574853"  [ label = "CFG: "] 
  "30064771088" -> "30064771089"  [ label = "CFG: "] 
  "30064771090" -> "55834574854"  [ label = "CFG: "] 
  "30064771092" -> "30064771093"  [ label = "CFG: "] 
  "30064771094" -> "55834574855"  [ label = "CFG: "] 
  "30064771096" -> "55834574856"  [ label = "CFG: "] 
  "30064771098" -> "55834574857"  [ label = "CFG: "] 
  "30064771100" -> "55834574858"  [ label = "CFG: "] 
  "30064771103" -> "55834574859"  [ label = "CFG: "] 
  "30064771106" -> "55834574860"  [ label = "CFG: "] 
  "30064771109" -> "55834574861"  [ label = "CFG: "] 
  "30064771111" -> "128849018881"  [ label = "CFG: "] 
  "30064771073" -> "30064771074"  [ label = "CFG: "] 
  "30064771077" -> "30064771078"  [ label = "CFG: "] 
  "30064771079" -> "30064771080"  [ label = "CFG: "] 
  "30064771081" -> "30064771082"  [ label = "CFG: "] 
  "30064771083" -> "30064771084"  [ label = "CFG: "] 
  "30064771085" -> "30064771086"  [ label = "CFG: "] 
  "30064771087" -> "30064771088"  [ label = "CFG: "] 
  "30064771089" -> "30064771090"  [ label = "CFG: "] 
  "30064771091" -> "30064771092"  [ label = "CFG: "] 
  "30064771093" -> "30064771094"  [ label = "CFG: "] 
  "30064771095" -> "30064771096"  [ label = "CFG: "] 
  "30064771097" -> "30064771098"  [ label = "CFG: "] 
  "30064771099" -> "30064771100"  [ label = "CFG: "] 
  "30064771102" -> "30064771101"  [ label = "CFG: "] 
  "30064771101" -> "30064771103"  [ label = "CFG: "] 
  "30064771105" -> "30064771104"  [ label = "CFG: "] 
  "30064771104" -> "30064771106"  [ label = "CFG: "] 
  "30064771108" -> "30064771107"  [ label = "CFG: "] 
  "30064771107" -> "30064771109"  [ label = "CFG: "] 
  "30064771110" -> "30064771111"  [ label = "CFG: "] 
  "30064771076" -> "55834574848"  [ label = "CFG: "] 
  "30064771075" -> "30064771077"  [ label = "CFG: "] 
  "55834574850" -> "30064771079"  [ label = "CFG: "] 
  "55834574851" -> "30064771081"  [ label = "CFG: "] 
  "55834574852" -> "30064771083"  [ label = "CFG: "] 
  "55834574853" -> "30064771087"  [ label = "CFG: "] 
  "55834574854" -> "30064771091"  [ label = "CFG: "] 
  "55834574855" -> "30064771095"  [ label = "CFG: "] 
  "55834574856" -> "30064771097"  [ label = "CFG: "] 
  "55834574857" -> "30064771099"  [ label = "CFG: "] 
  "55834574858" -> "30064771102"  [ label = "CFG: "] 
  "55834574859" -> "30064771105"  [ label = "CFG: "] 
  "55834574860" -> "30064771108"  [ label = "CFG: "] 
  "55834574861" -> "30064771110"  [ label = "CFG: "] 
  "55834574849" -> "30064771076"  [ label = "CFG: "] 
  "55834574848" -> "30064771075"  [ label = "CFG: "] 
  "111669149697" -> "30064771073"  [ label = "CFG: "] 
  "30064771074" -> "128849018881"  [ label = "DDG: 'Usage example:\n' 'To run input tensors from files through a MetaGraphDef and save' ' the output tensors to files:\n' '$saved_model_cli show --dir /tmp/saved_model --tag_set serve \\\n' '   --signature_def serving_default \\\n' '   --inputs input1_key=/tmp/124.npz[x],input2_key=/tmp/123.npy ' '\\\n' '   --input_exprs \'input3_key=np.ones(2)\' \\\n' '   --input_examples ' '\'input4_key=[{&quot;id&quot;:[26],&quot;weights&quot;:[0.5, 0.5]}]\' \\\n' '   --outdir=/out\n\n' 'For more information about input file format, please see:\n' 'https://www.tensorflow.org/guide/saved_model_cli\n'"] 
  "30064771074" -> "128849018881"  [ label = "DDG: run_msg = 'Usage example:\n' 'To run input tensors from files through a MetaGraphDef and save' ' the output tensors to files:\n' '$saved_model_cli show --dir /tmp/saved_model --tag_set serve \\\n' '   --signature_def serving_default \\\n' '   --inputs input1_key=/tmp/124.npz[x],input2_key=/tmp/123.npy ' '\\\n' '   --input_exprs \'input3_key=np.ones(2)\' \\\n' '   --input_examples ' '\'input4_key=[{&quot;id&quot;:[26],&quot;weights&quot;:[0.5, 0.5]}]\' \\\n' '   --outdir=/out\n\n' 'For more information about input file format, please see:\n' 'https://www.tensorflow.org/guide/saved_model_cli\n'"] 
  "30064771077" -> "128849018881"  [ label = "DDG: subparsers"] 
  "30064771077" -> "128849018881"  [ label = "DDG: run_msg"] 
  "30064771077" -> "128849018881"  [ label = "DDG: argparse.RawTextHelpFormatter"] 
  "30064771078" -> "128849018881"  [ label = "DDG: subparsers.add_parser('run', description = run_msg, formatter_class = argparse.RawTextHelpFormatter)"] 
  "30064771078" -> "128849018881"  [ label = "DDG: parser_run = subparsers.add_parser('run', description = run_msg, formatter_class = argparse.RawTextHelpFormatter)"] 
  "30064771080" -> "128849018881"  [ label = "DDG: parser_run.add_argument('--dir', type = str, required = True, help = 'directory containing the SavedModel to execute')"] 
  "30064771082" -> "128849018881"  [ label = "DDG: parser_run.add_argument('--tag_set', type = str, required = True, help = 'tag-set of graph in SavedModel to load, separated by \',\'')"] 
  "30064771084" -> "128849018881"  [ label = "DDG: parser_run.add_argument('--signature_def', type = str, required = True, metavar = 'SIGNATURE_DEF_KEY', help = 'key of SignatureDef to run')"] 
  "30064771086" -> "128849018881"  [ label = "DDG: 'Loading inputs from files, in the format of \'&lt;input_key&gt;=&lt;filename&gt;,' ' or \'&lt;input_key&gt;=&lt;filename&gt;[&lt;variable_name&gt;]\', separated by \';\'.' ' The file format can only be from .npy, .npz or pickle.'"] 
  "30064771086" -> "128849018881"  [ label = "DDG: msg = 'Loading inputs from files, in the format of \'&lt;input_key&gt;=&lt;filename&gt;,' ' or \'&lt;input_key&gt;=&lt;filename&gt;[&lt;variable_name&gt;]\', separated by \';\'.' ' The file format can only be from .npy, .npz or pickle.'"] 
  "30064771088" -> "128849018881"  [ label = "DDG: parser_run.add_argument('--inputs', type = str, default = '', help = msg)"] 
  "30064771090" -> "128849018881"  [ label = "DDG: 'Specifying inputs by python expressions, in the format of' ' &quot;&lt;input_key&gt;=\'&lt;python expression&gt;\'&quot;, separated by \';\'. ' 'numpy module is available as \'np\'. Please note that the expression ' 'will be evaluated as-is, and is susceptible to code injection. ' 'When this is set, the value will override duplicate input keys from ' '--inputs option.'"] 
  "30064771090" -> "128849018881"  [ label = "DDG: msg = 'Specifying inputs by python expressions, in the format of' ' &quot;&lt;input_key&gt;=\'&lt;python expression&gt;\'&quot;, separated by \';\'. ' 'numpy module is available as \'np\'. Please note that the expression ' 'will be evaluated as-is, and is susceptible to code injection. ' 'When this is set, the value will override duplicate input keys from ' '--inputs option.'"] 
  "30064771092" -> "128849018881"  [ label = "DDG: parser_run.add_argument('--input_exprs', type = str, default = '', help = msg)"] 
  "30064771094" -> "128849018881"  [ label = "DDG: 'Specifying tf.Example inputs as list of dictionaries. For example: ' '&lt;input_key&gt;=[{feature0:value_list,feature1:value_list}]. Use &quot;;&quot; to ' 'separate input keys. Will override duplicate input keys from --inputs ' 'and --input_exprs option.'"] 
  "30064771094" -> "128849018881"  [ label = "DDG: msg = 'Specifying tf.Example inputs as list of dictionaries. For example: ' '&lt;input_key&gt;=[{feature0:value_list,feature1:value_list}]. Use &quot;;&quot; to ' 'separate input keys. Will override duplicate input keys from --inputs ' 'and --input_exprs option.'"] 
  "30064771096" -> "128849018881"  [ label = "DDG: msg"] 
  "30064771096" -> "128849018881"  [ label = "DDG: parser_run.add_argument('--input_examples', type = str, default = '', help = msg)"] 
  "30064771098" -> "128849018881"  [ label = "DDG: parser_run.add_argument('--outdir', type = str, default = None, help = 'if specified, output tensor(s) will be saved to given directory')"] 
  "30064771100" -> "128849018881"  [ label = "DDG: parser_run.add_argument('--overwrite', action = 'store_true', help = 'if set, output file will be overwritten if it already exists.')"] 
  "30064771103" -> "128849018881"  [ label = "DDG: 'if set, will use TensorFlow Debugger (tfdbg) to watch the ' 'intermediate Tensors and runtime GraphDefs while running the ' 'SavedModel.'"] 
  "30064771103" -> "128849018881"  [ label = "DDG: parser_run.add_argument('--tf_debug', action = 'store_true', help = 'if set, will use TensorFlow Debugger (tfdbg) to watch the ' 'intermediate Tensors and runtime GraphDefs while running the ' 'SavedModel.')"] 
  "30064771106" -> "128849018881"  [ label = "DDG: str"] 
  "30064771106" -> "128849018881"  [ label = "DDG: 'if specified, a Session will be run on the worker. ' 'Valid worker specification is a bns or gRPC path.'"] 
  "30064771106" -> "128849018881"  [ label = "DDG: parser_run.add_argument('--worker', type = str, default = None, help = 'if specified, a Session will be run on the worker. ' 'Valid worker specification is a bns or gRPC path.')"] 
  "30064771109" -> "128849018881"  [ label = "DDG: 'if specified, tpu.initialize_system will be called on the Session. ' 'This option should be only used if the worker is a TPU job.'"] 
  "30064771109" -> "128849018881"  [ label = "DDG: parser_run.add_argument('--init_tpu', action = 'store_true', default = None, help = 'if specified, tpu.initialize_system will be called on the Session. ' 'This option should be only used if the worker is a TPU job.')"] 
  "30064771111" -> "128849018881"  [ label = "DDG: parser_run"] 
  "30064771111" -> "128849018881"  [ label = "DDG: run"] 
  "30064771111" -> "128849018881"  [ label = "DDG: parser_run.set_defaults(func = run)"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "111669149697" -> "90194313216"  [ label = "DDG: "] 
  "30064771073" -> "30064771074"  [ label = "DDG: '\\\n'"] 
  "30064771073" -> "30064771074"  [ label = "DDG: '   --outdir=/out\n\n'"] 
  "30064771073" -> "30064771074"  [ label = "DDG: 'To run input tensors from files through a MetaGraphDef and save'"] 
  "30064771073" -> "30064771074"  [ label = "DDG: 'https://www.tensorflow.org/guide/saved_model_cli\n'"] 
  "30064771073" -> "30064771074"  [ label = "DDG: '   --input_exprs \'input3_key=np.ones(2)\' \\\n'"] 
  "30064771073" -> "30064771074"  [ label = "DDG: '   --signature_def serving_default \\\n'"] 
  "30064771073" -> "30064771074"  [ label = "DDG: '   --input_examples '"] 
  "30064771073" -> "30064771074"  [ label = "DDG: 'Usage example:\n'"] 
  "30064771073" -> "30064771074"  [ label = "DDG: 'For more information about input file format, please see:\n'"] 
  "30064771073" -> "30064771074"  [ label = "DDG: '\'input4_key=[{&quot;id&quot;:[26],&quot;weights&quot;:[0.5, 0.5]}]\' \\\n'"] 
  "30064771073" -> "30064771074"  [ label = "DDG: '$saved_model_cli show --dir /tmp/saved_model --tag_set serve \\\n'"] 
  "30064771073" -> "30064771074"  [ label = "DDG: '   --inputs input1_key=/tmp/124.npz[x],input2_key=/tmp/123.npy '"] 
  "30064771073" -> "30064771074"  [ label = "DDG: ' the output tensors to files:\n'"] 
  "30064771077" -> "30064771078"  [ label = "DDG: subparsers"] 
  "30064771077" -> "30064771078"  [ label = "DDG: 'run'"] 
  "30064771077" -> "30064771078"  [ label = "DDG: run_msg"] 
  "30064771077" -> "30064771078"  [ label = "DDG: argparse.RawTextHelpFormatter"] 
  "30064771085" -> "30064771086"  [ label = "DDG: 'Loading inputs from files, in the format of \'&lt;input_key&gt;=&lt;filename&gt;,'"] 
  "30064771085" -> "30064771086"  [ label = "DDG: ' or \'&lt;input_key&gt;=&lt;filename&gt;[&lt;variable_name&gt;]\', separated by \';\'.'"] 
  "30064771085" -> "30064771086"  [ label = "DDG: ' The file format can only be from .npy, .npz or pickle.'"] 
  "30064771089" -> "30064771090"  [ label = "DDG: 'Specifying inputs by python expressions, in the format of'"] 
  "30064771089" -> "30064771090"  [ label = "DDG: 'When this is set, the value will override duplicate input keys from '"] 
  "30064771089" -> "30064771090"  [ label = "DDG: 'will be evaluated as-is, and is susceptible to code injection. '"] 
  "30064771089" -> "30064771090"  [ label = "DDG: 'numpy module is available as \'np\'. Please note that the expression '"] 
  "30064771089" -> "30064771090"  [ label = "DDG: '--inputs option.'"] 
  "30064771089" -> "30064771090"  [ label = "DDG: ' &quot;&lt;input_key&gt;=\'&lt;python expression&gt;\'&quot;, separated by \';\'. '"] 
  "30064771093" -> "30064771094"  [ label = "DDG: 'Specifying tf.Example inputs as list of dictionaries. For example: '"] 
  "30064771093" -> "30064771094"  [ label = "DDG: '&lt;input_key&gt;=[{feature0:value_list,feature1:value_list}]. Use &quot;;&quot; to '"] 
  "30064771093" -> "30064771094"  [ label = "DDG: 'separate input keys. Will override duplicate input keys from --inputs '"] 
  "30064771093" -> "30064771094"  [ label = "DDG: 'and --input_exprs option.'"] 
  "30064771078" -> "30064771080"  [ label = "DDG: parser_run"] 
  "111669149697" -> "30064771080"  [ label = "DDG: "] 
  "30064771072" -> "30064771080"  [ label = "DDG: str"] 
  "30064771080" -> "30064771082"  [ label = "DDG: parser_run"] 
  "111669149697" -> "30064771082"  [ label = "DDG: "] 
  "30064771080" -> "30064771082"  [ label = "DDG: str"] 
  "30064771082" -> "30064771084"  [ label = "DDG: parser_run"] 
  "111669149697" -> "30064771084"  [ label = "DDG: "] 
  "30064771082" -> "30064771084"  [ label = "DDG: str"] 
  "30064771084" -> "30064771088"  [ label = "DDG: parser_run"] 
  "111669149697" -> "30064771088"  [ label = "DDG: "] 
  "30064771084" -> "30064771088"  [ label = "DDG: str"] 
  "30064771086" -> "30064771088"  [ label = "DDG: msg"] 
  "30064771088" -> "30064771092"  [ label = "DDG: parser_run"] 
  "111669149697" -> "30064771092"  [ label = "DDG: "] 
  "30064771088" -> "30064771092"  [ label = "DDG: str"] 
  "30064771090" -> "30064771092"  [ label = "DDG: msg"] 
  "30064771092" -> "30064771096"  [ label = "DDG: parser_run"] 
  "111669149697" -> "30064771096"  [ label = "DDG: "] 
  "30064771092" -> "30064771096"  [ label = "DDG: str"] 
  "30064771094" -> "30064771096"  [ label = "DDG: msg"] 
  "30064771096" -> "30064771098"  [ label = "DDG: parser_run"] 
  "111669149697" -> "30064771098"  [ label = "DDG: "] 
  "30064771096" -> "30064771098"  [ label = "DDG: str"] 
  "30064771098" -> "30064771100"  [ label = "DDG: parser_run"] 
  "111669149697" -> "30064771100"  [ label = "DDG: "] 
  "30064771100" -> "30064771103"  [ label = "DDG: parser_run"] 
  "111669149697" -> "30064771103"  [ label = "DDG: "] 
  "30064771101" -> "30064771103"  [ label = "DDG: 'if set, will use TensorFlow Debugger (tfdbg) to watch the '"] 
  "30064771101" -> "30064771103"  [ label = "DDG: 'intermediate Tensors and runtime GraphDefs while running the '"] 
  "30064771101" -> "30064771103"  [ label = "DDG: 'SavedModel.'"] 
  "30064771103" -> "30064771106"  [ label = "DDG: parser_run"] 
  "111669149697" -> "30064771106"  [ label = "DDG: "] 
  "30064771098" -> "30064771106"  [ label = "DDG: str"] 
  "30064771104" -> "30064771106"  [ label = "DDG: 'if specified, a Session will be run on the worker. '"] 
  "30064771104" -> "30064771106"  [ label = "DDG: 'Valid worker specification is a bns or gRPC path.'"] 
  "30064771106" -> "30064771109"  [ label = "DDG: parser_run"] 
  "111669149697" -> "30064771109"  [ label = "DDG: "] 
  "30064771107" -> "30064771109"  [ label = "DDG: 'if specified, tpu.initialize_system will be called on the Session. '"] 
  "30064771107" -> "30064771109"  [ label = "DDG: 'This option should be only used if the worker is a TPU job.'"] 
  "30064771109" -> "30064771111"  [ label = "DDG: parser_run"] 
  "111669149697" -> "30064771111"  [ label = "DDG: "] 
  "111669149697" -> "30064771073"  [ label = "DDG: "] 
  "115964116992" -> "30064771077"  [ label = "DDG: subparsers"] 
  "111669149697" -> "30064771077"  [ label = "DDG: "] 
  "30064771074" -> "30064771077"  [ label = "DDG: run_msg"] 
  "111669149697" -> "30064771085"  [ label = "DDG: "] 
  "111669149697" -> "30064771089"  [ label = "DDG: "] 
  "111669149697" -> "30064771093"  [ label = "DDG: "] 
  "111669149697" -> "30064771101"  [ label = "DDG: "] 
  "111669149697" -> "30064771104"  [ label = "DDG: "] 
  "111669149697" -> "30064771107"  [ label = "DDG: "] 
}
"""
)
