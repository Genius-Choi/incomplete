[33mval[0m [36mres584[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "DoImageProjectiveTransformOp" {  
"111669149697" [label = <(METHOD,DoImageProjectiveTransformOp)<SUB>1</SUB>> ]
"115964116992" [label = <(PARAM,OpKernelContext* ctx)<SUB>1</SUB>> ]
"115964116993" [label = <(PARAM,const Interpolation&amp; interpolation)<SUB>2</SUB>> ]
"115964116994" [label = <(PARAM,const Mode&amp; fill_mode)<SUB>3</SUB>> ]
"25769803777" [label = <(BLOCK,{
  const Tensor&amp; images_t = ctx-&gt;input(0);
  c...,{
  const Tensor&amp; images_t = ctx-&gt;input(0);
  c...)<SUB>3</SUB>> ]
"94489280512" [label = <(LOCAL,const Tensor&amp; images_t: Tensor&amp;)<SUB>4</SUB>> ]
"30064771072" [label = <(&lt;operator&gt;.assignment,&amp; images_t = ctx-&gt;input(0))<SUB>4</SUB>> ]
"68719476736" [label = <(IDENTIFIER,images_t,&amp; images_t = ctx-&gt;input(0))<SUB>4</SUB>> ]
"30064771073" [label = <(input,ctx-&gt;input(0))<SUB>4</SUB>> ]
"68719476737" [label = <(IDENTIFIER,ctx,ctx-&gt;input(0))<SUB>4</SUB>> ]
"90194313216" [label = <(LITERAL,0,ctx-&gt;input(0))<SUB>4</SUB>> ]
"94489280513" [label = <(LOCAL,const Tensor&amp; transform_t: Tensor&amp;)<SUB>5</SUB>> ]
"30064771074" [label = <(&lt;operator&gt;.assignment,&amp; transform_t = ctx-&gt;input(1))<SUB>5</SUB>> ]
"68719476738" [label = <(IDENTIFIER,transform_t,&amp; transform_t = ctx-&gt;input(1))<SUB>5</SUB>> ]
"30064771075" [label = <(input,ctx-&gt;input(1))<SUB>5</SUB>> ]
"68719476739" [label = <(IDENTIFIER,ctx,ctx-&gt;input(1))<SUB>5</SUB>> ]
"90194313217" [label = <(LITERAL,1,ctx-&gt;input(1))<SUB>5</SUB>> ]
"30064771076" [label = <(OP_REQUIRES,OP_REQUIRES(ctx, images_t.shape().dims() == 4,
...)<SUB>6</SUB>> ]
"68719476740" [label = <(IDENTIFIER,ctx,OP_REQUIRES(ctx, images_t.shape().dims() == 4,
...)<SUB>6</SUB>> ]
"30064771077" [label = <(&lt;operator&gt;.equals,images_t.shape().dims() == 4)<SUB>6</SUB>> ]
"30064771078" [label = <(dims,images_t.shape().dims())<SUB>6</SUB>> ]
"30064771079" [label = <(shape,images_t.shape())<SUB>6</SUB>> ]
"68719476741" [label = <(IDENTIFIER,images_t,images_t.shape())<SUB>6</SUB>> ]
"90194313218" [label = <(LITERAL,4,images_t.shape().dims() == 4)<SUB>6</SUB>> ]
"30064771080" [label = <(InvalidArgument,errors::InvalidArgument(&quot;Input images must have...)<SUB>7</SUB>> ]
"90194313219" [label = <(LITERAL,&quot;Input images must have rank 4&quot;,errors::InvalidArgument(&quot;Input images must have...)<SUB>7</SUB>> ]
"30064771081" [label = <(OP_REQUIRES,OP_REQUIRES(ctx,
              (TensorShapeUtil...)<SUB>8</SUB>> ]
"68719476742" [label = <(IDENTIFIER,ctx,OP_REQUIRES(ctx,
              (TensorShapeUtil...)<SUB>8</SUB>> ]
"30064771082" [label = <(&lt;operator&gt;.logicalAnd,TensorShapeUtils::IsMatrix(transform_t.shape())...)<SUB>9</SUB>> ]
"30064771083" [label = <(&lt;operator&gt;.logicalAnd,TensorShapeUtils::IsMatrix(transform_t.shape())...)<SUB>9</SUB>> ]
"30064771084" [label = <(IsMatrix,TensorShapeUtils::IsMatrix(transform_t.shape()))<SUB>9</SUB>> ]
"30064771085" [label = <(shape,transform_t.shape())<SUB>9</SUB>> ]
"68719476743" [label = <(IDENTIFIER,transform_t,transform_t.shape())<SUB>9</SUB>> ]
"30064771086" [label = <(&lt;operator&gt;.logicalOr,transform_t.dim_size(0) == images_t.dim_size(0)...)<SUB>10</SUB>> ]
"30064771087" [label = <(&lt;operator&gt;.equals,transform_t.dim_size(0) == images_t.dim_size(0))<SUB>10</SUB>> ]
"30064771088" [label = <(dim_size,transform_t.dim_size(0))<SUB>10</SUB>> ]
"68719476744" [label = <(IDENTIFIER,transform_t,transform_t.dim_size(0))<SUB>10</SUB>> ]
"90194313220" [label = <(LITERAL,0,transform_t.dim_size(0))<SUB>10</SUB>> ]
"30064771089" [label = <(dim_size,images_t.dim_size(0))<SUB>10</SUB>> ]
"68719476745" [label = <(IDENTIFIER,images_t,images_t.dim_size(0))<SUB>10</SUB>> ]
"90194313221" [label = <(LITERAL,0,images_t.dim_size(0))<SUB>10</SUB>> ]
"30064771090" [label = <(&lt;operator&gt;.equals,transform_t.dim_size(0) == 1)<SUB>11</SUB>> ]
"30064771091" [label = <(dim_size,transform_t.dim_size(0))<SUB>11</SUB>> ]
"68719476746" [label = <(IDENTIFIER,transform_t,transform_t.dim_size(0))<SUB>11</SUB>> ]
"90194313222" [label = <(LITERAL,0,transform_t.dim_size(0))<SUB>11</SUB>> ]
"90194313223" [label = <(LITERAL,1,transform_t.dim_size(0) == 1)<SUB>11</SUB>> ]
"30064771092" [label = <(&lt;operator&gt;.equals,transform_t.dim_size(1) == 8)<SUB>12</SUB>> ]
"30064771093" [label = <(dim_size,transform_t.dim_size(1))<SUB>12</SUB>> ]
"68719476747" [label = <(IDENTIFIER,transform_t,transform_t.dim_size(1))<SUB>12</SUB>> ]
"90194313224" [label = <(LITERAL,1,transform_t.dim_size(1))<SUB>12</SUB>> ]
"90194313225" [label = <(LITERAL,8,transform_t.dim_size(1) == 8)<SUB>12</SUB>> ]
"30064771094" [label = <(InvalidArgument,errors::InvalidArgument(
                  &quot;Inp...)<SUB>13</SUB>> ]
"90194313226" [label = <(LITERAL,&quot;Input transform should be num_images x 8 or 1 ...,errors::InvalidArgument(
                  &quot;Inp...)<SUB>14</SUB>> ]
"94489280514" [label = <(LOCAL,int32_t out_height: int32_t)<SUB>16</SUB>> ]
"94489280515" [label = <(LOCAL,int32_t out_width: int32_t)<SUB>16</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,IF,if (ctx-&gt;num_inputs() &gt;= 3))<SUB>18</SUB>> ]
"30064771095" [label = <(&lt;operator&gt;.greaterEqualsThan,ctx-&gt;num_inputs() &gt;= 3)<SUB>18</SUB>> ]
"30064771096" [label = <(num_inputs,ctx-&gt;num_inputs())<SUB>18</SUB>> ]
"68719476748" [label = <(IDENTIFIER,ctx,ctx-&gt;num_inputs())<SUB>18</SUB>> ]
"90194313227" [label = <(LITERAL,3,ctx-&gt;num_inputs() &gt;= 3)<SUB>18</SUB>> ]
"25769803778" [label = <(BLOCK,{
    const Tensor&amp; shape_t = ctx-&gt;input(2);
  ...,{
    const Tensor&amp; shape_t = ctx-&gt;input(2);
  ...)<SUB>18</SUB>> ]
"94489280516" [label = <(LOCAL,const Tensor&amp; shape_t: Tensor&amp;)<SUB>19</SUB>> ]
"30064771097" [label = <(&lt;operator&gt;.assignment,&amp; shape_t = ctx-&gt;input(2))<SUB>19</SUB>> ]
"68719476749" [label = <(IDENTIFIER,shape_t,&amp; shape_t = ctx-&gt;input(2))<SUB>19</SUB>> ]
"30064771098" [label = <(input,ctx-&gt;input(2))<SUB>19</SUB>> ]
"68719476750" [label = <(IDENTIFIER,ctx,ctx-&gt;input(2))<SUB>19</SUB>> ]
"90194313228" [label = <(LITERAL,2,ctx-&gt;input(2))<SUB>19</SUB>> ]
"30064771099" [label = <(OP_REQUIRES,OP_REQUIRES(ctx, shape_t.dims() == 1,
         ...)<SUB>20</SUB>> ]
"68719476751" [label = <(IDENTIFIER,ctx,OP_REQUIRES(ctx, shape_t.dims() == 1,
         ...)<SUB>20</SUB>> ]
"30064771100" [label = <(&lt;operator&gt;.equals,shape_t.dims() == 1)<SUB>20</SUB>> ]
"30064771101" [label = <(dims,shape_t.dims())<SUB>20</SUB>> ]
"68719476752" [label = <(IDENTIFIER,shape_t,shape_t.dims())<SUB>20</SUB>> ]
"90194313229" [label = <(LITERAL,1,shape_t.dims() == 1)<SUB>20</SUB>> ]
"30064771102" [label = <(InvalidArgument,errors::InvalidArgument(&quot;output shape must be 1...)<SUB>21</SUB>> ]
"90194313230" [label = <(LITERAL,&quot;output shape must be 1-dimensional&quot;,errors::InvalidArgument(&quot;output shape must be 1...)<SUB>21</SUB>> ]
"30064771103" [label = <(DebugString,shape_t.shape().DebugString())<SUB>22</SUB>> ]
"30064771104" [label = <(shape,shape_t.shape())<SUB>22</SUB>> ]
"68719476753" [label = <(IDENTIFIER,shape_t,shape_t.shape())<SUB>22</SUB>> ]
"30064771105" [label = <(OP_REQUIRES,OP_REQUIRES(ctx, shape_t.NumElements() == 2,
  ...)<SUB>23</SUB>> ]
"68719476754" [label = <(IDENTIFIER,ctx,OP_REQUIRES(ctx, shape_t.NumElements() == 2,
  ...)<SUB>23</SUB>> ]
"30064771106" [label = <(&lt;operator&gt;.equals,shape_t.NumElements() == 2)<SUB>23</SUB>> ]
"30064771107" [label = <(NumElements,shape_t.NumElements())<SUB>23</SUB>> ]
"68719476755" [label = <(IDENTIFIER,shape_t,shape_t.NumElements())<SUB>23</SUB>> ]
"90194313231" [label = <(LITERAL,2,shape_t.NumElements() == 2)<SUB>23</SUB>> ]
"30064771108" [label = <(InvalidArgument,errors::InvalidArgument(&quot;output shape must have...)<SUB>24</SUB>> ]
"90194313232" [label = <(LITERAL,&quot;output shape must have two elements&quot;,errors::InvalidArgument(&quot;output shape must have...)<SUB>24</SUB>> ]
"30064771109" [label = <(DebugString,shape_t.shape().DebugString())<SUB>25</SUB>> ]
"30064771110" [label = <(shape,shape_t.shape())<SUB>25</SUB>> ]
"68719476756" [label = <(IDENTIFIER,shape_t,shape_t.shape())<SUB>25</SUB>> ]
"94489280517" [label = <(LOCAL,auto shape_vec: auto)<SUB>26</SUB>> ]
"30064771111" [label = <(&lt;operator&gt;.assignment,shape_vec = shape_t.vec&lt;int32&gt;())<SUB>26</SUB>> ]
"68719476757" [label = <(IDENTIFIER,shape_vec,shape_vec = shape_t.vec&lt;int32&gt;())<SUB>26</SUB>> ]
"30064771112" [label = <(vec&lt;int32&gt;,shape_t.vec&lt;int32&gt;())<SUB>26</SUB>> ]
"68719476758" [label = <(IDENTIFIER,shape_t,shape_t.vec&lt;int32&gt;())<SUB>26</SUB>> ]
"30064771113" [label = <(&lt;operator&gt;.assignment,out_height = shape_vec(0))<SUB>27</SUB>> ]
"68719476759" [label = <(IDENTIFIER,out_height,out_height = shape_vec(0))<SUB>27</SUB>> ]
"30064771114" [label = <(shape_vec,shape_vec(0))<SUB>27</SUB>> ]
"90194313233" [label = <(LITERAL,0,shape_vec(0))<SUB>27</SUB>> ]
"30064771115" [label = <(&lt;operator&gt;.assignment,out_width = shape_vec(1))<SUB>28</SUB>> ]
"68719476760" [label = <(IDENTIFIER,out_width,out_width = shape_vec(1))<SUB>28</SUB>> ]
"30064771116" [label = <(shape_vec,shape_vec(1))<SUB>28</SUB>> ]
"90194313234" [label = <(LITERAL,1,shape_vec(1))<SUB>28</SUB>> ]
"30064771117" [label = <(OP_REQUIRES,OP_REQUIRES(ctx, out_height &gt; 0 &amp;&amp; out_width &gt; ...)<SUB>29</SUB>> ]
"68719476761" [label = <(IDENTIFIER,ctx,OP_REQUIRES(ctx, out_height &gt; 0 &amp;&amp; out_width &gt; ...)<SUB>29</SUB>> ]
"30064771118" [label = <(&lt;operator&gt;.logicalAnd,out_height &gt; 0 &amp;&amp; out_width &gt; 0)<SUB>29</SUB>> ]
"30064771119" [label = <(&lt;operator&gt;.greaterThan,out_height &gt; 0)<SUB>29</SUB>> ]
"68719476762" [label = <(IDENTIFIER,out_height,out_height &gt; 0)<SUB>29</SUB>> ]
"90194313235" [label = <(LITERAL,0,out_height &gt; 0)<SUB>29</SUB>> ]
"30064771120" [label = <(&lt;operator&gt;.greaterThan,out_width &gt; 0)<SUB>29</SUB>> ]
"68719476763" [label = <(IDENTIFIER,out_width,out_width &gt; 0)<SUB>29</SUB>> ]
"90194313236" [label = <(LITERAL,0,out_width &gt; 0)<SUB>29</SUB>> ]
"30064771121" [label = <(InvalidArgument,errors::InvalidArgument(&quot;output dimensions must...)<SUB>30</SUB>> ]
"90194313237" [label = <(LITERAL,&quot;output dimensions must be positive&quot;,errors::InvalidArgument(&quot;output dimensions must...)<SUB>30</SUB>> ]
"47244640257" [label = <(CONTROL_STRUCTURE,ELSE,else)<SUB>31</SUB>> ]
"25769803779" [label = <(BLOCK,{
    // Shape is N (batch size), H (height), W...,{
    // Shape is N (batch size), H (height), W...)<SUB>31</SUB>> ]
"30064771122" [label = <(&lt;operator&gt;.assignment,out_height = images_t.shape().dim_size(1))<SUB>33</SUB>> ]
"68719476764" [label = <(IDENTIFIER,out_height,out_height = images_t.shape().dim_size(1))<SUB>33</SUB>> ]
"30064771123" [label = <(dim_size,images_t.shape().dim_size(1))<SUB>33</SUB>> ]
"30064771124" [label = <(shape,images_t.shape())<SUB>33</SUB>> ]
"68719476765" [label = <(IDENTIFIER,images_t,images_t.shape())<SUB>33</SUB>> ]
"90194313238" [label = <(LITERAL,1,images_t.shape().dim_size(1))<SUB>33</SUB>> ]
"30064771125" [label = <(&lt;operator&gt;.assignment,out_width = images_t.shape().dim_size(2))<SUB>34</SUB>> ]
"68719476766" [label = <(IDENTIFIER,out_width,out_width = images_t.shape().dim_size(2))<SUB>34</SUB>> ]
"30064771126" [label = <(dim_size,images_t.shape().dim_size(2))<SUB>34</SUB>> ]
"30064771127" [label = <(shape,images_t.shape())<SUB>34</SUB>> ]
"68719476767" [label = <(IDENTIFIER,images_t,images_t.shape())<SUB>34</SUB>> ]
"90194313239" [label = <(LITERAL,2,images_t.shape().dim_size(2))<SUB>34</SUB>> ]
"94489280518" [label = <(LOCAL,T fill_value: T)<SUB>37</SUB>> ]
"30064771128" [label = <(fill_value,fill_value(0))<SUB>37</SUB>> ]
"90194313240" [label = <(LITERAL,0,fill_value(0))<SUB>37</SUB>> ]
"47244640258" [label = <(CONTROL_STRUCTURE,IF,if (ctx-&gt;num_inputs() &gt;= 4))<SUB>39</SUB>> ]
"30064771129" [label = <(&lt;operator&gt;.greaterEqualsThan,ctx-&gt;num_inputs() &gt;= 4)<SUB>39</SUB>> ]
"30064771130" [label = <(num_inputs,ctx-&gt;num_inputs())<SUB>39</SUB>> ]
"68719476768" [label = <(IDENTIFIER,ctx,ctx-&gt;num_inputs())<SUB>39</SUB>> ]
"90194313241" [label = <(LITERAL,4,ctx-&gt;num_inputs() &gt;= 4)<SUB>39</SUB>> ]
"25769803780" [label = <(BLOCK,{
    const Tensor&amp; fill_value_t = ctx-&gt;input(3...,{
    const Tensor&amp; fill_value_t = ctx-&gt;input(3...)<SUB>39</SUB>> ]
"94489280519" [label = <(LOCAL,const Tensor&amp; fill_value_t: Tensor&amp;)<SUB>40</SUB>> ]
"30064771131" [label = <(&lt;operator&gt;.assignment,&amp; fill_value_t = ctx-&gt;input(3))<SUB>40</SUB>> ]
"68719476769" [label = <(IDENTIFIER,fill_value_t,&amp; fill_value_t = ctx-&gt;input(3))<SUB>40</SUB>> ]
"30064771132" [label = <(input,ctx-&gt;input(3))<SUB>40</SUB>> ]
"68719476770" [label = <(IDENTIFIER,ctx,ctx-&gt;input(3))<SUB>40</SUB>> ]
"90194313242" [label = <(LITERAL,3,ctx-&gt;input(3))<SUB>40</SUB>> ]
"30064771133" [label = <(OP_REQUIRES,OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(fil...)<SUB>41</SUB>> ]
"68719476771" [label = <(IDENTIFIER,ctx,OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(fil...)<SUB>41</SUB>> ]
"30064771134" [label = <(IsScalar,TensorShapeUtils::IsScalar(fill_value_t.shape()))<SUB>41</SUB>> ]
"30064771135" [label = <(shape,fill_value_t.shape())<SUB>41</SUB>> ]
"68719476772" [label = <(IDENTIFIER,fill_value_t,fill_value_t.shape())<SUB>41</SUB>> ]
"30064771136" [label = <(InvalidArgument,errors::InvalidArgument(&quot;fill_value must be a s...)<SUB>42</SUB>> ]
"90194313243" [label = <(LITERAL,&quot;fill_value must be a scalar&quot;,errors::InvalidArgument(&quot;fill_value must be a s...)<SUB>42</SUB>> ]
"30064771137" [label = <(DebugString,fill_value_t.shape().DebugString())<SUB>43</SUB>> ]
"30064771138" [label = <(shape,fill_value_t.shape())<SUB>43</SUB>> ]
"68719476773" [label = <(IDENTIFIER,fill_value_t,fill_value_t.shape())<SUB>43</SUB>> ]
"30064771139" [label = <(&lt;operator&gt;.assignment,fill_value = static_cast&lt;T&gt;(*(fill_value_t.scal...)<SUB>44</SUB>> ]
"68719476774" [label = <(IDENTIFIER,fill_value,fill_value = static_cast&lt;T&gt;(*(fill_value_t.scal...)<SUB>44</SUB>> ]
"30064771140" [label = <(&lt;operator&gt;.cast,static_cast&lt;T&gt;(*(fill_value_t.scalar&lt;float&gt;().d...)<SUB>44</SUB>> ]
"184683593728" [label = <(UNKNOWN,T,T)<SUB>44</SUB>> ]
"30064771141" [label = <(&lt;operator&gt;.indirection,*(fill_value_t.scalar&lt;float&gt;().data()))<SUB>44</SUB>> ]
"30064771142" [label = <(data,fill_value_t.scalar&lt;float&gt;().data())<SUB>44</SUB>> ]
"30064771143" [label = <(scalar&lt;float&gt;,fill_value_t.scalar&lt;float&gt;())<SUB>44</SUB>> ]
"68719476775" [label = <(IDENTIFIER,fill_value_t,fill_value_t.scalar&lt;float&gt;())<SUB>44</SUB>> ]
"94489280520" [label = <(LOCAL,Tensor* output_t: Tensor*)<SUB>47</SUB>> ]
"30064771144" [label = <(OP_REQUIRES_OK,OP_REQUIRES_OK(
      ctx, ctx-&gt;allocate_output...)<SUB>48</SUB>> ]
"68719476776" [label = <(IDENTIFIER,ctx,OP_REQUIRES_OK(
      ctx, ctx-&gt;allocate_output...)<SUB>49</SUB>> ]
"30064771145" [label = <(allocate_output,ctx-&gt;allocate_output(0,
                       ...)<SUB>49</SUB>> ]
"68719476777" [label = <(IDENTIFIER,ctx,ctx-&gt;allocate_output(0,
                       ...)<SUB>49</SUB>> ]
"90194313244" [label = <(LITERAL,0,ctx-&gt;allocate_output(0,
                       ...)<SUB>49</SUB>> ]
"30064771146" [label = <(TensorShape,TensorShape({images_t.dim_size(0), out_height,
...)<SUB>50</SUB>> ]
"30064771147" [label = <(&lt;operator&gt;.arrayInitializer,{images_t.dim_size(0), out_height,
            ...)<SUB>50</SUB>> ]
"30064771148" [label = <(dim_size,images_t.dim_size(0))<SUB>50</SUB>> ]
"68719476778" [label = <(IDENTIFIER,images_t,images_t.dim_size(0))<SUB>50</SUB>> ]
"90194313245" [label = <(LITERAL,0,images_t.dim_size(0))<SUB>50</SUB>> ]
"68719476779" [label = <(IDENTIFIER,out_height,{images_t.dim_size(0), out_height,
            ...)<SUB>50</SUB>> ]
"68719476780" [label = <(IDENTIFIER,out_width,{images_t.dim_size(0), out_height,
            ...)<SUB>51</SUB>> ]
"30064771149" [label = <(dim_size,images_t.dim_size(3))<SUB>51</SUB>> ]
"68719476781" [label = <(IDENTIFIER,images_t,images_t.dim_size(3))<SUB>51</SUB>> ]
"90194313246" [label = <(LITERAL,3,images_t.dim_size(3))<SUB>51</SUB>> ]
"30064771150" [label = <(&lt;operator&gt;.addressOf,&amp;output_t)<SUB>52</SUB>> ]
"68719476782" [label = <(IDENTIFIER,output_t,ctx-&gt;allocate_output(0,
                       ...)<SUB>52</SUB>> ]
"94489280521" [label = <(LOCAL,auto output: auto)<SUB>53</SUB>> ]
"30064771151" [label = <(&lt;operator&gt;.assignment,output = output_t-&gt;tensor&lt;T, 4&gt;())<SUB>53</SUB>> ]
"68719476783" [label = <(IDENTIFIER,output,output = output_t-&gt;tensor&lt;T, 4&gt;())<SUB>53</SUB>> ]
"30064771152" [label = <(tensor&lt;T, 4&gt;,output_t-&gt;tensor&lt;T, 4&gt;())<SUB>53</SUB>> ]
"68719476784" [label = <(IDENTIFIER,output_t,output_t-&gt;tensor&lt;T, 4&gt;())<SUB>53</SUB>> ]
"94489280522" [label = <(LOCAL,auto images: auto)<SUB>54</SUB>> ]
"30064771153" [label = <(&lt;operator&gt;.assignment,images = images_t.tensor&lt;T, 4&gt;())<SUB>54</SUB>> ]
"68719476785" [label = <(IDENTIFIER,images,images = images_t.tensor&lt;T, 4&gt;())<SUB>54</SUB>> ]
"30064771154" [label = <(tensor&lt;T, 4&gt;,images_t.tensor&lt;T, 4&gt;())<SUB>54</SUB>> ]
"68719476786" [label = <(IDENTIFIER,images_t,images_t.tensor&lt;T, 4&gt;())<SUB>54</SUB>> ]
"94489280523" [label = <(LOCAL,auto transform: auto)<SUB>55</SUB>> ]
"30064771155" [label = <(&lt;operator&gt;.assignment,transform = transform_t.matrix&lt;float&gt;())<SUB>55</SUB>> ]
"68719476787" [label = <(IDENTIFIER,transform,transform = transform_t.matrix&lt;float&gt;())<SUB>55</SUB>> ]
"30064771156" [label = <(matrix&lt;float&gt;,transform_t.matrix&lt;float&gt;())<SUB>55</SUB>> ]
"68719476788" [label = <(IDENTIFIER,transform_t,transform_t.matrix&lt;float&gt;())<SUB>55</SUB>> ]
"30064771157" [label = <(&lt;operator&gt;(),(FillProjectiveTransform&lt;Device, T&gt;(interpolati...)<SUB>57</SUB>> ]
"30064771158" [label = <(FillProjectiveTransform&lt;Device, T&gt;,FillProjectiveTransform&lt;Device, T&gt;(interpolation))<SUB>57</SUB>> ]
"68719476789" [label = <(IDENTIFIER,interpolation,FillProjectiveTransform&lt;Device, T&gt;(interpolation))<SUB>57</SUB>> ]
"30064771159" [label = <(eigen_device&lt;Device&gt;,ctx-&gt;eigen_device&lt;Device&gt;())<SUB>58</SUB>> ]
"68719476790" [label = <(IDENTIFIER,ctx,ctx-&gt;eigen_device&lt;Device&gt;())<SUB>58</SUB>> ]
"30064771160" [label = <(&lt;operator&gt;.addressOf,&amp;output)<SUB>58</SUB>> ]
"68719476791" [label = <(IDENTIFIER,output,(FillProjectiveTransform&lt;Device, T&gt;(interpolati...)<SUB>58</SUB>> ]
"68719476792" [label = <(IDENTIFIER,images,(FillProjectiveTransform&lt;Device, T&gt;(interpolati...)<SUB>58</SUB>> ]
"68719476793" [label = <(IDENTIFIER,transform,(FillProjectiveTransform&lt;Device, T&gt;(interpolati...)<SUB>58</SUB>> ]
"68719476794" [label = <(IDENTIFIER,fill_mode,(FillProjectiveTransform&lt;Device, T&gt;(interpolati...)<SUB>58</SUB>> ]
"68719476795" [label = <(IDENTIFIER,fill_value,(FillProjectiveTransform&lt;Device, T&gt;(interpolati...)<SUB>59</SUB>> ]
"128849018880" [label = <(METHOD_RETURN,void)<SUB>1</SUB>> ]
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "115964116993"  [ label = "AST: "] 
  "111669149697" -> "115964116994"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "128849018880"  [ label = "AST: "] 
  "25769803777" -> "94489280512"  [ label = "AST: "] 
  "25769803777" -> "30064771072"  [ label = "AST: "] 
  "25769803777" -> "94489280513"  [ label = "AST: "] 
  "25769803777" -> "30064771074"  [ label = "AST: "] 
  "25769803777" -> "30064771076"  [ label = "AST: "] 
  "25769803777" -> "30064771081"  [ label = "AST: "] 
  "25769803777" -> "94489280514"  [ label = "AST: "] 
  "25769803777" -> "94489280515"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "25769803777" -> "94489280518"  [ label = "AST: "] 
  "25769803777" -> "30064771128"  [ label = "AST: "] 
  "25769803777" -> "47244640258"  [ label = "AST: "] 
  "25769803777" -> "94489280520"  [ label = "AST: "] 
  "25769803777" -> "30064771144"  [ label = "AST: "] 
  "25769803777" -> "94489280521"  [ label = "AST: "] 
  "25769803777" -> "30064771151"  [ label = "AST: "] 
  "25769803777" -> "94489280522"  [ label = "AST: "] 
  "25769803777" -> "30064771153"  [ label = "AST: "] 
  "25769803777" -> "94489280523"  [ label = "AST: "] 
  "25769803777" -> "30064771155"  [ label = "AST: "] 
  "25769803777" -> "30064771157"  [ label = "AST: "] 
  "30064771072" -> "68719476736"  [ label = "AST: "] 
  "30064771072" -> "30064771073"  [ label = "AST: "] 
  "30064771073" -> "68719476737"  [ label = "AST: "] 
  "30064771073" -> "90194313216"  [ label = "AST: "] 
  "30064771074" -> "68719476738"  [ label = "AST: "] 
  "30064771074" -> "30064771075"  [ label = "AST: "] 
  "30064771075" -> "68719476739"  [ label = "AST: "] 
  "30064771075" -> "90194313217"  [ label = "AST: "] 
  "30064771076" -> "68719476740"  [ label = "AST: "] 
  "30064771076" -> "30064771077"  [ label = "AST: "] 
  "30064771076" -> "30064771080"  [ label = "AST: "] 
  "30064771077" -> "30064771078"  [ label = "AST: "] 
  "30064771077" -> "90194313218"  [ label = "AST: "] 
  "30064771078" -> "30064771079"  [ label = "AST: "] 
  "30064771079" -> "68719476741"  [ label = "AST: "] 
  "30064771080" -> "90194313219"  [ label = "AST: "] 
  "30064771081" -> "68719476742"  [ label = "AST: "] 
  "30064771081" -> "30064771082"  [ label = "AST: "] 
  "30064771081" -> "30064771094"  [ label = "AST: "] 
  "30064771082" -> "30064771083"  [ label = "AST: "] 
  "30064771082" -> "30064771092"  [ label = "AST: "] 
  "30064771083" -> "30064771084"  [ label = "AST: "] 
  "30064771083" -> "30064771086"  [ label = "AST: "] 
  "30064771084" -> "30064771085"  [ label = "AST: "] 
  "30064771085" -> "68719476743"  [ label = "AST: "] 
  "30064771086" -> "30064771087"  [ label = "AST: "] 
  "30064771086" -> "30064771090"  [ label = "AST: "] 
  "30064771087" -> "30064771088"  [ label = "AST: "] 
  "30064771087" -> "30064771089"  [ label = "AST: "] 
  "30064771088" -> "68719476744"  [ label = "AST: "] 
  "30064771088" -> "90194313220"  [ label = "AST: "] 
  "30064771089" -> "68719476745"  [ label = "AST: "] 
  "30064771089" -> "90194313221"  [ label = "AST: "] 
  "30064771090" -> "30064771091"  [ label = "AST: "] 
  "30064771090" -> "90194313223"  [ label = "AST: "] 
  "30064771091" -> "68719476746"  [ label = "AST: "] 
  "30064771091" -> "90194313222"  [ label = "AST: "] 
  "30064771092" -> "30064771093"  [ label = "AST: "] 
  "30064771092" -> "90194313225"  [ label = "AST: "] 
  "30064771093" -> "68719476747"  [ label = "AST: "] 
  "30064771093" -> "90194313224"  [ label = "AST: "] 
  "30064771094" -> "90194313226"  [ label = "AST: "] 
  "47244640256" -> "30064771095"  [ label = "AST: "] 
  "47244640256" -> "25769803778"  [ label = "AST: "] 
  "47244640256" -> "47244640257"  [ label = "AST: "] 
  "30064771095" -> "30064771096"  [ label = "AST: "] 
  "30064771095" -> "90194313227"  [ label = "AST: "] 
  "30064771096" -> "68719476748"  [ label = "AST: "] 
  "25769803778" -> "94489280516"  [ label = "AST: "] 
  "25769803778" -> "30064771097"  [ label = "AST: "] 
  "25769803778" -> "30064771099"  [ label = "AST: "] 
  "25769803778" -> "30064771105"  [ label = "AST: "] 
  "25769803778" -> "94489280517"  [ label = "AST: "] 
  "25769803778" -> "30064771111"  [ label = "AST: "] 
  "25769803778" -> "30064771113"  [ label = "AST: "] 
  "25769803778" -> "30064771115"  [ label = "AST: "] 
  "25769803778" -> "30064771117"  [ label = "AST: "] 
  "30064771097" -> "68719476749"  [ label = "AST: "] 
  "30064771097" -> "30064771098"  [ label = "AST: "] 
  "30064771098" -> "68719476750"  [ label = "AST: "] 
  "30064771098" -> "90194313228"  [ label = "AST: "] 
  "30064771099" -> "68719476751"  [ label = "AST: "] 
  "30064771099" -> "30064771100"  [ label = "AST: "] 
  "30064771099" -> "30064771102"  [ label = "AST: "] 
  "30064771100" -> "30064771101"  [ label = "AST: "] 
  "30064771100" -> "90194313229"  [ label = "AST: "] 
  "30064771101" -> "68719476752"  [ label = "AST: "] 
  "30064771102" -> "90194313230"  [ label = "AST: "] 
  "30064771102" -> "30064771103"  [ label = "AST: "] 
  "30064771103" -> "30064771104"  [ label = "AST: "] 
  "30064771104" -> "68719476753"  [ label = "AST: "] 
  "30064771105" -> "68719476754"  [ label = "AST: "] 
  "30064771105" -> "30064771106"  [ label = "AST: "] 
  "30064771105" -> "30064771108"  [ label = "AST: "] 
  "30064771106" -> "30064771107"  [ label = "AST: "] 
  "30064771106" -> "90194313231"  [ label = "AST: "] 
  "30064771107" -> "68719476755"  [ label = "AST: "] 
  "30064771108" -> "90194313232"  [ label = "AST: "] 
  "30064771108" -> "30064771109"  [ label = "AST: "] 
  "30064771109" -> "30064771110"  [ label = "AST: "] 
  "30064771110" -> "68719476756"  [ label = "AST: "] 
  "30064771111" -> "68719476757"  [ label = "AST: "] 
  "30064771111" -> "30064771112"  [ label = "AST: "] 
  "30064771112" -> "68719476758"  [ label = "AST: "] 
  "30064771113" -> "68719476759"  [ label = "AST: "] 
  "30064771113" -> "30064771114"  [ label = "AST: "] 
  "30064771114" -> "90194313233"  [ label = "AST: "] 
  "30064771115" -> "68719476760"  [ label = "AST: "] 
  "30064771115" -> "30064771116"  [ label = "AST: "] 
  "30064771116" -> "90194313234"  [ label = "AST: "] 
  "30064771117" -> "68719476761"  [ label = "AST: "] 
  "30064771117" -> "30064771118"  [ label = "AST: "] 
  "30064771117" -> "30064771121"  [ label = "AST: "] 
  "30064771118" -> "30064771119"  [ label = "AST: "] 
  "30064771118" -> "30064771120"  [ label = "AST: "] 
  "30064771119" -> "68719476762"  [ label = "AST: "] 
  "30064771119" -> "90194313235"  [ label = "AST: "] 
  "30064771120" -> "68719476763"  [ label = "AST: "] 
  "30064771120" -> "90194313236"  [ label = "AST: "] 
  "30064771121" -> "90194313237"  [ label = "AST: "] 
  "47244640257" -> "25769803779"  [ label = "AST: "] 
  "25769803779" -> "30064771122"  [ label = "AST: "] 
  "25769803779" -> "30064771125"  [ label = "AST: "] 
  "30064771122" -> "68719476764"  [ label = "AST: "] 
  "30064771122" -> "30064771123"  [ label = "AST: "] 
  "30064771123" -> "30064771124"  [ label = "AST: "] 
  "30064771123" -> "90194313238"  [ label = "AST: "] 
  "30064771124" -> "68719476765"  [ label = "AST: "] 
  "30064771125" -> "68719476766"  [ label = "AST: "] 
  "30064771125" -> "30064771126"  [ label = "AST: "] 
  "30064771126" -> "30064771127"  [ label = "AST: "] 
  "30064771126" -> "90194313239"  [ label = "AST: "] 
  "30064771127" -> "68719476767"  [ label = "AST: "] 
  "30064771128" -> "90194313240"  [ label = "AST: "] 
  "47244640258" -> "30064771129"  [ label = "AST: "] 
  "47244640258" -> "25769803780"  [ label = "AST: "] 
  "30064771129" -> "30064771130"  [ label = "AST: "] 
  "30064771129" -> "90194313241"  [ label = "AST: "] 
  "30064771130" -> "68719476768"  [ label = "AST: "] 
  "25769803780" -> "94489280519"  [ label = "AST: "] 
  "25769803780" -> "30064771131"  [ label = "AST: "] 
  "25769803780" -> "30064771133"  [ label = "AST: "] 
  "25769803780" -> "30064771139"  [ label = "AST: "] 
  "30064771131" -> "68719476769"  [ label = "AST: "] 
  "30064771131" -> "30064771132"  [ label = "AST: "] 
  "30064771132" -> "68719476770"  [ label = "AST: "] 
  "30064771132" -> "90194313242"  [ label = "AST: "] 
  "30064771133" -> "68719476771"  [ label = "AST: "] 
  "30064771133" -> "30064771134"  [ label = "AST: "] 
  "30064771133" -> "30064771136"  [ label = "AST: "] 
  "30064771134" -> "30064771135"  [ label = "AST: "] 
  "30064771135" -> "68719476772"  [ label = "AST: "] 
  "30064771136" -> "90194313243"  [ label = "AST: "] 
  "30064771136" -> "30064771137"  [ label = "AST: "] 
  "30064771137" -> "30064771138"  [ label = "AST: "] 
  "30064771138" -> "68719476773"  [ label = "AST: "] 
  "30064771139" -> "68719476774"  [ label = "AST: "] 
  "30064771139" -> "30064771140"  [ label = "AST: "] 
  "30064771140" -> "184683593728"  [ label = "AST: "] 
  "30064771140" -> "30064771141"  [ label = "AST: "] 
  "30064771141" -> "30064771142"  [ label = "AST: "] 
  "30064771142" -> "30064771143"  [ label = "AST: "] 
  "30064771143" -> "68719476775"  [ label = "AST: "] 
  "30064771144" -> "68719476776"  [ label = "AST: "] 
  "30064771144" -> "30064771145"  [ label = "AST: "] 
  "30064771145" -> "68719476777"  [ label = "AST: "] 
  "30064771145" -> "90194313244"  [ label = "AST: "] 
  "30064771145" -> "30064771146"  [ label = "AST: "] 
  "30064771145" -> "30064771150"  [ label = "AST: "] 
  "30064771146" -> "30064771147"  [ label = "AST: "] 
  "30064771147" -> "30064771148"  [ label = "AST: "] 
  "30064771147" -> "68719476779"  [ label = "AST: "] 
  "30064771147" -> "68719476780"  [ label = "AST: "] 
  "30064771147" -> "30064771149"  [ label = "AST: "] 
  "30064771148" -> "68719476778"  [ label = "AST: "] 
  "30064771148" -> "90194313245"  [ label = "AST: "] 
  "30064771149" -> "68719476781"  [ label = "AST: "] 
  "30064771149" -> "90194313246"  [ label = "AST: "] 
  "30064771150" -> "68719476782"  [ label = "AST: "] 
  "30064771151" -> "68719476783"  [ label = "AST: "] 
  "30064771151" -> "30064771152"  [ label = "AST: "] 
  "30064771152" -> "68719476784"  [ label = "AST: "] 
  "30064771153" -> "68719476785"  [ label = "AST: "] 
  "30064771153" -> "30064771154"  [ label = "AST: "] 
  "30064771154" -> "68719476786"  [ label = "AST: "] 
  "30064771155" -> "68719476787"  [ label = "AST: "] 
  "30064771155" -> "30064771156"  [ label = "AST: "] 
  "30064771156" -> "68719476788"  [ label = "AST: "] 
  "30064771157" -> "30064771158"  [ label = "AST: "] 
  "30064771157" -> "30064771159"  [ label = "AST: "] 
  "30064771157" -> "30064771160"  [ label = "AST: "] 
  "30064771157" -> "68719476792"  [ label = "AST: "] 
  "30064771157" -> "68719476793"  [ label = "AST: "] 
  "30064771157" -> "68719476794"  [ label = "AST: "] 
  "30064771157" -> "68719476795"  [ label = "AST: "] 
  "30064771158" -> "68719476789"  [ label = "AST: "] 
  "30064771159" -> "68719476790"  [ label = "AST: "] 
  "30064771160" -> "68719476791"  [ label = "AST: "] 
  "30064771072" -> "30064771075"  [ label = "CFG: "] 
  "30064771074" -> "30064771079"  [ label = "CFG: "] 
  "30064771076" -> "30064771085"  [ label = "CFG: "] 
  "30064771081" -> "30064771096"  [ label = "CFG: "] 
  "30064771128" -> "30064771130"  [ label = "CFG: "] 
  "30064771144" -> "30064771152"  [ label = "CFG: "] 
  "30064771151" -> "30064771154"  [ label = "CFG: "] 
  "30064771153" -> "30064771156"  [ label = "CFG: "] 
  "30064771155" -> "30064771158"  [ label = "CFG: "] 
  "30064771157" -> "128849018880"  [ label = "CFG: "] 
  "30064771073" -> "30064771072"  [ label = "CFG: "] 
  "30064771075" -> "30064771074"  [ label = "CFG: "] 
  "30064771077" -> "30064771080"  [ label = "CFG: "] 
  "30064771080" -> "30064771076"  [ label = "CFG: "] 
  "30064771082" -> "30064771094"  [ label = "CFG: "] 
  "30064771094" -> "30064771081"  [ label = "CFG: "] 
  "30064771095" -> "30064771098"  [ label = "CFG: "] 
  "30064771095" -> "30064771124"  [ label = "CFG: "] 
  "30064771129" -> "30064771132"  [ label = "CFG: "] 
  "30064771129" -> "30064771148"  [ label = "CFG: "] 
  "30064771145" -> "30064771144"  [ label = "CFG: "] 
  "30064771152" -> "30064771151"  [ label = "CFG: "] 
  "30064771154" -> "30064771153"  [ label = "CFG: "] 
  "30064771156" -> "30064771155"  [ label = "CFG: "] 
  "30064771158" -> "30064771159"  [ label = "CFG: "] 
  "30064771159" -> "30064771160"  [ label = "CFG: "] 
  "30064771160" -> "30064771157"  [ label = "CFG: "] 
  "30064771078" -> "30064771077"  [ label = "CFG: "] 
  "30064771083" -> "30064771082"  [ label = "CFG: "] 
  "30064771083" -> "30064771093"  [ label = "CFG: "] 
  "30064771092" -> "30064771082"  [ label = "CFG: "] 
  "30064771096" -> "30064771095"  [ label = "CFG: "] 
  "30064771097" -> "30064771101"  [ label = "CFG: "] 
  "30064771099" -> "30064771107"  [ label = "CFG: "] 
  "30064771105" -> "30064771112"  [ label = "CFG: "] 
  "30064771111" -> "30064771114"  [ label = "CFG: "] 
  "30064771113" -> "30064771116"  [ label = "CFG: "] 
  "30064771115" -> "30064771119"  [ label = "CFG: "] 
  "30064771117" -> "30064771128"  [ label = "CFG: "] 
  "30064771130" -> "30064771129"  [ label = "CFG: "] 
  "30064771131" -> "30064771135"  [ label = "CFG: "] 
  "30064771133" -> "184683593728"  [ label = "CFG: "] 
  "30064771139" -> "30064771148"  [ label = "CFG: "] 
  "30064771146" -> "30064771150"  [ label = "CFG: "] 
  "30064771150" -> "30064771145"  [ label = "CFG: "] 
  "30064771079" -> "30064771078"  [ label = "CFG: "] 
  "30064771084" -> "30064771083"  [ label = "CFG: "] 
  "30064771084" -> "30064771088"  [ label = "CFG: "] 
  "30064771086" -> "30064771083"  [ label = "CFG: "] 
  "30064771093" -> "30064771092"  [ label = "CFG: "] 
  "30064771098" -> "30064771097"  [ label = "CFG: "] 
  "30064771100" -> "30064771104"  [ label = "CFG: "] 
  "30064771102" -> "30064771099"  [ label = "CFG: "] 
  "30064771106" -> "30064771110"  [ label = "CFG: "] 
  "30064771108" -> "30064771105"  [ label = "CFG: "] 
  "30064771112" -> "30064771111"  [ label = "CFG: "] 
  "30064771114" -> "30064771113"  [ label = "CFG: "] 
  "30064771116" -> "30064771115"  [ label = "CFG: "] 
  "30064771118" -> "30064771121"  [ label = "CFG: "] 
  "30064771121" -> "30064771117"  [ label = "CFG: "] 
  "30064771122" -> "30064771127"  [ label = "CFG: "] 
  "30064771125" -> "30064771128"  [ label = "CFG: "] 
  "30064771132" -> "30064771131"  [ label = "CFG: "] 
  "30064771134" -> "30064771138"  [ label = "CFG: "] 
  "30064771136" -> "30064771133"  [ label = "CFG: "] 
  "30064771140" -> "30064771139"  [ label = "CFG: "] 
  "30064771147" -> "30064771146"  [ label = "CFG: "] 
  "30064771085" -> "30064771084"  [ label = "CFG: "] 
  "30064771087" -> "30064771086"  [ label = "CFG: "] 
  "30064771087" -> "30064771091"  [ label = "CFG: "] 
  "30064771090" -> "30064771086"  [ label = "CFG: "] 
  "30064771101" -> "30064771100"  [ label = "CFG: "] 
  "30064771103" -> "30064771102"  [ label = "CFG: "] 
  "30064771107" -> "30064771106"  [ label = "CFG: "] 
  "30064771109" -> "30064771108"  [ label = "CFG: "] 
  "30064771119" -> "30064771118"  [ label = "CFG: "] 
  "30064771119" -> "30064771120"  [ label = "CFG: "] 
  "30064771120" -> "30064771118"  [ label = "CFG: "] 
  "30064771123" -> "30064771122"  [ label = "CFG: "] 
  "30064771126" -> "30064771125"  [ label = "CFG: "] 
  "30064771135" -> "30064771134"  [ label = "CFG: "] 
  "30064771137" -> "30064771136"  [ label = "CFG: "] 
  "184683593728" -> "30064771143"  [ label = "CFG: "] 
  "30064771141" -> "30064771140"  [ label = "CFG: "] 
  "30064771148" -> "30064771149"  [ label = "CFG: "] 
  "30064771149" -> "30064771147"  [ label = "CFG: "] 
  "30064771088" -> "30064771089"  [ label = "CFG: "] 
  "30064771089" -> "30064771087"  [ label = "CFG: "] 
  "30064771091" -> "30064771090"  [ label = "CFG: "] 
  "30064771104" -> "30064771103"  [ label = "CFG: "] 
  "30064771110" -> "30064771109"  [ label = "CFG: "] 
  "30064771124" -> "30064771123"  [ label = "CFG: "] 
  "30064771127" -> "30064771126"  [ label = "CFG: "] 
  "30064771138" -> "30064771137"  [ label = "CFG: "] 
  "30064771142" -> "30064771141"  [ label = "CFG: "] 
  "30064771143" -> "30064771142"  [ label = "CFG: "] 
  "111669149697" -> "30064771073"  [ label = "CFG: "] 
  "30064771072" -> "128849018880"  [ label = "DDG: ctx-&gt;input(0)"] 
  "30064771072" -> "128849018880"  [ label = "DDG: &amp; images_t = ctx-&gt;input(0)"] 
  "30064771074" -> "128849018880"  [ label = "DDG: ctx-&gt;input(1)"] 
  "30064771074" -> "128849018880"  [ label = "DDG: &amp; transform_t = ctx-&gt;input(1)"] 
  "30064771078" -> "128849018880"  [ label = "DDG: images_t.shape()"] 
  "30064771077" -> "128849018880"  [ label = "DDG: images_t.shape().dims()"] 
  "30064771076" -> "128849018880"  [ label = "DDG: images_t.shape().dims() == 4"] 
  "30064771076" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(&quot;Input images must have rank 4&quot;)"] 
  "30064771076" -> "128849018880"  [ label = "DDG: OP_REQUIRES(ctx, images_t.shape().dims() == 4,
              errors::InvalidArgument(&quot;Input images must have rank 4&quot;))"] 
  "30064771084" -> "128849018880"  [ label = "DDG: transform_t.shape()"] 
  "30064771083" -> "128849018880"  [ label = "DDG: TensorShapeUtils::IsMatrix(transform_t.shape())"] 
  "30064771087" -> "128849018880"  [ label = "DDG: transform_t.dim_size(0)"] 
  "30064771086" -> "128849018880"  [ label = "DDG: transform_t.dim_size(0) == images_t.dim_size(0)"] 
  "30064771090" -> "128849018880"  [ label = "DDG: transform_t.dim_size(0)"] 
  "30064771086" -> "128849018880"  [ label = "DDG: transform_t.dim_size(0) == 1"] 
  "30064771083" -> "128849018880"  [ label = "DDG: transform_t.dim_size(0) == images_t.dim_size(0) ||
                transform_t.dim_size(0) == 1"] 
  "30064771082" -> "128849018880"  [ label = "DDG: TensorShapeUtils::IsMatrix(transform_t.shape()) &amp;&amp;
               (transform_t.dim_size(0) == images_t.dim_size(0) ||
                transform_t.dim_size(0) == 1)"] 
  "30064771092" -> "128849018880"  [ label = "DDG: transform_t.dim_size(1)"] 
  "30064771082" -> "128849018880"  [ label = "DDG: transform_t.dim_size(1) == 8"] 
  "30064771081" -> "128849018880"  [ label = "DDG: TensorShapeUtils::IsMatrix(transform_t.shape()) &amp;&amp;
               (transform_t.dim_size(0) == images_t.dim_size(0) ||
                transform_t.dim_size(0) == 1) &amp;&amp;
               transform_t.dim_size(1) == 8"] 
  "30064771081" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(
                  &quot;Input transform should be num_images x 8 or 1 x 8&quot;)"] 
  "30064771081" -> "128849018880"  [ label = "DDG: OP_REQUIRES(ctx,
              (TensorShapeUtils::IsMatrix(transform_t.shape()) &amp;&amp;
               (transform_t.dim_size(0) == images_t.dim_size(0) ||
                transform_t.dim_size(0) == 1) &amp;&amp;
               transform_t.dim_size(1) == 8),
              errors::InvalidArgument(
                  &quot;Input transform should be num_images x 8 or 1 x 8&quot;))"] 
  "30064771095" -> "128849018880"  [ label = "DDG: ctx-&gt;num_inputs() &gt;= 3"] 
  "30064771122" -> "128849018880"  [ label = "DDG: images_t.shape().dim_size(1)"] 
  "30064771122" -> "128849018880"  [ label = "DDG: out_height = images_t.shape().dim_size(1)"] 
  "30064771126" -> "128849018880"  [ label = "DDG: images_t.shape()"] 
  "30064771125" -> "128849018880"  [ label = "DDG: images_t.shape().dim_size(2)"] 
  "30064771125" -> "128849018880"  [ label = "DDG: out_width = images_t.shape().dim_size(2)"] 
  "30064771097" -> "128849018880"  [ label = "DDG: ctx-&gt;input(2)"] 
  "30064771097" -> "128849018880"  [ label = "DDG: &amp; shape_t = ctx-&gt;input(2)"] 
  "30064771100" -> "128849018880"  [ label = "DDG: shape_t.dims()"] 
  "30064771099" -> "128849018880"  [ label = "DDG: shape_t.dims() == 1"] 
  "30064771099" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(&quot;output shape must be 1-dimensional&quot;,
                                        shape_t.shape().DebugString())"] 
  "30064771099" -> "128849018880"  [ label = "DDG: OP_REQUIRES(ctx, shape_t.dims() == 1,
                errors::InvalidArgument(&quot;output shape must be 1-dimensional&quot;,
                                        shape_t.shape().DebugString()))"] 
  "30064771106" -> "128849018880"  [ label = "DDG: shape_t.NumElements()"] 
  "30064771105" -> "128849018880"  [ label = "DDG: shape_t.NumElements() == 2"] 
  "30064771109" -> "128849018880"  [ label = "DDG: shape_t.shape()"] 
  "30064771108" -> "128849018880"  [ label = "DDG: shape_t.shape().DebugString()"] 
  "30064771105" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(&quot;output shape must have two elements&quot;,
                                        shape_t.shape().DebugString())"] 
  "30064771105" -> "128849018880"  [ label = "DDG: OP_REQUIRES(ctx, shape_t.NumElements() == 2,
                errors::InvalidArgument(&quot;output shape must have two elements&quot;,
                                        shape_t.shape().DebugString()))"] 
  "30064771111" -> "128849018880"  [ label = "DDG: shape_vec"] 
  "30064771112" -> "128849018880"  [ label = "DDG: shape_t"] 
  "30064771111" -> "128849018880"  [ label = "DDG: shape_t.vec&lt;int32&gt;()"] 
  "30064771111" -> "128849018880"  [ label = "DDG: shape_vec = shape_t.vec&lt;int32&gt;()"] 
  "30064771113" -> "128849018880"  [ label = "DDG: shape_vec(0)"] 
  "30064771113" -> "128849018880"  [ label = "DDG: out_height = shape_vec(0)"] 
  "30064771115" -> "128849018880"  [ label = "DDG: shape_vec(1)"] 
  "30064771115" -> "128849018880"  [ label = "DDG: out_width = shape_vec(1)"] 
  "30064771118" -> "128849018880"  [ label = "DDG: out_height &gt; 0"] 
  "30064771118" -> "128849018880"  [ label = "DDG: out_width &gt; 0"] 
  "30064771117" -> "128849018880"  [ label = "DDG: out_height &gt; 0 &amp;&amp; out_width &gt; 0"] 
  "30064771117" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(&quot;output dimensions must be positive&quot;)"] 
  "30064771117" -> "128849018880"  [ label = "DDG: OP_REQUIRES(ctx, out_height &gt; 0 &amp;&amp; out_width &gt; 0,
                errors::InvalidArgument(&quot;output dimensions must be positive&quot;))"] 
  "30064771128" -> "128849018880"  [ label = "DDG: fill_value(0)"] 
  "30064771129" -> "128849018880"  [ label = "DDG: ctx-&gt;num_inputs()"] 
  "30064771129" -> "128849018880"  [ label = "DDG: ctx-&gt;num_inputs() &gt;= 4"] 
  "30064771131" -> "128849018880"  [ label = "DDG: ctx-&gt;input(3)"] 
  "30064771131" -> "128849018880"  [ label = "DDG: &amp; fill_value_t = ctx-&gt;input(3)"] 
  "30064771133" -> "128849018880"  [ label = "DDG: TensorShapeUtils::IsScalar(fill_value_t.shape())"] 
  "30064771137" -> "128849018880"  [ label = "DDG: fill_value_t.shape()"] 
  "30064771136" -> "128849018880"  [ label = "DDG: fill_value_t.shape().DebugString()"] 
  "30064771133" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(&quot;fill_value must be a scalar&quot;,
                                        fill_value_t.shape().DebugString())"] 
  "30064771133" -> "128849018880"  [ label = "DDG: OP_REQUIRES(ctx, TensorShapeUtils::IsScalar(fill_value_t.shape()),
                errors::InvalidArgument(&quot;fill_value must be a scalar&quot;,
                                        fill_value_t.shape().DebugString()))"] 
  "30064771143" -> "128849018880"  [ label = "DDG: fill_value_t"] 
  "30064771142" -> "128849018880"  [ label = "DDG: fill_value_t.scalar&lt;float&gt;()"] 
  "30064771140" -> "128849018880"  [ label = "DDG: *(fill_value_t.scalar&lt;float&gt;().data())"] 
  "30064771139" -> "128849018880"  [ label = "DDG: static_cast&lt;T&gt;(*(fill_value_t.scalar&lt;float&gt;().data()))"] 
  "30064771139" -> "128849018880"  [ label = "DDG: fill_value = static_cast&lt;T&gt;(*(fill_value_t.scalar&lt;float&gt;().data()))"] 
  "30064771147" -> "128849018880"  [ label = "DDG: images_t.dim_size(0)"] 
  "30064771147" -> "128849018880"  [ label = "DDG: out_height"] 
  "30064771147" -> "128849018880"  [ label = "DDG: out_width"] 
  "30064771147" -> "128849018880"  [ label = "DDG: images_t.dim_size(3)"] 
  "30064771146" -> "128849018880"  [ label = "DDG: {images_t.dim_size(0), out_height,
                                             out_width, images_t.dim_size(3)}"] 
  "30064771145" -> "128849018880"  [ label = "DDG: TensorShape({images_t.dim_size(0), out_height,
                                             out_width, images_t.dim_size(3)})"] 
  "30064771145" -> "128849018880"  [ label = "DDG: &amp;output_t"] 
  "30064771144" -> "128849018880"  [ label = "DDG: ctx-&gt;allocate_output(0,
                                TensorShape({images_t.dim_size(0), out_height,
                                             out_width, images_t.dim_size(3)}),
                                &amp;output_t)"] 
  "30064771144" -> "128849018880"  [ label = "DDG: OP_REQUIRES_OK(
      ctx, ctx-&gt;allocate_output(0,
                                TensorShape({images_t.dim_size(0), out_height,
                                             out_width, images_t.dim_size(3)}),
                                &amp;output_t))"] 
  "30064771151" -> "128849018880"  [ label = "DDG: output"] 
  "30064771152" -> "128849018880"  [ label = "DDG: output_t"] 
  "30064771151" -> "128849018880"  [ label = "DDG: output_t-&gt;tensor&lt;T, 4&gt;()"] 
  "30064771151" -> "128849018880"  [ label = "DDG: output = output_t-&gt;tensor&lt;T, 4&gt;()"] 
  "30064771154" -> "128849018880"  [ label = "DDG: images_t"] 
  "30064771153" -> "128849018880"  [ label = "DDG: images_t.tensor&lt;T, 4&gt;()"] 
  "30064771153" -> "128849018880"  [ label = "DDG: images = images_t.tensor&lt;T, 4&gt;()"] 
  "30064771156" -> "128849018880"  [ label = "DDG: transform_t"] 
  "30064771155" -> "128849018880"  [ label = "DDG: transform_t.matrix&lt;float&gt;()"] 
  "30064771155" -> "128849018880"  [ label = "DDG: transform = transform_t.matrix&lt;float&gt;()"] 
  "30064771158" -> "128849018880"  [ label = "DDG: interpolation"] 
  "30064771157" -> "128849018880"  [ label = "DDG: FillProjectiveTransform&lt;Device, T&gt;(interpolation)"] 
  "30064771159" -> "128849018880"  [ label = "DDG: ctx"] 
  "30064771157" -> "128849018880"  [ label = "DDG: ctx-&gt;eigen_device&lt;Device&gt;()"] 
  "30064771157" -> "128849018880"  [ label = "DDG: &amp;output"] 
  "30064771157" -> "128849018880"  [ label = "DDG: images"] 
  "30064771157" -> "128849018880"  [ label = "DDG: transform"] 
  "30064771157" -> "128849018880"  [ label = "DDG: fill_mode"] 
  "30064771157" -> "128849018880"  [ label = "DDG: fill_value"] 
  "30064771157" -> "128849018880"  [ label = "DDG: (FillProjectiveTransform&lt;Device, T&gt;(interpolation))(
      ctx-&gt;eigen_device&lt;Device&gt;(), &amp;output, images, transform, fill_mode,
      fill_value)"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "111669149697" -> "115964116993"  [ label = "DDG: "] 
  "111669149697" -> "115964116994"  [ label = "DDG: "] 
  "30064771073" -> "30064771072"  [ label = "DDG: ctx"] 
  "30064771073" -> "30064771072"  [ label = "DDG: 0"] 
  "30064771075" -> "30064771074"  [ label = "DDG: ctx"] 
  "30064771075" -> "30064771074"  [ label = "DDG: 1"] 
  "30064771152" -> "30064771151"  [ label = "DDG: output_t"] 
  "30064771154" -> "30064771153"  [ label = "DDG: images_t"] 
  "30064771156" -> "30064771155"  [ label = "DDG: transform_t"] 
  "30064771075" -> "30064771076"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771076"  [ label = "DDG: "] 
  "30064771077" -> "30064771076"  [ label = "DDG: images_t.shape().dims()"] 
  "30064771077" -> "30064771076"  [ label = "DDG: 4"] 
  "30064771080" -> "30064771076"  [ label = "DDG: &quot;Input images must have rank 4&quot;"] 
  "30064771076" -> "30064771081"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771081"  [ label = "DDG: "] 
  "30064771082" -> "30064771081"  [ label = "DDG: TensorShapeUtils::IsMatrix(transform_t.shape()) &amp;&amp;
               (transform_t.dim_size(0) == images_t.dim_size(0) ||
                transform_t.dim_size(0) == 1)"] 
  "30064771082" -> "30064771081"  [ label = "DDG: transform_t.dim_size(1) == 8"] 
  "30064771094" -> "30064771081"  [ label = "DDG: &quot;Input transform should be num_images x 8 or 1 x 8&quot;"] 
  "111669149697" -> "30064771128"  [ label = "DDG: "] 
  "30064771145" -> "30064771144"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771144"  [ label = "DDG: "] 
  "30064771145" -> "30064771144"  [ label = "DDG: 0"] 
  "30064771145" -> "30064771144"  [ label = "DDG: TensorShape({images_t.dim_size(0), out_height,
                                             out_width, images_t.dim_size(3)})"] 
  "30064771145" -> "30064771144"  [ label = "DDG: &amp;output_t"] 
  "30064771158" -> "30064771157"  [ label = "DDG: interpolation"] 
  "30064771159" -> "30064771157"  [ label = "DDG: ctx"] 
  "30064771151" -> "30064771157"  [ label = "DDG: output"] 
  "111669149697" -> "30064771157"  [ label = "DDG: "] 
  "30064771153" -> "30064771157"  [ label = "DDG: images"] 
  "30064771155" -> "30064771157"  [ label = "DDG: transform"] 
  "115964116994" -> "30064771157"  [ label = "DDG: fill_mode"] 
  "30064771139" -> "30064771157"  [ label = "DDG: fill_value"] 
  "115964116992" -> "30064771073"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771073"  [ label = "DDG: "] 
  "30064771073" -> "30064771075"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771075"  [ label = "DDG: "] 
  "30064771078" -> "30064771077"  [ label = "DDG: images_t.shape()"] 
  "111669149697" -> "30064771077"  [ label = "DDG: "] 
  "111669149697" -> "30064771080"  [ label = "DDG: "] 
  "30064771083" -> "30064771082"  [ label = "DDG: TensorShapeUtils::IsMatrix(transform_t.shape())"] 
  "30064771083" -> "30064771082"  [ label = "DDG: transform_t.dim_size(0) == images_t.dim_size(0) ||
                transform_t.dim_size(0) == 1"] 
  "30064771092" -> "30064771082"  [ label = "DDG: transform_t.dim_size(1)"] 
  "30064771092" -> "30064771082"  [ label = "DDG: 8"] 
  "111669149697" -> "30064771094"  [ label = "DDG: "] 
  "30064771096" -> "30064771095"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771095"  [ label = "DDG: "] 
  "30064771098" -> "30064771097"  [ label = "DDG: ctx"] 
  "30064771098" -> "30064771097"  [ label = "DDG: 2"] 
  "30064771112" -> "30064771111"  [ label = "DDG: shape_t"] 
  "30064771114" -> "30064771113"  [ label = "DDG: 0"] 
  "30064771116" -> "30064771115"  [ label = "DDG: 1"] 
  "30064771130" -> "30064771129"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771129"  [ label = "DDG: "] 
  "30064771132" -> "30064771131"  [ label = "DDG: ctx"] 
  "30064771132" -> "30064771131"  [ label = "DDG: 3"] 
  "30064771130" -> "30064771145"  [ label = "DDG: ctx"] 
  "30064771133" -> "30064771145"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771145"  [ label = "DDG: "] 
  "30064771146" -> "30064771145"  [ label = "DDG: {images_t.dim_size(0), out_height,
                                             out_width, images_t.dim_size(3)}"] 
  "30064771145" -> "30064771152"  [ label = "DDG: &amp;output_t"] 
  "111669149697" -> "30064771152"  [ label = "DDG: "] 
  "30064771149" -> "30064771154"  [ label = "DDG: images_t"] 
  "111669149697" -> "30064771154"  [ label = "DDG: "] 
  "30064771085" -> "30064771156"  [ label = "DDG: transform_t"] 
  "30064771088" -> "30064771156"  [ label = "DDG: transform_t"] 
  "30064771091" -> "30064771156"  [ label = "DDG: transform_t"] 
  "30064771093" -> "30064771156"  [ label = "DDG: transform_t"] 
  "111669149697" -> "30064771156"  [ label = "DDG: "] 
  "115964116993" -> "30064771158"  [ label = "DDG: interpolation"] 
  "111669149697" -> "30064771158"  [ label = "DDG: "] 
  "30064771144" -> "30064771159"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771159"  [ label = "DDG: "] 
  "30064771079" -> "30064771078"  [ label = "DDG: images_t"] 
  "30064771084" -> "30064771083"  [ label = "DDG: transform_t.shape()"] 
  "30064771086" -> "30064771083"  [ label = "DDG: transform_t.dim_size(0) == images_t.dim_size(0)"] 
  "30064771086" -> "30064771083"  [ label = "DDG: transform_t.dim_size(0) == 1"] 
  "30064771093" -> "30064771092"  [ label = "DDG: transform_t"] 
  "30064771093" -> "30064771092"  [ label = "DDG: 1"] 
  "111669149697" -> "30064771092"  [ label = "DDG: "] 
  "30064771081" -> "30064771096"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771096"  [ label = "DDG: "] 
  "30064771098" -> "30064771099"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771099"  [ label = "DDG: "] 
  "30064771100" -> "30064771099"  [ label = "DDG: shape_t.dims()"] 
  "30064771100" -> "30064771099"  [ label = "DDG: 1"] 
  "30064771102" -> "30064771099"  [ label = "DDG: &quot;output shape must be 1-dimensional&quot;"] 
  "30064771102" -> "30064771099"  [ label = "DDG: shape_t.shape().DebugString()"] 
  "30064771099" -> "30064771105"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771105"  [ label = "DDG: "] 
  "30064771106" -> "30064771105"  [ label = "DDG: shape_t.NumElements()"] 
  "30064771106" -> "30064771105"  [ label = "DDG: 2"] 
  "30064771108" -> "30064771105"  [ label = "DDG: &quot;output shape must have two elements&quot;"] 
  "30064771108" -> "30064771105"  [ label = "DDG: shape_t.shape().DebugString()"] 
  "30064771105" -> "30064771117"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771117"  [ label = "DDG: "] 
  "30064771118" -> "30064771117"  [ label = "DDG: out_height &gt; 0"] 
  "30064771118" -> "30064771117"  [ label = "DDG: out_width &gt; 0"] 
  "30064771121" -> "30064771117"  [ label = "DDG: &quot;output dimensions must be positive&quot;"] 
  "30064771123" -> "30064771122"  [ label = "DDG: images_t.shape()"] 
  "30064771123" -> "30064771122"  [ label = "DDG: 1"] 
  "30064771126" -> "30064771125"  [ label = "DDG: images_t.shape()"] 
  "30064771126" -> "30064771125"  [ label = "DDG: 2"] 
  "30064771096" -> "30064771130"  [ label = "DDG: ctx"] 
  "30064771117" -> "30064771130"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771130"  [ label = "DDG: "] 
  "30064771132" -> "30064771133"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771133"  [ label = "DDG: "] 
  "30064771134" -> "30064771133"  [ label = "DDG: fill_value_t.shape()"] 
  "30064771136" -> "30064771133"  [ label = "DDG: &quot;fill_value must be a scalar&quot;"] 
  "30064771136" -> "30064771133"  [ label = "DDG: fill_value_t.shape().DebugString()"] 
  "30064771147" -> "30064771146"  [ label = "DDG: images_t.dim_size(0)"] 
  "30064771147" -> "30064771146"  [ label = "DDG: out_height"] 
  "30064771147" -> "30064771146"  [ label = "DDG: out_width"] 
  "30064771147" -> "30064771146"  [ label = "DDG: images_t.dim_size(3)"] 
  "30064771072" -> "30064771079"  [ label = "DDG: images_t"] 
  "111669149697" -> "30064771079"  [ label = "DDG: "] 
  "30064771085" -> "30064771084"  [ label = "DDG: transform_t"] 
  "30064771087" -> "30064771086"  [ label = "DDG: transform_t.dim_size(0)"] 
  "30064771087" -> "30064771086"  [ label = "DDG: images_t.dim_size(0)"] 
  "30064771090" -> "30064771086"  [ label = "DDG: transform_t.dim_size(0)"] 
  "30064771090" -> "30064771086"  [ label = "DDG: 1"] 
  "30064771085" -> "30064771093"  [ label = "DDG: transform_t"] 
  "30064771088" -> "30064771093"  [ label = "DDG: transform_t"] 
  "30064771091" -> "30064771093"  [ label = "DDG: transform_t"] 
  "111669149697" -> "30064771093"  [ label = "DDG: "] 
  "30064771096" -> "30064771098"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771098"  [ label = "DDG: "] 
  "30064771101" -> "30064771100"  [ label = "DDG: shape_t"] 
  "111669149697" -> "30064771100"  [ label = "DDG: "] 
  "111669149697" -> "30064771102"  [ label = "DDG: "] 
  "30064771103" -> "30064771102"  [ label = "DDG: shape_t.shape()"] 
  "30064771107" -> "30064771106"  [ label = "DDG: shape_t"] 
  "111669149697" -> "30064771106"  [ label = "DDG: "] 
  "111669149697" -> "30064771108"  [ label = "DDG: "] 
  "30064771109" -> "30064771108"  [ label = "DDG: shape_t.shape()"] 
  "30064771110" -> "30064771112"  [ label = "DDG: shape_t"] 
  "111669149697" -> "30064771112"  [ label = "DDG: "] 
  "111669149697" -> "30064771114"  [ label = "DDG: "] 
  "111669149697" -> "30064771116"  [ label = "DDG: "] 
  "30064771119" -> "30064771118"  [ label = "DDG: out_height"] 
  "30064771119" -> "30064771118"  [ label = "DDG: 0"] 
  "30064771120" -> "30064771118"  [ label = "DDG: out_width"] 
  "30064771120" -> "30064771118"  [ label = "DDG: 0"] 
  "111669149697" -> "30064771121"  [ label = "DDG: "] 
  "30064771130" -> "30064771132"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771132"  [ label = "DDG: "] 
  "30064771135" -> "30064771134"  [ label = "DDG: fill_value_t"] 
  "111669149697" -> "30064771136"  [ label = "DDG: "] 
  "30064771137" -> "30064771136"  [ label = "DDG: fill_value_t.shape()"] 
  "30064771148" -> "30064771147"  [ label = "DDG: images_t"] 
  "30064771148" -> "30064771147"  [ label = "DDG: 0"] 
  "30064771122" -> "30064771147"  [ label = "DDG: out_height"] 
  "30064771119" -> "30064771147"  [ label = "DDG: out_height"] 
  "111669149697" -> "30064771147"  [ label = "DDG: "] 
  "30064771125" -> "30064771147"  [ label = "DDG: out_width"] 
  "30064771115" -> "30064771147"  [ label = "DDG: out_width"] 
  "30064771120" -> "30064771147"  [ label = "DDG: out_width"] 
  "30064771149" -> "30064771147"  [ label = "DDG: images_t"] 
  "30064771149" -> "30064771147"  [ label = "DDG: 3"] 
  "30064771074" -> "30064771085"  [ label = "DDG: transform_t"] 
  "111669149697" -> "30064771085"  [ label = "DDG: "] 
  "30064771088" -> "30064771087"  [ label = "DDG: transform_t"] 
  "30064771088" -> "30064771087"  [ label = "DDG: 0"] 
  "30064771089" -> "30064771087"  [ label = "DDG: images_t"] 
  "30064771089" -> "30064771087"  [ label = "DDG: 0"] 
  "30064771091" -> "30064771090"  [ label = "DDG: transform_t"] 
  "30064771091" -> "30064771090"  [ label = "DDG: 0"] 
  "111669149697" -> "30064771090"  [ label = "DDG: "] 
  "30064771097" -> "30064771101"  [ label = "DDG: shape_t"] 
  "111669149697" -> "30064771101"  [ label = "DDG: "] 
  "30064771104" -> "30064771103"  [ label = "DDG: shape_t"] 
  "30064771104" -> "30064771107"  [ label = "DDG: shape_t"] 
  "111669149697" -> "30064771107"  [ label = "DDG: "] 
  "30064771110" -> "30064771109"  [ label = "DDG: shape_t"] 
  "30064771113" -> "30064771119"  [ label = "DDG: out_height"] 
  "111669149697" -> "30064771119"  [ label = "DDG: "] 
  "30064771115" -> "30064771120"  [ label = "DDG: out_width"] 
  "111669149697" -> "30064771120"  [ label = "DDG: "] 
  "30064771124" -> "30064771123"  [ label = "DDG: images_t"] 
  "111669149697" -> "30064771123"  [ label = "DDG: "] 
  "30064771127" -> "30064771126"  [ label = "DDG: images_t"] 
  "111669149697" -> "30064771126"  [ label = "DDG: "] 
  "30064771131" -> "30064771135"  [ label = "DDG: fill_value_t"] 
  "111669149697" -> "30064771135"  [ label = "DDG: "] 
  "30064771138" -> "30064771137"  [ label = "DDG: fill_value_t"] 
  "30064771079" -> "30064771148"  [ label = "DDG: images_t"] 
  "30064771089" -> "30064771148"  [ label = "DDG: images_t"] 
  "30064771127" -> "30064771148"  [ label = "DDG: images_t"] 
  "111669149697" -> "30064771148"  [ label = "DDG: "] 
  "30064771148" -> "30064771149"  [ label = "DDG: images_t"] 
  "111669149697" -> "30064771149"  [ label = "DDG: "] 
  "30064771085" -> "30064771088"  [ label = "DDG: transform_t"] 
  "111669149697" -> "30064771088"  [ label = "DDG: "] 
  "30064771079" -> "30064771089"  [ label = "DDG: images_t"] 
  "111669149697" -> "30064771089"  [ label = "DDG: "] 
  "30064771088" -> "30064771091"  [ label = "DDG: transform_t"] 
  "111669149697" -> "30064771091"  [ label = "DDG: "] 
  "30064771101" -> "30064771104"  [ label = "DDG: shape_t"] 
  "111669149697" -> "30064771104"  [ label = "DDG: "] 
  "30064771107" -> "30064771110"  [ label = "DDG: shape_t"] 
  "111669149697" -> "30064771110"  [ label = "DDG: "] 
  "30064771079" -> "30064771124"  [ label = "DDG: images_t"] 
  "30064771089" -> "30064771124"  [ label = "DDG: images_t"] 
  "111669149697" -> "30064771124"  [ label = "DDG: "] 
  "30064771124" -> "30064771127"  [ label = "DDG: images_t"] 
  "111669149697" -> "30064771127"  [ label = "DDG: "] 
  "30064771135" -> "30064771138"  [ label = "DDG: fill_value_t"] 
  "111669149697" -> "30064771138"  [ label = "DDG: "] 
  "30064771143" -> "30064771142"  [ label = "DDG: fill_value_t"] 
  "30064771138" -> "30064771143"  [ label = "DDG: fill_value_t"] 
  "111669149697" -> "30064771143"  [ label = "DDG: "] 
  "30064771095" -> "30064771110"  [ label = "CDG: "] 
  "30064771095" -> "30064771109"  [ label = "CDG: "] 
  "30064771095" -> "30064771112"  [ label = "CDG: "] 
  "30064771095" -> "30064771111"  [ label = "CDG: "] 
  "30064771095" -> "30064771106"  [ label = "CDG: "] 
  "30064771095" -> "30064771105"  [ label = "CDG: "] 
  "30064771095" -> "30064771108"  [ label = "CDG: "] 
  "30064771095" -> "30064771107"  [ label = "CDG: "] 
  "30064771095" -> "30064771102"  [ label = "CDG: "] 
  "30064771095" -> "30064771101"  [ label = "CDG: "] 
  "30064771095" -> "30064771104"  [ label = "CDG: "] 
  "30064771095" -> "30064771103"  [ label = "CDG: "] 
  "30064771095" -> "30064771098"  [ label = "CDG: "] 
  "30064771095" -> "30064771097"  [ label = "CDG: "] 
  "30064771095" -> "30064771100"  [ label = "CDG: "] 
  "30064771095" -> "30064771099"  [ label = "CDG: "] 
  "30064771095" -> "30064771126"  [ label = "CDG: "] 
  "30064771095" -> "30064771125"  [ label = "CDG: "] 
  "30064771095" -> "30064771127"  [ label = "CDG: "] 
  "30064771095" -> "30064771122"  [ label = "CDG: "] 
  "30064771095" -> "30064771121"  [ label = "CDG: "] 
  "30064771095" -> "30064771124"  [ label = "CDG: "] 
  "30064771095" -> "30064771123"  [ label = "CDG: "] 
  "30064771095" -> "30064771118"  [ label = "CDG: "] 
  "30064771095" -> "30064771117"  [ label = "CDG: "] 
  "30064771095" -> "30064771119"  [ label = "CDG: "] 
  "30064771095" -> "30064771114"  [ label = "CDG: "] 
  "30064771095" -> "30064771113"  [ label = "CDG: "] 
  "30064771095" -> "30064771116"  [ label = "CDG: "] 
  "30064771095" -> "30064771115"  [ label = "CDG: "] 
  "30064771129" -> "30064771142"  [ label = "CDG: "] 
  "30064771129" -> "30064771141"  [ label = "CDG: "] 
  "30064771129" -> "30064771143"  [ label = "CDG: "] 
  "30064771129" -> "30064771138"  [ label = "CDG: "] 
  "30064771129" -> "30064771137"  [ label = "CDG: "] 
  "30064771129" -> "30064771140"  [ label = "CDG: "] 
  "30064771129" -> "30064771139"  [ label = "CDG: "] 
  "30064771129" -> "30064771134"  [ label = "CDG: "] 
  "30064771129" -> "30064771133"  [ label = "CDG: "] 
  "30064771129" -> "30064771136"  [ label = "CDG: "] 
  "30064771129" -> "30064771135"  [ label = "CDG: "] 
  "30064771129" -> "30064771132"  [ label = "CDG: "] 
  "30064771129" -> "30064771131"  [ label = "CDG: "] 
  "30064771129" -> "184683593728"  [ label = "CDG: "] 
  "30064771083" -> "30064771093"  [ label = "CDG: "] 
  "30064771083" -> "30064771092"  [ label = "CDG: "] 
  "30064771084" -> "30064771089"  [ label = "CDG: "] 
  "30064771084" -> "30064771086"  [ label = "CDG: "] 
  "30064771084" -> "30064771088"  [ label = "CDG: "] 
  "30064771084" -> "30064771087"  [ label = "CDG: "] 
  "30064771087" -> "30064771090"  [ label = "CDG: "] 
  "30064771087" -> "30064771091"  [ label = "CDG: "] 
  "30064771119" -> "30064771120"  [ label = "CDG: "] 
}
"""
)
