[33mval[0m [36mres1127[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "GetCudnnConvolutionBackwardFilterAlgorithm" {  
"111669149697" [label = <(METHOD,GetCudnnConvolutionBackwardFilterAlgorithm)<SUB>1</SUB>> ]
"115964116992" [label = <(PARAM,Stream* stream)<SUB>2</SUB>> ]
"115964116993" [label = <(PARAM,const CudnnHandle&amp; cudnn)<SUB>2</SUB>> ]
"115964116994" [label = <(PARAM,const dnn::AlgorithmConfig&amp; algorithm_config)<SUB>3</SUB>> ]
"115964116995" [label = <(PARAM,const CudnnTensorDescriptor&amp; input_nd)<SUB>4</SUB>> ]
"115964116996" [label = <(PARAM,const CudnnFilterDescriptor&amp; filter)<SUB>4</SUB>> ]
"115964116997" [label = <(PARAM,dnn::DataType element_type)<SUB>5</SUB>> ]
"115964116998" [label = <(PARAM,const dnn::ConvolutionDescriptor&amp; convolution_descriptor)<SUB>6</SUB>> ]
"115964116999" [label = <(PARAM,const CudnnTensorDescriptor&amp; output_nd)<SUB>7</SUB>> ]
"115964117000" [label = <(PARAM,ScratchAllocator* scratch_allocator)<SUB>7</SUB>> ]
"115964117001" [label = <(PARAM,DeviceMemory&lt;uint8_t&gt;* scratch)<SUB>8</SUB>> ]
"25769803777" [label = <(BLOCK,{
  std::optional&lt;dnn::AlgorithmDesc&gt; algo_desc...,{
  std::optional&lt;dnn::AlgorithmDesc&gt; algo_desc...)<SUB>8</SUB>> ]
"30064771072" [label = <(&lt;operator&gt;.assignment,std::optional&lt;dnn::AlgorithmDesc&gt; algo_desc = a...)<SUB>9</SUB>> ]
"30064771073" [label = <(&lt;operator&gt;.greaterThan,std::optional&lt;dnn::AlgorithmDesc&gt; algo_desc)<SUB>9</SUB>> ]
"30064771074" [label = <(&lt;operator&gt;.lessThan,std::optional&lt;dnn::AlgorithmDesc)<SUB>9</SUB>> ]
"30064771075" [label = <(&lt;operator&gt;.fieldAccess,std::optional)<SUB>9</SUB>> ]
"68719476736" [label = <(IDENTIFIER,std,std::optional&lt;dnn::AlgorithmDesc)<SUB>9</SUB>> ]
"55834574848" [label = <(FIELD_IDENTIFIER,optional,optional)<SUB>9</SUB>> ]
"30064771076" [label = <(&lt;operator&gt;.fieldAccess,dnn::AlgorithmDesc)<SUB>9</SUB>> ]
"68719476737" [label = <(IDENTIFIER,dnn,std::optional&lt;dnn::AlgorithmDesc)<SUB>9</SUB>> ]
"55834574849" [label = <(FIELD_IDENTIFIER,AlgorithmDesc,AlgorithmDesc)<SUB>9</SUB>> ]
"68719476738" [label = <(IDENTIFIER,algo_desc,std::optional&lt;dnn::AlgorithmDesc&gt; algo_desc)<SUB>9</SUB>> ]
"30064771077" [label = <(algorithm,algorithm_config.algorithm())<SUB>9</SUB>> ]
"68719476739" [label = <(IDENTIFIER,algorithm_config,algorithm_config.algorithm())<SUB>9</SUB>> ]
"94489280512" [label = <(LOCAL,CudnnConvolutionDescriptor conv: CudnnConvolutionDescriptor)<SUB>10</SUB>> ]
"30064771078" [label = <(conv,conv(
      convolution_descriptor,
      ToCud...)<SUB>10</SUB>> ]
"68719476740" [label = <(IDENTIFIER,convolution_descriptor,conv(
      convolution_descriptor,
      ToCud...)<SUB>11</SUB>> ]
"30064771079" [label = <(ToCudnnDataType,ToCudnnDataType(GetConvAccumulatorType(element_...)<SUB>12</SUB>> ]
"30064771080" [label = <(GetConvAccumulatorType,GetConvAccumulatorType(element_type))<SUB>12</SUB>> ]
"68719476741" [label = <(IDENTIFIER,element_type,GetConvAccumulatorType(element_type))<SUB>12</SUB>> ]
"94489280513" [label = <(LOCAL,bool use_tensor_ops: bool)<SUB>13</SUB>> ]
"30064771081" [label = <(TF_ASSIGN_OR_RETURN,TF_ASSIGN_OR_RETURN(use_tensor_ops,
           ...)<SUB>14</SUB>> ]
"68719476742" [label = <(IDENTIFIER,use_tensor_ops,TF_ASSIGN_OR_RETURN(use_tensor_ops,
           ...)<SUB>14</SUB>> ]
"30064771082" [label = <(UseTensorOps,UseTensorOps(stream, element_type, algo_desc))<SUB>15</SUB>> ]
"68719476743" [label = <(IDENTIFIER,stream,UseTensorOps(stream, element_type, algo_desc))<SUB>15</SUB>> ]
"68719476744" [label = <(IDENTIFIER,element_type,UseTensorOps(stream, element_type, algo_desc))<SUB>15</SUB>> ]
"68719476745" [label = <(IDENTIFIER,algo_desc,UseTensorOps(stream, element_type, algo_desc))<SUB>15</SUB>> ]
"30064771083" [label = <(set_use_tensor_op_math,conv.set_use_tensor_op_math(use_tensor_ops))<SUB>16</SUB>> ]
"68719476746" [label = <(IDENTIFIER,conv,conv.set_use_tensor_op_math(use_tensor_ops))<SUB>16</SUB>> ]
"68719476747" [label = <(IDENTIFIER,use_tensor_ops,conv.set_use_tensor_op_math(use_tensor_ops))<SUB>16</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,IF,if (!algo_desc.has_value()))<SUB>18</SUB>> ]
"30064771084" [label = <(&lt;operator&gt;.logicalNot,!algo_desc.has_value())<SUB>18</SUB>> ]
"30064771085" [label = <(has_value,algo_desc.has_value())<SUB>18</SUB>> ]
"68719476748" [label = <(IDENTIFIER,algo_desc,algo_desc.has_value())<SUB>18</SUB>> ]
"25769803778" [label = <(BLOCK,{
    // Pick fastest algorithm within memory l...,{
    // Pick fastest algorithm within memory l...)<SUB>18</SUB>> ]
"94489280514" [label = <(LOCAL,bool specify_workspace_limit: bool)<SUB>21</SUB>> ]
"30064771086" [label = <(&lt;operator&gt;.assignment,specify_workspace_limit = scratch_allocator != ...)<SUB>21</SUB>> ]
"68719476749" [label = <(IDENTIFIER,specify_workspace_limit,specify_workspace_limit = scratch_allocator != ...)<SUB>21</SUB>> ]
"30064771087" [label = <(&lt;operator&gt;.notEquals,scratch_allocator != nullptr)<SUB>21</SUB>> ]
"68719476750" [label = <(IDENTIFIER,scratch_allocator,scratch_allocator != nullptr)<SUB>21</SUB>> ]
"90194313216" [label = <(LITERAL,nullptr,scratch_allocator != nullptr)<SUB>21</SUB>> ]
"94489280515" [label = <(LOCAL,auto memory_limit_bytes: auto)<SUB>22</SUB>> ]
"30064771088" [label = <(&lt;operator&gt;.assignment,memory_limit_bytes =
        specify_workspace_...)<SUB>22</SUB>> ]
"68719476751" [label = <(IDENTIFIER,memory_limit_bytes,memory_limit_bytes =
        specify_workspace_...)<SUB>22</SUB>> ]
"30064771089" [label = <(&lt;operator&gt;.conditional,specify_workspace_limit
            ? std::max(...)<SUB>23</SUB>> ]
"68719476752" [label = <(IDENTIFIER,specify_workspace_limit,specify_workspace_limit
            ? std::max(...)<SUB>23</SUB>> ]
"30064771090" [label = <(max,std::max(scratch_allocator-&gt;GetMemoryLimitInByt...)<SUB>24</SUB>> ]
"30064771091" [label = <(GetMemoryLimitInBytes,scratch_allocator-&gt;GetMemoryLimitInBytes())<SUB>24</SUB>> ]
"68719476753" [label = <(IDENTIFIER,scratch_allocator,scratch_allocator-&gt;GetMemoryLimitInBytes())<SUB>24</SUB>> ]
"30064771092" [label = <(int64_t,int64_t{0})<SUB>24</SUB>> ]
"30064771093" [label = <(&lt;operator&gt;.arrayInitializer,{0})<SUB>24</SUB>> ]
"90194313217" [label = <(LITERAL,0,{0})<SUB>24</SUB>> ]
"30064771094" [label = <(int64_t,int64_t{0})<SUB>25</SUB>> ]
"30064771095" [label = <(&lt;operator&gt;.arrayInitializer,{0})<SUB>25</SUB>> ]
"90194313218" [label = <(LITERAL,0,{0})<SUB>25</SUB>> ]
"30064771096" [label = <(&lt;operator&gt;.assignment,algo_desc = dnn::AlgorithmDesc(algo, use_tensor...)<SUB>30</SUB>> ]
"68719476754" [label = <(IDENTIFIER,algo_desc,algo_desc = dnn::AlgorithmDesc(algo, use_tensor...)<SUB>30</SUB>> ]
"30064771097" [label = <(AlgorithmDesc,dnn::AlgorithmDesc(algo, use_tensor_ops))<SUB>30</SUB>> ]
"68719476755" [label = <(IDENTIFIER,algo,dnn::AlgorithmDesc(algo, use_tensor_ops))<SUB>30</SUB>> ]
"68719476756" [label = <(IDENTIFIER,use_tensor_ops,dnn::AlgorithmDesc(algo, use_tensor_ops))<SUB>30</SUB>> ]
"30064771098" [label = <(&lt;operator&gt;.assignment,tsl::StatusOr&lt;DeviceMemory&lt;uint8_t&gt;&gt; scratch_or...)<SUB>33</SUB>> ]
"30064771099" [label = <(&lt;operator&gt;.lessThan,tsl::StatusOr&lt;DeviceMemory&lt;uint8_t&gt;&gt; scratch_or)<SUB>33</SUB>> ]
"30064771100" [label = <(&lt;operator&gt;.lessThan,tsl::StatusOr&lt;DeviceMemory)<SUB>33</SUB>> ]
"30064771101" [label = <(&lt;operator&gt;.fieldAccess,tsl::StatusOr)<SUB>33</SUB>> ]
"68719476757" [label = <(IDENTIFIER,tsl,tsl::StatusOr&lt;DeviceMemory)<SUB>33</SUB>> ]
"55834574850" [label = <(FIELD_IDENTIFIER,StatusOr,StatusOr)<SUB>33</SUB>> ]
"68719476758" [label = <(IDENTIFIER,DeviceMemory,tsl::StatusOr&lt;DeviceMemory)<SUB>33</SUB>> ]
"30064771102" [label = <(&lt;operator&gt;.arithmeticShiftRight,uint8_t&gt;&gt; scratch_or)<SUB>33</SUB>> ]
"68719476759" [label = <(IDENTIFIER,uint8_t,uint8_t&gt;&gt; scratch_or)<SUB>33</SUB>> ]
"68719476760" [label = <(IDENTIFIER,scratch_or,uint8_t&gt;&gt; scratch_or)<SUB>33</SUB>> ]
"30064771103" [label = <(AllocateCudnnConvolutionBackwardFilterWorkspace,AllocateCudnnConvolutionBackwardFilterWorkspace...)<SUB>34</SUB>> ]
"68719476761" [label = <(IDENTIFIER,stream,AllocateCudnnConvolutionBackwardFilterWorkspace...)<SUB>35</SUB>> ]
"68719476762" [label = <(IDENTIFIER,cudnn,AllocateCudnnConvolutionBackwardFilterWorkspace...)<SUB>35</SUB>> ]
"68719476763" [label = <(IDENTIFIER,input_nd,AllocateCudnnConvolutionBackwardFilterWorkspace...)<SUB>35</SUB>> ]
"68719476764" [label = <(IDENTIFIER,filter,AllocateCudnnConvolutionBackwardFilterWorkspace...)<SUB>35</SUB>> ]
"68719476765" [label = <(IDENTIFIER,conv,AllocateCudnnConvolutionBackwardFilterWorkspace...)<SUB>35</SUB>> ]
"68719476766" [label = <(IDENTIFIER,output_nd,AllocateCudnnConvolutionBackwardFilterWorkspace...)<SUB>35</SUB>> ]
"30064771104" [label = <(&lt;operator&gt;.indirection,*algo_desc)<SUB>35</SUB>> ]
"68719476767" [label = <(IDENTIFIER,algo_desc,AllocateCudnnConvolutionBackwardFilterWorkspace...)<SUB>35</SUB>> ]
"68719476768" [label = <(IDENTIFIER,scratch_allocator,AllocateCudnnConvolutionBackwardFilterWorkspace...)<SUB>36</SUB>> ]
"47244640257" [label = <(CONTROL_STRUCTURE,IF,if (scratch_or.ok()))<SUB>38</SUB>> ]
"30064771105" [label = <(ok,scratch_or.ok())<SUB>38</SUB>> ]
"68719476769" [label = <(IDENTIFIER,scratch_or,scratch_or.ok())<SUB>38</SUB>> ]
"25769803779" [label = <(BLOCK,{
    *scratch = scratch_or.value();
    return...,{
    *scratch = scratch_or.value();
    return...)<SUB>38</SUB>> ]
"30064771106" [label = <(&lt;operator&gt;.assignment,*scratch = scratch_or.value())<SUB>39</SUB>> ]
"30064771107" [label = <(&lt;operator&gt;.indirection,*scratch)<SUB>39</SUB>> ]
"68719476770" [label = <(IDENTIFIER,scratch,*scratch = scratch_or.value())<SUB>39</SUB>> ]
"30064771108" [label = <(value,scratch_or.value())<SUB>39</SUB>> ]
"68719476771" [label = <(IDENTIFIER,scratch_or,scratch_or.value())<SUB>39</SUB>> ]
"146028888064" [label = <(RETURN,return *algo_desc;,return *algo_desc;)<SUB>40</SUB>> ]
"30064771109" [label = <(&lt;operator&gt;.indirection,*algo_desc)<SUB>40</SUB>> ]
"68719476772" [label = <(IDENTIFIER,algo_desc,return *algo_desc;)<SUB>40</SUB>> ]
"30064771110" [label = <(&lt;operator&gt;.assignment,algo_desc = algorithm_config.algorithm_no_scrat...)<SUB>43</SUB>> ]
"68719476773" [label = <(IDENTIFIER,algo_desc,algo_desc = algorithm_config.algorithm_no_scrat...)<SUB>43</SUB>> ]
"30064771111" [label = <(algorithm_no_scratch,algorithm_config.algorithm_no_scratch())<SUB>43</SUB>> ]
"68719476774" [label = <(IDENTIFIER,algorithm_config,algorithm_config.algorithm_no_scratch())<SUB>43</SUB>> ]
"47244640258" [label = <(CONTROL_STRUCTURE,IF,if (!algo_desc.has_value()))<SUB>47</SUB>> ]
"30064771112" [label = <(&lt;operator&gt;.logicalNot,!algo_desc.has_value())<SUB>47</SUB>> ]
"30064771113" [label = <(has_value,algo_desc.has_value())<SUB>47</SUB>> ]
"68719476775" [label = <(IDENTIFIER,algo_desc,algo_desc.has_value())<SUB>47</SUB>> ]
"25769803780" [label = <(BLOCK,{
    return tsl::Status(
        port::error::...,{
    return tsl::Status(
        port::error::...)<SUB>47</SUB>> ]
"146028888065" [label = <(RETURN,return tsl::Status(
        port::error::INVALI...,return tsl::Status(
        port::error::INVALI...)<SUB>48</SUB>> ]
"30064771114" [label = <(Status,tsl::Status(
        port::error::INVALID_ARGUM...)<SUB>48</SUB>> ]
"30064771115" [label = <(&lt;operator&gt;.fieldAccess,port::error::INVALID_ARGUMENT)<SUB>49</SUB>> ]
"30064771116" [label = <(&lt;operator&gt;.fieldAccess,port::error)<SUB>49</SUB>> ]
"68719476776" [label = <(IDENTIFIER,port,tsl::Status(
        port::error::INVALID_ARGUM...)<SUB>49</SUB>> ]
"68719476777" [label = <(IDENTIFIER,error,tsl::Status(
        port::error::INVALID_ARGUM...)<SUB>49</SUB>> ]
"55834574851" [label = <(FIELD_IDENTIFIER,INVALID_ARGUMENT,INVALID_ARGUMENT)<SUB>49</SUB>> ]
"30064771117" [label = <(StrCat,absl::StrCat(
            &quot;The primary convolut...)<SUB>50</SUB>> ]
"90194313219" [label = <(LITERAL,&quot;The primary convolution algorithm failed memor...,absl::StrCat(
            &quot;The primary convolut...)<SUB>51</SUB>> ]
"30064771118" [label = <(ToString,scratch_or.status().ToString())<SUB>53</SUB>> ]
"30064771119" [label = <(status,scratch_or.status())<SUB>53</SUB>> ]
"68719476778" [label = <(IDENTIFIER,scratch_or,scratch_or.status())<SUB>53</SUB>> ]
"30064771120" [label = <(TF_ASSIGN_OR_RETURN,TF_ASSIGN_OR_RETURN(use_tensor_ops,
           ...)<SUB>56</SUB>> ]
"68719476779" [label = <(IDENTIFIER,use_tensor_ops,TF_ASSIGN_OR_RETURN(use_tensor_ops,
           ...)<SUB>56</SUB>> ]
"30064771121" [label = <(UseTensorOps,UseTensorOps(stream, element_type, algo_desc))<SUB>57</SUB>> ]
"68719476780" [label = <(IDENTIFIER,stream,UseTensorOps(stream, element_type, algo_desc))<SUB>57</SUB>> ]
"68719476781" [label = <(IDENTIFIER,element_type,UseTensorOps(stream, element_type, algo_desc))<SUB>57</SUB>> ]
"68719476782" [label = <(IDENTIFIER,algo_desc,UseTensorOps(stream, element_type, algo_desc))<SUB>57</SUB>> ]
"30064771122" [label = <(set_use_tensor_op_math,conv.set_use_tensor_op_math(use_tensor_ops))<SUB>58</SUB>> ]
"68719476783" [label = <(IDENTIFIER,conv,conv.set_use_tensor_op_math(use_tensor_ops))<SUB>58</SUB>> ]
"68719476784" [label = <(IDENTIFIER,use_tensor_ops,conv.set_use_tensor_op_math(use_tensor_ops))<SUB>58</SUB>> ]
"30064771123" [label = <(TF_ASSIGN_OR_RETURN,TF_ASSIGN_OR_RETURN(*scratch, AllocateCudnnConv...)<SUB>59</SUB>> ]
"30064771124" [label = <(&lt;operator&gt;.indirection,*scratch)<SUB>59</SUB>> ]
"68719476785" [label = <(IDENTIFIER,scratch,TF_ASSIGN_OR_RETURN(*scratch, AllocateCudnnConv...)<SUB>59</SUB>> ]
"30064771125" [label = <(AllocateCudnnConvolutionBackwardFilterWorkspace,AllocateCudnnConvolutionBackwardFilterWorkspace...)<SUB>59</SUB>> ]
"68719476786" [label = <(IDENTIFIER,stream,AllocateCudnnConvolutionBackwardFilterWorkspace...)<SUB>60</SUB>> ]
"68719476787" [label = <(IDENTIFIER,cudnn,AllocateCudnnConvolutionBackwardFilterWorkspace...)<SUB>60</SUB>> ]
"68719476788" [label = <(IDENTIFIER,input_nd,AllocateCudnnConvolutionBackwardFilterWorkspace...)<SUB>60</SUB>> ]
"68719476789" [label = <(IDENTIFIER,filter,AllocateCudnnConvolutionBackwardFilterWorkspace...)<SUB>60</SUB>> ]
"68719476790" [label = <(IDENTIFIER,conv,AllocateCudnnConvolutionBackwardFilterWorkspace...)<SUB>60</SUB>> ]
"68719476791" [label = <(IDENTIFIER,output_nd,AllocateCudnnConvolutionBackwardFilterWorkspace...)<SUB>61</SUB>> ]
"30064771126" [label = <(&lt;operator&gt;.indirection,*algo_desc)<SUB>61</SUB>> ]
"68719476792" [label = <(IDENTIFIER,algo_desc,AllocateCudnnConvolutionBackwardFilterWorkspace...)<SUB>61</SUB>> ]
"68719476793" [label = <(IDENTIFIER,scratch_allocator,AllocateCudnnConvolutionBackwardFilterWorkspace...)<SUB>61</SUB>> ]
"146028888066" [label = <(RETURN,return *algo_desc;,return *algo_desc;)<SUB>62</SUB>> ]
"30064771127" [label = <(&lt;operator&gt;.indirection,*algo_desc)<SUB>62</SUB>> ]
"68719476794" [label = <(IDENTIFIER,algo_desc,return *algo_desc;)<SUB>62</SUB>> ]
"128849018880" [label = <(METHOD_RETURN,StatusOr&lt;dnn.AlgorithmDesc&gt;)<SUB>1</SUB>> ]
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "115964116993"  [ label = "AST: "] 
  "111669149697" -> "115964116994"  [ label = "AST: "] 
  "111669149697" -> "115964116995"  [ label = "AST: "] 
  "111669149697" -> "115964116996"  [ label = "AST: "] 
  "111669149697" -> "115964116997"  [ label = "AST: "] 
  "111669149697" -> "115964116998"  [ label = "AST: "] 
  "111669149697" -> "115964116999"  [ label = "AST: "] 
  "111669149697" -> "115964117000"  [ label = "AST: "] 
  "111669149697" -> "115964117001"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "128849018880"  [ label = "AST: "] 
  "25769803777" -> "30064771072"  [ label = "AST: "] 
  "25769803777" -> "94489280512"  [ label = "AST: "] 
  "25769803777" -> "30064771078"  [ label = "AST: "] 
  "25769803777" -> "94489280513"  [ label = "AST: "] 
  "25769803777" -> "30064771081"  [ label = "AST: "] 
  "25769803777" -> "30064771083"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "25769803777" -> "30064771098"  [ label = "AST: "] 
  "25769803777" -> "47244640257"  [ label = "AST: "] 
  "25769803777" -> "30064771110"  [ label = "AST: "] 
  "25769803777" -> "47244640258"  [ label = "AST: "] 
  "25769803777" -> "30064771120"  [ label = "AST: "] 
  "25769803777" -> "30064771122"  [ label = "AST: "] 
  "25769803777" -> "30064771123"  [ label = "AST: "] 
  "25769803777" -> "146028888066"  [ label = "AST: "] 
  "30064771072" -> "30064771073"  [ label = "AST: "] 
  "30064771072" -> "30064771077"  [ label = "AST: "] 
  "30064771073" -> "30064771074"  [ label = "AST: "] 
  "30064771073" -> "68719476738"  [ label = "AST: "] 
  "30064771074" -> "30064771075"  [ label = "AST: "] 
  "30064771074" -> "30064771076"  [ label = "AST: "] 
  "30064771075" -> "68719476736"  [ label = "AST: "] 
  "30064771075" -> "55834574848"  [ label = "AST: "] 
  "30064771076" -> "68719476737"  [ label = "AST: "] 
  "30064771076" -> "55834574849"  [ label = "AST: "] 
  "30064771077" -> "68719476739"  [ label = "AST: "] 
  "30064771078" -> "68719476740"  [ label = "AST: "] 
  "30064771078" -> "30064771079"  [ label = "AST: "] 
  "30064771079" -> "30064771080"  [ label = "AST: "] 
  "30064771080" -> "68719476741"  [ label = "AST: "] 
  "30064771081" -> "68719476742"  [ label = "AST: "] 
  "30064771081" -> "30064771082"  [ label = "AST: "] 
  "30064771082" -> "68719476743"  [ label = "AST: "] 
  "30064771082" -> "68719476744"  [ label = "AST: "] 
  "30064771082" -> "68719476745"  [ label = "AST: "] 
  "30064771083" -> "68719476746"  [ label = "AST: "] 
  "30064771083" -> "68719476747"  [ label = "AST: "] 
  "47244640256" -> "30064771084"  [ label = "AST: "] 
  "47244640256" -> "25769803778"  [ label = "AST: "] 
  "30064771084" -> "30064771085"  [ label = "AST: "] 
  "30064771085" -> "68719476748"  [ label = "AST: "] 
  "25769803778" -> "94489280514"  [ label = "AST: "] 
  "25769803778" -> "30064771086"  [ label = "AST: "] 
  "25769803778" -> "94489280515"  [ label = "AST: "] 
  "25769803778" -> "30064771088"  [ label = "AST: "] 
  "25769803778" -> "30064771096"  [ label = "AST: "] 
  "30064771086" -> "68719476749"  [ label = "AST: "] 
  "30064771086" -> "30064771087"  [ label = "AST: "] 
  "30064771087" -> "68719476750"  [ label = "AST: "] 
  "30064771087" -> "90194313216"  [ label = "AST: "] 
  "30064771088" -> "68719476751"  [ label = "AST: "] 
  "30064771088" -> "30064771089"  [ label = "AST: "] 
  "30064771089" -> "68719476752"  [ label = "AST: "] 
  "30064771089" -> "30064771090"  [ label = "AST: "] 
  "30064771089" -> "30064771094"  [ label = "AST: "] 
  "30064771090" -> "30064771091"  [ label = "AST: "] 
  "30064771090" -> "30064771092"  [ label = "AST: "] 
  "30064771091" -> "68719476753"  [ label = "AST: "] 
  "30064771092" -> "30064771093"  [ label = "AST: "] 
  "30064771093" -> "90194313217"  [ label = "AST: "] 
  "30064771094" -> "30064771095"  [ label = "AST: "] 
  "30064771095" -> "90194313218"  [ label = "AST: "] 
  "30064771096" -> "68719476754"  [ label = "AST: "] 
  "30064771096" -> "30064771097"  [ label = "AST: "] 
  "30064771097" -> "68719476755"  [ label = "AST: "] 
  "30064771097" -> "68719476756"  [ label = "AST: "] 
  "30064771098" -> "30064771099"  [ label = "AST: "] 
  "30064771098" -> "30064771103"  [ label = "AST: "] 
  "30064771099" -> "30064771100"  [ label = "AST: "] 
  "30064771099" -> "30064771102"  [ label = "AST: "] 
  "30064771100" -> "30064771101"  [ label = "AST: "] 
  "30064771100" -> "68719476758"  [ label = "AST: "] 
  "30064771101" -> "68719476757"  [ label = "AST: "] 
  "30064771101" -> "55834574850"  [ label = "AST: "] 
  "30064771102" -> "68719476759"  [ label = "AST: "] 
  "30064771102" -> "68719476760"  [ label = "AST: "] 
  "30064771103" -> "68719476761"  [ label = "AST: "] 
  "30064771103" -> "68719476762"  [ label = "AST: "] 
  "30064771103" -> "68719476763"  [ label = "AST: "] 
  "30064771103" -> "68719476764"  [ label = "AST: "] 
  "30064771103" -> "68719476765"  [ label = "AST: "] 
  "30064771103" -> "68719476766"  [ label = "AST: "] 
  "30064771103" -> "30064771104"  [ label = "AST: "] 
  "30064771103" -> "68719476768"  [ label = "AST: "] 
  "30064771104" -> "68719476767"  [ label = "AST: "] 
  "47244640257" -> "30064771105"  [ label = "AST: "] 
  "47244640257" -> "25769803779"  [ label = "AST: "] 
  "30064771105" -> "68719476769"  [ label = "AST: "] 
  "25769803779" -> "30064771106"  [ label = "AST: "] 
  "25769803779" -> "146028888064"  [ label = "AST: "] 
  "30064771106" -> "30064771107"  [ label = "AST: "] 
  "30064771106" -> "30064771108"  [ label = "AST: "] 
  "30064771107" -> "68719476770"  [ label = "AST: "] 
  "30064771108" -> "68719476771"  [ label = "AST: "] 
  "146028888064" -> "30064771109"  [ label = "AST: "] 
  "30064771109" -> "68719476772"  [ label = "AST: "] 
  "30064771110" -> "68719476773"  [ label = "AST: "] 
  "30064771110" -> "30064771111"  [ label = "AST: "] 
  "30064771111" -> "68719476774"  [ label = "AST: "] 
  "47244640258" -> "30064771112"  [ label = "AST: "] 
  "47244640258" -> "25769803780"  [ label = "AST: "] 
  "30064771112" -> "30064771113"  [ label = "AST: "] 
  "30064771113" -> "68719476775"  [ label = "AST: "] 
  "25769803780" -> "146028888065"  [ label = "AST: "] 
  "146028888065" -> "30064771114"  [ label = "AST: "] 
  "30064771114" -> "30064771115"  [ label = "AST: "] 
  "30064771114" -> "30064771117"  [ label = "AST: "] 
  "30064771115" -> "30064771116"  [ label = "AST: "] 
  "30064771115" -> "55834574851"  [ label = "AST: "] 
  "30064771116" -> "68719476776"  [ label = "AST: "] 
  "30064771116" -> "68719476777"  [ label = "AST: "] 
  "30064771117" -> "90194313219"  [ label = "AST: "] 
  "30064771117" -> "30064771118"  [ label = "AST: "] 
  "30064771118" -> "30064771119"  [ label = "AST: "] 
  "30064771119" -> "68719476778"  [ label = "AST: "] 
  "30064771120" -> "68719476779"  [ label = "AST: "] 
  "30064771120" -> "30064771121"  [ label = "AST: "] 
  "30064771121" -> "68719476780"  [ label = "AST: "] 
  "30064771121" -> "68719476781"  [ label = "AST: "] 
  "30064771121" -> "68719476782"  [ label = "AST: "] 
  "30064771122" -> "68719476783"  [ label = "AST: "] 
  "30064771122" -> "68719476784"  [ label = "AST: "] 
  "30064771123" -> "30064771124"  [ label = "AST: "] 
  "30064771123" -> "30064771125"  [ label = "AST: "] 
  "30064771124" -> "68719476785"  [ label = "AST: "] 
  "30064771125" -> "68719476786"  [ label = "AST: "] 
  "30064771125" -> "68719476787"  [ label = "AST: "] 
  "30064771125" -> "68719476788"  [ label = "AST: "] 
  "30064771125" -> "68719476789"  [ label = "AST: "] 
  "30064771125" -> "68719476790"  [ label = "AST: "] 
  "30064771125" -> "68719476791"  [ label = "AST: "] 
  "30064771125" -> "30064771126"  [ label = "AST: "] 
  "30064771125" -> "68719476793"  [ label = "AST: "] 
  "30064771126" -> "68719476792"  [ label = "AST: "] 
  "146028888066" -> "30064771127"  [ label = "AST: "] 
  "30064771127" -> "68719476794"  [ label = "AST: "] 
  "30064771072" -> "30064771080"  [ label = "CFG: "] 
  "30064771078" -> "30064771082"  [ label = "CFG: "] 
  "30064771081" -> "30064771083"  [ label = "CFG: "] 
  "30064771083" -> "30064771085"  [ label = "CFG: "] 
  "30064771098" -> "30064771105"  [ label = "CFG: "] 
  "30064771110" -> "30064771113"  [ label = "CFG: "] 
  "30064771120" -> "30064771122"  [ label = "CFG: "] 
  "30064771122" -> "30064771124"  [ label = "CFG: "] 
  "30064771123" -> "30064771127"  [ label = "CFG: "] 
  "146028888066" -> "128849018880"  [ label = "CFG: "] 
  "30064771073" -> "30064771077"  [ label = "CFG: "] 
  "30064771077" -> "30064771072"  [ label = "CFG: "] 
  "30064771079" -> "30064771078"  [ label = "CFG: "] 
  "30064771082" -> "30064771081"  [ label = "CFG: "] 
  "30064771084" -> "30064771087"  [ label = "CFG: "] 
  "30064771084" -> "55834574850"  [ label = "CFG: "] 
  "30064771099" -> "30064771104"  [ label = "CFG: "] 
  "30064771103" -> "30064771098"  [ label = "CFG: "] 
  "30064771105" -> "30064771107"  [ label = "CFG: "] 
  "30064771105" -> "30064771111"  [ label = "CFG: "] 
  "30064771111" -> "30064771110"  [ label = "CFG: "] 
  "30064771112" -> "30064771116"  [ label = "CFG: "] 
  "30064771112" -> "30064771121"  [ label = "CFG: "] 
  "30064771121" -> "30064771120"  [ label = "CFG: "] 
  "30064771124" -> "30064771126"  [ label = "CFG: "] 
  "30064771125" -> "30064771123"  [ label = "CFG: "] 
  "30064771127" -> "146028888066"  [ label = "CFG: "] 
  "30064771074" -> "30064771073"  [ label = "CFG: "] 
  "30064771080" -> "30064771079"  [ label = "CFG: "] 
  "30064771085" -> "30064771084"  [ label = "CFG: "] 
  "30064771086" -> "30064771091"  [ label = "CFG: "] 
  "30064771086" -> "30064771095"  [ label = "CFG: "] 
  "30064771088" -> "30064771097"  [ label = "CFG: "] 
  "30064771096" -> "55834574850"  [ label = "CFG: "] 
  "30064771100" -> "30064771102"  [ label = "CFG: "] 
  "30064771102" -> "30064771099"  [ label = "CFG: "] 
  "30064771104" -> "30064771103"  [ label = "CFG: "] 
  "30064771106" -> "30064771109"  [ label = "CFG: "] 
  "146028888064" -> "128849018880"  [ label = "CFG: "] 
  "30064771113" -> "30064771112"  [ label = "CFG: "] 
  "146028888065" -> "128849018880"  [ label = "CFG: "] 
  "30064771126" -> "30064771125"  [ label = "CFG: "] 
  "30064771075" -> "55834574849"  [ label = "CFG: "] 
  "30064771076" -> "30064771074"  [ label = "CFG: "] 
  "30064771087" -> "30064771086"  [ label = "CFG: "] 
  "30064771089" -> "30064771088"  [ label = "CFG: "] 
  "30064771097" -> "30064771096"  [ label = "CFG: "] 
  "30064771101" -> "30064771100"  [ label = "CFG: "] 
  "30064771107" -> "30064771108"  [ label = "CFG: "] 
  "30064771108" -> "30064771106"  [ label = "CFG: "] 
  "30064771109" -> "146028888064"  [ label = "CFG: "] 
  "30064771114" -> "146028888065"  [ label = "CFG: "] 
  "55834574848" -> "30064771075"  [ label = "CFG: "] 
  "55834574849" -> "30064771076"  [ label = "CFG: "] 
  "30064771090" -> "30064771089"  [ label = "CFG: "] 
  "30064771094" -> "30064771089"  [ label = "CFG: "] 
  "55834574850" -> "30064771101"  [ label = "CFG: "] 
  "30064771115" -> "30064771119"  [ label = "CFG: "] 
  "30064771117" -> "30064771114"  [ label = "CFG: "] 
  "30064771091" -> "30064771093"  [ label = "CFG: "] 
  "30064771092" -> "30064771090"  [ label = "CFG: "] 
  "30064771095" -> "30064771094"  [ label = "CFG: "] 
  "30064771116" -> "55834574851"  [ label = "CFG: "] 
  "55834574851" -> "30064771115"  [ label = "CFG: "] 
  "30064771118" -> "30064771117"  [ label = "CFG: "] 
  "30064771093" -> "30064771092"  [ label = "CFG: "] 
  "30064771119" -> "30064771118"  [ label = "CFG: "] 
  "111669149697" -> "55834574848"  [ label = "CFG: "] 
  "146028888064" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888065" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888066" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "115964117001" -> "128849018880"  [ label = "DDG: scratch"] 
  "30064771074" -> "128849018880"  [ label = "DDG: std::optional"] 
  "30064771074" -> "128849018880"  [ label = "DDG: dnn::AlgorithmDesc"] 
  "30064771073" -> "128849018880"  [ label = "DDG: std::optional&lt;dnn::AlgorithmDesc"] 
  "30064771072" -> "128849018880"  [ label = "DDG: std::optional&lt;dnn::AlgorithmDesc&gt; algo_desc"] 
  "30064771077" -> "128849018880"  [ label = "DDG: algorithm_config"] 
  "30064771072" -> "128849018880"  [ label = "DDG: algorithm_config.algorithm()"] 
  "30064771072" -> "128849018880"  [ label = "DDG: std::optional&lt;dnn::AlgorithmDesc&gt; algo_desc = algorithm_config.algorithm()"] 
  "30064771078" -> "128849018880"  [ label = "DDG: convolution_descriptor"] 
  "30064771079" -> "128849018880"  [ label = "DDG: GetConvAccumulatorType(element_type)"] 
  "30064771078" -> "128849018880"  [ label = "DDG: ToCudnnDataType(GetConvAccumulatorType(element_type))"] 
  "30064771078" -> "128849018880"  [ label = "DDG: conv(
      convolution_descriptor,
      ToCudnnDataType(GetConvAccumulatorType(element_type)))"] 
  "30064771082" -> "128849018880"  [ label = "DDG: element_type"] 
  "30064771081" -> "128849018880"  [ label = "DDG: UseTensorOps(stream, element_type, algo_desc)"] 
  "30064771081" -> "128849018880"  [ label = "DDG: TF_ASSIGN_OR_RETURN(use_tensor_ops,
                      UseTensorOps(stream, element_type, algo_desc))"] 
  "30064771083" -> "128849018880"  [ label = "DDG: use_tensor_ops"] 
  "30064771083" -> "128849018880"  [ label = "DDG: conv.set_use_tensor_op_math(use_tensor_ops)"] 
  "30064771085" -> "128849018880"  [ label = "DDG: algo_desc"] 
  "30064771084" -> "128849018880"  [ label = "DDG: algo_desc.has_value()"] 
  "30064771084" -> "128849018880"  [ label = "DDG: !algo_desc.has_value()"] 
  "30064771086" -> "128849018880"  [ label = "DDG: scratch_allocator != nullptr"] 
  "30064771086" -> "128849018880"  [ label = "DDG: specify_workspace_limit = scratch_allocator != nullptr"] 
  "30064771088" -> "128849018880"  [ label = "DDG: memory_limit_bytes"] 
  "30064771089" -> "128849018880"  [ label = "DDG: specify_workspace_limit"] 
  "30064771094" -> "128849018880"  [ label = "DDG: {0}"] 
  "30064771089" -> "128849018880"  [ label = "DDG: int64_t{0}"] 
  "30064771090" -> "128849018880"  [ label = "DDG: scratch_allocator-&gt;GetMemoryLimitInBytes()"] 
  "30064771092" -> "128849018880"  [ label = "DDG: {0}"] 
  "30064771089" -> "128849018880"  [ label = "DDG: std::max(scratch_allocator-&gt;GetMemoryLimitInBytes(), int64_t{0})"] 
  "30064771088" -> "128849018880"  [ label = "DDG: specify_workspace_limit
            ? std::max(scratch_allocator-&gt;GetMemoryLimitInBytes(), int64_t{0})
            : int64_t{0}"] 
  "30064771088" -> "128849018880"  [ label = "DDG: memory_limit_bytes =
        specify_workspace_limit
            ? std::max(scratch_allocator-&gt;GetMemoryLimitInBytes(), int64_t{0})
            : int64_t{0}"] 
  "30064771096" -> "128849018880"  [ label = "DDG: algo_desc"] 
  "30064771097" -> "128849018880"  [ label = "DDG: use_tensor_ops"] 
  "30064771096" -> "128849018880"  [ label = "DDG: dnn::AlgorithmDesc(algo, use_tensor_ops)"] 
  "30064771096" -> "128849018880"  [ label = "DDG: algo_desc = dnn::AlgorithmDesc(algo, use_tensor_ops)"] 
  "30064771100" -> "128849018880"  [ label = "DDG: tsl::StatusOr"] 
  "30064771099" -> "128849018880"  [ label = "DDG: tsl::StatusOr&lt;DeviceMemory"] 
  "30064771099" -> "128849018880"  [ label = "DDG: uint8_t&gt;&gt; scratch_or"] 
  "30064771098" -> "128849018880"  [ label = "DDG: tsl::StatusOr&lt;DeviceMemory&lt;uint8_t&gt;&gt; scratch_or"] 
  "30064771103" -> "128849018880"  [ label = "DDG: stream"] 
  "30064771103" -> "128849018880"  [ label = "DDG: cudnn"] 
  "30064771103" -> "128849018880"  [ label = "DDG: input_nd"] 
  "30064771103" -> "128849018880"  [ label = "DDG: filter"] 
  "30064771103" -> "128849018880"  [ label = "DDG: conv"] 
  "30064771103" -> "128849018880"  [ label = "DDG: output_nd"] 
  "30064771103" -> "128849018880"  [ label = "DDG: *algo_desc"] 
  "30064771103" -> "128849018880"  [ label = "DDG: scratch_allocator"] 
  "30064771098" -> "128849018880"  [ label = "DDG: AllocateCudnnConvolutionBackwardFilterWorkspace(
          stream, cudnn, input_nd, filter, conv, output_nd, *algo_desc,
          scratch_allocator)"] 
  "30064771098" -> "128849018880"  [ label = "DDG: tsl::StatusOr&lt;DeviceMemory&lt;uint8_t&gt;&gt; scratch_or =
      AllocateCudnnConvolutionBackwardFilterWorkspace(
          stream, cudnn, input_nd, filter, conv, output_nd, *algo_desc,
          scratch_allocator)"] 
  "30064771105" -> "128849018880"  [ label = "DDG: scratch_or.ok()"] 
  "30064771106" -> "128849018880"  [ label = "DDG: *scratch"] 
  "30064771108" -> "128849018880"  [ label = "DDG: scratch_or"] 
  "30064771106" -> "128849018880"  [ label = "DDG: scratch_or.value()"] 
  "30064771106" -> "128849018880"  [ label = "DDG: *scratch = scratch_or.value()"] 
  "30064771100" -> "128849018880"  [ label = "DDG: DeviceMemory"] 
  "30064771102" -> "128849018880"  [ label = "DDG: uint8_t"] 
  "30064771097" -> "128849018880"  [ label = "DDG: algo"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "111669149697" -> "115964116993"  [ label = "DDG: "] 
  "111669149697" -> "115964116994"  [ label = "DDG: "] 
  "111669149697" -> "115964116995"  [ label = "DDG: "] 
  "111669149697" -> "115964116996"  [ label = "DDG: "] 
  "111669149697" -> "115964116997"  [ label = "DDG: "] 
  "111669149697" -> "115964116998"  [ label = "DDG: "] 
  "111669149697" -> "115964116999"  [ label = "DDG: "] 
  "111669149697" -> "115964117000"  [ label = "DDG: "] 
  "111669149697" -> "115964117001"  [ label = "DDG: "] 
  "30064771077" -> "30064771072"  [ label = "DDG: algorithm_config"] 
  "30064771103" -> "30064771098"  [ label = "DDG: scratch_allocator"] 
  "30064771103" -> "30064771098"  [ label = "DDG: *algo_desc"] 
  "30064771103" -> "30064771098"  [ label = "DDG: filter"] 
  "30064771103" -> "30064771098"  [ label = "DDG: conv"] 
  "30064771103" -> "30064771098"  [ label = "DDG: stream"] 
  "30064771103" -> "30064771098"  [ label = "DDG: output_nd"] 
  "30064771103" -> "30064771098"  [ label = "DDG: cudnn"] 
  "30064771103" -> "30064771098"  [ label = "DDG: input_nd"] 
  "30064771111" -> "30064771110"  [ label = "DDG: algorithm_config"] 
  "115964116998" -> "30064771078"  [ label = "DDG: convolution_descriptor"] 
  "111669149697" -> "30064771078"  [ label = "DDG: "] 
  "30064771079" -> "30064771078"  [ label = "DDG: GetConvAccumulatorType(element_type)"] 
  "111669149697" -> "30064771081"  [ label = "DDG: "] 
  "30064771082" -> "30064771081"  [ label = "DDG: stream"] 
  "30064771082" -> "30064771081"  [ label = "DDG: element_type"] 
  "30064771082" -> "30064771081"  [ label = "DDG: algo_desc"] 
  "111669149697" -> "30064771083"  [ label = "DDG: "] 
  "30064771081" -> "30064771083"  [ label = "DDG: use_tensor_ops"] 
  "30064771083" -> "30064771120"  [ label = "DDG: use_tensor_ops"] 
  "30064771097" -> "30064771120"  [ label = "DDG: use_tensor_ops"] 
  "111669149697" -> "30064771120"  [ label = "DDG: "] 
  "30064771121" -> "30064771120"  [ label = "DDG: stream"] 
  "30064771121" -> "30064771120"  [ label = "DDG: element_type"] 
  "30064771121" -> "30064771120"  [ label = "DDG: algo_desc"] 
  "30064771103" -> "30064771122"  [ label = "DDG: conv"] 
  "111669149697" -> "30064771122"  [ label = "DDG: "] 
  "30064771120" -> "30064771122"  [ label = "DDG: use_tensor_ops"] 
  "30064771125" -> "30064771123"  [ label = "DDG: filter"] 
  "30064771125" -> "30064771123"  [ label = "DDG: scratch_allocator"] 
  "30064771125" -> "30064771123"  [ label = "DDG: input_nd"] 
  "30064771125" -> "30064771123"  [ label = "DDG: cudnn"] 
  "30064771125" -> "30064771123"  [ label = "DDG: *algo_desc"] 
  "30064771125" -> "30064771123"  [ label = "DDG: output_nd"] 
  "30064771125" -> "30064771123"  [ label = "DDG: stream"] 
  "30064771125" -> "30064771123"  [ label = "DDG: conv"] 
  "30064771074" -> "30064771073"  [ label = "DDG: std::optional"] 
  "30064771074" -> "30064771073"  [ label = "DDG: dnn::AlgorithmDesc"] 
  "111669149697" -> "30064771073"  [ label = "DDG: "] 
  "115964116994" -> "30064771077"  [ label = "DDG: algorithm_config"] 
  "111669149697" -> "30064771077"  [ label = "DDG: "] 
  "30064771080" -> "30064771079"  [ label = "DDG: element_type"] 
  "115964116992" -> "30064771082"  [ label = "DDG: stream"] 
  "111669149697" -> "30064771082"  [ label = "DDG: "] 
  "30064771080" -> "30064771082"  [ label = "DDG: element_type"] 
  "30064771073" -> "30064771082"  [ label = "DDG: algo_desc"] 
  "30064771085" -> "30064771084"  [ label = "DDG: algo_desc"] 
  "30064771087" -> "30064771086"  [ label = "DDG: scratch_allocator"] 
  "30064771087" -> "30064771086"  [ label = "DDG: nullptr"] 
  "30064771090" -> "30064771088"  [ label = "DDG: scratch_allocator-&gt;GetMemoryLimitInBytes()"] 
  "30064771090" -> "30064771088"  [ label = "DDG: int64_t{0}"] 
  "30064771094" -> "30064771088"  [ label = "DDG: {0}"] 
  "30064771097" -> "30064771096"  [ label = "DDG: algo"] 
  "30064771097" -> "30064771096"  [ label = "DDG: use_tensor_ops"] 
  "30064771100" -> "30064771099"  [ label = "DDG: tsl::StatusOr"] 
  "30064771100" -> "30064771099"  [ label = "DDG: DeviceMemory"] 
  "30064771102" -> "30064771099"  [ label = "DDG: uint8_t"] 
  "30064771102" -> "30064771099"  [ label = "DDG: scratch_or"] 
  "30064771082" -> "30064771103"  [ label = "DDG: stream"] 
  "111669149697" -> "30064771103"  [ label = "DDG: "] 
  "115964116993" -> "30064771103"  [ label = "DDG: cudnn"] 
  "115964116995" -> "30064771103"  [ label = "DDG: input_nd"] 
  "115964116996" -> "30064771103"  [ label = "DDG: filter"] 
  "30064771083" -> "30064771103"  [ label = "DDG: conv"] 
  "115964116999" -> "30064771103"  [ label = "DDG: output_nd"] 
  "115964117000" -> "30064771103"  [ label = "DDG: scratch_allocator"] 
  "30064771087" -> "30064771103"  [ label = "DDG: scratch_allocator"] 
  "30064771091" -> "30064771103"  [ label = "DDG: scratch_allocator"] 
  "30064771102" -> "30064771105"  [ label = "DDG: scratch_or"] 
  "111669149697" -> "30064771105"  [ label = "DDG: "] 
  "30064771108" -> "30064771106"  [ label = "DDG: scratch_or"] 
  "30064771077" -> "30064771111"  [ label = "DDG: algorithm_config"] 
  "111669149697" -> "30064771111"  [ label = "DDG: "] 
  "30064771113" -> "30064771112"  [ label = "DDG: algo_desc"] 
  "30064771114" -> "146028888065"  [ label = "DDG: tsl::Status(
        port::error::INVALID_ARGUMENT,
        absl::StrCat(
            &quot;The primary convolution algorithm failed memory allocation, &quot;
            &quot;while a secondary algorithm is not provided. Actual error: &quot;,
            scratch_or.status().ToString()))"] 
  "30064771103" -> "30064771121"  [ label = "DDG: stream"] 
  "111669149697" -> "30064771121"  [ label = "DDG: "] 
  "30064771082" -> "30064771121"  [ label = "DDG: element_type"] 
  "30064771103" -> "30064771121"  [ label = "DDG: *algo_desc"] 
  "30064771113" -> "30064771121"  [ label = "DDG: algo_desc"] 
  "30064771121" -> "30064771125"  [ label = "DDG: stream"] 
  "111669149697" -> "30064771125"  [ label = "DDG: "] 
  "30064771103" -> "30064771125"  [ label = "DDG: cudnn"] 
  "30064771103" -> "30064771125"  [ label = "DDG: input_nd"] 
  "30064771103" -> "30064771125"  [ label = "DDG: filter"] 
  "30064771122" -> "30064771125"  [ label = "DDG: conv"] 
  "30064771103" -> "30064771125"  [ label = "DDG: output_nd"] 
  "30064771103" -> "30064771125"  [ label = "DDG: *algo_desc"] 
  "30064771103" -> "30064771125"  [ label = "DDG: scratch_allocator"] 
  "115964116997" -> "30064771080"  [ label = "DDG: element_type"] 
  "111669149697" -> "30064771080"  [ label = "DDG: "] 
  "30064771082" -> "30064771085"  [ label = "DDG: algo_desc"] 
  "111669149697" -> "30064771085"  [ label = "DDG: "] 
  "111669149697" -> "30064771100"  [ label = "DDG: "] 
  "111669149697" -> "30064771102"  [ label = "DDG: "] 
  "30064771103" -> "30064771113"  [ label = "DDG: *algo_desc"] 
  "30064771110" -> "30064771113"  [ label = "DDG: algo_desc"] 
  "111669149697" -> "30064771113"  [ label = "DDG: "] 
  "115964117000" -> "30064771087"  [ label = "DDG: scratch_allocator"] 
  "111669149697" -> "30064771087"  [ label = "DDG: "] 
  "30064771090" -> "30064771089"  [ label = "DDG: scratch_allocator-&gt;GetMemoryLimitInBytes()"] 
  "30064771090" -> "30064771089"  [ label = "DDG: int64_t{0}"] 
  "30064771094" -> "30064771089"  [ label = "DDG: {0}"] 
  "111669149697" -> "30064771097"  [ label = "DDG: "] 
  "30064771083" -> "30064771097"  [ label = "DDG: use_tensor_ops"] 
  "30064771105" -> "30064771108"  [ label = "DDG: scratch_or"] 
  "111669149697" -> "30064771108"  [ label = "DDG: "] 
  "30064771117" -> "30064771114"  [ label = "DDG: &quot;The primary convolution algorithm failed memory allocation, &quot;
            &quot;while a secondary algorithm is not provided. Actual error: &quot;"] 
  "30064771117" -> "30064771114"  [ label = "DDG: scratch_or.status().ToString()"] 
  "30064771091" -> "30064771090"  [ label = "DDG: scratch_allocator"] 
  "30064771092" -> "30064771090"  [ label = "DDG: {0}"] 
  "30064771095" -> "30064771094"  [ label = "DDG: 0"] 
  "111669149697" -> "30064771117"  [ label = "DDG: "] 
  "30064771118" -> "30064771117"  [ label = "DDG: scratch_or.status()"] 
  "30064771087" -> "30064771091"  [ label = "DDG: scratch_allocator"] 
  "111669149697" -> "30064771091"  [ label = "DDG: "] 
  "30064771093" -> "30064771092"  [ label = "DDG: 0"] 
  "111669149697" -> "30064771095"  [ label = "DDG: "] 
  "30064771119" -> "30064771118"  [ label = "DDG: scratch_or"] 
  "111669149697" -> "30064771093"  [ label = "DDG: "] 
  "30064771105" -> "30064771119"  [ label = "DDG: scratch_or"] 
  "111669149697" -> "30064771119"  [ label = "DDG: "] 
  "30064771084" -> "30064771096"  [ label = "CDG: "] 
  "30064771084" -> "30064771097"  [ label = "CDG: "] 
  "30064771084" -> "30064771086"  [ label = "CDG: "] 
  "30064771084" -> "30064771087"  [ label = "CDG: "] 
  "30064771084" -> "30064771088"  [ label = "CDG: "] 
  "30064771084" -> "30064771089"  [ label = "CDG: "] 
  "30064771084" -> "30064771095"  [ label = "CDG: "] 
  "30064771084" -> "30064771090"  [ label = "CDG: "] 
  "30064771084" -> "30064771091"  [ label = "CDG: "] 
  "30064771084" -> "30064771092"  [ label = "CDG: "] 
  "30064771084" -> "30064771093"  [ label = "CDG: "] 
  "30064771084" -> "30064771094"  [ label = "CDG: "] 
  "30064771105" -> "146028888064"  [ label = "CDG: "] 
  "30064771105" -> "30064771111"  [ label = "CDG: "] 
  "30064771105" -> "30064771112"  [ label = "CDG: "] 
  "30064771105" -> "30064771113"  [ label = "CDG: "] 
  "30064771105" -> "30064771106"  [ label = "CDG: "] 
  "30064771105" -> "30064771107"  [ label = "CDG: "] 
  "30064771105" -> "30064771108"  [ label = "CDG: "] 
  "30064771105" -> "30064771109"  [ label = "CDG: "] 
  "30064771105" -> "30064771110"  [ label = "CDG: "] 
  "30064771112" -> "30064771127"  [ label = "CDG: "] 
  "30064771112" -> "55834574851"  [ label = "CDG: "] 
  "30064771112" -> "146028888065"  [ label = "CDG: "] 
  "30064771112" -> "30064771114"  [ label = "CDG: "] 
  "30064771112" -> "30064771115"  [ label = "CDG: "] 
  "30064771112" -> "30064771116"  [ label = "CDG: "] 
  "30064771112" -> "30064771117"  [ label = "CDG: "] 
  "30064771112" -> "30064771118"  [ label = "CDG: "] 
  "30064771112" -> "30064771119"  [ label = "CDG: "] 
  "30064771112" -> "30064771120"  [ label = "CDG: "] 
  "30064771112" -> "30064771121"  [ label = "CDG: "] 
  "30064771112" -> "30064771122"  [ label = "CDG: "] 
  "30064771112" -> "30064771123"  [ label = "CDG: "] 
  "30064771112" -> "30064771124"  [ label = "CDG: "] 
  "30064771112" -> "30064771125"  [ label = "CDG: "] 
  "30064771112" -> "30064771126"  [ label = "CDG: "] 
  "30064771112" -> "146028888066"  [ label = "CDG: "] 
}
"""
)
