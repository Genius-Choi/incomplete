[33mval[0m [36mres2301[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "read_and_decompress_frame" {  
"111669149701" [label = <(METHOD,read_and_decompress_frame)<SUB>1</SUB>> ]
"115964116996" [label = <(PARAM,size_t length)<SUB>1</SUB>> ]
"115964116997" [label = <(PARAM,uint8_t flags)<SUB>1</SUB>> ]
"25769803785" [label = <(BLOCK,{
    using namespace compression_buffers;
    ...,{
    using namespace compression_buffers;
    ...)<SUB>2</SUB>> ]
"47244640264" [label = <(CONTROL_STRUCTURE,IF,if (flags &amp; cql_frame_flags::compression))<SUB>4</SUB>> ]
"30064771126" [label = <(&lt;operator&gt;.and,flags &amp; cql_frame_flags::compression)<SUB>4</SUB>> ]
"68719476778" [label = <(IDENTIFIER,flags,flags &amp; cql_frame_flags::compression)<SUB>4</SUB>> ]
"30064771127" [label = <(&lt;operator&gt;.fieldAccess,cql_frame_flags::compression)<SUB>4</SUB>> ]
"68719476779" [label = <(IDENTIFIER,cql_frame_flags,flags &amp; cql_frame_flags::compression)<SUB>4</SUB>> ]
"55834574850" [label = <(FIELD_IDENTIFIER,compression,compression)<SUB>4</SUB>> ]
"25769803786" [label = <(BLOCK,{
        if (_compression == cql_compression::...,{
        if (_compression == cql_compression::...)<SUB>4</SUB>> ]
"47244640265" [label = <(CONTROL_STRUCTURE,IF,if (_compression == cql_compression::lz4))<SUB>5</SUB>> ]
"30064771128" [label = <(&lt;operator&gt;.equals,_compression == cql_compression::lz4)<SUB>5</SUB>> ]
"68719476780" [label = <(IDENTIFIER,_compression,_compression == cql_compression::lz4)<SUB>5</SUB>> ]
"30064771129" [label = <(&lt;operator&gt;.fieldAccess,cql_compression::lz4)<SUB>5</SUB>> ]
"68719476781" [label = <(IDENTIFIER,cql_compression,_compression == cql_compression::lz4)<SUB>5</SUB>> ]
"55834574851" [label = <(FIELD_IDENTIFIER,lz4,lz4)<SUB>5</SUB>> ]
"25769803787" [label = <(BLOCK,{
            if (length &lt; 4) {
               ...,{
            if (length &lt; 4) {
               ...)<SUB>5</SUB>> ]
"47244640266" [label = <(CONTROL_STRUCTURE,IF,if (length &lt; 4))<SUB>6</SUB>> ]
"30064771130" [label = <(&lt;operator&gt;.lessThan,length &lt; 4)<SUB>6</SUB>> ]
"68719476782" [label = <(IDENTIFIER,length,length &lt; 4)<SUB>6</SUB>> ]
"90194313223" [label = <(LITERAL,4,length &lt; 4)<SUB>6</SUB>> ]
"25769803788" [label = <(BLOCK,{
                throw std::runtime_error(fmt:...,{
                throw std::runtime_error(fmt:...)<SUB>6</SUB>> ]
"47244640267" [label = <(CONTROL_STRUCTURE,THROW,throw std::runtime_error(fmt::format(&quot;CQL frame truncated: expected to have at least 4 bytes, got {}&quot;, length)))<SUB>7</SUB>> ]
"30064771131" [label = <(runtime_error,std::runtime_error(fmt::format(&quot;CQL frame trunc...)<SUB>7</SUB>> ]
"30064771132" [label = <(format,fmt::format(&quot;CQL frame truncated: expected to h...)<SUB>7</SUB>> ]
"90194313224" [label = <(LITERAL,&quot;CQL frame truncated: expected to have at least...,fmt::format(&quot;CQL frame truncated: expected to h...)<SUB>7</SUB>> ]
"68719476783" [label = <(IDENTIFIER,length,fmt::format(&quot;CQL frame truncated: expected to h...)<SUB>7</SUB>> ]
"146028888068" [label = <(RETURN,return _buffer_reader.read_exactly(_read_buf, l...,return _buffer_reader.read_exactly(_read_buf, l...)<SUB>9</SUB>> ]
"30064771133" [label = <(then,_buffer_reader.read_exactly(_read_buf, length)....)<SUB>9</SUB>> ]
"30064771134" [label = <(read_exactly,_buffer_reader.read_exactly(_read_buf, length))<SUB>9</SUB>> ]
"68719476784" [label = <(IDENTIFIER,_buffer_reader,_buffer_reader.read_exactly(_read_buf, length))<SUB>9</SUB>> ]
"68719476785" [label = <(IDENTIFIER,_read_buf,_buffer_reader.read_exactly(_read_buf, length))<SUB>9</SUB>> ]
"68719476786" [label = <(IDENTIFIER,length,_buffer_reader.read_exactly(_read_buf, length))<SUB>9</SUB>> ]
"124554051586" [label = <(METHOD_REF,[this] (fragmented_temporary_buffer buf) {
    ...,_buffer_reader.read_exactly(_read_buf, length)....)<SUB>9</SUB>> ]
"47244640268" [label = <(CONTROL_STRUCTURE,ELSE,else)<SUB>28</SUB>> ]
"25769803789" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>28</SUB>> ]
"47244640269" [label = <(CONTROL_STRUCTURE,IF,if (_compression == cql_compression::snappy))<SUB>28</SUB>> ]
"30064771135" [label = <(&lt;operator&gt;.equals,_compression == cql_compression::snappy)<SUB>28</SUB>> ]
"68719476787" [label = <(IDENTIFIER,_compression,_compression == cql_compression::snappy)<SUB>28</SUB>> ]
"30064771136" [label = <(&lt;operator&gt;.fieldAccess,cql_compression::snappy)<SUB>28</SUB>> ]
"68719476788" [label = <(IDENTIFIER,cql_compression,_compression == cql_compression::snappy)<SUB>28</SUB>> ]
"55834574852" [label = <(FIELD_IDENTIFIER,snappy,snappy)<SUB>28</SUB>> ]
"25769803790" [label = <(BLOCK,{
            return _buffer_reader.read_exactl...,{
            return _buffer_reader.read_exactl...)<SUB>28</SUB>> ]
"146028888069" [label = <(RETURN,return _buffer_reader.read_exactly(_read_buf, l...,return _buffer_reader.read_exactly(_read_buf, l...)<SUB>29</SUB>> ]
"30064771137" [label = <(then,_buffer_reader.read_exactly(_read_buf, length)....)<SUB>29</SUB>> ]
"30064771138" [label = <(read_exactly,_buffer_reader.read_exactly(_read_buf, length))<SUB>29</SUB>> ]
"68719476789" [label = <(IDENTIFIER,_buffer_reader,_buffer_reader.read_exactly(_read_buf, length))<SUB>29</SUB>> ]
"68719476790" [label = <(IDENTIFIER,_read_buf,_buffer_reader.read_exactly(_read_buf, length))<SUB>29</SUB>> ]
"68719476791" [label = <(IDENTIFIER,length,_buffer_reader.read_exactly(_read_buf, length))<SUB>29</SUB>> ]
"124554051587" [label = <(METHOD_REF,[this] (fragmented_temporary_buffer buf) {
    ...,_buffer_reader.read_exactly(_read_buf, length)....)<SUB>29</SUB>> ]
"47244640270" [label = <(CONTROL_STRUCTURE,ELSE,else)<SUB>45</SUB>> ]
"25769803791" [label = <(BLOCK,{
            throw exceptions::protocol_except...,{
            throw exceptions::protocol_except...)<SUB>45</SUB>> ]
"47244640271" [label = <(CONTROL_STRUCTURE,THROW,throw exceptions::protocol_exception(format(&quot;Unknown compression algorithm&quot;)))<SUB>46</SUB>> ]
"30064771139" [label = <(protocol_exception,exceptions::protocol_exception(format(&quot;Unknown ...)<SUB>46</SUB>> ]
"30064771140" [label = <(format,format(&quot;Unknown compression algorithm&quot;))<SUB>46</SUB>> ]
"90194313225" [label = <(LITERAL,&quot;Unknown compression algorithm&quot;,format(&quot;Unknown compression algorithm&quot;))<SUB>46</SUB>> ]
"146028888070" [label = <(RETURN,return _buffer_reader.read_exactly(_read_buf, l...,return _buffer_reader.read_exactly(_read_buf, l...)<SUB>49</SUB>> ]
"30064771141" [label = <(read_exactly,_buffer_reader.read_exactly(_read_buf, length))<SUB>49</SUB>> ]
"68719476792" [label = <(IDENTIFIER,_buffer_reader,_buffer_reader.read_exactly(_read_buf, length))<SUB>49</SUB>> ]
"68719476793" [label = <(IDENTIFIER,_read_buf,_buffer_reader.read_exactly(_read_buf, length))<SUB>49</SUB>> ]
"68719476794" [label = <(IDENTIFIER,length,_buffer_reader.read_exactly(_read_buf, length))<SUB>49</SUB>> ]
"128849018884" [label = <(METHOD_RETURN,future&lt;fragmented_temporary_buffer&gt;)<SUB>1</SUB>> ]
  "111669149701" -> "115964116996"  [ label = "AST: "] 
  "111669149701" -> "115964116997"  [ label = "AST: "] 
  "111669149701" -> "25769803785"  [ label = "AST: "] 
  "111669149701" -> "128849018884"  [ label = "AST: "] 
  "25769803785" -> "47244640264"  [ label = "AST: "] 
  "25769803785" -> "146028888070"  [ label = "AST: "] 
  "47244640264" -> "30064771126"  [ label = "AST: "] 
  "47244640264" -> "25769803786"  [ label = "AST: "] 
  "30064771126" -> "68719476778"  [ label = "AST: "] 
  "30064771126" -> "30064771127"  [ label = "AST: "] 
  "30064771127" -> "68719476779"  [ label = "AST: "] 
  "30064771127" -> "55834574850"  [ label = "AST: "] 
  "25769803786" -> "47244640265"  [ label = "AST: "] 
  "47244640265" -> "30064771128"  [ label = "AST: "] 
  "47244640265" -> "25769803787"  [ label = "AST: "] 
  "47244640265" -> "47244640268"  [ label = "AST: "] 
  "30064771128" -> "68719476780"  [ label = "AST: "] 
  "30064771128" -> "30064771129"  [ label = "AST: "] 
  "30064771129" -> "68719476781"  [ label = "AST: "] 
  "30064771129" -> "55834574851"  [ label = "AST: "] 
  "25769803787" -> "47244640266"  [ label = "AST: "] 
  "25769803787" -> "146028888068"  [ label = "AST: "] 
  "47244640266" -> "30064771130"  [ label = "AST: "] 
  "47244640266" -> "25769803788"  [ label = "AST: "] 
  "30064771130" -> "68719476782"  [ label = "AST: "] 
  "30064771130" -> "90194313223"  [ label = "AST: "] 
  "25769803788" -> "47244640267"  [ label = "AST: "] 
  "47244640267" -> "30064771131"  [ label = "AST: "] 
  "30064771131" -> "30064771132"  [ label = "AST: "] 
  "30064771132" -> "90194313224"  [ label = "AST: "] 
  "30064771132" -> "68719476783"  [ label = "AST: "] 
  "146028888068" -> "30064771133"  [ label = "AST: "] 
  "30064771133" -> "30064771134"  [ label = "AST: "] 
  "30064771133" -> "124554051586"  [ label = "AST: "] 
  "30064771134" -> "68719476784"  [ label = "AST: "] 
  "30064771134" -> "68719476785"  [ label = "AST: "] 
  "30064771134" -> "68719476786"  [ label = "AST: "] 
  "47244640268" -> "25769803789"  [ label = "AST: "] 
  "25769803789" -> "47244640269"  [ label = "AST: "] 
  "47244640269" -> "30064771135"  [ label = "AST: "] 
  "47244640269" -> "25769803790"  [ label = "AST: "] 
  "47244640269" -> "47244640270"  [ label = "AST: "] 
  "30064771135" -> "68719476787"  [ label = "AST: "] 
  "30064771135" -> "30064771136"  [ label = "AST: "] 
  "30064771136" -> "68719476788"  [ label = "AST: "] 
  "30064771136" -> "55834574852"  [ label = "AST: "] 
  "25769803790" -> "146028888069"  [ label = "AST: "] 
  "146028888069" -> "30064771137"  [ label = "AST: "] 
  "30064771137" -> "30064771138"  [ label = "AST: "] 
  "30064771137" -> "124554051587"  [ label = "AST: "] 
  "30064771138" -> "68719476789"  [ label = "AST: "] 
  "30064771138" -> "68719476790"  [ label = "AST: "] 
  "30064771138" -> "68719476791"  [ label = "AST: "] 
  "47244640270" -> "25769803791"  [ label = "AST: "] 
  "25769803791" -> "47244640271"  [ label = "AST: "] 
  "47244640271" -> "30064771139"  [ label = "AST: "] 
  "30064771139" -> "30064771140"  [ label = "AST: "] 
  "30064771140" -> "90194313225"  [ label = "AST: "] 
  "146028888070" -> "30064771141"  [ label = "AST: "] 
  "30064771141" -> "68719476792"  [ label = "AST: "] 
  "30064771141" -> "68719476793"  [ label = "AST: "] 
  "30064771141" -> "68719476794"  [ label = "AST: "] 
  "146028888070" -> "128849018884"  [ label = "CFG: "] 
  "30064771126" -> "55834574851"  [ label = "CFG: "] 
  "30064771126" -> "30064771141"  [ label = "CFG: "] 
  "30064771141" -> "146028888070"  [ label = "CFG: "] 
  "30064771127" -> "30064771126"  [ label = "CFG: "] 
  "55834574850" -> "30064771127"  [ label = "CFG: "] 
  "30064771128" -> "30064771130"  [ label = "CFG: "] 
  "30064771128" -> "55834574852"  [ label = "CFG: "] 
  "30064771129" -> "30064771128"  [ label = "CFG: "] 
  "146028888068" -> "128849018884"  [ label = "CFG: "] 
  "55834574851" -> "30064771129"  [ label = "CFG: "] 
  "30064771130" -> "30064771132"  [ label = "CFG: "] 
  "30064771130" -> "30064771134"  [ label = "CFG: "] 
  "30064771133" -> "146028888068"  [ label = "CFG: "] 
  "30064771134" -> "124554051586"  [ label = "CFG: "] 
  "124554051586" -> "30064771133"  [ label = "CFG: "] 
  "30064771135" -> "30064771138"  [ label = "CFG: "] 
  "30064771135" -> "30064771140"  [ label = "CFG: "] 
  "30064771131" -> "128849018884"  [ label = "CFG: "] 
  "30064771136" -> "30064771135"  [ label = "CFG: "] 
  "146028888069" -> "128849018884"  [ label = "CFG: "] 
  "30064771132" -> "30064771131"  [ label = "CFG: "] 
  "55834574852" -> "30064771136"  [ label = "CFG: "] 
  "30064771137" -> "146028888069"  [ label = "CFG: "] 
  "30064771138" -> "124554051587"  [ label = "CFG: "] 
  "124554051587" -> "30064771137"  [ label = "CFG: "] 
  "30064771139" -> "128849018884"  [ label = "CFG: "] 
  "30064771140" -> "30064771139"  [ label = "CFG: "] 
  "111669149701" -> "55834574850"  [ label = "CFG: "] 
  "146028888069" -> "128849018884"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888068" -> "128849018884"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888070" -> "128849018884"  [ label = "DDG: &lt;RET&gt;"] 
  "30064771126" -> "128849018884"  [ label = "DDG: flags"] 
  "30064771126" -> "128849018884"  [ label = "DDG: cql_frame_flags::compression"] 
  "30064771126" -> "128849018884"  [ label = "DDG: flags &amp; cql_frame_flags::compression"] 
  "30064771128" -> "128849018884"  [ label = "DDG: _compression"] 
  "30064771128" -> "128849018884"  [ label = "DDG: cql_compression::lz4"] 
  "30064771128" -> "128849018884"  [ label = "DDG: _compression == cql_compression::lz4"] 
  "30064771130" -> "128849018884"  [ label = "DDG: length &lt; 4"] 
  "30064771132" -> "128849018884"  [ label = "DDG: length"] 
  "30064771131" -> "128849018884"  [ label = "DDG: fmt::format(&quot;CQL frame truncated: expected to have at least 4 bytes, got {}&quot;, length)"] 
  "30064771131" -> "128849018884"  [ label = "DDG: std::runtime_error(fmt::format(&quot;CQL frame truncated: expected to have at least 4 bytes, got {}&quot;, length))"] 
  "111669149701" -> "115964116996"  [ label = "DDG: "] 
  "111669149701" -> "115964116997"  [ label = "DDG: "] 
  "30064771141" -> "146028888070"  [ label = "DDG: _buffer_reader.read_exactly(_read_buf, length)"] 
  "115964116997" -> "30064771126"  [ label = "DDG: flags"] 
  "111669149701" -> "30064771126"  [ label = "DDG: "] 
  "111669149701" -> "30064771141"  [ label = "DDG: "] 
  "115964116996" -> "30064771141"  [ label = "DDG: length"] 
  "111669149701" -> "30064771128"  [ label = "DDG: "] 
  "30064771133" -> "146028888068"  [ label = "DDG: _buffer_reader.read_exactly(_read_buf, length).then([this] (fragmented_temporary_buffer buf) {
                auto linearization_buffer = bytes_ostream();
                int32_t uncomp_len = request_reader(buf.get_istream(), linearization_buffer).read_int();
                if (uncomp_len &lt; 0) {
                    throw std::runtime_error(&quot;CQL frame uncompressed length is negative: &quot; + std::to_string(uncomp_len));
                }
                buf.remove_prefix(4);
                auto in = input_buffer.get_linearized_view(fragmented_temporary_buffer::view(buf));
                auto uncomp = output_buffer.make_fragmented_temporary_buffer(uncomp_len, fragmented_temporary_buffer::default_fragment_size, [&amp;] (bytes_mutable_view out) {
                    auto ret = LZ4_decompress_safe(reinterpret_cast&lt;const char*&gt;(in.data()), reinterpret_cast&lt;char*&gt;(out.data()),
                                                   in.size(), out.size());
                    if (ret &lt; 0) {
        ..."] 
  "115964116996" -> "30064771130"  [ label = "DDG: length"] 
  "111669149701" -> "30064771130"  [ label = "DDG: "] 
  "30064771134" -> "30064771133"  [ label = "DDG: _buffer_reader"] 
  "30064771134" -> "30064771133"  [ label = "DDG: _read_buf"] 
  "30064771134" -> "30064771133"  [ label = "DDG: length"] 
  "111669149701" -> "30064771133"  [ label = "DDG: "] 
  "111669149701" -> "30064771134"  [ label = "DDG: "] 
  "30064771130" -> "30064771134"  [ label = "DDG: length"] 
  "30064771128" -> "30064771135"  [ label = "DDG: _compression"] 
  "111669149701" -> "30064771135"  [ label = "DDG: "] 
  "30064771137" -> "146028888069"  [ label = "DDG: _buffer_reader.read_exactly(_read_buf, length).then([this] (fragmented_temporary_buffer buf) {
                auto in = input_buffer.get_linearized_view(fragmented_temporary_buffer::view(buf));
                size_t uncomp_len;
                if (snappy_uncompressed_length(reinterpret_cast&lt;const char*&gt;(in.data()), in.size(), &amp;uncomp_len) != SNAPPY_OK) {
                    throw std::runtime_error(&quot;CQL frame Snappy uncompressed size is unknown&quot;);
                }
                auto uncomp = output_buffer.make_fragmented_temporary_buffer(uncomp_len, fragmented_temporary_buffer::default_fragment_size, [&amp;] (bytes_mutable_view out) {
                    size_t output_len = out.size();
                    if (snappy_uncompress(reinterpret_cast&lt;const char*&gt;(in.data()), in.size(), reinterpret_cast&lt;char*&gt;(out.data()), &amp;output_len) != SNAPPY_OK) {
                        throw std::runtime_error(&quot;CQL frame Snappy uncompression failure&quot;);
                    }
                    return..."] 
  "30064771132" -> "30064771131"  [ label = "DDG: &quot;CQL frame truncated: expected to have at least 4 bytes, got {}&quot;"] 
  "30064771132" -> "30064771131"  [ label = "DDG: length"] 
  "111669149701" -> "30064771132"  [ label = "DDG: "] 
  "30064771130" -> "30064771132"  [ label = "DDG: length"] 
  "30064771138" -> "30064771137"  [ label = "DDG: _buffer_reader"] 
  "30064771138" -> "30064771137"  [ label = "DDG: _read_buf"] 
  "30064771138" -> "30064771137"  [ label = "DDG: length"] 
  "111669149701" -> "30064771137"  [ label = "DDG: "] 
  "111669149701" -> "30064771138"  [ label = "DDG: "] 
  "115964116996" -> "30064771138"  [ label = "DDG: length"] 
  "30064771140" -> "30064771139"  [ label = "DDG: &quot;Unknown compression algorithm&quot;"] 
  "111669149701" -> "30064771140"  [ label = "DDG: "] 
  "30064771126" -> "55834574851"  [ label = "CDG: "] 
  "30064771126" -> "146028888070"  [ label = "CDG: "] 
  "30064771126" -> "30064771141"  [ label = "CDG: "] 
  "30064771126" -> "30064771129"  [ label = "CDG: "] 
  "30064771126" -> "30064771128"  [ label = "CDG: "] 
  "30064771128" -> "30064771135"  [ label = "CDG: "] 
  "30064771128" -> "30064771136"  [ label = "CDG: "] 
  "30064771128" -> "55834574852"  [ label = "CDG: "] 
  "30064771128" -> "30064771130"  [ label = "CDG: "] 
  "30064771130" -> "30064771133"  [ label = "CDG: "] 
  "30064771130" -> "30064771134"  [ label = "CDG: "] 
  "30064771130" -> "146028888068"  [ label = "CDG: "] 
  "30064771130" -> "30064771131"  [ label = "CDG: "] 
  "30064771130" -> "30064771132"  [ label = "CDG: "] 
  "30064771130" -> "124554051586"  [ label = "CDG: "] 
  "30064771135" -> "30064771139"  [ label = "CDG: "] 
  "30064771135" -> "30064771140"  [ label = "CDG: "] 
  "30064771135" -> "30064771137"  [ label = "CDG: "] 
  "30064771135" -> "30064771138"  [ label = "CDG: "] 
  "30064771135" -> "146028888069"  [ label = "CDG: "] 
  "30064771135" -> "124554051587"  [ label = "CDG: "] 
}
"""
)
