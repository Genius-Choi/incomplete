[33mval[0m [36mres671[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "Fraction" {  
"111669149697" [label = <(METHOD,Fraction)<SUB>1</SUB>> ]
"115964116992" [label = <(PARAM,int32_t num)<SUB>1</SUB>> ]
"115964116993" [label = <(PARAM,int32_t den)<SUB>1</SUB>> ]
"25769803777" [label = <(BLOCK,{
  int32_t g = gcd(num, den);

  // these stra...,{
  int32_t g = gcd(num, den);

  // these stra...)<SUB>2</SUB>> ]
"94489280512" [label = <(LOCAL,int32_t g: int32_t)<SUB>3</SUB>> ]
"30064771072" [label = <(&lt;operator&gt;.assignment,g = gcd(num, den))<SUB>3</SUB>> ]
"68719476736" [label = <(IDENTIFIER,g,g = gcd(num, den))<SUB>3</SUB>> ]
"30064771073" [label = <(gcd,gcd(num, den))<SUB>3</SUB>> ]
"68719476737" [label = <(IDENTIFIER,num,gcd(num, den))<SUB>3</SUB>> ]
"68719476738" [label = <(IDENTIFIER,den,gcd(num, den))<SUB>3</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,IF,if (num == std::numeric_limits&lt;int32_t&gt;::min() &amp;&amp; g == -1))<SUB>8</SUB>> ]
"30064771074" [label = <(&lt;operator&gt;.logicalAnd,num == std::numeric_limits&lt;int32_t&gt;::min() &amp;&amp; g...)<SUB>8</SUB>> ]
"30064771075" [label = <(&lt;operator&gt;.equals,num == std::numeric_limits&lt;int32_t&gt;::min())<SUB>8</SUB>> ]
"68719476739" [label = <(IDENTIFIER,num,num == std::numeric_limits&lt;int32_t&gt;::min())<SUB>8</SUB>> ]
"30064771076" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;int32_t&gt;::min())<SUB>8</SUB>> ]
"30064771077" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;int32_t)<SUB>8</SUB>> ]
"30064771078" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>8</SUB>> ]
"68719476740" [label = <(IDENTIFIER,std,std::numeric_limits&lt;int32_t)<SUB>8</SUB>> ]
"55834574848" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>8</SUB>> ]
"68719476741" [label = <(IDENTIFIER,int32_t,std::numeric_limits&lt;int32_t)<SUB>8</SUB>> ]
"30064771079" [label = <(min,::min())<SUB>8</SUB>> ]
"30064771080" [label = <(&lt;operator&gt;.equals,g == -1)<SUB>8</SUB>> ]
"68719476742" [label = <(IDENTIFIER,g,g == -1)<SUB>8</SUB>> ]
"30064771081" [label = <(&lt;operator&gt;.minus,-1)<SUB>8</SUB>> ]
"90194313216" [label = <(LITERAL,1,-1)<SUB>8</SUB>> ]
"25769803778" [label = <(BLOCK,{
    num++;
  },{
    num++;
  })<SUB>8</SUB>> ]
"30064771082" [label = <(&lt;operator&gt;.postIncrement,num++)<SUB>9</SUB>> ]
"68719476743" [label = <(IDENTIFIER,num,num++)<SUB>9</SUB>> ]
"47244640257" [label = <(CONTROL_STRUCTURE,IF,if (den == std::numeric_limits&lt;int32_t&gt;::min() &amp;&amp; g == -1))<SUB>12</SUB>> ]
"30064771083" [label = <(&lt;operator&gt;.logicalAnd,den == std::numeric_limits&lt;int32_t&gt;::min() &amp;&amp; g...)<SUB>12</SUB>> ]
"30064771084" [label = <(&lt;operator&gt;.equals,den == std::numeric_limits&lt;int32_t&gt;::min())<SUB>12</SUB>> ]
"68719476744" [label = <(IDENTIFIER,den,den == std::numeric_limits&lt;int32_t&gt;::min())<SUB>12</SUB>> ]
"30064771085" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;int32_t&gt;::min())<SUB>12</SUB>> ]
"30064771086" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;int32_t)<SUB>12</SUB>> ]
"30064771087" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>12</SUB>> ]
"68719476745" [label = <(IDENTIFIER,std,std::numeric_limits&lt;int32_t)<SUB>12</SUB>> ]
"55834574849" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>12</SUB>> ]
"68719476746" [label = <(IDENTIFIER,int32_t,std::numeric_limits&lt;int32_t)<SUB>12</SUB>> ]
"30064771088" [label = <(min,::min())<SUB>12</SUB>> ]
"30064771089" [label = <(&lt;operator&gt;.equals,g == -1)<SUB>12</SUB>> ]
"68719476747" [label = <(IDENTIFIER,g,g == -1)<SUB>12</SUB>> ]
"30064771090" [label = <(&lt;operator&gt;.minus,-1)<SUB>12</SUB>> ]
"90194313217" [label = <(LITERAL,1,-1)<SUB>12</SUB>> ]
"25769803779" [label = <(BLOCK,{
    den++;
  },{
    den++;
  })<SUB>12</SUB>> ]
"30064771091" [label = <(&lt;operator&gt;.postIncrement,den++)<SUB>13</SUB>> ]
"68719476748" [label = <(IDENTIFIER,den,den++)<SUB>13</SUB>> ]
"30064771092" [label = <(&lt;operator&gt;.assignment,numerator = num / g)<SUB>17</SUB>> ]
"68719476749" [label = <(IDENTIFIER,numerator,numerator = num / g)<SUB>17</SUB>> ]
"30064771093" [label = <(&lt;operator&gt;.division,num / g)<SUB>17</SUB>> ]
"68719476750" [label = <(IDENTIFIER,num,num / g)<SUB>17</SUB>> ]
"68719476751" [label = <(IDENTIFIER,g,num / g)<SUB>17</SUB>> ]
"30064771094" [label = <(&lt;operator&gt;.assignment,denominator = den / g)<SUB>18</SUB>> ]
"68719476752" [label = <(IDENTIFIER,denominator,denominator = den / g)<SUB>18</SUB>> ]
"30064771095" [label = <(&lt;operator&gt;.division,den / g)<SUB>18</SUB>> ]
"68719476753" [label = <(IDENTIFIER,den,den / g)<SUB>18</SUB>> ]
"68719476754" [label = <(IDENTIFIER,g,den / g)<SUB>18</SUB>> ]
"47244640258" [label = <(CONTROL_STRUCTURE,WHILE,while (denominator &gt; MAX_FRACTION_DENOMINATOR))<SUB>25</SUB>> ]
"30064771096" [label = <(&lt;operator&gt;.greaterThan,denominator &gt; MAX_FRACTION_DENOMINATOR)<SUB>25</SUB>> ]
"68719476755" [label = <(IDENTIFIER,denominator,denominator &gt; MAX_FRACTION_DENOMINATOR)<SUB>25</SUB>> ]
"68719476756" [label = <(IDENTIFIER,MAX_FRACTION_DENOMINATOR,denominator &gt; MAX_FRACTION_DENOMINATOR)<SUB>25</SUB>> ]
"25769803780" [label = <(BLOCK,{
    numerator &gt;&gt;= 1;
    denominator &gt;&gt;= 1;
  },{
    numerator &gt;&gt;= 1;
    denominator &gt;&gt;= 1;
  })<SUB>25</SUB>> ]
"30064771097" [label = <(&lt;operators&gt;.assignmentArithmeticShiftRight,numerator &gt;&gt;= 1)<SUB>26</SUB>> ]
"68719476757" [label = <(IDENTIFIER,numerator,numerator &gt;&gt;= 1)<SUB>26</SUB>> ]
"90194313218" [label = <(LITERAL,1,numerator &gt;&gt;= 1)<SUB>26</SUB>> ]
"30064771098" [label = <(&lt;operators&gt;.assignmentArithmeticShiftRight,denominator &gt;&gt;= 1)<SUB>27</SUB>> ]
"68719476758" [label = <(IDENTIFIER,denominator,denominator &gt;&gt;= 1)<SUB>27</SUB>> ]
"90194313219" [label = <(LITERAL,1,denominator &gt;&gt;= 1)<SUB>27</SUB>> ]
"128849018880" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "115964116993"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "128849018880"  [ label = "AST: "] 
  "25769803777" -> "94489280512"  [ label = "AST: "] 
  "25769803777" -> "30064771072"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "25769803777" -> "47244640257"  [ label = "AST: "] 
  "25769803777" -> "30064771092"  [ label = "AST: "] 
  "25769803777" -> "30064771094"  [ label = "AST: "] 
  "25769803777" -> "47244640258"  [ label = "AST: "] 
  "30064771072" -> "68719476736"  [ label = "AST: "] 
  "30064771072" -> "30064771073"  [ label = "AST: "] 
  "30064771073" -> "68719476737"  [ label = "AST: "] 
  "30064771073" -> "68719476738"  [ label = "AST: "] 
  "47244640256" -> "30064771074"  [ label = "AST: "] 
  "47244640256" -> "25769803778"  [ label = "AST: "] 
  "30064771074" -> "30064771075"  [ label = "AST: "] 
  "30064771074" -> "30064771080"  [ label = "AST: "] 
  "30064771075" -> "68719476739"  [ label = "AST: "] 
  "30064771075" -> "30064771076"  [ label = "AST: "] 
  "30064771076" -> "30064771077"  [ label = "AST: "] 
  "30064771076" -> "30064771079"  [ label = "AST: "] 
  "30064771077" -> "30064771078"  [ label = "AST: "] 
  "30064771077" -> "68719476741"  [ label = "AST: "] 
  "30064771078" -> "68719476740"  [ label = "AST: "] 
  "30064771078" -> "55834574848"  [ label = "AST: "] 
  "30064771080" -> "68719476742"  [ label = "AST: "] 
  "30064771080" -> "30064771081"  [ label = "AST: "] 
  "30064771081" -> "90194313216"  [ label = "AST: "] 
  "25769803778" -> "30064771082"  [ label = "AST: "] 
  "30064771082" -> "68719476743"  [ label = "AST: "] 
  "47244640257" -> "30064771083"  [ label = "AST: "] 
  "47244640257" -> "25769803779"  [ label = "AST: "] 
  "30064771083" -> "30064771084"  [ label = "AST: "] 
  "30064771083" -> "30064771089"  [ label = "AST: "] 
  "30064771084" -> "68719476744"  [ label = "AST: "] 
  "30064771084" -> "30064771085"  [ label = "AST: "] 
  "30064771085" -> "30064771086"  [ label = "AST: "] 
  "30064771085" -> "30064771088"  [ label = "AST: "] 
  "30064771086" -> "30064771087"  [ label = "AST: "] 
  "30064771086" -> "68719476746"  [ label = "AST: "] 
  "30064771087" -> "68719476745"  [ label = "AST: "] 
  "30064771087" -> "55834574849"  [ label = "AST: "] 
  "30064771089" -> "68719476747"  [ label = "AST: "] 
  "30064771089" -> "30064771090"  [ label = "AST: "] 
  "30064771090" -> "90194313217"  [ label = "AST: "] 
  "25769803779" -> "30064771091"  [ label = "AST: "] 
  "30064771091" -> "68719476748"  [ label = "AST: "] 
  "30064771092" -> "68719476749"  [ label = "AST: "] 
  "30064771092" -> "30064771093"  [ label = "AST: "] 
  "30064771093" -> "68719476750"  [ label = "AST: "] 
  "30064771093" -> "68719476751"  [ label = "AST: "] 
  "30064771094" -> "68719476752"  [ label = "AST: "] 
  "30064771094" -> "30064771095"  [ label = "AST: "] 
  "30064771095" -> "68719476753"  [ label = "AST: "] 
  "30064771095" -> "68719476754"  [ label = "AST: "] 
  "47244640258" -> "30064771096"  [ label = "AST: "] 
  "47244640258" -> "25769803780"  [ label = "AST: "] 
  "30064771096" -> "68719476755"  [ label = "AST: "] 
  "30064771096" -> "68719476756"  [ label = "AST: "] 
  "25769803780" -> "30064771097"  [ label = "AST: "] 
  "25769803780" -> "30064771098"  [ label = "AST: "] 
  "30064771097" -> "68719476757"  [ label = "AST: "] 
  "30064771097" -> "90194313218"  [ label = "AST: "] 
  "30064771098" -> "68719476758"  [ label = "AST: "] 
  "30064771098" -> "90194313219"  [ label = "AST: "] 
  "30064771072" -> "55834574848"  [ label = "CFG: "] 
  "30064771092" -> "30064771095"  [ label = "CFG: "] 
  "30064771094" -> "30064771096"  [ label = "CFG: "] 
  "30064771073" -> "30064771072"  [ label = "CFG: "] 
  "30064771074" -> "30064771082"  [ label = "CFG: "] 
  "30064771074" -> "55834574849"  [ label = "CFG: "] 
  "30064771083" -> "30064771091"  [ label = "CFG: "] 
  "30064771083" -> "30064771093"  [ label = "CFG: "] 
  "30064771093" -> "30064771092"  [ label = "CFG: "] 
  "30064771095" -> "30064771094"  [ label = "CFG: "] 
  "30064771096" -> "128849018880"  [ label = "CFG: "] 
  "30064771096" -> "30064771097"  [ label = "CFG: "] 
  "30064771075" -> "30064771074"  [ label = "CFG: "] 
  "30064771075" -> "30064771081"  [ label = "CFG: "] 
  "30064771080" -> "30064771074"  [ label = "CFG: "] 
  "30064771082" -> "55834574849"  [ label = "CFG: "] 
  "30064771084" -> "30064771083"  [ label = "CFG: "] 
  "30064771084" -> "30064771090"  [ label = "CFG: "] 
  "30064771089" -> "30064771083"  [ label = "CFG: "] 
  "30064771091" -> "30064771093"  [ label = "CFG: "] 
  "30064771097" -> "30064771098"  [ label = "CFG: "] 
  "30064771098" -> "30064771096"  [ label = "CFG: "] 
  "30064771076" -> "30064771075"  [ label = "CFG: "] 
  "30064771081" -> "30064771080"  [ label = "CFG: "] 
  "30064771085" -> "30064771084"  [ label = "CFG: "] 
  "30064771090" -> "30064771089"  [ label = "CFG: "] 
  "30064771077" -> "30064771079"  [ label = "CFG: "] 
  "30064771079" -> "30064771076"  [ label = "CFG: "] 
  "30064771086" -> "30064771088"  [ label = "CFG: "] 
  "30064771088" -> "30064771085"  [ label = "CFG: "] 
  "30064771078" -> "30064771077"  [ label = "CFG: "] 
  "30064771087" -> "30064771086"  [ label = "CFG: "] 
  "55834574848" -> "30064771078"  [ label = "CFG: "] 
  "55834574849" -> "30064771087"  [ label = "CFG: "] 
  "111669149697" -> "30064771073"  [ label = "CFG: "] 
  "30064771072" -> "128849018880"  [ label = "DDG: gcd(num, den)"] 
  "30064771072" -> "128849018880"  [ label = "DDG: g = gcd(num, den)"] 
  "30064771074" -> "128849018880"  [ label = "DDG: num == std::numeric_limits&lt;int32_t&gt;::min()"] 
  "30064771080" -> "128849018880"  [ label = "DDG: -1"] 
  "30064771074" -> "128849018880"  [ label = "DDG: num == std::numeric_limits&lt;int32_t&gt;::min() &amp;&amp; g == -1"] 
  "30064771082" -> "128849018880"  [ label = "DDG: num++"] 
  "30064771086" -> "128849018880"  [ label = "DDG: std::numeric_limits"] 
  "30064771086" -> "128849018880"  [ label = "DDG: int32_t"] 
  "30064771085" -> "128849018880"  [ label = "DDG: std::numeric_limits&lt;int32_t"] 
  "30064771085" -> "128849018880"  [ label = "DDG: ::min()"] 
  "30064771084" -> "128849018880"  [ label = "DDG: std::numeric_limits&lt;int32_t&gt;::min()"] 
  "30064771083" -> "128849018880"  [ label = "DDG: den == std::numeric_limits&lt;int32_t&gt;::min()"] 
  "30064771089" -> "128849018880"  [ label = "DDG: -1"] 
  "30064771083" -> "128849018880"  [ label = "DDG: g == -1"] 
  "30064771083" -> "128849018880"  [ label = "DDG: den == std::numeric_limits&lt;int32_t&gt;::min() &amp;&amp; g == -1"] 
  "30064771091" -> "128849018880"  [ label = "DDG: den++"] 
  "30064771092" -> "128849018880"  [ label = "DDG: numerator"] 
  "30064771093" -> "128849018880"  [ label = "DDG: num"] 
  "30064771092" -> "128849018880"  [ label = "DDG: num / g"] 
  "30064771092" -> "128849018880"  [ label = "DDG: numerator = num / g"] 
  "30064771095" -> "128849018880"  [ label = "DDG: den"] 
  "30064771095" -> "128849018880"  [ label = "DDG: g"] 
  "30064771094" -> "128849018880"  [ label = "DDG: den / g"] 
  "30064771094" -> "128849018880"  [ label = "DDG: denominator = den / g"] 
  "30064771096" -> "128849018880"  [ label = "DDG: denominator"] 
  "30064771096" -> "128849018880"  [ label = "DDG: denominator &gt; MAX_FRACTION_DENOMINATOR"] 
  "30064771096" -> "128849018880"  [ label = "DDG: MAX_FRACTION_DENOMINATOR"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "111669149697" -> "115964116993"  [ label = "DDG: "] 
  "30064771073" -> "30064771072"  [ label = "DDG: num"] 
  "30064771073" -> "30064771072"  [ label = "DDG: den"] 
  "30064771093" -> "30064771092"  [ label = "DDG: num"] 
  "30064771093" -> "30064771092"  [ label = "DDG: g"] 
  "30064771095" -> "30064771094"  [ label = "DDG: den"] 
  "30064771095" -> "30064771094"  [ label = "DDG: g"] 
  "115964116992" -> "30064771073"  [ label = "DDG: num"] 
  "111669149697" -> "30064771073"  [ label = "DDG: "] 
  "115964116993" -> "30064771073"  [ label = "DDG: den"] 
  "30064771075" -> "30064771074"  [ label = "DDG: num"] 
  "30064771075" -> "30064771074"  [ label = "DDG: std::numeric_limits&lt;int32_t&gt;::min()"] 
  "30064771080" -> "30064771074"  [ label = "DDG: g"] 
  "30064771080" -> "30064771074"  [ label = "DDG: -1"] 
  "30064771084" -> "30064771083"  [ label = "DDG: den"] 
  "30064771084" -> "30064771083"  [ label = "DDG: std::numeric_limits&lt;int32_t&gt;::min()"] 
  "30064771089" -> "30064771083"  [ label = "DDG: g"] 
  "30064771089" -> "30064771083"  [ label = "DDG: -1"] 
  "30064771074" -> "30064771083"  [ label = "DDG: g == -1"] 
  "30064771075" -> "30064771093"  [ label = "DDG: num"] 
  "30064771082" -> "30064771093"  [ label = "DDG: num"] 
  "111669149697" -> "30064771093"  [ label = "DDG: "] 
  "30064771072" -> "30064771093"  [ label = "DDG: g"] 
  "30064771080" -> "30064771093"  [ label = "DDG: g"] 
  "30064771089" -> "30064771093"  [ label = "DDG: g"] 
  "30064771084" -> "30064771095"  [ label = "DDG: den"] 
  "30064771091" -> "30064771095"  [ label = "DDG: den"] 
  "111669149697" -> "30064771095"  [ label = "DDG: "] 
  "30064771093" -> "30064771095"  [ label = "DDG: g"] 
  "30064771094" -> "30064771096"  [ label = "DDG: denominator"] 
  "30064771098" -> "30064771096"  [ label = "DDG: denominator"] 
  "111669149697" -> "30064771096"  [ label = "DDG: "] 
  "30064771073" -> "30064771075"  [ label = "DDG: num"] 
  "111669149697" -> "30064771075"  [ label = "DDG: "] 
  "30064771076" -> "30064771075"  [ label = "DDG: std::numeric_limits&lt;int32_t"] 
  "30064771076" -> "30064771075"  [ label = "DDG: ::min()"] 
  "30064771072" -> "30064771080"  [ label = "DDG: g"] 
  "111669149697" -> "30064771080"  [ label = "DDG: "] 
  "30064771081" -> "30064771080"  [ label = "DDG: 1"] 
  "30064771075" -> "30064771082"  [ label = "DDG: num"] 
  "111669149697" -> "30064771082"  [ label = "DDG: "] 
  "30064771073" -> "30064771084"  [ label = "DDG: den"] 
  "111669149697" -> "30064771084"  [ label = "DDG: "] 
  "30064771085" -> "30064771084"  [ label = "DDG: std::numeric_limits&lt;int32_t"] 
  "30064771085" -> "30064771084"  [ label = "DDG: ::min()"] 
  "30064771072" -> "30064771089"  [ label = "DDG: g"] 
  "30064771080" -> "30064771089"  [ label = "DDG: g"] 
  "111669149697" -> "30064771089"  [ label = "DDG: "] 
  "30064771090" -> "30064771089"  [ label = "DDG: 1"] 
  "30064771084" -> "30064771091"  [ label = "DDG: den"] 
  "111669149697" -> "30064771091"  [ label = "DDG: "] 
  "30064771092" -> "30064771097"  [ label = "DDG: numerator"] 
  "111669149697" -> "30064771097"  [ label = "DDG: "] 
  "30064771096" -> "30064771098"  [ label = "DDG: denominator"] 
  "111669149697" -> "30064771098"  [ label = "DDG: "] 
  "30064771077" -> "30064771076"  [ label = "DDG: std::numeric_limits"] 
  "30064771077" -> "30064771076"  [ label = "DDG: int32_t"] 
  "111669149697" -> "30064771076"  [ label = "DDG: "] 
  "111669149697" -> "30064771081"  [ label = "DDG: "] 
  "30064771086" -> "30064771085"  [ label = "DDG: std::numeric_limits"] 
  "30064771086" -> "30064771085"  [ label = "DDG: int32_t"] 
  "111669149697" -> "30064771085"  [ label = "DDG: "] 
  "111669149697" -> "30064771090"  [ label = "DDG: "] 
  "111669149697" -> "30064771077"  [ label = "DDG: "] 
  "30064771077" -> "30064771086"  [ label = "DDG: std::numeric_limits"] 
  "30064771077" -> "30064771086"  [ label = "DDG: int32_t"] 
  "111669149697" -> "30064771086"  [ label = "DDG: "] 
  "30064771074" -> "30064771082"  [ label = "CDG: "] 
  "30064771083" -> "30064771091"  [ label = "CDG: "] 
  "30064771096" -> "30064771098"  [ label = "CDG: "] 
  "30064771096" -> "30064771096"  [ label = "CDG: "] 
  "30064771096" -> "30064771097"  [ label = "CDG: "] 
  "30064771075" -> "30064771080"  [ label = "CDG: "] 
  "30064771075" -> "30064771081"  [ label = "CDG: "] 
  "30064771084" -> "30064771090"  [ label = "CDG: "] 
  "30064771084" -> "30064771089"  [ label = "CDG: "] 
}
"""
)
