[33mval[0m [36mres1142[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "ValidateInputsGenerateOutputs" {  
"111669149697" [label = <(METHOD,ValidateInputsGenerateOutputs)<SUB>1</SUB>> ]
"115964116992" [label = <(PARAM,OpKernelContext* ctx)<SUB>2</SUB>> ]
"115964116993" [label = <(PARAM,const Tensor** inputs)<SUB>2</SUB>> ]
"115964116994" [label = <(PARAM,const Tensor** seq_len)<SUB>2</SUB>> ]
"115964116995" [label = <(PARAM,Tensor** log_prob)<SUB>3</SUB>> ]
"115964116996" [label = <(PARAM,OpOutputList* decoded_indices)<SUB>3</SUB>> ]
"115964116997" [label = <(PARAM,OpOutputList* decoded_values)<SUB>4</SUB>> ]
"115964116998" [label = <(PARAM,OpOutputList* decoded_shape)<SUB>4</SUB>> ]
"25769803777" [label = <(BLOCK,{
    Status status = ctx-&gt;input(&quot;inputs&quot;, inpu...,{
    Status status = ctx-&gt;input(&quot;inputs&quot;, inpu...)<SUB>4</SUB>> ]
"94489280512" [label = <(LOCAL,Status status: Status)<SUB>5</SUB>> ]
"30064771072" [label = <(&lt;operator&gt;.assignment,status = ctx-&gt;input(&quot;inputs&quot;, inputs))<SUB>5</SUB>> ]
"68719476736" [label = <(IDENTIFIER,status,status = ctx-&gt;input(&quot;inputs&quot;, inputs))<SUB>5</SUB>> ]
"30064771073" [label = <(input,ctx-&gt;input(&quot;inputs&quot;, inputs))<SUB>5</SUB>> ]
"68719476737" [label = <(IDENTIFIER,ctx,ctx-&gt;input(&quot;inputs&quot;, inputs))<SUB>5</SUB>> ]
"90194313216" [label = <(LITERAL,&quot;inputs&quot;,ctx-&gt;input(&quot;inputs&quot;, inputs))<SUB>5</SUB>> ]
"68719476738" [label = <(IDENTIFIER,inputs,ctx-&gt;input(&quot;inputs&quot;, inputs))<SUB>5</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,IF,if (!status.ok()))<SUB>6</SUB>> ]
"30064771074" [label = <(&lt;operator&gt;.logicalNot,!status.ok())<SUB>6</SUB>> ]
"30064771075" [label = <(ok,status.ok())<SUB>6</SUB>> ]
"68719476739" [label = <(IDENTIFIER,status,status.ok())<SUB>6</SUB>> ]
"25769803778" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>6</SUB>> ]
"146028888064" [label = <(RETURN,return status;,return status;)<SUB>6</SUB>> ]
"68719476740" [label = <(IDENTIFIER,status,return status;)<SUB>6</SUB>> ]
"30064771076" [label = <(&lt;operator&gt;.assignment,status = ctx-&gt;input(&quot;sequence_length&quot;, seq_len))<SUB>7</SUB>> ]
"68719476741" [label = <(IDENTIFIER,status,status = ctx-&gt;input(&quot;sequence_length&quot;, seq_len))<SUB>7</SUB>> ]
"30064771077" [label = <(input,ctx-&gt;input(&quot;sequence_length&quot;, seq_len))<SUB>7</SUB>> ]
"68719476742" [label = <(IDENTIFIER,ctx,ctx-&gt;input(&quot;sequence_length&quot;, seq_len))<SUB>7</SUB>> ]
"90194313217" [label = <(LITERAL,&quot;sequence_length&quot;,ctx-&gt;input(&quot;sequence_length&quot;, seq_len))<SUB>7</SUB>> ]
"68719476743" [label = <(IDENTIFIER,seq_len,ctx-&gt;input(&quot;sequence_length&quot;, seq_len))<SUB>7</SUB>> ]
"47244640257" [label = <(CONTROL_STRUCTURE,IF,if (!status.ok()))<SUB>8</SUB>> ]
"30064771078" [label = <(&lt;operator&gt;.logicalNot,!status.ok())<SUB>8</SUB>> ]
"30064771079" [label = <(ok,status.ok())<SUB>8</SUB>> ]
"68719476744" [label = <(IDENTIFIER,status,status.ok())<SUB>8</SUB>> ]
"25769803779" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>8</SUB>> ]
"146028888065" [label = <(RETURN,return status;,return status;)<SUB>8</SUB>> ]
"68719476745" [label = <(IDENTIFIER,status,return status;)<SUB>8</SUB>> ]
"94489280513" [label = <(LOCAL,const TensorShape&amp; inputs_shape: TensorShape&amp;)<SUB>10</SUB>> ]
"30064771080" [label = <(&lt;operator&gt;.assignment,&amp; inputs_shape = (*inputs)-&gt;shape())<SUB>10</SUB>> ]
"68719476746" [label = <(IDENTIFIER,inputs_shape,&amp; inputs_shape = (*inputs)-&gt;shape())<SUB>10</SUB>> ]
"30064771081" [label = <(shape,(*inputs)-&gt;shape())<SUB>10</SUB>> ]
"30064771082" [label = <(&lt;operator&gt;.indirection,*inputs)<SUB>10</SUB>> ]
"68719476747" [label = <(IDENTIFIER,inputs,(*inputs)-&gt;shape())<SUB>10</SUB>> ]
"47244640258" [label = <(CONTROL_STRUCTURE,IF,if (inputs_shape.dims() != 3))<SUB>12</SUB>> ]
"30064771083" [label = <(&lt;operator&gt;.notEquals,inputs_shape.dims() != 3)<SUB>12</SUB>> ]
"30064771084" [label = <(dims,inputs_shape.dims())<SUB>12</SUB>> ]
"68719476748" [label = <(IDENTIFIER,inputs_shape,inputs_shape.dims())<SUB>12</SUB>> ]
"90194313218" [label = <(LITERAL,3,inputs_shape.dims() != 3)<SUB>12</SUB>> ]
"25769803780" [label = <(BLOCK,{
      return errors::InvalidArgument(&quot;inputs ...,{
      return errors::InvalidArgument(&quot;inputs ...)<SUB>12</SUB>> ]
"146028888066" [label = <(RETURN,return errors::InvalidArgument(&quot;inputs is not a...,return errors::InvalidArgument(&quot;inputs is not a...)<SUB>13</SUB>> ]
"30064771085" [label = <(InvalidArgument,errors::InvalidArgument(&quot;inputs is not a 3-Tens...)<SUB>13</SUB>> ]
"90194313219" [label = <(LITERAL,&quot;inputs is not a 3-Tensor&quot;,errors::InvalidArgument(&quot;inputs is not a 3-Tens...)<SUB>13</SUB>> ]
"47244640259" [label = <(CONTROL_STRUCTURE,IF,if (inputs_shape.num_elements() == 0))<SUB>15</SUB>> ]
"30064771086" [label = <(&lt;operator&gt;.equals,inputs_shape.num_elements() == 0)<SUB>15</SUB>> ]
"30064771087" [label = <(num_elements,inputs_shape.num_elements())<SUB>15</SUB>> ]
"68719476749" [label = <(IDENTIFIER,inputs_shape,inputs_shape.num_elements())<SUB>15</SUB>> ]
"90194313220" [label = <(LITERAL,0,inputs_shape.num_elements() == 0)<SUB>15</SUB>> ]
"25769803781" [label = <(BLOCK,{
      return errors::InvalidArgument(&quot;inputs ...,{
      return errors::InvalidArgument(&quot;inputs ...)<SUB>15</SUB>> ]
"146028888067" [label = <(RETURN,return errors::InvalidArgument(&quot;inputs must not...,return errors::InvalidArgument(&quot;inputs must not...)<SUB>16</SUB>> ]
"30064771088" [label = <(InvalidArgument,errors::InvalidArgument(&quot;inputs must not be emp...)<SUB>16</SUB>> ]
"90194313221" [label = <(LITERAL,&quot;inputs must not be empty&quot;,errors::InvalidArgument(&quot;inputs must not be emp...)<SUB>16</SUB>> ]
"94489280514" [label = <(LOCAL,const int64 max_time: int64)<SUB>19</SUB>> ]
"30064771089" [label = <(&lt;operator&gt;.assignment,max_time = inputs_shape.dim_size(0))<SUB>19</SUB>> ]
"68719476750" [label = <(IDENTIFIER,max_time,max_time = inputs_shape.dim_size(0))<SUB>19</SUB>> ]
"30064771090" [label = <(dim_size,inputs_shape.dim_size(0))<SUB>19</SUB>> ]
"68719476751" [label = <(IDENTIFIER,inputs_shape,inputs_shape.dim_size(0))<SUB>19</SUB>> ]
"90194313222" [label = <(LITERAL,0,inputs_shape.dim_size(0))<SUB>19</SUB>> ]
"94489280515" [label = <(LOCAL,const int64 batch_size: int64)<SUB>20</SUB>> ]
"30064771091" [label = <(&lt;operator&gt;.assignment,batch_size = inputs_shape.dim_size(1))<SUB>20</SUB>> ]
"68719476752" [label = <(IDENTIFIER,batch_size,batch_size = inputs_shape.dim_size(1))<SUB>20</SUB>> ]
"30064771092" [label = <(dim_size,inputs_shape.dim_size(1))<SUB>20</SUB>> ]
"68719476753" [label = <(IDENTIFIER,inputs_shape,inputs_shape.dim_size(1))<SUB>20</SUB>> ]
"90194313223" [label = <(LITERAL,1,inputs_shape.dim_size(1))<SUB>20</SUB>> ]
"47244640260" [label = <(CONTROL_STRUCTURE,IF,if (max_time == 0))<SUB>22</SUB>> ]
"30064771093" [label = <(&lt;operator&gt;.equals,max_time == 0)<SUB>22</SUB>> ]
"68719476754" [label = <(IDENTIFIER,max_time,max_time == 0)<SUB>22</SUB>> ]
"90194313224" [label = <(LITERAL,0,max_time == 0)<SUB>22</SUB>> ]
"25769803782" [label = <(BLOCK,{
      return errors::InvalidArgument(&quot;max_tim...,{
      return errors::InvalidArgument(&quot;max_tim...)<SUB>22</SUB>> ]
"146028888068" [label = <(RETURN,return errors::InvalidArgument(&quot;max_time is 0&quot;);,return errors::InvalidArgument(&quot;max_time is 0&quot;);)<SUB>23</SUB>> ]
"30064771094" [label = <(InvalidArgument,errors::InvalidArgument(&quot;max_time is 0&quot;))<SUB>23</SUB>> ]
"90194313225" [label = <(LITERAL,&quot;max_time is 0&quot;,errors::InvalidArgument(&quot;max_time is 0&quot;))<SUB>23</SUB>> ]
"47244640261" [label = <(CONTROL_STRUCTURE,IF,if (!TensorShapeUtils::IsVector((*seq_len)-&gt;shape())))<SUB>25</SUB>> ]
"30064771095" [label = <(&lt;operator&gt;.logicalNot,!TensorShapeUtils::IsVector((*seq_len)-&gt;shape()))<SUB>25</SUB>> ]
"30064771096" [label = <(IsVector,TensorShapeUtils::IsVector((*seq_len)-&gt;shape()))<SUB>25</SUB>> ]
"30064771097" [label = <(shape,(*seq_len)-&gt;shape())<SUB>25</SUB>> ]
"30064771098" [label = <(&lt;operator&gt;.indirection,*seq_len)<SUB>25</SUB>> ]
"68719476755" [label = <(IDENTIFIER,seq_len,(*seq_len)-&gt;shape())<SUB>25</SUB>> ]
"25769803783" [label = <(BLOCK,{
      return errors::InvalidArgument(&quot;sequenc...,{
      return errors::InvalidArgument(&quot;sequenc...)<SUB>25</SUB>> ]
"146028888069" [label = <(RETURN,return errors::InvalidArgument(&quot;sequence_length...,return errors::InvalidArgument(&quot;sequence_length...)<SUB>26</SUB>> ]
"30064771099" [label = <(InvalidArgument,errors::InvalidArgument(&quot;sequence_length is not...)<SUB>26</SUB>> ]
"90194313226" [label = <(LITERAL,&quot;sequence_length is not a vector&quot;,errors::InvalidArgument(&quot;sequence_length is not...)<SUB>26</SUB>> ]
"47244640262" [label = <(CONTROL_STRUCTURE,IF,if (!(batch_size == (*seq_len)-&gt;dim_size(0))))<SUB>29</SUB>> ]
"30064771100" [label = <(&lt;operator&gt;.logicalNot,!(batch_size == (*seq_len)-&gt;dim_size(0)))<SUB>29</SUB>> ]
"30064771101" [label = <(&lt;operator&gt;.equals,batch_size == (*seq_len)-&gt;dim_size(0))<SUB>29</SUB>> ]
"68719476756" [label = <(IDENTIFIER,batch_size,batch_size == (*seq_len)-&gt;dim_size(0))<SUB>29</SUB>> ]
"30064771102" [label = <(dim_size,(*seq_len)-&gt;dim_size(0))<SUB>29</SUB>> ]
"30064771103" [label = <(&lt;operator&gt;.indirection,*seq_len)<SUB>29</SUB>> ]
"68719476757" [label = <(IDENTIFIER,seq_len,(*seq_len)-&gt;dim_size(0))<SUB>29</SUB>> ]
"90194313227" [label = <(LITERAL,0,(*seq_len)-&gt;dim_size(0))<SUB>29</SUB>> ]
"25769803784" [label = <(BLOCK,{
      return errors::FailedPrecondition(
    ...,{
      return errors::FailedPrecondition(
    ...)<SUB>29</SUB>> ]
"146028888070" [label = <(RETURN,return errors::FailedPrecondition(
          &quot;l...,return errors::FailedPrecondition(
          &quot;l...)<SUB>30</SUB>> ]
"30064771104" [label = <(FailedPrecondition,errors::FailedPrecondition(
          &quot;len(sequ...)<SUB>30</SUB>> ]
"90194313228" [label = <(LITERAL,&quot;len(sequence_length) != batch_size.  &quot;,errors::FailedPrecondition(
          &quot;len(sequ...)<SUB>31</SUB>> ]
"90194313229" [label = <(LITERAL,&quot;len(sequence_length):  &quot;,errors::FailedPrecondition(
          &quot;len(sequ...)<SUB>32</SUB>> ]
"30064771105" [label = <(dim_size,(*seq_len)-&gt;dim_size(0))<SUB>32</SUB>> ]
"30064771106" [label = <(&lt;operator&gt;.indirection,*seq_len)<SUB>32</SUB>> ]
"68719476758" [label = <(IDENTIFIER,seq_len,(*seq_len)-&gt;dim_size(0))<SUB>32</SUB>> ]
"90194313230" [label = <(LITERAL,0,(*seq_len)-&gt;dim_size(0))<SUB>32</SUB>> ]
"90194313231" [label = <(LITERAL,&quot; batch_size: &quot;,errors::FailedPrecondition(
          &quot;len(sequ...)<SUB>33</SUB>> ]
"68719476759" [label = <(IDENTIFIER,batch_size,errors::FailedPrecondition(
          &quot;len(sequ...)<SUB>33</SUB>> ]
"94489280516" [label = <(LOCAL,auto seq_len_t: auto)<SUB>36</SUB>> ]
"30064771107" [label = <(&lt;operator&gt;.assignment,seq_len_t = (*seq_len)-&gt;vec&lt;int32&gt;())<SUB>36</SUB>> ]
"68719476760" [label = <(IDENTIFIER,seq_len_t,seq_len_t = (*seq_len)-&gt;vec&lt;int32&gt;())<SUB>36</SUB>> ]
"30064771108" [label = <(vec&lt;int32&gt;,(*seq_len)-&gt;vec&lt;int32&gt;())<SUB>36</SUB>> ]
"30064771109" [label = <(&lt;operator&gt;.indirection,*seq_len)<SUB>36</SUB>> ]
"68719476761" [label = <(IDENTIFIER,seq_len,(*seq_len)-&gt;vec&lt;int32&gt;())<SUB>36</SUB>> ]
"47244640263" [label = <(CONTROL_STRUCTURE,FOR,for (int b = 0;b &lt; batch_size;++b))<SUB>38</SUB>> ]
"25769803785" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>38</SUB>> ]
"94489280517" [label = <(LOCAL,int b: int)<SUB>38</SUB>> ]
"30064771110" [label = <(&lt;operator&gt;.assignment,b = 0)<SUB>38</SUB>> ]
"68719476762" [label = <(IDENTIFIER,b,b = 0)<SUB>38</SUB>> ]
"90194313232" [label = <(LITERAL,0,b = 0)<SUB>38</SUB>> ]
"30064771111" [label = <(&lt;operator&gt;.lessThan,b &lt; batch_size)<SUB>38</SUB>> ]
"68719476763" [label = <(IDENTIFIER,b,b &lt; batch_size)<SUB>38</SUB>> ]
"68719476764" [label = <(IDENTIFIER,batch_size,b &lt; batch_size)<SUB>38</SUB>> ]
"30064771112" [label = <(&lt;operator&gt;.preIncrement,++b)<SUB>38</SUB>> ]
"68719476765" [label = <(IDENTIFIER,b,++b)<SUB>38</SUB>> ]
"25769803786" [label = <(BLOCK,{
      if (!(seq_len_t(b) &lt;= max_time)) {
    ...,{
      if (!(seq_len_t(b) &lt;= max_time)) {
    ...)<SUB>38</SUB>> ]
"47244640264" [label = <(CONTROL_STRUCTURE,IF,if (!(seq_len_t(b) &lt;= max_time)))<SUB>39</SUB>> ]
"30064771113" [label = <(&lt;operator&gt;.logicalNot,!(seq_len_t(b) &lt;= max_time))<SUB>39</SUB>> ]
"30064771114" [label = <(&lt;operator&gt;.lessEqualsThan,seq_len_t(b) &lt;= max_time)<SUB>39</SUB>> ]
"30064771115" [label = <(seq_len_t,seq_len_t(b))<SUB>39</SUB>> ]
"68719476766" [label = <(IDENTIFIER,b,seq_len_t(b))<SUB>39</SUB>> ]
"68719476767" [label = <(IDENTIFIER,max_time,seq_len_t(b) &lt;= max_time)<SUB>39</SUB>> ]
"25769803787" [label = <(BLOCK,{
        return errors::FailedPrecondition(&quot;se...,{
        return errors::FailedPrecondition(&quot;se...)<SUB>39</SUB>> ]
"146028888071" [label = <(RETURN,return errors::FailedPrecondition(&quot;sequence_len...,return errors::FailedPrecondition(&quot;sequence_len...)<SUB>40</SUB>> ]
"30064771116" [label = <(FailedPrecondition,errors::FailedPrecondition(&quot;sequence_length(&quot;, ...)<SUB>40</SUB>> ]
"90194313233" [label = <(LITERAL,&quot;sequence_length(&quot;,errors::FailedPrecondition(&quot;sequence_length(&quot;, ...)<SUB>40</SUB>> ]
"68719476768" [label = <(IDENTIFIER,b,errors::FailedPrecondition(&quot;sequence_length(&quot;, ...)<SUB>40</SUB>> ]
"90194313234" [label = <(LITERAL,&quot;) &lt;= &quot;,errors::FailedPrecondition(&quot;sequence_length(&quot;, ...)<SUB>41</SUB>> ]
"68719476769" [label = <(IDENTIFIER,max_time,errors::FailedPrecondition(&quot;sequence_length(&quot;, ...)<SUB>41</SUB>> ]
"94489280518" [label = <(LOCAL,Status s: Status)<SUB>45</SUB>> ]
"30064771117" [label = <(&lt;operator&gt;.assignment,s = ctx-&gt;allocate_output(
        &quot;log_probabil...)<SUB>45</SUB>> ]
"68719476770" [label = <(IDENTIFIER,s,s = ctx-&gt;allocate_output(
        &quot;log_probabil...)<SUB>45</SUB>> ]
"30064771118" [label = <(allocate_output,ctx-&gt;allocate_output(
        &quot;log_probability&quot;...)<SUB>45</SUB>> ]
"68719476771" [label = <(IDENTIFIER,ctx,ctx-&gt;allocate_output(
        &quot;log_probability&quot;...)<SUB>45</SUB>> ]
"90194313235" [label = <(LITERAL,&quot;log_probability&quot;,ctx-&gt;allocate_output(
        &quot;log_probability&quot;...)<SUB>46</SUB>> ]
"30064771119" [label = <(TensorShape,TensorShape({batch_size, top_paths_}))<SUB>46</SUB>> ]
"30064771120" [label = <(&lt;operator&gt;.arrayInitializer,{batch_size, top_paths_})<SUB>46</SUB>> ]
"68719476772" [label = <(IDENTIFIER,batch_size,{batch_size, top_paths_})<SUB>46</SUB>> ]
"68719476773" [label = <(IDENTIFIER,top_paths_,{batch_size, top_paths_})<SUB>46</SUB>> ]
"68719476774" [label = <(IDENTIFIER,log_prob,ctx-&gt;allocate_output(
        &quot;log_probability&quot;...)<SUB>46</SUB>> ]
"47244640265" [label = <(CONTROL_STRUCTURE,IF,if (!s.ok()))<SUB>47</SUB>> ]
"30064771121" [label = <(&lt;operator&gt;.logicalNot,!s.ok())<SUB>47</SUB>> ]
"30064771122" [label = <(ok,s.ok())<SUB>47</SUB>> ]
"68719476775" [label = <(IDENTIFIER,s,s.ok())<SUB>47</SUB>> ]
"25769803788" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>47</SUB>> ]
"146028888072" [label = <(RETURN,return s;,return s;)<SUB>47</SUB>> ]
"68719476776" [label = <(IDENTIFIER,s,return s;)<SUB>47</SUB>> ]
"30064771123" [label = <(&lt;operator&gt;.assignment,s = ctx-&gt;output_list(&quot;decoded_indices&quot;, decoded...)<SUB>49</SUB>> ]
"68719476777" [label = <(IDENTIFIER,s,s = ctx-&gt;output_list(&quot;decoded_indices&quot;, decoded...)<SUB>49</SUB>> ]
"30064771124" [label = <(output_list,ctx-&gt;output_list(&quot;decoded_indices&quot;, decoded_ind...)<SUB>49</SUB>> ]
"68719476778" [label = <(IDENTIFIER,ctx,ctx-&gt;output_list(&quot;decoded_indices&quot;, decoded_ind...)<SUB>49</SUB>> ]
"90194313236" [label = <(LITERAL,&quot;decoded_indices&quot;,ctx-&gt;output_list(&quot;decoded_indices&quot;, decoded_ind...)<SUB>49</SUB>> ]
"68719476779" [label = <(IDENTIFIER,decoded_indices,ctx-&gt;output_list(&quot;decoded_indices&quot;, decoded_ind...)<SUB>49</SUB>> ]
"47244640266" [label = <(CONTROL_STRUCTURE,IF,if (!s.ok()))<SUB>50</SUB>> ]
"30064771125" [label = <(&lt;operator&gt;.logicalNot,!s.ok())<SUB>50</SUB>> ]
"30064771126" [label = <(ok,s.ok())<SUB>50</SUB>> ]
"68719476780" [label = <(IDENTIFIER,s,s.ok())<SUB>50</SUB>> ]
"25769803789" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>50</SUB>> ]
"146028888073" [label = <(RETURN,return s;,return s;)<SUB>50</SUB>> ]
"68719476781" [label = <(IDENTIFIER,s,return s;)<SUB>50</SUB>> ]
"30064771127" [label = <(&lt;operator&gt;.assignment,s = ctx-&gt;output_list(&quot;decoded_values&quot;, decoded_...)<SUB>51</SUB>> ]
"68719476782" [label = <(IDENTIFIER,s,s = ctx-&gt;output_list(&quot;decoded_values&quot;, decoded_...)<SUB>51</SUB>> ]
"30064771128" [label = <(output_list,ctx-&gt;output_list(&quot;decoded_values&quot;, decoded_values))<SUB>51</SUB>> ]
"68719476783" [label = <(IDENTIFIER,ctx,ctx-&gt;output_list(&quot;decoded_values&quot;, decoded_values))<SUB>51</SUB>> ]
"90194313237" [label = <(LITERAL,&quot;decoded_values&quot;,ctx-&gt;output_list(&quot;decoded_values&quot;, decoded_values))<SUB>51</SUB>> ]
"68719476784" [label = <(IDENTIFIER,decoded_values,ctx-&gt;output_list(&quot;decoded_values&quot;, decoded_values))<SUB>51</SUB>> ]
"47244640267" [label = <(CONTROL_STRUCTURE,IF,if (!s.ok()))<SUB>52</SUB>> ]
"30064771129" [label = <(&lt;operator&gt;.logicalNot,!s.ok())<SUB>52</SUB>> ]
"30064771130" [label = <(ok,s.ok())<SUB>52</SUB>> ]
"68719476785" [label = <(IDENTIFIER,s,s.ok())<SUB>52</SUB>> ]
"25769803790" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>52</SUB>> ]
"146028888074" [label = <(RETURN,return s;,return s;)<SUB>52</SUB>> ]
"68719476786" [label = <(IDENTIFIER,s,return s;)<SUB>52</SUB>> ]
"30064771131" [label = <(&lt;operator&gt;.assignment,s = ctx-&gt;output_list(&quot;decoded_shape&quot;, decoded_s...)<SUB>53</SUB>> ]
"68719476787" [label = <(IDENTIFIER,s,s = ctx-&gt;output_list(&quot;decoded_shape&quot;, decoded_s...)<SUB>53</SUB>> ]
"30064771132" [label = <(output_list,ctx-&gt;output_list(&quot;decoded_shape&quot;, decoded_shape))<SUB>53</SUB>> ]
"68719476788" [label = <(IDENTIFIER,ctx,ctx-&gt;output_list(&quot;decoded_shape&quot;, decoded_shape))<SUB>53</SUB>> ]
"90194313238" [label = <(LITERAL,&quot;decoded_shape&quot;,ctx-&gt;output_list(&quot;decoded_shape&quot;, decoded_shape))<SUB>53</SUB>> ]
"68719476789" [label = <(IDENTIFIER,decoded_shape,ctx-&gt;output_list(&quot;decoded_shape&quot;, decoded_shape))<SUB>53</SUB>> ]
"47244640268" [label = <(CONTROL_STRUCTURE,IF,if (!s.ok()))<SUB>54</SUB>> ]
"30064771133" [label = <(&lt;operator&gt;.logicalNot,!s.ok())<SUB>54</SUB>> ]
"30064771134" [label = <(ok,s.ok())<SUB>54</SUB>> ]
"68719476790" [label = <(IDENTIFIER,s,s.ok())<SUB>54</SUB>> ]
"25769803791" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>54</SUB>> ]
"146028888075" [label = <(RETURN,return s;,return s;)<SUB>54</SUB>> ]
"68719476791" [label = <(IDENTIFIER,s,return s;)<SUB>54</SUB>> ]
"146028888076" [label = <(RETURN,return Status::OK();,return Status::OK();)<SUB>56</SUB>> ]
"30064771135" [label = <(OK,Status::OK())<SUB>56</SUB>> ]
"128849018880" [label = <(METHOD_RETURN,Status)<SUB>1</SUB>> ]
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "115964116993"  [ label = "AST: "] 
  "111669149697" -> "115964116994"  [ label = "AST: "] 
  "111669149697" -> "115964116995"  [ label = "AST: "] 
  "111669149697" -> "115964116996"  [ label = "AST: "] 
  "111669149697" -> "115964116997"  [ label = "AST: "] 
  "111669149697" -> "115964116998"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "128849018880"  [ label = "AST: "] 
  "25769803777" -> "94489280512"  [ label = "AST: "] 
  "25769803777" -> "30064771072"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "25769803777" -> "30064771076"  [ label = "AST: "] 
  "25769803777" -> "47244640257"  [ label = "AST: "] 
  "25769803777" -> "94489280513"  [ label = "AST: "] 
  "25769803777" -> "30064771080"  [ label = "AST: "] 
  "25769803777" -> "47244640258"  [ label = "AST: "] 
  "25769803777" -> "47244640259"  [ label = "AST: "] 
  "25769803777" -> "94489280514"  [ label = "AST: "] 
  "25769803777" -> "30064771089"  [ label = "AST: "] 
  "25769803777" -> "94489280515"  [ label = "AST: "] 
  "25769803777" -> "30064771091"  [ label = "AST: "] 
  "25769803777" -> "47244640260"  [ label = "AST: "] 
  "25769803777" -> "47244640261"  [ label = "AST: "] 
  "25769803777" -> "47244640262"  [ label = "AST: "] 
  "25769803777" -> "94489280516"  [ label = "AST: "] 
  "25769803777" -> "30064771107"  [ label = "AST: "] 
  "25769803777" -> "47244640263"  [ label = "AST: "] 
  "25769803777" -> "94489280518"  [ label = "AST: "] 
  "25769803777" -> "30064771117"  [ label = "AST: "] 
  "25769803777" -> "47244640265"  [ label = "AST: "] 
  "25769803777" -> "30064771123"  [ label = "AST: "] 
  "25769803777" -> "47244640266"  [ label = "AST: "] 
  "25769803777" -> "30064771127"  [ label = "AST: "] 
  "25769803777" -> "47244640267"  [ label = "AST: "] 
  "25769803777" -> "30064771131"  [ label = "AST: "] 
  "25769803777" -> "47244640268"  [ label = "AST: "] 
  "25769803777" -> "146028888076"  [ label = "AST: "] 
  "30064771072" -> "68719476736"  [ label = "AST: "] 
  "30064771072" -> "30064771073"  [ label = "AST: "] 
  "30064771073" -> "68719476737"  [ label = "AST: "] 
  "30064771073" -> "90194313216"  [ label = "AST: "] 
  "30064771073" -> "68719476738"  [ label = "AST: "] 
  "47244640256" -> "30064771074"  [ label = "AST: "] 
  "47244640256" -> "25769803778"  [ label = "AST: "] 
  "30064771074" -> "30064771075"  [ label = "AST: "] 
  "30064771075" -> "68719476739"  [ label = "AST: "] 
  "25769803778" -> "146028888064"  [ label = "AST: "] 
  "146028888064" -> "68719476740"  [ label = "AST: "] 
  "30064771076" -> "68719476741"  [ label = "AST: "] 
  "30064771076" -> "30064771077"  [ label = "AST: "] 
  "30064771077" -> "68719476742"  [ label = "AST: "] 
  "30064771077" -> "90194313217"  [ label = "AST: "] 
  "30064771077" -> "68719476743"  [ label = "AST: "] 
  "47244640257" -> "30064771078"  [ label = "AST: "] 
  "47244640257" -> "25769803779"  [ label = "AST: "] 
  "30064771078" -> "30064771079"  [ label = "AST: "] 
  "30064771079" -> "68719476744"  [ label = "AST: "] 
  "25769803779" -> "146028888065"  [ label = "AST: "] 
  "146028888065" -> "68719476745"  [ label = "AST: "] 
  "30064771080" -> "68719476746"  [ label = "AST: "] 
  "30064771080" -> "30064771081"  [ label = "AST: "] 
  "30064771081" -> "30064771082"  [ label = "AST: "] 
  "30064771082" -> "68719476747"  [ label = "AST: "] 
  "47244640258" -> "30064771083"  [ label = "AST: "] 
  "47244640258" -> "25769803780"  [ label = "AST: "] 
  "30064771083" -> "30064771084"  [ label = "AST: "] 
  "30064771083" -> "90194313218"  [ label = "AST: "] 
  "30064771084" -> "68719476748"  [ label = "AST: "] 
  "25769803780" -> "146028888066"  [ label = "AST: "] 
  "146028888066" -> "30064771085"  [ label = "AST: "] 
  "30064771085" -> "90194313219"  [ label = "AST: "] 
  "47244640259" -> "30064771086"  [ label = "AST: "] 
  "47244640259" -> "25769803781"  [ label = "AST: "] 
  "30064771086" -> "30064771087"  [ label = "AST: "] 
  "30064771086" -> "90194313220"  [ label = "AST: "] 
  "30064771087" -> "68719476749"  [ label = "AST: "] 
  "25769803781" -> "146028888067"  [ label = "AST: "] 
  "146028888067" -> "30064771088"  [ label = "AST: "] 
  "30064771088" -> "90194313221"  [ label = "AST: "] 
  "30064771089" -> "68719476750"  [ label = "AST: "] 
  "30064771089" -> "30064771090"  [ label = "AST: "] 
  "30064771090" -> "68719476751"  [ label = "AST: "] 
  "30064771090" -> "90194313222"  [ label = "AST: "] 
  "30064771091" -> "68719476752"  [ label = "AST: "] 
  "30064771091" -> "30064771092"  [ label = "AST: "] 
  "30064771092" -> "68719476753"  [ label = "AST: "] 
  "30064771092" -> "90194313223"  [ label = "AST: "] 
  "47244640260" -> "30064771093"  [ label = "AST: "] 
  "47244640260" -> "25769803782"  [ label = "AST: "] 
  "30064771093" -> "68719476754"  [ label = "AST: "] 
  "30064771093" -> "90194313224"  [ label = "AST: "] 
  "25769803782" -> "146028888068"  [ label = "AST: "] 
  "146028888068" -> "30064771094"  [ label = "AST: "] 
  "30064771094" -> "90194313225"  [ label = "AST: "] 
  "47244640261" -> "30064771095"  [ label = "AST: "] 
  "47244640261" -> "25769803783"  [ label = "AST: "] 
  "30064771095" -> "30064771096"  [ label = "AST: "] 
  "30064771096" -> "30064771097"  [ label = "AST: "] 
  "30064771097" -> "30064771098"  [ label = "AST: "] 
  "30064771098" -> "68719476755"  [ label = "AST: "] 
  "25769803783" -> "146028888069"  [ label = "AST: "] 
  "146028888069" -> "30064771099"  [ label = "AST: "] 
  "30064771099" -> "90194313226"  [ label = "AST: "] 
  "47244640262" -> "30064771100"  [ label = "AST: "] 
  "47244640262" -> "25769803784"  [ label = "AST: "] 
  "30064771100" -> "30064771101"  [ label = "AST: "] 
  "30064771101" -> "68719476756"  [ label = "AST: "] 
  "30064771101" -> "30064771102"  [ label = "AST: "] 
  "30064771102" -> "30064771103"  [ label = "AST: "] 
  "30064771102" -> "90194313227"  [ label = "AST: "] 
  "30064771103" -> "68719476757"  [ label = "AST: "] 
  "25769803784" -> "146028888070"  [ label = "AST: "] 
  "146028888070" -> "30064771104"  [ label = "AST: "] 
  "30064771104" -> "90194313228"  [ label = "AST: "] 
  "30064771104" -> "90194313229"  [ label = "AST: "] 
  "30064771104" -> "30064771105"  [ label = "AST: "] 
  "30064771104" -> "90194313231"  [ label = "AST: "] 
  "30064771104" -> "68719476759"  [ label = "AST: "] 
  "30064771105" -> "30064771106"  [ label = "AST: "] 
  "30064771105" -> "90194313230"  [ label = "AST: "] 
  "30064771106" -> "68719476758"  [ label = "AST: "] 
  "30064771107" -> "68719476760"  [ label = "AST: "] 
  "30064771107" -> "30064771108"  [ label = "AST: "] 
  "30064771108" -> "30064771109"  [ label = "AST: "] 
  "30064771109" -> "68719476761"  [ label = "AST: "] 
  "47244640263" -> "25769803785"  [ label = "AST: "] 
  "47244640263" -> "30064771111"  [ label = "AST: "] 
  "47244640263" -> "30064771112"  [ label = "AST: "] 
  "47244640263" -> "25769803786"  [ label = "AST: "] 
  "25769803785" -> "94489280517"  [ label = "AST: "] 
  "25769803785" -> "30064771110"  [ label = "AST: "] 
  "30064771110" -> "68719476762"  [ label = "AST: "] 
  "30064771110" -> "90194313232"  [ label = "AST: "] 
  "30064771111" -> "68719476763"  [ label = "AST: "] 
  "30064771111" -> "68719476764"  [ label = "AST: "] 
  "30064771112" -> "68719476765"  [ label = "AST: "] 
  "25769803786" -> "47244640264"  [ label = "AST: "] 
  "47244640264" -> "30064771113"  [ label = "AST: "] 
  "47244640264" -> "25769803787"  [ label = "AST: "] 
  "30064771113" -> "30064771114"  [ label = "AST: "] 
  "30064771114" -> "30064771115"  [ label = "AST: "] 
  "30064771114" -> "68719476767"  [ label = "AST: "] 
  "30064771115" -> "68719476766"  [ label = "AST: "] 
  "25769803787" -> "146028888071"  [ label = "AST: "] 
  "146028888071" -> "30064771116"  [ label = "AST: "] 
  "30064771116" -> "90194313233"  [ label = "AST: "] 
  "30064771116" -> "68719476768"  [ label = "AST: "] 
  "30064771116" -> "90194313234"  [ label = "AST: "] 
  "30064771116" -> "68719476769"  [ label = "AST: "] 
  "30064771117" -> "68719476770"  [ label = "AST: "] 
  "30064771117" -> "30064771118"  [ label = "AST: "] 
  "30064771118" -> "68719476771"  [ label = "AST: "] 
  "30064771118" -> "90194313235"  [ label = "AST: "] 
  "30064771118" -> "30064771119"  [ label = "AST: "] 
  "30064771118" -> "68719476774"  [ label = "AST: "] 
  "30064771119" -> "30064771120"  [ label = "AST: "] 
  "30064771120" -> "68719476772"  [ label = "AST: "] 
  "30064771120" -> "68719476773"  [ label = "AST: "] 
  "47244640265" -> "30064771121"  [ label = "AST: "] 
  "47244640265" -> "25769803788"  [ label = "AST: "] 
  "30064771121" -> "30064771122"  [ label = "AST: "] 
  "30064771122" -> "68719476775"  [ label = "AST: "] 
  "25769803788" -> "146028888072"  [ label = "AST: "] 
  "146028888072" -> "68719476776"  [ label = "AST: "] 
  "30064771123" -> "68719476777"  [ label = "AST: "] 
  "30064771123" -> "30064771124"  [ label = "AST: "] 
  "30064771124" -> "68719476778"  [ label = "AST: "] 
  "30064771124" -> "90194313236"  [ label = "AST: "] 
  "30064771124" -> "68719476779"  [ label = "AST: "] 
  "47244640266" -> "30064771125"  [ label = "AST: "] 
  "47244640266" -> "25769803789"  [ label = "AST: "] 
  "30064771125" -> "30064771126"  [ label = "AST: "] 
  "30064771126" -> "68719476780"  [ label = "AST: "] 
  "25769803789" -> "146028888073"  [ label = "AST: "] 
  "146028888073" -> "68719476781"  [ label = "AST: "] 
  "30064771127" -> "68719476782"  [ label = "AST: "] 
  "30064771127" -> "30064771128"  [ label = "AST: "] 
  "30064771128" -> "68719476783"  [ label = "AST: "] 
  "30064771128" -> "90194313237"  [ label = "AST: "] 
  "30064771128" -> "68719476784"  [ label = "AST: "] 
  "47244640267" -> "30064771129"  [ label = "AST: "] 
  "47244640267" -> "25769803790"  [ label = "AST: "] 
  "30064771129" -> "30064771130"  [ label = "AST: "] 
  "30064771130" -> "68719476785"  [ label = "AST: "] 
  "25769803790" -> "146028888074"  [ label = "AST: "] 
  "146028888074" -> "68719476786"  [ label = "AST: "] 
  "30064771131" -> "68719476787"  [ label = "AST: "] 
  "30064771131" -> "30064771132"  [ label = "AST: "] 
  "30064771132" -> "68719476788"  [ label = "AST: "] 
  "30064771132" -> "90194313238"  [ label = "AST: "] 
  "30064771132" -> "68719476789"  [ label = "AST: "] 
  "47244640268" -> "30064771133"  [ label = "AST: "] 
  "47244640268" -> "25769803791"  [ label = "AST: "] 
  "30064771133" -> "30064771134"  [ label = "AST: "] 
  "30064771134" -> "68719476790"  [ label = "AST: "] 
  "25769803791" -> "146028888075"  [ label = "AST: "] 
  "146028888075" -> "68719476791"  [ label = "AST: "] 
  "146028888076" -> "30064771135"  [ label = "AST: "] 
  "30064771072" -> "30064771075"  [ label = "CFG: "] 
  "30064771076" -> "30064771079"  [ label = "CFG: "] 
  "30064771080" -> "30064771084"  [ label = "CFG: "] 
  "30064771089" -> "30064771092"  [ label = "CFG: "] 
  "30064771091" -> "30064771093"  [ label = "CFG: "] 
  "30064771107" -> "30064771110"  [ label = "CFG: "] 
  "30064771117" -> "30064771122"  [ label = "CFG: "] 
  "30064771123" -> "30064771126"  [ label = "CFG: "] 
  "30064771127" -> "30064771130"  [ label = "CFG: "] 
  "30064771131" -> "30064771134"  [ label = "CFG: "] 
  "146028888076" -> "128849018880"  [ label = "CFG: "] 
  "30064771073" -> "30064771072"  [ label = "CFG: "] 
  "30064771074" -> "146028888064"  [ label = "CFG: "] 
  "30064771074" -> "30064771077"  [ label = "CFG: "] 
  "30064771077" -> "30064771076"  [ label = "CFG: "] 
  "30064771078" -> "146028888065"  [ label = "CFG: "] 
  "30064771078" -> "30064771082"  [ label = "CFG: "] 
  "30064771081" -> "30064771080"  [ label = "CFG: "] 
  "30064771083" -> "30064771085"  [ label = "CFG: "] 
  "30064771083" -> "30064771087"  [ label = "CFG: "] 
  "30064771086" -> "30064771088"  [ label = "CFG: "] 
  "30064771086" -> "30064771090"  [ label = "CFG: "] 
  "30064771090" -> "30064771089"  [ label = "CFG: "] 
  "30064771092" -> "30064771091"  [ label = "CFG: "] 
  "30064771093" -> "30064771094"  [ label = "CFG: "] 
  "30064771093" -> "30064771098"  [ label = "CFG: "] 
  "30064771095" -> "30064771099"  [ label = "CFG: "] 
  "30064771095" -> "30064771103"  [ label = "CFG: "] 
  "30064771100" -> "30064771106"  [ label = "CFG: "] 
  "30064771100" -> "30064771109"  [ label = "CFG: "] 
  "30064771108" -> "30064771107"  [ label = "CFG: "] 
  "30064771111" -> "30064771115"  [ label = "CFG: "] 
  "30064771111" -> "30064771120"  [ label = "CFG: "] 
  "30064771112" -> "30064771111"  [ label = "CFG: "] 
  "30064771118" -> "30064771117"  [ label = "CFG: "] 
  "30064771121" -> "146028888072"  [ label = "CFG: "] 
  "30064771121" -> "30064771124"  [ label = "CFG: "] 
  "30064771124" -> "30064771123"  [ label = "CFG: "] 
  "30064771125" -> "146028888073"  [ label = "CFG: "] 
  "30064771125" -> "30064771128"  [ label = "CFG: "] 
  "30064771128" -> "30064771127"  [ label = "CFG: "] 
  "30064771129" -> "146028888074"  [ label = "CFG: "] 
  "30064771129" -> "30064771132"  [ label = "CFG: "] 
  "30064771132" -> "30064771131"  [ label = "CFG: "] 
  "30064771133" -> "30064771135"  [ label = "CFG: "] 
  "30064771133" -> "146028888075"  [ label = "CFG: "] 
  "30064771135" -> "146028888076"  [ label = "CFG: "] 
  "30064771075" -> "30064771074"  [ label = "CFG: "] 
  "146028888064" -> "128849018880"  [ label = "CFG: "] 
  "30064771079" -> "30064771078"  [ label = "CFG: "] 
  "146028888065" -> "128849018880"  [ label = "CFG: "] 
  "30064771082" -> "30064771081"  [ label = "CFG: "] 
  "30064771084" -> "30064771083"  [ label = "CFG: "] 
  "146028888066" -> "128849018880"  [ label = "CFG: "] 
  "30064771087" -> "30064771086"  [ label = "CFG: "] 
  "146028888067" -> "128849018880"  [ label = "CFG: "] 
  "146028888068" -> "128849018880"  [ label = "CFG: "] 
  "30064771096" -> "30064771095"  [ label = "CFG: "] 
  "146028888069" -> "128849018880"  [ label = "CFG: "] 
  "30064771101" -> "30064771100"  [ label = "CFG: "] 
  "146028888070" -> "128849018880"  [ label = "CFG: "] 
  "30064771109" -> "30064771108"  [ label = "CFG: "] 
  "30064771110" -> "30064771111"  [ label = "CFG: "] 
  "30064771119" -> "30064771118"  [ label = "CFG: "] 
  "30064771122" -> "30064771121"  [ label = "CFG: "] 
  "146028888072" -> "128849018880"  [ label = "CFG: "] 
  "30064771126" -> "30064771125"  [ label = "CFG: "] 
  "146028888073" -> "128849018880"  [ label = "CFG: "] 
  "30064771130" -> "30064771129"  [ label = "CFG: "] 
  "146028888074" -> "128849018880"  [ label = "CFG: "] 
  "30064771134" -> "30064771133"  [ label = "CFG: "] 
  "146028888075" -> "128849018880"  [ label = "CFG: "] 
  "30064771085" -> "146028888066"  [ label = "CFG: "] 
  "30064771088" -> "146028888067"  [ label = "CFG: "] 
  "30064771094" -> "146028888068"  [ label = "CFG: "] 
  "30064771097" -> "30064771096"  [ label = "CFG: "] 
  "30064771099" -> "146028888069"  [ label = "CFG: "] 
  "30064771102" -> "30064771101"  [ label = "CFG: "] 
  "30064771104" -> "146028888070"  [ label = "CFG: "] 
  "30064771113" -> "30064771116"  [ label = "CFG: "] 
  "30064771113" -> "30064771112"  [ label = "CFG: "] 
  "30064771120" -> "30064771119"  [ label = "CFG: "] 
  "30064771098" -> "30064771097"  [ label = "CFG: "] 
  "30064771103" -> "30064771102"  [ label = "CFG: "] 
  "30064771105" -> "30064771104"  [ label = "CFG: "] 
  "30064771114" -> "30064771113"  [ label = "CFG: "] 
  "146028888071" -> "128849018880"  [ label = "CFG: "] 
  "30064771106" -> "30064771105"  [ label = "CFG: "] 
  "30064771115" -> "30064771114"  [ label = "CFG: "] 
  "30064771116" -> "146028888071"  [ label = "CFG: "] 
  "111669149697" -> "30064771073"  [ label = "CFG: "] 
  "146028888068" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888071" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888075" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888064" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888074" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888069" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888065" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888073" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888070" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888066" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888067" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888072" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888076" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "115964116994" -> "128849018880"  [ label = "DDG: seq_len"] 
  "115964116995" -> "128849018880"  [ label = "DDG: log_prob"] 
  "115964116996" -> "128849018880"  [ label = "DDG: decoded_indices"] 
  "115964116997" -> "128849018880"  [ label = "DDG: decoded_values"] 
  "115964116998" -> "128849018880"  [ label = "DDG: decoded_shape"] 
  "30064771073" -> "128849018880"  [ label = "DDG: ctx"] 
  "30064771073" -> "128849018880"  [ label = "DDG: inputs"] 
  "30064771072" -> "128849018880"  [ label = "DDG: ctx-&gt;input(&quot;inputs&quot;, inputs)"] 
  "30064771072" -> "128849018880"  [ label = "DDG: status = ctx-&gt;input(&quot;inputs&quot;, inputs)"] 
  "30064771075" -> "128849018880"  [ label = "DDG: status"] 
  "30064771074" -> "128849018880"  [ label = "DDG: status.ok()"] 
  "30064771074" -> "128849018880"  [ label = "DDG: !status.ok()"] 
  "30064771120" -> "128849018880"  [ label = "DDG: top_paths_"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "111669149697" -> "115964116993"  [ label = "DDG: "] 
  "111669149697" -> "115964116994"  [ label = "DDG: "] 
  "111669149697" -> "115964116995"  [ label = "DDG: "] 
  "111669149697" -> "115964116996"  [ label = "DDG: "] 
  "111669149697" -> "115964116997"  [ label = "DDG: "] 
  "111669149697" -> "115964116998"  [ label = "DDG: "] 
  "30064771073" -> "30064771072"  [ label = "DDG: ctx"] 
  "30064771073" -> "30064771072"  [ label = "DDG: &quot;inputs&quot;"] 
  "30064771073" -> "30064771072"  [ label = "DDG: inputs"] 
  "30064771077" -> "30064771076"  [ label = "DDG: ctx"] 
  "30064771077" -> "30064771076"  [ label = "DDG: &quot;sequence_length&quot;"] 
  "30064771077" -> "30064771076"  [ label = "DDG: seq_len"] 
  "30064771081" -> "30064771080"  [ label = "DDG: *inputs"] 
  "30064771090" -> "30064771089"  [ label = "DDG: inputs_shape"] 
  "30064771090" -> "30064771089"  [ label = "DDG: 0"] 
  "30064771092" -> "30064771091"  [ label = "DDG: inputs_shape"] 
  "30064771092" -> "30064771091"  [ label = "DDG: 1"] 
  "30064771108" -> "30064771107"  [ label = "DDG: *seq_len"] 
  "30064771118" -> "30064771117"  [ label = "DDG: ctx"] 
  "30064771118" -> "30064771117"  [ label = "DDG: &quot;log_probability&quot;"] 
  "30064771118" -> "30064771117"  [ label = "DDG: TensorShape({batch_size, top_paths_})"] 
  "30064771118" -> "30064771117"  [ label = "DDG: log_prob"] 
  "30064771124" -> "30064771123"  [ label = "DDG: ctx"] 
  "30064771124" -> "30064771123"  [ label = "DDG: &quot;decoded_indices&quot;"] 
  "30064771124" -> "30064771123"  [ label = "DDG: decoded_indices"] 
  "30064771128" -> "30064771127"  [ label = "DDG: ctx"] 
  "30064771128" -> "30064771127"  [ label = "DDG: &quot;decoded_values&quot;"] 
  "30064771128" -> "30064771127"  [ label = "DDG: decoded_values"] 
  "30064771132" -> "30064771131"  [ label = "DDG: ctx"] 
  "30064771132" -> "30064771131"  [ label = "DDG: &quot;decoded_shape&quot;"] 
  "30064771132" -> "30064771131"  [ label = "DDG: decoded_shape"] 
  "30064771135" -> "146028888076"  [ label = "DDG: Status::OK()"] 
  "111669149697" -> "30064771135"  [ label = "DDG: "] 
  "115964116992" -> "30064771073"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771073"  [ label = "DDG: "] 
  "115964116993" -> "30064771073"  [ label = "DDG: inputs"] 
  "30064771075" -> "30064771074"  [ label = "DDG: status"] 
  "68719476740" -> "146028888064"  [ label = "DDG: status"] 
  "30064771073" -> "30064771077"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771077"  [ label = "DDG: "] 
  "115964116994" -> "30064771077"  [ label = "DDG: seq_len"] 
  "30064771079" -> "30064771078"  [ label = "DDG: status"] 
  "68719476745" -> "146028888065"  [ label = "DDG: status"] 
  "30064771084" -> "30064771083"  [ label = "DDG: inputs_shape"] 
  "111669149697" -> "30064771083"  [ label = "DDG: "] 
  "30064771085" -> "146028888066"  [ label = "DDG: errors::InvalidArgument(&quot;inputs is not a 3-Tensor&quot;)"] 
  "30064771087" -> "30064771086"  [ label = "DDG: inputs_shape"] 
  "111669149697" -> "30064771086"  [ label = "DDG: "] 
  "30064771088" -> "146028888067"  [ label = "DDG: errors::InvalidArgument(&quot;inputs must not be empty&quot;)"] 
  "30064771087" -> "30064771090"  [ label = "DDG: inputs_shape"] 
  "111669149697" -> "30064771090"  [ label = "DDG: "] 
  "30064771090" -> "30064771092"  [ label = "DDG: inputs_shape"] 
  "111669149697" -> "30064771092"  [ label = "DDG: "] 
  "30064771089" -> "30064771093"  [ label = "DDG: max_time"] 
  "111669149697" -> "30064771093"  [ label = "DDG: "] 
  "30064771094" -> "146028888068"  [ label = "DDG: errors::InvalidArgument(&quot;max_time is 0&quot;)"] 
  "30064771096" -> "30064771095"  [ label = "DDG: (*seq_len)-&gt;shape()"] 
  "30064771099" -> "146028888069"  [ label = "DDG: errors::InvalidArgument(&quot;sequence_length is not a vector&quot;)"] 
  "30064771101" -> "30064771100"  [ label = "DDG: batch_size"] 
  "30064771101" -> "30064771100"  [ label = "DDG: (*seq_len)-&gt;dim_size(0)"] 
  "30064771104" -> "146028888070"  [ label = "DDG: errors::FailedPrecondition(
          &quot;len(sequence_length) != batch_size.  &quot;,
          &quot;len(sequence_length):  &quot;, (*seq_len)-&gt;dim_size(0),
          &quot; batch_size: &quot;, batch_size)"] 
  "30064771102" -> "30064771108"  [ label = "DDG: *seq_len"] 
  "111669149697" -> "30064771110"  [ label = "DDG: "] 
  "30064771110" -> "30064771111"  [ label = "DDG: b"] 
  "30064771112" -> "30064771111"  [ label = "DDG: b"] 
  "111669149697" -> "30064771111"  [ label = "DDG: "] 
  "30064771101" -> "30064771111"  [ label = "DDG: batch_size"] 
  "30064771115" -> "30064771112"  [ label = "DDG: b"] 
  "111669149697" -> "30064771112"  [ label = "DDG: "] 
  "30064771077" -> "30064771118"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771118"  [ label = "DDG: "] 
  "30064771119" -> "30064771118"  [ label = "DDG: {batch_size, top_paths_}"] 
  "115964116995" -> "30064771118"  [ label = "DDG: log_prob"] 
  "30064771122" -> "30064771121"  [ label = "DDG: s"] 
  "68719476776" -> "146028888072"  [ label = "DDG: s"] 
  "30064771118" -> "30064771124"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771124"  [ label = "DDG: "] 
  "115964116996" -> "30064771124"  [ label = "DDG: decoded_indices"] 
  "30064771126" -> "30064771125"  [ label = "DDG: s"] 
  "68719476781" -> "146028888073"  [ label = "DDG: s"] 
  "30064771124" -> "30064771128"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771128"  [ label = "DDG: "] 
  "115964116997" -> "30064771128"  [ label = "DDG: decoded_values"] 
  "30064771130" -> "30064771129"  [ label = "DDG: s"] 
  "68719476786" -> "146028888074"  [ label = "DDG: s"] 
  "30064771128" -> "30064771132"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771132"  [ label = "DDG: "] 
  "115964116998" -> "30064771132"  [ label = "DDG: decoded_shape"] 
  "30064771134" -> "30064771133"  [ label = "DDG: s"] 
  "68719476791" -> "146028888075"  [ label = "DDG: s"] 
  "30064771072" -> "30064771075"  [ label = "DDG: status"] 
  "111669149697" -> "30064771075"  [ label = "DDG: "] 
  "30064771075" -> "68719476740"  [ label = "DDG: status"] 
  "111669149697" -> "68719476740"  [ label = "DDG: "] 
  "30064771076" -> "30064771079"  [ label = "DDG: status"] 
  "111669149697" -> "30064771079"  [ label = "DDG: "] 
  "30064771079" -> "68719476745"  [ label = "DDG: status"] 
  "111669149697" -> "68719476745"  [ label = "DDG: "] 
  "30064771080" -> "30064771084"  [ label = "DDG: inputs_shape"] 
  "111669149697" -> "30064771084"  [ label = "DDG: "] 
  "30064771084" -> "30064771087"  [ label = "DDG: inputs_shape"] 
  "111669149697" -> "30064771087"  [ label = "DDG: "] 
  "30064771097" -> "30064771096"  [ label = "DDG: *seq_len"] 
  "30064771091" -> "30064771101"  [ label = "DDG: batch_size"] 
  "111669149697" -> "30064771101"  [ label = "DDG: "] 
  "30064771102" -> "30064771101"  [ label = "DDG: *seq_len"] 
  "30064771102" -> "30064771101"  [ label = "DDG: 0"] 
  "30064771120" -> "30064771119"  [ label = "DDG: batch_size"] 
  "30064771120" -> "30064771119"  [ label = "DDG: top_paths_"] 
  "30064771117" -> "30064771122"  [ label = "DDG: s"] 
  "111669149697" -> "30064771122"  [ label = "DDG: "] 
  "30064771122" -> "68719476776"  [ label = "DDG: s"] 
  "111669149697" -> "68719476776"  [ label = "DDG: "] 
  "30064771123" -> "30064771126"  [ label = "DDG: s"] 
  "111669149697" -> "30064771126"  [ label = "DDG: "] 
  "30064771126" -> "68719476781"  [ label = "DDG: s"] 
  "111669149697" -> "68719476781"  [ label = "DDG: "] 
  "30064771127" -> "30064771130"  [ label = "DDG: s"] 
  "111669149697" -> "30064771130"  [ label = "DDG: "] 
  "30064771130" -> "68719476786"  [ label = "DDG: s"] 
  "111669149697" -> "68719476786"  [ label = "DDG: "] 
  "30064771131" -> "30064771134"  [ label = "DDG: s"] 
  "111669149697" -> "30064771134"  [ label = "DDG: "] 
  "30064771134" -> "68719476791"  [ label = "DDG: s"] 
  "111669149697" -> "68719476791"  [ label = "DDG: "] 
  "111669149697" -> "30064771085"  [ label = "DDG: "] 
  "111669149697" -> "30064771088"  [ label = "DDG: "] 
  "111669149697" -> "30064771094"  [ label = "DDG: "] 
  "111669149697" -> "30064771099"  [ label = "DDG: "] 
  "30064771097" -> "30064771102"  [ label = "DDG: *seq_len"] 
  "111669149697" -> "30064771102"  [ label = "DDG: "] 
  "111669149697" -> "30064771104"  [ label = "DDG: "] 
  "30064771105" -> "30064771104"  [ label = "DDG: *seq_len"] 
  "30064771105" -> "30064771104"  [ label = "DDG: 0"] 
  "30064771101" -> "30064771104"  [ label = "DDG: batch_size"] 
  "30064771114" -> "30064771113"  [ label = "DDG: seq_len_t(b)"] 
  "30064771114" -> "30064771113"  [ label = "DDG: max_time"] 
  "30064771116" -> "146028888071"  [ label = "DDG: errors::FailedPrecondition(&quot;sequence_length(&quot;, b,
                                          &quot;) &lt;= &quot;, max_time)"] 
  "30064771111" -> "30064771120"  [ label = "DDG: batch_size"] 
  "111669149697" -> "30064771120"  [ label = "DDG: "] 
  "30064771102" -> "30064771105"  [ label = "DDG: *seq_len"] 
  "111669149697" -> "30064771105"  [ label = "DDG: "] 
  "30064771115" -> "30064771114"  [ label = "DDG: b"] 
  "30064771093" -> "30064771114"  [ label = "DDG: max_time"] 
  "111669149697" -> "30064771114"  [ label = "DDG: "] 
  "30064771111" -> "30064771115"  [ label = "DDG: b"] 
  "111669149697" -> "30064771115"  [ label = "DDG: "] 
  "111669149697" -> "30064771116"  [ label = "DDG: "] 
  "30064771115" -> "30064771116"  [ label = "DDG: b"] 
  "30064771114" -> "30064771116"  [ label = "DDG: max_time"] 
  "30064771074" -> "146028888064"  [ label = "CDG: "] 
  "30064771074" -> "30064771078"  [ label = "CDG: "] 
  "30064771074" -> "30064771077"  [ label = "CDG: "] 
  "30064771074" -> "30064771076"  [ label = "CDG: "] 
  "30064771074" -> "30064771079"  [ label = "CDG: "] 
  "30064771078" -> "146028888065"  [ label = "CDG: "] 
  "30064771078" -> "30064771082"  [ label = "CDG: "] 
  "30064771078" -> "30064771081"  [ label = "CDG: "] 
  "30064771078" -> "30064771080"  [ label = "CDG: "] 
  "30064771078" -> "30064771084"  [ label = "CDG: "] 
  "30064771078" -> "30064771083"  [ label = "CDG: "] 
  "30064771083" -> "146028888066"  [ label = "CDG: "] 
  "30064771083" -> "30064771086"  [ label = "CDG: "] 
  "30064771083" -> "30064771085"  [ label = "CDG: "] 
  "30064771083" -> "30064771087"  [ label = "CDG: "] 
  "30064771086" -> "146028888067"  [ label = "CDG: "] 
  "30064771086" -> "30064771090"  [ label = "CDG: "] 
  "30064771086" -> "30064771089"  [ label = "CDG: "] 
  "30064771086" -> "30064771088"  [ label = "CDG: "] 
  "30064771086" -> "30064771093"  [ label = "CDG: "] 
  "30064771086" -> "30064771092"  [ label = "CDG: "] 
  "30064771086" -> "30064771091"  [ label = "CDG: "] 
  "30064771093" -> "146028888068"  [ label = "CDG: "] 
  "30064771093" -> "30064771094"  [ label = "CDG: "] 
  "30064771093" -> "30064771098"  [ label = "CDG: "] 
  "30064771093" -> "30064771097"  [ label = "CDG: "] 
  "30064771093" -> "30064771096"  [ label = "CDG: "] 
  "30064771093" -> "30064771095"  [ label = "CDG: "] 
  "30064771095" -> "146028888069"  [ label = "CDG: "] 
  "30064771095" -> "30064771102"  [ label = "CDG: "] 
  "30064771095" -> "30064771101"  [ label = "CDG: "] 
  "30064771095" -> "30064771100"  [ label = "CDG: "] 
  "30064771095" -> "30064771099"  [ label = "CDG: "] 
  "30064771095" -> "30064771103"  [ label = "CDG: "] 
  "30064771100" -> "146028888070"  [ label = "CDG: "] 
  "30064771100" -> "30064771106"  [ label = "CDG: "] 
  "30064771100" -> "30064771105"  [ label = "CDG: "] 
  "30064771100" -> "30064771104"  [ label = "CDG: "] 
  "30064771100" -> "30064771110"  [ label = "CDG: "] 
  "30064771100" -> "30064771109"  [ label = "CDG: "] 
  "30064771100" -> "30064771108"  [ label = "CDG: "] 
  "30064771100" -> "30064771107"  [ label = "CDG: "] 
  "30064771100" -> "30064771111"  [ label = "CDG: "] 
  "30064771111" -> "30064771114"  [ label = "CDG: "] 
  "30064771111" -> "30064771113"  [ label = "CDG: "] 
  "30064771111" -> "30064771118"  [ label = "CDG: "] 
  "30064771111" -> "30064771117"  [ label = "CDG: "] 
  "30064771111" -> "30064771115"  [ label = "CDG: "] 
  "30064771111" -> "30064771122"  [ label = "CDG: "] 
  "30064771111" -> "30064771121"  [ label = "CDG: "] 
  "30064771111" -> "30064771120"  [ label = "CDG: "] 
  "30064771111" -> "30064771119"  [ label = "CDG: "] 
  "30064771121" -> "146028888072"  [ label = "CDG: "] 
  "30064771121" -> "30064771126"  [ label = "CDG: "] 
  "30064771121" -> "30064771125"  [ label = "CDG: "] 
  "30064771121" -> "30064771124"  [ label = "CDG: "] 
  "30064771121" -> "30064771123"  [ label = "CDG: "] 
  "30064771125" -> "146028888073"  [ label = "CDG: "] 
  "30064771125" -> "30064771130"  [ label = "CDG: "] 
  "30064771125" -> "30064771129"  [ label = "CDG: "] 
  "30064771125" -> "30064771128"  [ label = "CDG: "] 
  "30064771125" -> "30064771127"  [ label = "CDG: "] 
  "30064771129" -> "30064771134"  [ label = "CDG: "] 
  "30064771129" -> "30064771133"  [ label = "CDG: "] 
  "30064771129" -> "30064771132"  [ label = "CDG: "] 
  "30064771129" -> "30064771131"  [ label = "CDG: "] 
  "30064771129" -> "146028888074"  [ label = "CDG: "] 
  "30064771133" -> "30064771135"  [ label = "CDG: "] 
  "30064771133" -> "146028888076"  [ label = "CDG: "] 
  "30064771133" -> "146028888075"  [ label = "CDG: "] 
  "30064771113" -> "146028888071"  [ label = "CDG: "] 
  "30064771113" -> "30064771112"  [ label = "CDG: "] 
  "30064771113" -> "30064771111"  [ label = "CDG: "] 
  "30064771113" -> "30064771116"  [ label = "CDG: "] 
}
"""
)
