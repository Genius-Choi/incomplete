[33mval[0m [36mres393[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "EvaluateOneFoldable" {  
"111669149698" [label = <(METHOD,EvaluateOneFoldable)<SUB>1</SUB>> ]
"115964116992" [label = <(PARAM,const NodeDef&amp; node)<SUB>1</SUB>> ]
"115964116993" [label = <(PARAM,std::vector&lt;NodeDef&gt;* outputs)<SUB>2</SUB>> ]
"115964116994" [label = <(PARAM,bool* result_too_large)<SUB>3</SUB>> ]
"25769803781" [label = <(BLOCK,{
  TensorVector inputs;
  TensorVector output_...,{
  TensorVector inputs;
  TensorVector output_...)<SUB>3</SUB>> ]
"94489280514" [label = <(LOCAL,TensorVector inputs: TensorVector)<SUB>4</SUB>> ]
"94489280515" [label = <(LOCAL,TensorVector output_tensors: TensorVector)<SUB>5</SUB>> ]
"94489280516" [label = <(LOCAL,auto inputs_cleanup: auto)<SUB>6</SUB>> ]
"30064771077" [label = <(&lt;operator&gt;.assignment,inputs_cleanup = gtl::MakeCleanup([&amp;inputs, &amp;ou...)<SUB>6</SUB>> ]
"68719476741" [label = <(IDENTIFIER,inputs_cleanup,inputs_cleanup = gtl::MakeCleanup([&amp;inputs, &amp;ou...)<SUB>6</SUB>> ]
"30064771078" [label = <(MakeCleanup,gtl::MakeCleanup([&amp;inputs, &amp;output_tensors] {
 ...)<SUB>6</SUB>> ]
"124554051584" [label = <(METHOD_REF,[&amp;inputs, &amp;output_tensors] {
    for (const aut...,gtl::MakeCleanup([&amp;inputs, &amp;output_tensors] {
 ...)<SUB>6</SUB>> ]
"94489280517" [label = <(LOCAL,size_t total_inputs_size: size_t)<SUB>17</SUB>> ]
"30064771079" [label = <(&lt;operator&gt;.assignment,total_inputs_size = 0)<SUB>17</SUB>> ]
"68719476742" [label = <(IDENTIFIER,total_inputs_size,total_inputs_size = 0)<SUB>17</SUB>> ]
"90194313216" [label = <(LITERAL,0,total_inputs_size = 0)<SUB>17</SUB>> ]
"47244640259" [label = <(CONTROL_STRUCTURE,FOR,for (const auto&amp; input:node.input()))<SUB>18</SUB>> ]
"30064771080" [label = <(input,node.input())<SUB>18</SUB>> ]
"68719476743" [label = <(IDENTIFIER,node,node.input())<SUB>18</SUB>> ]
"94489280518" [label = <(LOCAL,const auto&amp; input: auto&amp;)<SUB>18</SUB>> ]
"25769803782" [label = <(BLOCK,{
    const TensorId input_tensor = ParseTensor...,{
    const TensorId input_tensor = ParseTensor...)<SUB>18</SUB>> ]
"94489280519" [label = <(LOCAL,const TensorId input_tensor: TensorId)<SUB>19</SUB>> ]
"30064771081" [label = <(&lt;operator&gt;.assignment,input_tensor = ParseTensorName(input))<SUB>19</SUB>> ]
"68719476744" [label = <(IDENTIFIER,input_tensor,input_tensor = ParseTensorName(input))<SUB>19</SUB>> ]
"30064771082" [label = <(ParseTensorName,ParseTensorName(input))<SUB>19</SUB>> ]
"68719476745" [label = <(IDENTIFIER,input,ParseTensorName(input))<SUB>19</SUB>> ]
"47244640260" [label = <(CONTROL_STRUCTURE,IF,if (input_tensor.index() &lt; 0))<SUB>20</SUB>> ]
"30064771083" [label = <(&lt;operator&gt;.lessThan,input_tensor.index() &lt; 0)<SUB>20</SUB>> ]
"30064771084" [label = <(index,input_tensor.index())<SUB>20</SUB>> ]
"68719476746" [label = <(IDENTIFIER,input_tensor,input_tensor.index())<SUB>20</SUB>> ]
"90194313217" [label = <(LITERAL,0,input_tensor.index() &lt; 0)<SUB>20</SUB>> ]
"25769803783" [label = <(BLOCK,{
      // Control dependency
      break;
    },{
      // Control dependency
      break;
    })<SUB>20</SUB>> ]
"47244640261" [label = <(CONTROL_STRUCTURE,BREAK,break;)<SUB>22</SUB>> ]
"94489280520" [label = <(LOCAL,const NodeDef* input_node: NodeDef*)<SUB>24</SUB>> ]
"30064771085" [label = <(&lt;operator&gt;.assignment,* input_node = node_map_-&gt;GetNode(input))<SUB>24</SUB>> ]
"68719476747" [label = <(IDENTIFIER,input_node,* input_node = node_map_-&gt;GetNode(input))<SUB>24</SUB>> ]
"30064771086" [label = <(GetNode,node_map_-&gt;GetNode(input))<SUB>24</SUB>> ]
"68719476748" [label = <(IDENTIFIER,node_map_,node_map_-&gt;GetNode(input))<SUB>24</SUB>> ]
"68719476749" [label = <(IDENTIFIER,input,node_map_-&gt;GetNode(input))<SUB>24</SUB>> ]
"47244640262" [label = <(CONTROL_STRUCTURE,IF,if (!IsReallyConstant(*input_node)))<SUB>25</SUB>> ]
"30064771087" [label = <(&lt;operator&gt;.logicalNot,!IsReallyConstant(*input_node))<SUB>25</SUB>> ]
"30064771088" [label = <(IsReallyConstant,IsReallyConstant(*input_node))<SUB>25</SUB>> ]
"30064771089" [label = <(&lt;operator&gt;.indirection,*input_node)<SUB>25</SUB>> ]
"68719476750" [label = <(IDENTIFIER,input_node,IsReallyConstant(*input_node))<SUB>25</SUB>> ]
"25769803784" [label = <(BLOCK,{
      return Status(error::INVALID_ARGUMENT,
...,{
      return Status(error::INVALID_ARGUMENT,
...)<SUB>25</SUB>> ]
"146028888064" [label = <(RETURN,return Status(error::INVALID_ARGUMENT,
        ...,return Status(error::INVALID_ARGUMENT,
        ...)<SUB>26</SUB>> ]
"30064771090" [label = <(Status,Status(error::INVALID_ARGUMENT,
               ...)<SUB>26</SUB>> ]
"30064771091" [label = <(&lt;operator&gt;.fieldAccess,error::INVALID_ARGUMENT)<SUB>26</SUB>> ]
"68719476751" [label = <(IDENTIFIER,error,Status(error::INVALID_ARGUMENT,
               ...)<SUB>26</SUB>> ]
"55834574851" [label = <(FIELD_IDENTIFIER,INVALID_ARGUMENT,INVALID_ARGUMENT)<SUB>26</SUB>> ]
"30064771092" [label = <(StrCat,strings::StrCat(&quot;Can't fold &quot;, node.name(), &quot;, ...)<SUB>27</SUB>> ]
"90194313218" [label = <(LITERAL,&quot;Can't fold &quot;,strings::StrCat(&quot;Can't fold &quot;, node.name(), &quot;, ...)<SUB>27</SUB>> ]
"30064771093" [label = <(name,node.name())<SUB>27</SUB>> ]
"68719476752" [label = <(IDENTIFIER,node,node.name())<SUB>27</SUB>> ]
"90194313219" [label = <(LITERAL,&quot;, its &quot;,strings::StrCat(&quot;Can't fold &quot;, node.name(), &quot;, ...)<SUB>27</SUB>> ]
"68719476753" [label = <(IDENTIFIER,input,strings::StrCat(&quot;Can't fold &quot;, node.name(), &quot;, ...)<SUB>27</SUB>> ]
"90194313220" [label = <(LITERAL,&quot; isn't constant&quot;,strings::StrCat(&quot;Can't fold &quot;, node.name(), &quot;, ...)<SUB>28</SUB>> ]
"30064771094" [label = <(TF_RETURN_IF_ERROR,TF_RETURN_IF_ERROR(CheckAttrExists(*input_node,...)<SUB>30</SUB>> ]
"30064771095" [label = <(CheckAttrExists,CheckAttrExists(*input_node, &quot;value&quot;))<SUB>30</SUB>> ]
"30064771096" [label = <(&lt;operator&gt;.indirection,*input_node)<SUB>30</SUB>> ]
"68719476754" [label = <(IDENTIFIER,input_node,CheckAttrExists(*input_node, &quot;value&quot;))<SUB>30</SUB>> ]
"90194313221" [label = <(LITERAL,&quot;value&quot;,CheckAttrExists(*input_node, &quot;value&quot;))<SUB>30</SUB>> ]
"94489280521" [label = <(LOCAL,const TensorProto&amp; raw_val: TensorProto&amp;)<SUB>31</SUB>> ]
"30064771097" [label = <(&lt;operator&gt;.assignment,&amp; raw_val = input_node-&gt;attr().at(&quot;value&quot;).tens...)<SUB>31</SUB>> ]
"68719476755" [label = <(IDENTIFIER,raw_val,&amp; raw_val = input_node-&gt;attr().at(&quot;value&quot;).tens...)<SUB>31</SUB>> ]
"30064771098" [label = <(tensor,input_node-&gt;attr().at(&quot;value&quot;).tensor())<SUB>31</SUB>> ]
"30064771099" [label = <(at,input_node-&gt;attr().at(&quot;value&quot;))<SUB>31</SUB>> ]
"30064771100" [label = <(attr,input_node-&gt;attr())<SUB>31</SUB>> ]
"68719476756" [label = <(IDENTIFIER,input_node,input_node-&gt;attr())<SUB>31</SUB>> ]
"90194313222" [label = <(LITERAL,&quot;value&quot;,input_node-&gt;attr().at(&quot;value&quot;))<SUB>31</SUB>> ]
"47244640263" [label = <(CONTROL_STRUCTURE,IF,if (raw_val.dtype() == DT_INVALID))<SUB>32</SUB>> ]
"30064771101" [label = <(&lt;operator&gt;.equals,raw_val.dtype() == DT_INVALID)<SUB>32</SUB>> ]
"30064771102" [label = <(dtype,raw_val.dtype())<SUB>32</SUB>> ]
"68719476757" [label = <(IDENTIFIER,raw_val,raw_val.dtype())<SUB>32</SUB>> ]
"68719476758" [label = <(IDENTIFIER,DT_INVALID,raw_val.dtype() == DT_INVALID)<SUB>32</SUB>> ]
"25769803785" [label = <(BLOCK,{
      return Status(
          error::INVALID...,{
      return Status(
          error::INVALID...)<SUB>32</SUB>> ]
"146028888065" [label = <(RETURN,return Status(
          error::INVALID_ARGUMEN...,return Status(
          error::INVALID_ARGUMEN...)<SUB>33</SUB>> ]
"30064771103" [label = <(Status,Status(
          error::INVALID_ARGUMENT,
    ...)<SUB>33</SUB>> ]
"30064771104" [label = <(&lt;operator&gt;.fieldAccess,error::INVALID_ARGUMENT)<SUB>34</SUB>> ]
"68719476759" [label = <(IDENTIFIER,error,Status(
          error::INVALID_ARGUMENT,
    ...)<SUB>34</SUB>> ]
"55834574852" [label = <(FIELD_IDENTIFIER,INVALID_ARGUMENT,INVALID_ARGUMENT)<SUB>34</SUB>> ]
"30064771105" [label = <(StrCat,strings::StrCat(&quot;A tensor in the input node, wi...)<SUB>35</SUB>> ]
"90194313223" [label = <(LITERAL,&quot;A tensor in the input node, with TensorId of &quot;,strings::StrCat(&quot;A tensor in the input node, wi...)<SUB>35</SUB>> ]
"30064771106" [label = <(ToString,input_tensor.ToString())<SUB>36</SUB>> ]
"68719476760" [label = <(IDENTIFIER,input_tensor,input_tensor.ToString())<SUB>36</SUB>> ]
"90194313224" [label = <(LITERAL,&quot; has a dtype of DT_INVALID.&quot;,strings::StrCat(&quot;A tensor in the input node, wi...)<SUB>37</SUB>> ]
"47244640264" [label = <(CONTROL_STRUCTURE,IF,if (IsRefType(raw_val.dtype())))<SUB>39</SUB>> ]
"30064771107" [label = <(IsRefType,IsRefType(raw_val.dtype()))<SUB>39</SUB>> ]
"30064771108" [label = <(dtype,raw_val.dtype())<SUB>39</SUB>> ]
"68719476761" [label = <(IDENTIFIER,raw_val,raw_val.dtype())<SUB>39</SUB>> ]
"25769803786" [label = <(BLOCK,{
      return errors::InvalidArgument(
       ...,{
      return errors::InvalidArgument(
       ...)<SUB>39</SUB>> ]
"146028888066" [label = <(RETURN,return errors::InvalidArgument(
          &quot;Not ...,return errors::InvalidArgument(
          &quot;Not ...)<SUB>40</SUB>> ]
"30064771109" [label = <(InvalidArgument,errors::InvalidArgument(
          &quot;Not allowed...)<SUB>40</SUB>> ]
"90194313225" [label = <(LITERAL,&quot;Not allowed to construct a tensor with referen...,errors::InvalidArgument(
          &quot;Not allowed...)<SUB>41</SUB>> ]
"30064771110" [label = <(DataTypeString,DataTypeString(raw_val.dtype()))<SUB>42</SUB>> ]
"30064771111" [label = <(dtype,raw_val.dtype())<SUB>42</SUB>> ]
"68719476762" [label = <(IDENTIFIER,raw_val,raw_val.dtype())<SUB>42</SUB>> ]
"94489280522" [label = <(LOCAL,Tensor* value: Tensor*)<SUB>44</SUB>> ]
"30064771112" [label = <(&lt;operator&gt;.assignment,* value = new Tensor(raw_val.dtype(), raw_val.t...)<SUB>44</SUB>> ]
"68719476763" [label = <(IDENTIFIER,value,* value = new Tensor(raw_val.dtype(), raw_val.t...)<SUB>44</SUB>> ]
"30064771113" [label = <(&lt;operator&gt;.new,new Tensor(raw_val.dtype(), raw_val.tensor_shap...)<SUB>44</SUB>> ]
"68719476764" [label = <(IDENTIFIER,Tensor,new Tensor(raw_val.dtype(), raw_val.tensor_shap...)<SUB>44</SUB>> ]
"30064771114" [label = <(dtype,raw_val.dtype())<SUB>44</SUB>> ]
"68719476765" [label = <(IDENTIFIER,raw_val,raw_val.dtype())<SUB>44</SUB>> ]
"30064771115" [label = <(tensor_shape,raw_val.tensor_shape())<SUB>44</SUB>> ]
"68719476766" [label = <(IDENTIFIER,raw_val,raw_val.tensor_shape())<SUB>44</SUB>> ]
"47244640265" [label = <(CONTROL_STRUCTURE,IF,if (!value-&gt;FromProto(raw_val)))<SUB>45</SUB>> ]
"30064771116" [label = <(&lt;operator&gt;.logicalNot,!value-&gt;FromProto(raw_val))<SUB>45</SUB>> ]
"30064771117" [label = <(FromProto,value-&gt;FromProto(raw_val))<SUB>45</SUB>> ]
"68719476767" [label = <(IDENTIFIER,value,value-&gt;FromProto(raw_val))<SUB>45</SUB>> ]
"68719476768" [label = <(IDENTIFIER,raw_val,value-&gt;FromProto(raw_val))<SUB>45</SUB>> ]
"25769803787" [label = <(BLOCK,{
      delete (value);
      return errors::In...,{
      delete (value);
      return errors::In...)<SUB>45</SUB>> ]
"30064771118" [label = <(&lt;operator&gt;.delete,delete (value))<SUB>46</SUB>> ]
"68719476769" [label = <(IDENTIFIER,value,delete (value))<SUB>46</SUB>> ]
"146028888067" [label = <(RETURN,return errors::InvalidArgument(&quot;Unable to make ...,return errors::InvalidArgument(&quot;Unable to make ...)<SUB>47</SUB>> ]
"30064771119" [label = <(InvalidArgument,errors::InvalidArgument(&quot;Unable to make Tensor ...)<SUB>47</SUB>> ]
"90194313226" [label = <(LITERAL,&quot;Unable to make Tensor from proto for &quot;,errors::InvalidArgument(&quot;Unable to make Tensor ...)<SUB>47</SUB>> ]
"30064771120" [label = <(name,node.name())<SUB>48</SUB>> ]
"68719476770" [label = <(IDENTIFIER,node,node.name())<SUB>48</SUB>> ]
"90194313227" [label = <(LITERAL,&quot; with shape &quot;,errors::InvalidArgument(&quot;Unable to make Tensor ...)<SUB>48</SUB>> ]
"30064771121" [label = <(DebugString,raw_val.tensor_shape().DebugString())<SUB>49</SUB>> ]
"30064771122" [label = <(tensor_shape,raw_val.tensor_shape())<SUB>49</SUB>> ]
"68719476771" [label = <(IDENTIFIER,raw_val,raw_val.tensor_shape())<SUB>49</SUB>> ]
"30064771123" [label = <(emplace_back,inputs.emplace_back(value))<SUB>51</SUB>> ]
"68719476772" [label = <(IDENTIFIER,inputs,inputs.emplace_back(value))<SUB>51</SUB>> ]
"68719476773" [label = <(IDENTIFIER,value,inputs.emplace_back(value))<SUB>51</SUB>> ]
"30064771124" [label = <(&lt;operator&gt;.assignmentPlus,total_inputs_size += value-&gt;TotalBytes())<SUB>52</SUB>> ]
"68719476774" [label = <(IDENTIFIER,total_inputs_size,total_inputs_size += value-&gt;TotalBytes())<SUB>52</SUB>> ]
"30064771125" [label = <(TotalBytes,value-&gt;TotalBytes())<SUB>52</SUB>> ]
"68719476775" [label = <(IDENTIFIER,value,value-&gt;TotalBytes())<SUB>52</SUB>> ]
"30064771126" [label = <(TF_RETURN_IF_ERROR,TF_RETURN_IF_ERROR(EvaluateNode(node, inputs, &amp;...)<SUB>55</SUB>> ]
"30064771127" [label = <(EvaluateNode,EvaluateNode(node, inputs, &amp;output_tensors))<SUB>55</SUB>> ]
"68719476776" [label = <(IDENTIFIER,node,EvaluateNode(node, inputs, &amp;output_tensors))<SUB>55</SUB>> ]
"68719476777" [label = <(IDENTIFIER,inputs,EvaluateNode(node, inputs, &amp;output_tensors))<SUB>55</SUB>> ]
"30064771128" [label = <(&lt;operator&gt;.addressOf,&amp;output_tensors)<SUB>55</SUB>> ]
"68719476778" [label = <(IDENTIFIER,output_tensors,EvaluateNode(node, inputs, &amp;output_tensors))<SUB>55</SUB>> ]
"47244640266" [label = <(CONTROL_STRUCTURE,IF,if (output_tensors.empty()))<SUB>56</SUB>> ]
"30064771129" [label = <(empty,output_tensors.empty())<SUB>56</SUB>> ]
"68719476779" [label = <(IDENTIFIER,output_tensors,output_tensors.empty())<SUB>56</SUB>> ]
"25769803788" [label = <(BLOCK,{
    return Status(error::INVALID_ARGUMENT, &quot;E...,{
    return Status(error::INVALID_ARGUMENT, &quot;E...)<SUB>56</SUB>> ]
"146028888068" [label = <(RETURN,return Status(error::INVALID_ARGUMENT, &quot;Expecte...,return Status(error::INVALID_ARGUMENT, &quot;Expecte...)<SUB>57</SUB>> ]
"30064771130" [label = <(Status,Status(error::INVALID_ARGUMENT, &quot;Expected at le...)<SUB>57</SUB>> ]
"30064771131" [label = <(&lt;operator&gt;.fieldAccess,error::INVALID_ARGUMENT)<SUB>57</SUB>> ]
"68719476780" [label = <(IDENTIFIER,error,Status(error::INVALID_ARGUMENT, &quot;Expected at le...)<SUB>57</SUB>> ]
"55834574853" [label = <(FIELD_IDENTIFIER,INVALID_ARGUMENT,INVALID_ARGUMENT)<SUB>57</SUB>> ]
"90194313228" [label = <(LITERAL,&quot;Expected at least one output.&quot;,Status(error::INVALID_ARGUMENT, &quot;Expected at le...)<SUB>57</SUB>> ]
"30064771132" [label = <(resize,outputs-&gt;resize(output_tensors.size()))<SUB>60</SUB>> ]
"68719476781" [label = <(IDENTIFIER,outputs,outputs-&gt;resize(output_tensors.size()))<SUB>60</SUB>> ]
"30064771133" [label = <(size,output_tensors.size())<SUB>60</SUB>> ]
"68719476782" [label = <(IDENTIFIER,output_tensors,output_tensors.size())<SUB>60</SUB>> ]
"47244640267" [label = <(CONTROL_STRUCTURE,FOR,for (size_t i = 0;i &lt; output_tensors.size();i++))<SUB>61</SUB>> ]
"25769803789" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>61</SUB>> ]
"94489280523" [label = <(LOCAL,size_t i: size_t)<SUB>61</SUB>> ]
"30064771134" [label = <(&lt;operator&gt;.assignment,i = 0)<SUB>61</SUB>> ]
"68719476783" [label = <(IDENTIFIER,i,i = 0)<SUB>61</SUB>> ]
"90194313229" [label = <(LITERAL,0,i = 0)<SUB>61</SUB>> ]
"30064771135" [label = <(&lt;operator&gt;.lessThan,i &lt; output_tensors.size())<SUB>61</SUB>> ]
"68719476784" [label = <(IDENTIFIER,i,i &lt; output_tensors.size())<SUB>61</SUB>> ]
"30064771136" [label = <(size,output_tensors.size())<SUB>61</SUB>> ]
"68719476785" [label = <(IDENTIFIER,output_tensors,output_tensors.size())<SUB>61</SUB>> ]
"30064771137" [label = <(&lt;operator&gt;.postIncrement,i++)<SUB>61</SUB>> ]
"68719476786" [label = <(IDENTIFIER,i,i++)<SUB>61</SUB>> ]
"25769803790" [label = <(BLOCK,{
    string node_name = OptimizedNodeName(node...,{
    string node_name = OptimizedNodeName(node...)<SUB>61</SUB>> ]
"94489280524" [label = <(LOCAL,string node_name: string)<SUB>62</SUB>> ]
"30064771138" [label = <(&lt;operator&gt;.assignment,node_name = OptimizedNodeName(node, &quot;-folded&quot;))<SUB>62</SUB>> ]
"68719476787" [label = <(IDENTIFIER,node_name,node_name = OptimizedNodeName(node, &quot;-folded&quot;))<SUB>62</SUB>> ]
"30064771139" [label = <(OptimizedNodeName,OptimizedNodeName(node, &quot;-folded&quot;))<SUB>62</SUB>> ]
"68719476788" [label = <(IDENTIFIER,node,OptimizedNodeName(node, &quot;-folded&quot;))<SUB>62</SUB>> ]
"90194313230" [label = <(LITERAL,&quot;-folded&quot;,OptimizedNodeName(node, &quot;-folded&quot;))<SUB>62</SUB>> ]
"47244640268" [label = <(CONTROL_STRUCTURE,IF,if (output_tensors.size() &gt; 1))<SUB>63</SUB>> ]
"30064771140" [label = <(&lt;operator&gt;.greaterThan,output_tensors.size() &gt; 1)<SUB>63</SUB>> ]
"30064771141" [label = <(size,output_tensors.size())<SUB>63</SUB>> ]
"68719476789" [label = <(IDENTIFIER,output_tensors,output_tensors.size())<SUB>63</SUB>> ]
"90194313231" [label = <(LITERAL,1,output_tensors.size() &gt; 1)<SUB>63</SUB>> ]
"25769803791" [label = <(BLOCK,{
      node_name = strings::StrCat(node_name, ...,{
      node_name = strings::StrCat(node_name, ...)<SUB>63</SUB>> ]
"30064771142" [label = <(&lt;operator&gt;.assignment,node_name = strings::StrCat(node_name, &quot;-&quot;, i))<SUB>64</SUB>> ]
"68719476790" [label = <(IDENTIFIER,node_name,node_name = strings::StrCat(node_name, &quot;-&quot;, i))<SUB>64</SUB>> ]
"30064771143" [label = <(StrCat,strings::StrCat(node_name, &quot;-&quot;, i))<SUB>64</SUB>> ]
"68719476791" [label = <(IDENTIFIER,node_name,strings::StrCat(node_name, &quot;-&quot;, i))<SUB>64</SUB>> ]
"90194313232" [label = <(LITERAL,&quot;-&quot;,strings::StrCat(node_name, &quot;-&quot;, i))<SUB>64</SUB>> ]
"68719476792" [label = <(IDENTIFIER,i,strings::StrCat(node_name, &quot;-&quot;, i))<SUB>64</SUB>> ]
"47244640269" [label = <(CONTROL_STRUCTURE,IF,if (output_tensors[i].tensor))<SUB>66</SUB>> ]
"30064771144" [label = <(&lt;operator&gt;.fieldAccess,output_tensors[i].tensor)<SUB>66</SUB>> ]
"30064771145" [label = <(&lt;operator&gt;.indirectIndexAccess,output_tensors[i])<SUB>66</SUB>> ]
"68719476793" [label = <(IDENTIFIER,output_tensors,if (output_tensors[i].tensor))<SUB>66</SUB>> ]
"68719476794" [label = <(IDENTIFIER,i,if (output_tensors[i].tensor))<SUB>66</SUB>> ]
"55834574854" [label = <(FIELD_IDENTIFIER,tensor,tensor)<SUB>66</SUB>> ]
"25769803792" [label = <(BLOCK,{
      Status s = CreateNodeDef(node_name, out...,{
      Status s = CreateNodeDef(node_name, out...)<SUB>66</SUB>> ]
"94489280525" [label = <(LOCAL,Status s: Status)<SUB>67</SUB>> ]
"30064771146" [label = <(&lt;operator&gt;.assignment,s = CreateNodeDef(node_name, output_tensors[i],...)<SUB>67</SUB>> ]
"68719476795" [label = <(IDENTIFIER,s,s = CreateNodeDef(node_name, output_tensors[i],...)<SUB>67</SUB>> ]
"30064771147" [label = <(CreateNodeDef,CreateNodeDef(node_name, output_tensors[i], &amp;ou...)<SUB>67</SUB>> ]
"68719476796" [label = <(IDENTIFIER,node_name,CreateNodeDef(node_name, output_tensors[i], &amp;ou...)<SUB>67</SUB>> ]
"30064771148" [label = <(&lt;operator&gt;.indirectIndexAccess,output_tensors[i])<SUB>67</SUB>> ]
"68719476797" [label = <(IDENTIFIER,output_tensors,CreateNodeDef(node_name, output_tensors[i], &amp;ou...)<SUB>67</SUB>> ]
"68719476798" [label = <(IDENTIFIER,i,CreateNodeDef(node_name, output_tensors[i], &amp;ou...)<SUB>67</SUB>> ]
"30064771149" [label = <(&lt;operator&gt;.addressOf,&amp;outputs-&gt;at(i))<SUB>67</SUB>> ]
"30064771150" [label = <(at,outputs-&gt;at(i))<SUB>67</SUB>> ]
"68719476799" [label = <(IDENTIFIER,outputs,outputs-&gt;at(i))<SUB>67</SUB>> ]
"68719476800" [label = <(IDENTIFIER,i,outputs-&gt;at(i))<SUB>67</SUB>> ]
"68719476801" [label = <(IDENTIFIER,total_inputs_size,CreateNodeDef(node_name, output_tensors[i], &amp;ou...)<SUB>68</SUB>> ]
"47244640270" [label = <(CONTROL_STRUCTURE,IF,if (!s.ok()))<SUB>69</SUB>> ]
"30064771151" [label = <(&lt;operator&gt;.logicalNot,!s.ok())<SUB>69</SUB>> ]
"30064771152" [label = <(ok,s.ok())<SUB>69</SUB>> ]
"68719476802" [label = <(IDENTIFIER,s,s.ok())<SUB>69</SUB>> ]
"25769803793" [label = <(BLOCK,{
        *result_too_large = true;
        ret...,{
        *result_too_large = true;
        ret...)<SUB>69</SUB>> ]
"30064771153" [label = <(&lt;operator&gt;.assignment,*result_too_large = true)<SUB>70</SUB>> ]
"30064771154" [label = <(&lt;operator&gt;.indirection,*result_too_large)<SUB>70</SUB>> ]
"68719476803" [label = <(IDENTIFIER,result_too_large,*result_too_large = true)<SUB>70</SUB>> ]
"90194313233" [label = <(LITERAL,true,*result_too_large = true)<SUB>70</SUB>> ]
"146028888069" [label = <(RETURN,return s;,return s;)<SUB>71</SUB>> ]
"68719476804" [label = <(IDENTIFIER,s,return s;)<SUB>71</SUB>> ]
"47244640271" [label = <(CONTROL_STRUCTURE,ELSE,else)<SUB>73</SUB>> ]
"25769803794" [label = <(BLOCK,{
      // Create an empty NodeDef to identify ...,{
      // Create an empty NodeDef to identify ...)<SUB>73</SUB>> ]
"30064771155" [label = <(&lt;operator&gt;.assignment,outputs-&gt;at(i) = NodeDef())<SUB>76</SUB>> ]
"30064771156" [label = <(at,outputs-&gt;at(i))<SUB>76</SUB>> ]
"68719476805" [label = <(IDENTIFIER,outputs,outputs-&gt;at(i))<SUB>76</SUB>> ]
"68719476806" [label = <(IDENTIFIER,i,outputs-&gt;at(i))<SUB>76</SUB>> ]
"30064771157" [label = <(NodeDef,NodeDef())<SUB>76</SUB>> ]
"146028888070" [label = <(RETURN,return Status::OK();,return Status::OK();)<SUB>79</SUB>> ]
"30064771158" [label = <(OK,Status::OK())<SUB>79</SUB>> ]
"128849018881" [label = <(METHOD_RETURN,Status)<SUB>1</SUB>> ]
  "111669149698" -> "115964116992"  [ label = "AST: "] 
  "111669149698" -> "115964116993"  [ label = "AST: "] 
  "111669149698" -> "115964116994"  [ label = "AST: "] 
  "111669149698" -> "25769803781"  [ label = "AST: "] 
  "111669149698" -> "128849018881"  [ label = "AST: "] 
  "25769803781" -> "94489280514"  [ label = "AST: "] 
  "25769803781" -> "94489280515"  [ label = "AST: "] 
  "25769803781" -> "94489280516"  [ label = "AST: "] 
  "25769803781" -> "30064771077"  [ label = "AST: "] 
  "25769803781" -> "94489280517"  [ label = "AST: "] 
  "25769803781" -> "30064771079"  [ label = "AST: "] 
  "25769803781" -> "47244640259"  [ label = "AST: "] 
  "25769803781" -> "30064771126"  [ label = "AST: "] 
  "25769803781" -> "47244640266"  [ label = "AST: "] 
  "25769803781" -> "30064771132"  [ label = "AST: "] 
  "25769803781" -> "47244640267"  [ label = "AST: "] 
  "25769803781" -> "146028888070"  [ label = "AST: "] 
  "30064771077" -> "68719476741"  [ label = "AST: "] 
  "30064771077" -> "30064771078"  [ label = "AST: "] 
  "30064771078" -> "124554051584"  [ label = "AST: "] 
  "30064771079" -> "68719476742"  [ label = "AST: "] 
  "30064771079" -> "90194313216"  [ label = "AST: "] 
  "47244640259" -> "30064771080"  [ label = "AST: "] 
  "47244640259" -> "94489280518"  [ label = "AST: "] 
  "47244640259" -> "25769803782"  [ label = "AST: "] 
  "30064771080" -> "68719476743"  [ label = "AST: "] 
  "25769803782" -> "94489280519"  [ label = "AST: "] 
  "25769803782" -> "30064771081"  [ label = "AST: "] 
  "25769803782" -> "47244640260"  [ label = "AST: "] 
  "25769803782" -> "94489280520"  [ label = "AST: "] 
  "25769803782" -> "30064771085"  [ label = "AST: "] 
  "25769803782" -> "47244640262"  [ label = "AST: "] 
  "25769803782" -> "30064771094"  [ label = "AST: "] 
  "25769803782" -> "94489280521"  [ label = "AST: "] 
  "25769803782" -> "30064771097"  [ label = "AST: "] 
  "25769803782" -> "47244640263"  [ label = "AST: "] 
  "25769803782" -> "47244640264"  [ label = "AST: "] 
  "25769803782" -> "94489280522"  [ label = "AST: "] 
  "25769803782" -> "30064771112"  [ label = "AST: "] 
  "25769803782" -> "47244640265"  [ label = "AST: "] 
  "25769803782" -> "30064771123"  [ label = "AST: "] 
  "25769803782" -> "30064771124"  [ label = "AST: "] 
  "30064771081" -> "68719476744"  [ label = "AST: "] 
  "30064771081" -> "30064771082"  [ label = "AST: "] 
  "30064771082" -> "68719476745"  [ label = "AST: "] 
  "47244640260" -> "30064771083"  [ label = "AST: "] 
  "47244640260" -> "25769803783"  [ label = "AST: "] 
  "30064771083" -> "30064771084"  [ label = "AST: "] 
  "30064771083" -> "90194313217"  [ label = "AST: "] 
  "30064771084" -> "68719476746"  [ label = "AST: "] 
  "25769803783" -> "47244640261"  [ label = "AST: "] 
  "30064771085" -> "68719476747"  [ label = "AST: "] 
  "30064771085" -> "30064771086"  [ label = "AST: "] 
  "30064771086" -> "68719476748"  [ label = "AST: "] 
  "30064771086" -> "68719476749"  [ label = "AST: "] 
  "47244640262" -> "30064771087"  [ label = "AST: "] 
  "47244640262" -> "25769803784"  [ label = "AST: "] 
  "30064771087" -> "30064771088"  [ label = "AST: "] 
  "30064771088" -> "30064771089"  [ label = "AST: "] 
  "30064771089" -> "68719476750"  [ label = "AST: "] 
  "25769803784" -> "146028888064"  [ label = "AST: "] 
  "146028888064" -> "30064771090"  [ label = "AST: "] 
  "30064771090" -> "30064771091"  [ label = "AST: "] 
  "30064771090" -> "30064771092"  [ label = "AST: "] 
  "30064771091" -> "68719476751"  [ label = "AST: "] 
  "30064771091" -> "55834574851"  [ label = "AST: "] 
  "30064771092" -> "90194313218"  [ label = "AST: "] 
  "30064771092" -> "30064771093"  [ label = "AST: "] 
  "30064771092" -> "90194313219"  [ label = "AST: "] 
  "30064771092" -> "68719476753"  [ label = "AST: "] 
  "30064771092" -> "90194313220"  [ label = "AST: "] 
  "30064771093" -> "68719476752"  [ label = "AST: "] 
  "30064771094" -> "30064771095"  [ label = "AST: "] 
  "30064771095" -> "30064771096"  [ label = "AST: "] 
  "30064771095" -> "90194313221"  [ label = "AST: "] 
  "30064771096" -> "68719476754"  [ label = "AST: "] 
  "30064771097" -> "68719476755"  [ label = "AST: "] 
  "30064771097" -> "30064771098"  [ label = "AST: "] 
  "30064771098" -> "30064771099"  [ label = "AST: "] 
  "30064771099" -> "30064771100"  [ label = "AST: "] 
  "30064771099" -> "90194313222"  [ label = "AST: "] 
  "30064771100" -> "68719476756"  [ label = "AST: "] 
  "47244640263" -> "30064771101"  [ label = "AST: "] 
  "47244640263" -> "25769803785"  [ label = "AST: "] 
  "30064771101" -> "30064771102"  [ label = "AST: "] 
  "30064771101" -> "68719476758"  [ label = "AST: "] 
  "30064771102" -> "68719476757"  [ label = "AST: "] 
  "25769803785" -> "146028888065"  [ label = "AST: "] 
  "146028888065" -> "30064771103"  [ label = "AST: "] 
  "30064771103" -> "30064771104"  [ label = "AST: "] 
  "30064771103" -> "30064771105"  [ label = "AST: "] 
  "30064771104" -> "68719476759"  [ label = "AST: "] 
  "30064771104" -> "55834574852"  [ label = "AST: "] 
  "30064771105" -> "90194313223"  [ label = "AST: "] 
  "30064771105" -> "30064771106"  [ label = "AST: "] 
  "30064771105" -> "90194313224"  [ label = "AST: "] 
  "30064771106" -> "68719476760"  [ label = "AST: "] 
  "47244640264" -> "30064771107"  [ label = "AST: "] 
  "47244640264" -> "25769803786"  [ label = "AST: "] 
  "30064771107" -> "30064771108"  [ label = "AST: "] 
  "30064771108" -> "68719476761"  [ label = "AST: "] 
  "25769803786" -> "146028888066"  [ label = "AST: "] 
  "146028888066" -> "30064771109"  [ label = "AST: "] 
  "30064771109" -> "90194313225"  [ label = "AST: "] 
  "30064771109" -> "30064771110"  [ label = "AST: "] 
  "30064771110" -> "30064771111"  [ label = "AST: "] 
  "30064771111" -> "68719476762"  [ label = "AST: "] 
  "30064771112" -> "68719476763"  [ label = "AST: "] 
  "30064771112" -> "30064771113"  [ label = "AST: "] 
  "30064771113" -> "68719476764"  [ label = "AST: "] 
  "30064771113" -> "30064771114"  [ label = "AST: "] 
  "30064771113" -> "30064771115"  [ label = "AST: "] 
  "30064771114" -> "68719476765"  [ label = "AST: "] 
  "30064771115" -> "68719476766"  [ label = "AST: "] 
  "47244640265" -> "30064771116"  [ label = "AST: "] 
  "47244640265" -> "25769803787"  [ label = "AST: "] 
  "30064771116" -> "30064771117"  [ label = "AST: "] 
  "30064771117" -> "68719476767"  [ label = "AST: "] 
  "30064771117" -> "68719476768"  [ label = "AST: "] 
  "25769803787" -> "30064771118"  [ label = "AST: "] 
  "25769803787" -> "146028888067"  [ label = "AST: "] 
  "30064771118" -> "68719476769"  [ label = "AST: "] 
  "146028888067" -> "30064771119"  [ label = "AST: "] 
  "30064771119" -> "90194313226"  [ label = "AST: "] 
  "30064771119" -> "30064771120"  [ label = "AST: "] 
  "30064771119" -> "90194313227"  [ label = "AST: "] 
  "30064771119" -> "30064771121"  [ label = "AST: "] 
  "30064771120" -> "68719476770"  [ label = "AST: "] 
  "30064771121" -> "30064771122"  [ label = "AST: "] 
  "30064771122" -> "68719476771"  [ label = "AST: "] 
  "30064771123" -> "68719476772"  [ label = "AST: "] 
  "30064771123" -> "68719476773"  [ label = "AST: "] 
  "30064771124" -> "68719476774"  [ label = "AST: "] 
  "30064771124" -> "30064771125"  [ label = "AST: "] 
  "30064771125" -> "68719476775"  [ label = "AST: "] 
  "30064771126" -> "30064771127"  [ label = "AST: "] 
  "30064771127" -> "68719476776"  [ label = "AST: "] 
  "30064771127" -> "68719476777"  [ label = "AST: "] 
  "30064771127" -> "30064771128"  [ label = "AST: "] 
  "30064771128" -> "68719476778"  [ label = "AST: "] 
  "47244640266" -> "30064771129"  [ label = "AST: "] 
  "47244640266" -> "25769803788"  [ label = "AST: "] 
  "30064771129" -> "68719476779"  [ label = "AST: "] 
  "25769803788" -> "146028888068"  [ label = "AST: "] 
  "146028888068" -> "30064771130"  [ label = "AST: "] 
  "30064771130" -> "30064771131"  [ label = "AST: "] 
  "30064771130" -> "90194313228"  [ label = "AST: "] 
  "30064771131" -> "68719476780"  [ label = "AST: "] 
  "30064771131" -> "55834574853"  [ label = "AST: "] 
  "30064771132" -> "68719476781"  [ label = "AST: "] 
  "30064771132" -> "30064771133"  [ label = "AST: "] 
  "30064771133" -> "68719476782"  [ label = "AST: "] 
  "47244640267" -> "25769803789"  [ label = "AST: "] 
  "47244640267" -> "30064771135"  [ label = "AST: "] 
  "47244640267" -> "30064771137"  [ label = "AST: "] 
  "47244640267" -> "25769803790"  [ label = "AST: "] 
  "25769803789" -> "94489280523"  [ label = "AST: "] 
  "25769803789" -> "30064771134"  [ label = "AST: "] 
  "30064771134" -> "68719476783"  [ label = "AST: "] 
  "30064771134" -> "90194313229"  [ label = "AST: "] 
  "30064771135" -> "68719476784"  [ label = "AST: "] 
  "30064771135" -> "30064771136"  [ label = "AST: "] 
  "30064771136" -> "68719476785"  [ label = "AST: "] 
  "30064771137" -> "68719476786"  [ label = "AST: "] 
  "25769803790" -> "94489280524"  [ label = "AST: "] 
  "25769803790" -> "30064771138"  [ label = "AST: "] 
  "25769803790" -> "47244640268"  [ label = "AST: "] 
  "25769803790" -> "47244640269"  [ label = "AST: "] 
  "30064771138" -> "68719476787"  [ label = "AST: "] 
  "30064771138" -> "30064771139"  [ label = "AST: "] 
  "30064771139" -> "68719476788"  [ label = "AST: "] 
  "30064771139" -> "90194313230"  [ label = "AST: "] 
  "47244640268" -> "30064771140"  [ label = "AST: "] 
  "47244640268" -> "25769803791"  [ label = "AST: "] 
  "30064771140" -> "30064771141"  [ label = "AST: "] 
  "30064771140" -> "90194313231"  [ label = "AST: "] 
  "30064771141" -> "68719476789"  [ label = "AST: "] 
  "25769803791" -> "30064771142"  [ label = "AST: "] 
  "30064771142" -> "68719476790"  [ label = "AST: "] 
  "30064771142" -> "30064771143"  [ label = "AST: "] 
  "30064771143" -> "68719476791"  [ label = "AST: "] 
  "30064771143" -> "90194313232"  [ label = "AST: "] 
  "30064771143" -> "68719476792"  [ label = "AST: "] 
  "47244640269" -> "30064771144"  [ label = "AST: "] 
  "47244640269" -> "25769803792"  [ label = "AST: "] 
  "47244640269" -> "47244640271"  [ label = "AST: "] 
  "30064771144" -> "30064771145"  [ label = "AST: "] 
  "30064771144" -> "55834574854"  [ label = "AST: "] 
  "30064771145" -> "68719476793"  [ label = "AST: "] 
  "30064771145" -> "68719476794"  [ label = "AST: "] 
  "25769803792" -> "94489280525"  [ label = "AST: "] 
  "25769803792" -> "30064771146"  [ label = "AST: "] 
  "25769803792" -> "47244640270"  [ label = "AST: "] 
  "30064771146" -> "68719476795"  [ label = "AST: "] 
  "30064771146" -> "30064771147"  [ label = "AST: "] 
  "30064771147" -> "68719476796"  [ label = "AST: "] 
  "30064771147" -> "30064771148"  [ label = "AST: "] 
  "30064771147" -> "30064771149"  [ label = "AST: "] 
  "30064771147" -> "68719476801"  [ label = "AST: "] 
  "30064771148" -> "68719476797"  [ label = "AST: "] 
  "30064771148" -> "68719476798"  [ label = "AST: "] 
  "30064771149" -> "30064771150"  [ label = "AST: "] 
  "30064771150" -> "68719476799"  [ label = "AST: "] 
  "30064771150" -> "68719476800"  [ label = "AST: "] 
  "47244640270" -> "30064771151"  [ label = "AST: "] 
  "47244640270" -> "25769803793"  [ label = "AST: "] 
  "30064771151" -> "30064771152"  [ label = "AST: "] 
  "30064771152" -> "68719476802"  [ label = "AST: "] 
  "25769803793" -> "30064771153"  [ label = "AST: "] 
  "25769803793" -> "146028888069"  [ label = "AST: "] 
  "30064771153" -> "30064771154"  [ label = "AST: "] 
  "30064771153" -> "90194313233"  [ label = "AST: "] 
  "30064771154" -> "68719476803"  [ label = "AST: "] 
  "146028888069" -> "68719476804"  [ label = "AST: "] 
  "47244640271" -> "25769803794"  [ label = "AST: "] 
  "25769803794" -> "30064771155"  [ label = "AST: "] 
  "30064771155" -> "30064771156"  [ label = "AST: "] 
  "30064771155" -> "30064771157"  [ label = "AST: "] 
  "30064771156" -> "68719476805"  [ label = "AST: "] 
  "30064771156" -> "68719476806"  [ label = "AST: "] 
  "146028888070" -> "30064771158"  [ label = "AST: "] 
  "30064771077" -> "30064771079"  [ label = "CFG: "] 
  "30064771079" -> "30064771082"  [ label = "CFG: "] 
  "30064771126" -> "30064771129"  [ label = "CFG: "] 
  "30064771132" -> "30064771134"  [ label = "CFG: "] 
  "146028888070" -> "128849018881"  [ label = "CFG: "] 
  "30064771078" -> "30064771077"  [ label = "CFG: "] 
  "30064771127" -> "30064771126"  [ label = "CFG: "] 
  "30064771129" -> "55834574853"  [ label = "CFG: "] 
  "30064771129" -> "30064771133"  [ label = "CFG: "] 
  "30064771133" -> "30064771132"  [ label = "CFG: "] 
  "30064771135" -> "30064771158"  [ label = "CFG: "] 
  "30064771135" -> "30064771139"  [ label = "CFG: "] 
  "30064771137" -> "30064771136"  [ label = "CFG: "] 
  "30064771158" -> "146028888070"  [ label = "CFG: "] 
  "124554051584" -> "30064771078"  [ label = "CFG: "] 
  "30064771081" -> "30064771084"  [ label = "CFG: "] 
  "30064771085" -> "30064771089"  [ label = "CFG: "] 
  "30064771094" -> "30064771100"  [ label = "CFG: "] 
  "30064771097" -> "30064771102"  [ label = "CFG: "] 
  "30064771112" -> "30064771117"  [ label = "CFG: "] 
  "30064771123" -> "30064771125"  [ label = "CFG: "] 
  "30064771124" -> "30064771082"  [ label = "CFG: "] 
  "30064771124" -> "30064771128"  [ label = "CFG: "] 
  "30064771128" -> "30064771127"  [ label = "CFG: "] 
  "146028888068" -> "128849018881"  [ label = "CFG: "] 
  "30064771134" -> "30064771136"  [ label = "CFG: "] 
  "30064771136" -> "30064771135"  [ label = "CFG: "] 
  "30064771138" -> "30064771141"  [ label = "CFG: "] 
  "30064771082" -> "30064771081"  [ label = "CFG: "] 
  "30064771083" -> "30064771086"  [ label = "CFG: "] 
  "30064771086" -> "30064771085"  [ label = "CFG: "] 
  "30064771087" -> "55834574851"  [ label = "CFG: "] 
  "30064771087" -> "30064771096"  [ label = "CFG: "] 
  "30064771095" -> "30064771094"  [ label = "CFG: "] 
  "30064771098" -> "30064771097"  [ label = "CFG: "] 
  "30064771101" -> "55834574852"  [ label = "CFG: "] 
  "30064771101" -> "30064771108"  [ label = "CFG: "] 
  "30064771107" -> "30064771111"  [ label = "CFG: "] 
  "30064771107" -> "30064771114"  [ label = "CFG: "] 
  "30064771113" -> "30064771112"  [ label = "CFG: "] 
  "30064771116" -> "30064771118"  [ label = "CFG: "] 
  "30064771116" -> "30064771123"  [ label = "CFG: "] 
  "30064771125" -> "30064771124"  [ label = "CFG: "] 
  "30064771130" -> "146028888068"  [ label = "CFG: "] 
  "30064771139" -> "30064771138"  [ label = "CFG: "] 
  "30064771140" -> "30064771143"  [ label = "CFG: "] 
  "30064771140" -> "30064771145"  [ label = "CFG: "] 
  "30064771144" -> "30064771148"  [ label = "CFG: "] 
  "30064771144" -> "30064771156"  [ label = "CFG: "] 
  "30064771084" -> "30064771083"  [ label = "CFG: "] 
  "30064771088" -> "30064771087"  [ label = "CFG: "] 
  "146028888064" -> "128849018881"  [ label = "CFG: "] 
  "30064771096" -> "30064771095"  [ label = "CFG: "] 
  "30064771099" -> "30064771098"  [ label = "CFG: "] 
  "30064771102" -> "30064771101"  [ label = "CFG: "] 
  "146028888065" -> "128849018881"  [ label = "CFG: "] 
  "30064771108" -> "30064771107"  [ label = "CFG: "] 
  "146028888066" -> "128849018881"  [ label = "CFG: "] 
  "30064771114" -> "30064771115"  [ label = "CFG: "] 
  "30064771115" -> "30064771113"  [ label = "CFG: "] 
  "30064771117" -> "30064771116"  [ label = "CFG: "] 
  "30064771118" -> "30064771120"  [ label = "CFG: "] 
  "146028888067" -> "128849018881"  [ label = "CFG: "] 
  "30064771131" -> "30064771130"  [ label = "CFG: "] 
  "30064771141" -> "30064771140"  [ label = "CFG: "] 
  "30064771142" -> "30064771145"  [ label = "CFG: "] 
  "30064771145" -> "55834574854"  [ label = "CFG: "] 
  "55834574854" -> "30064771144"  [ label = "CFG: "] 
  "30064771146" -> "30064771152"  [ label = "CFG: "] 
  "30064771089" -> "30064771088"  [ label = "CFG: "] 
  "30064771090" -> "146028888064"  [ label = "CFG: "] 
  "30064771100" -> "30064771099"  [ label = "CFG: "] 
  "30064771103" -> "146028888065"  [ label = "CFG: "] 
  "30064771109" -> "146028888066"  [ label = "CFG: "] 
  "30064771119" -> "146028888067"  [ label = "CFG: "] 
  "55834574853" -> "30064771131"  [ label = "CFG: "] 
  "30064771143" -> "30064771142"  [ label = "CFG: "] 
  "30064771147" -> "30064771146"  [ label = "CFG: "] 
  "30064771151" -> "30064771154"  [ label = "CFG: "] 
  "30064771151" -> "30064771137"  [ label = "CFG: "] 
  "30064771155" -> "30064771137"  [ label = "CFG: "] 
  "30064771091" -> "30064771093"  [ label = "CFG: "] 
  "30064771092" -> "30064771090"  [ label = "CFG: "] 
  "30064771104" -> "30064771106"  [ label = "CFG: "] 
  "30064771105" -> "30064771103"  [ label = "CFG: "] 
  "30064771110" -> "30064771109"  [ label = "CFG: "] 
  "30064771120" -> "30064771122"  [ label = "CFG: "] 
  "30064771121" -> "30064771119"  [ label = "CFG: "] 
  "30064771148" -> "30064771150"  [ label = "CFG: "] 
  "30064771149" -> "30064771147"  [ label = "CFG: "] 
  "30064771152" -> "30064771151"  [ label = "CFG: "] 
  "30064771153" -> "146028888069"  [ label = "CFG: "] 
  "146028888069" -> "128849018881"  [ label = "CFG: "] 
  "30064771156" -> "30064771157"  [ label = "CFG: "] 
  "30064771157" -> "30064771155"  [ label = "CFG: "] 
  "55834574851" -> "30064771091"  [ label = "CFG: "] 
  "30064771093" -> "30064771092"  [ label = "CFG: "] 
  "55834574852" -> "30064771104"  [ label = "CFG: "] 
  "30064771106" -> "30064771105"  [ label = "CFG: "] 
  "30064771111" -> "30064771110"  [ label = "CFG: "] 
  "30064771122" -> "30064771121"  [ label = "CFG: "] 
  "30064771150" -> "30064771149"  [ label = "CFG: "] 
  "30064771154" -> "30064771153"  [ label = "CFG: "] 
  "111669149698" -> "124554051584"  [ label = "CFG: "] 
  "146028888069" -> "128849018881"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888065" -> "128849018881"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888064" -> "128849018881"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888070" -> "128849018881"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888066" -> "128849018881"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888067" -> "128849018881"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888068" -> "128849018881"  [ label = "DDG: &lt;RET&gt;"] 
  "115964116993" -> "128849018881"  [ label = "DDG: outputs"] 
  "115964116994" -> "128849018881"  [ label = "DDG: result_too_large"] 
  "30064771077" -> "128849018881"  [ label = "DDG: inputs_cleanup"] 
  "30064771077" -> "128849018881"  [ label = "DDG: gtl::MakeCleanup([&amp;inputs, &amp;output_tensors] {
    for (const auto&amp; input : inputs) {
      delete input.tensor;
    }
    for (const auto&amp; output : output_tensors) {
      if (output.tensor) {
        delete output.tensor;
      }
    }
  })"] 
  "30064771077" -> "128849018881"  [ label = "DDG: inputs_cleanup = gtl::MakeCleanup([&amp;inputs, &amp;output_tensors] {
    for (const auto&amp; input : inputs) {
      delete input.tensor;
    }
    for (const auto&amp; output : output_tensors) {
      if (output.tensor) {
        delete output.tensor;
      }
    }
  })"] 
  "30064771079" -> "128849018881"  [ label = "DDG: total_inputs_size"] 
  "30064771079" -> "128849018881"  [ label = "DDG: total_inputs_size = 0"] 
  "30064771081" -> "128849018881"  [ label = "DDG: ParseTensorName(input)"] 
  "30064771081" -> "128849018881"  [ label = "DDG: input_tensor = ParseTensorName(input)"] 
  "30064771084" -> "128849018881"  [ label = "DDG: input_tensor"] 
  "30064771083" -> "128849018881"  [ label = "DDG: input_tensor.index()"] 
  "30064771083" -> "128849018881"  [ label = "DDG: input_tensor.index() &lt; 0"] 
  "30064771085" -> "128849018881"  [ label = "DDG: input_node"] 
  "30064771085" -> "128849018881"  [ label = "DDG: node_map_-&gt;GetNode(input)"] 
  "30064771085" -> "128849018881"  [ label = "DDG: * input_node = node_map_-&gt;GetNode(input)"] 
  "30064771088" -> "128849018881"  [ label = "DDG: *input_node"] 
  "30064771087" -> "128849018881"  [ label = "DDG: IsReallyConstant(*input_node)"] 
  "30064771087" -> "128849018881"  [ label = "DDG: !IsReallyConstant(*input_node)"] 
  "30064771094" -> "128849018881"  [ label = "DDG: CheckAttrExists(*input_node, &quot;value&quot;)"] 
  "30064771094" -> "128849018881"  [ label = "DDG: TF_RETURN_IF_ERROR(CheckAttrExists(*input_node, &quot;value&quot;))"] 
  "30064771099" -> "128849018881"  [ label = "DDG: input_node-&gt;attr()"] 
  "30064771098" -> "128849018881"  [ label = "DDG: input_node-&gt;attr().at(&quot;value&quot;)"] 
  "30064771097" -> "128849018881"  [ label = "DDG: input_node-&gt;attr().at(&quot;value&quot;).tensor()"] 
  "30064771097" -> "128849018881"  [ label = "DDG: &amp; raw_val = input_node-&gt;attr().at(&quot;value&quot;).tensor()"] 
  "30064771101" -> "128849018881"  [ label = "DDG: raw_val.dtype() == DT_INVALID"] 
  "30064771107" -> "128849018881"  [ label = "DDG: IsRefType(raw_val.dtype())"] 
  "30064771113" -> "128849018881"  [ label = "DDG: raw_val.dtype()"] 
  "30064771113" -> "128849018881"  [ label = "DDG: raw_val.tensor_shape()"] 
  "30064771112" -> "128849018881"  [ label = "DDG: new Tensor(raw_val.dtype(), raw_val.tensor_shape())"] 
  "30064771112" -> "128849018881"  [ label = "DDG: * value = new Tensor(raw_val.dtype(), raw_val.tensor_shape())"] 
  "30064771117" -> "128849018881"  [ label = "DDG: raw_val"] 
  "30064771116" -> "128849018881"  [ label = "DDG: value-&gt;FromProto(raw_val)"] 
  "30064771116" -> "128849018881"  [ label = "DDG: !value-&gt;FromProto(raw_val)"] 
  "30064771123" -> "128849018881"  [ label = "DDG: inputs"] 
  "30064771123" -> "128849018881"  [ label = "DDG: inputs.emplace_back(value)"] 
  "30064771124" -> "128849018881"  [ label = "DDG: total_inputs_size"] 
  "30064771125" -> "128849018881"  [ label = "DDG: value"] 
  "30064771124" -> "128849018881"  [ label = "DDG: value-&gt;TotalBytes()"] 
  "30064771124" -> "128849018881"  [ label = "DDG: total_inputs_size += value-&gt;TotalBytes()"] 
  "30064771090" -> "128849018881"  [ label = "DDG: error::INVALID_ARGUMENT"] 
  "30064771093" -> "128849018881"  [ label = "DDG: node"] 
  "30064771092" -> "128849018881"  [ label = "DDG: node.name()"] 
  "30064771092" -> "128849018881"  [ label = "DDG: input"] 
  "30064771090" -> "128849018881"  [ label = "DDG: strings::StrCat(&quot;Can't fold &quot;, node.name(), &quot;, its &quot;, input,
                                    &quot; isn't constant&quot;)"] 
  "30064771090" -> "128849018881"  [ label = "DDG: Status(error::INVALID_ARGUMENT,
                    strings::StrCat(&quot;Can't fold &quot;, node.name(), &quot;, its &quot;, input,
                                    &quot; isn't constant&quot;))"] 
  "30064771086" -> "128849018881"  [ label = "DDG: node_map_"] 
  "30064771101" -> "128849018881"  [ label = "DDG: DT_INVALID"] 
  "30064771113" -> "128849018881"  [ label = "DDG: Tensor"] 
  "111669149698" -> "115964116992"  [ label = "DDG: "] 
  "111669149698" -> "115964116993"  [ label = "DDG: "] 
  "111669149698" -> "115964116994"  [ label = "DDG: "] 
  "30064771078" -> "30064771077"  [ label = "DDG: [&amp;inputs, &amp;output_tensors] {
    for (const auto&amp; input : inputs) {
      delete input.tensor;
    }
    for (const auto&amp; output : output_tensors) {
      if (output.tensor) {
        delete output.tensor;
      }
    }
  }"] 
  "111669149698" -> "30064771079"  [ label = "DDG: "] 
  "30064771158" -> "146028888070"  [ label = "DDG: Status::OK()"] 
  "30064771127" -> "30064771126"  [ label = "DDG: node"] 
  "30064771127" -> "30064771126"  [ label = "DDG: inputs"] 
  "30064771127" -> "30064771126"  [ label = "DDG: &amp;output_tensors"] 
  "115964116993" -> "30064771132"  [ label = "DDG: outputs"] 
  "111669149698" -> "30064771132"  [ label = "DDG: "] 
  "30064771133" -> "30064771132"  [ label = "DDG: output_tensors"] 
  "111669149698" -> "30064771158"  [ label = "DDG: "] 
  "111669149698" -> "30064771078"  [ label = "DDG: "] 
  "30064771082" -> "30064771081"  [ label = "DDG: input"] 
  "30064771086" -> "30064771085"  [ label = "DDG: node_map_"] 
  "30064771086" -> "30064771085"  [ label = "DDG: input"] 
  "30064771098" -> "30064771097"  [ label = "DDG: input_node-&gt;attr().at(&quot;value&quot;)"] 
  "30064771113" -> "30064771112"  [ label = "DDG: Tensor"] 
  "30064771113" -> "30064771112"  [ label = "DDG: raw_val.dtype()"] 
  "30064771113" -> "30064771112"  [ label = "DDG: raw_val.tensor_shape()"] 
  "30064771125" -> "30064771124"  [ label = "DDG: value"] 
  "115964116992" -> "30064771127"  [ label = "DDG: node"] 
  "111669149698" -> "30064771127"  [ label = "DDG: "] 
  "30064771123" -> "30064771127"  [ label = "DDG: inputs"] 
  "30064771127" -> "30064771129"  [ label = "DDG: &amp;output_tensors"] 
  "111669149698" -> "30064771129"  [ label = "DDG: "] 
  "30064771130" -> "146028888068"  [ label = "DDG: Status(error::INVALID_ARGUMENT, &quot;Expected at least one output.&quot;)"] 
  "30064771127" -> "30064771133"  [ label = "DDG: &amp;output_tensors"] 
  "30064771129" -> "30064771133"  [ label = "DDG: output_tensors"] 
  "111669149698" -> "30064771133"  [ label = "DDG: "] 
  "111669149698" -> "30064771134"  [ label = "DDG: "] 
  "30064771134" -> "30064771135"  [ label = "DDG: i"] 
  "30064771137" -> "30064771135"  [ label = "DDG: i"] 
  "111669149698" -> "30064771135"  [ label = "DDG: "] 
  "30064771136" -> "30064771135"  [ label = "DDG: output_tensors"] 
  "30064771156" -> "30064771137"  [ label = "DDG: i"] 
  "30064771150" -> "30064771137"  [ label = "DDG: i"] 
  "111669149698" -> "30064771137"  [ label = "DDG: "] 
  "30064771139" -> "30064771138"  [ label = "DDG: node"] 
  "30064771139" -> "30064771138"  [ label = "DDG: &quot;-folded&quot;"] 
  "30064771095" -> "30064771094"  [ label = "DDG: *input_node"] 
  "30064771095" -> "30064771094"  [ label = "DDG: &quot;value&quot;"] 
  "111669149698" -> "30064771123"  [ label = "DDG: "] 
  "30064771117" -> "30064771123"  [ label = "DDG: value"] 
  "30064771079" -> "30064771124"  [ label = "DDG: total_inputs_size"] 
  "111669149698" -> "30064771124"  [ label = "DDG: "] 
  "30064771127" -> "30064771136"  [ label = "DDG: &amp;output_tensors"] 
  "30064771133" -> "30064771136"  [ label = "DDG: output_tensors"] 
  "30064771141" -> "30064771136"  [ label = "DDG: output_tensors"] 
  "30064771147" -> "30064771136"  [ label = "DDG: output_tensors[i]"] 
  "111669149698" -> "30064771136"  [ label = "DDG: "] 
  "30064771086" -> "30064771082"  [ label = "DDG: input"] 
  "111669149698" -> "30064771082"  [ label = "DDG: "] 
  "30064771084" -> "30064771083"  [ label = "DDG: input_tensor"] 
  "111669149698" -> "30064771083"  [ label = "DDG: "] 
  "111669149698" -> "30064771086"  [ label = "DDG: "] 
  "30064771082" -> "30064771086"  [ label = "DDG: input"] 
  "30064771088" -> "30064771087"  [ label = "DDG: *input_node"] 
  "30064771090" -> "146028888064"  [ label = "DDG: Status(error::INVALID_ARGUMENT,
                    strings::StrCat(&quot;Can't fold &quot;, node.name(), &quot;, its &quot;, input,
                                    &quot; isn't constant&quot;))"] 
  "30064771088" -> "30064771095"  [ label = "DDG: *input_node"] 
  "111669149698" -> "30064771095"  [ label = "DDG: "] 
  "30064771099" -> "30064771098"  [ label = "DDG: input_node-&gt;attr()"] 
  "30064771099" -> "30064771098"  [ label = "DDG: &quot;value&quot;"] 
  "30064771102" -> "30064771101"  [ label = "DDG: raw_val"] 
  "111669149698" -> "30064771101"  [ label = "DDG: "] 
  "30064771103" -> "146028888065"  [ label = "DDG: Status(
          error::INVALID_ARGUMENT,
          strings::StrCat(&quot;A tensor in the input node, with TensorId of &quot;,
                          input_tensor.ToString(),
                          &quot; has a dtype of DT_INVALID.&quot;))"] 
  "30064771108" -> "30064771107"  [ label = "DDG: raw_val"] 
  "30064771109" -> "146028888066"  [ label = "DDG: errors::InvalidArgument(
          &quot;Not allowed to construct a tensor with reference dtype, got &quot;,
          DataTypeString(raw_val.dtype()))"] 
  "111669149698" -> "30064771113"  [ label = "DDG: "] 
  "30064771114" -> "30064771113"  [ label = "DDG: raw_val"] 
  "30064771115" -> "30064771113"  [ label = "DDG: raw_val"] 
  "30064771117" -> "30064771116"  [ label = "DDG: value"] 
  "30064771117" -> "30064771116"  [ label = "DDG: raw_val"] 
  "30064771119" -> "146028888067"  [ label = "DDG: errors::InvalidArgument(&quot;Unable to make Tensor from proto for &quot;,
                                     node.name(), &quot; with shape &quot;,
                                     raw_val.tensor_shape().DebugString())"] 
  "30064771123" -> "30064771125"  [ label = "DDG: value"] 
  "111669149698" -> "30064771125"  [ label = "DDG: "] 
  "111669149698" -> "30064771130"  [ label = "DDG: "] 
  "30064771127" -> "30064771139"  [ label = "DDG: node"] 
  "111669149698" -> "30064771139"  [ label = "DDG: "] 
  "30064771141" -> "30064771140"  [ label = "DDG: output_tensors"] 
  "111669149698" -> "30064771140"  [ label = "DDG: "] 
  "30064771143" -> "30064771142"  [ label = "DDG: node_name"] 
  "30064771143" -> "30064771142"  [ label = "DDG: &quot;-&quot;"] 
  "30064771143" -> "30064771142"  [ label = "DDG: i"] 
  "30064771147" -> "30064771146"  [ label = "DDG: node_name"] 
  "30064771147" -> "30064771146"  [ label = "DDG: output_tensors[i]"] 
  "30064771147" -> "30064771146"  [ label = "DDG: &amp;outputs-&gt;at(i)"] 
  "30064771147" -> "30064771146"  [ label = "DDG: total_inputs_size"] 
  "30064771081" -> "30064771084"  [ label = "DDG: input_tensor"] 
  "111669149698" -> "30064771084"  [ label = "DDG: "] 
  "30064771095" -> "30064771088"  [ label = "DDG: *input_node"] 
  "30064771100" -> "30064771099"  [ label = "DDG: input_node"] 
  "111669149698" -> "30064771099"  [ label = "DDG: "] 
  "30064771097" -> "30064771102"  [ label = "DDG: raw_val"] 
  "111669149698" -> "30064771102"  [ label = "DDG: "] 
  "30064771102" -> "30064771108"  [ label = "DDG: raw_val"] 
  "111669149698" -> "30064771108"  [ label = "DDG: "] 
  "30064771108" -> "30064771114"  [ label = "DDG: raw_val"] 
  "111669149698" -> "30064771114"  [ label = "DDG: "] 
  "30064771114" -> "30064771115"  [ label = "DDG: raw_val"] 
  "111669149698" -> "30064771115"  [ label = "DDG: "] 
  "30064771112" -> "30064771117"  [ label = "DDG: value"] 
  "111669149698" -> "30064771117"  [ label = "DDG: "] 
  "30064771115" -> "30064771117"  [ label = "DDG: raw_val"] 
  "30064771117" -> "30064771118"  [ label = "DDG: value"] 
  "111669149698" -> "30064771118"  [ label = "DDG: "] 
  "30064771127" -> "30064771141"  [ label = "DDG: &amp;output_tensors"] 
  "30064771136" -> "30064771141"  [ label = "DDG: output_tensors"] 
  "30064771147" -> "30064771141"  [ label = "DDG: output_tensors[i]"] 
  "111669149698" -> "30064771141"  [ label = "DDG: "] 
  "111669149698" -> "30064771155"  [ label = "DDG: "] 
  "30064771092" -> "30064771090"  [ label = "DDG: &quot;Can't fold &quot;"] 
  "30064771092" -> "30064771090"  [ label = "DDG: input"] 
  "30064771092" -> "30064771090"  [ label = "DDG: node.name()"] 
  "30064771092" -> "30064771090"  [ label = "DDG: &quot; isn't constant&quot;"] 
  "30064771092" -> "30064771090"  [ label = "DDG: &quot;, its &quot;"] 
  "30064771085" -> "30064771100"  [ label = "DDG: input_node"] 
  "30064771095" -> "30064771100"  [ label = "DDG: *input_node"] 
  "111669149698" -> "30064771100"  [ label = "DDG: "] 
  "30064771105" -> "30064771103"  [ label = "DDG: &quot;A tensor in the input node, with TensorId of &quot;"] 
  "30064771105" -> "30064771103"  [ label = "DDG: input_tensor.ToString()"] 
  "30064771105" -> "30064771103"  [ label = "DDG: &quot; has a dtype of DT_INVALID.&quot;"] 
  "111669149698" -> "30064771109"  [ label = "DDG: "] 
  "30064771110" -> "30064771109"  [ label = "DDG: raw_val.dtype()"] 
  "111669149698" -> "30064771119"  [ label = "DDG: "] 
  "30064771120" -> "30064771119"  [ label = "DDG: node"] 
  "30064771121" -> "30064771119"  [ label = "DDG: raw_val.tensor_shape()"] 
  "30064771138" -> "30064771143"  [ label = "DDG: node_name"] 
  "111669149698" -> "30064771143"  [ label = "DDG: "] 
  "30064771135" -> "30064771143"  [ label = "DDG: i"] 
  "30064771138" -> "30064771147"  [ label = "DDG: node_name"] 
  "30064771142" -> "30064771147"  [ label = "DDG: node_name"] 
  "111669149698" -> "30064771147"  [ label = "DDG: "] 
  "30064771141" -> "30064771147"  [ label = "DDG: output_tensors"] 
  "30064771150" -> "30064771147"  [ label = "DDG: outputs"] 
  "30064771150" -> "30064771147"  [ label = "DDG: i"] 
  "30064771124" -> "30064771147"  [ label = "DDG: total_inputs_size"] 
  "30064771152" -> "30064771151"  [ label = "DDG: s"] 
  "111669149698" -> "30064771153"  [ label = "DDG: "] 
  "68719476804" -> "146028888069"  [ label = "DDG: s"] 
  "111669149698" -> "30064771092"  [ label = "DDG: "] 
  "30064771093" -> "30064771092"  [ label = "DDG: node"] 
  "30064771086" -> "30064771092"  [ label = "DDG: input"] 
  "111669149698" -> "30064771105"  [ label = "DDG: "] 
  "30064771106" -> "30064771105"  [ label = "DDG: input_tensor"] 
  "30064771111" -> "30064771110"  [ label = "DDG: raw_val"] 
  "115964116992" -> "30064771120"  [ label = "DDG: node"] 
  "111669149698" -> "30064771120"  [ label = "DDG: "] 
  "30064771122" -> "30064771121"  [ label = "DDG: raw_val"] 
  "30064771146" -> "30064771152"  [ label = "DDG: s"] 
  "111669149698" -> "30064771152"  [ label = "DDG: "] 
  "30064771152" -> "68719476804"  [ label = "DDG: s"] 
  "111669149698" -> "68719476804"  [ label = "DDG: "] 
  "30064771132" -> "30064771156"  [ label = "DDG: outputs"] 
  "30064771150" -> "30064771156"  [ label = "DDG: outputs"] 
  "111669149698" -> "30064771156"  [ label = "DDG: "] 
  "30064771135" -> "30064771156"  [ label = "DDG: i"] 
  "30064771143" -> "30064771156"  [ label = "DDG: i"] 
  "115964116992" -> "30064771093"  [ label = "DDG: node"] 
  "111669149698" -> "30064771093"  [ label = "DDG: "] 
  "30064771084" -> "30064771106"  [ label = "DDG: input_tensor"] 
  "111669149698" -> "30064771106"  [ label = "DDG: "] 
  "30064771108" -> "30064771111"  [ label = "DDG: raw_val"] 
  "111669149698" -> "30064771111"  [ label = "DDG: "] 
  "30064771117" -> "30064771122"  [ label = "DDG: raw_val"] 
  "111669149698" -> "30064771122"  [ label = "DDG: "] 
  "30064771132" -> "30064771150"  [ label = "DDG: outputs"] 
  "30064771156" -> "30064771150"  [ label = "DDG: outputs"] 
  "111669149698" -> "30064771150"  [ label = "DDG: "] 
  "30064771135" -> "30064771150"  [ label = "DDG: i"] 
  "30064771143" -> "30064771150"  [ label = "DDG: i"] 
  "30064771129" -> "146028888068"  [ label = "CDG: "] 
  "30064771129" -> "55834574853"  [ label = "CDG: "] 
  "30064771129" -> "30064771131"  [ label = "CDG: "] 
  "30064771129" -> "30064771132"  [ label = "CDG: "] 
  "30064771129" -> "30064771130"  [ label = "CDG: "] 
  "30064771129" -> "30064771135"  [ label = "CDG: "] 
  "30064771129" -> "30064771136"  [ label = "CDG: "] 
  "30064771129" -> "30064771133"  [ label = "CDG: "] 
  "30064771129" -> "30064771134"  [ label = "CDG: "] 
  "30064771135" -> "30064771144"  [ label = "CDG: "] 
  "30064771135" -> "30064771141"  [ label = "CDG: "] 
  "30064771135" -> "146028888070"  [ label = "CDG: "] 
  "30064771135" -> "30064771145"  [ label = "CDG: "] 
  "30064771135" -> "30064771158"  [ label = "CDG: "] 
  "30064771135" -> "55834574854"  [ label = "CDG: "] 
  "30064771135" -> "30064771139"  [ label = "CDG: "] 
  "30064771135" -> "30064771140"  [ label = "CDG: "] 
  "30064771135" -> "30064771138"  [ label = "CDG: "] 
  "30064771124" -> "30064771127"  [ label = "CDG: "] 
  "30064771124" -> "30064771128"  [ label = "CDG: "] 
  "30064771124" -> "30064771126"  [ label = "CDG: "] 
  "30064771124" -> "30064771129"  [ label = "CDG: "] 
  "30064771124" -> "30064771083"  [ label = "CDG: "] 
  "30064771124" -> "30064771084"  [ label = "CDG: "] 
  "30064771124" -> "30064771081"  [ label = "CDG: "] 
  "30064771124" -> "30064771082"  [ label = "CDG: "] 
  "30064771124" -> "30064771087"  [ label = "CDG: "] 
  "30064771124" -> "30064771088"  [ label = "CDG: "] 
  "30064771124" -> "30064771085"  [ label = "CDG: "] 
  "30064771124" -> "30064771086"  [ label = "CDG: "] 
  "30064771124" -> "30064771089"  [ label = "CDG: "] 
  "30064771087" -> "146028888064"  [ label = "CDG: "] 
  "30064771087" -> "55834574851"  [ label = "CDG: "] 
  "30064771087" -> "30064771091"  [ label = "CDG: "] 
  "30064771087" -> "30064771092"  [ label = "CDG: "] 
  "30064771087" -> "30064771090"  [ label = "CDG: "] 
  "30064771087" -> "30064771095"  [ label = "CDG: "] 
  "30064771087" -> "30064771096"  [ label = "CDG: "] 
  "30064771087" -> "30064771093"  [ label = "CDG: "] 
  "30064771087" -> "30064771094"  [ label = "CDG: "] 
  "30064771087" -> "30064771099"  [ label = "CDG: "] 
  "30064771087" -> "30064771100"  [ label = "CDG: "] 
  "30064771087" -> "30064771097"  [ label = "CDG: "] 
  "30064771087" -> "30064771098"  [ label = "CDG: "] 
  "30064771087" -> "30064771101"  [ label = "CDG: "] 
  "30064771087" -> "30064771102"  [ label = "CDG: "] 
  "30064771101" -> "146028888065"  [ label = "CDG: "] 
  "30064771101" -> "55834574852"  [ label = "CDG: "] 
  "30064771101" -> "30064771103"  [ label = "CDG: "] 
  "30064771101" -> "30064771104"  [ label = "CDG: "] 
  "30064771101" -> "30064771107"  [ label = "CDG: "] 
  "30064771101" -> "30064771108"  [ label = "CDG: "] 
  "30064771101" -> "30064771105"  [ label = "CDG: "] 
  "30064771101" -> "30064771106"  [ label = "CDG: "] 
  "30064771107" -> "146028888066"  [ label = "CDG: "] 
  "30064771107" -> "30064771111"  [ label = "CDG: "] 
  "30064771107" -> "30064771112"  [ label = "CDG: "] 
  "30064771107" -> "30064771109"  [ label = "CDG: "] 
  "30064771107" -> "30064771110"  [ label = "CDG: "] 
  "30064771107" -> "30064771115"  [ label = "CDG: "] 
  "30064771107" -> "30064771116"  [ label = "CDG: "] 
  "30064771107" -> "30064771113"  [ label = "CDG: "] 
  "30064771107" -> "30064771114"  [ label = "CDG: "] 
  "30064771107" -> "30064771117"  [ label = "CDG: "] 
  "30064771116" -> "146028888067"  [ label = "CDG: "] 
  "30064771116" -> "30064771119"  [ label = "CDG: "] 
  "30064771116" -> "30064771120"  [ label = "CDG: "] 
  "30064771116" -> "30064771118"  [ label = "CDG: "] 
  "30064771116" -> "30064771123"  [ label = "CDG: "] 
  "30064771116" -> "30064771124"  [ label = "CDG: "] 
  "30064771116" -> "30064771121"  [ label = "CDG: "] 
  "30064771116" -> "30064771122"  [ label = "CDG: "] 
  "30064771116" -> "30064771125"  [ label = "CDG: "] 
  "30064771140" -> "30064771143"  [ label = "CDG: "] 
  "30064771140" -> "30064771142"  [ label = "CDG: "] 
  "30064771144" -> "30064771147"  [ label = "CDG: "] 
  "30064771144" -> "30064771148"  [ label = "CDG: "] 
  "30064771144" -> "30064771146"  [ label = "CDG: "] 
  "30064771144" -> "30064771151"  [ label = "CDG: "] 
  "30064771144" -> "30064771152"  [ label = "CDG: "] 
  "30064771144" -> "30064771149"  [ label = "CDG: "] 
  "30064771144" -> "30064771150"  [ label = "CDG: "] 
  "30064771144" -> "30064771155"  [ label = "CDG: "] 
  "30064771144" -> "30064771156"  [ label = "CDG: "] 
  "30064771144" -> "30064771157"  [ label = "CDG: "] 
  "30064771144" -> "30064771135"  [ label = "CDG: "] 
  "30064771144" -> "30064771136"  [ label = "CDG: "] 
  "30064771144" -> "30064771137"  [ label = "CDG: "] 
  "30064771151" -> "146028888069"  [ label = "CDG: "] 
  "30064771151" -> "30064771153"  [ label = "CDG: "] 
  "30064771151" -> "30064771154"  [ label = "CDG: "] 
  "30064771151" -> "30064771135"  [ label = "CDG: "] 
  "30064771151" -> "30064771136"  [ label = "CDG: "] 
  "30064771151" -> "30064771137"  [ label = "CDG: "] 
}
"""
)
