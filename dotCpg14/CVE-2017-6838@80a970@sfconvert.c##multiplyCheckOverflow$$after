[33mval[0m [36mres2416[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "multiplyCheckOverflow" {  
"111669149697" [label = <(METHOD,multiplyCheckOverflow)<SUB>1</SUB>> ]
"115964116992" [label = <(PARAM,int a)<SUB>1</SUB>> ]
"115964116993" [label = <(PARAM,int b)<SUB>1</SUB>> ]
"115964116994" [label = <(PARAM,int *result)<SUB>1</SUB>> ]
"25769803777" [label = <(BLOCK,{
#if (defined __GNUC__ &amp;&amp; __GNUC__ &gt;= 5) || ( ...,{
#if (defined __GNUC__ &amp;&amp; __GNUC__ &gt;= 5) || ( ...)<SUB>2</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,IF,if (firstBitSet(a)+firstBitSet(b)&gt;31))<SUB>6</SUB>> ]
"30064771072" [label = <(&lt;operator&gt;.greaterThan,firstBitSet(a)+firstBitSet(b)&gt;31)<SUB>6</SUB>> ]
"30064771073" [label = <(&lt;operator&gt;.addition,firstBitSet(a)+firstBitSet(b))<SUB>6</SUB>> ]
"30064771074" [label = <(firstBitSet,firstBitSet(a))<SUB>6</SUB>> ]
"68719476736" [label = <(IDENTIFIER,a,firstBitSet(a))<SUB>6</SUB>> ]
"30064771075" [label = <(firstBitSet,firstBitSet(b))<SUB>6</SUB>> ]
"68719476737" [label = <(IDENTIFIER,b,firstBitSet(b))<SUB>6</SUB>> ]
"90194313216" [label = <(LITERAL,31,firstBitSet(a)+firstBitSet(b)&gt;31)<SUB>6</SUB>> ]
"25769803778" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>7</SUB>> ]
"146028888064" [label = <(RETURN,return true;,return true;)<SUB>7</SUB>> ]
"68719476738" [label = <(IDENTIFIER,true,return true;)<SUB>7</SUB>> ]
"30064771076" [label = <(&lt;operator&gt;.assignment,*result = a * b)<SUB>8</SUB>> ]
"30064771077" [label = <(&lt;operator&gt;.indirection,*result)<SUB>8</SUB>> ]
"68719476739" [label = <(IDENTIFIER,result,*result = a * b)<SUB>8</SUB>> ]
"30064771078" [label = <(&lt;operator&gt;.multiplication,a * b)<SUB>8</SUB>> ]
"68719476740" [label = <(IDENTIFIER,a,a * b)<SUB>8</SUB>> ]
"68719476741" [label = <(IDENTIFIER,b,a * b)<SUB>8</SUB>> ]
"146028888065" [label = <(RETURN,return false;,return false;)<SUB>9</SUB>> ]
"68719476742" [label = <(IDENTIFIER,false,return false;)<SUB>9</SUB>> ]
"128849018880" [label = <(METHOD_RETURN,int)<SUB>1</SUB>> ]
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "115964116993"  [ label = "AST: "] 
  "111669149697" -> "115964116994"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "128849018880"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "25769803777" -> "30064771076"  [ label = "AST: "] 
  "25769803777" -> "146028888065"  [ label = "AST: "] 
  "47244640256" -> "30064771072"  [ label = "AST: "] 
  "47244640256" -> "25769803778"  [ label = "AST: "] 
  "30064771072" -> "30064771073"  [ label = "AST: "] 
  "30064771072" -> "90194313216"  [ label = "AST: "] 
  "30064771073" -> "30064771074"  [ label = "AST: "] 
  "30064771073" -> "30064771075"  [ label = "AST: "] 
  "30064771074" -> "68719476736"  [ label = "AST: "] 
  "30064771075" -> "68719476737"  [ label = "AST: "] 
  "25769803778" -> "146028888064"  [ label = "AST: "] 
  "146028888064" -> "68719476738"  [ label = "AST: "] 
  "30064771076" -> "30064771077"  [ label = "AST: "] 
  "30064771076" -> "30064771078"  [ label = "AST: "] 
  "30064771077" -> "68719476739"  [ label = "AST: "] 
  "30064771078" -> "68719476740"  [ label = "AST: "] 
  "30064771078" -> "68719476741"  [ label = "AST: "] 
  "146028888065" -> "68719476742"  [ label = "AST: "] 
  "30064771076" -> "146028888065"  [ label = "CFG: "] 
  "146028888065" -> "128849018880"  [ label = "CFG: "] 
  "30064771072" -> "146028888064"  [ label = "CFG: "] 
  "30064771072" -> "30064771077"  [ label = "CFG: "] 
  "30064771077" -> "30064771078"  [ label = "CFG: "] 
  "30064771078" -> "30064771076"  [ label = "CFG: "] 
  "30064771073" -> "30064771072"  [ label = "CFG: "] 
  "146028888064" -> "128849018880"  [ label = "CFG: "] 
  "30064771074" -> "30064771075"  [ label = "CFG: "] 
  "30064771075" -> "30064771073"  [ label = "CFG: "] 
  "111669149697" -> "30064771074"  [ label = "CFG: "] 
  "146028888064" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888065" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "115964116994" -> "128849018880"  [ label = "DDG: result"] 
  "30064771074" -> "128849018880"  [ label = "DDG: a"] 
  "30064771073" -> "128849018880"  [ label = "DDG: firstBitSet(a)"] 
  "30064771075" -> "128849018880"  [ label = "DDG: b"] 
  "30064771073" -> "128849018880"  [ label = "DDG: firstBitSet(b)"] 
  "30064771072" -> "128849018880"  [ label = "DDG: firstBitSet(a)+firstBitSet(b)"] 
  "30064771072" -> "128849018880"  [ label = "DDG: firstBitSet(a)+firstBitSet(b)&gt;31"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "111669149697" -> "115964116993"  [ label = "DDG: "] 
  "111669149697" -> "115964116994"  [ label = "DDG: "] 
  "30064771078" -> "30064771076"  [ label = "DDG: a"] 
  "30064771078" -> "30064771076"  [ label = "DDG: b"] 
  "68719476742" -> "146028888065"  [ label = "DDG: false"] 
  "111669149697" -> "146028888065"  [ label = "DDG: "] 
  "111669149697" -> "68719476742"  [ label = "DDG: "] 
  "30064771074" -> "30064771072"  [ label = "DDG: a"] 
  "30064771075" -> "30064771072"  [ label = "DDG: b"] 
  "111669149697" -> "30064771072"  [ label = "DDG: "] 
  "68719476738" -> "146028888064"  [ label = "DDG: true"] 
  "111669149697" -> "146028888064"  [ label = "DDG: "] 
  "30064771074" -> "30064771078"  [ label = "DDG: a"] 
  "111669149697" -> "30064771078"  [ label = "DDG: "] 
  "30064771075" -> "30064771078"  [ label = "DDG: b"] 
  "30064771074" -> "30064771073"  [ label = "DDG: a"] 
  "30064771075" -> "30064771073"  [ label = "DDG: b"] 
  "111669149697" -> "68719476738"  [ label = "DDG: "] 
  "115964116992" -> "30064771074"  [ label = "DDG: a"] 
  "111669149697" -> "30064771074"  [ label = "DDG: "] 
  "115964116993" -> "30064771075"  [ label = "DDG: b"] 
  "111669149697" -> "30064771075"  [ label = "DDG: "] 
  "30064771072" -> "146028888065"  [ label = "CDG: "] 
  "30064771072" -> "30064771078"  [ label = "CDG: "] 
  "30064771072" -> "146028888064"  [ label = "CDG: "] 
  "30064771072" -> "30064771077"  [ label = "CDG: "] 
  "30064771072" -> "30064771076"  [ label = "CDG: "] 
}
"""
)
