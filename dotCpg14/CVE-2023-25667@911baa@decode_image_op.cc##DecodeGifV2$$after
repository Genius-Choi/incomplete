[33mval[0m [36mres416[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "DecodeGifV2" {  
"111669149698" [label = <(METHOD,DecodeGifV2)<SUB>1</SUB>> ]
"115964116996" [label = <(PARAM,OpKernelContext* context)<SUB>1</SUB>> ]
"115964116997" [label = <(PARAM,StringPiece input)<SUB>1</SUB>> ]
"25769803789" [label = <(BLOCK,{
    // GIF has 3 channels.
    OP_REQUIRES(co...,{
    // GIF has 3 channels.
    OP_REQUIRES(co...)<SUB>1</SUB>> ]
"30064771117" [label = <(OP_REQUIRES,OP_REQUIRES(context, channels_ == 0 || channels...)<SUB>3</SUB>> ]
"68719476780" [label = <(IDENTIFIER,context,OP_REQUIRES(context, channels_ == 0 || channels...)<SUB>3</SUB>> ]
"30064771118" [label = <(&lt;operator&gt;.logicalOr,channels_ == 0 || channels_ == 3)<SUB>3</SUB>> ]
"30064771119" [label = <(&lt;operator&gt;.equals,channels_ == 0)<SUB>3</SUB>> ]
"68719476781" [label = <(IDENTIFIER,channels_,channels_ == 0)<SUB>3</SUB>> ]
"90194313232" [label = <(LITERAL,0,channels_ == 0)<SUB>3</SUB>> ]
"30064771120" [label = <(&lt;operator&gt;.equals,channels_ == 3)<SUB>3</SUB>> ]
"68719476782" [label = <(IDENTIFIER,channels_,channels_ == 3)<SUB>3</SUB>> ]
"90194313233" [label = <(LITERAL,3,channels_ == 3)<SUB>3</SUB>> ]
"30064771121" [label = <(InvalidArgument,errors::InvalidArgument(&quot;channels must be 0 or ...)<SUB>4</SUB>> ]
"90194313234" [label = <(LITERAL,&quot;channels must be 0 or 3 for GIF, got &quot;,errors::InvalidArgument(&quot;channels must be 0 or ...)<SUB>4</SUB>> ]
"68719476783" [label = <(IDENTIFIER,channels_,errors::InvalidArgument(&quot;channels must be 0 or ...)<SUB>5</SUB>> ]
"47244640267" [label = <(CONTROL_STRUCTURE,IF,if (op_type_ == &quot;DecodeBmp&quot;))<SUB>7</SUB>> ]
"30064771122" [label = <(&lt;operator&gt;.equals,op_type_ == &quot;DecodeBmp&quot;)<SUB>7</SUB>> ]
"68719476784" [label = <(IDENTIFIER,op_type_,op_type_ == &quot;DecodeBmp&quot;)<SUB>7</SUB>> ]
"90194313235" [label = <(LITERAL,&quot;DecodeBmp&quot;,op_type_ == &quot;DecodeBmp&quot;)<SUB>7</SUB>> ]
"25769803790" [label = <(BLOCK,{
      // TODO(b/171060723): Only DecodeBmp as...,{
      // TODO(b/171060723): Only DecodeBmp as...)<SUB>7</SUB>> ]
"30064771123" [label = <(OP_REQUIRES,OP_REQUIRES(context, false,
                  e...)<SUB>13</SUB>> ]
"68719476785" [label = <(IDENTIFIER,context,OP_REQUIRES(context, false,
                  e...)<SUB>13</SUB>> ]
"90194313236" [label = <(LITERAL,false,OP_REQUIRES(context, false,
                  e...)<SUB>13</SUB>> ]
"30064771124" [label = <(InvalidArgument,errors::InvalidArgument(
                      ...)<SUB>14</SUB>> ]
"90194313237" [label = <(LITERAL,&quot;Trying to decode GIF format using DecodeBmp op...,errors::InvalidArgument(
                      ...)<SUB>15</SUB>> ]
"47244640268" [label = <(CONTROL_STRUCTURE,ELSE,else)<SUB>17</SUB>> ]
"25769803791" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>17</SUB>> ]
"47244640269" [label = <(CONTROL_STRUCTURE,IF,if (op_type_ == &quot;DecodeAndCropJpeg&quot;))<SUB>17</SUB>> ]
"30064771125" [label = <(&lt;operator&gt;.equals,op_type_ == &quot;DecodeAndCropJpeg&quot;)<SUB>17</SUB>> ]
"68719476786" [label = <(IDENTIFIER,op_type_,op_type_ == &quot;DecodeAndCropJpeg&quot;)<SUB>17</SUB>> ]
"90194313238" [label = <(LITERAL,&quot;DecodeAndCropJpeg&quot;,op_type_ == &quot;DecodeAndCropJpeg&quot;)<SUB>17</SUB>> ]
"25769803792" [label = <(BLOCK,{
      OP_REQUIRES(context, false,
           ...,{
      OP_REQUIRES(context, false,
           ...)<SUB>17</SUB>> ]
"30064771126" [label = <(OP_REQUIRES,OP_REQUIRES(context, false,
                  e...)<SUB>18</SUB>> ]
"68719476787" [label = <(IDENTIFIER,context,OP_REQUIRES(context, false,
                  e...)<SUB>18</SUB>> ]
"90194313239" [label = <(LITERAL,false,OP_REQUIRES(context, false,
                  e...)<SUB>18</SUB>> ]
"30064771127" [label = <(InvalidArgument,errors::InvalidArgument(
                      ...)<SUB>19</SUB>> ]
"90194313240" [label = <(LITERAL,&quot;DecodeAndCropJpeg operation can run on JPEG on...,errors::InvalidArgument(
                      ...)<SUB>20</SUB>> ]
"94489280514" [label = <(LOCAL,Tensor* output: Tensor*)<SUB>27</SUB>> ]
"30064771128" [label = <(&lt;operator&gt;.assignment,* output = nullptr)<SUB>27</SUB>> ]
"68719476788" [label = <(IDENTIFIER,output,* output = nullptr)<SUB>27</SUB>> ]
"90194313241" [label = <(LITERAL,nullptr,* output = nullptr)<SUB>27</SUB>> ]
"94489280513" [label = <(LOCAL,ptrdiff_t buffer_size: ptrdiff_t)<SUB>28</SUB>> ]
"30064771129" [label = <(&lt;operator&gt;.assignment,buffer_size = 0)<SUB>28</SUB>> ]
"68719476789" [label = <(IDENTIFIER,buffer_size,buffer_size = 0)<SUB>28</SUB>> ]
"90194313242" [label = <(LITERAL,0,buffer_size = 0)<SUB>28</SUB>> ]
"94489280515" [label = <(LOCAL,string error_string: string)<SUB>29</SUB>> ]
"94489280516" [label = <(LOCAL,uint8* buffer: uint8*)<SUB>30</SUB>> ]
"30064771130" [label = <(&lt;operator&gt;.assignment,* buffer = gif::Decode(
        input.data(), i...)<SUB>30</SUB>> ]
"68719476790" [label = <(IDENTIFIER,buffer,* buffer = gif::Decode(
        input.data(), i...)<SUB>30</SUB>> ]
"30064771131" [label = <(Decode,gif::Decode(
        input.data(), input.size()...)<SUB>30</SUB>> ]
"30064771132" [label = <(data,input.data())<SUB>31</SUB>> ]
"68719476791" [label = <(IDENTIFIER,input,input.data())<SUB>31</SUB>> ]
"30064771133" [label = <(size,input.size())<SUB>31</SUB>> ]
"68719476792" [label = <(IDENTIFIER,input,input.size())<SUB>31</SUB>> ]
"124554051584" [label = <(METHOD_REF,[&amp;](int num_frames, int width, int height, int ...,gif::Decode(
        input.data(), input.size()...)<SUB>32</SUB>> ]
"30064771134" [label = <(&lt;operator&gt;.addressOf,&amp;error_string)<SUB>71</SUB>> ]
"68719476793" [label = <(IDENTIFIER,error_string,gif::Decode(
        input.data(), input.size()...)<SUB>71</SUB>> ]
"68719476794" [label = <(IDENTIFIER,expand_animations_,gif::Decode(
        input.data(), input.size()...)<SUB>71</SUB>> ]
"30064771135" [label = <(OP_REQUIRES,OP_REQUIRES(context, buffer,
                er...)<SUB>73</SUB>> ]
"68719476795" [label = <(IDENTIFIER,context,OP_REQUIRES(context, buffer,
                er...)<SUB>73</SUB>> ]
"68719476796" [label = <(IDENTIFIER,buffer,OP_REQUIRES(context, buffer,
                er...)<SUB>73</SUB>> ]
"30064771136" [label = <(InvalidArgument,errors::InvalidArgument(&quot;Invalid GIF data (size...)<SUB>74</SUB>> ]
"90194313243" [label = <(LITERAL,&quot;Invalid GIF data (size &quot;,errors::InvalidArgument(&quot;Invalid GIF data (size...)<SUB>74</SUB>> ]
"30064771137" [label = <(size,input.size())<SUB>74</SUB>> ]
"68719476797" [label = <(IDENTIFIER,input,input.size())<SUB>74</SUB>> ]
"90194313244" [label = <(LITERAL,&quot;), &quot;,errors::InvalidArgument(&quot;Invalid GIF data (size...)<SUB>75</SUB>> ]
"68719476798" [label = <(IDENTIFIER,error_string,errors::InvalidArgument(&quot;Invalid GIF data (size...)<SUB>75</SUB>> ]
"47244640270" [label = <(CONTROL_STRUCTURE,IF,if (data_type_ == DataType::DT_UINT8))<SUB>79</SUB>> ]
"30064771138" [label = <(&lt;operator&gt;.equals,data_type_ == DataType::DT_UINT8)<SUB>79</SUB>> ]
"68719476799" [label = <(IDENTIFIER,data_type_,data_type_ == DataType::DT_UINT8)<SUB>79</SUB>> ]
"30064771139" [label = <(&lt;operator&gt;.fieldAccess,DataType::DT_UINT8)<SUB>79</SUB>> ]
"68719476800" [label = <(IDENTIFIER,DataType,data_type_ == DataType::DT_UINT8)<SUB>79</SUB>> ]
"55834574849" [label = <(FIELD_IDENTIFIER,DT_UINT8,DT_UINT8)<SUB>79</SUB>> ]
"25769803793" [label = <(BLOCK,{
      return;
    },{
      return;
    })<SUB>79</SUB>> ]
"146028888067" [label = <(RETURN,return;,return;)<SUB>80</SUB>> ]
"94489280517" [label = <(LOCAL,std.unique_ptr&lt;uint8[]&gt; buffer_unique_ptr: std.unique_ptr&lt;uint8[]&gt;)<SUB>83</SUB>> ]
"30064771140" [label = <(buffer_unique_ptr,buffer_unique_ptr(buffer))<SUB>83</SUB>> ]
"68719476801" [label = <(IDENTIFIER,buffer,buffer_unique_ptr(buffer))<SUB>83</SUB>> ]
"94489280518" [label = <(LOCAL,TTypes&lt;uint8&gt;.UnalignedConstFlat buffer_view: TTypes&lt;uint8&gt;.UnalignedConstFlat)<SUB>87</SUB>> ]
"30064771141" [label = <(buffer_view,buffer_view(buffer, buffer_size))<SUB>87</SUB>> ]
"68719476802" [label = <(IDENTIFIER,buffer,buffer_view(buffer, buffer_size))<SUB>87</SUB>> ]
"68719476803" [label = <(IDENTIFIER,buffer_size,buffer_view(buffer, buffer_size))<SUB>87</SUB>> ]
"94489280519" [label = <(LOCAL,const auto&amp; device: auto&amp;)<SUB>88</SUB>> ]
"30064771142" [label = <(&lt;operator&gt;.assignment,&amp; device = context-&gt;eigen_device&lt;Eigen::ThreadP...)<SUB>88</SUB>> ]
"68719476804" [label = <(IDENTIFIER,device,&amp; device = context-&gt;eigen_device&lt;Eigen::ThreadP...)<SUB>88</SUB>> ]
"30064771143" [label = <(eigen_device&lt;Eigen::ThreadPoolDevice&gt;,context-&gt;eigen_device&lt;Eigen::ThreadPoolDevice&gt;())<SUB>88</SUB>> ]
"68719476805" [label = <(IDENTIFIER,context,context-&gt;eigen_device&lt;Eigen::ThreadPoolDevice&gt;())<SUB>88</SUB>> ]
"47244640271" [label = <(CONTROL_STRUCTURE,IF,if (data_type_ == DataType::DT_UINT16))<SUB>89</SUB>> ]
"30064771144" [label = <(&lt;operator&gt;.equals,data_type_ == DataType::DT_UINT16)<SUB>89</SUB>> ]
"68719476806" [label = <(IDENTIFIER,data_type_,data_type_ == DataType::DT_UINT16)<SUB>89</SUB>> ]
"30064771145" [label = <(&lt;operator&gt;.fieldAccess,DataType::DT_UINT16)<SUB>89</SUB>> ]
"68719476807" [label = <(IDENTIFIER,DataType,data_type_ == DataType::DT_UINT16)<SUB>89</SUB>> ]
"55834574850" [label = <(FIELD_IDENTIFIER,DT_UINT16,DT_UINT16)<SUB>89</SUB>> ]
"25769803794" [label = <(BLOCK,{
      uint16 scale = floor((std::numeric_limi...,{
      uint16 scale = floor((std::numeric_limi...)<SUB>89</SUB>> ]
"94489280520" [label = <(LOCAL,uint16 scale: uint16)<SUB>90</SUB>> ]
"30064771146" [label = <(&lt;operator&gt;.assignment,scale = floor((std::numeric_limits&lt;uint16&gt;::max...)<SUB>90</SUB>> ]
"68719476808" [label = <(IDENTIFIER,scale,scale = floor((std::numeric_limits&lt;uint16&gt;::max...)<SUB>90</SUB>> ]
"30064771147" [label = <(floor,floor((std::numeric_limits&lt;uint16&gt;::max() + 1) ...)<SUB>90</SUB>> ]
"30064771148" [label = <(&lt;operator&gt;.division,(std::numeric_limits&lt;uint16&gt;::max() + 1) /
    ...)<SUB>90</SUB>> ]
"30064771149" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;uint16&gt;::max() + 1)<SUB>90</SUB>> ]
"30064771150" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;uint16)<SUB>90</SUB>> ]
"30064771151" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>90</SUB>> ]
"68719476809" [label = <(IDENTIFIER,std,std::numeric_limits&lt;uint16)<SUB>90</SUB>> ]
"55834574851" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>90</SUB>> ]
"68719476810" [label = <(IDENTIFIER,uint16,std::numeric_limits&lt;uint16)<SUB>90</SUB>> ]
"30064771152" [label = <(&lt;operator&gt;.addition,::max() + 1)<SUB>90</SUB>> ]
"30064771153" [label = <(max,::max())<SUB>90</SUB>> ]
"90194313245" [label = <(LITERAL,1,::max() + 1)<SUB>90</SUB>> ]
"30064771154" [label = <(&lt;operator&gt;.greaterThan,std::numeric_limits&lt;uint8&gt;::max() + 1)<SUB>91</SUB>> ]
"30064771155" [label = <(&lt;operator&gt;.lessThan,std::numeric_limits&lt;uint8)<SUB>91</SUB>> ]
"30064771156" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>91</SUB>> ]
"68719476811" [label = <(IDENTIFIER,std,std::numeric_limits&lt;uint8)<SUB>91</SUB>> ]
"55834574852" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>91</SUB>> ]
"68719476812" [label = <(IDENTIFIER,uint8,std::numeric_limits&lt;uint8)<SUB>91</SUB>> ]
"30064771157" [label = <(&lt;operator&gt;.addition,::max() + 1)<SUB>91</SUB>> ]
"30064771158" [label = <(max,::max())<SUB>91</SUB>> ]
"90194313246" [label = <(LITERAL,1,::max() + 1)<SUB>91</SUB>> ]
"30064771159" [label = <(&lt;operator&gt;.assignment,output-&gt;flat&lt;uint16&gt;().device(device) =
       ...)<SUB>93</SUB>> ]
"30064771160" [label = <(device,output-&gt;flat&lt;uint16&gt;().device(device))<SUB>93</SUB>> ]
"30064771161" [label = <(flat&lt;uint16&gt;,output-&gt;flat&lt;uint16&gt;())<SUB>93</SUB>> ]
"68719476813" [label = <(IDENTIFIER,output,output-&gt;flat&lt;uint16&gt;())<SUB>93</SUB>> ]
"68719476814" [label = <(IDENTIFIER,device,output-&gt;flat&lt;uint16&gt;().device(device))<SUB>93</SUB>> ]
"30064771162" [label = <(&lt;operator&gt;.multiplication,buffer_view.cast&lt;uint16&gt;() * scale)<SUB>94</SUB>> ]
"30064771163" [label = <(cast&lt;uint16&gt;,buffer_view.cast&lt;uint16&gt;())<SUB>94</SUB>> ]
"68719476815" [label = <(IDENTIFIER,buffer_view,buffer_view.cast&lt;uint16&gt;())<SUB>94</SUB>> ]
"68719476816" [label = <(IDENTIFIER,scale,buffer_view.cast&lt;uint16&gt;() * scale)<SUB>94</SUB>> ]
"47244640272" [label = <(CONTROL_STRUCTURE,ELSE,else)<SUB>95</SUB>> ]
"25769803795" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>95</SUB>> ]
"47244640273" [label = <(CONTROL_STRUCTURE,IF,if (data_type_ == DataType::DT_FLOAT))<SUB>95</SUB>> ]
"30064771164" [label = <(&lt;operator&gt;.equals,data_type_ == DataType::DT_FLOAT)<SUB>95</SUB>> ]
"68719476817" [label = <(IDENTIFIER,data_type_,data_type_ == DataType::DT_FLOAT)<SUB>95</SUB>> ]
"30064771165" [label = <(&lt;operator&gt;.fieldAccess,DataType::DT_FLOAT)<SUB>95</SUB>> ]
"68719476818" [label = <(IDENTIFIER,DataType,data_type_ == DataType::DT_FLOAT)<SUB>95</SUB>> ]
"55834574853" [label = <(FIELD_IDENTIFIER,DT_FLOAT,DT_FLOAT)<SUB>95</SUB>> ]
"25769803796" [label = <(BLOCK,{
      float scale = 1. / std::numeric_limits&lt;...,{
      float scale = 1. / std::numeric_limits&lt;...)<SUB>95</SUB>> ]
"94489280521" [label = <(LOCAL,float scale: float)<SUB>96</SUB>> ]
"30064771166" [label = <(&lt;operator&gt;.assignment,scale = 1. / std::numeric_limits&lt;uint8&gt;::max())<SUB>96</SUB>> ]
"68719476819" [label = <(IDENTIFIER,scale,scale = 1. / std::numeric_limits&lt;uint8&gt;::max())<SUB>96</SUB>> ]
"30064771167" [label = <(&lt;operator&gt;.greaterThan,1. / std::numeric_limits&lt;uint8&gt;::max())<SUB>96</SUB>> ]
"30064771168" [label = <(&lt;operator&gt;.lessThan,1. / std::numeric_limits&lt;uint8)<SUB>96</SUB>> ]
"30064771169" [label = <(&lt;operator&gt;.division,1. / std::numeric_limits)<SUB>96</SUB>> ]
"90194313247" [label = <(LITERAL,1.,1. / std::numeric_limits)<SUB>96</SUB>> ]
"30064771170" [label = <(&lt;operator&gt;.fieldAccess,std::numeric_limits)<SUB>96</SUB>> ]
"68719476820" [label = <(IDENTIFIER,std,1. / std::numeric_limits)<SUB>96</SUB>> ]
"55834574854" [label = <(FIELD_IDENTIFIER,numeric_limits,numeric_limits)<SUB>96</SUB>> ]
"68719476821" [label = <(IDENTIFIER,uint8,1. / std::numeric_limits&lt;uint8)<SUB>96</SUB>> ]
"30064771171" [label = <(max,::max())<SUB>96</SUB>> ]
"30064771172" [label = <(&lt;operator&gt;.assignment,output-&gt;flat&lt;float&gt;().device(device) = buffer_v...)<SUB>98</SUB>> ]
"30064771173" [label = <(device,output-&gt;flat&lt;float&gt;().device(device))<SUB>98</SUB>> ]
"30064771174" [label = <(flat&lt;float&gt;,output-&gt;flat&lt;float&gt;())<SUB>98</SUB>> ]
"68719476822" [label = <(IDENTIFIER,output,output-&gt;flat&lt;float&gt;())<SUB>98</SUB>> ]
"68719476823" [label = <(IDENTIFIER,device,output-&gt;flat&lt;float&gt;().device(device))<SUB>98</SUB>> ]
"30064771175" [label = <(&lt;operator&gt;.multiplication,buffer_view.cast&lt;float&gt;() * scale)<SUB>98</SUB>> ]
"30064771176" [label = <(cast&lt;float&gt;,buffer_view.cast&lt;float&gt;())<SUB>98</SUB>> ]
"68719476824" [label = <(IDENTIFIER,buffer_view,buffer_view.cast&lt;float&gt;())<SUB>98</SUB>> ]
"68719476825" [label = <(IDENTIFIER,scale,buffer_view.cast&lt;float&gt;() * scale)<SUB>98</SUB>> ]
"128849018881" [label = <(METHOD_RETURN,void)<SUB>1</SUB>> ]
  "111669149698" -> "115964116996"  [ label = "AST: "] 
  "111669149698" -> "115964116997"  [ label = "AST: "] 
  "111669149698" -> "25769803789"  [ label = "AST: "] 
  "111669149698" -> "128849018881"  [ label = "AST: "] 
  "25769803789" -> "30064771117"  [ label = "AST: "] 
  "25769803789" -> "47244640267"  [ label = "AST: "] 
  "25769803789" -> "94489280514"  [ label = "AST: "] 
  "25769803789" -> "30064771128"  [ label = "AST: "] 
  "25769803789" -> "94489280513"  [ label = "AST: "] 
  "25769803789" -> "30064771129"  [ label = "AST: "] 
  "25769803789" -> "94489280515"  [ label = "AST: "] 
  "25769803789" -> "94489280516"  [ label = "AST: "] 
  "25769803789" -> "30064771130"  [ label = "AST: "] 
  "25769803789" -> "30064771135"  [ label = "AST: "] 
  "25769803789" -> "47244640270"  [ label = "AST: "] 
  "25769803789" -> "94489280517"  [ label = "AST: "] 
  "25769803789" -> "30064771140"  [ label = "AST: "] 
  "25769803789" -> "94489280518"  [ label = "AST: "] 
  "25769803789" -> "30064771141"  [ label = "AST: "] 
  "25769803789" -> "94489280519"  [ label = "AST: "] 
  "25769803789" -> "30064771142"  [ label = "AST: "] 
  "25769803789" -> "47244640271"  [ label = "AST: "] 
  "30064771117" -> "68719476780"  [ label = "AST: "] 
  "30064771117" -> "30064771118"  [ label = "AST: "] 
  "30064771117" -> "30064771121"  [ label = "AST: "] 
  "30064771118" -> "30064771119"  [ label = "AST: "] 
  "30064771118" -> "30064771120"  [ label = "AST: "] 
  "30064771119" -> "68719476781"  [ label = "AST: "] 
  "30064771119" -> "90194313232"  [ label = "AST: "] 
  "30064771120" -> "68719476782"  [ label = "AST: "] 
  "30064771120" -> "90194313233"  [ label = "AST: "] 
  "30064771121" -> "90194313234"  [ label = "AST: "] 
  "30064771121" -> "68719476783"  [ label = "AST: "] 
  "47244640267" -> "30064771122"  [ label = "AST: "] 
  "47244640267" -> "25769803790"  [ label = "AST: "] 
  "47244640267" -> "47244640268"  [ label = "AST: "] 
  "30064771122" -> "68719476784"  [ label = "AST: "] 
  "30064771122" -> "90194313235"  [ label = "AST: "] 
  "25769803790" -> "30064771123"  [ label = "AST: "] 
  "30064771123" -> "68719476785"  [ label = "AST: "] 
  "30064771123" -> "90194313236"  [ label = "AST: "] 
  "30064771123" -> "30064771124"  [ label = "AST: "] 
  "30064771124" -> "90194313237"  [ label = "AST: "] 
  "47244640268" -> "25769803791"  [ label = "AST: "] 
  "25769803791" -> "47244640269"  [ label = "AST: "] 
  "47244640269" -> "30064771125"  [ label = "AST: "] 
  "47244640269" -> "25769803792"  [ label = "AST: "] 
  "30064771125" -> "68719476786"  [ label = "AST: "] 
  "30064771125" -> "90194313238"  [ label = "AST: "] 
  "25769803792" -> "30064771126"  [ label = "AST: "] 
  "30064771126" -> "68719476787"  [ label = "AST: "] 
  "30064771126" -> "90194313239"  [ label = "AST: "] 
  "30064771126" -> "30064771127"  [ label = "AST: "] 
  "30064771127" -> "90194313240"  [ label = "AST: "] 
  "30064771128" -> "68719476788"  [ label = "AST: "] 
  "30064771128" -> "90194313241"  [ label = "AST: "] 
  "30064771129" -> "68719476789"  [ label = "AST: "] 
  "30064771129" -> "90194313242"  [ label = "AST: "] 
  "30064771130" -> "68719476790"  [ label = "AST: "] 
  "30064771130" -> "30064771131"  [ label = "AST: "] 
  "30064771131" -> "30064771132"  [ label = "AST: "] 
  "30064771131" -> "30064771133"  [ label = "AST: "] 
  "30064771131" -> "124554051584"  [ label = "AST: "] 
  "30064771131" -> "30064771134"  [ label = "AST: "] 
  "30064771131" -> "68719476794"  [ label = "AST: "] 
  "30064771132" -> "68719476791"  [ label = "AST: "] 
  "30064771133" -> "68719476792"  [ label = "AST: "] 
  "30064771134" -> "68719476793"  [ label = "AST: "] 
  "30064771135" -> "68719476795"  [ label = "AST: "] 
  "30064771135" -> "68719476796"  [ label = "AST: "] 
  "30064771135" -> "30064771136"  [ label = "AST: "] 
  "30064771136" -> "90194313243"  [ label = "AST: "] 
  "30064771136" -> "30064771137"  [ label = "AST: "] 
  "30064771136" -> "90194313244"  [ label = "AST: "] 
  "30064771136" -> "68719476798"  [ label = "AST: "] 
  "30064771137" -> "68719476797"  [ label = "AST: "] 
  "47244640270" -> "30064771138"  [ label = "AST: "] 
  "47244640270" -> "25769803793"  [ label = "AST: "] 
  "30064771138" -> "68719476799"  [ label = "AST: "] 
  "30064771138" -> "30064771139"  [ label = "AST: "] 
  "30064771139" -> "68719476800"  [ label = "AST: "] 
  "30064771139" -> "55834574849"  [ label = "AST: "] 
  "25769803793" -> "146028888067"  [ label = "AST: "] 
  "30064771140" -> "68719476801"  [ label = "AST: "] 
  "30064771141" -> "68719476802"  [ label = "AST: "] 
  "30064771141" -> "68719476803"  [ label = "AST: "] 
  "30064771142" -> "68719476804"  [ label = "AST: "] 
  "30064771142" -> "30064771143"  [ label = "AST: "] 
  "30064771143" -> "68719476805"  [ label = "AST: "] 
  "47244640271" -> "30064771144"  [ label = "AST: "] 
  "47244640271" -> "25769803794"  [ label = "AST: "] 
  "47244640271" -> "47244640272"  [ label = "AST: "] 
  "30064771144" -> "68719476806"  [ label = "AST: "] 
  "30064771144" -> "30064771145"  [ label = "AST: "] 
  "30064771145" -> "68719476807"  [ label = "AST: "] 
  "30064771145" -> "55834574850"  [ label = "AST: "] 
  "25769803794" -> "94489280520"  [ label = "AST: "] 
  "25769803794" -> "30064771146"  [ label = "AST: "] 
  "25769803794" -> "30064771159"  [ label = "AST: "] 
  "30064771146" -> "68719476808"  [ label = "AST: "] 
  "30064771146" -> "30064771147"  [ label = "AST: "] 
  "30064771147" -> "30064771148"  [ label = "AST: "] 
  "30064771148" -> "30064771149"  [ label = "AST: "] 
  "30064771148" -> "30064771154"  [ label = "AST: "] 
  "30064771149" -> "30064771150"  [ label = "AST: "] 
  "30064771149" -> "30064771152"  [ label = "AST: "] 
  "30064771150" -> "30064771151"  [ label = "AST: "] 
  "30064771150" -> "68719476810"  [ label = "AST: "] 
  "30064771151" -> "68719476809"  [ label = "AST: "] 
  "30064771151" -> "55834574851"  [ label = "AST: "] 
  "30064771152" -> "30064771153"  [ label = "AST: "] 
  "30064771152" -> "90194313245"  [ label = "AST: "] 
  "30064771154" -> "30064771155"  [ label = "AST: "] 
  "30064771154" -> "30064771157"  [ label = "AST: "] 
  "30064771155" -> "30064771156"  [ label = "AST: "] 
  "30064771155" -> "68719476812"  [ label = "AST: "] 
  "30064771156" -> "68719476811"  [ label = "AST: "] 
  "30064771156" -> "55834574852"  [ label = "AST: "] 
  "30064771157" -> "30064771158"  [ label = "AST: "] 
  "30064771157" -> "90194313246"  [ label = "AST: "] 
  "30064771159" -> "30064771160"  [ label = "AST: "] 
  "30064771159" -> "30064771162"  [ label = "AST: "] 
  "30064771160" -> "30064771161"  [ label = "AST: "] 
  "30064771160" -> "68719476814"  [ label = "AST: "] 
  "30064771161" -> "68719476813"  [ label = "AST: "] 
  "30064771162" -> "30064771163"  [ label = "AST: "] 
  "30064771162" -> "68719476816"  [ label = "AST: "] 
  "30064771163" -> "68719476815"  [ label = "AST: "] 
  "47244640272" -> "25769803795"  [ label = "AST: "] 
  "25769803795" -> "47244640273"  [ label = "AST: "] 
  "47244640273" -> "30064771164"  [ label = "AST: "] 
  "47244640273" -> "25769803796"  [ label = "AST: "] 
  "30064771164" -> "68719476817"  [ label = "AST: "] 
  "30064771164" -> "30064771165"  [ label = "AST: "] 
  "30064771165" -> "68719476818"  [ label = "AST: "] 
  "30064771165" -> "55834574853"  [ label = "AST: "] 
  "25769803796" -> "94489280521"  [ label = "AST: "] 
  "25769803796" -> "30064771166"  [ label = "AST: "] 
  "25769803796" -> "30064771172"  [ label = "AST: "] 
  "30064771166" -> "68719476819"  [ label = "AST: "] 
  "30064771166" -> "30064771167"  [ label = "AST: "] 
  "30064771167" -> "30064771168"  [ label = "AST: "] 
  "30064771167" -> "30064771171"  [ label = "AST: "] 
  "30064771168" -> "30064771169"  [ label = "AST: "] 
  "30064771168" -> "68719476821"  [ label = "AST: "] 
  "30064771169" -> "90194313247"  [ label = "AST: "] 
  "30064771169" -> "30064771170"  [ label = "AST: "] 
  "30064771170" -> "68719476820"  [ label = "AST: "] 
  "30064771170" -> "55834574854"  [ label = "AST: "] 
  "30064771172" -> "30064771173"  [ label = "AST: "] 
  "30064771172" -> "30064771175"  [ label = "AST: "] 
  "30064771173" -> "30064771174"  [ label = "AST: "] 
  "30064771173" -> "68719476823"  [ label = "AST: "] 
  "30064771174" -> "68719476822"  [ label = "AST: "] 
  "30064771175" -> "30064771176"  [ label = "AST: "] 
  "30064771175" -> "68719476825"  [ label = "AST: "] 
  "30064771176" -> "68719476824"  [ label = "AST: "] 
  "30064771117" -> "30064771122"  [ label = "CFG: "] 
  "30064771128" -> "30064771129"  [ label = "CFG: "] 
  "30064771129" -> "30064771132"  [ label = "CFG: "] 
  "30064771130" -> "30064771137"  [ label = "CFG: "] 
  "30064771135" -> "55834574849"  [ label = "CFG: "] 
  "30064771140" -> "30064771141"  [ label = "CFG: "] 
  "30064771141" -> "30064771143"  [ label = "CFG: "] 
  "30064771142" -> "55834574850"  [ label = "CFG: "] 
  "30064771118" -> "30064771121"  [ label = "CFG: "] 
  "30064771121" -> "30064771117"  [ label = "CFG: "] 
  "30064771122" -> "30064771124"  [ label = "CFG: "] 
  "30064771122" -> "30064771125"  [ label = "CFG: "] 
  "30064771131" -> "30064771130"  [ label = "CFG: "] 
  "30064771136" -> "30064771135"  [ label = "CFG: "] 
  "30064771138" -> "146028888067"  [ label = "CFG: "] 
  "30064771138" -> "30064771140"  [ label = "CFG: "] 
  "30064771143" -> "30064771142"  [ label = "CFG: "] 
  "30064771144" -> "55834574851"  [ label = "CFG: "] 
  "30064771144" -> "55834574853"  [ label = "CFG: "] 
  "30064771119" -> "30064771118"  [ label = "CFG: "] 
  "30064771119" -> "30064771120"  [ label = "CFG: "] 
  "30064771120" -> "30064771118"  [ label = "CFG: "] 
  "30064771123" -> "30064771128"  [ label = "CFG: "] 
  "30064771132" -> "30064771133"  [ label = "CFG: "] 
  "30064771133" -> "124554051584"  [ label = "CFG: "] 
  "124554051584" -> "30064771134"  [ label = "CFG: "] 
  "30064771134" -> "30064771131"  [ label = "CFG: "] 
  "30064771137" -> "30064771136"  [ label = "CFG: "] 
  "30064771139" -> "30064771138"  [ label = "CFG: "] 
  "146028888067" -> "128849018881"  [ label = "CFG: "] 
  "30064771145" -> "30064771144"  [ label = "CFG: "] 
  "30064771146" -> "30064771161"  [ label = "CFG: "] 
  "30064771159" -> "128849018881"  [ label = "CFG: "] 
  "30064771124" -> "30064771123"  [ label = "CFG: "] 
  "55834574849" -> "30064771139"  [ label = "CFG: "] 
  "55834574850" -> "30064771145"  [ label = "CFG: "] 
  "30064771147" -> "30064771146"  [ label = "CFG: "] 
  "30064771160" -> "30064771163"  [ label = "CFG: "] 
  "30064771162" -> "30064771159"  [ label = "CFG: "] 
  "30064771125" -> "30064771127"  [ label = "CFG: "] 
  "30064771125" -> "30064771128"  [ label = "CFG: "] 
  "30064771148" -> "30064771147"  [ label = "CFG: "] 
  "30064771161" -> "30064771160"  [ label = "CFG: "] 
  "30064771163" -> "30064771162"  [ label = "CFG: "] 
  "30064771164" -> "128849018881"  [ label = "CFG: "] 
  "30064771164" -> "55834574854"  [ label = "CFG: "] 
  "30064771126" -> "30064771128"  [ label = "CFG: "] 
  "30064771149" -> "55834574852"  [ label = "CFG: "] 
  "30064771154" -> "30064771148"  [ label = "CFG: "] 
  "30064771165" -> "30064771164"  [ label = "CFG: "] 
  "30064771166" -> "30064771174"  [ label = "CFG: "] 
  "30064771172" -> "128849018881"  [ label = "CFG: "] 
  "30064771127" -> "30064771126"  [ label = "CFG: "] 
  "30064771150" -> "30064771153"  [ label = "CFG: "] 
  "30064771152" -> "30064771149"  [ label = "CFG: "] 
  "30064771155" -> "30064771158"  [ label = "CFG: "] 
  "30064771157" -> "30064771154"  [ label = "CFG: "] 
  "55834574853" -> "30064771165"  [ label = "CFG: "] 
  "30064771167" -> "30064771166"  [ label = "CFG: "] 
  "30064771173" -> "30064771176"  [ label = "CFG: "] 
  "30064771175" -> "30064771172"  [ label = "CFG: "] 
  "30064771151" -> "30064771150"  [ label = "CFG: "] 
  "30064771153" -> "30064771152"  [ label = "CFG: "] 
  "30064771156" -> "30064771155"  [ label = "CFG: "] 
  "30064771158" -> "30064771157"  [ label = "CFG: "] 
  "30064771168" -> "30064771171"  [ label = "CFG: "] 
  "30064771171" -> "30064771167"  [ label = "CFG: "] 
  "30064771174" -> "30064771173"  [ label = "CFG: "] 
  "30064771176" -> "30064771175"  [ label = "CFG: "] 
  "55834574851" -> "30064771151"  [ label = "CFG: "] 
  "55834574852" -> "30064771156"  [ label = "CFG: "] 
  "30064771169" -> "30064771168"  [ label = "CFG: "] 
  "30064771170" -> "30064771169"  [ label = "CFG: "] 
  "55834574854" -> "30064771170"  [ label = "CFG: "] 
  "111669149698" -> "30064771119"  [ label = "CFG: "] 
  "146028888067" -> "128849018881"  [ label = "DDG: &lt;RET&gt;"] 
  "30064771118" -> "128849018881"  [ label = "DDG: channels_ == 0"] 
  "30064771118" -> "128849018881"  [ label = "DDG: channels_ == 3"] 
  "30064771117" -> "128849018881"  [ label = "DDG: channels_ == 0 || channels_ == 3"] 
  "30064771121" -> "128849018881"  [ label = "DDG: channels_"] 
  "30064771117" -> "128849018881"  [ label = "DDG: errors::InvalidArgument(&quot;channels must be 0 or 3 for GIF, got &quot;,
                                        channels_)"] 
  "30064771117" -> "128849018881"  [ label = "DDG: OP_REQUIRES(context, channels_ == 0 || channels_ == 3,
                errors::InvalidArgument(&quot;channels must be 0 or 3 for GIF, got &quot;,
                                        channels_))"] 
  "30064771122" -> "128849018881"  [ label = "DDG: op_type_"] 
  "30064771122" -> "128849018881"  [ label = "DDG: op_type_ == &quot;DecodeBmp&quot;"] 
  "30064771125" -> "128849018881"  [ label = "DDG: op_type_"] 
  "30064771125" -> "128849018881"  [ label = "DDG: op_type_ == &quot;DecodeAndCropJpeg&quot;"] 
  "30064771126" -> "128849018881"  [ label = "DDG: errors::InvalidArgument(
                      &quot;DecodeAndCropJpeg operation can run on JPEG only, but &quot;
                      &quot;detected GIF.&quot;)"] 
  "30064771126" -> "128849018881"  [ label = "DDG: OP_REQUIRES(context, false,
                  errors::InvalidArgument(
                      &quot;DecodeAndCropJpeg operation can run on JPEG only, but &quot;
                      &quot;detected GIF.&quot;))"] 
  "30064771123" -> "128849018881"  [ label = "DDG: errors::InvalidArgument(
                      &quot;Trying to decode GIF format using DecodeBmp op. Use &quot;
                      &quot;`decode_gif` or `decode_image` instead.&quot;)"] 
  "30064771123" -> "128849018881"  [ label = "DDG: OP_REQUIRES(context, false,
                  errors::InvalidArgument(
                      &quot;Trying to decode GIF format using DecodeBmp op. Use &quot;
                      &quot;`decode_gif` or `decode_image` instead.&quot;))"] 
  "30064771128" -> "128849018881"  [ label = "DDG: output"] 
  "30064771128" -> "128849018881"  [ label = "DDG: * output = nullptr"] 
  "30064771129" -> "128849018881"  [ label = "DDG: buffer_size"] 
  "30064771129" -> "128849018881"  [ label = "DDG: buffer_size = 0"] 
  "30064771131" -> "128849018881"  [ label = "DDG: input.data()"] 
  "30064771131" -> "128849018881"  [ label = "DDG: &amp;error_string"] 
  "30064771130" -> "128849018881"  [ label = "DDG: gif::Decode(
        input.data(), input.size(),
        [&amp;](int num_frames, int width, int height, int channels) -&gt; uint8* {
          buffer_size = ptrdiff_t(num_frames) * height * width * channels;

          Status status;
          // By the existing API, we support decoding GIF with `decode_jpeg` or
          // with `decode_png` if the GIF is a single-frame GIF (non-animated).
          // We need to make sure to return 3-D shapes when using in this case.
          if (op_type_ == &quot;DecodePng&quot; || op_type_ == &quot;DecodeJpeg&quot;) {
            if (num_frames == 1) {
              status = context-&gt;allocate_output(
                  0, TensorShape({height, width, channels}), &amp;output);
            } else {
              status = errors::InvalidArgument(
                  &quot;Got &quot;, num_frames, &quot; frames, but animated gifs &quot;,
                  &quot;can only be decoded by tf.io.decode_gif or &quot;,
                  &quot;tf.io.decode_image&quot;);
            }
          } else if (op_type_ == &quot;DecodeGif&quot; ||
..."] 
  "30064771130" -> "128849018881"  [ label = "DDG: * buffer = gif::Decode(
        input.data(), input.size(),
        [&amp;](int num_frames, int width, int height, int channels) -&gt; uint8* {
          buffer_size = ptrdiff_t(num_frames) * height * width * channels;

          Status status;
          // By the existing API, we support decoding GIF with `decode_jpeg` or
          // with `decode_png` if the GIF is a single-frame GIF (non-animated).
          // We need to make sure to return 3-D shapes when using in this case.
          if (op_type_ == &quot;DecodePng&quot; || op_type_ == &quot;DecodeJpeg&quot;) {
            if (num_frames == 1) {
              status = context-&gt;allocate_output(
                  0, TensorShape({height, width, channels}), &amp;output);
            } else {
              status = errors::InvalidArgument(
                  &quot;Got &quot;, num_frames, &quot; frames, but animated gifs &quot;,
                  &quot;can only be decoded by tf.io.decode_gif or &quot;,
                  &quot;tf.io.decode_image&quot;);
            }
          } else if (op_type_ == &quot;Dec..."] 
  "30064771135" -> "128849018881"  [ label = "DDG: context"] 
  "30064771135" -> "128849018881"  [ label = "DDG: buffer"] 
  "30064771137" -> "128849018881"  [ label = "DDG: input"] 
  "30064771136" -> "128849018881"  [ label = "DDG: input.size()"] 
  "30064771136" -> "128849018881"  [ label = "DDG: error_string"] 
  "30064771135" -> "128849018881"  [ label = "DDG: errors::InvalidArgument(&quot;Invalid GIF data (size &quot;, input.size(),
                                        &quot;), &quot;, error_string)"] 
  "30064771135" -> "128849018881"  [ label = "DDG: OP_REQUIRES(context, buffer,
                errors::InvalidArgument(&quot;Invalid GIF data (size &quot;, input.size(),
                                        &quot;), &quot;, error_string))"] 
  "30064771138" -> "128849018881"  [ label = "DDG: data_type_"] 
  "30064771138" -> "128849018881"  [ label = "DDG: DataType::DT_UINT8"] 
  "30064771138" -> "128849018881"  [ label = "DDG: data_type_ == DataType::DT_UINT8"] 
  "30064771150" -> "128849018881"  [ label = "DDG: uint16"] 
  "30064771131" -> "128849018881"  [ label = "DDG: expand_animations_"] 
  "111669149698" -> "115964116996"  [ label = "DDG: "] 
  "111669149698" -> "115964116997"  [ label = "DDG: "] 
  "111669149698" -> "30064771128"  [ label = "DDG: "] 
  "111669149698" -> "30064771129"  [ label = "DDG: "] 
  "30064771131" -> "30064771130"  [ label = "DDG: &amp;error_string"] 
  "30064771131" -> "30064771130"  [ label = "DDG: [&amp;](int num_frames, int width, int height, int channels) -&gt; uint8* {
          buffer_size = ptrdiff_t(num_frames) * height * width * channels;

          Status status;
          // By the existing API, we support decoding GIF with `decode_jpeg` or
          // with `decode_png` if the GIF is a single-frame GIF (non-animated).
          // We need to make sure to return 3-D shapes when using in this case.
          if (op_type_ == &quot;DecodePng&quot; || op_type_ == &quot;DecodeJpeg&quot;) {
            if (num_frames == 1) {
              status = context-&gt;allocate_output(
                  0, TensorShape({height, width, channels}), &amp;output);
            } else {
              status = errors::InvalidArgument(
                  &quot;Got &quot;, num_frames, &quot; frames, but animated gifs &quot;,
                  &quot;can only be decoded by tf.io.decode_gif or &quot;,
                  &quot;tf.io.decode_image&quot;);
            }
          } else if (op_type_ == &quot;DecodeGif&quot; ||
                     (op_type_ == &quot;DecodeImage&quot; &amp;&amp; expand..."] 
  "30064771131" -> "30064771130"  [ label = "DDG: input.size()"] 
  "30064771131" -> "30064771130"  [ label = "DDG: expand_animations_"] 
  "30064771131" -> "30064771130"  [ label = "DDG: input.data()"] 
  "30064771143" -> "30064771142"  [ label = "DDG: context"] 
  "115964116996" -> "30064771117"  [ label = "DDG: context"] 
  "111669149698" -> "30064771117"  [ label = "DDG: "] 
  "30064771118" -> "30064771117"  [ label = "DDG: channels_ == 0"] 
  "30064771118" -> "30064771117"  [ label = "DDG: channels_ == 3"] 
  "30064771121" -> "30064771117"  [ label = "DDG: &quot;channels must be 0 or 3 for GIF, got &quot;"] 
  "30064771121" -> "30064771117"  [ label = "DDG: channels_"] 
  "30064771117" -> "30064771135"  [ label = "DDG: context"] 
  "30064771126" -> "30064771135"  [ label = "DDG: context"] 
  "30064771123" -> "30064771135"  [ label = "DDG: context"] 
  "111669149698" -> "30064771135"  [ label = "DDG: "] 
  "30064771130" -> "30064771135"  [ label = "DDG: buffer"] 
  "30064771136" -> "30064771135"  [ label = "DDG: &quot;Invalid GIF data (size &quot;"] 
  "30064771136" -> "30064771135"  [ label = "DDG: input.size()"] 
  "30064771136" -> "30064771135"  [ label = "DDG: &quot;), &quot;"] 
  "30064771136" -> "30064771135"  [ label = "DDG: error_string"] 
  "30064771135" -> "30064771140"  [ label = "DDG: buffer"] 
  "111669149698" -> "30064771140"  [ label = "DDG: "] 
  "30064771140" -> "30064771141"  [ label = "DDG: buffer"] 
  "111669149698" -> "30064771141"  [ label = "DDG: "] 
  "30064771129" -> "30064771141"  [ label = "DDG: buffer_size"] 
  "30064771119" -> "30064771118"  [ label = "DDG: channels_"] 
  "30064771119" -> "30064771118"  [ label = "DDG: 0"] 
  "30064771120" -> "30064771118"  [ label = "DDG: channels_"] 
  "30064771120" -> "30064771118"  [ label = "DDG: 3"] 
  "111669149698" -> "30064771121"  [ label = "DDG: "] 
  "30064771119" -> "30064771121"  [ label = "DDG: channels_"] 
  "30064771120" -> "30064771121"  [ label = "DDG: channels_"] 
  "111669149698" -> "30064771122"  [ label = "DDG: "] 
  "30064771132" -> "30064771131"  [ label = "DDG: input"] 
  "30064771133" -> "30064771131"  [ label = "DDG: input"] 
  "111669149698" -> "30064771131"  [ label = "DDG: "] 
  "111669149698" -> "30064771136"  [ label = "DDG: "] 
  "30064771137" -> "30064771136"  [ label = "DDG: input"] 
  "30064771131" -> "30064771136"  [ label = "DDG: &amp;error_string"] 
  "111669149698" -> "30064771138"  [ label = "DDG: "] 
  "111669149698" -> "146028888067"  [ label = "DDG: "] 
  "30064771135" -> "30064771143"  [ label = "DDG: context"] 
  "111669149698" -> "30064771143"  [ label = "DDG: "] 
  "30064771138" -> "30064771144"  [ label = "DDG: data_type_"] 
  "111669149698" -> "30064771144"  [ label = "DDG: "] 
  "30064771147" -> "30064771146"  [ label = "DDG: (std::numeric_limits&lt;uint16&gt;::max() + 1) /
                           (std::numeric_limits&lt;uint8&gt;::max() + 1)"] 
  "30064771162" -> "30064771159"  [ label = "DDG: buffer_view.cast&lt;uint16&gt;()"] 
  "30064771162" -> "30064771159"  [ label = "DDG: scale"] 
  "111669149698" -> "30064771119"  [ label = "DDG: "] 
  "30064771119" -> "30064771120"  [ label = "DDG: channels_"] 
  "111669149698" -> "30064771120"  [ label = "DDG: "] 
  "30064771117" -> "30064771123"  [ label = "DDG: context"] 
  "111669149698" -> "30064771123"  [ label = "DDG: "] 
  "30064771124" -> "30064771123"  [ label = "DDG: &quot;Trying to decode GIF format using DecodeBmp op. Use &quot;
                      &quot;`decode_gif` or `decode_image` instead.&quot;"] 
  "115964116997" -> "30064771132"  [ label = "DDG: input"] 
  "111669149698" -> "30064771132"  [ label = "DDG: "] 
  "30064771132" -> "30064771133"  [ label = "DDG: input"] 
  "111669149698" -> "30064771133"  [ label = "DDG: "] 
  "30064771133" -> "30064771137"  [ label = "DDG: input"] 
  "111669149698" -> "30064771137"  [ label = "DDG: "] 
  "111669149698" -> "30064771124"  [ label = "DDG: "] 
  "30064771148" -> "30064771147"  [ label = "DDG: std::numeric_limits&lt;uint16&gt;::max() + 1"] 
  "30064771148" -> "30064771147"  [ label = "DDG: std::numeric_limits&lt;uint8&gt;::max() + 1"] 
  "30064771161" -> "30064771160"  [ label = "DDG: output"] 
  "30064771142" -> "30064771160"  [ label = "DDG: device"] 
  "111669149698" -> "30064771160"  [ label = "DDG: "] 
  "30064771163" -> "30064771162"  [ label = "DDG: buffer_view"] 
  "30064771146" -> "30064771162"  [ label = "DDG: scale"] 
  "111669149698" -> "30064771162"  [ label = "DDG: "] 
  "30064771122" -> "30064771125"  [ label = "DDG: op_type_"] 
  "111669149698" -> "30064771125"  [ label = "DDG: "] 
  "30064771149" -> "30064771148"  [ label = "DDG: std::numeric_limits&lt;uint16"] 
  "30064771149" -> "30064771148"  [ label = "DDG: ::max() + 1"] 
  "30064771154" -> "30064771148"  [ label = "DDG: std::numeric_limits&lt;uint8"] 
  "30064771154" -> "30064771148"  [ label = "DDG: ::max() + 1"] 
  "30064771128" -> "30064771161"  [ label = "DDG: output"] 
  "111669149698" -> "30064771161"  [ label = "DDG: "] 
  "111669149698" -> "30064771163"  [ label = "DDG: "] 
  "30064771144" -> "30064771164"  [ label = "DDG: data_type_"] 
  "111669149698" -> "30064771164"  [ label = "DDG: "] 
  "30064771167" -> "30064771166"  [ label = "DDG: 1. / std::numeric_limits&lt;uint8"] 
  "30064771167" -> "30064771166"  [ label = "DDG: ::max()"] 
  "30064771175" -> "30064771172"  [ label = "DDG: buffer_view.cast&lt;float&gt;()"] 
  "30064771175" -> "30064771172"  [ label = "DDG: scale"] 
  "30064771117" -> "30064771126"  [ label = "DDG: context"] 
  "111669149698" -> "30064771126"  [ label = "DDG: "] 
  "30064771127" -> "30064771126"  [ label = "DDG: &quot;DecodeAndCropJpeg operation can run on JPEG only, but &quot;
                      &quot;detected GIF.&quot;"] 
  "30064771150" -> "30064771149"  [ label = "DDG: std::numeric_limits"] 
  "30064771150" -> "30064771149"  [ label = "DDG: uint16"] 
  "111669149698" -> "30064771149"  [ label = "DDG: "] 
  "30064771155" -> "30064771154"  [ label = "DDG: std::numeric_limits"] 
  "30064771155" -> "30064771154"  [ label = "DDG: uint8"] 
  "111669149698" -> "30064771154"  [ label = "DDG: "] 
  "111669149698" -> "30064771127"  [ label = "DDG: "] 
  "111669149698" -> "30064771150"  [ label = "DDG: "] 
  "111669149698" -> "30064771152"  [ label = "DDG: "] 
  "30064771150" -> "30064771155"  [ label = "DDG: std::numeric_limits"] 
  "111669149698" -> "30064771155"  [ label = "DDG: "] 
  "111669149698" -> "30064771157"  [ label = "DDG: "] 
  "30064771168" -> "30064771167"  [ label = "DDG: 1. / std::numeric_limits"] 
  "30064771168" -> "30064771167"  [ label = "DDG: uint8"] 
  "111669149698" -> "30064771167"  [ label = "DDG: "] 
  "30064771174" -> "30064771173"  [ label = "DDG: output"] 
  "30064771142" -> "30064771173"  [ label = "DDG: device"] 
  "111669149698" -> "30064771173"  [ label = "DDG: "] 
  "30064771176" -> "30064771175"  [ label = "DDG: buffer_view"] 
  "30064771166" -> "30064771175"  [ label = "DDG: scale"] 
  "111669149698" -> "30064771175"  [ label = "DDG: "] 
  "30064771169" -> "30064771168"  [ label = "DDG: 1."] 
  "30064771169" -> "30064771168"  [ label = "DDG: std::numeric_limits"] 
  "111669149698" -> "30064771168"  [ label = "DDG: "] 
  "30064771128" -> "30064771174"  [ label = "DDG: output"] 
  "111669149698" -> "30064771174"  [ label = "DDG: "] 
  "111669149698" -> "30064771176"  [ label = "DDG: "] 
  "111669149698" -> "30064771169"  [ label = "DDG: "] 
  "30064771122" -> "30064771124"  [ label = "CDG: "] 
  "30064771122" -> "30064771125"  [ label = "CDG: "] 
  "30064771122" -> "30064771123"  [ label = "CDG: "] 
  "30064771138" -> "55834574850"  [ label = "CDG: "] 
  "30064771138" -> "30064771140"  [ label = "CDG: "] 
  "30064771138" -> "30064771141"  [ label = "CDG: "] 
  "30064771138" -> "30064771144"  [ label = "CDG: "] 
  "30064771138" -> "146028888067"  [ label = "CDG: "] 
  "30064771138" -> "30064771145"  [ label = "CDG: "] 
  "30064771138" -> "30064771142"  [ label = "CDG: "] 
  "30064771138" -> "30064771143"  [ label = "CDG: "] 
  "30064771144" -> "30064771164"  [ label = "CDG: "] 
  "30064771144" -> "30064771165"  [ label = "CDG: "] 
  "30064771144" -> "30064771162"  [ label = "CDG: "] 
  "30064771144" -> "30064771163"  [ label = "CDG: "] 
  "30064771144" -> "55834574851"  [ label = "CDG: "] 
  "30064771144" -> "55834574852"  [ label = "CDG: "] 
  "30064771144" -> "55834574853"  [ label = "CDG: "] 
  "30064771144" -> "30064771148"  [ label = "CDG: "] 
  "30064771144" -> "30064771149"  [ label = "CDG: "] 
  "30064771144" -> "30064771146"  [ label = "CDG: "] 
  "30064771144" -> "30064771147"  [ label = "CDG: "] 
  "30064771144" -> "30064771152"  [ label = "CDG: "] 
  "30064771144" -> "30064771153"  [ label = "CDG: "] 
  "30064771144" -> "30064771150"  [ label = "CDG: "] 
  "30064771144" -> "30064771151"  [ label = "CDG: "] 
  "30064771144" -> "30064771156"  [ label = "CDG: "] 
  "30064771144" -> "30064771157"  [ label = "CDG: "] 
  "30064771144" -> "30064771154"  [ label = "CDG: "] 
  "30064771144" -> "30064771155"  [ label = "CDG: "] 
  "30064771144" -> "30064771160"  [ label = "CDG: "] 
  "30064771144" -> "30064771161"  [ label = "CDG: "] 
  "30064771144" -> "30064771158"  [ label = "CDG: "] 
  "30064771144" -> "30064771159"  [ label = "CDG: "] 
  "30064771119" -> "30064771120"  [ label = "CDG: "] 
  "30064771125" -> "30064771126"  [ label = "CDG: "] 
  "30064771125" -> "30064771127"  [ label = "CDG: "] 
  "30064771164" -> "30064771168"  [ label = "CDG: "] 
  "30064771164" -> "30064771169"  [ label = "CDG: "] 
  "30064771164" -> "30064771166"  [ label = "CDG: "] 
  "30064771164" -> "30064771167"  [ label = "CDG: "] 
  "30064771164" -> "30064771172"  [ label = "CDG: "] 
  "30064771164" -> "30064771173"  [ label = "CDG: "] 
  "30064771164" -> "30064771170"  [ label = "CDG: "] 
  "30064771164" -> "30064771171"  [ label = "CDG: "] 
  "30064771164" -> "30064771176"  [ label = "CDG: "] 
  "30064771164" -> "30064771174"  [ label = "CDG: "] 
  "30064771164" -> "30064771175"  [ label = "CDG: "] 
  "30064771164" -> "55834574854"  [ label = "CDG: "] 
}
"""
)
