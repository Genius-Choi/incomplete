[33mval[0m [36mres2072[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "CheckBlock" {  
"111669149697" [label = <(METHOD,CheckBlock)<SUB>1</SUB>> ]
"25769803777" [label = <(BLOCK,{

    // These are checks that are independent...,{

    // These are checks that are independent...)<SUB>1</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,IF,if (vtx.empty() || vtx.size() &gt; MAX_BLOCK_SIZE || ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) &gt; MAX_BLOCK_SIZE))<SUB>7</SUB>> ]
"30064771072" [label = <(&lt;operator&gt;.logicalOr,vtx.empty() || vtx.size() &gt; MAX_BLOCK_SIZE || :...)<SUB>7</SUB>> ]
"30064771073" [label = <(&lt;operator&gt;.logicalOr,vtx.empty() || vtx.size() &gt; MAX_BLOCK_SIZE)<SUB>7</SUB>> ]
"30064771074" [label = <(empty,vtx.empty())<SUB>7</SUB>> ]
"68719476736" [label = <(IDENTIFIER,vtx,vtx.empty())<SUB>7</SUB>> ]
"30064771075" [label = <(&lt;operator&gt;.greaterThan,vtx.size() &gt; MAX_BLOCK_SIZE)<SUB>7</SUB>> ]
"30064771076" [label = <(size,vtx.size())<SUB>7</SUB>> ]
"68719476737" [label = <(IDENTIFIER,vtx,vtx.size())<SUB>7</SUB>> ]
"68719476738" [label = <(IDENTIFIER,MAX_BLOCK_SIZE,vtx.size() &gt; MAX_BLOCK_SIZE)<SUB>7</SUB>> ]
"30064771077" [label = <(&lt;operator&gt;.greaterThan,::GetSerializeSize(*this, SER_NETWORK, PROTOCOL...)<SUB>7</SUB>> ]
"30064771078" [label = <(GetSerializeSize,::GetSerializeSize(*this, SER_NETWORK, PROTOCOL...)<SUB>7</SUB>> ]
"30064771079" [label = <(&lt;operator&gt;.indirection,*this)<SUB>7</SUB>> ]
"68719476739" [label = <(IDENTIFIER,this,::GetSerializeSize(*this, SER_NETWORK, PROTOCOL...)<SUB>7</SUB>> ]
"68719476740" [label = <(IDENTIFIER,SER_NETWORK,::GetSerializeSize(*this, SER_NETWORK, PROTOCOL...)<SUB>7</SUB>> ]
"68719476741" [label = <(IDENTIFIER,PROTOCOL_VERSION,::GetSerializeSize(*this, SER_NETWORK, PROTOCOL...)<SUB>7</SUB>> ]
"68719476742" [label = <(IDENTIFIER,MAX_BLOCK_SIZE,::GetSerializeSize(*this, SER_NETWORK, PROTOCOL...)<SUB>7</SUB>> ]
"25769803778" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>8</SUB>> ]
"146028888064" [label = <(RETURN,return DoS(100, error(&quot;CheckBlock() : size limi...,return DoS(100, error(&quot;CheckBlock() : size limi...)<SUB>8</SUB>> ]
"30064771080" [label = <(DoS,DoS(100, error(&quot;CheckBlock() : size limits fail...)<SUB>8</SUB>> ]
"90194313216" [label = <(LITERAL,100,DoS(100, error(&quot;CheckBlock() : size limits fail...)<SUB>8</SUB>> ]
"30064771081" [label = <(error,error(&quot;CheckBlock() : size limits failed&quot;))<SUB>8</SUB>> ]
"90194313217" [label = <(LITERAL,&quot;CheckBlock() : size limits failed&quot;,error(&quot;CheckBlock() : size limits failed&quot;))<SUB>8</SUB>> ]
"47244640257" [label = <(CONTROL_STRUCTURE,IF,if (IsProofOfWork()))<SUB>10</SUB>> ]
"30064771082" [label = <(IsProofOfWork,IsProofOfWork())<SUB>10</SUB>> ]
"25769803779" [label = <(BLOCK,{

        /* Proof-of-work verification agains...,{

        /* Proof-of-work verification agains...)<SUB>10</SUB>> ]
"47244640258" [label = <(CONTROL_STRUCTURE,IF,if (!CheckProofOfWork(GetHashPoW(), nBits)))<SUB>13</SUB>> ]
"30064771083" [label = <(&lt;operator&gt;.logicalNot,!CheckProofOfWork(GetHashPoW(), nBits))<SUB>13</SUB>> ]
"30064771084" [label = <(CheckProofOfWork,CheckProofOfWork(GetHashPoW(), nBits))<SUB>13</SUB>> ]
"30064771085" [label = <(GetHashPoW,GetHashPoW())<SUB>13</SUB>> ]
"68719476743" [label = <(IDENTIFIER,nBits,CheckProofOfWork(GetHashPoW(), nBits))<SUB>13</SUB>> ]
"25769803780" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>14</SUB>> ]
"146028888065" [label = <(RETURN,return(DoS(50, error(&quot;CheckBlock() : proof-of-w...,return(DoS(50, error(&quot;CheckBlock() : proof-of-w...)<SUB>14</SUB>> ]
"30064771086" [label = <(DoS,DoS(50, error(&quot;CheckBlock() : proof-of-work ver...)<SUB>14</SUB>> ]
"90194313218" [label = <(LITERAL,50,DoS(50, error(&quot;CheckBlock() : proof-of-work ver...)<SUB>14</SUB>> ]
"30064771087" [label = <(error,error(&quot;CheckBlock() : proof-of-work verificatio...)<SUB>14</SUB>> ]
"90194313219" [label = <(LITERAL,&quot;CheckBlock() : proof-of-work verification failed&quot;,error(&quot;CheckBlock() : proof-of-work verificatio...)<SUB>14</SUB>> ]
"47244640259" [label = <(CONTROL_STRUCTURE,IF,if (!CheckBlockSignature()))<SUB>17</SUB>> ]
"30064771088" [label = <(&lt;operator&gt;.logicalNot,!CheckBlockSignature())<SUB>17</SUB>> ]
"30064771089" [label = <(CheckBlockSignature,CheckBlockSignature())<SUB>17</SUB>> ]
"25769803781" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>18</SUB>> ]
"146028888066" [label = <(RETURN,return(DoS(100, error(&quot;CheckBlock() : bad proof...,return(DoS(100, error(&quot;CheckBlock() : bad proof...)<SUB>18</SUB>> ]
"30064771090" [label = <(DoS,DoS(100, error(&quot;CheckBlock() : bad proof-of-wor...)<SUB>18</SUB>> ]
"90194313220" [label = <(LITERAL,100,DoS(100, error(&quot;CheckBlock() : bad proof-of-wor...)<SUB>18</SUB>> ]
"30064771091" [label = <(error,error(&quot;CheckBlock() : bad proof-of-work block s...)<SUB>18</SUB>> ]
"90194313221" [label = <(LITERAL,&quot;CheckBlock() : bad proof-of-work block signature&quot;,error(&quot;CheckBlock() : bad proof-of-work block s...)<SUB>18</SUB>> ]
"47244640260" [label = <(CONTROL_STRUCTURE,IF,if (GetBlockTime() &gt; FutureDrift(GetAdjustedTime())))<SUB>22</SUB>> ]
"30064771092" [label = <(&lt;operator&gt;.greaterThan,GetBlockTime() &gt; FutureDrift(GetAdjustedTime()))<SUB>22</SUB>> ]
"30064771093" [label = <(GetBlockTime,GetBlockTime())<SUB>22</SUB>> ]
"30064771094" [label = <(FutureDrift,FutureDrift(GetAdjustedTime()))<SUB>22</SUB>> ]
"30064771095" [label = <(GetAdjustedTime,GetAdjustedTime())<SUB>22</SUB>> ]
"25769803782" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>23</SUB>> ]
"146028888067" [label = <(RETURN,return error(&quot;CheckBlock() : block timestamp to...,return error(&quot;CheckBlock() : block timestamp to...)<SUB>23</SUB>> ]
"30064771096" [label = <(error,error(&quot;CheckBlock() : block timestamp too far i...)<SUB>23</SUB>> ]
"90194313222" [label = <(LITERAL,&quot;CheckBlock() : block timestamp too far in the ...,error(&quot;CheckBlock() : block timestamp too far i...)<SUB>23</SUB>> ]
"47244640261" [label = <(CONTROL_STRUCTURE,IF,if (vtx.empty() || !vtx[0].IsCoinBase()))<SUB>26</SUB>> ]
"30064771097" [label = <(&lt;operator&gt;.logicalOr,vtx.empty() || !vtx[0].IsCoinBase())<SUB>26</SUB>> ]
"30064771098" [label = <(empty,vtx.empty())<SUB>26</SUB>> ]
"68719476744" [label = <(IDENTIFIER,vtx,vtx.empty())<SUB>26</SUB>> ]
"30064771099" [label = <(&lt;operator&gt;.logicalNot,!vtx[0].IsCoinBase())<SUB>26</SUB>> ]
"30064771100" [label = <(IsCoinBase,vtx[0].IsCoinBase())<SUB>26</SUB>> ]
"30064771101" [label = <(&lt;operator&gt;.indirectIndexAccess,vtx[0])<SUB>26</SUB>> ]
"68719476745" [label = <(IDENTIFIER,vtx,vtx[0].IsCoinBase())<SUB>26</SUB>> ]
"90194313223" [label = <(LITERAL,0,vtx[0].IsCoinBase())<SUB>26</SUB>> ]
"25769803783" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>27</SUB>> ]
"146028888068" [label = <(RETURN,return DoS(100, error(&quot;CheckBlock() : first tx ...,return DoS(100, error(&quot;CheckBlock() : first tx ...)<SUB>27</SUB>> ]
"30064771102" [label = <(DoS,DoS(100, error(&quot;CheckBlock() : first tx is not ...)<SUB>27</SUB>> ]
"90194313224" [label = <(LITERAL,100,DoS(100, error(&quot;CheckBlock() : first tx is not ...)<SUB>27</SUB>> ]
"30064771103" [label = <(error,error(&quot;CheckBlock() : first tx is not coinbase&quot;))<SUB>27</SUB>> ]
"90194313225" [label = <(LITERAL,&quot;CheckBlock() : first tx is not coinbase&quot;,error(&quot;CheckBlock() : first tx is not coinbase&quot;))<SUB>27</SUB>> ]
"47244640262" [label = <(CONTROL_STRUCTURE,FOR,for (unsigned int i = 1;i &lt; vtx.size();i++))<SUB>28</SUB>> ]
"25769803784" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>28</SUB>> ]
"94489280512" [label = <(LOCAL,unsigned int i: unsigned int)<SUB>28</SUB>> ]
"30064771104" [label = <(&lt;operator&gt;.assignment,i = 1)<SUB>28</SUB>> ]
"68719476746" [label = <(IDENTIFIER,i,i = 1)<SUB>28</SUB>> ]
"90194313226" [label = <(LITERAL,1,i = 1)<SUB>28</SUB>> ]
"30064771105" [label = <(&lt;operator&gt;.lessThan,i &lt; vtx.size())<SUB>28</SUB>> ]
"68719476747" [label = <(IDENTIFIER,i,i &lt; vtx.size())<SUB>28</SUB>> ]
"30064771106" [label = <(size,vtx.size())<SUB>28</SUB>> ]
"68719476748" [label = <(IDENTIFIER,vtx,vtx.size())<SUB>28</SUB>> ]
"30064771107" [label = <(&lt;operator&gt;.postIncrement,i++)<SUB>28</SUB>> ]
"68719476749" [label = <(IDENTIFIER,i,i++)<SUB>28</SUB>> ]
"47244640263" [label = <(CONTROL_STRUCTURE,IF,if (vtx[i].IsCoinBase()))<SUB>29</SUB>> ]
"30064771108" [label = <(IsCoinBase,vtx[i].IsCoinBase())<SUB>29</SUB>> ]
"30064771109" [label = <(&lt;operator&gt;.indirectIndexAccess,vtx[i])<SUB>29</SUB>> ]
"68719476750" [label = <(IDENTIFIER,vtx,vtx[i].IsCoinBase())<SUB>29</SUB>> ]
"68719476751" [label = <(IDENTIFIER,i,vtx[i].IsCoinBase())<SUB>29</SUB>> ]
"25769803785" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>30</SUB>> ]
"146028888069" [label = <(RETURN,return DoS(100, error(&quot;CheckBlock() : more than...,return DoS(100, error(&quot;CheckBlock() : more than...)<SUB>30</SUB>> ]
"30064771110" [label = <(DoS,DoS(100, error(&quot;CheckBlock() : more than one co...)<SUB>30</SUB>> ]
"90194313227" [label = <(LITERAL,100,DoS(100, error(&quot;CheckBlock() : more than one co...)<SUB>30</SUB>> ]
"30064771111" [label = <(error,error(&quot;CheckBlock() : more than one coinbase&quot;))<SUB>30</SUB>> ]
"90194313228" [label = <(LITERAL,&quot;CheckBlock() : more than one coinbase&quot;,error(&quot;CheckBlock() : more than one coinbase&quot;))<SUB>30</SUB>> ]
"47244640264" [label = <(CONTROL_STRUCTURE,IF,if (GetBlockTime() &gt; FutureDrift((int64_t)vtx[0].nTime)))<SUB>33</SUB>> ]
"30064771112" [label = <(&lt;operator&gt;.greaterThan,GetBlockTime() &gt; FutureDrift((int64_t)vtx[0].nT...)<SUB>33</SUB>> ]
"30064771113" [label = <(GetBlockTime,GetBlockTime())<SUB>33</SUB>> ]
"30064771114" [label = <(FutureDrift,FutureDrift((int64_t)vtx[0].nTime))<SUB>33</SUB>> ]
"30064771115" [label = <(&lt;operator&gt;.cast,(int64_t)vtx[0].nTime)<SUB>33</SUB>> ]
"184683593728" [label = <(UNKNOWN,int64_t,int64_t)<SUB>33</SUB>> ]
"30064771116" [label = <(&lt;operator&gt;.fieldAccess,vtx[0].nTime)<SUB>33</SUB>> ]
"30064771117" [label = <(&lt;operator&gt;.indirectIndexAccess,vtx[0])<SUB>33</SUB>> ]
"68719476752" [label = <(IDENTIFIER,vtx,(int64_t)vtx[0].nTime)<SUB>33</SUB>> ]
"90194313229" [label = <(LITERAL,0,(int64_t)vtx[0].nTime)<SUB>33</SUB>> ]
"55834574848" [label = <(FIELD_IDENTIFIER,nTime,nTime)<SUB>33</SUB>> ]
"25769803786" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>34</SUB>> ]
"146028888070" [label = <(RETURN,return DoS(50, error(&quot;CheckBlock() : coinbase t...,return DoS(50, error(&quot;CheckBlock() : coinbase t...)<SUB>34</SUB>> ]
"30064771118" [label = <(DoS,DoS(50, error(&quot;CheckBlock() : coinbase timestam...)<SUB>34</SUB>> ]
"90194313230" [label = <(LITERAL,50,DoS(50, error(&quot;CheckBlock() : coinbase timestam...)<SUB>34</SUB>> ]
"30064771119" [label = <(error,error(&quot;CheckBlock() : coinbase timestamp is too...)<SUB>34</SUB>> ]
"90194313231" [label = <(LITERAL,&quot;CheckBlock() : coinbase timestamp is too early&quot;,error(&quot;CheckBlock() : coinbase timestamp is too...)<SUB>34</SUB>> ]
"47244640265" [label = <(CONTROL_STRUCTURE,IF,if (IsProofOfStake()))<SUB>36</SUB>> ]
"30064771120" [label = <(IsProofOfStake,IsProofOfStake())<SUB>36</SUB>> ]
"25769803787" [label = <(BLOCK,{
        // Coinbase output should be empty if...,{
        // Coinbase output should be empty if...)<SUB>37</SUB>> ]
"47244640266" [label = <(CONTROL_STRUCTURE,IF,if (vtx[0].vout.size() != 1 || !vtx[0].vout[0].IsEmpty()))<SUB>39</SUB>> ]
"30064771121" [label = <(&lt;operator&gt;.logicalOr,vtx[0].vout.size() != 1 || !vtx[0].vout[0].IsEm...)<SUB>39</SUB>> ]
"30064771122" [label = <(&lt;operator&gt;.notEquals,vtx[0].vout.size() != 1)<SUB>39</SUB>> ]
"30064771123" [label = <(size,vtx[0].vout.size())<SUB>39</SUB>> ]
"30064771124" [label = <(&lt;operator&gt;.fieldAccess,vtx[0].vout)<SUB>39</SUB>> ]
"30064771125" [label = <(&lt;operator&gt;.indirectIndexAccess,vtx[0])<SUB>39</SUB>> ]
"68719476753" [label = <(IDENTIFIER,vtx,vtx[0].vout.size())<SUB>39</SUB>> ]
"90194313232" [label = <(LITERAL,0,vtx[0].vout.size())<SUB>39</SUB>> ]
"55834574849" [label = <(FIELD_IDENTIFIER,vout,vout)<SUB>39</SUB>> ]
"90194313233" [label = <(LITERAL,1,vtx[0].vout.size() != 1)<SUB>39</SUB>> ]
"30064771126" [label = <(&lt;operator&gt;.logicalNot,!vtx[0].vout[0].IsEmpty())<SUB>39</SUB>> ]
"30064771127" [label = <(IsEmpty,vtx[0].vout[0].IsEmpty())<SUB>39</SUB>> ]
"30064771128" [label = <(&lt;operator&gt;.indirectIndexAccess,vtx[0].vout[0])<SUB>39</SUB>> ]
"30064771129" [label = <(&lt;operator&gt;.fieldAccess,vtx[0].vout)<SUB>39</SUB>> ]
"30064771130" [label = <(&lt;operator&gt;.indirectIndexAccess,vtx[0])<SUB>39</SUB>> ]
"68719476754" [label = <(IDENTIFIER,vtx,vtx[0].vout[0].IsEmpty())<SUB>39</SUB>> ]
"90194313234" [label = <(LITERAL,0,vtx[0].vout[0].IsEmpty())<SUB>39</SUB>> ]
"55834574850" [label = <(FIELD_IDENTIFIER,vout,vout)<SUB>39</SUB>> ]
"90194313235" [label = <(LITERAL,0,vtx[0].vout[0].IsEmpty())<SUB>39</SUB>> ]
"25769803788" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>40</SUB>> ]
"146028888071" [label = <(RETURN,return DoS(100, error(&quot;CheckBlock() : coinbase ...,return DoS(100, error(&quot;CheckBlock() : coinbase ...)<SUB>40</SUB>> ]
"30064771131" [label = <(DoS,DoS(100, error(&quot;CheckBlock() : coinbase output ...)<SUB>40</SUB>> ]
"90194313236" [label = <(LITERAL,100,DoS(100, error(&quot;CheckBlock() : coinbase output ...)<SUB>40</SUB>> ]
"30064771132" [label = <(error,error(&quot;CheckBlock() : coinbase output not empty...)<SUB>40</SUB>> ]
"90194313237" [label = <(LITERAL,&quot;CheckBlock() : coinbase output not empty for p...,error(&quot;CheckBlock() : coinbase output not empty...)<SUB>40</SUB>> ]
"47244640267" [label = <(CONTROL_STRUCTURE,IF,if (vtx.empty() || !vtx[1].IsCoinStake()))<SUB>43</SUB>> ]
"30064771133" [label = <(&lt;operator&gt;.logicalOr,vtx.empty() || !vtx[1].IsCoinStake())<SUB>43</SUB>> ]
"30064771134" [label = <(empty,vtx.empty())<SUB>43</SUB>> ]
"68719476755" [label = <(IDENTIFIER,vtx,vtx.empty())<SUB>43</SUB>> ]
"30064771135" [label = <(&lt;operator&gt;.logicalNot,!vtx[1].IsCoinStake())<SUB>43</SUB>> ]
"30064771136" [label = <(IsCoinStake,vtx[1].IsCoinStake())<SUB>43</SUB>> ]
"30064771137" [label = <(&lt;operator&gt;.indirectIndexAccess,vtx[1])<SUB>43</SUB>> ]
"68719476756" [label = <(IDENTIFIER,vtx,vtx[1].IsCoinStake())<SUB>43</SUB>> ]
"90194313238" [label = <(LITERAL,1,vtx[1].IsCoinStake())<SUB>43</SUB>> ]
"25769803789" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>44</SUB>> ]
"146028888072" [label = <(RETURN,return DoS(100, error(&quot;CheckBlock() : second tx...,return DoS(100, error(&quot;CheckBlock() : second tx...)<SUB>44</SUB>> ]
"30064771138" [label = <(DoS,DoS(100, error(&quot;CheckBlock() : second tx is not...)<SUB>44</SUB>> ]
"90194313239" [label = <(LITERAL,100,DoS(100, error(&quot;CheckBlock() : second tx is not...)<SUB>44</SUB>> ]
"30064771139" [label = <(error,error(&quot;CheckBlock() : second tx is not coinstake&quot;))<SUB>44</SUB>> ]
"90194313240" [label = <(LITERAL,&quot;CheckBlock() : second tx is not coinstake&quot;,error(&quot;CheckBlock() : second tx is not coinstake&quot;))<SUB>44</SUB>> ]
"47244640268" [label = <(CONTROL_STRUCTURE,FOR,for (unsigned int i = 2;i &lt; vtx.size();i++))<SUB>45</SUB>> ]
"25769803790" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>45</SUB>> ]
"94489280513" [label = <(LOCAL,unsigned int i: unsigned int)<SUB>45</SUB>> ]
"30064771140" [label = <(&lt;operator&gt;.assignment,i = 2)<SUB>45</SUB>> ]
"68719476757" [label = <(IDENTIFIER,i,i = 2)<SUB>45</SUB>> ]
"90194313241" [label = <(LITERAL,2,i = 2)<SUB>45</SUB>> ]
"30064771141" [label = <(&lt;operator&gt;.lessThan,i &lt; vtx.size())<SUB>45</SUB>> ]
"68719476758" [label = <(IDENTIFIER,i,i &lt; vtx.size())<SUB>45</SUB>> ]
"30064771142" [label = <(size,vtx.size())<SUB>45</SUB>> ]
"68719476759" [label = <(IDENTIFIER,vtx,vtx.size())<SUB>45</SUB>> ]
"30064771143" [label = <(&lt;operator&gt;.postIncrement,i++)<SUB>45</SUB>> ]
"68719476760" [label = <(IDENTIFIER,i,i++)<SUB>45</SUB>> ]
"47244640269" [label = <(CONTROL_STRUCTURE,IF,if (vtx[i].IsCoinStake()))<SUB>46</SUB>> ]
"30064771144" [label = <(IsCoinStake,vtx[i].IsCoinStake())<SUB>46</SUB>> ]
"30064771145" [label = <(&lt;operator&gt;.indirectIndexAccess,vtx[i])<SUB>46</SUB>> ]
"68719476761" [label = <(IDENTIFIER,vtx,vtx[i].IsCoinStake())<SUB>46</SUB>> ]
"68719476762" [label = <(IDENTIFIER,i,vtx[i].IsCoinStake())<SUB>46</SUB>> ]
"25769803791" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>47</SUB>> ]
"146028888073" [label = <(RETURN,return DoS(100, error(&quot;CheckBlock() : more than...,return DoS(100, error(&quot;CheckBlock() : more than...)<SUB>47</SUB>> ]
"30064771146" [label = <(DoS,DoS(100, error(&quot;CheckBlock() : more than one co...)<SUB>47</SUB>> ]
"90194313242" [label = <(LITERAL,100,DoS(100, error(&quot;CheckBlock() : more than one co...)<SUB>47</SUB>> ]
"30064771147" [label = <(error,error(&quot;CheckBlock() : more than one coinstake&quot;))<SUB>47</SUB>> ]
"90194313243" [label = <(LITERAL,&quot;CheckBlock() : more than one coinstake&quot;,error(&quot;CheckBlock() : more than one coinstake&quot;))<SUB>47</SUB>> ]
"47244640270" [label = <(CONTROL_STRUCTURE,IF,if (!CheckBlockSignature()))<SUB>54</SUB>> ]
"30064771148" [label = <(&lt;operator&gt;.logicalNot,!CheckBlockSignature())<SUB>54</SUB>> ]
"30064771149" [label = <(CheckBlockSignature,CheckBlockSignature())<SUB>54</SUB>> ]
"25769803792" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>55</SUB>> ]
"146028888074" [label = <(RETURN,return DoS(100, error(&quot;CheckBlock() : bad proof...,return DoS(100, error(&quot;CheckBlock() : bad proof...)<SUB>55</SUB>> ]
"30064771150" [label = <(DoS,DoS(100, error(&quot;CheckBlock() : bad proof-of-sta...)<SUB>55</SUB>> ]
"90194313244" [label = <(LITERAL,100,DoS(100, error(&quot;CheckBlock() : bad proof-of-sta...)<SUB>55</SUB>> ]
"30064771151" [label = <(error,error(&quot;CheckBlock() : bad proof-of-stake block ...)<SUB>55</SUB>> ]
"90194313245" [label = <(LITERAL,&quot;CheckBlock() : bad proof-of-stake block signat...,error(&quot;CheckBlock() : bad proof-of-stake block ...)<SUB>55</SUB>> ]
"47244640271" [label = <(CONTROL_STRUCTURE,IF,if (hashMerkleRoot != BuildMerkleTree()))<SUB>70</SUB>> ]
"30064771152" [label = <(&lt;operator&gt;.notEquals,hashMerkleRoot != BuildMerkleTree())<SUB>70</SUB>> ]
"68719476763" [label = <(IDENTIFIER,hashMerkleRoot,hashMerkleRoot != BuildMerkleTree())<SUB>70</SUB>> ]
"30064771153" [label = <(BuildMerkleTree,BuildMerkleTree())<SUB>70</SUB>> ]
"25769803793" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>71</SUB>> ]
"146028888075" [label = <(RETURN,return(DoS(100, error(&quot;CheckBlock() : merkle ro...,return(DoS(100, error(&quot;CheckBlock() : merkle ro...)<SUB>71</SUB>> ]
"30064771154" [label = <(DoS,DoS(100, error(&quot;CheckBlock() : merkle root veri...)<SUB>71</SUB>> ]
"90194313246" [label = <(LITERAL,100,DoS(100, error(&quot;CheckBlock() : merkle root veri...)<SUB>71</SUB>> ]
"30064771155" [label = <(error,error(&quot;CheckBlock() : merkle root verification ...)<SUB>71</SUB>> ]
"90194313247" [label = <(LITERAL,&quot;CheckBlock() : merkle root verification failed&quot;,error(&quot;CheckBlock() : merkle root verification ...)<SUB>71</SUB>> ]
"30064771156" [label = <(&lt;operator&gt;.greaterThan,set&lt;uint256&gt; uniqueTx)<SUB>74</SUB>> ]
"30064771157" [label = <(&lt;operator&gt;.lessThan,set&lt;uint256)<SUB>74</SUB>> ]
"68719476764" [label = <(IDENTIFIER,set,set&lt;uint256)<SUB>74</SUB>> ]
"68719476765" [label = <(IDENTIFIER,uint256,set&lt;uint256)<SUB>74</SUB>> ]
"68719476766" [label = <(IDENTIFIER,uniqueTx,set&lt;uint256&gt; uniqueTx)<SUB>74</SUB>> ]
"47244640272" [label = <(CONTROL_STRUCTURE,IF,if (uniqueTx.size() != vtx.size()))<SUB>78</SUB>> ]
"30064771158" [label = <(&lt;operator&gt;.notEquals,uniqueTx.size() != vtx.size())<SUB>78</SUB>> ]
"30064771159" [label = <(size,uniqueTx.size())<SUB>78</SUB>> ]
"68719476767" [label = <(IDENTIFIER,uniqueTx,uniqueTx.size())<SUB>78</SUB>> ]
"30064771160" [label = <(size,vtx.size())<SUB>78</SUB>> ]
"68719476768" [label = <(IDENTIFIER,vtx,vtx.size())<SUB>78</SUB>> ]
"25769803794" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>79</SUB>> ]
"146028888076" [label = <(RETURN,return(DoS(100, error(&quot;CheckBlock() : duplicate...,return(DoS(100, error(&quot;CheckBlock() : duplicate...)<SUB>79</SUB>> ]
"30064771161" [label = <(DoS,DoS(100, error(&quot;CheckBlock() : duplicate transa...)<SUB>79</SUB>> ]
"90194313248" [label = <(LITERAL,100,DoS(100, error(&quot;CheckBlock() : duplicate transa...)<SUB>79</SUB>> ]
"30064771162" [label = <(error,error(&quot;CheckBlock() : duplicate transaction fou...)<SUB>79</SUB>> ]
"90194313249" [label = <(LITERAL,&quot;CheckBlock() : duplicate transaction found&quot;,error(&quot;CheckBlock() : duplicate transaction fou...)<SUB>79</SUB>> ]
"94489280514" [label = <(LOCAL,unsigned int nSigOps: unsigned int)<SUB>81</SUB>> ]
"30064771163" [label = <(&lt;operator&gt;.assignment,nSigOps = 0)<SUB>81</SUB>> ]
"68719476769" [label = <(IDENTIFIER,nSigOps,nSigOps = 0)<SUB>81</SUB>> ]
"90194313250" [label = <(LITERAL,0,nSigOps = 0)<SUB>81</SUB>> ]
"47244640273" [label = <(CONTROL_STRUCTURE,IF,if (nSigOps &gt; MAX_BLOCK_SIGOPS))<SUB>86</SUB>> ]
"30064771164" [label = <(&lt;operator&gt;.greaterThan,nSigOps &gt; MAX_BLOCK_SIGOPS)<SUB>86</SUB>> ]
"68719476770" [label = <(IDENTIFIER,nSigOps,nSigOps &gt; MAX_BLOCK_SIGOPS)<SUB>86</SUB>> ]
"68719476771" [label = <(IDENTIFIER,MAX_BLOCK_SIGOPS,nSigOps &gt; MAX_BLOCK_SIGOPS)<SUB>86</SUB>> ]
"25769803795" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>87</SUB>> ]
"146028888077" [label = <(RETURN,return DoS(100, error(&quot;CheckBlock() : out-of-bo...,return DoS(100, error(&quot;CheckBlock() : out-of-bo...)<SUB>87</SUB>> ]
"30064771165" [label = <(DoS,DoS(100, error(&quot;CheckBlock() : out-of-bounds Si...)<SUB>87</SUB>> ]
"90194313251" [label = <(LITERAL,100,DoS(100, error(&quot;CheckBlock() : out-of-bounds Si...)<SUB>87</SUB>> ]
"30064771166" [label = <(error,error(&quot;CheckBlock() : out-of-bounds SigOpCount&quot;))<SUB>87</SUB>> ]
"90194313252" [label = <(LITERAL,&quot;CheckBlock() : out-of-bounds SigOpCount&quot;,error(&quot;CheckBlock() : out-of-bounds SigOpCount&quot;))<SUB>87</SUB>> ]
"146028888078" [label = <(RETURN,return(true);,return(true);)<SUB>89</SUB>> ]
"90194313253" [label = <(LITERAL,true,return(true);)<SUB>89</SUB>> ]
"128849018880" [label = <(METHOD_RETURN,bool)<SUB>1</SUB>> ]
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "128849018880"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "25769803777" -> "47244640257"  [ label = "AST: "] 
  "25769803777" -> "47244640260"  [ label = "AST: "] 
  "25769803777" -> "47244640261"  [ label = "AST: "] 
  "25769803777" -> "47244640262"  [ label = "AST: "] 
  "25769803777" -> "47244640264"  [ label = "AST: "] 
  "25769803777" -> "47244640265"  [ label = "AST: "] 
  "25769803777" -> "47244640271"  [ label = "AST: "] 
  "25769803777" -> "30064771156"  [ label = "AST: "] 
  "25769803777" -> "47244640272"  [ label = "AST: "] 
  "25769803777" -> "94489280514"  [ label = "AST: "] 
  "25769803777" -> "30064771163"  [ label = "AST: "] 
  "25769803777" -> "47244640273"  [ label = "AST: "] 
  "25769803777" -> "146028888078"  [ label = "AST: "] 
  "47244640256" -> "30064771072"  [ label = "AST: "] 
  "47244640256" -> "25769803778"  [ label = "AST: "] 
  "30064771072" -> "30064771073"  [ label = "AST: "] 
  "30064771072" -> "30064771077"  [ label = "AST: "] 
  "30064771073" -> "30064771074"  [ label = "AST: "] 
  "30064771073" -> "30064771075"  [ label = "AST: "] 
  "30064771074" -> "68719476736"  [ label = "AST: "] 
  "30064771075" -> "30064771076"  [ label = "AST: "] 
  "30064771075" -> "68719476738"  [ label = "AST: "] 
  "30064771076" -> "68719476737"  [ label = "AST: "] 
  "30064771077" -> "30064771078"  [ label = "AST: "] 
  "30064771077" -> "68719476742"  [ label = "AST: "] 
  "30064771078" -> "30064771079"  [ label = "AST: "] 
  "30064771078" -> "68719476740"  [ label = "AST: "] 
  "30064771078" -> "68719476741"  [ label = "AST: "] 
  "30064771079" -> "68719476739"  [ label = "AST: "] 
  "25769803778" -> "146028888064"  [ label = "AST: "] 
  "146028888064" -> "30064771080"  [ label = "AST: "] 
  "30064771080" -> "90194313216"  [ label = "AST: "] 
  "30064771080" -> "30064771081"  [ label = "AST: "] 
  "30064771081" -> "90194313217"  [ label = "AST: "] 
  "47244640257" -> "30064771082"  [ label = "AST: "] 
  "47244640257" -> "25769803779"  [ label = "AST: "] 
  "25769803779" -> "47244640258"  [ label = "AST: "] 
  "25769803779" -> "47244640259"  [ label = "AST: "] 
  "47244640258" -> "30064771083"  [ label = "AST: "] 
  "47244640258" -> "25769803780"  [ label = "AST: "] 
  "30064771083" -> "30064771084"  [ label = "AST: "] 
  "30064771084" -> "30064771085"  [ label = "AST: "] 
  "30064771084" -> "68719476743"  [ label = "AST: "] 
  "25769803780" -> "146028888065"  [ label = "AST: "] 
  "146028888065" -> "30064771086"  [ label = "AST: "] 
  "30064771086" -> "90194313218"  [ label = "AST: "] 
  "30064771086" -> "30064771087"  [ label = "AST: "] 
  "30064771087" -> "90194313219"  [ label = "AST: "] 
  "47244640259" -> "30064771088"  [ label = "AST: "] 
  "47244640259" -> "25769803781"  [ label = "AST: "] 
  "30064771088" -> "30064771089"  [ label = "AST: "] 
  "25769803781" -> "146028888066"  [ label = "AST: "] 
  "146028888066" -> "30064771090"  [ label = "AST: "] 
  "30064771090" -> "90194313220"  [ label = "AST: "] 
  "30064771090" -> "30064771091"  [ label = "AST: "] 
  "30064771091" -> "90194313221"  [ label = "AST: "] 
  "47244640260" -> "30064771092"  [ label = "AST: "] 
  "47244640260" -> "25769803782"  [ label = "AST: "] 
  "30064771092" -> "30064771093"  [ label = "AST: "] 
  "30064771092" -> "30064771094"  [ label = "AST: "] 
  "30064771094" -> "30064771095"  [ label = "AST: "] 
  "25769803782" -> "146028888067"  [ label = "AST: "] 
  "146028888067" -> "30064771096"  [ label = "AST: "] 
  "30064771096" -> "90194313222"  [ label = "AST: "] 
  "47244640261" -> "30064771097"  [ label = "AST: "] 
  "47244640261" -> "25769803783"  [ label = "AST: "] 
  "30064771097" -> "30064771098"  [ label = "AST: "] 
  "30064771097" -> "30064771099"  [ label = "AST: "] 
  "30064771098" -> "68719476744"  [ label = "AST: "] 
  "30064771099" -> "30064771100"  [ label = "AST: "] 
  "30064771100" -> "30064771101"  [ label = "AST: "] 
  "30064771101" -> "68719476745"  [ label = "AST: "] 
  "30064771101" -> "90194313223"  [ label = "AST: "] 
  "25769803783" -> "146028888068"  [ label = "AST: "] 
  "146028888068" -> "30064771102"  [ label = "AST: "] 
  "30064771102" -> "90194313224"  [ label = "AST: "] 
  "30064771102" -> "30064771103"  [ label = "AST: "] 
  "30064771103" -> "90194313225"  [ label = "AST: "] 
  "47244640262" -> "25769803784"  [ label = "AST: "] 
  "47244640262" -> "30064771105"  [ label = "AST: "] 
  "47244640262" -> "30064771107"  [ label = "AST: "] 
  "47244640262" -> "47244640263"  [ label = "AST: "] 
  "25769803784" -> "94489280512"  [ label = "AST: "] 
  "25769803784" -> "30064771104"  [ label = "AST: "] 
  "30064771104" -> "68719476746"  [ label = "AST: "] 
  "30064771104" -> "90194313226"  [ label = "AST: "] 
  "30064771105" -> "68719476747"  [ label = "AST: "] 
  "30064771105" -> "30064771106"  [ label = "AST: "] 
  "30064771106" -> "68719476748"  [ label = "AST: "] 
  "30064771107" -> "68719476749"  [ label = "AST: "] 
  "47244640263" -> "30064771108"  [ label = "AST: "] 
  "47244640263" -> "25769803785"  [ label = "AST: "] 
  "30064771108" -> "30064771109"  [ label = "AST: "] 
  "30064771109" -> "68719476750"  [ label = "AST: "] 
  "30064771109" -> "68719476751"  [ label = "AST: "] 
  "25769803785" -> "146028888069"  [ label = "AST: "] 
  "146028888069" -> "30064771110"  [ label = "AST: "] 
  "30064771110" -> "90194313227"  [ label = "AST: "] 
  "30064771110" -> "30064771111"  [ label = "AST: "] 
  "30064771111" -> "90194313228"  [ label = "AST: "] 
  "47244640264" -> "30064771112"  [ label = "AST: "] 
  "47244640264" -> "25769803786"  [ label = "AST: "] 
  "30064771112" -> "30064771113"  [ label = "AST: "] 
  "30064771112" -> "30064771114"  [ label = "AST: "] 
  "30064771114" -> "30064771115"  [ label = "AST: "] 
  "30064771115" -> "184683593728"  [ label = "AST: "] 
  "30064771115" -> "30064771116"  [ label = "AST: "] 
  "30064771116" -> "30064771117"  [ label = "AST: "] 
  "30064771116" -> "55834574848"  [ label = "AST: "] 
  "30064771117" -> "68719476752"  [ label = "AST: "] 
  "30064771117" -> "90194313229"  [ label = "AST: "] 
  "25769803786" -> "146028888070"  [ label = "AST: "] 
  "146028888070" -> "30064771118"  [ label = "AST: "] 
  "30064771118" -> "90194313230"  [ label = "AST: "] 
  "30064771118" -> "30064771119"  [ label = "AST: "] 
  "30064771119" -> "90194313231"  [ label = "AST: "] 
  "47244640265" -> "30064771120"  [ label = "AST: "] 
  "47244640265" -> "25769803787"  [ label = "AST: "] 
  "25769803787" -> "47244640266"  [ label = "AST: "] 
  "25769803787" -> "47244640267"  [ label = "AST: "] 
  "25769803787" -> "47244640268"  [ label = "AST: "] 
  "25769803787" -> "47244640270"  [ label = "AST: "] 
  "47244640266" -> "30064771121"  [ label = "AST: "] 
  "47244640266" -> "25769803788"  [ label = "AST: "] 
  "30064771121" -> "30064771122"  [ label = "AST: "] 
  "30064771121" -> "30064771126"  [ label = "AST: "] 
  "30064771122" -> "30064771123"  [ label = "AST: "] 
  "30064771122" -> "90194313233"  [ label = "AST: "] 
  "30064771123" -> "30064771124"  [ label = "AST: "] 
  "30064771124" -> "30064771125"  [ label = "AST: "] 
  "30064771124" -> "55834574849"  [ label = "AST: "] 
  "30064771125" -> "68719476753"  [ label = "AST: "] 
  "30064771125" -> "90194313232"  [ label = "AST: "] 
  "30064771126" -> "30064771127"  [ label = "AST: "] 
  "30064771127" -> "30064771128"  [ label = "AST: "] 
  "30064771128" -> "30064771129"  [ label = "AST: "] 
  "30064771128" -> "90194313235"  [ label = "AST: "] 
  "30064771129" -> "30064771130"  [ label = "AST: "] 
  "30064771129" -> "55834574850"  [ label = "AST: "] 
  "30064771130" -> "68719476754"  [ label = "AST: "] 
  "30064771130" -> "90194313234"  [ label = "AST: "] 
  "25769803788" -> "146028888071"  [ label = "AST: "] 
  "146028888071" -> "30064771131"  [ label = "AST: "] 
  "30064771131" -> "90194313236"  [ label = "AST: "] 
  "30064771131" -> "30064771132"  [ label = "AST: "] 
  "30064771132" -> "90194313237"  [ label = "AST: "] 
  "47244640267" -> "30064771133"  [ label = "AST: "] 
  "47244640267" -> "25769803789"  [ label = "AST: "] 
  "30064771133" -> "30064771134"  [ label = "AST: "] 
  "30064771133" -> "30064771135"  [ label = "AST: "] 
  "30064771134" -> "68719476755"  [ label = "AST: "] 
  "30064771135" -> "30064771136"  [ label = "AST: "] 
  "30064771136" -> "30064771137"  [ label = "AST: "] 
  "30064771137" -> "68719476756"  [ label = "AST: "] 
  "30064771137" -> "90194313238"  [ label = "AST: "] 
  "25769803789" -> "146028888072"  [ label = "AST: "] 
  "146028888072" -> "30064771138"  [ label = "AST: "] 
  "30064771138" -> "90194313239"  [ label = "AST: "] 
  "30064771138" -> "30064771139"  [ label = "AST: "] 
  "30064771139" -> "90194313240"  [ label = "AST: "] 
  "47244640268" -> "25769803790"  [ label = "AST: "] 
  "47244640268" -> "30064771141"  [ label = "AST: "] 
  "47244640268" -> "30064771143"  [ label = "AST: "] 
  "47244640268" -> "47244640269"  [ label = "AST: "] 
  "25769803790" -> "94489280513"  [ label = "AST: "] 
  "25769803790" -> "30064771140"  [ label = "AST: "] 
  "30064771140" -> "68719476757"  [ label = "AST: "] 
  "30064771140" -> "90194313241"  [ label = "AST: "] 
  "30064771141" -> "68719476758"  [ label = "AST: "] 
  "30064771141" -> "30064771142"  [ label = "AST: "] 
  "30064771142" -> "68719476759"  [ label = "AST: "] 
  "30064771143" -> "68719476760"  [ label = "AST: "] 
  "47244640269" -> "30064771144"  [ label = "AST: "] 
  "47244640269" -> "25769803791"  [ label = "AST: "] 
  "30064771144" -> "30064771145"  [ label = "AST: "] 
  "30064771145" -> "68719476761"  [ label = "AST: "] 
  "30064771145" -> "68719476762"  [ label = "AST: "] 
  "25769803791" -> "146028888073"  [ label = "AST: "] 
  "146028888073" -> "30064771146"  [ label = "AST: "] 
  "30064771146" -> "90194313242"  [ label = "AST: "] 
  "30064771146" -> "30064771147"  [ label = "AST: "] 
  "30064771147" -> "90194313243"  [ label = "AST: "] 
  "47244640270" -> "30064771148"  [ label = "AST: "] 
  "47244640270" -> "25769803792"  [ label = "AST: "] 
  "30064771148" -> "30064771149"  [ label = "AST: "] 
  "25769803792" -> "146028888074"  [ label = "AST: "] 
  "146028888074" -> "30064771150"  [ label = "AST: "] 
  "30064771150" -> "90194313244"  [ label = "AST: "] 
  "30064771150" -> "30064771151"  [ label = "AST: "] 
  "30064771151" -> "90194313245"  [ label = "AST: "] 
  "47244640271" -> "30064771152"  [ label = "AST: "] 
  "47244640271" -> "25769803793"  [ label = "AST: "] 
  "30064771152" -> "68719476763"  [ label = "AST: "] 
  "30064771152" -> "30064771153"  [ label = "AST: "] 
  "25769803793" -> "146028888075"  [ label = "AST: "] 
  "146028888075" -> "30064771154"  [ label = "AST: "] 
  "30064771154" -> "90194313246"  [ label = "AST: "] 
  "30064771154" -> "30064771155"  [ label = "AST: "] 
  "30064771155" -> "90194313247"  [ label = "AST: "] 
  "30064771156" -> "30064771157"  [ label = "AST: "] 
  "30064771156" -> "68719476766"  [ label = "AST: "] 
  "30064771157" -> "68719476764"  [ label = "AST: "] 
  "30064771157" -> "68719476765"  [ label = "AST: "] 
  "47244640272" -> "30064771158"  [ label = "AST: "] 
  "47244640272" -> "25769803794"  [ label = "AST: "] 
  "30064771158" -> "30064771159"  [ label = "AST: "] 
  "30064771158" -> "30064771160"  [ label = "AST: "] 
  "30064771159" -> "68719476767"  [ label = "AST: "] 
  "30064771160" -> "68719476768"  [ label = "AST: "] 
  "25769803794" -> "146028888076"  [ label = "AST: "] 
  "146028888076" -> "30064771161"  [ label = "AST: "] 
  "30064771161" -> "90194313248"  [ label = "AST: "] 
  "30064771161" -> "30064771162"  [ label = "AST: "] 
  "30064771162" -> "90194313249"  [ label = "AST: "] 
  "30064771163" -> "68719476769"  [ label = "AST: "] 
  "30064771163" -> "90194313250"  [ label = "AST: "] 
  "47244640273" -> "30064771164"  [ label = "AST: "] 
  "47244640273" -> "25769803795"  [ label = "AST: "] 
  "30064771164" -> "68719476770"  [ label = "AST: "] 
  "30064771164" -> "68719476771"  [ label = "AST: "] 
  "25769803795" -> "146028888077"  [ label = "AST: "] 
  "146028888077" -> "30064771165"  [ label = "AST: "] 
  "30064771165" -> "90194313251"  [ label = "AST: "] 
  "30064771165" -> "30064771166"  [ label = "AST: "] 
  "30064771166" -> "90194313252"  [ label = "AST: "] 
  "146028888078" -> "90194313253"  [ label = "AST: "] 
  "30064771156" -> "30064771159"  [ label = "CFG: "] 
  "30064771163" -> "30064771164"  [ label = "CFG: "] 
  "146028888078" -> "128849018880"  [ label = "CFG: "] 
  "30064771072" -> "30064771082"  [ label = "CFG: "] 
  "30064771072" -> "30064771081"  [ label = "CFG: "] 
  "30064771082" -> "30064771085"  [ label = "CFG: "] 
  "30064771082" -> "30064771093"  [ label = "CFG: "] 
  "30064771092" -> "30064771096"  [ label = "CFG: "] 
  "30064771092" -> "30064771098"  [ label = "CFG: "] 
  "30064771097" -> "30064771103"  [ label = "CFG: "] 
  "30064771097" -> "30064771104"  [ label = "CFG: "] 
  "30064771105" -> "30064771113"  [ label = "CFG: "] 
  "30064771105" -> "30064771109"  [ label = "CFG: "] 
  "30064771107" -> "30064771106"  [ label = "CFG: "] 
  "30064771112" -> "30064771120"  [ label = "CFG: "] 
  "30064771112" -> "30064771119"  [ label = "CFG: "] 
  "30064771120" -> "30064771125"  [ label = "CFG: "] 
  "30064771120" -> "30064771153"  [ label = "CFG: "] 
  "30064771152" -> "30064771155"  [ label = "CFG: "] 
  "30064771152" -> "30064771157"  [ label = "CFG: "] 
  "30064771157" -> "30064771156"  [ label = "CFG: "] 
  "30064771158" -> "30064771162"  [ label = "CFG: "] 
  "30064771158" -> "30064771163"  [ label = "CFG: "] 
  "30064771164" -> "30064771166"  [ label = "CFG: "] 
  "30064771164" -> "146028888078"  [ label = "CFG: "] 
  "30064771073" -> "30064771072"  [ label = "CFG: "] 
  "30064771073" -> "30064771079"  [ label = "CFG: "] 
  "30064771077" -> "30064771072"  [ label = "CFG: "] 
  "146028888064" -> "128849018880"  [ label = "CFG: "] 
  "30064771093" -> "30064771095"  [ label = "CFG: "] 
  "30064771094" -> "30064771092"  [ label = "CFG: "] 
  "146028888067" -> "128849018880"  [ label = "CFG: "] 
  "30064771098" -> "30064771097"  [ label = "CFG: "] 
  "30064771098" -> "30064771101"  [ label = "CFG: "] 
  "30064771099" -> "30064771097"  [ label = "CFG: "] 
  "146028888068" -> "128849018880"  [ label = "CFG: "] 
  "30064771104" -> "30064771106"  [ label = "CFG: "] 
  "30064771106" -> "30064771105"  [ label = "CFG: "] 
  "30064771108" -> "30064771111"  [ label = "CFG: "] 
  "30064771108" -> "30064771107"  [ label = "CFG: "] 
  "30064771113" -> "184683593728"  [ label = "CFG: "] 
  "30064771114" -> "30064771112"  [ label = "CFG: "] 
  "146028888070" -> "128849018880"  [ label = "CFG: "] 
  "30064771153" -> "30064771152"  [ label = "CFG: "] 
  "146028888075" -> "128849018880"  [ label = "CFG: "] 
  "30064771159" -> "30064771160"  [ label = "CFG: "] 
  "30064771160" -> "30064771158"  [ label = "CFG: "] 
  "146028888076" -> "128849018880"  [ label = "CFG: "] 
  "146028888077" -> "128849018880"  [ label = "CFG: "] 
  "30064771074" -> "30064771073"  [ label = "CFG: "] 
  "30064771074" -> "30064771076"  [ label = "CFG: "] 
  "30064771075" -> "30064771073"  [ label = "CFG: "] 
  "30064771078" -> "30064771077"  [ label = "CFG: "] 
  "30064771080" -> "146028888064"  [ label = "CFG: "] 
  "30064771083" -> "30064771089"  [ label = "CFG: "] 
  "30064771083" -> "30064771087"  [ label = "CFG: "] 
  "30064771088" -> "30064771093"  [ label = "CFG: "] 
  "30064771088" -> "30064771091"  [ label = "CFG: "] 
  "30064771095" -> "30064771094"  [ label = "CFG: "] 
  "30064771096" -> "146028888067"  [ label = "CFG: "] 
  "30064771100" -> "30064771099"  [ label = "CFG: "] 
  "30064771102" -> "146028888068"  [ label = "CFG: "] 
  "30064771109" -> "30064771108"  [ label = "CFG: "] 
  "146028888069" -> "128849018880"  [ label = "CFG: "] 
  "30064771115" -> "30064771114"  [ label = "CFG: "] 
  "30064771118" -> "146028888070"  [ label = "CFG: "] 
  "30064771121" -> "30064771132"  [ label = "CFG: "] 
  "30064771121" -> "30064771134"  [ label = "CFG: "] 
  "30064771133" -> "30064771139"  [ label = "CFG: "] 
  "30064771133" -> "30064771140"  [ label = "CFG: "] 
  "30064771141" -> "30064771149"  [ label = "CFG: "] 
  "30064771141" -> "30064771145"  [ label = "CFG: "] 
  "30064771143" -> "30064771142"  [ label = "CFG: "] 
  "30064771148" -> "30064771151"  [ label = "CFG: "] 
  "30064771148" -> "30064771153"  [ label = "CFG: "] 
  "30064771154" -> "146028888075"  [ label = "CFG: "] 
  "30064771161" -> "146028888076"  [ label = "CFG: "] 
  "30064771165" -> "146028888077"  [ label = "CFG: "] 
  "30064771076" -> "30064771075"  [ label = "CFG: "] 
  "30064771079" -> "30064771078"  [ label = "CFG: "] 
  "30064771081" -> "30064771080"  [ label = "CFG: "] 
  "30064771084" -> "30064771083"  [ label = "CFG: "] 
  "146028888065" -> "128849018880"  [ label = "CFG: "] 
  "30064771089" -> "30064771088"  [ label = "CFG: "] 
  "146028888066" -> "128849018880"  [ label = "CFG: "] 
  "30064771101" -> "30064771100"  [ label = "CFG: "] 
  "30064771103" -> "30064771102"  [ label = "CFG: "] 
  "30064771110" -> "146028888069"  [ label = "CFG: "] 
  "184683593728" -> "30064771117"  [ label = "CFG: "] 
  "30064771116" -> "30064771115"  [ label = "CFG: "] 
  "30064771119" -> "30064771118"  [ label = "CFG: "] 
  "30064771122" -> "30064771121"  [ label = "CFG: "] 
  "30064771122" -> "30064771130"  [ label = "CFG: "] 
  "30064771126" -> "30064771121"  [ label = "CFG: "] 
  "146028888071" -> "128849018880"  [ label = "CFG: "] 
  "30064771134" -> "30064771133"  [ label = "CFG: "] 
  "30064771134" -> "30064771137"  [ label = "CFG: "] 
  "30064771135" -> "30064771133"  [ label = "CFG: "] 
  "146028888072" -> "128849018880"  [ label = "CFG: "] 
  "30064771140" -> "30064771142"  [ label = "CFG: "] 
  "30064771142" -> "30064771141"  [ label = "CFG: "] 
  "30064771144" -> "30064771147"  [ label = "CFG: "] 
  "30064771144" -> "30064771143"  [ label = "CFG: "] 
  "30064771149" -> "30064771148"  [ label = "CFG: "] 
  "146028888074" -> "128849018880"  [ label = "CFG: "] 
  "30064771155" -> "30064771154"  [ label = "CFG: "] 
  "30064771162" -> "30064771161"  [ label = "CFG: "] 
  "30064771166" -> "30064771165"  [ label = "CFG: "] 
  "30064771085" -> "30064771084"  [ label = "CFG: "] 
  "30064771086" -> "146028888065"  [ label = "CFG: "] 
  "30064771090" -> "146028888066"  [ label = "CFG: "] 
  "30064771111" -> "30064771110"  [ label = "CFG: "] 
  "30064771117" -> "55834574848"  [ label = "CFG: "] 
  "55834574848" -> "30064771116"  [ label = "CFG: "] 
  "30064771123" -> "30064771122"  [ label = "CFG: "] 
  "30064771127" -> "30064771126"  [ label = "CFG: "] 
  "30064771131" -> "146028888071"  [ label = "CFG: "] 
  "30064771136" -> "30064771135"  [ label = "CFG: "] 
  "30064771138" -> "146028888072"  [ label = "CFG: "] 
  "30064771145" -> "30064771144"  [ label = "CFG: "] 
  "146028888073" -> "128849018880"  [ label = "CFG: "] 
  "30064771150" -> "146028888074"  [ label = "CFG: "] 
  "30064771087" -> "30064771086"  [ label = "CFG: "] 
  "30064771091" -> "30064771090"  [ label = "CFG: "] 
  "30064771124" -> "30064771123"  [ label = "CFG: "] 
  "30064771128" -> "30064771127"  [ label = "CFG: "] 
  "30064771132" -> "30064771131"  [ label = "CFG: "] 
  "30064771137" -> "30064771136"  [ label = "CFG: "] 
  "30064771139" -> "30064771138"  [ label = "CFG: "] 
  "30064771146" -> "146028888073"  [ label = "CFG: "] 
  "30064771151" -> "30064771150"  [ label = "CFG: "] 
  "30064771125" -> "55834574849"  [ label = "CFG: "] 
  "55834574849" -> "30064771124"  [ label = "CFG: "] 
  "30064771129" -> "30064771128"  [ label = "CFG: "] 
  "30064771147" -> "30064771146"  [ label = "CFG: "] 
  "30064771130" -> "55834574850"  [ label = "CFG: "] 
  "55834574850" -> "30064771129"  [ label = "CFG: "] 
  "111669149697" -> "30064771074"  [ label = "CFG: "] 
  "146028888067" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888078" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888074" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888071" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888077" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888072" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888073" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888068" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888064" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888069" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888076" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888066" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888065" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888070" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888075" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "30064771074" -> "128849018880"  [ label = "DDG: vtx"] 
  "30064771073" -> "128849018880"  [ label = "DDG: vtx.empty()"] 
  "30064771076" -> "128849018880"  [ label = "DDG: vtx"] 
  "30064771075" -> "128849018880"  [ label = "DDG: vtx.size()"] 
  "30064771075" -> "128849018880"  [ label = "DDG: MAX_BLOCK_SIZE"] 
  "30064771073" -> "128849018880"  [ label = "DDG: vtx.size() &gt; MAX_BLOCK_SIZE"] 
  "30064771072" -> "128849018880"  [ label = "DDG: vtx.empty() || vtx.size() &gt; MAX_BLOCK_SIZE"] 
  "30064771078" -> "128849018880"  [ label = "DDG: *this"] 
  "30064771078" -> "128849018880"  [ label = "DDG: SER_NETWORK"] 
  "30064771077" -> "128849018880"  [ label = "DDG: ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION)"] 
  "30064771077" -> "128849018880"  [ label = "DDG: MAX_BLOCK_SIZE"] 
  "30064771072" -> "128849018880"  [ label = "DDG: ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) &gt; MAX_BLOCK_SIZE"] 
  "30064771072" -> "128849018880"  [ label = "DDG: vtx.empty() || vtx.size() &gt; MAX_BLOCK_SIZE || ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION) &gt; MAX_BLOCK_SIZE"] 
  "30064771080" -> "128849018880"  [ label = "DDG: error(&quot;CheckBlock() : size limits failed&quot;)"] 
  "30064771080" -> "128849018880"  [ label = "DDG: DoS(100, error(&quot;CheckBlock() : size limits failed&quot;))"] 
  "30064771164" -> "128849018880"  [ label = "DDG: MAX_BLOCK_SIGOPS"] 
  "30064771152" -> "128849018880"  [ label = "DDG: hashMerkleRoot"] 
  "30064771078" -> "128849018880"  [ label = "DDG: PROTOCOL_VERSION"] 
  "30064771157" -> "128849018880"  [ label = "DDG: uint256"] 
  "30064771084" -> "128849018880"  [ label = "DDG: nBits"] 
  "111669149697" -> "30064771163"  [ label = "DDG: "] 
  "90194313253" -> "146028888078"  [ label = "DDG: true"] 
  "111669149697" -> "146028888078"  [ label = "DDG: "] 
  "111669149697" -> "30064771082"  [ label = "DDG: "] 
  "111669149697" -> "30064771120"  [ label = "DDG: "] 
  "30064771157" -> "30064771156"  [ label = "DDG: set"] 
  "30064771157" -> "30064771156"  [ label = "DDG: uint256"] 
  "111669149697" -> "30064771156"  [ label = "DDG: "] 
  "111669149697" -> "90194313253"  [ label = "DDG: "] 
  "30064771073" -> "30064771072"  [ label = "DDG: vtx.empty()"] 
  "30064771073" -> "30064771072"  [ label = "DDG: vtx.size() &gt; MAX_BLOCK_SIZE"] 
  "30064771077" -> "30064771072"  [ label = "DDG: ::GetSerializeSize(*this, SER_NETWORK, PROTOCOL_VERSION)"] 
  "30064771077" -> "30064771072"  [ label = "DDG: MAX_BLOCK_SIZE"] 
  "30064771080" -> "146028888064"  [ label = "DDG: DoS(100, error(&quot;CheckBlock() : size limits failed&quot;))"] 
  "111669149697" -> "30064771092"  [ label = "DDG: "] 
  "30064771094" -> "30064771092"  [ label = "DDG: GetAdjustedTime()"] 
  "30064771096" -> "146028888067"  [ label = "DDG: error(&quot;CheckBlock() : block timestamp too far in the future&quot;)"] 
  "30064771098" -> "30064771097"  [ label = "DDG: vtx"] 
  "30064771099" -> "30064771097"  [ label = "DDG: vtx[0].IsCoinBase()"] 
  "30064771102" -> "146028888068"  [ label = "DDG: DoS(100, error(&quot;CheckBlock() : first tx is not coinbase&quot;))"] 
  "111669149697" -> "30064771104"  [ label = "DDG: "] 
  "30064771104" -> "30064771105"  [ label = "DDG: i"] 
  "30064771107" -> "30064771105"  [ label = "DDG: i"] 
  "111669149697" -> "30064771105"  [ label = "DDG: "] 
  "30064771106" -> "30064771105"  [ label = "DDG: vtx"] 
  "30064771105" -> "30064771107"  [ label = "DDG: i"] 
  "111669149697" -> "30064771107"  [ label = "DDG: "] 
  "111669149697" -> "30064771112"  [ label = "DDG: "] 
  "30064771114" -> "30064771112"  [ label = "DDG: (int64_t)vtx[0].nTime"] 
  "30064771118" -> "146028888070"  [ label = "DDG: DoS(50, error(&quot;CheckBlock() : coinbase timestamp is too early&quot;))"] 
  "111669149697" -> "30064771152"  [ label = "DDG: "] 
  "30064771154" -> "146028888075"  [ label = "DDG: DoS(100, error(&quot;CheckBlock() : merkle root verification failed&quot;))"] 
  "111669149697" -> "30064771157"  [ label = "DDG: "] 
  "30064771159" -> "30064771158"  [ label = "DDG: uniqueTx"] 
  "30064771160" -> "30064771158"  [ label = "DDG: vtx"] 
  "30064771161" -> "146028888076"  [ label = "DDG: DoS(100, error(&quot;CheckBlock() : duplicate transaction found&quot;))"] 
  "30064771163" -> "30064771164"  [ label = "DDG: nSigOps"] 
  "111669149697" -> "30064771164"  [ label = "DDG: "] 
  "30064771165" -> "146028888077"  [ label = "DDG: DoS(100, error(&quot;CheckBlock() : out-of-bounds SigOpCount&quot;))"] 
  "30064771074" -> "30064771073"  [ label = "DDG: vtx"] 
  "30064771075" -> "30064771073"  [ label = "DDG: vtx.size()"] 
  "30064771075" -> "30064771073"  [ label = "DDG: MAX_BLOCK_SIZE"] 
  "30064771078" -> "30064771077"  [ label = "DDG: *this"] 
  "30064771078" -> "30064771077"  [ label = "DDG: SER_NETWORK"] 
  "30064771078" -> "30064771077"  [ label = "DDG: PROTOCOL_VERSION"] 
  "30064771075" -> "30064771077"  [ label = "DDG: MAX_BLOCK_SIZE"] 
  "111669149697" -> "30064771077"  [ label = "DDG: "] 
  "111669149697" -> "30064771094"  [ label = "DDG: "] 
  "30064771074" -> "30064771098"  [ label = "DDG: vtx"] 
  "30064771076" -> "30064771098"  [ label = "DDG: vtx"] 
  "111669149697" -> "30064771098"  [ label = "DDG: "] 
  "30064771100" -> "30064771099"  [ label = "DDG: vtx[0]"] 
  "30064771098" -> "30064771106"  [ label = "DDG: vtx"] 
  "30064771100" -> "30064771106"  [ label = "DDG: vtx[0]"] 
  "30064771108" -> "30064771106"  [ label = "DDG: vtx[i]"] 
  "111669149697" -> "30064771106"  [ label = "DDG: "] 
  "30064771106" -> "30064771108"  [ label = "DDG: vtx"] 
  "30064771110" -> "146028888069"  [ label = "DDG: DoS(100, error(&quot;CheckBlock() : more than one coinbase&quot;))"] 
  "30064771156" -> "30064771159"  [ label = "DDG: uniqueTx"] 
  "111669149697" -> "30064771159"  [ label = "DDG: "] 
  "30064771100" -> "30064771160"  [ label = "DDG: vtx[0]"] 
  "30064771106" -> "30064771160"  [ label = "DDG: vtx"] 
  "30064771136" -> "30064771160"  [ label = "DDG: vtx[1]"] 
  "30064771142" -> "30064771160"  [ label = "DDG: vtx"] 
  "30064771144" -> "30064771160"  [ label = "DDG: vtx[i]"] 
  "30064771108" -> "30064771160"  [ label = "DDG: vtx[i]"] 
  "111669149697" -> "30064771160"  [ label = "DDG: "] 
  "111669149697" -> "30064771074"  [ label = "DDG: "] 
  "30064771076" -> "30064771075"  [ label = "DDG: vtx"] 
  "111669149697" -> "30064771075"  [ label = "DDG: "] 
  "111669149697" -> "30064771078"  [ label = "DDG: "] 
  "111669149697" -> "30064771080"  [ label = "DDG: "] 
  "30064771081" -> "30064771080"  [ label = "DDG: &quot;CheckBlock() : size limits failed&quot;"] 
  "30064771084" -> "30064771083"  [ label = "DDG: GetHashPoW()"] 
  "30064771084" -> "30064771083"  [ label = "DDG: nBits"] 
  "30064771086" -> "146028888065"  [ label = "DDG: DoS(50, error(&quot;CheckBlock() : proof-of-work verification failed&quot;))"] 
  "111669149697" -> "30064771088"  [ label = "DDG: "] 
  "30064771090" -> "146028888066"  [ label = "DDG: DoS(100, error(&quot;CheckBlock() : bad proof-of-work block signature&quot;))"] 
  "111669149697" -> "30064771096"  [ label = "DDG: "] 
  "30064771098" -> "30064771100"  [ label = "DDG: vtx"] 
  "111669149697" -> "30064771102"  [ label = "DDG: "] 
  "30064771103" -> "30064771102"  [ label = "DDG: &quot;CheckBlock() : first tx is not coinbase&quot;"] 
  "111669149697" -> "30064771118"  [ label = "DDG: "] 
  "30064771119" -> "30064771118"  [ label = "DDG: &quot;CheckBlock() : coinbase timestamp is too early&quot;"] 
  "30064771122" -> "30064771121"  [ label = "DDG: vtx[0].vout.size()"] 
  "30064771122" -> "30064771121"  [ label = "DDG: 1"] 
  "30064771126" -> "30064771121"  [ label = "DDG: vtx[0].vout[0].IsEmpty()"] 
  "30064771131" -> "146028888071"  [ label = "DDG: DoS(100, error(&quot;CheckBlock() : coinbase output not empty for proof-of-stake block&quot;))"] 
  "30064771134" -> "30064771133"  [ label = "DDG: vtx"] 
  "30064771135" -> "30064771133"  [ label = "DDG: vtx[1].IsCoinStake()"] 
  "30064771138" -> "146028888072"  [ label = "DDG: DoS(100, error(&quot;CheckBlock() : second tx is not coinstake&quot;))"] 
  "111669149697" -> "30064771140"  [ label = "DDG: "] 
  "30064771140" -> "30064771141"  [ label = "DDG: i"] 
  "30064771143" -> "30064771141"  [ label = "DDG: i"] 
  "111669149697" -> "30064771141"  [ label = "DDG: "] 
  "30064771142" -> "30064771141"  [ label = "DDG: vtx"] 
  "30064771141" -> "30064771143"  [ label = "DDG: i"] 
  "111669149697" -> "30064771143"  [ label = "DDG: "] 
  "111669149697" -> "30064771148"  [ label = "DDG: "] 
  "30064771150" -> "146028888074"  [ label = "DDG: DoS(100, error(&quot;CheckBlock() : bad proof-of-stake block signature&quot;))"] 
  "111669149697" -> "30064771154"  [ label = "DDG: "] 
  "30064771155" -> "30064771154"  [ label = "DDG: &quot;CheckBlock() : merkle root verification failed&quot;"] 
  "111669149697" -> "30064771161"  [ label = "DDG: "] 
  "30064771162" -> "30064771161"  [ label = "DDG: &quot;CheckBlock() : duplicate transaction found&quot;"] 
  "111669149697" -> "30064771165"  [ label = "DDG: "] 
  "30064771166" -> "30064771165"  [ label = "DDG: &quot;CheckBlock() : out-of-bounds SigOpCount&quot;"] 
  "30064771074" -> "30064771076"  [ label = "DDG: vtx"] 
  "111669149697" -> "30064771076"  [ label = "DDG: "] 
  "111669149697" -> "30064771081"  [ label = "DDG: "] 
  "111669149697" -> "30064771084"  [ label = "DDG: "] 
  "111669149697" -> "30064771103"  [ label = "DDG: "] 
  "111669149697" -> "30064771110"  [ label = "DDG: "] 
  "30064771111" -> "30064771110"  [ label = "DDG: &quot;CheckBlock() : more than one coinbase&quot;"] 
  "111669149697" -> "30064771119"  [ label = "DDG: "] 
  "30064771123" -> "30064771122"  [ label = "DDG: vtx[0].vout"] 
  "111669149697" -> "30064771122"  [ label = "DDG: "] 
  "30064771127" -> "30064771126"  [ label = "DDG: vtx[0].vout[0]"] 
  "30064771100" -> "30064771134"  [ label = "DDG: vtx[0]"] 
  "30064771106" -> "30064771134"  [ label = "DDG: vtx"] 
  "30064771108" -> "30064771134"  [ label = "DDG: vtx[i]"] 
  "111669149697" -> "30064771134"  [ label = "DDG: "] 
  "30064771136" -> "30064771135"  [ label = "DDG: vtx[1]"] 
  "30064771100" -> "30064771142"  [ label = "DDG: vtx[0]"] 
  "30064771134" -> "30064771142"  [ label = "DDG: vtx"] 
  "30064771136" -> "30064771142"  [ label = "DDG: vtx[1]"] 
  "30064771144" -> "30064771142"  [ label = "DDG: vtx[i]"] 
  "30064771108" -> "30064771142"  [ label = "DDG: vtx[i]"] 
  "111669149697" -> "30064771142"  [ label = "DDG: "] 
  "30064771142" -> "30064771144"  [ label = "DDG: vtx"] 
  "30064771108" -> "30064771144"  [ label = "DDG: vtx[i]"] 
  "30064771146" -> "146028888073"  [ label = "DDG: DoS(100, error(&quot;CheckBlock() : more than one coinstake&quot;))"] 
  "111669149697" -> "30064771155"  [ label = "DDG: "] 
  "111669149697" -> "30064771162"  [ label = "DDG: "] 
  "111669149697" -> "30064771166"  [ label = "DDG: "] 
  "111669149697" -> "30064771086"  [ label = "DDG: "] 
  "30064771087" -> "30064771086"  [ label = "DDG: &quot;CheckBlock() : proof-of-work verification failed&quot;"] 
  "111669149697" -> "30064771090"  [ label = "DDG: "] 
  "30064771091" -> "30064771090"  [ label = "DDG: &quot;CheckBlock() : bad proof-of-work block signature&quot;"] 
  "111669149697" -> "30064771111"  [ label = "DDG: "] 
  "111669149697" -> "30064771131"  [ label = "DDG: "] 
  "30064771132" -> "30064771131"  [ label = "DDG: &quot;CheckBlock() : coinbase output not empty for proof-of-stake block&quot;"] 
  "30064771134" -> "30064771136"  [ label = "DDG: vtx"] 
  "111669149697" -> "30064771138"  [ label = "DDG: "] 
  "30064771139" -> "30064771138"  [ label = "DDG: &quot;CheckBlock() : second tx is not coinstake&quot;"] 
  "111669149697" -> "30064771150"  [ label = "DDG: "] 
  "30064771151" -> "30064771150"  [ label = "DDG: &quot;CheckBlock() : bad proof-of-stake block signature&quot;"] 
  "111669149697" -> "30064771087"  [ label = "DDG: "] 
  "111669149697" -> "30064771091"  [ label = "DDG: "] 
  "111669149697" -> "30064771132"  [ label = "DDG: "] 
  "111669149697" -> "30064771139"  [ label = "DDG: "] 
  "111669149697" -> "30064771146"  [ label = "DDG: "] 
  "30064771147" -> "30064771146"  [ label = "DDG: &quot;CheckBlock() : more than one coinstake&quot;"] 
  "111669149697" -> "30064771151"  [ label = "DDG: "] 
  "111669149697" -> "30064771147"  [ label = "DDG: "] 
  "30064771072" -> "146028888064"  [ label = "CDG: "] 
  "30064771072" -> "30064771080"  [ label = "CDG: "] 
  "30064771072" -> "30064771081"  [ label = "CDG: "] 
  "30064771072" -> "30064771082"  [ label = "CDG: "] 
  "30064771082" -> "30064771083"  [ label = "CDG: "] 
  "30064771082" -> "30064771084"  [ label = "CDG: "] 
  "30064771082" -> "30064771085"  [ label = "CDG: "] 
  "30064771082" -> "30064771092"  [ label = "CDG: "] 
  "30064771082" -> "30064771093"  [ label = "CDG: "] 
  "30064771082" -> "30064771094"  [ label = "CDG: "] 
  "30064771082" -> "30064771095"  [ label = "CDG: "] 
  "30064771092" -> "146028888067"  [ label = "CDG: "] 
  "30064771092" -> "30064771096"  [ label = "CDG: "] 
  "30064771092" -> "30064771097"  [ label = "CDG: "] 
  "30064771092" -> "30064771098"  [ label = "CDG: "] 
  "30064771097" -> "146028888068"  [ label = "CDG: "] 
  "30064771097" -> "30064771102"  [ label = "CDG: "] 
  "30064771097" -> "30064771103"  [ label = "CDG: "] 
  "30064771097" -> "30064771104"  [ label = "CDG: "] 
  "30064771097" -> "30064771105"  [ label = "CDG: "] 
  "30064771097" -> "30064771106"  [ label = "CDG: "] 
  "30064771105" -> "184683593728"  [ label = "CDG: "] 
  "30064771105" -> "30064771108"  [ label = "CDG: "] 
  "30064771105" -> "30064771109"  [ label = "CDG: "] 
  "30064771105" -> "30064771112"  [ label = "CDG: "] 
  "30064771105" -> "30064771113"  [ label = "CDG: "] 
  "30064771105" -> "30064771114"  [ label = "CDG: "] 
  "30064771105" -> "30064771115"  [ label = "CDG: "] 
  "30064771105" -> "30064771116"  [ label = "CDG: "] 
  "30064771105" -> "30064771117"  [ label = "CDG: "] 
  "30064771105" -> "55834574848"  [ label = "CDG: "] 
  "30064771112" -> "146028888070"  [ label = "CDG: "] 
  "30064771112" -> "30064771118"  [ label = "CDG: "] 
  "30064771112" -> "30064771119"  [ label = "CDG: "] 
  "30064771112" -> "30064771120"  [ label = "CDG: "] 
  "30064771120" -> "30064771152"  [ label = "CDG: "] 
  "30064771120" -> "30064771153"  [ label = "CDG: "] 
  "30064771120" -> "30064771121"  [ label = "CDG: "] 
  "30064771120" -> "30064771122"  [ label = "CDG: "] 
  "30064771120" -> "30064771123"  [ label = "CDG: "] 
  "30064771120" -> "30064771124"  [ label = "CDG: "] 
  "30064771120" -> "30064771125"  [ label = "CDG: "] 
  "30064771120" -> "55834574849"  [ label = "CDG: "] 
  "30064771152" -> "146028888075"  [ label = "CDG: "] 
  "30064771152" -> "30064771154"  [ label = "CDG: "] 
  "30064771152" -> "30064771155"  [ label = "CDG: "] 
  "30064771152" -> "30064771156"  [ label = "CDG: "] 
  "30064771152" -> "30064771157"  [ label = "CDG: "] 
  "30064771152" -> "30064771158"  [ label = "CDG: "] 
  "30064771152" -> "30064771159"  [ label = "CDG: "] 
  "30064771152" -> "30064771160"  [ label = "CDG: "] 
  "30064771158" -> "146028888076"  [ label = "CDG: "] 
  "30064771158" -> "30064771161"  [ label = "CDG: "] 
  "30064771158" -> "30064771162"  [ label = "CDG: "] 
  "30064771158" -> "30064771163"  [ label = "CDG: "] 
  "30064771158" -> "30064771164"  [ label = "CDG: "] 
  "30064771164" -> "30064771165"  [ label = "CDG: "] 
  "30064771164" -> "30064771166"  [ label = "CDG: "] 
  "30064771164" -> "146028888077"  [ label = "CDG: "] 
  "30064771164" -> "146028888078"  [ label = "CDG: "] 
  "30064771073" -> "30064771077"  [ label = "CDG: "] 
  "30064771073" -> "30064771078"  [ label = "CDG: "] 
  "30064771073" -> "30064771079"  [ label = "CDG: "] 
  "30064771098" -> "30064771101"  [ label = "CDG: "] 
  "30064771098" -> "30064771099"  [ label = "CDG: "] 
  "30064771098" -> "30064771100"  [ label = "CDG: "] 
  "30064771108" -> "146028888069"  [ label = "CDG: "] 
  "30064771108" -> "30064771105"  [ label = "CDG: "] 
  "30064771108" -> "30064771106"  [ label = "CDG: "] 
  "30064771108" -> "30064771107"  [ label = "CDG: "] 
  "30064771108" -> "30064771110"  [ label = "CDG: "] 
  "30064771108" -> "30064771111"  [ label = "CDG: "] 
  "30064771074" -> "30064771075"  [ label = "CDG: "] 
  "30064771074" -> "30064771076"  [ label = "CDG: "] 
  "30064771083" -> "146028888065"  [ label = "CDG: "] 
  "30064771083" -> "30064771086"  [ label = "CDG: "] 
  "30064771083" -> "30064771087"  [ label = "CDG: "] 
  "30064771083" -> "30064771088"  [ label = "CDG: "] 
  "30064771083" -> "30064771089"  [ label = "CDG: "] 
  "30064771088" -> "146028888066"  [ label = "CDG: "] 
  "30064771088" -> "30064771090"  [ label = "CDG: "] 
  "30064771088" -> "30064771091"  [ label = "CDG: "] 
  "30064771088" -> "30064771092"  [ label = "CDG: "] 
  "30064771088" -> "30064771093"  [ label = "CDG: "] 
  "30064771088" -> "30064771094"  [ label = "CDG: "] 
  "30064771088" -> "30064771095"  [ label = "CDG: "] 
  "30064771121" -> "30064771133"  [ label = "CDG: "] 
  "30064771121" -> "30064771134"  [ label = "CDG: "] 
  "30064771121" -> "146028888071"  [ label = "CDG: "] 
  "30064771121" -> "30064771131"  [ label = "CDG: "] 
  "30064771121" -> "30064771132"  [ label = "CDG: "] 
  "30064771133" -> "30064771138"  [ label = "CDG: "] 
  "30064771133" -> "30064771139"  [ label = "CDG: "] 
  "30064771133" -> "30064771140"  [ label = "CDG: "] 
  "30064771133" -> "30064771141"  [ label = "CDG: "] 
  "30064771133" -> "30064771142"  [ label = "CDG: "] 
  "30064771133" -> "146028888072"  [ label = "CDG: "] 
  "30064771141" -> "30064771144"  [ label = "CDG: "] 
  "30064771141" -> "30064771145"  [ label = "CDG: "] 
  "30064771141" -> "30064771148"  [ label = "CDG: "] 
  "30064771141" -> "30064771149"  [ label = "CDG: "] 
  "30064771148" -> "30064771150"  [ label = "CDG: "] 
  "30064771148" -> "30064771151"  [ label = "CDG: "] 
  "30064771148" -> "146028888074"  [ label = "CDG: "] 
  "30064771148" -> "30064771152"  [ label = "CDG: "] 
  "30064771148" -> "30064771153"  [ label = "CDG: "] 
  "30064771122" -> "30064771126"  [ label = "CDG: "] 
  "30064771122" -> "30064771127"  [ label = "CDG: "] 
  "30064771122" -> "30064771128"  [ label = "CDG: "] 
  "30064771122" -> "30064771129"  [ label = "CDG: "] 
  "30064771122" -> "30064771130"  [ label = "CDG: "] 
  "30064771122" -> "55834574850"  [ label = "CDG: "] 
  "30064771134" -> "30064771135"  [ label = "CDG: "] 
  "30064771134" -> "30064771136"  [ label = "CDG: "] 
  "30064771134" -> "30064771137"  [ label = "CDG: "] 
  "30064771144" -> "30064771141"  [ label = "CDG: "] 
  "30064771144" -> "30064771142"  [ label = "CDG: "] 
  "30064771144" -> "30064771143"  [ label = "CDG: "] 
  "30064771144" -> "30064771146"  [ label = "CDG: "] 
  "30064771144" -> "30064771147"  [ label = "CDG: "] 
  "30064771144" -> "146028888073"  [ label = "CDG: "] 
}
"""
)
