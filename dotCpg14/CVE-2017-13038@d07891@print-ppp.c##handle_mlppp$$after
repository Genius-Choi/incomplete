[33mval[0m [36mres587[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "handle_mlppp" {  
"111669149697" [label = <(METHOD,handle_mlppp)<SUB>1</SUB>> ]
"115964116992" [label = <(PARAM,netdissect_options *ndo)<SUB>1</SUB>> ]
"115964116993" [label = <(PARAM,const u_char *p)<SUB>2</SUB>> ]
"115964116994" [label = <(PARAM,int length)<SUB>2</SUB>> ]
"25769803777" [label = <(BLOCK,{
    if (!ndo-&gt;ndo_eflag)
        ND_PRINT((nd...,{
    if (!ndo-&gt;ndo_eflag)
        ND_PRINT((nd...)<SUB>3</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,IF,if (!ndo-&gt;ndo_eflag))<SUB>4</SUB>> ]
"30064771072" [label = <(&lt;operator&gt;.logicalNot,!ndo-&gt;ndo_eflag)<SUB>4</SUB>> ]
"30064771073" [label = <(&lt;operator&gt;.indirectFieldAccess,ndo-&gt;ndo_eflag)<SUB>4</SUB>> ]
"68719476736" [label = <(IDENTIFIER,ndo,!ndo-&gt;ndo_eflag)<SUB>4</SUB>> ]
"55834574848" [label = <(FIELD_IDENTIFIER,ndo_eflag,ndo_eflag)<SUB>4</SUB>> ]
"25769803778" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>5</SUB>> ]
"30064771074" [label = <(ND_PRINT,ND_PRINT((ndo, &quot;MLPPP, &quot;)))<SUB>5</SUB>> ]
"30064771075" [label = <(&lt;operator&gt;.bracketedPrimary,(ndo, &quot;MLPPP, &quot;))<SUB>5</SUB>> ]
"30064771076" [label = <(&lt;operator&gt;.expressionList,ndo, &quot;MLPPP, &quot;)<SUB>5</SUB>> ]
"68719476737" [label = <(IDENTIFIER,ndo,ndo, &quot;MLPPP, &quot;)<SUB>5</SUB>> ]
"90194313216" [label = <(LITERAL,&quot;MLPPP, &quot;,ndo, &quot;MLPPP, &quot;)<SUB>5</SUB>> ]
"47244640257" [label = <(CONTROL_STRUCTURE,IF,if (length &lt; 2))<SUB>7</SUB>> ]
"30064771077" [label = <(&lt;operator&gt;.lessThan,length &lt; 2)<SUB>7</SUB>> ]
"68719476738" [label = <(IDENTIFIER,length,length &lt; 2)<SUB>7</SUB>> ]
"90194313217" [label = <(LITERAL,2,length &lt; 2)<SUB>7</SUB>> ]
"25769803779" [label = <(BLOCK,{
        ND_PRINT((ndo, &quot;[|mlppp]&quot;));
        ...,{
        ND_PRINT((ndo, &quot;[|mlppp]&quot;));
        ...)<SUB>7</SUB>> ]
"30064771078" [label = <(ND_PRINT,ND_PRINT((ndo, &quot;[|mlppp]&quot;)))<SUB>8</SUB>> ]
"30064771079" [label = <(&lt;operator&gt;.bracketedPrimary,(ndo, &quot;[|mlppp]&quot;))<SUB>8</SUB>> ]
"30064771080" [label = <(&lt;operator&gt;.expressionList,ndo, &quot;[|mlppp]&quot;)<SUB>8</SUB>> ]
"68719476739" [label = <(IDENTIFIER,ndo,ndo, &quot;[|mlppp]&quot;)<SUB>8</SUB>> ]
"90194313218" [label = <(LITERAL,&quot;[|mlppp]&quot;,ndo, &quot;[|mlppp]&quot;)<SUB>8</SUB>> ]
"146028888064" [label = <(RETURN,return;,return;)<SUB>9</SUB>> ]
"47244640258" [label = <(CONTROL_STRUCTURE,IF,if (!ND_TTEST_16BITS(p)))<SUB>11</SUB>> ]
"30064771081" [label = <(&lt;operator&gt;.logicalNot,!ND_TTEST_16BITS(p))<SUB>11</SUB>> ]
"30064771082" [label = <(ND_TTEST_16BITS,ND_TTEST_16BITS(p))<SUB>11</SUB>> ]
"68719476740" [label = <(IDENTIFIER,p,ND_TTEST_16BITS(p))<SUB>11</SUB>> ]
"25769803780" [label = <(BLOCK,{
        ND_PRINT((ndo, &quot;[|mlppp]&quot;));
        ...,{
        ND_PRINT((ndo, &quot;[|mlppp]&quot;));
        ...)<SUB>11</SUB>> ]
"30064771083" [label = <(ND_PRINT,ND_PRINT((ndo, &quot;[|mlppp]&quot;)))<SUB>12</SUB>> ]
"30064771084" [label = <(&lt;operator&gt;.bracketedPrimary,(ndo, &quot;[|mlppp]&quot;))<SUB>12</SUB>> ]
"30064771085" [label = <(&lt;operator&gt;.expressionList,ndo, &quot;[|mlppp]&quot;)<SUB>12</SUB>> ]
"68719476741" [label = <(IDENTIFIER,ndo,ndo, &quot;[|mlppp]&quot;)<SUB>12</SUB>> ]
"90194313219" [label = <(LITERAL,&quot;[|mlppp]&quot;,ndo, &quot;[|mlppp]&quot;)<SUB>12</SUB>> ]
"146028888065" [label = <(RETURN,return;,return;)<SUB>13</SUB>> ]
"30064771086" [label = <(ND_PRINT,ND_PRINT((ndo, &quot;seq 0x%03x, Flags [%s], length ...)<SUB>16</SUB>> ]
"30064771087" [label = <(&lt;operator&gt;.bracketedPrimary,(ndo, &quot;seq 0x%03x, Flags [%s], length %u&quot;,
    ...)<SUB>16</SUB>> ]
"30064771088" [label = <(&lt;operator&gt;.expressionList,ndo, &quot;seq 0x%03x, Flags [%s], length %u&quot;,
     ...)<SUB>16</SUB>> ]
"68719476742" [label = <(IDENTIFIER,ndo,ndo, &quot;seq 0x%03x, Flags [%s], length %u&quot;,
     ...)<SUB>16</SUB>> ]
"90194313220" [label = <(LITERAL,&quot;seq 0x%03x, Flags [%s], length %u&quot;,ndo, &quot;seq 0x%03x, Flags [%s], length %u&quot;,
     ...)<SUB>16</SUB>> ]
"30064771089" [label = <(&lt;operator&gt;.and,(EXTRACT_16BITS(p))&amp;0x0fff)<SUB>17</SUB>> ]
"30064771090" [label = <(EXTRACT_16BITS,EXTRACT_16BITS(p))<SUB>17</SUB>> ]
"68719476743" [label = <(IDENTIFIER,p,EXTRACT_16BITS(p))<SUB>17</SUB>> ]
"90194313221" [label = <(LITERAL,0x0fff,(EXTRACT_16BITS(p))&amp;0x0fff)<SUB>17</SUB>> ]
"30064771091" [label = <(bittok2str,bittok2str(ppp_ml_flag_values, &quot;none&quot;, *p &amp; 0xc0))<SUB>18</SUB>> ]
"68719476744" [label = <(IDENTIFIER,ppp_ml_flag_values,bittok2str(ppp_ml_flag_values, &quot;none&quot;, *p &amp; 0xc0))<SUB>18</SUB>> ]
"90194313222" [label = <(LITERAL,&quot;none&quot;,bittok2str(ppp_ml_flag_values, &quot;none&quot;, *p &amp; 0xc0))<SUB>18</SUB>> ]
"30064771092" [label = <(&lt;operator&gt;.and,*p &amp; 0xc0)<SUB>18</SUB>> ]
"30064771093" [label = <(&lt;operator&gt;.indirection,*p)<SUB>18</SUB>> ]
"68719476745" [label = <(IDENTIFIER,p,*p &amp; 0xc0)<SUB>18</SUB>> ]
"90194313223" [label = <(LITERAL,0xc0,*p &amp; 0xc0)<SUB>18</SUB>> ]
"68719476746" [label = <(IDENTIFIER,length,ndo, &quot;seq 0x%03x, Flags [%s], length %u&quot;,
     ...)<SUB>19</SUB>> ]
"128849018880" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "115964116993"  [ label = "AST: "] 
  "111669149697" -> "115964116994"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "128849018880"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "25769803777" -> "47244640257"  [ label = "AST: "] 
  "25769803777" -> "47244640258"  [ label = "AST: "] 
  "25769803777" -> "30064771086"  [ label = "AST: "] 
  "47244640256" -> "30064771072"  [ label = "AST: "] 
  "47244640256" -> "25769803778"  [ label = "AST: "] 
  "30064771072" -> "30064771073"  [ label = "AST: "] 
  "30064771073" -> "68719476736"  [ label = "AST: "] 
  "30064771073" -> "55834574848"  [ label = "AST: "] 
  "25769803778" -> "30064771074"  [ label = "AST: "] 
  "30064771074" -> "30064771075"  [ label = "AST: "] 
  "30064771075" -> "30064771076"  [ label = "AST: "] 
  "30064771076" -> "68719476737"  [ label = "AST: "] 
  "30064771076" -> "90194313216"  [ label = "AST: "] 
  "47244640257" -> "30064771077"  [ label = "AST: "] 
  "47244640257" -> "25769803779"  [ label = "AST: "] 
  "30064771077" -> "68719476738"  [ label = "AST: "] 
  "30064771077" -> "90194313217"  [ label = "AST: "] 
  "25769803779" -> "30064771078"  [ label = "AST: "] 
  "25769803779" -> "146028888064"  [ label = "AST: "] 
  "30064771078" -> "30064771079"  [ label = "AST: "] 
  "30064771079" -> "30064771080"  [ label = "AST: "] 
  "30064771080" -> "68719476739"  [ label = "AST: "] 
  "30064771080" -> "90194313218"  [ label = "AST: "] 
  "47244640258" -> "30064771081"  [ label = "AST: "] 
  "47244640258" -> "25769803780"  [ label = "AST: "] 
  "30064771081" -> "30064771082"  [ label = "AST: "] 
  "30064771082" -> "68719476740"  [ label = "AST: "] 
  "25769803780" -> "30064771083"  [ label = "AST: "] 
  "25769803780" -> "146028888065"  [ label = "AST: "] 
  "30064771083" -> "30064771084"  [ label = "AST: "] 
  "30064771084" -> "30064771085"  [ label = "AST: "] 
  "30064771085" -> "68719476741"  [ label = "AST: "] 
  "30064771085" -> "90194313219"  [ label = "AST: "] 
  "30064771086" -> "30064771087"  [ label = "AST: "] 
  "30064771087" -> "30064771088"  [ label = "AST: "] 
  "30064771088" -> "68719476742"  [ label = "AST: "] 
  "30064771088" -> "90194313220"  [ label = "AST: "] 
  "30064771088" -> "30064771089"  [ label = "AST: "] 
  "30064771088" -> "30064771091"  [ label = "AST: "] 
  "30064771088" -> "68719476746"  [ label = "AST: "] 
  "30064771089" -> "30064771090"  [ label = "AST: "] 
  "30064771089" -> "90194313221"  [ label = "AST: "] 
  "30064771090" -> "68719476743"  [ label = "AST: "] 
  "30064771091" -> "68719476744"  [ label = "AST: "] 
  "30064771091" -> "90194313222"  [ label = "AST: "] 
  "30064771091" -> "30064771092"  [ label = "AST: "] 
  "30064771092" -> "30064771093"  [ label = "AST: "] 
  "30064771092" -> "90194313223"  [ label = "AST: "] 
  "30064771093" -> "68719476745"  [ label = "AST: "] 
  "30064771086" -> "128849018880"  [ label = "CFG: "] 
  "30064771072" -> "30064771076"  [ label = "CFG: "] 
  "30064771072" -> "30064771077"  [ label = "CFG: "] 
  "30064771077" -> "30064771080"  [ label = "CFG: "] 
  "30064771077" -> "30064771082"  [ label = "CFG: "] 
  "30064771081" -> "30064771085"  [ label = "CFG: "] 
  "30064771081" -> "30064771090"  [ label = "CFG: "] 
  "30064771087" -> "30064771086"  [ label = "CFG: "] 
  "30064771073" -> "30064771072"  [ label = "CFG: "] 
  "30064771074" -> "30064771077"  [ label = "CFG: "] 
  "30064771078" -> "146028888064"  [ label = "CFG: "] 
  "146028888064" -> "128849018880"  [ label = "CFG: "] 
  "30064771082" -> "30064771081"  [ label = "CFG: "] 
  "30064771083" -> "146028888065"  [ label = "CFG: "] 
  "146028888065" -> "128849018880"  [ label = "CFG: "] 
  "30064771088" -> "30064771087"  [ label = "CFG: "] 
  "55834574848" -> "30064771073"  [ label = "CFG: "] 
  "30064771075" -> "30064771074"  [ label = "CFG: "] 
  "30064771079" -> "30064771078"  [ label = "CFG: "] 
  "30064771084" -> "30064771083"  [ label = "CFG: "] 
  "30064771089" -> "30064771093"  [ label = "CFG: "] 
  "30064771091" -> "30064771088"  [ label = "CFG: "] 
  "30064771076" -> "30064771075"  [ label = "CFG: "] 
  "30064771080" -> "30064771079"  [ label = "CFG: "] 
  "30064771085" -> "30064771084"  [ label = "CFG: "] 
  "30064771090" -> "30064771089"  [ label = "CFG: "] 
  "30064771092" -> "30064771091"  [ label = "CFG: "] 
  "30064771093" -> "30064771092"  [ label = "CFG: "] 
  "111669149697" -> "55834574848"  [ label = "CFG: "] 
  "146028888065" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888064" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "115964116993" -> "128849018880"  [ label = "DDG: p"] 
  "30064771072" -> "128849018880"  [ label = "DDG: ndo-&gt;ndo_eflag"] 
  "30064771072" -> "128849018880"  [ label = "DDG: !ndo-&gt;ndo_eflag"] 
  "30064771075" -> "128849018880"  [ label = "DDG: ndo, &quot;MLPPP, &quot;"] 
  "30064771074" -> "128849018880"  [ label = "DDG: (ndo, &quot;MLPPP, &quot;)"] 
  "30064771074" -> "128849018880"  [ label = "DDG: ND_PRINT((ndo, &quot;MLPPP, &quot;))"] 
  "30064771077" -> "128849018880"  [ label = "DDG: length"] 
  "30064771077" -> "128849018880"  [ label = "DDG: length &lt; 2"] 
  "30064771080" -> "128849018880"  [ label = "DDG: ndo"] 
  "30064771079" -> "128849018880"  [ label = "DDG: ndo, &quot;[|mlppp]&quot;"] 
  "30064771078" -> "128849018880"  [ label = "DDG: (ndo, &quot;[|mlppp]&quot;)"] 
  "30064771078" -> "128849018880"  [ label = "DDG: ND_PRINT((ndo, &quot;[|mlppp]&quot;))"] 
  "30064771091" -> "128849018880"  [ label = "DDG: ppp_ml_flag_values"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "111669149697" -> "115964116993"  [ label = "DDG: "] 
  "111669149697" -> "115964116994"  [ label = "DDG: "] 
  "30064771087" -> "30064771086"  [ label = "DDG: ndo, &quot;seq 0x%03x, Flags [%s], length %u&quot;,
           (EXTRACT_16BITS(p))&amp;0x0fff, /* only support 12-Bit sequence space for now */
           bittok2str(ppp_ml_flag_values, &quot;none&quot;, *p &amp; 0xc0),
           length"] 
  "115964116992" -> "30064771072"  [ label = "DDG: ndo"] 
  "115964116994" -> "30064771077"  [ label = "DDG: length"] 
  "111669149697" -> "30064771077"  [ label = "DDG: "] 
  "111669149697" -> "146028888064"  [ label = "DDG: "] 
  "30064771082" -> "30064771081"  [ label = "DDG: p"] 
  "111669149697" -> "146028888065"  [ label = "DDG: "] 
  "30064771088" -> "30064771087"  [ label = "DDG: bittok2str(ppp_ml_flag_values, &quot;none&quot;, *p &amp; 0xc0)"] 
  "30064771088" -> "30064771087"  [ label = "DDG: ndo"] 
  "30064771088" -> "30064771087"  [ label = "DDG: length"] 
  "30064771088" -> "30064771087"  [ label = "DDG: (EXTRACT_16BITS(p))&amp;0x0fff"] 
  "30064771088" -> "30064771087"  [ label = "DDG: &quot;seq 0x%03x, Flags [%s], length %u&quot;"] 
  "30064771075" -> "30064771074"  [ label = "DDG: ndo, &quot;MLPPP, &quot;"] 
  "30064771079" -> "30064771078"  [ label = "DDG: ndo, &quot;[|mlppp]&quot;"] 
  "115964116993" -> "30064771082"  [ label = "DDG: p"] 
  "111669149697" -> "30064771082"  [ label = "DDG: "] 
  "30064771084" -> "30064771083"  [ label = "DDG: ndo, &quot;[|mlppp]&quot;"] 
  "115964116992" -> "30064771088"  [ label = "DDG: ndo"] 
  "30064771072" -> "30064771088"  [ label = "DDG: ndo-&gt;ndo_eflag"] 
  "30064771076" -> "30064771088"  [ label = "DDG: ndo"] 
  "111669149697" -> "30064771088"  [ label = "DDG: "] 
  "30064771089" -> "30064771088"  [ label = "DDG: EXTRACT_16BITS(p)"] 
  "30064771089" -> "30064771088"  [ label = "DDG: 0x0fff"] 
  "30064771091" -> "30064771088"  [ label = "DDG: ppp_ml_flag_values"] 
  "30064771091" -> "30064771088"  [ label = "DDG: &quot;none&quot;"] 
  "30064771091" -> "30064771088"  [ label = "DDG: *p &amp; 0xc0"] 
  "30064771077" -> "30064771088"  [ label = "DDG: length"] 
  "30064771076" -> "30064771075"  [ label = "DDG: ndo"] 
  "30064771076" -> "30064771075"  [ label = "DDG: &quot;MLPPP, &quot;"] 
  "30064771080" -> "30064771079"  [ label = "DDG: ndo"] 
  "30064771080" -> "30064771079"  [ label = "DDG: &quot;[|mlppp]&quot;"] 
  "30064771085" -> "30064771084"  [ label = "DDG: ndo"] 
  "30064771085" -> "30064771084"  [ label = "DDG: &quot;[|mlppp]&quot;"] 
  "30064771090" -> "30064771089"  [ label = "DDG: p"] 
  "111669149697" -> "30064771089"  [ label = "DDG: "] 
  "111669149697" -> "30064771091"  [ label = "DDG: "] 
  "30064771092" -> "30064771091"  [ label = "DDG: *p"] 
  "30064771092" -> "30064771091"  [ label = "DDG: 0xc0"] 
  "115964116992" -> "30064771076"  [ label = "DDG: ndo"] 
  "30064771072" -> "30064771076"  [ label = "DDG: ndo-&gt;ndo_eflag"] 
  "111669149697" -> "30064771076"  [ label = "DDG: "] 
  "115964116992" -> "30064771080"  [ label = "DDG: ndo"] 
  "30064771072" -> "30064771080"  [ label = "DDG: ndo-&gt;ndo_eflag"] 
  "30064771076" -> "30064771080"  [ label = "DDG: ndo"] 
  "111669149697" -> "30064771080"  [ label = "DDG: "] 
  "115964116992" -> "30064771085"  [ label = "DDG: ndo"] 
  "30064771072" -> "30064771085"  [ label = "DDG: ndo-&gt;ndo_eflag"] 
  "30064771076" -> "30064771085"  [ label = "DDG: ndo"] 
  "111669149697" -> "30064771085"  [ label = "DDG: "] 
  "30064771082" -> "30064771090"  [ label = "DDG: p"] 
  "111669149697" -> "30064771090"  [ label = "DDG: "] 
  "111669149697" -> "30064771092"  [ label = "DDG: "] 
  "30064771072" -> "30064771075"  [ label = "CDG: "] 
  "30064771072" -> "30064771074"  [ label = "CDG: "] 
  "30064771072" -> "30064771076"  [ label = "CDG: "] 
  "30064771077" -> "30064771082"  [ label = "CDG: "] 
  "30064771077" -> "30064771079"  [ label = "CDG: "] 
  "30064771077" -> "30064771078"  [ label = "CDG: "] 
  "30064771077" -> "30064771081"  [ label = "CDG: "] 
  "30064771077" -> "30064771080"  [ label = "CDG: "] 
  "30064771077" -> "146028888064"  [ label = "CDG: "] 
  "30064771081" -> "30064771091"  [ label = "CDG: "] 
  "30064771081" -> "30064771090"  [ label = "CDG: "] 
  "30064771081" -> "30064771093"  [ label = "CDG: "] 
  "30064771081" -> "30064771092"  [ label = "CDG: "] 
  "30064771081" -> "30064771087"  [ label = "CDG: "] 
  "30064771081" -> "30064771086"  [ label = "CDG: "] 
  "30064771081" -> "30064771089"  [ label = "CDG: "] 
  "30064771081" -> "30064771088"  [ label = "CDG: "] 
  "30064771081" -> "30064771083"  [ label = "CDG: "] 
  "30064771081" -> "30064771085"  [ label = "CDG: "] 
  "30064771081" -> "30064771084"  [ label = "CDG: "] 
  "30064771081" -> "146028888065"  [ label = "CDG: "] 
}
"""
)
