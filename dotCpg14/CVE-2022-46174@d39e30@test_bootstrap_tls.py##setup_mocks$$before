[33mval[0m [36mres1011[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "setup_mocks" {  
"111669149697" [label = <(METHOD,setup_mocks)<SUB>1</SUB>> ]
"25769803777" [label = <(BLOCK,,)<SUB>1</SUB>> ]
"30064771073" [label = <(patch,mocker.patch(&quot;mount_efs.start_watchdog&quot;))<SUB>2</SUB>> ]
"30064771072" [label = <(&lt;operator&gt;.fieldAccess,mocker.patch)<SUB>2</SUB>> ]
"68719476737" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;mount_efs.start_watchdog&quot;))<SUB>2</SUB>> ]
"55834574848" [label = <(FIELD_IDENTIFIER,patch,patch)<SUB>2</SUB>> ]
"68719476738" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;mount_efs.start_watchdog&quot;))<SUB>2</SUB>> ]
"90194313216" [label = <(LITERAL,&quot;mount_efs.start_watchdog&quot;,mocker.patch(&quot;mount_efs.start_watchdog&quot;))<SUB>2</SUB>> ]
"30064771077" [label = <(patch,mocker.patch(&quot;mount_efs.get_tls_port_range&quot;, re...)<SUB>3</SUB>> ]
"30064771076" [label = <(&lt;operator&gt;.fieldAccess,mocker.patch)<SUB>3</SUB>> ]
"68719476741" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;mount_efs.get_tls_port_range&quot;, re...)<SUB>3</SUB>> ]
"55834574849" [label = <(FIELD_IDENTIFIER,patch,patch)<SUB>3</SUB>> ]
"68719476742" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;mount_efs.get_tls_port_range&quot;, re...)<SUB>3</SUB>> ]
"90194313217" [label = <(LITERAL,&quot;mount_efs.get_tls_port_range&quot;,mocker.patch(&quot;mount_efs.get_tls_port_range&quot;, re...)<SUB>4</SUB>> ]
"30064771075" [label = <(&lt;operator&gt;.tupleLiteral,(DEFAULT_TLS_PORT, DEFAULT_TLS_PORT + 10))<SUB>5</SUB>> ]
"68719476739" [label = <(IDENTIFIER,DEFAULT_TLS_PORT,(DEFAULT_TLS_PORT, DEFAULT_TLS_PORT + 10))<SUB>5</SUB>> ]
"30064771074" [label = <(&lt;operator&gt;.addition,DEFAULT_TLS_PORT + 10)<SUB>5</SUB>> ]
"68719476740" [label = <(IDENTIFIER,DEFAULT_TLS_PORT,DEFAULT_TLS_PORT + 10)<SUB>5</SUB>> ]
"90194313218" [label = <(LITERAL,10,DEFAULT_TLS_PORT + 10)<SUB>5</SUB>> ]
"30064771080" [label = <(patch,mocker.patch(&quot;socket.socket&quot;, return_value = Ma...)<SUB>7</SUB>> ]
"30064771079" [label = <(&lt;operator&gt;.fieldAccess,mocker.patch)<SUB>7</SUB>> ]
"68719476744" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;socket.socket&quot;, return_value = Ma...)<SUB>7</SUB>> ]
"55834574850" [label = <(FIELD_IDENTIFIER,patch,patch)<SUB>7</SUB>> ]
"68719476745" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;socket.socket&quot;, return_value = Ma...)<SUB>7</SUB>> ]
"90194313219" [label = <(LITERAL,&quot;socket.socket&quot;,mocker.patch(&quot;socket.socket&quot;, return_value = Ma...)<SUB>7</SUB>> ]
"30064771078" [label = <(MagicMock,MagicMock())<SUB>7</SUB>> ]
"68719476743" [label = <(IDENTIFIER,MagicMock,MagicMock())<SUB>7</SUB>> ]
"30064771083" [label = <(patch,mocker.patch(&quot;mount_efs.get_dns_name_and_fallba...)<SUB>8</SUB>> ]
"30064771082" [label = <(&lt;operator&gt;.fieldAccess,mocker.patch)<SUB>8</SUB>> ]
"68719476747" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;mount_efs.get_dns_name_and_fallba...)<SUB>8</SUB>> ]
"55834574851" [label = <(FIELD_IDENTIFIER,patch,patch)<SUB>8</SUB>> ]
"68719476748" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;mount_efs.get_dns_name_and_fallba...)<SUB>8</SUB>> ]
"90194313220" [label = <(LITERAL,&quot;mount_efs.get_dns_name_and_fallback_mount_targ...,mocker.patch(&quot;mount_efs.get_dns_name_and_fallba...)<SUB>9</SUB>> ]
"30064771081" [label = <(&lt;operator&gt;.tupleLiteral,(DNS_NAME, None))<SUB>10</SUB>> ]
"68719476746" [label = <(IDENTIFIER,DNS_NAME,(DNS_NAME, None))<SUB>10</SUB>> ]
"90194313221" [label = <(LITERAL,None,(DNS_NAME, None))<SUB>10</SUB>> ]
"30064771085" [label = <(patch,mocker.patch(&quot;mount_efs.get_target_region&quot;, ret...)<SUB>12</SUB>> ]
"30064771084" [label = <(&lt;operator&gt;.fieldAccess,mocker.patch)<SUB>12</SUB>> ]
"68719476750" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;mount_efs.get_target_region&quot;, ret...)<SUB>12</SUB>> ]
"55834574852" [label = <(FIELD_IDENTIFIER,patch,patch)<SUB>12</SUB>> ]
"68719476751" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;mount_efs.get_target_region&quot;, ret...)<SUB>12</SUB>> ]
"90194313222" [label = <(LITERAL,&quot;mount_efs.get_target_region&quot;,mocker.patch(&quot;mount_efs.get_target_region&quot;, ret...)<SUB>12</SUB>> ]
"68719476749" [label = <(IDENTIFIER,REGION,mocker.patch(&quot;mount_efs.get_target_region&quot;, ret...)<SUB>12</SUB>> ]
"30064771087" [label = <(patch,mocker.patch(&quot;mount_efs.write_tls_tunnel_state_...)<SUB>13</SUB>> ]
"30064771086" [label = <(&lt;operator&gt;.fieldAccess,mocker.patch)<SUB>13</SUB>> ]
"68719476752" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;mount_efs.write_tls_tunnel_state_...)<SUB>13</SUB>> ]
"55834574853" [label = <(FIELD_IDENTIFIER,patch,patch)<SUB>13</SUB>> ]
"68719476753" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;mount_efs.write_tls_tunnel_state_...)<SUB>13</SUB>> ]
"90194313223" [label = <(LITERAL,&quot;mount_efs.write_tls_tunnel_state_file&quot;,mocker.patch(&quot;mount_efs.write_tls_tunnel_state_...)<SUB>13</SUB>> ]
"90194313224" [label = <(LITERAL,&quot;~mocktempfile&quot;,mocker.patch(&quot;mount_efs.write_tls_tunnel_state_...)<SUB>13</SUB>> ]
"30064771089" [label = <(patch,mocker.patch(&quot;mount_efs.create_certificate&quot;))<SUB>14</SUB>> ]
"30064771088" [label = <(&lt;operator&gt;.fieldAccess,mocker.patch)<SUB>14</SUB>> ]
"68719476754" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;mount_efs.create_certificate&quot;))<SUB>14</SUB>> ]
"55834574854" [label = <(FIELD_IDENTIFIER,patch,patch)<SUB>14</SUB>> ]
"68719476755" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;mount_efs.create_certificate&quot;))<SUB>14</SUB>> ]
"90194313225" [label = <(LITERAL,&quot;mount_efs.create_certificate&quot;,mocker.patch(&quot;mount_efs.create_certificate&quot;))<SUB>14</SUB>> ]
"30064771091" [label = <(patch,mocker.patch(&quot;os.rename&quot;))<SUB>15</SUB>> ]
"30064771090" [label = <(&lt;operator&gt;.fieldAccess,mocker.patch)<SUB>15</SUB>> ]
"68719476756" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;os.rename&quot;))<SUB>15</SUB>> ]
"55834574855" [label = <(FIELD_IDENTIFIER,patch,patch)<SUB>15</SUB>> ]
"68719476757" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;os.rename&quot;))<SUB>15</SUB>> ]
"90194313226" [label = <(LITERAL,&quot;os.rename&quot;,mocker.patch(&quot;os.rename&quot;))<SUB>15</SUB>> ]
"30064771093" [label = <(patch,mocker.patch(&quot;os.kill&quot;))<SUB>16</SUB>> ]
"30064771092" [label = <(&lt;operator&gt;.fieldAccess,mocker.patch)<SUB>16</SUB>> ]
"68719476758" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;os.kill&quot;))<SUB>16</SUB>> ]
"55834574856" [label = <(FIELD_IDENTIFIER,patch,patch)<SUB>16</SUB>> ]
"68719476759" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;os.kill&quot;))<SUB>16</SUB>> ]
"90194313227" [label = <(LITERAL,&quot;os.kill&quot;,mocker.patch(&quot;os.kill&quot;))<SUB>16</SUB>> ]
"30064771095" [label = <(&lt;operator&gt;.assignment,process_mock = MagicMock())<SUB>18</SUB>> ]
"68719476761" [label = <(IDENTIFIER,process_mock,process_mock = MagicMock())<SUB>18</SUB>> ]
"30064771094" [label = <(MagicMock,MagicMock())<SUB>18</SUB>> ]
"68719476760" [label = <(IDENTIFIER,MagicMock,MagicMock())<SUB>18</SUB>> ]
"30064771099" [label = <(&lt;operator&gt;.assignment,process_mock.communicate.return_value = (&quot;stdou...)<SUB>19</SUB>> ]
"30064771098" [label = <(&lt;operator&gt;.fieldAccess,process_mock.communicate.return_value)<SUB>19</SUB>> ]
"30064771097" [label = <(&lt;operator&gt;.fieldAccess,process_mock.communicate)<SUB>19</SUB>> ]
"68719476762" [label = <(IDENTIFIER,process_mock,process_mock.communicate.return_value = (&quot;stdou...)<SUB>19</SUB>> ]
"55834574857" [label = <(FIELD_IDENTIFIER,communicate,communicate)<SUB>19</SUB>> ]
"55834574858" [label = <(FIELD_IDENTIFIER,return_value,return_value)<SUB>19</SUB>> ]
"30064771096" [label = <(&lt;operator&gt;.tupleLiteral,(&quot;stdout&quot;, &quot;stderr&quot;))<SUB>19</SUB>> ]
"90194313228" [label = <(LITERAL,&quot;stdout&quot;,(&quot;stdout&quot;, &quot;stderr&quot;))<SUB>20</SUB>> ]
"90194313229" [label = <(LITERAL,&quot;stderr&quot;,(&quot;stdout&quot;, &quot;stderr&quot;))<SUB>21</SUB>> ]
"30064771101" [label = <(&lt;operator&gt;.assignment,process_mock.returncode = 0)<SUB>23</SUB>> ]
"30064771100" [label = <(&lt;operator&gt;.fieldAccess,process_mock.returncode)<SUB>23</SUB>> ]
"68719476763" [label = <(IDENTIFIER,process_mock,process_mock.returncode = 0)<SUB>23</SUB>> ]
"55834574859" [label = <(FIELD_IDENTIFIER,returncode,returncode)<SUB>23</SUB>> ]
"90194313230" [label = <(LITERAL,0,process_mock.returncode = 0)<SUB>23</SUB>> ]
"30064771104" [label = <(&lt;operator&gt;.assignment,popen_mock = mocker.patch(&quot;subprocess.Popen&quot;, r...)<SUB>25</SUB>> ]
"68719476767" [label = <(IDENTIFIER,popen_mock,popen_mock = mocker.patch(&quot;subprocess.Popen&quot;, r...)<SUB>25</SUB>> ]
"30064771103" [label = <(patch,mocker.patch(&quot;subprocess.Popen&quot;, return_value =...)<SUB>25</SUB>> ]
"30064771102" [label = <(&lt;operator&gt;.fieldAccess,mocker.patch)<SUB>25</SUB>> ]
"68719476765" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;subprocess.Popen&quot;, return_value =...)<SUB>25</SUB>> ]
"55834574860" [label = <(FIELD_IDENTIFIER,patch,patch)<SUB>25</SUB>> ]
"68719476766" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;subprocess.Popen&quot;, return_value =...)<SUB>25</SUB>> ]
"90194313231" [label = <(LITERAL,&quot;subprocess.Popen&quot;,mocker.patch(&quot;subprocess.Popen&quot;, return_value =...)<SUB>25</SUB>> ]
"68719476764" [label = <(IDENTIFIER,process_mock,mocker.patch(&quot;subprocess.Popen&quot;, return_value =...)<SUB>25</SUB>> ]
"30064771107" [label = <(&lt;operator&gt;.assignment,write_config_mock = mocker.patch(&quot;mount_efs.wri...)<SUB>26</SUB>> ]
"68719476771" [label = <(IDENTIFIER,write_config_mock,write_config_mock = mocker.patch(&quot;mount_efs.wri...)<SUB>26</SUB>> ]
"30064771106" [label = <(patch,mocker.patch(&quot;mount_efs.write_stunnel_config_fi...)<SUB>26</SUB>> ]
"30064771105" [label = <(&lt;operator&gt;.fieldAccess,mocker.patch)<SUB>26</SUB>> ]
"68719476769" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;mount_efs.write_stunnel_config_fi...)<SUB>26</SUB>> ]
"55834574861" [label = <(FIELD_IDENTIFIER,patch,patch)<SUB>26</SUB>> ]
"68719476770" [label = <(IDENTIFIER,mocker,mocker.patch(&quot;mount_efs.write_stunnel_config_fi...)<SUB>26</SUB>> ]
"90194313232" [label = <(LITERAL,&quot;mount_efs.write_stunnel_config_file&quot;,mocker.patch(&quot;mount_efs.write_stunnel_config_fi...)<SUB>27</SUB>> ]
"68719476768" [label = <(IDENTIFIER,EXPECTED_STUNNEL_CONFIG_FILE,mocker.patch(&quot;mount_efs.write_stunnel_config_fi...)<SUB>27</SUB>> ]
"146028888064" [label = <(RETURN,return popen_mock, write_config_mock,return popen_mock, write_config_mock)<SUB>29</SUB>> ]
"30064771108" [label = <(&lt;operator&gt;.tupleLiteral,(popen_mock, write_config_mock))<SUB>29</SUB>> ]
"68719476772" [label = <(IDENTIFIER,popen_mock,(popen_mock, write_config_mock))<SUB>29</SUB>> ]
"68719476773" [label = <(IDENTIFIER,write_config_mock,(popen_mock, write_config_mock))<SUB>29</SUB>> ]
"94489280513" [label = <(LOCAL,DEFAULT_TLS_PORT: ANY)<SUB>5</SUB>> ]
"94489280515" [label = <(LOCAL,MagicMock: ANY)<SUB>7</SUB>> ]
"94489280517" [label = <(LOCAL,DNS_NAME: ANY)<SUB>10</SUB>> ]
"94489280519" [label = <(LOCAL,REGION: ANY)<SUB>12</SUB>> ]
"94489280521" [label = <(LOCAL,process_mock: MagicMock.&lt;returnValue&gt;)<SUB>18</SUB>> ]
"94489280522" [label = <(LOCAL,popen_mock: ANY)<SUB>25</SUB>> ]
"94489280523" [label = <(LOCAL,EXPECTED_STUNNEL_CONFIG_FILE: ANY)<SUB>27</SUB>> ]
"94489280525" [label = <(LOCAL,write_config_mock: ANY)<SUB>26</SUB>> ]
"133143986178" [label = <(MODIFIER,VIRTUAL)> ]
"115964116992" [label = <(PARAM,mocker)<SUB>1</SUB>> ]
"128849018881" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
  "111669149697" -> "133143986178"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "128849018881"  [ label = "AST: "] 
  "25769803777" -> "30064771073"  [ label = "AST: "] 
  "25769803777" -> "94489280513"  [ label = "AST: "] 
  "25769803777" -> "30064771077"  [ label = "AST: "] 
  "25769803777" -> "94489280515"  [ label = "AST: "] 
  "25769803777" -> "30064771080"  [ label = "AST: "] 
  "25769803777" -> "94489280517"  [ label = "AST: "] 
  "25769803777" -> "30064771083"  [ label = "AST: "] 
  "25769803777" -> "94489280519"  [ label = "AST: "] 
  "25769803777" -> "30064771085"  [ label = "AST: "] 
  "25769803777" -> "94489280521"  [ label = "AST: "] 
  "25769803777" -> "30064771087"  [ label = "AST: "] 
  "25769803777" -> "94489280522"  [ label = "AST: "] 
  "25769803777" -> "30064771089"  [ label = "AST: "] 
  "25769803777" -> "94489280523"  [ label = "AST: "] 
  "25769803777" -> "30064771091"  [ label = "AST: "] 
  "25769803777" -> "94489280525"  [ label = "AST: "] 
  "25769803777" -> "30064771093"  [ label = "AST: "] 
  "25769803777" -> "30064771095"  [ label = "AST: "] 
  "25769803777" -> "30064771099"  [ label = "AST: "] 
  "25769803777" -> "30064771101"  [ label = "AST: "] 
  "25769803777" -> "30064771104"  [ label = "AST: "] 
  "25769803777" -> "30064771107"  [ label = "AST: "] 
  "25769803777" -> "146028888064"  [ label = "AST: "] 
  "30064771073" -> "30064771072"  [ label = "AST: "] 
  "30064771073" -> "68719476738"  [ label = "AST: "] 
  "30064771073" -> "90194313216"  [ label = "AST: "] 
  "30064771072" -> "68719476737"  [ label = "AST: "] 
  "30064771072" -> "55834574848"  [ label = "AST: "] 
  "30064771077" -> "30064771076"  [ label = "AST: "] 
  "30064771077" -> "68719476742"  [ label = "AST: "] 
  "30064771077" -> "90194313217"  [ label = "AST: "] 
  "30064771077" -> "30064771075"  [ label = "AST: "] 
  "30064771076" -> "68719476741"  [ label = "AST: "] 
  "30064771076" -> "55834574849"  [ label = "AST: "] 
  "30064771075" -> "68719476739"  [ label = "AST: "] 
  "30064771075" -> "30064771074"  [ label = "AST: "] 
  "30064771074" -> "68719476740"  [ label = "AST: "] 
  "30064771074" -> "90194313218"  [ label = "AST: "] 
  "30064771080" -> "30064771079"  [ label = "AST: "] 
  "30064771080" -> "68719476745"  [ label = "AST: "] 
  "30064771080" -> "90194313219"  [ label = "AST: "] 
  "30064771080" -> "30064771078"  [ label = "AST: "] 
  "30064771079" -> "68719476744"  [ label = "AST: "] 
  "30064771079" -> "55834574850"  [ label = "AST: "] 
  "30064771078" -> "68719476743"  [ label = "AST: "] 
  "30064771083" -> "30064771082"  [ label = "AST: "] 
  "30064771083" -> "68719476748"  [ label = "AST: "] 
  "30064771083" -> "90194313220"  [ label = "AST: "] 
  "30064771083" -> "30064771081"  [ label = "AST: "] 
  "30064771082" -> "68719476747"  [ label = "AST: "] 
  "30064771082" -> "55834574851"  [ label = "AST: "] 
  "30064771081" -> "68719476746"  [ label = "AST: "] 
  "30064771081" -> "90194313221"  [ label = "AST: "] 
  "30064771085" -> "30064771084"  [ label = "AST: "] 
  "30064771085" -> "68719476751"  [ label = "AST: "] 
  "30064771085" -> "90194313222"  [ label = "AST: "] 
  "30064771085" -> "68719476749"  [ label = "AST: "] 
  "30064771084" -> "68719476750"  [ label = "AST: "] 
  "30064771084" -> "55834574852"  [ label = "AST: "] 
  "30064771087" -> "30064771086"  [ label = "AST: "] 
  "30064771087" -> "68719476753"  [ label = "AST: "] 
  "30064771087" -> "90194313223"  [ label = "AST: "] 
  "30064771087" -> "90194313224"  [ label = "AST: "] 
  "30064771086" -> "68719476752"  [ label = "AST: "] 
  "30064771086" -> "55834574853"  [ label = "AST: "] 
  "30064771089" -> "30064771088"  [ label = "AST: "] 
  "30064771089" -> "68719476755"  [ label = "AST: "] 
  "30064771089" -> "90194313225"  [ label = "AST: "] 
  "30064771088" -> "68719476754"  [ label = "AST: "] 
  "30064771088" -> "55834574854"  [ label = "AST: "] 
  "30064771091" -> "30064771090"  [ label = "AST: "] 
  "30064771091" -> "68719476757"  [ label = "AST: "] 
  "30064771091" -> "90194313226"  [ label = "AST: "] 
  "30064771090" -> "68719476756"  [ label = "AST: "] 
  "30064771090" -> "55834574855"  [ label = "AST: "] 
  "30064771093" -> "30064771092"  [ label = "AST: "] 
  "30064771093" -> "68719476759"  [ label = "AST: "] 
  "30064771093" -> "90194313227"  [ label = "AST: "] 
  "30064771092" -> "68719476758"  [ label = "AST: "] 
  "30064771092" -> "55834574856"  [ label = "AST: "] 
  "30064771095" -> "68719476761"  [ label = "AST: "] 
  "30064771095" -> "30064771094"  [ label = "AST: "] 
  "30064771094" -> "68719476760"  [ label = "AST: "] 
  "30064771099" -> "30064771098"  [ label = "AST: "] 
  "30064771099" -> "30064771096"  [ label = "AST: "] 
  "30064771098" -> "30064771097"  [ label = "AST: "] 
  "30064771098" -> "55834574858"  [ label = "AST: "] 
  "30064771097" -> "68719476762"  [ label = "AST: "] 
  "30064771097" -> "55834574857"  [ label = "AST: "] 
  "30064771096" -> "90194313228"  [ label = "AST: "] 
  "30064771096" -> "90194313229"  [ label = "AST: "] 
  "30064771101" -> "30064771100"  [ label = "AST: "] 
  "30064771101" -> "90194313230"  [ label = "AST: "] 
  "30064771100" -> "68719476763"  [ label = "AST: "] 
  "30064771100" -> "55834574859"  [ label = "AST: "] 
  "30064771104" -> "68719476767"  [ label = "AST: "] 
  "30064771104" -> "30064771103"  [ label = "AST: "] 
  "30064771103" -> "30064771102"  [ label = "AST: "] 
  "30064771103" -> "68719476766"  [ label = "AST: "] 
  "30064771103" -> "90194313231"  [ label = "AST: "] 
  "30064771103" -> "68719476764"  [ label = "AST: "] 
  "30064771102" -> "68719476765"  [ label = "AST: "] 
  "30064771102" -> "55834574860"  [ label = "AST: "] 
  "30064771107" -> "68719476771"  [ label = "AST: "] 
  "30064771107" -> "30064771106"  [ label = "AST: "] 
  "30064771106" -> "30064771105"  [ label = "AST: "] 
  "30064771106" -> "68719476770"  [ label = "AST: "] 
  "30064771106" -> "90194313232"  [ label = "AST: "] 
  "30064771106" -> "68719476768"  [ label = "AST: "] 
  "30064771105" -> "68719476769"  [ label = "AST: "] 
  "30064771105" -> "55834574861"  [ label = "AST: "] 
  "146028888064" -> "30064771108"  [ label = "AST: "] 
  "30064771108" -> "68719476772"  [ label = "AST: "] 
  "30064771108" -> "68719476773"  [ label = "AST: "] 
  "30064771073" -> "55834574849"  [ label = "CFG: "] 
  "30064771077" -> "55834574850"  [ label = "CFG: "] 
  "30064771080" -> "55834574851"  [ label = "CFG: "] 
  "30064771083" -> "55834574852"  [ label = "CFG: "] 
  "30064771085" -> "55834574853"  [ label = "CFG: "] 
  "30064771087" -> "55834574854"  [ label = "CFG: "] 
  "30064771089" -> "55834574855"  [ label = "CFG: "] 
  "30064771091" -> "55834574856"  [ label = "CFG: "] 
  "30064771093" -> "30064771094"  [ label = "CFG: "] 
  "30064771095" -> "55834574857"  [ label = "CFG: "] 
  "30064771099" -> "55834574859"  [ label = "CFG: "] 
  "30064771101" -> "55834574860"  [ label = "CFG: "] 
  "30064771104" -> "55834574861"  [ label = "CFG: "] 
  "30064771107" -> "30064771108"  [ label = "CFG: "] 
  "146028888064" -> "128849018881"  [ label = "CFG: "] 
  "30064771072" -> "30064771073"  [ label = "CFG: "] 
  "30064771076" -> "30064771074"  [ label = "CFG: "] 
  "30064771075" -> "30064771077"  [ label = "CFG: "] 
  "30064771079" -> "30064771078"  [ label = "CFG: "] 
  "30064771078" -> "30064771080"  [ label = "CFG: "] 
  "30064771082" -> "30064771081"  [ label = "CFG: "] 
  "30064771081" -> "30064771083"  [ label = "CFG: "] 
  "30064771084" -> "30064771085"  [ label = "CFG: "] 
  "30064771086" -> "30064771087"  [ label = "CFG: "] 
  "30064771088" -> "30064771089"  [ label = "CFG: "] 
  "30064771090" -> "30064771091"  [ label = "CFG: "] 
  "30064771092" -> "30064771093"  [ label = "CFG: "] 
  "30064771094" -> "30064771095"  [ label = "CFG: "] 
  "30064771098" -> "30064771096"  [ label = "CFG: "] 
  "30064771096" -> "30064771099"  [ label = "CFG: "] 
  "30064771100" -> "30064771101"  [ label = "CFG: "] 
  "30064771103" -> "30064771104"  [ label = "CFG: "] 
  "30064771106" -> "30064771107"  [ label = "CFG: "] 
  "30064771108" -> "146028888064"  [ label = "CFG: "] 
  "55834574848" -> "30064771072"  [ label = "CFG: "] 
  "55834574849" -> "30064771076"  [ label = "CFG: "] 
  "30064771074" -> "30064771075"  [ label = "CFG: "] 
  "55834574850" -> "30064771079"  [ label = "CFG: "] 
  "55834574851" -> "30064771082"  [ label = "CFG: "] 
  "55834574852" -> "30064771084"  [ label = "CFG: "] 
  "55834574853" -> "30064771086"  [ label = "CFG: "] 
  "55834574854" -> "30064771088"  [ label = "CFG: "] 
  "55834574855" -> "30064771090"  [ label = "CFG: "] 
  "55834574856" -> "30064771092"  [ label = "CFG: "] 
  "30064771097" -> "55834574858"  [ label = "CFG: "] 
  "55834574858" -> "30064771098"  [ label = "CFG: "] 
  "55834574859" -> "30064771100"  [ label = "CFG: "] 
  "30064771102" -> "30064771103"  [ label = "CFG: "] 
  "30064771105" -> "30064771106"  [ label = "CFG: "] 
  "55834574857" -> "30064771097"  [ label = "CFG: "] 
  "55834574860" -> "30064771102"  [ label = "CFG: "] 
  "55834574861" -> "30064771105"  [ label = "CFG: "] 
  "111669149697" -> "55834574848"  [ label = "CFG: "] 
  "146028888064" -> "128849018881"  [ label = "DDG: &lt;RET&gt;"] 
  "30064771073" -> "128849018881"  [ label = "DDG: mocker.patch(&quot;mount_efs.start_watchdog&quot;)"] 
  "30064771075" -> "128849018881"  [ label = "DDG: DEFAULT_TLS_PORT"] 
  "30064771075" -> "128849018881"  [ label = "DDG: DEFAULT_TLS_PORT + 10"] 
  "30064771077" -> "128849018881"  [ label = "DDG: (DEFAULT_TLS_PORT, DEFAULT_TLS_PORT + 10)"] 
  "30064771077" -> "128849018881"  [ label = "DDG: mocker.patch(&quot;mount_efs.get_tls_port_range&quot;, return_value = (DEFAULT_TLS_PORT, DEFAULT_TLS_PORT + 10))"] 
  "30064771080" -> "128849018881"  [ label = "DDG: mocker.patch(&quot;socket.socket&quot;, return_value = MagicMock())"] 
  "30064771081" -> "128849018881"  [ label = "DDG: DNS_NAME"] 
  "30064771083" -> "128849018881"  [ label = "DDG: (DNS_NAME, None)"] 
  "30064771083" -> "128849018881"  [ label = "DDG: mocker.patch(&quot;mount_efs.get_dns_name_and_fallback_mount_target_ip_address&quot;, return_value = (DNS_NAME, None))"] 
  "30064771085" -> "128849018881"  [ label = "DDG: REGION"] 
  "30064771085" -> "128849018881"  [ label = "DDG: mocker.patch(&quot;mount_efs.get_target_region&quot;, return_value = REGION)"] 
  "30064771087" -> "128849018881"  [ label = "DDG: mocker.patch(&quot;mount_efs.write_tls_tunnel_state_file&quot;, return_value = &quot;~mocktempfile&quot;)"] 
  "30064771089" -> "128849018881"  [ label = "DDG: mocker.patch(&quot;mount_efs.create_certificate&quot;)"] 
  "30064771091" -> "128849018881"  [ label = "DDG: mocker.patch(&quot;os.rename&quot;)"] 
  "30064771093" -> "128849018881"  [ label = "DDG: mocker.patch(&quot;os.kill&quot;)"] 
  "30064771095" -> "128849018881"  [ label = "DDG: MagicMock()"] 
  "30064771095" -> "128849018881"  [ label = "DDG: process_mock = MagicMock()"] 
  "30064771099" -> "128849018881"  [ label = "DDG: (&quot;stdout&quot;, &quot;stderr&quot;)"] 
  "30064771099" -> "128849018881"  [ label = "DDG: process_mock.communicate.return_value = (&quot;stdout&quot;, &quot;stderr&quot;)"] 
  "30064771101" -> "128849018881"  [ label = "DDG: process_mock.returncode = 0"] 
  "30064771103" -> "128849018881"  [ label = "DDG: process_mock"] 
  "30064771104" -> "128849018881"  [ label = "DDG: mocker.patch(&quot;subprocess.Popen&quot;, return_value = process_mock)"] 
  "30064771104" -> "128849018881"  [ label = "DDG: popen_mock = mocker.patch(&quot;subprocess.Popen&quot;, return_value = process_mock)"] 
  "30064771106" -> "128849018881"  [ label = "DDG: mocker"] 
  "30064771106" -> "128849018881"  [ label = "DDG: EXPECTED_STUNNEL_CONFIG_FILE"] 
  "30064771107" -> "128849018881"  [ label = "DDG: mocker.patch(&quot;mount_efs.write_stunnel_config_file&quot;, return_value = EXPECTED_STUNNEL_CONFIG_FILE)"] 
  "30064771107" -> "128849018881"  [ label = "DDG: write_config_mock = mocker.patch(&quot;mount_efs.write_stunnel_config_file&quot;, return_value = EXPECTED_STUNNEL_CONFIG_FILE)"] 
  "30064771108" -> "128849018881"  [ label = "DDG: popen_mock"] 
  "30064771108" -> "128849018881"  [ label = "DDG: write_config_mock"] 
  "30064771108" -> "128849018881"  [ label = "DDG: (popen_mock, write_config_mock)"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "111669149697" -> "30064771095"  [ label = "DDG: "] 
  "30064771096" -> "30064771099"  [ label = "DDG: &quot;stdout&quot;"] 
  "30064771096" -> "30064771099"  [ label = "DDG: &quot;stderr&quot;"] 
  "111669149697" -> "30064771101"  [ label = "DDG: "] 
  "30064771103" -> "30064771104"  [ label = "DDG: mocker"] 
  "30064771103" -> "30064771104"  [ label = "DDG: &quot;subprocess.Popen&quot;"] 
  "30064771103" -> "30064771104"  [ label = "DDG: process_mock"] 
  "30064771106" -> "30064771107"  [ label = "DDG: mocker"] 
  "30064771106" -> "30064771107"  [ label = "DDG: &quot;mount_efs.write_stunnel_config_file&quot;"] 
  "30064771106" -> "30064771107"  [ label = "DDG: EXPECTED_STUNNEL_CONFIG_FILE"] 
  "30064771108" -> "146028888064"  [ label = "DDG: (popen_mock, write_config_mock)"] 
  "115964116992" -> "30064771073"  [ label = "DDG: mocker"] 
  "111669149697" -> "30064771073"  [ label = "DDG: "] 
  "30064771073" -> "30064771077"  [ label = "DDG: mocker"] 
  "111669149697" -> "30064771077"  [ label = "DDG: "] 
  "30064771075" -> "30064771077"  [ label = "DDG: DEFAULT_TLS_PORT"] 
  "30064771075" -> "30064771077"  [ label = "DDG: DEFAULT_TLS_PORT + 10"] 
  "30064771077" -> "30064771080"  [ label = "DDG: mocker"] 
  "111669149697" -> "30064771080"  [ label = "DDG: "] 
  "30064771080" -> "30064771083"  [ label = "DDG: mocker"] 
  "111669149697" -> "30064771083"  [ label = "DDG: "] 
  "30064771081" -> "30064771083"  [ label = "DDG: DNS_NAME"] 
  "30064771081" -> "30064771083"  [ label = "DDG: None"] 
  "30064771083" -> "30064771085"  [ label = "DDG: mocker"] 
  "111669149697" -> "30064771085"  [ label = "DDG: "] 
  "30064771085" -> "30064771087"  [ label = "DDG: mocker"] 
  "111669149697" -> "30064771087"  [ label = "DDG: "] 
  "30064771087" -> "30064771089"  [ label = "DDG: mocker"] 
  "111669149697" -> "30064771089"  [ label = "DDG: "] 
  "30064771089" -> "30064771091"  [ label = "DDG: mocker"] 
  "111669149697" -> "30064771091"  [ label = "DDG: "] 
  "30064771091" -> "30064771093"  [ label = "DDG: mocker"] 
  "111669149697" -> "30064771093"  [ label = "DDG: "] 
  "111669149697" -> "30064771075"  [ label = "DDG: "] 
  "111669149697" -> "68719476743"  [ label = "DDG: "] 
  "111669149697" -> "30064771081"  [ label = "DDG: "] 
  "111669149697" -> "68719476760"  [ label = "DDG: "] 
  "111669149697" -> "30064771096"  [ label = "DDG: "] 
  "30064771093" -> "30064771103"  [ label = "DDG: mocker"] 
  "111669149697" -> "30064771103"  [ label = "DDG: "] 
  "30064771095" -> "30064771103"  [ label = "DDG: process_mock"] 
  "30064771101" -> "30064771103"  [ label = "DDG: process_mock.returncode"] 
  "30064771103" -> "30064771106"  [ label = "DDG: mocker"] 
  "111669149697" -> "30064771106"  [ label = "DDG: "] 
  "30064771104" -> "30064771108"  [ label = "DDG: popen_mock"] 
  "111669149697" -> "30064771108"  [ label = "DDG: "] 
  "30064771107" -> "30064771108"  [ label = "DDG: write_config_mock"] 
  "111669149697" -> "30064771074"  [ label = "DDG: "] 
}
"""
)
