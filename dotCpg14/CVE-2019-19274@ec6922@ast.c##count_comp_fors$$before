[33mval[0m [36mres1384[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "count_comp_fors" {  
"111669149697" [label = <(METHOD,count_comp_fors)<SUB>1</SUB>> ]
"115964116992" [label = <(PARAM,struct compiling *c)<SUB>1</SUB>> ]
"115964116993" [label = <(PARAM,const node *n)<SUB>1</SUB>> ]
"25769803777" [label = <(BLOCK,{
    int n_fors = 0;
    int is_async;

  coun...,{
    int n_fors = 0;
    int is_async;

  coun...)<SUB>2</SUB>> ]
"94489280512" [label = <(LOCAL,int n_fors: int)<SUB>3</SUB>> ]
"30064771072" [label = <(&lt;operator&gt;.assignment,n_fors = 0)<SUB>3</SUB>> ]
"68719476736" [label = <(IDENTIFIER,n_fors,n_fors = 0)<SUB>3</SUB>> ]
"90194313216" [label = <(LITERAL,0,n_fors = 0)<SUB>3</SUB>> ]
"94489280513" [label = <(LOCAL,int is_async: int)<SUB>4</SUB>> ]
"81604378624" [label = <(JUMP_TARGET,count_comp_for)<SUB>6</SUB>> ]
"30064771073" [label = <(&lt;operator&gt;.assignment,is_async = 0)<SUB>7</SUB>> ]
"68719476737" [label = <(IDENTIFIER,is_async,is_async = 0)<SUB>7</SUB>> ]
"90194313217" [label = <(LITERAL,0,is_async = 0)<SUB>7</SUB>> ]
"30064771074" [label = <(&lt;operator&gt;.postIncrement,n_fors++)<SUB>8</SUB>> ]
"68719476738" [label = <(IDENTIFIER,n_fors,n_fors++)<SUB>8</SUB>> ]
"30064771075" [label = <(REQ,REQ(n, comp_for))<SUB>9</SUB>> ]
"68719476739" [label = <(IDENTIFIER,n,REQ(n, comp_for))<SUB>9</SUB>> ]
"68719476740" [label = <(IDENTIFIER,comp_for,REQ(n, comp_for))<SUB>9</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,IF,if (TYPE(CHILD(n, 0)) == ASYNC))<SUB>10</SUB>> ]
"30064771076" [label = <(&lt;operator&gt;.equals,TYPE(CHILD(n, 0)) == ASYNC)<SUB>10</SUB>> ]
"30064771077" [label = <(TYPE,TYPE(CHILD(n, 0)))<SUB>10</SUB>> ]
"30064771078" [label = <(CHILD,CHILD(n, 0))<SUB>10</SUB>> ]
"68719476741" [label = <(IDENTIFIER,n,CHILD(n, 0))<SUB>10</SUB>> ]
"90194313218" [label = <(LITERAL,0,CHILD(n, 0))<SUB>10</SUB>> ]
"68719476742" [label = <(IDENTIFIER,ASYNC,TYPE(CHILD(n, 0)) == ASYNC)<SUB>10</SUB>> ]
"25769803778" [label = <(BLOCK,{
        is_async = 1;
    },{
        is_async = 1;
    })<SUB>10</SUB>> ]
"30064771079" [label = <(&lt;operator&gt;.assignment,is_async = 1)<SUB>11</SUB>> ]
"68719476743" [label = <(IDENTIFIER,is_async,is_async = 1)<SUB>11</SUB>> ]
"90194313219" [label = <(LITERAL,1,is_async = 1)<SUB>11</SUB>> ]
"47244640257" [label = <(CONTROL_STRUCTURE,IF,if (NCH(n) == (5 + is_async)))<SUB>13</SUB>> ]
"30064771080" [label = <(&lt;operator&gt;.equals,NCH(n) == (5 + is_async))<SUB>13</SUB>> ]
"30064771081" [label = <(NCH,NCH(n))<SUB>13</SUB>> ]
"68719476744" [label = <(IDENTIFIER,n,NCH(n))<SUB>13</SUB>> ]
"30064771082" [label = <(&lt;operator&gt;.addition,5 + is_async)<SUB>13</SUB>> ]
"90194313220" [label = <(LITERAL,5,5 + is_async)<SUB>13</SUB>> ]
"68719476745" [label = <(IDENTIFIER,is_async,5 + is_async)<SUB>13</SUB>> ]
"25769803779" [label = <(BLOCK,{
        n = CHILD(n, 4 + is_async);
    },{
        n = CHILD(n, 4 + is_async);
    })<SUB>13</SUB>> ]
"30064771083" [label = <(&lt;operator&gt;.assignment,n = CHILD(n, 4 + is_async))<SUB>14</SUB>> ]
"68719476746" [label = <(IDENTIFIER,n,n = CHILD(n, 4 + is_async))<SUB>14</SUB>> ]
"30064771084" [label = <(CHILD,CHILD(n, 4 + is_async))<SUB>14</SUB>> ]
"68719476747" [label = <(IDENTIFIER,n,CHILD(n, 4 + is_async))<SUB>14</SUB>> ]
"30064771085" [label = <(&lt;operator&gt;.addition,4 + is_async)<SUB>14</SUB>> ]
"90194313221" [label = <(LITERAL,4,4 + is_async)<SUB>14</SUB>> ]
"68719476748" [label = <(IDENTIFIER,is_async,4 + is_async)<SUB>14</SUB>> ]
"47244640258" [label = <(CONTROL_STRUCTURE,ELSE,else)<SUB>16</SUB>> ]
"25769803780" [label = <(BLOCK,{
        return n_fors;
    },{
        return n_fors;
    })<SUB>16</SUB>> ]
"146028888064" [label = <(RETURN,return n_fors;,return n_fors;)<SUB>17</SUB>> ]
"68719476749" [label = <(IDENTIFIER,n_fors,return n_fors;)<SUB>17</SUB>> ]
"81604378625" [label = <(JUMP_TARGET,count_comp_iter)<SUB>19</SUB>> ]
"30064771086" [label = <(REQ,REQ(n, comp_iter))<SUB>20</SUB>> ]
"68719476750" [label = <(IDENTIFIER,n,REQ(n, comp_iter))<SUB>20</SUB>> ]
"68719476751" [label = <(IDENTIFIER,comp_iter,REQ(n, comp_iter))<SUB>20</SUB>> ]
"30064771087" [label = <(&lt;operator&gt;.assignment,n = CHILD(n, 0))<SUB>21</SUB>> ]
"68719476752" [label = <(IDENTIFIER,n,n = CHILD(n, 0))<SUB>21</SUB>> ]
"30064771088" [label = <(CHILD,CHILD(n, 0))<SUB>21</SUB>> ]
"68719476753" [label = <(IDENTIFIER,n,CHILD(n, 0))<SUB>21</SUB>> ]
"90194313222" [label = <(LITERAL,0,CHILD(n, 0))<SUB>21</SUB>> ]
"47244640259" [label = <(CONTROL_STRUCTURE,IF,if (TYPE(n) == comp_for))<SUB>22</SUB>> ]
"30064771089" [label = <(&lt;operator&gt;.equals,TYPE(n) == comp_for)<SUB>22</SUB>> ]
"30064771090" [label = <(TYPE,TYPE(n))<SUB>22</SUB>> ]
"68719476754" [label = <(IDENTIFIER,n,TYPE(n))<SUB>22</SUB>> ]
"68719476755" [label = <(IDENTIFIER,comp_for,TYPE(n) == comp_for)<SUB>22</SUB>> ]
"25769803781" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>23</SUB>> ]
"47244640260" [label = <(CONTROL_STRUCTURE,GOTO,goto count_comp_for;)<SUB>23</SUB>> ]
"47244640261" [label = <(CONTROL_STRUCTURE,ELSE,else)<SUB>24</SUB>> ]
"25769803782" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>24</SUB>> ]
"47244640262" [label = <(CONTROL_STRUCTURE,IF,if (TYPE(n) == comp_if))<SUB>24</SUB>> ]
"30064771091" [label = <(&lt;operator&gt;.equals,TYPE(n) == comp_if)<SUB>24</SUB>> ]
"30064771092" [label = <(TYPE,TYPE(n))<SUB>24</SUB>> ]
"68719476756" [label = <(IDENTIFIER,n,TYPE(n))<SUB>24</SUB>> ]
"68719476757" [label = <(IDENTIFIER,comp_if,TYPE(n) == comp_if)<SUB>24</SUB>> ]
"25769803783" [label = <(BLOCK,{
        if (NCH(n) == 3) {
            n = CH...,{
        if (NCH(n) == 3) {
            n = CH...)<SUB>24</SUB>> ]
"47244640263" [label = <(CONTROL_STRUCTURE,IF,if (NCH(n) == 3))<SUB>25</SUB>> ]
"30064771093" [label = <(&lt;operator&gt;.equals,NCH(n) == 3)<SUB>25</SUB>> ]
"30064771094" [label = <(NCH,NCH(n))<SUB>25</SUB>> ]
"68719476758" [label = <(IDENTIFIER,n,NCH(n))<SUB>25</SUB>> ]
"90194313223" [label = <(LITERAL,3,NCH(n) == 3)<SUB>25</SUB>> ]
"25769803784" [label = <(BLOCK,{
            n = CHILD(n, 2);
            goto...,{
            n = CHILD(n, 2);
            goto...)<SUB>25</SUB>> ]
"30064771095" [label = <(&lt;operator&gt;.assignment,n = CHILD(n, 2))<SUB>26</SUB>> ]
"68719476759" [label = <(IDENTIFIER,n,n = CHILD(n, 2))<SUB>26</SUB>> ]
"30064771096" [label = <(CHILD,CHILD(n, 2))<SUB>26</SUB>> ]
"68719476760" [label = <(IDENTIFIER,n,CHILD(n, 2))<SUB>26</SUB>> ]
"90194313224" [label = <(LITERAL,2,CHILD(n, 2))<SUB>26</SUB>> ]
"47244640264" [label = <(CONTROL_STRUCTURE,GOTO,goto count_comp_iter;)<SUB>27</SUB>> ]
"47244640265" [label = <(CONTROL_STRUCTURE,ELSE,else)<SUB>30</SUB>> ]
"25769803785" [label = <(BLOCK,&lt;empty&gt;,&lt;empty&gt;)<SUB>30</SUB>> ]
"146028888065" [label = <(RETURN,return n_fors;,return n_fors;)<SUB>30</SUB>> ]
"68719476761" [label = <(IDENTIFIER,n_fors,return n_fors;)<SUB>30</SUB>> ]
"30064771097" [label = <(PyErr_SetString,PyErr_SetString(PyExc_SystemError,
            ...)<SUB>34</SUB>> ]
"68719476762" [label = <(IDENTIFIER,PyExc_SystemError,PyErr_SetString(PyExc_SystemError,
            ...)<SUB>34</SUB>> ]
"90194313225" [label = <(LITERAL,&quot;logic error in count_comp_fors&quot;,PyErr_SetString(PyExc_SystemError,
            ...)<SUB>35</SUB>> ]
"146028888066" [label = <(RETURN,return -1;,return -1;)<SUB>36</SUB>> ]
"30064771098" [label = <(&lt;operator&gt;.minus,-1)<SUB>36</SUB>> ]
"90194313226" [label = <(LITERAL,1,-1)<SUB>36</SUB>> ]
"128849018880" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "115964116993"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "128849018880"  [ label = "AST: "] 
  "25769803777" -> "94489280512"  [ label = "AST: "] 
  "25769803777" -> "30064771072"  [ label = "AST: "] 
  "25769803777" -> "94489280513"  [ label = "AST: "] 
  "25769803777" -> "81604378624"  [ label = "AST: "] 
  "25769803777" -> "30064771073"  [ label = "AST: "] 
  "25769803777" -> "30064771074"  [ label = "AST: "] 
  "25769803777" -> "30064771075"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "25769803777" -> "47244640257"  [ label = "AST: "] 
  "25769803777" -> "81604378625"  [ label = "AST: "] 
  "25769803777" -> "30064771086"  [ label = "AST: "] 
  "25769803777" -> "30064771087"  [ label = "AST: "] 
  "25769803777" -> "47244640259"  [ label = "AST: "] 
  "25769803777" -> "30064771097"  [ label = "AST: "] 
  "25769803777" -> "146028888066"  [ label = "AST: "] 
  "30064771072" -> "68719476736"  [ label = "AST: "] 
  "30064771072" -> "90194313216"  [ label = "AST: "] 
  "30064771073" -> "68719476737"  [ label = "AST: "] 
  "30064771073" -> "90194313217"  [ label = "AST: "] 
  "30064771074" -> "68719476738"  [ label = "AST: "] 
  "30064771075" -> "68719476739"  [ label = "AST: "] 
  "30064771075" -> "68719476740"  [ label = "AST: "] 
  "47244640256" -> "30064771076"  [ label = "AST: "] 
  "47244640256" -> "25769803778"  [ label = "AST: "] 
  "30064771076" -> "30064771077"  [ label = "AST: "] 
  "30064771076" -> "68719476742"  [ label = "AST: "] 
  "30064771077" -> "30064771078"  [ label = "AST: "] 
  "30064771078" -> "68719476741"  [ label = "AST: "] 
  "30064771078" -> "90194313218"  [ label = "AST: "] 
  "25769803778" -> "30064771079"  [ label = "AST: "] 
  "30064771079" -> "68719476743"  [ label = "AST: "] 
  "30064771079" -> "90194313219"  [ label = "AST: "] 
  "47244640257" -> "30064771080"  [ label = "AST: "] 
  "47244640257" -> "25769803779"  [ label = "AST: "] 
  "47244640257" -> "47244640258"  [ label = "AST: "] 
  "30064771080" -> "30064771081"  [ label = "AST: "] 
  "30064771080" -> "30064771082"  [ label = "AST: "] 
  "30064771081" -> "68719476744"  [ label = "AST: "] 
  "30064771082" -> "90194313220"  [ label = "AST: "] 
  "30064771082" -> "68719476745"  [ label = "AST: "] 
  "25769803779" -> "30064771083"  [ label = "AST: "] 
  "30064771083" -> "68719476746"  [ label = "AST: "] 
  "30064771083" -> "30064771084"  [ label = "AST: "] 
  "30064771084" -> "68719476747"  [ label = "AST: "] 
  "30064771084" -> "30064771085"  [ label = "AST: "] 
  "30064771085" -> "90194313221"  [ label = "AST: "] 
  "30064771085" -> "68719476748"  [ label = "AST: "] 
  "47244640258" -> "25769803780"  [ label = "AST: "] 
  "25769803780" -> "146028888064"  [ label = "AST: "] 
  "146028888064" -> "68719476749"  [ label = "AST: "] 
  "30064771086" -> "68719476750"  [ label = "AST: "] 
  "30064771086" -> "68719476751"  [ label = "AST: "] 
  "30064771087" -> "68719476752"  [ label = "AST: "] 
  "30064771087" -> "30064771088"  [ label = "AST: "] 
  "30064771088" -> "68719476753"  [ label = "AST: "] 
  "30064771088" -> "90194313222"  [ label = "AST: "] 
  "47244640259" -> "30064771089"  [ label = "AST: "] 
  "47244640259" -> "25769803781"  [ label = "AST: "] 
  "47244640259" -> "47244640261"  [ label = "AST: "] 
  "30064771089" -> "30064771090"  [ label = "AST: "] 
  "30064771089" -> "68719476755"  [ label = "AST: "] 
  "30064771090" -> "68719476754"  [ label = "AST: "] 
  "25769803781" -> "47244640260"  [ label = "AST: "] 
  "47244640261" -> "25769803782"  [ label = "AST: "] 
  "25769803782" -> "47244640262"  [ label = "AST: "] 
  "47244640262" -> "30064771091"  [ label = "AST: "] 
  "47244640262" -> "25769803783"  [ label = "AST: "] 
  "30064771091" -> "30064771092"  [ label = "AST: "] 
  "30064771091" -> "68719476757"  [ label = "AST: "] 
  "30064771092" -> "68719476756"  [ label = "AST: "] 
  "25769803783" -> "47244640263"  [ label = "AST: "] 
  "47244640263" -> "30064771093"  [ label = "AST: "] 
  "47244640263" -> "25769803784"  [ label = "AST: "] 
  "47244640263" -> "47244640265"  [ label = "AST: "] 
  "30064771093" -> "30064771094"  [ label = "AST: "] 
  "30064771093" -> "90194313223"  [ label = "AST: "] 
  "30064771094" -> "68719476758"  [ label = "AST: "] 
  "25769803784" -> "30064771095"  [ label = "AST: "] 
  "25769803784" -> "47244640264"  [ label = "AST: "] 
  "30064771095" -> "68719476759"  [ label = "AST: "] 
  "30064771095" -> "30064771096"  [ label = "AST: "] 
  "30064771096" -> "68719476760"  [ label = "AST: "] 
  "30064771096" -> "90194313224"  [ label = "AST: "] 
  "47244640265" -> "25769803785"  [ label = "AST: "] 
  "25769803785" -> "146028888065"  [ label = "AST: "] 
  "146028888065" -> "68719476761"  [ label = "AST: "] 
  "30064771097" -> "68719476762"  [ label = "AST: "] 
  "30064771097" -> "90194313225"  [ label = "AST: "] 
  "146028888066" -> "30064771098"  [ label = "AST: "] 
  "30064771098" -> "90194313226"  [ label = "AST: "] 
  "30064771072" -> "30064771073"  [ label = "CFG: "] 
  "30064771073" -> "30064771074"  [ label = "CFG: "] 
  "30064771074" -> "30064771075"  [ label = "CFG: "] 
  "30064771075" -> "30064771078"  [ label = "CFG: "] 
  "30064771086" -> "30064771088"  [ label = "CFG: "] 
  "30064771087" -> "30064771090"  [ label = "CFG: "] 
  "30064771097" -> "30064771098"  [ label = "CFG: "] 
  "146028888066" -> "128849018880"  [ label = "CFG: "] 
  "30064771076" -> "30064771079"  [ label = "CFG: "] 
  "30064771076" -> "30064771081"  [ label = "CFG: "] 
  "30064771080" -> "30064771085"  [ label = "CFG: "] 
  "30064771080" -> "146028888064"  [ label = "CFG: "] 
  "30064771088" -> "30064771087"  [ label = "CFG: "] 
  "30064771089" -> "30064771073"  [ label = "CFG: "] 
  "30064771089" -> "30064771092"  [ label = "CFG: "] 
  "30064771098" -> "146028888066"  [ label = "CFG: "] 
  "30064771077" -> "30064771076"  [ label = "CFG: "] 
  "30064771079" -> "30064771081"  [ label = "CFG: "] 
  "30064771081" -> "30064771082"  [ label = "CFG: "] 
  "30064771082" -> "30064771080"  [ label = "CFG: "] 
  "30064771083" -> "30064771086"  [ label = "CFG: "] 
  "30064771090" -> "30064771089"  [ label = "CFG: "] 
  "30064771078" -> "30064771077"  [ label = "CFG: "] 
  "30064771084" -> "30064771083"  [ label = "CFG: "] 
  "146028888064" -> "128849018880"  [ label = "CFG: "] 
  "30064771085" -> "30064771084"  [ label = "CFG: "] 
  "30064771091" -> "30064771094"  [ label = "CFG: "] 
  "30064771091" -> "30064771097"  [ label = "CFG: "] 
  "30064771092" -> "30064771091"  [ label = "CFG: "] 
  "30064771093" -> "30064771096"  [ label = "CFG: "] 
  "30064771093" -> "146028888065"  [ label = "CFG: "] 
  "30064771094" -> "30064771093"  [ label = "CFG: "] 
  "30064771095" -> "30064771086"  [ label = "CFG: "] 
  "30064771096" -> "30064771095"  [ label = "CFG: "] 
  "146028888065" -> "128849018880"  [ label = "CFG: "] 
  "111669149697" -> "30064771072"  [ label = "CFG: "] 
  "146028888064" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888066" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "146028888065" -> "128849018880"  [ label = "DDG: &lt;RET&gt;"] 
  "115964116992" -> "128849018880"  [ label = "DDG: c"] 
  "30064771072" -> "128849018880"  [ label = "DDG: n_fors = 0"] 
  "30064771073" -> "128849018880"  [ label = "DDG: is_async = 0"] 
  "30064771074" -> "128849018880"  [ label = "DDG: n_fors"] 
  "30064771074" -> "128849018880"  [ label = "DDG: n_fors++"] 
  "30064771075" -> "128849018880"  [ label = "DDG: comp_for"] 
  "30064771075" -> "128849018880"  [ label = "DDG: REQ(n, comp_for)"] 
  "30064771077" -> "128849018880"  [ label = "DDG: CHILD(n, 0)"] 
  "30064771076" -> "128849018880"  [ label = "DDG: TYPE(CHILD(n, 0))"] 
  "30064771076" -> "128849018880"  [ label = "DDG: TYPE(CHILD(n, 0)) == ASYNC"] 
  "30064771079" -> "128849018880"  [ label = "DDG: is_async = 1"] 
  "30064771081" -> "128849018880"  [ label = "DDG: n"] 
  "30064771080" -> "128849018880"  [ label = "DDG: NCH(n)"] 
  "30064771082" -> "128849018880"  [ label = "DDG: is_async"] 
  "30064771080" -> "128849018880"  [ label = "DDG: 5 + is_async"] 
  "30064771080" -> "128849018880"  [ label = "DDG: NCH(n) == (5 + is_async)"] 
  "30064771084" -> "128849018880"  [ label = "DDG: 4 + is_async"] 
  "30064771083" -> "128849018880"  [ label = "DDG: CHILD(n, 4 + is_async)"] 
  "30064771083" -> "128849018880"  [ label = "DDG: n = CHILD(n, 4 + is_async)"] 
  "30064771086" -> "128849018880"  [ label = "DDG: REQ(n, comp_iter)"] 
  "30064771087" -> "128849018880"  [ label = "DDG: n = CHILD(n, 0)"] 
  "30064771089" -> "128849018880"  [ label = "DDG: TYPE(n)"] 
  "30064771089" -> "128849018880"  [ label = "DDG: TYPE(n) == comp_for"] 
  "30064771091" -> "128849018880"  [ label = "DDG: TYPE(n) == comp_if"] 
  "30064771093" -> "128849018880"  [ label = "DDG: NCH(n) == 3"] 
  "30064771095" -> "128849018880"  [ label = "DDG: CHILD(n, 2)"] 
  "30064771095" -> "128849018880"  [ label = "DDG: n = CHILD(n, 2)"] 
  "30064771076" -> "128849018880"  [ label = "DDG: ASYNC"] 
  "30064771086" -> "128849018880"  [ label = "DDG: comp_iter"] 
  "30064771091" -> "128849018880"  [ label = "DDG: comp_if"] 
  "30064771097" -> "128849018880"  [ label = "DDG: PyExc_SystemError"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "111669149697" -> "115964116993"  [ label = "DDG: "] 
  "111669149697" -> "30064771072"  [ label = "DDG: "] 
  "111669149697" -> "30064771073"  [ label = "DDG: "] 
  "30064771088" -> "30064771087"  [ label = "DDG: n"] 
  "30064771088" -> "30064771087"  [ label = "DDG: 0"] 
  "30064771098" -> "146028888066"  [ label = "DDG: -1"] 
  "30064771072" -> "30064771074"  [ label = "DDG: n_fors"] 
  "111669149697" -> "30064771074"  [ label = "DDG: "] 
  "115964116993" -> "30064771075"  [ label = "DDG: n"] 
  "30064771090" -> "30064771075"  [ label = "DDG: n"] 
  "111669149697" -> "30064771075"  [ label = "DDG: "] 
  "30064771089" -> "30064771075"  [ label = "DDG: comp_for"] 
  "30064771083" -> "30064771086"  [ label = "DDG: n"] 
  "30064771095" -> "30064771086"  [ label = "DDG: n"] 
  "111669149697" -> "30064771086"  [ label = "DDG: "] 
  "111669149697" -> "30064771097"  [ label = "DDG: "] 
  "30064771077" -> "30064771076"  [ label = "DDG: CHILD(n, 0)"] 
  "111669149697" -> "30064771076"  [ label = "DDG: "] 
  "111669149697" -> "30064771079"  [ label = "DDG: "] 
  "30064771081" -> "30064771080"  [ label = "DDG: n"] 
  "111669149697" -> "30064771080"  [ label = "DDG: "] 
  "30064771073" -> "30064771080"  [ label = "DDG: is_async"] 
  "30064771079" -> "30064771080"  [ label = "DDG: is_async"] 
  "30064771084" -> "30064771083"  [ label = "DDG: n"] 
  "30064771084" -> "30064771083"  [ label = "DDG: 4 + is_async"] 
  "30064771086" -> "30064771088"  [ label = "DDG: n"] 
  "111669149697" -> "30064771088"  [ label = "DDG: "] 
  "30064771090" -> "30064771089"  [ label = "DDG: n"] 
  "30064771075" -> "30064771089"  [ label = "DDG: comp_for"] 
  "111669149697" -> "30064771089"  [ label = "DDG: "] 
  "111669149697" -> "30064771098"  [ label = "DDG: "] 
  "30064771078" -> "30064771077"  [ label = "DDG: n"] 
  "30064771078" -> "30064771077"  [ label = "DDG: 0"] 
  "30064771078" -> "30064771081"  [ label = "DDG: n"] 
  "111669149697" -> "30064771081"  [ label = "DDG: "] 
  "111669149697" -> "30064771082"  [ label = "DDG: "] 
  "30064771073" -> "30064771082"  [ label = "DDG: is_async"] 
  "30064771079" -> "30064771082"  [ label = "DDG: is_async"] 
  "68719476749" -> "146028888064"  [ label = "DDG: n_fors"] 
  "30064771087" -> "30064771090"  [ label = "DDG: n"] 
  "111669149697" -> "30064771090"  [ label = "DDG: "] 
  "30064771075" -> "30064771078"  [ label = "DDG: n"] 
  "111669149697" -> "30064771078"  [ label = "DDG: "] 
  "30064771081" -> "30064771084"  [ label = "DDG: n"] 
  "111669149697" -> "30064771084"  [ label = "DDG: "] 
  "30064771073" -> "30064771084"  [ label = "DDG: is_async"] 
  "30064771079" -> "30064771084"  [ label = "DDG: is_async"] 
  "30064771074" -> "68719476749"  [ label = "DDG: n_fors"] 
  "111669149697" -> "68719476749"  [ label = "DDG: "] 
  "111669149697" -> "30064771085"  [ label = "DDG: "] 
  "30064771073" -> "30064771085"  [ label = "DDG: is_async"] 
  "30064771079" -> "30064771085"  [ label = "DDG: is_async"] 
  "30064771092" -> "30064771091"  [ label = "DDG: n"] 
  "111669149697" -> "30064771091"  [ label = "DDG: "] 
  "30064771090" -> "30064771092"  [ label = "DDG: n"] 
  "111669149697" -> "30064771092"  [ label = "DDG: "] 
  "30064771094" -> "30064771093"  [ label = "DDG: n"] 
  "111669149697" -> "30064771093"  [ label = "DDG: "] 
  "30064771096" -> "30064771095"  [ label = "DDG: n"] 
  "30064771096" -> "30064771095"  [ label = "DDG: 2"] 
  "30064771092" -> "30064771094"  [ label = "DDG: n"] 
  "111669149697" -> "30064771094"  [ label = "DDG: "] 
  "68719476761" -> "146028888065"  [ label = "DDG: n_fors"] 
  "30064771094" -> "30064771096"  [ label = "DDG: n"] 
  "111669149697" -> "30064771096"  [ label = "DDG: "] 
  "30064771074" -> "68719476761"  [ label = "DDG: n_fors"] 
  "111669149697" -> "68719476761"  [ label = "DDG: "] 
  "30064771076" -> "30064771079"  [ label = "CDG: "] 
  "30064771080" -> "30064771083"  [ label = "CDG: "] 
  "30064771080" -> "30064771084"  [ label = "CDG: "] 
  "30064771080" -> "30064771085"  [ label = "CDG: "] 
  "30064771080" -> "30064771086"  [ label = "CDG: "] 
  "30064771080" -> "30064771087"  [ label = "CDG: "] 
  "30064771080" -> "30064771088"  [ label = "CDG: "] 
  "30064771080" -> "30064771089"  [ label = "CDG: "] 
  "30064771080" -> "30064771090"  [ label = "CDG: "] 
  "30064771080" -> "146028888064"  [ label = "CDG: "] 
  "30064771089" -> "30064771073"  [ label = "CDG: "] 
  "30064771089" -> "30064771074"  [ label = "CDG: "] 
  "30064771089" -> "30064771075"  [ label = "CDG: "] 
  "30064771089" -> "30064771076"  [ label = "CDG: "] 
  "30064771089" -> "30064771077"  [ label = "CDG: "] 
  "30064771089" -> "30064771078"  [ label = "CDG: "] 
  "30064771089" -> "30064771080"  [ label = "CDG: "] 
  "30064771089" -> "30064771081"  [ label = "CDG: "] 
  "30064771089" -> "30064771082"  [ label = "CDG: "] 
  "30064771089" -> "30064771091"  [ label = "CDG: "] 
  "30064771089" -> "30064771092"  [ label = "CDG: "] 
  "30064771091" -> "30064771093"  [ label = "CDG: "] 
  "30064771091" -> "30064771094"  [ label = "CDG: "] 
  "30064771091" -> "30064771097"  [ label = "CDG: "] 
  "30064771091" -> "30064771098"  [ label = "CDG: "] 
  "30064771091" -> "146028888066"  [ label = "CDG: "] 
  "30064771093" -> "30064771086"  [ label = "CDG: "] 
  "30064771093" -> "30064771087"  [ label = "CDG: "] 
  "30064771093" -> "30064771088"  [ label = "CDG: "] 
  "30064771093" -> "30064771089"  [ label = "CDG: "] 
  "30064771093" -> "30064771090"  [ label = "CDG: "] 
  "30064771093" -> "30064771095"  [ label = "CDG: "] 
  "30064771093" -> "30064771096"  [ label = "CDG: "] 
  "30064771093" -> "146028888065"  [ label = "CDG: "] 
}
"""
)
