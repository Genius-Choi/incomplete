[33mval[0m [36mres966[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "test_tunnel_process" {  
"111669149697" [label = <(METHOD,test_tunnel_process)<SUB>1</SUB>> ]
"25769803777" [label = <(BLOCK,,)<SUB>1</SUB>> ]
"30064771073" [label = <(poll,tunnel_proc.poll())<SUB>2</SUB>> ]
"30064771072" [label = <(&lt;operator&gt;.fieldAccess,tunnel_proc.poll)<SUB>2</SUB>> ]
"68719476737" [label = <(IDENTIFIER,tunnel_proc,tunnel_proc.poll())<SUB>2</SUB>> ]
"55834574848" [label = <(FIELD_IDENTIFIER,poll,poll)<SUB>2</SUB>> ]
"68719476738" [label = <(IDENTIFIER,tunnel_proc,tunnel_proc.poll())<SUB>2</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,IF,if ... : ...)<SUB>3</SUB>> ]
"30064771075" [label = <(&lt;operator&gt;.isNot,tunnel_proc.returncode is not None)<SUB>3</SUB>> ]
"30064771074" [label = <(&lt;operator&gt;.fieldAccess,tunnel_proc.returncode)<SUB>3</SUB>> ]
"68719476739" [label = <(IDENTIFIER,tunnel_proc,tunnel_proc.returncode is not None)<SUB>3</SUB>> ]
"55834574849" [label = <(FIELD_IDENTIFIER,returncode,returncode)<SUB>3</SUB>> ]
"90194313216" [label = <(LITERAL,None,tunnel_proc.returncode is not None)<SUB>3</SUB>> ]
"25769803779" [label = <(BLOCK,tmp0 = tunnel_proc.communicate()
_ = tmp0[0]
er...,tmp0 = tunnel_proc.communicate()
_ = tmp0[0]
er...)<SUB>3</SUB>> ]
"25769803778" [label = <(BLOCK,tmp0 = tunnel_proc.communicate()
_ = tmp0[0]
er...,tmp0 = tunnel_proc.communicate()
_ = tmp0[0]
er...)<SUB>4</SUB>> ]
"30064771078" [label = <(&lt;operator&gt;.assignment,tmp0 = tunnel_proc.communicate())<SUB>4</SUB>> ]
"68719476742" [label = <(IDENTIFIER,tmp0,tmp0 = tunnel_proc.communicate())<SUB>4</SUB>> ]
"30064771077" [label = <(communicate,tunnel_proc.communicate())<SUB>4</SUB>> ]
"30064771076" [label = <(&lt;operator&gt;.fieldAccess,tunnel_proc.communicate)<SUB>4</SUB>> ]
"68719476740" [label = <(IDENTIFIER,tunnel_proc,tunnel_proc.communicate())<SUB>4</SUB>> ]
"55834574850" [label = <(FIELD_IDENTIFIER,communicate,communicate)<SUB>4</SUB>> ]
"68719476741" [label = <(IDENTIFIER,tunnel_proc,tunnel_proc.communicate())<SUB>4</SUB>> ]
"30064771080" [label = <(&lt;operator&gt;.assignment,_ = tmp0[0])<SUB>4</SUB>> ]
"68719476743" [label = <(IDENTIFIER,_,_ = tmp0[0])<SUB>4</SUB>> ]
"30064771079" [label = <(&lt;operator&gt;.indexAccess,tmp0[0])<SUB>4</SUB>> ]
"68719476744" [label = <(IDENTIFIER,tmp0,_ = tmp0[0])<SUB>4</SUB>> ]
"90194313217" [label = <(LITERAL,0,_ = tmp0[0])<SUB>4</SUB>> ]
"30064771082" [label = <(&lt;operator&gt;.assignment,err = tmp0[1])<SUB>4</SUB>> ]
"68719476745" [label = <(IDENTIFIER,err,err = tmp0[1])<SUB>4</SUB>> ]
"30064771081" [label = <(&lt;operator&gt;.indexAccess,tmp0[1])<SUB>4</SUB>> ]
"68719476746" [label = <(IDENTIFIER,tmp0,err = tmp0[1])<SUB>4</SUB>> ]
"90194313218" [label = <(LITERAL,1,err = tmp0[1])<SUB>4</SUB>> ]
"30064771090" [label = <(fatal_error,fatal_error(&quot;Failed to initialize TLS tunnel fo...)<SUB>5</SUB>> ]
"68719476751" [label = <(IDENTIFIER,fatal_error,fatal_error(&quot;Failed to initialize TLS tunnel fo...)<SUB>5</SUB>> ]
"30064771083" [label = <(&lt;operator&gt;.modulo,&quot;Failed to initialize TLS tunnel for %s, please...)<SUB>6</SUB>> ]
"90194313219" [label = <(LITERAL,&quot;Failed to initialize TLS tunnel for %s, please...,&quot;Failed to initialize TLS tunnel for %s, please...)<SUB>6</SUB>> ]
"68719476747" [label = <(IDENTIFIER,fs_id,&quot;Failed to initialize TLS tunnel for %s, please...)<SUB>7</SUB>> ]
"30064771089" [label = <(&lt;operator&gt;.modulo,'Failed to start TLS tunnel (errno=%d), stderr=...)<SUB>8</SUB>> ]
"30064771084" [label = <(&lt;operator&gt;.stringExpressionList,'Failed to start TLS tunnel (errno=%d), stderr=...)<SUB>8</SUB>> ]
"90194313220" [label = <(LITERAL,'Failed to start TLS tunnel (errno=%d), stderr=...,'Failed to start TLS tunnel (errno=%d), stderr=...)<SUB>8</SUB>> ]
"90194313221" [label = <(LITERAL,&quot;enable stunnel debug log in efs-utils config f...,'Failed to start TLS tunnel (errno=%d), stderr=...)<SUB>9</SUB>> ]
"30064771088" [label = <(&lt;operator&gt;.tupleLiteral,(tunnel_proc.returncode, err.strip()))<SUB>10</SUB>> ]
"30064771085" [label = <(&lt;operator&gt;.fieldAccess,tunnel_proc.returncode)<SUB>10</SUB>> ]
"68719476748" [label = <(IDENTIFIER,tunnel_proc,(tunnel_proc.returncode, err.strip()))<SUB>10</SUB>> ]
"55834574851" [label = <(FIELD_IDENTIFIER,returncode,returncode)<SUB>10</SUB>> ]
"30064771087" [label = <(strip,err.strip())<SUB>10</SUB>> ]
"30064771086" [label = <(&lt;operator&gt;.fieldAccess,err.strip)<SUB>10</SUB>> ]
"68719476749" [label = <(IDENTIFIER,err,err.strip())<SUB>10</SUB>> ]
"55834574852" [label = <(FIELD_IDENTIFIER,strip,strip)<SUB>10</SUB>> ]
"68719476750" [label = <(IDENTIFIER,err,err.strip())<SUB>10</SUB>> ]
"94489280513" [label = <(LOCAL,tmp0: ANY)<SUB>4</SUB>> ]
"94489280514" [label = <(LOCAL,_: ANY)<SUB>4</SUB>> ]
"94489280515" [label = <(LOCAL,err: ANY)<SUB>4</SUB>> ]
"94489280516" [label = <(LOCAL,fatal_error: ANY)<SUB>5</SUB>> ]
"133143986178" [label = <(MODIFIER,VIRTUAL)> ]
"115964116992" [label = <(PARAM,tunnel_proc)<SUB>1</SUB>> ]
"115964116993" [label = <(PARAM,fs_id)<SUB>1</SUB>> ]
"128849018881" [label = <(METHOD_RETURN,ANY)<SUB>1</SUB>> ]
  "111669149697" -> "133143986178"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "115964116993"  [ label = "AST: "] 
  "111669149697" -> "128849018881"  [ label = "AST: "] 
  "25769803777" -> "30064771073"  [ label = "AST: "] 
  "25769803777" -> "94489280513"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "25769803777" -> "94489280514"  [ label = "AST: "] 
  "25769803777" -> "94489280515"  [ label = "AST: "] 
  "25769803777" -> "94489280516"  [ label = "AST: "] 
  "30064771073" -> "30064771072"  [ label = "AST: "] 
  "30064771073" -> "68719476738"  [ label = "AST: "] 
  "30064771072" -> "68719476737"  [ label = "AST: "] 
  "30064771072" -> "55834574848"  [ label = "AST: "] 
  "47244640256" -> "30064771075"  [ label = "AST: "] 
  "47244640256" -> "25769803779"  [ label = "AST: "] 
  "30064771075" -> "30064771074"  [ label = "AST: "] 
  "30064771075" -> "90194313216"  [ label = "AST: "] 
  "30064771074" -> "68719476739"  [ label = "AST: "] 
  "30064771074" -> "55834574849"  [ label = "AST: "] 
  "25769803779" -> "25769803778"  [ label = "AST: "] 
  "25769803779" -> "30064771090"  [ label = "AST: "] 
  "25769803778" -> "30064771078"  [ label = "AST: "] 
  "25769803778" -> "30064771080"  [ label = "AST: "] 
  "25769803778" -> "30064771082"  [ label = "AST: "] 
  "30064771078" -> "68719476742"  [ label = "AST: "] 
  "30064771078" -> "30064771077"  [ label = "AST: "] 
  "30064771077" -> "30064771076"  [ label = "AST: "] 
  "30064771077" -> "68719476741"  [ label = "AST: "] 
  "30064771076" -> "68719476740"  [ label = "AST: "] 
  "30064771076" -> "55834574850"  [ label = "AST: "] 
  "30064771080" -> "68719476743"  [ label = "AST: "] 
  "30064771080" -> "30064771079"  [ label = "AST: "] 
  "30064771079" -> "68719476744"  [ label = "AST: "] 
  "30064771079" -> "90194313217"  [ label = "AST: "] 
  "30064771082" -> "68719476745"  [ label = "AST: "] 
  "30064771082" -> "30064771081"  [ label = "AST: "] 
  "30064771081" -> "68719476746"  [ label = "AST: "] 
  "30064771081" -> "90194313218"  [ label = "AST: "] 
  "30064771090" -> "68719476751"  [ label = "AST: "] 
  "30064771090" -> "30064771083"  [ label = "AST: "] 
  "30064771090" -> "30064771089"  [ label = "AST: "] 
  "30064771083" -> "90194313219"  [ label = "AST: "] 
  "30064771083" -> "68719476747"  [ label = "AST: "] 
  "30064771089" -> "30064771084"  [ label = "AST: "] 
  "30064771089" -> "30064771088"  [ label = "AST: "] 
  "30064771084" -> "90194313220"  [ label = "AST: "] 
  "30064771084" -> "90194313221"  [ label = "AST: "] 
  "30064771088" -> "30064771085"  [ label = "AST: "] 
  "30064771088" -> "30064771087"  [ label = "AST: "] 
  "30064771085" -> "68719476748"  [ label = "AST: "] 
  "30064771085" -> "55834574851"  [ label = "AST: "] 
  "30064771087" -> "30064771086"  [ label = "AST: "] 
  "30064771087" -> "68719476750"  [ label = "AST: "] 
  "30064771086" -> "68719476749"  [ label = "AST: "] 
  "30064771086" -> "55834574852"  [ label = "AST: "] 
  "30064771073" -> "55834574849"  [ label = "CFG: "] 
  "30064771072" -> "30064771073"  [ label = "CFG: "] 
  "30064771075" -> "128849018881"  [ label = "CFG: "] 
  "30064771075" -> "55834574850"  [ label = "CFG: "] 
  "55834574848" -> "30064771072"  [ label = "CFG: "] 
  "30064771074" -> "30064771075"  [ label = "CFG: "] 
  "30064771090" -> "128849018881"  [ label = "CFG: "] 
  "55834574849" -> "30064771074"  [ label = "CFG: "] 
  "30064771078" -> "30064771079"  [ label = "CFG: "] 
  "30064771080" -> "30064771081"  [ label = "CFG: "] 
  "30064771082" -> "30064771083"  [ label = "CFG: "] 
  "30064771083" -> "30064771084"  [ label = "CFG: "] 
  "30064771089" -> "30064771090"  [ label = "CFG: "] 
  "30064771077" -> "30064771078"  [ label = "CFG: "] 
  "30064771079" -> "30064771080"  [ label = "CFG: "] 
  "30064771081" -> "30064771082"  [ label = "CFG: "] 
  "30064771084" -> "55834574851"  [ label = "CFG: "] 
  "30064771088" -> "30064771089"  [ label = "CFG: "] 
  "30064771076" -> "30064771077"  [ label = "CFG: "] 
  "30064771085" -> "55834574852"  [ label = "CFG: "] 
  "30064771087" -> "30064771088"  [ label = "CFG: "] 
  "55834574850" -> "30064771076"  [ label = "CFG: "] 
  "55834574851" -> "30064771085"  [ label = "CFG: "] 
  "30064771086" -> "30064771087"  [ label = "CFG: "] 
  "55834574852" -> "30064771086"  [ label = "CFG: "] 
  "111669149697" -> "55834574848"  [ label = "CFG: "] 
  "30064771073" -> "128849018881"  [ label = "DDG: tunnel_proc.poll()"] 
  "30064771075" -> "128849018881"  [ label = "DDG: tunnel_proc.returncode is not None"] 
  "30064771078" -> "128849018881"  [ label = "DDG: tmp0"] 
  "30064771077" -> "128849018881"  [ label = "DDG: tunnel_proc"] 
  "30064771078" -> "128849018881"  [ label = "DDG: tunnel_proc.communicate()"] 
  "30064771078" -> "128849018881"  [ label = "DDG: tmp0 = tunnel_proc.communicate()"] 
  "30064771080" -> "128849018881"  [ label = "DDG: _"] 
  "30064771080" -> "128849018881"  [ label = "DDG: tmp0[0]"] 
  "30064771080" -> "128849018881"  [ label = "DDG: _ = tmp0[0]"] 
  "30064771082" -> "128849018881"  [ label = "DDG: tmp0[1]"] 
  "30064771082" -> "128849018881"  [ label = "DDG: err = tmp0[1]"] 
  "30064771083" -> "128849018881"  [ label = "DDG: fs_id"] 
  "30064771090" -> "128849018881"  [ label = "DDG: &quot;Failed to initialize TLS tunnel for %s, please check mount.log for the failure reason.&quot; % fs_id"] 
  "30064771089" -> "128849018881"  [ label = "DDG: 'Failed to start TLS tunnel (errno=%d), stderr=&quot;%s&quot;. If the stderr is lacking enough details, please ' &quot;enable stunnel debug log in efs-utils config file and retry the mount to capture more info.&quot;"] 
  "30064771088" -> "128849018881"  [ label = "DDG: tunnel_proc.returncode"] 
  "30064771087" -> "128849018881"  [ label = "DDG: err"] 
  "30064771088" -> "128849018881"  [ label = "DDG: err.strip()"] 
  "30064771089" -> "128849018881"  [ label = "DDG: (tunnel_proc.returncode, err.strip())"] 
  "30064771090" -> "128849018881"  [ label = "DDG: 'Failed to start TLS tunnel (errno=%d), stderr=&quot;%s&quot;. If the stderr is lacking enough details, please ' &quot;enable stunnel debug log in efs-utils config file and retry the mount to capture more info.&quot; % (tunnel_proc.returncode, err.strip())"] 
  "30064771090" -> "128849018881"  [ label = "DDG: fatal_error(&quot;Failed to initialize TLS tunnel for %s, please check mount.log for the failure reason.&quot; % fs_id, 'Failed to start TLS tunnel (errno=%d), stderr=&quot;%s&quot;. If the stderr is lacking enough details, please ' &quot;enable stunnel debug log in efs-utils config file and retry the mount to capture more info.&quot; % (tunnel_proc.returncode, err.strip()))"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "111669149697" -> "115964116993"  [ label = "DDG: "] 
  "115964116992" -> "30064771073"  [ label = "DDG: tunnel_proc"] 
  "111669149697" -> "30064771073"  [ label = "DDG: "] 
  "30064771073" -> "30064771075"  [ label = "DDG: tunnel_proc"] 
  "111669149697" -> "30064771075"  [ label = "DDG: "] 
  "111669149697" -> "25769803778"  [ label = "DDG: "] 
  "30064771077" -> "30064771078"  [ label = "DDG: tunnel_proc"] 
  "30064771078" -> "30064771080"  [ label = "DDG: tmp0"] 
  "30064771078" -> "30064771082"  [ label = "DDG: tmp0"] 
  "111669149697" -> "68719476751"  [ label = "DDG: "] 
  "30064771083" -> "30064771090"  [ label = "DDG: &quot;Failed to initialize TLS tunnel for %s, please check mount.log for the failure reason.&quot;"] 
  "30064771083" -> "30064771090"  [ label = "DDG: fs_id"] 
  "30064771089" -> "30064771090"  [ label = "DDG: 'Failed to start TLS tunnel (errno=%d), stderr=&quot;%s&quot;. If the stderr is lacking enough details, please ' &quot;enable stunnel debug log in efs-utils config file and retry the mount to capture more info.&quot;"] 
  "30064771089" -> "30064771090"  [ label = "DDG: (tunnel_proc.returncode, err.strip())"] 
  "111669149697" -> "30064771083"  [ label = "DDG: "] 
  "115964116993" -> "30064771083"  [ label = "DDG: fs_id"] 
  "30064771084" -> "30064771089"  [ label = "DDG: 'Failed to start TLS tunnel (errno=%d), stderr=&quot;%s&quot;. If the stderr is lacking enough details, please '"] 
  "30064771084" -> "30064771089"  [ label = "DDG: &quot;enable stunnel debug log in efs-utils config file and retry the mount to capture more info.&quot;"] 
  "30064771088" -> "30064771089"  [ label = "DDG: tunnel_proc.returncode"] 
  "30064771088" -> "30064771089"  [ label = "DDG: err.strip()"] 
  "30064771073" -> "30064771077"  [ label = "DDG: tunnel_proc"] 
  "30064771075" -> "30064771077"  [ label = "DDG: tunnel_proc.returncode"] 
  "111669149697" -> "30064771077"  [ label = "DDG: "] 
  "111669149697" -> "30064771084"  [ label = "DDG: "] 
  "30064771077" -> "30064771088"  [ label = "DDG: tunnel_proc"] 
  "30064771087" -> "30064771088"  [ label = "DDG: err"] 
  "30064771082" -> "30064771087"  [ label = "DDG: err"] 
  "111669149697" -> "30064771087"  [ label = "DDG: "] 
  "30064771075" -> "55834574850"  [ label = "CDG: "] 
  "30064771075" -> "30064771076"  [ label = "CDG: "] 
  "30064771075" -> "55834574851"  [ label = "CDG: "] 
  "30064771075" -> "55834574852"  [ label = "CDG: "] 
  "30064771075" -> "30064771083"  [ label = "CDG: "] 
  "30064771075" -> "30064771084"  [ label = "CDG: "] 
  "30064771075" -> "30064771081"  [ label = "CDG: "] 
  "30064771075" -> "30064771082"  [ label = "CDG: "] 
  "30064771075" -> "30064771079"  [ label = "CDG: "] 
  "30064771075" -> "30064771080"  [ label = "CDG: "] 
  "30064771075" -> "30064771077"  [ label = "CDG: "] 
  "30064771075" -> "30064771078"  [ label = "CDG: "] 
  "30064771075" -> "30064771089"  [ label = "CDG: "] 
  "30064771075" -> "30064771090"  [ label = "CDG: "] 
  "30064771075" -> "30064771087"  [ label = "CDG: "] 
  "30064771075" -> "30064771088"  [ label = "CDG: "] 
  "30064771075" -> "30064771085"  [ label = "CDG: "] 
  "30064771075" -> "30064771086"  [ label = "CDG: "] 
}
"""
)
