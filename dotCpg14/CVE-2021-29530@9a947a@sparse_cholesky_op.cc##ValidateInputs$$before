[33mval[0m [36mres563[0m: [32mList[0m[[32mString[0m] = List(
  """digraph "ValidateInputs" {  
"111669149697" [label = <(METHOD,ValidateInputs)<SUB>1</SUB>> ]
"115964116992" [label = <(PARAM,OpKernelContext* ctx)<SUB>1</SUB>> ]
"115964116993" [label = <(PARAM,const CSRSparseMatrix&amp; sparse_matrix)<SUB>2</SUB>> ]
"115964116994" [label = <(PARAM,const Tensor&amp; permutation_indices)<SUB>3</SUB>> ]
"115964116995" [label = <(PARAM,int* batch_size)<SUB>3</SUB>> ]
"115964116996" [label = <(PARAM,int64* num_rows)<SUB>4</SUB>> ]
"25769803777" [label = <(BLOCK,{
    OP_REQUIRES(ctx, sparse_matrix.dtype() ==...,{
    OP_REQUIRES(ctx, sparse_matrix.dtype() ==...)<SUB>4</SUB>> ]
"30064771072" [label = <(OP_REQUIRES,OP_REQUIRES(ctx, sparse_matrix.dtype() == DataT...)<SUB>5</SUB>> ]
"68719476736" [label = <(IDENTIFIER,ctx,OP_REQUIRES(ctx, sparse_matrix.dtype() == DataT...)<SUB>5</SUB>> ]
"30064771073" [label = <(&lt;operator&gt;.equals,sparse_matrix.dtype() == DataTypeToEnum&lt;T&gt;::value)<SUB>5</SUB>> ]
"30064771074" [label = <(dtype,sparse_matrix.dtype())<SUB>5</SUB>> ]
"68719476737" [label = <(IDENTIFIER,sparse_matrix,sparse_matrix.dtype())<SUB>5</SUB>> ]
"30064771075" [label = <(&lt;operator&gt;.greaterThan,DataTypeToEnum&lt;T&gt;::value)<SUB>5</SUB>> ]
"30064771076" [label = <(&lt;operator&gt;.lessThan,DataTypeToEnum&lt;T)<SUB>5</SUB>> ]
"68719476738" [label = <(IDENTIFIER,DataTypeToEnum,DataTypeToEnum&lt;T)<SUB>5</SUB>> ]
"68719476739" [label = <(IDENTIFIER,T,DataTypeToEnum&lt;T)<SUB>5</SUB>> ]
"30064771077" [label = <(&lt;operator&gt;.fieldAccess,::value)<SUB>5</SUB>> ]
"90194313216" [label = <(LITERAL,&lt;global&gt;,DataTypeToEnum&lt;T&gt;::value)<SUB>5</SUB>> ]
"55834574848" [label = <(FIELD_IDENTIFIER,value,value)<SUB>5</SUB>> ]
"30064771078" [label = <(InvalidArgument,errors::InvalidArgument(
                    &quot;A...)<SUB>6</SUB>> ]
"90194313217" [label = <(LITERAL,&quot;Asked for a CSRSparseMatrix of type &quot;,errors::InvalidArgument(
                    &quot;A...)<SUB>7</SUB>> ]
"30064771079" [label = <(DataTypeString,DataTypeString(DataTypeToEnum&lt;T&gt;::value))<SUB>8</SUB>> ]
"30064771080" [label = <(&lt;operator&gt;.greaterThan,DataTypeToEnum&lt;T&gt;::value)<SUB>8</SUB>> ]
"30064771081" [label = <(&lt;operator&gt;.lessThan,DataTypeToEnum&lt;T)<SUB>8</SUB>> ]
"68719476740" [label = <(IDENTIFIER,DataTypeToEnum,DataTypeToEnum&lt;T)<SUB>8</SUB>> ]
"68719476741" [label = <(IDENTIFIER,T,DataTypeToEnum&lt;T)<SUB>8</SUB>> ]
"30064771082" [label = <(&lt;operator&gt;.fieldAccess,::value)<SUB>8</SUB>> ]
"90194313218" [label = <(LITERAL,&lt;global&gt;,DataTypeToEnum&lt;T&gt;::value)<SUB>8</SUB>> ]
"55834574849" [label = <(FIELD_IDENTIFIER,value,value)<SUB>8</SUB>> ]
"90194313219" [label = <(LITERAL,&quot; but saw dtype: &quot;,errors::InvalidArgument(
                    &quot;A...)<SUB>9</SUB>> ]
"30064771083" [label = <(DataTypeString,DataTypeString(sparse_matrix.dtype()))<SUB>9</SUB>> ]
"30064771084" [label = <(dtype,sparse_matrix.dtype())<SUB>9</SUB>> ]
"68719476742" [label = <(IDENTIFIER,sparse_matrix,sparse_matrix.dtype())<SUB>9</SUB>> ]
"94489280512" [label = <(LOCAL,const Tensor&amp; dense_shape: Tensor&amp;)<SUB>11</SUB>> ]
"30064771085" [label = <(&lt;operator&gt;.assignment,&amp; dense_shape = sparse_matrix.dense_shape())<SUB>11</SUB>> ]
"68719476743" [label = <(IDENTIFIER,dense_shape,&amp; dense_shape = sparse_matrix.dense_shape())<SUB>11</SUB>> ]
"30064771086" [label = <(dense_shape,sparse_matrix.dense_shape())<SUB>11</SUB>> ]
"68719476744" [label = <(IDENTIFIER,sparse_matrix,sparse_matrix.dense_shape())<SUB>11</SUB>> ]
"94489280513" [label = <(LOCAL,const int rank: int)<SUB>12</SUB>> ]
"30064771087" [label = <(&lt;operator&gt;.assignment,rank = dense_shape.dim_size(0))<SUB>12</SUB>> ]
"68719476745" [label = <(IDENTIFIER,rank,rank = dense_shape.dim_size(0))<SUB>12</SUB>> ]
"30064771088" [label = <(dim_size,dense_shape.dim_size(0))<SUB>12</SUB>> ]
"68719476746" [label = <(IDENTIFIER,dense_shape,dense_shape.dim_size(0))<SUB>12</SUB>> ]
"90194313220" [label = <(LITERAL,0,dense_shape.dim_size(0))<SUB>12</SUB>> ]
"30064771089" [label = <(OP_REQUIRES,OP_REQUIRES(ctx, rank == 2 || rank == 3,
      ...)<SUB>13</SUB>> ]
"68719476747" [label = <(IDENTIFIER,ctx,OP_REQUIRES(ctx, rank == 2 || rank == 3,
      ...)<SUB>13</SUB>> ]
"30064771090" [label = <(&lt;operator&gt;.logicalOr,rank == 2 || rank == 3)<SUB>13</SUB>> ]
"30064771091" [label = <(&lt;operator&gt;.equals,rank == 2)<SUB>13</SUB>> ]
"68719476748" [label = <(IDENTIFIER,rank,rank == 2)<SUB>13</SUB>> ]
"90194313221" [label = <(LITERAL,2,rank == 2)<SUB>13</SUB>> ]
"30064771092" [label = <(&lt;operator&gt;.equals,rank == 3)<SUB>13</SUB>> ]
"68719476749" [label = <(IDENTIFIER,rank,rank == 3)<SUB>13</SUB>> ]
"90194313222" [label = <(LITERAL,3,rank == 3)<SUB>13</SUB>> ]
"30064771093" [label = <(InvalidArgument,errors::InvalidArgument(&quot;sparse matrix must hav...)<SUB>14</SUB>> ]
"90194313223" [label = <(LITERAL,&quot;sparse matrix must have rank 2 or 3; &quot;,errors::InvalidArgument(&quot;sparse matrix must hav...)<SUB>14</SUB>> ]
"90194313224" [label = <(LITERAL,&quot;but dense_shape has size &quot;,errors::InvalidArgument(&quot;sparse matrix must hav...)<SUB>15</SUB>> ]
"68719476750" [label = <(IDENTIFIER,rank,errors::InvalidArgument(&quot;sparse matrix must hav...)<SUB>15</SUB>> ]
"94489280514" [label = <(LOCAL,const int row_dim: int)<SUB>16</SUB>> ]
"30064771094" [label = <(&lt;operator&gt;.assignment,row_dim = (rank == 2) ? 0 : 1)<SUB>16</SUB>> ]
"68719476751" [label = <(IDENTIFIER,row_dim,row_dim = (rank == 2) ? 0 : 1)<SUB>16</SUB>> ]
"30064771095" [label = <(&lt;operator&gt;.conditional,(rank == 2) ? 0 : 1)<SUB>16</SUB>> ]
"30064771096" [label = <(&lt;operator&gt;.equals,rank == 2)<SUB>16</SUB>> ]
"68719476752" [label = <(IDENTIFIER,rank,rank == 2)<SUB>16</SUB>> ]
"90194313225" [label = <(LITERAL,2,rank == 2)<SUB>16</SUB>> ]
"90194313226" [label = <(LITERAL,0,(rank == 2) ? 0 : 1)<SUB>16</SUB>> ]
"90194313227" [label = <(LITERAL,1,(rank == 2) ? 0 : 1)<SUB>16</SUB>> ]
"94489280515" [label = <(LOCAL,auto dense_shape_vec: auto)<SUB>17</SUB>> ]
"30064771097" [label = <(&lt;operator&gt;.assignment,dense_shape_vec = dense_shape.vec&lt;int64&gt;())<SUB>17</SUB>> ]
"68719476753" [label = <(IDENTIFIER,dense_shape_vec,dense_shape_vec = dense_shape.vec&lt;int64&gt;())<SUB>17</SUB>> ]
"30064771098" [label = <(vec&lt;int64&gt;,dense_shape.vec&lt;int64&gt;())<SUB>17</SUB>> ]
"68719476754" [label = <(IDENTIFIER,dense_shape,dense_shape.vec&lt;int64&gt;())<SUB>17</SUB>> ]
"30064771099" [label = <(&lt;operator&gt;.assignment,*num_rows = dense_shape_vec(row_dim))<SUB>18</SUB>> ]
"30064771100" [label = <(&lt;operator&gt;.indirection,*num_rows)<SUB>18</SUB>> ]
"68719476755" [label = <(IDENTIFIER,num_rows,*num_rows = dense_shape_vec(row_dim))<SUB>18</SUB>> ]
"30064771101" [label = <(dense_shape_vec,dense_shape_vec(row_dim))<SUB>18</SUB>> ]
"68719476756" [label = <(IDENTIFIER,row_dim,dense_shape_vec(row_dim))<SUB>18</SUB>> ]
"94489280516" [label = <(LOCAL,const int64 num_cols: int64)<SUB>19</SUB>> ]
"30064771102" [label = <(&lt;operator&gt;.assignment,num_cols = dense_shape_vec(row_dim + 1))<SUB>19</SUB>> ]
"68719476757" [label = <(IDENTIFIER,num_cols,num_cols = dense_shape_vec(row_dim + 1))<SUB>19</SUB>> ]
"30064771103" [label = <(dense_shape_vec,dense_shape_vec(row_dim + 1))<SUB>19</SUB>> ]
"30064771104" [label = <(&lt;operator&gt;.addition,row_dim + 1)<SUB>19</SUB>> ]
"68719476758" [label = <(IDENTIFIER,row_dim,row_dim + 1)<SUB>19</SUB>> ]
"90194313228" [label = <(LITERAL,1,row_dim + 1)<SUB>19</SUB>> ]
"30064771105" [label = <(OP_REQUIRES,OP_REQUIRES(ctx, *num_rows == num_cols,
       ...)<SUB>20</SUB>> ]
"68719476759" [label = <(IDENTIFIER,ctx,OP_REQUIRES(ctx, *num_rows == num_cols,
       ...)<SUB>20</SUB>> ]
"30064771106" [label = <(&lt;operator&gt;.equals,*num_rows == num_cols)<SUB>20</SUB>> ]
"30064771107" [label = <(&lt;operator&gt;.indirection,*num_rows)<SUB>20</SUB>> ]
"68719476760" [label = <(IDENTIFIER,num_rows,*num_rows == num_cols)<SUB>20</SUB>> ]
"68719476761" [label = <(IDENTIFIER,num_cols,*num_rows == num_cols)<SUB>20</SUB>> ]
"30064771108" [label = <(InvalidArgument,errors::InvalidArgument(&quot;sparse matrix must be ...)<SUB>21</SUB>> ]
"90194313229" [label = <(LITERAL,&quot;sparse matrix must be square; got: &quot;,errors::InvalidArgument(&quot;sparse matrix must be ...)<SUB>21</SUB>> ]
"30064771109" [label = <(&lt;operator&gt;.indirection,*num_rows)<SUB>22</SUB>> ]
"68719476762" [label = <(IDENTIFIER,num_rows,errors::InvalidArgument(&quot;sparse matrix must be ...)<SUB>22</SUB>> ]
"90194313230" [label = <(LITERAL,&quot; != &quot;,errors::InvalidArgument(&quot;sparse matrix must be ...)<SUB>22</SUB>> ]
"68719476763" [label = <(IDENTIFIER,num_cols,errors::InvalidArgument(&quot;sparse matrix must be ...)<SUB>22</SUB>> ]
"94489280517" [label = <(LOCAL,const TensorShape&amp; perm_shape: TensorShape&amp;)<SUB>23</SUB>> ]
"30064771110" [label = <(&lt;operator&gt;.assignment,&amp; perm_shape = permutation_indices.shape())<SUB>23</SUB>> ]
"68719476764" [label = <(IDENTIFIER,perm_shape,&amp; perm_shape = permutation_indices.shape())<SUB>23</SUB>> ]
"30064771111" [label = <(shape,permutation_indices.shape())<SUB>23</SUB>> ]
"68719476765" [label = <(IDENTIFIER,permutation_indices,permutation_indices.shape())<SUB>23</SUB>> ]
"30064771112" [label = <(OP_REQUIRES,OP_REQUIRES(
        ctx, perm_shape.dims() + 1...)<SUB>24</SUB>> ]
"68719476766" [label = <(IDENTIFIER,ctx,OP_REQUIRES(
        ctx, perm_shape.dims() + 1...)<SUB>25</SUB>> ]
"30064771113" [label = <(&lt;operator&gt;.equals,perm_shape.dims() + 1 == rank)<SUB>25</SUB>> ]
"30064771114" [label = <(&lt;operator&gt;.addition,perm_shape.dims() + 1)<SUB>25</SUB>> ]
"30064771115" [label = <(dims,perm_shape.dims())<SUB>25</SUB>> ]
"68719476767" [label = <(IDENTIFIER,perm_shape,perm_shape.dims())<SUB>25</SUB>> ]
"90194313231" [label = <(LITERAL,1,perm_shape.dims() + 1)<SUB>25</SUB>> ]
"68719476768" [label = <(IDENTIFIER,rank,perm_shape.dims() + 1 == rank)<SUB>25</SUB>> ]
"30064771116" [label = <(InvalidArgument,errors::InvalidArgument(
            &quot;sparse ma...)<SUB>26</SUB>> ]
"90194313232" [label = <(LITERAL,&quot;sparse matrix must have the same rank as permu...,errors::InvalidArgument(
            &quot;sparse ma...)<SUB>27</SUB>> ]
"68719476769" [label = <(IDENTIFIER,rank,errors::InvalidArgument(
            &quot;sparse ma...)<SUB>27</SUB>> ]
"90194313233" [label = <(LITERAL,&quot; != &quot;,errors::InvalidArgument(
            &quot;sparse ma...)<SUB>28</SUB>> ]
"30064771117" [label = <(dims,perm_shape.dims())<SUB>28</SUB>> ]
"68719476770" [label = <(IDENTIFIER,perm_shape,perm_shape.dims())<SUB>28</SUB>> ]
"90194313234" [label = <(LITERAL,&quot; + 1.&quot;,errors::InvalidArgument(
            &quot;sparse ma...)<SUB>28</SUB>> ]
"30064771118" [label = <(OP_REQUIRES,OP_REQUIRES(
        ctx, perm_shape.dim_size(r...)<SUB>29</SUB>> ]
"68719476771" [label = <(IDENTIFIER,ctx,OP_REQUIRES(
        ctx, perm_shape.dim_size(r...)<SUB>30</SUB>> ]
"30064771119" [label = <(&lt;operator&gt;.equals,perm_shape.dim_size(rank - 2) == *num_rows)<SUB>30</SUB>> ]
"30064771120" [label = <(dim_size,perm_shape.dim_size(rank - 2))<SUB>30</SUB>> ]
"68719476772" [label = <(IDENTIFIER,perm_shape,perm_shape.dim_size(rank - 2))<SUB>30</SUB>> ]
"30064771121" [label = <(&lt;operator&gt;.subtraction,rank - 2)<SUB>30</SUB>> ]
"68719476773" [label = <(IDENTIFIER,rank,rank - 2)<SUB>30</SUB>> ]
"90194313235" [label = <(LITERAL,2,rank - 2)<SUB>30</SUB>> ]
"30064771122" [label = <(&lt;operator&gt;.indirection,*num_rows)<SUB>30</SUB>> ]
"68719476774" [label = <(IDENTIFIER,num_rows,perm_shape.dim_size(rank - 2) == *num_rows)<SUB>30</SUB>> ]
"30064771123" [label = <(InvalidArgument,errors::InvalidArgument(
            &quot;permutati...)<SUB>31</SUB>> ]
"90194313236" [label = <(LITERAL,&quot;permutation must have the same number of eleme...,errors::InvalidArgument(
            &quot;permutati...)<SUB>32</SUB>> ]
"30064771124" [label = <(dim_size,perm_shape.dim_size(rank - 2))<SUB>34</SUB>> ]
"68719476775" [label = <(IDENTIFIER,perm_shape,perm_shape.dim_size(rank - 2))<SUB>34</SUB>> ]
"30064771125" [label = <(&lt;operator&gt;.subtraction,rank - 2)<SUB>34</SUB>> ]
"68719476776" [label = <(IDENTIFIER,rank,rank - 2)<SUB>34</SUB>> ]
"90194313237" [label = <(LITERAL,2,rank - 2)<SUB>34</SUB>> ]
"90194313238" [label = <(LITERAL,&quot; != &quot;,errors::InvalidArgument(
            &quot;permutati...)<SUB>34</SUB>> ]
"30064771126" [label = <(&lt;operator&gt;.indirection,*num_rows)<SUB>34</SUB>> ]
"68719476777" [label = <(IDENTIFIER,num_rows,errors::InvalidArgument(
            &quot;permutati...)<SUB>34</SUB>> ]
"30064771127" [label = <(&lt;operator&gt;.assignment,*batch_size = sparse_matrix.batch_size())<SUB>36</SUB>> ]
"30064771128" [label = <(&lt;operator&gt;.indirection,*batch_size)<SUB>36</SUB>> ]
"68719476778" [label = <(IDENTIFIER,batch_size,*batch_size = sparse_matrix.batch_size())<SUB>36</SUB>> ]
"30064771129" [label = <(batch_size,sparse_matrix.batch_size())<SUB>36</SUB>> ]
"68719476779" [label = <(IDENTIFIER,sparse_matrix,sparse_matrix.batch_size())<SUB>36</SUB>> ]
"47244640256" [label = <(CONTROL_STRUCTURE,IF,if (*batch_size &gt; 1))<SUB>37</SUB>> ]
"30064771130" [label = <(&lt;operator&gt;.greaterThan,*batch_size &gt; 1)<SUB>37</SUB>> ]
"30064771131" [label = <(&lt;operator&gt;.indirection,*batch_size)<SUB>37</SUB>> ]
"68719476780" [label = <(IDENTIFIER,batch_size,*batch_size &gt; 1)<SUB>37</SUB>> ]
"90194313239" [label = <(LITERAL,1,*batch_size &gt; 1)<SUB>37</SUB>> ]
"25769803778" [label = <(BLOCK,{
      OP_REQUIRES(
          ctx, perm_shape....,{
      OP_REQUIRES(
          ctx, perm_shape....)<SUB>37</SUB>> ]
"30064771132" [label = <(OP_REQUIRES,OP_REQUIRES(
          ctx, perm_shape.dim_size...)<SUB>38</SUB>> ]
"68719476781" [label = <(IDENTIFIER,ctx,OP_REQUIRES(
          ctx, perm_shape.dim_size...)<SUB>39</SUB>> ]
"30064771133" [label = <(&lt;operator&gt;.equals,perm_shape.dim_size(0) == *batch_size)<SUB>39</SUB>> ]
"30064771134" [label = <(dim_size,perm_shape.dim_size(0))<SUB>39</SUB>> ]
"68719476782" [label = <(IDENTIFIER,perm_shape,perm_shape.dim_size(0))<SUB>39</SUB>> ]
"90194313240" [label = <(LITERAL,0,perm_shape.dim_size(0))<SUB>39</SUB>> ]
"30064771135" [label = <(&lt;operator&gt;.indirection,*batch_size)<SUB>39</SUB>> ]
"68719476783" [label = <(IDENTIFIER,batch_size,perm_shape.dim_size(0) == *batch_size)<SUB>39</SUB>> ]
"30064771136" [label = <(InvalidArgument,errors::InvalidArgument(&quot;permutation must have ...)<SUB>40</SUB>> ]
"90194313241" [label = <(LITERAL,&quot;permutation must have the same batch size &quot;
  ...,errors::InvalidArgument(&quot;permutation must have ...)<SUB>40</SUB>> ]
"30064771137" [label = <(dim_size,perm_shape.dim_size(0))<SUB>42</SUB>> ]
"68719476784" [label = <(IDENTIFIER,perm_shape,perm_shape.dim_size(0))<SUB>42</SUB>> ]
"90194313242" [label = <(LITERAL,0,perm_shape.dim_size(0))<SUB>42</SUB>> ]
"90194313243" [label = <(LITERAL,&quot; != &quot;,errors::InvalidArgument(&quot;permutation must have ...)<SUB>42</SUB>> ]
"30064771138" [label = <(&lt;operator&gt;.indirection,*batch_size)<SUB>42</SUB>> ]
"68719476785" [label = <(IDENTIFIER,batch_size,errors::InvalidArgument(&quot;permutation must have ...)<SUB>42</SUB>> ]
"128849018880" [label = <(METHOD_RETURN,void)<SUB>1</SUB>> ]
  "111669149697" -> "115964116992"  [ label = "AST: "] 
  "111669149697" -> "115964116993"  [ label = "AST: "] 
  "111669149697" -> "115964116994"  [ label = "AST: "] 
  "111669149697" -> "115964116995"  [ label = "AST: "] 
  "111669149697" -> "115964116996"  [ label = "AST: "] 
  "111669149697" -> "25769803777"  [ label = "AST: "] 
  "111669149697" -> "128849018880"  [ label = "AST: "] 
  "25769803777" -> "30064771072"  [ label = "AST: "] 
  "25769803777" -> "94489280512"  [ label = "AST: "] 
  "25769803777" -> "30064771085"  [ label = "AST: "] 
  "25769803777" -> "94489280513"  [ label = "AST: "] 
  "25769803777" -> "30064771087"  [ label = "AST: "] 
  "25769803777" -> "30064771089"  [ label = "AST: "] 
  "25769803777" -> "94489280514"  [ label = "AST: "] 
  "25769803777" -> "30064771094"  [ label = "AST: "] 
  "25769803777" -> "94489280515"  [ label = "AST: "] 
  "25769803777" -> "30064771097"  [ label = "AST: "] 
  "25769803777" -> "30064771099"  [ label = "AST: "] 
  "25769803777" -> "94489280516"  [ label = "AST: "] 
  "25769803777" -> "30064771102"  [ label = "AST: "] 
  "25769803777" -> "30064771105"  [ label = "AST: "] 
  "25769803777" -> "94489280517"  [ label = "AST: "] 
  "25769803777" -> "30064771110"  [ label = "AST: "] 
  "25769803777" -> "30064771112"  [ label = "AST: "] 
  "25769803777" -> "30064771118"  [ label = "AST: "] 
  "25769803777" -> "30064771127"  [ label = "AST: "] 
  "25769803777" -> "47244640256"  [ label = "AST: "] 
  "30064771072" -> "68719476736"  [ label = "AST: "] 
  "30064771072" -> "30064771073"  [ label = "AST: "] 
  "30064771072" -> "30064771078"  [ label = "AST: "] 
  "30064771073" -> "30064771074"  [ label = "AST: "] 
  "30064771073" -> "30064771075"  [ label = "AST: "] 
  "30064771074" -> "68719476737"  [ label = "AST: "] 
  "30064771075" -> "30064771076"  [ label = "AST: "] 
  "30064771075" -> "30064771077"  [ label = "AST: "] 
  "30064771076" -> "68719476738"  [ label = "AST: "] 
  "30064771076" -> "68719476739"  [ label = "AST: "] 
  "30064771077" -> "90194313216"  [ label = "AST: "] 
  "30064771077" -> "55834574848"  [ label = "AST: "] 
  "30064771078" -> "90194313217"  [ label = "AST: "] 
  "30064771078" -> "30064771079"  [ label = "AST: "] 
  "30064771078" -> "90194313219"  [ label = "AST: "] 
  "30064771078" -> "30064771083"  [ label = "AST: "] 
  "30064771079" -> "30064771080"  [ label = "AST: "] 
  "30064771080" -> "30064771081"  [ label = "AST: "] 
  "30064771080" -> "30064771082"  [ label = "AST: "] 
  "30064771081" -> "68719476740"  [ label = "AST: "] 
  "30064771081" -> "68719476741"  [ label = "AST: "] 
  "30064771082" -> "90194313218"  [ label = "AST: "] 
  "30064771082" -> "55834574849"  [ label = "AST: "] 
  "30064771083" -> "30064771084"  [ label = "AST: "] 
  "30064771084" -> "68719476742"  [ label = "AST: "] 
  "30064771085" -> "68719476743"  [ label = "AST: "] 
  "30064771085" -> "30064771086"  [ label = "AST: "] 
  "30064771086" -> "68719476744"  [ label = "AST: "] 
  "30064771087" -> "68719476745"  [ label = "AST: "] 
  "30064771087" -> "30064771088"  [ label = "AST: "] 
  "30064771088" -> "68719476746"  [ label = "AST: "] 
  "30064771088" -> "90194313220"  [ label = "AST: "] 
  "30064771089" -> "68719476747"  [ label = "AST: "] 
  "30064771089" -> "30064771090"  [ label = "AST: "] 
  "30064771089" -> "30064771093"  [ label = "AST: "] 
  "30064771090" -> "30064771091"  [ label = "AST: "] 
  "30064771090" -> "30064771092"  [ label = "AST: "] 
  "30064771091" -> "68719476748"  [ label = "AST: "] 
  "30064771091" -> "90194313221"  [ label = "AST: "] 
  "30064771092" -> "68719476749"  [ label = "AST: "] 
  "30064771092" -> "90194313222"  [ label = "AST: "] 
  "30064771093" -> "90194313223"  [ label = "AST: "] 
  "30064771093" -> "90194313224"  [ label = "AST: "] 
  "30064771093" -> "68719476750"  [ label = "AST: "] 
  "30064771094" -> "68719476751"  [ label = "AST: "] 
  "30064771094" -> "30064771095"  [ label = "AST: "] 
  "30064771095" -> "30064771096"  [ label = "AST: "] 
  "30064771095" -> "90194313226"  [ label = "AST: "] 
  "30064771095" -> "90194313227"  [ label = "AST: "] 
  "30064771096" -> "68719476752"  [ label = "AST: "] 
  "30064771096" -> "90194313225"  [ label = "AST: "] 
  "30064771097" -> "68719476753"  [ label = "AST: "] 
  "30064771097" -> "30064771098"  [ label = "AST: "] 
  "30064771098" -> "68719476754"  [ label = "AST: "] 
  "30064771099" -> "30064771100"  [ label = "AST: "] 
  "30064771099" -> "30064771101"  [ label = "AST: "] 
  "30064771100" -> "68719476755"  [ label = "AST: "] 
  "30064771101" -> "68719476756"  [ label = "AST: "] 
  "30064771102" -> "68719476757"  [ label = "AST: "] 
  "30064771102" -> "30064771103"  [ label = "AST: "] 
  "30064771103" -> "30064771104"  [ label = "AST: "] 
  "30064771104" -> "68719476758"  [ label = "AST: "] 
  "30064771104" -> "90194313228"  [ label = "AST: "] 
  "30064771105" -> "68719476759"  [ label = "AST: "] 
  "30064771105" -> "30064771106"  [ label = "AST: "] 
  "30064771105" -> "30064771108"  [ label = "AST: "] 
  "30064771106" -> "30064771107"  [ label = "AST: "] 
  "30064771106" -> "68719476761"  [ label = "AST: "] 
  "30064771107" -> "68719476760"  [ label = "AST: "] 
  "30064771108" -> "90194313229"  [ label = "AST: "] 
  "30064771108" -> "30064771109"  [ label = "AST: "] 
  "30064771108" -> "90194313230"  [ label = "AST: "] 
  "30064771108" -> "68719476763"  [ label = "AST: "] 
  "30064771109" -> "68719476762"  [ label = "AST: "] 
  "30064771110" -> "68719476764"  [ label = "AST: "] 
  "30064771110" -> "30064771111"  [ label = "AST: "] 
  "30064771111" -> "68719476765"  [ label = "AST: "] 
  "30064771112" -> "68719476766"  [ label = "AST: "] 
  "30064771112" -> "30064771113"  [ label = "AST: "] 
  "30064771112" -> "30064771116"  [ label = "AST: "] 
  "30064771113" -> "30064771114"  [ label = "AST: "] 
  "30064771113" -> "68719476768"  [ label = "AST: "] 
  "30064771114" -> "30064771115"  [ label = "AST: "] 
  "30064771114" -> "90194313231"  [ label = "AST: "] 
  "30064771115" -> "68719476767"  [ label = "AST: "] 
  "30064771116" -> "90194313232"  [ label = "AST: "] 
  "30064771116" -> "68719476769"  [ label = "AST: "] 
  "30064771116" -> "90194313233"  [ label = "AST: "] 
  "30064771116" -> "30064771117"  [ label = "AST: "] 
  "30064771116" -> "90194313234"  [ label = "AST: "] 
  "30064771117" -> "68719476770"  [ label = "AST: "] 
  "30064771118" -> "68719476771"  [ label = "AST: "] 
  "30064771118" -> "30064771119"  [ label = "AST: "] 
  "30064771118" -> "30064771123"  [ label = "AST: "] 
  "30064771119" -> "30064771120"  [ label = "AST: "] 
  "30064771119" -> "30064771122"  [ label = "AST: "] 
  "30064771120" -> "68719476772"  [ label = "AST: "] 
  "30064771120" -> "30064771121"  [ label = "AST: "] 
  "30064771121" -> "68719476773"  [ label = "AST: "] 
  "30064771121" -> "90194313235"  [ label = "AST: "] 
  "30064771122" -> "68719476774"  [ label = "AST: "] 
  "30064771123" -> "90194313236"  [ label = "AST: "] 
  "30064771123" -> "30064771124"  [ label = "AST: "] 
  "30064771123" -> "90194313238"  [ label = "AST: "] 
  "30064771123" -> "30064771126"  [ label = "AST: "] 
  "30064771124" -> "68719476775"  [ label = "AST: "] 
  "30064771124" -> "30064771125"  [ label = "AST: "] 
  "30064771125" -> "68719476776"  [ label = "AST: "] 
  "30064771125" -> "90194313237"  [ label = "AST: "] 
  "30064771126" -> "68719476777"  [ label = "AST: "] 
  "30064771127" -> "30064771128"  [ label = "AST: "] 
  "30064771127" -> "30064771129"  [ label = "AST: "] 
  "30064771128" -> "68719476778"  [ label = "AST: "] 
  "30064771129" -> "68719476779"  [ label = "AST: "] 
  "47244640256" -> "30064771130"  [ label = "AST: "] 
  "47244640256" -> "25769803778"  [ label = "AST: "] 
  "30064771130" -> "30064771131"  [ label = "AST: "] 
  "30064771130" -> "90194313239"  [ label = "AST: "] 
  "30064771131" -> "68719476780"  [ label = "AST: "] 
  "25769803778" -> "30064771132"  [ label = "AST: "] 
  "30064771132" -> "68719476781"  [ label = "AST: "] 
  "30064771132" -> "30064771133"  [ label = "AST: "] 
  "30064771132" -> "30064771136"  [ label = "AST: "] 
  "30064771133" -> "30064771134"  [ label = "AST: "] 
  "30064771133" -> "30064771135"  [ label = "AST: "] 
  "30064771134" -> "68719476782"  [ label = "AST: "] 
  "30064771134" -> "90194313240"  [ label = "AST: "] 
  "30064771135" -> "68719476783"  [ label = "AST: "] 
  "30064771136" -> "90194313241"  [ label = "AST: "] 
  "30064771136" -> "30064771137"  [ label = "AST: "] 
  "30064771136" -> "90194313243"  [ label = "AST: "] 
  "30064771136" -> "30064771138"  [ label = "AST: "] 
  "30064771137" -> "68719476784"  [ label = "AST: "] 
  "30064771137" -> "90194313242"  [ label = "AST: "] 
  "30064771138" -> "68719476785"  [ label = "AST: "] 
  "30064771072" -> "30064771086"  [ label = "CFG: "] 
  "30064771085" -> "30064771088"  [ label = "CFG: "] 
  "30064771087" -> "30064771091"  [ label = "CFG: "] 
  "30064771089" -> "30064771096"  [ label = "CFG: "] 
  "30064771094" -> "30064771098"  [ label = "CFG: "] 
  "30064771097" -> "30064771100"  [ label = "CFG: "] 
  "30064771099" -> "30064771104"  [ label = "CFG: "] 
  "30064771102" -> "30064771107"  [ label = "CFG: "] 
  "30064771105" -> "30064771111"  [ label = "CFG: "] 
  "30064771110" -> "30064771115"  [ label = "CFG: "] 
  "30064771112" -> "30064771121"  [ label = "CFG: "] 
  "30064771118" -> "30064771128"  [ label = "CFG: "] 
  "30064771127" -> "30064771131"  [ label = "CFG: "] 
  "30064771073" -> "30064771081"  [ label = "CFG: "] 
  "30064771078" -> "30064771072"  [ label = "CFG: "] 
  "30064771086" -> "30064771085"  [ label = "CFG: "] 
  "30064771088" -> "30064771087"  [ label = "CFG: "] 
  "30064771090" -> "30064771093"  [ label = "CFG: "] 
  "30064771093" -> "30064771089"  [ label = "CFG: "] 
  "30064771095" -> "30064771094"  [ label = "CFG: "] 
  "30064771098" -> "30064771097"  [ label = "CFG: "] 
  "30064771100" -> "30064771101"  [ label = "CFG: "] 
  "30064771101" -> "30064771099"  [ label = "CFG: "] 
  "30064771103" -> "30064771102"  [ label = "CFG: "] 
  "30064771106" -> "30064771109"  [ label = "CFG: "] 
  "30064771108" -> "30064771105"  [ label = "CFG: "] 
  "30064771111" -> "30064771110"  [ label = "CFG: "] 
  "30064771113" -> "30064771117"  [ label = "CFG: "] 
  "30064771116" -> "30064771112"  [ label = "CFG: "] 
  "30064771119" -> "30064771125"  [ label = "CFG: "] 
  "30064771123" -> "30064771118"  [ label = "CFG: "] 
  "30064771128" -> "30064771129"  [ label = "CFG: "] 
  "30064771129" -> "30064771127"  [ label = "CFG: "] 
  "30064771130" -> "128849018880"  [ label = "CFG: "] 
  "30064771130" -> "30064771134"  [ label = "CFG: "] 
  "30064771074" -> "30064771076"  [ label = "CFG: "] 
  "30064771075" -> "30064771073"  [ label = "CFG: "] 
  "30064771079" -> "30064771084"  [ label = "CFG: "] 
  "30064771083" -> "30064771078"  [ label = "CFG: "] 
  "30064771091" -> "30064771090"  [ label = "CFG: "] 
  "30064771091" -> "30064771092"  [ label = "CFG: "] 
  "30064771092" -> "30064771090"  [ label = "CFG: "] 
  "30064771096" -> "30064771095"  [ label = "CFG: "] 
  "30064771104" -> "30064771103"  [ label = "CFG: "] 
  "30064771107" -> "30064771106"  [ label = "CFG: "] 
  "30064771109" -> "30064771108"  [ label = "CFG: "] 
  "30064771114" -> "30064771113"  [ label = "CFG: "] 
  "30064771117" -> "30064771116"  [ label = "CFG: "] 
  "30064771120" -> "30064771122"  [ label = "CFG: "] 
  "30064771122" -> "30064771119"  [ label = "CFG: "] 
  "30064771124" -> "30064771126"  [ label = "CFG: "] 
  "30064771126" -> "30064771123"  [ label = "CFG: "] 
  "30064771131" -> "30064771130"  [ label = "CFG: "] 
  "30064771132" -> "128849018880"  [ label = "CFG: "] 
  "30064771076" -> "55834574848"  [ label = "CFG: "] 
  "30064771077" -> "30064771075"  [ label = "CFG: "] 
  "30064771080" -> "30064771079"  [ label = "CFG: "] 
  "30064771084" -> "30064771083"  [ label = "CFG: "] 
  "30064771115" -> "30064771114"  [ label = "CFG: "] 
  "30064771121" -> "30064771120"  [ label = "CFG: "] 
  "30064771125" -> "30064771124"  [ label = "CFG: "] 
  "30064771133" -> "30064771137"  [ label = "CFG: "] 
  "30064771136" -> "30064771132"  [ label = "CFG: "] 
  "55834574848" -> "30064771077"  [ label = "CFG: "] 
  "30064771081" -> "55834574849"  [ label = "CFG: "] 
  "30064771082" -> "30064771080"  [ label = "CFG: "] 
  "30064771134" -> "30064771135"  [ label = "CFG: "] 
  "30064771135" -> "30064771133"  [ label = "CFG: "] 
  "30064771137" -> "30064771138"  [ label = "CFG: "] 
  "30064771138" -> "30064771136"  [ label = "CFG: "] 
  "55834574849" -> "30064771082"  [ label = "CFG: "] 
  "111669149697" -> "30064771074"  [ label = "CFG: "] 
  "115964116995" -> "128849018880"  [ label = "DDG: batch_size"] 
  "115964116996" -> "128849018880"  [ label = "DDG: num_rows"] 
  "30064771072" -> "128849018880"  [ label = "DDG: sparse_matrix.dtype() == DataTypeToEnum&lt;T&gt;::value"] 
  "30064771081" -> "128849018880"  [ label = "DDG: DataTypeToEnum"] 
  "30064771081" -> "128849018880"  [ label = "DDG: T"] 
  "30064771080" -> "128849018880"  [ label = "DDG: DataTypeToEnum&lt;T"] 
  "30064771080" -> "128849018880"  [ label = "DDG: ::value"] 
  "30064771079" -> "128849018880"  [ label = "DDG: DataTypeToEnum&lt;T&gt;::value"] 
  "30064771078" -> "128849018880"  [ label = "DDG: DataTypeString(DataTypeToEnum&lt;T&gt;::value)"] 
  "30064771083" -> "128849018880"  [ label = "DDG: sparse_matrix.dtype()"] 
  "30064771078" -> "128849018880"  [ label = "DDG: DataTypeString(sparse_matrix.dtype())"] 
  "30064771072" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(
                    &quot;Asked for a CSRSparseMatrix of type &quot;,
                    DataTypeString(DataTypeToEnum&lt;T&gt;::value),
                    &quot; but saw dtype: &quot;, DataTypeString(sparse_matrix.dtype()))"] 
  "30064771072" -> "128849018880"  [ label = "DDG: OP_REQUIRES(ctx, sparse_matrix.dtype() == DataTypeToEnum&lt;T&gt;::value,
                errors::InvalidArgument(
                    &quot;Asked for a CSRSparseMatrix of type &quot;,
                    DataTypeString(DataTypeToEnum&lt;T&gt;::value),
                    &quot; but saw dtype: &quot;, DataTypeString(sparse_matrix.dtype())))"] 
  "30064771085" -> "128849018880"  [ label = "DDG: sparse_matrix.dense_shape()"] 
  "30064771085" -> "128849018880"  [ label = "DDG: &amp; dense_shape = sparse_matrix.dense_shape()"] 
  "30064771087" -> "128849018880"  [ label = "DDG: dense_shape.dim_size(0)"] 
  "30064771087" -> "128849018880"  [ label = "DDG: rank = dense_shape.dim_size(0)"] 
  "30064771090" -> "128849018880"  [ label = "DDG: rank == 3"] 
  "30064771089" -> "128849018880"  [ label = "DDG: rank == 2 || rank == 3"] 
  "30064771089" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(&quot;sparse matrix must have rank 2 or 3; &quot;,
                                        &quot;but dense_shape has size &quot;, rank)"] 
  "30064771089" -> "128849018880"  [ label = "DDG: OP_REQUIRES(ctx, rank == 2 || rank == 3,
                errors::InvalidArgument(&quot;sparse matrix must have rank 2 or 3; &quot;,
                                        &quot;but dense_shape has size &quot;, rank))"] 
  "30064771095" -> "128849018880"  [ label = "DDG: rank == 2"] 
  "30064771094" -> "128849018880"  [ label = "DDG: (rank == 2) ? 0 : 1"] 
  "30064771094" -> "128849018880"  [ label = "DDG: row_dim = (rank == 2) ? 0 : 1"] 
  "30064771097" -> "128849018880"  [ label = "DDG: dense_shape_vec"] 
  "30064771098" -> "128849018880"  [ label = "DDG: dense_shape"] 
  "30064771097" -> "128849018880"  [ label = "DDG: dense_shape.vec&lt;int64&gt;()"] 
  "30064771097" -> "128849018880"  [ label = "DDG: dense_shape_vec = dense_shape.vec&lt;int64&gt;()"] 
  "30064771099" -> "128849018880"  [ label = "DDG: dense_shape_vec(row_dim)"] 
  "30064771099" -> "128849018880"  [ label = "DDG: *num_rows = dense_shape_vec(row_dim)"] 
  "30064771104" -> "128849018880"  [ label = "DDG: row_dim"] 
  "30064771103" -> "128849018880"  [ label = "DDG: row_dim + 1"] 
  "30064771102" -> "128849018880"  [ label = "DDG: dense_shape_vec(row_dim + 1)"] 
  "30064771102" -> "128849018880"  [ label = "DDG: num_cols = dense_shape_vec(row_dim + 1)"] 
  "30064771105" -> "128849018880"  [ label = "DDG: *num_rows == num_cols"] 
  "30064771108" -> "128849018880"  [ label = "DDG: num_cols"] 
  "30064771105" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(&quot;sparse matrix must be square; got: &quot;,
                                        *num_rows, &quot; != &quot;, num_cols)"] 
  "30064771105" -> "128849018880"  [ label = "DDG: OP_REQUIRES(ctx, *num_rows == num_cols,
                errors::InvalidArgument(&quot;sparse matrix must be square; got: &quot;,
                                        *num_rows, &quot; != &quot;, num_cols))"] 
  "30064771111" -> "128849018880"  [ label = "DDG: permutation_indices"] 
  "30064771110" -> "128849018880"  [ label = "DDG: permutation_indices.shape()"] 
  "30064771110" -> "128849018880"  [ label = "DDG: &amp; perm_shape = permutation_indices.shape()"] 
  "30064771113" -> "128849018880"  [ label = "DDG: perm_shape.dims() + 1"] 
  "30064771112" -> "128849018880"  [ label = "DDG: perm_shape.dims() + 1 == rank"] 
  "30064771116" -> "128849018880"  [ label = "DDG: perm_shape.dims()"] 
  "30064771112" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(
            &quot;sparse matrix must have the same rank as permutation; got: &quot;, rank,
            &quot; != &quot;, perm_shape.dims(), &quot; + 1.&quot;)"] 
  "30064771112" -> "128849018880"  [ label = "DDG: OP_REQUIRES(
        ctx, perm_shape.dims() + 1 == rank,
        errors::InvalidArgument(
            &quot;sparse matrix must have the same rank as permutation; got: &quot;, rank,
            &quot; != &quot;, perm_shape.dims(), &quot; + 1.&quot;))"] 
  "30064771118" -> "128849018880"  [ label = "DDG: perm_shape.dim_size(rank - 2) == *num_rows"] 
  "30064771125" -> "128849018880"  [ label = "DDG: rank"] 
  "30064771124" -> "128849018880"  [ label = "DDG: rank - 2"] 
  "30064771123" -> "128849018880"  [ label = "DDG: perm_shape.dim_size(rank - 2)"] 
  "30064771123" -> "128849018880"  [ label = "DDG: *num_rows"] 
  "30064771118" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(
            &quot;permutation must have the same number of elements in each batch &quot;
            &quot;as the number of rows in sparse matrix; got: &quot;,
            perm_shape.dim_size(rank - 2), &quot; != &quot;, *num_rows)"] 
  "30064771118" -> "128849018880"  [ label = "DDG: OP_REQUIRES(
        ctx, perm_shape.dim_size(rank - 2) == *num_rows,
        errors::InvalidArgument(
            &quot;permutation must have the same number of elements in each batch &quot;
            &quot;as the number of rows in sparse matrix; got: &quot;,
            perm_shape.dim_size(rank - 2), &quot; != &quot;, *num_rows))"] 
  "30064771129" -> "128849018880"  [ label = "DDG: sparse_matrix"] 
  "30064771127" -> "128849018880"  [ label = "DDG: sparse_matrix.batch_size()"] 
  "30064771127" -> "128849018880"  [ label = "DDG: *batch_size = sparse_matrix.batch_size()"] 
  "30064771130" -> "128849018880"  [ label = "DDG: *batch_size &gt; 1"] 
  "30064771132" -> "128849018880"  [ label = "DDG: ctx"] 
  "30064771132" -> "128849018880"  [ label = "DDG: perm_shape.dim_size(0) == *batch_size"] 
  "30064771137" -> "128849018880"  [ label = "DDG: perm_shape"] 
  "30064771136" -> "128849018880"  [ label = "DDG: perm_shape.dim_size(0)"] 
  "30064771136" -> "128849018880"  [ label = "DDG: *batch_size"] 
  "30064771132" -> "128849018880"  [ label = "DDG: errors::InvalidArgument(&quot;permutation must have the same batch size &quot;
                                  &quot;as sparse matrix; got: &quot;,
                                  perm_shape.dim_size(0), &quot; != &quot;, *batch_size)"] 
  "30064771132" -> "128849018880"  [ label = "DDG: OP_REQUIRES(
          ctx, perm_shape.dim_size(0) == *batch_size,
          errors::InvalidArgument(&quot;permutation must have the same batch size &quot;
                                  &quot;as sparse matrix; got: &quot;,
                                  perm_shape.dim_size(0), &quot; != &quot;, *batch_size))"] 
  "111669149697" -> "115964116992"  [ label = "DDG: "] 
  "111669149697" -> "115964116993"  [ label = "DDG: "] 
  "111669149697" -> "115964116994"  [ label = "DDG: "] 
  "111669149697" -> "115964116995"  [ label = "DDG: "] 
  "111669149697" -> "115964116996"  [ label = "DDG: "] 
  "30064771086" -> "30064771085"  [ label = "DDG: sparse_matrix"] 
  "30064771088" -> "30064771087"  [ label = "DDG: dense_shape"] 
  "30064771088" -> "30064771087"  [ label = "DDG: 0"] 
  "111669149697" -> "30064771094"  [ label = "DDG: "] 
  "30064771098" -> "30064771097"  [ label = "DDG: dense_shape"] 
  "30064771101" -> "30064771099"  [ label = "DDG: row_dim"] 
  "30064771103" -> "30064771102"  [ label = "DDG: row_dim + 1"] 
  "30064771111" -> "30064771110"  [ label = "DDG: permutation_indices"] 
  "30064771129" -> "30064771127"  [ label = "DDG: sparse_matrix"] 
  "115964116992" -> "30064771072"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771072"  [ label = "DDG: "] 
  "30064771073" -> "30064771072"  [ label = "DDG: sparse_matrix.dtype()"] 
  "30064771073" -> "30064771072"  [ label = "DDG: DataTypeToEnum&lt;T&gt;::value"] 
  "30064771078" -> "30064771072"  [ label = "DDG: &quot;Asked for a CSRSparseMatrix of type &quot;"] 
  "30064771078" -> "30064771072"  [ label = "DDG: DataTypeString(DataTypeToEnum&lt;T&gt;::value)"] 
  "30064771078" -> "30064771072"  [ label = "DDG: &quot; but saw dtype: &quot;"] 
  "30064771078" -> "30064771072"  [ label = "DDG: DataTypeString(sparse_matrix.dtype())"] 
  "30064771072" -> "30064771089"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771089"  [ label = "DDG: "] 
  "30064771090" -> "30064771089"  [ label = "DDG: rank == 2"] 
  "30064771090" -> "30064771089"  [ label = "DDG: rank == 3"] 
  "30064771093" -> "30064771089"  [ label = "DDG: &quot;sparse matrix must have rank 2 or 3; &quot;"] 
  "30064771093" -> "30064771089"  [ label = "DDG: &quot;but dense_shape has size &quot;"] 
  "30064771093" -> "30064771089"  [ label = "DDG: rank"] 
  "30064771089" -> "30064771105"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771105"  [ label = "DDG: "] 
  "30064771106" -> "30064771105"  [ label = "DDG: *num_rows"] 
  "30064771106" -> "30064771105"  [ label = "DDG: num_cols"] 
  "30064771108" -> "30064771105"  [ label = "DDG: &quot;sparse matrix must be square; got: &quot;"] 
  "30064771108" -> "30064771105"  [ label = "DDG: *num_rows"] 
  "30064771108" -> "30064771105"  [ label = "DDG: &quot; != &quot;"] 
  "30064771108" -> "30064771105"  [ label = "DDG: num_cols"] 
  "30064771105" -> "30064771112"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771112"  [ label = "DDG: "] 
  "30064771113" -> "30064771112"  [ label = "DDG: perm_shape.dims() + 1"] 
  "30064771113" -> "30064771112"  [ label = "DDG: rank"] 
  "30064771116" -> "30064771112"  [ label = "DDG: perm_shape.dims()"] 
  "30064771116" -> "30064771112"  [ label = "DDG: &quot; + 1.&quot;"] 
  "30064771116" -> "30064771112"  [ label = "DDG: rank"] 
  "30064771116" -> "30064771112"  [ label = "DDG: &quot; != &quot;"] 
  "30064771116" -> "30064771112"  [ label = "DDG: &quot;sparse matrix must have the same rank as permutation; got: &quot;"] 
  "30064771112" -> "30064771118"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771118"  [ label = "DDG: "] 
  "30064771119" -> "30064771118"  [ label = "DDG: perm_shape.dim_size(rank - 2)"] 
  "30064771119" -> "30064771118"  [ label = "DDG: *num_rows"] 
  "30064771123" -> "30064771118"  [ label = "DDG: &quot;permutation must have the same number of elements in each batch &quot;
            &quot;as the number of rows in sparse matrix; got: &quot;"] 
  "30064771123" -> "30064771118"  [ label = "DDG: perm_shape.dim_size(rank - 2)"] 
  "30064771123" -> "30064771118"  [ label = "DDG: &quot; != &quot;"] 
  "30064771123" -> "30064771118"  [ label = "DDG: *num_rows"] 
  "30064771074" -> "30064771073"  [ label = "DDG: sparse_matrix"] 
  "30064771075" -> "30064771073"  [ label = "DDG: DataTypeToEnum&lt;T"] 
  "30064771075" -> "30064771073"  [ label = "DDG: ::value"] 
  "111669149697" -> "30064771078"  [ label = "DDG: "] 
  "30064771079" -> "30064771078"  [ label = "DDG: DataTypeToEnum&lt;T&gt;::value"] 
  "30064771083" -> "30064771078"  [ label = "DDG: sparse_matrix.dtype()"] 
  "30064771084" -> "30064771086"  [ label = "DDG: sparse_matrix"] 
  "111669149697" -> "30064771086"  [ label = "DDG: "] 
  "30064771085" -> "30064771088"  [ label = "DDG: dense_shape"] 
  "111669149697" -> "30064771088"  [ label = "DDG: "] 
  "30064771091" -> "30064771090"  [ label = "DDG: rank"] 
  "30064771091" -> "30064771090"  [ label = "DDG: 2"] 
  "30064771092" -> "30064771090"  [ label = "DDG: rank"] 
  "30064771092" -> "30064771090"  [ label = "DDG: 3"] 
  "111669149697" -> "30064771093"  [ label = "DDG: "] 
  "30064771091" -> "30064771093"  [ label = "DDG: rank"] 
  "30064771092" -> "30064771093"  [ label = "DDG: rank"] 
  "111669149697" -> "30064771095"  [ label = "DDG: "] 
  "30064771088" -> "30064771098"  [ label = "DDG: dense_shape"] 
  "111669149697" -> "30064771098"  [ label = "DDG: "] 
  "30064771094" -> "30064771101"  [ label = "DDG: row_dim"] 
  "111669149697" -> "30064771101"  [ label = "DDG: "] 
  "30064771101" -> "30064771103"  [ label = "DDG: row_dim"] 
  "111669149697" -> "30064771103"  [ label = "DDG: "] 
  "30064771099" -> "30064771106"  [ label = "DDG: *num_rows"] 
  "30064771102" -> "30064771106"  [ label = "DDG: num_cols"] 
  "111669149697" -> "30064771106"  [ label = "DDG: "] 
  "111669149697" -> "30064771108"  [ label = "DDG: "] 
  "30064771106" -> "30064771108"  [ label = "DDG: *num_rows"] 
  "30064771106" -> "30064771108"  [ label = "DDG: num_cols"] 
  "115964116994" -> "30064771111"  [ label = "DDG: permutation_indices"] 
  "111669149697" -> "30064771111"  [ label = "DDG: "] 
  "30064771115" -> "30064771113"  [ label = "DDG: perm_shape"] 
  "111669149697" -> "30064771113"  [ label = "DDG: "] 
  "30064771096" -> "30064771113"  [ label = "DDG: rank"] 
  "111669149697" -> "30064771116"  [ label = "DDG: "] 
  "30064771113" -> "30064771116"  [ label = "DDG: rank"] 
  "30064771117" -> "30064771116"  [ label = "DDG: perm_shape"] 
  "30064771120" -> "30064771119"  [ label = "DDG: perm_shape"] 
  "30064771120" -> "30064771119"  [ label = "DDG: rank - 2"] 
  "30064771108" -> "30064771119"  [ label = "DDG: *num_rows"] 
  "111669149697" -> "30064771123"  [ label = "DDG: "] 
  "30064771124" -> "30064771123"  [ label = "DDG: perm_shape"] 
  "30064771124" -> "30064771123"  [ label = "DDG: rank - 2"] 
  "30064771119" -> "30064771123"  [ label = "DDG: *num_rows"] 
  "30064771086" -> "30064771129"  [ label = "DDG: sparse_matrix"] 
  "111669149697" -> "30064771129"  [ label = "DDG: "] 
  "30064771127" -> "30064771130"  [ label = "DDG: *batch_size"] 
  "111669149697" -> "30064771130"  [ label = "DDG: "] 
  "115964116993" -> "30064771074"  [ label = "DDG: sparse_matrix"] 
  "111669149697" -> "30064771074"  [ label = "DDG: "] 
  "30064771076" -> "30064771075"  [ label = "DDG: DataTypeToEnum"] 
  "30064771076" -> "30064771075"  [ label = "DDG: T"] 
  "30064771080" -> "30064771079"  [ label = "DDG: DataTypeToEnum&lt;T"] 
  "30064771080" -> "30064771079"  [ label = "DDG: ::value"] 
  "30064771084" -> "30064771083"  [ label = "DDG: sparse_matrix"] 
  "30064771087" -> "30064771091"  [ label = "DDG: rank"] 
  "111669149697" -> "30064771091"  [ label = "DDG: "] 
  "30064771091" -> "30064771092"  [ label = "DDG: rank"] 
  "111669149697" -> "30064771092"  [ label = "DDG: "] 
  "30064771093" -> "30064771096"  [ label = "DDG: rank"] 
  "111669149697" -> "30064771096"  [ label = "DDG: "] 
  "30064771101" -> "30064771104"  [ label = "DDG: row_dim"] 
  "111669149697" -> "30064771104"  [ label = "DDG: "] 
  "30064771115" -> "30064771114"  [ label = "DDG: perm_shape"] 
  "111669149697" -> "30064771114"  [ label = "DDG: "] 
  "30064771115" -> "30064771117"  [ label = "DDG: perm_shape"] 
  "111669149697" -> "30064771117"  [ label = "DDG: "] 
  "30064771117" -> "30064771120"  [ label = "DDG: perm_shape"] 
  "111669149697" -> "30064771120"  [ label = "DDG: "] 
  "30064771121" -> "30064771120"  [ label = "DDG: rank"] 
  "30064771121" -> "30064771120"  [ label = "DDG: 2"] 
  "30064771120" -> "30064771124"  [ label = "DDG: perm_shape"] 
  "111669149697" -> "30064771124"  [ label = "DDG: "] 
  "30064771125" -> "30064771124"  [ label = "DDG: rank"] 
  "30064771125" -> "30064771124"  [ label = "DDG: 2"] 
  "30064771118" -> "30064771132"  [ label = "DDG: ctx"] 
  "111669149697" -> "30064771132"  [ label = "DDG: "] 
  "30064771133" -> "30064771132"  [ label = "DDG: perm_shape.dim_size(0)"] 
  "30064771133" -> "30064771132"  [ label = "DDG: *batch_size"] 
  "30064771136" -> "30064771132"  [ label = "DDG: &quot;permutation must have the same batch size &quot;
                                  &quot;as sparse matrix; got: &quot;"] 
  "30064771136" -> "30064771132"  [ label = "DDG: perm_shape.dim_size(0)"] 
  "30064771136" -> "30064771132"  [ label = "DDG: &quot; != &quot;"] 
  "30064771136" -> "30064771132"  [ label = "DDG: *batch_size"] 
  "111669149697" -> "30064771076"  [ label = "DDG: "] 
  "30064771081" -> "30064771080"  [ label = "DDG: DataTypeToEnum"] 
  "30064771081" -> "30064771080"  [ label = "DDG: T"] 
  "30064771075" -> "30064771080"  [ label = "DDG: ::value"] 
  "30064771074" -> "30064771084"  [ label = "DDG: sparse_matrix"] 
  "111669149697" -> "30064771084"  [ label = "DDG: "] 
  "30064771110" -> "30064771115"  [ label = "DDG: perm_shape"] 
  "111669149697" -> "30064771115"  [ label = "DDG: "] 
  "30064771116" -> "30064771121"  [ label = "DDG: rank"] 
  "111669149697" -> "30064771121"  [ label = "DDG: "] 
  "30064771121" -> "30064771125"  [ label = "DDG: rank"] 
  "111669149697" -> "30064771125"  [ label = "DDG: "] 
  "30064771134" -> "30064771133"  [ label = "DDG: perm_shape"] 
  "30064771134" -> "30064771133"  [ label = "DDG: 0"] 
  "30064771130" -> "30064771133"  [ label = "DDG: *batch_size"] 
  "111669149697" -> "30064771136"  [ label = "DDG: "] 
  "30064771137" -> "30064771136"  [ label = "DDG: perm_shape"] 
  "30064771137" -> "30064771136"  [ label = "DDG: 0"] 
  "30064771133" -> "30064771136"  [ label = "DDG: *batch_size"] 
  "30064771076" -> "30064771081"  [ label = "DDG: DataTypeToEnum"] 
  "111669149697" -> "30064771081"  [ label = "DDG: "] 
  "30064771076" -> "30064771081"  [ label = "DDG: T"] 
  "30064771124" -> "30064771134"  [ label = "DDG: perm_shape"] 
  "111669149697" -> "30064771134"  [ label = "DDG: "] 
  "30064771134" -> "30064771137"  [ label = "DDG: perm_shape"] 
  "111669149697" -> "30064771137"  [ label = "DDG: "] 
  "30064771130" -> "30064771133"  [ label = "CDG: "] 
  "30064771130" -> "30064771132"  [ label = "CDG: "] 
  "30064771130" -> "30064771135"  [ label = "CDG: "] 
  "30064771130" -> "30064771134"  [ label = "CDG: "] 
  "30064771130" -> "30064771137"  [ label = "CDG: "] 
  "30064771130" -> "30064771136"  [ label = "CDG: "] 
  "30064771130" -> "30064771138"  [ label = "CDG: "] 
  "30064771091" -> "30064771092"  [ label = "CDG: "] 
}
"""
)
